# file opened: eliteNext.asm
   1  0000               DEVICE ZXSPECTRUMNEXT
   2  0000               DEFINE  DOUBLEBUFFER 1
   3  0000               ;DEFINE  LOGMATHS     1
   4  0000               ;DEFINE  DIAGSPRITES 1
   5  0000               ; DEFINE   SKIPATTRACT 1
   6  0000               ; DEFINE DEBUGMISSILETEST 1
   7  0000               CSPECTMAP eliteN.map
   8  0000               OPT --zxnext=cspect --syntax=a --reversepop
   9  0000                              DEFINE  SOUNDPACE 3
  10  0000                              DEFINE  ENABLE_SOUND 1
  11  0000              ; DEFINE     MAIN_INTERRUPTENABLE 1
  12  0000               ;               DEFINE INTERRUPT_BLOCKER 1
  13  0000              DEBUGSEGSIZE   equ 1
  14  0000              DEBUGLOGSUMMARY equ 1
  15  0000              ;DEBUGLOGDETAIL equ 1
  16  0000
  17  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  18  0000              ; Game Defines
  19  0000              ScreenLocal      EQU 0
  20  0000              ScreenGalactic   EQU ScreenLocal + 1
  21  0000              ScreenMarket     EQU ScreenGalactic + 1
  22  0000              ScreenMarketDsp  EQU ScreenMarket + 1
  23  0000              ScreenStatus     EQU ScreenMarketDsp + 1
  24  0000              ScreenInvent     EQU ScreenStatus + 1
  25  0000              ScreenPlanet     EQU ScreenInvent + 1
  26  0000              ScreenEquip      EQU ScreenPlanet + 1
  27  0000              ScreenLaunch     EQU ScreenEquip + 1
  28  0000              ScreenFront      EQU ScreenLaunch + 1
  29  0000              ScreenAft        EQU ScreenFront+1
  30  0000              ScreenLeft       EQU ScreenAft+1
  31  0000              ScreenRight      EQU ScreenLeft+1
  32  0000              ScreenDocking    EQU ScreenRight+1
  33  0000              ScreenHyperspace EQU ScreenDocking+1
  34  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  35  0000              ; Colour Defines
  36  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
   3+ 0000              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
   4+ 0000              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
   5+ 0000              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
   6+ 0000              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
   7+ 0000              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
   8+ 0000              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
   9+ 0000              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
  10+ 0000              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
  11+ 0000              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
  12+ 0000              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
  13+ 0000              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
  14+ 0000              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
  15+ 0000              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
  16+ 0000              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
  17+ 0000              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
  18+ 0000              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
  19+ 0000              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
  20+ 0000              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
  21+ 0000              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
  22+ 0000              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
  23+ 0000              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
  24+ 0000              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
  25+ 0000
  26+ 0000
  27+ 0000              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
  28+ 0000              L2ColourWHITE_2         EQU 146
  29+ 0000              L2ColourGREY_1		    EQU L2ColourWHITE_2
  30+ 0000              L2ColourGREY_2		    EQU 109
  31+ 0000              L2ColourGREY_3		    EQU  73
  32+ 0000              L2ColourGREY_4		    EQU  37
  33+ 0000
  34+ 0000              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
  35+ 0000              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
  36+ 0000              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
  37+ 0000              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
  38+ 0000              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
  39+ 0000
  40+ 0000              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
  41+ 0000              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
  42+ 0000              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
  43+ 0000              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
  44+ 0000              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
  45+ 0000              L2ColourORANGE_1        EQU 236                 ; RGB
  46+ 0000              L2ColourORANGE_2        EQU 168                 ; RGB
  47+ 0000              L2ColourORANGE_3        EQU  68                 ; RGB
  48+ 0000              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
  49+ 0000              L2ColourCYAN_2          EQU  18                 ; RGB
  50+ 0000              L2ColourCYAN_3          EQU   9                 ; RGB
  51+ 0000              L2ColourPURPLE_1        EQU 109                 ; RGB
  52+ 0000              L2ColourPURPLE_2        EQU  66                 ; RGB
  53+ 0000              L2ColourPURPLE_3        EQU  33                 ; RGB
  54+ 0000              L2ColourPINK_1		    EQU 231                 ; RGB
  55+ 0000              L2ColourPINK_2		    EQU 226                 ; RGB
  56+ 0000              L2ColourPINK_3		    EQU 225                 ; RGB
  57+ 0000              L2ColourPINK_4		    EQU 224                 ; RGB
  58+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  37  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  38  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  39  0000              ; Total screen list
  40  0000              ; Local Chart
  41  0000              ; Galactic Chart
  42  0000              ; Market Prices
  43  0000              ; Inventory
  44  0000              ; Comander status
  45  0000              ; System Data
  46  0000              ; Mission Briefing
  47  0000              ; missio completion
  48  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  49  0000              ; Pause Menu (only place you can load from )
  50  0000              ; byint and selling equipment
  51  0000              ; bying and selling stock
  52  0000
  53  0000                                      INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              ; Peripheral 2
   2+ 0000              ENABLE_CPU_SPEED_MODE                   EQU %10000000
   3+ 0000              DIVERT_BEEP_ONLY                        EQU %01000000
   4+ 0000              ENABLE_50_60_SWITCH                     EQU %00100000
   5+ 0000              ENABLE_MMCAUTO_SWITCH                   EQU %00010000
   6+ 0000              ENABLE_MULTIFACE_M1                     EQU %00001000
   7+ 0000              PS2MODE_KEYBOARD                        EQU %00000000
   8+ 0000              PS2MODE_MOUSE                           EQU %00000100
   9+ 0000              AUDIO_CHIPMODE_YM                       EQU %00000000
  10+ 0000              AUDIO_CHIPMODE_AY                       EQU %00000001
  11+ 0000              AUDIO_CHIPMODE_DISABLED                 EQU %00000010
  12+ 0000              INTERNAL_SPEAKER_ENABLE                 EQU %00010000
  13+ 0000              ; Peripheral 3
  14+ 0000              UNLOCK_PORT_7FFD_PAGING                 EQU %10000000
  15+ 0000              DISABLE_RAM_IO_CONTENTION               EQU %01000000
  16+ 0000              AY_STEREO_MODE_ACB                      EQU %00100000
  17+ 0000              INTERNAL_SPEAKER                        EQU %00010000
  18+ 0000              ENABLE_DACS                             EQU %00001000
  19+ 0000              ENABLE_TIMEX_VIDEO_MODE                 EQU %00000100
  20+ 0000              ENABLE_TURBO_SOUND                      EQU %00000010
  21+ 0000              ENABLE_ISSUE2_KEYBOARD                  EQU %00000001
  22+ 0000              ; Peripheral 4
  23+ 0000              ENABLE_AY2_MONO                         EQU %10000000
  24+ 0000              ENABLE_AY1_MONO                         EQU %01000000
  25+ 0000              ENABLE_AY0_MONO                         EQU %00100000
  26+ 0000              SPRITE_ID_LOCKSTEP                      EQU %00010000
  27+ 0000              RESET_DIVMMC_MAPRAM                     EQU %00001000
  28+ 0000              SILENCE_HDMI_AUDIO                      EQU %00000100
  29+ 0000              SCALLINES_50PCT                         EQU %00000001
  30+ 0000              SCANLINES_25PCT                         EQU %00000010
  31+ 0000              SCANLINES_125PCT                        EQU %00000011
  32+ 0000              ; Audio Registers
  33+ 0000              CHANNEL_A_FINE                          EQU 0
  34+ 0000              CHANNEL_A_COARSE                        EQU 1
  35+ 0000              CHANNEL_B_FINE                          EQU 2
  36+ 0000              CHANNEL_B_COARSE                        EQU 3
  37+ 0000              CHANNEL_C_FINE                          EQU 4
  38+ 0000              CHANNEL_C_COARSE                        EQU 5
  39+ 0000              NOISE_PERIOD                            EQU 6
  40+ 0000              TONE_ENABLE                             EQU 7
  41+ 0000              CHANNEL_A_AMPLITUDE                     EQU 8
  42+ 0000              CHANNEL_B_AMPLITUDE                     EQU 9
  43+ 0000              CHANNEL_C_AMPLITUDE                     EQU 10
  44+ 0000              ENVELOPE_PERIOD_FINE                    EQU 11
  45+ 0000              ENVELOPE_PERIOD_COARSE                  EQU 12
  46+ 0000              ENVELOPE_SHAPE                          EQU 13
  47+ 0000
  48+ 0000              ENVELOPE_HOLD_ON                        EQU 1
  49+ 0000              ENVELOPE_ALTERNATE_ON                   EQU 2
  50+ 0000              ENVELOPE_ATTACK_ON                      EQU 4
  51+ 0000              ENVELOPE_CONTINUE_ON                    EQU 8
  52+ 0000
  53+ 0000              ENVELOPE_SHAPE_SINGLE_DECAY             EQU 0                                                                                    ; \____________
  54+ 0000              ENVELOPE_SHAPE_SINGLE_ATTACK            EQU                        ENVELOPE_ATTACK_ON                                            ; /|___________
  55+ 0000              ENVELOPE_SHAPE_REPEAT_DECAY             EQU ENVELOPE_CONTINUE_ON                                                                 ; \|\|\|\|\|\|\
  56+ 0000              ENVELOPE_SHAPE_REPEAT_DECAY_ATTACK      EQU ENVELOPE_CONTINUE_ON |                      ENVELOPE_ALTERNATE_ON                    ; \/\/\/\/\/\/\
  57+ 0000              ENVELOPE_SHAPE_SINGLE_DECAY_HOLD        EQU ENVELOPE_CONTINUE_ON |                      ENVELOPE_ALTERNATE_ON | ENVELOPE_HOLD_ON ; \|-----------
  58+ 0000              ENVELOPE_SHAPE_REPEAT_ATTACK            EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON                                            ; /|/|/|/|/|/|/|
  59+ 0000              ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD       EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON |                         ENVELOPE_HOLD_ON ; /------------
  60+ 0000              ENVELOPE_SHAPE_REPEAT_ATTACK_DECAY      EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON | ENVELOPE_ALTERNATE_ON                    ; /\/\/\/\/\/\/
  61+ 0000
  62+ 0000              ENVELOPE_HOLD                           EQU %00000001
  63+ 0000              ENVELOPE_ALTERNATE                      EQU %00000010
  64+ 0000              ENVELOPE_ATTACK                         EQU %00000010
  65+ 0000              ENVELOPE_CONTINUE                       EQU %00000010
  66+ 0000              ; Sound Control
  67+ 0000              TONE_CHANNEL_A                          EQU %00000001
  68+ 0000              TONE_CHANNEL_B                          EQU %00000010
  69+ 0000              TONE_CHANNEL_C                          EQU %00000100
  70+ 0000              NOISE_CHANNEL_A                         EQU %00001000
  71+ 0000              NOISE_CHANNEL_B                         EQU %00010000
  72+ 0000              NOISE_CHANNEL_C                         EQU %00100000
  73+ 0000              ; Version for AND to enabled (its inverted)
  74+ 0000              TONE_CHANNEL_A_ON                       EQU %11111110
  75+ 0000              TONE_CHANNEL_B_ON                       EQU %11111101
  76+ 0000              TONE_CHANNEL_C_ON                       EQU %11111011
  77+ 0000              NOISE_CHANNEL_A_ON                      EQU %11110111
  78+ 0000              NOISE_CHANNEL_B_ON                      EQU %11101111
  79+ 0000              NOISE_CHANNEL_C_ON                      EQU %11011111
  80+ 0000
  81+ 0000              ; Turbo Sound Control
  82+ 0000              TURBO_MANDATORY                         EQU %10011100
  83+ 0000              TURBO_LEFT                              EQU %01000000
  84+ 0000              TURBO_RIGHT                             EQU %00100000
  85+ 0000              TURBO_CHIP_AY3                          EQU %00000011
  86+ 0000              TURBO_CHIP_AY2                          EQU %00000010
  87+ 0000              TURBO_CHIP_AY1                          EQU %00000001
  88+ 0000
  89+ 0000              IO_LAYER2_PORT                          EQU $123B
  90+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
  91+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
  92+ 0000              REGISTER_NUMBER_PORT					EQU $243B
  93+ 0000              REGISTER_VALUE_PORT						EQU $253B
  94+ 0000              SPRITE_SLOT_PORT						EQU $303B ; port for sprite and pattern index
  95+ 0000              SPRITE_INFO_PORT                        EQU $0057
  96+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
  97+ 0000              TURBO_SOUND_NEXT_CONTROL                EQU $FFFD
  98+ 0000              SOUND_CHIP_REGISTER_WRITE               EQU $BFFD
  99+ 0000              IO_KEYBOARD_PORT                        EQU $FE
 100+ 0000              IO_DATAGEAR_DMA_PORT 		            EQU $6B
 101+ 0000              UART_TX_PORT_PORT                       EQU $133B
 102+ 0000              UART_RX_PORT_PORT                       EQU $143B
 103+ 0000              UART_CONTROL_PORT                       EQU $153B
 104+ 0000              UART_FRAME_PORT                         EQU $163B
 105+ 0000              CTC_CHANNEL1_PORT                       EQU $183B
 106+ 0000              CTC_CHANNEL2_PORT                       EQU $193B
 107+ 0000              CTC_CHANNEL3_PORT                       EQU $1A3B
 108+ 0000              CTC_CHANNEL4_PORT                       EQU $1B3B
 109+ 0000              PLUS_3_MEMORY_PAGING_CONTROL_PORT       EQU $1FFD
 110+ 0000              MB02_DMA_PORT                           EQU $0B
 111+ 0000              SPECDRUM_DAC_OUTPUT                     EQU $DF
 112+ 0000
 113+ 0000              Speed_3_5MHZ                            EQU 0
 114+ 0000              Speed_7MHZ                              EQU 1
 115+ 0000              Speed_14MHZ                             EQU 2
 116+ 0000              Speed_28MHZ                             EQU 3
 117+ 0000
 118+ 0000
 119+ 0000              MACHINE_ID_REGISTER						EQU 0
 120+ 0000              VERSION_REGISTER						EQU 1
 121+ 0000              RESET_REGISTER		    				EQU 2
 122+ 0000              MACHINE_TYPE_REGISTER					EQU 3
 123+ 0000              PAGE_RAM_REGISTER						EQU 4
 124+ 0000              PERIPHERAL_1_REGISTER					EQU 5   ; Sets joystick mode, video frequency and Scandoubler
 125+ 0000              PERIPHERAL_2_REGISTER					EQU 6   ; Enables CPU Speed key, DivMMC, Multiface, Mouse and AY audio.
 126+ 0000              TURBO_MODE_REGISTER						EQU 7
 127+ 0000              PERIPHERAL_3_REGISTER					EQU 8   ; ABC/ACB Stereo, Internal Speaker, SpecDrum, Timex Video Modes, Turbo Sound Next, RAM contention and [un]lock 128k paging
 128+ 0000              PERIPHERAL_4_REGISTER                   EQU 9   ; Sets scanlines, AY mono output, Sprite-id lockstep, reset DivMMC mapram and disable HDMI audio
 129+ 0000              PERIPHERAL_5_REGISTER                   EQU 10  ; Mouse
 130+ 0000              CORE_VERSION_REGISTER                   EQU 14
 131+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 16
 132+ 0000              VIDEO_TIMING_REGISTER                   EQU 17
 133+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
 134+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
 135+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
 136+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
 137+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
 138+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
 139+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
 140+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
 141+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
 142+ 0000              CLIP_WINDOW_TILEMAP_REGISTER            EQU 27
 143+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
 144+ 0000              ;29 not used
 145+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
 146+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
 147+ 0000              ; 32 to 34 not used
 148+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
 149+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
 150+ 0000              ULA_X_OFFSET_REGISTER                   EQU 38
 151+ 0000              ULA_Y_OFFSET_REGSITER                   EQU 39
 152+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
 153+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
 154+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
 155+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
 156+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
 157+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
 158+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
 159+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
 160+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
 161+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
 162+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
 163+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
 164+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
 165+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
 166+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
 167+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
 168+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
 169+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
 170+ 0000              PALETTE_INDEX_REGISTER					EQU 64
 171+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
 172+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
 173+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
 174+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
 175+ 0000              TRANSPARENCY_COLOUR_FALLBACK_REGISTER   EQU 69
 176+ 0000              SPRITES_TRANSPARENCY_INDEX_REGISTER     EQU 70
 177+ 0000              TILEMAP_TRANSPARENCY_INDEX_REGISTER     EQU 71
 178+ 0000              ; 72 to 79 unused
 179+ 0000              MMU_SLOT_0_REGISTER						EQU 80
 180+ 0000              MMU_SLOT_1_REGISTER						EQU 81
 181+ 0000              MMU_SLOT_2_REGISTER						EQU 82
 182+ 0000              MMU_SLOT_3_REGISTER						EQU 83
 183+ 0000              MMU_SLOT_4_REGISTER						EQU 84
 184+ 0000              MMU_SLOT_5_REGISTER						EQU 85
 185+ 0000              MMU_SLOT_6_REGISTER						EQU 86
 186+ 0000              MMU_SLOT_7_REGISTER						EQU 87
 187+ 0000              ; 88 to 95 unused
 188+ 0000              COPPER_DATA_REGISTER					EQU 96
 189+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
 190+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
 191+ 0000              COPPER_DATA_16BIT_WRITE_REGISTER        EQU 99
 192+ 0000              VERTICAL_VIDEO_LINE_OFFSET_REGISTER     EQU 100
 193+ 0000              ULA_CONTROL_REGISTER                    EQU 104
 194+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
 195+ 0000              LORES_CONTROL_REGISTER                  EQU 106
 196+ 0000              TILEMAP_CONTROL_REGISTER                EQU 107
 197+ 0000              DEFAULT_TILEMAP_ATTRIBUTE_REGISTER      EQU 108
 198+ 0000              ; 109 unused
 199+ 0000              TILEMAP_BASE_ADDRESS_REGISTER           EQU 110
 200+ 0000              TILE_DEFINITIONS_BASE_ADDRESS_REGISTER  EQU 111
 201+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
 202+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
 203+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_1          EQU 114
 204+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_2          EQU 115
 205+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_3          EQU 116
 206+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_4          EQU 117
 207+ 0000              USER_STORAGE_0_REGISTER                 EQU 118 ; general purpose variable, e.g. for copper
 208+ 0000              EXPANSION_BUS_ENABLE_REGISTER
 209+ 0000
 210+ 0000              INTERUPT_CONTROL                        EQU $0C ; Interrupt control
 211+ 0000              NMI_RETURN_LSB				            EQU	$0C2	; NMI Return Address LSB
 212+ 0000              NMI_RETURN_MSB				            EQU	$0C3	; NMI Return Address MSB
 213+ 0000              INTERRUPT_EN0				            EQU	$0C4	; INT EN 0
 214+ 0000              INTERRUPT_EN1				            EQU	$0C5	; INT EN 1
 215+ 0000              INTERRUPT_EN2				            EQU	$0C6	; INT EN 2
 216+ 0000              INTERRUPT_ST0				            EQU	$0C8	; INT status 0
 217+ 0000              INTERRUPT_ST1				            EQU	$0C9	; INT status 1
 218+ 0000              INTERRUPT_ST2				            EQU	$0CA	; INT status 2
 219+ 0000              INTERRUPT_DM0				            EQU	$0CC	; INT DMA EN 0
 220+ 0000              INTERRUPT_DM1				            EQU	$0CD	; INT DMA EN 1
 221+ 0000              INTERRUPT_DM2				            EQU	$0CE	; INT DMA EN 2
 222+ 0000              CTC_CHANNEL_0				            EQU	$183B	; CTC channel 0 port
 223+ 0000              CTC_CHANNEL_1				            EQU	$193B	; CTC channel 1 port
 224+ 0000              CTC_CHANNEL_2				            EQU	$1A3B	; CTC channel 2 port
 225+ 0000              CTC_CHANNEL_3				            EQU	$1B3B	; CTC channel 3 port
 226+ 0000              CTC_CHANNEL_4				            EQU	$1C3B	; CTC channel 4 port
 227+ 0000              CTC_CHANNEL_5				            EQU	$1D3B	; CTC channel 5 port
 228+ 0000              CTC_CHANNEL_6				            EQU	$1E3B	; CTC channel 6 port
 229+ 0000              CTC_CHANNEL_7				            EQU	$1F3B	; CTC channel 7 port
 230+ 0000              CTCBASE                                 EQU $c0		; MSB Base address of buffer
 231+ 0000              CTCSIZE                                 EQU $04 	; MSB buffer length
 232+ 0000              CTCEND                                  EQU CTCBASE+(CTCSIZE*2)
 233+ 0000
 234+ 0000
 235+ 0000              DEBUG_LEDS_REGISTER						EQU 255
 236+ 0000
 237+ 0000
 238+ 0000              GetNextReg:	MACRO register
 239+ 0000 ~                        push bc
 240+ 0000 ~                            ld bc,$243B
 241+ 0000 ~                                ld a,register
 242+ 0000 ~                                out (c),a
 243+ 0000 ~                                inc b
 244+ 0000 ~                            in a,(c)
 245+ 0000 ~                        pop bc
 246+ 0000                          ENDM
 247+ 0000
# file closed: ./Hardware/register_defines.asm
  54  0000                                      INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_READ_ENABLE_MASK 	equ %00000100
  21+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ %00000001
  22+ 0000              LAYER2_READ_WRITE_MASK      equ %00000101
  23+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  24+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  25+ 0000
  26+ 0000              LAYER2_DISABLE_MEM_WRITE    equ %11111110
  27+ 0000              LAYER2_DISABLE_MEM_READ     equ %11111011
  28+ 0000              LAYER2_DISABLE_MEM_ACCESS   equ %11111010
  29+ 0000
  30+ 0000              LAYER2_SCREEN_BANK1          equ 8
  31+ 0000              LAYER2_SCREEN_BANK2          equ 9
  32+ 0000              LAYER2_SCREEN_BANK3          equ 10
  33+ 0000              LAYER2_SCREEN_BANK4          equ 11     ; used by 320 and 640 mode
  34+ 0000              LAYER2_SCREEN_BANK5          equ 12     ; used by 320 and 640 mode
  35+ 0000              LAYER2_SHADOW_BANK1          equ 13
  36+ 0000              LAYER2_SHADOW_BANK2          equ 14
  37+ 0000              LAYER2_SHADOW_BANK3          equ 15
  38+ 0000              LAYER2_SHADOW_BANK4          equ 16     ; used by 320 and 640 mode
  39+ 0000              LAYER2_SHADOW_BANK5          equ 17     ; used by 320 and 640 mode
  40+ 0000
  41+ 0000              SCREEN_HEIGHT 				 equ 192
  42+ 0000              SCREEN_RAM_BASE				 equ $0000
  43+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  44+ 0000
  45+ 0000              SPRITES_VISIBLE_MASK         equ $01
  46+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  47+ 0000              LAYER_PRIORITIES_MASK        equ $07
  48+ 0000              LORES_MODE_MASK              equ $80
  49+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  50+ 0000
  51+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  52+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  53+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  54+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  55+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  56+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  57+ 0000
  58+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  59+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  60+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  61+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  62+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  63+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  64+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  65+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  66+ 0000              DMA_WR4_CONT_MODE            equ $AD
  67+ 0000              DMA_WR4_BURST_MODE           equ $CD
  68+ 0000              DMA_RESET                    equ $c3
  69+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  70+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  71+ 0000              DMA_LOAD                     equ $cf
  72+ 0000              DMA_CONTINUE                 equ $d3
  73+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  74+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  75+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  76+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  77+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  78+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  79+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  80+ 0000              DMA_FORCE_READY              equ $b3
  81+ 0000              DMA_STOP_AT_END			     equ $82
  82+ 0000              DMA_DISABLE                  equ $83
  83+ 0000              DMA_ENABLE                   equ $87
  84+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  85+ 0000              DMA_BURST                    equ $cd
  86+ 0000              DMA_CONTINUOUS               equ $ad
  87+ 0000              ZXN_DMA_PORT                 equ $6b
  88+ 0000
  89+ 0000
  90+ 0000              COLOUR_TRANSPARENT			 equ $E3
  91+ 0000
  92+ 0000
  93+ 0000
  94+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  55  0000                                      INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              MathsTablesAddr         equ $0000
   9+ 0000              membank1 			    equ $2000
  10+ 0000              membank2 			    equ $4000
  11+ 0000              membank3 			    equ $6000
  12+ 0000              membank4 			    equ $8000
  13+ 0000              membank5 			    equ $a000
  14+ 0000              membank6 			    equ $c000
  15+ 0000              ScreenBank              equ $c000
  16+ 0000              MenuGalChtAddr          equ $c000
  17+ 0000              MenuEquipSAddr          equ $c000
  18+ 0000              MenuInventAddr          equ $c000
  19+ 0000              MenuMarketAddr          equ $c000
  20+ 0000              DispMarketAddr          equ $c000
  21+ 0000              MenuShrChtAddr          equ $c000
  22+ 0000              MenuStatusAddr          equ $c000
  23+ 0000              MenuSystemAddr          equ $c000
  24+ 0000              ViewFrontAddr           equ $c000
  25+ 0000              SunBankAddr             equ $c000
  26+ 0000              PlanetBankAddr          equ $c000
  27+ 0000              UniverseBankAddr	    equ $c000
  28+ 0000              LaunchShipAddr          equ $c000
  29+ 0000              membank7 			    equ $e000
  30+ 0000              L1membankAddr   	    equ $e000
  31+ 0000              L2membankAddr   	    equ $e000
  32+ 0000              ShipModelsAddr	        equ $e000
  33+ 0000              SpritemembankAddr       equ $e000
  34+ 0000              ResetUniverseAddr       equ $e000
  35+ 0000              StockTableAddr	        equ $e000
  36+ 0000              CommanderAddr           equ $e000
  37+ 0000              LAYER2Addr              equ $e000
  38+ 0000              LAYER1Addr              equ $e000
  39+ 0000              SPRITEAddr              equ $e000
  40+ 0000              ConsoleImageAddr        equ $e000
  41+ 0000              GalaxyDataAddr          equ $e000
  42+ 0000              SoundAddr               equ $e000
  43+ 0000
  44+ 0000              EXSDOSMMU0              equ MMU_SLOT_0_REGISTER
  45+ 0000              MathsTablesMMU          equ MMU_SLOT_0_REGISTER
  46+ 0000              ShipReadMMU             equ MMU_SLOT_0_REGISTER
  47+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  48+ 0000              EXSDOSMMU1              equ MMU_SLOT_1_REGISTER
  49+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  50+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  51+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  52+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  53+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  54+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  55+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  56+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  57+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  58+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  59+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  60+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  61+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  62+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  63+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  64+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  65+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  66+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  67+ 0000              CommanderMMU	        equ MMU_SLOT_7_REGISTER
  68+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  69+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  70+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  71+ 0000              SoundMMU                equ MMU_SLOT_7_REGISTER
  72+ 0000
  73+ 0000              ; banks 8 to 17 are reserved for layer 2 memory
  74+ 0000              BankResetUniv           equ 49
  75+ 0000              BankMenuShrCht          equ 50
  76+ 0000              BankMenuGalCht          equ 51
  77+ 0000              BankMenuInvent          equ 52
  78+ 0000              BankMenuSystem          equ 53
  79+ 0000              BankMenuMarket          equ 54
  80+ 0000              BankStockTable          equ 55
  81+ 0000              BankCommander           equ 56
  82+ 0000              BankLAYER2              equ 57
  83+ 0000              BankLAYER1              equ 58
  84+ 0000              BankShipModels1         equ 59
  85+ 0000              BankSPRITE              equ 60
  86+ 0000              BankConsole             equ 61
  87+ 0000              BankFrontView           equ 62
  88+ 0000              BankMenuStatus          equ 63
  89+ 0000              BankMenuEquipS          equ 64
  90+ 0000              BankLaunchShip          equ 65
  91+ 0000              BankDispMarket          equ 66
  92+ 0000              BankShipModels2         equ 67
  93+ 0000              BankShipModels3         equ 68
  94+ 0000              BankShipModels4         equ 69
  95+ 0000
  96+ 0000              BankUNIVDATA0           equ 70
  97+ 0000              BankUNIVDATA1           equ 71
  98+ 0000              BankUNIVDATA2           equ 72
  99+ 0000              BankUNIVDATA3           equ 73
 100+ 0000              BankUNIVDATA4           equ 74
 101+ 0000              BankUNIVDATA5           equ 75
 102+ 0000              BankUNIVDATA6           equ 76
 103+ 0000              BankUNIVDATA7           equ 77
 104+ 0000              BankUNIVDATA8           equ 78
 105+ 0000              BankUNIVDATA9           equ 79
 106+ 0000              BankUNIVDATA10          equ 80
 107+ 0000              BankUNIVDATA11          equ 81
 108+ 0000              BankUNIVDATA12          equ 82
 109+ 0000              BankSunData             equ 83
 110+ 0000              BankPlanetData          equ 84
 111+ 0000
 112+ 0000              BankGalaxyData0         equ 91
 113+ 0000              BankGalaxyData1         equ 92
 114+ 0000              BankGalaxyData2         equ 93
 115+ 0000              BankGalaxyData3         equ 94
 116+ 0000              BankGalaxyData4         equ 95
 117+ 0000              BankGalaxyData5         equ 96
 118+ 0000              BankGalaxyData6         equ 97
 119+ 0000              BankGalaxyData7         equ 98
 120+ 0000
 121+ 0000              BankMathsTables         equ 99
 122+ 0000              BankSound               equ 100
 123+ 0000
 124+ 0000              BankROM                 equ 255
 125+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  56  0000                                      INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: ./Hardware/screen_equates.asm
  57  0000                                      INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	        equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	        equ 1
   3+ 0000              MissileLockHiOffset	        equ 2
   4+ 0000              EdgeAddyOffset		        equ 3
   5+ 0000              LineX4Offset		        equ 5
   6+ 0000              GunVertexOffset		        equ 6
   7+ 0000              ExplosionCtOffset	        equ 7
   8+ 0000              VertexCountOffset           equ 8
   9+ 0000              VertexCtX6Offset	        equ 9
  10+ 0000              EdgeCountOffset		        equ 10
  11+ 0000              BountyLoOffset		        equ 11
  12+ 0000              BountyHiOffset		        equ 12
  13+ 0000              FaceCtX4Offset		        equ 13
  14+ 0000              DotOffset			        equ 14
  15+ 0000              EnergyOffset		        equ 15
  16+ 0000              SpeedOffset			        equ 16
  17+ 0000              FaceAddyOffset		        equ 17
  18+ 0000              QOffset				        equ 19
  19+ 0000              LaserOffset			        equ 20
  20+ 0000              VerticiesAddyOffset         equ 21
  21+ 0000              ShipTypeOffset              equ 23
  22+ 0000              ShipNewBitsOffset           equ 24
  23+ 0000              ShipAIFlagsOffset           equ 25
  24+ 0000              ShipECMFittedChanceOffset   equ 26
  25+ 0000              ShipDataLength              equ ShipECMFittedChanceOffset+1
  26+ 0000
  27+ 0000              CobraTablePointer           equ 43
  28+ 0000              ;29 faulty
  29+ 0000              BankThreshold               equ 16
  30+ 0000
  31+ 0000              ShipTableALast              equ 23
  32+ 0000              ShipTableBLast              equ 39
  33+ 0000              ShipTableCLast              equ 55
  34+ 0000
# file closed: ./Data/ShipModelEquates.asm
  58  0000                                      INCLUDE "./Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1+ 0000              InitNoDoubleBuffer:         MACRO
   2+ 0000 ~                                        MMUSelectLayer1
   3+ 0000 ~                                        call	l1_cls
   4+ 0000 ~                                        ld		a,7
   5+ 0000 ~                                        call	l1_attr_cls_to_a
   6+ 0000 ~                                        MMUSelectLayer2
   7+ 0000 ~                                        call    asm_l2_double_buffer_off
   8+ 0000 ~                                        call	l2_cls	; Get some space
   9+ 0000 ~                                        MMUSelectSpriteBank
  10+ 0000 ~                                        call    sprite_cls_cursors
  11+ 0000                                          ENDM
  12+ 0000
  13+ 0000
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
  59  0000                                      INCLUDE "./Macros/graphicsMacros.asm"
# file opened: ./Macros/graphicsMacros.asm
   1+ 0000              ; General Graphics macros
   2+ 0000              DoubleBufferIfPossible: MACRO
   3+ 0000 ~                                    IFDEF DOUBLEBUFFER
   4+ 0000 ~                                        MMUSelectLayer2
   5+ 0000 ~                                        call  l2_cls
   6+ 0000 ~                                        call  l2_flip_buffers
   7+ 0000 ~                                    ENDIF
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              DoubleBuffer320IfPossible: MACRO
  11+ 0000 ~                                    IFDEF DOUBLEBUFFER
  12+ 0000 ~                                        MMUSelectLayer2
  13+ 0000 ~                                        call  l2_320_cls
  14+ 0000 ~                                        call  l2_flip_buffers
  15+ 0000 ~                                    ENDIF
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              DoubleBuffer640IfPossible: MACRO
  19+ 0000 ~                                    IFDEF DOUBLEBUFFER
  20+ 0000 ~                                        MMUSelectLayer2
  21+ 0000 ~                                        call  l2_640_cls
  22+ 0000 ~                                        call  l2_flip_buffers
  23+ 0000 ~                                    ENDIF
  24+ 0000                                      ENDM
  25+ 0000
# file closed: ./Macros/graphicsMacros.asm
  60  0000                                      INCLUDE "./Macros/callMacros.asm"
# file opened: ./Macros/callMacros.asm
   1+ 0000
   2+ 0000              CallIfAEqNusng:         MACRO   reg,target
   3+ 0000 ~                                    cp      reg
   4+ 0000 ~                                    call	z,target
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              CallIfAGTENusng:        MACRO   reg,target
   8+ 0000 ~                                    cp      reg
   9+ 0000 ~                                    call	nc,target
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              CallIfAGTEMemusng:      MACRO   reg,target
  13+ 0000 ~                                    ld      hl,reg
  14+ 0000 ~                                    cp      (hl)
  15+ 0000 ~                                    call	nc,target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              CallIfALTMemusng:       MACRO   reg,target
  19+ 0000 ~                                    ld      hl,reg
  20+ 0000 ~                                    cp      (hl)
  21+ 0000 ~                                    call	c,target
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              CallIfALTNusng:         MACRO   reg,target
  25+ 0000 ~                                    cp      reg
  26+ 0000 ~                                    call	c,target
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    ld      hl,address
  32+ 0000 ~                                    cp      (hl)
  33+ 0000 ~                                    call    z,target
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              CallIfMemEqNusng:       MACRO mem, value, target
  37+ 0000 ~                                    ld      a,(mem)
  38+ 0000 ~                                    cp      value
  39+ 0000 ~                                    call    z,target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000
  43+ 0000              CallIfMemGTENusng:      MACRO mem, value, target
  44+ 0000 ~                                    ld      a,(mem)
  45+ 0000 ~                                    cp      value
  46+ 0000 ~                                    call    nc,target
  47+ 0000                                      ENDM
  48+ 0000
  49+ 0000              CallIfMemTrue:          MACRO mem, target
  50+ 0000 ~                                    ld      a,(mem)
  51+ 0000 ~                                    and     a
  52+ 0000 ~                                    call    z, target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              CallIfMemFalse:         MACRO mem, target
  56+ 0000 ~                                    ld      a,(mem)
  57+ 0000 ~                                    and     a
  58+ 0000 ~                                    call    nz, target
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              CallIfMemZero:          MACRO mem, target
  62+ 0000 ~                                    ld      a,(mem)
  63+ 0000 ~                                    and     a
  64+ 0000 ~                                    call    z, target
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              CallIfMemNotZero:       MACRO mem, target
  68+ 0000 ~                                    ld      a,(mem)
  69+ 0000 ~                                    and     a
  70+ 0000 ~                                    call    nz, target
  71+ 0000                                      ENDM
  72+ 0000              CallIfATrue:            MACRO target
  73+ 0000 ~                                    and     a
  74+ 0000 ~                                    call    z, target
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              CallIfAFalse:           MACRO target
  78+ 0000 ~                                    and     a
  79+ 0000 ~                                    call    nz, target
  80+ 0000                                      ENDM
  81+ 0000
  82+ 0000              CallIfAZero:            MACRO target
  83+ 0000 ~                                    and     a
  84+ 0000 ~                                    call    z, target
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000              CallIfANotZero:         MACRO target
  88+ 0000 ~                                    and     a
  89+ 0000 ~                                    call    nz, target
  90+ 0000                                      ENDM
# file closed: ./Macros/callMacros.asm
  61  0000                                      INCLUDE "./Macros/carryFlagMacros.asm"
# file opened: ./Macros/carryFlagMacros.asm
   1+ 0000
   2+ 0000              SetCarryFlag:           MACRO
   3+ 0000 ~                                    scf
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearCarryFlag:	        MACRO
   7+ 0000 ~                                    or a
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              FlipCarryFlag:          MACRO
  11+ 0000 ~                                    ccf
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ./Macros/carryFlagMacros.asm
  62  0000                                      INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ./Macros/CopyByteMacros.asm
  63  0000                                      INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		            MACRO
   2+ 0000 ~                                    xor a
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              SetATrue:               MACRO
   6+ 0000 ~                                    xor     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              SetAFalse:              MACRO
  10+ 0000 ~                                    ld      a,$FF
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              SetMemFalse             MACRO   mem
  14+ 0000 ~                                    ld      a,$FF
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetMemTrue              MACRO   mem
  19+ 0000 ~                                    xor     a
  20+ 0000 ~                                    ld      (mem),a
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              SetMemToN:              MACRO   mem,value
  24+ 0000 ~                                    ld      a,value
  25+ 0000 ~                                    ld      (mem),a
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              ldCopyStringLen:        MACRO   source, target, strlen
  29+ 0000 ~                                    ld      hl,source
  30+ 0000 ~                                    ld      de, target
  31+ 0000 ~                                    ld      bc, strlen
  32+ 0000 ~                                    ldir
  33+ 0000                                      ENDM
  34+ 0000
  35+ 0000              ldCopyTextAtHLtoDE:     MACRO
  36+ 0000 ~            .CopyLoop:              ld      a,(hl)
  37+ 0000 ~                                    ld      (de),a
  38+ 0000 ~                                    cp      0
  39+ 0000 ~                                    jp      z,.DoneCopy
  40+ 0000 ~                                    inc     hl
  41+ 0000 ~                                    inc     de
  42+ 0000 ~                                    jr      .CopyLoop
  43+ 0000 ~            .DoneCopy:
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ldClearTextLoop:        MACRO   TextSize
  47+ 0000 ~                                    ld      b,a
  48+ 0000 ~                                    ld      a,TextSize
  49+ 0000 ~            .ClearLoop:             ld      (hl),a
  50+ 0000 ~                                    inc     hl
  51+ 0000 ~                                    djnz    .ClearLoop
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              ldCopyByte:             MACRO memfrom, memto
  55+ 0000 ~                                    ld       a,(memfrom)
  56+ 0000 ~                                    ld       (memto),a
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000
  60+ 0000              ldCopyByteABS:          MACRO memfrom, memto
  61+ 0000 ~                                    ld       a,(memfrom)
  62+ 0000 ~                                    and		$7F
  63+ 0000 ~                                    ld       (memto),a
  64+ 0000                                      ENDM
  65+ 0000
  66+ 0000              ldAtHLtoMem:            MACRO   memto
  67+ 0000 ~                                    ld      a,(hl)
  68+ 0000 ~                                    ld      (memto),a
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              ldCopy2Byte             MACRO  memfrom, memto
  72+ 0000 ~                                    ld       hl,(memfrom)
  73+ 0000 ~                                    ld       (memto),hl
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              ldWriteConst            MACRO  memfrom, memto
  77+ 0000 ~                                    ld       a,memfrom
  78+ 0000 ~                                    ld       (memto),a
  79+ 0000                                      ENDM
  80+ 0000
  81+ 0000              ldWriteZero             MACRO  memto
  82+ 0000 ~                                    xor      a
  83+ 0000 ~                                    ld       (memto),a
  84+ 0000                                      ENDM
  85+ 0000
  86+ 0000              ldIXLaFromN:	        MACRO memfrom
  87+ 0000 ~                                    ld		a,(memfrom)
  88+ 0000 ~                                    ld		ixl,a
  89+ 0000                                      ENDM
  90+ 0000
  91+ 0000              ldIXHaFromN:	        MACRO memfrom
  92+ 0000 ~                                    ld		a,(memfrom)
  93+ 0000 ~                                    ld		ixh,a
  94+ 0000                                      ENDM
  95+ 0000
  96+ 0000              ldIYLaFromN:	        MACRO memfrom
  97+ 0000 ~                                    ld		a,(memfrom)
  98+ 0000 ~                                    ld		iyl,a
  99+ 0000                                      ENDM
 100+ 0000
 101+ 0000              ldIYHaFromN:	        MACRO memfrom
 102+ 0000 ~                                    ld		a,(memfrom)
 103+ 0000 ~                                    ld		iyh,a
 104+ 0000                                      ENDM
 105+ 0000
 106+ 0000              ; Read a 32 bit value from address HL into BCDE
 107+ 0000              ldBCDEatHL:             MACRO
 108+ 0000 ~                                    ld      e,(hl)
 109+ 0000 ~                                    inc     hl
 110+ 0000 ~                                    ld      d,(hl)
 111+ 0000 ~                                    inc     hl
 112+ 0000 ~                                    ld      c,(hl)
 113+ 0000 ~                                    inc     hl
 114+ 0000 ~                                    ld      b,(hl)
 115+ 0000 ~                                    inc     hl
 116+ 0000                                      ENDM
 117+ 0000
 118+ 0000              ldBCatHL:               MACRO
 119+ 0000 ~                                    ld      c,(hl)
 120+ 0000 ~                                    inc     hl
 121+ 0000 ~                                    ld      b,(hl)
 122+ 0000 ~                                    inc     hl
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              ldhlde:			        MACRO
 126+ 0000 ~                                    ld		h,d
 127+ 0000 ~                                    ld		l,e
 128+ 0000                                      ENDM
 129+ 0000
 130+ 0000              ldhlbc:			        MACRO
 131+ 0000 ~                                    ld		h,b
 132+ 0000 ~                                    ld		l,c
 133+ 0000                                      ENDM
 134+ 0000
 135+ 0000              ldbcde:			        MACRO
 136+ 0000 ~                                    ld		b,d
 137+ 0000 ~                                    ld		c,e
 138+ 0000                                      ENDM
 139+ 0000
 140+ 0000              lddebc:			        MACRO
 141+ 0000 ~                                    ld		d,b
 142+ 0000 ~                                    ld		e,c
 143+ 0000                                      ENDM
 144+ 0000
 145+ 0000              ldbchl:			        MACRO
 146+ 0000 ~                                    ld		b,h
 147+ 0000 ~                                    ld		c,l
 148+ 0000                                      ENDM
 149+ 0000
 150+ 0000              lddeiy:			        MACRO
 151+ 0000 ~                                    ld		d,iyh
 152+ 0000 ~                                    ld		e,iyl
 153+ 0000                                      ENDM
 154+ 0000
 155+ 0000              ldiyde:			        MACRO
 156+ 0000 ~                                    ld		iyh,d
 157+ 0000 ~                                    ld		iyl,e
 158+ 0000                                      ENDM
 159+ 0000
 160+ 0000
 161+ 0000              FourLDIInstrunctions:   MACRO
 162+ 0000 ~                                    ldi
 163+ 0000 ~                                    ldi
 164+ 0000 ~                                    ldi
 165+ 0000 ~                                    ldi
 166+ 0000                                      ENDM
 167+ 0000
 168+ 0000              FiveLDIInstrunctions:   MACRO
 169+ 0000 ~                                    ldi
 170+ 0000 ~                                    ldi
 171+ 0000 ~                                    ldi
 172+ 0000 ~                                    ldi
 173+ 0000 ~                                    ldi
 174+ 0000                                      ENDM
 175+ 0000
 176+ 0000              SixLDIInstrunctions:    MACRO
 177+ 0000 ~                                    ldi
 178+ 0000 ~                                    ldi
 179+ 0000 ~                                    ldi
 180+ 0000 ~                                    ldi
 181+ 0000 ~                                    ldi
 182+ 0000 ~                                    ldi
 183+ 0000                                      ENDM
 184+ 0000
 185+ 0000              EightLDIInstrunctions:  MACRO
 186+ 0000 ~            		                ldi
 187+ 0000 ~            		                ldi
 188+ 0000 ~            		                ldi
 189+ 0000 ~            		                ldi
 190+ 0000 ~            		                ldi
 191+ 0000 ~            		                ldi
 192+ 0000 ~            		                ldi
 193+ 0000 ~            		                ldi
 194+ 0000                                      ENDM
 195+ 0000
 196+ 0000              NineLDIInstrunctions:  MACRO
 197+ 0000 ~            		                ldi
 198+ 0000 ~            		                ldi
 199+ 0000 ~            		                ldi
 200+ 0000 ~            		                ldi
 201+ 0000 ~            		                ldi
 202+ 0000 ~            		                ldi
 203+ 0000 ~            		                ldi
 204+ 0000 ~            		                ldi
 205+ 0000 ~            		                ldi
 206+ 0000                                      ENDM
# file closed: ./Macros/ldCopyMacros.asm
  64  0000                                      INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              GetByteAInTable:    MACRO table
   2+ 0000 ~                                ld          hl,table
   3+ 0000 ~                                add         hl,a
   4+ 0000 ~                                ld          a,(hl)
   5+ 0000                                  ENDM
   6+ 0000
   7+ 0000              HLWordAInTable:     MACRO table
   8+ 0000 ~                                ld          hl,table
   9+ 0000 ~                                sla         a
  10+ 0000 ~                                add         hl,a
  11+ 0000 ~                                ld          a,(hl)
  12+ 0000 ~                                inc         hl
  13+ 0000 ~                                ld          h,(hl)
  14+ 0000 ~                                ld          l,a
  15+ 0000                                  ENDM
  16+ 0000
  17+ 0000
  18+ 0000              ldAToHLixl:			MACRO value
  19+ 0000 ~            					ld          hl,value
  20+ 0000 ~            					ex          af,af'
  21+ 0000 ~            					ld          a,ixl
  22+ 0000 ~            					add         hl,a
  23+ 0000 ~            					ex          af,af'
  24+ 0000 ~            					ld          (hl),a
  25+ 0000              					ENDM
  26+ 0000
  27+ 0000              ldAToHLiyl:			MACRO value
  28+ 0000 ~            					ld          hl,value
  29+ 0000 ~            					ex          af,af'
  30+ 0000 ~            					ld          a,iyl
  31+ 0000 ~            					add         hl,a
  32+ 0000 ~            					ex          af,af'
  33+ 0000 ~            					ld          (hl),a
  34+ 0000              					ENDM
  35+ 0000
  36+ 0000
  37+ 0000              ldHLixlToA:         MACRO value
  38+ 0000 ~                                ld          hl,value
  39+ 0000 ~                                ex          af,af'
  40+ 0000 ~                                ld          a,ixl
  41+ 0000 ~                                add         hl,a
  42+ 0000 ~                                ld          a,(hl)
  43+ 0000                                  ENDM
  44+ 0000
  45+ 0000              ldHLiylToA:         MACRO value
  46+ 0000 ~                                ld          hl,value
  47+ 0000 ~                                ex          af,af'
  48+ 0000 ~                                ld          a,iyl
  49+ 0000 ~                                add         hl,a
  50+ 0000 ~                                ld          a,(hl)
  51+ 0000                                  ENDM
  52+ 0000
  53+ 0000              ldHLIdxAToA:        MACRO value
  54+ 0000 ~                                ld          hl,value
  55+ 0000 ~                                add         hl,a
  56+ 0000 ~                                ld          a,(hl)
  57+ 0000                                  ENDM
  58+ 0000
  59+ 0000              HLEquAddrAtHLPlusA: MACRO
  60+ 0000 ~                                sla         a
  61+ 0000 ~                                add         hl,a
  62+ 0000 ~                                ld          a,(hl)
  63+ 0000 ~                                inc         hl
  64+ 0000 ~                                ld          h,(hl)
  65+ 0000 ~                                ld          l,a
  66+ 0000                                  ENDM
# file closed: ./Macros/ldIndexedMacros.asm
  65  0000                                      INCLUDE "./Macros/jumpMacros.asm"
# file opened: ./Macros/jumpMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p, target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m, target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000
  10+ 0000              JumpIfUnderflow:	    MACRO target
  11+ 0000 ~                                    jp		po, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000              JumpIfOverflow:	        MACRO target
  15+ 0000 ~                                    jp		po, target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000
  19+ 0000              JumpIfNotZero:	        MACRO target
  20+ 0000 ~                                    jp	nz,target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              JumpIfZero:	            MACRO target
  24+ 0000 ~                                    jp	z,target
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              ;.. Bit routines
  28+ 0000              JumpOnLeadSignSet:      MACRO   reg, target
  29+ 0000 ~                                    ld      a,reg
  30+ 0000 ~                                    and     SignOnly8Bit
  31+ 0000 ~                                    jp      nz,target
  32+ 0000                                      ENDM
  33+ 0000
  34+ 0000              JumpOnLeadSignClear:    MACRO   reg, target
  35+ 0000 ~                                    ld      a,reg
  36+ 0000 ~                                    and     SignOnly8Bit
  37+ 0000 ~                                    jp      z,target
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              JumpOnLeadSignSetA:     MACRO   target
  41+ 0000 ~                                    and     SignOnly8Bit
  42+ 0000 ~                                    jp      nz,target
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              JumpOnLeadSignClearA:   MACRO   target
  46+ 0000 ~                                    and     SignOnly8Bit
  47+ 0000 ~                                    jp      z,target
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  51+ 0000 ~                                    ld      a,(mem)
  52+ 0000 ~                                    bit 	bitnbr,a
  53+ 0000 ~                                    jp      nz,target
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  57+ 0000 ~                                    ld      a,(mem)
  58+ 0000 ~                                    bit 	bitnbr,a
  59+ 0000 ~                                    jp      z,target
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000
  63+ 0000              JumpOnABitSet:          MACRO   bitnbr, target
  64+ 0000 ~                                    bit 	bitnbr, a
  65+ 0000 ~                                    jp      nz,target
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              JumpOnABitClear:        MACRO   bitnbr, target
  69+ 0000 ~                                    bit 	bitnbr, a
  70+ 0000 ~                                    jp      z,target
  71+ 0000                                      ENDM
  72+ 0000
  73+ 0000              JumpOnABit5Set:         MACRO   target
  74+ 0000 ~                                    and     Bit5Only
  75+ 0000 ~                                    jp      nz,target
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              JumpOnABit5Clear:       MACRO   target
  79+ 0000 ~                                    and     Bit5Only
  80+ 0000 ~                                    jp      z,target
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000              JumpOnBitMaskSet:       MACRO   bitmask, target
  84+ 0000 ~                                    and     bitmask
  85+ 0000 ~                                    jp      nz,target
  86+ 0000                                      ENDM
  87+ 0000
  88+ 0000              JumpOnBitMaskClear:     MACRO   bitmask, target
  89+ 0000 ~                                    and     bitmask
  90+ 0000 ~                                    jp      z,target
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              JumpOnMemBitMaskSet:    MACRO   mem, bitmask, target
  94+ 0000 ~                                    ld      a,(mem)
  95+ 0000 ~                                    and     bitmask
  96+ 0000 ~                                    jp      nz,target
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000              JumpOnMemBitMaskClear:  MACRO   mem, bitmask, target
 100+ 0000 ~                                    ld      a,(mem)
 101+ 0000 ~                                    and     bitmask
 102+ 0000 ~                                    jp      z,target
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
 106+ 0000 ~                                    bit 	bitnbr,reg
 107+ 0000 ~                                    jp      nz,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
 111+ 0000 ~                                    bit 	bitnbr,reg
 112+ 0000 ~                                    jp      z,target
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              ; Comparison Routines
 116+ 0000              JumpIfAGTEusng:         MACRO
 117+ 0000 ~                                    jp		nc,target
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              JumpIfAGTENusng:        MACRO reg,target
 121+ 0000 ~                                    cp     reg
 122+ 0000 ~                                    jp		nc,target
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
 126+ 0000 ~                                    ld      hl,mem
 127+ 0000 ~                                    cp      (hl)
 128+ 0000 ~                                    jp		nc,target
 129+ 0000                                      ENDM
 130+ 0000
 131+ 0000              JumpIfALTMemusng:       MACRO mem,target
 132+ 0000 ~                                    ld      hl,mem
 133+ 0000 ~                                    cp      (hl)
 134+ 0000 ~                                    jp		c,target
 135+ 0000                                      ENDM
 136+ 0000
 137+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
 138+ 0000 ~                                    ld     a,(mem)
 139+ 0000 ~                                    cp     value
 140+ 0000 ~                                    jp	  nc,target
 141+ 0000                                      ENDM
 142+ 0000
 143+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
 144+ 0000 ~                                    ld   a,(mem)
 145+ 0000 ~                                    ld   hl,address
 146+ 0000 ~                                    cp   (hl)
 147+ 0000 ~                                    jp	  nc,target
 148+ 0000                                      ENDM
 149+ 0000
 150+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 151+ 0000 ~                                    ld   a,(mem)
 152+ 0000 ~                                    ld   hl,address
 153+ 0000 ~                                    cp   (hl)
 154+ 0000 ~                                    jp	  z,target
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              JumpIfMemNeMemusng:     MACRO mem, address, target
 158+ 0000 ~                                    ld   a,(mem)
 159+ 0000 ~                                    ld   hl,address
 160+ 0000 ~                                    cp   (hl)
 161+ 0000 ~                                    jp	  nz,target
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              JumpIfMemTrue:          MACRO mem, target
 165+ 0000 ~                                    ld      a,(mem)
 166+ 0000 ~                                    and     a
 167+ 0000 ~                                    jp      z, target
 168+ 0000                                      ENDM
 169+ 0000
 170+ 0000              JumpIfMemFalse:         MACRO mem, target
 171+ 0000 ~                                    ld      a,(mem)
 172+ 0000 ~                                    and     a
 173+ 0000 ~                                    jp      nz, target
 174+ 0000                                      ENDM
 175+ 0000
 176+ 0000              JumpIfATrue:            MACRO target
 177+ 0000 ~                                    and     a
 178+ 0000 ~                                    jp      z, target
 179+ 0000                                      ENDM
 180+ 0000
 181+ 0000              JumpIfAFalse:           MACRO target
 182+ 0000 ~                                    and     a
 183+ 0000 ~                                    jp      nz, target
 184+ 0000                                      ENDM
 185+ 0000
 186+ 0000              JumpIfANotFalse:        MACRO target
 187+ 0000 ~                                    cp      $FF
 188+ 0000 ~                                    jp      nz, target
 189+ 0000                                      ENDM
 190+ 0000
 191+ 0000              JumpIfALTusng:          MACRO target
 192+ 0000 ~                                    jp		c,target
 193+ 0000                                      ENDM
 194+ 0000
 195+ 0000              JumpIfALTNusng:         MACRO value, target
 196+ 0000 ~                                    cp      value
 197+ 0000 ~                                    jp		c, target
 198+ 0000                                      ENDM
 199+ 0000
 200+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 201+ 0000 ~                                    ld      a,(mem)
 202+ 0000 ~                                    cp      value
 203+ 0000 ~                                    jp	  c,target
 204+ 0000                                      ENDM
 205+ 0000
 206+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 207+ 0000 ~                                    ld    a,(mem)
 208+ 0000 ~                                    ld    hl,value
 209+ 0000 ~                                    cp    (hl)
 210+ 0000 ~                                    jp	  c,target
 211+ 0000                                      ENDM
 212+ 0000
 213+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 214+ 0000 ~                                    ld  a,(mem)
 215+ 0000 ~                                    cp  value
 216+ 0000 ~                                    jp  z,target
 217+ 0000                                      ENDM
 218+ 0000
 219+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 220+ 0000 ~                                    ld  a,(mem)
 221+ 0000 ~                                    cp  value
 222+ 0000 ~                                    jp  nz,target
 223+ 0000                                      ENDM
 224+ 0000
 225+ 0000              JumpIfMemZero:          MACRO mem,target
 226+ 0000 ~                                    ld  a,(mem)
 227+ 0000 ~                                    and a
 228+ 0000 ~                                    jp  z,target
 229+ 0000                                      ENDM
 230+ 0000
 231+ 0000              JumpIfMemNotZero:       MACRO mem,target
 232+ 0000 ~                                    ld  a,(mem)
 233+ 0000 ~                                    and a
 234+ 0000 ~                                    jp  nz,target
 235+ 0000                                      ENDM
 236+ 0000
 237+ 0000              JumpIfALTMemHLusng:     MACRO target
 238+ 0000 ~                                    cp    (hl)
 239+ 0000 ~                                    jp	  c,target
 240+ 0000                                      ENDM
 241+ 0000
 242+ 0000              JumpIfANENusng:         MACRO value, target
 243+ 0000 ~                                    cp     value
 244+ 0000 ~                                    jp      nz,target
 245+ 0000                                      ENDM
 246+ 0000
 247+ 0000              JumpIfANEquNusng:       MACRO value, target
 248+ 0000 ~                                    cp     value
 249+ 0000 ~                                    jp     z,target
 250+ 0000                                      ENDM
 251+ 0000
 252+ 0000              JumpIfANEMemusng:       MACRO  value, target
 253+ 0000 ~                                    ld    hl,value
 254+ 0000 ~                                    cp    (hl)
 255+ 0000 ~                                    jp      nz,target
 256+ 0000                                      ENDM
 257+ 0000
 258+ 0000              JumpIfAEqNusng:         MACRO value, target
 259+ 0000 ~                                    cp     value
 260+ 0000 ~                                    jp      z,target
 261+ 0000                                      ENDM
 262+ 0000
 263+ 0000              JumpIfAIsZero:	        MACRO target
 264+ 0000 ~                                    and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 265+ 0000 ~                                    jp	    z, target
 266+ 0000                                      ENDM
 267+ 0000
 268+ 0000              JumpIfRegIsNotZero:     MACRO   reg, target
 269+ 0000 ~                                    ld      a,reg
 270+ 0000 ~                                    and     a
 271+ 0000 ~                                    jp	    nz,target
 272+ 0000                                      ENDM
 273+ 0000
 274+ 0000              JumpIfAIsNotZero:       MACRO target
 275+ 0000 ~                                    and     a
 276+ 0000 ~                                    jp	    nz,target
 277+ 0000                                      ENDM
 278+ 0000
 279+ 0000              JumpIfMemIsNotZero:     MACRO value, target
 280+ 0000 ~                                    ld      a,(value)
 281+ 0000 ~                                    and     a
 282+ 0000 ~                                    jp	    nz,target
 283+ 0000                                      ENDM
 284+ 0000              IfResultZeroGoto:	    MACRO target
 285+ 0000 ~                                    jp	z,target
 286+ 0000                                      ENDM
 287+ 0000
 288+ 0000              IfResultNotZeroGoto:    MACRO target
 289+ 0000 ~                                    jp	nz,target
 290+ 0000                                      ENDM
 291+ 0000
# file closed: ./Macros/jumpMacros.asm
  66  0000                                      INCLUDE "./Macros/MathsMacros.asm"
# file opened: ./Macros/MathsMacros.asm
   1+ 0000
   2+ 0000              ABSa2c:                 MACRO
   3+ 0000 ~                                    bit     7,a
   4+ 0000 ~                                    jp      z,.DoneABSa
   5+ 0000 ~                                    neg
   6+ 0000 ~            .DoneABSa:
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              DEEquSquareA:           MACRO
  10+ 0000 ~                                    ld  d,a
  11+ 0000 ~                                    ld  e,a
  12+ 0000 ~                                    mul de
  13+ 0000                                      ENDM
  14+ 0000
  15+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
  16+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  17+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
  18+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
  19+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
  20+ 0000 ~                                    xor $80                             ;
  21+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  22+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  23+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  24+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  25+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  26+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              SignedHLTo2C:           MACRO
  30+ 0000 ~                                    bit     7,h
  31+ 0000 ~                                    jr      z,.Done2c
  32+ 0000 ~                                    ld      a,h
  33+ 0000 ~                                    and     SignMask8Bit
  34+ 0000 ~                                    ld      h,a
  35+ 0000 ~                                    NegHL
  36+ 0000 ~            .Done2c:
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              MemSignedTo2C:          MACRO   memfrom
  40+ 0000 ~                                    ld      hl,(memfrom)
  41+ 0000 ~                                    bit     7,h
  42+ 0000 ~                                    jr      z,.Done2c
  43+ 0000 ~                                    ld      a,h
  44+ 0000 ~                                    and     SignMask8Bit
  45+ 0000 ~                                    ld      h,a
  46+ 0000 ~            .Done2c:                ld      (memfrom),hl
  47+ 0000                                      ENDM
  48+ 0000
  49+ 0000
  50+ 0000                  ;returns result in H
  51+ 0000              EDiv10Inline:           MACRO
  52+ 0000 ~                                    ld      d,0
  53+ 0000 ~                                    ld      hl,de
  54+ 0000 ~                                    add     hl,hl
  55+ 0000 ~                                    add     hl,de
  56+ 0000 ~                                    add     hl,hl
  57+ 0000 ~                                    add     hl,hl
  58+ 0000 ~                                    add     hl,de
  59+ 0000 ~                                    add     hl,hl
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              cpHLDE:                 MACRO
  63+ 0000 ~                                    push    hl
  64+ 0000 ~                                    and     a
  65+ 0000 ~                                    sbc     hl,de
  66+ 0000 ~                                    pop     hl
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              ;Unsigned
  70+ 0000              ;If HL == DE, then Z flag is set.
  71+ 0000              ;If HL != DE, then Z flag is reset.
  72+ 0000              ;If HL <  DE, then C flag is set.
  73+ 0000              ;If HL >= DE, then C flag is reset.
  74+ 0000              ;
  75+ 0000              ;Signed
  76+ 0000              ;If HL == DE, then Z flag is set.
  77+ 0000              ;If HL != DE, then Z flag is reset.
  78+ 0000              ;If HL <  DE, then S and P/V are different.
  79+ 0000              ;If HL >= DE, then S and P/V are the same.
  80+ 0000
  81+ 0000
  82+ 0000              N0equN1byN2div256:      MACRO param1,param2,param3
  83+ 0000 ~                                    ld      a,param3                        ;
  84+ 0000 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
  85+ 0000 ~                                    ld      a,param2                        ; A = XX16 element
  86+ 0000 ~                                    ld      d,a
  87+ 0000 ~                                    mul
  88+ 0000 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
  89+ 0000 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
  90+ 0000                                      ENDM
  91+ 0000
  92+ 0000              AequN1xorN2:            MACRO  param1,param2
  93+ 0000 ~                                    ld      a,(param1)
  94+ 0000 ~                                    xor     param2
  95+ 0000                                      ENDM
  96+ 0000
  97+ 0000              SpeedMulAxis:           MACRO   speedreg, axis
  98+ 0000 ~                                    ld      e,speedreg
  99+ 0000 ~                                    ld      hl,(axis)
 100+ 0000 ~                                    ld      a,h
 101+ 0000 ~                                    ClearSignBitA
 102+ 0000 ~                                    ld      d,a
 103+ 0000 ~                                    mul     de
 104+ 0000 ~                                    ld      a,h
 105+ 0000 ~                                    SignBitOnlyA
 106+ 0000 ~                                    ld      b,a;ld      c,a
 107+ 0000 ~                                    ld      h,d;ld      e,d
 108+ 0000 ~                                    ld      c,0;ld      d,0
 109+ 0000                                      ENDM
 110+ 0000
 111+ 0000
 112+ 0000              AddSpeedToVert:         MACRO   vertex
 113+ 0000 ~                                    ld      de,(vertex+1)
 114+ 0000 ~                                    ld      a,(vertex)
 115+ 0000 ~                                    ld      l,a
 116+ 0000 ~                                    call    AddBCHtoDELsigned               ; DEL = DEL + BCH
 117+ 0000 ~                                    ld      a,l
 118+ 0000 ~                                    ld      (vertex),a
 119+ 0000 ~                                    ld      (vertex+1),de
 120+ 0000                                      ENDM
# file closed: ./Macros/MathsMacros.asm
  67  0000                                      INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectROM0:       MACRO
   2+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   3+ 0000                                   ENDM
   4+ 0000
   5+ 0000              MMUSelectROMS:       MACRO
   6+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   7+ 0000 ~                                 nextreg EXSDOSMMU1,        BankROM
   8+ 0000                                   ENDM
   9+ 0000
  10+ 0000              MMUSelectMathsTables:MACRO
  11+ 0000 ~                                 nextreg MathsTablesMMU,    BankMathsTables
  12+ 0000                                   ENDM
  13+ 0000
  14+ 0000              MMUSelectSpriteBank: MACRO
  15+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
  16+ 0000              					 ENDM
  17+ 0000
  18+ 0000              MMUSelectConsoleBank: MACRO
  19+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
  20+ 0000              					 ENDM
  21+ 0000
  22+ 0000              MMUSelectLayer1: 	 MACRO
  23+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  24+ 0000              					 ENDM
  25+ 0000
  26+ 0000              MMUSelectLayer2: 	 MACRO
  27+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  28+ 0000              					 ENDM
  29+ 0000
  30+ 0000              MMUSelectResetUniv:  MACRO
  31+ 0000 ~                                 nextreg ResetUniverseMMU, BankResetUniv
  32+ 0000                                   ENDM
  33+ 0000
  34+ 0000              MMUSelectShipARead:  MACRO
  35+ 0000 ~                                 add    a,BankUNIVDATA0
  36+ 0000 ~                                 nextreg ShipReadMMU,       a
  37+ 0000                                   ENDM
  38+ 0000
  39+ 0000              MMUSelectShipBank1:  MACRO
  40+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  41+ 0000              					 ENDM
  42+ 0000              MMUSelectShipBank2:  MACRO
  43+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  44+ 0000              					 ENDM
  45+ 0000              MMUSelectShipBank3:  MACRO
  46+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  47+ 0000              					 ENDM
  48+ 0000              MMUSelectShipBank4:  MACRO
  49+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  50+ 0000              					 ENDM
  51+ 0000
  52+ 0000              MMUSelectShipBankA   MACRO
  53+ 0000 ~            					 nextreg ShipModelMMU,	    a
  54+ 0000              					 ENDM
  55+ 0000
  56+ 0000              MMUSelectShipBankN:  MACRO value
  57+ 0000 ~            					 nextreg ShipModelMMU,	    value
  58+ 0000              					 ENDM
  59+ 0000
  60+ 0000              MMUSelectCommander:	 MACRO
  61+ 0000 ~                                 nextreg CommanderMMU,       BankCommander
  62+ 0000              					 ENDM
  63+ 0000
  64+ 0000              MMUSelectStockTable: MACRO
  65+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  66+ 0000              					 ENDM
  67+ 0000
  68+ 0000              MMUSelectCpySrcA:    MACRO
  69+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  70+ 0000              					 ENDM
  71+ 0000
  72+ 0000              MMUSelectCpySrcN:    MACRO value
  73+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  74+ 0000              					 ENDM
  75+ 0000
  76+ 0000              MMUSelectSun:        MACRO
  77+ 0000 ~                                 nextreg SunMMU,            BankSunData
  78+ 0000                                   ENDM
  79+ 0000
  80+ 0000              MMUSelectPlanet:     MACRO
  81+ 0000 ~                                 nextreg PlanetMMU,         BankPlanetData
  82+ 0000                                   ENDM
  83+ 0000
  84+ 0000              MMUSelectUniverseA:  MACRO
  85+ 0000 ~                                 add    a,BankUNIVDATA0
  86+ 0000 ~                                 nextreg UniverseMMU,       a
  87+ 0000                                   ENDM
  88+ 0000              ;Version that assumes a pre calulated A, used whn optimising many switches
  89+ 0000              MMUSelectUnivBankA:  MACRO
  90+ 0000 ~                                 nextreg UniverseMMU,       a
  91+ 0000                                   ENDM
  92+ 0000
  93+ 0000              MMUSelectUniverseN:  MACRO value
  94+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  95+ 0000                                   ENDM
  96+ 0000
  97+ 0000              MMUSelectGalaxyA:    MACRO
  98+ 0000 ~                                 nextreg GalaxyDataMMU,     a
  99+ 0000                                   ENDM
 100+ 0000
 101+ 0000              MMUSelectGalaxyN:    MACRO value
 102+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
 103+ 0000                                   ENDM
 104+ 0000              MMUSelectGalaxyACopy:MACRO
 105+ 0000 ~                                 nextreg UniverseMMU,       a
 106+ 0000                                   ENDM
 107+ 0000
 108+ 0000              MMUSelectUniverseAbs:MACRO value
 109+ 0000 ~                                 nextreg UniverseMMU,       value
 110+ 0000                                   ENDM
 111+ 0000
 112+ 0000              MMUSelectMenuGalCht: MACRO
 113+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
 114+ 0000              					 ENDM
 115+ 0000
 116+ 0000              MMUSelectMenuShrCht: MACRO
 117+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
 118+ 0000              					 ENDM
 119+ 0000
 120+ 0000              MMUSelectMenuInvent: MACRO
 121+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 122+ 0000              					 ENDM
 123+ 0000
 124+ 0000              MMUSelectMenuSystem: MACRO
 125+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 126+ 0000              					 ENDM
 127+ 0000
 128+ 0000              MMUSelectMenuMarket: MACRO
 129+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 130+ 0000              					 ENDM
 131+ 0000
 132+ 0000              MMUSelectMenuStatus: MACRO
 133+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 134+ 0000              					 ENDM
 135+ 0000
 136+ 0000              MMUSelectViewFront:  MACRO
 137+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 138+ 0000              					 ENDM
 139+ 0000
 140+ 0000              MMUSelectScreenA:    MACRO
 141+ 0000 ~                                 nextreg ScreenBankMMU,		a
 142+ 0000              					 ENDM
 143+ 0000
 144+ 0000              MMUSelectSound:      MACRO
 145+ 0000 ~                                 nextreg SoundMMU,		    BankSound
 146+ 0000              					 ENDM
# file closed: ./Macros/MMUMacros.asm
  68  0000                                      INCLUDE "./Macros/NegateMacros.asm"
# file opened: ./Macros/NegateMacros.asm
   1+ 0000
   2+ 0000              NegIY:			    MACRO
   3+ 0000 ~                                xor a
   4+ 0000 ~                                sub iyl
   5+ 0000 ~                                ld iyl,a
   6+ 0000 ~                                sbc a,a
   7+ 0000 ~                                sub iyh
   8+ 0000 ~                                ld iyh,a
   9+ 0000                                  ENDM
  10+ 0000
  11+ 0000              NegHL:			    MACRO
  12+ 0000 ~                                xor a
  13+ 0000 ~                                sub l
  14+ 0000 ~                                ld l,a
  15+ 0000 ~                                sbc a,a
  16+ 0000 ~                                sub h
  17+ 0000 ~                                ld h,a
  18+ 0000                                  ENDM
  19+ 0000
  20+ 0000              NegDE:			    MACRO
  21+ 0000 ~                                xor a
  22+ 0000 ~                                sub e
  23+ 0000 ~                                ld e,a
  24+ 0000 ~                                sbc a,a
  25+ 0000 ~                                sub d
  26+ 0000 ~                                ld d,a
  27+ 0000                                  ENDM
  28+ 0000
  29+ 0000              NegBC:			    MACRO
  30+ 0000 ~                                xor a
  31+ 0000 ~                                sub c
  32+ 0000 ~                                ld c,a
  33+ 0000 ~                                sbc a,a
  34+ 0000 ~                                sub  b
  35+ 0000 ~                                ld b,a
  36+ 0000                                  ENDM
  37+ 0000
  38+ 0000              NegH                MACRO
  39+ 0000 ~                                ld      a,h
  40+ 0000 ~                                neg
  41+ 0000 ~                                ld      h,a
  42+ 0000                                  ENDM
  43+ 0000
  44+ 0000              NegD                MACRO
  45+ 0000 ~                                ld      a,d
  46+ 0000 ~                                neg
  47+ 0000 ~                                ld      d,a
  48+ 0000                                  ENDM
  49+ 0000
  50+ 0000              NegB                MACRO
  51+ 0000 ~                                ld      a,b
  52+ 0000 ~                                neg
  53+ 0000 ~                                ld      b,a
  54+ 0000                                  ENDM
  55+ 0000
# file closed: ./Macros/NegateMacros.asm
  69  0000                                      INCLUDE "./Macros/returnMacros.asm"
# file opened: ./Macros/returnMacros.asm
   1+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr
   2+ 0000 ~                                    bit 	bitnbr,reg
   3+ 0000 ~                                    ret     nz
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
   7+ 0000 ~                                    ld   a,(mem)
   8+ 0000 ~                                    bit 	bitnbr,a
   9+ 0000 ~                                    ret     nz
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  13+ 0000 ~                                    bit 	bitnbr,reg
  14+ 0000 ~                                    ret		z
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  18+ 0000 ~                                    ld     a,(mem)
  19+ 0000 ~                                    bit 	bitnbr,a
  20+ 0000 ~                                    ret		z
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              ReturnIfMemFalse:       MACRO   mem
  24+ 0000 ~                                    ld      a,(mem)
  25+ 0000 ~                                    and     a
  26+ 0000 ~                                    ret     nz
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              ReturnIfMemTrue:        MACRO   mem
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    and     a
  32+ 0000 ~                                    ret     z
  33+ 0000                                      ENDM
  34+ 0000
  35+ 0000              ReturnIfAIsZero:        MACRO
  36+ 0000 ~                                    and     a
  37+ 0000 ~                                    ret     z
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ReturnIfMemisZero:      MACRO mem
  41+ 0000 ~                                    ld   a,(mem)
  42+ 0000 ~                                    and a
  43+ 0000 ~                                    ret    z
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ReturnIfMemIsNegative:  MACRO mem
  47+ 0000 ~                                    ld      a,(mem)
  48+ 0000 ~                                    and     $80
  49+ 0000 ~                                    ret     nz
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              ReturnIfBitMaskClear    MACRO   bitmask
  53+ 0000 ~                                    and     bitmask
  54+ 0000 ~                                    ret     z
  55+ 0000                                      ENDM
  56+ 0000
  57+ 0000              ReturnIfBitMaskSet      MACRO   bitmask
  58+ 0000 ~                                    and     bitmask
  59+ 0000 ~                                    ret     nz
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              ReturnIfMemEquN:        MACRO mem, value
  63+ 0000 ~                                    ld     a,(mem)
  64+ 0000 ~                                    cp     value
  65+ 0000 ~                                    ret    nz
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              ReturnIfMemNeNusng:     MACRO mem, value
  69+ 0000 ~                                    ld   a,(mem)
  70+ 0000 ~                                    cp     value
  71+ 0000 ~                                    ret    z
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              ReturnIfRegNotZero:     MACRO reg
  75+ 0000 ~                                    ld      a, reg
  76+ 0000 ~                                    and     a
  77+ 0000 ~                                    ret     nz
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              ReturnIfANotZero:       MACRO
  81+ 0000 ~                                    and     a
  82+ 0000 ~                                    ret     nz
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ReturnIfNotZero:        MACRO
  86+ 0000 ~                                    ret     nz
  87+ 0000                                      ENDM
  88+ 0000
  89+ 0000              ReturnIfZero:           MACRO
  90+ 0000 ~                                    ret     z
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              ReturnIfNegative:       MACRO
  94+ 0000 ~                                    ret     m
  95+ 0000                                      ENDM
  96+ 0000
  97+ 0000
  98+ 0000              ReturnIfMemNotZero:     MACRO mem
  99+ 0000 ~                                    ld     a,(mem)
 100+ 0000 ~                                    and     a
 101+ 0000 ~                                    ret    nz
 102+ 0000                                      ENDM
 103+ 0000
 104+ 0000              ReturnIfAGTEusng:       MACRO value
 105+ 0000 ~                                    cp    value
 106+ 0000 ~                                    ret	 nc
 107+ 0000                                      ENDM
 108+ 0000
 109+ 0000              ReturnIfRegLTNusng:     MACRO reg, value
 110+ 0000 ~                                    ld      a,reg
 111+ 0000 ~                                    cp      value
 112+ 0000 ~                                    ret	    c
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              ReturnIfALTNusng:       MACRO value
 116+ 0000 ~                                    cp    value
 117+ 0000 ~                                    ret	 c
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              ReturnIfAGTENusng:      MACRO value
 121+ 0000 ~                                    cp    value
 122+ 0000 ~                                    ret	 nc
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              ReturnIfAGTEMemusng:    MACRO value
 126+ 0000 ~                                    ld      hl,value
 127+ 0000 ~                                    cp      (hl)
 128+ 0000 ~                                    ret	    nc
 129+ 0000                                      ENDM
 130+ 0000
 131+ 0000              ReturnIfANENusng:       MACRO value
 132+ 0000 ~                                    cp      value
 133+ 0000 ~                                    ret     nz
 134+ 0000                                      ENDM
 135+ 0000
 136+ 0000              ReturnIfAEqNusng:       MACRO value
 137+ 0000 ~                                    cp      value
 138+ 0000 ~                                    ret     z
 139+ 0000                                      ENDM
 140+ 0000
# file closed: ./Macros/returnMacros.asm
  70  0000                                      INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO    ; 16 T states
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO    ; 16 T states
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000              BarrelHLLeft3: MACRO
  47+ 0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
  48+ 0000 ~                           push     bc      ; 10
  49+ 0000 ~                           ld       b,3     ; 7
  50+ 0000 ~                           bsrl     de,b    ; 8
  51+ 0000 ~                           pop      bc      ; 10
  52+ 0000 ~                           ex       de,hl   ; 4
  53+ 0000                             ENDM
  54+ 0000
  55+ 0000              BarrelHLRight3: MACRO
  56+ 0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
  57+ 0000 ~                           push     bc      ; 10
  58+ 0000 ~                           ld       b,3     ; 7
  59+ 0000 ~                           bsrl     de,b    ; 8
  60+ 0000 ~                           pop      bc      ; 10
  61+ 0000 ~                           ex       de,hl   ; 4
  62+ 0000                             ENDM
  63+ 0000
  64+ 0000              RollDELeft1:   MACRO	; 16 T states
  65+ 0000 ~                           rl  e
  66+ 0000 ~                           rl  d
  67+ 0000                             ENDM
  68+ 0000
  69+ 0000              ShiftBCLeft1:  MACRO    ; 16 T states
  70+ 0000 ~            			   sla c
  71+ 0000 ~            			   rl  b
  72+ 0000              			   ENDM
  73+ 0000
  74+ 0000              ShiftMem16Right1:   MACRO memaddr
  75+ 0000 ~                                ld    hl,(memaddr)
  76+ 0000 ~                                srl   h
  77+ 0000 ~                                rr    l
  78+ 0000 ~                                ld    (memaddr),hl
  79+ 0000                                  ENDM
  80+ 0000
  81+ 0000              ShiftMem8Right1:    MACRO memaddr
  82+ 0000 ~                                ld      a,(memaddr)
  83+ 0000 ~                                srl     a
  84+ 0000 ~                                ld      (memaddr),a
  85+ 0000                                  ENDM
  86+ 0000
  87+ 0000
  88+ 0000              ShiftMem8Left1A:    MACRO memaddr
  89+ 0000 ~                                ld      a,(memaddr)
  90+ 0000 ~                                sla     a
  91+ 0000 ~                                ld      (memaddr),a
  92+ 0000                                  ENDM
  93+ 0000
# file closed: ./Macros/ShiftMacros.asm
  71  0000                                      INCLUDE "./Macros/signBitMacros.asm"
# file opened: ./Macros/signBitMacros.asm
   1+ 0000              SetMemBitN              MACRO mem,bitnbr
   2+ 0000 ~                                    ld      hl,mem
   3+ 0000 ~                                    set     bitnbr,(hl)
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearMemBitN            MACRO mem,bitnbr
   7+ 0000 ~                                    ld      hl,mem
   8+ 0000 ~                                    res     bitnbr,(hl)
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000
  12+ 0000              ClearSignBitMem:        MACRO mem
  13+ 0000 ~                                    ld      a,(mem)
  14+ 0000 ~                                    and     SignMask8Bit
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetSignBitMem:          MACRO   mem
  19+ 0000 ~                                    ld      a,(mem)
  20+ 0000 ~                                    or      SignOnly8Bit
  21+ 0000 ~                                    ld      (mem),a
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              FlipSignMem:            MACRO mem
  25+ 0000 ~                                    ld  a,(mem)
  26+ 0000 ~                                    xor SignOnly8Bit
  27+ 0000 ~                                    ld  (mem),a
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              SignBitOnlyMem:         MACRO mem
  31+ 0000 ~                                    ld      a, (mem)
  32+ 0000 ~                                    and     SignOnly8Bit
  33+ 0000 ~                                    ld      (mem),a
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ClearSignBit:           MACRO reg
  37+ 0000 ~                                    ld      a,reg
  38+ 0000 ~                                    and     SignMask8Bit
  39+ 0000 ~                                    ld      reg,a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              SetSignBit:             MACRO   reg
  43+ 0000 ~                                    ld      a,reg
  44+ 0000 ~                                    or      SignOnly8Bit
  45+ 0000 ~                                    ld      reg,a
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              FlipSignBit:            MACRO   reg
  49+ 0000 ~                                    ld      a, reg
  50+ 0000 ~                                    xor     SignOnly8Bit
  51+ 0000 ~                                    ld      reg,a
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              SignBitOnly:            MACRO   reg
  55+ 0000 ~                                    ld      a, reg
  56+ 0000 ~                                    and     SignOnly8Bit
  57+ 0000 ~                                    ld      reg,a
  58+ 0000                                      ENDM
  59+ 0000
  60+ 0000              ClearSignBitA:          MACRO
  61+ 0000 ~                                    and     SignMask8Bit
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              SetSignBitA:            MACRO
  65+ 0000 ~                                    or      SignOnly8Bit
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              FlipSignBitA:           MACRO
  69+ 0000 ~                                    xor     SignOnly8Bit
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              SignBitOnlyA:           MACRO
  73+ 0000 ~                                    and     SignOnly8Bit
  74+ 0000                                      ENDM
# file closed: ./Macros/signBitMacros.asm
  72  0000                                      INCLUDE "./Tables/message_queue_macros.asm"
# file opened: ./Tables/message_queue_macros.asm
   1+ 0000
   2+ 0000              AnyMessagesMacro:       MACRO   NoMessageTarget
   3+ 0000 ~                                    ld      a, (MessageCount)
   4+ 0000 ~                                    and     a
   5+ 0000 ~                                    jr      z, NoMessageTarget
   6+ 0000                                      ENDM
   7+ 0000
   8+ 0000              AnyHyperSpaceMacro:     MACRO   NoMessageText
   9+ 0000 ~                                    ld      hl,(InnerHyperCount)
  10+ 0000 ~                                    ld      a,h
  11+ 0000 ~                                    or      l
  12+ 0000 ~                                    jr      z, NoMessageText
  13+ 0000                                      ENDM
  14+ 0000
# file closed: ./Tables/message_queue_macros.asm
  73  0000                                      INCLUDE "./Variables/general_variables_macros.asm"
# file opened: ./Variables/general_variables_macros.asm
   1+ 0000              ; limited to 255 character length
   2+ 0000              CountLengthHL:          MACRO   Limiter
   3+ 0000 ~                                    ld      de,hl
   4+ 0000 ~                                    ld      bc,Limiter
   5+ 0000 ~                                    xor     a
   6+ 0000 ~                                    cpir
   7+ 0000 ~                                    ClearCarryFlag
   8+ 0000 ~                                    sbc     hl,de
   9+ 0000 ~                                    ld      a,l
  10+ 0000 ~                                    ret
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              IncMemMaxN:             MACRO   mem, maxvalue
  14+ 0000 ~                                    ld      a,(mem)
  15+ 0000 ~                                    cp      maxvalue
  16+ 0000 ~                                    jr      c,.IncMaxed
  17+ 0000 ~                                    inc     a
  18+ 0000 ~                                    ld      (mem),a
  19+ 0000 ~            .IncMaxed:
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              IncMemMaxNCycle:        MACRO   mem, cyclevalue
  23+ 0000 ~                                    ld      a,(mem)
  24+ 0000 ~                                    inc     a
  25+ 0000 ~                                    cp      cyclevalue
  26+ 0000 ~                                    jr      c,.IncMaxed
  27+ 0000 ~                                    xor     a
  28+ 0000 ~            .IncMaxed:              ld      (mem),a
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000
  32+ 0000              HalfLengthHL:           MACRO
  33+ 0000 ~                                    ld      b,0
  34+ 0000 ~            .CountLenLoop:          ld      a,(hl)
  35+ 0000 ~                                    cp      0
  36+ 0000 ~                                    jr      z,.DoneCount
  37+ 0000 ~                                    inc     b
  38+ 0000 ~                                    inc     hl
  39+ 0000 ~                                    jr      .CountLenLoop
  40+ 0000 ~            .DoneCount:             ld      a,32
  41+ 0000 ~                                    sub     b
  42+ 0000 ~                                    sra     a
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              MakeInnocentMacro:		MACRO
  46+ 0000 ~            						xor		a
  47+ 0000 ~            						ld		(FugitiveInnocentStatus),a
  48+ 0000              						ENDM
  49+ 0000
  50+ 0000              NoEscapePodMacro:		MACRO
  51+ 0000 ~            						xor		a
  52+ 0000 ~            						ld		(EscapePod),a
  53+ 0000              						ENDM
  54+ 0000
  55+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  56+ 0000              MaxFuelMacro:			MACRO
  57+ 0000 ~            						ld		a,MaxFuelLevel
  58+ 0000 ~            						ld		(Fuel),a
  59+ 0000              						ENDM
  60+ 0000
  61+ 0000              MaxThrottle:            MACRO
  62+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  63+ 0000 ~                                    ld      (DELTA),a
  64+ 0000 ~                                    ld      d,a
  65+ 0000 ~                                    ld      e,4
  66+ 0000 ~                                    mul
  67+ 0000 ~                                    ld      (DELT4Lo),de
  68+ 0000                                      ENDM
  69+ 0000
  70+ 0000              ZeroThrottle:           MACRO
  71+ 0000 ~                                    xor     a
  72+ 0000 ~                                    ld      (DELTA),a
  73+ 0000 ~                                    ld      (DELT4Lo),a
  74+ 0000 ~                                    ld      (DELT4Lo+1),a
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              ZeroPitch:              MACRO
  78+ 0000 ~                                    xor     a
  79+ 0000 ~                                    ld      (BET2),a
  80+ 0000 ~                                    ld      (BET2FLIP),a
  81+ 0000 ~                                    ld      (JSTY),a
  82+ 0000 ~                                    ld      (BETA),a
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ZeroRoll:               MACRO
  86+ 0000 ~                                    xor     a                              ; zero roll and climb
  87+ 0000 ~                                    ld      (ALP2),a
  88+ 0000 ~                                    ld      (ALP2FLIP),a
  89+ 0000 ~                                    ld      (JSTX),a
  90+ 0000 ~                                    ld      (ALPHA),a
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              CorrectPostJumpFuel:    MACRO
  94+ 0000 ~                                    ld      a,(Fuel)
  95+ 0000 ~                                    ld      hl,Distance
  96+ 0000 ~                                    sub     a,(hl)
  97+ 0000 ~                                    ld      (Fuel),a
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              AnyMissilesLeft:        MACRO
 101+ 0000 ~                                    ld      a,(NbrMissiles)
 102+ 0000 ~                                    and     a
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              SetMissileTargetA:      MACRO
 106+ 0000 ~                                    ld      (MissileTargettingFlag),a   ; Set to slot number clearing bit 7
 107+ 0000                                      ENDM
 108+ 0000
 109+ 0000              IsMissileLaunchFlagged: MACRO
 110+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 111+ 0000 ~                                    and     $80
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              SetMissileTargetting:   MACRO
 115+ 0000 ~                                    ld      a,StageMissileTargeting
 116+ 0000 ~                                    ld      (MissileTargettingFlag),a
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              ClearMissileTargetting: MACRO
 120+ 0000 ~                                    ld      a,StageMissileNotTargeting
 121+ 0000 ~                                    ld      (MissileTargettingFlag),a
 122+ 0000                                      ENDM
 123+ 0000
 124+ 0000
 125+ 0000              ; Clear targetting bits which signals launch if lower nibble has selected target
 126+ 0000              SetMissileLaunch:       MACRO
 127+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 128+ 0000 ~                                    and     $0F
 129+ 0000 ~                                    ld      (MissileTargettingFlag),a
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              LockMissileToA:         MACRO
 133+ 0000 ~                                    or      $80
 134+ 0000 ~                                    ld      (MissileTargettingFlag),a
 135+ 0000                                      ENDM
 136+ 0000
 137+ 0000              ClearECM:               MACRO
 138+ 0000 ~                                    xor     a
 139+ 0000 ~                                    ld      (ECMCountDown),a
 140+ 0000                                      ENDM
 141+ 0000
 142+ 0000
 143+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 144+ 0000              ;                                    if hit is set then hostile hence z is not set
 145+ 0000              IsShipHostile:          MACRO
 146+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 147+ 0000 ~                                    and     ShipIsHostile
 148+ 0000                                      ENDM
 149+ 0000
 150+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 151+ 0000              ;                                    if hit is set then hostile hence z is not set
 152+ 0000              IsShipFriendly:         MACRO
 153+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 154+ 0000 ~                                    and     ShipNotHostile                  ; mask so we only have hostile bit
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              ; Will check to see if bit 5 is set, if clear, then not exploding z clear
 158+ 0000              ;                                    if set    then exploding     z set
 159+ 0000              IsShipExploding:        MACRO
 160+ 0000 ~                                    ld      a,(UBnkaiatkecm)
 161+ 0000 ~                                    and     ShipExploding
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              UpdateLaserOnCounter:   MACRO
 165+ 0000 ~                                    ld      a,(CurrLaserPulseOnCount)
 166+ 0000 ~                                    and     a
 167+ 0000 ~                                    jr      z,.LaserOnIsDone
 168+ 0000 ~                                    dec     a
 169+ 0000 ~                                    ld      (CurrLaserPulseOnCount),a
 170+ 0000 ~                                    jr      z,.LaserOnIsDone
 171+ 0000 ~                                    ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
 172+ 0000 ~            .LaserOnIsDone:
 173+ 0000                                      ENDM
 174+ 0000
 175+ 0000              UpdateLaserOffCounter:  MACRO
 176+ 0000 ~                                    ld      a,(CurrLaserPulseOffTime)
 177+ 0000 ~                                    and     a
 178+ 0000 ~                                    jr      z,.LaserOffIsDone
 179+ 0000 ~                                    dec     a
 180+ 0000 ~                                    ld      (CurrLaserPulseOffTime),a
 181+ 0000 ~                                    jr      z,.LaserOffIsDone
 182+ 0000 ~                                    ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
 183+ 0000 ~            .LaserOffIsDone:
 184+ 0000                                      ENDM
 185+ 0000
 186+ 0000              UpdateLaserRestCounter: MACRO
 187+ 0000 ~                                    ld      a,(CurrLaserPulseRestCount)
 188+ 0000 ~                                    and     a
 189+ 0000 ~                                    jr      z,.LaserRestIsDone
 190+ 0000 ~                                    dec     a
 191+ 0000 ~                                    ld      (CurrLaserPulseRestCount),a
 192+ 0000 ~                                    jr      z,.LaserRestIsDone
 193+ 0000 ~                                    ZeroA                                                                           ;    then pulse rate count = 0
 194+ 0000 ~                                    ld      (CurrLaserPulseRateCount),a                                             ;    .
 195+ 0000 ~            .LaserRestIsDone
 196+ 0000                                      ENDM
 197+ 0000
 198+ 0000              ChargeEnergyAndShields: MACRO
 199+ 0000 ~                                    ld      a,$FF
 200+ 0000 ~                                    ld      (PlayerEnergy),a
 201+ 0000 ~                                    ld      (ForeShield),a
 202+ 0000 ~                                    ld      (AftShield),a
 203+ 0000                                      ENDM
 204+ 0000
 205+ 0000              CopyPresentSystemToTarget: MACRO
 206+ 0000 ~                                    ld      hl,(PresentSystemX)
 207+ 0000 ~                                    ld      (TargetSystemX),hl
 208+ 0000                                      ENDM
 209+ 0000
 210+ 0000              CopyTargetSystemToPresent: MACRO
 211+ 0000 ~                                    ld      hl,(TargetSystemX)
 212+ 0000 ~                                    ld      (PresentSystemX),hl
 213+ 0000                                      ENDM
 214+ 0000
 215+ 0000              HalveFugitiveStatus:    MACRO
 216+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
 217+ 0000 ~                                    srl     (hl)
 218+ 0000                                      ENDM
 219+ 0000
 220+ 0000              ClearForceTransition    MACRO
 221+ 0000 ~                                    ld      a,$FF
 222+ 0000 ~                                    ld      (ScreenTransitionForced),a
 223+ 0000                                      ENDM
 224+ 0000
 225+ 0000              ForceTransition:        MACRO newScreen
 226+ 0000 ~                                    ld      a,newScreen
 227+ 0000 ~                                    ld      (ScreenTransitionForced), a
 228+ 0000                                      ENDM
 229+ 0000
 230+ 0000              IsSpaceStationPresent:  MACRO
 231+ 0000 ~                                    ld      a,(SpaceStationSafeZone)
 232+ 0000 ~                                    and     a
 233+ 0000                                      ENDM
 234+ 0000
 235+ 0000              SetSafeZone:            MACRO
 236+ 0000 ~                                    xor     a
 237+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 238+ 0000                                      ENDM
 239+ 0000
 240+ 0000              ClearSafeZone:          MACRO
 241+ 0000 ~                                    ld      a,$FF
 242+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 243+ 0000                                      ENDM
 244+ 0000
 245+ 0000              ClearTemperatures:      MACRO
 246+ 0000 ~                                    xor     a
 247+ 0000 ~                                    ld      (CabinTemperature),a
 248+ 0000 ~                                    ld      (GunTemperature),a
 249+ 0000                                      ENDM
 250+ 0000
 251+ 0000              ClearWarpPressed:       MACRO
 252+ 0000 ~                                    SetMemFalse WarpPressed
 253+ 0000                                      ENDM
 254+ 0000
 255+ 0000              CoolCabin:              MACRO
 256+ 0000 ~                                    ld      a,(CabinTemperature)
 257+ 0000 ~                                    and     a
 258+ 0000 ~                                    jr      z,.AlreadyCool
 259+ 0000 ~                                    dec     a
 260+ 0000 ~                                    ld      (CabinTemperature),a
 261+ 0000 ~            .AlreadyCool:
 262+ 0000                                      ENDM
 263+ 0000
 264+ 0000              CoolLasers:             MACRO
 265+ 0000 ~                                    ld      a,(GunTemperature)
 266+ 0000 ~                                    and     a
 267+ 0000 ~                                    jr      z,.AlreadyCool
 268+ 0000 ~                                    dec     a
 269+ 0000 ~                                    ld      (GunTemperature),a
 270+ 0000 ~            .AlreadyCool:
 271+ 0000                                      ENDM
 272+ 0000
 273+ 0000              ; type 255 is "not fitted"
 274+ 0000
 275+ 0000
 276+ 0000              InitEventCounter:       MACRO
 277+ 0000 ~                                    xor     a
 278+ 0000 ~                                    ld      (EventCounter),a
 279+ 0000                                      ENDM
 280+ 0000
 281+ 0000              ClearMissJump:          MACRO
 282+ 0000 ~                                    ld      a,$FF
 283+ 0000 ~                                    ld      (MissJumpFlag),a
 284+ 0000                                      ENDM
 285+ 0000
 286+ 0000
 287+ 0000              DrainSystem:            MACRO   SystemMem, DrainMem
 288+ 0000 ~                                    ld      a,(DrainMem)
 289+ 0000 ~                                    ld      b,a
 290+ 0000 ~                                    ld      a,(SystemMem)
 291+ 0000 ~                                    sub     a,b
 292+ 0000 ~                                    ld      (SystemMem),a
 293+ 0000 ~                                    jr      c,.ZeroSystem
 294+ 0000 ~                                    jp      .ExitPoint
 295+ 0000 ~            .ZeroSystem:            ZeroA
 296+ 0000 ~                                    ld      (SystemMem),a
 297+ 0000 ~            .ExitPoint
 298+ 0000                                      ENDM
 299+ 0000
 300+ 0000              BoostSystem:            MACRO   SystemMem, BoostMem
 301+ 0000 ~                                    ld      a,(BoostMem)
 302+ 0000 ~                                    ld      b,a
 303+ 0000 ~                                    ld      a,(SystemMem)
 304+ 0000 ~                                    add     b
 305+ 0000 ~                                    ld      (SystemMem),a
 306+ 0000 ~                                    jr      c, .MaxSystem
 307+ 0000 ~                                    jp      .ExitPoint
 308+ 0000 ~            .MaxSystem:             ld      a,255
 309+ 0000 ~                                    ld      (SystemMem),a
 310+ 0000 ~            .ExitPoint
 311+ 0000                                      ENDM
 312+ 0000
 313+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER HasEngineSoundChanged:  MACRO
 314+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      a,(EngineSoundChanged)
 315+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         and     a
 316+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 317+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER
 318+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER ClearEngineSoundChanged:MACRO
 319+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         xor      a
 320+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      (EngineSoundChanged),a
 321+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 322+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER
 323+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER SetEngineSoundChanged:  MACRO
 324+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      a,$FF
 325+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      (EngineSoundChanged),a
 326+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 327+ 0000
# file closed: ./Variables/general_variables_macros.asm
  74  0000                                      INCLUDE "./Variables/UniverseSlot_macros.asm"
# file opened: ./Variables/UniverseSlot_macros.asm
   1+ 0000
   2+ 0000              AddJunkCount:           MACRO
   3+ 0000 ~                                    ld      hl,JunkCount
   4+ 0000 ~                                    inc     (hl)
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SubJunkCount:           MACRO
   8+ 0000 ~                                    ld      hl,JunkCount
   9+ 0000 ~                                    dec     (hl)
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ClearJunkCount:         MACRO
  13+ 0000 ~                                    ZeroA
  14+ 0000 ~                                    ld      (JunkCount),a
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              AddCop:                 MACRO
  18+ 0000 ~                                    ld      hl,CopCount
  19+ 0000 ~                                    inc     (hl)
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              SubCop:                 MACRO
  23+ 0000 ~                                    ld      hl,CopCount
  24+ 0000 ~                                    dec     (hl)
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              AddPirateCount:         MACRO
  28+ 0000 ~                                    ld      hl,PirateCount
  29+ 0000 ~                                    inc     (hl)
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              SubPirateCount:         MACRO
  33+ 0000 ~                                    ld      hl,PirateCount
  34+ 0000 ~                                    inc     (hl)
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              AreCopsPresent:         MACRO
  38+ 0000 ~                                    ld      a,(CopCount)
  39+ 0000 ~                                    and     a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              ; Class == shiptype
  43+ 0000              SetSlotAToUnivClass:    MACRO
  44+ 0000 ~                                    ex      af,af'
  45+ 0000 ~                                    ld      a,(ShipTypeAddr)
  46+ 0000 ~                                    ld      b,a
  47+ 0000 ~                                    ex      af,af'
  48+ 0000 ~                                    call    SetSlotAToClassB
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              TestRoomForJunk:        MACRO   Target
  52+ 0000 ~                                    ld      a,3
  53+ 0000 ~                                    JumpIfMemTrue  SpaceStationSafeZone, .DoTest
  54+ 0000 ~                                    add     a,2
  55+ 0000 ~            .DoTest                 JumpIfALTMemusng    JunkCount, Target
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              JumpIfSpaceStation:     MACRO   Target
  59+ 0000 ~                                    ld      hl,UniverseSlotType
  60+ 0000 ~                                    ld      a,(hl)
  61+ 0000 ~                                    cp      ShipTypeStation
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              ClearSlotMem:           MACRO   mem
  65+ 0000 ~                                    ld      a,(mem)
  66+ 0000 ~                                    call    ClearSlotA
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              IsSlotEmpty:            MACRO
  70+ 0000 ~                                    ld      hl,UniverseSlotList
  71+ 0000 ~                                    add     hl,a
  72+ 0000 ~                                    ld      a,(hl)
  73+ 0000 ~                                    cp      0
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              IsSlotMissile:          MACRO
  77+ 0000 ~                                    ld      hl,UniverseSlotType
  78+ 0000 ~                                    add     hl,a
  79+ 0000 ~                                    ld      a,(hl)
  80+ 0000 ~                                    cp      ShipTypeMissile
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000
  84+ 0000              ; Checks if slot is empty else A = ship type
  85+ 0000              ReturnIfSlotAEmpty:     MACRO
  86+ 0000 ~                                    ld      hl,UniverseSlotList
  87+ 0000 ~                                    add     hl,a
  88+ 0000 ~                                    ld      a,(hl)
  89+ 0000 ~                                    inc     a
  90+ 0000 ~                                    ret     z           ; if slot was ff inc would make it 0
  91+ 0000 ~                                    dec     a           ; get original value back for later
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000              JumpIfSlotAEmpty:       MACRO   Target
  95+ 0000 ~                                    ld      hl,UniverseSlotList
  96+ 0000 ~                                    add     hl,a
  97+ 0000 ~                                    ld      a,(hl)
  98+ 0000 ~                                    inc     a
  99+ 0000 ~                                    jp      z,Target    ; if slot was ff inc would make it 0
 100+ 0000 ~                                    dec     a           ; get original value back for later
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              JumpIfSlotHLEmpty:      MACRO   Target
 104+ 0000 ~                                    ld      a,(hl)
 105+ 0000 ~                                    and     a
 106+ 0000 ~                                    jr      nz,Target
 107+ 0000                                      ENDM
# file closed: ./Variables/UniverseSlot_macros.asm
  75  0000
  76  0000                                      INCLUDE "./Data/ShipIdEquates.asm"
# file opened: ./Data/ShipIdEquates.asm
   1+ 0000
   2+ 0000
   3+ 0000
   4+ 0000              ShipID_Adder            EQU 00
   5+ 0000              ShipID_Anaconda         EQU 01
   6+ 0000              ShipID_Asp_Mk_2         EQU 02
   7+ 0000              ShipID_Boa              EQU 03
   8+ 0000              ShipID_CargoType5       EQU 04
   9+ 0000              ShipID_Boulder          EQU 05
  10+ 0000              ShipID_Asteroid         EQU 06
  11+ 0000              ShipID_Bushmaster       EQU 07
  12+ 0000              ShipID_Chameleon        EQU 08
  13+ 0000              ShipID_CobraMk3         EQU 09
  14+ 0000              ShipID_Cobra_Mk_1       EQU 10
  15+ 0000              ShipID_Cobra_Mk_3_P     EQU 11
  16+ 0000              ShipID_Constrictor      EQU 12
  17+ 0000              ShipID_Coriolis         EQU 13
  18+ 0000              ShipID_Cougar           EQU 14
  19+ 0000              ShipID_Dodo             EQU 15
  20+ 0000              ShipID_Dragon           EQU 16
  21+ 0000              ShipID_Escape_Pod       EQU 17
  22+ 0000              ShipID_Fer_De_Lance     EQU 18
  23+ 0000              ShipID_Gecko            EQU 19
  24+ 0000              ShipID_Ghavial          EQU 20
  25+ 0000              ShipID_Iguana           EQU 21
  26+ 0000              ShipID_Krait            EQU 22
  27+ 0000              ShipID_Logo             EQU 23
  28+ 0000              ShipID_Mamba            EQU 24
  29+ 0000              ShipID_Missile          EQU 25
  30+ 0000              ShipID_Monitor          EQU 26
  31+ 0000              ShipID_Moray            EQU 27
  32+ 0000              ShipID_Ophidian         EQU 28
  33+ 0000              ShipID_Plate            EQU 29
  34+ 0000              ShipID_Python           EQU 30
  35+ 0000              ShipID_Python_P         EQU 31
  36+ 0000              ShipID_Rock_Hermit      EQU 32
  37+ 0000              ShipID_ShuttleType9     EQU 33
  38+ 0000              ShipID_Shuttle_Mk_2     EQU 34
  39+ 0000              ShipID_Sidewinder       EQU 35
  40+ 0000              ShipID_Splinter         EQU 36
  41+ 0000              ShipID_TestVector       EQU 37
  42+ 0000              ShipID_Thargoid         EQU 38
  43+ 0000              ShipID_Thargon          EQU 39
  44+ 0000              ShipID_TransportType10  EQU 40
  45+ 0000              ShipID_Viper            EQU 41
  46+ 0000              ShipID_Worm             EQU 42
  47+ 0000              ShipID_Rattler          EQU 43
  48+ 0000
# file closed: ./Data/ShipIdEquates.asm
  77  0000
  78  0000
  79  0000
  80  0000              UpdateLaserCountersold: MACRO
  81  0000 ~                                    JumpIfMemZero CurrLaserPulseOnCount,   .SkipPulseOn     ; if beam on count > 0 then beam on count --
  82  0000 ~                                    dec     a                                               ; .
  83  0000 ~                                    ld      (CurrLaserPulseOnCount),a                       ; .
  84  0000 ~            .SkipPulseOn:           JumpIfAIsNotZero  .SkipRestCounter                      ;    if beam on = 0 then
  85  0000 ~                                    ld      a,(CurrLaserPulseOffCount)                      ;       if beam off > 0 then  beam off --
  86  0000 ~                                    JumpIfMemZero CurrLaserPulseOffCount, .SkipPulseOff     ;       .
  87  0000 ~                                    dec     a                                               ;       .
  88  0000 ~                                    ld      (CurrLaserPulseOffCount),a                      ;       .
  89  0000 ~            .SkipPulseOff:          JumpIfAIsNotZero  .SkipRestCounter                      ;       if beam off = 0
  90  0000 ~                                    JumpIfMemZero CurrLaserPulseRestCount, .ZeroRateCounter ;
  91  0000 ~                                    dec     a
  92  0000 ~                                    ld      (CurrLaserPulseRestCount),a
  93  0000 ~                                    jr      nz,.SkipRestCounter
  94  0000 ~            .ZeroRateCounter:       ld      (CurrLaserPulseRateCount),a
  95  0000 ~            .SkipRestCounter:
  96  0000                                      ENDM
  97  0000
  98  0000              MessageAt:              MACRO   x,y,message
  99  0000 ~                                    MMUSelectLayer1
 100  0000 ~                                    ld      d,y
 101  0000 ~                                    ld      e,x
 102  0000 ~                                    ld      hl,message
 103  0000 ~                                    call    l1_print_at_wrap
 104  0000                                      ENDM
 105  0000
 106  0000              SetBorder:              MACRO   value
 107  0000 ~                                    MMUSelectLayer1
 108  0000 ~                                    ld          a,value
 109  0000 ~                                    call        l1_set_border
 110  0000                                      ENDM
 111  0000
 112  0000              charactersetaddr		equ 15360
 113  0000              STEPDEBUG               equ 1
 114  0000
 115  0000              TopOfStack              equ $5CCB ;$6100
 116  0000
 117  0000                                      ORG $5DCB;      $6200
 118  5DCB F3           EliteNextStartup:       di
 119  5DCC CD A9 AB     .InitiliseFileIO:       call        GetDefaultDrive
 120  5DCF ED 91 07 03  .InitialiseClockSpeed:  nextreg     TURBO_MODE_REGISTER,Speed_28MHZ
 121  5DD3              .InitialiseLayerOrder:
 122  5DD3                                      DISPLAY "Starting Assembly At ", EliteNextStartup
 123  5DD3                                      ; "STARTUP"
 124  5DD3                                      ; Make sure  rom is in page 0 during load
 125  5DD3                                      MMUSelectSpriteBank
 125  5DD3 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 126  5DD7 CD 94 E5                             call		init_sprites
 127  5DDA                                      MMUSelectLayer2
 127  5DDA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 128  5DDE CD 0F E0                             call        asm_disable_l2_readwrite
 129  5DE1                                      MMUSelectROMS
 129  5DE1 ED 91 50 FF >                     nextreg EXSDOSMMU0,        BankROM
 129  5DE5 ED 91 51 FF >                     nextreg EXSDOSMMU1,        BankROM
 130  5DE9 ED 91 06 01  .InitialisePeripherals: nextreg     PERIPHERAL_2_REGISTER, AUDIO_CHIPMODE_AY ; Enable Turbo Sound
 131  5DED ED 91 08 52                          nextreg     PERIPHERAL_3_REGISTER, DISABLE_RAM_IO_CONTENTION | ENABLE_TURBO_SOUND | INTERNAL_SPEAKER_ENABLE
 132  5DF1 ED 91 09 00                          nextreg     PERIPHERAL_4_REGISTER, %00000000
 133  5DF5
 134  5DF5                                      MMUSelectSound
 134  5DF5 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 135  5DF9 CD 4B E0                             call        InitAudio
 136  5DFC 3E B0        .InitialiseInterrupts:  ld	        a,VectorTable>>8
 137  5DFE ED 47                                ld	        i,a						                        ; im2 table will be at address 0xa000
 138  5E00 ED 91 22 06                          nextreg     LINE_INTERRUPT_CONTROL_REGISTER,%00000110       ; Video interrup on
 139  5E04 ED 91 23 00                          nextreg     LINE_INTERRUPT_VALUE_LSB_REGISTER,0   ; lasta line..
 140  5E08 ED 5E                                im	2
 141  5E0A              .GenerateDefaultCmdr:   MMUSelectCommander
 141  5E0A ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 142  5E0E CD 4D E2                             call		defaultCommander
 143  5E11 CD 18 E2                             call        saveCommander
 144  5E14                                      MMUSelectLayer1
 144  5E14 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 145  5E18 CD 80 E0                             call		l1_cls
 146  5E1B 3E 07                                ld			a,7
 147  5E1D CD 9B E0                             call		l1_attr_cls_to_a
 148  5E20                                      SetBorder   $FF
 148  5E20             >                        MMUSelectLayer1
 148  5E20 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 148  5E24 3E FF       >                        ld          a,$FF
 148  5E26 CD A5 E0    >                        call        l1_set_border
 149  5E29              .InitialiseL2:          MMUSelectLayer2
 149  5E29 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 150  5E2D CD 45 E2                             call 		l2_initialise
 151  5E30              .InitialisingMessage:   MessageAt   0,0,InitialiseMessage
 151  5E30             >                        MMUSelectLayer1
 151  5E30 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 151  5E34 16 00       >                        ld      d,0
 151  5E36 1E 00       >                        ld      e,0
 151  5E38 21 74 66    >                        ld      hl,InitialiseMessage
 151  5E3B CD 15 E1    >                        call    l1_print_at_wrap
 152  5E3E                                      SetBorder   $01
 152  5E3E             >                        MMUSelectLayer1
 152  5E3E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152  5E42 3E 01       >                        ld          a,$01
 152  5E44 CD A5 E0    >                        call        l1_set_border
 153  5E47                                      MessageAt   0,8,LoadingSpritesMessage
 153  5E47             >                        MMUSelectLayer1
 153  5E47 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 153  5E4B 16 08       >                        ld      d,8
 153  5E4D 1E 00       >                        ld      e,0
 153  5E4F 21 80 66    >                        ld      hl,LoadingSpritesMessage
 153  5E52 CD 15 E1    >                        call    l1_print_at_wrap
 154  5E55                                      ZeroA
 154  5E55 AF          >                        xor a
 155  5E56 32 A4 66                             ld          (LoadCounter),a
 156  5E59              .StreamSpriteData:      MMUSelectSpriteBank
 156  5E59 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 157  5E5D CD 20 E6                             call        load_pattern_files
 158  5E60 CD 32 7E                             call        init_keyboard
 159  5E63              .PostDiag:              ClearForceTransition
 159  5E63 3E FF       >                        ld      a,$FF
 159  5E65 32 7A 69    >                        ld      (ScreenTransitionForced),a
 160  5E68                                      SetBorder   $04
 160  5E68             >                        MMUSelectLayer1
 160  5E68 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 160  5E6C 3E 04       >                        ld          a,$04
 160  5E6E CD A5 E0    >                        call        l1_set_border
 161  5E71                                      MMUSelectSpriteBank
 161  5E71 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 162  5E75 CD AF E5                             call        sprite_diagnostic
 163  5E78                                      SetBorder   $05
 163  5E78             >                        MMUSelectLayer1
 163  5E78 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 163  5E7C 3E 05       >                        ld          a,$05
 163  5E7E CD A5 E0    >                        call        l1_set_border
 164  5E81 CD EE 7E     .PostDiag2:             call        WaitForAnyKey
 165  5E84                                      MMUSelectSpriteBank
 165  5E84 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 166  5E88 CD 9F E5                             call        sprite_diagnostic_clear
 167  5E8B 3E 10        TidyDEBUG:              ld          a,16
 168  5E8D 32 18 68                             ld          (TidyCounter),a
 169  5E90 AF           TestText:               xor			a
 170  5E91 32 B6 80                             ld      (JSTX),a
 171  5E94              DEBUGCODE:              ClearSafeZone ; just set in open space so compas treacks su n
 171  5E94 3E FF       >                        ld      a,$FF
 171  5E96 32 3B 82    >                        ld      (SpaceStationSafeZone),a
 172  5E99                                      SetBorder   $06
 172  5E99             >                        MMUSelectLayer1
 172  5E99 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 172  5E9D 3E 06       >                        ld          a,$06
 172  5E9F CD A5 E0    >                        call        l1_set_border
 173  5EA2
 174  5EA2              ;.ClearLayer2Buffers:    DoubleBufferIfPossible
 175  5EA2              ;                        DoubleBufferIfPossible
 176  5EA2              ; Set up all 8 galaxies, 7later this will be pre built and loaded into memory from files
 177  5EA2                                      SetBorder   $07
 177  5EA2             >                        MMUSelectLayer1
 177  5EA2 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 177  5EA6 3E 07       >                        ld          a,$07
 177  5EA8 CD A5 E0    >                        call        l1_set_border
 178  5EAB              InitialiseGalaxies:     MessageAt   0,24,InitialisingGalaxies
 178  5EAB             >                        MMUSelectLayer1
 178  5EAB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 178  5EAF 16 18       >                        ld      d,24
 178  5EB1 1E 00       >                        ld      e,0
 178  5EB3 21 8F 66    >                        ld      hl,InitialisingGalaxies
 178  5EB6 CD 15 E1    >                        call    l1_print_at_wrap
 179  5EB9 CD 7B 69                             call		ResetUniv                       ; Reset ship data
 180  5EBC CD A3 69                             call        ResetGalaxy                     ; Reset each galaxy copying in code
 181  5EBF CD CC 69                             call        SeedAllGalaxies
 182  5EC2                                      MMUSelectSpriteBank
 182  5EC2 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 183  5EC6 CD 8A E5                             call        sprite_cls_all
 184  5EC9                                      MMUSelectLayer1
 184  5EC9 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 185  5ECD CD 80 E0                             call		l1_cls
 186  5ED0                                      SetBorder   $00
 186  5ED0             >                        MMUSelectLayer1
 186  5ED0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 186  5ED4 3E 00       >                        ld          a,$00
 186  5ED6 CD A5 E0    >                        call        l1_set_border
 187  5ED9                                      IFDEF SKIPATTRACT
 188  5ED9 ~                                        jp DefaultCommander
 189  5ED9                                      ENDIF
 190  5ED9 F3           StartAttractMode:       di                                          ; we are changing interrupts
 191  5EDA                                      MMUSelectSound
 191  5EDA ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 192  5EDE CD B7 E0                             call        InitAudioMusic
 193  5EE1 21 11 B2                             ld          hl,AttractInterrrupt
 194  5EE4 22 C4 B1                             ld          (IM2SoundHandler+1),hl
 195  5EE7 CD 62 77                             call        AttractModeInit
 196  5EEA FB                                   ei
 197  5EEB CD B7 77                             call        AttractModeMain                 ; now drive attact mode keyboard scan
 198  5EEE F3                                   di                                          ; set up for main
 199  5EEF 21 D7 B1                             ld          hl,SoundInterrupt               ; sound handler
 200  5EF2 22 C4 B1                             ld          (IM2SoundHandler+1),hl
 201  5EF5                                      MMUSelectSound
 201  5EF5 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 202  5EF9 CD 4B E0                             call        InitAudio                       ; jsut re-init all audio for now rather than sound off
 203  5EFC                                      IFDEF MAIN_INTERRUPTENABLE
 204  5EFC ~                                        ei
 205  5EFC                                      ENDIF
 206  5EFC                                      JumpIfAIsZero  SkipDefaultCommander
 206  5EFC A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 206  5EFD CA 0A 5F    >                        jp	    z, SkipDefaultCommander
 207  5F00              DefaultCommander:       MMUSelectCommander
 207  5F00 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 208  5F04 CD 4D E2                             call		defaultCommander
 209  5F07 C3 0A 5F                             jp          InitialiseMainLoop
 209  5F0A
 210  5F0A              SkipDefaultCommander:
 211  5F0A              ;                        call    FindNextFreeSlotInA
 212  5F0A              ;                        ld      b,a
 213  5F0A              ;                        ld      a,13 ;Coriolis station
 214  5F0A              ;                        call    InitialiseShipAUnivB
 215  5F0A              ;                        xor     a
 216  5F0A CD 0E 86     InitialiseMainLoop:     call    InitMainLoop
 217  5F0D              ;..MAIN GAME LOOP..................................................................................................................
 218  5F0D              ; MACRO BLOCKS.....................................................................................................................
 219  5F0D              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 220  5F0D
 221  5F0D
 222  5F0D
 223  5F0D              ; if beam on count > 0
 224  5F0D              ;    then beam on count --
 225  5F0D              ;         if beam on count = 0
 226  5F0D              ;            then beam off count = beam off
 227  5F0D              ; if beam off > 0
 228  5F0D              ;    then beam off --
 229  5F0D              ;         if beam off = 0 and pulse rate count = max count
 230  5F0D              ;            then pulse rest count = pulse rest
 231  5F0D              ; if pulse rest > 0 then pulse rest --
 232  5F0D              ;    if pulse rest = 0
 233  5F0D              ;       then pulse rate count = 0
 234  5F0D
 235  5F0D
 236  5F0D              ; counter logic
 237  5F0D              ;    if beam on count > 0 then beam on count --
 238  5F0D              ;    if beam on = 0 then
 239  5F0D              ;       if beam off count >0 then beam off count --
 240  5F0D              ;       if beam off count = 0 them
 241  5F0D              ;          if pulse rest count > 0 then pulse rest count --
 242  5F0D              ;             if reset count = 0 then pulse rate count = 0
 243  5F0D              ; shoting logic
 244  5F0D              ;    if pulse on count is 0 and pulse off count is 0 and rest count is 0
 245  5F0D              ;       then  if fire pressed is OK
 246  5F0D              ;                if not beam type
 247  5F0D              ;                   then pulse rate count ++
 248  5F0D              ;                        if pulse rate count < pulse max count
 249  5F0D              ;                           then pulse on count = pulse on time
 250  5F0D              ;                                pulse off count = pulse off time
 251  5F0D              ;                                pulse rest count = pulse rest time
 252  5F0D              ;                           else pulse rest count = pulse rest time
 253  5F0D              ;                                pulse rate count, pulse on count, pulse off count = 0
 254  5F0D              ;                   else pulse on count = $FF
 255  5F0D              ;                        pulse off time , rest time = 0
 256  5F0D
 257  5F0D              ;..................................................................................................................................
 258  5F0D                                      INCLUDE "./GameEngine/MainLoop.asm"
# file opened: ./GameEngine/MainLoop.asm
   1+ 5F0D                  DEFINE  MAINLOOP_UPDATE_LASERS
   2+ 5F0D                  DEFINE  MAINLOOP_COOL_LASERS
   3+ 5F0D                  DEFINE  MAINLOOP_ECM
   4+ 5F0D                  DEFINE  MAINLOOP_KEYBOARDSCAN
   5+ 5F0D              ;    DEFINE  MAINLOOP_DEMOSHIPS
   6+ 5F0D              ;   DEFINE  MAINLOOP_DEBUGMISSILE 1
   7+ 5F0D                  DEFINE  MAINLOOP_INPUTHANDLER
   8+ 5F0D                  DEFINE  MAINLOOP_EVENTHANDLER
   9+ 5F0D                  DEFINE  MAINLOOP_RECHARGE
  10+ 5F0D                  DEFINE  MAINLOOP_LAUNCHMISSILE
  11+ 5F0D                  DEFINE  MAINLOOP_UPDATEUNIVERSE
  12+ 5F0D                  DEFINE  MAINLOOP_SUN_RENDER 1
  13+ 5F0D                  DEFINE  MAINLOOP_PLANET_RENDER 1
  14+ 5F0D                  DEFINE  MAINLOOP_MODEL_RENDER    1
  15+ 5F0D                  DEFINE  MAINLOOP_SPAWN_ALWAYS_OUTSIDE_SAFEZONE 1
  16+ 5F0D                  DEFINE  MAINLOOP_WARP_ENABLED 1
  17+ 5F0D
  18+ 5F0D              ;.................................................................................................................................
  19+ 5F0D CD DE 87     MainLoop:	            call    doRandom                                                ; redo the seeds every frame
  20+ 5F10                  IFDEF MAINLOOP_UPDATE_LASERS
  21+ 5F10                                      UpdateLaserOnCounter
  21+ 5F10 3A F1 84    >                        ld      a,(CurrLaserPulseOnCount)
  21+ 5F13 A7          >                        and     a
  21+ 5F14 28 0C       >                        jr      z,.LaserOnIsDone
  21+ 5F16 3D          >                        dec     a
  21+ 5F17 32 F1 84    >                        ld      (CurrLaserPulseOnCount),a
  21+ 5F1A 28 06       >                        jr      z,.LaserOnIsDone
  21+ 5F1C             >                        ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
  21+ 5F1C 3A E8 84    >                        ld       a,(CurrLaserPulseOffTime)
  21+ 5F1F 32 F2 84    >                        ld       (CurrLaserPulseOffCount),a
  21+ 5F22             >.LaserOnIsDone:
  22+ 5F22                                      UpdateLaserOffCounter
  22+ 5F22 3A E8 84    >                        ld      a,(CurrLaserPulseOffTime)
  22+ 5F25 A7          >                        and     a
  22+ 5F26 28 0C       >                        jr      z,.LaserOffIsDone
  22+ 5F28 3D          >                        dec     a
  22+ 5F29 32 E8 84    >                        ld      (CurrLaserPulseOffTime),a
  22+ 5F2C 28 06       >                        jr      z,.LaserOffIsDone
  22+ 5F2E             >                        ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
  22+ 5F2E 3A E9 84    >                        ld       a,(CurrLaserPulseRest)
  22+ 5F31 32 F3 84    >                        ld       (CurrLaserPulseRestCount),a
  22+ 5F34             >.LaserOffIsDone:
  23+ 5F34                                      UpdateLaserRestCounter
  23+ 5F34 3A F3 84    >                        ld      a,(CurrLaserPulseRestCount)
  23+ 5F37 A7          >                        and     a
  23+ 5F38 28 0A       >                        jr      z,.LaserRestIsDone
  23+ 5F3A 3D          >                        dec     a
  23+ 5F3B 32 F3 84    >                        ld      (CurrLaserPulseRestCount),a
  23+ 5F3E 28 04       >                        jr      z,.LaserRestIsDone
  23+ 5F40             >                        ZeroA                                                                           ;    then pulse rate count = 0
  23+ 5F40 AF          >                        xor a
  23+ 5F41 32 F4 84    >                        ld      (CurrLaserPulseRateCount),a                                             ;    .
  23+ 5F44             >.LaserRestIsDone
  24+ 5F44                  ENDIF
  25+ 5F44                  IFDEF MAINLOOP_COOL_LASERS
  26+ 5F44                                      CoolLasers
  26+ 5F44 3A C8 84    >                        ld      a,(GunTemperature)
  26+ 5F47 A7          >                        and     a
  26+ 5F48 28 04       >                        jr      z,.AlreadyCool
  26+ 5F4A 3D          >                        dec     a
  26+ 5F4B 32 C8 84    >                        ld      (GunTemperature),a
  26+ 5F4E             >.AlreadyCool:
  27+ 5F4E                  ENDIF
  28+ 5F4E                  IFDEF MAINLOOP_ECM
  29+ 5F4E                                      INCLUDE "./GameEngine/MainLoop_ECM.asm"
# file opened: ././GameEngine/MainLoop_ECM.asm
   1++5F4E 3A 43 82     .ReducePlayerECM:       ld      a,(PlayerECMActiveCount)
   2++5F51 A7                                   and     a
   3++5F52 CA 64 5F                             jp      z, .DonePlayerECM
   4++5F55 3D                                   dec     a
   5++5F56 32 43 82                             ld      (PlayerECMActiveCount),a
   6++5F59 3A CF 84                             ld      a,(PlayerEnergy)
   7++5F5C A7                                   and     a
   8++5F5D CA 64 5F                             jp      z, .DonePlayerECM
   9++5F60 3D                                   dec     a
  10++5F61 32 CF 84                             ld      (PlayerEnergy),a
  11++5F64              .DonePlayerECM:
  12++5F64 3A B4 80     .ReduceCommonECM:       ld      a,(ECMCountDown)
  13++5F67 A7                                   and     a
  14++5F68 CA 6F 5F                             jp      z, .DoneCommonECM
  15++5F6B 3D                                   dec     a
  16++5F6C 32 B4 80                             ld      (ECMCountDown),a
  17++5F6F              .DoneCommonECM:
  18++5F6F
# file closed: ././GameEngine/MainLoop_ECM.asm
  30+ 5F6F                  ENDIF
  31+ 5F6F                  IFDEF MAINLOOP_WARP_ENABLED
  32+ 5F6F 3A 54 83                             ld      a,(WarpCooldown)
  33+ 5F72 A7                                   and     a
  34+ 5F73 CA 7A 5F                             jp      z,.AlreadyCool
  35+ 5F76 3D                                   dec     a
  36+ 5F77 32 54 83                             ld      (WarpCooldown),a
  37+ 5F7A              .AlreadyCool
  38+ 5F7A                  ENDIF
  39+ 5F7A                  IFDEF MAINLOOP_KEYBOARDSCAN
  40+ 5F7A CD 3E 7E                             call    scan_keyboard                                           ; perform the physical input scan
  41+ 5F7D                  ENDIF
  42+ 5F7D              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
  43+ 5F7D                  IFDEF MAINLOOP_DEMOSHIPS
  44+ 5F7D ~            DemoOfShipsDEBUG:       call    TestForNextShip
  45+ 5F7D                  ENDIF
  46+ 5F7D              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
  47+ 5F7D 3E 00        InputBlockerCheck:      ld      a,$0
  48+ 5F7F                  IFDEF MAINLOOP_INPUTHANDLER
  49+ 5F7F                                      JumpIfAEqNusng $01, SkipInputHandlers                           ; as we are in a transition the whole update AI is skipped
  49+ 5F7F FE 01       >                        cp     $01
  49+ 5F81 CA AB 5F    >                        jp      z,SkipInputHandlers
  50+ 5F84                                      JumpIfMemTrue TextInputMode, SkipInputHandlers                  ; in input mode all keys are processed by input
  50+ 5F84 3A 78 83    >                        ld      a,(TextInputMode)
  50+ 5F87 A7          >                        and     a
  50+ 5F88 CA AB 5F    >                        jp      z, SkipInputHandlers
  51+ 5F8B CD A1 6A                             call    ViewKeyTest
  52+ 5F8E CD 87 67                             call    TestPauseMode
  53+ 5F91 3A 4D 83                             ld      a,(GamePaused)
  54+ 5F94 FE 00                                cp      0
  55+ 5F96 C2 0D 5F                             jp      nz,MainLoop
  56+ 5F99 CD EF 7F                             call    MovementKeyTest
  57+ 5F9C              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
  58+ 5F9C                  ENDIF
  59+ 5F9C 3A AA 5F     HandleMovement:         ld      a,(CallCursorRoutine+2)
  60+ 5F9F                                      JumpIfAIsZero     TestAreWeDocked
  60+ 5F9F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  60+ 5FA0 CA AB 5F    >                        jp	    z, TestAreWeDocked
  61+ 5FA3              ;.. Handle displaying correct screen ..............................................................................................
  62+ 5FA3 3E 00        HandleBankSelect:       ld      a,$00
  63+ 5FA5                                      MMUSelectScreenA
  63+ 5FA5 ED 92 56    >                     nextreg ScreenBankMMU,		a
  64+ 5FA8 CD 00 00     CallCursorRoutine:      call    $0000
  65+ 5FAB              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
  66+ 5FAB              ;.. Also end up here if we have the screen input blocker set
  67+ 5FAB              ;DEFUNCT?EngineSounds:       ;HasEngineSoundChanged
  68+ 5FAB              ;DEFUNCT?                    ;call    nz,UpdateEngineSound
  69+ 5FAB              SkipInputHandlers:
  70+ 5FAB              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
  71+ 5FAB              TestAreWeDocked:        JumpIfMemNeNusng DockedFlag, StateNormal, UpdateLoop            ; if if we are in free space do universe updateelse we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
  71+ 5FAB 3A 4C 83    >                        ld  a,(DockedFlag)
  71+ 5FAE FE 00       >                        cp  StateNormal
  71+ 5FB0 C2 04 61    >                        jp  nz,UpdateLoop
  72+ 5FB3                  IFDEF MAINLOOP_EVENTHANDLER
  73+ 5FB3 21 55 83     .UpdateEventCounter:    ld      hl,EventCounter                                         ; evnery 256 cycles we do a trigger test
  74+ 5FB6 35                                   dec     (hl)
  75+ 5FB7 CC BA 61     .ProcessEvent:          call    z,LoopEventTriggered
  76+ 5FBA                  ENDIF
  77+ 5FBA                  IFDEF MAINLOOP_RECHARGE
  78+ 5FBA 3A 55 83     .ProcessRecharge:       ld      a,(EventCounter)
  79+ 5FBD E6 07                                and     7
  80+ 5FBF CC 7E 86                             call    z, RechargeShip
  81+ 5FC2                  ENDIF
  82+ 5FC2                  IFDEF MAINLOOP_LAUNCHMISSILE
  83+ 5FC2              .PlayerMissileLaunch:   AnyMissilesLeft
  83+ 5FC2 3A 42 82    >                        ld      a,(NbrMissiles)
  83+ 5FC5 A7          >                        and     a
  84+ 5FC6 28 08                                jr      z,.NoMissiles                                           ; just in case last one gets destroyed
  85+ 5FC8                                      IsMissileLaunchFlagged
  85+ 5FC8 3A D2 84    >                        ld      a,(MissileTargettingFlag)
  85+ 5FCB E6 80       >                        and     $80
  86+ 5FCD CC 30 62                             call    z,  LaunchPlayerMissile
  87+ 5FD0              .NoMissiles
  88+ 5FD0                  ENDIF
  89+ 5FD0              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
  90+ 5FD0              ;.. we do one universe slot each loop update ......................................................................................
  91+ 5FD0              ;.. First update Sun...............................................................................................................
  92+ 5FD0                  IFDEF MAINLOOP_WARP_ENABLED
  93+ 5FD0              ProcessWarp:            JumpIfMemFalse  WarpPressed, .NoWarp
  93+ 5FD0 3A 7B 83    >                        ld      a,(WarpPressed)
  93+ 5FD3 A7          >                        and     a
  93+ 5FD4 C2 5D 60    >                        jp      nz, .NoWarp
  94+ 5FD7              .WarpIsPressed:         SetMemFalse     WarpPressed                               ; clear and acknowlege
  94+ 5FD7 3E FF       >                        ld      a,$FF
  94+ 5FD9 32 7B 83    >                        ld      (WarpPressed),a
  95+ 5FDC                                      JumpIfMemZero   WarpCooldown, .WarpDriveCool
  95+ 5FDC 3A 54 83    >                        ld  a,(WarpCooldown)
  95+ 5FDF A7          >                        and a
  95+ 5FE0 CA E6 5F    >                        jp  z,.WarpDriveCool
  96+ 5FE3              ;Need logic for jump drive malfunction
  97+ 5FE3              .JumpDriveHot:          ; call bong jump drive hot
  98+ 5FE3                                      ; flash jump drive status icon
  99+ 5FE3 C3 5D 60                             jp      .NoWarp
 100+ 5FE6              .WarpDriveCool:         JumpIfMemFalse    SpaceStationSafeZone, .NotInSpaceStationRange
 100+ 5FE6 3A 3B 82    >                        ld      a,(SpaceStationSafeZone)
 100+ 5FE9 A7          >                        and     a
 100+ 5FEA C2 F0 5F    >                        jp      nz, .NotInSpaceStationRange
 101+ 5FED              .MassLocked:            ; call bong
 102+ 5FED                                      ; message mass locked
 103+ 5FED C3 5D 60                             jp      .NoWarp
 104+ 5FF0 CD 60 87     .NotInSpaceStationRange:call    AreShipsPresent
 105+ 5FF3 30 F8                                jr      nc,     .MassLocked
 106+ 5FF5              .NoShipsInSystem:      ;MMUSelectPlanet
 107+ 5FF5                                     ;ld      a,(PBnKzsgn)
 108+ 5FF5                                     ;and     $80
 109+ 5FF5                                     ;jp      z,.JumpToPlanetCheck
 110+ 5FF5                                      MMUSelectSun
 110+ 5FF5 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 111+ 5FF9 3A 18 C0                             ld      a,(SBnKzsgn)
 112+ 5FFC E6 80                                and     $80
 113+ 5FFE CA 2C 60                             jp      z,.JumpToSunCheck
 114+ 6001              .NotCorrectFacing:      ;       call bong, align with body
 115+ 6001 C3 5D 60                             jp      .NoWarp
 116+ 6004 3A 17 C0     .JumpToPlanetCheck:     ld      a,(PBnKzhi)
 117+ 6007                                      JumpIfAGTENusng  2, .PlanetRangeOK
 117+ 6007 FE 02       >                        cp     2
 117+ 6009 D2 1F 60    >                        jp		nc,.PlanetRangeOK
 118+ 600C 3A 14 C0                             ld      a,(PBnKyhi)
 119+ 600F                                      JumpIfAGTENusng  2, .PlanetRangeOK
 119+ 600F FE 02       >                        cp     2
 119+ 6011 D2 1F 60    >                        jp		nc,.PlanetRangeOK
 120+ 6014 3A 11 C0                             ld      a,(PBnKxhi)
 121+ 6017                                      JumpIfAGTENusng  2, .PlanetRangeOK
 121+ 6017 FE 02       >                        cp     2
 121+ 6019 D2 1F 60    >                        jp		nc,.PlanetRangeOK
 122+ 601C C3 ED 5F                             jp      .MassLocked
 123+ 601F CD BA C0     .PlanetRangeOK:         call    WarpPlanetCloser
 124+ 6022                                      MMUSelectSun
 124+ 6022 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 125+ 6026 CD C4 C1                             call    WarpSunFurther
 126+ 6029 C3 4B 60                             jp      .MoveJunk
 127+ 602C 3A 18 C0     .JumpToSunCheck:        ld      a,(SBnKzsgn)
 128+ 602F 21 12 C0                             ld      hl,SBnKxsgn
 129+ 6032 B6                                   or      (hl)
 130+ 6033 21 15 C0                             ld      hl,SBnKysgn
 131+ 6036 B6                                   or      (hl)
 132+ 6037 E6 7F                                and     SignMask8Bit
 133+ 6039                                      JumpIfAGTENusng  2, .SunRangeOK
 133+ 6039 FE 02       >                        cp     2
 133+ 603B D2 41 60    >                        jp		nc,.SunRangeOK
 134+ 603E C3 ED 5F                             jp      .MassLocked
 135+ 6041 CD BB C1     .SunRangeOK:            call    WarpSunCloser
 136+ 6044                                      MMUSelectPlanet
 136+ 6044 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 137+ 6048 CD C3 C0                             call    WarpPlanetFurther
 138+ 604B CD 1B 87     .MoveJunk:              call    ClearJunk;  call    WarpJunk - as it will move sign bit hi then all junk will be lost
 139+ 604E 3E 5A                                ld      a,WarpCoolDownPeriod
 140+ 6050 32 54 83                             ld      (WarpCooldown),a
 141+ 6053                                      MMUSelectLayer1
 141+ 6053 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 142+ 6057 CD AC 61                             call    WarpSFX             ; Do the visual SFX based on facing
 143+ 605A C3 61 60                             jp      .DoneWarp
 144+ 605D              .NoWarp:                MMUSelectLayer1
 144+ 605D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 145+ 6061              .DoneWarp:
 146+ 6061                  ENDIF
 147+ 6061 3E 00        UpdateShipsControl:     ld      a,0
 148+ 6063 A7                                   and     a
 149+ 6064                  IFDEF MAINLOOP_UPDATEUNIVERSE
 150+ 6064 CC F2 63     .UpdateShips:           call    z, UpdateUniverseObjects
 151+ 6067                  ENDIF
 152+ 6067                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange  ; if we docked then a transition would have been forced
 152+ 6067 3A 7A 69    >                        ld  a,(ScreenTransitionForced)
 152+ 606A FE FF       >                        cp  $FF
 152+ 606C C2 B6 62    >                        jp  nz,BruteForceChange
 153+ 606F 3E 00        CheckIfViewUpdate:      ld      a,$00                                                   ; if this is set to a view number then we process a view
 154+ 6071                                      JumpIfAIsZero  UpdateLoop                                       ; This will change as more screens are added TODO
 154+ 6071 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 154+ 6072 CA 04 61    >                        jp	    z, UpdateLoop
 155+ 6075              ;..Processing a view...............................................................................................................
 156+ 6075              ;..Display any message ............................................................................................................
 157+ 6075              .CheckHyperspaceMessage:AnyHyperSpaceMacro .HandleMessages
 157+ 6075 2A 52 83    >                        ld      hl,(InnerHyperCount)
 157+ 6078 7C          >                        ld      a,h
 157+ 6079 B5          >                        or      l
 157+ 607A 28 03       >                        jr      z, .HandleMessages
 158+ 607C CD 26 75                             call    HyperSpaceMessage
 159+ 607F              .HandleMessages:        AnyMessagesMacro  .NoMessages
 159+ 607F 3A BE 80    >                        ld      a, (MessageCount)
 159+ 6082 A7          >                        and     a
 159+ 6083 28 06       >                        jr      z, .NoMessages
 160+ 6085 CD 08 75                             call    DisplayCurrentMessage
 161+ 6088 CD E7 74                             call    UpdateMessageTimer
 162+ 608B
 163+ 608B              .NoMessages:            MMUSelectLayer2
 163+ 608B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ 608F 21 76 83     CheckConsoleReDraw:     ld      hl,ConsoleRefreshCounter
 165+ 6092 35                                   dec     (hl)
 166+ 6093 CA A3 60                             jp      z,.ConsoleDrawBuffer1                                   ; when it hits 0 then frame 1 of console is drawm
 167+ 6096 FA A1 60                             jp      m,.ConsoleDrawBuffer2                                   ; need top also do next frame for double buffering
 168+ 6099              .ConsoleNotDraw:        SetMemFalse ConsoleRedrawFlag
 168+ 6099 3E FF       >                        ld      a,$FF
 168+ 609B 32 77 83    >                        ld      (ConsoleRedrawFlag),a
 169+ 609E C3 AD 60                             jp      .JustViewPortCLS
 170+ 60A1 36 05        .ConsoleDrawBuffer2:    ld      (hl),ConsoleRefreshInterval
 171+ 60A3              .ConsoleDrawBuffer1:    SetMemTrue ConsoleRedrawFlag
 171+ 60A3 AF          >                        xor     a
 171+ 60A4 32 77 83    >                        ld      (ConsoleRedrawFlag),a
 172+ 60A7 CD 0E E2                             call    l2_cls                                                  ; Clear layer 2 for graphics
 173+ 60AA C3 B0 60                             jp      .ViewPortCLSDone
 174+ 60AD CD 8E E1     .JustViewPortCLS:       call   l2_cls_upper_two_thirds
 175+ 60B0              .ViewPortCLSDone:
 176+ 60B0                                      MMUSelectLayer1
 176+ 60B0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 177+ 60B4              .UpdateSun:             MMUSelectSun
 177+ 60B4 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 178+ 60B8              .DEBUGFORCE:
 179+ 60B8                                     ;ld          hl,$0081
 180+ 60B8                                     ;ld          (SBnKxlo),hl
 181+ 60B8                                     ;ld          hl,$0001
 182+ 60B8                                     ;ld          (SBnKylo),hl
 183+ 60B8                                     ; ld          hl,$0160
 184+ 60B8                                     ; ld          (SBnKzlo),hl
 185+ 60B8                                      ;ld          a,$80
 186+ 60B8                                      ;ld          (SBnKxsgn),a
 187+ 60B8                                      ;ld          (SBnKysgn),a
 188+ 60B8                                     ; ZeroA
 189+ 60B8                                    ;  ld          (SBnKzsgn),a
 190+ 60B8                  IFDEF   MAINLOOP_SUN_RENDER
 191+ 60B8 CD 45 C7                                 call    SunUpdateAndRender
 192+ 60BB                  ENDIF
 193+ 60BB              .UpdatePlanet:          MMUSelectPlanet
 193+ 60BB ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 194+ 60BF                  IFDEF   MAINLOOP_PLANET_RENDER
 195+ 60BF CD 52 C3                                 call    PlanetUpdateAndRender
 196+ 60C2                  ENDIF
 197+ 60C2              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
 198+ 60C2 3E DF        DrawDustForwards:       ld     a,$DF
 199+ 60C4 32 03 ED                             ld     (line_gfx_colour),a
 200+ 60C7              DustUpdateBank:         MMUSelectViewFront                                              ; This needs to be self modifying
 200+ 60C7 ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 201+ 60CB CD 3D 7B     DustUpdateRoutine:      call   DustForward                                              ; This needs to be self modifying
 202+ 60CE              ;ProcessSun:             call    DrawForwardSun
 203+ 60CE 3A E6 84     ProcessLaser:           ld      a,(CurrLaserPulseRate)
 204+ 60D1                                      JumpIfAIsNotZero .CheckForPulse
 204+ 60D1 A7          >                        and     a
 204+ 60D2 C2 DF 60    >                        jp	    nz,.CheckForPulse
 205+ 60D5                                      JumpIfMemFalse FireLaserPressed, .NoLaser
 205+ 60D5 3A 7A 83    >                        ld      a,(FireLaserPressed)
 205+ 60D8 A7          >                        and     a
 205+ 60D9 C2 F3 60    >                        jp      nz, .NoLaser
 206+ 60DC C3 E6 60                             jp      .FireLaser
 207+ 60DF              .CheckForPulse:         JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 207+ 60DF 3A F1 84    >                        ld  a,(CurrLaserPulseOnCount)
 207+ 60E2 A7          >                        and a
 207+ 60E3 CA F3 60    >                        jp  z,.NoLaser
 208+ 60E6              .FireLaser:             MMUSelectSpriteBank
 208+ 60E6 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 209+ 60EA CD 3E E3                             call    sprite_laser_show
 210+ 60ED CD 47 85                             call    LaserDrainSystems
 211+ 60F0 C3 FA 60                             jp      ProcessPlanet
 212+ 60F3              .NoLaser:               MMUSelectSpriteBank
 212+ 60F3 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 213+ 60F7 CD DC E4                             call    sprite_laser_hide
 214+ 60FA              ProcessPlanet:
 215+ 60FA                  IFDEF   MAINLOOP_MODEL_RENDER
 216+ 60FA CD EA 65     ProcessShipModels:      call   DrawForwardShips                                     ; Draw all ships (this may need to be self modifying)
 217+ 60FD                  ENDIF
 218+ 60FD                                      ; add in loop so we only update every 4 frames, need to change CLS logic too,
 219+ 60FD                                      ; every 4 frames needs to do 2 updates so updates both copies of buffer
 220+ 60FD                                      ; now will CLS bottom thrid
 221+ 60FD                                      CallIfMemTrue ConsoleRedrawFlag, UpdateConsole
 221+ 60FD 3A 77 83    >                        ld      a,(ConsoleRedrawFlag)
 221+ 6100 A7          >                        and     a
 221+ 6101 CC 03 6D    >                        call    z, UpdateConsole
 222+ 6104              ;..If we were not in views then we were in display screens/menus...................................................................
 223+ 6104              UpdateLoop:             JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 223+ 6104 3A 11 61    >                        ld  a,(ScreenLoopJP+1)
 223+ 6107 A7          >                        and a
 223+ 6108 CA 13 61    >                        jp  z,LoopRepeatPoint
 224+ 610B              ;..This is the screen update routine for menus.....................................................................................
 225+ 610B              ;.. Also used by transition routines
 226+ 610B 3E 00        ScreenLoopBank:         ld      a,$0
 227+ 610D                                      MMUSelectScreenA
 227+ 610D ED 92 56    >                     nextreg ScreenBankMMU,		a
 228+ 6110 CD 00 00     ScreenLoopJP:           call    $0000
 229+ 6113 3A 4C 83     LoopRepeatPoint:        ld      a,(DockedFlag)
 230+ 6116              HandleLaunched:         JumpIfAEqNusng  StateCompletedLaunch,   WeHaveCompletedLaunch
 230+ 6116 FE FD       >                        cp     StateCompletedLaunch
 230+ 6118 CA 32 61    >                        jp      z,WeHaveCompletedLaunch
 231+ 611B                                      JumpIfAEqNusng  StateInTransition,      WeAreInTransition
 231+ 611B FE FE       >                        cp     StateInTransition
 231+ 611D CA 9B 62    >                        jp      z,WeAreInTransition
 232+ 6120                                      JumpIfAEqNusng  StateHJumping,          WeAreHJumping
 232+ 6120 FE FC       >                        cp     StateHJumping
 232+ 6122 CA 38 61    >                        jp      z,WeAreHJumping
 233+ 6125                                      JumpIfAEqNusng  StateHEntering,         WeAreHEntering
 233+ 6125 FE FB       >                        cp     StateHEntering
 233+ 6127 CA 46 61    >                        jp      z,WeAreHEntering
 234+ 612A                                      JumpIfAEqNusng  StateCompletedHJump,    WeHaveCompletedHJump
 234+ 612A FE FA       >                        cp     StateCompletedHJump
 234+ 612C CA 4E 61    >                        jp      z,WeHaveCompletedHJump
 235+ 612F
 236+ 612F C3 9B 62                             jp  DoubleBufferCheck
 237+ 6132 CD DD 69     WeHaveCompletedLaunch:  call    LaunchedFromStation
 238+ 6135 C3 9B 62                             jp      DoubleBufferCheck
 239+ 6138 CD 4D C2     WeAreHJumping:          call    hyperspace_Lightning
 240+ 613B DA 9B 62                             jp      c,DoubleBufferCheck
 241+ 613E 3E FB                                ld      a,StateHEntering
 242+ 6140 32 4C 83                             ld      (DockedFlag),a
 243+ 6143 C3 9B 62                             jp      DoubleBufferCheck
 244+ 6146 3E FA        WeAreHEntering:         ld      a,StateCompletedHJump
 245+ 6148 32 4C 83                             ld      (DockedFlag),a
 246+ 614B C3 9B 62                             jp      DoubleBufferCheck
 247+ 614E
 248+ 614E
 249+ 614E              ; to create planet position
 250+ 614E              ;       take seed 2 AND %00000011 + 3 + carry and store in z sign
 251+ 614E              ;       take result and divide by 2 then store in x and y sign
 252+ 614E              ;
 253+ 614E              ;       take seed 4 AND %00000111 OR %10000001 and store in z sign
 254+ 614E              ;       take seed 6 AND %00000011 and store in x sign and y sign
 255+ 614E              ;       set pitch and roll to 0
 256+ 614E              ;
 257+ 614E              ;
 258+ 614E              ;
 259+ 614E              ; --- At the end of a hyperspace jump we have to reset compass, market universe sun and planets etc
 260+ 614E 3A 22 82     WeHaveCompletedHJump:   ld      a,(Galaxy)                      ; DEBUG as galaxy n is not working
 261+ 6151                                      MMUSelectGalaxyA
 261+ 6151 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 262+ 6154 2A 37 82                             ld      hl,(TargetSystemX)
 263+ 6157 22 35 82                             ld      (PresentSystemX),hl
 264+ 615A 44                                   ld      b,h
 265+ 615B 4D                                   ld      c,l
 266+ 615C                                      CorrectPostJumpFuel
 266+ 615C 3A A7 87    >                        ld      a,(Fuel)
 266+ 615F 21 57 82    >                        ld      hl,Distance
 266+ 6162 96          >                        sub     a,(hl)
 266+ 6163 32 A7 87    >                        ld      (Fuel),a
 267+ 6166                                      ForceTransition ScreenFront            ; This will also trigger stars
 267+ 6166 3E 09       >                        ld      a,ScreenFront
 267+ 6168 32 7A 69    >                        ld      (ScreenTransitionForced), a
 268+ 616B 3E 00                                ld      a,$00
 269+ 616D 32 3C 82                             ld      (ExtraVesselsCounter),a
 270+ 6170 32 4C 83                             ld      (DockedFlag),a
 271+ 6173 CD 6F F8                             call    GalaxyGenerateDesc             ; bc  holds new system to generate system
 272+ 6176 CD 5C 88                             call    copy_working_to_system         ; and propogate copies of seeds
 273+ 6179 CD 54 88                             call    copy_working_to_galaxy         ; .
 274+ 617C CD 42 89                             call    get_planet_data_working_seed   ; sort out system data
 275+ 617F                                      ;call    GetDigramGalaxySeed           ; .
 276+ 617F                                      MMUSelectStockTable                    ; .
 276+ 617F ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 277+ 6183 CD AA E0                             call    generate_stock_market          ; generate new prices
 278+ 6186 CD D4 86                             call    ClearUnivSlotList              ; clear out any ships
 279+ 6189 CD 71 85                             call    ResetPlayerShip
 280+ 618C                                      HalveFugitiveStatus                    ; halves status and brings bit into carry
 280+ 618C 21 44 82    >                        ld      hl,FugitiveInnocentStatus
 280+ 618F CB 3E       >                        srl     (hl)
 281+ 6191                                      MMUSelectSun
 281+ 6191 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 282+ 6195 CD 73 C2                             call    CreateSun                      ; create the local sun and set position based on seed
 283+ 6198                                      MMUSelectPlanet
 283+ 6198 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 284+ 619C CD CC C0                             call    CreatePlanet
 285+ 619F              ;TODO                        call    generateSunAndPlanetPos        ; uses current carry state too
 286+ 619F              ;TODO.CreateSun:             call    SetSunSlot
 287+ 619F              ; PROBABLY NOT NEEDED NOW                      MMUSelectShipBank1
 288+ 619F              ; PROBABLY NOT NEEDED NOW                      call    GetShipBankId
 289+ 619F              ;;SELECT CORRECT BANK                        MMUSelectUniverseN 0
 290+ 619F              ;;TODO                        call    CopyBodyToUniverse
 291+ 619F              ;;TODO                        call    CreateSun
 292+ 619F              ;;TODOCreatePlanet:          call    SetPlanetSlot
 293+ 619F              ;;TODO                       MMUSelectShipBank1
 294+ 619F              ;;TODO                    eliteb       call    GetShipBankId
 295+ 619F              ;;TODO                       MMUSelectUniverseBankN 1
 296+ 619F              ;;TODO                       call    CopyBodyToUniverse
 297+ 619F                                      SetMemFalse DockedFlag
 297+ 619F 3E FF       >                        ld      a,$FF
 297+ 61A1 32 4C 83    >                        ld      (DockedFlag),a
 298+ 61A4 3E FF        .TriggerEngineSound:    ld      a,$FF
 299+ 61A6 32 06 B1                             ld      (LAST_DELTA),a              ; force sound update in interrupt
 300+ 61A9 C3 9B 62                             jp  DoubleBufferCheck
 301+ 61AC
 302+ 61AC
 303+ 61AC 3A B7 61     WarpSFX:                ld      a,(WarpRoutineAddr+1)
 304+ 61AF A7                                   and     a
 305+ 61B0 C8                                   ret     z
 306+ 61B1 3E 00        WarpMMUBank:            ld      a,$00
 307+ 61B3                                      MMUSelectScreenA
 307+ 61B3 ED 92 56    >                     nextreg ScreenBankMMU,		a
 308+ 61B6 CD 00 00     WarpRoutineAddr:        call    0000
 309+ 61B9 C9                                   ret
 310+ 61BA
 311+ 61BA              ;--- From here is the new simplified logic. This uses the current spawn table
 312+ 61BA              ;--- Events such as jumping to a system, ending up in which space,
 313+ 61BA              ;--- special mission events
 314+ 61BA              ;--- We will need actually two tables, 1 for in station range 1 for not else flipping tables on the Z boundary
 315+ 61BA              ;--- Would be difficult
 316+ 61BA              ;--- load the table to work from. This then leaves all teh logic configurable
 317+ 61BA              LoopEventTriggered:     ; for now just do spawn
 318+ 61BA C3 BD 61                             jp      SpawnEvent
 319+ 61BD                                      ; implicit ret from jp
 320+ 61BD
 321+ 61BD                  DEFINE  SPAWN_TABLE_SELECT   1
 322+ 61BD                  DEFINE  SPAWN_GENERATE_COUNT 1
 323+ 61BD                  DEFINE  SPAWN_LOOP           1
 324+ 61BD                  DEFINE  SPAWN_IGNORE         1
 325+ 61BD
 326+ 61BD
 327+ 61BD              SpawnEvent:             IFDEF   SPAWN_IGNORE
 328+ 61BD C9                                       ret
 329+ 61BE                                      ENDIF
 330+ 61BE CD 85 87                             call    FindNextFreeSlotInC                 ; c= slot number, if we cant find a slot
 331+ 61C1 D8                                   ret     c                                   ; then may as well just skip routine
 332+ 61C2                                      IFDEF   MAINLOOP_SPAWN_ALWAYS_OUTSIDE_SAFEZONE
 333+ 61C2                                          SetMemFalse SpaceStationSafeZone
 333+ 61C2 3E FF       >                        ld      a,$FF
 333+ 61C4 32 3B 82    >                        ld      (SpaceStationSafeZone),a
 334+ 61C7                                      ENDIF
 335+ 61C7 FD 61        .SpawnIsPossible:       ld      iyh,c                               ; save slot free in iyh
 336+ 61C9 DD 01                                break
 337+ 61CB CD 2F 63                             call    SelectSpawnTable
 338+ 61CE CD 1B 63     .GetSpawnDetails:       call    SelectSpawnTableData                ; get table data
 339+ 61D1 78           .CheckIfInvalid:        ld      a,b                                 ; if b was 0
 340+ 61D2 B7                                   or      a                                   ; then its an invalid
 341+ 61D3 C8                                   ret     z                                   ; ship or just not to spawn
 342+ 61D4 E5 C5        .SetNbrToSpawn:         push    hl,,bc                              ; b will be set to the
 343+ 61D6 CD DE 87                             call    doRandom                            ; actual number to spawn
 344+ 61D9 C1                                   pop     bc                                  ; a is not really needed now as de and hl hold
 345+ 61DA A0                                   and     b                                   ; addresses for table and handler code
 346+ 61DB F6 01                                or      1                                   ; at least 1
 347+ 61DD 47                                   ld      b,a                                 ; so b = the number to spawn
 348+ 61DE E1                                   pop     hl                                  ; get back address of spawn handler
 349+ 61DF              ; b = nbr to spawn, hl = handler for spawn, de = lookup table of ship type to spawn
 350+ 61DF C5 D5 E5     .SpawnLoop:             push    bc,,de,,hl                          ; save loop counter lookup table and handler
 351+ 61E2 EB                                   ex      de,hl                               ; hl = lookup spawn type table, de = handler for spawn
 352+ 61E3 CD 4E 63                             call    SelectSpawnType                     ; a = shipId to Spawn
 353+ 61E6 CD EF 61                             call    .SpawnAShipTypeA                    ; if we get a carry then stop spawning
 354+ 61E9 E1 D1 C1                             pop     bc,,de,,hl                          ; get back values
 355+ 61EC 10 F1                                djnz    .SpawnLoop                          ; repeat until B = 0
 356+ 61EE C9                                   ret                                         ; we are done
 357+ 61EF EB           .SpawnAShipTypeA        ex      de,hl                               ; hl= handler to spawn, a = ship to spawn
 358+ 61F0 E9                                   jp      hl                                  ; we call this so we can do a dynamic jp
 359+ 61F1                                      ; implicit ret from jp                      ; SpawnShipTypeA handles free slot tests etc
 360+ 61F1
 361+ 61F1
 362+ 61F1
 363+ 61F1 00           EnemyShipBank:          DS 1
 364+ 61F2 00 00 00...  EnemyMissileLaunchPos:  DS 3 * 3
 365+ 61FB 00 00 00...  EnemyMissileLaunchMat:  DS 2 * 3
 366+ 6201
 367+ 6201
 368+ 6201              LaunchEnemyMissile:     ; break
 369+ 6201 3A 40 C0                             ld      a,(UbnKShipUnivBankNbr)             ; save current bank number
 370+ 6204 32 F1 61                             ld      (EnemyShipBank),a                   ;
 371+ 6207 3E 05                                ld      a,5
 372+ 6209 CD AE A6                             call    CalcLaunchOffset
 373+ 620C 3E 00                                ld      a,0                                 ; TODO For now only 1 missile type
 374+ 620E                                      GetByteAInTable ShipMissileTable            ; swap in missile data
 374+ 620E 21 F3 76    >                    ld          hl,ShipMissileTable
 374+ 6211 ED 31       >                    add         hl,a
 374+ 6213 7E          >                    ld          a,(hl)
 375+ 6214 CD 59 62                             call    SpawnShipTypeA                      ; spawn the ship
 376+ 6217 D8                                   ret     c                                   ; return if failed
 377+ 6218 CD E7 C5                             call    UnivSetEnemyMissile                 ; as per player but sets as angry
 378+ 621B 3E FF                                ld      a,$FF
 379+ 621D 32 45 C0                             ld      (UBnKMissileTarget),a               ; set as definte player as target
 380+ 6220 3A F1 61                             ld      a,(EnemyShipBank)                   ; Direct restore current bank
 381+ 6223                                      MMUSelectUnivBankA                          ;
 381+ 6223 ED 92 56    >                     nextreg UniverseMMU,       a
 382+ 6226 21 5C C0                             ld      hl, UBnKMissilesLeft                ; reduce enemy missile count
 383+ 6229 35                                   dec     (hl)
 384+ 622A C9                                   ret
 385+ 622B
 386+ 622B 3E 0A        LaunchEnemyFighter:     ld      a,10
 387+ 622D DD 01                                break;call    CopyUBnKtoLaunchParameters
 388+ 622F                                      ;copymatrix,rot and speed
 389+ 622F C9                                   ret
 390+ 6230
 391+ 6230              LaunchPlayerMissile:   ; break
 392+ 6230 CD 85 87                             call    FindNextFreeSlotInC                 ; Check if we have a slot free
 393+ 6233 38 1E                                jr      c,.MissileMissFire                  ; give a miss fire indicator as we have no slots
 394+ 6235 3E 00        .LaunchGood:            ld      a,0                                 ; TODO For now only 1 missile type
 395+ 6237                                      GetByteAInTable ShipMissileTable            ; swap in missile data
 395+ 6237 21 F3 76    >                    ld          hl,ShipMissileTable
 395+ 623A ED 31       >                    add         hl,a
 395+ 623C 7E          >                    ld          a,(hl)
 396+ 623D CD 59 62                             call    SpawnShipTypeA                      ; spawn the ship
 397+ 6240 3A D2 84                             ld      a,(MissileTargettingFlag)           ; Get target from computer
 398+ 6243 32 45 C0                             ld      (UBnKMissileTarget),a               ; load target Data
 399+ 6246 CD 2F C6                             call    UnivSetPlayerMissile                ; .
 400+ 6249                                      ClearMissileTargetting                      ; reset targetting
 400+ 6249 3E FF       >                        ld      a,StageMissileNotTargeting
 400+ 624B 32 D2 84    >                        ld      (MissileTargettingFlag),a
 401+ 624E 21 42 82                             ld      hl, NbrMissiles
 402+ 6251 35                                   dec     (hl)
 403+ 6252                                      ; TODO handle removal of missile from inventory and console
 404+ 6252 C9                                   ret
 405+ 6253              .MissileMissFire:       ClearMissileTargetting
 405+ 6253 3E FF       >                        ld      a,StageMissileNotTargeting
 405+ 6255 32 D2 84    >                        ld      (MissileTargettingFlag),a
 406+ 6258 C9                                   ret ; TODO bing bong noise misfire message
 407+ 6259
 408+ 6259                                      include "./SpawnShipTypeA.asm"
# file opened: ./GameEngine/./SpawnShipTypeA.asm
   1++6259              ;.. SpawnShipTypeA
   2++6259              ; IN
   3++6259              ;  a = ship type to create (equates to the ship model)
   4++6259              ; OUT
   5++6259              ;  b = ship class
   6++6259              ;  a = iyh = slot number
   7++6259              SpawnShipTypeA:         ;break
   8++6259 FD 6F                                ld      iyl,a                               ; save ship type in iyh
   9++625B CD 85 87                             call    FindNextFreeSlotInC                 ; c = slot number to use
  10++625E D8                                   ret     c                                   ; if carry flag was set then no spare slots
  11++625F FD 61                                ld      iyh,c                               ; preserve slot number for now
  12++6261                                      MMUSelectShipBank1                          ; select bank 1
  12++6261 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
  13++6265 FD 7C                                ld      a,iyh                               ; A = slot number
  14++6267 FD 45                                ld      b,iyl                               ; b = ship type
  15++6269 CD EB 86                             call    SetSlotAToTypeB                     ; Allocate slot as used
  16++626C                                      MMUSelectUniverseA                          ; .
  16++626C C6 46       >                     add    a,BankUNIVDATA0
  16++626E ED 92 56    >                     nextreg UniverseMMU,       a
  17++6271 FD 7C        .MarkUnivDiags:         ld      a,iyh                               ; mark diagnostics for bank number in memory
  18++6273 C6 41                                add     "A"                                 ; so fix Universe PB<x> to correct letter
  19++6275 32 0B C0                             ld      (StartOfUnivN),a                    ; to help debugging
  20++6278 FD 7D                                ld      a,iyl                               ; get ship model type
  21++627A 32 0E C0                             ld      (StartOfUnivM),a                    ; set debugging for model
  22++627D CD 0F E0     .CopyOverShipData:      call    GetShipBankId                       ; find actual memory location of ship model data
  23++6280                                      MMUSelectShipBankA                          ; by paging in bank a then looking up computed bank for model a
  23++6280 ED 92 57    >					 nextreg ShipModelMMU,	    a
  24++6283 78                                   ld      a,b                                 ; b = computed ship id for bank
  25++6284 CD 6A E0                             call    CopyShipToUniverse                  ; copy all the ship data in to the paged in bank
  26++6287 CD C7 C6                             call    UnivSetSpawnPosition                ; set initial spawn position
  27++628A CD B2 C7                             call    UnivInitRuntime                     ; Clear runtime data before startup, iy h and l are already set up
  28++628D 3A 45 C3                             ld      a,(ShipTypeAddr)                    ; get ship type
  29++6290 32 0F C0                             ld      (StartOfUnivT),a                    ; to help debugging we store type too
  30++6293 47                                   ld      b,a                                 ; and set the type into slot table
  31++6294 FD 7C                                ld      a,iyh                               ;
  32++6296 CD F2 86                             call    SetSlotAToClassB                    ;
  33++6299                                      ClearCarryFlag                              ; no carry on success
  33++6299 B7          >                        or a
  34++629A C9                                   ret
  35++629B
# file closed: ./GameEngine/./SpawnShipTypeA.asm
 409+ 629B
 410+ 629B                                      ; reset main loop counters
 411+ 629B                                      ; from BBC TT18 jump code
 412+ 629B                                      ; need to set system corrodinates, flush out univere ships etc
 413+ 629B                                      ; set up new star system and landing location in system
 414+ 629B                                      ; reset ship speed etc (RES2)
 415+ 629B                                      ; update legal status, missle indicatrions, planet data block, sun data block (SOLAR)
 416+ 629B                                      ;   put planet into data blokc 1 of FRIN
 417+ 629B                                      ;   put sun inot data block (NWWSHIP)
 418+ 629B                                      ; need to look at in system warp code (WARP) - note we need to -reorg all to code for teh station as that will never be in slot 0
 419+ 629B
 420+ 629B              WeAreInTransition:
 421+ 629B 3E 00        DoubleBufferCheck:      ld      a,00
 422+ 629D                                      IFDEF DOUBLEBUFFER
 423+ 629D FE 00                                    cp      0
 424+ 629F CA AE 62                                 jp      z,TestTransition
 425+ 62A2                                          MMUSelectLayer2
 425+ 62A2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 426+ 62A6 3A 02 E0                                 ld     a,(varL2_BUFFER_MODE)
 427+ 62A9 FE 00                                    cp     0
 428+ 62AB C4 97 E2                                 call   nz,l2_flip_buffers
 429+ 62AE                                      ENDIF
 430+ 62AE 3A 7A 69     TestTransition:         ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 431+ 62B1 FE FF                                cp      $FF
 432+ 62B3 CA 0D 5F                             jp      z,MainLoop
 433+ 62B6 CD 18 6A     BruteForceChange:       call    SetScreenA
 434+ 62B9 C3 0D 5F                             jp MainLoop
 435+ 62BC
 436+ 62BC
 437+ 62BC              ;......................................................................
 438+ 62BC              ; Sound Code
 439+ 62BC
 440+ 62BC
 441+ 62BC
 442+ 62BC              ;As speed goes up so does pitch
 443+ 62BC
# file closed: ./GameEngine/MainLoop.asm
 259  62BC                                      INCLUDE "./GameEngine/SpawnObject.asm"
# file opened: ./GameEngine/SpawnObject.asm
   1+ 62BC
   2+ 62BC CD 59 62     SpawnStationHandler:            call    SpawnShipTypeA
   3+ 62BF D8                                           ret     c                                   ; abort if failed
   4+ 62C0 C9                                           ret
   5+ 62C1
   6+ 62C1
   7+ 62C1 CD 59 62     SpawnHermitHandler:             call    SpawnShipTypeA
   8+ 62C4 D8                                           ret     c                                   ; abort if failed
   9+ 62C5 C9                                           ret
  10+ 62C6
  11+ 62C6 CD 59 62     SpawnAsteroidHandler:           call    SpawnShipTypeA
  12+ 62C9 D8                                           ret     c                                   ; abort if failed
  13+ 62CA                                              ;Set random position and vector
  14+ 62CA                                              ; if its a hermit jump to that to so special
  15+ 62CA
  16+ 62CA C9                                           ret
  17+ 62CB
  18+ 62CB F5           SpawnTypeJunkHandler:           push    af
  19+ 62CC                                              TestRoomForJunk .CanAddJunk
  19+ 62CC 3E 03       >                        ld      a,3
  19+ 62CE             >                        JumpIfMemTrue  SpaceStationSafeZone, .DoTest
  19+ 62CE 3A 3B 82    >                        ld      a,(SpaceStationSafeZone)
  19+ 62D1 A7          >                        and     a
  19+ 62D2 CA D7 62    >                        jp      z, .DoTest
  19+ 62D5 C6 02       >                        add     a,2
  19+ 62D7             >.DoTest                 JumpIfALTMemusng    JunkCount, .CanAddJunk
  19+ 62D7 21 3D 82    >                        ld      hl,JunkCount
  19+ 62DA BE          >                        cp      (hl)
  19+ 62DB DA DF 62    >                        jp		c,.CanAddJunk
  20+ 62DE C9                                           ret
  21+ 62DF F1           .CanAddJunk:                    pop     af
  22+ 62E0 CD 59 62                                     call    SpawnShipTypeA
  23+ 62E3                                              AddJunkCount
  23+ 62E3 21 3D 82    >                        ld      hl,JunkCount
  23+ 62E6 34          >                        inc     (hl)
  24+ 62E7 D8                                           ret     c                                   ; abort if failed
  25+ 62E8 C9                                           ret
  26+ 62E9
  27+ 62E9 CD 59 62     SpawnTypeCopHandler:            call    SpawnShipTypeA
  28+ 62EC D8                                           ret     c                                   ; abort if failed
  29+ 62ED                                              ; Cops will be non hostile if there are no other ones in area
  30+ 62ED                                              ; if there are, then check out cargo and fist to evalutate
  31+ 62ED                                              ; if not hostile and in space station area, then patrol orbiting station
  32+ 62ED                                              ; if not in space station area even split on orbiting a random point in space at distance random
  33+ 62ED                                              ;                                            travelling to station
  34+ 62ED                                              ;                                            travelling to sun
  35+ 62ED C9                                           ret
  36+ 62EE CD 59 62     SpawnTypeTraderHandler:         call    SpawnShipTypeA
  37+ 62F1 D8                                           ret     c                                   ; abort if failed
  38+ 62F2                                              ; 50/50 goign to planet or sun
  39+ 62F2                                              ;                main loop AI determines if our FIST status will force a jump
  40+ 62F2 C9                                           ret
  41+ 62F3 CD 59 62     SpawnTypeNonTraderHandler:      call    SpawnShipTypeA
  42+ 62F6 D8                                           ret     c                                   ; abort if failed
  43+ 62F7                                              ; 50/50 goign to planet or sun
  44+ 62F7                                              ; if FIST is high then 10% chance will auto go hostile
  45+ 62F7 C9                                           ret
  46+ 62F8 CD 59 62     SpawnTypePirateHandler:         call    SpawnShipTypeA
  47+ 62FB D8                                           ret     c                                   ; abort if failed
  48+ 62FC                                              ; set random position
  49+ 62FC                                              ; 50/50 going to station or sun
  50+ 62FC                                              ; if in safe zone, then not hostile
  51+ 62FC                                              ; work out value of our cargo then go auto hostile (e.g. gems/gold, special carry nuke mission has cargo so valueable it auto sets hostile)
  52+ 62FC                                              AddPirateCount                              ; another pirate has been spawned
  52+ 62FC 21 41 82    >                        ld      hl,PirateCount
  52+ 62FF 34          >                        inc     (hl)
  53+ 6300 C9                                           ret
  54+ 6301 CD 59 62     SpawnTypeHunterHandler:         call    SpawnShipTypeA
  55+ 6304 D8                                           ret     c                                   ; abort if failed
  56+ 6305                                              ; initially hunters will be non hostile and by default going to station
  57+ 6305                                              ; set random position
  58+ 6305                                              ; 50/50 going to station or sun
  59+ 6305                                              ; Check out FIST status, if very high auto hostile
  60+ 6305                                              ; else its checked on ship event loop
  61+ 6305 C9                                           ret
  62+ 6306 CD 59 62     SpawnTypeThargoidHandler:       call    SpawnShipTypeA
  63+ 6309 D8                                           ret     c                                   ; abort if failed
  64+ 630A                                              ; initially non hostile, main AI does logic (ie.. they will go hostile always after a random time or if shot at)
  65+ 630A                                              ; start in random position
  66+ 630A C9                                           ret
  67+ 630B C9           SpawnTypeMissionHandler:        ret
  68+ 630C
  69+ 630C CD 59 62     SpawnTypeStationDebrisHandler: call    SpawnShipTypeA
  70+ 630F D8                                           ret     c                                   ; abort if failed
  71+ 6310                                              ;Set random position and vector
  72+ 6310 C9                                           ret
  73+ 6311              SpawnTypeMissionEventHandler:
  74+ 6311 C9           SpawnTypeDoNotSpawnHandler:    ret
  75+ 6312
  76+ 6312
  77+ 6312
  78+ 6312 3E 29        SpawnHostileCop:        ld      a,ShipID_Viper
  79+ 6314 CD 59 62                             call    SpawnShipTypeA                      ; call rather than jump
  80+ 6317 CD 52 C5                             call    SetShipHostile                      ; as we have correct universe banked in now
  81+ 631A C9                                   ret
  82+ 631B
  83+ 631B              SpawnTrader:       ; TODO
  84+ 631B
  85+ 631B              ; DEFUNCT?SpawnAHostileHunter:    ld      hl, ExtraVesselsCounter             ; prevent the next spawning
  86+ 631B              ; DEFUNCT?                        inc     (hl)                                ;
  87+ 631B              ; DEFUNCT?                        and     3                                   ; a = random 0..3
  88+ 631B              ; DEFUNCT?                        MMUSelectShipBank1
  89+ 631B              ; DEFUNCT?                        GetByteAInTable ShipHunterTable             ; get hunter ship type
  90+ 631B              ; DEFUNCT?                        call    SpawnShipTypeA
  91+ 631B              ; DEFUNCT?                        call    SetShipHostile
  92+ 631B              ; DEFUNCT?                        ret
  93+ 631B
  94+ 631B
  95+ 631B
  96+ 631B              ; input IX = table for spawn data
  97+ 631B              ; output A  = table type
  98+ 631B              ;        b = maximum to spawn
  99+ 631B              ;        de = spawn table address
 100+ 631B              ;        hl = spawn handler address
 101+ 631B DD 7E 08     SelectSpawnTableData:   ld      a,(ix+1*SpawnTableSize)             ; Table Type
 102+ 631E 21 C3 63                             ld      hl,SpawnTypeHandlers                ; hl = the call address for setting up a spawn
 103+ 6321 ED 31                                add     hl,a                                ; of type A
 104+ 6323 ED 31                                add     hl,a                                ;
 105+ 6325 DD 46 10                             ld      b,(ix+2*SpawnTableSize)             ; Nbr to Spawn
 106+ 6328 DD 5E 18                             ld      e,(ix+3*SpawnTableSize)             ; Spawn Table Addr Low
 107+ 632B DD 56 20                             ld      d,(ix+4*SpawnTableSize)             ; Spawn Table Addr Hi
 108+ 632E C9                                   ret
 109+ 632F
 110+ 632F              ; Output IX = pointer to correct row in table
 111+ 632F              ; its up to the caller if DE is right table and it it needs to load into
 112+ 632F              ; it is up to the main loop code to maintain SpaceStationSafeZone
 113+ 632F              SelectSpawnTable:
 114+ 632F              .SelectCorrectTable:    JumpIfMemTrue SpaceStationSafeZone, .SelectSpaceStationTable
 114+ 632F 3A 3B 82    >                        ld      a,(SpaceStationSafeZone)
 114+ 6332 A7          >                        and     a
 114+ 6333 CA 3D 63    >                        jp      z, .SelectSpaceStationTable
 115+ 6336 DD 21 73 63                          ld      ix,FreeSpaceSpawnTableLow
 116+ 633A C3 41 63                             jp      .RandomShip
 117+ 633D DD 21 9B 63  .SelectSpaceStationTable:ld      ix,StationSpawnTableLow
 118+ 6341 CD DE 87     .RandomShip:            call    doRandom
 119+ 6344 DD BE 00     .SelectLoop:            cp      (ix+0)                              ; Compare high value
 120+ 6347 D8                                   ret     c                                   ; if random <= high threshold jump to match, we cant just do jr c as 255 would never compare
 121+ 6348 C8                                   ret     z                                   ; if random <= high threshold jump to match, result is, last values must be 255
 122+ 6349 DD 23                                inc     ix                                  ; move to next row
 123+ 634B C3 44 63                             jp      .SelectLoop                         ; we have a 255 marker to stop infinite loop
 124+ 634E
 125+ 634E              ; Returns with carry set if no ship to spawn
 126+ 634E              ; In = hl = address of first byte of table
 127+ 634E 06 03        SelectSpawnType:        ld      b,3                                 ; maxium of 3 goes
 128+ 6350 E5 FD E1                             ld      iy,hl                               ; save hl as we may need it if the spawn is too high rank
 129+ 6353 CD DE 87     .SelectSpawnType:       call    doRandom
 130+ 6356 E6 0F                                and     %00001111                           ; random 1 to 15
 131+ 6358 CB 27                                sla     a                                   ; * 2 as its 2 bytes per row
 132+ 635A ED 31                                add     hl,a
 133+ 635C 7E                                   ld      a,(hl)
 134+ 635D 47                                   ld      b,a
 135+ 635E 3A 47 82                             ld      a,(CurrentRank)                     ; are we experienced enough to face this ship
 136+ 6361                                      JumpIfAGTENusng b, .GoodToSpawn             ; if current rank >= table rank, we are good
 136+ 6361 B8          >                        cp     b
 136+ 6362 D2 6C 63    >                        jp		nc,.GoodToSpawn
 137+ 6365 FD E5 E1     .TooLowRank:            ld      hl,iy
 138+ 6368 10 E9                                djnz    .SelectSpawnType                    ; 3 goes then fail out
 139+ 636A              .NoSpawn:               SetCarryFlag
 139+ 636A 37          >                        scf
 140+ 636B C9                                   ret
 141+ 636C 3E 08        .GoodToSpawn:           ld      a,8                                 ; so we shift by 8
 142+ 636E ED 31                                add     hl,a                                ; to get to the ship id
 143+ 6370 7E                                   ld      a,(hl)                              ; and fetch it in a
 144+ 6371                                      ClearCarryFlag
 144+ 6371 B7          >                        or a
 145+ 6372 C9                                   ret
 146+ 6373
 147+ 6373              ; Spawn table is in two halves. if we are within range X of space station we use the second table
 148+ 6373              ; thsi means we coudl in theory drag a hunter / pirate or thargoid say into a space station zone
 149+ 6373              ; Probability high
 150+ 6373              ; Class of table,       0=Station,
 151+ 6373              ; Table to pick from (this is then based on ranking )
 152+ 6373
 153+ 6373              ; Its prefilled to 8 options in the table to allocate space. though the table can only accomodate 8. ther eis a 9th as a marker, value of table = 0 means no spawn
 154+ 6373 54 9F FA FF  FreeSpaceSpawnTableLow:    DB 84,                       159,                            250,                            255,                        255,                 255,                 255,                 255
 154+ 6377 FF FF FF FF
 155+ 637B 03 04 05 06  FreeSpaceSpawnTableType:   DB SpawnTypeCop,             SpawnTypeTrader,                SpawnTypeNonTrader,             SpawnTypePirate,            SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn
 155+ 637F 0C 0C 0C 0C
 156+ 6383 01 01 01 02  FreeSpaceSpawnTableCount:  DB 1,                        1,                              1,                              2,                          0,                   0,                   0,                   0
 156+ 6387 00 00 00 00
 157+ 638B A1 91 91 61  FreeSpaceSpawnTableAddrLo: DB low(ShipCopTableARank),   low(ShipNonTraderTableARank),   low(ShipNonTraderTableARank),   low(ShipPirateTableARank),  low(0),              low(0),              low(0),              low(0)
 157+ 638F 00 00 00 00
 158+ 6393 76 76 76 76  FreeSpaceSpawnTableAddrHi: DB high(ShipCopTableARank),  high(ShipNonTraderTableARank),  high(ShipNonTraderTableARank),  high(ShipPirateTableARank), high(0),             high(0),             high(0),             high(0)
 158+ 6397 00 00 00 00
 159+ 639B
 160+ 639B 54 9F FA FF  StationSpawnTableLow:      DB 84,                       159,                            250,                            255,                        255,                 255,                 255,                 255
 160+ 639F FF FF FF FF
 161+ 63A3 03 04 05 06  StationSpawnTableType:     DB SpawnTypeCop,             SpawnTypeTrader,                SpawnTypeNonTrader,             SpawnTypePirate,            SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn
 161+ 63A7 0C 0C 0C 0C
 162+ 63AB 01 01 01 03  StationSpawnTableCount:    DB 1,                        1,                              1,                              3,                          0,                   0,                   0,                   0
 162+ 63AF 00 00 00 00
 163+ 63B3 A1 91 91 61  StationSpawnTableAddrLo:   DB low(ShipCopTableARank),   low(ShipNonTraderTableARank),   low(ShipNonTraderTableARank),   low(ShipPirateTableARank),  low(0),              low(0),              low(0),              low(0)
 163+ 63B7 00 00 00 00
 164+ 63BB 76 76 76 76  StationSpawnTableAddrHi:   DB high(ShipCopTableARank),  high(ShipNonTraderTableARank),  high(ShipNonTraderTableARank),  high(ShipPirateTableARank), high(0),             high(0),             high(0),             high(0)
 164+ 63BF 00 00 00 00
 165+ 63C3
 166+ 63C3              SpawnTableSize             EQU  FreeSpaceSpawnTableType - FreeSpaceSpawnTableLow
 167+ 63C3
 168+ 63C3              ; Looko in constant equates, Spawntype equates for the values for this jump table
 169+ 63C3              ; note at minium it must itmust point to SpawnTypeDoNotSpawnHandlers which just does a ret
 170+ 63C3 BC 62 C6 62  SpawnTypeHandlers:         DW SpawnStationHandler,       SpawnAsteroidHandler,      SpawnTypeJunkHandler,          SpawnTypeCopHandler
 170+ 63C7 CB 62 E9 62
 171+ 63CB EE 62 F3 62                             DW SpawnTypeTraderHandler,    SpawnTypeNonTraderHandler, SpawnTypePirateHandler,        SpawnTypeHunterHandler
 171+ 63CF F8 62 01 63
 172+ 63D3 06 63 0B 63                             DW SpawnTypeThargoidHandler,  SpawnTypeMissionHandler,   SpawnTypeStationDebrisHandler, SpawnTypeMissionEventHandler
 172+ 63D7 0C 63 11 63
 173+ 63DB 11 63                                   DW SpawnTypeDoNotSpawnHandler
# file closed: ./GameEngine/SpawnObject.asm
 260  63DD              ;..................................................................................................................................
 261  63DD              ;..Process A ship..................................................................................................................
 262  63DD              ; Apply Damage b to ship based on shield value of a
 263  63DD              ; returns a with new shield value
 264  63DD                                      INCLUDE "./GameEngine/DamagePlayer.asm"
# file opened: ./GameEngine/DamagePlayer.asm
   1+ 63DD              ;..Process A ship..................................................................................................................
   2+ 63DD              ; Apply Damage b to ship based on shield value of a
   3+ 63DD              ; returns a with new shield value
   4+ 63DD              ApplyDamage:            ClearCarryFlag
   4+ 63DD B7          >                        or a
   5+ 63DE 98                                   sbc     b
   6+ 63DF D0                                   ret     nc                  ; no carry so was not negative
   7+ 63E0 ED 44        .KilledShield:          neg                         ; over hit shield
   8+ 63E2 4F                                   ld      c,a                 ; save overhit in c
   9+ 63E3 3A CF 84                             ld      a,(PlayerEnergy)    ; and apply it to player energy
  10+ 63E6                                      ClearCarryFlag
  10+ 63E6 B7          >                        or a
  11+ 63E7 99                                   sbc     c
  12+ 63E8 F2 EC 63                             jp      p,.DoneDamage       ; if result was 0 or more then completed damage
  13+ 63EB AF           .KilledPlayer:          xor     a
  14+ 63EC 32 CF 84     .DoneDamage:            ld      (PlayerEnergy),a
  15+ 63EF AF                                   xor     a                   ; shield is gone
  16+ 63F0 C9                                   ret
  17+ 63F1
# file closed: ./GameEngine/DamagePlayer.asm
 265  63F1              ;..Update Universe Objects.........................................................................................................
 266  63F1                                      INCLUDE "./GameEngine/UpdateUniverseObjects.asm"
# file opened: ./GameEngine/UpdateUniverseObjects.asm
   1+ 63F1              ;..................................................................................................................................
   2+ 63F1              ;                           DEFINE ROTATIONDEBUG 1
   3+ 63F1              ;                           DEFINE CLIPDEBUG 1
   4+ 63F1 00           CurrentShipUniv:        DB      0
   5+ 63F2              ;..................................................................................................................................
   6+ 63F2              ; if ship is destroyed or exploding then z flag is clear, else z flag is set
   7+ 63F2              IsShipDestroyedOrExploding: MACRO
   8+ 63F2 ~                                        ld      a,(UBnKexplDsp)                                 ; is it destroyed
   9+ 63F2 ~                                        and     %10100000                                       ; or exploding
  10+ 63F2                                          ENDM
  11+ 63F2
  12+ 63F2              JumpIfShipNotClose:         MACRO   NotCloseTarget
  13+ 63F2 ~            .CheckIfClose:              ld      hl,(UBnKxlo)                                    ; chigh byte check or just too far away
  14+ 63F2 ~                                        ld      de,(UBnKylo)                                    ; .
  15+ 63F2 ~                                        ld      bc,(UBnKzlo)                                    ; .
  16+ 63F2 ~                                        or      h                                               ; .
  17+ 63F2 ~                                        or      d                                               ; .
  18+ 63F2 ~                                        or      b                                               ; .
  19+ 63F2 ~                                        jp      nz,NotCloseTarget                               ; .
  20+ 63F2 ~            .CheckLowBit7Close:         or      l                                               ; if bit 7 of low is set then still too far
  21+ 63F2 ~                                        or      e                                               ; .
  22+ 63F2 ~                                        or      c                                               ; .
  23+ 63F2 ~                                        ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
  24+ 63F2 ~                                        and     $80                                             ; .
  25+ 63F2 ~                                        jp      nz,NotCloseTarget                              ; .
  26+ 63F2                                          ENDM
  27+ 63F2
  28+ 63F2              VeryCloseCheck:             MACRO
  29+ 63F2 ~                                        ld      a,iyh                                           ; bit 6 is still too far
  30+ 63F2 ~                                        and     %11000000
  31+ 63F2                                          ENDM
  32+ 63F2
  33+ 63F2              JumpIfNotDockingCheck:      MACRO   NotDocking
  34+ 63F2 ~            .CheckIfDockable:           ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
  35+ 63F2 ~                                        JumpIfANENusng  ShipTypeStation, NotDocking             ; if its not a station so we don't test docking
  36+ 63F2 ~            .IsDockableHostoleCheck:    JumpOnMemBitSet ShipNewBitsAddr, ShipHostileNewBitNbr, NotDocking ; if it is angry then we dont test docking
  37+ 63F2 ~            .CheckHighNoseZ:            JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, NotDocking  ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
  38+ 63F2 ~            .GetStationVector:          call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
  39+ 63F2 ~                                        JumpIfALTNusng  89, NotDocking                          ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
  40+ 63F2 ~            .CheckAbsRoofXHi:           ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
  41+ 63F2 ~                                        and     SignMask8Bit                                    ; .
  42+ 63F2 ~                                        JumpIfALTNusng 80, NotDocking                           ; note 80 decimal for 36.6 degrees horizontal
  43+ 63F2                                          ENDM
  44+ 63F2
  45+ 63F2              ;..................................................................................................................................
  46+ 63F2 AF           UpdateUniverseObjects:  xor     a
  47+ 63F3 32 4F 83                             ld      (SelectedUniverseSlot),a
  48+ 63F6 57           .UpdateUniverseLoop:    ld      d,a                                             ; d is unaffected by GetTypeInSlotA
  49+ 63F7              ;.. If the slot is empty (FF) then skip this slot..................................................................................
  50+ 63F7 CD 79 87                             call    GetTypeAtSlotA
  51+ 63FA FE FF                                cp      $FF                                             ; we don't process empty slots
  52+ 63FC CA 4C 65                             jp      z,.UniverseSlotIsEmpty                          ; .
  53+ 63FF FD 6F                                ld      iyl,a                                           ; save type into iyl for later
  54+ 6401 7A           .UniverseObjectFound:   ld      a,d                                             ; Get back Universe slot as we want it
  55+ 6402                                      MMUSelectUniverseA                                      ; and we apply roll and pitch
  55+ 6402 C6 46       >                     add    a,BankUNIVDATA0
  55+ 6404 ED 92 56    >                     nextreg UniverseMMU,       a
  56+ 6407                                      IFDEF   CLIPDEBUG
  57+ 6407 ~            .DEBUG:                     ld      a,(SelectedUniverseSlot)
  58+ 6407 ~                                        cp      0
  59+ 6407 ~                                        jr      nz,.ProperUpdate
  60+ 6407 ~            .DebugUpdate:               call    FixStationPos
  61+ 6407 ~                                        jp      .CheckExploding
  62+ 6407                                      ENDIF
  63+ 6407 CD CF D7     .ProperUpdate:          call    ApplyMyRollAndPitch                             ; todo , make all 4 of these 1 call
  64+ 640A 3A 49 C0                             ld      a,(UBnKRotZCounter)
  65+ 640D FE 00                                cp      0
  66+ 640F CD AB D9                             call    ApplyShipRollAndPitch
  67+ 6412 CD F1 DA                             call    ApplyShipSpeed
  68+ 6415 CD C4 C5                             call    UpdateSpeedAndPitch                             ; update based on rates of speed roll and pitch accelleration/decelleration
  69+ 6418              ;.. apply ships movement
  70+ 6418              ;.. If its a space station then see if we are ready to dock........................................................................
  71+ 6418              .CheckExploding:        IsShipDestroyedOrExploding                              ; fi its destroyed or exploding z flag will be clear
  71+ 6418 3A 51 C0    >                            ld      a,(UBnKexplDsp)                                 ; is it destroyed
  71+ 641B E6 A0       >                            and     %10100000                                       ; or exploding
  72+ 641D C2 34 65                             jp      nz,.ProcessedUniverseSlot                       ; then no action
  73+ 6420              ;.. we can't collide with missiles, they collide with us as part of tactics
  74+ 6420              .CheckIfMissile:        JumpIfMemEqNusng ShipTypeAddr, ShipTypeMissile, .CollisionDone ; Missiles don't have ECM and do collision checks on their tactics phase
  74+ 6420 3A 45 C3    >                        ld  a,(ShipTypeAddr)
  74+ 6423 FE 01       >                        cp  ShipTypeMissile
  74+ 6425 CA F9 64    >                        jp  z,.CollisionDone
  75+ 6428 CD 98 C5     .ProcessECM:            call    UpdateECM                                       ; Update ECM Counters
  76+ 642B              .CheckIfClose:          JumpIfShipNotClose .PostCollisionTest
  76+ 642B 2A 20 C0    >.CheckIfClose:              ld      hl,(UBnKxlo)                                    ; chigh byte check or just too far away
  76+ 642E ED 5B 23 C0 >                            ld      de,(UBnKylo)                                    ; .
  76+ 6432 ED 4B 26 C0 >                            ld      bc,(UBnKzlo)                                    ; .
  76+ 6436 B4          >                            or      h                                               ; .
  76+ 6437 B2          >                            or      d                                               ; .
  76+ 6438 B0          >                            or      b                                               ; .
  76+ 6439 C2 F9 64    >                            jp      nz,.PostCollisionTest                               ; .
  76+ 643C B5          >.CheckLowBit7Close:         or      l                                               ; if bit 7 of low is set then still too far
  76+ 643D B3          >                            or      e                                               ; .
  76+ 643E B1          >                            or      c                                               ; .
  76+ 643F FD 67       >                            ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
  76+ 6441 E6 80       >                            and     $80                                             ; .
  76+ 6443 C2 F9 64    >                            jp      nz,.PostCollisionTest                              ; .
  77+ 6446              .CheckIfDockable:       JumpIfNotDockingCheck .CollisionCheck                   ; check if we are docking or colliding
  77+ 6446 3A 45 C3    >.CheckIfDockable:           ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
  77+ 6449             >                            JumpIfANENusng  ShipTypeStation, .CollisionCheck             ; if its not a station so we don't test docking
  77+ 6449 FE 02       >                        cp     ShipTypeStation
  77+ 644B C2 7F 64    >                        jp      nz,.CollisionCheck
  77+ 644E             >.IsDockableHostoleCheck:    JumpOnMemBitSet ShipNewBitsAddr, ShipHostileNewBitNbr, .CollisionCheck ; if it is angry then we dont test docking
  77+ 644E 3A 46 C3    >                        ld      a,(ShipNewBitsAddr)
  77+ 6451 CB 57       >                        bit 	ShipHostileNewBitNbr,a
  77+ 6453 C2 7F 64    >                        jp      nz,.CollisionCheck
  77+ 6456             >.CheckHighNoseZ:            JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, .CollisionCheck  ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
  77+ 6456 3A 3A C0    >                        ld      a,(UBnkrotmatNosevZ+1)
  77+ 6459 FE D6       >                        cp      214
  77+ 645B DA 7F 64    >                        jp	  c,.CollisionCheck
  77+ 645E CD B2 67    >.GetStationVector:          call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
  77+ 6461             >                            JumpIfALTNusng  89, .CollisionCheck                          ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
  77+ 6461 FE 59       >                        cp      89
  77+ 6463 DA 7F 64    >                        jp		c, .CollisionCheck
  77+ 6466 3A 30 C0    >.CheckAbsRoofXHi:           ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
  77+ 6469 E6 7F       >                            and     SignMask8Bit                                    ; .
  77+ 646B             >                            JumpIfALTNusng 80, .CollisionCheck                           ; note 80 decimal for 36.6 degrees horizontal
  77+ 646B FE 50       >                        cp      80
  77+ 646D DA 7F 64    >                        jp		c, .CollisionCheck
  78+ 6470              ;.. Its passed all validation and we are docking...................................................................................
  79+ 6470              .WeAreDocking:          MMUSelectLayer1
  79+ 6470 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  80+ 6474 3E 06                                ld        a,$6
  81+ 6476 CD A5 E0                             call      l1_set_border
  82+ 6479              .EnterDockingBay:       ForceTransition ScreenDocking                           ;  Force transition
  82+ 6479 3E 0D       >                        ld      a,ScreenDocking
  82+ 647B 32 7A 69    >                        ld      (ScreenTransitionForced), a
  83+ 647E C9                                   ret                                                     ;  don't bother with other objects
  84+ 647F                                      ; So it is a candiate to test docking. Now we do the position and angle checks
  85+ 647F              ;.. else we are just colliding and have to handle that
  86+ 647F FD 7D        .CollisionCheck:        ld      a,iyl
  87+ 6481                                      JumpIfAEqNusng ShipTypeStation, .HaveCollided           ; stations dont check bit 6
  87+ 6481 FE 02       >                        cp     ShipTypeStation
  87+ 6483 CA BC 64    >                        jp      z,.HaveCollided
  88+ 6486                                      JumpIfAEqNusng ShipTypeMissile, .PostCollisionTest      ; Missile collisions are done in the tactics code
  88+ 6486 FE 01       >                        cp     ShipTypeMissile
  88+ 6488 CA F9 64    >                        jp      z,.PostCollisionTest
  89+ 648B              .VeryCloseCheck:        VeryCloseCheck                                          ; bit 6 is still too far
  89+ 648B FD 7C       >                            ld      a,iyh                                           ; bit 6 is still too far
  89+ 648D E6 C0       >                            and     %11000000
  90+ 648F 20 68                                jr      nz,.PostCollisionTest                            ; .
  91+ 6491 FD 7D        .ScoopableCheck:        ld      a,iyl                                           ; so if its not scoopable
  92+ 6493                                      JumpIfANENusng  ShipTypeScoopable, .HaveCollided        ; then its a collision
  92+ 6493 FE 04       >                        cp     ShipTypeScoopable
  92+ 6495 C2 BC 64    >                        jp      nz,.HaveCollided
  93+ 6498 3A C6 87     .ScoopsEquiped:         ld      a,(FuelScoop)                                   ; if there is no scoop then impact
  94+ 649B                                      JumpIfANENusng  EquipmentItemFitted, .HaveCollided      ; .
  94+ 649B FE FF       >                        cp     EquipmentItemFitted
  94+ 649D C2 BC 64    >                        jp      nz,.HaveCollided
  95+ 64A0 3A 25 C0     .ScoopRegion:           ld      a,(UBnKysgn)                                    ; if the y axis is negative then we are OK
  96+ 64A3                                      JumpIfAIsZero   .HaveCollided                           ; else its a collision
  96+ 64A3 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  96+ 64A4 CA BC 64    >                        jp	    z, .HaveCollided
  97+ 64A7 CD 1B C7     .CollectedCargo:        call    ShipCargoType
  98+ 64AA 57           .DoWeHaveCapacity:      ld      d,a                                             ; save cargotype
  99+ 64AB CD C9 85                             call    CanWeScoopCargoD
 100+ 64AE 38 03                                jr      c, .NoRoom
 101+ 64B0 CD C1 85     .CanScoop:              call    AddCargoTypeD
 102+ 64B3              .NoRoom:                ClearSlotMem    SelectedUniverseSlot                    ; we only need to clear slot list as univ ship is now junk
 102+ 64B3 3A 4F 83    >                        ld      a,(SelectedUniverseSlot)
 102+ 64B6 CD 0D 87    >                        call    ClearSlotA
 103+ 64B9 C3 F9 64                             jp      .PostCollisionTest
 104+ 64BC              ; ... Generic collision
 105+ 64BC              .HaveCollided:          JumpIfMemLTNusng DELTA, 5, .SmallBump
 105+ 64BC 3A 99 81    >                        ld      a,(DELTA)
 105+ 64BF FE 05       >                        cp      5
 105+ 64C1 DA D0 64    >                        jp	  c,.SmallBump
 106+ 64C4 3A 58 C0     .BigBump:               ld      a,(UBnKEnergy)                                  ; get energy level which gives us an approximate to size and health
 107+ 64C7                                      SetCarryFlag
 107+ 64C7 37          >                        scf
 108+ 64C8 17                                   rla                                                     ; divide by 2 but also bring in carry so its 128 + energy / 2
 109+ 64C9 47                                   ld      b,a
 110+ 64CA CD 5F DD                             call    KillShip                                        ; mark ship as dead (if possible)
 111+ 64CD C3 DA 64                             jp      .ApplyDamage
 112+ 64D0 3A 99 81     .SmallBump:             ld      a,(DELTA)                                       ; if out ship speed < 5 then set damage to
 113+ 64D3 47                                   ld      b,a
 114+ 64D4 CD 81 DD                             call    DamageShip                                      ; dent target too  TODO make damge totally proportional to speed
 115+ 64D7 C3 DA 64                             jp      .ApplyDamage
 116+ 64DA CD 73 86     .ApplyDamage:           call    SetSpeedZero
 117+ 64DD 3A 28 C0                             ld      a,(UBnKzsgn)                                    ; front or back
 118+ 64E0 E6 80                                and     $80
 119+ 64E2 20 0C                                jr      nz,.HitRear
 120+ 64E4 3A CD 84                             ld      a,(ForeShield)
 121+ 64E7 CD DD 63                             call    ApplyDamage
 122+ 64EA 32 CD 84                             ld      (ForeShield),a
 123+ 64ED C3 F9 64                             jp      .CollisionDone
 124+ 64F0 3A CE 84     .HitRear:               ld      a,(AftShield)
 125+ 64F3 CD DD 63                             call    ApplyDamage
 126+ 64F6 32 CE 84                             ld      (AftShield),a
 127+ 64F9              .CollisionDone:
 128+ 64F9              ;.. Now check laser to see if the ship is being shot in sights
 129+ 64F9 CD 38 6B     .PostCollisionTest:     call    ShipInSights
 130+ 64FC 30 36                                jr      nc,.ProcessedUniverseSlot                        ; for laser and missile we can check once
 131+ 64FE 3A E6 84                             ld      a,(CurrLaserPulseRate)
 132+ 6501                                      JumpIfAIsNotZero .CheckForPulse
 132+ 6501 A7          >                        and     a
 132+ 6502 C2 0F 65    >                        jp	    nz,.CheckForPulse
 133+ 6505                                      JumpIfMemFalse FireLaserPressed,     .NoLaser
 133+ 6505 3A 7A 83    >                        ld      a,(FireLaserPressed)
 133+ 6508 A7          >                        and     a
 133+ 6509 C2 24 65    >                        jp      nz, .NoLaser
 134+ 650C C3 16 65                             jp      .LaserDamage
 135+ 650F              .CheckForPulse:         JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 135+ 650F 3A F1 84    >                        ld  a,(CurrLaserPulseOnCount)
 135+ 6512 A7          >                        and a
 135+ 6513 CA 24 65    >                        jp  z,.NoLaser
 136+ 6516 3A EC 84     .LaserDamage:           ld      a,(CurrLaserDamageOutput)
 137+ 6519 CD 81 DD                             call    DamageShip
 138+ 651C 3A 51 C0                             ld      a,(UBnKexplDsp)                                 ; is it destroyed
 139+ 651F E6 A0                                and     %10100000
 140+ 6521 C2 34 65                             jp      nz,.ProcessedUniverseSlot                       ; can't lock on debris
 141+ 6524              .NoLaser:
 142+ 6524              ; Now check missile lock
 143+ 6524              .PlayerMissileLock:     JumpIfMemNeNusng MissileTargettingFlag, StageMissileTargeting, .ProcessedUniverseSlot
 143+ 6524 3A D2 84    >                        ld  a,(MissileTargettingFlag)
 143+ 6527 FE FE       >                        cp  StageMissileTargeting
 143+ 6529 C2 34 65    >                        jp  nz,.ProcessedUniverseSlot
 144+ 652C 3A 4F 83     .LockPlayerMissile:     ld      a,(SelectedUniverseSlot)                        ; set to locked and nto launchedd
 145+ 652F                                      LockMissileToA                                          ; .
 145+ 652F F6 80       >                        or      $80
 145+ 6531 32 D2 84    >                        ld      (MissileTargettingFlag),a
 146+ 6534              .ProcessedUniverseSlot:
 147+ 6534              ;...Tactics Section................................................................................................................
 148+ 6534 3A 4F 83     .AreWeReadyForAI:       ld      a,(SelectedUniverseSlot)                        ; get back current slot number
 149+ 6537                                      IsSlotMissile                                           ; Missiles update every iteration
 149+ 6537 21 6A 83    >                        ld      hl,UniverseSlotType
 149+ 653A ED 31       >                        add     hl,a
 149+ 653C 7E          >                        ld      a,(hl)
 149+ 653D FE 01       >                        cp      ShipTypeMissile
 150+ 653F CA 7F 65                             jp      z,.UpdateMissile                                ; so we bypass the logic check
 151+ 6542              .CheckIfSlotAITurn:     CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 151+ 6542 3A 4F 83    >                        ld      a,(SelectedUniverseSlot)
 151+ 6545 21 4E 83    >                        ld      hl,CurrentUniverseAI
 151+ 6548 BE          >                        cp      (hl)
 151+ 6549 CC A4 A1    >                        call    z,UpdateShip
 152+ 654C              .UniverseSlotIsEmpty:
 153+ 654C 3A 4F 83     .DoneAICheck:           ld      a,(SelectedUniverseSlot)                        ; Move to next ship in loop
 154+ 654F 3C                                   inc     a                                               ; .
 155+ 6550                                      JumpIfAGTENusng   UniverseSlotListSize, .UpdateAICounter; if we are beyond the loop then update the mast AI counter and we are done
 155+ 6550 FE 0C       >                        cp     UniverseSlotListSize
 155+ 6552 D2 5B 65    >                        jp		nc,.UpdateAICounter
 156+ 6555 32 4F 83                             ld      (SelectedUniverseSlot),a                        ; else update loop pointer
 157+ 6558 C3 F6 63                             jp      .UpdateUniverseLoop                             ; if there are more to go we continue
 158+ 655B              .UpdateAICounter:       IncMemMaxNCycle CurrentUniverseAI , UniverseSlotListSize
 158+ 655B 3A 4E 83    >                        ld      a,(CurrentUniverseAI)
 158+ 655E 3C          >                        inc     a
 158+ 655F FE 0C       >                        cp      UniverseSlotListSize
 158+ 6561 38 01       >                        jr      c,.IncMaxed
 158+ 6563 AF          >                        xor     a
 158+ 6564 32 4E 83    >.IncMaxed:              ld      (CurrentUniverseAI),a
 159+ 6567              .CheckIfStationHostile: ReturnIfMemFalse  SetStationHostileFlag                ; we coudl move this to pre loop so its only done once
 159+ 6567 3A 50 83    >                        ld      a,(SetStationHostileFlag)
 159+ 656A A7          >                        and     a
 159+ 656B C0          >                        ret     nz
 160+ 656C              .CheckSetStationHostile:ReturnIfMemNeNusng UniverseSlotList, ShipTypeStation
 160+ 656C 3A 5E 83    >                        ld   a,(UniverseSlotList)
 160+ 656F FE 02       >                        cp     ShipTypeStation
 160+ 6571 C8          >                        ret    z
 161+ 6572                                      MMUSelectUniverseN 0
 161+ 6572 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 162+ 6576 CD 52 C5                             call    SetShipHostile
 163+ 6579                                      SetMemFalse    SetStationHostileFlag
 163+ 6579 3E FF       >                        ld      a,$FF
 163+ 657B 32 50 83    >                        ld      (SetStationHostileFlag),a
 164+ 657E C9                                   ret
 165+ 657F              .UpdateMissile:         ;break
 166+ 657F CD A4 A1                             call    UpdateShip                                      ; we do it this way top avoid double calling
 167+ 6582 C3 4C 65                             jp      .DoneAICheck                                    ; ai if the ai slot to process = missile type
 168+ 6585              ;..................................................................................................................................
 169+ 6585
 170+ 6585 00 00 00...  SaveUBNK:               DS 3*3
 171+ 658E
 172+ 658E E5 D5 C5 F5  SavePosition:           push    hl,,de,,bc,,af
 173+ 6592 3A F1 63                             ld      a,(CurrentShipUniv)
 174+ 6595 FE 02                                cp      2
 175+ 6597 20 31                                jr      nz,.DoneSave
 176+ 6599                                      ;break
 177+ 6599 21 20 C0                             ld      hl, UBnKxlo
 178+ 659C 11 85 65                             ld      de, SaveUBNK
 179+ 659F 01 09 00                             ld      bc, 3*3
 180+ 65A2 ED B0                                ldir
 181+ 65A4 3E 00                                ld      a,0
 182+ 65A6 32 24 C0                             ld      (UBnKyhi)  ,a
 183+ 65A9 32 21 C0                             ld      (UBnKxhi)  ,a
 184+ 65AC 32 27 C0                             ld      (UBnKzhi)  ,a
 185+ 65AF 32 22 C0                             ld      (UBnKxsgn) ,a
 186+ 65B2 32 25 C0                             ld      (UBnKysgn) ,a
 187+ 65B5 32 27 C0                             ld      (UBnKzhi)  ,a
 188+ 65B8 32 28 C0                             ld      (UBnKzsgn) ,a
 189+ 65BB 3E 05                                ld      a, $5
 190+ 65BD 32 23 C0                             ld      (UBnKylo)  ,a
 191+ 65C0 3E 05                                ld      a, $5
 192+ 65C2 32 20 C0                             ld      (UBnKxlo)  ,a
 193+ 65C5 3E 6E                                ld      a, $6E
 194+ 65C7 32 26 C0                             ld      (UBnKzlo)  ,a
 195+ 65CA F1 C1 D1 E1  .DoneSave:              pop     hl,,de,,bc,,af
 196+ 65CE C9                                   ret
 197+ 65CF
 198+ 65CF E5 D5 C5 F5  RestorePosition:        push    hl,,de,,bc,,af
 199+ 65D3 3A F1 63                             ld      a,(CurrentShipUniv)
 200+ 65D6 FE 02                                cp      2
 201+ 65D8 20 0B                                jr      nz,.DoneSave
 202+ 65DA                                      ;break
 203+ 65DA 21 85 65                             ld      hl, SaveUBNK
 204+ 65DD 11 20 C0                             ld      de, UBnKxlo
 205+ 65E0 01 09 00                             ld      bc, 3*3
 206+ 65E3 ED B0                                ldir
 207+ 65E5 F1 C1 D1 E1  .DoneSave:              pop     hl,,de,,bc,,af
 208+ 65E9 C9                                   ret
 209+ 65EA
 210+ 65EA
 211+ 65EA AF           DrawForwardShips:       xor     a
 212+ 65EB 32 F1 63     .DrawShipLoop:          ld      (CurrentShipUniv),a
 213+ 65EE CD 79 87                             call    GetTypeAtSlotA
 214+ 65F1 FE FF                                cp      $FF
 215+ 65F3 28 12                                jr      z,.ProcessedDrawShip
 216+ 65F5                                      ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 217+ 65F5 3A F1 63     .SelectShipToDraw:       ld      a,(CurrentShipUniv)
 218+ 65F8                                      MMUSelectUniverseA
 218+ 65F8 C6 46       >                     add    a,BankUNIVDATA0
 218+ 65FA ED 92 56    >                     nextreg UniverseMMU,       a
 219+ 65FD                                      IFDEF ROTATIONDEBUG
 220+ 65FD ~                                        call    SavePosition
 221+ 65FD                                      ENDIF
 222+ 65FD CD 18 DC     .ProcessUnivShip:       call    ProcessShip          ; The whole explosion logic is now encapsulated in process ship ;TODO TUNE THIS   ;; call    ProcessUnivShip
 223+ 6600              ; Debris still appears on radar
 224+ 6600                                      IFDEF ROTATIONDEBUG
 225+ 6600 ~                                        call    RestorePosition
 226+ 6600                                      ENDIF
 227+ 6600              .UpdateRadar:
 228+ 6600              ;;;Does nothing                       ld      a,BankFrontView
 229+ 6600              ;;;Does nothing                       MMUSelectScreenA
 230+ 6600              ;;;Does nothing         ld      a,(CurrentShipUniv)
 231+ 6600              ;;;Does nothing         MMUSelectUniverseA
 232+ 6600
 233+ 6600                                      CallIfMemTrue ConsoleRedrawFlag,UpdateScannerShip ; Always update ship positions
 233+ 6600 3A 77 83    >                        ld      a,(ConsoleRedrawFlag)
 233+ 6603 A7          >                        and     a
 233+ 6604 CC C0 73    >                        call    z, UpdateScannerShip
 234+ 6607 3A F1 63     .ProcessedDrawShip:     ld      a,(CurrentShipUniv)
 235+ 660A 3C                                   inc     a
 236+ 660B                                      JumpIfALTNusng   UniverseSlotListSize, .DrawShipLoop
 236+ 660B FE 0C       >                        cp      UniverseSlotListSize
 236+ 660D DA EB 65    >                        jp		c, .DrawShipLoop
 237+ 6610              .DrawSunCompass:        MMUSelectSun
 237+ 6610 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 238+ 6614 CD DB 6F                             call    UpdateCompassSun                ; Always update the sun position
 239+ 6617 CD 3E 72                             call    UpdateScannerSun                ; Always attempt to put the sun on the scanner
 240+ 661A              .CheckPlanetCompass:    JumpIfMemFalse SpaceStationSafeZone, .DrawStationCompass
 240+ 661A 3A 3B 82    >                        ld      a,(SpaceStationSafeZone)
 240+ 661D A7          >                        and     a
 240+ 661E C2 2C 66    >                        jp      nz, .DrawStationCompass
 241+ 6621              .DrawPlanetCompass:     MMUSelectPlanet
 241+ 6621 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 242+ 6625 CD 5B 70                             call    UpdateCompassPlanet
 243+ 6628 CD FF 72                             call    UpdateScannerPlanet
 244+ 662B C9                                   ret
 245+ 662C              .DrawStationCompass:
 246+ 662C
 247+ 662C C9                                   ret
 248+ 662D
 249+ 662D
 250+ 662D              ;..................................................................................................................................
 251+ 662D
 252+ 662D 3E 46        TestForNextShip:        ld      a,c_Pressed_Quit
 253+ 662F CD 99 7E                             call    is_key_pressed
 254+ 6632 C0                                   ret     nz
 255+ 6633 3A B1 67                             ld      a,(currentDemoShip)
 256+ 6636 3C                                   inc     a
 257+ 6637 FE 2C                                cp      44
 258+ 6639 20 01                                jr      nz,.TestOK
 259+ 663B AF                                   xor     a
 260+ 663C 32 B1 67     .TestOK:                ld      (currentDemoShip),a
 261+ 663F CD D4 86                             call    ClearUnivSlotList
 262+ 6642 3A B1 67                             ld      a,(currentDemoShip)
 263+ 6645 47                                   ld      b,a
 264+ 6646 AF                                   xor     a
 265+ 6647 CD EB 86                             call    SetSlotAToTypeB
 266+ 664A F5                                   push    af
 267+ 664B                                      MMUSelectUniverseN 2
 267+ 664B ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 268+ 664F                                      SetSlotAToUnivClass
 268+ 664F 08          >                        ex      af,af'
 268+ 6650 3A 45 C3    >                        ld      a,(ShipTypeAddr)
 268+ 6653 47          >                        ld      b,a
 268+ 6654 08          >                        ex      af,af'
 268+ 6655 CD F2 86    >                        call    SetSlotAToClassB
 269+ 6658 F1                                   pop     af
 270+ 6659 CD 64 C5                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 271+ 665C 3A B1 67                             ld      a,(currentDemoShip)
 272+ 665F                                      MMUSelectShipBank1
 272+ 665F ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 273+ 6663 CD 0F E0                             call    GetShipBankId
 274+ 6666                                      MMUSelectShipBankA
 274+ 6666 ED 92 57    >					 nextreg ShipModelMMU,	    a
 275+ 6669 78                                   ld      a,b
 276+ 666A CD 6A E0                             call    CopyShipToUniverse
 277+ 666D CD 0D 6B                             call    SetInitialShipPosition
 278+ 6670 CD 19 68                             call    DEBUGSETNODES
 279+ 6673 C9                                   ret
 280+ 6674
# file closed: ./GameEngine/UpdateUniverseObjects.asm
 267  6674              ;..................................................................................................................................
 268  6674              ;; TODODrawForwardSun:         MMUSelectSun
 269  6674              ;; TODO                        ld      a,(SunKShipType)
 270  6674              ;; TODO.ProcessBody:           cp      129
 271  6674              ;; TODO                        jr      nz,.ProcessPlanet
 272  6674              ;; TODO.ProcessSun:            call    ProcessSun
 273  6674              ;; TODO
 274  6674              ;; TODOProcessSun:             call    CheckSunDistance
 275  6674              ;; TODO
 276  6674              ;; TODO                        ret
 277  6674              ;; TODO.ProcessPlanet:         call    ProcessPlanet
 278  6674              ;; TODO                        ret
 279  6674              ;..................................................................................................................................
 280  6674
 281  6674
 282  6674              ;;;ProcessUnivShip:        call    CheckVisible               ; Will check for negative Z and skip (how do we deal with read and side views? perhaps minsky transformation handles that?)
 283  6674              ;;;                        ret     c
 284  6674              ;;;                        ld      a,(UbnkDrawAsDot)
 285  6674              ;;;                        and     a
 286  6674              ;;;                        jr      z,.CarryOnWithDraw
 287  6674              ;;;.itsJustADot:           ld      bc,(UBnkNodeArray)          ; if its at dot range
 288  6674              ;;;                        ld      a,$FF                       ; just draw a pixel
 289  6674              ;;;                        MMUSelectLayer2                     ; then go to update radar
 290  6674              ;;;                        call    l2_plot_pixel               ;
 291  6674              ;;;                        ClearCarryFlag
 292  6674              ;;;                        ret
 293  6674              ;;;.ProcessShipNodes:      call    ProcessShip
 294  6674              ;;;
 295  6674              ;;;call    ProcessNodes ; it hink here we need the star and planet special cases
 296  6674              ;;;.DrawShip:              call    CullV2				        ; culling but over aggressive backface assumes all 0 up front TOFIX
 297  6674              ;;;                        call    PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 298  6674              ;;;                        ld      a,(CurrentShipUniv)
 299  6674              ;;;                        MMUSelectUniverseA
 300  6674              ;;;                        call   DrawLines
 301  6674              ;;;                        ClearCarryFlag
 302  6674              ;;;                        ret
 303  6674
 304  6674
 305  6674              ;----------------------------------------------------------------------------------------------------------------------------------
 306  6674 49 6E 74 69  InitialiseMessage       DB "Intialising",0
 306  6678 61 6C 69 73
 306  667C 69 6E 67 00
 307  6680 4C 6F 61 64  LoadingSpritesMessage   DB "LoadingSprites",0
 307  6684 69 6E 67 53
 307  6688 70 72 69 74
 307  668C 65 73 00
 308  668F 49 6E 74 69  InitialisingGalaxies    DB "IntiailisingGalaxies",0
 308  6693 61 69 6C 69
 308  6697 73 69 6E 67
 308  669B 47 61 6C 61
 308  669F 78 69 65 73
 308  66A3 00
 309  66A4 00           LoadCounter             DB 0
 310  66A5 2A 00        SpriteProgress          DB "*",0
 311  66A7              ;----------------------------------------------------------------------------------------------------------------------------------
 312  66A7
 313  66A7              NeedAMessageQueue:
 314  66A7
 315  66A7              ;..................................................................................................................................
 316  66A7                                      INCLUDE "./GameEngine/HyperSpaceTimers.asm"
# file opened: ./GameEngine/HyperSpaceTimers.asm
   1+ 66A7              ;----------------------------------------------------------------------------------------------------------------------------------
   2+ 66A7 3A 53 83     UpdateCountdownNumber:  ld		a,(OuterHyperCount)
   3+ 66AA 11 01 67                             ld		de,Hyp_counter
   4+ 66AD 0E 9C                                ld	c, -100
   5+ 66AF CD B9 66                             call	.Num1
   6+ 66B2 0E F6                                ld	c,-10
   7+ 66B4 CD B9 66                             call	.Num1
   8+ 66B7 0E FF                                ld	c,-1
   9+ 66B9 06 2F        .Num1:	                ld	b,'0'-1
  10+ 66BB 04           .Num2:	                inc		b
  11+ 66BC 81                                   add		a,c
  12+ 66BD 38 FC                                jr		c,.Num2
  13+ 66BF 91                                   sub 	c
  14+ 66C0 C5                                   push	bc
  15+ 66C1 F5                                   push	af
  16+ 66C2 79                                   ld		a,c
  17+ 66C3 FE FF                                cp		-1
  18+ 66C5 78                                   ld		a,b
  19+ 66C6 12                                   ld		(de),a
  20+ 66C7 13                                   inc		de
  21+ 66C8 F1                                   pop		af
  22+ 66C9 C1                                   pop		bc
  23+ 66CA C9                                   ret
  24+ 66CB
  25+ 66CB              ;----------------------------------------------------------------------------------------------------------------------------------
  26+ 66CB 54 6F 3A     Hyp_message             DB "To:"
  27+ 66CE 00 00 00...  Hyp_to                  DS 32
  28+ 66EE 20           Hyp_space1              DB " "
  29+ 66EF 30 2E 30     Hyp_dist_amount         DB "0.0"
  30+ 66F2 2E           Hyp_decimal             DB "."
  31+ 66F3 30           Hyp_fraction            DB "0"
  32+ 66F4 20 4C 59 00  Hyp_dis_ly              DB " LY",0
  33+ 66F8 43 68 61 72  Hyp_charging            DB "Charging:"
  33+ 66FC 67 69 6E 67
  33+ 6700 3A
  34+ 6701 30 30 30 00  Hyp_counter             DB "000",0
  35+ 6705 00 00 00...  Hyp_centeredTarget      DS 32
  36+ 6725 00           Hyp_centeredEol         DB 0
  37+ 6726 00 00 00...  Hyp_bufferpadding       DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  38+ 6746 00 00 00...  Hyp_centeredCharging    DS 32
  39+ 6766 00           Hyp_centeredEol2        DB 0
  40+ 6767 00 00 00...  Hyp_bufferpadding2      DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  41+ 6787
  42+ 6787
# file closed: ./GameEngine/HyperSpaceTimers.asm
 317  6787
 318  6787
 319  6787
 320  6787              ;DisplayTargetAndRange
 321  6787              ;DisplayCountDownNumber
 322  6787              ;----------------------------------------------------------------------------------------------------------------------------------
 323  6787 3A 4D 83     TestPauseMode:          ld      a,(GamePaused)
 324  678A FE 00                                cp      0
 325  678C 20 12                                jr      nz,.TestForResume
 326  678E 3A A8 81     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 327  6791                                      ReturnIfAGTENusng       ScreenFront
 327  6791 FE 09       >                        cp    ScreenFront
 327  6793 D0          >                        ret	 nc
 328  6794 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 329  6796 CD 99 7E                             call    is_key_pressed
 330  6799 C0                                   ret     nz
 331  679A              .PausePressed:          SetAFalse                                  ; doesn't really matter if we were in pause already as resume is a different key
 331  679A 3E FF       >                        ld      a,$FF
 332  679C 32 4D 83                             ld      (GamePaused),a
 333  679F C9                                   ret
 334  67A0 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 335  67A2 CD 99 7E                             call    is_key_pressed
 336  67A5 C0                                   ret     nz
 337  67A6 AF           .ResumePressed:         xor     a
 338  67A7 32 4D 83                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 339  67AA C9                                   ret
 340  67AB
 341  67AB 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 342  67AD CD 99 7E                             call    is_key_pressed
 343  67B0 C9                                   ret
 344  67B1 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 345  67B2
 346  67B2
 347  67B2 21 20 C0     GetStationVectorToWork: ld      hl,UBnKxlo
 348  67B5 11 BD 81                             ld      de,varVector9ByteWork
 349  67B8 ED A0                                ldi
 350  67BA ED A0                                ldi
 351  67BC ED A0                                ldi
 352  67BE ED A0                                ldi
 353  67C0 ED A0                                ldi
 354  67C2 ED A0                                ldi
 355  67C4 ED A0                                ldi
 356  67C6 ED A0                                ldi
 357  67C8 ED A0                                ldi
 358  67CA 2A BD 81     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 359  67CD ED 5B C0 81                          ld      de, (varVector9ByteWork+3); Y
 360  67D1 ED 4B C3 81                          ld      bc, (varVector9ByteWork+6); Z
 361  67D5 7D                                   ld      a,l
 362  67D6 B3                                   or      e
 363  67D7 B1                                   or      c
 364  67D8 F6 01                                or      1
 365  67DA DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 366  67DC 7C                                   ld      a,h
 367  67DD B2                                   or      d
 368  67DE B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 369  67DF C5           .MulBy2Loop:            push    bc
 370  67E0 DD 45                                ld      b,ixl
 371  67E2 CB 20                                sla     b                       ; Shift ixl left
 372  67E4 DD 68                                ld      ixl,b
 373  67E6 C1                                   pop     bc
 374  67E7 CB 17                                rl      a                       ; roll into a
 375  67E9 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 376  67EB                                      ShiftHLLeft1                    ; Shift Left X
 376  67EB CB 25       >			   sla l
 376  67ED CB 14       >			   rl  h
 377  67EF                                      ShiftDELeft1                    ; Shift Left Y
 377  67EF CB 23       >			   sla e
 377  67F1 CB 12       >			   rl  d
 378  67F3                                      ShiftBCLeft1                    ; Shift Left Z
 378  67F3 CB 21       >			   sla c
 378  67F5 CB 10       >			   rl  b
 379  67F7 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 380  67F9 3A BF 81     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 381  67FC CB 3C                                srl     h
 382  67FE B4                                   or      h
 383  67FF 32 A6 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 384  6802 3A C2 81                             ld      a,(varVector9ByteWork+5); y sign
 385  6805 CB 3A                                srl     d
 386  6807 B2                                   or      d
 387  6808 32 A7 C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 388  680B 3A C5 81                             ld      a,(varVector9ByteWork+8); y sign
 389  680E CB 38                                srl     b
 390  6810 B0                                   or      b
 391  6811 32 A8 C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 392  6814 CD 84 99                             call    normaliseXX1596S7
 393  6817 C9                                   ret                          ; will return with a holding Vector Z
 394  6818
 395  6818 00           TidyCounter             DB  0
 396  6819
 397  6819                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 6819
   2+ 6819
   3+ 6819 21 3C 68     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 681C 11 20 C0                             ld      de,UBnKxlo
   5+ 681F 01 09 00                             ld      bc,9
   6+ 6822 ED B0                                ldir
   7+ 6824 21 45 68                             ld      hl,DEBUGROTMATDATA
   8+ 6827 11 29 C0                             ld      de,UBnkrotmatSidevX
   9+ 682A 01 12 00                             ld      bc,6*3
  10+ 682D ED B0                                ldir
  11+ 682F C9                                   ret
  12+ 6830
  13+ 6830 21 3C 68     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 6833 11 20 C0                             ld      de,UBnKxlo
  15+ 6836 01 06 00                             ld      bc,9 - 3
  16+ 6839 ED B0                                ldir
  17+ 683B C9                                   ret
  18+ 683C
  19+ 683C              ; culltest
  20+ 683C              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 683C 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 6840 00 00 5C 07
  21+ 6844 00
  22+ 6845 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 6849 00 00
  23+ 684B 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 684F 00 00
  24+ 6851 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 6855 00 E0
  25+ 6857
  26+ 6857              ; FAILS due to sharp angle, OK now
  27+ 6857              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 6857              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 6857              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 6857              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 6857              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 6857              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 6857              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 6857              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 6857              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 6857              ; Looks OK
  37+ 6857              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 6857              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 6857              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 6857              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 6857              ;
  42+ 6857              ; Massive horizontal line
  43+ 6857              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 6857              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 6857              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 6857              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 6857              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 6857              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 6857              ; Line lost in clipping
  50+ 6857              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 6857              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 6857              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 6857              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 6857              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 6857              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 6857              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 6857              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 6857              ;
  59+ 6857              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 6857              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 6857              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 6857              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 6857              ; top left off right issue
  64+ 6857              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 6857              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 6857              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 6857              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 6857              ; test middle of screen
  69+ 6857              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 6857              ;
  71+ 6857              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 6857              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 6857              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 6857              ; test middle of screen futher away
  75+ 6857              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 6857              ;
  77+ 6857              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 6857              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 6857              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 6857
  81+ 6857              ; Test left center clip still warping
  82+ 6857              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 6857              ;
  84+ 6857              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 6857              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 6857              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 6857              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 6857              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 6857              ;
  90+ 6857              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 6857              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 6857              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 6857              ; Test top center clip test 1 - good test many ships fail
  94+ 6857              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 6857              ;
  96+ 6857              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 6857              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 6857              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 6857              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 6857              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 6857              ;
 102+ 6857              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 6857              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 6857              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 6857              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 6857              ; looks better now may have some clipping issues maybe ship data
 107+ 6857              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 6857              ;
 109+ 6857              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 6857              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 6857 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 685B B0 55
 112+ 685D              ; Test left top center clip
 113+ 685D
 114+ 685D              ; Test right top center clip
 115+ 685D              ; Test left bottom center clip
 116+ 685D              ; Test right bottom center clip
 117+ 685D
 118+ 685D              ; Tests with no clip
 119+ 685D              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 685D              ;
 121+ 685D              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 685D              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 685D              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 685D              ;
 125+ 685D              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 685D              ;
 127+ 685D              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 685D              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 685D
# file closed: ./debugMatrices.asm
 398  685D
 399  685D
 400  685D              ;TODO Optimisation
 401  685D              ; Need this table to handle differnet events
 402  685D              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 403  685D              ; cursor key, joystick press
 404  685D              ; cursor key, joystick press
 405  685D              ; non cursor keys presses
 406  685D              ;
 407  685D                                      INCLUDE "./Tables/ScreenControlTable.asm"
# file opened: ./Tables/ScreenControlTable.asm
   1+ 685D              ; First byte is now docked flag
   2+ 685D              ;
   3+ 685D              ; Padded to 8 bytes to allow a * 8 for addressing
   4+ 685D              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
   5+ 685D              ; Byte 1   - Screen Id
   6+ 685D              ; Byte 2,3 - address of keypress table
   7+ 685D              ; Byte 4   - Bank with Display code
   8+ 685D              ; Byte 5,6 - Function for display
   9+ 685D              ; Byte 7,8 - Main loop update routine
  10+ 685D              ; Byte 9   - Draw stars Y/N ; also are we in an external view that can have guns?
  11+ 685D              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
  12+ 685D              ; byte 11  - Double Buffering 0 = no, 1 = yes
  13+ 685D              ; byte 12,13  - cursor key input routine
  14+ 685D              ; byte 14  - HyperspaceBlock - can not select this screen if in hyperpace - 00 can , 01 can not
  15+ 685D              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
  16+ 685D              ; byte 16  - block update ship
  17+ 685D              ; byte 17,18 Function for drawing system Jump (or 0)
  18+ 685D              ; later will add a routine for drawing
  19+ 685D              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15  16   17               18
  20+ 685D 00 00 E8 7D  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $01,$00,$00, $00,             $00
  20+ 6861 32 FC C3 00
  20+ 6865 00 00 00 00
  20+ 6869 5A C4 01 00
  20+ 686D 00 00 00
  21+ 6870 00 01 E6 7D  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $01,$00,$00, $00,             $00
  21+ 6874 33 48 C1 78
  21+ 6878 C2 00 00 00
  21+ 687C 00 C3 01 00
  21+ 6880 00 00 00
  22+ 6883 01 02 EA 7D                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  22+ 6887 36 43 C3 FA
  22+ 688B C3 00 00 00
  22+ 688F 00 00 01 00
  22+ 6893 00 00 00
  23+ 6896 02 03 EA 7D                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  23+ 689A 36 43 C3 00
  23+ 689E 00 00 00 00
  23+ 68A2 00 00 01 00
  23+ 68A6 00 00 00
  24+ 68A9 00 04 EC 7D  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  24+ 68AD 3F 29 CF 72
  24+ 68B1 CF 00 00 00
  24+ 68B5 00 00 01 00
  24+ 68B9 00 00 00
  25+ 68BC 00 05 EE 7D                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  25+ 68C0 34 F5 C1 00
  25+ 68C4 00 00 00 00
  25+ 68C8 00 00 01 00
  25+ 68CC 00 00 00
  26+ 68CF 00 06 FC 7D                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  26+ 68D3 35 F0 C2 00
  26+ 68D7 00 00 00 00
  26+ 68DB 00 00 01 00
  26+ 68DF 00 00 00
  27+ 68E2 01 07 E4 7D                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  27+ 68E6 40 EA D3 86
  27+ 68EA D4 00 00 00
  27+ 68EE 00 00 01 00
  27+ 68F2 00 00 00
  28+ 68F5 01 08 DE 7D                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  28+ 68F9 41 79 C1 63
  28+ 68FD C2 00 01 01
  28+ 6901 00 00 01 00
  28+ 6905 FF 00 00
  29+ 6908 02 09 B4 7D  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          low update_front_view,high update_front_view, $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  29+ 690C 3E 6A C0 D2
  29+ 6910 C0 01 00 01
  29+ 6914 F6 C2 00 00
  29+ 6918 00 E2 C2
  30+ 691B 02 0A B4 7D                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  30+ 691F 3E 6A C0 00
  30+ 6923 00 01 00 01
  30+ 6927 F6 C2 00 00
  30+ 692B 00 E2 C2
  31+ 692E 02 0B B4 7D                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  31+ 6932 3E 6A C0 00
  31+ 6936 00 01 00 01
  31+ 693A F6 C2 00 00
  31+ 693E 00 E2 C2
  32+ 6941 02 0C B4 7D                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  32+ 6945 3E 6A C0 00
  32+ 6949 00 01 00 01
  32+ 694D F6 C2 00 00
  32+ 6951 00 E2 C2
  33+ 6954 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  33+ 6958 41 F5 C1 98
  33+ 695C C2 00 01 01
  33+ 6960 00 00 01 00
  33+ 6964 FF 00 00
  34+ 6967 01 0E FF FF                          DB 1,   ScreenHyperspace, $FF,                           $FF,                            BankFrontView,       low draw_hyperspace,         high draw_hyperspace,          low loop_hyperspace,  high loop_hyperspace,   $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  34+ 696B 3E 9C C2 F3
  34+ 696F C2 00 01 01
  34+ 6973 00 00 01 00
  34+ 6977 FF 00 00
  35+ 697A
  36+ 697A              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  37+ 697A              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  38+ 697A              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  39+ 697A              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
  40+ 697A              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
  41+ 697A              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
  42+ 697A              ScreenCount         EQU 15
  43+ 697A
# file closed: ./Tables/ScreenControlTable.asm
 408  697A
 409  697A FF           ScreenTransitionForced  DB $FF
 410  697B                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 697B              ; Use bank 0 as source and bank 7 as write target
   2+ 697B              ResetUniv:              MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   2+ 697B ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   3+ 697F 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
   4+ 6981 06 0C                                ld		b,12
   5+ 6983 C5 F5        .ResetCopyLoop:         push	bc,,af
   6+ 6985                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
   6+ 6985 C6 46       >                     add    a,BankUNIVDATA0
   6+ 6987 ED 92 56    >                     nextreg UniverseMMU,       a
   7+ 698A 21 00 C0                             ld		hl,UniverseBankAddr
   8+ 698D 11 00 00                             ld		de,dmaCopySrcAddr
   9+ 6990 01 D8 1E                             ld		bc,UnivBankSize
  10+ 6993 CD 58 7D                             call	memcopy_dma
  11+ 6996 F1 C1                                pop		bc,,af
  12+ 6998 57                                   ld      d,a
  13+ 6999 C6 41                                add     "A"
  14+ 699B 32 0B C0                             ld      (StartOfUnivN),a
  15+ 699E 7A                                   ld      a,d
  16+ 699F 3C                                   inc		a
  17+ 69A0 10 E1                                djnz	.ResetCopyLoop
  18+ 69A2 C9                                   ret
  19+ 69A3
  20+ 69A3              ; Use bank 0 as source and bank 7 as write target
  21+ 69A3              ResetGalaxy:            MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0 we can read bank 0 as if it was rom
  21+ 69A3 ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  22+ 69A7 3E 5C                                ld		a,BankGalaxyData1 			   	 ; and write to real location for galaxy data
  23+ 69A9 06 07                                ld		b,7                              ; 8 galaxies but we start with galaxy 0
  24+ 69AB 0E 01                                ld      c,1                              ;
  25+ 69AD F5           .ResetCopyLoop:         push	af                               ;
  26+ 69AE C5                                   push	bc                               ;
  27+ 69AF                                      MMUSelectGalaxyA    	                 ; copy from bank 0 to galaxy 1 to 7
  27+ 69AF ED 92 57    >                     nextreg GalaxyDataMMU,     a
  28+ 69B2 21 00 E0                             ld		hl,GalaxyDataAddr                ; using dma transfer
  29+ 69B5 11 00 00                             ld		de,dmaCopySrcAddr                ; .
  30+ 69B8 01 DC 1C                             ld		bc,GalaxyBankSize                ; .
  31+ 69BB CD 58 7D                             call	memcopy_dma                      ; .
  32+ 69BE C1                                   pop		bc                               ; .
  33+ 69BF 21 0F E0                             ld      hl, galaxy_pg_cnt                ; write out the galaxy page nbr to the page so we can diagnose page swapping
  34+ 69C2 79                                   ld      a,c                              ;
  35+ 69C3 C6 30                                add     a, $30                           ; add $30 (48) to get ascii of galaxy nbr
  36+ 69C5 77                                   ld      (hl),a                           ; .
  37+ 69C6 0C                                   inc     c                                ; Do next bank
  38+ 69C7 F1                                   pop     af                               ; .
  39+ 69C8 3C                                   inc		a                                ; .
  40+ 69C9 10 E2                                djnz	.ResetCopyLoop                    ; .
  41+ 69CB C9                                   ret
  42+ 69CC
  43+ 69CC 06 08        SeedAllGalaxies:        ld          b,8
  44+ 69CE 0E 5B                                ld          c,BankGalaxyData0
  45+ 69D0 C5           .SeedAllGalaxiesLoop:   push        bc
  46+ 69D1 79                                   ld          a,c
  47+ 69D2                                      MMUSelectGalaxyA
  47+ 69D2 ED 92 57    >                     nextreg GalaxyDataMMU,     a
  48+ 69D5 CD 9F FC                             call        SeedGalaxy
  49+ 69D8 C1                                   pop         bc
  50+ 69D9 0C                                   inc         c
  51+ 69DA 10 F4                                djnz        .SeedAllGalaxiesLoop
  52+ 69DC C9                                   ret
# file closed: ./GameEngine/resetUniverse.asm
 411  69DD
 412  69DD
 413  69DD              ;----------------------------------------------------------------------------------------------------------------------------------
 414  69DD              LaunchedFromStation:    MMUSelectSun
 414  69DD ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 415  69E1 CD 97 C2                             call    CreateSunLaunched                   ; create the local sun and set position based on seed
 416  69E4                                      MMUSelectPlanet
 416  69E4 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 417  69E8 CD F4 C0                             call    CreatePlanetLaunched
 418  69EB CD D4 86                             call    ClearUnivSlotList                   ; slot list is clear to 0 is gauranteed next slot
 419  69EE 3E 0D                                ld      a,CoriloisStation
 420  69F0 CD 59 62                             call    SpawnShipTypeA
 421  69F3
 422  69F3              ;;.SpawnSpaceStation:     call    SetSlot0ToSpaceStation              ; set slot 1 to space station
 423  69F3              ;;                        MMUSelectUniverseN 0                        ; Prep Target universe
 424  69F3              ;;                        MMUSelectShipBank1                          ; Bank in the ship model code
 425  69F3              ;;                        ld      iyh,0                               ; Zero ship runtime data
 426  69F3              ;;                        ld      iyl,ShipTypeStation                 ; and mark as spece station
 427  69F3              ;;                        call    UnivInitRuntime                     ; its always slot 0
 428  69F3              ;;                        ld      a,CoriloisStation
 429  69F3              ;;                        call    GetShipBankId
 430  69F3              ;;                        MMUSelectShipBankA                          ; Select the correct bank found
 431  69F3              ;;                        ld      a,b                                 ; Select the correct ship
 432  69F3              ;;                        call    CopyShipToUniverse
 433  69F3 CD 7B C7     .BuiltStation:          call    ResetStationLaunch
 434  69F6                                      IFDEF DEBUGMISSILETEST
 435  69F6 ~            ;                            ld      a,0
 436  69F6 ~            ;                            ld      (UBnKRotXCounter),a             ; kill station roll
 437  69F6 ~
 438  69F6 ~            .TestMissileTarget:         ld      a,ShipID_Viper
 439  69F6 ~                                        call    SpawnShipTypeA                      ; call rather than jump, returns with a = slot number
 440  69F6 ~                                        ZeroA
 441  69F6 ~                                        ld      (UBnKSpeed),a
 442  69F6 ~                                        ld      a,$80
 443  69F6 ~                                        ld      (UBnKxsgn),a
 444  69F6 ~                                        ;ld      a,$80
 445  69F6 ~                                        ZeroA
 446  69F6 ~                                        ld      (UBnKysgn),a
 447  69F6 ~                                        ld      a,$80
 448  69F6 ~                                       ZeroA
 449  69F6 ~                                        ld      (UBnKzsgn),a
 450  69F6 ~                                        ld      a,$60
 451  69F6 ~                                        ZeroA
 452  69F6 ~                                        ld      (UBnKxlo),a
 453  69F6 ~                                        ld      a,$10
 454  69F6 ~                                        ;ZeroA
 455  69F6 ~                                        ld      (UBnKxhi),a
 456  69F6 ~                                        ld      a,$60
 457  69F6 ~                                        ;ZeroA
 458  69F6 ~                                        ld      (UBnKylo),a
 459  69F6 ~                                        ld      a,$1B
 460  69F6 ~                                        ;ZeroA
 461  69F6 ~                                        ld      (UBnKyhi),a
 462  69F6 ~                                        ZeroA
 463  69F6 ~                                        ld      (UBnKzlo),a
 464  69F6 ~                                        ld      a,$2B
 465  69F6 ~                                        ld      (UBnKzhi),a
 466  69F6                                      ENDIF
 467  69F6 3E 00        .NowInFlight:           ld      a,StateNormal
 468  69F8 32 4C 83                             ld      (DockedFlag),a
 469  69FB                                      ForceTransition ScreenFront
 469  69FB 3E 09       >                        ld      a,ScreenFront
 469  69FD 32 7A 69    >                        ld      (ScreenTransitionForced), a
 470  6A00 3E FF                                ld      a,$FF
 471  6A02 32 06 B1                             ld      (LAST_DELTA),a              ; force sound update in interrupt
 472  6A05 CD 71 85                             call    ResetPlayerShip
 473  6A08                                      IFDEF DEBUGMISSILETEST
 474  6A08 ~                                        ld  a,1
 475  6A08 ~                                        LockMissileToA
 476  6A08                                      ENDIF
 477  6A08 C9                                   ret
 478  6A09
 479  6A09 3A AA 68     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 480  6A0C C3 18 6A                             jp      SetScreenA
 481  6A0F
 482  6A0F 3A 09 69     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 483  6A12 C3 18 6A                             jp      SetScreenA
 484  6A15              ; false ret here as we get it free from jp
 485  6A15              ;----------------------------------------------------------------------------------------------------------------------------------
 486  6A15                                      INCLUDE "./GameEngine/SetScreenA.asm"
# file opened: ./GameEngine/SetScreenA.asm
   1+ 6A15              ; SetScreenA.asm
   2+ 6A15              ;----------------------------------------------------------------------------------------------------------------------------------
   3+ 6A15 C3 15 6A     InvalidScreenBlock:     jp     InvalidScreenBlock
   4+ 6A18              SetScreenA:             JumpIfAGTENusng ScreenCount, InvalidScreenBlock
   4+ 6A18 FE 0F       >                        cp     ScreenCount
   4+ 6A1A D2 15 6A    >                        jp		nc,InvalidScreenBlock
   5+ 6A1D 32 A8 81     .SetUpIndex:            ld      (ScreenIndex),a                 ; Set screen index to a
   6+ 6A20 57           .SetUpIX:               ld      d,a
   7+ 6A21 1E 13                                ld      e,ScreenMapRow
   8+ 6A23 ED 30                                mul
   9+ 6A25 DD 21 5D 68                          ld      ix,ScreenKeyMap
  10+ 6A29 DD 19                                add     ix,de
  11+ 6A2B DD 22 A9 81                          ld      (ScreenIndexTablePointer),ix    ; optimises later fetches
  12+ 6A2F                                      ClearForceTransition                    ; In case it was called by a brute force change in an update loop
  12+ 6A2F 3E FF       >                        ld      a,$FF
  12+ 6A31 32 7A 69    >                        ld      (ScreenTransitionForced),a
  13+ 6A34 32 A7 81                             ld      (ScreenChanged),a               ; Set screen changed to FF
  14+ 6A37 DD 7E 09     .IsItAViewPort:         ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N and also guns present
  15+ 6A3A 32 70 60                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
  16+ 6A3D                                      JumpIfAIsZero .NotViewPort              ;
  16+ 6A3D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  16+ 6A3E CA 4D 6A    >                        jp	    z, .NotViewPort
  17+ 6A41 DD 7E 01                             ld      a,(ix+1)                        ; get screen view number
  18+ 6A44 D6 09                                sub     ScreenFront                     ; Now a = screen number 0 = front, 1 = aft, 2 = left 3 = right
  19+ 6A46                                      MMUSelectCommander                      ; Load view laser to current
  19+ 6A46 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  20+ 6A4A CD 04 E3                             call    LoadLaserToCurrent              ;
  21+ 6A4D DD 7E 04     .NotViewPort:           ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
  22+ 6A50 32 0C 61                             ld      (ScreenLoopBank+1),a            ; setup loop
  23+ 6A53 32 A4 5F                             ld      (HandleBankSelect+1),a          ; setup cursor keys
  24+ 6A56 32 B2 61                             ld      (WarpMMUBank+1),a               ; WarpSFXHandler
  25+ 6A59                                      MMUSelectScreenA
  25+ 6A59 ED 92 56    >                     nextreg ScreenBankMMU,		a
  26+ 6A5C DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 & 6 - Function for display initialisation
  27+ 6A5F 32 9F 6A                             ld      (ScreenUpdateAddr+1),a          ; .
  28+ 6A62 DD 7E 06                             ld      a,(ix+6)                        ; .
  29+ 6A65 32 A0 6A                             ld      (ScreenUpdateAddr+2),a          ; .
  30+ 6A68 DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 & 8 - Main loop update routine
  31+ 6A6B 32 11 61                             ld      (ScreenLoopJP+1),a              ; .
  32+ 6A6E DD 7E 08                             ld      a,(ix+8)                        ; .
  33+ 6A71 32 12 61                             ld      (ScreenLoopJP+2),a              ; .
  34+ 6A74 DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
  35+ 6A77 32 7E 5F                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
  36+ 6A7A DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
  37+ 6A7D 32 9C 62                             ld      (DoubleBufferCheck+1),a
  38+ 6A80 DD 7E 0C                             ld      a,(ix+12)
  39+ 6A83 32 A9 5F                             ld      (CallCursorRoutine+1),a
  40+ 6A86 DD 7E 0D                             ld      a,(ix+13)
  41+ 6A89 32 AA 5F                             ld      (CallCursorRoutine+2),a
  42+ 6A8C DD 7E 10                             ld      a,(ix+16)
  43+ 6A8F 32 62 60                             ld      (UpdateShipsControl+1),a       ; determin if we call update universe objects in this screen
  44+ 6A92 DD 7E 11                             ld      a,(ix+17)
  45+ 6A95 32 B7 61                             ld      (WarpRoutineAddr+1),a
  46+ 6A98 DD 7E 12                             ld      a,(ix+18)
  47+ 6A9B 32 B8 61                             ld      (WarpRoutineAddr+2),a
  48+ 6A9E C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
  49+ 6AA1
# file closed: ./GameEngine/SetScreenA.asm
 487  6AA1                                      INCLUDE "./GameEngine/ViewKeyTest.asm"
# file opened: ./GameEngine/ViewKeyTest.asm
   1+ 6AA1 3A A8 81     ViewKeyTest:            ld      a,(ScreenIndex)
   2+ 6AA4 4F                                   ld      c,a
   3+ 6AA5 06 0F                                ld      b,ScreenMapLen                  ; For now until add screens are added
   4+ 6AA7 DD 21 5D 68                          ld      ix,ScreenKeyMap                 ; IX = table head for scanning
   5+ 6AAB 2A 52 83                             ld      hl,(InnerHyperCount)
   6+ 6AAE 7C                                   ld      a,h
   7+ 6AAF B5                                   or      l
   8+ 6AB0 FD 67                                ld      iyh,a
   9+ 6AB2 FD 7C        ViewScanLoop:           ld      a,iyh
  10+ 6AB4 A7           .HyperspaceCountdown:   and     a
  11+ 6AB5 28 08                                jr      z,.CheckDockedFlag
  12+ 6AB7 DD 7E 0E                             ld      a,(ix+14)
  13+ 6ABA FE 01                                cp      1
  14+ 6ABC CA 05 6B                             jp      z,NotReadNextKey
  15+ 6ABF DD 7E 00     .CheckDockedFlag:       ld      a,(ix+0)                        ; Screen Map Byte 0 Docked keyboard read flag
  16+ 6AC2              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
  17+ 6AC2                                      JumpIfAEqNusng 3, NotReadNextKey        ; No keypress allowed at all (e.g. in hyperspace)
  17+ 6AC2 FE 03       >                        cp     3
  17+ 6AC4 CA 05 6B    >                        jp      z,NotReadNextKey
  18+ 6AC7                                      JumpIfAIsZero    .CanReadKey            ; if its the skip check for docking status
  18+ 6AC7 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  18+ 6AC8 CA E2 6A    >                        jp	    z, .CanReadKey
  19+ 6ACB 57           .DocCheck:              ld      d,a                             ; save ix+0 value
  20+ 6ACC                                      JumpIfMemEqNusng DockedFlag, StateNormal, .NotDockedCheck ; if we are not in a docked state the we ar egood
  20+ 6ACC 3A 4C 83    >                        ld  a,(DockedFlag)
  20+ 6ACF FE 00       >                        cp  StateNormal
  20+ 6AD1 CA DC 6A    >                        jp  z,.NotDockedCheck
  21+ 6AD4 7A           .DockedCheck:           ld      a,d                             ; we are docked so only ix+0 value of 1 is allowed
  22+ 6AD5                                      JumpIfANENusng 1, NotReadNextKey        ; if we are docked and its not 1 then don't read
  22+ 6AD5 FE 01       >                        cp     1
  22+ 6AD7 C2 05 6B    >                        jp      nz,NotReadNextKey
  23+ 6ADA 18 06                                jr      .CanReadKey                     ; we can now scan as normal  as its 2 and docked
  24+ 6ADC 7A           .NotDockedCheck:        ld      a,d                             ; if we are not docked then code 2 is not keyscan allowed
  25+ 6ADD                                      JumpIfANENusng 2,NotReadNextKey
  25+ 6ADD FE 02       >                        cp     2
  25+ 6ADF C2 05 6B    >                        jp      nz,NotReadNextKey
  26+ 6AE2 DD 7E 01     .CanReadKey:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
  27+ 6AE5 B9                                   cp      c                               ; is the index the current screen, if so skip the scan
  28+ 6AE6 5F                                   ld      e,a
  29+ 6AE7 28 1C                                jr      z,NotReadNextKey                ; we cant transition to current screen
  30+ 6AE9 DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
  31+ 6AEC FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
  32+ 6AEE 28 15                                jr      z,NotReadNextKey
  33+ 6AF0 32 FB 6A                             ld      (ReadKeyAddr+2),a               ; Poke address into the ld hl,(....) below
  34+ 6AF3 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
  35+ 6AF6 32 FA 6A                             ld      (ReadKeyAddr+1),a
  36+ 6AF9 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
  37+ 6AFC 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
  38+ 6AFD                                      JumpIfAIsZero NotReadNextKey
  38+ 6AFD A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38+ 6AFE CA 05 6B    >                        jp	    z, NotReadNextKey
  39+ 6B01 7B           .ValidScreenChange:     ld      a,e                             ; entering here e= current screen search number
  40+ 6B02 C3 18 6A                             jp      SetScreenA
  41+ 6B05              ;--- CODE WILL NOT FALL TO HERE ---
  42+ 6B05 11 13 00     NotReadNextKey:         ld      de,ScreenMapRow
  43+ 6B08 DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
  44+ 6B0A 10 A6                                djnz    ViewScanLoop
  45+ 6B0C C9                                   ret
  46+ 6B0D
# file closed: ./GameEngine/ViewKeyTest.asm
 488  6B0D              ;----------------------------------------------------------------------------------------------------------------------------------
 489  6B0D 21 00 00     SetInitialShipPosition: ld      hl,$0000
 490  6B10 22 20 C0                             ld      (UBnKxlo),hl
 491  6B13 21 00 00                             ld      hl,$0000
 492  6B16 22 23 C0                             ld      (UBnKylo),hl
 493  6B19 21 B4 03                             ld      hl,$03B4
 494  6B1C 22 26 C0                             ld      (UBnKzlo),hl
 495  6B1F AF                                   xor     a
 496  6B20 32 22 C0                             ld      (UBnKxsgn),a
 497  6B23 32 25 C0                             ld      (UBnKysgn),a
 498  6B26 32 28 C0                             ld      (UBnKzsgn),a
 499  6B29              ;    call    Reset TODO
 500  6B29 CD 30 C8                             call	InitialiseOrientation            ;#00;
 501  6B2C 3E 01                                ld      a,1
 502  6B2E 32 99 81                             ld      (DELTA),a
 503  6B31 21 04 00                             ld      hl,4
 504  6B34 22 9A 81                             ld      (DELTA4),hl
 505  6B37 C9                                   ret
 506  6B38
 507  6B38              ; Checks to see if current ship swapped in is in our sights
 508  6B38              ; we don;t need to deal with planets or sun as they have their own memory bank
 509  6B38              ShipInSights:           ClearCarryFlag                          ; Carry clear no hit
 509  6B38 B7          >                        or a
 510  6B39                                      ReturnIfMemIsNegative UBnKzsgn
 510  6B39 3A 28 C0    >                        ld      a,(UBnKzsgn)
 510  6B3C E6 80       >                        and     $80
 510  6B3E C0          >                        ret     nz
 511  6B3F 3A 51 C0                             ld      a,(UBnKexplDsp)                 ; get exploding flag and or with x and y high
 512  6B42 2A 20 C0                             ld      hl,(UBnKxlo)                    ; do 16 bit fetch as we will often need both bytes
 513  6B45 ED 4B 23 C0                          ld      bc,(UBnKylo)                    ; .
 514  6B49 B4                                   or      h
 515  6B4A B0                                   or      b
 516  6B4B C0                                   ret     nz                              ; if exploding or x hi or y hi are set then its nto targetable
 517  6B4C 7D                                   ld      a,l                             ; hl =xlo ^ 2
 518  6B4D                                      DEEquSquareA                            ; .
 518  6B4D 57          >                        ld  d,a
 518  6B4E 5F          >                        ld  e,a
 518  6B4F ED 30       >                        mul de
 519  6B51 62 6B                                ld      hl,de                           ; .
 520  6B53 79                                   ld      a,c                             ; de = de = ylo ^ 2
 521  6B54                                      DEEquSquareA                            ; .
 521  6B54 57          >                        ld  d,a
 521  6B55 5F          >                        ld  e,a
 521  6B56 ED 30       >                        mul de
 522  6B58 19                                   add     hl,de                           ; hl = xlo ^ 2 + ylo ^ 2
 523  6B59 D8                                   ret     c                               ; if there was a carry then out of line of sight
 524  6B5A ED 5B 2F C3                          ld      de,(MissileLockLoAddr)          ; get targettable area ^ 2 from blueprint copy
 525  6B5E                                      cpHLDE                                  ; now compare x^2 + y^2 to target area
 525  6B5E E5          >                        push    hl
 525  6B5F A7          >                        and     a
 525  6B60 ED 52       >                        sbc     hl,de
 525  6B62 E1          >                        pop     hl
 526  6B63 28 01                                jr      z,.EdgeHit                      ; if its an edge hit then we need to set carry
 527  6B65 C9                                   ret                                     ; if its < area then its a hit and carry is set, we will not work on =
 528  6B66              .EdgeHit:               SetCarryFlag                            ; its an edge hit then we need to set carry
 528  6B66 37          >                        scf
 529  6B67 C9                                   ret
 530  6B68
 531  6B68
 532  6B68                          INCLUDE "./Views/ConsoleDrawing.asm"
# file opened: ./Views/ConsoleDrawing.asm
   1+ 6B68              ; bc = start position, d = length, e = colour
   2+ 6B68              ;                        DEFINE MISSILEDIAGNOSTICS 1
   3+ 6B68 1E 10        Draw3LineBar:           ld      e,16
   4+ 6B6A C5 D5                                push    bc,,de
   5+ 6B6C                                      MMUSelectLayer2
   5+ 6B6C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   6+ 6B70 CD 87 E4                             call    l2_draw_horz_line
   7+ 6B73 D1 C1                                pop     bc,,de
   8+ 6B75 05                                   dec     b
   9+ 6B76 C5 D5                                push    bc,,de
  10+ 6B78 1E 14                                ld      e,20
  11+ 6B7A                                      MMUSelectLayer2
  11+ 6B7A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  12+ 6B7E CD 87 E4                             call    l2_draw_horz_line
  13+ 6B81 D1 C1                                pop     bc,,de
  14+ 6B83 05                                   dec     b
  15+ 6B84                                      MMUSelectLayer2
  15+ 6B84 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16+ 6B88 CD 87 E4                             call    l2_draw_horz_line
  17+ 6B8B C9                                   ret
  18+ 6B8C
  19+ 6B8C 1E 7C        DrawColourCodedBar:     ld      e,124
  20+ 6B8E FE 28                                cp      40
  21+ 6B90 30 18                                jr      nc,DrawColourEBar
  22+ 6B92 1E 54                                ld      e,84
  23+ 6B94 FE 1E                                cp      30
  24+ 6B96 30 12                                jr      nc,DrawColourEBar
  25+ 6B98 1E D8                                ld      e,216
  26+ 6B9A FE 14                                cp      20
  27+ 6B9C 1E EC                                ld      e,236
  28+ 6B9E FE 0A                                cp      10
  29+ 6BA0 30 08                                jr      nc,DrawColourEBar
  30+ 6BA2 1E E1                                ld      e,225
  31+ 6BA4 FE 05                                cp      5
  32+ 6BA6 30 02                                jr      nc,DrawColourEBar
  33+ 6BA8 1E E0                                ld      e,224
  34+ 6BAA C5 D5        DrawColourEBar:         push    bc,,de
  35+ 6BAC                                      MMUSelectLayer2
  35+ 6BAC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  36+ 6BB0 CD 87 E4                             call    l2_draw_horz_line
  37+ 6BB3 D1 C1                                pop     bc,,de
  38+ 6BB5 05                                   dec     b
  39+ 6BB6 C5 D5                                push    bc,,de
  40+ 6BB8                                      MMUSelectLayer2
  40+ 6BB8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  41+ 6BBC CD 87 E4                             call    l2_draw_horz_line
  42+ 6BBF D1 C1                                pop     bc,,de
  43+ 6BC1 05                                   dec     b
  44+ 6BC2                                      MMUSelectLayer2
  44+ 6BC2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  45+ 6BC6 CD 87 E4                             call    l2_draw_horz_line
  46+ 6BC9 C9                                   ret
  47+ 6BCA
  48+ 6BCA                                      ; no ret needed as jp handles it
  49+ 6BCA
  50+ 6BCA 16 50        MissileDiagPositive:    ld      d,"P"
  51+ 6BCC CD 16 E3                             call    l2_print_chr_at
  52+ 6BCF C9                                   ret
  53+ 6BD0
  54+ 6BD0 16 4E        MissileDiagNegative:    ld      d,"N"
  55+ 6BD2 CD 16 E3                             call    l2_print_chr_at
  56+ 6BD5 C9                                   ret
  57+ 6BD6
  58+ 6BD6 16 5A        MissileDiagZero:        ld      d,"Z"
  59+ 6BD8 CD 16 E3                             call    l2_print_chr_at
  60+ 6BDB C9                                   ret
  61+ 6BDC
  62+ 6BDC 1E FF        MissileValue:           ld      e,$FF
  63+ 6BDE FE 00                                cp      0
  64+ 6BE0 F5                                   push    af
  65+ 6BE1 CC D6 6B                             call    z,MissileDiagZero
  66+ 6BE4 F1                                   pop     af
  67+ 6BE5 C8                                   ret     z
  68+ 6BE6 CB 7F                                bit     7,a
  69+ 6BE8 F5                                   push    af
  70+ 6BE9 CC D0 6B                             call    z,MissileDiagNegative
  71+ 6BEC F1                                   pop     af
  72+ 6BED C8                                   ret     z
  73+ 6BEE C4 CA 6B                             call    nz,MissileDiagPositive
  74+ 6BF1 C9                                   ret
  75+ 6BF2
  76+ 6BF2 30 31 32 33  Hex2Char:       DB "0123456789ABCDEF"
  76+ 6BF6 34 35 36 37
  76+ 6BFA 38 39 41 42
  76+ 6BFE 43 44 45 46
  77+ 6C02
  78+ 6C02 F5 E5 C5 D5  MissileHexDigit:        push    af,,hl,,bc,,de
  79+ 6C06 E6 0F                                and     $0F
  80+ 6C08 21 F2 6B                             ld      hl, Hex2Char
  81+ 6C0B ED 31                                add     hl,a
  82+ 6C0D 56                                   ld      d,(hl)
  83+ 6C0E CD 16 E3                             call    l2_print_chr_at
  84+ 6C11 D1 C1 E1 F1                          pop     af,,hl,,bc,,de
  85+ 6C15 C9                                   ret
  86+ 6C16
  87+ 6C16 ED 23        MissileHexToChar:       swapnib
  88+ 6C18 E6 0F                                and     $0F
  89+ 6C1A 1E FF                                ld      e,$FF
  90+ 6C1C                                      JumpIfALTNusng 8,.SkipNeg
  90+ 6C1C FE 08       >                        cp      8
  90+ 6C1E DA 25 6C    >                        jp		c, .SkipNeg
  91+ 6C21 1E 68                                ld      e,$68
  92+ 6C23 D6 08                                sub     8
  93+ 6C25 CD 02 6C     .SkipNeg:               call    MissileHexDigit
  94+ 6C28 ED 23                                swapnib
  95+ 6C2A F5                                   push    af
  96+ 6C2B 79                                   ld      a,c
  97+ 6C2C C6 08                                add     8
  98+ 6C2E 4F                                   ld      c,a
  99+ 6C2F F1                                   pop     af
 100+ 6C30 E6 0F                                and     $0F
 101+ 6C32 CD 02 6C                             call    MissileHexDigit
 102+ 6C35 C9                                   ret
 103+ 6C36
 104+ 6C36 1E FF        MissileValue2Byte:      ld      e,$FF
 105+ 6C38 7E                                   ld      a,(hl)
 106+ 6C39 23                                   inc     hl
 107+ 6C3A B6                                   or      (hl)
 108+ 6C3B FE 00                                cp      0
 109+ 6C3D F5                                   push    af
 110+ 6C3E CC D6 6B                             call    z,MissileDiagZero
 111+ 6C41 F1                                   pop     af
 112+ 6C42 C8                                   ret     z
 113+ 6C43 7E                                   ld      a,(hl)
 114+ 6C44 CB 7F                                bit     7,a
 115+ 6C46 F5                                   push    af
 116+ 6C47 CC D0 6B                             call    z,MissileDiagNegative
 117+ 6C4A F1                                   pop     af
 118+ 6C4B C8                                   ret     z
 119+ 6C4C C4 CA 6B                             call    nz,MissileDiagPositive
 120+ 6C4F C9                                   ret
 121+ 6C50
 122+ 6C50 16 78        MissileDiagPrintBoiler: ld      d,"x"
 123+ 6C52 1E 30                                ld      e, $30
 124+ 6C54 01 88 80                             ld      bc,$8088
 125+ 6C57 CD 16 E3                             call    l2_print_chr_at
 126+ 6C5A 01 88 88                             ld      bc,$8888
 127+ 6C5D 16 7A                                ld      d,"z"
 128+ 6C5F 1E 30                                ld      e, $30
 129+ 6C61 CD 16 E3                             call    l2_print_chr_at
 130+ 6C64 01 88 90                             ld      bc,$9088
 131+ 6C67 16 73                                ld      d,"s"
 132+ 6C69 1E 30                                ld      e, $30
 133+ 6C6B CD 16 E3                             call    l2_print_chr_at
 134+ 6C6E 01 48 90                             ld      bc,$9048
 135+ 6C71 16 6E                                ld      d,"n"
 136+ 6C73 1E 30                                ld      e, $30
 137+ 6C75 CD 16 E3                             call    l2_print_chr_at
 138+ 6C78 01 48 80                             ld      bc,$8048
 139+ 6C7B 16 73                                ld      d,"s"
 140+ 6C7D 1E 30                                ld      e, $30
 141+ 6C7F CD 16 E3                             call    l2_print_chr_at
 142+ 6C82 01 48 88                             ld      bc,$8848
 143+ 6C85 16 72                                ld      d,"r"
 144+ 6C87 1E 30                                ld      e, $30
 145+ 6C89 CD 16 E3                             call    l2_print_chr_at
 146+ 6C8C C9                                   ret
 147+ 6C8D
 148+ 6C8D              MissileDiagnotics:      MMUSelectLayer2
 148+ 6C8D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 149+ 6C91 CD 50 6C                             call    MissileDiagPrintBoiler
 150+ 6C94 1E FF                                ld      e,$FF
 151+ 6C96 01 90 80                             ld      bc,$8090
 152+ 6C99 3A 0C A4                             ld      a,(TacticsRotX)
 153+ 6C9C CD 16 6C                             call    MissileHexToChar; MissileValue
 154+ 6C9F 01 90 88                             ld      bc,$8890
 155+ 6CA2 3A 0E A4                             ld      a,(TacticsRotZ)
 156+ 6CA5 CD 16 6C                             call    MissileHexToChar; MissileValue
 157+ 6CA8 01 90 90                             ld      bc,$9090
 158+ 6CAB 3A 10 A4                             ld      a,(TacticsSpeed)
 159+ 6CAE CD 16 6C                             call    MissileHexToChar; MissileValue
 160+ 6CB1 01 50 80     .VectorSideX:           ld      bc,$8050
 161+ 6CB4 3A DC A3                             ld      a,(TacticsSideX+1)
 162+ 6CB7 CD 16 6C                             call    MissileHexToChar;issileValue2Byte
 163+ 6CBA 01 62 80                             ld      bc,$8062
 164+ 6CBD 3A E0 A3                             ld      a,(TacticsSideY+1)
 165+ 6CC0 CD 16 6C                             call    MissileHexToChar
 166+ 6CC3 01 74 80                             ld      bc,$8074
 167+ 6CC6 3A E4 A3                             ld      a,(TacticsSideZ+1)
 168+ 6CC9 CD 16 6C                             call    MissileHexToChar
 169+ 6CCC 01 50 88     .VectorRoofX:           ld      bc,$8850
 170+ 6CCF 3A EC A3                             ld      a,(TacticsRoofX+1)
 171+ 6CD2 CD 16 6C                             call    MissileHexToChar
 172+ 6CD5 01 62 88                             ld      bc,$8862
 173+ 6CD8 3A F0 A3                             ld      a,(TacticsRoofY+1)
 174+ 6CDB CD 16 6C                             call    MissileHexToChar
 175+ 6CDE 01 74 88                             ld      bc,$8874
 176+ 6CE1 3A F4 A3                             ld      a,(TacticsRoofZ+1)
 177+ 6CE4 CD 16 6C                             call    MissileHexToChar
 178+ 6CE7 01 50 90     .VectorNoseX:           ld      bc,$9050
 179+ 6CEA 3A FC A3                             ld      a,(TacticsNoseX+1)
 180+ 6CED CD 16 6C                             call    MissileHexToChar
 181+ 6CF0 01 62 90                             ld      bc,$9062
 182+ 6CF3 3A 00 A4                             ld      a,(TacticsNoseY+1)
 183+ 6CF6 CD 16 6C                             call    MissileHexToChar
 184+ 6CF9 01 74 90                             ld      bc,$9074
 185+ 6CFC 3A F4 A3                             ld      a,(TacticsRoofZ+1)
 186+ 6CFF CD 16 6C                             call    MissileHexToChar
 187+ 6D02 C9                                   ret
 188+ 6D03
 189+ 6D03              UpdateConsole:          IFDEF   MISSILEDIAGNOSTICS
 190+ 6D03 ~                                            call    MissileDiagnotics
 191+ 6D03                                      ENDIF
 192+ 6D03 3A 99 81                             ld      a,(DELTA)
 193+ 6D06 FE 00                                cp      0                           ; don't draw if there is nothing to draw
 194+ 6D08 28 0C                                jr      z,.UpdateRoll
 195+ 6D0A 01 D1 84                             ld      bc,SpeedoStart
 196+ 6D0D 21 1E 85                             ld      hl,SpeedoMapping
 197+ 6D10 ED 31                                add     hl,a
 198+ 6D12 56                                   ld      d,(hl)
 199+ 6D13 CD 68 6B                             call    Draw3LineBar
 200+ 6D16 3A B9 80     .UpdateRoll:            ld      a,(ALP1)
 201+ 6D19 FE 00                                cp      0
 202+ 6D1B CA 4F 6D                             jp      z,.UpdatePitch
 203+ 6D1E 21 E0 8C                             ld      hl,RollMiddle
 204+ 6D21 3A BA 80                             ld      a,(ALP2)
 205+ 6D24 FE 00                                cp      0
 206+ 6D26 CA 41 6D                             jp     z,.PosRoll
 207+ 6D29 16 00        .NegRoll:               ld      d,0
 208+ 6D2B 3A B9 80                             ld      a,(ALP1)
 209+ 6D2E CB 27                                sla     a
 210+ 6D30 5F                                   ld      e,a
 211+ 6D31 B7                                   or      a
 212+ 6D32 ED 52                                sbc     hl,de
 213+ 6D34 44 4D                                ld      bc,hl
 214+ 6D36 3E E1                                ld      a,DialMiddleXPos
 215+ 6D38 91                                   sub     c
 216+ 6D39 57                                   ld      d,a
 217+ 6D3A 1E FF                                ld      e,$FF
 218+ 6D3C CD 68 6B                             call    Draw3LineBar
 219+ 6D3F 18 0E                                jr      .UpdatePitch
 220+ 6D41 01 E0 8C     .PosRoll:               ld      bc,RollMiddle
 221+ 6D44 3A B9 80                             ld      a,(ALP1)
 222+ 6D47 CB 27                                sla     a
 223+ 6D49 57                                   ld      d,a
 224+ 6D4A 1E FF                                ld      e,$FF
 225+ 6D4C CD 68 6B                             call    Draw3LineBar
 226+ 6D4F 3A AD 80     .UpdatePitch:           ld      a,(BET1)
 227+ 6D52 FE 00                                cp      0
 228+ 6D54 CA 89 6D                             jp      z,.Fuel
 229+ 6D57 21 E0 94                             ld      hl,PitchMiddle
 230+ 6D5A 3A AE 80                             ld      a,(BET2)
 231+ 6D5D FE 00                                cp      0
 232+ 6D5F CA 7B 6D                             jp      z,.PosPitch
 233+ 6D62 16 00        .NegPitch:              ld      d,0
 234+ 6D64 3A AD 80                             ld      a,(BET1)
 235+ 6D67 CB 27                                sla     a
 236+ 6D69 5F                                   ld      e,a
 237+ 6D6A B7                                   or      a
 238+ 6D6B ED 52                                sbc     hl,de
 239+ 6D6D 44 4D                                ld      bc,hl
 240+ 6D6F 3E E1                                ld      a,DialMiddleXPos
 241+ 6D71 91                                   sub     c
 242+ 6D72 57                                   ld      d,a
 243+ 6D73 1E FF                                ld      e,$FF
 244+ 6D75 CD 68 6B                             call    Draw3LineBar
 245+ 6D78 C3 89 6D                             jp      .Fuel
 246+ 6D7B 01 E0 94     .PosPitch:              ld      bc,PitchMiddle
 247+ 6D7E 3A AD 80                             ld      a,(BET1)
 248+ 6D81 CB 27                                sla     a
 249+ 6D83 57                                   ld      d,a
 250+ 6D84 1E FF                                ld      e,$FF
 251+ 6D86 CD 68 6B                             call    Draw3LineBar
 252+ 6D89 3A A7 87     .Fuel:                  ld      a,(Fuel)
 253+ 6D8C CB 3F                                srl     a               ; divide by 4 to get range on screen
 254+ 6D8E 21 F9 84                             ld      hl,FuelMapping
 255+ 6D91 ED 31                                add     hl,a
 256+ 6D93 7E                                   ld      a,(hl)
 257+ 6D94 01 10 94                             ld      bc,FuelStart
 258+ 6D97 57                                   ld      d,a
 259+ 6D98 CD 8C 6B                             call    DrawColourCodedBar
 260+ 6D9B 3A CD 84     .FrontShield:           ld      a,(ForeShield)
 261+ 6D9E CB 3F                                srl     a
 262+ 6DA0 CB 3F                                srl     a
 263+ 6DA2 CB 3F                                srl     a
 264+ 6DA4 01 10 84                             ld      bc,FShieldStart
 265+ 6DA7 57                                   ld      d,a
 266+ 6DA8 CD 8C 6B                             call    DrawColourCodedBar
 267+ 6DAB 3A CE 84     .AftShield:             ld      a,(AftShield)
 268+ 6DAE CB 3F                                srl     a
 269+ 6DB0 CB 3F                                srl     a
 270+ 6DB2 CB 3F                                srl     a
 271+ 6DB4 01 10 8D                             ld      bc,AShieldStart
 272+ 6DB7 57                                   ld      d,a
 273+ 6DB8 CD 8C 6B                             call    DrawColourCodedBar
 274+ 6DBB              .SpriteDraw:            MMUSelectSpriteBank
 274+ 6DBB ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 275+ 6DBF 3A B4 80     .DrawECM:               ld      a,(ECMCountDown)
 276+ 6DC2                                      JumpIfAIsZero   .HideECM
 276+ 6DC2 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 276+ 6DC3 CA CC 6D    >                        jp	    z, .HideECM
 277+ 6DC6 CD CF E1     .ShowECM:               call    show_ecm_sprite
 278+ 6DC9 C3 CF 6D                             jp      .ProcessedECM
 279+ 6DCC CD 18 E4     .HideECM:               call    sprite_ecm_hide
 280+ 6DCF              .ProcessedECM:
 281+ 6DCF 3A 42 82     .DrawMissiles:          ld      a,(NbrMissiles)
 282+ 6DD2 FD 6F                                ld      iyl,a
 283+ 6DD4                                      JumpIfAIsZero   .HideAllMissiles                    ; First off do we have any missiles
 283+ 6DD4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 283+ 6DD5 CA 13 6E    >                        jp	    z, .HideAllMissiles
 284+ 6DD8 3A D2 84     .DrawMissile_1:         ld      a,(MissileTargettingFlag)                   ; have we the targetting flag
 285+ 6DDB                                      JumpIfAEqNusng  StageMissileNotTargeting,.MissileReady
 285+ 6DDB FE FF       >                        cp     StageMissileNotTargeting
 285+ 6DDD CA EB 6D    >                        jp      z,.MissileReady
 286+ 6DE0                                      JumpIfAEqNusng  StageMissileTargeting,   .MissileArmed
 286+ 6DE0 FE FE       >                        cp     StageMissileTargeting
 286+ 6DE2 CA F1 6D    >                        jp      z,.MissileArmed
 287+ 6DE5 CD 11 E2     .Missile1Locked:        call    show_missile_1_locked
 288+ 6DE8 C3 F4 6D                             jp      .DrawMissile_2
 289+ 6DEB CD DA E1     .MissileReady:          call    show_missile_1_ready
 290+ 6DEE C3 F4 6D                             jp      .DrawMissile_2
 291+ 6DF1 CD 06 E2     .MissileArmed:          call    show_missile_1_armed
 292+ 6DF4 FD 7D        .DrawMissile_2:         ld      a,iyl
 293+ 6DF6                                      JumpIfALTNusng 2, .Only1Missile
 293+ 6DF6 FE 02       >                        cp      2
 293+ 6DF8 DA 16 6E    >                        jp		c, .Only1Missile
 294+ 6DFB CD E5 E1                             call    show_missile_2_ready
 295+ 6DFE FD 7D        .DrawMissile_3:         ld      a,iyl
 296+ 6E00                                      JumpIfALTNusng 3, .Only2Missiles
 296+ 6E00 FE 03       >                        cp      3
 296+ 6E02 DA 19 6E    >                        jp		c, .Only2Missiles
 297+ 6E05 CD F0 E1                             call    show_missile_3_ready
 298+ 6E08 FD 7D        .DrawMissile_4:         ld      a,iyl
 299+ 6E0A                                      JumpIfALTNusng 4, .Only2Missiles
 299+ 6E0A FE 04       >                        cp      4
 299+ 6E0C DA 19 6E    >                        jp		c, .Only2Missiles
 300+ 6E0F CD FB E1                             call    show_missile_4_ready
 301+ 6E12 C9                                   ret
 302+ 6E13 CD 21 E4     .HideAllMissiles:       call    sprite_missile_1_hide
 303+ 6E16 CD 2A E4     .Only1Missile:          call    sprite_missile_2_hide
 304+ 6E19 CD 33 E4     .Only2Missiles:         call    sprite_missile_3_hide
 305+ 6E1C CD 3C E4     .Only3Missiles:         call    sprite_missile_4_hide
 306+ 6E1F              ;PlayerEnergy
 307+ 6E1F              ; BNEED LASER temp
 308+ 6E1F              ; NEED CABIN TEMP
 309+ 6E1F              ;NEED ALTITUDE
 310+ 6E1F              ; Draw compas - if in range draw station, else do planet
 311+ 6E1F 3A CF 84     .EnergyBars:            ld      a,(PlayerEnergy)
 312+ 6E22 CB 3F                                srl     a                   ; energy = energy / 2 so 31 per bar
 313+ 6E24                                      JumpIfALTNusng  31 + 1,     Draw1EnergyBar
 313+ 6E24 FE 20       >                        cp      31 + 1
 313+ 6E26 DA 36 6E    >                        jp		c, Draw1EnergyBar
 314+ 6E29                                      JumpIfALTNusng  (31*2) + 1, Draw2EnergyBars
 314+ 6E29 FE 3F       >                        cp      (31*2) + 1
 314+ 6E2B DA 40 6E    >                        jp		c, Draw2EnergyBars
 315+ 6E2E                                      JumpIfALTNusng  (31*3) + 1, Draw3EnergyBars
 315+ 6E2E FE 5E       >                        cp      (31*3) + 1
 315+ 6E30 DA 56 6E    >                        jp		c, Draw3EnergyBars
 316+ 6E33 C3 78 6E                             jp      Draw4EnergyBars
 317+ 6E36
 318+ 6E36 1E E0        Draw1EnergyBar:         ld      e,224
 319+ 6E38 57                                   ld      d,a
 320+ 6E39 01 D5 BD                             ld      bc,EnergyBar1Start
 321+ 6E3C CD AA 6B                             call    DrawColourEBar
 322+ 6E3F C9                                   ret
 323+ 6E40 1E D8        Draw2EnergyBars:        ld      e,216
 324+ 6E42 D6 1F                                sub     31
 325+ 6E44 57                                   ld      d,a
 326+ 6E45 01 D5 B5                             ld      bc,EnergyBar2Start
 327+ 6E48 CD AA 6B                             call    DrawColourEBar
 328+ 6E4B 16 1F                                ld      d,31
 329+ 6E4D 1E D8                                ld      e,216
 330+ 6E4F 01 D5 BD                             ld      bc,EnergyBar1Start
 331+ 6E52 CD AA 6B                             call    DrawColourEBar
 332+ 6E55 C9                                   ret
 333+ 6E56 1E 14        Draw3EnergyBars:        ld      e,20
 334+ 6E58 D6 3E                                sub     31*2
 335+ 6E5A 57                                   ld      d,a
 336+ 6E5B 1E 14                                ld      e,20
 337+ 6E5D 01 D5 AD                             ld      bc,EnergyBar3Start
 338+ 6E60 CD AA 6B                             call    DrawColourEBar
 339+ 6E63 16 1F                                ld      d,31
 340+ 6E65 1E 14                                ld      e,20
 341+ 6E67 01 D5 B5                             ld      bc,EnergyBar2Start
 342+ 6E6A CD AA 6B                             call    DrawColourEBar
 343+ 6E6D 16 1F                                ld      d,31
 344+ 6E6F 1E 14                                ld      e,20
 345+ 6E71 01 D5 BD                             ld      bc,EnergyBar1Start
 346+ 6E74 CD AA 6B                             call    DrawColourEBar
 347+ 6E77 C9                                   ret
 348+ 6E78 1E 18        Draw4EnergyBars:        ld      e,24
 349+ 6E7A D6 5D                                sub     31*3
 350+ 6E7C                                      JumpIfALTNusng 31,.NoMax
 350+ 6E7C FE 1F       >                        cp      31
 350+ 6E7E DA 83 6E    >                        jp		c, .NoMax
 351+ 6E81 3E 1F        .Max                    ld      a,31
 352+ 6E83 57           .NoMax:                 ld      d,a
 353+ 6E84 01 D5 A5                             ld      bc,EnergyBar4Start
 354+ 6E87 CD AA 6B                             call    DrawColourEBar
 355+ 6E8A 16 1F                                ld      d,31
 356+ 6E8C 1E 18                                ld      e,24
 357+ 6E8E 01 D5 AD                             ld      bc,EnergyBar3Start
 358+ 6E91 CD AA 6B                             call    DrawColourEBar
 359+ 6E94 16 1F                                ld      d,31
 360+ 6E96 1E 18                                ld      e,24
 361+ 6E98 01 D5 B5                             ld      bc,EnergyBar2Start
 362+ 6E9B CD AA 6B                             call    DrawColourEBar
 363+ 6E9E 16 1F                                ld      d,31
 364+ 6EA0 1E 18                                ld      e,24
 365+ 6EA2 01 D5 BD                             ld      bc,EnergyBar1Start
 366+ 6EA5 CD AA 6B                             call    DrawColourEBar
 367+ 6EA8 C9                                   ret
 368+ 6EA9
 369+ 6EA9              ScannerBottom           equ 190
 370+ 6EA9              ScannerTypeMissle       equ 2
 371+ 6EA9              ScannerXRangeOffset     equ $35
 372+ 6EA9              ScannerCenter           equ 127
 373+ 6EA9
 374+ 6EA9              ScannerDefault          equ 0
 375+ 6EA9              ScannerMissile          equ 2
 376+ 6EA9              ScannerStation          equ 4
 377+ 6EA9              ScannerEnemy            equ 6
 378+ 6EA9
 379+ 6EA9
 380+ 6EA9 00           SunXScaled              DB  0
 381+ 6EAA 00           SunYScaled              DB  0
 382+ 6EAB 00           SunZScaled              DB  0
 383+ 6EAC
 384+ 6EAC                                      ;   ShipTypeNormal
 385+ 6EAC 18 1C 90 FC  ScannerColourTable:       DB  L2ColourGREEN_2,    L2ColourGREEN_1, L2ColourYELLOW_4,  L2ColourYELLOW_1,   L2ColourCYAN_2, L2ColourCYAN_1, L2ColourRED_4,  L2ColourPINK_4
 385+ 6EB0 12 1F 80 E0
 386+ 6EB4 C0 E0 C0 E0  ScannerColourTableHostile:DB  L2ColourRED_2,      L2ColourRED_1,   L2ColourRED_2,     L2ColourRED_1,      L2ColourRED_2,  L2ColourRED_1,  L2ColourRED_2,  L2ColourRED_1; just a place holder for now
 386+ 6EB8 C0 E0 C0 E0
 387+ 6EBC
 388+ 6EBC              GetShipColor:           MACRO
 389+ 6EBC ~                                    ld      hl,ScannerColourTable
 390+ 6EBC ~                                    ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
 391+ 6EBC ~                                    cp      1                        ; for now to bypass hostile missile
 392+ 6EBC ~                                    jr      z,.UsingColourTable    ; for now to bypass hostile missile
 393+ 6EBC ~                                    ld      a,(ShipNewBitsAddr)
 394+ 6EBC ~                                    and     ShipIsHostile
 395+ 6EBC ~                                    jr      z,.UsingColourTable
 396+ 6EBC ~            .UsingHostileColour:    ld      hl,ScannerColourTableHostile
 397+ 6EBC ~            .UsingColourTable:      ld      a,(ShipTypeAddr)
 398+ 6EBC ~                                    sla     a                            ; as its byte pairs * 2
 399+ 6EBC ~                                    add     hl,a
 400+ 6EBC ~                                    ld      a,(hl)
 401+ 6EBC                                      ENDM
 402+ 6EBC              GetShipColorBright:     MACRO
 403+ 6EBC ~                                    ld      hl,ScannerColourTable
 404+ 6EBC ~                                    ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
 405+ 6EBC ~                                    cp      1                        ; for now to bypass hostile missile
 406+ 6EBC ~                                    jr      z,.UsingColourTable    ; for now to bypass hostile missile
 407+ 6EBC ~                                    ld      a,(ShipNewBitsAddr)
 408+ 6EBC ~                                    and     ShipIsHostile
 409+ 6EBC ~                                    jr      z,.UsingColourTable
 410+ 6EBC ~            .UsingHostileColour:    ld      hl,ScannerColourTableHostile
 411+ 6EBC ~            .UsingColourTable:      ld      a,(ShipTypeAddr)
 412+ 6EBC ~                                    sla     a                            ; as its byte pairs * 2
 413+ 6EBC ~                                    inc     a
 414+ 6EBC ~                                    add     hl,a
 415+ 6EBC ~                                    ld      a,(hl)
 416+ 6EBC                                      ENDM
 417+ 6EBC
 418+ 6EBC              Shift24BitScan:         MACRO   regHi, reglo
 419+ 6EBC ~                                    ld      hl,(regHi)
 420+ 6EBC ~                                    ld      b,h
 421+ 6EBC ~                                    ld      a,h
 422+ 6EBC ~                                    and     SignMask8Bit
 423+ 6EBC ~                                    ld      h,a
 424+ 6EBC ~                                    ld      a,(reglo)
 425+ 6EBC ~                                    sla     a
 426+ 6EBC ~                                    rl      l
 427+ 6EBC ~                                    rl      h
 428+ 6EBC ~                                    sla     a
 429+ 6EBC ~                                    rl      l
 430+ 6EBC ~                                    rl      h
 431+ 6EBC ~                                    sla     a
 432+ 6EBC ~                                    rl      l
 433+ 6EBC ~                                    rl      h
 434+ 6EBC ~                                    sla     a
 435+ 6EBC ~                                    rl      l
 436+ 6EBC ~                                    rl      h
 437+ 6EBC ~                                    sla     a
 438+ 6EBC ~                                    rl      l
 439+ 6EBC ~                                    rl      h
 440+ 6EBC ~                                    sla     a
 441+ 6EBC ~                                    rl      l
 442+ 6EBC ~                                    rl      h
 443+ 6EBC                                      ENDM
 444+ 6EBC
 445+ 6EBC              SunShiftRight           MACRO   reglo, reghi, regsgn
 446+ 6EBC ~                                    ld      a,regsgn
 447+ 6EBC ~                                    srl     a
 448+ 6EBC ~                                    rr      reghi
 449+ 6EBC ~                                    rr      reglo
 450+ 6EBC ~                                    ld      regsgn,a
 451+ 6EBC                                      ENDM
 452+ 6EBC
 453+ 6EBC              ;SunShiftPosTo15Bit:     ld      de,(SBnKzlo)
 454+ 6EBC              ;                        ld      a,(SBnKzsgn)
 455+ 6EBC              ;                        push    af
 456+ 6EBC              ;                        and     SignMask8Bit
 457+ 6EBC              ;                        ld      iyl,a
 458+ 6EBC              ;                        ld      hl,(SBnKxlo)
 459+ 6EBC              ;                        ld      a,(SBnKxsgn)
 460+ 6EBC              ;                        push    af
 461+ 6EBC              ;                        and     SignMask8Bit
 462+ 6EBC              ;                        ld      ixl,a
 463+ 6EBC              ;                        ld      bc,(SBnKylo)
 464+ 6EBC              ;                        ld      a,(SBnKysgn)
 465+ 6EBC              ;                        and     SignMask8Bit
 466+ 6EBC              ;                        push    af
 467+ 6EBC              ;                        ld      iyh,a
 468+ 6EBC              ;.ShiftLoop:             ld      a,iyh
 469+ 6EBC              ;                        or      iyl
 470+ 6EBC              ;                        or      ixl
 471+ 6EBC              ;                        jr      z,.ShiftBit15
 472+ 6EBC              ;.ShiftZ:                SunShiftRight iyl, d, e
 473+ 6EBC              ;.ShiftX:                SunShiftRight ixl, h, l
 474+ 6EBC              ;.ShiftY:                SunShiftRight ixh, b, c
 475+ 6EBC              ;                        jr      .ShipLoop
 476+ 6EBC              ;.ShiftBit15:            ld      a,iyh
 477+ 6EBC              ;                        or      iyl
 478+ 6EBC              ;                        or      ixl
 479+ 6EBC              ;                        jr      z,.CompletedShift
 480+ 6EBC              ;.ShiftZ:                SunShiftRight iyl, d, e
 481+ 6EBC              ;.ShiftX:                SunShiftRight ixl, h, l
 482+ 6EBC              ;.ShiftY:                SunShiftRight ixh, b, c             ; finally shift to 15 bits so we can get the sign back
 483+ 6EBC              ;.CompletedShift:        pop     af                          ; get ysgn
 484+ 6EBC              ;                        and     SignOnly8Bit
 485+ 6EBC              ;                        or      b
 486+ 6EBC              ;                        ld      b,a
 487+ 6EBC              ;                        pop     af                          ; get xsgn
 488+ 6EBC              ;                        and     SignOnly8Bit
 489+ 6EBC              ;                        or      h
 490+ 6EBC              ;                        ld      h,a
 491+ 6EBC              ;                        pop     af                          ; get zsgn
 492+ 6EBC              ;                        and     SignOnly8Bit
 493+ 6EBC              ;                        or      d
 494+ 6EBC              ;                        ld      d,a
 495+ 6EBC              ;                        ret
 496+ 6EBC              ;
 497+ 6EBC ED 5B 17 C0  ScalePlanetPos:         ld      de,(PBnKzhi)                ; de = abs z & save sign on stack
 498+ 6EC0 7A                                   ld      a,d                         ; .
 499+ 6EC1 F5                                   push    af                          ; .
 500+ 6EC2 E6 7F                                and     SignMask8Bit                ; .
 501+ 6EC4 57                                   ld      d,a                         ; .
 502+ 6EC5 2A 11 C0                             ld      hl,(PBnKxhi)                ; hl = abs x & save sign on stack
 503+ 6EC8 7C                                   ld      a,h                         ; .
 504+ 6EC9 F5                                   push    af                          ; .
 505+ 6ECA E6 7F                                and     SignMask8Bit                ; .
 506+ 6ECC 67                                   ld      h,a                         ; .
 507+ 6ECD ED 4B 14 C0                          ld      bc,(PBnKyhi)                ; bc = abs y & save sign on stack
 508+ 6ED1 78                                   ld      a,b                         ; .
 509+ 6ED2 F5                                   push    af                          ; .
 510+ 6ED3 E6 7F                                and     SignMask8Bit                ; .
 511+ 6ED5 47                                   ld      b,a                         ; .
 512+ 6ED6 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 513+ 6ED7 B2                                   or      d                           ; .
 514+ 6ED8 B4                                   or      h                           ; .
 515+ 6ED9 28 0E                                jr      z,.Shifted                  ; .
 516+ 6EDB                                      ShiftBCRight1                       ; .
 516+ 6EDB CB 38       >			   srl b
 516+ 6EDD CB 19       >			   rr  c
 517+ 6EDF                                      ShiftHLRight1                       ; .
 517+ 6EDF CB 3C       >			   srl h
 517+ 6EE1 CB 1D       >			   rr  l
 518+ 6EE3                                      ShiftDERight1                       ; .
 518+ 6EE3 CB 3A       >			   srl d
 518+ 6EE5 CB 1B       >			   rr  e
 519+ 6EE7 18 ED                                jr      .ShiftLoop
 520+ 6EE9 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 521+ 6EEA B5                                   or      l                           ;
 522+ 6EEB B3                                   or      e                           ;
 523+ 6EEC E6 80                                and     $80                         ;
 524+ 6EEE 28 0C                                jr      z,.NoAdditionalShift        ;
 525+ 6EF0                                      ShiftBCRight1                       ; we want 7 bit
 525+ 6EF0 CB 38       >			   srl b
 525+ 6EF2 CB 19       >			   rr  c
 526+ 6EF4                                      ShiftHLRight1                       ; to acommodate the sign
 526+ 6EF4 CB 3C       >			   srl h
 526+ 6EF6 CB 1D       >			   rr  l
 527+ 6EF8                                      ShiftDERight1                       ; .
 527+ 6EF8 CB 3A       >			   srl d
 527+ 6EFA CB 1B       >			   rr  e
 528+ 6EFC F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 529+ 6EFD E6 80                                and     SignOnly8Bit                ;
 530+ 6EFF 47                                   ld      b,a                         ; bc = shifted signed Y
 531+ 6F00 F1                                   pop     af                          ; get xsgn
 532+ 6F01 E6 80                                and     SignOnly8Bit                ;
 533+ 6F03 67                                   ld      h,a                         ; hl = shifted signed X
 534+ 6F04 F1                                   pop     af                          ; get zsgn
 535+ 6F05 E6 80                                and     SignOnly8Bit                ;
 536+ 6F07 57                                   ld      d,a                         ; de = shifted signed Z
 537+ 6F08 C9                                   ret
 538+ 6F09
 539+ 6F09 ED 5B 17 C0  ScaleSunPos:            ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 540+ 6F0D 7A                                   ld      a,d                         ; .
 541+ 6F0E F5                                   push    af                          ; .
 542+ 6F0F E6 7F                                and     SignMask8Bit                ; .
 543+ 6F11 57                                   ld      d,a                         ; .
 544+ 6F12 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 545+ 6F15 7C                                   ld      a,h                         ; .
 546+ 6F16 F5                                   push    af                          ; .
 547+ 6F17 E6 7F                                and     SignMask8Bit                ; .
 548+ 6F19 67                                   ld      h,a                         ; .
 549+ 6F1A ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 550+ 6F1E 78                                   ld      a,b                         ; .
 551+ 6F1F F5                                   push    af                          ; .
 552+ 6F20 E6 7F                                and     SignMask8Bit                ; .
 553+ 6F22 47                                   ld      b,a                         ; .
 554+ 6F23 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 555+ 6F24 B2                                   or      d                           ; .
 556+ 6F25 B4                                   or      h                           ; .
 557+ 6F26 28 0E                                jr      z,.Shifted                  ; .
 558+ 6F28                                      ShiftBCRight1                       ; .
 558+ 6F28 CB 38       >			   srl b
 558+ 6F2A CB 19       >			   rr  c
 559+ 6F2C                                      ShiftHLRight1                       ; .
 559+ 6F2C CB 3C       >			   srl h
 559+ 6F2E CB 1D       >			   rr  l
 560+ 6F30                                      ShiftDERight1                       ; .
 560+ 6F30 CB 3A       >			   srl d
 560+ 6F32 CB 1B       >			   rr  e
 561+ 6F34 18 ED                                jr      .ShiftLoop
 562+ 6F36 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 563+ 6F37 B5                                   or      l                           ;
 564+ 6F38 B3                                   or      e                           ;
 565+ 6F39 E6 80                                and     $80                         ;
 566+ 6F3B 28 0C                                jr      z,.NoAdditionalShift        ;
 567+ 6F3D                                      ShiftBCRight1                       ; we want 7 bit
 567+ 6F3D CB 38       >			   srl b
 567+ 6F3F CB 19       >			   rr  c
 568+ 6F41                                      ShiftHLRight1                       ; to acommodate the sign
 568+ 6F41 CB 3C       >			   srl h
 568+ 6F43 CB 1D       >			   rr  l
 569+ 6F45                                      ShiftDERight1                       ; .
 569+ 6F45 CB 3A       >			   srl d
 569+ 6F47 CB 1B       >			   rr  e
 570+ 6F49 F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 571+ 6F4A E6 80                                and     SignOnly8Bit                ;
 572+ 6F4C 47                                   ld      b,a                         ; bc = shifted signed Y
 573+ 6F4D F1                                   pop     af                          ; get xsgn
 574+ 6F4E E6 80                                and     SignOnly8Bit                ;
 575+ 6F50 67                                   ld      h,a                         ; hl = shifted signed X
 576+ 6F51 F1                                   pop     af                          ; get zsgn
 577+ 6F52 E6 80                                and     SignOnly8Bit                ;
 578+ 6F54 57                                   ld      d,a                         ; de = shifted signed Z
 579+ 6F55 C9                                   ret
 580+ 6F56
 581+ 6F56              ;compass sun
 582+ 6F56              ;            if value is still 24 bit
 583+ 6F56              ;                copy xhi/xsgn y and z to xxx15 ([2 1 0 ] [ 5 4 3] [ 8 7 6 ]
 584+ 6F56              ;                normalise vector (note this assumes sun is just sign byte+ 2 bytes)
 585+ 6F56              ;                tempk39 = OR 3 low bytes
 586+ 6F56              ;                tempkA = OR 3 high bytes
 587+ 6F56              ;                 TAL2:    repeat
 588+ 6F56              ;                             asl tempka tempk39
 589+ 6F56              ;                             exit if carry set
 590+ 6F56              ;                             x coord << 1
 591+ 6F56              ;                             y corrd << 1
 592+ 6F56              ;                             z coord << 1
 593+ 6F56              ;                          until carry clear
 594+ 6F56              ;                 TA2:     shift x y and z right one and put sign bit in from sign bytes
 595+ 6F56              ;                          now XX15 holds sign + 7 bit bytes maximused for coords
 596+ 6F56              ;                          RQ = AP = X ^ 2
 597+ 6F56              ;                          TP = AP = Y ^ 2
 598+ 6F56              ;                          RQ = RQ + TP
 599+ 6F56              ;                          TP = AP = Z ^ 2
 600+ 6F56              ;                          RQ = RQ + TP
 601+ 6F56              ;                          Q = SQRT (RQ)
 602+ 6F56              ;                          for each coord - A = A/Q * 3/ 8
 603+ 6F56              ;
 604+ 6F56              ;
 605+ 6F56
 606+ 6F56 ED 5B 17 C0  UpscaleSunPosition:     ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 607+ 6F5A 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 608+ 6F5D ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 609+ 6F61 7A                                   ld      a,d
 610+ 6F62 E6 80                                and     SignOnly8Bit
 611+ 6F64 CB 3F                                srl     a
 612+ 6F66 FD 6F                                ld      iyl,a
 613+ 6F68 7C                                   ld      a,h
 614+ 6F69 E6 80                                and     SignOnly8Bit
 615+ 6F6B FD B5                                or      iyl
 616+ 6F6D CB 3F                                srl     a
 617+ 6F6F 78                                   ld      a,b
 618+ 6F70 E6 80                                and     SignOnly8Bit
 619+ 6F72 FD B5                                or      iyl
 620+ 6F74 FD 6F                                ld      iyl,a                       ; IYL now equals YXH00000 where letters = sign bits
 621+ 6F76                                      ClearSignBit d
 621+ 6F76 7A          >                        ld      a,d
 621+ 6F77 E6 7F       >                        and     SignMask8Bit
 621+ 6F79 57          >                        ld      d,a
 622+ 6F7A                                      ClearSignBit h
 622+ 6F7A 7C          >                        ld      a,h
 622+ 6F7B E6 7F       >                        and     SignMask8Bit
 622+ 6F7D 67          >                        ld      h,a
 623+ 6F7E                                      ClearSignBit b
 623+ 6F7E 78          >                        ld      a,b
 623+ 6F7F E6 7F       >                        and     SignMask8Bit
 623+ 6F81 47          >                        ld      b,a
 624+ 6F82 78                                   ld      a,b
 625+ 6F83 B3                                   or      e
 626+ 6F84 B4                                   or      h
 627+ 6F85 B5                                   or      l
 628+ 6F86 B0                                   or      b
 629+ 6F87 B1                                   or      c
 630+ 6F88 28 41                                jr      z, .Setto1                 ; to prevent and infinite loop in upscale if all zero
 631+ 6F8A 7A                                   ld      a,d
 632+ 6F8B B3                                   or      e
 633+ 6F8C B4                                   or      h
 634+ 6F8D CB 27                                sla     a
 635+ 6F8F 38 15                                jr      c,.DoneCalc
 636+ 6F91 28 13                                jr      z,.DoneCalc
 637+ 6F93              .UpscaleLoop:           ShiftDELeft1
 637+ 6F93 CB 23       >			   sla e
 637+ 6F95 CB 12       >			   rl  d
 638+ 6F97                                      ShiftHLLeft1
 638+ 6F97 CB 25       >			   sla l
 638+ 6F99 CB 14       >			   rl  h
 639+ 6F9B                                      ShiftBCLeft1
 639+ 6F9B CB 21       >			   sla c
 639+ 6F9D CB 10       >			   rl  b
 640+ 6F9F CB 27                                sla     a
 641+ 6FA1 38 03                                jr      c,.DoneCalc
 642+ 6FA3 C3 93 6F                             jp      .UpscaleLoop
 643+ 6FA6              .DoneCalc               ShiftDERight1
 643+ 6FA6 CB 3A       >			   srl d
 643+ 6FA8 CB 1B       >			   rr  e
 644+ 6FAA                                      ShiftHLRight1
 644+ 6FAA CB 3C       >			   srl h
 644+ 6FAC CB 1D       >			   rr  l
 645+ 6FAE                                      ShiftBCRight1
 645+ 6FAE CB 38       >			   srl b
 645+ 6FB0 CB 19       >			   rr  c
 646+ 6FB2 5A           .NowSetResultInLowByte: ld      e,d
 647+ 6FB3 6C                                   ld      l,h
 648+ 6FB4 48                                   ld      c,b
 649+ 6FB5 FD 7D                                ld      a,iyl
 650+ 6FB7 E6 80                                and     SignOnly8Bit
 651+ 6FB9 47                                   ld      b,a
 652+ 6FBA FD 7D                                ld      a,iyl
 653+ 6FBC CB 27                                sla     a
 654+ 6FBE FD 6F                                ld      iyl,a
 655+ 6FC0 E6 80                                and     SignOnly8Bit
 656+ 6FC2 67                                   ld      h,a
 657+ 6FC3 FD 7D                                ld      a,iyl
 658+ 6FC5 CB 27                                sla     a
 659+ 6FC7 E6 80                                and     SignOnly8Bit
 660+ 6FC9 57                                   ld      d,a
 661+ 6FCA C9                                   ret
 662+ 6FCB 3E 01        .Setto1:                ld      a,1
 663+ 6FCD 4F                                   ld      c,a
 664+ 6FCE 5F                                   ld      e,a
 665+ 6FCF 6F                                   ld      l,a
 666+ 6FD0 FD 7D                                ld      a,iyl
 667+ 6FD2 CB 27                                sla     a
 668+ 6FD4 CB 27                                sla     a
 669+ 6FD6 E6 80                                and     SignOnly8Bit
 670+ 6FD8 B3                                   or      e
 671+ 6FD9 5F                                   ld      e,a
 672+ 6FDA C9                                   ret
 673+ 6FDB
 674+ 6FDB
 675+ 6FDB              UpdateCompassSun:       MMUSelectSun
 675+ 6FDB ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 676+ 6FDF CD 09 6F                             call    ScaleSunPos                 ; get as 7 bit signed
 677+ 6FE2 C5 E5 D5                             push    bc,,hl,,de                  ; +3 save to stack Y, X and Z scaled and signed hihg = sign, low = 7 bit value
 678+ 6FE5 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 679+ 6FE6 59                                   ld      e,c                         ; .
 680+ 6FE7 ED 30                                mul                                 ; .
 681+ 6FE9 42 4B                                ld      bc,de                       ; .
 682+ 6FEB 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 683+ 6FEC 5D                                   ld      e,l                         ; .
 684+ 6FED ED 30                                mul                                 ; .
 685+ 6FEF EB                                   ex      de,hl                       ; .
 686+ 6FF0 D1           .normaliseZSqr:         pop     de                          ; +2 get Z saved from stack so now stack contains Y Z X
 687+ 6FF1 53                                   ld      d,e                         ; de = z ^
 688+ 6FF2 ED 30                                mul                                 ; .
 689+ 6FF4 19           .normaliseSqrt:         add     hl,de                       ; de = x^2 + y^2 + z^2
 690+ 6FF5 09                                   add     hl,bc                       ; .
 691+ 6FF6 EB                                   ex      de,hl                       ; .
 692+ 6FF7 CD 28 96                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 693+ 6FFA                                      ; if h <> 0 then more difficult
 694+ 6FFA 55                                   ld      d,l                         ; iyl = q
 695+ 6FFB FD 6A                                ld      iyl,d                       ; .
 696+ 6FFD E1           .NormaliseX:            pop     hl                          ; +1 get back hl x scaled
 697+ 6FFE 7C                                   ld      a,h                         ; c = sign
 698+ 6FFF E6 80                                and     SignOnly8Bit                ; .
 699+ 7001 4F                                   ld      c,a                         ; .
 700+ 7002 C5                                   push    bc                          ; +2 save bc temporarily as it will get altered
 701+ 7003 7D                                   ld      a,l                         ; a = 8 bit abs z
 702+ 7004 CD 12 9B                             call    AequAdivQmul96ABS           ; e = a /q * 96 (d was already loaded with q)
 703+ 7007 5F                                   ld      e,a                         ; .
 704+ 7008                                      EDiv10Inline                        ; a = e / 10
 704+ 7008 16 00       >                        ld      d,0
 704+ 700A 62 6B       >                        ld      hl,de
 704+ 700C 29          >                        add     hl,hl
 704+ 700D 19          >                        add     hl,de
 704+ 700E 29          >                        add     hl,hl
 704+ 700F 29          >                        add     hl,hl
 704+ 7010 19          >                        add     hl,de
 704+ 7011 29          >                        add     hl,hl
 705+ 7012 7C                                   ld      a,h                         ; .
 706+ 7013 C1                                   pop     bc                          ; +1 retrieve bc
 707+ 7014 FE 00                                cp      0                           ; if result in h was 0 then done
 708+ 7016 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 709+ 7018 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 710+ 701A 28 02                                jr      z,.DoneNormX
 711+ 701C ED 44                                neg
 712+ 701E DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 713+ 7020 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 714+ 7022 E1                                   pop     hl                          ; +0 hl y scaled
 715+ 7023 7C                                   ld      a,h                         ; c = sign
 716+ 7024 E6 80                                and     SignOnly8Bit                ; .
 717+ 7026 4F                                   ld      c,a                         ; .
 718+ 7027 C5                                   push    bc                          ; +1 save sign to stack
 719+ 7028 7D                                   ld      a,l                         ; a = 8 bit signed z
 720+ 7029 CD 12 9B                             call    AequAdivQmul96ABS           ; .
 721+ 702C 5F                                   ld      e,a                         ; a = e / 10
 722+ 702D                                      EDiv10Inline                        ; .
 722+ 702D 16 00       >                        ld      d,0
 722+ 702F 62 6B       >                        ld      hl,de
 722+ 7031 29          >                        add     hl,hl
 722+ 7032 19          >                        add     hl,de
 722+ 7033 29          >                        add     hl,hl
 722+ 7034 29          >                        add     hl,hl
 722+ 7035 19          >                        add     hl,de
 722+ 7036 29          >                        add     hl,hl
 723+ 7037 7C                                   ld      a,h                         ; retrieve sign
 724+ 7038 C1                                   pop     bc                          ; +1 retrieve sign
 725+ 7039 FE 00                                cp      0
 726+ 703B 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 727+ 703D CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 728+ 703F 28 02                                jr      z,.DoneNormY
 729+ 7041 ED 44                                neg                                 ;
 730+ 7043 47           .DoneNormY:             ld      b,a                         ; result from Y
 731+ 7044 DD 4C                                ld      c,ixh                       ; x = saved X
 732+ 7046              .SetSprite:             MMUSelectSpriteBank
 732+ 7046 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 733+ 704A CD 05 E1                             call    compass_sun_move
 734+ 704D DD 7D                                ld      a,ixl
 735+ 704F CB 7F                                bit     7,a
 736+ 7051 20 04                                jr      nz,.SunBehind
 737+ 7053 CD 1C E2     .SunInfront:            call    show_compass_sun_infront
 738+ 7056 C9                                   ret
 739+ 7057 CD 27 E2     .SunBehind:             call    show_compass_sun_behind
 740+ 705A C9                                   ret
 741+ 705B
 742+ 705B
 743+ 705B              UpdateCompassPlanet:    MMUSelectPlanet
 743+ 705B ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 744+ 705F CD BC 6E                             call    ScalePlanetPos              ; get as 7 bit signed
 745+ 7062 C5 E5 D5                             push    bc,,hl,,de                  ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 746+ 7065 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 747+ 7066 59                                   ld      e,c                         ; .
 748+ 7067 ED 30                                mul                                 ; .
 749+ 7069 42 4B                                ld      bc,de                       ; .
 750+ 706B 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 751+ 706C 5D                                   ld      e,l                         ; .
 752+ 706D ED 30                                mul                                 ; .
 753+ 706F EB                                   ex      de,hl                       ; .
 754+ 7070 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 755+ 7071 53                                   ld      d,e                         ; de = z ^
 756+ 7072 ED 30                                mul                                 ; .
 757+ 7074 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + z^2
 758+ 7075 09                                   add     hl,bc
 759+ 7076 EB                                   ex      de,hl
 760+ 7077 CD 28 96                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 761+ 707A                                      ; if h <> 0 then more difficult
 762+ 707A 55                                   ld      d,l                         ; iyl = q
 763+ 707B FD 6A                                ld      iyl,d                       ; .
 764+ 707D E1           .NormaliseX:            pop     hl                          ; hl x scaled
 765+ 707E 7C                                   ld      a,h                         ; c = sign
 766+ 707F E6 80                                and     SignOnly8Bit                ; .
 767+ 7081 4F                                   ld      c,a                         ; .
 768+ 7082 C5                                   push    bc                          ; save sign to stack
 769+ 7083 7D                                   ld      a,l                         ; a = 8 bit abs z
 770+ 7084 CD 12 9B                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 771+ 7087 5F                                   ld      e,a                         ; .
 772+ 7088                                      EDiv10Inline                        ; a = e / 10
 772+ 7088 16 00       >                        ld      d,0
 772+ 708A 62 6B       >                        ld      hl,de
 772+ 708C 29          >                        add     hl,hl
 772+ 708D 19          >                        add     hl,de
 772+ 708E 29          >                        add     hl,hl
 772+ 708F 29          >                        add     hl,hl
 772+ 7090 19          >                        add     hl,de
 772+ 7091 29          >                        add     hl,hl
 773+ 7092 7C                                   ld      a,h                         ; .
 774+ 7093 C1                                   pop     bc                          ; retrieve sign
 775+ 7094 FE 00                                cp      0
 776+ 7096 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 777+ 7098 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 778+ 709A 28 02                                jr      z,.DoneNormX
 779+ 709C ED 44                                neg
 780+ 709E DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 781+ 70A0 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 782+ 70A2 E1                                   pop     hl                          ; hl y scaled
 783+ 70A3 7C                                   ld      a,h                         ; c = sign
 784+ 70A4 E6 80                                and     SignOnly8Bit                ; .
 785+ 70A6 4F                                   ld      c,a                         ; .
 786+ 70A7 C5                                   push    bc                          ; save sign to stack
 787+ 70A8 7D                                   ld      a,l                         ; a = 8 bit signed z
 788+ 70A9 CD 12 9B                             call    AequAdivQmul96ABS           ; .
 789+ 70AC 5F                                   ld      e,a                         ; a = e / 10
 790+ 70AD                                      EDiv10Inline                        ; .
 790+ 70AD 16 00       >                        ld      d,0
 790+ 70AF 62 6B       >                        ld      hl,de
 790+ 70B1 29          >                        add     hl,hl
 790+ 70B2 19          >                        add     hl,de
 790+ 70B3 29          >                        add     hl,hl
 790+ 70B4 29          >                        add     hl,hl
 790+ 70B5 19          >                        add     hl,de
 790+ 70B6 29          >                        add     hl,hl
 791+ 70B7 7C                                   ld      a,h                         ; retrieve sign
 792+ 70B8 C1                                   pop     bc                          ; retrieve sign
 793+ 70B9 FE 00                                cp      0
 794+ 70BB 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 795+ 70BD CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 796+ 70BF 28 02                                jr      z,.DoneNormY
 797+ 70C1 ED 44                                neg                                 ;
 798+ 70C3 47           .DoneNormY:             ld      b,a                         ; result from Y
 799+ 70C4 DD 4C                                ld      c,ixh                       ; x = saved X
 800+ 70C6              .SetSprite:             MMUSelectSpriteBank
 800+ 70C6 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 801+ 70CA CD 17 E1                             call    compass_station_move
 802+ 70CD DD 7D                                ld      a,ixl
 803+ 70CF CB 7F                                bit     7,a
 804+ 70D1 20 04                                jr      nz,.PlanetBehind
 805+ 70D3 CD 32 E2     .PlanetInfront:         call    show_compass_station_infront
 806+ 70D6 C9                                   ret
 807+ 70D7 CD 3D E2     .PlanetBehind:          call    show_compass_station_behind
 808+ 70DA C9                                   ret
 809+ 70DB
 810+ 70DB              UpdatePlanetSun:        MMUSelectPlanet
 810+ 70DB ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 811+ 70DF                                      Shift24BitScan  PBnKyhi, PBnKylo
 811+ 70DF 2A 14 C0    >                        ld      hl,(PBnKyhi)
 811+ 70E2 44          >                        ld      b,h
 811+ 70E3 7C          >                        ld      a,h
 811+ 70E4 E6 7F       >                        and     SignMask8Bit
 811+ 70E6 67          >                        ld      h,a
 811+ 70E7 3A 13 C0    >                        ld      a,(PBnKylo)
 811+ 70EA CB 27       >                        sla     a
 811+ 70EC CB 15       >                        rl      l
 811+ 70EE CB 14       >                        rl      h
 811+ 70F0 CB 27       >                        sla     a
 811+ 70F2 CB 15       >                        rl      l
 811+ 70F4 CB 14       >                        rl      h
 811+ 70F6 CB 27       >                        sla     a
 811+ 70F8 CB 15       >                        rl      l
 811+ 70FA CB 14       >                        rl      h
 811+ 70FC CB 27       >                        sla     a
 811+ 70FE CB 15       >                        rl      l
 811+ 7100 CB 14       >                        rl      h
 811+ 7102 CB 27       >                        sla     a
 811+ 7104 CB 15       >                        rl      l
 811+ 7106 CB 14       >                        rl      h
 811+ 7108 CB 27       >                        sla     a
 811+ 710A CB 15       >                        rl      l
 811+ 710C CB 14       >                        rl      h
 812+ 710E 3A 12 C0     .IsItInRange:           ld      a,(PBnKxsgn)                ; if the high byte is not
 813+ 7111 21 15 C0                             ld      hl,PBnKysgn                 ; a sign only
 814+ 7114 B6                                   or      (hl)                        ; then its too far away
 815+ 7115 21 18 C0                             ld      hl,PBnKzsgn                 ; for the scanner to draw
 816+ 7118 B6                                   or      (hl)                        ; so rely on the compass
 817+ 7119 E6 7F                                and     SignMask8Bit                ;
 818+ 711B C0                                   ret     nz                          ;
 819+ 711C 2A 16 C0     .ItsInRange:            ld      hl,(PBnKzlo)                ; we will get unsigned values
 820+ 711F ED 5B 10 C0                          ld      de,(PBnKxlo)
 821+ 7123 ED 4B 13 C0                          ld      bc,(PBnKylo)
 822+ 7127 7C                                   ld      a,h
 823+ 7128 B2                                   or      d
 824+ 7129 B0                                   or      b
 825+ 712A E6 C0                                and     %11000000
 826+ 712C C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 827+ 712D 3A 12 C0     .MakeX2Compliment:      ld      a,(PBnKxsgn)
 828+ 7130 CB 7F                                bit     7,a
 829+ 7132 28 04                                jr      z,.absXHi
 830+ 7134                                      NegD
 830+ 7134 7A          >                    ld      a,d
 830+ 7135 ED 44       >                    neg
 830+ 7137 57          >                    ld      d,a
 831+ 7138 7A           .absXHi:                ld      a,d
 832+ 7139 C6 80                                add     ScannerX
 833+ 713B DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 834+ 713D CB 3C        .ProcessZCoord:         srl     h
 835+ 713F CB 3C                                srl     h
 836+ 7141 3A 18 C0     .MakeZ2Compliment:      ld      a,(PBnKzsgn)
 837+ 7144 CB 7F                                bit     7,a
 838+ 7146 28 04                                jr      z,.absZHi
 839+ 7148                                      NegH
 839+ 7148 7C          >                    ld      a,h
 839+ 7149 ED 44       >                    neg
 839+ 714B 67          >                    ld      h,a
 840+ 714C 3E AB        .absZHi:                ld      a,ScannerY
 841+ 714E 94                                   sub     h
 842+ 714F FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 843+ 7151 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 844+ 7153 20 0B                                jr      nz,.StickHasLength
 845+ 7155 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 846+ 7157 FD 6F                                ld      iyl,a
 847+ 7159                                      MMUSelectLayer2
 847+ 7159 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 848+ 715D C3 88 71                             jp      .NoStick
 849+ 7160 3A 15 C0     .StickHasLength:        ld      a,(PBnKysgn)                ; if b  =  0 then no line
 850+ 7163 CB 7F                                bit     7,a
 851+ 7165 28 04                                jr      z,.absYHi
 852+ 7167                                      NegB
 852+ 7167 78          >                    ld      a,b
 852+ 7168 ED 44       >                    neg
 852+ 716A 47          >                    ld      b,a
 853+ 716B FD 7C        .absYHi:                ld      a,iyh
 854+ 716D 90           .SetStickPos:           sub     b
 855+ 716E                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 855+ 716E FE BE       >                        cp      ScannerBottom
 855+ 7170 DA 75 71    >                        jp		c, .StickOnScreen
 856+ 7173 3E BE                                ld      a,ScannerBottom
 857+ 7175 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 858+ 7177 DD 6F                                ld      ixl,a
 859+ 7179 FD 44                                ld      b,iyh                       ; from row
 860+ 717B DD 4C                                ld      c,ixh                       ; from col
 861+ 717D FD 55                                ld      d,iyl                       ; to row
 862+ 717F 1E B4                                ld      e,L2SunScanner
 863+ 7181                                      MMUSelectLayer2
 863+ 7181 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 864+ 7185 CD 59 E5                             call    l2_draw_vert_line_to
 865+ 7188 FD 45        .NoStick:               ld      b,iyl                       ; row
 866+ 718A DD 4C                                ld      c,ixh                       ; col
 867+ 718C 3E FC                                ld      a,L2SunScannerBright
 868+ 718E CD B9 E2                             call    l2_plot_pixel
 869+ 7191 FD 45                                ld      b,iyl
 870+ 7193 DD 4C                                ld      c,ixh
 871+ 7195 0C                                   inc     c
 872+ 7196 3E FC                                ld      a,L2SunScannerBright
 873+ 7198 CD B9 E2                             call    l2_plot_pixel
 874+ 719B C9                                   ret
 875+ 719C
 876+ 719C              UpdateCompassStation:   MMUSelectShipBankN 0
 876+ 719C ED 91 57 00 >					 nextreg ShipModelMMU,	    0
 877+ 71A0
 878+ 71A0 CD 09 6F                             call    ScaleSunPos                 ; get as 7 bit signed
 879+ 71A3 C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 880+ 71A7 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 881+ 71A8 59                                   ld      e,c                         ; .
 882+ 71A9 ED 30                                mul                                 ; .
 883+ 71AB 42 4B                                ld      bc,de                       ; .
 884+ 71AD 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 885+ 71AE 5D                                   ld      e,l                         ; .
 886+ 71AF ED 30                                mul                                 ; .
 887+ 71B1 EB                                   ex      de,hl                       ; .
 888+ 71B2 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 889+ 71B3 53                                   ld      d,e                         ; de = z ^
 890+ 71B4 ED 30                                mul                                 ; .
 891+ 71B6 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 892+ 71B7 09                                   add     hl,bc
 893+ 71B8 EB                                   ex      de,hl
 894+ 71B9 CD 28 96                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 895+ 71BC                                      ; if h <> 0 then more difficult
 896+ 71BC 55                                   ld      d,l                         ; iyl = q
 897+ 71BD FD 6A                                ld      iyl,d                       ; .
 898+ 71BF E1           .NormaliseX:            pop     hl                          ; hl x scaled
 899+ 71C0 7C                                   ld      a,h                         ; c = sign
 900+ 71C1 E6 80                                and     SignOnly8Bit                ; .
 901+ 71C3 4F                                   ld      c,a                         ; .
 902+ 71C4 C5                                   push    bc                          ; save sign to stack
 903+ 71C5 7D                                   ld      a,l                         ; a = 8 bit abs z
 904+ 71C6 CD 12 9B                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 905+ 71C9 5F                                   ld      e,a                         ; .
 906+ 71CA                                      EDiv10Inline                        ; a = e / 10
 906+ 71CA 16 00       >                        ld      d,0
 906+ 71CC 62 6B       >                        ld      hl,de
 906+ 71CE 29          >                        add     hl,hl
 906+ 71CF 19          >                        add     hl,de
 906+ 71D0 29          >                        add     hl,hl
 906+ 71D1 29          >                        add     hl,hl
 906+ 71D2 19          >                        add     hl,de
 906+ 71D3 29          >                        add     hl,hl
 907+ 71D4 7C                                   ld      a,h                         ; .
 908+ 71D5 C1                                   pop     bc                          ; retrieve sign
 909+ 71D6 FE 00                                cp      0
 910+ 71D8 28 06                                jr      z,.DoneNormX                 ; in case we end up with - 0
 911+ 71DA CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 912+ 71DC 28 02                                jr      z,.DoneNormX
 913+ 71DE ED 44                                neg
 914+ 71E0 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 915+ 71E2 FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 916+ 71E4 E1                                   pop     hl                          ; hl z scaled
 917+ 71E5 7C                                   ld      a,h                         ; c = sign
 918+ 71E6 E6 80                                and     SignOnly8Bit                ; .
 919+ 71E8 4F                                   ld      c,a                         ; .
 920+ 71E9 C5                                   push    bc                          ; save sign to stack
 921+ 71EA 7D                                   ld      a,l                         ; e = a /q * 96
 922+ 71EB CD 12 9B                             call    AequAdivQmul96ABS              ; .
 923+ 71EE 5F                                   ld      e,a                         ; a = e / 10
 924+ 71EF                                      EDiv10Inline                        ; .
 924+ 71EF 16 00       >                        ld      d,0
 924+ 71F1 62 6B       >                        ld      hl,de
 924+ 71F3 29          >                        add     hl,hl
 924+ 71F4 19          >                        add     hl,de
 924+ 71F5 29          >                        add     hl,hl
 924+ 71F6 29          >                        add     hl,hl
 924+ 71F7 19          >                        add     hl,de
 924+ 71F8 29          >                        add     hl,hl
 925+ 71F9 7C                                   ld      a,h                         ; retrieve sign
 926+ 71FA C1                                   pop     bc                          ; retrieve sign
 927+ 71FB CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 928+ 71FD 28 02                                jr      z,.DoneNormZ
 929+ 71FF ED 44                                neg
 930+ 7201 DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 931+ 7203 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 932+ 7205 E1                                   pop     hl                          ; hl y scaled
 933+ 7206 7C                                   ld      a,h                         ; c = sign
 934+ 7207 E6 80                                and     SignOnly8Bit                ; .
 935+ 7209 4F                                   ld      c,a                         ; .
 936+ 720A C5                                   push    bc                          ; save sign to stack
 937+ 720B 7D                                   ld      a,l                         ; a = 8 bit signed z
 938+ 720C CD 12 9B                             call    AequAdivQmul96ABS              ; .
 939+ 720F 5F                                   ld      e,a                         ; a = e / 10
 940+ 7210                                      EDiv10Inline                        ; .
 940+ 7210 16 00       >                        ld      d,0
 940+ 7212 62 6B       >                        ld      hl,de
 940+ 7214 29          >                        add     hl,hl
 940+ 7215 19          >                        add     hl,de
 940+ 7216 29          >                        add     hl,hl
 940+ 7217 29          >                        add     hl,hl
 940+ 7218 19          >                        add     hl,de
 940+ 7219 29          >                        add     hl,hl
 941+ 721A 7C                                   ld      a,h                         ; retrieve sign
 942+ 721B C1                                   pop     bc                          ; retrieve sign
 943+ 721C FE 00                                cp      0
 944+ 721E 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 945+ 7220 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 946+ 7222 28 02                                jr      z,.DoneNormY
 947+ 7224 ED 44                                neg
 948+ 7226 47           .DoneNormY:             ld      b,a                         ; .
 949+ 7227 DD 4C                                ld      c,ixh
 950+ 7229              .SetSprite:             MMUSelectSpriteBank
 950+ 7229 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 951+ 722D CD 05 E1                             call    compass_sun_move
 952+ 7230 DD 7D                                ld      a,ixl
 953+ 7232 CB 7F                                bit     7,a
 954+ 7234 20 04                                jr      nz,.SunBehind
 955+ 7236 CD 1C E2     .SunInfront:            call    show_compass_sun_infront
 956+ 7239 C9                                   ret
 957+ 723A CD 27 E2     .SunBehind:             call    show_compass_sun_behind
 958+ 723D C9                                   ret
 959+ 723E
 960+ 723E
 961+ 723E              UpdateScannerSun:       MMUSelectSun
 961+ 723E ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 962+ 7242                                      Shift24BitScan  SBnKyhi, SBnKylo
 962+ 7242 2A 14 C0    >                        ld      hl,(SBnKyhi)
 962+ 7245 44          >                        ld      b,h
 962+ 7246 7C          >                        ld      a,h
 962+ 7247 E6 7F       >                        and     SignMask8Bit
 962+ 7249 67          >                        ld      h,a
 962+ 724A 3A 13 C0    >                        ld      a,(SBnKylo)
 962+ 724D CB 27       >                        sla     a
 962+ 724F CB 15       >                        rl      l
 962+ 7251 CB 14       >                        rl      h
 962+ 7253 CB 27       >                        sla     a
 962+ 7255 CB 15       >                        rl      l
 962+ 7257 CB 14       >                        rl      h
 962+ 7259 CB 27       >                        sla     a
 962+ 725B CB 15       >                        rl      l
 962+ 725D CB 14       >                        rl      h
 962+ 725F CB 27       >                        sla     a
 962+ 7261 CB 15       >                        rl      l
 962+ 7263 CB 14       >                        rl      h
 962+ 7265 CB 27       >                        sla     a
 962+ 7267 CB 15       >                        rl      l
 962+ 7269 CB 14       >                        rl      h
 962+ 726B CB 27       >                        sla     a
 962+ 726D CB 15       >                        rl      l
 962+ 726F CB 14       >                        rl      h
 963+ 7271 3A 12 C0     .IsItInRange:           ld      a,(SBnKxsgn)                ; if the high byte is not
 964+ 7274 21 15 C0                             ld      hl,SBnKysgn                 ; a sign only
 965+ 7277 B6                                   or      (hl)                        ; then its too far away
 966+ 7278 21 18 C0                             ld      hl,SBnKzsgn                 ; for the scanner to draw
 967+ 727B B6                                   or      (hl)                        ; so rely on the compass
 968+ 727C E6 7F                                and     SignMask8Bit                ;
 969+ 727E C0                                   ret     nz                          ;
 970+ 727F 2A 16 C0     .ItsInRange:            ld      hl,(SBnKzlo)                ; we will get unsigned values
 971+ 7282 ED 5B 10 C0                          ld      de,(SBnKxlo)
 972+ 7286 ED 4B 13 C0                          ld      bc,(SBnKylo)
 973+ 728A 7C                                   ld      a,h
 974+ 728B B2                                   or      d
 975+ 728C B0                                   or      b
 976+ 728D E6 C0                                and     %11000000
 977+ 728F C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 978+ 7290 3A 12 C0     .MakeX2Compliment:      ld      a,(SBnKxsgn)
 979+ 7293 CB 7F                                bit     7,a
 980+ 7295 28 04                                jr      z,.absXHi
 981+ 7297                                      NegD
 981+ 7297 7A          >                    ld      a,d
 981+ 7298 ED 44       >                    neg
 981+ 729A 57          >                    ld      d,a
 982+ 729B 7A           .absXHi:                ld      a,d
 983+ 729C C6 80                                add     ScannerX
 984+ 729E DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 985+ 72A0 CB 3C        .ProcessZCoord:         srl     h
 986+ 72A2 CB 3C                                srl     h
 987+ 72A4 3A 18 C0     .MakeZ2Compliment:      ld      a,(SBnKzsgn)
 988+ 72A7 CB 7F                                bit     7,a
 989+ 72A9 28 04                                jr      z,.absZHi
 990+ 72AB                                      NegH
 990+ 72AB 7C          >                    ld      a,h
 990+ 72AC ED 44       >                    neg
 990+ 72AE 67          >                    ld      h,a
 991+ 72AF 3E AB        .absZHi:                ld      a,ScannerY
 992+ 72B1 94                                   sub     h
 993+ 72B2 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 994+ 72B4 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 995+ 72B6 20 0B                                jr      nz,.StickHasLength
 996+ 72B8 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 997+ 72BA FD 6F                                ld      iyl,a
 998+ 72BC                                      MMUSelectLayer2
 998+ 72BC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 999+ 72C0 C3 EB 72                             jp      .NoStick
1000+ 72C3 3A 15 C0     .StickHasLength:        ld      a,(SBnKysgn)                ; if b  =  0 then no line
1001+ 72C6 CB 7F                                bit     7,a
1002+ 72C8 28 04                                jr      z,.absYHi
1003+ 72CA                                      NegB
1003+ 72CA 78          >                    ld      a,b
1003+ 72CB ED 44       >                    neg
1003+ 72CD 47          >                    ld      b,a
1004+ 72CE FD 7C        .absYHi:                ld      a,iyh
1005+ 72D0 90           .SetStickPos:           sub     b
1006+ 72D1                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1006+ 72D1 FE BE       >                        cp      ScannerBottom
1006+ 72D3 DA D8 72    >                        jp		c, .StickOnScreen
1007+ 72D6 3E BE                                ld      a,ScannerBottom
1008+ 72D8 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1009+ 72DA DD 6F                                ld      ixl,a
1010+ 72DC FD 44                                ld      b,iyh                       ; from row
1011+ 72DE DD 4C                                ld      c,ixh                       ; from col
1012+ 72E0 FD 55                                ld      d,iyl                       ; to row
1013+ 72E2 1E B4                                ld      e,L2SunScanner
1014+ 72E4                                      MMUSelectLayer2
1014+ 72E4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1015+ 72E8 CD 59 E5                             call    l2_draw_vert_line_to
1016+ 72EB FD 45        .NoStick:               ld      b,iyl                       ; row
1017+ 72ED DD 4C                                ld      c,ixh                       ; col
1018+ 72EF 3E FC                                ld      a,L2SunScannerBright
1019+ 72F1 CD B9 E2                             call    l2_plot_pixel
1020+ 72F4 FD 45                                ld      b,iyl
1021+ 72F6 DD 4C                                ld      c,ixh
1022+ 72F8 0C                                   inc     c
1023+ 72F9 3E FC                                ld      a,L2SunScannerBright
1024+ 72FB CD B9 E2                             call    l2_plot_pixel
1025+ 72FE C9                                   ret
1026+ 72FF
1027+ 72FF              ; This will do a planet update if we are not in space station range
1028+ 72FF              UpdateScannerPlanet:    MMUSelectPlanet
1028+ 72FF ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
1029+ 7303                                      Shift24BitScan  PBnKyhi, PBnKylo
1029+ 7303 2A 14 C0    >                        ld      hl,(PBnKyhi)
1029+ 7306 44          >                        ld      b,h
1029+ 7307 7C          >                        ld      a,h
1029+ 7308 E6 7F       >                        and     SignMask8Bit
1029+ 730A 67          >                        ld      h,a
1029+ 730B 3A 13 C0    >                        ld      a,(PBnKylo)
1029+ 730E CB 27       >                        sla     a
1029+ 7310 CB 15       >                        rl      l
1029+ 7312 CB 14       >                        rl      h
1029+ 7314 CB 27       >                        sla     a
1029+ 7316 CB 15       >                        rl      l
1029+ 7318 CB 14       >                        rl      h
1029+ 731A CB 27       >                        sla     a
1029+ 731C CB 15       >                        rl      l
1029+ 731E CB 14       >                        rl      h
1029+ 7320 CB 27       >                        sla     a
1029+ 7322 CB 15       >                        rl      l
1029+ 7324 CB 14       >                        rl      h
1029+ 7326 CB 27       >                        sla     a
1029+ 7328 CB 15       >                        rl      l
1029+ 732A CB 14       >                        rl      h
1029+ 732C CB 27       >                        sla     a
1029+ 732E CB 15       >                        rl      l
1029+ 7330 CB 14       >                        rl      h
1030+ 7332 3A 12 C0     .IsItInRange:           ld      a,(PBnKxsgn)                ; if the high byte is not
1031+ 7335 21 15 C0                             ld      hl,PBnKysgn                 ; a sign only
1032+ 7338 B6                                   or      (hl)                        ; then its too far away
1033+ 7339 21 18 C0                             ld      hl,PBnKzsgn                 ; for the scanner to draw
1034+ 733C B6                                   or      (hl)                        ; so rely on the compass
1035+ 733D E6 7F                                and     SignMask8Bit                ;
1036+ 733F C0                                   ret     nz                          ;
1037+ 7340 2A 16 C0     .ItsInRange:            ld      hl,(PBnKzlo)                ; we will get unsigned values
1038+ 7343 ED 5B 10 C0                          ld      de,(PBnKxlo)
1039+ 7347 ED 4B 13 C0                          ld      bc,(PBnKylo)
1040+ 734B 7C                                   ld      a,h
1041+ 734C B2                                   or      d
1042+ 734D B0                                   or      b
1043+ 734E E6 C0                                and     %11000000
1044+ 7350 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
1045+ 7351 3A 12 C0     .MakeX2Compliment:      ld      a,(PBnKxsgn)
1046+ 7354 CB 7F                                bit     7,a
1047+ 7356 28 04                                jr      z,.absXHi
1048+ 7358                                      NegD
1048+ 7358 7A          >                    ld      a,d
1048+ 7359 ED 44       >                    neg
1048+ 735B 57          >                    ld      d,a
1049+ 735C 7A           .absXHi:                ld      a,d
1050+ 735D C6 80                                add     ScannerX
1051+ 735F DD 67                                ld      ixh,a                       ; store adjusted X in ixh
1052+ 7361 CB 3C        .ProcessZCoord:         srl     h
1053+ 7363 CB 3C                                srl     h
1054+ 7365 3A 18 C0     .MakeZ2Compliment:      ld      a,(PBnKzsgn)
1055+ 7368 CB 7F                                bit     7,a
1056+ 736A 28 04                                jr      z,.absZHi
1057+ 736C                                      NegH
1057+ 736C 7C          >                    ld      a,h
1057+ 736D ED 44       >                    neg
1057+ 736F 67          >                    ld      h,a
1058+ 7370 3E AB        .absZHi:                ld      a,ScannerY
1059+ 7372 94                                   sub     h
1060+ 7373 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
1061+ 7375 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
1062+ 7377 20 0B                                jr      nz,.StickHasLength
1063+ 7379 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
1064+ 737B FD 6F                                ld      iyl,a
1065+ 737D                                      MMUSelectLayer2
1065+ 737D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1066+ 7381 C3 AC 73                             jp      .NoStick
1067+ 7384 3A 15 C0     .StickHasLength:        ld      a,(PBnKysgn)                ; if b  =  0 then no line
1068+ 7387 CB 7F                                bit     7,a
1069+ 7389 28 04                                jr      z,.absYHi
1070+ 738B                                      NegB
1070+ 738B 78          >                    ld      a,b
1070+ 738C ED 44       >                    neg
1070+ 738E 47          >                    ld      b,a
1071+ 738F FD 7C        .absYHi:                ld      a,iyh
1072+ 7391 90           .SetStickPos:           sub     b
1073+ 7392                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1073+ 7392 FE BE       >                        cp      ScannerBottom
1073+ 7394 DA 99 73    >                        jp		c, .StickOnScreen
1074+ 7397 3E BE                                ld      a,ScannerBottom
1075+ 7399 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1076+ 739B DD 6F                                ld      ixl,a
1077+ 739D FD 44                                ld      b,iyh                       ; from row
1078+ 739F DD 4C                                ld      c,ixh                       ; from col
1079+ 73A1 FD 55                                ld      d,iyl                       ; to row
1080+ 73A3 1E B4                                ld      e,L2SunScanner
1081+ 73A5                                      MMUSelectLayer2
1081+ 73A5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1082+ 73A9 CD 59 E5                             call    l2_draw_vert_line_to
1083+ 73AC FD 45        .NoStick:               ld      b,iyl                       ; row
1084+ 73AE DD 4C                                ld      c,ixh                       ; col
1085+ 73B0 3E FC                                ld      a,L2SunScannerBright
1086+ 73B2 CD B9 E2                             call    l2_plot_pixel
1087+ 73B5 FD 45                                ld      b,iyl
1088+ 73B7 DD 4C                                ld      c,ixh
1089+ 73B9 0C                                   inc     c
1090+ 73BA 3E FC                                ld      a,L2SunScannerBright
1091+ 73BC CD B9 E2                             call    l2_plot_pixel
1092+ 73BF C9                                   ret
1093+ 73C0
1094+ 73C0
1095+ 73C0              ; As the space station is always ship 0 then we can just use the scanner
1096+ 73C0
1097+ 73C0              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
1098+ 73C0 3A 51 C0     UpdateScannerShip:      ld      a,(UBnKexplDsp)             ; if bit 4 is clear then ship should not be drawn
1099+ 73C3 CB 67                                bit     4,a                         ; .
1100+ 73C5                                      ;DEBUG ret     z                           ; .
1101+ 73C5 3A 45 C3                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
1102+ 73C8 CB 7F                                bit     7,a
1103+ 73CA C0                                   ret     nz
1104+ 73CB              ; DEBUG Add in station types later
1105+ 73CB 2A 26 C0     .NotMissile:            ld      hl,(UBnKzlo)
1106+ 73CE ED 5B 20 C0                          ld      de,(UBnKxlo)
1107+ 73D2 ED 4B 23 C0                          ld      bc,(UBnKylo)
1108+ 73D6 7C                                   ld      a,h
1109+ 73D7 B2                                   or      d
1110+ 73D8 B0                                   or      b
1111+ 73D9 E6 C0                                and     %11000000
1112+ 73DB C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
1113+ 73DC 3A 22 C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
1114+ 73DF CB 7F                                bit     7,a
1115+ 73E1 28 04                                jr      z,.absXHi
1116+ 73E3                                      NegD
1116+ 73E3 7A          >                    ld      a,d
1116+ 73E4 ED 44       >                    neg
1116+ 73E6 57          >                    ld      d,a
1117+ 73E7 7A           .absXHi:                ld      a,d
1118+ 73E8 C6 80                                add     ScannerX
1119+ 73EA DD 67                                ld      ixh,a                       ; store adjusted X in ixh
1120+ 73EC CB 3C        .ProcessZCoord:         srl     h
1121+ 73EE CB 3C                                srl     h
1122+ 73F0 3A 28 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
1123+ 73F3 CB 7F                                bit     7,a
1124+ 73F5 28 04                                jr      z,.absZHi
1125+ 73F7                                      NegH
1125+ 73F7 7C          >                    ld      a,h
1125+ 73F8 ED 44       >                    neg
1125+ 73FA 67          >                    ld      h,a
1126+ 73FB 3E AB        .absZHi:                ld      a,ScannerY
1127+ 73FD 94                                   sub     h
1128+ 73FE FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
1129+ 7400 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
1130+ 7402 20 2A                                jr      nz,.StickHasLength
1131+ 7404 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
1132+ 7406 FD 6F                                ld      iyl,a
1133+ 7408 DD 7D                                ld      a,ixl
1134+ 740A                                      GetShipColorBright
1134+ 740A 21 AC 6E    >                        ld      hl,ScannerColourTable
1134+ 740D 3A 45 C3    >                        ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
1134+ 7410 FE 01       >                        cp      1                        ; for now to bypass hostile missile
1134+ 7412 28 0A       >                        jr      z,.UsingColourTable    ; for now to bypass hostile missile
1134+ 7414 3A 46 C3    >                        ld      a,(ShipNewBitsAddr)
1134+ 7417 E6 04       >                        and     ShipIsHostile
1134+ 7419 28 03       >                        jr      z,.UsingColourTable
1134+ 741B 21 B4 6E    >.UsingHostileColour:    ld      hl,ScannerColourTableHostile
1134+ 741E 3A 45 C3    >.UsingColourTable:      ld      a,(ShipTypeAddr)
1134+ 7421 CB 27       >                        sla     a                            ; as its byte pairs * 2
1134+ 7423 3C          >                        inc     a
1134+ 7424 ED 31       >                        add     hl,a
1134+ 7426 7E          >                        ld      a,(hl)
1135+ 7427                                      MMUSelectLayer2
1135+ 7427 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1136+ 742B C3 76 74                             jp      .NoStick
1137+ 742E 3A 25 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
1138+ 7431 CB 7F                                bit     7,a
1139+ 7433 28 04                                jr      z,.absYHi
1140+ 7435                                      NegB
1140+ 7435 78          >                    ld      a,b
1140+ 7436 ED 44       >                    neg
1140+ 7438 47          >                    ld      b,a
1141+ 7439 FD 7C        .absYHi:                ld      a,iyh
1142+ 743B 90           .SetStickPos:           sub     b
1143+ 743C                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1143+ 743C FE BE       >                        cp      ScannerBottom
1143+ 743E DA 43 74    >                        jp		c, .StickOnScreen
1144+ 7441 3E BE                                ld      a,ScannerBottom
1145+ 7443 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1146+ 7445                                      GetShipColor
1146+ 7445 21 AC 6E    >                        ld      hl,ScannerColourTable
1146+ 7448 3A 45 C3    >                        ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
1146+ 744B FE 01       >                        cp      1                        ; for now to bypass hostile missile
1146+ 744D 28 0A       >                        jr      z,.UsingColourTable    ; for now to bypass hostile missile
1146+ 744F 3A 46 C3    >                        ld      a,(ShipNewBitsAddr)
1146+ 7452 E6 04       >                        and     ShipIsHostile
1146+ 7454 28 03       >                        jr      z,.UsingColourTable
1146+ 7456 21 B4 6E    >.UsingHostileColour:    ld      hl,ScannerColourTableHostile
1146+ 7459 3A 45 C3    >.UsingColourTable:      ld      a,(ShipTypeAddr)
1146+ 745C CB 27       >                        sla     a                            ; as its byte pairs * 2
1146+ 745E ED 31       >                        add     hl,a
1146+ 7460 7E          >                        ld      a,(hl)
1147+ 7461 DD 6F                                ld      ixl,a
1148+ 7463 FD 44                                ld      b,iyh                       ; from row
1149+ 7465 DD 4C                                ld      c,ixh                       ; from col
1150+ 7467 FD 55                                ld      d,iyl                       ; to row
1151+ 7469 DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
1152+ 746B E5                                   push    hl
1153+ 746C                                      MMUSelectLayer2
1153+ 746C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1154+ 7470 CD 59 E5                             call    l2_draw_vert_line_to
1155+ 7473 E1                                   pop     hl
1156+ 7474 23                                   inc     hl
1157+ 7475 7E                                   ld      a,(hl)
1158+ 7476 FD 45        .NoStick:               ld      b,iyl                       ; row
1159+ 7478 DD 4C                                ld      c,ixh                       ; col
1160+ 747A F5                                   push    af
1161+ 747B CD B9 E2                             call    l2_plot_pixel
1162+ 747E F1                                   pop     af
1163+ 747F FD 45                                ld      b,iyl
1164+ 7481 DD 4C                                ld      c,ixh
1165+ 7483 0C                                   inc     c
1166+ 7484 CD B9 E2                             call    l2_plot_pixel
1167+ 7487 C9                                   ret
1168+ 7488
1169+ 7488
# file closed: ./Views/ConsoleDrawing.asm
 533  7488                          INCLUDE "./Tables/message_queue.asm"
# file opened: ./Tables/message_queue.asm
   1+ 7488
   2+ 7488
   3+ 7488              ResetMessageQueue:      ZeroA
   3+ 7488 AF          >                        xor a
   4+ 7489 32 BE 80                             ld      (MessageCount),a
   5+ 748C 32 BF 80                             ld      (MessageCurrent),a
   6+ 748F 21 C2 80                             ld      hl,MessageQueue
   7+ 7492 11 C0 80                             ld      de,MessageIndex
   8+ 7495 06 05                                ld      b,5
   9+ 7497 7D           .ClearMessageIndexs:    ld      a,l                                 ; Wipe out the indexes to all the data
  10+ 7498 12                                   ld      (de),a                              ;
  11+ 7499 13                                   inc     de                                  ;
  12+ 749A 7C                                   ld      a,h                                 ;
  13+ 749B 12                                   ld      (de),a                              ;
  14+ 749C 13                                   inc     de                                  ;
  15+ 749D 3E 21                                ld      a,MESSAGESIZE                       ;
  16+ 749F ED 31                                add     hl,a                                ;
  17+ 74A1 10 F4                                djnz    .ClearMessageIndexs                 ;
  18+ 74A3 21 C2 80     .ClearText:             ld      hl,MessageQueue
  19+ 74A6 11 AA 00                             ld      de,(MAXMESSAGES * MESSAGESIZE) + MAXMESSAGES    ; MessageQueue + MessageTimeout
  20+ 74A9 3E 00                                ld      a,0
  21+ 74AB CD 32 7D                             call	memfill_dma
  22+ 74AE C9                                   ret
  23+ 74AF
  24+ 74AF              ; Message to enqeue is a string held at DE that must be terminated in \0
  25+ 74AF              ;                                       IYH = timer for message
  26+ 74AF 3A BE 80     EnqueMessage:           ld      a,(MessageCount)                    ; Maximum message count check
  27+ 74B2                                      ReturnIfAGTENusng    MAXMESSAGES            ; we do not enque if queue is full
  27+ 74B2 FE 05       >                        cp    MAXMESSAGES
  27+ 74B4 D0          >                        ret	 nc
  28+ 74B5 3C                                   inc     a
  29+ 74B6 32 BE 80                             ld      (MessageCount),a                    ; get ready for next message
  30+ 74B9 4F           .AddMessage:            ld      c,a
  31+ 74BA 3A BF 80                             ld      a,(MessageCurrent)                  ; a = current message id + count + 1
  32+ 74BD 81                                   add     c                                   ;
  33+ 74BE                                      JumpIfALTNusng MAXMESSAGES, .ReadyToAdd     ; a = a modulus 5 (note we can only hit 5 messages
  33+ 74BE FE 05       >                        cp      MAXMESSAGES
  33+ 74C0 DA C5 74    >                        jp		c, .ReadyToAdd
  34+ 74C3 D6 05        .CircularQueue:         sub     MAXMESSAGES                         ; so only need 1 cycle of modulus
  35+ 74C5 21 67 81     .ReadyToAdd:            ld      hl,MessageTimeout                   ; write out message display time
  36+ 74C8 ED 31                                add     hl,a                                ; as some may be brief messages
  37+ 74CA 4F                                   ld      c,a                                 ;
  38+ 74CB FD 7C                                ld      a,iyh                               ;
  39+ 74CD 77                                   ld      (hl),a                              ;
  40+ 74CE 79                                   ld      a,c                                 ; get back index
  41+ 74CF 21 C0 80                             ld      hl,MessageIndex
  42+ 74D2                                      HLEquAddrAtHLPlusA                          ; hl = target location for message
  42+ 74D2 CB 27       >                    sla         a
  42+ 74D4 ED 31       >                    add         hl,a
  42+ 74D6 7E          >                    ld          a,(hl)
  42+ 74D7 23          >                    inc         hl
  42+ 74D8 66          >                    ld          h,(hl)
  42+ 74D9 6F          >                    ld          l,a
  43+ 74DA EB                                   ex      de,hl                               ; de = destination, hl = message
  44+ 74DB                                      ldCopyTextAtHLtoDE                          ; copy over text as we have done the rest
  44+ 74DB 7E          >.CopyLoop:              ld      a,(hl)
  44+ 74DC 12          >                        ld      (de),a
  44+ 74DD FE 00       >                        cp      0
  44+ 74DF CA E6 74    >                        jp      z,.DoneCopy
  44+ 74E2 23          >                        inc     hl
  44+ 74E3 13          >                        inc     de
  44+ 74E4 18 F5       >                        jr      .CopyLoop
  44+ 74E6             >.DoneCopy:
  45+ 74E6 C9                                   ret
  46+ 74E7
  47+ 74E7 3A BF 80     UpdateMessageTimer:     ld      a,(MessageCurrent)
  48+ 74EA 21 67 81                             ld      hl,MessageTimeout
  49+ 74ED ED 31                                add     hl,a
  50+ 74EF 7E                                   ld      a,(hl)
  51+ 74F0 3D                                   dec     a
  52+ 74F1 28 02                                jr      z,.UpdateQueue
  53+ 74F3 77           .UpdateTimer            ld      (hl),a
  54+ 74F4 C9                                   ret
  55+ 74F5 77           .UpdateQueue:           ld      (hl),a
  56+ 74F6 21 BE 80                             ld      hl,MessageCount
  57+ 74F9 35                                   dec     (hl)
  58+ 74FA 3A BF 80                             ld      a,(MessageCurrent)
  59+ 74FD 23                                   inc     hl
  60+ 74FE                                      JumpIfALTNusng MAXMESSAGES, .ReadyToUpdate
  60+ 74FE FE 05       >                        cp      MAXMESSAGES
  60+ 7500 DA 04 75    >                        jp		c, .ReadyToUpdate
  61+ 7503              .CircularQueue:         ZeroA
  61+ 7503 AF          >                        xor a
  62+ 7504 32 BF 80     .ReadyToUpdate          ld      (MessageCurrent),a
  63+ 7507 C9                                   ret
  64+ 7508
  65+ 7508 3A BE 80     DisplayCurrentMessage:  ld      a,(MessageCount)
  66+ 750B                                      ReturnIfAIsZero
  66+ 750B A7          >                        and     a
  66+ 750C C8          >                        ret     z
  67+ 750D 3A BF 80                             ld      a,(MessageCurrent)
  68+ 7510 21 C0 80                             ld      hl,MessageIndex
  69+ 7513                                      HLEquAddrAtHLPlusA
  69+ 7513 CB 27       >                    sla         a
  69+ 7515 ED 31       >                    add         hl,a
  69+ 7517 7E          >                    ld          a,(hl)
  69+ 7518 23          >                    inc         hl
  69+ 7519 66          >                    ld          h,(hl)
  69+ 751A 6F          >                    ld          l,a
  70+ 751B                                      MMUSelectLayer1
  70+ 751B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  71+ 751F 11 01 00                             ld      de,MESSAGELINE
  72+ 7522 CD 15 E1                             call    l1_print_at_wrap
  73+ 7525 C9                                   ret
  74+ 7526
  75+ 7526              HyperSpaceMessage:      MMUSelectLayer1
  75+ 7526 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  76+ 752A 11 CE 66     .DisplayHyperCountDown: ld      de,Hyp_to
  77+ 752D 21 50 92                             ld      hl,name_expanded
  78+ 7530                                      ldCopyTextAtHLtoDE
  78+ 7530 7E          >.CopyLoop:              ld      a,(hl)
  78+ 7531 12          >                        ld      (de),a
  78+ 7532 FE 00       >                        cp      0
  78+ 7534 CA 3B 75    >                        jp      z,.DoneCopy
  78+ 7537 23          >                        inc     hl
  78+ 7538 13          >                        inc     de
  78+ 7539 18 F5       >                        jr      .CopyLoop
  78+ 753B             >.DoneCopy:
  79+ 753B AF           .DoneName:              xor     a
  80+ 753C 12                                   ld      (de),a
  81+ 753D 32 EA 66                             ld      (Hyp_message+31),a      ; max out at 32 characters
  82+ 7540 21 CB 66     .CentreJustify:         ld      hl,Hyp_message
  83+ 7543                                      HalfLengthHL
  83+ 7543 06 00       >                        ld      b,0
  83+ 7545 7E          >.CountLenLoop:          ld      a,(hl)
  83+ 7546 FE 00       >                        cp      0
  83+ 7548 28 04       >                        jr      z,.DoneCount
  83+ 754A 04          >                        inc     b
  83+ 754B 23          >                        inc     hl
  83+ 754C 18 F7       >                        jr      .CountLenLoop
  83+ 754E 3E 20       >.DoneCount:             ld      a,32
  83+ 7550 90          >                        sub     b
  83+ 7551 CB 2F       >                        sra     a
  84+ 7553 21 05 67                             ld      hl,Hyp_centeredTarget
  85+ 7556                                      ldClearTextLoop 32
  85+ 7556 47          >                        ld      b,a
  85+ 7557 3E 20       >                        ld      a,32
  85+ 7559 77          >.ClearLoop:             ld      (hl),a
  85+ 755A 23          >                        inc     hl
  85+ 755B 10 FC       >                        djnz    .ClearLoop
  86+ 755D EB                                   ex      de,hl
  87+ 755E 21 CB 66                             ld      hl,Hyp_message
  88+ 7561                                      ldCopyTextAtHLtoDE
  88+ 7561 7E          >.CopyLoop:              ld      a,(hl)
  88+ 7562 12          >                        ld      (de),a
  88+ 7563 FE 00       >                        cp      0
  88+ 7565 CA 6C 75    >                        jp      z,.DoneCopy
  88+ 7568 23          >                        inc     hl
  88+ 7569 13          >                        inc     de
  88+ 756A 18 F5       >                        jr      .CopyLoop
  88+ 756C             >.DoneCopy:
  89+ 756C                                      ZeroA
  89+ 756C AF          >                        xor a
  90+ 756D 32 25 67                             ld      (Hyp_centeredEol),a
  91+ 7570 21 01 67                             ld      hl,Hyp_counter           ; clear counter digits
  92+ 7573 3E 20                                ld      a,32                     ; clear counter digits
  93+ 7575 77                                   ld      (hl),a                   ; clear counter digits
  94+ 7576 23                                   inc     hl                       ; clear counter digits
  95+ 7577 77                                   ld      (hl),a                   ; clear counter digits
  96+ 7578 23                                   inc     hl                       ; clear counter digits
  97+ 7579 77                                   ld      (hl),a                   ; clear counter digits
  98+ 757A CD A7 66                             call    UpdateCountdownNumber
  99+ 757D 21 F8 66                             ld      hl,Hyp_charging
 100+ 7580                                      HalfLengthHL
 100+ 7580 06 00       >                        ld      b,0
 100+ 7582 7E          >.CountLenLoop:          ld      a,(hl)
 100+ 7583 FE 00       >                        cp      0
 100+ 7585 28 04       >                        jr      z,.DoneCount
 100+ 7587 04          >                        inc     b
 100+ 7588 23          >                        inc     hl
 100+ 7589 18 F7       >                        jr      .CountLenLoop
 100+ 758B 3E 20       >.DoneCount:             ld      a,32
 100+ 758D 90          >                        sub     b
 100+ 758E CB 2F       >                        sra     a
 101+ 7590 21 46 67                             ld      hl,Hyp_centeredCharging
 102+ 7593                                      ldClearTextLoop 32
 102+ 7593 47          >                        ld      b,a
 102+ 7594 3E 20       >                        ld      a,32
 102+ 7596 77          >.ClearLoop:             ld      (hl),a
 102+ 7597 23          >                        inc     hl
 102+ 7598 10 FC       >                        djnz    .ClearLoop
 103+ 759A EB                                   ex      de,hl
 104+ 759B 21 F8 66                             ld      hl,Hyp_charging
 105+ 759E                                      ldCopyTextAtHLtoDE
 105+ 759E 7E          >.CopyLoop:              ld      a,(hl)
 105+ 759F 12          >                        ld      (de),a
 105+ 75A0 FE 00       >                        cp      0
 105+ 75A2 CA A9 75    >                        jp      z,.DoneCopy
 105+ 75A5 23          >                        inc     hl
 105+ 75A6 13          >                        inc     de
 105+ 75A7 18 F5       >                        jr      .CopyLoop
 105+ 75A9             >.DoneCopy:
 106+ 75A9 AF                                   xor     a
 107+ 75AA 32 66 67                             ld      (Hyp_centeredEol2),a
 108+ 75AD 2A 52 83     .UpdateHyperCountdown:  ld      hl,(InnerHyperCount)
 109+ 75B0 2D                                   dec     l
 110+ 75B1 20 26                                jr      nz,.decHyperInnerOnly
 111+ 75B3 25                                   dec     h
 112+ 75B4 FA DD 75                             jp      m,.HyperCountDone
 113+ 75B7 2E 0B        .resetHyperInner:       ld      l,$0B
 114+ 75B9 E5                                   push    hl
 115+ 75BA 16 0C                                ld      d,12
 116+ 75BC 3E 06                                ld      a,L1ColourPaperBlack | L1ColourInkYellow
 117+ 75BE CD 8B E0                             call    l1_attr_cls_2DlinesA
 118+ 75C1 16 60                                ld      d,12 * 8
 119+ 75C3 CD 74 E0                             call    l1_cls_2_lines_d
 120+ 75C6 11 00 60                             ld      de,$6000
 121+ 75C9 21 05 67                             ld      hl,Hyp_centeredTarget
 122+ 75CC CD C8 E0                             call    l1_print_at
 123+ 75CF 11 00 68                             ld      de,$6800
 124+ 75D2 21 46 67                             ld      hl,Hyp_centeredCharging
 125+ 75D5 CD C8 E0                             call    l1_print_at
 126+ 75D8 E1                                   pop     hl
 127+ 75D9 22 52 83     .decHyperInnerOnly:     ld      (InnerHyperCount),hl
 128+ 75DC C9                                   ret
 129+ 75DD 21 00 00     .HyperCountDone:        ld      hl,0
 130+ 75E0 22 52 83                             ld      (InnerHyperCount),hl
 131+ 75E3 16 0C                                ld      d,12
 132+ 75E5 3E 00                                ld      a,L1ColourPaperBlack | L1ColourInkBlack
 133+ 75E7 CD 8B E0                             call    l1_attr_cls_2DlinesA
 134+ 75EA 16 60                                ld      d,12 * 8
 135+ 75EC CD 74 E0                             call    l1_cls_2_lines_d
 136+ 75EF                                      ForceTransition ScreenHyperspace                            ; transition to hyperspace
 136+ 75EF 3E 0E       >                        ld      a,ScreenHyperspace
 136+ 75F1 32 7A 69    >                        ld      (ScreenTransitionForced), a
 137+ 75F4 C9                                   ret
 138+ 75F5
# file closed: ./Tables/message_queue.asm
 534  75F5                          INCLUDE "./Tables/LaserStatsTable.asm"
# file opened: ./Tables/LaserStatsTable.asm
   1+ 75F5              ; LaserTypeTable
   2+ 75F5              ; laser type = id of laser
   3+ 75F5              ; laser pulse pause = time before next pulse
   4+ 75F5              ; laser pulse duration = time laser is on per shot
   5+ 75F5              ; laser damage output
   6+ 75F5              ;
   7+ 75F5              ; LaserType
   8+ 75F5              ; LaserPulseRate                          ; how many pulses can be fired before long pause
   9+ 75F5              ; LaserPulseOnTime                        ; cycles laser is on for
  10+ 75F5              ; LaserPulseOffTime                       ; cycles laser is off for
  11+ 75F5              ; LaserPulseRest                          ; time before pulse count resets to 0 (i.e cooldown)
  12+ 75F5              ; LaserDamageOutput                       ; amount of damage for a laser hit
  13+ 75F5              ; LaserEnergyDrain                        ; amount of energy drained by cycle
  14+ 75F5              ; LaserHeat                               ; amount of heat generated
  15+ 75F5              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
  16+ 75F5              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
  17+ 75F5              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
  18+ 75F5              ; LaserTechLevel                          ; minimum tech level system to buy from
  19+ 75F5              ;
  20+ 75F5              LaserStatsTableWidth    EQU 12
  21+ 75F5              ;                           0    1    2    3    4    5    6    7    8    9   10   11
  22+ 75F5              ;                          Typ  Rate On   Off  Rst  Dam  Drn  Het  Dur  DAt  Mrk  Tek
  23+ 75F5 00 02 05 20  LaserStatsTable:        DB $00, $02, $05, $20, $40, $03, $10, $02, $20 ,$10 ,$00, $00; basic laser
  23+ 75F9 40 03 10 02
  23+ 75FD 20 10 00 00
  24+ 7601 01 01 08 08                          DB $01, $01, $08, $08, $20, $03, $10, $08, $20 ,$10 ,$00, $01; pulse laser
  24+ 7605 20 03 10 08
  24+ 7609 20 10 00 01
  25+ 760D 02 06 08 03                          DB $02, $06, $08, $03, $3A, $03, $10, $02, $20 ,$10 ,$00, $02; burst laser TODO THIS ONE IS ODD
  25+ 7611 3A 03 10 02
  25+ 7615 20 10 00 02
  26+ 7619 03 11 06 04                          DB $03, $11, $06, $04, $50, $02, $10, $05, $30 ,$10 ,$00, $03; Gatling laser
  26+ 761D 50 02 10 05
  26+ 7621 30 10 00 03
  27+ 7625 04 00 01 00                          DB $04, $00, $01, $00, $03, $03, $03, $10, $20 ,$10 ,$00, $04; beam ; DOES NOT WORK
  27+ 7629 03 03 03 10
  27+ 762D 20 10 00 04
  28+ 7631 05 01 20 30                          DB $05, $01, $20, $30, $60, $03, $02, $02, $20 ,$10 ,$00, $05; mining
  28+ 7635 60 03 02 02
  28+ 7639 20 10 00 05
  29+ 763D 06 00 01 00                          DB $06, $00, $01, $00, $06, $05, $05, $05, $10 ,$10 ,$00, $08; military beam DOES NOT WORK
  29+ 7641 06 05 05 05
  29+ 7645 10 10 00 08
  30+ 7649 07 01 01 02                          DB $07, $01, $01, $02, $20, $22, $01, $30, $30 ,$11 ,$01, $10; thargoid
  30+ 764D 20 22 01 30
  30+ 7651 30 11 01 10
  31+ 7655 08 01 05 10                          DB $08, $01, $05, $10, $80, $70, $02, $03, $60 ,$11 ,$01, $10; Starkiller
  31+ 7659 80 70 02 03
  31+ 765D 60 11 01 10
  32+ 7661
  33+ 7661
  34+ 7661
  35+ 7661
  36+ 7661
  37+ 7661
  38+ 7661
# file closed: ./Tables/LaserStatsTable.asm
 535  7661                          INCLUDE "./Tables/ShipClassTable.asm"
# file opened: ./Tables/ShipClassTable.asm
   1+ 7661              ; Note when selecting its skewed by rank which ads a filter so bigger ships should be later in the table
   2+ 7661              ; More optimal will be to order all the ships and then have an entry point and length of tablea
   3+ 7661
   4+ 7661              ; Each ship type table is constructed as follows
   5+ 7661              ; Header - nbr of ships
   6+ 7661              ; table of min rank
   7+ 7661              ; table of ship ids
   8+ 7661              ; note unless "SelectSpawnType" is changed we can't put this in location $0000 as it doesn't check L in HL for speed (thsi could be done though)
   9+ 7661
  10+ 7661              ; we may nneed to rebuidl these tables for cp instruction so its max rank not min
  11+ 7661              ; Coding limit for simplicity, each table has 15 ships in it
  12+ 7661 00 00 01 01  ShipPirateTableARank:    DB RankingEQHarmless, RankingEQHarmless, RankingEQMostly,   RankingEQMostly,     RankingEQPoor,     RankingEQAverage,   RankingEQDeadly,    RankingEQDeadly
  12+ 7665 02 03 07 07
  13+ 7669 23 00 02 0B  ShipPirateTableA:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Asp_Mk_2,   ShipID_Cobra_Mk_3_P, ShipID_Boulder,    ShipID_Bushmaster,  ShipID_Python_P,    ShipID_Anaconda
  13+ 766D 05 07 1F 01
  14+ 7671
  15+ 7671 00 01 03 07  ShipPirateTableBRank:    DB RankingEQHarmless, RankingEQMostly,   RankingEQAverage,  RankingEQDeadly,     RankingEQDeadly,   RankingEQAbove,     RankingEQCompetent, RankingEQCompetent
  15+ 7675 07 04 05 05
  16+ 7679 08 2A 2B 1F  ShipPirateTableB:        DB ShipID_Chameleon,  ShipID_Worm,       ShipID_Rattler,    ShipID_Python_P,     ShipID_Anaconda,   ShipID_Bushmaster,  ShipID_Python_P,    ShipID_Anaconda
  16+ 767D 01 07 1F 01
  17+ 7681
  18+ 7681 00 00 00 00  ShipBodiesTableARank:    DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQHarmless,  RankingEQHarmless,  RankingEQDangerous
  18+ 7685 00 00 00 06
  19+ 7689 06 06 06 06  ShipBodiesTableA:        DB ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,     ShipID_Asteroid,   ShipID_Asteroid,    ShipID_Asteroid,    ShipID_Rock_Hermit
  19+ 768D 06 06 06 20
  20+ 7691
  21+ 7691 00 00 00 01  ShipNonTraderTableARank: DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQMostly,     RankingEQPoor,     RankingEQAverage,   RankingEQAverage,   RankingEQCompetent
  21+ 7695 02 03 03 05
  22+ 7699 00 23 00 18  ShipNonTraderTableA:     DB ShipID_Adder,      ShipID_Sidewinder, ShipID_Adder,      ShipID_Mamba,        ShipID_Krait,      ShipID_Gecko,       ShipID_Python,      ShipID_Anaconda
  22+ 769D 16 13 1E 01
  23+ 76A1
  24+ 76A1 00 00 00 00  ShipCopTableARank:       DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQHarmless,  RankingEQAverage,   RankingEQCompetent
  24+ 76A5 00 00 03 05
  25+ 76A9 29 29 29 29  ShipCopTableA:           DB ShipID_Viper,      ShipID_Viper,      ShipID_Viper,      ShipID_Viper,        ShipID_Viper,      ShipID_Viper,       ShipID_Python,      ShipID_Anaconda
  25+ 76AD 29 29 1E 01
  26+ 76B1
  27+ 76B1 00 01 02 03  ShipHunterTableRank:     DB RankingEQHarmless, RankingEQMostly,   RankingEQPoor,     RankingEQAverage,    RankingEQAbove,    RankingEQCompetent, RankingEQCompetent, RankingEQCompetent
  27+ 76B5 04 05 05 05
  28+ 76B9 23 00 03 1E  ShipHunterTableA:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Boa,        ShipID_Python,       ShipID_Krait,      ShipID_Fer_De_Lance,ShipID_Mamba,       ShipID_Cougar
  28+ 76BD 16 12 18 0E
  29+ 76C1
  30+ 76C1 00 05 05 06  ShipHunterTableBRank:    DB RankingEQHarmless, RankingEQCompetent,RankingEQCompetent,RankingEQDangerous,  RankingEQDangerous,RankingEQDangerous, RankingEQDeadly,    RankingEQDeadly
  30+ 76C5 06 06 07 07
  31+ 76C9 23 00 15 1E  ShipHunterTableB:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Iguana,     ShipID_Python,       ShipID_Dragon,     ShipID_Gecko,       ShipID_Mamba,       ShipID_Anaconda
  31+ 76CD 10 13 18 01
  32+ 76D1
  33+ 76D1 00 05 06 06  ShipHunterTableCRank:    DB RankingEQHarmless, RankingEQCompetent,RankingEQDangerous,RankingEQDangerous,  RankingEQDeadly,   RankingEQElite,     RankingEQSkollob,   RankingEQNutter
  33+ 76D5 07 08 09 0A
  34+ 76D9 00 1A 1B 10  ShipHunterTableC:        DB ShipID_Adder,      ShipID_Monitor,    ShipID_Moray,      ShipID_Dragon,       ShipID_Gecko,      ShipID_Ghavial,     ShipID_Ophidian,    ShipID_Thargoid
  34+ 76DD 13 14 1C 26
  35+ 76E1
  36+ 76E1 00 00 00 00  ShipJunkTableRankA:      DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQAverage,   RankingEQAbove,     RankingEQCompetent
  36+ 76E5 00 03 04 05
  37+ 76E9 06 06 06 1D  ShipJunkTableA:          DB ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Plate,        ShipID_CargoType5, ShipID_Splinter,    ShipID_Escape_Pod,  ShipID_Rock_Hermit
  37+ 76ED 04 24 11 20
  38+ 76F1
  39+ 76F1              ShipSuperstructureTableA
  40+ 76F1
  41+ 76F1
  42+ 76F1              ; This is determined by system algorithm so there is no rank factor
  43+ 76F1 0D           MasterStations:         DB ShipID_Coriolis
  44+ 76F2 0F                                   DB ShipID_Dodo
  45+ 76F3
  46+ 76F3 19           ShipMissileTable        DB  ShipID_Missile
  47+ 76F4              ShipMissileTableSize    EQU $ - ShipMissileTable
  48+ 76F4
  49+ 76F4
  50+ 76F4
  51+ 76F4              ;; clean up below or delte
  52+ 76F4              ;ShipPirateTable:
  53+ 76F4              ;ShipPackList:           DB  ShipID_Sidewinder, ShipID_Mamba, ShipID_Krait, ShipID_Adder, ShipID_Gecko, ShipID_Cobra_Mk_1, ShipID_Worm, ShipID_Cobra_Mk_3_P
  54+ 76F4              ;ShipPackTableSize       EQU $ - ShipPackList
  55+ 76F4              ;ShipHunterTable         DB  ShipID_Cobra_Mk_3_P, ShipID_Asp_Mk_2, ShipID_Python_P, ShipID_Fer_De_Lance
  56+ 76F4              ;ShipHunterTableSize     EQU $ - ShipHunterTable
  57+ 76F4              ;
  58+ 76F4              ;MasterShipTable:
  59+ 76F4              ;MasterStations:         DB ShipID_Coriolis
  60+ 76F4              ;                        DB ShipID_Dodo
  61+ 76F4              ;
  62+ 76F4              ;
  63+ 76F4              ;
  64+ 76F4              ;MasterJunk:             DB ShipID_Asteroid
  65+ 76F4              ;                        DB ShipID_Plate
  66+ 76F4              ;                        DB ShipID_CargoType5
  67+ 76F4              ;                        DB ShipID_Splinter
  68+ 76F4              ;                        DB ShipID_Escape_Pod
  69+ 76F4              ;                        DB ShipID_Rock_Hermit
  70+ 76F4              ;MasterSuperstructure:
  71+ 76F4              ;MasterMissile:          DB ShipID_Missile
  72+ 76F4
  73+ 76F4
  74+ 76F4
  75+ 76F4
  76+ 76F4
  77+ 76F4 26           MasterThargoid:         DB ShipID_Thargoid
  78+ 76F5 27                                   DB ShipID_Thargon
  79+ 76F6
  80+ 76F6 0C           MasterMission:          DB ShipID_Constrictor
  81+ 76F7
  82+ 76F7
  83+ 76F7
  84+ 76F7
  85+ 76F7
  86+ 76F7 17                                   DB ShipID_Logo
  87+ 76F8 25                                   DB ShipID_TestVector
  88+ 76F9
# file closed: ./Tables/ShipClassTable.asm
 536  76F9
 537  76F9 AF           SeedGalaxy0:            xor     a
 538  76FA                                      MMUSelectGalaxyA
 538  76FA ED 92 57    >                     nextreg GalaxyDataMMU,     a
 539  76FD DD 21 16 E0                          ld      ix,galaxy_data
 540  7701 AF                                   xor		a
 541  7702 32 A4 81                             ld		(XSAV),a
 542  7705 CD 31 88                             call    copy_galaxy_to_system
 543  7708 DD E5        SeedGalaxy0Loop:        push    ix
 544  770A D1                                   pop     de
 545  770B 21 0B 82                             ld      hl,SystemSeed
 546  770E CD 37 88                             call    copy_seed
 547  7711 DD E5                                push    ix
 548  7713 E1                                   pop     hl
 549  7714 ED 34 08 00                          add     hl,8
 550  7718 E5                                   push    hl
 551  7719 DD E1                                pop     ix
 552  771B CD 6C 88                             call    next_system_seed
 553  771E 3A A4 81                             ld		a,(XSAV)
 554  7721 3D                                   dec		a
 555  7722 FE 00                                cp		0
 556  7724 C8                                   ret		z
 557  7725 32 A4 81                             ld		(XSAV),a
 558  7728 20 DE                                jr      nz,SeedGalaxy0Loop
 559  772A C9                                   ret
 560  772B
 561  772B
 562  772B
 563  772B
 564  772B                  ;include "./ModelRender/testdrawing.asm"
 565  772B                  include "./Menus/AttractMode.asm"
# file opened: ./Menus/AttractMode.asm
   1+ 772B              AttractDuration             EQU $00F0
   2+ 772B              AttractCounterStart         EQU $80
   3+ 772B F0 00        AttractTimer:              DW      AttractDuration
   4+ 772D 80           AttractCounter:            DB      AttractCounterStart
   5+ 772E
   6+ 772E 3D 08        Attract_boiler_text		DW $083D
   7+ 7730
   8+ 7730
   9+ 7730 4C 6F 61 64  ATTR_LoadCommander      DB "Load Commander (Y/N)",0
   9+ 7734 20 43 6F 6D
   9+ 7738 6D 61 6E 64
   9+ 773C 65 72 20 28
   9+ 7740 59 2F 4E 29
   9+ 7744 00
  10+ 7745
  11+ 7745 FF           LocalXCounter           DB $FF
  12+ 7746 FF           LocalZCounter           DB $FF
  13+ 7747 00           LastInterrupt           DB 0
  14+ 7748
  15+ 7748 CD DE 87     RandomXCounter:         call    doRandom
  16+ 774B C0                                   ret     nz
  17+ 774C 3A 45 77                             ld      a,(LocalXCounter)
  18+ 774F EE 80                                xor     $80
  19+ 7751 32 45 77                             ld      (LocalXCounter),a
  20+ 7754 C9                                   ret
  21+ 7755
  22+ 7755 CD DE 87     RandomYCounter:         call    doRandom
  23+ 7758 C0                                   ret     nz
  24+ 7759                                      ;ReturnIfALTNusng 254
  25+ 7759 3A 46 77                             ld      a,(LocalZCounter)
  26+ 775C EE 80                                xor     $80
  27+ 775E 32 46 77                             ld      (LocalZCounter),a
  28+ 7761 C9                                   ret
  29+ 7762
  30+ 7762
  31+ 7762              AttractModeInit:        MMUSelectLayer1
  31+ 7762 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  32+ 7766 CD 80 E0                             call	l1_cls
  33+ 7769 3E 07                                ld		a,7
  34+ 776B CD 9B E0                             call	l1_attr_cls_to_a
  35+ 776E 1E FF                                ld      e,$FF
  36+ 7770 ED 5B 2E 77                          ld      de,(Attract_boiler_text)
  37+ 7774 21 30 77                             ld      hl,ATTR_LoadCommander
  38+ 7777 CD C8 E0                             call    l1_print_at
  39+ 777A                                      MMUSelectSpriteBank
  39+ 777A ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  40+ 777E CD 6E E5                             call        sprite_cls_cursors
  41+ 7781              .ClearLayer2:           MMUSelectLayer2
  41+ 7781 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  42+ 7785 CD 04 E0                             call    asm_l2_double_buffer_on
  43+ 7788 CD 0E E2                             call    l2_cls
  44+ 778B CD 97 E2                             call    l2_flip_buffers
  45+ 778E CD 0E E2                             call    l2_cls
  46+ 7791                                      MMUSelectConsoleBank
  46+ 7791 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  47+ 7795 21 00 50     .LoadConsole:           ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  48+ 7798 11 00 E0                             ld          de,ConsoleImageData
  49+ 779B 01 00 08                             ld          bc, ScreenL1BottomLen
  50+ 779E CD 58 7D                             call        memcopy_dma
  51+ 77A1 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  52+ 77A4 11 00 E8                             ld          de,ConsoleAttributes
  53+ 77A7 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  54+ 77AA CD 58 7D                             call        memcopy_dma
  55+ 77AD 3A 9D 81                             ld          a,(InterruptCounter)
  56+ 77B0 32 47 77                             ld          (LastInterrupt),a
  57+ 77B3 CD 5C 78                             call        SelectARandomShip
  58+ 77B6 C9                                   ret
  59+ 77B7
  60+ 77B7
  61+ 77B7              ;.StartShip:             ld          a,(InterruptCounter)
  62+ 77B7              ;                        ld          hl,LastInterrupt
  63+ 77B7              ;                        cp          (hl)
  64+ 77B7              ;                        jp          z,.StartShip            ; we only refresh once per interupt
  65+ 77B7              ;                        ld          (hl),a
  66+ 77B7
  67+ 77B7 CD 3E 7E     AttractModeMain:        call    scan_keyboard
  68+ 77BA 3E 50                                ld      a,c_Pressed_Yes
  69+ 77BC CD 8C 7E                             call    is_key_up_state
  70+ 77BF 20 0A                                jr      nz,.YPressed
  71+ 77C1 3E 52                                ld      a,c_Pressed_No
  72+ 77C3 CD 8C 7E                             call    is_key_up_state
  73+ 77C6 20 06                                jr      nz,.NPressed
  74+ 77C8 C3 B7 77                             jp      AttractModeMain
  75+ 77CB 3E 00        .YPressed:              ld      a,0
  76+ 77CD C9                                   ret
  77+ 77CE 3E FF        .NPressed:              ld      a,$FF
  78+ 77D0 C9                                   ret
  79+ 77D1
  80+ 77D1              ; alternate interrupts, one clears back buffer, one processes ship, one draws ship
  81+ 77D1 00           AttractStep             DB      0
  82+ 77D2
  83+ 77D2 2A 2B 77     AttractModeUpdate:      ld      hl,(AttractTimer)
  84+ 77D5 2B                                   dec     hl
  85+ 77D6 22 2B 77                             ld      (AttractTimer),hl
  86+ 77D9 7C                                   ld      a,h
  87+ 77DA B5                                   or      l
  88+ 77DB C2 E2 77                             jp      nz,.DrawShip
  89+ 77DE CD 5C 78                             call    SelectARandomShip
  90+ 77E1 C9                                   ret
  91+ 77E2              .DrawShip:              ;BREAK
  92+ 77E2 CD DE 87     .SelectShipData:        call    doRandom
  93+ 77E5                                      MMUSelectUniverseN  1
  93+ 77E5 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
  94+ 77E9 3A D1 77                             ld      a,(AttractStep)
  95+ 77EC A7                                   and     a       ; 0
  96+ 77ED CA F7 77                             jp      z,.ApplyShipRollAndPitch
  97+ 77F0 3D                                   dec     a       ; 1
  98+ 77F1 CA 16 78                             jp      z,.ProcessNodes
  99+ 77F4 C3 1F 78                             jp      .PrepLines ; 2
 100+ 77F7
 101+ 77F7 CD AB D9     .ApplyShipRollAndPitch: call    ApplyShipRollAndPitch
 102+ 77FA CD 48 77                             call    RandomXCounter
 103+ 77FD CD 55 77                             call    RandomYCounter
 104+ 7800 3A 45 77                             ld      a,(LocalXCounter)
 105+ 7803 32 48 C0                             ld      (UBnKRotXCounter),a
 106+ 7806 3A 46 77                             ld      a,(LocalZCounter)
 107+ 7809 32 49 C0                             ld      (UBnKRotZCounter),a
 108+ 780C              .ClearScreen:           MMUSelectLayer2
 108+ 780C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 109+ 7810 CD 8E E1                             call    l2_cls_upper_two_thirds
 110+ 7813 C3 4D 78                             jp      .DoneIM2
 111+ 7816 CD C9 DB     .ProcessNodes:          call    ProcessNodes
 112+ 7819 CD 16 D3     .CullV2:                call    CullV2
 113+ 781C C3 4D 78                             jp      .DoneIM2
 114+ 781F CD 20 DE     .PrepLines:             call    PrepLines
 115+ 7822 CD 6D DB     .DrawLines:             call    DrawLines
 116+ 7825 01 01 01     .Drawbox:               ld		bc,$0101
 117+ 7828 11 FD 7F                             ld		de,$7FFD
 118+ 782B 3E C0                                ld		a,$C0
 119+ 782D                                      MMUSelectLayer2
 119+ 782D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 120+ 7831 CD FC E3                             call	l2_draw_box
 121+ 7834 CD 97 E2     .DoubleBuffer:          call    l2_flip_buffers
 122+ 7837 3A 2D 77     .UpdateZPosIfReady:     ld      a,(AttractCounter)
 123+ 783A A7                                   and     a
 124+ 783B CA 4D 78                             jp      z,.DoneIM2
 125+ 783E 3D                                   dec     a
 126+ 783F 32 2D 77                             ld      (AttractCounter),a
 127+ 7842 2A 26 C0                             ld      hl, (UBnKzlo)
 128+ 7845 11 08 00     .UpdatePos:             ld      de, $0008
 129+ 7848 ED 52                                sbc     hl,de
 130+ 784A 22 26 C0                             ld      (UBnKzlo),hl
 131+ 784D 3A D1 77     .DoneIM2:               ld      a,(AttractStep)
 132+ 7850 3C                                   inc     a
 133+ 7851 FE 03                                cp      3
 134+ 7853 32 D1 77                             ld      (AttractStep),a
 135+ 7856 C0                                   ret     nz
 136+ 7857                                      ZeroA
 136+ 7857 AF          >                        xor a
 137+ 7858 32 D1 77                             ld      (AttractStep),a
 138+ 785B C9                                   ret
 139+ 785C
 140+ 785C
 141+ 785C
 142+ 785C 06 01        SelectARandomShip:      ld      b,1                             ; Demo screen uses slot 1
 143+ 785E                                      MMUSelectUniverseN  1
 143+ 785E ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 144+ 7862                                      MMUSelectShipBank1
 144+ 7862 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 145+ 7866 FD 26 01                             ld      iyh, 1
 146+ 7869 CD DE 87     .SelectRandom:          call    doRandom
 147+ 786C                                      JumpIfAGTENusng ShipID_Rattler+1, .SelectRandom
 147+ 786C FE 2C       >                        cp     ShipID_Rattler+1
 147+ 786E D2 69 78    >                        jp		nc,.SelectRandom
 148+ 7871 FD 6F                                ld      iyl,a
 149+ 7873 CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
 150+ 7876                                      MMUSelectShipBankA
 150+ 7876 ED 92 57    >					 nextreg ShipModelMMU,	    a
 151+ 7879 78                                   ld      a,b
 152+ 787A CD 6A E0                             call    CopyShipToUniverse
 153+ 787D 3A 45 C3                             ld      a,(ShipTypeAddr)
 154+ 7880 CB 7F                                bit     7,a                                 ; is it a type we don't want in attract mode
 155+ 7882 20 E5                                jr      nz,.SelectRandom
 156+ 7884 3E 01                                ld      a,1                                 ; slot 1, iyh and iyl already set
 157+ 7886 CD B2 C7                             call    UnivInitRuntime
 158+ 7889 CD 8E C6                             call    UnivSetDemoPostion
 159+ 788C 21 E0 01                             ld      hl,AttractDuration*2
 160+ 788F 22 2B 77                             ld      (AttractTimer),hl
 161+ 7892 3E 80                                ld      a, AttractCounterStart
 162+ 7894 32 2D 77                             ld      (AttractCounter),a
 163+ 7897                                      ZeroA
 163+ 7897 AF          >                        xor a
 164+ 7898 32 D1 77                             ld      (AttractStep),a
 165+ 789B C9                                   ret
 166+ 789C
 167+ 789C
 168+ 789C
# file closed: ./Menus/AttractMode.asm
 566  789C
 567  789C                  include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 789C              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 789C              ; so xx12 = XX15 * XX16 row
   3+ 789C              XX12ProcessOneRow:
   4+ 789C              XX12CalcXCell:
   5+ 789C ED 4B A6 C0          ld		bc,(UBnkXScaled)
   6+ 78A0 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 78A1 23           		inc		hl
   8+ 78A2 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 78A3 7A           		ld		a,d
  10+ 78A4 A8                   xor     b
  11+ 78A5 E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 78A7 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 78A9 78           		ld		a,b                                     ; now make bc abs bc
  14+ 78AA E6 7F        		and		SignMask8Bit
  15+ 78AC 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 78AD E5           		push	hl
  17+ 78AE 16 00                ld      d,0                                     ; d = value
  18+ 78B0 60           		ld		h,b
  19+ 78B1 69           		ld		l,c
  20+ 78B2 CD 55 95     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 78B5 22 73 7D     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 78B8 DD 7C        		ld		a,ixh
  23+ 78BA 32 7A 7D     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 78BD E1           		pop		hl
  25+ 78BE              XX12CalcYCell:
  26+ 78BE ED 4B A8 C0          ld		bc,(UBnkYScaled)
  27+ 78C2 23           		inc		hl
  28+ 78C3 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 78C4 23           		inc		hl
  30+ 78C5 56           		ld		d,(hl)
  31+ 78C6 7A           		ld		a,d
  32+ 78C7 A8                   xor     b
  33+ 78C8 E6 80        		and		SignOnly8Bit
  34+ 78CA DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 78CC 78           		ld		a,b                                     ; now make bc abs bc
  36+ 78CD E6 7F        		and		SignMask8Bit
  37+ 78CF 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 78D0 E5           		push	hl
  39+ 78D1 16 00                ld      d,0                                     ; d = value
  40+ 78D3 60           		ld		h,b
  41+ 78D4 69           		ld		l,c
  42+ 78D5 CD 55 95     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 78D8 22 75 7D     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 78DB DD 7C        		ld		a,ixh
  45+ 78DD 32 79 7D     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 78E0 E1           		pop		hl
  47+ 78E1              XX12CalcZCell:
  48+ 78E1 ED 4B AA C0          ld		bc,(UBnkZScaled)
  49+ 78E5 23           		inc		hl
  50+ 78E6 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 78E7 23           		inc		hl
  52+ 78E8 56           		ld		d,(hl)
  53+ 78E9 7A           		ld		a,d
  54+ 78EA A8                   xor     b
  55+ 78EB E6 80        		and		SignOnly8Bit
  56+ 78ED DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 78EF 78           		ld		a,b                                     ; now make bc abs bc
  58+ 78F0 E6 7F        		and		SignMask8Bit
  59+ 78F2 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 78F3 16 00                ld      d,0                                     ; d = value
  61+ 78F5 60           		ld		h,b
  62+ 78F6 69           		ld		l,c
  63+ 78F7 CD 55 95     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 78FA 22 77 7D     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 78FD DD 7C        		ld		a,ixh
  66+ 78FF 32 7B 7D     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 7902              XX12CalcCellResult:
  68+ 7902 2A 73 7D     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 7905 ED 5B 75 7D  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 7909 ED 4B 79 7D  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 790D              XX12MSBOnly:
  72+ 790D 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 790E 5A           		ld		e,d									    ; for both results
  74+ 790F AF           		xor		a									    ;
  75+ 7910 67           		ld		h,a									    ;
  76+ 7911 57           		ld		d,a									    ; so set high byte to 0
  77+ 7912 CD 92 92     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 7915 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 7916 3A 7B 7D     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 7919 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 791A ED 5B 77 7D  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 791E 5A           		ld		e,d                                     ; d = result /256
  83+ 791F 16 00        		ld		d,0									    ; and only us high byte
  84+ 7921 CD 92 92     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 7924 C9           		ret											    ; hl = result, a = sign
  86+ 7925              								    ; hl = result, a = sign
  87+ 7925
  88+ 7925              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 7925              ;...X cell
  90+ 7925 21 79 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 7928 CD 9C 78             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 792B 47           		ld		b,a                                 ; b = sign
  93+ 792C 7C           		ld		a,h                                 ; a = high byte
  94+ 792D B0           		or		b
  95+ 792E 32 AD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 7931 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 7932 32 AC C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 7935              ;...Y cell
  99+ 7935 21 81 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 7938 CD 9C 78             call    XX12ProcessOneRow
 101+ 793B 47           		ld		b,a
 102+ 793C 7C           		ld		a,h
 103+ 793D              ;		ld		a,l
 104+ 793D B0           		or		b
 105+ 793E 32 AF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 7941 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 7942 32 AE C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 7945              ;...Z cell
 109+ 7945 21 89 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 7948 CD 9C 78             call    XX12ProcessOneRow
 111+ 794B 47           		ld		b,a
 112+ 794C 7C                   ld		a,h
 113+ 794D              ;		ld		a,l
 114+ 794D B0           		or		b
 115+ 794E 32 B1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 7951 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 7952 32 B0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 7955 C9                   ret
 119+ 7956
 120+ 7956              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 7956              ;...X cell
 122+ 7956 21 79 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 7959 CD 9C 78             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 795C 47           		ld		b,a                                 ; b = sign
 125+ 795D 7C           		ld		a,h                                 ; a = high byte
 126+ 795E B0           		or		b
 127+ 795F 32 AD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 7962 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 7963 32 AC C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 7966              ;...Y cell
 131+ 7966 21 81 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 7969 CD 9C 78             call    XX12ProcessOneRow
 133+ 796C 47           		ld		b,a
 134+ 796D 7C           		ld		a,h
 135+ 796E              ;		ld		a,l
 136+ 796E B0           		or		b
 137+ 796F 32 AF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 7972 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 7973 32 AE C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 7976              ;...Z cell
 141+ 7976 21 89 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 7979 CD 9C 78             call    XX12ProcessOneRow
 143+ 797C 47           		ld		b,a
 144+ 797D 7C                   ld		a,h
 145+ 797E              ;		ld		a,l
 146+ 797E B0           		or		b
 147+ 797F 32 B1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 7982 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 7983 32 B0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 7986 C9                   ret
 151+ 7987
 152+ 7987              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 7987              ;...X cell
 154+ 7987 21 61 C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 798A CD 9C 78             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 798D 47           		ld		b,a                                 ; b = sign
 157+ 798E 7C           		ld		a,h                                 ; a = high byte
 158+ 798F B0           		or		b
 159+ 7990 32 AD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 7993 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 7994 32 AC C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 7997              ;...Y cell
 163+ 7997 21 67 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 799A CD 9C 78             call    XX12ProcessOneRow
 165+ 799D 47           		ld		b,a
 166+ 799E 7C           		ld		a,h
 167+ 799F              ;		ld		a,l
 168+ 799F B0           		or		b
 169+ 79A0 32 AF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 79A3 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 79A4 32 AE C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 79A7              ;...Z cell
 173+ 79A7 21 6D C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 79AA CD 9C 78             call    XX12ProcessOneRow
 175+ 79AD 47           		ld		b,a
 176+ 79AE 7C                   ld		a,h
 177+ 79AF              ;		ld		a,l
 178+ 79AF B0           		or		b
 179+ 79B0 32 B1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 79B3 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 79B4 32 B0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 79B7 C9                   ret
# file closed: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
 568  79B8                  include "./ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1+ 79B8 21 AC C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 79BB 11 A6 C0                             ld      de,XX15
   3+ 79BE 01 06 00                             ld      bc,6
   4+ 79C1 ED B0                                ldir
   5+ 79C3 C9                                   ret
   6+ 79C4
   7+ 79C4 21 AC C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 79C7 11 B2 C0                             ld      de,XX12Save
   9+ 79CA 01 06 00                             ld      bc,6
  10+ 79CD ED B0                                ldir
  11+ 79CF C9                                   ret
  12+ 79D0
  13+ 79D0 21 B2 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 79D3 11 AC C0                             ld      de,XX12
  15+ 79D6 01 06 00                             ld      bc,6
  16+ 79D9 ED B0                                ldir
  17+ 79DB C9                                   ret
  18+ 79DC
  19+ 79DC 21 AC C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 79DF 11 B8 C0                             ld      de,XX12Save2
  21+ 79E2 01 06 00                             ld      bc,6
  22+ 79E5 ED B0                                ldir
  23+ 79E7 C9                                   ret
  24+ 79E8
  25+ 79E8 21 B8 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 79EB 11 AC C0                             ld      de,XX12
  27+ 79EE 01 06 00                             ld      bc,6
  28+ 79F1 ED B0                                ldir
  29+ 79F3 C9                                   ret
  30+ 79F4
# file closed: ./ModelRender/CopyXX12ToXX15.asm
 569  79F4                  include "./ModelRender/CopyXX15ToXX12.asm"
# file opened: ./ModelRender/CopyXX15ToXX12.asm
   1+ 79F4 21 A6 C0     CopyXX15ToXX12:         ld		hl,XX15
   2+ 79F7 11 AC C0                             ld      de,XX12
   3+ 79FA 01 06 00                             ld      bc,6
   4+ 79FD ED B0                                ldir
   5+ 79FF C9                                   ret
   6+ 7A00
   7+ 7A00
   8+ 7A00
   9+ 7A00 21 A6 C0     CopyXX15ToXX15Save:     ld		hl,XX15
  10+ 7A03 11 C1 C0                             ld      de,XX15Save
  11+ 7A06 01 06 00                             ld      bc,6
  12+ 7A09 ED B0                                ldir
  13+ 7A0B C9                                   ret
  14+ 7A0C
  15+ 7A0C 21 C1 C0     CopyXX15SaveToXX15:     ld		hl,XX15Save
  16+ 7A0F 11 A6 C0                             ld      de,XX15
  17+ 7A12 01 06 00                             ld      bc,6
  18+ 7A15 ED B0                                ldir
  19+ 7A17 C9                                   ret
  20+ 7A18
  21+ 7A18 21 A6 C0     CopyXX15ToXX15Save2:    ld		hl,XX15
  22+ 7A1B 11 C9 C0                             ld      de,XX15Save2
  23+ 7A1E 01 06 00                             ld      bc,6
  24+ 7A21 ED B0                                ldir
  25+ 7A23 C9                                   ret
  26+ 7A24
  27+ 7A24 21 C9 C0     CopyXX15Save2ToXX15:    ld		hl,XX15Save2
  28+ 7A27 11 A6 C0                             ld      de,XX15
  29+ 7A2A 01 06 00                             ld      bc,6
  30+ 7A2D ED B0                                ldir
  31+ 7A2F C9                                   ret
  32+ 7A30
# file closed: ./ModelRender/CopyXX15ToXX12.asm
 570  7A30                  include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ./Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 7A30              ScaleXX16Matrix197:
   2+ 7A30                      IFDEF LOGMATHS
   3+ 7A30 ~                                    ld		b,9                 ; Interate though all 9 matrix elements
   4+ 7A30 ~                                    ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5+ 7A30 ~                                    MMUSelectMathsTables
   6+ 7A30 ~            .ScaleXX16Loop:         ld		e,(hl)              ; set DE = matrix value              ;
   7+ 7A30 ~                                    inc		hl                  ;
   8+ 7A30 ~                                    ld		a,(hl)              ;
   9+ 7A30 ~                                    ld		d,a                 ;
  10+ 7A30 ~                                    and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  11+ 7A30 ~                                    ld		ixl,a				; retain for sign bit
  12+ 7A30 ~                                    ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13+ 7A30 ~                                    ld      a,d                 ; a = high byte after x 2
  14+ 7A30 ~                                    push	bc                  ; save BC  counter and constant 197
  15+ 7A30 ~                                    push	hl                  ; save HL
  16+ 7A30 ~                                    call    AEquAmul256Div197Log;
  17+ 7A30 ~                                    pop		hl
  18+ 7A30 ~                                    dec     hl                  ; move back to low byte
  19+ 7A30 ~                                    ld      (hl),a              ; save result in low byte as we want to preserve high byte sign
  20+ 7A30 ~                                    inc     hl                  ; move back to high byte
  21+ 7A30 ~                                    ld      a,ixl
  22+ 7A30 ~                                    ld      (hl),a              ; write back just sign bit
  23+ 7A30 ~                                    pop		bc                  ; retrieve both counter and constant 197
  24+ 7A30 ~                                    inc     hl                  ; no to next vertex value
  25+ 7A30 ~                                    djnz	.ScaleXX16Loop
  26+ 7A30 ~                                    MMUSelectROM0
  27+ 7A30 ~                                    ret
  28+ 7A30                      ELSE
  29+ 7A30 06 09                                ld		b,9                 ; Interate though all 9 matrix elements
  30+ 7A32 0E C5                                ld		c,ConstNorm         ; c = 197
  31+ 7A34 21 61 C0                             ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
  32+ 7A37 7E           .ScaleXX16Loop:         ld		a,(hl)              ; set DE = matrix value
  33+ 7A38 5F                                   ld		e,a                 ;
  34+ 7A39 23                                   inc		hl                  ;
  35+ 7A3A 7E                                   ld		a,(hl)              ;
  36+ 7A3B 57                                   ld		d,a                 ;
  37+ 7A3C E6 80                                and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  38+ 7A3E DD 6F                                ld		ixl,a				; retain for sign bit
  39+ 7A40                                      ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  39+ 7A40 CB 23       >			   sla e
  39+ 7A42 CB 12       >			   rl  d
  40+ 7A44 7A                                   ld      a,d                 ; a = high byte after x 2
  41+ 7A45 C5                                   push	bc                  ; save BC  counter and constant 197
  42+ 7A46 E5                                   push	hl                  ; save HL
  43+ 7A47 CD D7 97                             call	DIV16Amul256dCUNDOC; AEquAmul256DivD; DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  44+ 7A4A E1                                   pop		hl
  45+ 7A4B 2B                                   dec     hl                  ; move back to low byte
  46+ 7A4C 71                                   ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  47+ 7A4D 23                                   inc     hl                  ; move back to high byte
  48+ 7A4E                                  ;    ld      a,(hl)
  49+ 7A4E                                  ;    and     $80
  50+ 7A4E DD 7D                                ld      a,ixl
  51+ 7A50 77                                   ld      (hl),a              ; write back just sign bit
  52+ 7A51 C1                                   pop		bc                  ; retrieve both counter and constant 197
  53+ 7A52 23                                   inc     hl                  ; no to next vertex value
  54+ 7A53 10 E2                                djnz	.ScaleXX16Loop
  55+ 7A55 C9                                   ret
  56+ 7A56                      ENDIF
# file closed: ./Maths/Utilities/ScaleXX16Matrix197.asm
 571  7A56
 572  7A56                  include "./Universe/StarDust/StarRoutines.asm"
# file opened: ./Universe/StarDust/StarRoutines.asm
   1+ 7A56              ;note: DIV16Amul256dCUNDOC as per
   2+ 7A56              ;                                   BC = A0
   3+ 7A56              ;                                   DE = 0C
   4+ 7A56              ;                                   so BC = a * 256 / C
   5+ 7A56
   6+ 7A56              ; We can cheat here, Speed is always 0 or positive
   7+ 7A56              ; z postion will always be positive if we can see it
   8+ 7A56
   9+ 7A56 EB           InitStarAtHL:           ex      de,hl               ; preserving hl
  10+ 7A57 CD DE 87                             call    doRND               ; a = random OR bit 5
  11+ 7A5A EB                                   ex      de,hl               ; .
  12+ 7A5B F6 08                                or      8                   ; .
  13+ 7A5D 77                                   ld      (hl),a              ; save to x pos
  14+ 7A5E E6 7F                                and     $7F                 ; a = abs a
  15+ 7A60 23                                   inc     hl                  ;
  16+ 7A61 77                                   ld      (hl),a              ;
  17+ 7A62 EB                                   ex      de,hl               ; preserving hl
  18+ 7A63 CD DE 87                             call    doRND               ; a = -ve (random / 2)
  19+ 7A66 EB                                   ex      de,hl               ; .
  20+ 7A67 0F                                   rrca                        ; .
  21+ 7A68 E6 80                                and     $80                 ; .
  22+ 7A6A B6                                   or      (hl)                ; or with
  23+ 7A6B 77                                   ld      (hl),a
  24+ 7A6C 23                                   inc     hl
  25+ 7A6D EB                                   ex      de,hl
  26+ 7A6E CD DE 87                             call    doRND
  27+ 7A71 EB                                   ex      de,hl
  28+ 7A72 F6 04                                or      4
  29+ 7A74 77                                   ld      (hl),a
  30+ 7A75 23                                   inc     hl
  31+ 7A76 E6 7F                                and     $7F
  32+ 7A78 77                                   ld      (hl),a
  33+ 7A79 EB                                   ex      de,hl
  34+ 7A7A CD DE 87                             call    doRND
  35+ 7A7D EB                                   ex      de,hl
  36+ 7A7E 0F                                   rrca
  37+ 7A7F E6 80                                and     $80
  38+ 7A81 B6                                   or      (hl)
  39+ 7A82 77                                   ld      (hl),a
  40+ 7A83 23                                   inc     hl
  41+ 7A84 EB                                   ex      de,hl
  42+ 7A85 CD DE 87                             call    doRND
  43+ 7A88 EB                                   ex      de,hl
  44+ 7A89 F6 90                                or      144
  45+ 7A8B 77                                   ld      (hl),a
  46+ 7A8C 23                                   inc     hl
  47+ 7A8D F6 70                                or      %01110000
  48+ 7A8F E6 7F                                and     $7f     ; bodge
  49+ 7A91 77                                   ld      (hl),a
  50+ 7A92 23                                   inc     hl
  51+ 7A93 C9                                   ret
  52+ 7A94
  53+ 7A94 EB           InitHyperStarAtHL:      ex      de,hl
  54+ 7A95 CD DE 87                             call    doRND
  55+ 7A98 CB 27                                sla     a
  56+ 7A9A CB 27                                sla     a                ; so its * 4 as we have a blank spot
  57+ 7A9C EB                                   ex      de,hl
  58+ 7A9D E6 F8                                and     %11111000
  59+ 7A9F 77                                   ld      (hl),a
  60+ 7AA0 E6 7F                                and     $7F
  61+ 7AA2 23                                   inc     hl
  62+ 7AA3 77                                   ld      (hl),a
  63+ 7AA4 EB                                   ex      de,hl
  64+ 7AA5 CD DE 87                             call    doRND
  65+ 7AA8 EB                                   ex      de,hl
  66+ 7AA9 0F                                   rrca
  67+ 7AAA E6 80                                and     $80
  68+ 7AAC B6                                   or      (hl)
  69+ 7AAD 77                                   ld      (hl),a
  70+ 7AAE 23                                   inc     hl
  71+ 7AAF EB                                   ex      de,hl
  72+ 7AB0 CD DE 87                             call    doRND
  73+ 7AB3 CB 27                                sla     a
  74+ 7AB5 CB 27                                sla     a               ; so its * 4 as we have a blank spot
  75+ 7AB7 EB                                   ex      de,hl
  76+ 7AB8 E6 F8                                and     %11111000
  77+ 7ABA 77                                   ld      (hl),a
  78+ 7ABB 23                                   inc     hl
  79+ 7ABC E6 7F                                and     $7F
  80+ 7ABE 77                                   ld      (hl),a
  81+ 7ABF EB                                   ex      de,hl
  82+ 7AC0 CD DE 87                             call    doRND
  83+ 7AC3 EB                                   ex      de,hl
  84+ 7AC4 0F                                   rrca
  85+ 7AC5 E6 80                                and     $80
  86+ 7AC7 B6                                   or      (hl)
  87+ 7AC8 77                                   ld      (hl),a
  88+ 7AC9 23                                   inc     hl
  89+ 7ACA EB                                   ex      de,hl
  90+ 7ACB CD DE 87                             call    doRND
  91+ 7ACE EB                                   ex      de,hl
  92+ 7ACF F6 5F                                or      95
  93+ 7AD1 77                                   ld      (hl),a
  94+ 7AD2 23                                   inc     hl
  95+ 7AD3 F6 70                                or      %01110000
  96+ 7AD5 E6 7F                                and     $7f     ; bodge
  97+ 7AD7 77                                   ld      (hl),a
  98+ 7AD8 23                                   inc     hl
  99+ 7AD9 C9                                   ret
 100+ 7ADA
 101+ 7ADA              ;----------------------------------------------------------------------------------------------------------------------------------
 102+ 7ADA 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 103+ 7ADC 21 B0 82                             ld      hl,varDust
 104+ 7ADF CD 56 7A     .InitStarsLoop:         call    InitStarAtHL
 105+ 7AE2 10 FB                                djnz    .InitStarsLoop
 106+ 7AE4 C9                                   ret
 107+ 7AE5              ;----------------------------------------------------------------------------------------------------------------------------------
 108+ 7AE5 06 0B        InitialiseHyperStars:   ld      b,MaxNumberOfStars
 109+ 7AE7 21 B0 82                             ld      hl,varDust
 110+ 7AEA CD 94 7A     .InitStarsLoop:         call    InitHyperStarAtHL
 111+ 7AED 10 FB                                djnz    .InitStarsLoop
 112+ 7AEF C9                                   ret
 113+ 7AF0              ;----------------------------------------------------------------------------------------------------------------------------------
 114+ 7AF0 FD 21 B0 82  SaveCurrentDust:        ld          iy,varDust
 115+ 7AF4 DD 21 9A 82                          ld          ix,varDustWarpRender
 116+ 7AF8 06 0B                                ld          b, MaxNumberOfStars
 117+ 7AFA FD 7E 01     .SaveLoop               ld          a,(iy+1)
 118+ 7AFD 6F                                   ld          l,a
 119+ 7AFE E6 7F                                and         $7F
 120+ 7B00                                      JumpOnBitSet l,7,.StarNegXPt
 120+ 7B00 CB 7D       >                        bit 	7,l
 120+ 7B02 C2 0B 7B    >                        jp      nz,.StarNegXPt
 121+ 7B05 C6 80                                add         a,$80
 122+ 7B07 5F                                   ld          e,a
 123+ 7B08 C3 10 7B                             jp          .StarDoneX
 124+ 7B0B 57           .StarNegXPt:            ld          d,a
 125+ 7B0C 3E 80                                ld          a,$80
 126+ 7B0E 92                                   sub         d
 127+ 7B0F 5F                                   ld          e,a
 128+ 7B10 FD 7E 03     .StarDoneX:             ld          a,(iy+3)
 129+ 7B13 6F                                   ld          l,a
 130+ 7B14 E6 7F                                and         $7F
 131+ 7B16                                      JumpOnBitSet l,7,.StarNegYPt
 131+ 7B16 CB 7D       >                        bit 	7,l
 131+ 7B18 C2 21 7B    >                        jp      nz,.StarNegYPt
 132+ 7B1B C6 60                                add         a,$60
 133+ 7B1D 57                                   ld          d,a
 134+ 7B1E C3 26 7B                             jp          .StarDoneY
 135+ 7B21 57           .StarNegYPt:            ld          d,a
 136+ 7B22 3E 60                                ld          a,$60
 137+ 7B24 92                                   sub         d
 138+ 7B25 57                                   ld          d,a
 139+ 7B26 DD 73 00     .StarDoneY:             ld          (ix+0),e
 140+ 7B29 DD 72 01                             ld          (ix+1),d
 141+ 7B2C DD 23                                inc         ix
 142+ 7B2E DD 23                                inc         ix
 143+ 7B30 FD E5 E1                             ld          hl,iy
 144+ 7B33 3E 06                                ld          a,6
 145+ 7B35 ED 31                                add         hl,a
 146+ 7B37 E5 FD E1                             ld          iy,hl
 147+ 7B3A 10 BE                                djnz        .SaveLoop
 148+ 7B3C C9                                   ret
 149+ 7B3D
 150+ 7B3D              ;----------------------------------------------------------------------------------------------------------------------------------
 151+ 7B3D 06 0B        DustForward:            ld      b,MaxNumberOfStars                  ; get the number of stars to process
 152+ 7B3F FD 21 B0 82                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 153+ 7B43 C5           StarProcessLoop:        push    bc                                  ; save counter +1
 154+ 7B44 FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)                            ; e  = z high
 155+ 7B47 5F                                   ld      e,a                                 ; d = 0
 156+ 7B48 16 00                                ld      d,0                                 ; de = zhi/256
 157+ 7B4A 3A 99 81                             ld      a,(DELTA)                           ; a = speed
 158+ 7B4D                                      JumpIfAIsNotZero .NormalSpeed               ; if we are stationary set speed
 158+ 7B4D A7          >                        and     a
 158+ 7B4E C2 52 7B    >                        jp	    nz,.NormalSpeed
 159+ 7B51 3C                                   inc     a                                   ; so it is at least some dust movement
 160+ 7B52 47           .NormalSpeed:           ld      b,a                                 ;
 161+ 7B53 0E 00                                ld      c,0                                 ; bc = delta * 256
 162+ 7B55 CD 63 98                             call    BC_Div_DE                           ; BC = Speed/Z , HL = remainder
 163+ 7B58                                      ShiftHLRight1
 163+ 7B58 CB 3C       >			   srl h
 163+ 7B5A CB 1D       >			   rr  l
 164+ 7B5C                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 164+ 7B5C CB 3C       >			   srl h
 164+ 7B5E CB 1D       >			   rr  l
 165+ 7B60 7D                                   ld      a,l                                 ;
 166+ 7B61 F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 167+ 7B63 DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 168+ 7B65 FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 168+ 7B69 66 05
 169+ 7B6B ED 5B 9A 81                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 170+ 7B6F CD 84 93                             call    subHLDES15
 171+ 7B72                                      JumpOnBitSet h,7,ResetStar                  ; if z ended up negative then reset the star
 171+ 7B72 CB 7C       >                        bit 	7,h
 171+ 7B74 C2 C9 7C    >                        jp      nz,ResetStar
 172+ 7B77 FD 75 04 FD                          ld      (iy+4),hl                           ; save new z pos
 172+ 7B7B 74 05
 173+ 7B7D FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 173+ 7B81 66 01
 174+ 7B83 7C                                   ld      a,h                                 ;
 175+ 7B84 E6 7F                                and     $7F                                 ;
 176+ 7B86 57                                   ld      d,a                                 ; d = abs(x hi)
 177+ 7B87 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 178+ 7B89 ED 30                                mul                                         ; de =  abs(x hi) * Q
 179+ 7B8B 7C                                   ld      a,h                                 ;
 180+ 7B8C E6 80                                and     $80                                 ;
 181+ 7B8E B2                                   or      d                                   ; set sign bit in d
 182+ 7B8F 57                                   ld      d,a                                 ;
 183+ 7B90 CD B5 92                             call    ADDHLDESignedV4                  ; x = x + (x hi/256 * Q)
 184+ 7B93 7C                                   ld      a,h
 185+ 7B94 E6 7F                                and     $7F
 186+ 7B96                                      JumpIfAGTENusng $70, ResetStar
 186+ 7B96 FE 70       >                        cp     $70
 186+ 7B98 D2 C9 7C    >                        jp		nc,ResetStar
 187+ 7B9B FD 75 00 FD                          ld      (iy+0),hl                           ;
 187+ 7B9F 74 01
 188+ 7BA1 FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 188+ 7BA5 66 03
 189+ 7BA7 7C                                   ld      a,h                                 ;
 190+ 7BA8 E6 7F                                and     $7F                                 ;
 191+ 7BAA 57                                   ld      d,a                                 ; d = abs(y hi)
 192+ 7BAB DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 193+ 7BAD ED 30                                mul                                         ; de =  abs(y hi) * Q
 194+ 7BAF 7C                                   ld      a,h                                 ;
 195+ 7BB0 E6 80                                and     $80                                 ;
 196+ 7BB2 B2                                   or      d                                   ; set sign bit in d
 197+ 7BB3 57                                   ld      d,a                                 ;
 198+ 7BB4 CD B5 92                             call    ADDHLDESignedV4                  ; y = y + (x hi/256 * Q)
 199+ 7BB7 7C                                   ld      a,h
 200+ 7BB8 E6 7F                                and     $7F
 201+ 7BBA                                      JumpIfAGTENusng $60, ResetStar
 201+ 7BBA FE 60       >                        cp     $60
 201+ 7BBC D2 C9 7C    >                        jp		nc,ResetStar
 202+ 7BBF 7C                                   ld      a,h
 203+ 7BC0 E6 80                                and     $80
 204+ 7BC2 20 06                                jr      nz,.NoSecondCheck
 205+ 7BC4 7C                                   ld      a,h
 206+ 7BC5                                      JumpIfAGTENusng $20, ResetStar
 206+ 7BC5 FE 20       >                        cp     $20
 206+ 7BC7 D2 C9 7C    >                        jp		nc,ResetStar
 207+ 7BCA FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 207+ 7BCE 74 03
 208+ 7BD0              ; Now roll
 209+ 7BD0              ;  6. x = x - alpha * y / 256
 210+ 7BD0 3A B9 80     .XRoll:                 ld      a,(ALP1)                           ; h = sign, l = magnitude
 211+ 7BD3 FE 00                                cp      0
 212+ 7BD5 28 4D                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 213+ 7BD7                                   ;   break
 214+ 7BD7 6F                                   ld      l,a                                 ; roll magnitude
 215+ 7BD8 3A BB 80                             ld      a,(ALP2FLIP)                        ; inverted roll sign
 216+ 7BDB E6 80                                and     SignOnly8Bit                        ; sanitise sign bit
 217+ 7BDD 67                                   ld      h,a                                 ; h = roll sign
 218+ 7BDE E5                                   push    hl                                  ; save on the stack
 219+ 7BDF 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 220+ 7BE0 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 221+ 7BE1 FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 222+ 7BE4 5F                                   ld      e,a                                 ; save signed byte
 223+ 7BE5 E6 80                                and     SignOnly8Bit                        ; a = sign only
 224+ 7BE7 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 225+ 7BE8 7B           .rxEEquABSignX:         ld      a,e                                 ; e = abs byte
 226+ 7BE9 E6 7F                                and     SignMask8Bit
 227+ 7BEB 5F                                   ld      e,a                                 ; save abs x hi in e
 228+ 7BEC ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 229+ 7BEE 79                                   ld      a,c                                 ; get back sign from roll
 230+ 7BEF A8                                   xor     b                                   ; handle muliple sign bits
 231+ 7BF0 B2                                   or      d
 232+ 7BF1 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 233+ 7BF2 FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 233+ 7BF6 66 01
 234+ 7BF8 CD 84 93                             call    subHLDES15                       ; we are usign add, so may need to fip sign?
 235+ 7BFB FD 75 00 FD                          ld      (iy+0),hl
 235+ 7BFF 74 01
 236+ 7C01              ;  5. y = y + alpha * x / 256
 237+ 7C01              .YRoll:                 ;break
 238+ 7C01 E1                                   pop     hl                                  ; h = sign, l = magnitude
 239+ 7C02 4C           .rySaveAlphaSign:       ld      c,h                                 ; save alpha sign in c
 240+ 7C03 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 241+ 7C04 FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 242+ 7C07 5F                                   ld      e,a
 243+ 7C08 E6 80                                and     SignOnly8Bit
 244+ 7C0A 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 245+ 7C0B 7B           .ryEEquABSignX:         ld      a,e
 246+ 7C0C E6 7F                                and     SignMask8Bit
 247+ 7C0E 5F                                   ld      e,a                                 ; save abs x hi in e
 248+ 7C0F ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 249+ 7C11 79                                   ld      a,c
 250+ 7C12 A8                                   xor     b                                   ; handle muliple sign bits
 251+ 7C13 B2                                   or      d
 252+ 7C14 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 253+ 7C15 FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 253+ 7C19 66 03
 254+ 7C1B CD B5 92                             call    ADDHLDESignedV4                  ; we are usign add, so may need to fip sign?
 255+ 7C1E FD 75 02 FD                          ld      (iy+2),hl
 255+ 7C22 74 03
 256+ 7C24 3A AD 80     .NoRoll:                ld      a,(BET1)
 257+ 7C27 FE 00                                cp      0
 258+ 7C29 28 22                                jr      z,.NoPitch
 259+ 7C2B              ;  8. y = y - beta * 256
 260+ 7C2B 57           .YPitch:                ld      d,a                                 ; d = BET1
 261+ 7C2C FD 7E 02                             ld      a,(iy+2)
 262+ 7C2F 5F                                   ld      e,a                                 ; e = Y HI
 263+ 7C30 ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 264+ 7C32 5F                                   ld      e,a
 265+ 7C33 ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 266+ 7C35                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 266+ 7C35 CB 23       >			   sla e
 266+ 7C37 CB 12       >			   rl  d
 267+ 7C39 3A AE 80                             ld      a,(BET2)                            ; get inverted Sign
 268+ 7C3C B2                                   or      d
 269+ 7C3D 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 270+ 7C3E FD 6E 02 FD                          ld      hl,(iy+2)
 270+ 7C42 66 03
 271+ 7C44 CD B5 92                             call    ADDHLDESignedV4
 272+ 7C47 FD 75 02 FD                          ld      (iy+2),hl
 272+ 7C4B 74 03
 273+ 7C4D              ; now work out screen pos
 274+ 7C4D              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 275+ 7C4D              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 276+ 7C4D              ;        pop     de
 277+ 7C4D               ;       call    ProjectStarXToScreen
 278+ 7C4D                                      ;pop     de
 279+ 7C4D              .NoPitch:
 280+ 7C4D FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 281+ 7C50 6F                                   ld      l,a
 282+ 7C51 E6 7F                                and     $7F
 283+ 7C53                                      JumpOnBitSet l,7,StarNegXPt
 283+ 7C53 CB 7D       >                        bit 	7,l
 283+ 7C55 C2 5E 7C    >                        jp      nz,StarNegXPt
 284+ 7C58 C6 80                                add     a,$80
 285+ 7C5A 4F                                   ld      c,a
 286+ 7C5B C3 63 7C                             jp      StarDoneX
 287+ 7C5E 47           StarNegXPt:             ld      b,a
 288+ 7C5F 3E 80                                ld      a,$80
 289+ 7C61 90                                   sub     b
 290+ 7C62 4F                                   ld      c,a
 291+ 7C63 FD 7E 03     StarDoneX:              ld      a,(iy+3)
 292+ 7C66 6F                                   ld      l,a
 293+ 7C67 E6 7F                                and     $7F
 294+ 7C69                                      JumpOnBitSet l,7,StarNegYPt
 294+ 7C69 CB 7D       >                        bit 	7,l
 294+ 7C6B C2 74 7C    >                        jp      nz,StarNegYPt
 295+ 7C6E C6 60                                add     a,$60
 296+ 7C70 47                                   ld      b,a
 297+ 7C71 C3 79 7C                             jp      StarDoneY
 298+ 7C74 47           StarNegYPt:             ld      b,a
 299+ 7C75 3E 60                                ld      a,$60
 300+ 7C77 90                                   sub     b
 301+ 7C78 47                                   ld      b,a
 302+ 7C79 3E 92        StarDoneY:              ld      a,L2DustColour
 303+ 7C7B C5                                   push    bc
 304+ 7C7C              .DrawStar:              MMUSelectLayer2
 304+ 7C7C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 305+ 7C80 CD B9 E2                             call    l2_plot_pixel
 306+ 7C83 FD 7E 05                             ld      a,(iy+5)
 307+ 7C86 C1                                   pop    bc
 308+ 7C87                                      JumpIfAGTENusng $60,EndofStarsLoop
 308+ 7C87 FE 60       >                        cp     $60
 308+ 7C89 D2 B9 7C    >                        jp		nc,EndofStarsLoop
 309+ 7C8C 3E 92                                ld      a,L2DustColour
 310+ 7C8E 0C                                   inc     c
 311+ 7C8F C5                                   push    bc
 312+ 7C90                                      MMUSelectLayer2
 312+ 7C90 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 313+ 7C94 CD B9 E2                             call    l2_plot_pixel
 314+ 7C97 FD 7E 05                             ld      a,(iy+5)
 315+ 7C9A C1                                   pop    bc
 316+ 7C9B                                      JumpIfAGTENusng $37,EndofStarsLoop
 316+ 7C9B FE 37       >                        cp     $37
 316+ 7C9D D2 B9 7C    >                        jp		nc,EndofStarsLoop
 317+ 7CA0 3E 92                                ld      a,L2DustColour
 318+ 7CA2 04                                   inc     b
 319+ 7CA3 C5                                   push    bc
 320+ 7CA4                                      MMUSelectLayer2
 320+ 7CA4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ 7CA8 CD B9 E2                             call    l2_plot_pixel
 322+ 7CAB FD 7E 05                             ld      a,(iy+5)
 323+ 7CAE C1                                   pop    bc
 324+ 7CAF 3E 92                                ld      a,L2DustColour
 325+ 7CB1 0D                                   dec     c
 326+ 7CB2                                      MMUSelectLayer2
 326+ 7CB2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 327+ 7CB6 CD B9 E2                             call    l2_plot_pixel
 328+ 7CB9 C1           EndofStarsLoop:         pop     bc                                      ;  0
 329+ 7CBA FD E5        NextStarLoop3:          push    iy                                      ; +1
 330+ 7CBC E1                                   pop     hl                                      ;  0
 331+ 7CBD ED 34 06 00                          add     hl,6
 332+ 7CC1 E5           NextStarLoop2:          push    hl                                      ; +1
 333+ 7CC2 FD E1                                pop     iy                                      ;  0
 334+ 7CC4 05                                   dec     b
 335+ 7CC5 C2 43 7B                             jp      nz,StarProcessLoop
 336+ 7CC8 C9                                   ret
 337+ 7CC9 C1           ResetStar:              pop     bc                                      ; 0
 338+ 7CCA FD E5                                push    iy                                      ; +1 (current star)
 339+ 7CCC E1                                   pop     hl                                      ; 0
 340+ 7CCD CD 56 7A                             call    InitStarAtHL
 341+ 7CD0 C3 BA 7C                             jp      NextStarLoop3
 342+ 7CD3              ;----------------------------------------------------------------------------------------------------------------------------------
 343+ 7CD3 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 344+ 7CD6 FD 7E 01                             ld      a,(iy+1)
 345+ 7CD9 6F                                   ld      l,a
 346+ 7CDA E6 7F                                and     $7F
 347+ 7CDC 47                                   ld      b,a
 348+ 7CDD CD EE 97                             call    DIV16BCDivDEUNDOC
 349+ 7CE0 7D                                   ld      a,l
 350+ 7CE1                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 350+ 7CE1 CB 7F       >                        bit 	7,a
 350+ 7CE3 C2 EE 7C    >                        jp      nz,StarXNegativePoint
 351+ 7CE6              ;StarXPositivePoint:									; x was positive result
 352+ 7CE6 2E 80                                ld          l,ScreenCenterX						;
 353+ 7CE8 26 00                                ld          h,0
 354+ 7CEA 09                                   add         hl,bc								; hl = Screen Centre + X
 355+ 7CEB C3 F5 7C                             jp          StarStoreXPoint
 356+ 7CEE              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 357+ 7CEE 2E 80                                ld          l,ScreenCenterX
 358+ 7CF0 26 00                                ld          h,0
 359+ 7CF2                                      ClearCarryFlag
 359+ 7CF2 B7          >                        or a
 360+ 7CF3 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 361+ 7CF5              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 362+ 7CF5 7D                                   ld          a,l
 363+ 7CF6 32 08 83                             ld          (varStarX),a
 364+ 7CF9 C9                                   ret
 365+ 7CFA
 366+ 7CFA FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 367+ 7CFD FD 7E 03                             ld          a,(iy+3)
 368+ 7D00 6F                                   ld          l,a
 369+ 7D01 E6 7F                                and         $7F
 370+ 7D03 47                                   ld          b,a
 371+ 7D04 CD EE 97                             call        DIV16BCDivDEUNDOC
 372+ 7D07 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 373+ 7D08                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 373+ 7D08 CB 7F       >                        bit 	7,a
 373+ 7D0A C2 15 7D    >                        jp      nz,StarNegativeYPoint
 374+ 7D0D                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 375+ 7D0D 2E 60                               ld          l,ScreenCenterY
 376+ 7D0F                                      ClearCarryFlag
 376+ 7D0F B7          >                        or a
 377+ 7D10 ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 378+ 7D12 C3 1A 7D                             jp          StarStoreYPoint
 379+ 7D15              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 380+ 7D15 2E 60                                ld          l,ScreenCenterY
 381+ 7D17 26 00                                ld          h,0
 382+ 7D19 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 383+ 7D1A              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 384+ 7D1A 7D                                   ld          a,l
 385+ 7D1B 32 09 83                             ld          (varStarY),a
 386+ 7D1E C9                                   ret
 387+ 7D1F
 388+ 7D1F
# file closed: ./Universe/StarDust/StarRoutines.asm
 573  7D1F              ;    include "Universe/move_object-MVEIT.asm"
 574  7D1F              ;    include "./ModelRender/draw_object.asm"
 575  7D1F              ;    include "./ModelRender/draw_ship_point.asm"
 576  7D1F              ;    include "./ModelRender/drawforwards-LL17.asm"
 577  7D1F              ;    include "./ModelRender/drawforwards-LL17.asm"
 578  7D1F
 579  7D1F                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 7D1F
   2+ 7D1F 00           memfillvalue		DB 0
   3+ 7D20 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 7D24 7D
   4+ 7D25 1F 7D        memfill_astrt  		DW memfillvalue
   5+ 7D27 00 40        memfill_length 		DB $00,$40
   6+ 7D29 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 7D2C 00 00        memfill_bstrt  		DB $00,$00
   8+ 7D2E 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 7D32              memfill_cmd_len	  	EQU $ - memfill
  10+ 7D32
  11+ 7D32              memfill_dma:
  12+ 7D32              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 7D32              .set_fill_value:
  14+ 7D32 32 1F 7D     	ld 		(memfillvalue),a
  15+ 7D35              .set_target:
  16+ 7D35 22 2C 7D     	ld		(memfill_bstrt),hl
  17+ 7D38              .set_length:
  18+ 7D38 ED 53 27 7D  	ld		(memfill_length),de
  19+ 7D3C              .write_dma:
  20+ 7D3C 21 20 7D     	ld 		hl, memfill
  21+ 7D3F 06 12        	ld 		b, memfill_cmd_len
  22+ 7D41 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 7D43 ED B3        	otir
  24+ 7D45 C9           	ret
  25+ 7D46
# file closed: ./Hardware/memfill_dma.asm
 580  7D46                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 7D46
   2+ 7D46 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 7D4A 7D
   3+ 7D4B 00 00        memcopy_astrt  		DB $00,$00
   4+ 7D4D 00 40        memcopy_length 		DB $00,$40
   5+ 7D4F 14 10 CD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_BURST_MODE;DMA_WR4_CONT_MODE
   6+ 7D52 00 00        memcopy_bstrt  		DB $00,$00
   7+ 7D54 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 7D58              memcopy_cmd_len	  	equ $ - memcopy
   9+ 7D58
  10+ 7D58              memcopy_dma:
  11+ 7D58              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 7D58              .set_target:
  13+ 7D58 22 52 7D     	ld		(memcopy_bstrt),hl
  14+ 7D5B              .set_source:
  15+ 7D5B ED 53 4B 7D  	ld		(memcopy_astrt),de
  16+ 7D5F              .set_length:
  17+ 7D5F ED 43 4D 7D  	ld		(memcopy_length),bc
  18+ 7D63              .write_dma:
  19+ 7D63 21 46 7D     	ld 		hl, memcopy
  20+ 7D66 06 12        	ld 		b, memcopy_cmd_len
  21+ 7D68 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 7D6A ED B3        	otir
  23+ 7D6C C9           	ret
  24+ 7D6D
# file closed: ./Hardware/memcopy_dma.asm
 581  7D6D 00 00        XX12PVarQ			DW 0
 582  7D6F 00 00        XX12PVarR			DW 0
 583  7D71 00 00        XX12PVarS			DW 0
 584  7D73 00 00        XX12PVarResult1		DW 0
 585  7D75 00 00        XX12PVarResult2		DW 0
 586  7D77 00 00        XX12PVarResult3		DW 0
 587  7D79 00           XX12PVarSign2		DB 0
 588  7D7A 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
 589  7D7B 00           XX12PVarSign3		DB 0
 590  7D7C                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ 7D7C              ;
   2+ 7D7C              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 7D7C              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 7D7C              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 7D7C              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 7D7C              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 7D7C              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 7D7C              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 7D7C              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 7D7C              ;
  11+ 7D7C              ; Keyboard
  12+ 7D7C              ;
  13+ 7D7C              ;   0      1       2       3       4       5        6       7       8       9
  14+ 7D7C              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 7D7C              ;   10     11      12      13      14      15       16      17      18      19
  16+ 7D7C              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 7D7C              ;   20     21      22      23      24      25       26      27      28      29
  18+ 7D7C              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 7D7C              ;   30     31      32      33      34      35       36      37      38      39
  20+ 7D7C              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 7D7C              ;
  22+ 7D7C              ; Default map
  23+ 7D7C              ;-----------------------------------------------------------------------------------------------------------------------------------
  24+ 7D7C              ;   0          1           2             3              4           5           6           7           8           9
  25+ 7D7C              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  26+ 7D7C              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  27+ 7D7C              ;                                                                                                       Find System
  28+ 7D7C              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 7D7C              ;   10         11          12            13             14          15          16          17          18          19
  30+ 7D7C              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  31+ 7D7C              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  32+ 7D7C              ;-----------------------------------------------------------------------------------------------------------------------------------
  33+ 7D7C              ;   20         Accel       22            23             24          25          26          27          28          29
  34+ 7D7C              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  35+ 7D7C              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  36+ 7D7C              ;   PlanetData                                                      PauseGame   SaveGame
  37+ 7D7C              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 7D7C              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  39+ 7D7C              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  40+ 7D7C              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  41+ 7D7C              ;              ResumeGame                WarpJump
  42+ 7D7C
  43+ 7D7C              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  44+ 7D7C
  45+ 7D7C              c_Pressed_Front         equ 0  * 2
  46+ 7D7C              c_Pressed_Aft           equ 1  * 2
  47+ 7D7C              c_Pressed_Left          equ 2  * 2
  48+ 7D7C              c_Pressed_Right         equ 3  * 2
  49+ 7D7C              c_Pressed_RollLeft      equ 4  * 2
  50+ 7D7C              c_Pressed_RollRight     equ 5  * 2
  51+ 7D7C              c_Pressed_Dive          equ 6  * 2
  52+ 7D7C              c_Pressed_Climb         equ 7  * 2
  53+ 7D7C              c_Pressed_Accellerate   equ 8  * 2
  54+ 7D7C              c_Pressed_Decellerate   equ 9  * 2
  55+ 7D7C              c_Pressed_FireLaser     equ 10 * 2
  56+ 7D7C              c_Pressed_TargetMissle  equ 11 * 2
  57+ 7D7C              c_Pressed_FireMissile   equ 12 * 2
  58+ 7D7C              c_Pressed_UnarmMissile  equ 13 * 2
  59+ 7D7C              c_Pressed_ECM           equ 14 * 2
  60+ 7D7C              c_Pressed_EnergyBomb    equ 15 * 2
  61+ 7D7C              c_Pressed_EscapePod     equ 16 * 2
  62+ 7D7C              c_Pressed_DockingComp   equ 17 * 2
  63+ 7D7C              c_Pressed_Hyperspace    equ 18 * 2
  64+ 7D7C              c_Pressed_Distance      equ 19 * 2
  65+ 7D7C              c_Pressed_HomeCursor    equ 20 * 2
  66+ 7D7C              c_Pressed_Launch        equ 21 * 2
  67+ 7D7C              c_Pressed_BuyCargo      equ 22 * 2
  68+ 7D7C              c_Pressed_SellCargo     equ 23 * 2
  69+ 7D7C              c_Pressed_Equip         equ 24 * 2
  70+ 7D7C              c_Pressed_GalacticChrt  equ 25 * 2
  71+ 7D7C              c_Pressed_LocalChart    equ 26 * 2
  72+ 7D7C              c_Pressed_MarketPrices  equ 27 * 2
  73+ 7D7C              c_Pressed_Status        equ 28 * 2
  74+ 7D7C              c_Pressed_Inventory     equ 29 * 2
  75+ 7D7C              c_Pressed_GameSkip      equ 30 * 2
  76+ 7D7C              c_Pressed_Save          equ 31 * 2
  77+ 7D7C              c_Pressed_Freeze        equ 32 * 2
  78+ 7D7C              c_Pressed_Resume        equ 33 * 2
  79+ 7D7C              c_Pressed_Recentre      equ 34 * 2
  80+ 7D7C              c_Pressed_Quit          equ 35 * 2
  81+ 7D7C              c_Pressed_PlanetData    equ 36 * 2
  82+ 7D7C              c_Pressed_CursorUp      equ 37 * 2
  83+ 7D7C              c_Pressed_CursorDown    equ 38 * 2
  84+ 7D7C              c_Pressed_Find          equ 39 * 2
  85+ 7D7C              c_Pressed_Yes           equ 40 * 2
  86+ 7D7C              c_Pressed_No            equ 41 * 2
  87+ 7D7C              c_Pressed_Warp          equ 42 * 2
  88+ 7D7C
  89+ 7D7C              ; half row 1
  90+ 7D7C              VK_CAPS  				equ 0
  91+ 7D7C              VK_Z  					equ 1
  92+ 7D7C              VK_X  					equ 2
  93+ 7D7C              VK_C  					equ 3
  94+ 7D7C              VK_V  					equ 4
  95+ 7D7C              ; half row 2
  96+ 7D7C              VK_A  					equ 5
  97+ 7D7C              VK_S  					equ 6
  98+ 7D7C              VK_D  					equ 7
  99+ 7D7C              VK_F  					equ 8
 100+ 7D7C              VK_G  					equ 9
 101+ 7D7C              ; half row 3
 102+ 7D7C              VK_Q  					equ 10
 103+ 7D7C              VK_W  					equ 11
 104+ 7D7C              VK_E  					equ 12
 105+ 7D7C              VK_R  					equ 13
 106+ 7D7C              VK_T  					equ 14
 107+ 7D7C              ; half row 4
 108+ 7D7C              VK_1  					equ 15
 109+ 7D7C              VK_2  					equ 16
 110+ 7D7C              VK_3  					equ 17
 111+ 7D7C              VK_4  					equ 18
 112+ 7D7C              VK_5  					equ 19
 113+ 7D7C              ; half row 5
 114+ 7D7C              VK_0 					equ 20
 115+ 7D7C              VK_9 					equ 21
 116+ 7D7C              VK_8 					equ 22
 117+ 7D7C              VK_7 					equ 23
 118+ 7D7C              VK_6 					equ 24
 119+ 7D7C              ; half row 6
 120+ 7D7C              VK_P  					equ 25
 121+ 7D7C              VK_O  					equ 26
 122+ 7D7C              VK_I  					equ 27
 123+ 7D7C              VK_U  					equ 28
 124+ 7D7C              VK_Y  					equ 29
 125+ 7D7C              ; half row 7
 126+ 7D7C              VK_ENTER 				equ 30
 127+ 7D7C              VK_L  					equ 31
 128+ 7D7C              VK_K  					equ 32
 129+ 7D7C              VK_J  					equ 33
 130+ 7D7C              VK_H  					equ 34
 131+ 7D7C              ; half row 8
 132+ 7D7C              VK_SPACE 				equ 35
 133+ 7D7C              VK_SYM  				equ 36
 134+ 7D7C              VK_M  					equ 37
 135+ 7D7C              VK_N  					equ 38
 136+ 7D7C              VK_B  					equ 39
 137+ 7D7C
 138+ 7D7C              ;KeyboardMapping
 139+ 7D7C              KeyCode_Front        	equ VK_1
 140+ 7D7C              KeyCode_Aft          	equ VK_2
 141+ 7D7C              KeyCode_Left         	equ VK_3
 142+ 7D7C              KeyCode_Right        	equ VK_4
 143+ 7D7C              KeyCode_RollLeft     	equ VK_O
 144+ 7D7C              KeyCode_RollRight    	equ VK_P
 145+ 7D7C              KeyCode_Dive         	equ VK_Q
 146+ 7D7C              KeyCode_Climb        	equ VK_A
 147+ 7D7C              KeyCode_Accellerate  	equ VK_W
 148+ 7D7C              KeyCode_Decellerate  	equ VK_S
 149+ 7D7C              KeyCode_FireLaser    	equ VK_SPACE
 150+ 7D7C              KeyCode_TargetMissle 	equ VK_T
 151+ 7D7C              KeyCode_FireMissile  	equ VK_F
 152+ 7D7C              KeyCode_Find        	equ VK_F
 153+ 7D7C              KeyCode_UnarmMissile 	equ VK_R
 154+ 7D7C              KeyCode_ECM          	equ VK_E
 155+ 7D7C              KeyCode_EnergyBomb   	equ VK_U
 156+ 7D7C              KeyCode_EscapePod    	equ VK_CAPS
 157+ 7D7C              KeyCode_DockingComp  	equ VK_N
 158+ 7D7C              KeyCode_Hyperspace   	equ VK_H
 159+ 7D7C              KeyCode_Distance     	equ VK_J
 160+ 7D7C              KeyCode_HomeCursor   	equ VK_G
 161+ 7D7C              KeyCode_Launch       	equ VK_L
 162+ 7D7C              KeyCode_BuyCargo     	equ VK_B
 163+ 7D7C              KeyCode_SellCargo    	equ VK_V
 164+ 7D7C              KeyCode_Equip        	equ VK_C
 165+ 7D7C              KeyCode_GalacticChrt 	equ VK_5
 166+ 7D7C              KeyCode_LocalChart   	equ VK_6
 167+ 7D7C              KeyCode_MarketPrices 	equ VK_7
 168+ 7D7C              KeyCode_Status       	equ VK_8
 169+ 7D7C              KeyCode_Inventory    	equ VK_9
 170+ 7D7C              KeyCode_GameSkip     	equ VK_Z
 171+ 7D7C              KeyCode_Save         	equ VK_O
 172+ 7D7C              KeyCode_Freeze       	equ VK_B
 173+ 7D7C              KeyCode_Resume       	equ VK_L
 174+ 7D7C              KeyCode_Recentre     	equ VK_D
 175+ 7D7C              KeyCode_Quit         	equ VK_Y
 176+ 7D7C              KeyCode_PlanetData   	equ VK_0
 177+ 7D7C              KeyCode_CursorUp        equ VK_Q
 178+ 7D7C              KeyCode_CursorDown      equ VK_A
 179+ 7D7C              KeyCode_PressedYes      equ VK_Y
 180+ 7D7C              KeyCode_PressedNo       equ VK_N
 181+ 7D7C              KeyCode_Warp            equ VK_J
 182+ 7D7C
 183+ 7D7C 00 00 00...  Keys					DS	40          ; This is the list of key states for all the VK keys presssed i.e. VK_CAPS through to VK_B
 184+ 7DA4              c_KeyBoardLen 			equ $ - Keys
 185+ 7DA4 00 00 00...  RawKeys					DS	8
 186+ 7DAC FE FD FB F7  KeyAddrTab				DB	$FE, $FD, $FB, $F7, $EF, $DF, $BF, $7F
 186+ 7DB0 EF DF BF 7F
 187+ 7DB4              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 188+ 7DB4              ; of updating this table with the respective location to look up
 189+ 7DB4              ; key list sequence is in table above
 190+ 7DB4 8B 7D 8C 7D  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 190+ 7DB8 8D 7D 8E 7D
 190+ 7DBC 96 7D
 191+ 7DBE 95 7D 86 7D                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 191+ 7DC2 81 7D 87 7D
 191+ 7DC6 82 7D
 192+ 7DC8 9F 7D 8A 7D                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 192+ 7DCC 84 7D 89 7D
 192+ 7DD0 88 7D
 193+ 7DD2 98 7D 7C 7D                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 193+ 7DD6 A2 7D 9E 7D
 193+ 7DDA 9D 7D
 194+ 7DDC 85 7D 9B 7D                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 194+ 7DE0 A3 7D 80 7D
 194+ 7DE4 7F 7D
 195+ 7DE6 8F 7D 94 7D                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 195+ 7DEA 93 7D 92 7D
 195+ 7DEE 91 7D
 196+ 7DF0 7D 7D 96 7D                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 196+ 7DF4 A3 7D 9B 7D
 196+ 7DF8 83 7D
 197+ 7DFA 99 7D 90 7D                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 197+ 7DFE 86 7D 81 7D
 197+ 7E02 84 7D
 198+ 7E04 99 7D A2 7D                          DW  Keys+KeyCode_PressedYes   ,Keys+KeyCode_PressedNo    ,Keys+KeyCode_Warp
 198+ 7E08 9D 7D
 199+ 7E0A
 200+ 7E0A 23 5A 58 43  ASCII_Map:              DB "#","Z","X","C","V"
 200+ 7E0E 56
 201+ 7E0F 41 53 44 46                          DB "A","S","D","F","G"
 201+ 7E13 47
 202+ 7E14 51 57 45 52                          DB "Q","W","E","R","T"
 202+ 7E18 54
 203+ 7E19 31 32 33 34                          DB "1","2","3","4","5"
 203+ 7E1D 35
 204+ 7E1E 30 39 38 37                          DB "0","9","8","7","6"
 204+ 7E22 36
 205+ 7E23 50 4F 49 55                          DB "P","O","I","U","Y"
 205+ 7E27 59
 206+ 7E28 3E 4C 4B 4A                          DB ">","L","K","J","H"
 206+ 7E2C 48
 207+ 7E2D 20 5E 4D 4E                          DB " ","^","M","N","B"
 207+ 7E31 42
 208+ 7E32
 209+ 7E32              ; mapping of a code to the lookup table Keyboard map. So if you are using an addr_Pressed you can then fetch from KeyboardMap the address in Keys
 210+ 7E32              ; for the raw key press status
 211+ 7E32              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 212+ 7E32              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 213+ 7E32              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 214+ 7E32              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 215+ 7E32              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 216+ 7E32              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 217+ 7E32              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 218+ 7E32              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 219+ 7E32              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 220+ 7E32              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 221+ 7E32              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 222+ 7E32              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 223+ 7E32              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 224+ 7E32              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 225+ 7E32              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 226+ 7E32              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 227+ 7E32              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 228+ 7E32              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 229+ 7E32              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 230+ 7E32              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 231+ 7E32              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 232+ 7E32              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 233+ 7E32              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 234+ 7E32              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 235+ 7E32              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 236+ 7E32              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 237+ 7E32              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 238+ 7E32              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 239+ 7E32              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 240+ 7E32              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 241+ 7E32              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 242+ 7E32              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 243+ 7E32              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 244+ 7E32              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 245+ 7E32              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 246+ 7E32              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 247+ 7E32              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 248+ 7E32              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 249+ 7E32              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 250+ 7E32              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 251+ 7E32              addr_Pressed_Warp          equ KeyboardMap+c_Pressed_Warp
 252+ 7E32
 253+ 7E32
 254+ 7E32              MIsKeyPressed:          MACRO   keyaddress, misstarget
 255+ 7E32 ~                                    ld      hl,(keyaddress)
 256+ 7E32 ~                                    ld      a,(hl)
 257+ 7E32 ~                                    JumpIfAIsZero   misstarget
 258+ 7E32                                      ENDM
 259+ 7E32
 260+ 7E32 21 7C 7D     init_keyboard:          ld		hl,Keys                         ; no key s are pressed by default
 261+ 7E35 11 28 00                             ld		de, c_KeyBoardLen               ;
 262+ 7E38 3E 00                                ld		a,0                             ;
 263+ 7E3A CD 32 7D                             call	memfill_dma                     ;
 264+ 7E3D C9                                   ret                                     ;
 265+ 7E3E
 266+ 7E3E
 267+ 7E3E
 268+ 7E3E DD 21 A4 7D  scan_keyboard:          ld		ix,RawKeys                      ; hl = table of raw IO port readings
 269+ 7E42 21 AC 7D                             ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 270+ 7E45 0E 08                                ld		c,8                             ; 8 ports to ready
 271+ 7E47 11 7C 7D                             ld      de,Keys                         ; ix = table of key states from raw read
 272+ 7E4A 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 273+ 7E4B DB FE                                in		a,($FE)							; read port to a
 274+ 7E4D DD 77 00                             ld      (ix+0),a                        ; save raw scan
 275+ 7E50 DD 23                                inc     ix
 276+ 7E52 23                                   inc		hl                              ; and ready for next read
 277+ 7E53 06 05        .ProcessInputBits:      ld		b,5								; loop all bits (there are only 5 keys to a group)
 278+ 7E55 1F           .ProcessBitsLoop:       rra                                     ; shit bit 0 into carry
 279+ 7E56 CB 47                                bit		0,a								; is bit set
 280+ 7E58 30 08                                jr      nc,.SetKeyPressed               ; low bit means it was pressed
 281+ 7E5A FD 6F                                ld      iyl,a
 282+ 7E5C                                      ZeroA
 282+ 7E5C AF          >                        xor a
 283+ 7E5D C3 6A 7E                             jp      .SetKey
 284+ 7E60 20 0B                                jr		nz,.SkipKeySet
 285+ 7E62 FD 6F        .SetKeyPressed:	        ld      iyl,a                           ; save current input byte
 286+ 7E64 1A                                   ld      a,(de)                          ; get current keystate
 287+ 7E65 FE 02                                cp      2
 288+ 7E67 28 02                                jr      z,.AlreadyHeld
 289+ 7E69 3C                                   inc     a                               ; and increment by 1 as its moved from previous state
 290+ 7E6A 12           .SetKey:                ld		(de),a				  	        ; save key Pressed state
 291+ 7E6B FD 7D        .AlreadyHeld:           ld      a,iyl                           ; and retrieve the current input byte
 292+ 7E6D 13           .SkipKeySet:	        inc		de								; move to next key
 293+ 7E6E 10 E5                                djnz	.ProcessBitsLoop				; Process all key group bits
 294+ 7E70 0D                                   dec     c                               ; thats one row of bits all processed
 295+ 7E71 20 D7                                jr      nz,.PortReadLoop				; Read next input port
 296+ 7E73 C9                                   ret
 297+ 7E74
 298+ 7E74
 299+ 7E74
 300+ 7E74              GetKeyStateAddressDE:   MACRO
 301+ 7E74 ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 302+ 7E74 ~                                    add     hl,a
 303+ 7E74 ~                                    ld      e,(hl)
 304+ 7E74 ~                                    inc     hl
 305+ 7E74 ~                                    ld      d,(hl)                          ; now de = address in keypress list
 306+ 7E74                                      ENDM
 307+ 7E74
 308+ 7E74              GetKeyStateAddressHL:   MACRO
 309+ 7E74 ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 310+ 7E74 ~                                    add     hl,a
 311+ 7E74 ~                                    ld      a,(hl)
 312+ 7E74 ~                                    inc     hl
 313+ 7E74 ~                                    ld      h,(hl)                          ; now hl = address in keypress list
 314+ 7E74 ~                                    ld      l,a
 315+ 7E74                                      ENDM
 316+ 7E74
 317+ 7E74
 318+ 7E74              ;;old debug codeCurrentX            DB 0
 319+ 7E74              ;;old debug codeCurrentY            DB 0
 320+ 7E74              ;;old debug code
 321+ 7E74              ;;old debug codedisplayKeyStatus:       xor         a
 322+ 7E74              ;;old debug code                        ld          (CurrentX),a
 323+ 7E74              ;;old debug code                        ld          hl,RawKeys
 324+ 7E74              ;;old debug code                        ld          a,(hl)
 325+ 7E74              ;;old debug code                        and         %00011111
 326+ 7E74              ;;old debug code                        ld          b,5
 327+ 7E74              ;;old debug code.displayLoop:           push        bc,,hl
 328+ 7E74              ;;old debug code                        rra
 329+ 7E74              ;;old debug code                        jr          c,.displayNoPress
 330+ 7E74              ;;old debug code.displayPress:          push        af
 331+ 7E74              ;;old debug code                        ld          a,(CurrentX)
 332+ 7E74              ;;old debug code                        ld          e,a
 333+ 7E74              ;;old debug code                        ld          a,(CurrentY)
 334+ 7E74              ;;old debug code                        ld          d,a
 335+ 7E74              ;;old debug code                        ld          a,'*'
 336+ 7E74              ;;old debug code                        MMUSelectLayer1
 337+ 7E74              ;;old debug code                        call        l1_print_char
 338+ 7E74              ;;old debug code                        ld          a,(CurrentX)
 339+ 7E74              ;;old debug code                        add         a,8
 340+ 7E74              ;;old debug code                        ld          (CurrentX),a
 341+ 7E74              ;;old debug code                        pop         af
 342+ 7E74              ;;old debug code                        pop         bc,,hl
 343+ 7E74              ;;old debug code                        djnz        .displayLoop
 344+ 7E74              ;;old debug code                        ret
 345+ 7E74              ;;old debug code.displayNoPress:        push        af
 346+ 7E74              ;;old debug code                        ld          a,(CurrentX)
 347+ 7E74              ;;old debug code                        ld          e,a
 348+ 7E74              ;;old debug code                        ld          a,(CurrentY)
 349+ 7E74              ;;old debug code                        ld          d,a
 350+ 7E74              ;;old debug code                        ld          a,'O'
 351+ 7E74              ;;old debug code                        MMUSelectLayer1
 352+ 7E74              ;;old debug code                        call        l1_print_char
 353+ 7E74              ;;old debug code                        ld          a,(CurrentX)
 354+ 7E74              ;;old debug code                        add         a,8
 355+ 7E74              ;;old debug code                        ld          (CurrentX),a
 356+ 7E74              ;;old debug code                        pop         af
 357+ 7E74              ;;old debug code                        pop         bc,,hl
 358+ 7E74              ;;old debug code                        djnz        .displayLoop
 359+ 7E74              ;;old debug code                        ret
 360+ 7E74              ;;old debug code
 361+ 7E74              ;;old debug codedisplayDownStatus:      ld  a,(Keys+      KeyCode_CursorUp)
 362+ 7E74              ;;old debug code                        cp  0
 363+ 7E74              ;;old debug code                        jr      z,.displayNoUp
 364+ 7E74              ;;old debug code                        cp  1
 365+ 7E74              ;;old debug code                        jr      z,.displayUp
 366+ 7E74              ;;old debug code.displayHeld:           ld      de,8*15
 367+ 7E74              ;;old debug code                        ld      a,"*"
 368+ 7E74              ;;old debug code                        MMUSelectLayer1
 369+ 7E74              ;;old debug code                        call        l1_print_char
 370+ 7E74              ;;old debug code                        ret
 371+ 7E74              ;;old debug code.displayUp:             ld      de,8*15
 372+ 7E74              ;;old debug code                        ld      a,"+"
 373+ 7E74              ;;old debug code                        MMUSelectLayer1
 374+ 7E74              ;;old debug code                        call        l1_print_char
 375+ 7E74              ;;old debug code                        ret
 376+ 7E74              ;;old debug code.displayNoUp:             ld      de,8*15
 377+ 7E74              ;;old debug code                        ld      a,"O"
 378+ 7E74              ;;old debug code                        MMUSelectLayer1
 379+ 7E74              ;;old debug code                        call        l1_print_char
 380+ 7E74              ;;old debug code                        ret
 381+ 7E74              ;;old debug code
 382+ 7E74
 383+ 7E74
 384+ 7E74              ; call with a = c_Pressed key, will then read mapping does this with keyboard scan, waits until key gets to state 1, if it was already held then#
 385+ 7E74              ; it will have to be let go to reset of 0 and scan again
 386+ 7E74              ; Deprecated as not used as yet
 387+ 7E74              ;;;;;;wait_for_key_a_press:   GetKeyStateAddressHL
 388+ 7E74              ;;;;;;                        push    hl
 389+ 7E74              ;;;;;;.wait_loop:             call    scan_keyboard
 390+ 7E74              ;;;;;;                        pop     hl                              ; get key address into hl
 391+ 7E74              ;;;;;;                        push    hl
 392+ 7E74              ;;;;;;                        ld      a,(hl)
 393+ 7E74              ;;;;;;                        JumpIfANENusng  1,.wait_loop             ; will also loop if held down when entering this routine
 394+ 7E74              ;;;;;;                        pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 395+ 7E74              ;;;;;;                        ret
 396+ 7E74              ;;;;;;; call with a = c_Pressed key, will then read mapping does this with keyboard scan waits until key gets to state 2
 397+ 7E74              ;;;;;;wait_for_key_a_held:    GetKeyStateAddressDE
 398+ 7E74              ;;;;;;                        push    hl
 399+ 7E74              ;;;;;;.wait_loop:             call    scan_keyboard
 400+ 7E74              ;;;;;;                        pop     hl
 401+ 7E74              ;;;;;;                        push    hl
 402+ 7E74              ;;;;;;                        ld      a,(hl)
 403+ 7E74              ;;;;;;                        JumpIfALTNusng  2, .wait_loop
 404+ 7E74              ;;;;;;                        pop     hl
 405+ 7E74              ;;;;;;                        ret
 406+ 7E74
 407+ 7E74              ; Gets the current keystate of the c_Pressed Key in a register
 408+ 7E74              get_key_a_state:        GetKeyStateAddressHL                    ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 408+ 7E74 21 B4 7D    >                        ld      hl,KeyboardMap                  ; work our address to read from
 408+ 7E77 ED 31       >                        add     hl,a
 408+ 7E79 7E          >                        ld      a,(hl)
 408+ 7E7A 23          >                        inc     hl
 408+ 7E7B 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 408+ 7E7C 6F          >                        ld      l,a
 409+ 7E7D 7E                                   ld      a,(hl)                          ; a = keystate
 410+ 7E7E C9                                   ret
 411+ 7E7F
 412+ 7E7F              ; sets they keystate of c pressed key in a register to 1 (pressed)
 413+ 7E7F              ; This will be used by auto dock
 414+ 7E7F              force_key_press:        GetKeyStateAddressHL                    ; read key locations
 414+ 7E7F 21 B4 7D    >                        ld      hl,KeyboardMap                  ; work our address to read from
 414+ 7E82 ED 31       >                        add     hl,a
 414+ 7E84 7E          >                        ld      a,(hl)
 414+ 7E85 23          >                        inc     hl
 414+ 7E86 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 414+ 7E87 6F          >                        ld      l,a
 415+ 7E88 3E 01                                ld      a,1
 416+ 7E8A 77                                   ld      (hl),a
 417+ 7E8B C9                                   ret
 418+ 7E8C
 419+ 7E8C              is_key_up_state:        GetKeyStateAddressHL
 419+ 7E8C 21 B4 7D    >                        ld      hl,KeyboardMap                  ; work our address to read from
 419+ 7E8F ED 31       >                        add     hl,a
 419+ 7E91 7E          >                        ld      a,(hl)
 419+ 7E92 23          >                        inc     hl
 419+ 7E93 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 419+ 7E94 6F          >                        ld      l,a
 420+ 7E95 7E                                   ld      a,(hl)
 421+ 7E96 FE 00                                cp      0
 422+ 7E98 C9                                   ret
 423+ 7E99
 424+ 7E99              ; returns z is set if c_ key is pressed
 425+ 7E99              is_key_pressed:         GetKeyStateAddressHL
 425+ 7E99 21 B4 7D    >                        ld      hl,KeyboardMap                  ; work our address to read from
 425+ 7E9C ED 31       >                        add     hl,a
 425+ 7E9E 7E          >                        ld      a,(hl)
 425+ 7E9F 23          >                        inc     hl
 425+ 7EA0 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 425+ 7EA1 6F          >                        ld      l,a
 426+ 7EA2 7E                                   ld      a,(hl)                          ; a = keystate
 427+ 7EA3 FE 01                                cp      1                               ; we cant just test bit 0 as this may have been held long
 428+ 7EA5 C9                                   ret
 429+ 7EA6
 430+ 7EA6              ; returns nz is set if c_ key is held, if key was held then keystate would be 2 or 3, i.e. bit 1 set
 431+ 7EA6              is_key_held:            GetKeyStateAddressHL
 431+ 7EA6 21 B4 7D    >                        ld      hl,KeyboardMap                  ; work our address to read from
 431+ 7EA9 ED 31       >                        add     hl,a
 431+ 7EAB 7E          >                        ld      a,(hl)
 431+ 7EAC 23          >                        inc     hl
 431+ 7EAD 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 431+ 7EAE 6F          >                        ld      l,a
 432+ 7EAF 7E                                   ld      a,(hl)                          ; a = keystate
 433+ 7EB0 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 434+ 7EB2 C9                                   ret
 435+ 7EB3
 436+ 7EB3              ; checks to see if any key is pressed in the key table
 437+ 7EB3 21 7C 7D     is_any_key_pressed:     ld      hl,Keys
 438+ 7EB6 01 28 00                             ld      bc,40
 439+ 7EB9 3E 01                                ld      a,1
 440+ 7EBB ED B1                                cpir                                    ; search for the value 1
 441+ 7EBD 28 03                                jr      z,.KeyPressed                   ; if a key was pressed then handle press
 442+ 7EBF                                      SetAFalse
 442+ 7EBF 3E FF       >                        ld      a,$FF
 443+ 7EC1 C9                                   ret
 444+ 7EC2 3E 27        .KeyPressed:            ld      a,39                            ; so c will be how many keys still to scan
 445+ 7EC4 91                                   sub     c                               ; so a = 40 - c to get to result
 446+ 7EC5 C9                                   ret
 447+ 7EC6
 448+ 7EC6 21 7C 7D     is_any_key_held:        ld      hl,Keys
 449+ 7EC9 06 28                                ld      b,40
 450+ 7ECB 0E 00                                ld      c,0
 451+ 7ECD 7E           .KeyReadLoop:           ld      a,(hl)
 452+ 7ECE E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 453+ 7ED0 C2 DA 7E                             jp      nz,.KeyPressed
 454+ 7ED3 23                                   inc     hl
 455+ 7ED4 0C                                   inc     c
 456+ 7ED5 10 F6                                djnz    .KeyReadLoop
 457+ 7ED7                                      SetAFalse
 457+ 7ED7 3E FF       >                        ld      a,$FF
 458+ 7ED9 C9                                   ret
 459+ 7EDA 79           .KeyPressed:            ld      a,c
 460+ 7EDB C9                                   ret
 461+ 7EDC
 462+ 7EDC
 463+ 7EDC 21 AC 7D     WaitForNoKey:           ld      hl,KeyAddrTab                   ; de = table of IO ports to read
 464+ 7EDF 06 08                                ld		b,8                             ; 8 ports to ready
 465+ 7EE1 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 466+ 7EE2 DB FE                                in		a,($FE)							; read port to a
 467+ 7EE4 E6 1F                                and     %00011111
 468+ 7EE6 FE 1F                                cp      %00011111
 469+ 7EE8 20 F2                                jr      nz ,WaitForNoKey
 470+ 7EEA 23                                   inc		hl                              ; and ready for next read
 471+ 7EEB 10 F4                                djnz    .PortReadLoop
 472+ 7EED C9                                   ret
 473+ 7EEE
 474+ 7EEE F5 D5 C5 E5  WaitForAnyKey:          push    af,,de,,bc,,hl
 475+ 7EF2 CD DC 7E                             call    WaitForNoKey
 476+ 7EF5 21 AC 7D     .waitKeyLoop:           ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 477+ 7EF8 06 08                                ld		b,8                             ; 8 ports to ready
 478+ 7EFA 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 479+ 7EFB DB FE                                in		a,($FE)							; read port to a
 480+ 7EFD E6 1F                                and     %00011111
 481+ 7EFF FE 1F                                cp      %00011111
 482+ 7F01 C2 0B 7F                             jp      nz,.WaitComplete
 483+ 7F04 C0                                   ret     nz
 484+ 7F05 23                                   inc		hl                              ; and ready for next read
 485+ 7F06 10 F2                                djnz    .PortReadLoop
 486+ 7F08 C3 F5 7E                             jp      .waitKeyLoop
 487+ 7F0B E1 C1 D1 F1  .WaitComplete:          pop     af,,de,,bc,,hl
 488+ 7F0F C9                                   ret
 489+ 7F10
 490+ 7F10
 491+ 7F10 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 492+ 7F2E 00                                   DB  0               ; end of string marker as a safety
 493+ 7F2F 00           InputCursor             DB  0
 494+ 7F30 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 495+ 7F31 00           InputChanged            DB  0
 496+ 7F32              InputLimit              EQU 20
 497+ 7F32
 498+ 7F32 21 10 7F     keyboard_copy_input_to_de:  ld      hl,InputString
 499+ 7F35 3A 2F 7F                                 ld      a,(InputCursor)
 500+ 7F38 FE 00                                    cp      0
 501+ 7F3A 28 05                                    jr      z,.NoString
 502+ 7F3C 4F                                       ld      c,a
 503+ 7F3D 06 00                                    ld      b,0
 504+ 7F3F ED B0                                    ldir
 505+ 7F41 3E 00        .NoString                   ld      a,0
 506+ 7F43 12                                       ld      (de),a
 507+ 7F44 C9                                       ret
 508+ 7F45
 509+ 7F45 AF           initInputText:          xor     a
 510+ 7F46 32 2F 7F                             ld      (InputCursor),a
 511+ 7F49                                      SetMemFalse EnterPressed
 511+ 7F49 3E FF       >                        ld      a,$FF
 511+ 7F4B 32 30 7F    >                        ld      (EnterPressed),a
 512+ 7F4E                                      SetMemFalse InputChanged
 512+ 7F4E 3E FF       >                        ld      a,$FF
 512+ 7F50 32 31 7F    >                        ld      (InputChanged),a
 513+ 7F53 21 10 7F                             ld      hl,InputString
 514+ 7F56 06 1E                                ld      b,30
 515+ 7F58 77           .wipeloop:              ld      (hl),a
 516+ 7F59 23                                   inc     hl
 517+ 7F5A 10 FC                                djnz    .wipeloop
 518+ 7F5C C9                                   ret
 519+ 7F5D
 520+ 7F5D              InputName:              SetMemFalse InputChanged
 520+ 7F5D 3E FF       >                        ld      a,$FF
 520+ 7F5F 32 31 7F    >                        ld      (InputChanged),a
 521+ 7F62 CD B3 7E                             call    is_any_key_pressed
 522+ 7F65 FE FF                                cp      $FF
 523+ 7F67 C8                                   ret     z
 524+ 7F68 4F           .KeyPressed:            ld      c,a
 525+ 7F69 3A 2F 7F                             ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 526+ 7F6C FE 14                                cp      InputLimit                      ; move to variable later and then cp (hl)
 527+ 7F6E 28 0B                                jr      z,.DeleteOrEnterOnly            ;
 528+ 7F70 21 0A 7E                             ld      hl,ASCII_Map
 529+ 7F73 79                                   ld      a,c
 530+ 7F74 ED 31                                add     hl,a
 531+ 7F76 7E                                   ld      a,(hl)
 532+ 7F77 FE 41                                cp      "A"
 533+ 7F79 30 0B                                jr      nc,.AlphaPressed
 534+ 7F7B              ; CAPS and Symbol act as delete for now
 535+ 7F7B FE 20        .DeleteOrEnterOnly      cp      " "                             ; if space was  pressed (mapped to Hash in ASCII table))
 536+ 7F7D 28 33                                jr      z,.SpacePressed               ; for now we will ignore the shift and just assume delete
 537+ 7F7F FE 3E                                cp      ">"         ; ENTER
 538+ 7F81 28 19                                jr      z,.EnterPressed
 539+ 7F83 FE 23                                cp      "#"         ; CAPS
 540+ 7F85 C9                                   ret
 541+ 7F86 47           .AlphaPressed:          ld      b,a
 542+ 7F87 3A 2F 7F                             ld      a,(InputCursor)
 543+ 7F8A 4F                                   ld      c,a
 544+ 7F8B 21 10 7F                             ld      hl,InputString
 545+ 7F8E ED 31                                add     hl,a
 546+ 7F90 78                                   ld      a,b
 547+ 7F91 70                                   ld      (hl),b
 548+ 7F92 79                                   ld      a,c
 549+ 7F93 21 2F 7F                             ld      hl,InputCursor
 550+ 7F96 34                                   inc     (hl)
 551+ 7F97                                      SetMemTrue InputChanged
 551+ 7F97 AF          >                        xor     a
 551+ 7F98 32 31 7F    >                        ld      (InputChanged),a
 552+ 7F9B C9                                   ret
 553+ 7F9C 3A 2F 7F     .EnterPressed:          ld      a,(InputCursor)
 554+ 7F9F 21 10 7F                             ld      hl,InputString
 555+ 7FA2 ED 31                                add     hl,a
 556+ 7FA4                                      ZeroA
 556+ 7FA4 AF          >                        xor a
 557+ 7FA5 77                                   ld      (hl),a
 558+ 7FA6                                      SetMemTrue EnterPressed
 558+ 7FA6 AF          >                        xor     a
 558+ 7FA7 32 30 7F    >                        ld      (EnterPressed),a
 559+ 7FAA                                      SetMemTrue InputChanged
 559+ 7FAA AF          >                        xor     a
 559+ 7FAB 32 31 7F    >                        ld      (InputChanged),a
 560+ 7FAE CD 32 7E                             call    init_keyboard           ; Flush keyboard status so futher inputs don't auto read the enter key as a second press
 561+ 7FB1 C9                                   ret
 562+ 7FB2 3A 2F 7F     .SpacePressed:          ld      a,(InputCursor)         ; Space = delete
 563+ 7FB5 FE 00                                cp      0                       ; if input is zero length then can not delete
 564+ 7FB7 C8                                   ret     z
 565+ 7FB8 3D                                   dec     a                       ; move back one and update cursor pos
 566+ 7FB9 32 2F 7F                             ld      (InputCursor),a         ;
 567+ 7FBC 21 10 7F                             ld      hl,InputString          ; now update end of line to null
 568+ 7FBF ED 31                                add     hl,a                    ; .
 569+ 7FC1                                      ZeroA                           ; .
 569+ 7FC1 AF          >                        xor a
 570+ 7FC2 77                                   ld      (hl),a                  ; .
 571+ 7FC3                                      SetMemTrue InputChanged
 571+ 7FC3 AF          >                        xor     a
 571+ 7FC4 32 31 7F    >                        ld      (InputChanged),a
 572+ 7FC7 C9                                   ret
 573+ 7FC8
 574+ 7FC8              TargetMissileTest:      AnyMissilesLeft
 574+ 7FC8 3A 42 82    >                        ld      a,(NbrMissiles)
 574+ 7FCB A7          >                        and     a
 575+ 7FCC                                      JumpIfZero      .ClearTargetting
 575+ 7FCC CA E3 7F    >                        jp	z,.ClearTargetting
 576+ 7FCF                                      IsMissileLaunchFlagged                      ; if we are comitted to launch
 576+ 7FCF 3A D2 84    >                        ld      a,(MissileTargettingFlag)
 576+ 7FD2 E6 80       >                        and     $80
 577+ 7FD4 C8                                   ret             z                           ; then don't scan as it will be cleared on launch
 578+ 7FD5 3E 16        .ScanForKey:            ld              a,c_Pressed_TargetMissle    ; if not pressed we are done
 579+ 7FD7 CD 99 7E                             call            is_key_pressed              ; .
 580+ 7FDA C0                                   ret             nz                          ; .
 581+ 7FDB 3A D2 84     .TargetPressed:         ld              a,(MissileTargettingFlag)   ; get flag back
 582+ 7FDE                                      JumpIfAEqNusng  StageMissileNotTargeting, .SetTargetting
 582+ 7FDE FE FF       >                        cp     StageMissileNotTargeting
 582+ 7FE0 CA E9 7F    >                        jp      z,.SetTargetting
 583+ 7FE3              .ClearTargetting:       ClearMissileTargetting
 583+ 7FE3 3E FF       >                        ld      a,StageMissileNotTargeting
 583+ 7FE5 32 D2 84    >                        ld      (MissileTargettingFlag),a
 584+ 7FE8 C9                                   ret
 585+ 7FE9              .SetTargetting:         SetMissileTargetting
 585+ 7FE9 3E FE       >                        ld      a,StageMissileTargeting
 585+ 7FEB 32 D2 84    >                        ld      (MissileTargettingFlag),a
 586+ 7FEE C9                                   ret
 587+ 7FEF
 588+ 7FEF AF           MovementKeyTest:        xor     a
 589+ 7FF0 32 79 83                             ld      (CursorKeysPressed),a
 590+ 7FF3 3A AC 81                             ld      a,(MenuIdMax)
 591+ 7FF6 E6 FC                                and     $FC
 592+ 7FF8 20 26                                jr      nz,CursorKeys
 593+ 7FFA 2A C2 7D     ClimbDiveKeys:          ld      hl,(addr_Pressed_Climb)                 ; Check for Climb
 594+ 7FFD 7E                                   ld      a,(hl)
 595+ 7FFE                                      JumpIfAIsZero ScanDiveKey
 595+ 7FFE A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 595+ 7FFF CA 0D 80    >                        jp	    z, ScanDiveKey
 596+ 8002 3A 79 83                             ld      a,(CursorKeysPressed)
 597+ 8005 F6 80                                or      CursorClimb
 598+ 8007 32 79 83                             ld      (CursorKeysPressed),a
 599+ 800A C3 43 80                             jp      ScanLeftKey
 600+ 800D 2A C0 7D     ScanDiveKey:            ld      hl,(addr_Pressed_Dive)                  ; Check for Dive
 601+ 8010 7E                                   ld      a,(hl)
 602+ 8011                                      JumpIfAIsZero ScanLeftKey
 602+ 8011 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 602+ 8012 CA 43 80    >                        jp	    z, ScanLeftKey
 603+ 8015 3A 79 83                             ld      a,(CursorKeysPressed)
 604+ 8018 F6 40                                or      CursorDive
 605+ 801A 32 79 83                             ld      (CursorKeysPressed),a
 606+ 801D C3 43 80                             jp      ScanLeftKey
 607+ 8020 2A FE 7D     CursorKeys:             ld      hl,(addr_Pressed_CursorUp)              ; Check cursor keys
 608+ 8023 7E                                   ld      a,(hl)
 609+ 8024                                      JumpIfAIsZero ScanCursorDownKey
 609+ 8024 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 609+ 8025 CA 33 80    >                        jp	    z, ScanCursorDownKey
 610+ 8028 3A 79 83                             ld      a,(CursorKeysPressed)
 611+ 802B F6 80                                or      CursorClimb
 612+ 802D 32 79 83                             ld      (CursorKeysPressed),a
 613+ 8030 C3 43 80                             jp      ScanLeftKey
 614+ 8033 2A 00 7E     ScanCursorDownKey:      ld      hl,(addr_Pressed_CursorDown)
 615+ 8036 7E                                   ld      a,(hl)
 616+ 8037                                      JumpIfAIsZero ScanLeftKey
 616+ 8037 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 616+ 8038 CA 43 80    >                        jp	    z, ScanLeftKey
 617+ 803B 3A 79 83                             ld      a,(CursorKeysPressed)
 618+ 803E F6 40                                or      CursorDive
 619+ 8040 32 79 83                             ld      (CursorKeysPressed),a
 620+ 8043 2A BC 7D     ScanLeftKey:            ld      hl,(addr_Pressed_RollLeft)
 621+ 8046 7E                                   ld      a,(hl)
 622+ 8047                                      JumpIfAIsZero ScanRightKey
 622+ 8047 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 622+ 8048 CA 54 80    >                        jp	    z, ScanRightKey
 623+ 804B 3A 79 83                             ld      a,(CursorKeysPressed)
 624+ 804E F6 20                                or      CursorLeft
 625+ 8050 32 79 83                             ld      (CursorKeysPressed),a
 626+ 8053 C9                                   ret
 627+ 8054 2A BE 7D     ScanRightKey:           ld      hl,(addr_Pressed_RollRight)
 628+ 8057 7E                                   ld      a,(hl)
 629+ 8058                                      JumpIfAIsZero ScanHomeKey
 629+ 8058 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 629+ 8059 CA 65 80    >                        jp	    z, ScanHomeKey
 630+ 805C 3A 79 83                             ld      a,(CursorKeysPressed)
 631+ 805F F6 10                                or      CursorRight
 632+ 8061 32 79 83                             ld      (CursorKeysPressed),a
 633+ 8064 C9                                   ret
 634+ 8065 2A DC 7D     ScanHomeKey:            ld      hl,(addr_Pressed_HomeCursor)
 635+ 8068 7E                                   ld      a,(hl)
 636+ 8069                                      JumpIfAIsZero ScanRecentreKey
 636+ 8069 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 636+ 806A CA 76 80    >                        jp	    z, ScanRecentreKey
 637+ 806D 3A 79 83                             ld      a,(CursorKeysPressed)
 638+ 8070 F6 08                                or      CursorHome
 639+ 8072 32 79 83                             ld      (CursorKeysPressed),a
 640+ 8075 C9                                   ret
 641+ 8076 2A F8 7D     ScanRecentreKey:        ld      hl,(addr_Pressed_Recentre)
 642+ 8079 7E                                   ld      a,(hl)
 643+ 807A                                      ReturnIfAIsZero
 643+ 807A A7          >                        and     a
 643+ 807B C8          >                        ret     z
 644+ 807C 3A 79 83                             ld      a,(CursorKeysPressed)
 645+ 807F F6 04                                or      CursorRecenter
 646+ 8081 32 79 83                             ld      (CursorKeysPressed),a
 647+ 8084 C9                                   ret
 648+ 8085
 649+ 8085
# file closed: ./Hardware/keyboard.asm
 591  8085
 592  8085                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 8085              ;Contants
   2+ 8085
   3+ 8085              SignMask8Bit		equ %01111111
   4+ 8085              SignMask16Bit		equ %0111111111111111
   5+ 8085              SignOnly8Bit		equ $80
   6+ 8085              SignOnly16Bit		equ $8000
   7+ 8085
   8+ 8085              Bit7Only            equ %10000000
   9+ 8085              Bit6Only            equ %01000000
  10+ 8085              Bit5Only            equ %00100000
  11+ 8085              Bit4Only            equ %00010000
  12+ 8085              Bit3Only            equ %00001000
  13+ 8085              Bit2Only            equ %00000100
  14+ 8085              Bit1Only            equ %00000010
  15+ 8085              Bit0Only            equ %00000001
  16+ 8085              Bit7Clear           equ %01111111
  17+ 8085              Bit6Clear           equ %10111111
  18+ 8085              Bit5Clear           equ %11011111
  19+ 8085              Bit4Clear           equ %11101111
  20+ 8085              Bit3Clear           equ %11110111
  21+ 8085              Bit2Clear           equ %11111011
  22+ 8085              Bit1Clear           equ %11111101
  23+ 8085              Bit0Clear           equ %11111110
  24+ 8085              ConstPi				equ $80
  25+ 8085              ConstNorm           equ 197
  26+ 8085
  27+ 8085              ;Text Tokens
  28+ 8085              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  29+ 8085              BrabenBellToken 	equ $0D
  30+ 8085              AcorToken			equ $0C
  31+ 8085              ; Cursor Bits
  32+ 8085              CursorClimb         equ %10000000
  33+ 8085              CursorDive          equ %01000000
  34+ 8085              CursorLeft          equ %00100000
  35+ 8085              CursorRight         equ %00010000
  36+ 8085              CursorHome          equ %00001000
  37+ 8085              CursorRecenter      equ %00000100
  38+ 8085
  39+ 8085              ; Intro Screen
  40+ 8085              TitleShip			equ	$8C
  41+ 8085              RotationUnity		equ $60
  42+ 8085              DBCheckCode			equ $DB
  43+ 8085              MaxVisibility		equ $1F
  44+ 8085              FarInFront			equ $C0
  45+ 8085              ; Equipment Flags
  46+ 8085              EquipmentItemFitted     equ $FF
  47+ 8085              EquipmentItemNotFitted  equ 0
  48+ 8085              ; Universe Managment
  49+ 8085              ShipTotalModelCount     equ 44
  50+ 8085              ShipTypeScoopable       equ 4         ; a sub set of junk
  51+ 8085              ShipTypeJunk            equ 3
  52+ 8085              ShipTypeStation         equ 2
  53+ 8085              ShipTypeMissile         equ 1
  54+ 8085              ShipTypeNormal          equ 0
  55+ 8085              ShipTypeText            equ 253
  56+ 8085              ShipTypeDebug           equ 254
  57+ 8085              ShipTypeEmpty           equ 255
  58+ 8085
  59+ 8085              SpawnTypeStation        EQU 0
  60+ 8085              SpawnTypeAsteroid       EQU SpawnTypeStation        + 1
  61+ 8085              SpawnTypeJunk           EQU SpawnTypeAsteroid       + 1
  62+ 8085              SpawnTypeCop            EQU SpawnTypeJunk           + 1
  63+ 8085              SpawnTypeTrader         EQU SpawnTypeCop            + 1
  64+ 8085              SpawnTypeNonTrader      EQU SpawnTypeTrader         + 1
  65+ 8085              SpawnTypePirate         EQU SpawnTypeNonTrader      + 1
  66+ 8085              SpawnTypeHunter         EQU SpawnTypePirate         + 1
  67+ 8085              SpawnTypeThargoid       EQU SpawnTypeHunter         + 1
  68+ 8085              SpawnTypeMission        EQU SpawnTypeThargoid       + 1
  69+ 8085              SpawnTypeStationDebris  EQU SpawnTypeMission        + 1
  70+ 8085              SpawnTypeMissionEvent   EQU SpawnTypeStationDebris  + 1
  71+ 8085              SpawnTypeDoNotSpawn     EQU SpawnTypeMissionEvent   + 1
  72+ 8085
  73+ 8085
  74+ 8085              ; Laser and Missile Settings
  75+ 8085              ; Laser and Missile
  76+ 8085              ShipLaserPower          equ %11110000
  77+ 8085              ShipMissileCount        equ %00001111
  78+ 8085              ShipMissiles1           equ %00000001
  79+ 8085              ShipMissiles2           equ %00000010
  80+ 8085              ShipMissiles3           equ %00000011
  81+ 8085              ShipMissiles4           equ %00000100
  82+ 8085              ShipMissiles5           equ %00000101
  83+ 8085              ShipMissiles6           equ %00000110
  84+ 8085              ShipMissiles7           equ %00000111
  85+ 8085              ShipMissiles8           equ %00001000
  86+ 8085              ShipMissiles9           equ %00001001
  87+ 8085              ShipMissiles10          equ %00001010
  88+ 8085              ShipMissiles11          equ %00001011
  89+ 8085              ShipMissiles12          equ %00001100
  90+ 8085              ShipMissiles13          equ %00001101
  91+ 8085              ShipMissiles14          equ %00001110
  92+ 8085              ShipMissiles15          equ %00001111
  93+ 8085              ; AI Flags  UniverseAIControl
  94+ 8085              ShipCanAnger            equ %10000000   ; Yes or no
  95+ 8085              ShipFighterBaySize      equ %01110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
  96+ 8085              ShipFighterBaySize1     equ %00010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
  97+ 8085              ShipFighterBaySize2     equ %00100000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
  98+ 8085              ShipFighterBaySize3     equ %00110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
  99+ 8085              ShipFighterBaySize4     equ %01000000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 100+ 8085              ShipFighterBaySize5     equ %01010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 101+ 8085              ShipFighterBaySizeInf   equ %01110000   ; Infinite fighters (well 255 as thats enough)
 102+ 8085              ShipFighterType         equ %00001100   ; 4 types 0 = Worm, 1 = Sidewinder, 2 = Viper, 3 = Thargon
 103+ 8085              ShipFighterWorm         equ %00000000
 104+ 8085              ShipFighterSidewinder   equ %00000100
 105+ 8085              ShipFighterViper        equ %00001000
 106+ 8085              ShipFighterThargon      equ %00001100
 107+ 8085              ShipUltraHostile        equ %00000010   ; If ultra hostile, will never back down so behaves like a missile
 108+ 8085              ShipFree                equ $00000011   ; Unused bits at present for later
 109+ 8085              ; NewBTactics
 110+ 8085              ShipIsTrader            equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
 111+ 8085              ShipIsBountyHunter      equ Bit1Only   ;
 112+ 8085              ShipIsHostile           equ Bit2Only   ; Also used as Angry flag now
 113+ 8085              ShipIsPirate            equ Bit3Only   ;
 114+ 8085              ShipIsDocking           equ Bit4Only   ;
 115+ 8085              ShipIsBystander         equ Bit5Only   ;
 116+ 8085              ShipIsCop               equ Bit6Only   ;
 117+ 8085              ShipHasEscapePod        equ Bit7Only   ;
 118+ 8085              ShipHostileNewBitNbr    equ 2
 119+ 8085
 120+ 8085              ; UBnkaiatkecm
 121+ 8085              ;Unused                 equ Bit0Only
 122+ 8085              ;Unused                 equ Bit1Only
 123+ 8085              ;Unused                 equ Bit2Only
 124+ 8085              ShipIsDot               equ Bit3Only
 125+ 8085              ShipKilled              equ Bit4Only    ; Ship has just been marked as killed so initiate cloud of debris
 126+ 8085              ShipExploding           equ Bit5Only
 127+ 8085              ShipIsVisible           equ Bit6Only
 128+ 8085              ShipAIEnabled           equ Bit7Only   ;
 129+ 8085
 130+ 8085
 131+ 8085              ; UBnkaiakecm 2
 132+ 8085              ;ShipAngryNewBitNbr      equ 4
 133+ 8085              ShipExplosionDuration   equ 75         ; amount of frames an explosion lasts for
 134+ 8085              ShipNotHostile          equ Bit2Clear   ;
 135+ 8085              ShipIsNotDot            equ Bit3Clear
 136+ 8085              ShipIsDotBitNbr         equ 3
 137+ 8085              ShipKilledBitNbr        equ 4
 138+ 8085              ShipIsVisibleBitNbr     equ 6
 139+ 8085              ShipIsScoopDockEsc      equ Bit7Only   ;
 140+ 8085              ShipAIDisabled          equ Bit7Clear
 141+ 8085              ShipAIEnabledBitNbr     equ 7
 142+ 8085              ShipExplodingBitNbr     equ 5
 143+ 8085              ; Equipment Defaults
 144+ 8085              ECMCounterMax           equ $80
 145+ 8085              ; Main Loop State
 146+ 8085              StatePlayerDocked       equ $FF
 147+ 8085              StateCompletedLaunch    equ $FD
 148+ 8085              StateInTransition       equ $FE
 149+ 8085              StateHJumping           equ $FC
 150+ 8085              StateHEntering          equ $FB
 151+ 8085              StateCompletedHJump     equ $FA
 152+ 8085              StateNormal             equ 0
 153+ 8085              ; Missile Stage flags , $8x = locked to ship id x, $0x = fire at ship id x requested
 154+ 8085              StageMissileNotTargeting equ $FF
 155+ 8085              StageMissileTargeting   equ $FE
 156+ 8085
 157+ 8085
 158+ 8085              ShipMaxDistance     equ 192
 159+ 8085              HyperSpaceTimers    equ $0B0B
 160+ 8085
 161+ 8085              ; -- game limts
 162+ 8085              MaxNumberOfStars	equ 11
 163+ 8085              ConsoleRefreshInterval  equ 5
 164+ 8085              MaxJunkStation      equ 3
 165+ 8085              MaxJunkFreeSpace    equ 5
 166+ 8085              WarpCoolDownPeriod  equ 90
 167+ 8085
 168+ 8085              ShipTypeSize		equ	32 			;??????? just a guess for now
 169+ 8085              ShipSST				equ 4			; its a space station
 170+ 8085              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
 171+ 8085              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
 172+ 8085              ShipCountMax		equ	2			; For now just 2 ships to debug
 173+ 8085              LineLimitPerShip	equ 70			; Max lines per ship
 174+ 8085              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
 175+ 8085              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
 176+ 8085
 177+ 8085              ; Memory page managment	(Refers to a memory slot as a place to access data)
 178+ 8085              ShipDataSlot		equ	6			; this may move into rom swap out space later
 179+ 8085              UniverseObjectSlot	equ	7
 180+ 8085
 181+ 8085              KeyForwardsView		equ	$20
 182+ 8085              ; Game specific equates
 183+ 8085              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
 184+ 8085              WarpSequenceCount   equ 50
 185+ 8085
 186+ 8085              ;...Game Colour Mapping
 187+ 8085              L2DustColour        equ L2ColourGREY_1
 188+ 8085              L2SunScannerBright  equ 252
 189+ 8085              L2SunScanner        equ 180
 190+ 8085              L2DebrisColour      equ L2ColourYELLOW_1
 191+ 8085
 192+ 8085
 193+ 8085              ; Ship Data
 194+ 8085              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
 195+ 8085              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
 196+ 8085              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
 197+ 8085              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
 198+ 8085              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
 199+ 8085              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
 200+ 8085              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
 201+ 8085              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
 202+ 8085              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
 203+ 8085              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
 204+ 8085              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
 205+ 8085              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
 206+ 8085              ;;;;00 00			 EQUW 0     \ type 12 is       Python
 207+ 8085              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
 208+ 8085              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
 209+ 8085              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
 210+ 8085              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
 211+ 8085              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
 212+ 8085              ;;;;00 00			 EQUW 0     \ type 18 is
 213+ 8085              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
 214+ 8085              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
 215+ 8085              ;;;;00 00			 EQUW 0     \ type 21 is
 216+ 8085              ;;;;00 00			 EQUW 0     \ type 22 is
 217+ 8085              ;;;;00 00			 EQUW 0     \ type 23 is
 218+ 8085              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
 219+ 8085              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
 220+ 8085              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
 221+ 8085              ;;;;00 00			 EQUW 0     \ type 27 is
 222+ 8085              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
 223+ 8085              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
 224+ 8085              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
 225+ 8085              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
 226+ 8085              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
 227+ 8085              ;;;;			\ NEWB examples
 228+ 8085              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
 229+ 8085              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
 230+ 8085              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
 231+ 8085              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
 232+ 8085              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
 233+ 8085
# file closed: ./Variables/constant_equates.asm
 593  8085                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 8085
   2+ 8085
   3+ 8085 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
   4+ 8087 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
   5+ 8089              ; Variables to simulate 6502 registers until code fixed
   6+ 8089              ; These must be here in this order as reading Y and X can then be a 16 bit read
   7+ 8089 00           regX		DB	0               ; using 16 bit read into BC this would go into C
   8+ 808A 00           regY		DB	0               ; using 16 bit read into BC this would go into B
   9+ 808B 00           regA		DB	0
  10+ 808C
  11+ 808C
  12+ 808C 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
  13+ 808D 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
  14+ 808F 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
  15+ 8091
  16+ 8091
  17+ 8091
  18+ 8091              ;XX16		DS	16				; 16 byte Matrix
  19+ 8091
  20+ 8091              P0INWK							; page 0 & 46
  21+ 8091              p0INWK31						; page 0 & 65
  22+ 8091              P0INWK36						; PAGE 0 &6A
  23+ 8091
  24+ 8091 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
  25+ 8092              LastNormalVisible	equ	XX4
  26+ 8092              varXX4              equ XX4
  27+ 8092
  28+ 8092
  29+ 8092
  30+ 8092 00           PATG		DB	0				; 6502 &03C9
  31+ 8093 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
  32+ 8095
  33+ 8095
  34+ 8095              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
  35+ 8095              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
  36+ 8095
  37+ 8095              ; Present System Variables
  38+ 8095
  39+ 8095 2B           RandomSeed				DB	43			    ; 00 DEBUG JUST SOME START VALUES
  40+ 8096 20           RandomSeed1				DB	32	            ; 01
  41+ 8097 0C           RandomSeed2				DB	12			    ; 02
  42+ 8098 42           RandomSeed3				DB	66			    ; 03
  43+ 8099 00 00 00 00  RandomSeedSave          DS  4               ; used in explosion routine to save randoms
  44+ 809D 00           varT1					DB	0				; 06
  45+ 809E 00           SClo					DB 0				; 07
  46+ 809F 00           SChi					DB 0				; 08
  47+ 80A0 00           varP					DB 0 				; 10	XX16+7
  48+ 80A1 00           varPhi					DB 0 				; 11	XX16+8
  49+ 80A2 00           varPhi2					DB 0 				; 12	XX16+9
  50+ 80A3              varPp1                  equ varPhi
  51+ 80A3              varPp2                  equ varPhi2
  52+ 80A3 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
  53+ 80A4 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
  54+ 80A5              UnivPointer				equ	UnivPointerLo
  55+ 80A5 00           varV					DB 0				; 22                          XX0+4
  56+ 80A6 00           varVHi					DB 0				; 23                          XX0+5
  57+ 80A7 00           varXXlo                 DB 0                ; 24
  58+ 80A8 00           varXXHi                 DB 0                ; 25
  59+ 80A9              varXX					equ	varXXlo
  60+ 80A9 00           YYlo                    DB 0                ; 26
  61+ 80AA 00           YYHi                    DB 0                ; 27
  62+ 80AB              varYY					equ	YYlo
  63+ 80AB              											;	28
  64+ 80AB              											;	29
  65+ 80AB              ;PlayerShipPositionData - Must be contiguous for setup
  66+ 80AB 00           BETA 					DB	0               ; 2A        (pitch done)
  67+ 80AC 00           JSTY                    DB  0               ; Joystick analog
  68+ 80AD 00           BET1 					DB	0               ; 2B        lower7 magnitude
  69+ 80AE 00           BET2                    DB  0               ;            climb sign
  70+ 80AF 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
  71+ 80B0 1F           BET1MAXC                DB  31              ; max climb
  72+ 80B1 E1           BET1MAXD                DB  -31             ; max dive
  73+ 80B2 00           XC						DB	0               ; 2C
  74+ 80B3 00           YC						DB 	0               ; 2D
  75+ 80B4              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
  76+ 80B4 00           ECMCountDown            DB  0
  77+ 80B5 00           ECMLoopB                DB  0
  78+ 80B6 00 00        JSTX                    DW  0               ;           Joystick analog value
  79+ 80B8 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
  80+ 80B9 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
  81+ 80BA 00           ALP2					DB  0				; 32		ALP2	Roll Sign
  82+ 80BB 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
  83+ 80BC 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
  84+ 80BD E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
  85+ 80BE
  86+ 80BE
  87+ 80BE              ;-- Message handler -----------------------------------------------------------------------------------------------------------------
  88+ 80BE              MAXMESSAGES             EQU 5
  89+ 80BE              MESSAGETIMELIMIT        EQU 20
  90+ 80BE              MESSAGESIZE             EQU 33
  91+ 80BE              MESSAGELINE             EQU $0001
  92+ 80BE
  93+ 80BE 00           MessageCount            DB  0                ; used for enquing messages later
  94+ 80BF 00           MessageCurrent          DB  0
  95+ 80C0 05 00        MessageIndex            DW  MAXMESSAGES
  96+ 80C2 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
  97+ 8167 05           MessageTimeout          DB  MAXMESSAGES
  98+ 8168 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
  99+ 818D
 100+ 818D              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 101+ 818D              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 102+ 818D              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 103+ 818D 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 104+ 818E              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 105+ 818E
 106+ 818E
 107+ 818E 00           QQ17					DB	0				;   72
 108+ 818F 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 109+ 8190 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 110+ 8191 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 111+ 8192 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 112+ 8193 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 113+ 8194 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 114+ 8195 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 115+ 8196 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 116+ 8197 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 117+ 8198
 118+ 8198 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 119+ 8199 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 120+ 819A 00           DELT4Lo					DB 	0				; 7E
 121+ 819B 00           DELT4Hi					DB 	0				; 7F
 122+ 819C              DELTA4                  equ                 DELT4Lo
 123+ 819C
 124+ 819C              ; SoundFX Variables -------------------------------------------------------------------------------------------
 125+ 819C              ;DEFUNCT, uses DELTA/ LAST_DELTAEngineSoundChanged:     DB  0
 126+ 819C FF           SoundFxToEnqueue        DB  $FF             ; $FF No sound to enque,if it is $FF then next sound will not get enqued
 127+ 819D 00           InterruptCounter        DB 0                ; simple marker updated once per IM2 event
 128+ 819E
 129+ 819E
 130+ 819E              ; Not thise must be in this order else 16 bit fetches will fail
 131+ 819E 00           varU                    DB  0               ;   80
 132+ 819F 00           varQ					DB  0 				;	81
 133+ 81A0 00           varR					DB  0 				;	82
 134+ 81A1 00           varS					DB  0 				;	83
 135+ 81A2              varRS                   equ varR
 136+ 81A2
 137+ 81A2 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 138+ 81A4
 139+ 81A4 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 140+ 81A5 00           YSAV                    DB  0               ; 85
 141+ 81A6 00           XX17					DB	0				; 86
 142+ 81A7              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 143+ 81A7              varXX17                 equ  XX17
 144+ 81A7 00           ScreenChanged           DB  0
 145+ 81A8 00           ScreenIndex             DB  0
 146+ 81A9 00 00        ScreenIndexTablePointer DW  0
 147+ 81AB 00           InvertedYAxis           DB  0
 148+ 81AC 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 149+ 81AD              											; Bit 7 Set  ShortRangeChart    $80
 150+ 81AD              											; Bit 6 Set  Galactic Chart     $40
 151+ 81AD              											; Bit 5 Set  Market Place       $20
 152+ 81AD              											; Bit 4 Set  Status Screen      $10
 153+ 81AD              											; Bit 3 Set  Display Inventory  $08
 154+ 81AD                                                          ; Bit 2 Set  Planet Data        $04
 155+ 81AD                                                          ; View bit combinations if the ones above not matched
 156+ 81AD                                                          ; bits 1 0
 157+ 81AD                                                          ;      1 1  Front view , i.e. $03
 158+ 81AD                                                          ;      1 0  Aft View          $02
 159+ 81AD                                                          ;      0 1  Left View         $01
 160+ 81AD                                                          ;      0 0  Right view        $00
 161+ 81AD              											; Bit 0 Set  Data On System
 162+ 81AD              											; 0  Space View (Not a menu)
 163+ 81AD 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 164+ 81AE 00           XX13                    DB  0               ;   89
 165+ 81AF 00           TYPE					DB	0				; 8C used for ship type in drawing
 166+ 81B0              ;Docked flag = 00 = in free space
 167+ 81B0              ;              FF = Docked
 168+ 81B0              ;              FE = transition
 169+ 81B0              ;              FD = Setup open space and transition to not docked
 170+ 81B0              ;              FC = Hyperspace manimation
 171+ 81B0              ;              FB = Hyperspace complete
 172+ 81B0 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 173+ 81B1 00           varCNT                  DB  0               ; 93
 174+ 81B2
 175+ 81B2 00           varK					DB	0				; 40
 176+ 81B3 00           varKp1					DB	0				; 41
 177+ 81B4 00           varKp2					DB	0				; 42
 178+ 81B5 00           varKp3					DB	0				; 43
 179+ 81B6
 180+ 81B6 00           varK2                   DB  0               ; 9B
 181+ 81B7 00           varK2p1                 DB  0               ; 9C K2 plus 1
 182+ 81B8 00           varK2p2                 DB  0               ; 9D K2 plus 2
 183+ 81B9 00           varK2p3                 DB  0               ; 9E K2 plus 3
 184+ 81BA
 185+ 81BA 00           Point                   DB  0               ; 9F      POINT
 186+ 81BB
 187+ 81BB 00           varT					DB	0				; D1
 188+ 81BC 00           varTSign                DB  0               ; for teh odd need for a 16 bit varT
 189+ 81BD
 190+ 81BD 00 00 00...  varVector9ByteWork      DS  9
 191+ 81C6
 192+ 81C6 00 00 00 00  varK3					DS	4				; D2
 193+ 81CA 00           varK3p2					DB	0				; 42
 194+ 81CB 00           varK3p3					DB	0				; 43
 195+ 81CC              varK3p1					equ varK3+1			; D3
 196+ 81CC 00 00 00 00  varK4					DS	4				; E0
 197+ 81D0              varK4p1					equ varK4+1			; D3
 198+ 81D0
 199+ 81D0
 200+ 81D0              ;Heap
 201+ 81D0
 202+ 81D0 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 203+ 81D2 00 00 00...  HeapData				DS	50
 204+ 8204              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
 205+ 8204              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
 206+ 8204              ; i.e. a list of programmed missiles in universe slot list code
 207+ 8204 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 208+ 820B              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 209+ 820B              ;  #&5 Does J reverse both joystick channels
 210+ 820B              ;  #&4 Does Y reverse joystick Y channel			03CB
 211+ 820B              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 212+ 820B              ;  #&3 Does F toggle flashing information			03CA
 213+ 820B              ;  #&1 Does A toggle keyboard auto-recentering ?
 214+ 820B              ;  #&0 Caps-lock toggles keyboard flight damping
 215+ 820B
 216+ 820B              ;-- Galaxy and Universe Variables ----------------------------------------------------------------------------------------------------
 217+ 820B 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 218+ 8210 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 219+ 8220 00           AlienItemsAvaliability  DB	0				; 039D
 220+ 8221 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 221+ 8222 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 222+ 8223 00 00 00...  WorkingSeeds			DS	6
 223+ 8229 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 224+ 822F 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 225+ 8235 00           PresentSystemX			DB	0				; System we are currently in
 226+ 8236 00           PresentSystemY			DB  0				; System we are currently in
 227+ 8237 00           TargetSystemX			DB	0				; System we are targeting for jump
 228+ 8238 00           TargetSystemY			DB	0				; System we are targeting for jump
 229+ 8239              ; --- Current System Data ------------------------------------------------------------------------------------------------------------
 230+ 8239 00           GovPresentSystem		DB	0				; 03AE Govenment
 231+ 823A 00           TekPresentSystem		DB	0				; 03AF Technology
 232+ 823B 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
 233+ 823C 00           ExtraVesselsCounter     DB  0
 234+ 823D 00           JunkCount				DB  0				; $033E
 235+ 823E 00           AsteroidCount           DB  0               ; Not used as yet
 236+ 823F 00           TransporterCount        DB  0
 237+ 8240 00           CopCount                DB  0
 238+ 8241 00           PirateCount             DB  0
 239+ 8242              ;- commander and ship state variables ------------------------------------------------------------------------------------------------
 240+ 8242 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 241+ 8243 00           PlayerECMActiveCount    DB  0               ; Countdown for player ECM
 242+ 8244 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 243+ 8245 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 244+ 8247 00           CurrentRank             DB  0   			;
 245+ 8248 00           MarketPrice				DB	0				; 03AA QQ24
 246+ 8249 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 247+ 824A 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 248+ 824B 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 249+ 824C 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 250+ 824E              											; this is ship lines stack pointer so may be redundant with paging
 251+ 824E              											; LS = line stack so we will have one for now to remove later
 252+ 824E              ; - no longer used, holding here intil its safe to delte
 253+ 824E 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 254+ 824F 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 255+ 8250              ; not needed as we don't do security on file COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 256+ 8250              ; - no longer used, holding here intil its safe to delte
 257+ 8250
 258+ 8250 00           DisplayEcononmy			DB	0				; 03B8
 259+ 8251 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 260+ 8252 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 261+ 8253 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 262+ 8255 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 263+ 8257 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 264+ 8259 00 00        DisplayRadius			DW	0
 265+ 825B              ; --- Used in creation of sun and planet ------------------------------------------------------------------------------------------------
 266+ 825B 00           PlanetXPos              DS  1
 267+ 825C 00           PlanetYPos              DS  1
 268+ 825D 00           PlanetZPos              DS  1
 269+ 825E 00           PlanetType              DS  1
 270+ 825F 00           SunXPos                 DS  1
 271+ 8260 00           SunYPos                 DS  1
 272+ 8261 00           SunZPos                 DS  1
 273+ 8262              ; -- Current Missile Runbtime data ------------------------------------------------------------------------------------------------
 274+ 8262 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
 275+ 8263 00 00        MissileXPos             DW      0
 276+ 8265 00           MissileXSgn             DB      0
 277+ 8266 00 00        MissileYPos             DW      0
 278+ 8268 00           MissileYSgn             DB      0
 279+ 8269 00 00        MissileZPos             DW      0
 280+ 826B 00           MissileZSgn             DB      0
 281+ 826C 00 00        CurrentTargetXpos       DS      2
 282+ 826E 00 00        CurrentTargetXsgn       DS      2
 283+ 8270 00 00        CurrentTargetYpos       DS      2
 284+ 8272 00 00        CurrentTargetYsgn       DS      2
 285+ 8274 00 00        CurrentTargetZpos       DS      2
 286+ 8276 00 00        CurrentTargetZsgn       DS      2
 287+ 8278 00 00        TargetVectorXpos        DS      2
 288+ 827A 00 00        TargetVectorXsgn        DS      2
 289+ 827C 00 00        TargetVectorYpos        DS      2
 290+ 827E 00 00        TargetVectorYsgn        DS      2
 291+ 8280 00 00        TargetVectorZpos        DS      2
 292+ 8282 00 00        TargetVectorZsgn        DS      2
 293+ 8284 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 294+ 8285 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 295+ 8286 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
 296+ 8287 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 297+ 8288              ; --- Spawn Probability Table ---------------------------------------------------------------------------------------------------
 298+ 8288 00 00 00...  SpawnLowVssalue         DS 6                                ; Maxium of 6 entries in table
 299+ 828E 00 00 00...  SpawnHighvalue          DS 6                                ; Maxium of 6 entries in table
 300+ 8294 00 00 00...  ShipClassId             DS 6
 301+ 829A              ; --- Space dust ----------------------------------------------------------------------------------------------------------------
 302+ 829A 00 00 00...  varDustWarpRender       DS MaxNumberOfStars * 2 ; Copy of base positions for warp
 303+ 82B0 00 00 00...  varDust                 DS MaxNumberOfStars * 6
 304+ 82F2 00 00 00...  varDustSceen            DS MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 305+ 8308 00           varStarX                DB 0
 306+ 8309 00           varStarY                DB 0
 307+ 830A 00 00 00...  varDustX                DS MaxNumberOfStars *2
 308+ 8320 00 00 00...  varDustY                DS MaxNumberOfStars *2
 309+ 8336 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 310+ 834C              ; --- Main Loop Data -------------------------------------------------------------------------------------------------------------
 311+ 834C 00           DockedFlag				DB	0				; 8E -
 312+ 834D 00           GamePaused              DB  0
 313+ 834E 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
 314+ 834F 00           SelectedUniverseSlot    DB  0
 315+ 8350 00           SetStationHostileFlag   DB  0               ; used to semaphore angry space station
 316+ 8351 00           ShipBlastCheckCounter   DB  0
 317+ 8352 00           InnerHyperCount			DB 	0				; 2F QQ22+1 (will move to a CTC timer later)
 318+ 8353 00           OuterHyperCount			DB 	0				; 2E QQ22
 319+ 8354 00           WarpCooldown            DB  0
 320+ 8355 00           EventCounter            DB  0
 321+ 8356 00           HyperCircle             DB  0
 322+ 8357 00           MissJumpFlag            DB  0
 323+ 8358 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 324+ 8359 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 325+ 835A 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 326+ 835B 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 327+ 835C 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
 328+ 835D 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 329+ 835E              UniverseSlotListSize    equ	12
 330+ 835E 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
 331+ 836A 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
 332+ 8376              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
 333+ 8376 05           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
 334+ 8377 00           ConsoleRedrawFlag       DB  0
 335+ 8378 00           TextInputMode           DB  0
 336+ 8379 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 337+ 837A                                                          ; 7    6    5    4     3    2        1    0
 338+ 837A                                                          ; Up   Down Left Right Home Recentre
 339+ 837A 00           FireLaserPressed        DB  0
 340+ 837B 00           WarpPressed             DB  0
 341+ 837C 00           CompassColor			DB	0				; 03C5
 342+ 837D 00           SoundToggle				DB	0				; 03C6
 343+ 837E 00           KeyboardRecenterToggle	DB	0				; 03C8
 344+ 837F 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 345+ 8380 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 346+ 8381 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 347+ 8382 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 348+ 8383 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 349+ 8384 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 350+ 8385
 351+ 8385              ; Working Data
 352+ 8385
 353+ 8385              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 354+ 8385              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 355+ 8385              ; $0925 =	EQUW page9+37* 1
 356+ 8385              ; $094A =	EQUW page9+37* 2
 357+ 8385              ; $096F =	EQUW page9+37* 3
 358+ 8385              ; $0994 =	EQUW page9+37* 4
 359+ 8385              ; $09B9 =	EQUW page9+37* 5
 360+ 8385              ; $09DE =	EQUW page9+37* 6
 361+ 8385              ; $0A03 =	EQUW page9+37* 7
 362+ 8385              ; $0A28 =	EQUW page9+37* 8
 363+ 8385              ; $0A4D =	EQUW page9+37* 9
 364+ 8385              ; $0A72 =	EQUW page9+37*10
 365+ 8385              ; $0A97 =	EQUW page9+37*11
 366+ 8385              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 367+ 8385
 368+ 8385
 369+ 8385
 370+ 8385              ; 0b00 is start address of data to save
 371+ 8385              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 372+ 8385              											; Bit mask XXXX10XX - Thargoid plan mission
 373+ 8385
 374+ 8385 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 375+ 8386
 376+ 8386 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 377+ 8388 00 00        CommanderLoadAddress	DW	0				;0C03
 378+ 838A 00 00        LengthOfFile			DW	0				;0C0B
 379+ 838C 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 380+ 838E
 381+ 838E 00 00 00...  EdgesBuffer				DS 50
 382+ 83C0              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 383+ 83C0              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 384+ 83C0
 385+ 83C0 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 386+ 8406              ShipLineStackTop		equ $ - ShipLineStack
 387+ 8406
 388+ 8406 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 389+ 84C6              ; LSX vector overlaps with LSO
 390+ 84C6 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 391+ 84C7 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 392+ 84C8
 393+ 84C8              ; -- Player Runtime Data
 394+ 84C8 00           GunTemperature          DB  0
 395+ 84C9 00           CabinTemperature        DB  0
 396+ 84CA 00           PlayerForwardSheild0	DB	0 ; ?????
 397+ 84CB 00           PlayerForwardSheild1    DB	0
 398+ 84CC 00           PlayerForwardSheild2    DB	0
 399+ 84CD 00           ForeShield				DB	0				; These three must be contiguous
 400+ 84CE 00           AftShield				DB	0				; .
 401+ 84CF 00           PlayerEnergy			DB	0				; and in this order
 402+ 84D0 00           CompassX				DB	0				; 03A8
 403+ 84D1 00           CompassY				DB	0				; 03A9
 404+ 84D2              ; Simplification of missile targetting
 405+ 84D2              ; $FF no missile targettting enabled
 406+ 84D2              ; $FE missile targetting, no target selected
 407+ 84D2              ; bit 7 set then tagetting and lower nibble holds missile target and launching
 408+ 84D2              ; bit 7 clear launch at selected target in lower nibble
 409+ 84D2 00           MissileTargettingFlag   DB  0
 410+ 84D3              ;;MissileTarget			DB  0				; 45
 411+ 84D3              ;;MissileLaunchFlag       DB  0
 412+ 84D3 00 00 00...  CommanderName           DS  15
 413+ 84E2 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 414+ 84E3 00           BadnessStatus           DB  0
 415+ 84E4              ;note rapidly changing views could reset these so need to consider it in an array
 416+ 84E4              ; LaserType
 417+ 84E4              ; LaserPulseRate                          ; how many pulses can be fired before long pause
 418+ 84E4              ; LaserPulsePause                         ; time before next pulse - 0 = beam
 419+ 84E4              ; LaserPulseRest                          ; time before pulse count resets to 0
 420+ 84E4              ; LaserDamageOutput                       ; amount of damage for a laser hit
 421+ 84E4              ; LaserEnergyDrain                        ; amount of energy drained by cycle
 422+ 84E4              ; LaserHeat                               ; amount of heat generated
 423+ 84E4              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
 424+ 84E4              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
 425+ 84E4              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
 426+ 84E4              ; LaserTechLevel                          ; minimum tech level system to buy from
 427+ 84E4              ; need to add copy table routines
 428+ 84E4 00           CurrLaserType           DB  0               ; current view laser type, copied in from LaserType array
 429+ 84E5 00           CurrLaserDamage         DB  0               ; copied in from LaserDamagedFlag array
 430+ 84E6 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
 431+ 84E7 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
 432+ 84E8 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
 433+ 84E9 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
 434+ 84EA
 435+ 84EA 00           CurrLaserBurstRate      DB  0
 436+ 84EB 00           CurrLaserBurstCount     DB  0
 437+ 84EC 00           CurrLaserDamageOutput   DB  0
 438+ 84ED 00           CurrLaserEnergyDrain    DB  0
 439+ 84EE 00           CurrLaserHeat           DB  0
 440+ 84EF 00           CurrLaserDurability     DB  0
 441+ 84F0 00           CurrLaserDurabilityAmount DB  0
 442+ 84F1
 443+ 84F1              ; Count down timers must be aligned like this to work
 444+ 84F1 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
 445+ 84F2 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
 446+ 84F3 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
 447+ 84F4 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
 448+ 84F5
 449+ 84F5              ; -- Input variables
 450+ 84F5 00           JoystickX				DB	0				; 034C JSTX
 451+ 84F6 00           JoystickY				DB	0				; 034D JSTY
 452+ 84F7 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 453+ 84F8 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 454+ 84F9
 455+ 84F9              ; -- Console drawing data
 456+ 84F9              FShieldStart            equ $8410
 457+ 84F9              AShieldStart            equ $8D10
 458+ 84F9              FuelStart               equ $9410
 459+ 84F9
 460+ 84F9              EnergyBar4Start         equ $A5D5
 461+ 84F9              EnergyBar3Start         equ $ADD5
 462+ 84F9              EnergyBar2Start         equ $B5D5
 463+ 84F9              EnergyBar1Start         equ $BDD5
 464+ 84F9              ; 70 /2 = 35 values
 465+ 84F9              ;                            0                             1                             2                             3
 466+ 84F9              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 467+ 84F9 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 467+ 84FD 04 04 05 06
 467+ 8501 06 07 08 09
 467+ 8505 0A 0A 0B 0C
 467+ 8509 0D 0E 0E 0F
 467+ 850D 10 10 11 13
 467+ 8511 14 15 15 16
 467+ 8515 17 18 19 1A
 467+ 8519 1B 1C 1E 1F
 467+ 851D 1F
 468+ 851E              SpeedoStart             equ $84D1
 469+ 851E              ;                            0                             1                             2                             3                             4
 470+ 851E              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 471+ 851E 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 471+ 8522 04 04 05 06
 471+ 8526 06 07 08 09
 471+ 852A 0A 0A 0B 0C
 471+ 852E 0D 0E 0E 0F
 471+ 8532 10 10 11 12
 471+ 8536 13 14 14 15
 471+ 853A 16 17 18 18
 471+ 853E 19 1A 1A 1B
 471+ 8542 1C 1C 1D 1E
 471+ 8546 1F
 472+ 8547
 473+ 8547              DialMiddleXPos          equ $E1
 474+ 8547              RollMiddle              equ $8CE0
 475+ 8547              PitchMiddle             equ $94E0
 476+ 8547
 477+ 8547
 478+ 8547
 479+ 8547
 480+ 8547
# file closed: ./Variables/general_variables.asm
 594  8547                  INCLUDE "./Variables/general_variablesRoutines.asm"
# file opened: ./Variables/general_variablesRoutines.asm
   1+ 8547              LaserDrainSystems:      DrainSystem PlayerEnergy, CurrLaserEnergyDrain
   1+ 8547 3A ED 84    >                        ld      a,(CurrLaserEnergyDrain)
   1+ 854A 47          >                        ld      b,a
   1+ 854B 3A CF 84    >                        ld      a,(PlayerEnergy)
   1+ 854E 90          >                        sub     a,b
   1+ 854F 32 CF 84    >                        ld      (PlayerEnergy),a
   1+ 8552 38 03       >                        jr      c,.ZeroSystem
   1+ 8554 C3 5B 85    >                        jp      .ExitPoint
   1+ 8557             >.ZeroSystem:            ZeroA
   1+ 8557 AF          >                        xor a
   1+ 8558 32 CF 84    >                        ld      (PlayerEnergy),a
   1+ 855B             >.ExitPoint
   2+ 855B                                      BoostSystem GunTemperature, CurrLaserHeat
   2+ 855B 3A EE 84    >                        ld      a,(CurrLaserHeat)
   2+ 855E 47          >                        ld      b,a
   2+ 855F 3A C8 84    >                        ld      a,(GunTemperature)
   2+ 8562 80          >                        add     b
   2+ 8563 32 C8 84    >                        ld      (GunTemperature),a
   2+ 8566 38 03       >                        jr      c, .MaxSystem
   2+ 8568 C3 70 85    >                        jp      .ExitPoint
   2+ 856B 3E FF       >.MaxSystem:             ld      a,255
   2+ 856D 32 C8 84    >                        ld      (GunTemperature),a
   2+ 8570             >.ExitPoint
   3+ 8570 C9                                   ret
   4+ 8571
   5+ 8571
   6+ 8571              ResetPlayerShip:        ZeroThrottle
   6+ 8571 AF          >                        xor     a
   6+ 8572 32 99 81    >                        ld      (DELTA),a
   6+ 8575 32 9A 81    >                        ld      (DELT4Lo),a
   6+ 8578 32 9B 81    >                        ld      (DELT4Lo+1),a
   7+ 857B                                      ZeroPitch
   7+ 857B AF          >                        xor     a
   7+ 857C 32 AE 80    >                        ld      (BET2),a
   7+ 857F 32 AF 80    >                        ld      (BET2FLIP),a
   7+ 8582 32 AC 80    >                        ld      (JSTY),a
   7+ 8585 32 AB 80    >                        ld      (BETA),a
   8+ 8588                                      ZeroRoll
   8+ 8588 AF          >                        xor     a                              ; zero roll and climb
   8+ 8589 32 BA 80    >                        ld      (ALP2),a
   8+ 858C 32 BB 80    >                        ld      (ALP2FLIP),a
   8+ 858F 32 B6 80    >                        ld      (JSTX),a
   8+ 8592 32 B8 80    >                        ld      (ALPHA),a
   9+ 8595                                      ClearMissileTargetting
   9+ 8595 3E FF       >                        ld      a,StageMissileNotTargeting
   9+ 8597 32 D2 84    >                        ld      (MissileTargettingFlag),a
  10+ 859A                                      ClearECM
  10+ 859A AF          >                        xor     a
  10+ 859B 32 B4 80    >                        ld      (ECMCountDown),a
  11+ 859E                                      ChargeEnergyAndShields
  11+ 859E 3E FF       >                        ld      a,$FF
  11+ 85A0 32 CF 84    >                        ld      (PlayerEnergy),a
  11+ 85A3 32 CD 84    >                        ld      (ForeShield),a
  11+ 85A6 32 CE 84    >                        ld      (AftShield),a
  12+ 85A9                                      ClearTemperatures
  12+ 85A9 AF          >                        xor     a
  12+ 85AA 32 C9 84    >                        ld      (CabinTemperature),a
  12+ 85AD 32 C8 84    >                        ld      (GunTemperature),a
  13+ 85B0                                      ClearWarpPressed
  13+ 85B0             >                        SetMemFalse WarpPressed
  13+ 85B0 3E FF       >                        ld      a,$FF
  13+ 85B2 32 7B 83    >                        ld      (WarpPressed),a
  14+ 85B5 CD 02 86                             call    IsLaserUseable
  15+ 85B8                                      MMUSelectCommander
  15+ 85B8 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  16+ 85BC CD 04 E3                             call    LoadLaserToCurrent
  17+ 85BF C8                                   ret     z
  18+ 85C0
  19+ 85C0 C9                                   ret
  20+ 85C1
  21+ 85C1 21 AA 87     AddCargoTypeD:          ld      hl,CargoTonnes
  22+ 85C4 57                                   ld      d,a
  23+ 85C5 ED 31                                add     hl,a
  24+ 85C7 34                                   inc     (hl)
  25+ 85C8 C9                                   ret
  26+ 85C9
  27+ 85C9 7A           CanWeScoopCargoD:       ld      a,d
  28+ 85CA                                      JumpIfAGTENusng  GoldIndex, .ItMayNotBeTonnes  ; if its cargo in kgs or gs then jump
  28+ 85CA FE 0E       >                        cp     GoldIndex
  28+ 85CC D2 EE 85    >                        jp		nc,.ItMayNotBeTonnes
  29+ 85CF 21 AA 87     .ItsTonnes:             ld      hl,CargoTonnes
  30+ 85D2 0E 00                                ld      c,0
  31+ 85D4 06 0E                                ld      b,MineralsIndex+1           ; Only count to Gold as that is in KG
  32+ 85D6 7E           .AddLoop:               ld      a,(hl)
  33+ 85D7 81                                   add     c
  34+ 85D8 4F                                   ld      c,a                     ; add to counter
  35+ 85D9 05                                   dec     b
  36+ 85DA 23                                   inc     hl
  37+ 85DB 10 F9                                djnz    .AddLoop
  38+ 85DD 21 BB 87                             ld      hl,AlienItemsTonnes     ; Finally do alien items
  39+ 85E0 7E                                   ld      a,(hl)
  40+ 85E1 81                                   add     c
  41+ 85E2 4F                                   ld      c,a
  42+ 85E3 3A A8 87                             ld      a,(CargoBaySize)        ; Get Bay Size
  43+ 85E6                                      JumpIfAEqNusng c, .CargoFull
  43+ 85E6 B9          >                        cp     c
  43+ 85E7 CA EC 85    >                        jp      z,.CargoFull
  44+ 85EA              .StillRoom:             ClearCarryFlag
  44+ 85EA B7          >                        or a
  45+ 85EB C9                                   ret
  46+ 85EC              .CargoFull:             SetCarryFlag
  46+ 85EC 37          >                        scf
  47+ 85ED C9                                   ret
  48+ 85EE              .ItMayNotBeTonnes:      JumpIfAEqNusng  AlienItemsIndex,.ItsTonnes       ;ALienItems are tonnes
  48+ 85EE FE 11       >                        cp     AlienItemsIndex
  48+ 85F0 CA CF 85    >                        jp      z,.ItsTonnes
  49+ 85F3 21 AA 87                             ld      hl,CargoTonnes
  50+ 85F6 7A                                   ld      a,d
  51+ 85F7 ED 31                                add     hl,a
  52+ 85F9 7E                                   ld      a,(hl)
  53+ 85FA                                      JumpIfAEqNusng  200, .StillRoom
  53+ 85FA FE C8       >                        cp     200
  53+ 85FC CA EA 85    >                        jp      z,.StillRoom
  54+ 85FF C3 EC 85                             jp      .CargoFull
  55+ 8602              ; END of rountine
  56+ 8602
  57+ 8602 3A E4 84     IsLaserUseable:         ld      a,(CurrLaserType)
  58+ 8605 FE FF                                cp      255
  59+ 8607 C8                                   ret     z
  60+ 8608 3A E5 84                             ld      a,(CurrLaserDamage)
  61+ 860B FE FF                                cp      255
  62+ 860D C9                                   ret
  63+ 860E
  64+ 860E CD D4 86     InitMainLoop:           call    ClearUnivSlotList
  65+ 8611 AF                                   xor     a
  66+ 8612 32 4E 83                             ld      (CurrentUniverseAI),a
  67+ 8615 3E 03                                ld      a,3
  68+ 8617 32 AC 81                             ld      (MenuIdMax),a
  69+ 861A                                      SetMemFalse SetStationHostileFlag
  69+ 861A 3E FF       >                        ld      a,$FF
  69+ 861C 32 50 83    >                        ld      (SetStationHostileFlag),a
  70+ 861F                                      SetMemFalse DockedFlag
  70+ 861F 3E FF       >                        ld      a,$FF
  70+ 8621 32 4C 83    >                        ld      (DockedFlag),a
  71+ 8624              ;                        call    InitialiseFrontView
  72+ 8624 CD 09 6A                             call    InitialiseCommander
  73+ 8627                                      MMUSelectUniverseN 2
  73+ 8627 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
  74+ 862B CD 0D 6B                             call    SetInitialShipPosition
  75+ 862E              ; Initialist screen refresh
  76+ 862E 3E 05                                ld      a, ConsoleRefreshInterval
  77+ 8630 32 76 83                             ld      (ConsoleRefreshCounter),a
  78+ 8633                                      SetMemFalse    ConsoleRedrawFlag
  78+ 8633 3E FF       >                        ld      a,$FF
  78+ 8635 32 77 83    >                        ld      (ConsoleRedrawFlag),a
  79+ 8638                                      MMUSelectStockTable
  79+ 8638 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
  80+ 863C CD AA E0                             call    generate_stock_market
  81+ 863F CD 88 74                             call    ResetMessageQueue
  82+ 8642                                      InitEventCounter
  82+ 8642 AF          >                        xor     a
  82+ 8643 32 55 83    >                        ld      (EventCounter),a
  83+ 8646                                      ClearMissJump
  83+ 8646 3E FF       >                        ld      a,$FF
  83+ 8648 32 57 83    >                        ld      (MissJumpFlag),a
  84+ 864B                                      SetMemFalse TextInputMode
  84+ 864B 3E FF       >                        ld      a,$FF
  84+ 864D 32 78 83    >                        ld      (TextInputMode),a
  85+ 8650 C9                                   ret
  86+ 8651
  87+ 8651              ; needs to be called after a kill too
  88+ 8651 2A 45 82     SetPlayerRank:          ld      hl,(KillTally)
  89+ 8654 DD 21 74 8A                          ld      ix,RankingTableLow
  90+ 8658 06 00                                ld      b,0
  91+ 865A DD 56 01     .CompareLoop:           ld      d,(ix+1)
  92+ 865D DD 5E 00                             ld      e,(ix+0)
  93+ 8660 A7                                   and     a             ; compare HL to DE
  94+ 8661 ED 52                                sbc     hl,de         ; we can throw away HL now
  95+ 8663 28 09                                jr      z,.FoundRank
  96+ 8665 38 07                                jr      c,.FoundRank
  97+ 8667 DD 23                                inc     ix
  98+ 8669 DD 23                                inc     ix
  99+ 866B 04                                   inc     b
 100+ 866C 18 EC                                jr      .CompareLoop
 101+ 866E 78           .FoundRank:             ld      a,b
 102+ 866F 32 47 82                             ld      (CurrentRank),a
 103+ 8672 C9                                   ret
 104+ 8673
 105+ 8673 3E 00        SetSpeedZero:           ld      a,0
 106+ 8675 32 99 81                             ld      (DELTA),a                                       ;
 107+ 8678 67                                   ld      h,a                                             ;
 108+ 8679 6F                                   ld      l,a                                             ;
 109+ 867A 22 9A 81                             ld      (DELT4Lo),hl                                    ;
 110+ 867D C9                                   ret
 111+ 867E
 112+ 867E 21 CF 84     RechargeShip:           ld      hl,PlayerEnergy                                 ; if enery >= 128
 113+ 8681 7E                                   ld      a,(hl)
 114+ 8682 CB 7F                                bit     7,a                                             ; then we can recharge shields
 115+ 8684 28 0D                                jr      z,.UpdatePlayerEnergy
 116+ 8686 21 CD 84     .ShieldCharge:          ld      hl,ForeShield                                   ; charge front shield
 117+ 8689 34                                   inc     (hl)
 118+ 868A 20 01                                jr      nz,.DoneForeShield
 119+ 868C 35           .ForeOverCharge:        dec     (hl)
 120+ 868D 23           .DoneForeShield:        inc     hl                                              ; point to aft shield
 121+ 868E 34                                   inc     (hl)
 122+ 868F 20 01                                jr      nz,.DoneAftShield
 123+ 8691 35                                   dec     (hl)                                            ; back to 255
 124+ 8692 23           .DoneAftShield:         inc     hl                                              ; point to energy
 125+ 8693 34           .UpdatePlayerEnergy:    inc     (hl)
 126+ 8694 28 0A                                jr      z,.OverflowedEnergy
 127+ 8696 3A C9 87                             ld      a,(ExtraEnergyUnit)
 128+ 8699                                      ReturnIfANENusng EquipmentItemFitted                    ; if energy unit fitted an extra step
 128+ 8699 FE FF       >                        cp      EquipmentItemFitted
 128+ 869B C0          >                        ret     nz
 129+ 869C 34           .EnergyUnitFitted:      inc     (hl)
 130+ 869D 28 01                                jr      z,.OverflowedEnergy
 131+ 869F C9                                   ret
 132+ 86A0 35           .OverflowedEnergy:      dec     (hl)                                            ;  restore to 255
 133+ 86A1 C9                                   ret
 134+ 86A2 21 CF 84     .SkipShieldCharge:      ld      hl,PlayerEnergy
 135+ 86A5 18 EC                                jr      .UpdatePlayerEnergy
 136+ 86A7
 137+ 86A7              ; sets carry to true if target
 138+ 86A7 3A D2 84     IsMissileLockedOn:      ld      a,(MissileTargettingFlag)
 139+ 86AA CB 7F                                bit     7,a
 140+ 86AC 28 07                                jr      z, .TargetSelected
 141+ 86AE E6 70                                and     $70                         ; are all upper bits set (we can ignore bit 7)
 142+ 86B0 CA B5 86                             jp      z, .TargetSelected           ; if its only bit 7 then we have a lock
 143+ 86B3                                      ClearCarryFlag                      ; if bitsd 6 to 4 were set then it must be unlocked status
 143+ 86B3 B7          >                        or a
 144+ 86B4 C9                                   ret
 145+ 86B5              .TargetSelected:        JumpIfSlotAEmpty .TargetInvalid     ; does slot A have an target
 145+ 86B5 21 5E 83    >                        ld      hl,UniverseSlotList
 145+ 86B8 ED 31       >                        add     hl,a
 145+ 86BA 7E          >                        ld      a,(hl)
 145+ 86BB 3C          >                        inc     a
 145+ 86BC CA C2 86    >                        jp      z,.TargetInvalid    ; if slot was ff inc would make it 0
 145+ 86BF 3D          >                        dec     a           ; get original value back for later
 146+ 86C0                                      SetCarryFlag
 146+ 86C0 37          >                        scf
 147+ 86C1 C9                                   ret
 148+ 86C2 3E FF        .TargetInvalid:         ld      a, StageMissileNotTargeting     ; housekeep missile status if target gone
 149+ 86C4 32 D2 84                             ld      (MissileTargettingFlag),a
 150+ 86C7 C9                                   ret
 151+ 86C8
# file closed: ./Variables/general_variablesRoutines.asm
 595  86C8                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ 86C8              ; Note this code is core code and can not be in a memory bank unless do explosion code is changed too
   2+ 86C8 AF           ClearSlotCount:         xor     a
   3+ 86C9 21 5E 83                             ld      hl,UniverseSlotList
   4+ 86CC 06 0C                                ld      b, UniverseSlotListSize ; prbably not needed + UniverseSlotTypeSize
   5+ 86CE 77           .fillLoop:              ld      (hl),a
   6+ 86CF 23                                   inc     hl
   7+ 86D0 10 FC                                djnz    .fillLoop
   8+ 86D2 C9                                   ret
   9+ 86D3
  10+ 86D3              ; Initialises all types to a count of 1 where there is an occupied universe slot
  11+ 86D3              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  12+ 86D3              ; DOE NOT WORK CorrectSlotCount:       call    ClearSlotCount
  13+ 86D3              ; DOE NOT WORK                         ld      hl,UniverseSlotCount
  14+ 86D3              ; DOE NOT WORK                         ld      de,UniverseSlotList
  15+ 86D3              ; DOE NOT WORK                         ld      b,UniverseSlotListSize
  16+ 86D3              ; DOE NOT WORK .fillLoop:              ld      a,(de)
  17+ 86D3              ; DOE NOT WORK                         cp      $FF
  18+ 86D3              ; DOE NOT WORK                         jr      z,.SkipSlot
  19+ 86D3              ; DOE NOT WORK .CorrectSlot:           ld      (hl),a
  20+ 86D3              ; DOE NOT WORK                         inc     hl
  21+ 86D3              ; DOE NOT WORK                         ld      (hl),1
  22+ 86D3              ; DOE NOT WORK                         inc     hl
  23+ 86D3              ; DOE NOT WORK                         inc     hl
  24+ 86D3              ; DOE NOT WORK .SkipSlot               inc     de
  25+ 86D3              ; DOE NOT WORK                         djnz    .fillLoop
  26+ 86D3 C9                                   ret
  27+ 86D4              ; Wipe all items
  28+ 86D4 3E FF        ClearUnivSlotList:      ld      a,$FF
  29+ 86D6 21 5E 83                             ld      hl,UniverseSlotList
  30+ 86D9 06 18                                ld      b, UniverseSlotListSize * 2
  31+ 86DB 77           .fillLoop:              ld      (hl),a
  32+ 86DC 23                                   inc     hl
  33+ 86DD 10 FC                                djnz    .fillLoop
  34+ 86DF C9                                   ret
  35+ 86E0
  36+ 86E0 21 5E 83     SetSlot0ToSpaceStation: ld      hl,UniverseSlotList
  37+ 86E3 36 02                                ld      (hl),ShipTypeStation
  38+ 86E5 21 6A 83                             ld      hl,UniverseSlotType
  39+ 86E8 36 02                                ld      (hl),ShipTypeStation
  40+ 86EA C9                                   ret
  41+ 86EB
  42+ 86EB 21 5E 83     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  43+ 86EE ED 31                                add     hl,a
  44+ 86F0 70                                   ld      (hl),b
  45+ 86F1 C9                                   ret
  46+ 86F2
  47+ 86F2 21 6A 83     SetSlotAToClassB:       ld      hl,UniverseSlotType
  48+ 86F5 ED 31                                add     hl,a
  49+ 86F7 70                                   ld      (hl),b
  50+ 86F8 C9                                   ret
  51+ 86F9
  52+ 86F9              ; Clears all except slot A, used when say restarting a space station post launch
  53+ 86F9 57           ClearFreeSlotListSaveA: ld      d,a
  54+ 86FA 0E 00                                ld      c,0
  55+ 86FC 21 5E 83                             ld      hl,UniverseSlotList
  56+ 86FF 06 18                                ld      b, UniverseSlotListSize * 2
  57+ 8701 79           .fillLoop:              ld      a,c
  58+ 8702 BA                                   cp      d
  59+ 8703 28 03                                jr      z,.SkipSlot
  60+ 8705 3E FF                                ld      a,$FF
  61+ 8707 77                                   ld      (hl),a
  62+ 8708 23           .SkipSlot:              inc     hl
  63+ 8709 23                                   inc     hl
  64+ 870A 10 F5                                djnz    .fillLoop
  65+ 870C C9                                   ret
  66+ 870D
  67+ 870D 21 5E 83     ClearSlotA:             ld      hl,UniverseSlotList
  68+ 8710 ED 31                                add     hl,a
  69+ 8712 36 FF                                ld      (hl),$FF
  70+ 8714 3E 0C                                ld      a,UniverseSlotListSize  ; move to types
  71+ 8716 ED 31                                add     hl,a
  72+ 8718 36 FF                                ld      (hl),$FF
  73+ 871A C9                                   ret
  74+ 871B
  75+ 871B              ; Space Station will always be slot 0
  76+ 871B 21 6B 83     ClearJunk:              ld      hl,UniverseSlotType+1
  77+ 871E 0E 01                                ld      c,1
  78+ 8720 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  79+ 8722 7E           .NextShip:              ld      a,(hl)
  80+ 8723 FE 03                                cp      ShipTypeJunk
  81+ 8725 CA 36 87                             jp      z,.ProcessJunk
  82+ 8728 FE 04                                cp      ShipTypeScoopable
  83+ 872A CA 36 87                             jp      z,.ProcessJunk
  84+ 872D 23           .DoneIteration:         inc     hl
  85+ 872E 0C                                   inc     c
  86+ 872F 10 F1                                djnz    .NextShip
  87+ 8731                                      ClearJunkCount
  87+ 8731             >                        ZeroA
  87+ 8731 AF          >                        xor a
  87+ 8732 32 3D 82    >                        ld      (JunkCount),a
  88+ 8735 C9                                   ret
  89+ 8736 79           .ProcessJunk:           ld      a,c
  90+ 8737 CD 0D 87                             call    ClearSlotA
  91+ 873A C3 2D 87                             jp      .DoneIteration
  92+ 873D
  93+ 873D
  94+ 873D 21 6B 83     WarpJunk:               ld      hl,UniverseSlotType+1
  95+ 8740 0E 01                                ld      c,1
  96+ 8742 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  97+ 8744 7E           .NextShip:              ld      a,(hl)
  98+ 8745 FE 03                                cp      ShipTypeJunk
  99+ 8747 CA 54 87                             jp      z,.ProcessJunk
 100+ 874A FE 04                                cp      ShipTypeScoopable
 101+ 874C CA 54 87                             jp      z,.ProcessJunk
 102+ 874F 23           .DoneIteration:         inc     hl
 103+ 8750 0C                                   inc     c
 104+ 8751 10 F1                                djnz    .NextShip
 105+ 8753 C9                                   ret
 106+ 8754 79           .ProcessJunk:           ld      a,c
 107+ 8755                                      MMUSelectUniverseA
 107+ 8755 C6 46       >                     add    a,BankUNIVDATA0
 107+ 8757 ED 92 56    >                     nextreg UniverseMMU,       a
 108+ 875A CD AA C5                             call    WarpOffset
 109+ 875D C3 4F 87                             jp      .DoneIteration
 110+ 8760
 111+ 8760
 112+ 8760 21 6B 83     AreShipsPresent:        ld      hl,UniverseSlotType+1
 113+ 8763 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
 114+ 8765 7E           .NextShip:              ld      a,(hl)
 115+ 8766 FE 00                                cp      ShipTypeNormal
 116+ 8768                                      ClearCarryFlag
 116+ 8768 B7          >                        or a
 117+ 8769 C8                                   ret     z
 118+ 876A 23                                   inc     hl
 119+ 876B 10 F8                                djnz    .NextShip
 120+ 876D                                      SetCarryFlag
 120+ 876D 37          >                        scf
 121+ 876E C9                                   ret
 122+ 876F
 123+ 876F 21 5E 83     IsSpaceStationPresent:  ld      hl,UniverseSlotList
 124+ 8772                                      ClearCarryFlag
 124+ 8772 B7          >                        or a
 125+ 8773 7E           .SearchLoop:            ld      a,(hl)
 126+ 8774                                      ReturnIfAEqNusng ShipTypeStation
 126+ 8774 FE 02       >                        cp      ShipTypeStation
 126+ 8776 C8          >                        ret     z
 127+ 8777                                      SetCarryFlag
 127+ 8777 37          >                        scf
 128+ 8778 C9                                   ret
 129+ 8779
 130+ 8779 21 5E 83     GetTypeAtSlotA:         ld      hl,UniverseSlotList
 131+ 877C ED 31                                add     hl,a
 132+ 877E 7E                                   ld      a,(hl)
 133+ 877F C9                                   ret
 134+ 8780
 135+ 8780 21 5F 83     IsPlanetOrSpaceStation: ld      hl,UniverseSlotList+1
 136+ 8783 7E                                   ld      a,(hl)
 137+ 8784 C9                                   ret
 138+ 8785
 139+ 8785 21 5E 83     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 140+ 8788 06 0C                                ld      b, UniverseSlotListSize
 141+ 878A 0E 00                                ld      c, 0
 142+ 878C 7E           .SearchLoop:            ld      a,(hl)
 143+ 878D                                      JumpIfAEqNusng $FF, .FoundSlot
 143+ 878D FE FF       >                        cp     $FF
 143+ 878F CA 98 87    >                        jp      z,.FoundSlot
 144+ 8792 0C                                   inc     c
 145+ 8793 23                                   inc     hl
 146+ 8794 10 F6                                djnz    .SearchLoop
 147+ 8796                                      SetCarryFlag
 147+ 8796 37          >                        scf
 148+ 8797 C9                                   ret
 149+ 8798              .FoundSlot:             ClearCarryFlag
 149+ 8798 B7          >                        or a
 150+ 8799 C9                                   ret
 151+ 879A
 152+ 879A
 153+ 879A CD 85 87     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 154+ 879D 79                                   ld      a,c
 155+ 879E C9                                   ret
 156+ 879F
# file closed: ./Variables/UniverseSlotRoutines.asm
 596  879F                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 879F 00           AutoDocking				DB	0				; $033F
   2+ 87A0 00           PlayerECM				DB	0				; $0340
   3+ 87A1 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 87A2 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 87A3 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 87A7 19           Fuel					DB	25				; 0365  QQ14
   7+ 87A8 46           CargoBaySize			DB	70				; 036E
   8+ 87A9 00           CargoRunningLoad        DB  0
   9+ 87AA 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   9+ 87AE 00 00 00 00
   9+ 87B2 00 00 00 00
   9+ 87B6 00 00 00 00
  10+ 87BA              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  11+ 87BA              SlaveCargoTonnes		equ CargoTonnes+3
  12+ 87BA              NarcoticsCargoTonnes	equ CargoTonnes+6
  13+ 87BA              FirearmsCargoTonnes		equ CargoTonnes+10
  14+ 87BA              GoldCargoKGs:           equ CargoTonnes+15
  15+ 87BA              AlienItemsTonnes        equ CargoTonnes+17
  16+ 87BA              ; For each view laser a localised copy of the stats
  17+ 87BA              ; TODO - need to add code to maintain on load/save/equipment transactions
  18+ 87BA 00 00 00 00  LaserType               DS  4               ; quick reference to laser type
  19+ 87BE 00 00 00 00  LaserDamagedFlag        DS  4               ; probabiliy out of 255 that it will no fire, 0 = good, 255 = will not fire
  20+ 87C2              ; dont need as static from table LaserPulseRate          DS  4               ; how many pulses can be fired before long pause
  21+ 87C2              ; dont need as static from table LaserPulsePause         DS  4               ; time before next pulse - 0 = beam
  22+ 87C2              ; dont need as static from table LaserPulseRest          DS  4               ; time before pulse count resets to 0
  23+ 87C2              ; dont need as static from table LaserDamageOutput       DS  4               ; amount of damage for a laser hit
  24+ 87C2              ; dont need as static from table LaserEnergyDrain        DS  4               ; amount of energy drained by cycle
  25+ 87C2              ; dont need as static from table LaserHeat               DS  4               ; amount of heat generated
  26+ 87C2              ; dont need as static from table LaserDurability         DS  4               ; probabability out of 255 that a hit on it unshielded will add random amount of damage
  27+ 87C2              ; dont need as static from table LaserDurabilityAmount   DS  4               ; max amount of damagage can be sustained in one damage hit
  28+ 87C2
  29+ 87C2
  30+ 87C2              QQ20                    equ CargoTonnes
  31+ 87C2 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  32+ 87DC              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  33+ 87DC              FuelScoop               EQU EquipmentFitted + EQ_FUEL_SCOOPS
  34+ 87DC              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  35+ 87DC              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  36+ 87DC              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  37+ 87DC              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  38+ 87DC              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  39+ 87DC 01           FuelScoopsBarrelStatus	DB	1				; 0381
  40+ 87DD
# file closed: ./Variables/EquipmentVariables.asm
 597  87DD                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 87DD              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 87DD              doRND2:
   3+ 87DD A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 87DE              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 87DE              ; "doRandom, Random Seed update, new value in A & C)"
   6+ 87DE              ; uses a c h l registers
   7+ 87DE              doRND:                  ;exx                                     ; protect bc,de,hl
   8+ 87DE 3A 95 80                             ld		a,(RandomSeed)					; Get Seed 0
   9+ 87E1 CB 17                                rl		a								; Rotate L including carry
  10+ 87E3 4F                                   ld		c,a								; c =  double lo
  11+ 87E4 21 97 80     .AddSeed2:              ld		hl,RandomSeed2
  12+ 87E7 8E                                   adc		a,(hl)							; RAND+2
  13+ 87E8 32 95 80     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  14+ 87EB 08           .SaveBtoSeed2:          ex		af,af'
  15+ 87EC 79                                   ld		a,c
  16+ 87ED 32 97 80                             ld		(RandomSeed2),a
  17+ 87F0 08                                   ex		af,af'
  18+ 87F1 3A 96 80                             ld		a,(RandomSeed1)
  19+ 87F4 4F                                   ld		c,a								; C = Seed1
  20+ 87F5 21 98 80     .AddSeed3:              ld		hl,RandomSeed3
  21+ 87F8 8E                                   adc		a,(hl)
  22+ 87F9 32 96 80                             ld		(RandomSeed1),a
  23+ 87FC 08                                   ex		af,af'
  24+ 87FD 79                                   ld		a,c
  25+ 87FE 32 98 80                             ld		(RandomSeed3),a
  26+ 8801 08                                   ex		af,af'
  27+ 8802                                      ;exx                                     ; get bc,de,hl back
  28+ 8802 C9                                   ret
  29+ 8803
  30+ 8803 21 95 80     saveRandomSeeds:        ld      hl,RandomSeed
  31+ 8806 11 99 80                             ld      de,RandomSeedSave
  32+ 8809 01 04 00                             ld      bc,4
  33+ 880C ED A0                                ldi
  34+ 880E ED A0                                ldi
  35+ 8810 ED A0                                ldi
  36+ 8812 ED A0                                ldi
  37+ 8814 C9                                   ret
  38+ 8815
  39+ 8815 21 99 80     restoreRandomSeeds:     ld      hl,RandomSeedSave
  40+ 8818 11 95 80                             ld      de,RandomSeed
  41+ 881B 01 04 00                             ld      bc,4
  42+ 881E ED A0                                ldi
  43+ 8820 ED A0                                ldi
  44+ 8822 ED A0                                ldi
  45+ 8824 ED A0                                ldi
  46+ 8826 C9                                   ret
# file closed: ./Variables/random_number.asm
 598  8827                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 8827 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 882B 58 59 53 45
   1+ 882F 45 44
   2+ 8831 21 2F 82     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 8834 11 0B 82                             ld		de,SystemSeed
   4+ 8837 ED A0        copy_seed:		        ldi
   5+ 8839 ED A0                                ldi
   6+ 883B ED A0                                ldi
   7+ 883D ED A0                                ldi
   8+ 883F ED A0                                ldi
   9+ 8841 ED A0                                ldi
  10+ 8843 C9                                   ret
  11+ 8844
  12+ 8844 21 0B 82     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 8847 11 2F 82                             ld		de,GalaxySeeds
  14+ 884A 18 EB                                jr		copy_seed
  15+ 884C
  16+ 884C 21 2F 82     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 884F 11 23 82                             ld		de,WorkingSeeds
  18+ 8852 18 E3                                jr		copy_seed
  19+ 8854
  20+ 8854 21 23 82     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 8857 11 2F 82                             ld		de,GalaxySeeds
  22+ 885A 18 DB                                jr		copy_seed
  23+ 885C
  24+ 885C 21 23 82     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 885F 11 0B 82                             ld		de,SystemSeed
  26+ 8862 18 D3                                jr		copy_seed
  27+ 8864
  28+ 8864 21 0B 82     copy_system_to_working: ld		hl,SystemSeed
  29+ 8867 11 23 82                             ld		de,WorkingSeeds
  30+ 886A 18 CB                                jr		copy_seed
  31+ 886C
  32+ 886C              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 886C CD 6F 88     		call	.NextStep					; This logic means we hard code x4
  34+ 886F              .NextStep:
  35+ 886F CD 72 88     		call	process_seed				; This logic means we hard code x2
  36+ 8872              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 8872 3A 0B 82     		ld		a,(SystemSeed)				; QQ15
  38+ 8875 B7           		or		a							; clear carry flag
  39+ 8876 21 0D 82     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 8879 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 887A 47           		ld		b,a							; partial sum lo
  42+ 887B 3A 0C 82     		ld		a,(SystemSeed+1)
  43+ 887E 21 0E 82     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 8881 8E           		adc		a,(hl)						; note add with carry
  45+ 8882 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 8883 3A 0D 82     		ld		a,(SystemSeed+2)
  47+ 8886 32 0B 82     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 8889 3A 0E 82     		ld		a,(SystemSeed+3)
  49+ 888C 32 0C 82     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 888F 3A 10 82     		ld		a,(SystemSeed+5)
  51+ 8892 32 0E 82     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 8895 3A 0F 82     		ld		a,(SystemSeed+4)
  53+ 8898 32 0D 82     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 889B B7           		or		a
  55+ 889C 78           		ld		a,b
  56+ 889D 21 0D 82     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 88A0 86           		add	    a,(hl)
  58+ 88A1 32 0F 82     		ld		(SystemSeed+4),a
  59+ 88A4 79           		ld		a,c
  60+ 88A5 21 0E 82     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 88A8 8E           		adc		a,(hl)
  62+ 88A9 32 10 82     		ld		(SystemSeed+5),a
  63+ 88AC C9           		ret
  64+ 88AD
  65+ 88AD              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 88AD CD B0 88     		call	.NextStep					; This logic means we hard code x4
  67+ 88B0              .NextStep:
  68+ 88B0 CD B3 88     		call	working_seed				; This logic means we hard code x2
  69+ 88B3              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 88B3              ; x = a + c
  71+ 88B3 3A 23 82     		ld		a,(WorkingSeeds)			; QQ15
  72+ 88B6 B7           		or		a							; clear carry flag
  73+ 88B7 21 25 82     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 88BA 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 88BB 47           		ld		b,a							; partial sum lo [x]
  76+ 88BC              ; y = b + d	+ carry
  77+ 88BC 3A 24 82     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 88BF 21 26 82     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 88C2 8E           		adc		a,(hl)						; note add with carry
  80+ 88C3 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 88C4 3A 25 82     		ld		a,(WorkingSeeds+2)
  82+ 88C7 32 23 82     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 88CA 3A 26 82     		ld		a,(WorkingSeeds+3)
  84+ 88CD 32 24 82     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 88D0 3A 28 82     		ld		a,(WorkingSeeds+5)
  86+ 88D3 32 26 82     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 88D6 3A 27 82     		ld		a,(WorkingSeeds+4)
  88+ 88D9 32 25 82     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 88DC B7           		or		a
  90+ 88DD 78           		ld		a,b
  91+ 88DE 21 25 82     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 88E1 86           		add	    a,(hl)
  93+ 88E2 32 27 82     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 88E5 79           		ld		a,c
  95+ 88E6 21 26 82     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 88E9 8E           		adc		a,(hl)
  97+ 88EA 32 28 82     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 88ED C9           		ret
  99+ 88EE
 100+ 88EE 32           working_distX	DB 50
 101+ 88EF 32           working_distY	DB 50
 102+ 88F0 00           current_distY	DB 0
 103+ 88F1
 104+ 88F1 AF           find_present_system:    xor		a
 105+ 88F2 32 A4 81                             ld		(XSAV),a
 106+ 88F5 3A 0C 82     .CounterLoop:           ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 107+ 88F8 4F                                   ld		c,a
 108+ 88F9 3A 36 82     .calcLocaldy:           ld		a,(PresentSystemY)
 109+ 88FC 47                                   ld		b,a								; so b holds Y ccord
 110+ 88FD 79                                   ld		a,c
 111+ 88FE 90                                   sub		b
 112+ 88FF CB 7F                                bit		7,a
 113+ 8901 28 02                                jr		z,.positivedy
 114+ 8903 ED 44        .negativedy:            neg
 115+ 8905 32 F0 88     .positivedy:            ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 116+ 8908 ED 5B EE 88                          ld		de,(working_distX)
 117+ 890C BA                                   cp		d
 118+ 890D 30 24                                jr		nc,.toofar
 119+ 890F 3A 0E 82     .calcLocaldx:           ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 120+ 8912 4F                                   ld		c,a
 121+ 8913 3A 35 82                             ld		a,(PresentSystemX)
 122+ 8916 47                                   ld		b,a								; so b holds Y ccord
 123+ 8917 79                                   ld		a,c
 124+ 8918 90                                   sub		b
 125+ 8919 CB 7F                                bit		7,a
 126+ 891B 28 02                                jr		z,.positivedx
 127+ 891D ED 44        .negativedx:            neg
 128+ 891F 4F           .positivedx:            ld		c,a
 129+ 8920 BB                                   cp		e
 130+ 8921 30 10                                jr		nc,.toofar
 131+ 8923 3A F0 88     .Nearer:			    ld		a,(current_distY) 				; we have a closer system
 132+ 8926 47                                   ld		b,a								; we have c to recall Y into b
 133+ 8927 ED 43 EE 88                          ld		(working_distX),bc
 134+ 892B C5                                   push	bc
 135+ 892C CD 64 88                             call 	copy_system_to_working
 136+ 892F C1                                   pop		bc
 137+ 8930 78                                   ld		a,b								;
 138+ 8931 B1                                   or		c								;
 139+ 8932 C8                                   ret		z								; if we have distance 0 then bang on
 140+ 8933 CD 6C 88     .toofar:                call	next_system_seed
 141+ 8936 3A A4 81                             ld		a,(XSAV)
 142+ 8939 3D                                   dec		a
 143+ 893A FE 00                                cp		0
 144+ 893C C8                                   ret		z
 145+ 893D 32 A4 81                             ld		(XSAV),a
 146+ 8940 18 B3                                jr		.CounterLoop
 147+ 8942
 148+ 8942              get_planet_data_working_seed:
 149+ 8942 3A 24 82     		ld		a, (WorkingSeeds+1)
 150+ 8945 E6 07        		and		7
 151+ 8947 32 50 82     		ld		(DisplayEcononmy),a
 152+ 894A 3A 25 82     		ld		a, (WorkingSeeds+2)
 153+ 894D CB 3F        		srl	a
 154+ 894F CB 3F        		srl	a
 155+ 8951 CB 3F        		srl	a
 156+ 8953 CB 3F        		srl	a								; c/8
 157+ 8955 E6 07        		and		7
 158+ 8957 32 51 82     		ld		(DisplayGovernment),a
 159+ 895A CB 3F        		srl	a
 160+ 895C FE 00        		cp		0
 161+ 895E 20 08        		jr		nz,.CanBeRich
 162+ 8960              .Fedual:
 163+ 8960 3A 50 82     		ld		a,(DisplayEcononmy)
 164+ 8963 F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 165+ 8965 32 50 82     		ld		(DisplayEcononmy),a
 166+ 8968              .CanBeRich:
 167+ 8968 3A 50 82     		ld		a,(DisplayEcononmy)
 168+ 896B EE 07        		xor		7							; flip economy so Rich is now 7
 169+ 896D 32 52 82     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 170+ 8970 47           		ld		b,a
 171+ 8971 3A 26 82     		ld		a,(WorkingSeeds+3)
 172+ 8974 E6 03        		and		3
 173+ 8976 80           		add		a,b
 174+ 8977 32 52 82     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 175+ 897A 3A 51 82     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 176+ 897D CB 3F        		srl		a 							; gov/2
 177+ 897F 47           		ld		b,a
 178+ 8980 3A 52 82     		ld		a,(DisplayTekLevel)
 179+ 8983 80           		add		a,b
 180+ 8984 32 52 82     		ld		(DisplayTekLevel),a			; Tek += gov /2
 181+ 8987 CB 27        		sla		a
 182+ 8989 CB 27        		sla		a							; Onto Population (TL-1)*= 4
 183+ 898B 47           		ld		b,a
 184+ 898C 3A 50 82     		ld		a,(DisplayEcononmy)
 185+ 898F 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 186+ 8990 47           		ld		b,a
 187+ 8991 3A 51 82     		ld		a,(DisplayGovernment)
 188+ 8994 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 189+ 8995 32 53 82     		ld		(DisplayPopulation),a
 190+ 8998 3A 50 82     		ld		a,(DisplayEcononmy)
 191+ 899B EE 07        		xor		7							; Onto productivity
 192+ 899D C6 03        		add		3							;  (Flipped eco +3)
 193+ 899F 57           		ld		d,a
 194+ 89A0 3A 51 82     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 195+ 89A3 C6 04        		add		4
 196+ 89A5 5F           		ld		e,a
 197+ 89A6 ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 198+ 89A8 3A 53 82     		ld		a,(DisplayPopulation)		; then we use d for radius
 199+ 89AB 57           		ld		d,a
 200+ 89AC ED 30        		mul
 201+ 89AE CB 23        		sla		e
 202+ 89B0 CB 1A        		rr		d
 203+ 89B2 CB 23        		sla		e
 204+ 89B4 CB 1A        		rr		d
 205+ 89B6 CB 23        		sla		e
 206+ 89B8 CB 1A        		rr		d							; de * 8
 207+ 89BA ED 53 55 82  		ld		(DisplayProductivity),de
 208+ 89BE              .DoRadius:
 209+ 89BE 3A 26 82     		ld		a,(WorkingSeeds+3)
 210+ 89C1 4F           		ld		c,a
 211+ 89C2 3A 28 82     		ld		a,(WorkingSeeds+5)
 212+ 89C5 E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 213+ 89C7 C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 214+ 89C9 47           		ld		b,a							;
 215+ 89CA ED 43 59 82  		ld		(DisplayRadius),bc
 216+ 89CE C9           		ret
 217+ 89CF
# file closed: ./Variables/galaxy_seed.asm
 599  89CF                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 89CF 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 89D3 65 00
   2+ 89D5 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 89D9 00
   3+ 89DA 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 89DE 74 61 72 79
   3+ 89E2 00
   4+ 89E3 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 89E7 6E 67 00
   5+ 89EA 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 89EE 6F 6D 00
   6+ 89F1
   7+ 89F1 CF 89 D5 89  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 89F5 DA 89 E3 89
   7+ 89F9 EA 89
   8+ 89FB              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 89FB
  10+ 89FB 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 89FF 65 64 00
  11+ 8A02 47 72 65 65  ConditionName2		DB "Green",0
  11+ 8A06 6E 00
  12+ 8A08 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 8A0C 6F 77 00
  13+ 8A0F 52 65 64 00  ConditionName4		DB "Red",0
  14+ 8A13
  15+ 8A13 FB 89 02 8A  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 8A17 08 8A 0F 8A
  16+ 8A1B              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 8A1B
  18+ 8A1B 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 8A1F 53 45 49 54
  18+ 8A23 49 4C 45 54
  18+ 8A27 53 54 4F 4E
  18+ 8A2B 4C 4F 4E 55
  18+ 8A2F 54 48 4E 4F
  18+ 8A33 41 4C 4C 45
  18+ 8A37 58 45 47 45
  18+ 8A3B 5A 41 43 45
  18+ 8A3F 42 49 53 4F
  18+ 8A43 55 53 45 53
  18+ 8A47 41 52 4D 41
  18+ 8A4B 49 4E 44 49
  18+ 8A4F 52 45 41 3F
  18+ 8A53 45 52 41 54
  18+ 8A57 45 4E 42 45
  18+ 8A5B 52 41 4C 41
  18+ 8A5F 56 45 54 49
  18+ 8A63 45 44 4F 52
  18+ 8A67 51 55 41 4E
  18+ 8A6B 54 45 49 53
  18+ 8A6F 52 49 4F 4E
  18+ 8A73 00
  19+ 8A74
  20+ 8A74 00 00 04 00  RankingTableLow		DW	$0000,$0004,$0008,$0010,$0020,$0100,$0200,$0A00,$1900,$C1FF,$FFFF
  20+ 8A78 08 00 10 00
  20+ 8A7C 20 00 00 01
  20+ 8A80 00 02 00 0A
  20+ 8A84 00 19 FF C1
  20+ 8A88 FF FF
  21+ 8A8A 03 00 07 00  RankingTableHigh	DW	$0003,$0007,$000F,$001F,$00FF,$01FF,$09FF,$18FF,$C0FF,$FEFF,$FFFF
  21+ 8A8E 0F 00 1F 00
  21+ 8A92 FF 00 FF 01
  21+ 8A96 FF 09 FF 18
  21+ 8A9A FF C0 FF FE
  21+ 8A9E FF FF
  22+ 8AA0
  23+ 8AA0 48 61 72 6D  RankingName1		DB 	"Harmless",0
  23+ 8AA4 6C 65 73 73
  23+ 8AA8 00
  24+ 8AA9 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  24+ 8AAD 6C 79 20 48
  24+ 8AB1 61 72 6D 6C
  24+ 8AB5 65 73 73 00
  25+ 8AB9 50 6F 6F 72  RankingName3		DB 	"Poor",0
  25+ 8ABD 00
  26+ 8ABE 41 76 65 72  RankingName4		DB 	"Average",0
  26+ 8AC2 61 67 65 00
  27+ 8AC6 41 62 6F 76  RankingName5		DB 	"Above Average",0
  27+ 8ACA 65 20 41 76
  27+ 8ACE 65 72 61 67
  27+ 8AD2 65 00
  28+ 8AD4 43 6F 6D 70  RankingName6		DB 	"Competent",0
  28+ 8AD8 65 74 65 6E
  28+ 8ADC 74 00
  29+ 8ADE 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  29+ 8AE2 65 72 6F 75
  29+ 8AE6 73 00
  30+ 8AE8 44 65 61 64  RankingName8		DB 	"Deadly",0
  30+ 8AEC 6C 79 00
  31+ 8AEF 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  31+ 8AF3 20 45 20 4C
  31+ 8AF7 20 49 20 54
  31+ 8AFB 20 45 20 2D
  31+ 8AFF 2D 2D 00
  32+ 8B02 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  32+ 8B06 6C 6F 62 73
  32+ 8B0A 67 6F 64 00
  33+ 8B0E 4E 75 74 74  RankingName11		DB 	"Nutter",0
  33+ 8B12 65 72 00
  34+ 8B15
  35+ 8B15              RankingEQHarmless	EQU 0
  36+ 8B15              RankingEQMostly		EQU 1
  37+ 8B15              RankingEQPoor		EQU 2
  38+ 8B15              RankingEQAverage	EQU 3
  39+ 8B15              RankingEQAbove		EQU 4
  40+ 8B15              RankingEQCompetent  EQU 5
  41+ 8B15              RankingEQDangerous	EQU 6
  42+ 8B15              RankingEQDeadly		EQU 7
  43+ 8B15              RankingEQElite		EQU 8
  44+ 8B15              RankingEQSkollob	EQU 9
  45+ 8B15              RankingEQNutter		EQU 10
  46+ 8B15
  47+ 8B15
  48+ 8B15
  49+ 8B15 A0 8A A9 8A  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  49+ 8B19 B9 8A BE 8A
  49+ 8B1D C6 8A D4 8A
  49+ 8B21 DE 8A E8 8A
  49+ 8B25 EF 8A 02 8B
  49+ 8B29 0E 8B
  50+ 8B2B              RankingNameIdxLen EQU $ - RankingNameIdx
  51+ 8B2B
  52+ 8B2B
  53+ 8B2B              getTableText:
  54+ 8B2B              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  55+ 8B2B              ; ">Note for ranking first 2 bytes are target rank"
  56+ 8B2B D5           	push	de								; save DE as we will likley need it in caller
  57+ 8B2C ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  58+ 8B2E ED 31        	add		hl,a
  59+ 8B30 5E           	ld		e,(hl)
  60+ 8B31 23           	inc		hl
  61+ 8B32 56           	ld		d,(hl)							; de = indexed address
  62+ 8B33 EB           	ex		de,hl							; flip it to hl
  63+ 8B34 D1           	pop		de								; retrieve de
  64+ 8B35 C9           	ret										; return with hl as start entry
  65+ 8B36
  66+ 8B36
  67+ 8B36              ;               CF      ZF      Result
  68+ 8B36              ;               -----------------------------------
  69+ 8B36              ;               0       0       HL > DE
  70+ 8B36              ;               0       1       HL == DE
  71+ 8B36              ;               1       0       HL < DE
  72+ 8B36              ;               1       1       Impossible
  73+ 8B36              getRankIndex:
  74+ 8B36              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  75+ 8B36              ; ">Note for ranking first 2 bytes are target rank"
  76+ 8B36 7A           	ld		a,d
  77+ 8B37 B3           	or		e
  78+ 8B38 FE 00        	cp		0
  79+ 8B3A C8           	ret		z								; quicks skip for 0 kills
  80+ 8B3B AF           	xor 	a
  81+ 8B3C 21 74 8A     	ld		hl,RankingTableLow
  82+ 8B3F              .testLoop:
  83+ 8B3F 4E           	ld		c,(hl)
  84+ 8B40 23           	inc		hl
  85+ 8B41 46           	ld		b,(hl)							; bc = ranking
  86+ 8B42 E5           	push	hl
  87+ 8B43 60           	ld		h,b
  88+ 8B44 69           	ld		l,c
  89+ 8B45 CD 59 99     	call	compare16HLDE
  90+ 8B48 38 06        	jr		c,.HLLTDE
  91+ 8B4A              .HLGTEDE									; Found the correct rank
  92+ 8B4A E1           	pop		hl
  93+ 8B4B 23           	inc		hl								; move to next value
  94+ 8B4C 23           	inc		hl
  95+ 8B4D 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  96+ 8B4E 18 EF        	jr		.testLoop
  97+ 8B50              .HLLTDE:									; HL < Kills so found correct rank
  98+ 8B50 E1           	pop		hl
  99+ 8B51 C9           	ret
 100+ 8B52
# file closed: ./Tables/text_tables.asm
 600  8B52                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ 8B52              ; Could move this into rom area for access as it will be read only
   2+ 8B52 58 00        WordDummy					DB  "X",0
   3+ 8B54 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   3+ 8B58 74 00
   4+ 8B5A 52 69 67 68  WordRight					DB	"Right",0              ;2
   4+ 8B5E 74 00
   5+ 8B60 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   5+ 8B64 00
   6+ 8B65 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   6+ 8B69 00
   7+ 8B6A 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   7+ 8B6E 65 00
   8+ 8B70 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   8+ 8B74 70 65 00
   9+ 8B77 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
  10+ 8B7B 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
  10+ 8B7F 6F 00
  11+ 8B81 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  12+ 8B85 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  12+ 8B89 00
  13+ 8B8A 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  13+ 8B8E 70 73 00
  14+ 8B91 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  14+ 8B95 4D 2E 00
  15+ 8B98 53 79 73 74  WordSystem          		DB  "System",0             ;13
  15+ 8B9C 65 6D 00
  16+ 8B9F 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  16+ 8BA3 67 79 00
  17+ 8BA6 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  17+ 8BAA 00
  18+ 8BAB 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  18+ 8BAF 72 00
  19+ 8BB1 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  19+ 8BB5 65 00
  20+ 8BB7 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  20+ 8BBB 00
  21+ 8BBC 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  21+ 8BC0 61 72 79 00
  22+ 8BC4 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  22+ 8BC8 6E 67 00
  23+ 8BCB 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  23+ 8BCF 6F 6D 00
  24+ 8BD2 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  24+ 8BD6 00
  25+ 8BD7 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  25+ 8BDB 6C 64 00
  26+ 8BDE 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  26+ 8BE2 69 6E 67 00
  27+ 8BE6 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  27+ 8BEA 75 74 65 72
  27+ 8BEE 73 00
  28+ 8BF0 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  28+ 8BF4 72 73 70 61
  28+ 8BF8 63 65 00
  29+ 8BFB 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  29+ 8BFF 63 74 69 63
  29+ 8C03 00
  30+ 8C04 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  30+ 8C08 61 00
  31+ 8C0A 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  31+ 8C0E 6E 00
  32+ 8C10 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  32+ 8C14 6E 64 65 72
  32+ 8C18 00
  33+ 8C19 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  33+ 8C1D 74 69 76 65
  33+ 8C21 00
  34+ 8C22 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  34+ 8C26 00
  35+ 8C27 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  35+ 8C2B 69 6C 65 73
  35+ 8C2F 00
  36+ 8C30 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  36+ 8C34 6F 61 63 74
  36+ 8C38 69 76 65 73
  36+ 8C3C 00
  37+ 8C3D 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  37+ 8C41 65 73 00
  38+ 8C44 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  38+ 8C48 6F 72 2F 57
  38+ 8C4C 69 6E 65 73
  38+ 8C50 00
  39+ 8C51 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  39+ 8C55 72 69 65 73
  39+ 8C59 00
  40+ 8C5A 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  40+ 8C5E 6F 74 69 63
  40+ 8C62 73 00
  41+ 8C64 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  41+ 8C68 69 6E 65 72
  41+ 8C6C 79 00
  42+ 8C6E 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  42+ 8C72 79 73 00
  43+ 8C75 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  43+ 8C79 61 72 6D 73
  43+ 8C7D 00
  44+ 8C7E 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  44+ 8C82 00
  45+ 8C83 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  45+ 8C87 72 61 6C 73
  45+ 8C8B 00
  46+ 8C8C 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  46+ 8C90 00
  47+ 8C91 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  47+ 8C95 69 6E 75 6D
  47+ 8C99 00
  48+ 8C9A 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  48+ 8C9E 53 74 6F 6E
  48+ 8CA2 65 73 00
  49+ 8CA5 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  49+ 8CA9 6E 20 49 74
  49+ 8CAD 65 6D 73 00
  50+ 8CB1 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  50+ 8CB5 65 73 00
  51+ 8CB8 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  51+ 8CBC 67 72 61 6D
  51+ 8CC0 73 00
  52+ 8CC2 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  52+ 8CC6 73 00
  53+ 8CC8 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  53+ 8CCC 74 00
  54+ 8CCE 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  54+ 8CD2 65 00
  55+ 8CD4 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  55+ 8CD8 74 00
  56+ 8CDA 44 61 74 61  WordData					DB	"Data",0			   ;54
  56+ 8CDE 00
  57+ 8CDF 4F 6E 00     WordOn						DB  "On",0                 ;55
  58+ 8CE2 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  58+ 8CE6 61 6E 63 65
  58+ 8CEA 00
  59+ 8CEB 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  59+ 8CEF 6F 6D 79 00
  60+ 8CF3 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  60+ 8CF7 72 6E 6D 65
  60+ 8CFB 6E 74 00
  61+ 8CFE 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  61+ 8D02 4C 65 76 65
  61+ 8D06 6C 00
  62+ 8D08 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  62+ 8D0C 6C 61 74 69
  62+ 8D10 6F 6E 00
  63+ 8D13 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  63+ 8D17 69 6F 6E 00
  64+ 8D1B 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  64+ 8D1F 69 6F 6E 00
  65+ 8D23 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  65+ 8D27 73 00
  66+ 8D29 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  66+ 8D2D 75 63 74 69
  66+ 8D31 76 69 74 79
  66+ 8D35 00
  67+ 8D36 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  67+ 8D3A 61 67 65 00
  68+ 8D3E 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  68+ 8D42 75 73 00
  69+ 8D45 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  70+ 8D48 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  70+ 8D4C 00
  71+ 8D4D 52 69 63 68  WordRich					DB  "Rich",0               ;69
  71+ 8D51 00
  72+ 8D52 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  73+ 8D56 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  73+ 8D5A 6C 79 00
  74+ 8D5D 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  74+ 8D61 00
  75+ 8D62 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  75+ 8D66 73 74 72 69
  75+ 8D6A 61 6C 00
  76+ 8D6D 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  76+ 8D71 63 75 6C 74
  76+ 8D75 75 72 61 6C
  76+ 8D79 00
  77+ 8D7A 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  77+ 8D7E 63 68 79 00
  78+ 8D82 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  78+ 8D86 61 6C 00
  79+ 8D89 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  79+ 8D8D 69 2D 47 6F
  79+ 8D91 76 65 72 6E
  79+ 8D95 6D 65 6E 74
  79+ 8D99 00
  80+ 8D9A 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  80+ 8D9E 61 74 6F 72
  80+ 8DA2 73 68 69 70
  80+ 8DA6 00
  81+ 8DA7 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  81+ 8DAB 75 6E 69 73
  81+ 8DAF 74 00
  82+ 8DB1 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  82+ 8DB5 65 64 65 72
  82+ 8DB9 61 63 79 00
  83+ 8DBD 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  83+ 8DC1 63 72 61 63
  83+ 8DC5 79 00
  84+ 8DC7 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  84+ 8DCB 6F 72 61 74
  84+ 8DCF 65 20 53 74
  84+ 8DD3 61 74 65 00
  85+ 8DD7 53 74 61 74  WordState 					DB  "State",0              ;83
  85+ 8DDB 65 00
  86+ 8DDD 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  86+ 8DE1 74 00
  87+ 8DE3 59 65 61 72  WordYears 					DB  "Years",0              ;85
  87+ 8DE7 73 00
  88+ 8DE9 30 00        Word0						DB  "0",0				   ;86
  89+ 8DEB 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  89+ 8DEF 65 74 00
  90+ 8DF2 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  90+ 8DF6 65 73 00
  91+ 8DF9 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  91+ 8DFD 75 63 74 00
  92+ 8E01 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  93+ 8E05 50 72 69 63  WordPrice					DB  "Price",0              ;91
  93+ 8E09 65 00
  94+ 8E0B 46 6F 72 00  WordFor                     DB  "For",0                ;92
  95+ 8E0F 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  95+ 8E13 00
  96+ 8E14 74 00        Wordt						DB  "t",0                  ;94
  97+ 8E16 6B 67 00     Wordkg						DB  "kg",0                 ;95
  98+ 8E19 67 00        Wordg						DB  "g",0                  ;96
  99+ 8E1B 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  99+ 8E1F 69 74 69 74
  99+ 8E23 79 00
 100+ 8E25 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 101+ 8E29 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 101+ 8E2D 6B 00
 102+ 8E2F 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 102+ 8E33 70 00
 103+ 8E35 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 103+ 8E39 00
 104+ 8E3A              ;WordMissile                 DB  "Missile",0            ;102
 105+ 8E3A 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 105+ 8E3E 72 64 72 69
 105+ 8E42 76 65 00
 106+ 8E45 4D 69 6C 69  WordMilitary                DB  "Military",0
 106+ 8E49 74 61 72 79
 106+ 8E4D 00
 107+ 8E4E 41 64 64 65  WordAdder                   DB  "Adder",0
 107+ 8E52 72 00
 108+ 8E54 41 6E 61 63  WordAnaconda                DB  "Anaconda",0
 108+ 8E58 6F 6E 64 61
 108+ 8E5C 00
 109+ 8E5D 41 73 70 5F  WordAsp_Mk_2                DB  "Asp_Mk_2",0
 109+ 8E61 4D 6B 5F 32
 109+ 8E65 00
 110+ 8E66 42 6F 61 00  WordBoa                     DB  "Boa",0
 111+ 8E6A 43 61 72 67  WordCargoType5              DB  "CargoType5",0
 111+ 8E6E 6F 54 79 70
 111+ 8E72 65 35 00
 112+ 8E75 42 6F 75 6C  WordBoulder                 DB  "Boulder",0
 112+ 8E79 64 65 72 00
 113+ 8E7D 41 73 74 65  WordAsteroid                DB  "Asteroid",0
 113+ 8E81 72 6F 69 64
 113+ 8E85 00
 114+ 8E86 42 75 73 68  WordBushmaster              DB  "Bushmaster",0
 114+ 8E8A 6D 61 73 74
 114+ 8E8E 65 72 00
 115+ 8E91 43 68 61 6D  WordChameleon               DB  "Chameleon",0
 115+ 8E95 65 6C 65 6F
 115+ 8E99 6E 00
 116+ 8E9B 43 6F 62 72  WordCobraMk3                DB  "CobraMk3",0
 116+ 8E9F 61 4D 6B 33
 116+ 8EA3 00
 117+ 8EA4 43 6F 62 72  WordCobra_Mk_1              DB  "Cobra_Mk_1",0
 117+ 8EA8 61 5F 4D 6B
 117+ 8EAC 5F 31 00
 118+ 8EAF 43 6F 62 72  WordCobra_Mk_3_P            DB  "Cobra_Mk_3_P",0
 118+ 8EB3 61 5F 4D 6B
 118+ 8EB7 5F 33 5F 50
 118+ 8EBB 00
 119+ 8EBC 43 6F 6E 73  WordConstrictor             DB  "Constrictor",0
 119+ 8EC0 74 72 69 63
 119+ 8EC4 74 6F 72 00
 120+ 8EC8 43 6F 72 69  WordCoriolis                DB  "Coriolis",0
 120+ 8ECC 6F 6C 69 73
 120+ 8ED0 00
 121+ 8ED1 43 6F 75 67  WordCougar                  DB  "Cougar",0
 121+ 8ED5 61 72 00
 122+ 8ED8 44 6F 64 6F  WordDodo                    DB  "Dodo",0
 122+ 8EDC 00
 123+ 8EDD 44 72 61 67  WordDragon                  DB  "Dragon",0
 123+ 8EE1 6F 6E 00
 124+ 8EE4 45 73 63 61  WordEscape_Pod              DB  "Escape_Pod",0
 124+ 8EE8 70 65 5F 50
 124+ 8EEC 6F 64 00
 125+ 8EEF 46 65 72 5F  WordFer_De_Lance            DB  "Fer_De_Lance",0
 125+ 8EF3 44 65 5F 4C
 125+ 8EF7 61 6E 63 65
 125+ 8EFB 00
 126+ 8EFC 47 65 63 6B  WordGecko                   DB  "Gecko",0
 126+ 8F00 6F 00
 127+ 8F02 47 68 61 76  WordGhavial                 DB  "Ghavial",0
 127+ 8F06 69 61 6C 00
 128+ 8F0A 49 67 75 61  WordIguana                  DB  "Iguana",0
 128+ 8F0E 6E 61 00
 129+ 8F11 4B 72 61 69  WordKrait                   DB  "Krait",0
 129+ 8F15 74 00
 130+ 8F17 4C 6F 67 6F  WordLogo                    DB  "Logo",0
 130+ 8F1B 00
 131+ 8F1C 4D 61 6D 62  WordMamba                   DB  "Mamba",0
 131+ 8F20 61 00
 132+ 8F22 4D 69 73 73  WordMissile                 DB  "Missile",0
 132+ 8F26 69 6C 65 00
 133+ 8F2A 4D 6F 6E 69  WordMonitor                 DB  "Monitor",0
 133+ 8F2E 74 6F 72 00
 134+ 8F32 4D 6F 72 61  WordMoray                   DB  "Moray",0
 134+ 8F36 79 00
 135+ 8F38 4F 70 68 69  WordOphidian                DB  "Ophidian",0
 135+ 8F3C 64 69 61 6E
 135+ 8F40 00
 136+ 8F41 50 6C 61 74  WordPlate                   DB  "Plate",0
 136+ 8F45 65 00
 137+ 8F47 50 79 74 68  WordPython                  DB  "Python",0
 137+ 8F4B 6F 6E 00
 138+ 8F4E 50 79 74 68  WordPython_P                DB  "Python_P",0
 138+ 8F52 6F 6E 5F 50
 138+ 8F56 00
 139+ 8F57 52 6F 63 6B  WordRock_Hermit             DB  "Rock_Hermit",0
 139+ 8F5B 5F 48 65 72
 139+ 8F5F 6D 69 74 00
 140+ 8F63 53 68 75 74  WordShuttleType9            DB  "ShuttleType9",0
 140+ 8F67 74 6C 65 54
 140+ 8F6B 79 70 65 39
 140+ 8F6F 00
 141+ 8F70 53 68 75 74  WordShuttle_Mk_2            DB  "Shuttle_Mk_2",0
 141+ 8F74 74 6C 65 5F
 141+ 8F78 4D 6B 5F 32
 141+ 8F7C 00
 142+ 8F7D 53 69 64 65  WordSidewinder              DB  "Sidewinder",0
 142+ 8F81 77 69 6E 64
 142+ 8F85 65 72 00
 143+ 8F88 53 70 6C 69  WordSplinter                DB  "Splinter",0
 143+ 8F8C 6E 74 65 72
 143+ 8F90 00
 144+ 8F91 54 65 73 74  WordTestVector              DB  "TestVector",0
 144+ 8F95 56 65 63 74
 144+ 8F99 6F 72 00
 145+ 8F9C 54 68 61 72  WordThargoid                DB  "Thargoid",0
 145+ 8FA0 67 6F 69 64
 145+ 8FA4 00
 146+ 8FA5 54 68 61 72  WordThargon                 DB  "Thargon",0
 146+ 8FA9 67 6F 6E 00
 147+ 8FAD 54 72 61 6E  WordTransportType10         DB  "TransportType10",0
 147+ 8FB1 73 70 6F 72
 147+ 8FB5 74 54 79 70
 147+ 8FB9 65 31 30 00
 148+ 8FBD 56 69 70 65  WordViper                   DB  "Viper",0
 148+ 8FC1 72 00
 149+ 8FC3 57 6F 72 6D  WordWorm                    DB  "Worm",0
 149+ 8FC7 00
 150+ 8FC8 52 61 74 74  WordRattler                 DB  "Rattler",0
 150+ 8FCC 6C 65 72 00
 151+ 8FD0
 152+ 8FD0 52 8B 54 8B  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 152+ 8FD4 5A 8B 60 8B
 153+ 8FD8 65 8B 6A 8B  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 153+ 8FDC 70 8B 77 8B
 154+ 8FE0 7B 8B 81 8B  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 154+ 8FE4 85 8B 8A 8B
 155+ 8FE8 91 8B 98 8B  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 155+ 8FEC 9F 8B A6 8B
 156+ 8FF0 AB 8B B1 8B  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 156+ 8FF4 B7 8B BC 8B
 157+ 8FF8 C4 8B CB 8B  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 157+ 8FFC D2 8B D7 8B
 158+ 9000 DE 8B E6 8B  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 158+ 9004 F0 8B FB 8B
 159+ 9008 04 8C 0A 8C  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 159+ 900C 10 8C 19 8C
 160+ 9010 22 8C 27 8C  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 160+ 9014 30 8C 3D 8C
 161+ 9018 44 8C 51 8C  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 161+ 901C 5A 8C 64 8C
 162+ 9020 6E 8C 75 8C  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 162+ 9024 7E 8C 83 8C
 163+ 9028 8C 8C 91 8C  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 163+ 902C 9A 8C A5 8C
 164+ 9030 B1 8C B8 8C  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 164+ 9034 C2 8C C8 8C
 165+ 9038 CE 8C D4 8C  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 165+ 903C DA 8C DF 8C
 166+ 9040 E2 8C EB 8C  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 166+ 9044 F3 8C FE 8C
 167+ 9048 08 8D 13 8D  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 167+ 904C 1B 8D 23 8D
 168+ 9050 29 8D 36 8D  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 168+ 9054 3E 8D 45 8D
 169+ 9058 48 8D        					DW  WordMCR																	;68
 170+ 905A 4D 8D 52 8D  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 170+ 905E 56 8D 5D 8D
 171+ 9062 62 8D 6D 8D                      DW  WordIndustrial,     WordAgricultural									;73
 172+ 9066 7A 8D 82 8D  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 172+ 906A 89 8D 9A 8D
 173+ 906E A7 8D B1 8D                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 173+ 9072 BD 8D C7 8D
 174+ 9076 D7 8D DD 8D  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 174+ 907A E3 8D E9 8D
 175+ 907E EB 8D F2 8D  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 175+ 9082 F9 8D 01 8E
 176+ 9086 05 8E 0B 8E                      DW  WordPrice,          WordFor,          WordSale                          ;91
 176+ 908A 0F 8E
 177+ 908C 14 8E 16 8E  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 177+ 9090 19 8E
 178+ 9092 1B 8E 25 8E  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 178+ 9096 29 8E 2F 8E
 179+ 909A 35 8E 22 8F                      DW  WordShip,           WordMissile       ; 101
 180+ 909E 4E 8E 54 8E  WordIdxShipNames:   DW  WordAdder,          WordAnaconda,     WordAsp_Mk_2,        WordBoa
 180+ 90A2 5D 8E 66 8E
 181+ 90A6 6A 8E 75 8E                      DW  WordCargoType5,     WordBoulder,      WordAsteroid,        WordBushmaster
 181+ 90AA 7D 8E 86 8E
 182+ 90AE 91 8E 9B 8E                      DW  WordChameleon,      WordCobraMk3,     WordCobra_Mk_1,      WordCobra_Mk_3_P
 182+ 90B2 A4 8E AF 8E
 183+ 90B6 BC 8E C8 8E                      DW  WordConstrictor,    WordCoriolis,     WordCougar,          WordDodo
 183+ 90BA D1 8E D8 8E
 184+ 90BE DD 8E E4 8E                      DW  WordDragon,         WordEscape_Pod,   WordFer_De_Lance,    WordGecko
 184+ 90C2 EF 8E FC 8E
 185+ 90C6 02 8F 0A 8F                      DW  WordGhavial,        WordIguana,       WordKrait,           WordLogo
 185+ 90CA 11 8F 17 8F
 186+ 90CE 1C 8F 22 8F                      DW  WordMamba,          WordMissile,      WordMonitor,         WordMoray
 186+ 90D2 2A 8F 32 8F
 187+ 90D6 38 8F 41 8F                      DW  WordOphidian,       WordPlate,        WordPython,          WordPython_P
 187+ 90DA 47 8F 4E 8F
 188+ 90DE 57 8F 63 8F                      DW  WordRock_Hermit,    WordShuttleType9, WordShuttle_Mk_2,    WordSidewinder
 188+ 90E2 70 8F 7D 8F
 189+ 90E6 88 8F 91 8F                      DW  WordSplinter,       WordTestVector,   WordThargoid,        WordThargon
 189+ 90EA 9C 8F A5 8F
 190+ 90EE AD 8F BD 8F                      DW  WordTransportType10,WordViper,        WordWorm,            WordRattler
 190+ 90F2 C3 8F C8 8F
 191+ 90F6              ; Phrases
 192+ 90F6 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 193+ 90FA 06 07 00     TextEscapePod				DB	6,7,0            ;1
 194+ 90FD 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 195+ 9100 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 196+ 9103 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 197+ 9106 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 198+ 9109 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 199+ 910C 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 200+ 910F 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 201+ 9113 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 202+ 9117 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 203+ 911B 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 204+ 911F 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 205+ 9123 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 206+ 9126 36 37 00     TextDataOn					DB	54,55,0          ;14
 207+ 9129 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 208+ 912C 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 209+ 912F 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 210+ 9132 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 211+ 9135 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 212+ 9138 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 213+ 913B 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 214+ 913E 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 215+ 9141 54 55 00     TextLightYears				DB  84,85,0			 ;23
 216+ 9144 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 217+ 9148 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 218+ 914B 64 65        TextEquipShip               DB  100,101          ;26
 219+ 914D
 220+ 914D 00           TextDummy					DB  0
 221+ 914E
 222+ 914E F6 90 FA 90  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 222+ 9152 FD 90
 223+ 9154 00 91 03 91  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 223+ 9158 06 91
 224+ 915A 09 91 0C 91  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 225+ 915E 0F 91 13 91  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 225+ 9162 17 91 1B 91
 226+ 9166 1F 91 23 91  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 226+ 916A 26 91
 227+ 916C 29 91 2C 91  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 227+ 9170 32 91 2F 91
 227+ 9174 3B 91 35 91
 227+ 9178 38 91 3E 91
 228+ 917C 41 91        					DW  TextLightYears		                                            ; 21 23
 229+ 917E 44 91 48 91  					DW  Text0LightYears, TextMarketPrices
 230+ 9182 4D 91        					DW  TextDummy;  25
 231+ 9184 00 00 00...  TextBuffer			DS	33
 232+ 91A5
 233+ 91A5              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 234+ 91A5              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 235+ 91A5
 236+ 91A5              CapitaliseString:
 237+ 91A5              ; ">CapitaliseString hl = address"
 238+ 91A5              .CapLoop:
 239+ 91A5 23           	inc		hl
 240+ 91A6 7E           	ld		a,(hl)
 241+ 91A7 FE 00        	cp		0
 242+ 91A9 C8           	ret		z
 243+ 91AA FE 5B        	cp		'Z'+1
 244+ 91AC 30 F7        	jr		nc,.CapLoop
 245+ 91AE FE 41        	cp		'A'
 246+ 91B0 38 F3        	jr		c,.CapLoop
 247+ 91B2              .LowerCase:
 248+ 91B2 C6 20        	add		a,'a'-'A'
 249+ 91B4 77           	ld		(hl),a
 250+ 91B5 18 EE        	jr		.CapLoop
 251+ 91B7
 252+ 91B7 21 9E 90     ShipIndexToAddress      ld      hl,WordIdxShipNames
 253+ 91BA C3 C0 91                             jp      WordLookup
 254+ 91BD
 255+ 91BD 21 D0 8F     WordIndexToAddress:     ld		hl,WordIdx
 256+ 91C0 ED 31        WordLookup:             add		hl,a
 257+ 91C2 ED 31                                add		hl,a
 258+ 91C4 D5                                   push	de
 259+ 91C5 5E                                   ld		e,(hl)
 260+ 91C6 23                                   inc		hl
 261+ 91C7 56                                   ld		d,(hl)
 262+ 91C8 EB                                   ex		de,hl
 263+ 91C9 D1                                   pop		de
 264+ 91CA C9                                   ret
 265+ 91CB
 266+ 91CB
 267+ 91CB              expandTokenToString:
 268+ 91CB              ; ">expandTokenToString a = texttoken"
 269+ 91CB 21 4E 91     	ld		hl,TextTokens
 270+ 91CE CD 2B 8B     	call	getTableText
 271+ 91D1 11 84 91     	ld		de,TextBuffer
 272+ 91D4              .ReadLoop:
 273+ 91D4 7E           	ld		a,(hl)
 274+ 91D5 FE 00        	cp		0
 275+ 91D7 28 1B        	jr		z,.ReadDone
 276+ 91D9 E5           	push	hl
 277+ 91DA D5           	push	de
 278+ 91DB 21 D0 8F     	ld		hl,WordIdx
 279+ 91DE CD 2B 8B     	call	getTableText
 280+ 91E1 D1           	pop		de
 281+ 91E2              .WordExpandLoop:
 282+ 91E2 7E           	ld		a,(hl)
 283+ 91E3 FE 00        	cp		0
 284+ 91E5 28 05        	jr		z,.AddSpace
 285+ 91E7              ;.GetChar:
 286+ 91E7 12           	ld		(de),a
 287+ 91E8 13           	inc		de
 288+ 91E9 23           	inc		hl
 289+ 91EA 18 F6        	jr		.WordExpandLoop
 290+ 91EC              .AddSpace:
 291+ 91EC 3E 20        	ld		a,' '
 292+ 91EE 12           	ld		(de),a
 293+ 91EF 13           	inc		de
 294+ 91F0 E1           	pop		hl
 295+ 91F1 23           	inc		hl
 296+ 91F2 18 E0        	jr		.ReadLoop
 297+ 91F4              .ReadDone:
 298+ 91F4 1B           	dec		de
 299+ 91F5 AF           	xor		a
 300+ 91F6 12           	ld		(de),a
 301+ 91F7 C9           	ret
 302+ 91F8
# file closed: ./Tables/dictionary.asm
 601  91F8                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ 91F8 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ 91FC 53 45 49 54
   1+ 9200 49 4C 45 54
   1+ 9204 53 54 4F 4E
   1+ 9208 4C 4F 4E 55
   1+ 920C 54 48 4E 4F
   2+ 9210 41 4C 4C     name_digrams2   DB "ALL"
   3+ 9213 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ 9217 45 5A 41 43
   3+ 921B 45 42 49 53
   3+ 921F 4F 55 53 45
   3+ 9223 53 41 52 4D
   3+ 9227 41 49 4E 44
   3+ 922B 49 52 45 41
   4+ 922F 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ 9233 54 45 4E 42
   4+ 9237 45 52 41 4C
   4+ 923B 41 56 45 54
   4+ 923F 49 45 44 4F
   4+ 9243 52 51 55 41
   4+ 9247 4E 54 45 49
   4+ 924B 53 52 49 4F
   4+ 924F 4E
   5+ 9250
   6+ 9250              ; TODO Moveinto galaxy data module
   7+ 9250 00 00 00...  name_expanded	DS 32
   8+ 9270 00           				DB 0
   9+ 9271
  10+ 9271
  11+ 9271
  12+ 9271              NamingLoop:
  13+ 9271 3A 28 82     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ 9274 E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ 9276 FE 00        	cp		0					; 0 = skip 2 chars
  16+ 9278 28 12        	jr		z,.SkipPhrase
  17+ 927A C6 0C        	add		a,12
  18+ 927C CB 27        	sla		a					; phrase = (a+12)*2
  19+ 927E 21 F8 91     	ld		hl,name_digrams
  20+ 9281 ED 31        	add		hl,a
  21+ 9283 ED A0        	ldi
  22+ 9285 7E           	ld		a,(hl)
  23+ 9286 FE 3F        	cp		'?'
  24+ 9288 28 02        	jr		z,.SkipPhrase
  25+ 928A              .AddExtra:
  26+ 928A ED A0        	ldi
  27+ 928C              .SkipPhrase:
  28+ 928C D5           	push	de
  29+ 928D CD B3 88     	call	working_seed
  30+ 9290 D1           	pop		de
  31+ 9291 C9           	ret
  32+ 9292
  33+ 9292              ;GetDigramGalaxySeed:
  34+ 9292              ;	call	copy_galaxy_to_working
  35+ 9292              ;	jr		GetDigramWorkingSeed
  36+ 9292              ;GetDigramSystemSeed:
  37+ 9292              ;	call	copy_system_to_working
  38+ 9292              ;GetDigramWorkingSeed:
  39+ 9292              ;; ">GetDigram a = digram seed"
  40+ 9292              ;	ld		de,name_expanded
  41+ 9292              ;	ld		b,3
  42+ 9292              ;	ld		a,(WorkingSeeds)
  43+ 9292              ;	and		$40
  44+ 9292              ;	jr		z,.SmallSizeName
  45+ 9292              ;.LargeSizeName:
  46+ 9292              ;	call	NamingLoop
  47+ 9292              ;.SmallSizeName:
  48+ 9292              ;	call	NamingLoop
  49+ 9292              ;	call	NamingLoop
  50+ 9292              ;	call	NamingLoop
  51+ 9292              ;.DoneName:
  52+ 9292              ;	ex		de,hl
  53+ 9292              ;	ld		(hl),0
  54+ 9292              ;	ex		de,hl
  55+ 9292              ;	ret
  56+ 9292
  57+ 9292
  58+ 9292
  59+ 9292              ;GetDigramWorkingSeed:
  60+ 9292              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ 9292              ;	ld		b,5					; working seed
  62+ 9292              ;	ld		de,name_expanded
  63+ 9292              ;.ExpansionLoop:
  64+ 9292              ;	push	bc
  65+ 9292              ;	ld		hl,WorkingSeeds
  66+ 9292              ;	ld		a,b
  67+ 9292              ;	add		hl,a
  68+ 9292              ;	ld		a,(hl)	; a = first byte of name seed
  69+ 9292              ;	and 	$1F					; Keep bottom 5 bits only
  70+ 9292              ;	cp		0					; 0 = skip 2 chars
  71+ 9292              ;	jr		z,.SkipPhrase
  72+ 9292              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ 9292              ;	call	TT27
  74+ 9292              ;.SkipPhrase:
  75+ 9292              ;	push	de
  76+ 9292              ;	call	next_working_seed
  77+ 9292              ;	pop		de
  78+ 9292              ;	pop		bc
  79+ 9292              ;	djnz	GetDigramWorkingSeed
  80+ 9292              ;.DoneName:
  81+ 9292              ;	ex		de,hl
  82+ 9292              ;	ld		(hl),0
  83+ 9292              ;	ex		de,hl
  84+ 9292              ;	ret
  85+ 9292              ;
  86+ 9292              ;ExpandToken:
  87+ 9292              ;	DE = target
  88+ 9292              ;	a = token
  89+ 9292              ;
  90+ 9292              ;PlanetDigram:
  91+ 9292              ;	cp		&A0							; >- 160
  92+ 9292              ;	jr		c,MorePage4
  93+ 9292              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ 9292              ;	asl		2							; Multiply by 2
  95+ 9292              ;	ld		hl, name_digrams2
  96+ 9292              ;	add		hl,a
  97+ 9292              ;	ld		a,(hl)
  98+ 9292              ;	call	ProcessTextToken
  99+ 9292              ;	inc		hl
 100+ 9292              ;	ld		a,(hl)
 101+ 9292              ;	cp		'?'
 102+ 9292              ;	ret		z
 103+ 9292              ;	call	ProcessTextToken
 104+ 9292              ;	ret
 105+ 9292              ;MorePage4:
 106+ 9292              ;	sub		$A0
 107+ 9292              ;ExtraTokenCheck:
 108+ 9292              ;	push	de							; save target address
 109+ 9292              ;	push	bc
 110+ 9292              ;	ld		b,a
 111+ 9292              ;	ld		hl,varV
 112+ 9292              ;	ld		(VarV),0400
 113+ 9292              ;	ld		(varV),a
 114+ 9292              ;	ld
 115+ 9292              ;
 116+ 9292              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ 9292              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ 9292              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ 9292              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ 9292              ;0A                      ASL A		      \ *= 2
 121+ 9292              ;A8                      TAY 		      \ digram index = 0to62
 122+ 9292              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ 9292              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ 9292              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ 9292              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ 9292              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ 9292              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ 9292              ;
 129+ 9292              ;	.TT47	\ more page4, subtract #160
 130+ 9292              ;E9 A0                   SBC #&A0	\ -= 160
 131+ 9292              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ 9292              ;AA                      TAX 		\ copy of word index
 133+ 9292              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ 9292              ;85 22                   STA &22		\ V
 135+ 9292              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ 9292              ;85 23                   STA &23		\ V+1
 137+ 9292              ;A0 00                   LDY #0
 138+ 9292              ;8A                      TXA 		\ token = word index
 139+ 9292              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ 9292              ;	.TT51	\ counters Y letter, X token
 141+ 9292              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ 9292              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ 9292              ;C8                      INY 		\ letter count
 144+ 9292              ;D0 F9                   BNE TT51	\ loop Y
 145+ 9292              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ 9292              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ 9292              ;	.TT49	\ word ended
 148+ 9292              ;C8                      INY
 149+ 9292              ;D0 02                   BNE TT59    	\ next word
 150+ 9292              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ 9292              ;	.TT59	\ next word
 152+ 9292              ;CA                      DEX 		\ token count
 153+ 9292              ;D0 ED                   BNE TT51	\ loop X token
 154+ 9292              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ 9292              ;98                      TYA
 156+ 9292              ;48                      PHA 		\ store Yindex
 157+ 9292              ;A5 23                   LDA &23		\ V+1
 158+ 9292              ;48                      PHA 		\ correct pointer hi
 159+ 9292              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ 9292              ;49 23                   EOR #&23	\ decode '#'
 161+ 9292              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ 9292              ;68                      PLA 		\ restore this depth's Vhi
 163+ 9292              ;85 23                   STA &23		\ V+1
 164+ 9292              ;68                      PLA
 165+ 9292              ;A8                      TAY 		\ restore this depth's Yindex
 166+ 9292              ;C8                      INY 		\ next letter
 167+ 9292              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ 9292              ;E6 23                   INC &23		\ V+1
 169+ 9292              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ 9292              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ 9292              ;	.TT48 	\ rts
 172+ 9292              ;60                      RTS 		\ end of flight token printing TT27
 173+ 9292              ;
 174+ 9292              ;
 175+ 9292              ;
 176+ 9292              ;
 177+ 9292              ;
 178+ 9292              ;
 179+ 9292              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ 9292              ;;AA                      TAX		\ copy token to count down
 181+ 9292              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ 9292              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ 9292              ;CA                      DEX
 184+ 9292              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ 9292              ;CA                      DEX
 186+ 9292              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ 9292              ;CA                      DEX
 188+ 9292              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ 9292              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ 9292              ;CA                      DEX
 191+ 9292              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ 9292              ;CA                      DEX
 193+ 9292              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ 9292              ;CA                      DEX
 195+ 9292              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ 9292              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ 9292              ;85 72                   STA &72	 	\ QQ17
 198+ 9292              ;60                      RTS
 199+ 9292              ;CA                      DEX 		\ skip Acc ==7
 200+ 9292              ;CA                      DEX
 201+ 9292              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ 9292              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ 9292              ;60                      RTS
 204+ 9292              ;CA                      DEX 		\ continue 9to127 tokens
 205+ 9292              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ 9292              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ 9292              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ 9292              ;C9 0E                   CMP #14		\ < 14 ?
 209+ 9292              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ 9292              ;C9 20                   CMP #32		\ < 32 ?
 211+ 9292              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ 9292              ;		\ Token  < 14 or > 31
 213+ 9292              ;A6 72                   LDX &72	 	\ QQ17
 214+ 9292              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ 9292              ;30 11                   BMI TT41 	\ if bit7 set
 216+ 9292              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ 9292              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ 9292              ;	.TT42	\ Uppercase to lowercase
 219+ 9292              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ 9292              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ 9292              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ 9292              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ 9292              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ 9292              ;	.TT44	\ print character as is with TT26
 225+ 9292              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ 9292              ;
 227+ 9292              ;	.TT41	\ QQ17 bit7 set
 228+ 9292              ;24 72                   BIT &72		\ QQ17
 229+ 9292              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ 9292              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ 9292              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ 9292              ;48                      PHA 		\ else store token Acc
 233+ 9292              ;8A                      TXA 		\ QQ17 copy
 234+ 9292              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ 9292              ;85 72                   STA &72	 	\ QQ17
 236+ 9292              ;68                      PLA 		\ restore token
 237+ 9292              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ 9292              ;
 239+ 9292              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ 9292              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ 9292              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ 9292              ;
 243+ 9292              ;	.crlf	\ Acc == 9,  colon on right
 244+ 9292              ;A9 15                   LDA #21		\ on right
 245+ 9292              ;85 2C                   STA &2C		\ XC
 246+ 9292              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ 9292              ;
 248+ 9292              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ 9292              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ 9292              ;F0 63                   BEQ TT48	\ rts
 251+ 9292              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ 9292              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ 9292              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ 9292              ;48                      PHA 		\ push token
 255+ 9292              ;8A                      TXA 		\ QQ17 copy
 256+ 9292              ;29 BF                   AND #&BF	\ clear bit6
 257+ 9292              ;85 72                   STA &72	 	\ QQ17
 258+ 9292              ;68                      PLA 		\ pull token
 259+ 9292              ;	.TT74	\ TT26, print character.
 260+ 9292              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ 9292              ;
 262+ 9292              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ 9292              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ 9292              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ 9292              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ 9292              ;0A                      ASL A		      \ *= 2
 267+ 9292              ;A8                      TAY 		      \ digram index = 0to62
 268+ 9292              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ 9292              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ 9292              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ 9292              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ 9292              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ 9292              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ 9292              ;
 275+ 9292              ;	.TT47	\ more page4, subtract #160
 276+ 9292              ;E9 A0                   SBC #&A0	\ -= 160
 277+ 9292              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ 9292              ;AA                      TAX 		\ copy of word index
 279+ 9292              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ 9292              ;85 22                   STA &22		\ V
 281+ 9292              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ 9292              ;85 23                   STA &23		\ V+1
 283+ 9292              ;A0 00                   LDY #0
 284+ 9292              ;8A                      TXA 		\ token = word index
 285+ 9292              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ 9292              ;	.TT51	\ counters Y letter, X token
 287+ 9292              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ 9292              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ 9292              ;C8                      INY 		\ letter count
 290+ 9292              ;D0 F9                   BNE TT51	\ loop Y
 291+ 9292              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ 9292              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ 9292              ;	.TT49	\ word ended
 294+ 9292              ;C8                      INY
 295+ 9292              ;D0 02                   BNE TT59    	\ next word
 296+ 9292              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ 9292              ;	.TT59	\ next word
 298+ 9292              ;CA                      DEX 		\ token count
 299+ 9292              ;D0 ED                   BNE TT51	\ loop X token
 300+ 9292              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ 9292              ;98                      TYA
 302+ 9292              ;48                      PHA 		\ store Yindex
 303+ 9292              ;A5 23                   LDA &23		\ V+1
 304+ 9292              ;48                      PHA 		\ correct pointer hi
 305+ 9292              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ 9292              ;49 23                   EOR #&23	\ decode '#'
 307+ 9292              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ 9292              ;68                      PLA 		\ restore this depth's Vhi
 309+ 9292              ;85 23                   STA &23		\ V+1
 310+ 9292              ;68                      PLA
 311+ 9292              ;A8                      TAY 		\ restore this depth's Yindex
 312+ 9292              ;C8                      INY 		\ next letter
 313+ 9292              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ 9292              ;E6 23                   INC &23		\ V+1
 315+ 9292              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ 9292              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ 9292              ;	.TT48 	\ rts
 318+ 9292              ;60                      RTS 		\ end of flight token printing TT27
 319+ 9292              ;
 320+ 9292              ;
 321+ 9292              ;
# file closed: ./Tables/name_digrams.asm
 602  9292              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
 603  9292              ; Include all maths libraries to test assembly
 604  9292                  INCLUDE "./Maths/asm_add.asm"
# file opened: ./Maths/asm_add.asm
   1+ 9292              ;; calcs BHB + CDE where B and C are signs and may be 24 bit
   2+ 9292              ;; result HL with A as sign
   3+ 9292              ;; special handling if result is zero forcign sign bit to be zero
   4+ 9292
   5+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLSAHLEquBHLaddCDE:        ld      a,b
   6+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        xor     c
   7+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        and     SignOnly8Bit
   8+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        JumpIfNegative   .OppositeSigns
   9+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.SameSigns:             ld      ixh,b                      ; ixh = b
  10+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ClearSignBit b                     ; b = ABS b
  11+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        add     hl,de                      ; hl = hl + de
  12+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,b                        ; a = b + c + carry
  13+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        adc     c                          ;
  14+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      b,a                        ;
  15+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,ixh                      ;
  16+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        SignBitOnlyA                       ;
  17+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        or      b                          ;
  18+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ret                                ;
  19+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.OppositeSigns:         ld      ixh,b                      ; save signed into ixh and ixl
  20+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      ixl,c                      ; .
  21+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ClearSignBit c                     ; c = ABS C
  22+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,b                        ; a = abs b
  23+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ClearSignBitA                      ; .
  24+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        sbc     c                          ; a = a - c
  25+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        JumpIfNegative  .OppositeCDEgtBHL  ; if c is positive
  26+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        push    hl
  27+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        sbc     hl,de                      ; then subtract de from hl
  28+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        JumpIfNegative  .HLDEWasNegative   ; if sub was positive
  29+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        pop     de                         ; at this stage the stack is just junk
  30+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      b,a                        ; then copy results to AHL
  31+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,ixh                      ; by just handling sign
  32+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        SignBitOnlyA                       ; .
  33+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        or      b                          ; .
  34+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ret                                ; .
  35+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.OppositeCDEgtBHL:      ex      de,hl                      ; save hl
  36+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      c,ixh                      ; swap signs over
  37+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      b,ixl                      ;
  38+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        jp      .OppositeSigns             ; and do calc again
  39+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.HLDEWasNegative:       pop     hl                         ; get back hl swap values and try again
  40+ 9292              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        jp      .OppositeCDEgtBHL
  41+ 9292              ; example
  42+ 9292              ; bhl - 00 00 06 CDE - 80 00 0B so equates to 000006 + (-00000B) or -000005 or 800005
  43+ 9292
  44+ 9292 78           ADDHLDESignBC:          ld      a,b
  45+ 9293 E6 80                                and     SignOnly8Bit
  46+ 9295 A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
  47+ 9296                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
  47+ 9296 FA A4 92    >                        jp		m, ADDHLDEsBCOppSGN
  48+ 9299 78           ADDHLDEsBCSameSigns:    ld      a,b
  49+ 929A B1                                   or      c
  50+ 929B                                      JumpIfNegative ADDHLDEsBCSameNeg    ; optimisation so we can just do simple add if both positive
  50+ 929B FA A0 92    >                        jp		m, ADDHLDEsBCSameNeg
  51+ 929E 19                                   add     hl,de                       ; both positive so a will already be zero
  52+ 929F C9                                   ret
  53+ 92A0 19           ADDHLDEsBCSameNeg:      add     hl,de
  54+ 92A1 78                                   ld      a,b
  55+ 92A2 B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  56+ 92A3 C9                                   ret
  57+ 92A4              ADDHLDEsBCOppSGN:       ClearCarryFlag
  57+ 92A4 B7          >                        or a
  58+ 92A5 ED 52                                sbc     hl,de
  59+ 92A7 38 02                                jr      c,ADDHLDEsBCOppInvert
  60+ 92A9 78           ADDHLDEsBCOppSGNNoCarry:ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  61+ 92AA C9                                   ret
  62+ 92AB              ADDHLDEsBCOppInvert:    NegHL                               ; if result was zero then set sign to zero (which doing h or l will give us for free)
  62+ 92AB AF          >                    xor a
  62+ 92AC 95          >                    sub l
  62+ 92AD 6F          >                    ld l,a
  62+ 92AE 9F          >                    sbc a,a
  62+ 92AF 94          >                    sub h
  62+ 92B0 67          >                    ld h,a
  63+ 92B1 78                                   ld      a,b
  64+ 92B2 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  65+ 92B4 C9                                   ret
  66+ 92B5
  67+ 92B5 7C           ADDHLDESignedV4:        ld      a,h
  68+ 92B6 E6 80                                and     SignOnly8Bit
  69+ 92B8 47                                   ld      b,a                         ;save sign bit in b
  70+ 92B9 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  71+ 92BA                                      JumpIfNegative .ADDHLDEOppSGN       ;Signs are opposite there fore we can subtract to get difference
  71+ 92BA FA D2 92    >                        jp		m, .ADDHLDEOppSGN
  72+ 92BD 78           .ADDHLDESameSigns:      ld      a,b
  73+ 92BE B2                                   or      d
  74+ 92BF                                      JumpIfNegative .ADDHLDESameNeg      ; optimisation so we can just do simple add if both positive
  74+ 92BF FA C4 92    >                        jp		m, .ADDHLDESameNeg
  75+ 92C2 19                                   add     hl,de
  76+ 92C3 C9                                   ret
  77+ 92C4 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  78+ 92C5 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  79+ 92C7 67                                   ld      h,a
  80+ 92C8 7A                                   ld      a,d
  81+ 92C9 E6 7F                                and     SignMask8Bit
  82+ 92CB 57                                   ld      d,a
  83+ 92CC 19                                   add     hl,de
  84+ 92CD 3E 80                                ld      a,SignOnly8Bit
  85+ 92CF B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  86+ 92D0 67                                   ld      h,a
  87+ 92D1 C9                                   ret
  88+ 92D2 7C           .ADDHLDEOppSGN:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  89+ 92D3 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  90+ 92D5 67                                   ld      h,a
  91+ 92D6 7A                                   ld      a,d
  92+ 92D7 E6 7F                                and     SignMask8Bit
  93+ 92D9 57                                   ld      d,a
  94+ 92DA                                      ClearCarryFlag
  94+ 92DA B7          >                        or a
  95+ 92DB ED 52                                sbc     hl,de
  96+ 92DD 38 04                                jr      c,.ADDHLDEOppInvert
  97+ 92DF 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  98+ 92E0 B4                                   or      h
  99+ 92E1 67                                   ld      h,a                         ; set the previou sign value
 100+ 92E2 C9                                   ret
 101+ 92E3              .ADDHLDEOppInvert:      NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 101+ 92E3 AF          >                    xor a
 101+ 92E4 95          >                    sub l
 101+ 92E5 6F          >                    ld l,a
 101+ 92E6 9F          >                    sbc a,a
 101+ 92E7 94          >                    sub h
 101+ 92E8 67          >                    ld h,a
 102+ 92E9 78                                   ld      a,b
 103+ 92EA EE 80                                xor     SignOnly8Bit                ; flip sign bit
 104+ 92EC B4                                   or      h
 105+ 92ED 67                                   ld      h,a                         ; recover sign
 106+ 92EE C9                                   ret
 107+ 92EF
 108+ 92EF              ;;;NOT USED addhldesigned:          bit     7,h
 109+ 92EF              ;;;NOT USED                         jr      nz,.noneghl
 110+ 92EF              ;;;NOT USED                         call    negate16hl
 111+ 92EF              ;;;NOT USED .noneghl:               bit     7,d
 112+ 92EF              ;;;NOT USED                         jr      nz,.nonegde
 113+ 92EF              ;;;NOT USED                         call    negate16de
 114+ 92EF              ;;;NOT USED .nonegde:               add     hl,de                       ; do 2'd c add
 115+ 92EF              ;;;NOT USED                         xor     a                           ; assume positive
 116+ 92EF              ;;;NOT USED                         bit     7,h
 117+ 92EF              ;;;NOT USED                         ret     z                           ; if not set then can exit early
 118+ 92EF              ;;;NOT USED                         call    negate16hl
 119+ 92EF              ;;;NOT USED                         ld      a,$FF
 120+ 92EF              ;;;NOT USED                         ret
 121+ 92EF
 122+ 92EF
 123+ 92EF              ;; NOT USED MAY WORK ? ; HL(2sc) = HL (signed) + A (unsigned), uses HL, DE, A
 124+ 92EF              ;; NOT USED MAY WORK ? ; 06 06 2022 not used
 125+ 92EF              ;; NOT USED MAY WORK ? HL2cEquHLSgnPlusAusgn:  ld      d,0
 126+ 92EF              ;; NOT USED MAY WORK ?                         ld      e,a                         ; set up DE = A
 127+ 92EF              ;; NOT USED MAY WORK ?                         ld      a,h
 128+ 92EF              ;; NOT USED MAY WORK ?                         and     SignMask8Bit
 129+ 92EF              ;; NOT USED MAY WORK ?                         jr      z,.HLPositive               ; if HL is negative then do HL - A
 130+ 92EF              ;; NOT USED MAY WORK ? .HLNegative:            ld      h,a                         ; hl = ABS (HL)
 131+ 92EF              ;; NOT USED MAY WORK ?                         NegHL                               ; hl = - hl
 132+ 92EF              ;; NOT USED MAY WORK ? .HLPositive:            ClearCarryFlag                      ; now do adc hl,de
 133+ 92EF              ;; NOT USED MAY WORK ?                         adc     hl,de                       ; aftert his hl will be 2's c
 134+ 92EF              ;; NOT USED MAY WORK ?                         ret
 135+ 92EF              ;; NOT USED MAY WORK ? ; 06 06 2022 not used
 136+ 92EF              ;; NOT USED MAY WORK ? HLEquHLSgnPlusAusgn:    ld      e,a
 137+ 92EF              ;; NOT USED MAY WORK ?                         ld      a,h
 138+ 92EF              ;; NOT USED MAY WORK ?                         and     SignMask8Bit
 139+ 92EF              ;; NOT USED MAY WORK ?                         jr      nz,.HLNegative              ; if HL is negative then do HL - A
 140+ 92EF              ;; NOT USED MAY WORK ? .HLPositive:            ld      a,e                         ; else its HL + A
 141+ 92EF              ;; NOT USED MAY WORK ?                         add     hl,a
 142+ 92EF              ;; NOT USED MAY WORK ?                         ret
 143+ 92EF              ;; NOT USED MAY WORK ? .HLNegative:            ClearSignBit    h                   ; Clear sign of HL
 144+ 92EF              ;; NOT USED MAY WORK ?                         NegHL                               ; and convert to 2's C
 145+ 92EF              ;; NOT USED MAY WORK ?                         ld      d,0
 146+ 92EF              ;; NOT USED MAY WORK ?                         ClearCarryFlag
 147+ 92EF              ;; NOT USED MAY WORK ?                         sbc     hl,de                       ; now add a to -ve HL , add does not do 2's c
 148+ 92EF              ;; NOT USED MAY WORK ?                         jp      m,.FlipResult               ; if it was negative then its really positive
 149+ 92EF              ;; NOT USED MAY WORK ?                         SetSignBit      h
 150+ 92EF              ;; NOT USED MAY WORK ?                         ret
 151+ 92EF              ;; NOT USED MAY WORK ? .FlipResult:            NegHL                               ; so if -hl + A => HL - A => HL - DE is negative then the actual result is +ve
 152+ 92EF              ;; NOT USED MAY WORK ?                         ret
 153+ 92EF
 154+ 92EF
 155+ 92EF              ; 06 06 2022 not used
 156+ 92EF              ; HL = HL (signed) + A (unsigned), uses HL, DE, A
 157+ 92EF 57           AddAusngToHLsng:        ld      d,a
 158+ 92F0 5C                                   ld      e,h
 159+ 92F1 7C                                   ld      a,h
 160+ 92F2 E6 7F                                and     SignMask8Bit
 161+ 92F4 67                                   ld      h,a
 162+ 92F5 7A                                   ld      a,d
 163+ 92F6 ED 31                                add     hl,a
 164+ 92F8 7B                                   ld      a,e
 165+ 92F9 E6 80                                and     SignOnly8Bit
 166+ 92FB B4                                   or      h
 167+ 92FC C9                                   ret
 168+ 92FD              ; 06 06 2022 not used
 169+ 92FD              ; HL = A (unsigned) - HL (signed), uses HL, DE, BC, A
 170+ 92FD 44           HLEequAusngMinusHLsng:  ld      b,h
 171+ 92FE 4F                                   ld      c,a
 172+ 92FF 78                                   ld      a,b
 173+ 9300 E6 80                                and     SignOnly8Bit
 174+ 9302 20 08                                jr      nz,.DoAdd
 175+ 9304 EB           .DoSubtract:            ex      de,hl               ; move hl into de
 176+ 9305 26 00                                ld      h,0                 ; hl = a
 177+ 9307 69                                   ld      l,c
 178+ 9308                                      ClearCarryFlag
 178+ 9308 B7          >                        or a
 179+ 9309 ED 52                                sbc     hl,de               ; hl = a - hl
 180+ 930B C9                                   ret
 181+ 930C 79           .DoAdd:                 ld      a,c
 182+ 930D ED 31                                add hl,a
 183+ 930F C9                                   ret
 184+ 9310              ;tested mathstestsun2
 185+ 9310              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
 186+ 9310 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
 187+ 9311 AA                                   xor     d                   ; .
 188+ 9312 E6 80                                and     SignOnly8Bit        ; .
 189+ 9314 20 19                                jr      nz,.SignDifferent   ; .
 190+ 9316 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
 191+ 9317 E6 80                                and     SignOnly8Bit        ; so store it in iyh
 192+ 9319 FD 67                                ld      iyh,a               ;
 193+ 931B 78                                   ld      a,b                 ; bch = abs bch
 194+ 931C E6 7F                                and     SignMask8Bit        ; .
 195+ 931E 47                                   ld      b,a                 ; .
 196+ 931F 7A                                   ld      a,d                 ; del = abs del
 197+ 9320 E6 7F                                and     SignMask8Bit        ; .
 198+ 9322 57                                   ld      d,a                 ; .
 199+ 9323 7C                                   ld      a,h                 ; l = h + l
 200+ 9324 85                                   add     l                   ; .
 201+ 9325 6F                                   ld      l,a                 ; .
 202+ 9326 79                                   ld      a,c                 ; e = e + c + carry
 203+ 9327 8B                                   adc     e                   ; .
 204+ 9328 5F                                   ld      e,a                 ; .
 205+ 9329 78                                   ld      a,b                 ; d = b + d + carry (signed)
 206+ 932A 8A                                   adc     d                   ;
 207+ 932B FD B4                                or      iyh                 ; d = or back in sign bit
 208+ 932D 57                                   ld      d,a                 ;
 209+ 932E C9                                   ret                         ; done
 210+ 932F 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
 211+ 9330 FD 67                                ld      iyh,a               ; iyh = b sign
 212+ 9332 E6 7F                                and     SignMask8Bit        ; .
 213+ 9334 47                                   ld      b,a                 ; .
 214+ 9335 7A                                   ld      a,d                 ; del = abs del
 215+ 9336 FD 6F                                ld      iyl,a               ; iyl = d sign
 216+ 9338 E6 7F                                and     SignMask8Bit        ; .
 217+ 933A 57                                   ld      d,a                 ; .
 218+ 933B E5                                   push    hl                  ; save hl
 219+ 933C 60 69                                ld      hl,bc               ; hl = bc - de, if bc < de then there is a carry
 220+ 933E ED 52                                sbc     hl,de               ;
 221+ 9340 E1                                   pop     hl                  ;
 222+ 9341 38 0E                                jr      c,.BCHltDEL
 223+ 9343 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
 224+ 9345 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
 225+ 9346                                      JumpIfALTNusng l,.BCHltDEL
 225+ 9346 BD          >                        cp      l
 225+ 9347 DA 51 93    >                        jp		c, .BCHltDEL
 226+ 934A 20 15                                jr      nz,.DELltBCH
 227+ 934C              ; The same so its just zero
 228+ 934C AF           .BCHeqDEL:              xor     a                  ; its just zero
 229+ 934D 57                                   ld      d,a                ; .
 230+ 934E 5F                                   ld      e,a                ; .
 231+ 934F 6F                                   ld      l,a                ; .
 232+ 9350 C9                                   ret                        ; .
 233+ 9351              ;BCH is less than DEL so its DEL - BCH the sort out sign
 234+ 9351 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
 235+ 9352 94                                   sub     h                  ; .                              ;   01D70F DEL
 236+ 9353 6F                                   ld      l,a                ; .                              ;  -000028 BCH
 237+ 9354 7B                                   ld      a,e                ; e = e - c - carry              ;1.
 238+ 9355 99                                   sbc     c                  ; .                              ;
 239+ 9356 5F                                   ld      e,a                ; .                              ;
 240+ 9357 7A                                   ld      a,d                ; d = d - b - carry              ;
 241+ 9358 98                                   sbc     b                  ; .                              ;
 242+ 9359 57                                   ld      d,a                ; .                              ;
 243+ 935A FD 7D                                ld      a,iyl              ; as d was larger, take d sign
 244+ 935C E6 80                                and     SignOnly8Bit       ;
 245+ 935E B2                                   or      d                  ;
 246+ 935F 57                                   ld      d,a                ;
 247+ 9360 C9                                   ret
 248+ 9361 7C           .DELltBCH:              ld      a,h                ; l = h - l
 249+ 9362 95                                   sub     l                  ;
 250+ 9363 6F                                   ld      l,a                ;
 251+ 9364 79                                   ld      a,c                ; e = c - e - carry
 252+ 9365 9B                                   sbc     e                  ;
 253+ 9366 5F                                   ld      e,a                ;
 254+ 9367 78                                   ld      a,b                ; d = b - d - carry
 255+ 9368 9A                                   sbc     d                  ;
 256+ 9369 57                                   ld      d,a                ;
 257+ 936A FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
 258+ 936C E6 80                                and     SignOnly8Bit       ;
 259+ 936E B2                                   or      d                  ;
 260+ 936F 57                                   ld      d,a                ;
 261+ 9370 C9                                   ret
 262+ 9371
 263+ 9371              ; 06 06 2022 not used
 264+ 9371              ;BHL = AHL + DE where AHL = 16 bit + A sign and DE = 15 bit signed
 265+ 9371 47           AddAHLtoDEsigned:       ld      b,a                     ; B = A , C = D (save sign bytes)
 266+ 9372 4A                                   ld      c,d                     ; .
 267+ 9373 A9                                   xor     c                       ; A = A xor C
 268+ 9374 CB BA                                res     7,d                     ; clear sign bit of D
 269+ 9376 20 02                                jr nz,  .OppositeSigns          ; if A xor C is opposite signs job to A0A1
 270+ 9378 19                                   add     hl,de                   ; HL = HL + DE
 271+ 9379 C9                                   ret                             ; return
 272+ 937A ED 52        .OppositeSigns:         sbc     hl,de                   ; HL = HL -DE
 273+ 937C D0                                   ret     nc                      ; if no carry return
 274+ 937D 19                                   add     hl,de                   ; else HL = HL + DE
 275+ 937E EB                                   ex      de,hl                   ;      swap HL and DE
 276+ 937F A7                                   and     a                       ;      reset carry
 277+ 9380 ED 52                                sbc     hl,de                   ;      HL = DE - HL (as they were swapped)
 278+ 9382 41                                   ld      b,c                     ;      B = sign of C
 279+ 9383 C9                                   ret                             ;      ret
 280+ 9384
 281+ 9384
 282+ 9384              ; 06 06 2022 not used
 283+ 9384              ; a = value to add
 284+ 9384              ; b = offset (equivalent to regX)
 285+ 9384              ; returns INWK [x] set to new value
 286+ 9384              ; NOT USED addINWKbasigned:
 287+ 9384              ; NOT USED 		ld 		hl,UBnKxlo                  ; hl = INWK 0
 288+ 9384              ; NOT USED 		ld      c,a                         ; preserve a
 289+ 9384              ; NOT USED 		ld		a,b
 290+ 9384              ; NOT USED 		add		hl,a                        ; hl = INWK[x]
 291+ 9384              ; NOT USED         ld      a,c                         ; get back a value
 292+ 9384              ; NOT USED         and     $80                         ; get sign bit from a
 293+ 9384              ; NOT USED         ld      b,a                         ; now b = sign bit of a
 294+ 9384              ; NOT USED         ld      a,c                         ; a = original value
 295+ 9384              ; NOT USED         and     SignMask8Bit                ; a = unsigned version of original value
 296+ 9384              ; 06 06 2022 not used
 297+ 9384              ; hl = unsigned version of INWK0[b]
 298+ 9384              ; a = value to add, also in c which will optimise later code
 299+ 9384              ; b = sign bit of a ( in old code was varT)
 300+ 9384              ; NOTUSEDaddhlcsigned:
 301+ 9384              ; NOTUSED        ld      e,(hl)                      ; de = INKK value
 302+ 9384              ; NOTUSED        inc     hl
 303+ 9384              ; NOTUSED        ld      d,(hl)
 304+ 9384              ; NOTUSED        inc     hl                          ; now pointing a sign
 305+ 9384              ; NOTUSED        ld      a,(hl)                      ; a = sign bit
 306+ 9384              ; NOTUSED        ex      de,hl                       ; hl = value now and de = pointer to sign
 307+ 9384              ; NOTUSED        xor     b                           ; a = resultant sign
 308+ 9384              ; NOTUSED        bit     7,a                         ; is it negative?
 309+ 9384              ; NOTUSED        jr      z,.postivecalc
 310+ 9384              ; NOTUSED.negativecalc:
 311+ 9384              ; NOTUSED        ld      a,h
 312+ 9384              ; NOTUSED        and     SignMask8Bit
 313+ 9384              ; NOTUSED        ld      h,a                         ; strip high bit
 314+ 9384              ; NOTUSED        ld      ixl,b                       ; save sign bit from b into d
 315+ 9384              ; NOTUSED        ld      b,0                         ; c = value to subtract so now bc = value to subtract
 316+ 9384              ; NOTUSED        sbc     hl,bc
 317+ 9384              ; NOTUSED        ld      b,ixl                       ; get sign back
 318+ 9384              ; NOTUSED        ex      de,hl                       ; de = value hl = pointer to sign
 319+ 9384              ; NOTUSED        ld      a,(hl)                      ;
 320+ 9384              ; NOTUSED        and     SignMask8Bit
 321+ 9384              ; NOTUSED        sbc     a,0                         ; subtract carry which could flip sign bit
 322+ 9384              ; NOTUSED        or      $80                         ; set bit 0
 323+ 9384              ; NOTUSED        xor     b                           ; flip bit on sign (var T)
 324+ 9384              ; NOTUSED        ld      (hl),a
 325+ 9384              ; NOTUSED        dec     hl
 326+ 9384              ; NOTUSED        ld      (hl),d
 327+ 9384              ; NOTUSED        dec     hl
 328+ 9384              ; NOTUSED        ld      (hl),e                      ; write out DE to INKW[x]0,1
 329+ 9384              ; NOTUSED        ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
 330+ 9384              ; NOTUSED        ret     c                           ; if carry was set then we can exit now
 331+ 9384              ; NOTUSED.nocarry:
 332+ 9384              ; NOTUSED        NegHL                               ; get hl back to positive, a is still inkw+2
 333+ 9384              ; NOTUSED        or      b                           ; b is still varT
 334+ 9384              ; NOTUSED        ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
 335+ 9384              ; NOTUSED        ld      (hl),e
 336+ 9384              ; NOTUSED        inc     hl
 337+ 9384              ; NOTUSED        ld      (hl),d
 338+ 9384              ; NOTUSED        inc     hl
 339+ 9384              ; NOTUSED        ld      (hl),a                      ; set sign bit in INKK[x]+2
 340+ 9384              ; NOTUSED        ex      de,hl                       ; hl = value de = pointer to sign
 341+ 9384              ; NOTUSED        ret
 342+ 9384              ; NOTUSED.postivecalc:
 343+ 9384              ; NOTUSED        ld      ixl,b
 344+ 9384              ; NOTUSED        ld      b,0
 345+ 9384              ; NOTUSED        add     hl,de
 346+ 9384              ; NOTUSED        ex      de,hl
 347+ 9384              ; NOTUSED        or      ixl                         ; we don;t need to recover b here
 348+ 9384              ; NOTUSED        ld      (hl),a                      ; push sign into INWK[x]
 349+ 9384              ; NOTUSED        dec     hl
 350+ 9384              ; NOTUSED        ld      (hl),d
 351+ 9384              ; NOTUSED        dec     hl
 352+ 9384              ; NOTUSED        ld      (hl),e
 353+ 9384              ; NOTUSED        ret
 354+ 9384
 355+ 9384              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
 356+ 9384              ;MVT1
 357+ 9384              ;    S = bits 6 to 0 of A
 358+ 9384              ;    A = sign bit => T
 359+ 9384              ;    xor sign bit with ink[x] Sign
 360+ 9384              ;    if negative thn its not an add
 361+ 9384              ;
 362+ 9384              ;        and h, 7F
 363+ 9384              ;        b = 0
 364+ 9384              ;        c = varS
 365+ 9384              ;        subtract INW[X]hilo, bc
 366+ 9384              ;        retain carry
 367+ 9384              ;        get INKW[x]Sign
 368+ 9384              ;        and 7F
 369+ 9384              ;        subtract carry (so will go negtive if negative)
 370+ 9384              ;        xor bit 7 of h with T to flip bit
 371+ 9384              ;        write to INKW[x]Sign
 372+ 9384              ;
 373+ 9384              ;    else
 374+ 9384              ;MV10.
 375+ 9384              ;        add INWK[x]hi,lo, varS
 376+ 9384              ;        or      sign bit
 377+ 9384
 378+ 9384
# file closed: ./Maths/asm_add.asm
 605  9384                  INCLUDE "./Maths/asm_subtract.asm"
# file opened: ./Maths/asm_subtract.asm
   1+ 9384              ;...subtract routines
   2+ 9384              ; we could cheat, flip the sign of DE and just add but its not very optimised
   3+ 9384 7C           subHLDES15:             ld      a,h
   4+ 9385 E6 80                                and     SignOnly8Bit
   5+ 9387 47                                   ld      b,a                         ;save sign bit in b
   6+ 9388 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
   7+ 9389                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
   7+ 9389 FA B7 93    >                        jp		m, .SUBHLDEOppSGN
   8+ 938C 78           .SUBHLDESameSigns:      ld      a,b
   9+ 938D B2                                   or      d
  10+ 938E                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
  10+ 938E FA 98 93    >                        jp		m, .SUBHLDESameNeg
  11+ 9391                                      ClearCarryFlag
  11+ 9391 B7          >                        or a
  12+ 9392 ED 52                                sbc     hl,de
  13+ 9394                                      JumpIfNegative .SUBHLDESameOvrFlw
  13+ 9394 FA AB 93    >                        jp		m, .SUBHLDESameOvrFlw
  14+ 9397 C9                                   ret
  15+ 9398 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  16+ 9399 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  17+ 939B 67                                   ld      h,a
  18+ 939C 7A                                   ld      a,d
  19+ 939D E6 7F                                and     SignMask8Bit
  20+ 939F 57                                   ld      d,a
  21+ 93A0                                      ClearCarryFlag
  21+ 93A0 B7          >                        or a
  22+ 93A1 ED 52                                sbc     hl,de
  23+ 93A3                                      JumpIfNegative .SUBHLDESameOvrFlw
  23+ 93A3 FA AB 93    >                        jp		m, .SUBHLDESameOvrFlw
  24+ 93A6 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
  25+ 93A7 F6 80                                or      SignOnly8Bit
  26+ 93A9 67                                   ld      h,a
  27+ 93AA C9                                   ret
  28+ 93AB              .SUBHLDESameOvrFlw:     NegHL
  28+ 93AB AF          >                    xor a
  28+ 93AC 95          >                    sub l
  28+ 93AD 6F          >                    ld l,a
  28+ 93AE 9F          >                    sbc a,a
  28+ 93AF 94          >                    sub h
  28+ 93B0 67          >                    ld h,a
  29+ 93B1 78                                   ld      a,b
  30+ 93B2 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  31+ 93B4 B4                                   or      h
  32+ 93B5 67                                   ld      h,a                         ; recover sign
  33+ 93B6 C9                                   ret
  34+ 93B7 B7           .SUBHLDEOppSGN:         or      a
  35+ 93B8 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  36+ 93B9 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  37+ 93BB 67                                   ld      h,a
  38+ 93BC 7A                                   ld      a,d
  39+ 93BD E6 7F                                and     SignMask8Bit
  40+ 93BF 57                                   ld      d,a
  41+ 93C0 19                                   add     hl,de
  42+ 93C1 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  43+ 93C2 B4                                   or      h
  44+ 93C3 67                                   ld      h,a                         ; set the previou sign value
  45+ 93C4 C9                                   ret
  46+ 93C5
  47+ 93C5
# file closed: ./Maths/asm_subtract.asm
 606  93C5                  INCLUDE "./Maths/Utilities/AddDEToCash.asm"
# file opened: ./Maths/Utilities/AddDEToCash.asm
   1+ 93C5              ; Note its big endian
   2+ 93C5 2A A3 87     addDEtoCash:            ld      hl,(Cash)
   3+ 93C8 19                                   add     hl,de
   4+ 93C9 22 A3 87                             ld      (Cash),hl
   5+ 93CC 11 00 00                             ld      de,0
   6+ 93CF 2A A5 87                             ld      hl,(Cash+2)
   7+ 93D2 ED 5A                                adc     hl,de
   8+ 93D4 22 A5 87                             ld      (Cash+2),hl
   9+ 93D7 C9                                   ret
  10+ 93D8
  11+ 93D8 2A A3 87     subDEfromCash:          ld      hl,(Cash)
  12+ 93DB 7C                                   ld      a,h
  13+ 93DC B5                                   or      l
  14+ 93DD 2A A5 87                             ld      hl,(Cash+2)
  15+ 93E0 B4                                   or      h
  16+ 93E1 B5                                   or      l
  17+ 93E2 C8                                   ret     z               ; No cash return
  18+ 93E3 B7                                   or      a
  19+ 93E4 2A A3 87                             ld      hl,(Cash)
  20+ 93E7 ED 52                                sbc     hl,de
  21+ 93E9 22 A3 87                             ld      (Cash),hl
  22+ 93EC 11 00 00                             ld      de,0
  23+ 93EF 2A A5 87                             ld      hl,(Cash+2)
  24+ 93F2 ED 52                                sbc     hl,de
  25+ 93F4 22 A5 87                             ld      (Cash+2),hl
  26+ 93F7                                      JumpOnBitSet h,7,.ZeroCash
  26+ 93F7 CB 7C       >                        bit 	7,h
  26+ 93F9 C2 FD 93    >                        jp      nz,.ZeroCash
  27+ 93FC C9                                   ret
  28+ 93FD 21 00 00     .ZeroCash:              ld      hl,0
  29+ 9400 22 A3 87                             ld      (Cash),hl
  30+ 9403 22 A5 87                             ld      (Cash+2),hl
  31+ 9406 C9                                   ret
  32+ 9407
# file closed: ./Maths/Utilities/AddDEToCash.asm
 607  9407                  INCLUDE "./Maths/DIVD3B2.asm"
# file opened: ./Maths/DIVD3B2.asm
   1+ 9407              ;INPUTS: ahl = dividend cde = divisor
   2+ 9407              ;OUTPUTS: cde = quotient ahl = remainder
   3+ 9407 47           Div24by24:              ld b,a
   4+ 9408 E5                                   push hl
   5+ 9409 DD E1                                pop ix
   6+ 940B 2E 18                                ld l,24
   7+ 940D E5                                   push hl
   8+ 940E AF                                   xor a
   9+ 940F 67                                   ld h,a
  10+ 9410 6F                                   ld l,a
  11+ 9411 DD 29        .Div24by24loop:         add ix,ix
  12+ 9413 CB 10                                rl b
  13+ 9415 ED 6A                                adc hl,hl
  14+ 9417 17                                   rla
  15+ 9418 B9                                   cp c
  16+ 9419 38 0C                                jr c,.Div24by24skip
  17+ 941B 20 05                                jr nz,.Div24by24setbit
  18+ 941D ED 52                                sbc hl,de
  19+ 941F 19                                   add hl,de
  20+ 9420 38 05                                jr c,.Div24by24skip
  21+ 9422 ED 52        .Div24by24setbit:       sbc hl,de
  22+ 9424 99                                   sbc a,c
  23+ 9425 DD 23                                inc ix
  24+ 9427 E3           .Div24by24skip:         ex (sp),hl
  25+ 9428 2D                                   dec l
  26+ 9429 E3                                   ex (sp),hl
  27+ 942A 20 E5                                jr nz,.Div24by24loop
  28+ 942C D1                                   pop de
  29+ 942D 48                                   ld c,b
  30+ 942E DD E5                                push ix
  31+ 9430 D1                                   pop de
  32+ 9431 C9                                   ret
  33+ 9432
  34+ 9432 FD 67        Div24by24ASigned:       ld      iyh,a
  35+ 9434 E6 7F                                and     SignMask8Bit
  36+ 9436 CD 07 94                             call    Div24by24
  37+ 9439 F5                                   push    af
  38+ 943A FD 7C                                ld      a,iyh
  39+ 943C E6 80                                and     SignOnly8Bit
  40+ 943E B1                                   or      c
  41+ 943F 4F                                   ld      c,a
  42+ 9440 F1                                   pop     af
  43+ 9441 C9                                   ret
  44+ 9442
  45+ 9442                                      ; CDE = AHL/CDE, AHL = remainder
  46+ 9442 FD 67        Div24by24LeadSign:      ld      iyh,a           ; Preserve signed in IYL
  47+ 9444 A9                                   xor     c               ; flip sign if negative
  48+ 9445 E6 80                                and     SignOnly8Bit    ; .
  49+ 9447 FD 6F                                ld      iyl,a           ; .
  50+ 9449 79                                   ld      a,c             ; make both values ABS
  51+ 944A E6 7F                                and     SignMask8Bit    ; .
  52+ 944C 4F                                   ld      c,a             ; .
  53+ 944D FD 7C                                ld      a,iyh           ; .
  54+ 944F E6 7F                                and     SignMask8Bit    ; .
  55+ 9451 CD 07 94                             call    Div24by24       ; do abs divide
  56+ 9454 FD B5                                or      iyl             ; bring in sign bit
  57+ 9456 FD 67                                ld      iyh,a           ; save a
  58+ 9458 79                                   ld      a,c             ; sort sign for c
  59+ 9459 FD B5                                or      iyl             ;
  60+ 945B 4F                                   ld      c,a             ;
  61+ 945C FD 7C                                ld      a,iyh           ; sort sign of a
  62+ 945E C9                                   ret
  63+ 945F
  64+ 945F              ; --------------------------------------------------------------
  65+ 945F              ;divdide by 16 using undocumented instrunctions
  66+ 945F              ;Input: BC = Dividend, DE = Divisor, HL = 0
  67+ 945F              ;Output: BC = Quotient, HL = Remainder
  68+ 945F 47           PROJ256mulAdivQ:        ld      b,a
  69+ 9460 0E 00                                ld      c,0
  70+ 9462 16 00                                ld      d,0
  71+ 9464 3A 9F 81                             ld      a,(varQ)
  72+ 9467 5F                                   ld      e,a
  73+ 9468 21 00 00     PROJDIV16UNDOC:         ld      hl,0
  74+ 946B 78                                   ld      a,b
  75+ 946C 06 10                                ld      b,16
  76+ 946E CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
  77+ 9470 17                                   rla             ; ...
  78+ 9471 ED 6A                                adc     hl,hl       ; ...
  79+ 9473 ED 52                                sbc     hl,de       ; ...
  80+ 9475 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
  81+ 9477 19                                   add     hl,de       ; ...
  82+ 9478 0D                                   dec     c       ; ...
  83+ 9479 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
  84+ 947B 79                                   ld      a,c
  85+ 947C 32 A0 81                             ld      (varR),a
  86+ 947F C9                                   ret
  87+ 9480
  88+ 9480
  89+ 9480
  90+ 9480
# file closed: ./Maths/DIVD3B2.asm
 608  9480                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ 9480              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ 9480 2A A0 81                             ld  hl,(varRS)
   3+ 9483 3A 9F 81                             ld  a,(varQ)
   4+ 9486 C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ 9488 11 00 00                             ld  de,0        ; de = XY
   6+ 948B 47                                   ld  b,a         ; b = Q
   7+ 948C                                      ShiftHLRight1
   7+ 948C CB 3C       >			   srl h
   7+ 948E CB 1D       >			   rr  l
   8+ 9490 CB 20                                sla b
   9+ 9492 30 03                                jr  nc,.LL126
  10+ 9494 EB           .LL125:                 ex de,hl
  11+ 9495 19                                   add hl,de
  12+ 9496 EB                                   ex  de,hl       ; de = de + rs
  13+ 9497              .LL126:                 ShiftHLRight1
  13+ 9497 CB 3C       >			   srl h
  13+ 9499 CB 1D       >			   rr  l
  14+ 949B CB 20                                sla b
  15+ 949D 38 F5                                jr      c,.LL125
  16+ 949F 20 F6                                jr      nz,.LL126
  17+ 94A1 EB                                   ex      de,hl   ; hl = result
  18+ 94A2 D1 C1                                pop     bc,,de
  19+ 94A4 C9                                   ret
  20+ 94A5
  21+ 94A5
  22+ 94A5              MacroDEEquQmulASigned:  MACRO
  23+ 94A5 ~                                    ld      d,a                         ; save a into d
  24+ 94A5 ~                                    ld      a,(varQ)
  25+ 94A5 ~                                    ld      e,a
  26+ 94A5 ~                                    xor     d                           ; a = a xor var Q
  27+ 94A5 ~                                    and     SignOnly8Bit
  28+ 94A5 ~                                    ld      b,a                         ; b = sign of a xor q
  29+ 94A5 ~                                    ld      a,d                         ; d = abs d (or a reg)
  30+ 94A5 ~                                    and     SignMask8Bit
  31+ 94A5 ~                                    ld      d,a
  32+ 94A5 ~                                    ld      a,e                         ; e = abs e (or varQ)
  33+ 94A5 ~                                    and     SignMask8Bit
  34+ 94A5 ~                                    ld      e,a
  35+ 94A5 ~                                    mul                                 ; de = a * Q
  36+ 94A5 ~                                    ld      a,d
  37+ 94A5 ~                                    or      b                           ; de = a * Q leading sign bit
  38+ 94A5 ~                                    ld      d,a
  39+ 94A5                                      ENDM
  40+ 94A5
  41+ 94A5
  42+ 94A5
  43+ 94A5                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  44+ 94A5              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  44+ 94A5 57          >                        ld      d,a                         ; save a into d
  44+ 94A6 3A 9F 81    >                        ld      a,(varQ)
  44+ 94A9 5F          >                        ld      e,a
  44+ 94AA AA          >                        xor     d                           ; a = a xor var Q
  44+ 94AB E6 80       >                        and     SignOnly8Bit
  44+ 94AD 47          >                        ld      b,a                         ; b = sign of a xor q
  44+ 94AE 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  44+ 94AF E6 7F       >                        and     SignMask8Bit
  44+ 94B1 57          >                        ld      d,a
  44+ 94B2 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  44+ 94B3 E6 7F       >                        and     SignMask8Bit
  44+ 94B5 5F          >                        ld      e,a
  44+ 94B6 ED 30       >                        mul                                 ; de = a * Q
  44+ 94B8 7A          >                        ld      a,d
  44+ 94B9 B0          >                        or      b                           ; de = a * Q leading sign bit
  44+ 94BA 57          >                        ld      d,a
  45+ 94BB 2A A0 81                             ld		hl,(varR)
  46+ 94BE CD E6 94                             call	madXAAddHLDESigned
  47+ 94C1 EB                                   ex      de,hl                       ; de = R.S + DE
  48+ 94C2                                      ClearCarryFlag
  48+ 94C2 B7          >                        or a
  49+ 94C3 DD 6B                                ld      ixl,e
  50+ 94C5 7A                                   ld      a,d
  51+ 94C6 C9                                   ret
  52+ 94C7
  53+ 94C7              madDEequQmulAaddRS:     MacroDEEquQmulASigned
  53+ 94C7 57          >                        ld      d,a                         ; save a into d
  53+ 94C8 3A 9F 81    >                        ld      a,(varQ)
  53+ 94CB 5F          >                        ld      e,a
  53+ 94CC AA          >                        xor     d                           ; a = a xor var Q
  53+ 94CD E6 80       >                        and     SignOnly8Bit
  53+ 94CF 47          >                        ld      b,a                         ; b = sign of a xor q
  53+ 94D0 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  53+ 94D1 E6 7F       >                        and     SignMask8Bit
  53+ 94D3 57          >                        ld      d,a
  53+ 94D4 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  53+ 94D5 E6 7F       >                        and     SignMask8Bit
  53+ 94D7 5F          >                        ld      e,a
  53+ 94D8 ED 30       >                        mul                                 ; de = a * Q
  53+ 94DA 7A          >                        ld      a,d
  53+ 94DB B0          >                        or      b                           ; de = a * Q leading sign bit
  53+ 94DC 57          >                        ld      d,a
  54+ 94DD 2A A0 81                             ld		hl,(varR)
  55+ 94E0 CD E6 94                             call	madXAAddHLDESigned
  56+ 94E3 EB                                   ex      de,hl                       ; de = R.S + DE
  57+ 94E4                                      ClearCarryFlag
  57+ 94E4 B7          >                        or a
  58+ 94E5 C9                                   ret
  59+ 94E6
  60+ 94E6 7C           madXAAddHLDESigned:     ld      a,h
  61+ 94E7 E6 80                                and     SignOnly8Bit
  62+ 94E9 47                                   ld      b,a                         ;save sign bit in b
  63+ 94EA AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  64+ 94EB                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  64+ 94EB FA 03 95    >                        jp		m, .ADDHLDEOppSGN
  65+ 94EE 78           .ADDHLDESameSigns:       ld      a,b
  66+ 94EF B2                                   or      d
  67+ 94F0                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  67+ 94F0 FA F5 94    >                        jp		m, .ADDHLDESameNeg
  68+ 94F3 19                                   add     hl,de
  69+ 94F4 C9                                   ret
  70+ 94F5 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  71+ 94F6 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  72+ 94F8 67                                   ld      h,a
  73+ 94F9 7A                                   ld      a,d
  74+ 94FA E6 7F                                and     SignMask8Bit
  75+ 94FC 57                                   ld      d,a
  76+ 94FD 19                                   add     hl,de
  77+ 94FE 3E 80                                ld      a,SignOnly8Bit
  78+ 9500 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  79+ 9501 67                                   ld      h,a
  80+ 9502 C9                                   ret
  81+ 9503 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  82+ 9504 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  83+ 9506 67                                   ld      h,a
  84+ 9507 7A                                   ld      a,d
  85+ 9508 E6 7F                                and     SignMask8Bit
  86+ 950A 57                                   ld      d,a
  87+ 950B B7                                   or      a
  88+ 950C ED 52                                sbc     hl,de
  89+ 950E 38 04                                jr      c,.ADDHLDEOppInvert
  90+ 9510 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  91+ 9511 B4                                   or      h
  92+ 9512 67                                   ld      h,a                         ; set the previou sign value
  93+ 9513 C9                                   ret
  94+ 9514              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  94+ 9514 AF          >                    xor a
  94+ 9515 95          >                    sub l
  94+ 9516 6F          >                    ld l,a
  94+ 9517 9F          >                    sbc a,a
  94+ 9518 94          >                    sub h
  94+ 9519 67          >                    ld h,a
  95+ 951A 78                                   ld      a,b
  96+ 951B EE 80                                xor     SignOnly8Bit                ; flip sign bit
  97+ 951D B4                                   or      h
  98+ 951E 67                                   ld      h,a                         ; recover sign
  99+ 951F C9                                   ret
 100+ 9520
 101+ 9520
 102+ 9520                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
 103+ 9520                  ;
 104+ 9520                  ; enter : hl = 16-bit multiplier   = x
 105+ 9520                  ;          e =  8-bit multiplicand = y
 106+ 9520                  ;
 107+ 9520                  ; exit  : ahl = 24-bit product
 108+ 9520                  ;         carry reset
 109+ 9520                  ;
 110+ 9520                  ; uses  : af, de, hl
 111+ 9520 54           AHLequHLmulE:           ld d,h                      ; xh
 112+ 9521 63                                   ld h,e                      ; yl
 113+ 9522 ED 30                                mul de                      ; xh*yl
 114+ 9524 EB                                   ex de,hl
 115+ 9525 ED 30                                mul de                      ; yl*xl, hl = xh*yl
 116+ 9527
 117+ 9527 7A                                   ld  a,d                     ; sum products
 118+ 9528 85                                   add a,l
 119+ 9529 57                                   ld  d,a
 120+ 952A EB                                   ex de,hl
 121+ 952B
 122+ 952B 7A                                   ld  a,d
 123+ 952C CE 00                                adc a,0
 124+ 952E C9                                   ret
 125+ 952F
 126+ 952F 54           HLE0quH0mulE:           ld      d,h                 ; .
 127+ 9530 63                                   ld      h,e                 ; .
 128+ 9531 ED 30                                mul     de                  ; de = xh * yl
 129+ 9533 EB                                   ex      de,hl
 130+ 9534 C9                                   ret
 131+ 9535
 132+ 9535                 ; multiplication of two 16-bit numbers into a 32-bit product
 133+ 9535                 ;
 134+ 9535                 ; enter : de = 16-bit multiplicand = y
 135+ 9535                 ;         hl = 16-bit multiplicand = x
 136+ 9535                 ;
 137+ 9535                 ; exit  : dehl = 32-bit product
 138+ 9535                 ;         carry reset
 139+ 9535                 ;
 140+ 9535                 ; uses  : af, bc, de, hl
 141+ 9535
 142+ 9535
 143+ 9535
 144+ 9535 45           DEHLequDEmulHL:         ld b,l                      ; x0
 145+ 9536 4B                                   ld c,e                      ; y0
 146+ 9537 5D                                   ld e,l                      ; x0
 147+ 9538 6A                                   ld l,d
 148+ 9539 E5                                   push hl                     ; x1 y1
 149+ 953A 69                                   ld l,c                      ; y0
 150+ 953B              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 151+ 953B ED 30                                mul de                      ; y1*x0
 152+ 953D EB                                   ex de,hl
 153+ 953E ED 30                                mul de                      ; x1*y0
 154+ 9540
 155+ 9540 AF                                   xor a                       ; zero A
 156+ 9541 19                                   add hl,de                   ; sum cross products p2 p1
 157+ 9542 8F                                   adc a,a                     ; capture carry p3
 158+ 9543
 159+ 9543 59                                   ld e,c                      ; x0
 160+ 9544 50                                   ld d,b                      ; y0
 161+ 9545 ED 30                                mul de                      ; y0*x0
 162+ 9547
 163+ 9547 47                                   ld b,a                      ; carry from cross products
 164+ 9548 4C                                   ld c,h                      ; LSB of MSW from cross products
 165+ 9549
 166+ 9549 7A                                   ld a,d
 167+ 954A 85                                   add a,l
 168+ 954B 67                                   ld h,a
 169+ 954C 6B                                   ld l,e                      ; LSW in HL p1 p0
 170+ 954D
 171+ 954D D1                                   pop de
 172+ 954E ED 30                                mul de                      ; x1*y1
 173+ 9550
 174+ 9550 EB                                   ex de,hl
 175+ 9551 ED 4A                                adc hl,bc
 176+ 9553 EB                                   ex de,hl                    ; de = final MSW
 177+ 9554
 178+ 9554 C9                                   ret
 179+ 9555
 180+ 9555              ; multiplication of two 16-bit numbers into a 16-bit product
 181+ 9555              ; enter : de = 16-bit multiplicand
 182+ 9555              ;         hl = 16-bit multiplicand
 183+ 9555              ; exit  : hl = 16-bit product
 184+ 9555              ;         carry reset
 185+ 9555              ; maths is
 186+ 9555              ;        hl = y , de= x
 187+ 9555              ;        hl = xhi,ylo + (yhigh * xlow)
 188+ 9555              ;        hl = yhih & xlo + x
 189+ 9555              ;
 190+ 9555              ;
 191+ 9555              ; uses  : af, bc, de, hl
 192+ 9555 C5           mulDEbyHL:              push    bc
 193+ 9556 7A                                   ld a,d                      ; a = xh
 194+ 9557 54                                   ld d,h                      ; d = yh
 195+ 9558 67                                   ld h,a                      ; h = xh
 196+ 9559 4B                                   ld c,e                      ; c = xl
 197+ 955A 45                                   ld b,l                      ; b = yl
 198+ 955B ED 30                                mul                         ; yh * yl
 199+ 955D EB                                   ex de,hl
 200+ 955E ED 30                                mul                         ; xh * yl
 201+ 9560 19                                   add hl,de                   ; add cross products
 202+ 9561 59                                   ld e,c
 203+ 9562 50                                   ld d,b
 204+ 9563 ED 30                                mul                         ; yl * xl
 205+ 9565 7D                                   ld a,l                      ; cross products lsb
 206+ 9566 82                                   add a,d                     ; add to msb final
 207+ 9567 67                                   ld h,a
 208+ 9568 6B                                   ld l,e                      ; hl = final
 209+ 9569                                      ; 83 cycles, 19 bytes
 210+ 9569 AF                                   xor a                       ; reset carry
 211+ 956A C1                                   pop     bc
 212+ 956B C9                                   ret
 213+ 956C
 214+ 956C
 215+ 956C              ; CHL = multiplicand D = multiplier
 216+ 956C              ; DCHL = CHL * D
 217+ 956C 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
 218+ 956D AC                                   xor     h                   ; xor with h to get resultant sign
 219+ 956E E6 80                                and     SignOnly8Bit        ; .
 220+ 9570 FD 67                                ld      iyh,a               ; iyh = copy of sign
 221+ 9572 79                                   ld      a,c                 ; now CHL = ABS (CHL)
 222+ 9573 E6 7F                                and     SignMask8Bit        ; .
 223+ 9575 4F                                   ld      c,a                 ; .
 224+ 9576 7A                                   ld      a,d                 ; d = ABS D
 225+ 9577 E6 7F                                and     SignMask8Bit        ; .
 226+ 9579              ; At this point CHL = ABS (HLE), A = ABS(D)
 227+ 9579 57           .mul1:                  ld      d,a                 ; first do D * L
 228+ 957A 5D                                   ld      e,l                 ; .
 229+ 957B ED 30                                mul     de                  ; DE = L * D
 230+ 957D 08                                   ex      af,af'              ; save multiplier
 231+ 957E 6B                                   ld      l,e                 ; L = p0
 232+ 957F 7A                                   ld      a,d                 ; carry byte
 233+ 9580 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
 234+ 9581 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
 235+ 9582 57                                   ld      d,a                 ; and multiplier
 236+ 9583 ED 30                                mul     de                  ; now its D & L
 237+ 9585 08                                   ex      af,af'              ; get back carry byte with flags
 238+ 9586 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
 239+ 9587 67                                   ld      h,a                 ; h = P1
 240+ 9588 7A                                   ld      a,d                 ; a = carry byte
 241+ 9589 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
 242+ 958A 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
 243+ 958B 57                                   ld      d,a                 ;
 244+ 958C ED 30                                mul     de                  ;
 245+ 958E 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
 246+ 958F 8B                                   adc     a,e                 ;
 247+ 9590 FD B4                                or      iyh                 ; recover saved resultant sign
 248+ 9592 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
 249+ 9593 C9                                   ret
 250+ 9594
 251+ 9594              ;  CHL = 53456 D = 1E
 252+ 9594              ;  56 * 1E = A14 L = 14 carry = 0A
 253+ 9594              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
 254+ 9594              ;  5  * 1E = 096 C = 96 + 6 = 9C
 255+ 9594              ;  CHL = 9C2214
 256+ 9594              ;mult3
 257+ 9594              ; DELC = HLE * D, uses HL, DE, C , A , IYH
 258+ 9594              ; HLE = multiplicand D = multiplier
 259+ 9594              ; tested by mathstestsun.asm all passed
 260+ 9594              ; Algorithm
 261+ 9594              ; AC =  E * D   (save carry)         H    L    E
 262+ 9594              ; DE =  L * D                                  D
 263+ 9594              ;  L =  A + E + carry                         E*D (lo)
 264+ 9594              ; DE =  H * D                             L*D+ ^ (hi)
 265+ 9594              ;  E =  A + E + carry                H*D (lo) + carry
 266+ 9594              ;
 267+ 9594              ;
 268+ 9594 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 269+ 9595 AC                                   xor     h                   ; xor with h to get resultant sign
 270+ 9596 E6 80                                and     SignOnly8Bit        ; .
 271+ 9598 FD 67                                ld      iyh,a               ; iyh = copy of sign
 272+ 959A 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
 273+ 959B E6 7F                                and     SignMask8Bit        ; .
 274+ 959D 67                                   ld      h,a                 ; .
 275+ 959E 7A                                   ld      a,d                 ; d = ABS D
 276+ 959F E6 7F                                and     SignMask8Bit        ; .
 277+ 95A1 57                                   ld      d,a                 ; .
 278+ 95A2 B7           .testEitherSideZero:    or      a
 279+ 95A3 28 24                                jr      z,.ResultZero
 280+ 95A5 7C                                   ld      a,h
 281+ 95A6 B5                                   or      l
 282+ 95A7 B3                                   or      e
 283+ 95A8 28 1F                                jr      z,.ResultZero
 284+ 95AA              ; At this point HLE = ABS (HLE), A = ABS(D)
 285+ 95AA 42                                   ld      b,d                 ; save Quotient
 286+ 95AB ED 30        .mul1:                  mul     de                  ; C = E * D
 287+ 95AD 4B                                   ld      c,e                 ; C = p0
 288+ 95AE FD 6A                                ld      iyl,d               ; save carry (p1)
 289+ 95B0 5D           .mul2:                  ld      e,l                 ; L = L * D
 290+ 95B1 50                                   ld      d,b                 ; .
 291+ 95B2 ED 30                                mul     de                  ; .
 292+ 95B4 FD 7D                                ld      a,iyl               ; get back p1
 293+ 95B6 83           .carrybyte1:            add     a,e                 ; L = L + E
 294+ 95B7 6F                                   ld      l,a                 ; .
 295+ 95B8 FD 6A                                ld      iyl,d               ; save new carry byte
 296+ 95BA 5C           .mul3:                  ld      e,h                 ; E = H * D
 297+ 95BB 50                                   ld      d,b                 ; .
 298+ 95BC ED 30                                mul     de                  ; .
 299+ 95BE FD 7D                                ld      a,iyl
 300+ 95C0 8B                                   adc     a,e                 ; .
 301+ 95C1 5F                                   ld      e,a                 ; .
 302+ 95C2 7A           .ItsNotZero:            ld      a,d                 ;
 303+ 95C3 CE 00                                adc     a,0                 ; final carry bit
 304+ 95C5 FD B4                                or      iyh                 ; bring back sign
 305+ 95C7 57                                   ld      d,a                 ; s = sign
 306+ 95C8 C9                                   ret
 307+ 95C9 11 00 00     .ResultZero:            ld      de,0
 308+ 95CC                                      ZeroA
 308+ 95CC AF          >                        xor a
 309+ 95CD 4F                                   ld      c,a
 310+ 95CE 6F                                   ld      l,a
 311+ 95CF C9                                   ret
 312+ 95D0
 313+ 95D0              ;;;
 314+ 95D0              ;;;
 315+ 95D0              ;;;mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 316+ 95D0              ;;;                        xor     h                   ; xor with h to get resultant sign
 317+ 95D0              ;;;                        and     SignOnly8Bit        ; .
 318+ 95D0              ;;;                        ld      iyh,a               ; iyh = copy of sign
 319+ 95D0              ;;;                        ld      a,h                 ; now HLE = ABS (HLE)
 320+ 95D0              ;;;                        and     SignMask8Bit        ; .
 321+ 95D0              ;;;                        ld      h,a                 ; .
 322+ 95D0              ;;;                        ld      a,d                 ; d = ABS D
 323+ 95D0              ;;;                        and     SignMask8Bit        ; .
 324+ 95D0              ;;;                        ld      d,a                 ; .
 325+ 95D0              ;;;.testEitherSideZero:    or      a
 326+ 95D0              ;;;                        jr      z,.ResultZero
 327+ 95D0              ;;;                        ld      a,h
 328+ 95D0              ;;;                        or      l
 329+ 95D0              ;;;                        or      e
 330+ 95D0              ;;;                        jr      z,.ResultZero
 331+ 95D0              ;;;; At this point HLE = ABS (HLE), A = ABS(D)
 332+ 95D0              ;;;.mul1:                  mul     de                  ; C = E * D
 333+ 95D0              ;;;                        ex      af,af'              ; save mulitplier
 334+ 95D0              ;;;                        ld      c,e                 ; C = p0
 335+ 95D0              ;;;                        ld      a,d                 ; save carry (p1)
 336+ 95D0              ;;;                        ex      af,af'              ; .
 337+ 95D0              ;;;.mul2:                  ld      e,l                 ; L = L * D
 338+ 95D0              ;;;                        ld      d,a                 ; .
 339+ 95D0              ;;;                        mul     de                  ; .
 340+ 95D0              ;;;                        ex      af,af'              ; .
 341+ 95D0              ;;;.carrybyte1:            add     a,e                 ; L = L + E
 342+ 95D0              ;;;                        ld      l,a                 ; .
 343+ 95D0              ;;;                        ld      a,d
 344+ 95D0              ;;;                        ex      af,af'              ; save new carry byte
 345+ 95D0              ;;;.mul3:                  ld      e,h                 ; E = H * D
 346+ 95D0              ;;;                        ld      d,a                 ; .
 347+ 95D0              ;;;                        mul     de                  ; .
 348+ 95D0              ;;;                        ex      af,af'              ; .
 349+ 95D0              ;;;                        adc     a,e                 ; .
 350+ 95D0              ;;;                        ld      e,a                 ; .
 351+ 95D0              ;;;.ItsNotZero:            ld      a,d                 ;
 352+ 95D0              ;;;                        adc     a,0                 ; final carry bit
 353+ 95D0              ;;;                        or      iyh                 ; bring back sign
 354+ 95D0              ;;;                        ld      d,a                 ; s = sign
 355+ 95D0              ;;;                        ret
 356+ 95D0              ;;;.ResultZero:            ld      de,0
 357+ 95D0              ;;;                        ZeroA
 358+ 95D0              ;;;                        ld      c,a
 359+ 95D0              ;;;                        ld      l,a
 360+ 95D0              ;;;                        ret
 361+ 95D0
 362+ 95D0              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 363+ 95D0              ; enter : de = 16-bit multiplicand
 364+ 95D0              ;         hl = 16-bit multiplicand
 365+ 95D0              ; exit  : hl = 16-bit product
 366+ 95D0              ;         carry reset
 367+ 95D0              ;
 368+ 95D0              ; uses  : af, bc, de, hl
 369+ 95D0 00           mulDEbyHLSignByte       DB      0
 370+ 95D1 AF           mulDEbyHLSgnTo2c:       xor     a
 371+ 95D2 32 D0 95                             ld      (mulDEbyHLSignByte),a
 372+ 95D5 7A           .SignDE:                ld      a,d
 373+ 95D6 ED 27 80                             test    $80
 374+ 95D9 28 08                                jr      z,.SignHL
 375+ 95DB E6 7F        .NegativeDE:            and     $7F
 376+ 95DD 57                                   ld      d,a
 377+ 95DE 3E 80                                ld      a,$80
 378+ 95E0 32 D0 95                             ld      (mulDEbyHLSignByte),a
 379+ 95E3 7C           .SignHL:                ld      a,h
 380+ 95E4 ED 27 80                             test    $80
 381+ 95E7 28 0B                                jr      z,.AbsoluteMultiply
 382+ 95E9 E6 7F        .NegativeHL:            and     $7F
 383+ 95EB 67                                   ld      h,a
 384+ 95EC 3A D0 95                             ld      a,(mulDEbyHLSignByte)
 385+ 95EF EE 80                                xor     $80
 386+ 95F1 32 D0 95                             ld      (mulDEbyHLSignByte),a
 387+ 95F4 CD 55 95     .AbsoluteMultiply:      call    mulDEbyHL
 388+ 95F7 3A D0 95     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 389+ 95FA ED 27 80                             test    $80
 390+ 95FD C8                                   ret     z
 391+ 95FE AF           .Negateghl: 			xor 	a
 392+ 95FF 95                                   sub 	l
 393+ 9600 6F                                   ld 		l,a
 394+ 9601 9F                                   sbc 	a,a
 395+ 9602 94                                   sub 	h
 396+ 9603 67                                   ld 		h,a
 397+ 9604 C9                                   ret
 398+ 9605
 399+ 9605 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 400+ 9606 32 D0 95                             ld      (mulDEbyHLSignByte),a
 401+ 9609 7A           .SignDE:                ld      a,d
 402+ 960A ED 27 80                             test    $80
 403+ 960D 28 08                                jr      z,.AbsoluteMultiply
 404+ 960F E6 7F        .NegativeDE:            and     $7F
 405+ 9611 57                                   ld      d,a
 406+ 9612 3E 80                                ld      a,$80
 407+ 9614 32 D0 95                             ld      (mulDEbyHLSignByte),a
 408+ 9617 CD 55 95     .AbsoluteMultiply:      call    mulDEbyHL
 409+ 961A 3A D0 95     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 410+ 961D ED 27 80                             test    $80
 411+ 9620 C8                                   ret     z
 412+ 9621 AF           .Negateghl:             xor 	a
 413+ 9622 95                                   sub 	l
 414+ 9623 6F                                   ld 		l,a
 415+ 9624 9F                                   sbc 	a,a
 416+ 9625 94                                   sub 	h
 417+ 9626 67                                   ld 		h,a
 418+ 9627 C9                                   ret
 419+ 9628
 420+ 9628
# file closed: ./Maths/multiply.asm
 609  9628                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ 9628              ; "ASM_SQUA : TESTGOOD"
   2+ 9628              ; "AP = A^2 A = low,P = hi"
   3+ 9628
   4+ 9628              inline_squde: MACRO
   5+ 9628 ~            			ld	e,a
   6+ 9628 ~            			ld  d,a
   7+ 9628 ~            			mul
   8+ 9628              			ENDM
   9+ 9628
  10+ 9628              inline_squa: MACRO
  11+ 9628 ~            			ld	e,a
  12+ 9628 ~            			ld  d,a
  13+ 9628 ~            			mul
  14+ 9628 ~            			ld	a,e
  15+ 9628              			ENDM
  16+ 9628
# file closed: ./Maths/asm_square.asm
 610  9628                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ 9628              ; "ASM SQRT : TESTGOOD"
   2+ 9628              ; "16-bit integer square root"
   3+ 9628              ; "call with de = number to square root"
   4+ 9628              ; "returns   hl = square root"
   5+ 9628              ; "corrupts  bc, de"
   6+ 9628              asm_sqrt:
   7+ 9628 01 00 80     	ld bc,$8000
   8+ 962B 61           	ld h,c
   9+ 962C 69           	ld l,c
  10+ 962D              .sqrloop:
  11+ 962D CB 38        	srl b
  12+ 962F CB 19        	rr c
  13+ 9631 09           	add hl,bc
  14+ 9632 EB           	ex de,hl
  15+ 9633 ED 52        	sbc hl,de
  16+ 9635 38 04        	jr c,.sqrbit
  17+ 9637 EB           	ex de,hl
  18+ 9638 09           	add hl,bc
  19+ 9639 18 05        	jr .sqrfi
  20+ 963B              .sqrbit:
  21+ 963B 19           	add hl,de
  22+ 963C EB           	ex de,hl
  23+ 963D B7           	or a
  24+ 963E ED 42        	sbc hl,bc
  25+ 9640              .sqrfi:
  26+ 9640 CB 3C        	srl h
  27+ 9642 CB 1D        	rr l
  28+ 9644 CB 38        	srl b
  29+ 9646 CB 19        	rr c
  30+ 9648 30 E3        	jr nc,.sqrloop
  31+ 964A C9           	ret
  32+ 964B
  33+ 964B
  34+ 964B              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ 964B 3A 9F 81     	ld		a,(varQ)
  36+ 964E 5F           	ld		e,a
  37+ 964F 3A A0 81     	ld		a,(varR)
  38+ 9652 57           	ld		d,a
  39+ 9653 CD 28 96     	call	asm_sqrt
  40+ 9656 7D               ld      a,l
  41+ 9657 32 9F 81     	ld		(varQ),a
  42+ 965A C9           	ret
  43+ 965B
# file closed: ./Maths/asm_sqrt.asm
 611  965B                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ 965B
   2+ 965B
   3+ 965B
   4+ 965B              ;
   5+ 965B              ;   Set flags E to 11111110
   6+ 965B              ;   Loop:   A << 2
   7+ 965B              ;           if carry was 0
   8+ 965B              ;               if a >= D
   9+ 965B              ;                   A = A - D
  10+ 965B              ;                   clear carry (probably irrelevant really)
  11+ 965B              ;           else
  12+ 965B
  13+ 965B              ;               sla flags << bringing in carry of 1
  14+ 965B              ;               if bit 7 of flag was set then loop
  15+ 965B              ;                                        elase a = e and exit
  16+ 965B              ;
  17+ 965B              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop BC/DE ==> BC, remainder in HL
  18+ 965B              ;
  19+ 965B              ;INPUTS: hl = dividend dbc = divisor
  20+ 965B              ;OUTPUTS: hl/de -> AHL = quotient CDE = remainder, Carryflag set if divide by 0
  21+ 965B
  22+ 965B 57           DVIDT:                  ld      d,a                     ; D = var P+1
  23+ 965C 3A 9F 81                             ld      a,(varQ)
  24+ 965F 4F                                   ld      c,a                     ; C = var Q
  25+ 9660 3A A0 80                             ld      a,(varP)
  26+ 9663 5F                                   ld      e,a                     ; E = var P
  27+ 9664                                      ; Need fast exists on ABS values
  28+ 9664 7A           BAequDEdivC:            ld      a,d                     ; Fast exit is value is 0
  29+ 9665 B3                                   or      e                       ; .
  30+ 9666 28 2A                                jr      z,.ResultIsZero         ; .
  31+ 9668 79                                   ld      a,c                     ; Fast exit is divide by 0
  32+ 9669 A7                                   and     a                       ;
  33+ 966A 28 29                                jr      z,.ResultIsFFFF         ;
  34+ 966C 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
  35+ 966D A9                                   xor     c                       ;
  36+ 966E E6 80                                and     $80
  37+ 9670 6F                                   ld      l,a                     ; l = var T
  38+ 9671 3E 00                                ld      a,0
  39+ 9673 06 10                                ld      b,16
  40+ 9675                                      ShiftDELeft1
  40+ 9675 CB 23       >			   sla e
  40+ 9677 CB 12       >			   rl  d
  41+ 9679 CB 21                                sla     c                       ; c = abs c
  42+ 967B CB 39                                srl     c
  43+ 967D CB 17        .DivideLoop:            rl      a
  44+ 967F                                      JumpIfALTNusng c, .SkipSubtract
  44+ 967F B9          >                        cp      c
  44+ 9680 DA 86 96    >                        jp		c, .SkipSubtract
  45+ 9683                                      ClearCarryFlag
  45+ 9683 B7          >                        or a
  46+ 9684 99                                   sbc     c
  47+ 9685                                      ClearCarryFlag
  47+ 9685 B7          >                        or a
  48+ 9686 3F           .SkipSubtract:          ccf
  49+ 9687 CB 13                                rl      e
  50+ 9689 CB 12                                rl      d
  51+ 968B 05                                   dec     b
  52+ 968C 20 EF                                jr      nz,.DivideLoop
  53+ 968E 7B                                   ld      a,e
  54+ 968F B5                                   or      l
  55+ 9690 42                                   ld      b,d
  56+ 9691 C9                                   ret
  57+ 9692              .ResultIsZero:          ZeroA
  57+ 9692 AF          >                        xor a
  58+ 9693 47                                   ld      b,a
  59+ 9694 C9                                   ret
  60+ 9695 3E FF        .ResultIsFFFF:          ld      a,$FF
  61+ 9697 47                                   ld      b,a
  62+ 9698 C9                                   ret
  63+ 9699
  64+ 9699 57           DIV96:                  ld      d,a                     ; D = var P+1
  65+ 969A 3A 9F 81                             ld      a,(varQ)
  66+ 969D 0E 60                                ld      c,96                    ; C = var Q
  67+ 969F 3A A0 80                             ld      a,(varP)
  68+ 96A2 5F                                   ld      e,a                     ; E = var P
  69+ 96A3                                      ; Need fast exists on ABS values
  70+ 96A3 7A           BAequDEdiv96            ld      a,d                     ; Fast exit is value is 0
  71+ 96A4 B3                                   or      e                       ; .
  72+ 96A5 28 26                                jr      z,.ResultIsZero         ; .
  73+ 96A7 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
  74+ 96A8 A9                                   xor     c                       ;
  75+ 96A9 E6 80                                and     $80
  76+ 96AB 6F                                   ld      l,a                     ; l = var T
  77+ 96AC 3E 00                                ld      a,0
  78+ 96AE 06 10                                ld      b,16
  79+ 96B0                                      ShiftDELeft1
  79+ 96B0 CB 23       >			   sla e
  79+ 96B2 CB 12       >			   rl  d
  80+ 96B4 CB 21                                sla     c                       ; c = abs c
  81+ 96B6 CB 39                                srl     c
  82+ 96B8 CB 17        .DivideLoop:            rl      a
  83+ 96BA                                      JumpIfALTNusng c, .SkipSubtract
  83+ 96BA B9          >                        cp      c
  83+ 96BB DA C1 96    >                        jp		c, .SkipSubtract
  84+ 96BE                                      ClearCarryFlag
  84+ 96BE B7          >                        or a
  85+ 96BF 99                                   sbc     c
  86+ 96C0                                      ClearCarryFlag
  86+ 96C0 B7          >                        or a
  87+ 96C1 3F           .SkipSubtract:          ccf
  88+ 96C2 CB 13                                rl      e
  89+ 96C4 CB 12                                rl      d
  90+ 96C6 05                                   dec     b
  91+ 96C7 20 EF                                jr      nz,.DivideLoop
  92+ 96C9 7B                                   ld      a,e
  93+ 96CA B5                                   or      l
  94+ 96CB 42                                   ld      b,d
  95+ 96CC C9                                   ret
  96+ 96CD              .ResultIsZero:          ZeroA
  96+ 96CD AF          >                        xor a
  97+ 96CE 47                                   ld      b,a
  98+ 96CF C9                                   ret
  99+ 96D0
 100+ 96D0 14           Div16by24usgn:          inc     d                           ; can we fast retu
 101+ 96D1 15                                   dec     d
 102+ 96D2 20 13                                jr      nz,.ResultZero
 103+ 96D4 50 59                                ld      de,bc                       ; so prep for bc/de
 104+ 96D6 44 4D                                ld      bc,hl
 105+ 96D8 7A           .div16by16usng:         ld      a,d
 106+ 96D9 B3                                   or      e
 107+ 96DA 28 10                                jr      z,.DivideByZero
 108+ 96DC 14                                   inc     d
 109+ 96DD 15                                   dec     d
 110+ 96DE CD 63 98                             call    BC_Div_DE
 111+ 96E1                                      ZeroA
 111+ 96E1 AF          >                        xor a
 112+ 96E2 EB                                   ex      de,hl                       ; de = remainder (need to fix c after hl = nothing of worth)
 113+ 96E3 60 69                                ld      hl,bc                       ; hl = result (a is zero from above)
 114+ 96E5 4F                                   ld      c,a                         ; now fix c
 115+ 96E6 C9                                   ret
 116+ 96E7 AF           .ResultZero:            xor     a                           ; set AHL to 0 as d was 0 so h is zero
 117+ 96E8 4F                                   ld      c,a                         ; c = 0
 118+ 96E9 67                                   ld      h,a
 119+ 96EA 6F                                   ld      l,a
 120+ 96EB C9                                   ret
 121+ 96EC 3E FF        .DivideByZero:          ld      a,$FF
 122+ 96EE 67                                   ld      h,a
 123+ 96EF 6F                                   ld      l,a
 124+ 96F0                                      SetCarryFlag
 124+ 96F0 37          >                        scf
 125+ 96F1 C9                                   ret
 126+ 96F2
 127+ 96F2              ;DIVD4 P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
 128+ 96F2 06 08        HLEquAmul256DivD:       ld		b,8							; counter
 129+ 96F4 CB 27                                sla		a							;
 130+ 96F6 67                                   ld		h,a							; r a * 2 we will build result in hl
 131+ 96F7 CB 17        .DivideLoop:            rl		a							; a = a * 2
 132+ 96F9 38 03                                jr      c,.StraightToSubtraction    ; jump on carry to subtraction
 133+ 96FB BA                                   cp      d                           ; what was var Q
 134+ 96FC 38 03                                jr		c,.SkipSubtraction	        ; if a < d skip subtraction, note this will come to skip subtraction with carry the wrong way round
 135+ 96FE              .StraightToSubtraction: ClearCarryFlag                      ; in 6502 the borrow flag is inverted carry, z80 just uses carry so we need to clear it
 135+ 96FE B7          >                        or a
 136+ 96FF 9A                                   sbc     a,d                         ; a = a - q
 137+ 9700                                      ClearCarryFlag                      ; set carry so it gets shifted into bit 0 of b. we do this as we have to flip carry due to jr c from earlier cp d
 137+ 9700 B7          >                        or a
 138+ 9701 3F           .SkipSubtraction:       ccf                                 ; we need to do this as 6502 does opposite on carry, i.e. if we jumped direct here then carry would be set in z80
 139+ 9702 CB 14                                rl      h                           ; roll d left bringing in carry if there was an sbc performed
 140+ 9704 10 F1                                djnz    .DivideLoop                 ; 8 cycles
 141+ 9706 BA           .CalculateRemainder:    cp      d                           ; calulate 256 * a / d if q >= q then answer will not fit in one byte d is still set, a holds remainder to be subtracted
 142+ 9707 30 19                                jr      nc, .RemainderTooBig
 143+ 9709                                      ClearCarryFlag                      ; remove carry as the previous cp will have set it and mess up the sla in the remainder loop
 143+ 9709 B7          >                        or a
 144+ 970A 06 FE        .InitRemainderLoop:     ld      b,%11111110                 ; loop for bits 1 to 7
 145+ 970C 68                                   ld      l,b                         ; and set l to capture result bits (R)
 146+ 970D CB 27        .RemainderLoop:         sla     a                           ; shift a left
 147+ 970F 38 0A                                jr      c, .RemainderSubtraction    ; if there was a carry go to subtraction
 148+ 9711 BA                                   cp      d                           ; if a < d then skip subtraction
 149+ 9712 38 01                                jr      c,.RemainderSkipSubtract    ; .
 150+ 9714 9A                                   sbc     d                           ; a > q so a = a - q, carry will be clear here
 151+ 9715 3F           .RemainderSkipSubtract: ccf                                 ; as the jr used z80 we need to flip the carry to behave like 6502
 152+ 9716 CB 15                                rl      l                           ; rotate counter to the left
 153+ 9718 38 F3                                jr      c, .RemainderLoop           ; if there was a bit pushed to carry then loop
 154+ 971A C9                                   ret
 155+ 971B 9A           .RemainderSubtraction:  sbc     d                           ; as the carry came from an sla we want to retain it
 156+ 971C                                      SetCarryFlag                        ; roll in a carry bit to result
 156+ 971C 37          >                        scf
 157+ 971D CB 15                                rl      l                           ;
 158+ 971F 38 EC                                jr      c, .RemainderLoop           ; and loop if there was a carry bit that came out
 159+ 9721 C9                                   ret
 160+ 9722 2E FF        .RemainderTooBig:       ld      l,$FF                       ; now hl = result
 161+ 9724 C9                                   ret
 162+ 9725
 163+ 9725 BA           AEquAmul256DivD:        cp      d
 164+ 9726 28 1D                                jr      z,.BothSame
 165+ 9728 30 1E                                jr      nc,.DgtA
 166+ 972A 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
 167+ 972C CB 27        .DivideLoop:            sla     a
 168+ 972E 38 0D                                jr      c,.LL29
 169+ 9730                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
 169+ 9730 BA          >                        cp      d
 169+ 9731 DA 36 97    >                        jp		c, .SkipSub
 170+ 9734 92                                   sub     d
 171+ 9735                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
 171+ 9735 B7          >                        or a
 172+ 9736              .SkipSub:               FlipCarryFlag                       ; if we did the subtract the carry will be clear so we need to invert to roll in.
 172+ 9736 3F          >                        ccf
 173+ 9737 CB 13                                rl      e
 174+ 9739 38 F1                                jr      c,.DivideLoop
 175+ 973B 7B                                   ld      a,e
 176+ 973C C9                                   ret
 177+ 973D 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
 178+ 973E                                      SetCarryFlag                        ; Set the C flag to rotate into the result in R
 178+ 973E 37          >                        scf
 179+ 973F CB 13                                rl      e                           ; rotate counter e left
 180+ 9741 38 E9                                jr      c,.DivideLoop               ; if a bit was spat off teh end then loop
 181+ 9743 7B                                   ld      a,e                         ; stick result in a
 182+ 9744 C9                                   ret
 183+ 9745 3E 01        .BothSame:              ld  a,1
 184+ 9747 C9                                   ret
 185+ 9748 3E FF        .DgtA:                  ld  a,255                           ; Fail with FF as result
 186+ 974A C9                                   ret
 187+ 974B
 188+ 974B
 189+ 974B              ; Divide 8-bit values
 190+ 974B              ; In: Divide E by divider C
 191+ 974B              ; Out: A = result, B = rest
 192+ 974B              ;
 193+ 974B              ;;;Div8:
 194+ 974B              ;;;    xor a
 195+ 974B              ;;;    ld b,8
 196+ 974B              ;;;Div8_Loop:
 197+ 974B              ;;;    rl e
 198+ 974B              ;;;    rla
 199+ 974B              ;;;    sub c
 200+ 974B              ;;;    jr nc,Div8_NoAdd
 201+ 974B              ;;;    add a,c
 202+ 974B              ;;;Div8_NoAdd:
 203+ 974B              ;;;    djnz Div8_Loop
 204+ 974B              ;;;    ld b,a0
 205+ 974B              ;;;    ld a,e
 206+ 974B              ;;;    rla
 207+ 974B              ;;;    cpl
 208+ 974B              ;;;    ret
 209+ 974B
 210+ 974B              ;;Inputs: DE is the numerator, BC is the divisor
 211+ 974B              ;;Outputs: DE is the result
 212+ 974B              ;;         A is a copy of E
 213+ 974B              ;;         HL is the remainder
 214+ 974B              ;;         BC is not changed
 215+ 974B              ;; so DE = DE /BC
 216+ 974B              ;140 bytes
 217+ 974B              ;145cc
 218+ 974B
 219+ 974B              MacroDEDivBC:       MACRO
 220+ 974B ~                                rla
 221+ 974B ~                                adc     hl,hl
 222+ 974B ~                                sbc     hl,bc
 223+ 974B ~                                jr      nc,$+3
 224+ 974B ~                                add     hl,bc
 225+ 974B                                  ENDM
 226+ 974B
 227+ 974B              DEequDEDivBC:
 228+ 974B AF               xor a
 229+ 974C ED 62            sbc hl,hl
 230+ 974E 7A               ld a,d
 231+ 974F                  MacroDEDivBC
 231+ 974F 17          >                    rla
 231+ 9750 ED 6A       >                    adc     hl,hl
 231+ 9752 ED 42       >                    sbc     hl,bc
 231+ 9754 30 01       >                    jr      nc,$+3
 231+ 9756 09          >                    add     hl,bc
 232+ 9757                  MacroDEDivBC
 232+ 9757 17          >                    rla
 232+ 9758 ED 6A       >                    adc     hl,hl
 232+ 975A ED 42       >                    sbc     hl,bc
 232+ 975C 30 01       >                    jr      nc,$+3
 232+ 975E 09          >                    add     hl,bc
 233+ 975F                  MacroDEDivBC
 233+ 975F 17          >                    rla
 233+ 9760 ED 6A       >                    adc     hl,hl
 233+ 9762 ED 42       >                    sbc     hl,bc
 233+ 9764 30 01       >                    jr      nc,$+3
 233+ 9766 09          >                    add     hl,bc
 234+ 9767                  MacroDEDivBC
 234+ 9767 17          >                    rla
 234+ 9768 ED 6A       >                    adc     hl,hl
 234+ 976A ED 42       >                    sbc     hl,bc
 234+ 976C 30 01       >                    jr      nc,$+3
 234+ 976E 09          >                    add     hl,bc
 235+ 976F                  MacroDEDivBC
 235+ 976F 17          >                    rla
 235+ 9770 ED 6A       >                    adc     hl,hl
 235+ 9772 ED 42       >                    sbc     hl,bc
 235+ 9774 30 01       >                    jr      nc,$+3
 235+ 9776 09          >                    add     hl,bc
 236+ 9777                  MacroDEDivBC
 236+ 9777 17          >                    rla
 236+ 9778 ED 6A       >                    adc     hl,hl
 236+ 977A ED 42       >                    sbc     hl,bc
 236+ 977C 30 01       >                    jr      nc,$+3
 236+ 977E 09          >                    add     hl,bc
 237+ 977F                  MacroDEDivBC
 237+ 977F 17          >                    rla
 237+ 9780 ED 6A       >                    adc     hl,hl
 237+ 9782 ED 42       >                    sbc     hl,bc
 237+ 9784 30 01       >                    jr      nc,$+3
 237+ 9786 09          >                    add     hl,bc
 238+ 9787                  MacroDEDivBC
 238+ 9787 17          >                    rla
 238+ 9788 ED 6A       >                    adc     hl,hl
 238+ 978A ED 42       >                    sbc     hl,bc
 238+ 978C 30 01       >                    jr      nc,$+3
 238+ 978E 09          >                    add     hl,bc
 239+ 978F 17               rla
 240+ 9790 2F               cpl
 241+ 9791 57               ld d,a
 242+ 9792
 243+ 9792 7B               ld a,e
 244+ 9793                  MacroDEDivBC
 244+ 9793 17          >                    rla
 244+ 9794 ED 6A       >                    adc     hl,hl
 244+ 9796 ED 42       >                    sbc     hl,bc
 244+ 9798 30 01       >                    jr      nc,$+3
 244+ 979A 09          >                    add     hl,bc
 245+ 979B                  MacroDEDivBC
 245+ 979B 17          >                    rla
 245+ 979C ED 6A       >                    adc     hl,hl
 245+ 979E ED 42       >                    sbc     hl,bc
 245+ 97A0 30 01       >                    jr      nc,$+3
 245+ 97A2 09          >                    add     hl,bc
 246+ 97A3                  MacroDEDivBC
 246+ 97A3 17          >                    rla
 246+ 97A4 ED 6A       >                    adc     hl,hl
 246+ 97A6 ED 42       >                    sbc     hl,bc
 246+ 97A8 30 01       >                    jr      nc,$+3
 246+ 97AA 09          >                    add     hl,bc
 247+ 97AB                  MacroDEDivBC
 247+ 97AB 17          >                    rla
 247+ 97AC ED 6A       >                    adc     hl,hl
 247+ 97AE ED 42       >                    sbc     hl,bc
 247+ 97B0 30 01       >                    jr      nc,$+3
 247+ 97B2 09          >                    add     hl,bc
 248+ 97B3                  MacroDEDivBC
 248+ 97B3 17          >                    rla
 248+ 97B4 ED 6A       >                    adc     hl,hl
 248+ 97B6 ED 42       >                    sbc     hl,bc
 248+ 97B8 30 01       >                    jr      nc,$+3
 248+ 97BA 09          >                    add     hl,bc
 249+ 97BB                  MacroDEDivBC
 249+ 97BB 17          >                    rla
 249+ 97BC ED 6A       >                    adc     hl,hl
 249+ 97BE ED 42       >                    sbc     hl,bc
 249+ 97C0 30 01       >                    jr      nc,$+3
 249+ 97C2 09          >                    add     hl,bc
 250+ 97C3                  MacroDEDivBC
 250+ 97C3 17          >                    rla
 250+ 97C4 ED 6A       >                    adc     hl,hl
 250+ 97C6 ED 42       >                    sbc     hl,bc
 250+ 97C8 30 01       >                    jr      nc,$+3
 250+ 97CA 09          >                    add     hl,bc
 251+ 97CB                  MacroDEDivBC
 251+ 97CB 17          >                    rla
 251+ 97CC ED 6A       >                    adc     hl,hl
 251+ 97CE ED 42       >                    sbc     hl,bc
 251+ 97D0 30 01       >                    jr      nc,$+3
 251+ 97D2 09          >                    add     hl,bc
 252+ 97D3 17               rla
 253+ 97D4 2F               cpl
 254+ 97D5 5F               ld e,a
 255+ 97D6 C9               ret
 256+ 97D7
 257+ 97D7
 258+ 97D7
 259+ 97D7              ;divdide by 16 using undocumented instrunctions
 260+ 97D7              ;Input: BC = Dividend, DE = Divisor, HL = 0
 261+ 97D7              ;Output: BC = Quotient, HL = Remainder
 262+ 97D7              ; Our use
 263+ 97D7              ; BC = A0
 264+ 97D7              ; DE = 0C
 265+ 97D7              ; so BC = a * 256 / C
 266+ 97D7              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
 266+ 97D7 B9          >                        cp     c
 266+ 97D8 D2 03 98    >                        jp		nc,DEV16ATooLarge
 267+ 97DB 47                                   ld      b,a
 268+ 97DC 59                                   ld      e,c
 269+ 97DD 0E 00                                ld      c,0
 270+ 97DF 16 00                                ld      d,0
 271+ 97E1 C3 EE 97                             jp      DIV16UNDOC
 272+ 97E4 47           DIV16Amul256dQUNDOC:    ld      b,a
 273+ 97E5 0E 00                                ld      c,0
 274+ 97E7 21 9F 81                             ld      hl,varQ
 275+ 97EA 7E                                   ld      a,(hl)
 276+ 97EB 16 00                                ld      d,0
 277+ 97ED 5F                                   ld      e,a
 278+ 97EE              DIV16BCDivDEUNDOC:
 279+ 97EE 21 00 00     DIV16UNDOC:             ld      hl,0
 280+ 97F1 78                                   ld      a,b
 281+ 97F2 06 10                                ld      b,16
 282+ 97F4 CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
 283+ 97F6 17                                   rla			; ...
 284+ 97F7 ED 6A                                adc	hl,hl		; ...
 285+ 97F9 ED 52                                sbc	hl,de		; ...
 286+ 97FB 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
 287+ 97FD 19                                   add	hl,de		; ...
 288+ 97FE 0D                                   dec	c		; ...
 289+ 97FF 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 290+ 9801 47                                   ld   b,a
 291+ 9802 C9                                   ret
 292+ 9803 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 293+ 9806 C9                                   ret
 294+ 9807              ; switch to logarithm version
 295+ 9807              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 296+ 9807 06 08        asm_div8:               ld b,8
 297+ 9809 AF                                   xor a
 298+ 980A CB 21        .div8_loop:	            sla c
 299+ 980C 17                                   rla
 300+ 980D BA                                   cp d
 301+ 980E 38 02                                jr c,.div8_skip
 301+ 9810
 302+ 9810 0C                                   inc c
 303+ 9811 92                                   sub d
 304+ 9812 10 F6        .div8_skip:	            djnz .div8_loop
 305+ 9814 C9                                   ret
 306+ 9815              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 307+ 9815 06 10        asm_div16:              ld b,16
 308+ 9817 AF                                   xor a
 309+ 9818 CB 25        div16_loop:	            sla l
 310+ 981A CB 14                                rl	h
 311+ 981C              ;    add hl,hl
 312+ 981C 17                                   rla
 313+ 981D B9                                   cp c
 314+ 981E 38 02                                jr c,div16_skip
 315+ 9820 2C                                   inc l
 316+ 9821 91                                   sub c
 317+ 9822 10 F4        div16_skip:		        djnz div16_loop
 318+ 9824 C9                                   ret
 319+ 9825              ;
 320+ 9825              ; Divide 16-bit values (with 16-bit result)
 321+ 9825              ; In: Divide BC by divider DE
 322+ 9825              ; Out: BC = result, HL = rest
 323+ 9825              ;
 324+ 9825              HLDivC_Iteration: 	    MACRO
 325+ 9825 ~                                    add	hl,hl		; unroll 16 times
 326+ 9825 ~                                    rla				; ...
 327+ 9825 ~                                    cp	c			; ...
 328+ 9825 ~                                    jr	1F
 329+ 9825 ~                                    sub	c			; ...
 330+ 9825 ~            1:
 331+ 9825 ~                                    inc	l			; ...
 332+ 9825                                      ENDM
 333+ 9825
 334+ 9825              EDivC_Iteration:        MACRO
 335+ 9825 ~                                    rl  e
 336+ 9825 ~                                    rla
 337+ 9825 ~                                    sub c
 338+ 9825 ~                                    jr  nc,.Div8_NoAdd
 339+ 9825 ~                                    add a,c
 340+ 9825 ~            .Div8_NoAdd:
 341+ 9825                                      ENDM
 342+ 9825
 343+ 9825              ; Switch to a logarithm version
 344+ 9825              ; Divide E by divider C Out: A = result, B = rest
 345+ 9825              E_Div_C:                ZeroA
 345+ 9825 AF          >                        xor a
 346+ 9826                                      EDivC_Iteration
 346+ 9826 CB 13       >                        rl  e
 346+ 9828 17          >                        rla
 346+ 9829 91          >                        sub c
 346+ 982A 30 01       >                        jr  nc,.Div8_NoAdd
 346+ 982C 81          >                        add a,c
 346+ 982D             >.Div8_NoAdd:
 347+ 982D                                      EDivC_Iteration
 347+ 982D CB 13       >                        rl  e
 347+ 982F 17          >                        rla
 347+ 9830 91          >                        sub c
 347+ 9831 30 01       >                        jr  nc,.Div8_NoAdd
 347+ 9833 81          >                        add a,c
 347+ 9834             >.Div8_NoAdd:
 348+ 9834                                      EDivC_Iteration
 348+ 9834 CB 13       >                        rl  e
 348+ 9836 17          >                        rla
 348+ 9837 91          >                        sub c
 348+ 9838 30 01       >                        jr  nc,.Div8_NoAdd
 348+ 983A 81          >                        add a,c
 348+ 983B             >.Div8_NoAdd:
 349+ 983B                                      EDivC_Iteration
 349+ 983B CB 13       >                        rl  e
 349+ 983D 17          >                        rla
 349+ 983E 91          >                        sub c
 349+ 983F 30 01       >                        jr  nc,.Div8_NoAdd
 349+ 9841 81          >                        add a,c
 349+ 9842             >.Div8_NoAdd:
 350+ 9842                                      EDivC_Iteration
 350+ 9842 CB 13       >                        rl  e
 350+ 9844 17          >                        rla
 350+ 9845 91          >                        sub c
 350+ 9846 30 01       >                        jr  nc,.Div8_NoAdd
 350+ 9848 81          >                        add a,c
 350+ 9849             >.Div8_NoAdd:
 351+ 9849                                      EDivC_Iteration
 351+ 9849 CB 13       >                        rl  e
 351+ 984B 17          >                        rla
 351+ 984C 91          >                        sub c
 351+ 984D 30 01       >                        jr  nc,.Div8_NoAdd
 351+ 984F 81          >                        add a,c
 351+ 9850             >.Div8_NoAdd:
 352+ 9850                                      EDivC_Iteration
 352+ 9850 CB 13       >                        rl  e
 352+ 9852 17          >                        rla
 352+ 9853 91          >                        sub c
 352+ 9854 30 01       >                        jr  nc,.Div8_NoAdd
 352+ 9856 81          >                        add a,c
 352+ 9857             >.Div8_NoAdd:
 353+ 9857                                      EDivC_Iteration
 353+ 9857 CB 13       >                        rl  e
 353+ 9859 17          >                        rla
 353+ 985A 91          >                        sub c
 353+ 985B 30 01       >                        jr  nc,.Div8_NoAdd
 353+ 985D 81          >                        add a,c
 353+ 985E             >.Div8_NoAdd:
 354+ 985E 47                                   ld      b,a
 355+ 985F 7B                                   ld      a,e
 356+ 9860 17                                   rla
 357+ 9861 2F                                   cpl
 358+ 9862 C9                                   ret
 359+ 9863
 360+ 9863
 361+ 9863              BCDIVDE_Iteration:      MACRO
 362+ 9863 ~                                    rla
 363+ 9863 ~                                    adc	    hl,hl
 364+ 9863 ~                                    add	    hl,de
 365+ 9863 ~                                    jr	    c,1F
 366+ 9863 ~                                    sbc	    hl,de
 367+ 9863 ~            1:
 368+ 9863                                      ENDM
 369+ 9863
 370+ 9863
 371+ 9863              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 372+ 9863              ;BC/DE ==> BC, remainder in HL
 373+ 9863              ;NOTE: BC/0 returns 0 as the quotient.
 374+ 9863              ;min: 738cc
 375+ 9863              ;max: 898cc
 376+ 9863              ;avg: 818cc
 377+ 9863              ;144 bytes
 378+ 9863 AF           BC_Div_DE:              xor a
 379+ 9864 67                                   ld h,a
 380+ 9865 6F                                   ld l,a
 381+ 9866 93                                   sub e
 382+ 9867 5F                                   ld e,a
 383+ 9868 9F                                   sbc a,a
 384+ 9869 92                                   sub d
 385+ 986A 57                                   ld d,a
 386+ 986B 78                                   ld a,b
 387+ 986C                                      BCDIVDE_Iteration
 387+ 986C 17          >                        rla
 387+ 986D ED 6A       >                        adc	    hl,hl
 387+ 986F 19          >                        add	    hl,de
 387+ 9870 38 02       >                        jr	    c,1F
 387+ 9872 ED 52       >                        sbc	    hl,de
 387+ 9874             >1:
 388+ 9874                                      BCDIVDE_Iteration
 388+ 9874 17          >                        rla
 388+ 9875 ED 6A       >                        adc	    hl,hl
 388+ 9877 19          >                        add	    hl,de
 388+ 9878 38 02       >                        jr	    c,1F
 388+ 987A ED 52       >                        sbc	    hl,de
 388+ 987C             >1:
 389+ 987C                                      BCDIVDE_Iteration
 389+ 987C 17          >                        rla
 389+ 987D ED 6A       >                        adc	    hl,hl
 389+ 987F 19          >                        add	    hl,de
 389+ 9880 38 02       >                        jr	    c,1F
 389+ 9882 ED 52       >                        sbc	    hl,de
 389+ 9884             >1:
 390+ 9884                                      BCDIVDE_Iteration
 390+ 9884 17          >                        rla
 390+ 9885 ED 6A       >                        adc	    hl,hl
 390+ 9887 19          >                        add	    hl,de
 390+ 9888 38 02       >                        jr	    c,1F
 390+ 988A ED 52       >                        sbc	    hl,de
 390+ 988C             >1:
 391+ 988C                                      BCDIVDE_Iteration
 391+ 988C 17          >                        rla
 391+ 988D ED 6A       >                        adc	    hl,hl
 391+ 988F 19          >                        add	    hl,de
 391+ 9890 38 02       >                        jr	    c,1F
 391+ 9892 ED 52       >                        sbc	    hl,de
 391+ 9894             >1:
 392+ 9894                                      BCDIVDE_Iteration
 392+ 9894 17          >                        rla
 392+ 9895 ED 6A       >                        adc	    hl,hl
 392+ 9897 19          >                        add	    hl,de
 392+ 9898 38 02       >                        jr	    c,1F
 392+ 989A ED 52       >                        sbc	    hl,de
 392+ 989C             >1:
 393+ 989C                                      BCDIVDE_Iteration
 393+ 989C 17          >                        rla
 393+ 989D ED 6A       >                        adc	    hl,hl
 393+ 989F 19          >                        add	    hl,de
 393+ 98A0 38 02       >                        jr	    c,1F
 393+ 98A2 ED 52       >                        sbc	    hl,de
 393+ 98A4             >1:
 394+ 98A4                                      BCDIVDE_Iteration
 394+ 98A4 17          >                        rla
 394+ 98A5 ED 6A       >                        adc	    hl,hl
 394+ 98A7 19          >                        add	    hl,de
 394+ 98A8 38 02       >                        jr	    c,1F
 394+ 98AA ED 52       >                        sbc	    hl,de
 394+ 98AC             >1:
 395+ 98AC 17                                   rla
 396+ 98AD 47                                   ld b,a
 397+ 98AE 79                                   ld a,c
 398+ 98AF                                      BCDIVDE_Iteration
 398+ 98AF 17          >                        rla
 398+ 98B0 ED 6A       >                        adc	    hl,hl
 398+ 98B2 19          >                        add	    hl,de
 398+ 98B3 38 02       >                        jr	    c,1F
 398+ 98B5 ED 52       >                        sbc	    hl,de
 398+ 98B7             >1:
 399+ 98B7                                      BCDIVDE_Iteration
 399+ 98B7 17          >                        rla
 399+ 98B8 ED 6A       >                        adc	    hl,hl
 399+ 98BA 19          >                        add	    hl,de
 399+ 98BB 38 02       >                        jr	    c,1F
 399+ 98BD ED 52       >                        sbc	    hl,de
 399+ 98BF             >1:
 400+ 98BF                                      BCDIVDE_Iteration
 400+ 98BF 17          >                        rla
 400+ 98C0 ED 6A       >                        adc	    hl,hl
 400+ 98C2 19          >                        add	    hl,de
 400+ 98C3 38 02       >                        jr	    c,1F
 400+ 98C5 ED 52       >                        sbc	    hl,de
 400+ 98C7             >1:
 401+ 98C7                                      BCDIVDE_Iteration
 401+ 98C7 17          >                        rla
 401+ 98C8 ED 6A       >                        adc	    hl,hl
 401+ 98CA 19          >                        add	    hl,de
 401+ 98CB 38 02       >                        jr	    c,1F
 401+ 98CD ED 52       >                        sbc	    hl,de
 401+ 98CF             >1:
 402+ 98CF                                      BCDIVDE_Iteration
 402+ 98CF 17          >                        rla
 402+ 98D0 ED 6A       >                        adc	    hl,hl
 402+ 98D2 19          >                        add	    hl,de
 402+ 98D3 38 02       >                        jr	    c,1F
 402+ 98D5 ED 52       >                        sbc	    hl,de
 402+ 98D7             >1:
 403+ 98D7                                      BCDIVDE_Iteration
 403+ 98D7 17          >                        rla
 403+ 98D8 ED 6A       >                        adc	    hl,hl
 403+ 98DA 19          >                        add	    hl,de
 403+ 98DB 38 02       >                        jr	    c,1F
 403+ 98DD ED 52       >                        sbc	    hl,de
 403+ 98DF             >1:
 404+ 98DF                                      BCDIVDE_Iteration
 404+ 98DF 17          >                        rla
 404+ 98E0 ED 6A       >                        adc	    hl,hl
 404+ 98E2 19          >                        add	    hl,de
 404+ 98E3 38 02       >                        jr	    c,1F
 404+ 98E5 ED 52       >                        sbc	    hl,de
 404+ 98E7             >1:
 405+ 98E7                                      BCDIVDE_Iteration
 405+ 98E7 17          >                        rla
 405+ 98E8 ED 6A       >                        adc	    hl,hl
 405+ 98EA 19          >                        add	    hl,de
 405+ 98EB 38 02       >                        jr	    c,1F
 405+ 98ED ED 52       >                        sbc	    hl,de
 405+ 98EF             >1:
 406+ 98EF 17                                   rla
 407+ 98F0 4F                                   ld c,a
 408+ 98F1 C9                                   ret
 409+ 98F2
# file closed: ./Maths/asm_divide.asm
 612  98F2                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ 98F2              asm_tis2:
   2+ 98F2              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ 98F2              ; ">DOES NOT DO SIGNED YET"
   4+ 98F2 F5           	push af
   5+ 98F3 E6 7F            and SignMask8Bit
   6+ 98F5 57           	ld d,a				;; d = A
   7+ 98F6 3A 9F 81     	ld a,(varQ)
   8+ 98F9 5F           	ld e,a
   9+ 98FA 7A           	ld a,d
  10+ 98FB BB           	cp e
  11+ 98FC 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ 98FE 1E 60        	ld e, 96
  13+ 9900 ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ 9902 EB           	ex de,hl
  15+ 9903 3A 9F 81     	ld a,(varQ)
  16+ 9906 4F           	ld c,a
  17+ 9907 CD 15 98     	call asm_div16
  18+ 990A F1           	pop af
  19+ 990B E6 80        	and $80
  20+ 990D B5           	or l
  21+ 990E C9           	ret
  22+ 990F              .tis2_set96:
  23+ 990F F1           	pop af
  24+ 9910 E6 80        	and $80
  25+ 9912 F6 96        	or $96
  26+ 9914 C9           	ret
  27+ 9915
  28+ 9915
  29+ 9915              asm_unit_vector:
  30+ 9915              squareregfx:
  31+ 9915 3A A6 C0     	ld a,(UBnkXScaled)
  32+ 9918 57           	ld d,a
  33+ 9919 5F           	ld e,a
  34+ 991A ED 30        	mul
  35+ 991C EB           	ex de,hl
  36+ 991D              squareregfy:
  37+ 991D 3A A8 C0     	ld a, (UBnkYScaled)
  38+ 9920 57           	ld d,a
  39+ 9921 5F           	ld e,a
  40+ 9922 ED 30        	mul
  41+ 9924 19           	add hl,de
  42+ 9925              squareregfz:
  43+ 9925 3A AA C0     	ld a, (UBnkZScaled)
  44+ 9928 57           	ld d,a
  45+ 9929 5F           	ld e,a
  46+ 992A ED 30        	mul
  47+ 992C 19           	add hl,de
  48+ 992D EB           	ex de,hl			; de de to number to root
  49+ 992E              hlequsquareroot:
  50+ 992E CD 28 96     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ 9931 E5           	push hl				; save it for work 3 copies
  52+ 9932 E5           	push hl				; save it for work
  53+ 9933 E5           	push hl				; save it for work
  54+ 9934              normfx:
  55+ 9934 3A A6 C0     	ld a,(UBnkXScaled)
  56+ 9937 E1           	pop hl				; get copy #1
  57+ 9938 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ 9939 4F           	ld c,a
  59+ 993A CD F2 98     	call asm_tis2
  60+ 993D 32 A6 C0     	ld (UBnkXScaled),a
  61+ 9940              normfy:
  62+ 9940 3A A8 C0     	ld a,(UBnkYScaled)
  63+ 9943 E1           	pop hl				; get copy #2
  64+ 9944 7D           	ld a,l
  65+ 9945 4F           	ld c,a
  66+ 9946 CD F2 98     	call asm_tis2
  67+ 9949 32 A8 C0     	ld (UBnkYScaled),a
  68+ 994C              normfz:
  69+ 994C 3A AA C0     	ld a,(UBnkZScaled)
  70+ 994F E1           	pop hl				; get copy #2
  71+ 9950 7D           	ld a,l
  72+ 9951 4F           	ld c,a
  73+ 9952 CD F2 98     	call asm_tis2
  74+ 9955 32 AA C0     	ld (UBnkZScaled),a
  75+ 9958              asm_unit_vector_end:
  76+ 9958 C9           	ret
  77+ 9959
# file closed: ./Maths/asm_unitvector.asm
 613  9959                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ 9959              ; Input:
   2+ 9959              ;       HL = 1st value
   3+ 9959              ;       DE = 2nd value
   4+ 9959              ; Output:
   5+ 9959              ;       CF, ZF = results of comparison:
   6+ 9959              ;
   7+ 9959              ;               CF      ZF      Result
   8+ 9959              ;               -----------------------------------
   9+ 9959              ;               0       0       HL > DE
  10+ 9959              ;               0       1       HL == DE
  11+ 9959              ;               1       0       HL < DE
  12+ 9959              ;               1       1       Impossible
  13+ 9959              ;
  14+ 9959
  15+ 9959 E5           compare16HLDE:      push    hl
  16+ 995A A7                               and     a
  17+ 995B ED 52                            sbc     hl,de
  18+ 995D E1                               pop     hl
  19+ 995E C9                               ret
  20+ 995F
  21+ 995F              ; With compare signed we do ABS comparison
  22+ 995F              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  23+ 995F
  24+ 995F E5 D5        compare16HLDEABS:   push    hl,,de
  25+ 9961 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  26+ 9962 E6 7F                            and     SignMask8Bit
  27+ 9964 67                               ld      h,a
  28+ 9965 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  29+ 9966 E6 7F                            and     SignMask8Bit
  30+ 9968 57                               ld      d,a
  31+ 9969 A7                               and     a
  32+ 996A ED 52                            sbc     hl,de
  33+ 996C D1 E1                            pop     hl,,de
  34+ 996E C9                               ret
  35+ 996F
  36+ 996F
# file closed: ./Maths/compare16.asm
 614  996F                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ 996F              ;;----------------------------------------------------------------------------------------------------------------------
   2+ 996F              ;; 16-bit negate
   3+ 996F              negate16:
   4+ 996F              negate16hl:
   5+ 996F                      ; Input:
   6+ 996F                      ;       HL = value
   7+ 996F                      ; Output:
   8+ 996F                      ;       HL = -value
   9+ 996F                      ; Destroys:
  10+ 996F                      ;       AF
  11+ 996F                      ;
  12+ 996F AF           	xor 	a
  13+ 9970 95           	sub 	l
  14+ 9971 6F           	ld 		l,a
  15+ 9972 9F           	sbc 	a,a
  16+ 9973 94           	sub 	h
  17+ 9974 67           	ld 		h,a
  18+ 9975 C9           	ret
  19+ 9976
  20+ 9976              negate16de:
  21+ 9976 AF           	xor 	a
  22+ 9977 93           	sub 	e
  23+ 9978 5F           	ld 		e,a
  24+ 9979 9F           	sbc 	a,a
  25+ 997A 92           	sub 	d
  26+ 997B 57           	ld 		d,a
  27+ 997C C9           	ret
  28+ 997D
  29+ 997D              negate16bc:
  30+ 997D AF           	xor 	a
  31+ 997E 91           	sub 	c
  32+ 997F 4F           	ld 		c,a
  33+ 9980 9F           	sbc 	a,a
  34+ 9981 90           	sub 	b
  35+ 9982 47           	ld 		b,a
  36+ 9983 C9           	ret
  37+ 9984
  38+ 9984
  39+ 9984              macronegate16hl:	MACRO
  40+ 9984 ~            					xor 	a
  41+ 9984 ~            					sub 	l
  42+ 9984 ~            					ld 		l,a
  43+ 9984 ~            					sbc 	a,a
  44+ 9984 ~            					sub 	h
  45+ 9984 ~            					ld 		h,a
  46+ 9984              					ENDM
  47+ 9984
  48+ 9984              macronegate16de:	MACRO
  49+ 9984 ~            					xor 	a
  50+ 9984 ~                                sub 	e
  51+ 9984 ~                                ld 		e,a
  52+ 9984 ~                                sbc 	a,a
  53+ 9984 ~                                sub 	d
  54+ 9984 ~                                ld 		d,a
  55+ 9984              					ENDM
  56+ 9984              macronegate16bc:	MACRO
  57+ 9984 ~            					xor 	a
  58+ 9984 ~                                sub 	c
  59+ 9984 ~                                ld 		c,a
  60+ 9984 ~                                sbc 	a,a
  61+ 9984 ~                                sub 	b
  62+ 9984 ~                                ld 		b,a
  63+ 9984              					ENDM
  64+ 9984
  65+ 9984              macronegate16ix:	MACRO
  66+ 9984 ~            					xor 	a
  67+ 9984 ~                                sub 	ixl
  68+ 9984 ~                                ld 		ixl,a
  69+ 9984 ~                                sbc 	a,a
  70+ 9984 ~                                sub 	ixh
  71+ 9984 ~                                ld 		ixh,a
  72+ 9984              					ENDM
# file closed: ./Maths/negate16.asm
 615  9984                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ 9984              ; a equal a / d * 96
   2+ 9984
   3+ 9984
   4+ 9984
   5+ 9984              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
   6+ 9984 3A A6 C0     normaliseXX1596S7:      ld		a,(XX15VecX)	    ; XX15+0
   7+ 9987 DD 67                                ld		ixh,a               ; ixh = signed x component
   8+ 9989 E6 7F                                and		SignMask8Bit        ; a = unsigned version
   9+ 998B              .n96SQX:	            inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
   9+ 998B 5F          >			ld	e,a
   9+ 998C 57          >			ld  d,a
   9+ 998D ED 30       >			mul
  10+ 998F 62                                   ld		h,d					; h == varR d = varO e= varA
  11+ 9990 6B                                   ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  12+ 9991 3A A7 C0     .n96SQY:                ld		a,(XX15VecY)
  13+ 9994 DD 6F                                ld		ixl,a               ; ixl = signed y componet
  14+ 9996 E6 7F                                and		SignMask8Bit                 ; = abs
  15+ 9998                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  15+ 9998 5F          >			ld	e,a
  15+ 9999 57          >			ld  d,a
  15+ 999A ED 30       >			mul
  16+ 999C 19                                   add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  17+ 999D 3A A8 C0     .n96SQZ:                ld		a,(XX15VecZ)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  18+ 99A0 FD 67                                ld		iyh,a               ; iyh = signed
  19+ 99A2 E6 7F                                and		SignMask8Bit                 ; unsigned
  20+ 99A4                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  20+ 99A4 5F          >			ld	e,a
  20+ 99A5 57          >			ld  d,a
  20+ 99A6 ED 30       >			mul
  21+ 99A8 19           .n96SQADD:              add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  22+ 99A9 EB                                   ex		de,hl				; hl => de ready for square root
  23+ 99AA CD 28 96     .n96SQRT:               call	asm_sqrt			; hl = de = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  24+ 99AD 3A A6 C0     .n96NORMX:              ld		a,(XX15VecX)
  25+ 99B0 E6 7F                                and		SignMask8Bit
  26+ 99B2 4F                                   ld		c,a
  27+ 99B3 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  28+ 99B4 CD 47 9B                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  29+ 99B7 47                                   ld		b,a				    ;++SGN
  30+ 99B8 DD 7C                                ld		a,ixh			    ;++SGN
  31+ 99BA E6 80                                and		$80				    ;++SGN
  32+ 99BC B0                                   or		b				    ;++SGN
  33+ 99BD 32 A6 C0                             ld		(XX15VecX),a
  34+ 99C0 3A A7 C0     .n96NORMY:              ld		a,(XX15VecY)
  35+ 99C3 E6 7F                                and		SignMask8Bit
  36+ 99C5 4F                                   ld		c,a
  37+ 99C6 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  38+ 99C7 CD 47 9B                             call	AequAdivDmul967Bit     	; does not use HL so we can retain it
  39+ 99CA 47                                   ld		b,a				    ;++SGN
  40+ 99CB DD 7D                                ld		a,ixl			    ;++SGN
  41+ 99CD E6 80                                and		$80				    ;++SGN
  42+ 99CF B0                                   or		b				    ;++SGN
  43+ 99D0 32 A7 C0                             ld		(XX15VecY),a
  44+ 99D3 3A A8 C0     .n96NORMZ:              ld		a,(XX15VecZ)
  45+ 99D6 E6 7F                                and		SignMask8Bit
  46+ 99D8 4F                                   ld		c,a
  47+ 99D9 55                                   ld		d,l				; Q(i.e. l) => D, later we can just pop into de
  48+ 99DA CD 47 9B                             call	AequAdivDmul967Bit;AequAdivDmul96	; does not use HL so we can retain it
  49+ 99DD 47                                   ld		b,a				    ;++SGN
  50+ 99DE FD 7C                                ld		a,iyh			    ;++SGN
  51+ 99E0 E6 80                                and		$80				    ;++SGN
  52+ 99E2 B0                                   or		b				    ;++SGN
  53+ 99E3 32 A8 C0                             ld		(XX15VecZ),a
  54+ 99E6 C9                                   ret
  55+ 99E7
  56+ 99E7              ; Normalise vector
  57+ 99E7              ; scale Q = Sqrt (X^2 + Y^2 + Z^2)
  58+ 99E7              ; X = X / Q with 96 = 1 , i.e X = X / Q * 3/8
  59+ 99E7              ; Y = Y / Q with 96 = 1 , i.e Y = Y / Q * 3/8
  60+ 99E7              ; Z = Z / Q with 96 = 1 , i.e Z = Z / Q * 3/8
  61+ 99E7
# file closed: ./Maths/normalise96.asm
 616  99E7                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ 99E7              ;Number in hl to decimal ASCII
   2+ 99E7              ;Thanks to z80 Bits
   3+ 99E7              ;inputs:	hl = number to ASCII
   4+ 99E7              ;example: hl=300 outputs '00300'
   5+ 99E7              ;destroys: af, bc, hl, de used
   6+ 99E7              DispHLtoDE:
   7+ 99E7              ; "DispHL, writes HL to DE address"
   8+ 99E7 01 F0 D8     	ld	bc,-10000
   9+ 99EA CD 00 9A     	call	Num1
  10+ 99ED 01 18 FC     	ld	bc,-1000
  11+ 99F0 CD 00 9A     	call	Num1
  12+ 99F3 01 9C FF     	ld	bc,-100
  13+ 99F6 CD 00 9A     	call	Num1
  14+ 99F9 0E F6        	ld	c,-10
  15+ 99FB CD 00 9A     	call	Num1
  16+ 99FE 0E FF        	ld	c,-1
  17+ 9A00              Num1:
  18+ 9A00 3E 2F        	ld	a,'0'-1
  19+ 9A02              .Num2:
  20+ 9A02 3C           	inc	a
  21+ 9A03 09           	add	hl,bc
  22+ 9A04 38 FC        	jr	c,.Num2
  23+ 9A06 ED 42        	sbc	hl,bc
  24+ 9A08 12           	ld	(de),a
  25+ 9A09 13           	inc	de
  26+ 9A0A C9           	ret
  27+ 9A0B
  28+ 9A0B              DispAtoDE:
  29+ 9A0B 26 00        	ld h,0
  30+ 9A0D 6F           	ld l,a
  31+ 9A0E C3 E7 99     	jp DispHLtoDE
  32+ 9A11
  33+ 9A11              DispPriceAtoDE:
  34+ 9A11 26 00        	ld h,0
  35+ 9A13 6F           	ld l,a
  36+ 9A14 01 9C FF     	ld	bc,-100
  37+ 9A17 CD 27 9A     	call	.NumLeadBlank1
  38+ 9A1A 0E F6        	ld	c,-10
  39+ 9A1C CD 00 9A     	call	Num1
  40+ 9A1F 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ 9A21 12           	ld		(de),a					; we can optimse that later TODO
  42+ 9A22 13           	inc		de						; with just an inc De
  43+ 9A23 0E FF        	ld	c,-1
  44+ 9A25 18 D9        	jr		Num1
  45+ 9A27              .NumLeadBlank1:
  46+ 9A27 3E 2F        	ld	a,'0'-1
  47+ 9A29              .NumLeadBlank2:
  48+ 9A29 3C           	inc	a
  49+ 9A2A 09           	add	hl,bc
  50+ 9A2B 38 FC        	jr	c,.NumLeadBlank2
  51+ 9A2D FE 30        	cp	'0'
  52+ 9A2F 20 02        	jr	nz,.DontBlank
  53+ 9A31              .Blank:
  54+ 9A31 3E 20        	ld	a,' '
  55+ 9A33              .DontBlank:
  56+ 9A33 ED 42        	sbc	hl,bc
  57+ 9A35 12           	ld	(de),a
  58+ 9A36 13           	inc	de
  59+ 9A37 C9           	ret
  60+ 9A38
  61+ 9A38              DispQtyAtoDE:
  62+ 9A38 FE 00        	cp	0
  63+ 9A3A 28 23        	jr	z,.NoStock
  64+ 9A3C 26 00        	ld h,0
  65+ 9A3E 6F           	ld l,a
  66+ 9A3F 01 9C FF     	ld	bc,-100
  67+ 9A42 CD 4E 9A     	call	.NumLeadBlank1
  68+ 9A45 0E F6        	ld	c,-10
  69+ 9A47 CD 4E 9A     	call	.NumLeadBlank1
  70+ 9A4A 0E FF        	ld	c,-1
  71+ 9A4C 18 B2        	jr		Num1
  72+ 9A4E              .NumLeadBlank1:
  73+ 9A4E 3E 2F        	ld	a,'0'-1
  74+ 9A50              .NumLeadBlank2:
  75+ 9A50 3C           	inc	a
  76+ 9A51 09           	add	hl,bc
  77+ 9A52 38 FC        	jr	c,.NumLeadBlank2
  78+ 9A54 FE 30        	cp	'0'
  79+ 9A56 20 02        	jr	nz,.DontBlank
  80+ 9A58              .Blank:
  81+ 9A58 3E 20        	ld	a,' '
  82+ 9A5A              .DontBlank:
  83+ 9A5A ED 42        	sbc	hl,bc
  84+ 9A5C 12           	ld	(de),a
  85+ 9A5D 13           	inc	de
  86+ 9A5E C9           	ret
  87+ 9A5F              .NoStock:
  88+ 9A5F 3E 20        	ld	a,' '
  89+ 9A61 12           	ld	(de),a
  90+ 9A62 13           	inc	de
  91+ 9A63 12           	ld	(de),a
  92+ 9A64 13           	inc	de
  93+ 9A65 3E 2D        	ld	a,'-'
  94+ 9A67 12           	ld	(de),a
  95+ 9A68 13           	inc de
  96+ 9A69 C9           	ret
  97+ 9A6A
  98+ 9A6A
  99+ 9A6A              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ 9A6A              ;### Input      DE,IX=32bit value, IY=destination address
 101+ 9A6A              ;### Output     IY=last char in destination string
 102+ 9A6A              ;### Destroyed AF,BC,DE,HL,IX
 103+ 9A6A 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ 9A6E 0A 00 00 00
 103+ 9A72 64 00 00 00
 103+ 9A76 E8 03 00 00
 103+ 9A7A 10 27 00 00
 104+ 9A7E A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ 9A82 40 42 0F 00
 104+ 9A86 80 96 98 00
 104+ 9A8A 00 E1 F5 05
 104+ 9A8E 00 CA 9A 3B
 105+ 9A92 00 00 00 00  clcn32z ds 4
 106+ 9A96
 107+ 9A96              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ 9A96 CD A5 9A     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ 9A99 FD 7E 00                             ld      a,(IY+0)
 110+ 9A9C FD 77 01                             ld      (IY+1),a
 111+ 9A9F 3E 2E                                ld      a,"."
 112+ 9AA1 FD 77 00                             ld      (IY+0),a
 113+ 9AA4 C9                                   ret
 114+ 9AA5
 115+ 9AA5 DD 22 92 9A  DispDEIXtoIY:           ld (clcn32z),ix
 116+ 9AA9 ED 53 94 9A                          ld (clcn32z+2),de
 117+ 9AAD DD 21 8E 9A                          ld ix,clcn32t+36
 118+ 9AB1 06 09                                ld b,9
 119+ 9AB3 0E 00                                ld c,0
 120+ 9AB5 3E 30        .clcn321:               ld a,'0'
 121+ 9AB7 B7                                   or a
 122+ 9AB8 DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ 9ABB DD 56 01                             ld d,(ix+1)
 124+ 9ABE 2A 92 9A                             ld hl,(clcn32z)
 125+ 9AC1 ED 52                                sbc hl,de
 126+ 9AC3 22 92 9A                             ld (clcn32z),hl
 127+ 9AC6 DD 5E 02                             ld e,(ix+2)
 128+ 9AC9 DD 56 03                             ld d,(ix+3)
 129+ 9ACC 2A 94 9A                             ld hl,(clcn32z+2)
 130+ 9ACF ED 52                                sbc hl,de
 131+ 9AD1 22 94 9A                             ld (clcn32z+2),hl
 132+ 9AD4 38 04                                jr c,.clcn325
 133+ 9AD6 0C                                   inc c
 134+ 9AD7 3C                                   inc a
 135+ 9AD8 18 DE                                jr .clcn322
 136+ 9ADA DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ 9ADD DD 56 01                             ld d,(ix+1)
 138+ 9AE0 2A 92 9A                             ld hl,(clcn32z)
 139+ 9AE3 19                                   add hl,de
 140+ 9AE4 22 92 9A                             ld (clcn32z),hl
 141+ 9AE7 DD 5E 02                             ld e,(ix+2)
 142+ 9AEA DD 56 03                             ld d,(ix+3)
 143+ 9AED 2A 94 9A                             ld hl,(clcn32z+2)
 144+ 9AF0 ED 5A                                adc hl,de
 145+ 9AF2 22 94 9A                             ld (clcn32z+2),hl
 146+ 9AF5 11 FC FF                             ld de,-4
 147+ 9AF8 DD 19                                add ix,de
 148+ 9AFA 0C                                   inc c
 149+ 9AFB 0D                                   dec c
 150+ 9AFC 28 05                                jr z,.clcn323
 151+ 9AFE FD 77 00                             ld (iy+0),a
 152+ 9B01 FD 23                                inc iy
 153+ 9B03 10 B0        .clcn323:               djnz .clcn321
 154+ 9B05 3A 92 9A                             ld a,(clcn32z)
 155+ 9B08 C6 30                                add A,'0'
 156+ 9B0A FD 77 00                             ld (iy+0),a
 157+ 9B0D FD 36 01 00                          ld (iy+1),0
 158+ 9B11 C9                                   ret
 159+ 9B12
# file closed: ./Maths/binary_to_decimal.asm
 617  9B12                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ 9B12              AequAdivQmul96ABS:      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   1+ 9B12 BA          >                        cp     d
   1+ 9B13 D2 2E 9B    >                        jp		nc,.TIS2AccGTEQ
   2+ 9B16 06 FE                                ld			b,$FE						; division roll (replaced varT)
   3+ 9B18 CB 27        .TIS2RollTLoop:			sla			a
   4+ 9B1A                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
   4+ 9B1A BA          >                        cp      d
   4+ 9B1B DA 31 9B    >                        jp		c, .TIS2SkipSub
   5+ 9B1E 9A                                   sbc			a,d							; do subtraction with carry
   6+ 9B1F 37                                   scf
   7+ 9B20 CB 10                                rl			b							; T rolled left to push bit out the end
   8+ 9B22 38 F4                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
   9+ 9B24 78           .TIS2SKIPCont:	        ld			a,b							; T
  10+ 9B25 CB 3F                                srl			a							; result / 2
  11+ 9B27 CB 3F                                srl			a							; result / 4
  12+ 9B29 47                                   ld			b,a							; t = t /4
  13+ 9B2A CB 3F                                srl			a							; result / 8
  14+ 9B2C 80                                   add			a,b							; result /8 + result /4
  15+ 9B2D C9                                   ret
  16+ 9B2E 3E 60        .TIS2AccGTEQ:           ld			a,$60							; unity
  17+ 9B30 C9                                   ret
  18+ 9B31 B7           .TIS2SkipSub:           or			a
  19+ 9B32 CB 10                                rl			b							; T rolled left to push bit out the end
  20+ 9B34 38 E2                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  21+ 9B36 C3 24 9B                             jp			.TIS2SKIPCont
  22+ 9B39
  23+ 9B39
  24+ 9B39              ; USES 			A DE BC
  25+ 9B39              ; DOES NOT USE 	HL
  26+ 9B39              TIS2962C:		; two's compliment entry point, exits not 2's compliment
  27+ 9B39 CB 7F        	bit			7,a
  28+ 9B3B 28 04        	jr			z,AequAdivQmul96
  29+ 9B3D ED 44        	neg										; revers 2s'c and just set neg bit
  30+ 9B3F CB FF        	set			7,a
  31+ 9B41              ; Note negative numbers are bit 7 set not 2's compliment
  32+ 9B41              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  33+ 9B41              TIS2:
  34+ 9B41 4F           	ld			c,a							; copy of Acc
  35+ 9B42 3A 9F 81     	ld			a,(varQ)
  36+ 9B45 57           	ld			d,a							; d = varQ
  37+ 9B46 79           	ld			a,c							; recover a
  38+ 9B47              AequAdivDmul967Bit:
  39+ 9B47 4F               ld          c,a
  40+ 9B48 7A               ld          a,d
  41+ 9B49 CB 27            sla         a
  42+ 9B4B 30 10            jr          nc, .OKToDivide
  43+ 9B4D              .ScaleDown:
  44+ 9B4D B7               or          a
  45+ 9B4E CB 3A            srl         d
  46+ 9B50
  47+ 9B50 79               ld          a,c
  48+ 9B51 E6 7F            and         SignMask8Bit
  49+ 9B53 CB 3F            srl         a
  50+ 9B55 47               ld          b,a
  51+ 9B56 79               ld          a,c
  52+ 9B57 E6 80            and         $80
  53+ 9B59 B0               or          b
  54+ 9B5A C3 5E 9B         jp          AequAdivDmul96
  55+ 9B5D              .OKToDivide:
  56+ 9B5D 79               ld          a,c
  57+ 9B5E              AequAdivDmul96:
  58+ 9B5E 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  59+ 9B5F E6 7F        	and			SignMask8Bit				; ignore sign
  60+ 9B61              	JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  60+ 9B61 BA          >                        cp     d
  60+ 9B62 D2 82 9B    >                        jp		nc,.TIS2AccGTEQ
  61+ 9B65 06 FE        	ld			b,$FE						; division roll (replaced varT)
  62+ 9B67              .TIS2RollTLoop:									; .TIL2	; roll T
  63+ 9B67 CB 27        	sla			a
  64+ 9B69              	JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
  64+ 9B69 BA          >                        cp      d
  64+ 9B6A DA 88 9B    >                        jp		c, .TIS2SkipSub
  65+ 9B6D 9A           	sbc			a,d							; do subtraction with carry
  66+ 9B6E 37           	scf                                     ; set carrry to roll into b
  67+ 9B6F CB 10        	rl			b							; T rolled left to push bit out the end
  68+ 9B71 38 F4        	jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  69+ 9B73              .TIS2SKIPCont:
  70+ 9B73 78           	ld			a,b							; A = T = 4 / 4
  71+ 9B74 CB 3F        	srl			a							; .
  72+ 9B76 CB 3F        	srl			a							; .
  73+ 9B78 47           	ld			b,a							; .
  74+ 9B79 CB 3F        	srl			a							; A = A / 2 (i.e. T /8)
  75+ 9B7B 80           	add			a,b							; A = T/8 + T/4 (3T/8)
  76+ 9B7C 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  77+ 9B7D 79           	ld			a,c							; copy of Acc to look at sign bit
  78+ 9B7E E6 80        	and			$80							; recover sign only
  79+ 9B80 B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  80+ 9B81 C9           	ret
  81+ 9B82              .TIS2AccGTEQ:
  82+ 9B82              ;TI4:										;\ clean to +/- unity
  83+ 9B82 79           	ld			a,c
  84+ 9B83 E6 80        	and			$80							; copy of Acc
  85+ 9B85 F6 60        	or			$60							; unity
  86+ 9B87 C9           	ret
  87+ 9B88              .TIS2SkipSub:
  88+ 9B88              	ClearCarryFlag                          ; Clear carry as it needs to be empty to roll in 0
  88+ 9B88 B7          >                        or a
  89+ 9B89 CB 10        	rl			b							; T rolled left to push bit out the end
  90+ 9B8B 38 DA        	jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  91+ 9B8D C3 73 9B     	jp			.TIS2SKIPCont
  92+ 9B90
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
 618  9B90                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ 9B90              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   2+ 9B90              fmltu:
   3+ 9B90 57           AequAmulQdiv256:        ld	d,a
   4+ 9B91 3A 9F 81                             ld	a,(varQ)
   5+ 9B94 5F                                   ld	e,a
   6+ 9B95 ED 30                                mul
   7+ 9B97 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   8+ 9B98 C9                                   ret
   9+ 9B99
  10+ 9B99 5F           AequAmulDdiv256:        ld  e,a
  11+ 9B9A ED 30                                mul
  12+ 9B9C 7A                                   ld  a,d
  13+ 9B9D C9                                   ret
  14+ 9B9E
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
 619  9B9E                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ 9B9E              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ 9B9E              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ 9B9E 21 36 83     		ld		hl,varDustZ
   4+ 9BA1 FD 7D        		ld		a,iyl
   5+ 9BA3 ED 31        		add		hl,a
   6+ 9BA5 7E           		ld		a,(hl)
   7+ 9BA6 C3 B2 9B     		jp		DV41
   8+ 9BA9              DV42:										; travel step of dust particle front/rear
   9+ 9BA9 21 36 83     		ld		hl,varDustZ
  10+ 9BAC 3A 8A 80     		ld		a,(regY)
  11+ 9BAF ED 31        		add		hl,a
  12+ 9BB1 7E           		ld		a,(hl)						; a = SZ[y]
  13+ 9BB2              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ 9BB2 5F           		ld		e,a							; using E as Q var replacement
  15+ 9BB3 3A 99 81     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ 9BB6              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ 9BB6 06 08        		ld		b,8							; counter
  18+ 9BB8 CB 27        		sla		a							;
  19+ 9BBA 57           		ld		d,a							; use d for - p = delta * 2
  20+ 9BBB AF           		xor		a
  21+ 9BBC              DVL4:										; counter x loop (b reg)
  22+ 9BBC CB 17        		rl		a							; a = a * 2
  23+ 9BBE 38 03        		jr		c,DV8						; jump on carry
  24+ 9BC0 BB           		cp		e							; var Q
  25+ 9BC1 38 02        		jr		c,DV5						; skip subtraction
  26+ 9BC3              DV8:
  27+ 9BC3 9B           		sbc		a,e							; a = a - q (with carry)
  28+ 9BC4 37           		scf									;  carry gets set
  29+ 9BC5              DV5:										; skipped subtraction
  30+ 9BC5 CB 12        		rl		d							; d (P hi)
  31+ 9BC7 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ 9BC9              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ 9BC9              ; Note we are not going to call LL28+4 but inline code here:
  34+ 9BC9 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ 9BCB 4F           		ld		c,a							; use c as R var
  36+ 9BCC              .RollRemainder:
  37+ 9BCC CB 27        		sla		a
  38+ 9BCE 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ 9BD0 B8           		cp		b							; a < q?
  40+ 9BD1 30 01        		jr		nc,.DontSBC
  41+ 9BD3              .DoSBC:										; a is < q
  42+ 9BD3 98           		sbc		a,b							; 	a -= q
  43+ 9BD4              .DontSBC:
  44+ 9BD4 CB 11        		rl		c							; r << 1
  45+ 9BD6 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ 9BD8 79           		ld		a,c
  47+ 9BD9 32 A0 81     		ld		(varR),a					; for backwards compat
  48+ 9BDC 7A           		ld		a,d
  49+ 9BDD 32 A0 80     		ld		(varP),a
  50+ 9BE0 C9           		ret									; R (c) left with remainder
  51+ 9BE1              .Reduce:									; a geneated a carry
  52+ 9BE1 98           		sbc		a,b							; a = a - (q +1)
  53+ 9BE2 37           		scf									; set carry flag for rl
  54+ 9BE3 CB 11        		rl		c							; r << 1 briging in carry
  55+ 9BE5 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ 9BE7 79           		ld		a,c
  57+ 9BE8 32 A0 81     		ld		(varR),a					; for backwards compat
  58+ 9BEB 7A           		ld		a,d
  59+ 9BEC 32 A0 80     		ld		(varP),a
  60+ 9BEF C9           		ret
  61+ 9BF0              .AnswerTooBig:
  62+ 9BF0 0E FF        		ld		c,$FF						; arse its too big
  63+ 9BF2 79           		ld		a,c
  64+ 9BF3 32 A0 81     		ld		(varR),a					; for backwards compat
  65+ 9BF6 7A           		ld		a,d
  66+ 9BF7 32 A0 80     		ld		(varP),a
  67+ 9BFA C9           		ret
  68+ 9BFB
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
 620  9BFB                  INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ 9BFB
   2+ 9BFB              asm_defmutl:
   3+ 9BFB              AequDmulEdiv256usgn:
   4+ 9BFB              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ 9BFB ED 30        	mul
   6+ 9BFD 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ 9BFE C9           	ret
   8+ 9BFF
   9+ 9BFF
# file closed: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
 621  9BFF
 622  9BFF                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ 9BFF              APequQmulA:
   2+ 9BFF              asm_mult1:
   3+ 9BFF              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ 9BFF FE 00        	cp	0
   5+ 9C01 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ 9C03 5F           	ld	e,a
   7+ 9C04 3A 9F 81     	ld	a,(varQ)
   8+ 9C07 57           	ld	d,a
   9+ 9C08 FE 00        	cp	0				; compare a
  10+ 9C0A 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ 9C0C AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ 9C0D E6 80        	and $80				; get the resultant sign and save into b
  13+ 9C0F 47           	ld	b,a
  14+ 9C10 7A           	ld	a,d
  15+ 9C11 E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ 9C13 57           	ld	d,a
  17+ 9C14 7B           	ld	a,e
  18+ 9C15 E6 7F        	and SignMask8Bit
  19+ 9C17 5F           	ld	e,a
  20+ 9C18 ED 30        	mul					; zxn de = d * e
  21+ 9C1A 7B           	ld	a,e
  22+ 9C1B 32 A0 80     	ld	(varP),a		; p = lo
  23+ 9C1E 7A           	ld	a,d				; a = hi
  24+ 9C1F B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ 9C20 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ 9C21 C9           	ret
  27+ 9C22              .mul0:
  28+ 9C22 AF           	xor	a
  29+ 9C23 32 A0 80     	ld	(varP),a
  30+ 9C26 57           	ld	d,a
  31+ 9C27 5F           	ld  e,a
  32+ 9C28 C9           	ret
  33+ 9C29
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
 623  9C29                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ 9C29              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ 9C29              SAEquSRPlusAQ:
   3+ 9C29              ; Calculate the following between sign-magnitude numbers:
   4+ 9C29              ;   (S A) = (S R) + (A Q)
   5+ 9C29              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ 9C29              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ 9C29              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ 9C29              LL38:
   9+ 9C29              ;	ld		d,a
  10+ 9C29              ;	ld		a,(varQ)
  11+ 9C29              ;	ld		e,a
  12+ 9C29              ;	ld		a,(varS)
  13+ 9C29              ;	ld		h,a
  14+ 9C29              ;	ld		a,(varR)
  15+ 9C29              ;	ld		l,a
  16+ 9C29              ;	call	ADDHLDESignedv3
  17+ 9C29              ;	ld		a,h
  18+ 9C29              ;	ld		(varS),a
  19+ 9C29              ;	ld		a,l
  20+ 9C29              ;	ret
  21+ 9C29              ; calculation table
  22+ 9C29              ;   R     Q    Op            Sign calc
  23+ 9C29              ;	10    5    Add           +    sign same add R sign
  24+ 9C29              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ 9C29              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ 9C29              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ 9C29              ;   5    10    Add           +    sign same add R sign
  28+ 9C29              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ 9C29              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ 9C29              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ 9C29
  32+ 9C29              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ 9C29              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ 9C29              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ 9C29              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ 9C29
  37+ 9C29
  38+ 9C29              ; Calculate sign for Q from A and varS
  39+ 9C29 21 A1 81     	ld		hl,varS							;
  40+ 9C2C AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ 9C2D FA 38 9C     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ 9C30 3A 9F 81     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ 9C33 21 A0 81     	ld		hl,varR
  44+ 9C36 86           	add		a,(hl)							; a = Q + R
  45+ 9C37 C9           	ret										; Done carry set if overflow
  46+ 9C38              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ 9C38 3A A0 81     	ld		a,(varR)						; a = R
  48+ 9C3B 21 9F 81     	ld		hl,varQ                         ; Q
  49+ 9C3E              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ 9C3E              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ 9C3E B7          >                        or a
  51+ 9C3F 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ 9C40 38 01            jr      c,.LL39SignCorrection
  53+ 9C42              ;--    jr      a,.LL39ResultZero
  54+ 9C42              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ 9C42              ;--	or		a								; Clear carry flag to say result is correct
  56+ 9C42 C9           	ret
  57+ 9C43              .LL39SignCorrection:
  58+ 9C43 FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ 9C45 28 0E            jr      z,.LL39ResultZero
  60+ 9C47 ED 44            neg                                     ; flip A 2'c value to positive
  61+ 9C49 08           	ex		af,af'							; save A temporarily
  62+ 9C4A 3A A1 81     	ld		a,(varS)						; Flip Sign bit in varS
  63+ 9C4D EE 80        	xor		$80							    ;
  64+ 9C4F 32 A1 81     	ld		(varS),a                        ; flip sign bit of a
  65+ 9C52 08           	ex		af,af'                          ; get back a which is the result
  66+ 9C53                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ 9C53 B7          >                        or a
  67+ 9C54 C9           	ret
  68+ 9C55              .LL39ResultZero:
  69+ 9C55 32 A1 81         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ 9C58                  ClearCarryFlag                          ; clear carry
  70+ 9C58 B7          >                        or a
  71+ 9C59 C9               ret
  72+ 9C5A              ;--LL39SwapSubtraction:
  73+ 9C5A              ;--	push	bc
  74+ 9C5A              ;--	ld		b,a
  75+ 9C5A              ;--	ld		a,(hl)
  76+ 9C5A              ;--	sub		b
  77+ 9C5A              ;--	pop		bc
  78+ 9C5A              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ 9C5A              ;--	ld		a,(varS)
  80+ 9C5A              ;--	xor		$80
  81+ 9C5A              ;--	ld		(varS),a
  82+ 9C5A              ;--	ex		af,af'
  83+ 9C5A              ;--	ret
  84+ 9C5A
  85+ 9C5A              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ 9C5A              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ 9C5A              ;;;;;   (S A) = (S R) + (A Q)
  88+ 9C5A              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ 9C5A              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ 9C5A              ;;;;LL38:
  91+ 9C5A              ;;;;; Calculate sign for Q from A and varS
  92+ 9C5A              ;;;;	ld		hl,varS							;
  93+ 9C5A              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ 9C5A              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ 9C5A              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ 9C5A              ;;;;	ld		hl,varR
  97+ 9C5A              ;;;;	add		a,(hl)							; a = Q + R
  98+ 9C5A              ;;;;	ret										; Done
  99+ 9C5A              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ 9C5A              ;;;;	ld		hl,varQ                         ;
 101+ 9C5A              ;;;;	ld		a,(hl)
 102+ 9C5A              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ 9C5A              ;;;;	ld		a,(varR)						;
 104+ 9C5A              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ 9C5A              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ 9C5A              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ 9C5A              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ 9C5A              ;;;;	ret
 109+ 9C5A              ;;;;.SignCorrection:
 110+ 9C5A              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ 9C5A              ;;;;	ex		af,af'							; save A temporarily
 112+ 9C5A              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ 9C5A              ;;;;	xor		$80							    ;
 114+ 9C5A              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ 9C5A              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ 9C5A              ;;;;	ret
 117+ 9C5A              ;;;;LL39Sub16Bit:
 118+ 9C5A              ;;;;	ld		e,a
 119+ 9C5A              ;;;;	ld		d,0
 120+ 9C5A              ;;;;	ld		a,(varR)
 121+ 9C5A              ;;;;	ld		l,a
 122+ 9C5A              ;;;;	ld		h,0
 123+ 9C5A              ;;;;	ClearCarryFlag
 124+ 9C5A              ;;;;	sbc		hl,de
 125+ 9C5A              ;;;;	jr		c,.SignCorrection16bit
 126+ 9C5A              ;;;;	bit		7,h
 127+ 9C5A              ;;;;	jr		z,.GoodToReturn
 128+ 9C5A              ;;;;.Needtonegate:
 129+ 9C5A              ;;;;	macronegate16hl
 130+ 9C5A              ;;;;.GoodToReturn
 131+ 9C5A              ;;;;	ld		a,l
 132+ 9C5A              ;;;;	or		a
 133+ 9C5A              ;;;;	ret
 134+ 9C5A              ;;;;.SignCorrection16bit:
 135+ 9C5A              ;;;;	macronegate16hl
 136+ 9C5A              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ 9C5A              ;;;;	xor		$80							    ;
 138+ 9C5A              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ 9C5A              ;;;;	ld		a,l
 140+ 9C5A              ;;;;	ret
 141+ 9C5A
 142+ 9C5A
# file closed: ./Maths/Utilities/badd_ll38.asm
 624  9C5A                  INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
# file opened: ./Maths/Utilities/moveship4-MVS4.asm
   1+ 9C5A              ; Note comparing hl vs iY, you need at least 3 incs or decs for hl to be slower
   2+ 9C5A              ; it may be faster though if we can use hl to avoid memory actions if needed
   3+ 9C5A              ; need to optimise mad as push hl pop hl and use de doesn't really improve speed
   4+ 9C5A
   5+ 9C5A
   6+ 9C5A              moveship4Yreg:
   7+ 9C5A 3A 8A 80     		ld		a,(regY)
   8+ 9C5D 47           		ld		b,a
   9+ 9C5E              moveship4breg:
  10+ 9C5E              		; b = Y index, 9 = nosev, 15 = roofv 21 = sidev
  11+ 9C5E              MVS4PitchAlphaRollBeta:
  12+ 9C5E              MVS4:										;.MVS4	\ -> &52A1 \ Moveship4, Y is matrix row, pitch&roll update to coordinates
  13+ 9C5E 3A B8 80     		ld		a,(ALPHA)					;  ALPHA
  14+ 9C61 32 9F 81     		ld		(varQ),a					; player ship's roll Q = Alpha
  15+ 9C64 21 22 C0     		ld		hl,UBnKxsgn
  16+ 9C67 78           		ld		a,b							; from
  17+ 9C68 ED 31        		add		hl,a
  18+ 9C6A 7E           		ld		a,(hl)						; INWK+2,Y
  19+ 9C6B 32 A0 81     		ld		(varR),a					; R  \ lo
  20+ 9C6E 23           		inc		hl
  21+ 9C6F 7E           		ld		a,(hl)						; INWK+3,Y
  22+ 9C70 32 A1 81     		ld		(varS),a					; S  \ hi		SR = nosev_y (or axis y)
  23+ 9C73 2B           		dec		hl
  24+ 9C74 2B           		dec		hl
  25+ 9C75 2B           		dec		hl							;
  26+ 9C76 7E           		ld		a,(hl)						; INWK+0,Y
  27+ 9C77 32 A0 80     		ld		(varP),a					; P  \ over-written	 P = nosevx lo
  28+ 9C7A 23           		inc		hl
  29+ 9C7B 7E           		ld		a,(hl)						; INWK+1,Y
  30+ 9C7C EE 80        		xor		$80							; flip sign  AP = nosevx * - 1
  31+ 9C7E CD A5 94     		call	madXAequQmulAaddRS			; MAD	\ DE = X.A = alpha*INWK+1,Y + INWK+2to3,Y
  32+ 9C81 23                   inc     hl
  33+ 9C82 23                   inc     hl
  34+ 9C83 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  35+ 9C84 2B                   dec     hl
  36+ 9C85 3A 89 80             ld      a,(regX)
  37+ 9C88 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-aX   \ their comment
  38+ 9C89 32 A0 80             ld      (varP),a                    ;  P
  39+ 9C8C 2B                   dec     hl
  40+ 9C8D 2B                   dec     hl
  41+ 9C8E 7E                   ld      a,(hl)                      ; INWK+0,Y
  42+ 9C8F 32 A0 81             ld      (varR),a                    ;  R	\ lo
  43+ 9C92 23                   inc     hl
  44+ 9C93 7E                   ld      a,(hl)                      ;  INWK+1,Y
  45+ 9C94 32 A1 81             ld      (varS),a                    ; S	\ hi
  46+ 9C97 23                   inc     hl
  47+ 9C98 23                   inc     hl
  48+ 9C99 7E                   ld      a,(hl)                      ; INWK+3,Y
  49+ 9C9A CD A5 94             call    madXAequQmulAaddRS          ; MAD	\ X.A = alpha*INWK+3,Y + INWK+0to1,Y
  50+ 9C9D 2B                   dec     hl
  51+ 9C9E 2B                   dec     hl
  52+ 9C9F 77                   ld      (hl),a                      ; INWK+1,Y  \ hi
  53+ 9CA0 3A 89 80             ld      a,(regX)
  54+ 9CA3 2B                   dec     hl
  55+ 9CA4 77                   ld      (hl),a                      ; INWK+0,Y  \ X=X+aY   \ their comment
  56+ 9CA5 32 A0 80             ld      (varP),a                    ; P
  57+ 9CA8 3A AB 80             ld      a,(BETA)                    ; BETA
  58+ 9CAB 32 9F 81             ld      (varQ),a                    ; Q	\ player ship's pitch
  59+ 9CAE 23                   inc     hl
  60+ 9CAF 23                   inc     hl
  61+ 9CB0 7E                   ld      a,(hl)                      ; INWK+2,Y
  62+ 9CB1 32 A0 81             ld      (varR),a                    ; R	\ lo
  63+ 9CB4 23                   inc     hl
  64+ 9CB5 7E                   ld      a,(hl)                      ; INWK+3,Y
  65+ 9CB6 32 A1 81             ld      (varS),a                    ; S	\ hi
  66+ 9CB9 23                   inc     hl
  67+ 9CBA 7E                   ld      a,(hl)                      ; INWK+4,Y
  68+ 9CBB 32 A0 80             ld      (varP),a                    ; P	\ lo
  69+ 9CBE 23                   inc     hl
  70+ 9CBF 7E                   ld      a,(hl)                      ; INWK+5,Y
  71+ 9CC0 EE 80                xor     $80                         ; flip sign hi
  72+ 9CC2 CD A5 94             call    madXAequQmulAaddRS          ; MAD	\ X.A =-beta*INWK+5,Y + INWK+2to3,Y
  73+ 9CC5 2B                   dec     hl
  74+ 9CC6 2B                   dec     hl
  75+ 9CC7 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  76+ 9CC8 3A 89 80             ld      a,(regX)
  77+ 9CCB 2B                   dec     hl
  78+ 9CCC 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-bZ  \ their comment
  79+ 9CCD 32 A0 80             ld      (varP),a                    ; P
  80+ 9CD0 23                   inc     hl
  81+ 9CD1 23                   inc     hl
  82+ 9CD2 7E                   ld      a,(hl)                      ; INWK+4,Y
  83+ 9CD3 32 A0 81             ld      (varR),a                    ; R	\ lo
  84+ 9CD6 23                   inc     hl
  85+ 9CD7 7E                   ld      a,(hl)                      ; INWK+5,Y
  86+ 9CD8 32 A1 81             ld      (varS),a                    ; S	\ hi
  87+ 9CDB 2B                   dec     hl
  88+ 9CDC 2B                   dec     hl
  89+ 9CDD 7E                   ld      a,(hl)                      ; INWK+3,Y
  90+ 9CDE CD A5 94             call    madXAequQmulAaddRS          ; MAD	\ X.A = beta*INWK+3,Y + INWK+4,5,Y
  91+ 9CE1 23                   inc     hl
  92+ 9CE2 23                   inc     hl
  93+ 9CE3 77                   ld      (hl),a                      ; INWK+5,Y \ hi
  94+ 9CE4 3A 89 80             ld      a,(regX)
  95+ 9CE7 2B                   dec     hl
  96+ 9CE8 77                   ld      (hl),a                      ; INWK+4,Y \ Z=Z+bY   \ their comment
  97+ 9CE9 C9                   ret
  98+ 9CEA
  99+ 9CEA
# file closed: ./Maths/Utilities/moveship4-MVS4.asm
 625  9CEA
 626  9CEA                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ 9CEA              ;;;LL28:
   2+ 9CEA              ;;;    ld      c,a                         ;
   3+ 9CEA              ;;;    ld      a,(varQ)                    ;
   4+ 9CEA              ;;;    ld      b,a                         ;
   5+ 9CEA              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ 9CEA              ;;;RequAmul256divB:                        ;
   7+ 9CEA              ;;;LL28Breg:
   8+ 9CEA              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ 9CEA              ;;;	cp		b							; Check A >= Q
  10+ 9CEA              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ 9CEA              ;;;.CalcRemainder:
  12+ 9CEA              ;;;	ld		c, 	$FE						; set R to $FE
  13+ 9CEA              ;;;.RollRemainder:
  14+ 9CEA              ;;;	sla		a
  15+ 9CEA              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ 9CEA              ;;;	cp		b							; a < q?
  17+ 9CEA              ;;;	jr		nc,.DontSBC
  18+ 9CEA              ;;;.DoSBC:									; a is < q
  19+ 9CEA              ;;;	sbc		a,b							; 	a -= q
  20+ 9CEA              ;;;.DontSBC:
  21+ 9CEA              ;;;	rl		c							; r << 1
  22+ 9CEA              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ 9CEA              ;;;    ld      a,c
  24+ 9CEA              ;;;    ld      (varR),a
  25+ 9CEA              ;;;	ret									; R (c) left with remainder
  26+ 9CEA              ;;;.Reduce:								; a geneated a carry
  27+ 9CEA              ;;;	sbc		a,b							; a = a - (q +1)
  28+ 9CEA              ;;;	scf									; set carry flag for rl
  29+ 9CEA              ;;;	rl		c							; r << 1 briging in carry
  30+ 9CEA              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ 9CEA              ;;;    ld      a,c
  32+ 9CEA              ;;;    ld      (varR),a
  33+ 9CEA              ;;;	ret
  34+ 9CEA              ;;;.AnswerTooBig:
  35+ 9CEA              ;;;	ld	    c,$FF							; arse its too big
  36+ 9CEA              ;;;    ld      a,c
  37+ 9CEA              ;;;    ld      (varR),a
  38+ 9CEA              ;;;	ret
  39+ 9CEA
  40+ 9CEA              BCequAmul256DivC:
  41+ 9CEA 59             ld    e,c
  42+ 9CEB 67             ld    h,a
  43+ 9CEC 2E 00          ld    l,0
  44+ 9CEE              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ 9CEE 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ 9CEF B7             or a                                   ; from this time on the carry is cleared
  47+ 9CF0 C8             ret z
  48+ 9CF1 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ 9CF4 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ 9CF6              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ 9CF6 ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ 9CF8 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ 9CF9 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ 9CFB C9             ret
  55+ 9CFC
  56+ 9CFC              HL_Div_C:
  57+ 9CFC              ; Integer divides HL by C
  58+ 9CFC              ; Result in HL, remainder in A
  59+ 9CFC              ; Clobbers F, B
  60+ 9CFC 06 10                ld b,16
  61+ 9CFE AF                   xor a
  62+ 9CFF              HL_Div_C_Loop:
  63+ 9CFF 29                   add hl,hl
  64+ 9D00 17                   rla
  65+ 9D01 B9                   cp c
  66+ 9D02 38 02                jr c,HL_DivC_Skip
  67+ 9D04 91                   sub c
  68+ 9D05 2C                   inc l
  69+ 9D06              HL_DivC_Skip:
  70+ 9D06 10 F7                djnz HL_Div_C_Loop
  71+ 9D08 7D                   ld   a,l
  72+ 9D09 32 A0 81             ld  (varR),a
  73+ 9D0C C9                   ret
  74+ 9D0D
  75+ 9D0D
  76+ 9D0D
  77+ 9D0D              ; Entry point if varQ is populated with demoninator
  78+ 9D0D              RequAmul256divQ:
  79+ 9D0D              BFRDIV:
  80+ 9D0D F5           		push	af
  81+ 9D0E 3A 9F 81     		ld		a,(varQ)
  82+ 9D11 4F           		ld		c,a
  83+ 9D12 F1           		pop		af
  84+ 9D13 FE 00        		cp		0
  85+ 9D15 CA 2C 9D     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ 9D18              RequAmul256divC:
  87+ 9D18 2E 00        		ld		l,0
  88+ 9D1A 67           		ld		h,a
  89+ 9D1B              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ 9D1B 06 10        		ld b,16
  91+ 9D1D AF           		xor a
  92+ 9D1E              LOOPPOINT:
  93+ 9D1E 29           		add hl,hl
  94+ 9D1F 17           		rla
  95+ 9D20 B9           		cp c
  96+ 9D21 38 02        		jr c,SKIPINCSUB
  97+ 9D23 2C           		inc l
  98+ 9D24 91           		sub c
  99+ 9D25              SKIPINCSUB:
 100+ 9D25 10 F7        		djnz LOOPPOINT
 101+ 9D27 7D           		ld		a,l
 102+ 9D28 32 A0 81     		ld 		(varR),a
 103+ 9D2B C9           		ret
 104+ 9D2C              HLDIVC_0_BY:
 105+ 9D2C 32 A0 81     		ld		(varR),a
 106+ 9D2F C9           		ret
 107+ 9D30              ;	push	af
 108+ 9D30              ;	ld		a,b
 109+ 9D30              ;	ld		(varQ),a
 110+ 9D30              ;	pop		af
 111+ 9D30              ;RequAmul256divQ:
 112+ 9D30              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ 9D30              ;	ld		hl,varQ
 114+ 9D30              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ 9D30              ;	ld		b,$FE						; b = X
 116+ 9D30              ;	ld		c,a							; c = R	div roll counter
 117+ 9D30              ;LL31:									; roll R
 118+ 9D30              ;	sla		a
 119+ 9D30              ;	jr		c,LL29						; hop to Reduce
 120+ 9D30              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ 9D30              ;	sbc		a,(hl)						; a = a - Q
 122+ 9D30              ;	rl		c							; rotate R left
 123+ 9D30              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ 9D30              ;	jr		LL2Good
 125+ 9D30              ;LL29:									; Reduce
 126+ 9D30              ;	sbc		a,(hl)
 127+ 9D30              ;	scf
 128+ 9D30              ;	rl		c							; roll a carry flag into R
 129+ 9D30              ;	jr		c,LL31						;  loop R
 130+ 9D30              ;	jr		LL2Good
 131+ 9D30              ;LL2:
 132+ 9D30              ;	ld		c,$FF
 133+ 9D30              ;LL2Good:
 134+ 9D30              ;	ld		a,c
 135+ 9D30              ;	ld		(varR),a
 136+ 9D30              ;	ret
 137+ 9D30
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
 627  9D30                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ 9D30              RequAdivQ:
   2+ 9D30              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ 9D30              LL61:										; Handling division R=A/Q for case further down
   4+ 9D30 4F           	ld		c,a								; c = A
   5+ 9D31 3A 9F 81     	ld		a,(varQ)						; test for divide by 0
   6+ 9D34 FE 00        	cp		0
   7+ 9D36 28 16        	jr		z,LL84							; divide by zero error
   8+ 9D38 57           	ld		d,a								; now we can do C/D
   9+ 9D39 06 08            ld b,8
  10+ 9D3B AF               xor a
  11+ 9D3C              LL63:										; roll divide loop
  12+ 9D3C CB 21            sla c
  13+ 9D3E 17               rla
  14+ 9D3F BA               cp d
  15+ 9D40 38 02            jr c,LL64
  16+ 9D42 0C               inc c
  17+ 9D43 92               sub d
  18+ 9D44              LL64:
  19+ 9D44 10 F6            djnz LL63
  20+ 9D46 32 9E 81     	ld	(varU),a							; store remainder in U
  21+ 9D49 79           	ld	a,c
  22+ 9D4A 32 A0 81     	ld	(varR),a							; store remainder in R
  23+ 9D4D C9               ret
  24+ 9D4E              LL84:										; div error  R=U=#5
  25+ 9D4E 3E 32        	ld		a,50
  26+ 9D50 32 A0 81     	ld		(varR),a
  27+ 9D53 32 9E 81     	ld		(varU),a
  28+ 9D56 C9           	ret
  29+ 9D57
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
 628  9D57                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ 9D57              asm_mult12:
   2+ 9D57              RSequQmulA:
   3+ 9D57              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ 9D57 CD FF 9B     	call APequQmulA
   5+ 9D5A 08           	ex 	af,af'
   6+ 9D5B 7A           	ld	a,d
   7+ 9D5C 32 A1 81     	ld	(varS),a
   8+ 9D5F 7B           	ld	a,e
   9+ 9D60 32 A0 81     	ld	(varR),a
  10+ 9D63 08           	ex 	af,af'
  11+ 9D64 C9           	ret
  12+ 9D65
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
 629  9D65
 630  9D65                  include "./Universe/Ships/CopyRotMattoXX15.asm"
# file opened: ./Universe/Ships/CopyRotMattoXX15.asm
   1+ 9D65              CopyRotMatNoseVtoXX15:
   2+ 9D65                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2+ 9D65 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
   2+ 9D68 32 A6 C0    >                        ld       (XX15VecX),a
   3+ 9D6B                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3+ 9D6B 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
   3+ 9D6E 32 A7 C0    >                        ld       (XX15VecY),a
   4+ 9D71                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4+ 9D71 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
   4+ 9D74 32 A8 C0    >                        ld       (XX15VecZ),a
   5+ 9D77 C9                   ret
   6+ 9D78
   7+ 9D78              CopyRotMatRoofVtoXX15:
   8+ 9D78                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8+ 9D78 3A 30 C0    >                        ld       a,(UBnkrotmatRoofvX+1)
   8+ 9D7B 32 A6 C0    >                        ld       (XX15VecX),a
   9+ 9D7E                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9+ 9D7E 3A 32 C0    >                        ld       a,(UBnkrotmatRoofvY+1)
   9+ 9D81 32 A7 C0    >                        ld       (XX15VecY),a
  10+ 9D84                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10+ 9D84 3A 34 C0    >                        ld       a,(UBnkrotmatRoofvZ+1)
  10+ 9D87 32 A8 C0    >                        ld       (XX15VecZ),a
  11+ 9D8A C9                   ret
  12+ 9D8B
  13+ 9D8B              CopyRotMatSideVtoXX15:
  14+ 9D8B                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14+ 9D8B 3A 2A C0    >                        ld       a,(UBnkrotmatSidevX+1)
  14+ 9D8E 32 A6 C0    >                        ld       (XX15VecX),a
  15+ 9D91                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15+ 9D91 3A 2C C0    >                        ld       a,(UBnkrotmatSidevY+1)
  15+ 9D94 32 A7 C0    >                        ld       (XX15VecY),a
  16+ 9D97                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16+ 9D97 3A 2E C0    >                        ld       a,(UBnkrotmatSidevZ+1)
  16+ 9D9A 32 A8 C0    >                        ld       (XX15VecZ),a
  17+ 9D9D C9                   ret
  18+ 9D9E
# file closed: ./Universe/Ships/CopyRotMattoXX15.asm
 631  9D9E                  include "./Universe/Ships/CopyXX15toRotMat.asm"
# file opened: ./Universe/Ships/CopyXX15toRotMat.asm
   1+ 9D9E              CopyXX15toRotMatNoseV:
   2+ 9D9E                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2+ 9D9E 3A A6 C0    >                        ld       a,(XX15VecX)
   2+ 9DA1 32 36 C0    >                        ld       (UBnkrotmatNosevX+1),a
   3+ 9DA4                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3+ 9DA4 3A A7 C0    >                        ld       a,(XX15VecY)
   3+ 9DA7 32 38 C0    >                        ld       (UBnkrotmatNosevY+1),a
   4+ 9DAA                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4+ 9DAA 3A A8 C0    >                        ld       a,(XX15VecZ)
   4+ 9DAD 32 3A C0    >                        ld       (UBnkrotmatNosevZ+1),a
   5+ 9DB0                      ZeroA
   5+ 9DB0 AF          >                        xor a
   6+ 9DB1 32 35 C0             ld  (UBnkrotmatNosevX),a
   7+ 9DB4 32 37 C0             ld  (UBnkrotmatNosevY),a
   8+ 9DB7 32 39 C0             ld  (UBnkrotmatNosevZ),a
   9+ 9DBA C9                   ret
  10+ 9DBB
  11+ 9DBB              CopyXX15toRotMatRoofV:
  12+ 9DBB                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
  12+ 9DBB 3A A6 C0    >                        ld       a,(XX15VecX)
  12+ 9DBE 32 30 C0    >                        ld       (UBnkrotmatRoofvX+1),a
  13+ 9DC1                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
  13+ 9DC1 3A A7 C0    >                        ld       a,(XX15VecY)
  13+ 9DC4 32 32 C0    >                        ld       (UBnkrotmatRoofvY+1),a
  14+ 9DC7                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  14+ 9DC7 3A A8 C0    >                        ld       a,(XX15VecZ)
  14+ 9DCA 32 34 C0    >                        ld       (UBnkrotmatRoofvZ+1),a
  15+ 9DCD                      ZeroA
  15+ 9DCD AF          >                        xor a
  16+ 9DCE 32 2F C0             ld  (UBnkrotmatRoofvX),a
  17+ 9DD1 32 31 C0             ld  (UBnkrotmatRoofvY),a
  18+ 9DD4 32 33 C0             ld  (UBnkrotmatRoofvZ),a
  19+ 9DD7 C9                   ret
  20+ 9DD8
  21+ 9DD8              CopyXX15toRotMatSideV:
  22+ 9DD8                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  22+ 9DD8 3A A6 C0    >                        ld       a,(XX15VecX)
  22+ 9DDB 32 2A C0    >                        ld       (UBnkrotmatSidevX+1),a
  23+ 9DDE                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  23+ 9DDE 3A A7 C0    >                        ld       a,(XX15VecY)
  23+ 9DE1 32 2C C0    >                        ld       (UBnkrotmatSidevY+1),a
  24+ 9DE4                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  24+ 9DE4 3A A8 C0    >                        ld       a,(XX15VecZ)
  24+ 9DE7 32 2E C0    >                        ld       (UBnkrotmatSidevZ+1),a
  25+ 9DEA                      ZeroA
  25+ 9DEA AF          >                        xor a
  26+ 9DEB 32 29 C0             ld  (UBnkrotmatSidevX),a
  27+ 9DEE 32 2B C0             ld  (UBnkrotmatSidevY),a
  28+ 9DF1 32 2D C0             ld  (UBnkrotmatSidevZ),a
  29+ 9DF4 C9                   ret
  30+ 9DF5
# file closed: ./Universe/Ships/CopyXX15toRotMat.asm
 632  9DF5                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ 9DF5              ;rotmap0xLo: DB	0				; INWK +9
   2+ 9DF5              ;rotmap0xHi: DB	0				; INWK +10
   3+ 9DF5              ;rotmat0yLo: DB	0				; INWK +11
   4+ 9DF5              ;rotmat0yHi: DB	0				; INWK +12
   5+ 9DF5              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ 9DF5              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ 9DF5              ;rotmap1xLo: DB	0				; INWK +15
   8+ 9DF5              ;rotmap1xHi:	DB	0				; INWK +16
   9+ 9DF5              ;rotmat1yLo:	DB	0				; INWK +17
  10+ 9DF5              ;rotmat1yHi:	DB	0				; INWK +18
  11+ 9DF5              ;rotmat1zLo:	DB	0				; INWK +19
  12+ 9DF5              ;rotmat1zHi:	DB	0				; INWK +20
  13+ 9DF5              ;rotmat2xLo: DB	0				; INWK +21
  14+ 9DF5              ;rotmat2xHi:	DB	0				; INWK +22
  15+ 9DF5              ;rotmat2yLo:	DB	0				; INWK +23
  16+ 9DF5              ;rotmat2yHi:	DB	0				; INWK +24
  17+ 9DF5              ;rotmat2zLo:	DB	0				; INWK +25
  18+ 9DF5              ;rotmat2zHi:	DB	0				; INWK +26
  19+ 9DF5              ;
  20+ 9DF5              ;rotmatFx	equ	rotmat0xHi
  21+ 9DF5              ;rotmatFy	equ	rotmat0yHi
  22+ 9DF5              ;rotmatFz	equ	rotmat0zHi
  23+ 9DF5              ;rotmatUx	equ	rotmat1xHi
  24+ 9DF5              ;rotmatUy	equ	rotmat1yHi
  25+ 9DF5              ;rotmatUz	equ	rotmat1zHi
  26+ 9DF5              ;
  27+ 9DF5              ;inwkarray			equ		INWK+10
  28+ 9DF5
  29+ 9DF5
  30+ 9DF5
  31+ 9DF5
  32+ 9DF5              ; Divide that sets value to FFFF if divide by 0 unless main value is 0, then 0
  33+ 9DF5
  34+ 9DF5              ; (P+1 A) = (A P) / Q
  35+ 9DF5              ;  B A    = (A P) / Q
  36+ 9DF5              ; TESTED OK
  37+ 9DF5
  38+ 9DF5
  39+ 9DF5 2A A6 C0     NormalizeXX15:          ld      hl, (XX15VecX)              ; h= VecX, l = VecY
  40+ 9DF8 3A A8 C0                             ld      a,  (XX15VecZ)              ; a = VecZ, d we don't care
  41+ 9DFB E6 7F        .ABSZ:                  and     SignMask8Bit
  42+ 9DFD FD 67                                ld      iyh,a                       ; iyh = abs z
  43+ 9DFF 57           .ZSquared:              ld      d,a
  44+ 9E00 5F                                   ld      e,a
  45+ 9E01 ED 30                                mul     de
  46+ 9E03 42 4B                                ld      bc,de                       ; bc = z squared
  47+ 9E05 7D           .ABSX:                  ld      a,l
  48+ 9E06 E6 7F        .XSquared:              and     SignMask8Bit
  49+ 9E08 DD 67                                ld      ixh,a                       ; ixh = abs x
  50+ 9E0A 57                                   ld      d,a
  51+ 9E0B 5F                                   ld      e,a
  52+ 9E0C ED 30                                mul     de
  53+ 9E0E EB                                   ex      de,hl                       ; hl = x squared
  54+ 9E0F 7A           .ABSY:                  ld      a,d                         ; as h was swapped into d
  55+ 9E10 E6 7F                                and     SignMask8Bit
  56+ 9E12 DD 6F                                ld      ixl,a                       ; ixl = abs y
  57+ 9E14 5F           .YSquared:              ld      e,a
  58+ 9E15 57                                   ld      d,a
  59+ 9E16 ED 30                                mul     de                          ; de = y squared
  60+ 9E18 19                                   add     hl,de                       ; hl = hl + de + bc
  61+ 9E19 09                                   add     hl,bc                       ;
  62+ 9E1A EB                                   ex      de,hl
  63+ 9E1B CD 28 96                             call    asm_sqrt                    ; d = iyl =hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
  64+ 9E1E 55                                   ld      d,l
  65+ 9E1F FD 6A                                ld      iyl,d
  66+ 9E21 DD 7C        .NormaliseX:            ld      a,ixh                       ; normalise x
  67+ 9E23 CD 47 9B                             call    AequAdivDmul967Bit
  68+ 9E26 57                                   ld      d,a
  69+ 9E27 3A A6 C0                             ld      a,(XX15VecX)
  70+ 9E2A E6 80                                and     SignOnly8Bit
  71+ 9E2C B2                                   or      d
  72+ 9E2D 32 A6 C0                             ld      (XX15VecX),a
  73+ 9E30 DD 7D        .NormaliseY:            ld      a,ixl                       ; normalise y
  74+ 9E32 55                                   ld      d,l
  75+ 9E33 CD 47 9B                             call    AequAdivDmul967Bit
  76+ 9E36 57                                   ld      d,a
  77+ 9E37 3A A7 C0                             ld      a,(XX15VecY)
  78+ 9E3A E6 80                                and     SignOnly8Bit
  79+ 9E3C B2                                   or      d
  80+ 9E3D 32 A7 C0                             ld      (XX15VecY),a
  81+ 9E40 FD 7C        .NormaliseZ:            ld      a,iyh                       ; normalise z
  82+ 9E42 55                                   ld      d,l
  83+ 9E43 CD 47 9B                             call    AequAdivDmul967Bit
  84+ 9E46 57                                   ld      d,a
  85+ 9E47 3A A8 C0                             ld      a,(XX15VecZ)
  86+ 9E4A E6 80                                and     SignOnly8Bit
  87+ 9E4C B2                                   or      d
  88+ 9E4D 32 A8 C0                             ld      (XX15VecZ),a
  89+ 9E50 C9                                   ret
  90+ 9E51
  91+ 9E51              TidyNormaliseNoseV:     MACRO
  92+ 9E51 ~                                    call	CopyRotMatNoseVtoXX15	    ; copy over matrix row 3 (Nosev)
  93+ 9E51 ~                                    call	NormalizeXX15			    ; normalise z hi, its really TIS3 and write back to matrix
  94+ 9E51 ~                                    call	CopyXX15toRotMatNoseV       ; .
  95+ 9E51                                      ENDM
  96+ 9E51              TidyNormaliseRoofV:     MACRO
  97+ 9E51 ~                                    call	CopyRotMatRoofVtoXX15
  98+ 9E51 ~                                    call	NormalizeXX15			; normalise z hi, its really TIS3
  99+ 9E51 ~                                    call	CopyXX15toRotMatRoofV
 100+ 9E51                                      ENDM
 101+ 9E51
 102+ 9E51
 103+ 9E51 DD 01        TidyUbnK:               break
 104+ 9E53                                      TidyNormaliseNoseV
 104+ 9E53 CD 65 9D    >                        call	CopyRotMatNoseVtoXX15	    ; copy over matrix row 3 (Nosev)
 104+ 9E56 CD F5 9D    >                        call	NormalizeXX15			    ; normalise z hi, its really TIS3 and write back to matrix
 104+ 9E59 CD 9E 9D    >                        call	CopyXX15toRotMatNoseV       ; .
 105+ 9E5C 3A 36 C0                             ld      a,(UBnkrotmatNosevX+1)      ; Now check and see which vector elemetn we are going to
 106+ 9E5F E6 60                                and     %01100000                   ; if X is not small then we go straigth to roofx
 107+ 9E61 C2 F9 9E                             jp      nz,.ProcessRoofX            ; .
 108+ 9E64 3A 38 C0     .TidyXIsSmall:          ld      a,(UBnkrotmatNosevY+1)      ; Else we test Y on to using
 109+ 9E67 E6 60                                and     %01100000                   ; if Y is not small we process roofz
 110+ 9E69 20 47                                jr      nz,.ProcessRoofZ            ; .
 111+ 9E6B              ;...roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 112+ 9E6B 3A 36 C0     .ProcessRoofY:          ld		a,(UBnkrotmatNosevX+1)
 113+ 9E6E 32 9F 81                             ld		(varQ),a					; q = nosev_y
 114+ 9E71 3A 30 C0                             ld		a,(UBnkrotmatRoofvX+1)	    ;roov z
 115+ 9E74 CD 57 9D                             call	RSequQmulA
 116+ 9E77 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 117+ 9E7A 32 9F 81                             ld		(varQ),a					; b = regX for now
 118+ 9E7D 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 119+ 9E80 CD C7 94                             call	madDEequQmulAaddRS
 120+ 9E83 7A                                   ld      a,d                         ; flip sign bit
 121+ 9E84 EE 80                                xor     SignOnly8Bit
 122+ 9E86 57                                   ld      d,a
 123+ 9E87 3A 38 C0                             ld      a,(UBnkrotmatNosevY+1)
 124+ 9E8A 32 9F 81                             ld      (varQ),a
 125+ 9E8D 7A           .YTest0Div:             ld      a,d
 126+ 9E8E E6 7F                                and     $7F
 127+ 9E90 B3                                   or      e
 128+ 9E91 FE 00                                cp      0
 129+ 9E93 20 0E                                jr      nz,.SkipYZeroTest
 130+ 9E95                                      ZeroA
 130+ 9E95 AF          >                        xor a
 131+ 9E96 C3 F3 9E                             jp      .SetRoofZ
 132+ 9E99 FE 00        .YTestDiv0:             cp      0
 133+ 9E9B 20 06                                jr      nz,.SkipYZeroTest
 134+ 9E9D 3E 60        .YDivideByZero:         ld      a,96
 135+ 9E9F B2                                   or      d
 136+ 9EA0 C3 F3 9E                             jp      .SetRoofZ
 137+ 9EA3 7B           .SkipYZeroTest:         ld      a,e
 138+ 9EA4 32 A0 80                             ld      (varP),a
 139+ 9EA7 7A                                   ld      a,d
 140+ 9EA8 CD 5B 96                             call    DVIDT
 141+ 9EAB 78                                   ld      a,b
 142+ 9EAC 32 32 C0     .SetRoofY:              ld      (UBnkrotmatRoofvY+1),a
 143+ 9EAF C3 3D 9F                             jp      .DoneRoof
 144+ 9EB2              ;...roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 145+ 9EB2 3A 36 C0     .ProcessRoofZ:          ld		a,(UBnkrotmatNosevX+1)      ; Failing that we default to Z
 146+ 9EB5 32 9F 81                             ld		(varQ),a				    ; q = nosev_y
 147+ 9EB8 3A 30 C0                             ld		a,(UBnkrotmatRoofvX+1)	    ;roov z
 148+ 9EBB CD 57 9D                             call	RSequQmulA
 149+ 9EBE 3A 38 C0                             ld		a,(UBnkrotmatNosevY+1)	    ; nosev z
 150+ 9EC1 32 9F 81                             ld		(varQ),a				    ; b = regX for now
 151+ 9EC4 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 152+ 9EC7 CD C7 94                             call	madDEequQmulAaddRS
 153+ 9ECA 7A                                   ld      a,d                         ; flip sign bit
 154+ 9ECB EE 80                                xor     SignOnly8Bit
 155+ 9ECD 57                                   ld      d,a
 156+ 9ECE 3A 3A C0                             ld      a,(UBnkrotmatNosevZ+1)
 157+ 9ED1 32 9F 81                             ld      (varQ),a
 158+ 9ED4 7A           .ZTest0Div:             ld      a,d
 159+ 9ED5 E6 7F                                and     $7F
 160+ 9ED7 B3                                   or      e
 161+ 9ED8 FE 00                                cp      0
 162+ 9EDA 20 0E                                jr      nz,.SkipZZeroTest
 163+ 9EDC                                      ZeroA
 163+ 9EDC AF          >                        xor a
 164+ 9EDD C3 F3 9E                             jp      .SetRoofZ
 165+ 9EE0 FE 00        .ZTestDiv0:             cp      0
 166+ 9EE2 20 06                                jr      nz,.SkipZZeroTest
 167+ 9EE4 3E 60        .ZDivideByZero:         ld      a,96
 168+ 9EE6 B2                                   or      d
 169+ 9EE7 C3 F3 9E                             jp      .SetRoofZ
 170+ 9EEA 7B           .SkipZZeroTest:         ld      a,e
 171+ 9EEB 32 A0 80                             ld      (varP),a
 172+ 9EEE 7A                                   ld      a,d
 173+ 9EEF CD 5B 96                             call    DVIDT
 174+ 9EF2 78                                   ld      a,b
 175+ 9EF3 32 34 C0     .SetRoofZ:              ld      (UBnkrotmatRoofvZ+1),a
 176+ 9EF6 C3 3D 9F                             jp      .DoneRoof
 177+ 9EF9              ;...roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 178+ 9EF9 3A 38 C0     .ProcessRoofX:          ld		a,(UBnkrotmatNosevY+1)      ; so we set Q to Nose Y
 179+ 9EFC 32 9F 81                             ld		(varQ),a					; q = nosev_y
 180+ 9EFF 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; A = roofv Y
 181+ 9F02 CD 57 9D                             call	RSequQmulA                  ; RS = NoseY & RoofY
 182+ 9F05 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 183+ 9F08 32 9F 81                             ld		(varQ),a					; b = regX for now
 184+ 9F0B 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 185+ 9F0E CD C7 94                             call	madDEequQmulAaddRS
 186+ 9F11 7A                                   ld      a,d                         ; flip sign bit
 187+ 9F12 EE 80                                xor     SignOnly8Bit
 188+ 9F14 57                                   ld      d,a
 189+ 9F15 3A 36 C0                             ld      a,(UBnkrotmatNosevX+1)
 190+ 9F18 32 9F 81                             ld      (varQ),a
 191+ 9F1B 7A           .XTest0Div:             ld      a,d
 192+ 9F1C E6 7F                                and     $7F
 193+ 9F1E B3                                   or      e
 194+ 9F1F FE 00                                cp      0
 195+ 9F21 20 0E                                jr      nz,.SkipXZeroTest
 196+ 9F23                                      ZeroA
 196+ 9F23 AF          >                        xor a
 197+ 9F24 C3 F3 9E                             jp      .SetRoofZ
 198+ 9F27 FE 00        .XTestDiv0:             cp      0
 199+ 9F29 20 06                                jr      nz,.SkipXZeroTest
 200+ 9F2B 3E 60        .XDivideByZero:         ld      a,96
 201+ 9F2D B2                                   or      d
 202+ 9F2E C3 3A 9F                             jp      .SetRoofX
 203+ 9F31 7B           .SkipXZeroTest:         ld      a,e
 204+ 9F32 32 A0 80                             ld      (varP),a
 205+ 9F35 7A                                   ld      a,d
 206+ 9F36 CD 5B 96                             call    DVIDT
 207+ 9F39 78                                   ld      a,b
 208+ 9F3A 32 30 C0     .SetRoofX:              ld      (UBnkrotmatRoofvX+1),a
 209+ 9F3D              .DoneRoof:              TidyNormaliseRoofV
 209+ 9F3D CD 78 9D    >                        call	CopyRotMatRoofVtoXX15
 209+ 9F40 CD F5 9D    >                        call	NormalizeXX15			; normalise z hi, its really TIS3
 209+ 9F43 CD BB 9D    >                        call	CopyXX15toRotMatRoofV
 210+ 9F46              ;...sidex = ((nosez * roofy) - nosey * roofz) / 96
 211+ 9F46 3A 3A C0     .DoSidevX:              ld		a,(UBnkrotmatNosevZ+1)      ;  -(-nosev_z * roofv_y + nosev_y * roofv_z) / 96
 212+ 9F49 EE 80                                xor     SignOnly8Bit
 213+ 9F4B 32 9F 81                             ld		(varQ),a					; q = nosev_y
 214+ 9F4E 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	     ;roov z
 215+ 9F51 CD 57 9D                             call	RSequQmulA
 216+ 9F54 3A 38 C0                             ld		a,(UBnkrotmatNosevY+1)		; nosev z
 217+ 9F57 32 9F 81                             ld		(varQ),a							; b = regX for now
 218+ 9F5A 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 219+ 9F5D CD C7 94                             call	madDEequQmulAaddRS
 220+ 9F60 CD A3 96                             call    BAequDEdiv96
 221+ 9F63 78                                   ld      a,b
 222+ 9F64 32 2A C0                             ld      (UBnkrotmatSidevX+1),a
 223+ 9F67              ;...sidey = ((nosex * roofz) - nosez * roofx) / 96
 224+ 9F67 3A 36 C0     .DoSidevY:              ld		a,(UBnkrotmatNosevX+1)      ; -(-nosev_x * roofv_z - nosev_z * roofv_x) / 96
 225+ 9F6A EE 80                                xor     SignOnly8Bit
 226+ 9F6C 32 9F 81                             ld		(varQ),a					; q = nosev_y
 227+ 9F6F 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roov z
 228+ 9F72 CD 57 9D                             call	RSequQmulA                  ; rs = nosex * roofz
 229+ 9F75 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 230+ 9F78 32 9F 81                             ld		(varQ),a					; b = regX for now
 231+ 9F7B 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 232+ 9F7E CD C7 94                             call	madDEequQmulAaddRS          ; DE = noseyz* roofz +
 233+ 9F81 CD A3 96                             call    BAequDEdiv96
 234+ 9F84 78                                   ld      a,b
 235+ 9F85 32 2C C0                             ld      (UBnkrotmatSidevY+1),a         ;-(-nosev_y * roofv_x + nosev_x * roofv_y) / 96
 236+ 9F88              ;...sidez = ((nosey * roofx) - nosex * roofy) / 96
 237+ 9F88 3A 38 C0     .DoSidevZ:              ld		a,(UBnkrotmatNosevY+1)      ;
 238+ 9F8B EE 80                                xor     SignOnly8Bit
 239+ 9F8D 32 9F 81                             ld		(varQ),a					; q = nosev_y
 240+ 9F90 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 241+ 9F93 CD 57 9D                             call	RSequQmulA
 242+ 9F96 3A 36 C0                             ld		a,(UBnkrotmatNosevX+1)		; nosev z
 243+ 9F99 32 9F 81                             ld		(varQ),a							; b = regX for now
 244+ 9F9C 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 245+ 9F9F CD C7 94                             call	madDEequQmulAaddRS
 246+ 9FA2 CD A3 96                             call    BAequDEdiv96
 247+ 9FA5 78                                   ld      a,b
 248+ 9FA6 32 2E C0                             ld      (UBnkrotmatSidevZ+1),a
 249+ 9FA9                                      ZeroA
 249+ 9FA9 AF          >                        xor a
 250+ 9FAA 32 29 C0                             ld      (UBnkrotmatSidevX),a
 251+ 9FAD 32 2B C0                             ld      (UBnkrotmatSidevY),a
 252+ 9FB0 32 2D C0                             ld      (UBnkrotmatSidevZ),a
 253+ 9FB3 C9                                   ret
 254+ 9FB4
 255+ 9FB4
 256+ 9FB4              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
 257+ 9FB4              		; b = regX on entry
 258+ 9FB4              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
 259+ 9FB4 08           		ex		af,af'
 260+ 9FB5 78           		ld		a,b
 261+ 9FB6 32 9F 81     		ld		(varQ),a
 262+ 9FB9 08           		ex		af,af'
 263+ 9FBA EE 80        		xor		$80							;	 flip sign of Acc
 264+ 9FBC CD A5 94     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
 265+ 9FBF              ; USES 				A BC E
 266+ 9FBF              ; DOES NOT USE		D HL
 267+ 9FBF              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
 268+ 9FBF 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
 269+ 9FC0 E6 80        		and		SignOnly8Bit						; ..
 270+ 9FC2 5F           		ld		e,a							; ..
 271+ 9FC3 79           		ld		a,c							; a = high byte again with sign bit cleared
 272+ 9FC4 E6 7F        		and		SignMask8Bit							; ..
 273+ 9FC6 06 FE        		ld		b,$FE						; slide counter T1
 274+ 9FC8              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
 275+ 9FC8 CB 27        		sla		a
 276+ 9FCA              		JumpIfALTNusng $60, TIS1SkipSub
 276+ 9FCA FE 60       >                        cp      $60
 276+ 9FCC DA D9 9F    >                        jp		c, TIS1SkipSub
 277+ 9FCF DE 60        		sbc		a,$60							; subtract 96
 278+ 9FD1 37           		scf
 279+ 9FD2 CB 10        		rl		b							;  T1
 280+ 9FD4 38 F2        		jr		c,TIS1RollTLoop
 281+ 9FD6              TIS1KIPCont:
 282+ 9FD6 78           		ld		a,b							;   T1
 283+ 9FD7 B3           		or		e							;   restore T sign
 284+ 9FD8 C9           		ret
 285+ 9FD9              TIS1SkipSub:
 286+ 9FD9 B7           	or			a
 287+ 9FDA CB 10        	rl			b							; T rolled left to push bit out the end
 288+ 9FDC 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
 289+ 9FDE C3 D6 9F     	jp			TIS1KIPCont
 290+ 9FE1
 291+ 9FE1              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
 292+ 9FE1              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
 293+ 9FE1
 294+ 9FE1
 295+ 9FE1
 296+ 9FE1
 297+ 9FE1              TidyRotYSmall:
 298+ 9FE1 CD 0A A1     		call	CalcRoofvZ
 299+ 9FE4 32 34 C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
 300+ 9FE7 C3 1B A0     		jp		NormaliseRoofV
 301+ 9FEA
 302+ 9FEA              TidyRotXSmall:
 303+ 9FEA AF           		xor		a
 304+ 9FEB 47           		ld		b,a
 305+ 9FEC 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
 306+ 9FEF E6 60        		and		%01100000
 307+ 9FF1 CA E1 9F     		jp		z,TidyRotYSmall
 308+ 9FF4 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 309+ 9FF7 47           		ld		b,a							; b = regX for now
 310+ 9FF8 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 311+ 9FFB CD D0 A0     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
 312+ 9FFE 32 32 C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
 313+ A001 C3 1B A0     		jp		NormaliseRoofV
 314+ A004              ; TIDY is broken
 315+ A004
 316+ A004
 317+ A004              TIDY:
 318+ A004
 319+ A004              ORTHOGALISE:
 320+ A004              ;-- NormaliseNosev
 321+ A004 CD 65 9D     		call	CopyRotMatNoseVtoXX15
 322+ A007 CD 84 99     		call	normaliseXX1596S7			; normalise z hi, its really TIS3
 323+ A00A CD 9E 9D     		call	CopyXX15toRotMatNoseV
 324+ A00D              .CheckNXSmall:
 325+ A00D 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)
 326+ A010 E6 60        		and		%01100000					; check top two magnitude bits
 327+ A012 CA EA 9F     		jp		z,TidyRotXSmall
 328+ A015              .RotXIsBig:
 329+ A015 CD 96 A0             call	CalcRoofvX
 330+ A018 32 30 C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 331+ A01B              NormaliseRoofV:
 332+ A01B CD 78 9D     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 333+ A01E CD 84 99     		call	normaliseXX1596S7			; normalise roof
 334+ A021              ;calc sidev x
 335+ A021 CD BB 9D     		call	CopyXX15toRotMatRoofV		; get back normalised version
 336+ A024 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)
 337+ A027 32 9F 81     		ld		(varQ),a					; q = nosev_y
 338+ A02A 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 339+ A02D CD 57 9D     		call	RSequQmulA
 340+ A030 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 341+ A033 47           		ld		b,a							; b = regX for now
 342+ A034 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 343+ A037 CD B4 9F     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 344+ A03A                      JumpIfAIsZero NormSideXNoNeg
 344+ A03A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 344+ A03B CA 40 A0    >                        jp	    z, NormSideXNoNeg
 345+ A03E EE 80        		xor		$80							; flip a to get -sidev_x
 346+ A040              NormSideXNoNeg:
 347+ A040 32 2A C0     		ld		(UBnkrotmatSidevX+1),a
 348+ A043              ;calc sidev y
 349+ A043 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 350+ A046 32 9F 81     		ld		(varQ),a
 351+ A049 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 352+ A04C CD 57 9D     		call	RSequQmulA
 353+ A04F 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 354+ A052 47           		ld		b,a							; b = regX for now
 355+ A053 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 356+ A056 CD B4 9F     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 357+ A059                      JumpIfAIsZero NormSideYNoNeg
 357+ A059 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 357+ A05A CA 5F A0    >                        jp	    z, NormSideYNoNeg
 358+ A05D EE 80        		xor		$80							; flip a to get -sidev_y
 359+ A05F              NormSideYNoNeg:
 360+ A05F 32 38 C0     		ld		(UBnkrotmatNosevY+1),a
 361+ A062              ;calc sidev z
 362+ A062 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 363+ A065 32 9F 81     		ld		(varQ),a
 364+ A068 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 365+ A06B CD 57 9D     		call	RSequQmulA
 366+ A06E 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 367+ A071 47           		ld		b,a							; b = regX for now
 368+ A072 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 369+ A075 CD B4 9F     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 370+ A078                      JumpIfAIsZero NormSideZNoNeg
 370+ A078 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 370+ A079 CA 7E A0    >                        jp	    z, NormSideZNoNeg
 371+ A07C EE 80        		xor		$80							; flip a to get -sidev_y
 372+ A07E              NormSideZNoNeg:
 373+ A07E 32 2C C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 374+ A081              .ClearLoBytes:
 375+ A081 21 35 C0     		ld		hl,UBnkrotmatNosevX
 376+ A084 06 09        		ld		b,9
 377+ A086 AF                   xor     a
 378+ A087              .ClearLoLoop:
 379+ A087 77           		ld		(hl),a						; zero out lo bytes
 380+ A088 23           		inc		hl
 381+ A089 23           		inc		hl
 382+ A08A 10 FB        		djnz	.ClearLoLoop
 383+ A08C CD 8B 9D     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 384+ A08F CD 84 99     		call	normaliseXX1596S7			; normalise roof
 385+ A092              ;calc sidev x
 386+ A092 CD D8 9D     		call	CopyXX15toRotMatSideV		; get back normalised version
 387+ A095
 388+ A095 C9           		ret
 389+ A096
 390+ A096
 391+ A096              CalcRoofvX:
 392+ A096              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 393+ A096              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 393+ A096 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 393+ A099 32 9F 81    >                        ld       (varQ),a
 394+ A09C 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 395+ A09F CD 57 9D     		call	RSequQmulA						; rs = nosez hi * roofz hi
 396+ A0A2              		ldCopyByte UBnkrotmatNosevY+1,varQ
 396+ A0A2 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 396+ A0A5 32 9F 81    >                        ld       (varQ),a
 397+ A0A8 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)
 398+ A0AB CD A5 94     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 399+ A0AE 7A           		ld		a,d
 400+ A0AF E6 80        		and 	$80
 401+ A0B1 FD 67        		ld		iyh,a
 402+ A0B3              ;DEBUG		ld		c,a
 403+ A0B3 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 404+ A0B6 4F           		ld		c,a								; temp save
 405+ A0B7 E6 80        		and		$80
 406+ A0B9 FD AC        		xor		iyh								; flip from saved multiply sign result
 407+ A0BB FD 67        		ld		iyh,a							; save nosesev sign to iyh
 408+ A0BD 79           		ld		a,c								; recover a
 409+ A0BE E6 7F        		and		$7F								; a is unsigned nosev x
 410+ A0C0 42           		ld		b,d
 411+ A0C1 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 412+ A0C2 57           		ld		d,a								; de = nosev x hi
 413+ A0C3 1E 00        		ld		e,0
 414+ A0C5 CD 63 98     		call	BC_Div_DE
 415+ A0C8 FD 7C        		ld		a,iyh							; get back sign from nosevx
 416+ A0CA EE 80        		xor		$80								; flip sign
 417+ A0CC E6 80        		and		$80								; keep sign bit only
 418+ A0CE B0           		or		b
 419+ A0CF C9           		ret
 420+ A0D0
 421+ A0D0
 422+ A0D0              CalcRoofvY:
 423+ A0D0              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 424+ A0D0              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 424+ A0D0 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 424+ A0D3 32 9F 81    >                        ld       (varQ),a
 425+ A0D6 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 426+ A0D9 CD 57 9D     		call	RSequQmulA
 427+ A0DC              		ldCopyByte UBnkrotmatNosevX+1,varQ
 427+ A0DC 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 427+ A0DF 32 9F 81    >                        ld       (varQ),a
 428+ A0E2 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)
 429+ A0E5 CD A5 94     		call	madXAequQmulAaddRS
 430+ A0E8 7A           		ld		a,d
 431+ A0E9 E6 80        		and 	$80
 432+ A0EB FD 67        		ld		iyh,a
 433+ A0ED 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 434+ A0F0 4F           		ld		c,a								; temp save
 435+ A0F1 E6 80        		and		$80
 436+ A0F3 FD AC        		xor		iyh								; flip from saved multiply sign result
 437+ A0F5 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 438+ A0F7 79           		ld		a,c								; recover a
 439+ A0F8 E6 7F        		and		$7F								; a is unsigned nosev x
 440+ A0FA 42           		ld		b,d
 441+ A0FB 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 442+ A0FC 57           		ld		d,a								; de = nosev x hi
 443+ A0FD 1E 00        		ld		e,0
 444+ A0FF CD 63 98     		call	BC_Div_DE
 445+ A102 FD 7C        		ld		a,iyh
 446+ A104 EE 80        		xor		$80
 447+ A106 E6 80        		and		$80
 448+ A108 B0           		or		b
 449+ A109 C9           		ret
 450+ A10A
 451+ A10A              CalcRoofvZ:
 452+ A10A              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 453+ A10A              		ldCopyByte UBnkrotmatNosevY+1,varQ
 453+ A10A 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 453+ A10D 32 9F 81    >                        ld       (varQ),a
 454+ A110 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)
 455+ A113 CD 57 9D     		call	RSequQmulA						; rs = NOSEy * ROOFy
 456+ A116              		ldCopyByte UBnkrotmatNosevX+1,varQ
 456+ A116 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 456+ A119 32 9F 81    >                        ld       (varQ),a
 457+ A11C 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)
 458+ A11F CD A5 94     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 459+ A122 7A           		ld		a,d
 460+ A123 E6 80        		and 	$80
 461+ A125 FD 67        		ld		iyh,a
 462+ A127 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 463+ A12A 4F           		ld		c,a								; temp save
 464+ A12B E6 80        		and		$80
 465+ A12D FD AC        		xor		iyh								; flip from saved multiply sign result
 466+ A12F FD 67        		ld		iyh,a							; save nosesev sign to iyh
 467+ A131 79           		ld		a,c								; recover a
 468+ A132 E6 7F        		and		$7F								; a is unsigned nosev x
 469+ A134 42           		ld		b,d
 470+ A135 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 471+ A136 57           		ld		d,a								; de = nosev x hi
 472+ A137 1E 00        		ld		e,0
 473+ A139 CD 63 98     		call	BC_Div_DE
 474+ A13C FD 7C        		ld		a,iyh
 475+ A13E EE 80        		xor		$80
 476+ A140 E6 80        		and		$80
 477+ A142 B0           		or		b
 478+ A143 C9           		ret
 479+ A144
# file closed: ./Maths/Utilities/tidy.asm
 633  A144                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ A144
   2+ A144              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ A144 BA          >                        cp     d
   2+ A145 D2 63 A1    >                        jp		nc,.Ll28Exit255
   3+ A148 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ A14A CB 27        .LL31:                  sla     a
   5+ A14C 38 0D                                jr      c,.LL29
   6+ A14E                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ A14E BA          >                        cp      d
   6+ A14F DA 54 A1    >                        jp		c, .SkipSub
   7+ A152 92                                   sub     d
   8+ A153                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ A153 B7          >                        or a
   9+ A154 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ A155 CB 13                                rl      e
  11+ A157 38 F1                                jr      c,.LL31
  12+ A159 7B                                   ld      a,e
  13+ A15A C9                                   ret
  14+ A15B 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ A15C 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ A15D CB 13                                rl      e                           ; rotate counter e left
  17+ A15F 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ A161 7B                                   ld      a,e                         ; stick result in a
  19+ A162 C9                                   ret
  20+ A163 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ A165 C9                                   ret
  22+ A166
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
 634  A166                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ A166              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ A166              TIS1:
   3+ A166 08           		ex		af,af'
   4+ A167 3A 89 80     		ld		a,(regX)
   5+ A16A 47           		ld		b,a
   6+ A16B 08           		ex		af,af'
   7+ A16C              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ A16C 08           		ex		af,af'
   9+ A16D 78           		ld		a,b
  10+ A16E 32 9F 81     		ld		(varQ),a
  11+ A171 08           		ex		af,af'
  12+ A172 EE 80        		xor		$80							;	 flip sign of Acc
  13+ A174 CD A5 94     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ A177              ; USES 				A BC E
  15+ A177              ; DOES NOT USE		D HL
  16+ A177              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ A177 47           		ld		b,a
  18+ A178 E6 80        		and		$80							;	hi sign
  19+ A17A 5F           		ld		e,a							;   e = varT
  20+ A17B 78           		ld		a,b
  21+ A17C E6 7F        		and		$7F							;	hi A7
  22+ A17E 06 FE        		ld		b,$FE						;   slide counter
  23+ A180 48           		ld		c,b							;   c == T1 ::  T1
  24+ A181              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ A181 CB 27        		sla		a
  26+ A183 FE 60        		cp		$60							; max 96
  27+ A185 30 02        		jr		nc,.DV4
  28+ A187 DE 60        		sbc		a,$60							;  SBC #&60
  29+ A189              .DV4:										; skip subtraction
  30+ A189 CB 11        		rl		c							;  T1
  31+ A18B 38 F4        		jr		c,.DVL3
  32+ A18D 79           		ld		a,c							;   T1
  33+ A18E B3           		or		e							;   restore T sign
  34+ A18F C9           		ret
  35+ A190
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
 635  A190
 636  A190                  INCLUDE "./GameEngine/Tactics.asm"
# file opened: ./GameEngine/Tactics.asm
   1+ A190
   2+ A190                                      DEFINE TACTICSDEBUG 1
   3+ A190              ;                       DEFINE ALWAYSANGRY 1
   4+ A190              ;                        DEFINE TARGETDEBUG 1
   5+ A190              MISSILEMAXPITCH         equ 3
   6+ A190              MISSILEMINPITCH         equ -3
   7+ A190              MISSILEMAXROLL          equ 3
   8+ A190              MISSILEMINROLL          equ -3
   9+ A190              ;Ship Tactics
  10+ A190              ;ShipTypeNormal          equ 0
  11+ A190              ;ShipTypeMissile         equ 1
  12+ A190              ;ShipTypeStation         equ 2
  13+ A190              ;ShipTypeJunk            equ 3
  14+ A190              ;ShipTypeScoopable       equ 4         ; a sub set of junk
  15+ A190              ; To be added
  16+ A190              ;ShipTypeTargoid
  17+ A190              ;ShipTypeHermit
  18+ A190              ; Maybe add the followign with ai flags changing in memory shiptype
  19+ A190              ;ShipTypePirate
  20+ A190              ;ShipTypeBountyHunter
  21+ A190              ;ShipTypeTrader
  22+ A190              ;ShipType.....
  23+ A190              ;ShipTypeMissionTypeA
  24+ A190              ;ShipTypeMissionTypeB
  25+ A190              ;ShipTypeMissionTypeETC
  26+ A190              ;ShipTypeNoAI
  27+ A190
  28+ A190
  29+ A190
  30+ A190 3A A7 12 A4  ShipAIJumpTable:      DW    NormalAI,   MissileAIV3,  StationAI,  JunkAI,     ScoopableAI
  30+ A194 C0 A1 C1 A1
  30+ A198 C2 A1
  31+ A19A C3 A1 C4 A1                        DW    ThargoidAI, NoAI,       NoAI,       NoAI,       NoAI
  31+ A19E C4 A1 C4 A1
  31+ A1A2 C4 A1
  32+ A1A4              ShipAiJumpTableMax:   EQU ($ - ShipAIJumpTable)/2
  33+ A1A4
  34+ A1A4
  35+ A1A4
  36+ A1A4              ;----------------------------------------------------------------------------------------------------------------------------------
  37+ A1A4              ; Main entry point to tactics. Every time it will do a a tidy and the do AI logic
  38+ A1A4              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
  39+ A1A4 21 18 68                            ld      hl,TidyCounter
  40+ A1A7 35                                  dec     (hl)
  41+ A1A8                                     ;call     z,TidyUbnK  ;TODO SEE IF THIS IS AN ISSUE
  42+ A1A8                                     ; This shoudl be a call nz to tidy *****ret     nz
  43+ A1A8 3E 10                               ld      a,16
  44+ A1AA 32 18 68                            ld      (TidyCounter),a
  45+ A1AD                                     ;call    TidyUbnK
  46+ A1AD                                     ; add AI in here too
  47+ A1AD 3A 45 C3                            ld       a,(ShipTypeAddr)
  48+ A1B0                                     ReturnIfAGTEusng ShipAiJumpTableMax              ; TODO capture duff jumps whilst debugging in case a new shjip type code is added
  48+ A1B0 FE 0A       >                        cp    ShipAiJumpTableMax
  48+ A1B2 D0          >                        ret	 nc
  49+ A1B3 21 90 A1                            ld       hl,ShipAIJumpTable
  50+ A1B6 ED 31                               add      hl,a
  51+ A1B8 ED 31                               add      hl,a
  52+ A1BA 7E                                  ld       a,(hl)                                  ; contrary to the name
  53+ A1BB 23                                  inc      hl                                      ; jp (hl) is really
  54+ A1BC 66                                  ld       h,(hl)                                  ; jp hl
  55+ A1BD 6F                                  ld       l,a                                     ;
  56+ A1BE E9                                  jp       hl                                      ; Follow the AI Jump Table
  57+ A1BF C9                                  ret                                              ; not needed as jp handles this
  58+ A1C0
  59+ A1C0
  60+ A1C0
  61+ A1C0              ; used  when no pre-checks are requrired, e.g. if forcing a space station from main loop
  62+ A1C0
  63+ A1C0
  64+ A1C0 C9           StationAI:              ret
  65+ A1C1 C9           JunkAI:                 ret
  66+ A1C2 C9           ScoopableAI:            ret
  67+ A1C3 C9           ThargoidAI:             ret
  68+ A1C4 C9           NoAI:                   ret
  69+ A1C5              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ A1C5              CalculateAgression:     IFDEF   ALWAYSANGRY
  71+ A1C5 ~                                        jp  UltraHostile
  72+ A1C5                                      ENDIF
  73+ A1C5 3A 47 C3                             ld      a,(ShipAIFlagsAddr)
  74+ A1C8 47                                   ld      b,a
  75+ A1C9 E6 02                                and     %00000010
  76+ A1CB 20 20                                jr      nz,.UltraHostile
  77+ A1CD 78                                   ld      a,b
  78+ A1CE E6 F0                                and     %11110000                               ; if it can can anger a fighter bay then generally more hostile as implies its a large ship
  79+ A1D0 21 5C C0                             ld      hl,UBnKMissilesLeft                     ; more missiles more agression
  80+ A1D3 B6                                   or      (hl)
  81+ A1D4 47                                   ld      b,a
  82+ A1D5 3A 46 C3                             ld      a,(ShipNewBitsAddr)
  83+ A1D8 E6 4E                                and     %01001110                               ; We look at if its a bounty hunter, hostile already, pirate and cop
  84+ A1DA B0                                   or      b
  85+ A1DB 47                                   ld      b,a
  86+ A1DC 3A 53 C0                             ld      a,(UBnKShipAggression)
  87+ A1DF                                      JumpIfALTNusng 64,.NotAlreadyAgressive
  87+ A1DF FE 40       >                        cp      64
  87+ A1E1 DA E8 A1    >                        jp		c, .NotAlreadyAgressive
  88+ A1E4 78                                   ld      a,b
  89+ A1E5 F6 80                                or      %10000000                               ; if its already at least 64 agressive then likley to stay so
  90+ A1E7 47                                   ld      b,a
  91+ A1E8 78           .NotAlreadyAgressive:   ld      a,b
  92+ A1E9 32 53 C0                             ld      (UBnKShipAggression),a
  93+ A1EC C9                                   ret
  94+ A1ED 3E FF        .UltraHostile:          ld      a,$FF
  95+ A1EF 32 53 C0                             ld      (UBnKShipAggression),a
  96+ A1F2 C9                                   ret
  97+ A1F3              ;----------------------------------------------------------------------------------------------------------------------------------
  98+ A1F3              ; set angry if possible, if its an innocent then flag the space station to get angry
  99+ A1F3 3A 46 C3     MakeHostile:            ld      a,(ShipNewBitsAddr)                     ; Check bit 5 of newb flags
 100+ A1F6                                      ;break
 101+ A1F6                                      JumpIfMemEqNusng ShipTypeAddr, ShipTypeStation, .SetNewbHostile
 101+ A1F6 3A 45 C3    >                        ld  a,(ShipTypeAddr)
 101+ A1F9 FE 02       >                        cp  ShipTypeStation
 101+ A1FB CA 1A A2    >                        jp  z,.SetNewbHostile
 102+ A1FE E6 20        .ItsNotAStation:        and     ShipIsBystander                         ; check if space station present if its a bystander
 103+ A200 C4 54 A2                             call    nz, SetStationHostile                   ; Set Space Station if present, Angry
 104+ A203 3A 54 C0                             ld      a,(UBnkaiatkecm)                        ; get AI data
 105+ A206                                      ReturnOnBitClear a, ShipAIEnabledBitNbr         ; if 0 then no AI attached so it can't get angry
 105+ A206 CB 7F       >                        bit 	ShipAIEnabledBitNbr,a
 105+ A208 C8          >                        ret		z
 106+ A209 4F                                   ld      c,a                                     ; Copy to c in case we need it later
 107+ A20A                                      SetMemToN UBnKAccel, 2                          ; set accelleration to 2 to speed up
 107+ A20A 3E 02       >                        ld      a,2
 107+ A20C 32 47 C0    >                        ld      (UBnKAccel),a
 108+ A20F CB 27                                sla     a                                       ; set pitch to 4
 109+ A211 32 49 C0                             ld      (UBnKRotZCounter),a                     ; .
 110+ A214 3A 47 C3                             ld      a,(ShipAIFlagsAddr)
 111+ A217                                      ReturnIfBitMaskClear ShipCanAnger
 111+ A217 E6 80       >                        and     ShipCanAnger
 111+ A219 C8          >                        ret     z
 112+ A21A CD 52 C5     .SetNewbHostile:        call    SetShipHostile
 113+ A21D C9                                   ret
 114+ A21E
 115+ A21E              ;----------------------------------------------------------------------------------------------------------------------------------
 116+ A21E C9           MissileDidHitUs:        ret ; TODO
 117+ A21F
 118+ A21F              ;----------------------------------------------------------------------------------------------------------------------------------
 119+ A21F              PlayerHitByMissile:     MMUSelectLayer1
 119+ A21F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 120+ A223 3E 05                                ld      a,L1ColourInkCyan
 121+ A225 CD A5 E0                             call    l1_set_border
 122+ A228 3A 3C C0                             ld      a,(UBnKMissileBlastDamage)
 123+ A22B 47                                   ld      b,a                                     ; b = damage
 124+ A22C 3A 28 C0                             ld      a,(UBnKzsgn)
 125+ A22F E6 80                                and     $80
 126+ A231 20 0A                                jr      nz,.HitRear
 127+ A233 3A CD 84     .HitFront:              ld      a,(ForeShield)
 128+ A236 CD DD 63                             call    ApplyDamage
 129+ A239 32 CD 84                             ld      (ForeShield),a
 130+ A23C C9                                   ret
 131+ A23D 3A CE 84     .HitRear:               ld      a,(AftShield)
 132+ A240 CD DD 63                             call    ApplyDamage
 133+ A243 32 CE 84                             ld      (AftShield),a
 134+ A246 C9                                   ret; TODO , do hit set up blast radius etc
 135+ A247              ;----------------------------------------------------------------------------------------------------------------------------------
 136+ A247              MissileHitShipA:        MMUSelectLayer1
 136+ A247 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 137+ A24B 3E 02                                ld      a,L1ColourInkRed
 138+ A24D CD A5 E0                             call    l1_set_border
 139+ A250 CD 7D C6                             call    UnivExplodeShip
 140+ A253 C9                                   ret; TODO hit ship do explosion, check for near by and if player is near and missile type logic, e.g. AP or HE
 141+ A254              ;----------------------------------------------------------------------------------------------------------------------------------
 142+ A254 CD 6F 87     SetStationHostile:      call    IsSpaceStationPresent                   ; only if present
 143+ A257 D8                                   ret     c
 144+ A258 3A 40 C0                             ld      a,(UbnKShipUnivBankNbr)                     ; save current bank
 145+ A25B FD 67                                ld      iyh,a
 146+ A25D                                      MMUSelectUniverseN 0                            ; space station is always 0
 146+ A25D ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 147+ A261 CD 52 C5                             call    SetShipHostile
 148+ A264 FD 7C                                ld      a,iyh                                   ; get prev bank back
 149+ A266                                      MMUSelectUniverseA                              ;
 149+ A266 C6 46       >                     add    a,BankUNIVDATA0
 149+ A268 ED 92 56    >                     nextreg UniverseMMU,       a
 150+ A26B C9                                   ret
 151+ A26C
 152+ A26C              ;----------------------------------------------------------------------------------------------------------------------------------
 153+ A26C              CheckMissileBlastInit:  ZeroA
 153+ A26C AF          >                        xor a
 154+ A26D 32 5C 83                             ld      (CurrentMissileCheck),a
 155+ A270 21 20 C0                             ld      hl,UBnKxlo                      ; Copy Blast Coordinates
 156+ A273 01 0C 00                             ld      bc,12                           ; and Damage stats
 157+ A276 11 63 82                             ld      de,MissileXPos
 158+ A279 ED B0                                ldir
 159+ A27B                                      ZeroA                                   ; we have processd enque request
 159+ A27B AF          >                        xor a
 160+ A27C 32 44 C0                             ld      (UBnKMissleHitToProcess),a      ;
 161+ A27F CD 3C A3                             call    CheckIfBlastHitUs               ; If we are in Range
 162+ A282 DC 1E A2                             call    c, MissileDidHitUs              ; Then we get hit
 163+ A285 C9                                   ret
 164+ A286
 165+ A286              ;----------------------------------------------------------------------------------------------------------------------------------
 166+ A286              CheckPointRange:        MACRO   ShipPos, ShipSign, MissilePos, MissileSign
 167+ A286 ~                                    ld      a,(MissilePos)                      ; check X Coord
 168+ A286 ~                                    ld      hl,(ShipSign)
 169+ A286 ~                                    xor     (hl)
 170+ A286 ~                                    and     SignOnly8Bit
 171+ A286 ~                                    ld      hl,(ShipPos)
 172+ A286 ~                                    ld      de,(MissilePos)
 173+ A286 ~                                    jr      z,.SignsDiffernt
 174+ A286 ~            .XSame:                 and     a
 175+ A286 ~                                    sbc     hl,de                               ; distance = Ship X - Missile X
 176+ A286 ~                                    JumpIfPositive      .CheckDiff              ; if result was -ve
 177+ A286 ~                                    NegHL
 178+ A286 ~                                    jp      .CheckDiff
 179+ A286 ~            .SignsDiffernt:         add     hl,de
 180+ A286 ~                                    ReturnIfNegative                            ; if we overflowed then return
 181+ A286 ~            .CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 182+ A286 ~                                    ReturnIfANotZero
 183+ A286 ~                                    ld      a,l
 184+ A286 ~                                    and     a
 185+ A286 ~                                    ReturnIfAGTEMemusng   CurrentMissileBlastRange
 186+ A286                                      ENDM
 187+ A286              ;...................................................................
 188+ A286              ; We only do one test per loop for spreading the load of work
 189+ A286 3A 5C 83     CheckMissileBlastLoop:  ld      a,(CurrentMissileCheck)
 190+ A289                                      ReturnIfAGTENusng   UniverseSlotListSize
 190+ A289 FE 0C       >                        cp    UniverseSlotListSize
 190+ A28B D0          >                        ret	 nc
 191+ A28C FD 6F                                ld      iyl,a
 192+ A28E 3C                                   inc     a                                   ; update for next slot so re can fast return on distance checks
 193+ A28F 32 5C 83                             ld      (CurrentMissileCheck),a
 194+ A292                                      ReturnIfSlotAEmpty
 194+ A292 21 5E 83    >                        ld      hl,UniverseSlotList
 194+ A295 ED 31       >                        add     hl,a
 194+ A297 7E          >                        ld      a,(hl)
 194+ A298 3C          >                        inc     a
 194+ A299 C8          >                        ret     z           ; if slot was ff inc would make it 0
 194+ A29A 3D          >                        dec     a           ; get original value back for later
 195+ A29B CD 6F 87                             call    IsSpaceStationPresent               ; If its a station its imune to missiles
 196+ A29E D8                                   ret     c                                   ; if we have a special mission to kill a staion then its type won't be space station for game logic
 197+ A29F 3A 51 C0                             ld      a,(UBnKexplDsp)                     ; Don't explode a ship twice
 198+ A2A2 E6 20                                and     ShipExploding                       ;
 199+ A2A4                                      ReturnIfNotZero                             ;
 199+ A2A4 C0          >                        ret     nz
 200+ A2A5 3A 84 82                             ld      a,(CurrentMissileBlastRange)
 201+ A2A8 FD 67                                ld      iyh,a                               ; iyh = missile blast depending on type
 202+ A2AA FD 7D        .CheckRange:            ld      a,iyl                               ; now page in universe data
 203+ A2AC                                      MMUSelectUniverseA
 203+ A2AC C6 46       >                     add    a,BankUNIVDATA0
 203+ A2AE ED 92 56    >                     nextreg UniverseMMU,       a
 204+ A2B1                                      CheckPointRange UBnKxlo, UBnKxsgn, MissileXPos, MissileXSgn  ; its a square but its good enough
 204+ A2B1 3A 63 82    >                        ld      a,(MissileXPos)                      ; check X Coord
 204+ A2B4 2A 22 C0    >                        ld      hl,(UBnKxsgn)
 204+ A2B7 AE          >                        xor     (hl)
 204+ A2B8 E6 80       >                        and     SignOnly8Bit
 204+ A2BA 2A 20 C0    >                        ld      hl,(UBnKxlo)
 204+ A2BD ED 5B 63 82 >                        ld      de,(MissileXPos)
 204+ A2C1 28 0F       >                        jr      z,.SignsDiffernt
 204+ A2C3 A7          >.XSame:                 and     a
 204+ A2C4 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 204+ A2C6             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 204+ A2C6 F2 D4 A2    >                        jp		p, .CheckDiff
 204+ A2C9             >                        NegHL
 204+ A2C9 AF          >                    xor a
 204+ A2CA 95          >                    sub l
 204+ A2CB 6F          >                    ld l,a
 204+ A2CC 9F          >                    sbc a,a
 204+ A2CD 94          >                    sub h
 204+ A2CE 67          >                    ld h,a
 204+ A2CF C3 D4 A2    >                        jp      .CheckDiff
 204+ A2D2 19          >.SignsDiffernt:         add     hl,de
 204+ A2D3             >                        ReturnIfNegative                            ; if we overflowed then return
 204+ A2D3 F8          >                        ret     m
 204+ A2D4 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 204+ A2D5             >                        ReturnIfANotZero
 204+ A2D5 A7          >                        and     a
 204+ A2D6 C0          >                        ret     nz
 204+ A2D7 7D          >                        ld      a,l
 204+ A2D8 A7          >                        and     a
 204+ A2D9             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 204+ A2D9 21 84 82    >                        ld      hl,CurrentMissileBlastRange
 204+ A2DC BE          >                        cp      (hl)
 204+ A2DD D0          >                        ret	    nc
 205+ A2DE                                      CheckPointRange UBnKylo, UBnKysgn, MissileYPos, MissileYSgn
 205+ A2DE 3A 66 82    >                        ld      a,(MissileYPos)                      ; check X Coord
 205+ A2E1 2A 25 C0    >                        ld      hl,(UBnKysgn)
 205+ A2E4 AE          >                        xor     (hl)
 205+ A2E5 E6 80       >                        and     SignOnly8Bit
 205+ A2E7 2A 23 C0    >                        ld      hl,(UBnKylo)
 205+ A2EA ED 5B 66 82 >                        ld      de,(MissileYPos)
 205+ A2EE 28 0F       >                        jr      z,.SignsDiffernt
 205+ A2F0 A7          >.XSame:                 and     a
 205+ A2F1 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 205+ A2F3             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 205+ A2F3 F2 01 A3    >                        jp		p, .CheckDiff
 205+ A2F6             >                        NegHL
 205+ A2F6 AF          >                    xor a
 205+ A2F7 95          >                    sub l
 205+ A2F8 6F          >                    ld l,a
 205+ A2F9 9F          >                    sbc a,a
 205+ A2FA 94          >                    sub h
 205+ A2FB 67          >                    ld h,a
 205+ A2FC C3 01 A3    >                        jp      .CheckDiff
 205+ A2FF 19          >.SignsDiffernt:         add     hl,de
 205+ A300             >                        ReturnIfNegative                            ; if we overflowed then return
 205+ A300 F8          >                        ret     m
 205+ A301 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 205+ A302             >                        ReturnIfANotZero
 205+ A302 A7          >                        and     a
 205+ A303 C0          >                        ret     nz
 205+ A304 7D          >                        ld      a,l
 205+ A305 A7          >                        and     a
 205+ A306             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 205+ A306 21 84 82    >                        ld      hl,CurrentMissileBlastRange
 205+ A309 BE          >                        cp      (hl)
 205+ A30A D0          >                        ret	    nc
 206+ A30B                                      CheckPointRange UBnKzlo, UBnKzsgn, MissileZPos, MissileZSgn
 206+ A30B 3A 69 82    >                        ld      a,(MissileZPos)                      ; check X Coord
 206+ A30E 2A 28 C0    >                        ld      hl,(UBnKzsgn)
 206+ A311 AE          >                        xor     (hl)
 206+ A312 E6 80       >                        and     SignOnly8Bit
 206+ A314 2A 26 C0    >                        ld      hl,(UBnKzlo)
 206+ A317 ED 5B 69 82 >                        ld      de,(MissileZPos)
 206+ A31B 28 0F       >                        jr      z,.SignsDiffernt
 206+ A31D A7          >.XSame:                 and     a
 206+ A31E ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 206+ A320             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 206+ A320 F2 2E A3    >                        jp		p, .CheckDiff
 206+ A323             >                        NegHL
 206+ A323 AF          >                    xor a
 206+ A324 95          >                    sub l
 206+ A325 6F          >                    ld l,a
 206+ A326 9F          >                    sbc a,a
 206+ A327 94          >                    sub h
 206+ A328 67          >                    ld h,a
 206+ A329 C3 2E A3    >                        jp      .CheckDiff
 206+ A32C 19          >.SignsDiffernt:         add     hl,de
 206+ A32D             >                        ReturnIfNegative                            ; if we overflowed then return
 206+ A32D F8          >                        ret     m
 206+ A32E 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 206+ A32F             >                        ReturnIfANotZero
 206+ A32F A7          >                        and     a
 206+ A330 C0          >                        ret     nz
 206+ A331 7D          >                        ld      a,l
 206+ A332 A7          >                        and     a
 206+ A333             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 206+ A333 21 84 82    >                        ld      hl,CurrentMissileBlastRange
 206+ A336 BE          >                        cp      (hl)
 206+ A337 D0          >                        ret	    nc
 207+ A338 CD 6C C6                             call    ShipMissileBlast                    ; Ship hit by missile blast
 208+ A33B C9                                   ret                                         ; we are done
 209+ A33C              ;...................................................................
 210+ A33C 3A 3B C0     CheckIfBlastHitUs:      ld      a,(UBnKMissileBlastRange)
 211+ A33F 4F                                   ld      c,a
 212+ A340 C3 47 A3                             jp      MissileHitUsCheckPos
 213+ A343              ;...................................................................
 214+ A343 3A 3D C0     CheckIfMissileHitUs:    ld      a,(UBnKMissileDetonateRange)
 215+ A346 4F                                   ld      c,a
 216+ A347              ;...................................................................
 217+ A347 2A 20 C0     MissileHitUsCheckPos:   ld      hl, (UBnKxlo)
 218+ A34A ED 5B 23 C0                          ld      de, (UBnKylo)
 219+ A34E ED 4B 26 C0                          ld      bc, (UBnKzlo)
 220+ A352 7C                                   ld      a,h
 221+ A353 B2                                   or      d
 222+ A354 B0                                   or      b
 223+ A355                                      ClearCarryFlag
 223+ A355 B7          >                        or a
 224+ A356                                      ReturnIfNotZero
 224+ A356 C0          >                        ret     nz
 225+ A357                                      SetCarryFlag
 225+ A357 37          >                        scf
 226+ A358 C9                                   ret
 227+ A359
 228+ A359                                      ZeroA
 228+ A359 AF          >                        xor a
 229+ A35A B4                                   or      h
 230+ A35B                                      ClearCarryFlag
 230+ A35B B7          >                        or a
 231+ A35C                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 231+ A35C C0          >                        ret     nz
 232+ A35D 7D                                   ld      a,l
 233+ A35E                                      ReturnIfAGTENusng    c                      ; return no carry if x far
 233+ A35E B9          >                        cp    c
 233+ A35F D0          >                        ret	 nc
 234+ A360 2A 23 C0     .CheckY:                ld      hl,(UBnKylo)
 235+ A363                                      ZeroA
 235+ A363 AF          >                        xor a
 236+ A364 B5                                   or      l
 237+ A365                                      ClearCarryFlag
 237+ A365 B7          >                        or a
 238+ A366                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 238+ A366 C0          >                        ret     nz
 239+ A367 7D                                   ld      a,l
 240+ A368                                      ReturnIfAGTENusng    c                      ; return no carry if y far
 240+ A368 B9          >                        cp    c
 240+ A369 D0          >                        ret	 nc
 241+ A36A 2A 26 C0     .CheckZ:                ld      hl,(UBnKzlo)
 242+ A36D                                      ZeroA
 242+ A36D AF          >                        xor a
 243+ A36E B5                                   or      l
 244+ A36F                                      ClearCarryFlag
 244+ A36F B7          >                        or a
 245+ A370                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 245+ A370 C0          >                        ret     nz
 246+ A371 7D                                   ld      a,l
 247+ A372                                      ReturnIfAGTENusng    c                      ; return no carry if z far
 247+ A372 B9          >                        cp    c
 247+ A373 D0          >                        ret	 nc
 248+ A374              .ItsAHit:               SetCarryFlag                                ; So must have hit
 248+ A374 37          >                        scf
 249+ A375 C9                                   ret
 250+ A376
 251+ A376              SelectMissileBank:      MACRO
 252+ A376 ~                                    ld      a,iyh
 253+ A376 ~                                    MMUSelectUnivBankA
 254+ A376                                      ENDM
 255+ A376
 256+ A376              SelectTargetBank:       MACRO
 257+ A376 ~                                    ld      a,iyl
 258+ A376 ~                                    MMUSelectUnivBankA
 259+ A376                                      ENDM
 260+ A376
 261+ A376              ;...................................................................
 262+ A376              ; ... Copy of target data for missile calcs etc
 263+ A376                                      INCLUDE "./TacticsWorkingData.asm"
# file opened: ./GameEngine/./TacticsWorkingData.asm
   1++A376 00           TacticsTargetShip       DB 0
   2++A377 20           TacticsPad0A            DB " "
   3++A378 00           TacticsMissileBank      DB 0
   4++A379 00           TacticsTargetBank       DB 0
   5++A37A 50 72 64 3E  TacticsPad0B            DB "Prd>"
   6++A37E 00 00        TacticsDotProduct1      DS 2
   7++A380 3E           TacticsPad0C            DB ">"
   8++A381 00 00        TacticsDotProduct2      DS 2
   9++A383 3E           TacticsPad0D            DB ">"
  10++A384 00 00        TacticsDotProduct3      DS 2
  11++A386 4D 69 73 6C  TacticsPad1A            DB "MislX"
  11++A38A 58
  12++A38B 00 00 00     TacticsMissileX         DS 3
  13++A38E 59           TacticsPad1B            DB "Y"
  14++A38F 00 00 00     TacticsMissileY         DS 3
  15++A392 5A           TacticsPad1C            DB "Z"
  16++A393 00 00 00     TacticsMissileZ         DS 3
  17++A396 4D 61 74 20  TcaticsPad2A            DB "Mat X"
  17++A39A 58
  18++A39B 20 59        TacticsPad2B            DB " Y"
  19++A39D 20 5A        TacticsPad2C            DB " Z"
  20++A39F 00           TacticsRotMatX          DB 0
  21++A3A0 00           TacticsToyMatXSign      DB 0
  22++A3A1 00           TacticsRotMatY          DB 0
  23++A3A2 00           TacticsToyMatYSign      DB 0
  24++A3A3 00           TacticsRotMatZ          DB 0
  25++A3A4 00           TacticsToyMatZSign      DB 0
  26++A3A5 20           TacticsPad2D            DB " "
  27++A3A6 54 61 72 67  TacticsPad3A            DB "Targ="
  27++A3AA 3D
  28++A3AB 00 00 00     TacticsTargetX          DS 3
  29++A3AE 00 00 00     TacticsTargetY          DS 3
  30++A3B1 00 00 00     TacticsTargetZ          DS 3
  31++A3B4 3D 20        TacticsPad3B            DB "= "
  32++A3B6 56 65 63 74  TacticsPad4A            DB "VectX"
  32++A3BA 58
  33++A3BB 00 00 00     TacticsVectorX:         DS 3
  34++A3BE 59           TacticsPad4B            DB "Y"
  35++A3BF 00 00 00     TacticsVectorY:         DS 3
  36++A3C2 5A           TacticsPad4C            DB "Z"
  37++A3C3 00 00 00     TacticsVectorZ:         DS 3
  38++A3C6 4E 6F 72 6D  TacticsPad5A            DB "NormX"
  38++A3CA 58
  39++A3CB 00 00        TacticsNormX:           DS 2
  40++A3CD 20 59        TacticsPad5B            DB " Y"
  41++A3CF 00 00        TacticsNormY:           DS 2
  42++A3D1 20 5A        TacticsPad5C            DB " Z"
  43++A3D3 00 00        TacticsNormZ:           DS 2
  44++A3D5 20           TacticsPad5D            DB " "
  45++A3D6 53 69 64 65  TacticsPad7A            DB "SideX"
  45++A3DA 58
  46++A3DB 00 00        TacticsSideX            DS 2
  47++A3DD 20 59        TacticsPad7B            DB " Y"
  48++A3DF 00 00        TacticsSideY            DS 2
  49++A3E1 20 5A        TacticsPad7C            DB " Z"
  50++A3E3 00 00        TacticsSideZ            DS 2
  51++A3E5 20 52 6F 6F  TacticsPad8A            DB " RoofX"
  51++A3E9 66 58
  52++A3EB 00 00        TacticsRoofX            DS 2
  53++A3ED 20 59        TacticsPad8B            DB " Y"
  54++A3EF 00 00        TacticsRoofY            DS 2
  55++A3F1 20 5A        TacticsPad8C            DB " Z"
  56++A3F3 00 00        TacticsRoofZ            DS 2
  57++A3F5 20 4E 6F 73  TacticsPad9A            DB " NoseX"
  57++A3F9 65 58
  58++A3FB 00 00        TacticsNoseX            DS 2
  59++A3FD 20 59        TacticsPad9B            DB " Y"
  60++A3FF 00 00        TacticsNoseY            DS 2
  61++A401 20 5A        TacticsPad9C            DB " Z"
  62++A403 00 00        TacticsNoseZ            DS 2
  63++A405 20           TacticsPad9D            DB " "
  64++A406 52 45 53 55  TacticsPadAA            DB "RESULT"
  64++A40A 4C 54
  65++A40C 00           TacticsRotX             DS 1
  66++A40D 20           TacticsPadAB            DB " "
  67++A40E 00           TacticsRotZ             DS 1
  68++A40F 20           TacticsPadAC            DB " "
  69++A410 00           TacticsSpeed            DS 1
  70++A411 20           TacticsPadAD            DB " "
  71++A412
  72++A412
# file closed: ./GameEngine/./TacticsWorkingData.asm
 264+ A412                                      INCLUDE "../GameEngine/MissileAI.asm"
# file opened: ./GameEngine/../GameEngine/MissileAI.asm
   1++A412                                      DEFINE MISSILEDEBUG 1
   2++A412                                      DEFINE MISSILEDOHIT 1
   3++A412
   4++A412              MISSILEMAXACCEL         equ 3
   5++A412              MISSILEMAXDECEL         equ -3
   6++A412                                      ;DEFINE MISSILEBREAK
   7++A412              ;.. Thsi version uses new kind logic
   8++A412              ;... Now the tactics if current ship is the missile, when we enter this SelectedUniverseSlot holds slot of missile
   9++A412              MissileAIV3:            ;ld      a,(ShipAIEnabled)
  10++A412                                      ;ReturnOnBitClear a, ShipAIEnabledBitNbr
  11++A412                                      IFDEF MISSILEDOHIT
  12++A412                                          JumpIfMemTrue UBnKMissleHitToProcess, .ProcessMissileHit
  12++A412 3A 44 C0    >                        ld      a,(UBnKMissleHitToProcess)
  12++A415 A7          >                        and     a
  12++A416 CA 78 A5    >                        jp      z, .ProcessMissileHit
  13++A419                                      ENDIF
  14++A419              .CheckForECM:           JumpIfMemNotZero ECMCountDown,.ECMIsActive  ; If ECM is running then kill the missile
  14++A419 3A B4 80    >                        ld  a,(ECMCountDown)
  14++A41C A7          >                        and a
  14++A41D C2 81 A5    >                        jp  nz,.ECMIsActive
  15++A420              .IsMissileHostile:      IsShipHostile                               ; is missle attacking us?
  15++A420 3A 46 C3    >                        ld      a,(ShipNewBitsAddr)
  15++A423 E6 04       >                        and     ShipIsHostile
  16++A425                                      JumpIfZero .MissileTargetingShip            ; Missile is friendly then z is set else targetting us
  16++A425 CA 4B A4    >                        jp	z,.MissileTargetingShip
  17++A428 2A 20 C0     .MissileTargetingPlayer:ld      hl, (UBnKxlo)                       ; check if missile in range of us
  18++A42B 3A 3D C0                             ld      a,(UBnKMissileDetonateRange)
  19++A42E 4F                                   ld      c,a                                 ; c holds detonation range
  20++A42F CD 47 A3                             call    MissileHitUsCheckPos
  21++A432 D2 3B A4     .MissileNotHitUsYet:    jp      nc, .UpdateTargetingUsPos
  22++A435 CD 1F A2     .MissleHitUs:           call    PlayerHitByMissile
  23++A438 C3 81 A5                             jp      .ECMIsActive                        ; we use ECM logic to destroy missile which eqneues is
  24++A43B CD 5A AA     .UpdateTargetingUsPos:  call    SetPlayerAsTarget
  25++A43E CD 35 AA                             call    CopyPosToVector
  26++A441 3A 4F 83                             ld      a,(SelectedUniverseSlot)            ; we will use this quite a lot with next bank switching
  27++A444 C6 46                                add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  28++A446 FD 67                                ld      iyh,a
  29++A448 C3 56 A5                             jp      .NormaliseDirection
  30++A44B              ;--- Missile is targeting other ship
  31++A44B 3A 4F 83     .MissileTargetingShip:  ld      a,(SelectedUniverseSlot)            ; we will use this quite a lot with next bank switching
  32++A44E C6 46        .SaveMissileBank:       add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  33++A450 FD 67                                ld      iyh,a
  34++A452                                      IFDEF MISSILEDEBUG
  35++A452 32 78 A3                                 ld  (TacticsMissileBank),a
  36++A455                                      ENDIF
  37++A455 3A 45 C0     .SaveTargetBank:        ld      a,(UBnKMissileTarget)               ; target will be used a lot too
  38++A458 C6 46                                add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  39++A45A FD 6F                                ld      iyl,a                               ; save target
  40++A45C                                      IFDEF MISSILEDEBUG
  41++A45C 32 79 A3                                 ld  (TacticsTargetBank),a
  42++A45F                                      ENDIF
  43++A45F              .IsMissleTargetGone:    JumpIfSlotAEmpty    .ECMIsActive            ; if the target was blown up then detonate
  43++A45F 21 5E 83    >                        ld      hl,UniverseSlotList
  43++A462 ED 31       >                        add     hl,a
  43++A464 7E          >                        ld      a,(hl)
  43++A465 3C          >                        inc     a
  43++A466 CA 81 A5    >                        jp      z,.ECMIsActive    ; if slot was ff inc would make it 0
  43++A469 3D          >                        dec     a           ; get original value back for later
  44++A46A              ;... Note we don't have to check for impact as we already have a loop doing that
  45++A46A              .SelectTargetShip:      SelectTargetBank
  45++A46A FD 7D       >                        ld      a,iyl
  45++A46C             >                        MMUSelectUnivBankA
  45++A46C ED 92 56    >                     nextreg UniverseMMU,       a
  46++A46F 3A 54 C0     .IsShipExploding:       ld      a,(UBnkaiatkecm)                    ; check exploding status
  47++A472 E6 20                                and     ShipExploding                       ; as if exploding then the missile will also explode
  48++A474 28 08                                jr      z,.UpdateTargetingShipX
  49++A476              .ShipIsExploding:       SelectMissileBank                           ; get missile back into memory
  49++A476 FD 7C       >                        ld      a,iyh
  49++A478             >                        MMUSelectUnivBankA
  49++A478 ED 92 56    >                     nextreg UniverseMMU,       a
  50++A47B C3 81 A5                             jp      .ECMIsActive
  51++A47E              ;--- At this point we already have the target banked in ready for calculating vector
  52++A47E              ; Tactics vector = missile - target
  53++A47E              .UpdateTargetingShipX:  IFDEF MISSILEBREAK
  54++A47E ~                                        break
  55++A47E                                      ENDIF
  56++A47E ED 5B 20 C0                          ld      de,(UBnKxlo)                        ; get target ship X
  57++A482 3A 22 C0                             ld      a,(UBnKxsgn)                        ; and flip sign so we have missile - target
  58++A485                                      IFDEF MISSILEDEBUG
  59++A485 ED 53 AB A3                              ld  (TacticsTargetX),de
  60++A489 32 AD A3                                 ld  (TacticsTargetX+2),a
  61++A48C                                      ENDIF
  62++A48C                                      FlipSignBitA
  62++A48C EE 80       >                        xor     SignOnly8Bit
  63++A48E 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
  64++A48F                                      SelectMissileBank
  64++A48F FD 7C       >                        ld      a,iyh
  64++A491             >                        MMUSelectUnivBankA
  64++A491 ED 92 56    >                     nextreg UniverseMMU,       a
  65++A494 2A 20 C0                             ld      hl,(UBnKxlo)                        ; get missile x
  66++A497 3A 22 C0                             ld      a,(UBnKxsgn)                        ; get missile x sign
  67++A49A                                      IFDEF MISSILEDEBUG
  68++A49A 22 8B A3                                 ld  (TacticsMissileX),hl
  69++A49D 32 8D A3                                 ld  (TacticsMissileX+2),a
  70++A4A0                                      ENDIF
  71++A4A0 47                                   ld      b,a
  72++A4A1 CD 92 92                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
  73++A4A4 22 BB A3                             ld      (TacticsVectorX),hl
  74++A4A7 32 BD A3                             ld      (TacticsVectorX+2),a
  75++A4AA              .UpdateTargetingShipY:  SelectTargetBank
  75++A4AA FD 7D       >                        ld      a,iyl
  75++A4AC             >                        MMUSelectUnivBankA
  75++A4AC ED 92 56    >                     nextreg UniverseMMU,       a
  76++A4AF ED 5B 23 C0                          ld      de,(UBnKylo)                        ; get target ship X
  77++A4B3 3A 25 C0                             ld      a,(UBnKysgn)
  78++A4B6                                      IFDEF MISSILEDEBUG
  79++A4B6 ED 53 AE A3                              ld  (TacticsTargetY),de
  80++A4BA 32 B0 A3                                 ld  (TacticsTargetY+2),a
  81++A4BD                                      ENDIF
  82++A4BD                                      FlipSignBitA
  82++A4BD EE 80       >                        xor     SignOnly8Bit
  83++A4BF 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
  84++A4C0                                      SelectMissileBank
  84++A4C0 FD 7C       >                        ld      a,iyh
  84++A4C2             >                        MMUSelectUnivBankA
  84++A4C2 ED 92 56    >                     nextreg UniverseMMU,       a
  85++A4C5 2A 23 C0                             ld      hl,(UBnKylo)                        ; get missile x
  86++A4C8 3A 25 C0                             ld      a,(UBnKysgn)                        ; get missile x sign
  87++A4CB                                      IFDEF MISSILEDEBUG
  88++A4CB 22 8F A3                                 ld  (TacticsMissileY),hl
  89++A4CE 32 91 A3                                 ld  (TacticsMissileY+2),a
  90++A4D1                                      ENDIF
  91++A4D1 47                                   ld      b,a
  92++A4D2 CD 92 92                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
  93++A4D5 22 BF A3                             ld      (TacticsVectorY),hl
  94++A4D8 32 C1 A3                             ld      (TacticsVectorY+2),a
  95++A4DB              .UpdateTargetingShipZ:  SelectTargetBank
  95++A4DB FD 7D       >                        ld      a,iyl
  95++A4DD             >                        MMUSelectUnivBankA
  95++A4DD ED 92 56    >                     nextreg UniverseMMU,       a
  96++A4E0 ED 5B 26 C0                          ld      de,(UBnKzlo)                        ; get target ship X
  97++A4E4 3A 28 C0                             ld      a,(UBnKzsgn)
  98++A4E7                                      IFDEF MISSILEDEBUG
  99++A4E7 ED 53 B1 A3                              ld  (TacticsTargetZ),de
 100++A4EB 32 B3 A3                                 ld  (TacticsTargetZ+2),a
 101++A4EE                                      ENDIF
 102++A4EE                                      FlipSignBitA
 102++A4EE EE 80       >                        xor     SignOnly8Bit
 103++A4F0 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 104++A4F1                                      SelectMissileBank
 104++A4F1 FD 7C       >                        ld      a,iyh
 104++A4F3             >                        MMUSelectUnivBankA
 104++A4F3 ED 92 56    >                     nextreg UniverseMMU,       a
 105++A4F6 2A 26 C0                             ld      hl,(UBnKzlo)                        ; get missile x
 106++A4F9 3A 28 C0                             ld      a,(UBnKzsgn)                        ; get missile x sign
 107++A4FC                                      IFDEF MISSILEDEBUG
 108++A4FC 22 93 A3                                 ld  (TacticsMissileZ),hl
 109++A4FF 32 95 A3                                 ld  (TacticsMissileZ+2),a
 110++A502                                      ENDIF
 111++A502
 112++A502 47                                   ld      b,a
 113++A503 CD 92 92                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 114++A506 22 C3 A3                             ld      (TacticsVectorZ),hl
 115++A509 32 C5 A3                             ld      (TacticsVectorZ+2),a
 116++A50C              ; by here missile in in memory and TacticsVector now holds distance
 117++A50C              ; if or ABS all high bytes is <> 0
 118++A50C              .CheckDistance:         IFDEF MISSILEDOHIT
 119++A50C 2A BC A3                                 ld      hl,(TacticsVectorX+1)              ; test if high bytes are set (value is assumed to be 24 bit, though calcs are only 16 so this is uneeded)
 120++A50F 7C                                       ld      a,h                                ; .
 121++A510 ED 5B C0 A3                              ld      de,(TacticsVectorY+1)              ; .
 122++A514 B2                                       or      d                                  ; .
 123++A515 ED 4B C4 A3                              ld      bc,(TacticsVectorZ+1)              ; .
 124++A519 B0                                       or      b                                  ; .
 125++A51A                                          ClearSignBitA                              ; .
 125++A51A E6 7F       >                        and     SignMask8Bit
 126++A51C                                          JumpIfNotZero       .FarAway               ; .
 126++A51C C2 2B A5    >                        jp	nz,.FarAway
 127++A51F B5                                       or      l                                    ; test for low byte bit 7, i.e high of 16 bit values
 128++A520 B3                                       or      e                                  ; .
 129++A521 B1                                       or      c                                  ; .
 130++A522                                          JumpIfNotZero       .FarAway               ; .
 130++A522 C2 2B A5    >                        jp	nz,.FarAway
 131++A525                                      ELSE
 132++A525 ~                                        jp                  .FarAway
 133++A525                                      ENDIF
 134++A525              ; If we get here its close enough to detonate
 135++A525 3A 45 C0     .CloseMissileExplode:   ld      a,(UBnKMissileTarget)
 136++A528 C3 47 A2                             jp      MissileHitShipA
 137++A52B              ;   *far away ** TODO need to set memory read write on page 0
 138++A52B              .FarAway:               SelectTargetBank
 138++A52B FD 7D       >                        ld      a,iyl
 138++A52D             >                        MMUSelectUnivBankA
 138++A52D ED 92 56    >                     nextreg UniverseMMU,       a
 139++A530                                      JumpIfMemFalse      UBnKECMFitted, .NoECM                   ; if target has ECM and enough energy to use it
 139++A530 3A 5A C0    >                        ld      a,(UBnKECMFitted)
 139++A533 A7          >                        and     a
 139++A534 C2 51 A5    >                        jp      nz, .NoECM
 140++A537                                      JumpIfMemLTNusng    UBnKEnergy,    ECMCounterMax, .NoECM    ; .
 140++A537 3A 58 C0    >                        ld      a,(UBnKEnergy)
 140++A53A FE 80       >                        cp      ECMCounterMax
 140++A53C DA 51 A5    >                        jp	  c,.NoECM
 141++A53F                                      JumpIfMemIsNotZero   ECMCountDown, .NoECM                ; . ECM is already active
 141++A53F 3A B4 80    >                        ld      a,(ECMCountDown)
 141++A542 A7          >                        and     a
 141++A543 C2 51 A5    >                        jp	    nz,.NoECM
 142++A546 3A 97 80     .TestIfUsingECM:        ld      a,(RandomSeed2)                                             ; if random < 16
 143++A549                                      JumpIfAGTENusng     16, .UpdateMissilePos                           ;   then fire ECM destroying missile
 143++A549 FE 10       >                        cp     16
 143++A54B D2 51 A5    >                        jp		nc,.UpdateMissilePos
 144++A54E              ;. If we get here then target is still paged in to fire ECM
 145++A54E C3 7A C5     .ZeroPageFireECM:       jp      FireECM                                             ; with an implicit return
 146++A551              ;                       implicit ret
 147++A551              ;. If we get here then target is still paged in with no ECM
 148++A551              .NoECM:
 149++A551                                    ;;;         ** can do 16 bit maths as we can take teh view that once a object/space station is 24 bit value away then
 150++A551                                    ;;;         ** targeting computer looses track and destructs missiles
 151++A551              ;--- Now we can actually update the missile AI
 152++A551              .UpdateMissilePos:      ;break
 153++A551                                      SelectMissileBank
 153++A551 FD 7C       >                        ld      a,iyh
 153++A553             >                        MMUSelectUnivBankA
 153++A553 ED 92 56    >                     nextreg UniverseMMU,       a
 154++A556                                      ;break
 155++A556                                      ;call    ORTHOGALISE
 156++A556              .NormaliseDirection:    IFDEF MISSILEBREAK
 157++A556 ~                                        break
 158++A556                                      ENDIF
 159++A556 CD BB AA                             call    NormalizeTactics                    ; Normalise vector down to 7 bit + sign byte (.TA19->TAS2)
 160++A559                                      IFDEF TACTICSDEBUG
 161++A559 CD 82 A9                                 call DebugTacticsCopy
 162++A55C                                      ENDIF
 163++A55C              .NegateDirection:       FlipSignMem TacticsVectorX+2                ; negate vector in XX15 so it points opposite direction
 163++A55C 3A BD A3    >                        ld  a,(TacticsVectorX+2)
 163++A55F EE 80       >                        xor SignOnly8Bit
 163++A561 32 BD A3    >                        ld  (TacticsVectorX+2),a
 164++A564                                      FlipSignMem TacticsVectorY+2                ; we have already negated the dot product above
 164++A564 3A C1 A3    >                        ld  a,(TacticsVectorY+2)
 164++A567 EE 80       >                        xor SignOnly8Bit
 164++A569 32 C1 A3    >                        ld  (TacticsVectorY+2),a
 165++A56C                                      FlipSignMem TacticsVectorZ+2                ; .
 165++A56C 3A C5 A3    >                        ld  a,(TacticsVectorZ+2)
 165++A56F EE 80       >                        xor SignOnly8Bit
 165++A571 32 C5 A3    >                        ld  (TacticsVectorZ+2),a
 166++A574 CD 8B A5                             call    SeekingLogic
 167++A577 C9                                   ret
 168++A578 3A 5C 83     .ProcessMissileHit:     ld      a,(CurrentMissileCheck)
 169++A57B                                      ReturnIfAGTENusng UniverseSlotListSize  ; need to wait another loop
 169++A57B FE 0C       >                        cp    UniverseSlotListSize
 169++A57D D0          >                        ret	 nc
 170++A57E C3 6C A2     .ActivateNewExplosion:  jp  CheckMissileBlastInit               ; initialise
 171++A581                                      ; DUMMY RET get a free return by using jp
 172++A581 CD 7D C6     .ECMIsActive:           call    UnivExplodeShip                 ; ECM detonates missile
 173++A584                                      SetMemTrue  UBnKMissleHitToProcess      ; Enque an explosion
 173++A584 AF          >                        xor     a
 173++A585 32 44 C0    >                        ld      (UBnKMissleHitToProcess),a
 174++A588 C3 78 A5                             jp      .ProcessMissileHit              ; lets see if we can enqueue now
 175++A58B                                      ; DUMMY RET get a free return as activenewexplosion does jp to init with a free ret
 176++A58B
 177++A58B CD C7 A9     SeekingLogic:           call    XX12EquTacticsDotNosev              ; SA = nose . XX15                           (     ->TAS3)
 178++A58E 32 7E A3                             ld      (TacticsDotProduct1),a              ; CNT = A (high byte of dot product)
 179++A591 3A A1 81                             ld      a,(varS)                            ; get sign from dot product
 180++A594 32 82 A3                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 181++A597 CD 1D AA     .RoofDotProduct:        call    XX12EquTacticsDotRoofv              ; Now tran the roof for rotation
 182++A59A 32 81 A3                             ld      (TacticsDotProduct2),a              ; so if its +ve then the roof is similar so pull up to head towards it
 183++A59D 3A A1 81                             ld      a,(varS)                            ; .
 184++A5A0 32 82 A3                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 185++A5A3 CD AD A5                             call    SimplifiedShipPitchv3
 186++A5A6 CD D1 A5                             call    SimplifiedShipRollv3
 187++A5A9 CD FF A5                             call    SimplifiedShipSpeedv3
 188++A5AC C9                                   ret
 189++A5AD
 190++A5AD              SimplifiedShipPitchv3:  ;break
 191++A5AD 2A 81 A3                             ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 192++A5B0 7C                                   ld      a,h                                ; .
 193++A5B1 EE 80                                xor     $80                                ; .
 194++A5B3 E6 80                                and     $80                                ; .
 195++A5B5 67                                   ld      h,a                                ; h  = flipped sign
 196++A5B6 7D                                   ld      a,l                                ; a = value * 2
 197++A5B7 CB 27                                sla     a                                  ;
 198++A5B9                                      JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 198++A5B9 FE 10       >                        cp     16
 198++A5BB D2 C7 A5    >                        jp		nc,.skipPitchZero
 199++A5BE                                      ZeroA                                      ; else we zero pitch but
 199++A5BE AF          >                        xor a
 200++A5BF B4                                   or      h                                  ; we need to retain the sign
 201++A5C0 32 49 C0                             ld      (UBnKRotZCounter),a                ; .
 202++A5C3                                      IFDEF MISSILEDEBUG
 203++A5C3 32 0E A4                                 ld  (TacticsRotZ),a
 204++A5C6                                      ENDIF
 205++A5C6 C9                                   ret
 206++A5C7 3E 02        .skipPitchZero:         ld      a,2
 207++A5C9 B4                                   or      h
 208++A5CA 32 49 C0                             ld      (UBnKRotZCounter),a
 209++A5CD                                      IFDEF MISSILEDEBUG
 210++A5CD 32 0E A4                                 ld  (TacticsRotZ),a
 211++A5D0                                      ENDIF
 212++A5D0 C9                                   ret
 213++A5D1
 214++A5D1              ;Direct on dot product nose is $24
 215++A5D1              ; Position                  Pitch   Roll    Speed
 216++A5D1              ; Top left forwards         up      -ve     +
 217++A5D1              ; Top right forwards        up      +ve     +
 218++A5D1              ; Bottom left forwards      down    -ve     +
 219++A5D1              ; Bottom right forwards     down    +ve     +
 220++A5D1              ; Top left rear             up      -ve     -
 221++A5D1              ; Top right rear            up      +ve     -
 222++A5D1              ; Bottom left rear          down    -ve     -
 223++A5D1              ; Bottom right rear         down    +ve     -
 224++A5D1
 225++A5D1
 226++A5D1
 227++A5D1              SimplifiedShipRollv3:  ; ld      a,(UBnKRotXCounter)               ; get current roll
 228++A5D1                                     ; sla     a                                 ; * 2 to also abs
 229++A5D1                                     ; ReturnIfAGTENusng 32                      ; and so if >32 skip
 230++A5D1 CD 23 AA                             call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 231++A5D4 32 84 A3                             ld      (TacticsDotProduct3),a             ; .
 232++A5D7 6F                                   ld      l,a                                ; .
 233++A5D8 3A A1 81                             ld      a,(varS)                           ; .
 234++A5DB 32 85 A3                             ld      (TacticsDotProduct3+1),a           ; .
 235++A5DE 67                                   ld      h,a                                ; h = sign sidev
 236++A5DF 3A 82 A3                             ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 237++A5E2                                      ;xor     $80                               ; .
 238++A5E2                                      ;xor     h                                 ; b = flip against pitch sign
 239++A5E2                                      ;and     $80                               ; .
 240++A5E2                                      ;xor $80
 241++A5E2 47                                   ld      b,a                                ; b = roof product
 242++A5E3 7D                                   ld      a,l                                ; a = abs sidev  * 2
 243++A5E4 CB 27                                sla     a                                  ;
 244++A5E6                                      JumpIfAGTENusng 16,.skipRollZero           ;
 244++A5E6 FE 10       >                        cp     16
 244++A5E8 D2 F4 A5    >                        jp		nc,.skipRollZero
 245++A5EB                                      ZeroA                                      ; if its zoer then set rotx to zero
 245++A5EB AF          >                        xor a
 246++A5EC B0                                   or      b
 247++A5ED 32 48 C0                             ld      (UBnKRotXCounter),a
 248++A5F0                                      IFDEF MISSILEDEBUG
 249++A5F0 32 0C A4                                 ld  (TacticsRotX),a
 250++A5F3                                      ENDIF
 251++A5F3 C9                                   ret
 252++A5F4 3E 02        .skipRollZero:          ld      a,2
 253++A5F6 B4                                   or      h
 254++A5F7 A8                                   xor     b
 255++A5F8 32 48 C0                             ld      (UBnKRotXCounter),a
 256++A5FB                                      IFDEF MISSILEDEBUG
 257++A5FB 32 0C A4                                 ld  (TacticsRotX),a
 258++A5FE                                      ENDIF
 259++A5FE C9                                   ret
 260++A5FF
 261++A5FF 2A 7E A3     SimplifiedShipSpeedv3:  ld      hl,(TacticsDotProduct1)
 262++A602 7C                                   ld      a,h
 263++A603 A7                                   and     a
 264++A604 20 13                                jr      nz,.SlowDown
 265++A606 ED 5B 81 A3                          ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 266++A60A 7D                                   ld      a,l
 267++A60B                                      JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 267++A60B FE 16       >                        cp      22
 267++A60D DA 19 A6    >                        jp		c, .SlowDown
 268++A610 3E 03        .Accelerate:            ld      a,3                                 ; else
 269++A612 32 47 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 270++A615                                      IFDEF MISSILEDEBUG
 271++A615 32 10 A4                                 ld  (TacticsSpeed),a
 272++A618                                      ENDIF
 273++A618 C9                                   ret                                         ;  .
 274++A619              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 274++A619 FE 12       >                        cp      18
 274++A61B DA 27 A6    >                        jp		c, .NoSpeedChange
 275++A61E 3E FE        .Deccelerate:           ld      a,-2
 276++A620 32 47 C0                             ld      (UBnKAccel),a
 277++A623                                      IFDEF MISSILEDEBUG
 278++A623 32 10 A4                                 ld  (TacticsSpeed),a
 279++A626                                      ENDIF
 280++A626 C9                                   ret
 281++A627              .NoSpeedChange:         ZeroA                                       ; else no change
 281++A627 AF          >                        xor a
 282++A628 32 47 C0                             ld      (UBnKAccel),a
 283++A62B                                      IFDEF MISSILEDEBUG
 284++A62B 32 10 A4                                 ld  (TacticsSpeed),a
 285++A62E                                      ENDIF
 286++A62E C9                                   ret
 287++A62F
 288++A62F
 289++A62F CD 6E A6     SimplifiedShipSpeedv3b:  call    GetDistance                         ;
 290++A632 7C                                   ld      a,h
 291++A633 A7                                   and     a
 292++A634 06 16                                ld      b,22
 293++A636 20 08                                jr      nz,.NotSlow
 294++A638 7D           .CloseSlowTest:         ld      a,l
 295++A639                                      JumpIfAGTENusng 30, .NotSlow
 295++A639 FE 1E       >                        cp     30
 295++A63B D2 40 A6    >                        jp		nc,.NotSlow
 296++A63E 06 3C                                ld      b,60
 297++A640 2A 7E A3     .NotSlow:               ld      hl,(TacticsDotProduct1)             ; if nosedir is negative (pointing the wrong way)
 298++A643 7C                                   ld      a,h                                 ; or nosedir < 22 (very far off)
 299++A644 E6 80                                and     $80                                 ; do decelleration test
 300++A646 C2 57 A6                             jp      nz,.DecelTest                       ; .
 301++A649 7D                                   ld      a,l                                 ; .
 302++A64A                                      JumpIfALTNusng b, .DecelTest                ; .
 302++A64A B8          >                        cp      b
 302++A64B DA 57 A6    >                        jp		c, .DecelTest
 303++A64E 3E 03        .Accelerate:            ld      a,3                                 ; else
 304++A650 32 47 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 305++A653                                      IFDEF MISSILEDEBUG
 306++A653 32 10 A4                                 ld  (TacticsSpeed),a
 307++A656                                      ENDIF
 308++A656 C9                                   ret                                         ;  .
 309++A657 7D           .DecelTest:             ld      a,l                                 ; if abs acelleration > 18
 310++A658                                      JumpIfAGTENusng 18 ,.Deccelerate             ;    decelerate by 2
 310++A658 FE 12       >                        cp     18
 310++A65A D2 65 A6    >                        jp		nc,.Deccelerate
 311++A65D              .NoSpeedChange:         ZeroA                                       ; else no change
 311++A65D AF          >                        xor a
 312++A65E 32 47 C0                             ld      (UBnKAccel),a
 313++A661                                      IFDEF MISSILEDEBUG
 314++A661 32 10 A4                                 ld  (TacticsSpeed),a
 315++A664                                      ENDIF
 316++A664 C9                                   ret
 317++A665 3E FE        .Deccelerate:           ld      a,-2
 318++A667 32 47 C0                             ld      (UBnKAccel),a
 319++A66A                                      IFDEF MISSILEDEBUG
 320++A66A 32 10 A4                                 ld  (TacticsSpeed),a
 321++A66D                                      ENDIF
 322++A66D C9                                   ret
 323++A66E
 324++A66E 2A BB A3     GetDistance:            ld      hl,(TacticsVectorX)
 325++A671 ED 5B BF A3                          ld      de,(TacticsVectorY)
 326++A675 ED 4B C3 A3                          ld      bc,(TacticsVectorZ)
 327++A679 7C                                   ld      a,h
 328++A67A E6 7F                                and     $7F
 329++A67C 67                                   ld      h,a
 330++A67D 78                                   ld      a,b
 331++A67E E6 7F                                and     $7F
 332++A680 47                                   ld      b,a
 333++A681 7A                                   ld      a,d
 334++A682 E6 7F                                and     $7F
 335++A684 57                                   ld      d,a
 336++A685 09                                   add     hl,bc
 337++A686 19                                   add     hl,de
 338++A687                                      ShiftHLRight1
 338++A687 CB 3C       >			   srl h
 338++A689 CB 1D       >			   rr  l
 339++A68B                                      ShiftHLRight1
 339++A68B CB 3C       >			   srl h
 339++A68D CB 1D       >			   rr  l
 340++A68F C9                                   ret
 341++A690
 342++A690
# file closed: ./GameEngine/../GameEngine/MissileAI.asm
 265+ A690                                      INCLUDE "../GameEngine/NormalAI.asm"
# file opened: ./GameEngine/../GameEngine/NormalAI.asm
   1++A690               ;                       DEFINE DEBUGFORCEHOSTILE 1
   2++A690
   3++A690 00 00 00     NewLaunchUBnKX          DS 3
   4++A693 00 00 00     NewLaunchUBnKY          DS 3
   5++A696 00 00 00     NewLaunchUBnKZ          DS 3
   6++A699
   7++A699 00 00 00...  NewLaunchMatrix         DS 3*3*2    ; 3x3 matrix of 3 bytes
   8++A6AB 00           NewLaunchSpeed          DS 1
   9++A6AC 00           NewLaunchRotX           DS 1
  10++A6AD 00           NewLaunchRotZ           DS 1
  11++A6AE
  12++A6AE              NewLaunchDataBlockSize  equ (3*3) + (3*3*2)
  13++A6AE              ; ---------------------------------------------------------------------------------------------------------------------------------
  14++A6AE              ; a = y offset negative from center of ship
  15++A6AE 21 20 C0     CalcLaunchOffset:       ld      hl,UBnKxlo
  16++A6B1 11 90 A6                             ld      de,NewLaunchUBnKX
  17++A6B4 01 1B 00                             ld      bc,NewLaunchDataBlockSize
  18++A6B7 ED B0                                ldir
  19++A6B9 CB 27        .ApplyOffset:           sla     a
  20++A6BB CB 27                                sla     a
  21++A6BD FD 6F                                ld      iyl,a                          ; save pre calculated speed
  22++A6BF              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatRoofvX     ; e =  ABS (nosev x hi) c = sign
  22++A6BF 5F          >                        ld      e,a
  22++A6C0 2A 2F C0    >                        ld      hl,(UBnkrotmatRoofvX)
  22++A6C3 7C          >                        ld      a,h
  22++A6C4             >                        ClearSignBitA
  22++A6C4 E6 7F       >                        and     SignMask8Bit
  22++A6C6 57          >                        ld      d,a
  22++A6C7 ED 30       >                        mul     de
  22++A6C9 7C          >                        ld      a,h
  22++A6CA             >                        SignBitOnlyA
  22++A6CA E6 80       >                        and     SignOnly8Bit
  22++A6CC 47          >                        ld      b,a;ld      c,a
  22++A6CD 62          >                        ld      h,d;ld      e,d
  22++A6CE 0E 00       >                        ld      c,0;ld      d,0
  23++A6D0 78                                   ld      a,b
  24++A6D1 EE 80                                xor     $80
  25++A6D3 47                                   ld      b,a
  26++A6D4              .AddSpeedToX:           AddSpeedToVert NewLaunchUBnKX
  26++A6D4 ED 5B 91 A6 >                        ld      de,(NewLaunchUBnKX+1)
  26++A6D8 3A 90 A6    >                        ld      a,(NewLaunchUBnKX)
  26++A6DB 6F          >                        ld      l,a
  26++A6DC CD 10 93    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  26++A6DF 7D          >                        ld      a,l
  26++A6E0 32 90 A6    >                        ld      (NewLaunchUBnKX),a
  26++A6E3 ED 53 91 A6 >                        ld      (NewLaunchUBnKX+1),de
  27++A6E7              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatRoofvY
  27++A6E7 FD 5D       >                        ld      e,iyl
  27++A6E9 2A 31 C0    >                        ld      hl,(UBnkrotmatRoofvY)
  27++A6EC 7C          >                        ld      a,h
  27++A6ED             >                        ClearSignBitA
  27++A6ED E6 7F       >                        and     SignMask8Bit
  27++A6EF 57          >                        ld      d,a
  27++A6F0 ED 30       >                        mul     de
  27++A6F2 7C          >                        ld      a,h
  27++A6F3             >                        SignBitOnlyA
  27++A6F3 E6 80       >                        and     SignOnly8Bit
  27++A6F5 47          >                        ld      b,a;ld      c,a
  27++A6F6 62          >                        ld      h,d;ld      e,d
  27++A6F7 0E 00       >                        ld      c,0;ld      d,0
  28++A6F9 78                                   ld      a,b
  29++A6FA EE 80                                xor     $80
  30++A6FC 47                                   ld      b,a
  31++A6FD              .AddSpeedToY:           AddSpeedToVert NewLaunchUBnKY
  31++A6FD ED 5B 94 A6 >                        ld      de,(NewLaunchUBnKY+1)
  31++A701 3A 93 A6    >                        ld      a,(NewLaunchUBnKY)
  31++A704 6F          >                        ld      l,a
  31++A705 CD 10 93    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  31++A708 7D          >                        ld      a,l
  31++A709 32 93 A6    >                        ld      (NewLaunchUBnKY),a
  31++A70C ED 53 94 A6 >                        ld      (NewLaunchUBnKY+1),de
  32++A710              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatRoofvZ
  32++A710 FD 5D       >                        ld      e,iyl
  32++A712 2A 33 C0    >                        ld      hl,(UBnkrotmatRoofvZ)
  32++A715 7C          >                        ld      a,h
  32++A716             >                        ClearSignBitA
  32++A716 E6 7F       >                        and     SignMask8Bit
  32++A718 57          >                        ld      d,a
  32++A719 ED 30       >                        mul     de
  32++A71B 7C          >                        ld      a,h
  32++A71C             >                        SignBitOnlyA
  32++A71C E6 80       >                        and     SignOnly8Bit
  32++A71E 47          >                        ld      b,a;ld      c,a
  32++A71F 62          >                        ld      h,d;ld      e,d
  32++A720 0E 00       >                        ld      c,0;ld      d,0
  33++A722 78                                   ld      a,b
  34++A723 EE 80                                xor     $80
  35++A725 47                                   ld      b,a
  36++A726              .AddSpeedToZ:           AddSpeedToVert NewLaunchUBnKZ
  36++A726 ED 5B 97 A6 >                        ld      de,(NewLaunchUBnKZ+1)
  36++A72A 3A 96 A6    >                        ld      a,(NewLaunchUBnKZ)
  36++A72D 6F          >                        ld      l,a
  36++A72E CD 10 93    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  36++A731 7D          >                        ld      a,l
  36++A732 32 96 A6    >                        ld      (NewLaunchUBnKZ),a
  36++A735 ED 53 97 A6 >                        ld      (NewLaunchUBnKZ+1),de
  37++A739 C9                                   ret
  38++A73A
  39++A73A
  40++A73A
  41++A73A                                      ;DEFINE MISSILEBREAK
  42++A73A              ;.. Thsi version uses new kind logic
  43++A73A              ;... Now the tactics if current ship is the missile, when we enter this SelectedUniverseSlot holds slot of missile
  44++A73A              NormalAI:               ;ld      a,(ShipAIEnabled)
  45++A73A                                      ;ReturnOnBitClear a, ShipAIEnabledBitNbr
  46++A73A CD 8B C5     .GetEnergy:             call    RechargeEnergy                  ; TA13 if enegery <= maxumum value for blueprint then recharge energy by 1
  47++A73D 3A 46 C3                             ld      a,(ShipNewBitsAddr)
  48++A740 E6 01        .IsItATrader:           and     ShipIsTrader
  49++A742 20 06                                jr      nz, .NotATrader
  50++A744 CD DE 87     .ItsATrader:            call    doRandom
  51++A747                                      ReturnIfALTNusng 100                    ; 61% chance do nothing
  51++A747 FE 64       >                        cp    100
  51++A749 D8          >                        ret	 c
  52++A74A                                      IFDEF DEBUGFORCEHOSTILE
  53++A74A ~                                            call SetShipHostile
  54++A74A ~                                            ld      a,(ShipNewBitsAddr)
  55++A74A ~                                            or      ShipIsBountyHunter
  56++A74A ~                                            ld      (ShipNewBitsAddr),a
  57++A74A                                      ENDIF
  58++A74A              .NotATrader:
  59++A74A 3A 46 C3     .IsItBountyHunter:      ld      a,(ShipNewBitsAddr)
  60++A74D E6 02                                and     ShipIsBountyHunter
  61++A74F 20 08                                jr      nz, .NotBountyHunter
  62++A751              .CheckFIST:             CallIfMemGTENusng FugitiveInnocentStatus, 40, SetShipHostile ; if our FIST rating >= 40 set ship hostile (bit 2)
  62++A751 3A 44 82    >                        ld      a,(FugitiveInnocentStatus)
  62++A754 FE 28       >                        cp      40
  62++A756 D4 52 C5    >                        call    nc,SetShipHostile
  63++A759              .NotBountyHunter:
  64++A759 3A 46 C3     .CheckHostile:          ld      a,(ShipNewBitsAddr)
  65++A75C E6 04                                and     ShipIsHostile
  66++A75E 20 0D                                jr      nz,.ItsHostile
  67++A760 3A 46 C3     .ItsNotHostile:         ld      a,(ShipNewBitsAddr)
  68++A763 E6 10                                and     ShipIsDocking                   ; if bit 4 is not clear
  69++A765 20 03                                jr      nz,.NotDocking
  70++A767 DD 01        .ItsDocking:            break
  71++A769                                      ;       do docking algorithm
  72++A769                                      ;       return
  73++A769 C9                                   ret
  74++A76A DD 01        .NotDocking:            break
  75++A76C                                      ;       calcuilate vector to planet
  76++A76C                                      ;       move towards planet
  77++A76C                                      ;       return
  78++A76C C9                                   ret
  79++A76D 3A 46 C3     .ItsHostile:            ld      a,(ShipNewBitsAddr)
  80++A770 E6 08        .IsItPirate:            and     ShipIsPirate
  81++A772 20 0E                                jr      nz,.NotAPirate
  82++A774              .IsItInSafeZone:        ;      if we are not in space station safe zone
  83++A774 3A 46 C3     .InSafeZone:            ld      a,(ShipNewBitsAddr)
  84++A777 F6 81                                or      Bit7Only | ShipIsTrader
  85++A779 CD 5A AA     .NotSafeZone:           call    SetPlayerAsTarget
  86++A77C CD 35 AA                             call    CopyPosToVector
  87++A77F CD BB AA                             call    NormalizeTactics
  88++A782              .NotAPirate:
  89++A782 3A 5E C0     .SpawnFighter:          ld      a,(UBnKFightersLeft)
  90++A785 A7                                   and     a
  91++A786 28 0E                                jr      z,.NoFighters
  92++A788 CD DE 87     .CanSpawnFighter:       call    doRandom
  93++A78B                                      JumpIfALTNusng 200, .NoFighters
  93++A78B FE C8       >                        cp      200
  93++A78D DA 96 A7    >                        jp		c, .NoFighters
  94++A790 DD 01                                break
  95++A792                                      ;SPAWN FIGHTER of Type UBnKFighterShipId at Y - 20 z - 20
  96++A792 21 5E C0                             ld      hl,UBnKFightersLeft             ;reduced figters left
  97++A795 35                                   dec     (hl)
  98++A796                                      ;inherits parent's ai angry
  99++A796 3A 98 80     .NoFighters:            ld      a,(RandomSeed3)                 ;if random >= 250
 100++A799 F6 68                                or      104                             ;set a noticable roll
 101++A79B 3A 3D C3     .CheckEnergyLevels:     ld      a,(EnergyAddr)
 102++A79E 47                                   ld      b,a
 103++A79F 3A 58 C0                             ld      a,(UBnKEnergy)
 104++A7A2 CB 38                                srl     b                               ; max energy / 2
 105++A7A4                                      JumpIfAGTENusng b,.EnergyOverHalf       ; if ship max energy / 2 < current enerhy
 105++A7A4 B8          >                        cp     b
 105++A7A5 D2 C8 A7    >                        jp		nc,.EnergyOverHalf
 106++A7A8 CB 38                                srl     b
 107++A7AA                                      JumpIfAGTENusng b,.EnergyOverQuater     ; if ship max enery / 4 < current energy
 107++A7AA B8          >                        cp     b
 107++A7AB D2 C8 A7    >                        jp		nc,.EnergyOverQuater
 108++A7AE 3A 46 C3                             ld      a,(ShipNewBitsAddr)
 109++A7B1 E6 80                                and     ShipHasEscapePod
 110++A7B3 28 13                                jr      z, .NoEscapePod
 111++A7B5 3A 97 80                             ld      a,(RandomSeed2)
 112++A7B8                                      JumpIfALTNusng 230,.NoEscapePod         ;if random >= 230
 112++A7B8 FE E6       >                        cp      230
 112++A7BA DA C8 A7    >                        jp		c, .NoEscapePod
 113++A7BD 3A 54 C0                             ld      a,(UBnkaiatkecm)                ;  disable ship AI hostily and ECM
 114++A7C0 E6 7F                                and     ShipAIDisabled                  ;  .
 115++A7C2 32 54 C0                             ld      (UBnkaiatkecm),a                ;  .
 116++A7C5                                      ;ZeroA                                   ;  .
 117++A7C5 32 5A C0                             ld      (UBnKECMFitted),a               ;  .
 118++A7C8              .LaunchEscapePod:       ;break
 119++A7C8                                      ;            goto spawn escape pod
 120++A7C8              .EnergyOverHalf:
 121++A7C8              .EnergyOverQuater:
 122++A7C8 3A 5C C0     .NoEscapePod:           ld      a,(UBnKMissilesLeft)            ;      if missiles > 0
 123++A7CB 47                                   ld      b,a
 124++A7CC                                      JumpIfAIsZero .NoMissileLaunch
 124++A7CC A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 124++A7CD CA E3 A7    >                        jp	    z, .NoMissileLaunch
 125++A7D0 3A 98 80     .MissileLaunchTest:     ld      a,(RandomSeed3)                 ;         if random and 15 > = nbr missiles
 126++A7D3 E6 0F                                and     15
 127++A7D5                                      JumpIfALTNusng b, .NoMissileLaunch
 127++A7D5 B8          >                        cp      b
 127++A7D6 DA E3 A7    >                        jp		c, .NoMissileLaunch
 128++A7D9 3A B4 80                             ld      a,(ECMCountDown)
 129++A7DC                                      JumpIfAIsNotZero  .NoMissileLaunch
 129++A7DC A7          >                        and     a
 129++A7DD C2 E3 A7    >                        jp	    nz,.NoMissileLaunch
 130++A7E0 C3 01 62                             jp    LaunchEnemyMissile                ; jump out and return if firing missile
 131++A7E3 3A 21 C0     .NoMissileLaunch:       ld      a,(UBnKxhi)
 132++A7E6 2A 24 C0                             ld      hl,(UBnKyhi)
 133++A7E9 B6                                   or      (hl)
 134++A7EA 2A 27 C0                             ld      hl,(UBnKzhi)
 135++A7ED B6                                   or      (hl)
 136++A7EE                                      JumpIfAGTENusng 160, .TooFarForLaser   ; if in laser range (all highs order together < 160)
 136++A7EE FE A0       >                        cp     160
 136++A7F0 D2 17 A8    >                        jp		nc,.TooFarForLaser
 137++A7F3 CD C7 A9                             call    XX12EquTacticsDotNosev
 138++A7F6 47                                   ld      b,a
 139++A7F7 3A A1 81                             ld      a,(varS)
 140++A7FA                                      JumpIfAIsNotZero .TooFarForLaser        ;   if dot product of ship < 160 i.e. > -32
 140++A7FA A7          >                        and     a
 140++A7FB C2 17 A8    >                        jp	    nz,.TooFarForLaser
 141++A7FE 78                                   ld      a,b                            ;    .
 142++A7FF                                      JumpIfALTNusng    32, .DoneLaserShot  ;    .
 142++A7FF FE 20       >                        cp      32
 142++A801 DA 12 A8    >                        jp		c, .DoneLaserShot
 143++A804              .FireLaser:             ;break                        ;      do fire laser logic (drain energy, add beam to lines as random line from ship to a random edge of screen)
 144++A804 78                                   ld      a,b ;; need to see if b gets corrupted by laser fire
 145++A805                                      JumpIfAEqNusng      35, .LaserHitPlayer
 145++A805 FE 23       >                        cp     35
 145++A807 CA 12 A8    >                        jp      z,.LaserHitPlayer
 146++A80A                                      JumpIfAEqNusng      36, .LaserHitPlayer
 146++A80A FE 24       >                        cp     36
 146++A80C CA 12 A8    >                        jp      z,.LaserHitPlayer
 147++A80F C3 12 A8     .LaserMissedPlayer:     jp      .DoneLaserShot
 148++A812              .LaserHitPlayer:        ;break ;         do direct hit logic
 149++A812 21 47 C0     .DoneLaserShot:         ld      hl,UBnKAccel                   ;      Half attacking ship's accelleration in byte 28 (dec so must be 0 1 or 2)
 150++A815 CB 26                                sla     (hl)
 151++A817              .TooFarForLaser:
 152++A817              .UpdateShip             ;break
 153++A817 CD C5 A1                             call    CalculateAgression              ; refresh aggression levels
 154++A81A 3A 27 C0                             ld      a,(UBnKzhi)
 155++A81D                                      JumpIfAGTENusng 3, .ShipFarAway
 155++A81D FE 03       >                        cp     3
 155++A81F D2 2D A8    >                        jp		nc,.ShipFarAway
 156++A822 3A 21 C0                             ld      a,(UBnKxhi)
 157++A825 2A 24 C0                             ld      hl,(UBnKyhi)
 158++A828 B6                                   or      (hl)
 159++A829 E6 FE                                and     %11111110
 160++A82B 28 26                                jr      z,.ShipTurnAway
 161++A82D 3A 97 80     .ShipFarAway:           ld      a,(RandomSeed2)                     ; if random with bit 7 set < ship AI byte 32 flag
 162++A830                                      ;or      %10000000               ; .
 163++A830                                      JumpIfAGTEMemusng UBnKShipAggression, .ShipTurnAway
 163++A830 21 53 C0    >                        ld      hl,UBnKShipAggression
 163++A833 BE          >                        cp      (hl)
 163++A834 D2 53 A8    >                        jp		nc,.ShipTurnAway
 164++A837                                      FlipSignMem TacticsVectorX+2                ; negate vector in XX15 so it points opposite direction
 164++A837 3A BD A3    >                        ld  a,(TacticsVectorX+2)
 164++A83A EE 80       >                        xor SignOnly8Bit
 164++A83C 32 BD A3    >                        ld  (TacticsVectorX+2),a
 165++A83F                                      FlipSignMem TacticsVectorY+2                ; we have already negated the dot product above
 165++A83F 3A C1 A3    >                        ld  a,(TacticsVectorY+2)
 165++A842 EE 80       >                        xor SignOnly8Bit
 165++A844 32 C1 A3    >                        ld  (TacticsVectorY+2),a
 166++A847                                      FlipSignMem TacticsVectorZ+2                ; .
 166++A847 3A C5 A3    >                        ld  a,(TacticsVectorZ+2)
 166++A84A EE 80       >                        xor SignOnly8Bit
 166++A84C 32 C5 A3    >                        ld  (TacticsVectorZ+2),a
 167++A84F CD 57 A8                             call    ShipSeekingLogic            ;    seek as per missile
 168++A852 C9                                   ret
 169++A853 CD 57 A8     .ShipTurnAway:          call    ShipSeekingLogic            ; move away (ie.. as per missile but dot products not reversed)
 170++A856                                      ;              consider a random roll
 171++A856 C9                                   ret
 172++A857
 173++A857 CD C7 A9     ShipSeekingLogic:       call    XX12EquTacticsDotNosev              ; SA = nose . XX15                           (     ->TAS3)
 174++A85A 32 7E A3                             ld      (TacticsDotProduct1),a              ; CNT = A (high byte of dot product)
 175++A85D 3A A1 81                             ld      a,(varS)                            ; get sign from dot product
 176++A860 32 82 A3                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 177++A863 CD 1D AA     .RoofDotProduct:        call    XX12EquTacticsDotRoofv              ; Now tran the roof for rotation
 178++A866 32 81 A3                             ld      (TacticsDotProduct2),a              ; so if its +ve then the roof is similar so pull up to head towards it
 179++A869 3A A1 81                             ld      a,(varS)                            ; .
 180++A86C 32 82 A3                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 181++A86F CD 79 A8                             call    ShipPitchv3
 182++A872 CD 9D A8                             call    ShipRollv3
 183++A875 CD CB A8                             call    ShipSpeedv3
 184++A878 C9                                   ret
 185++A879
 186++A879 2A 81 A3     ShipPitchv3:            ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 187++A87C 7C                                   ld      a,h                                ; .
 188++A87D EE 80                                xor     $80                                ; .
 189++A87F E6 80                                and     $80                                ; .
 190++A881 67                                   ld      h,a                                ; h  = flipped sign
 191++A882 7D                                   ld      a,l                                ; a = value * 2
 192++A883 CB 27                                sla     a                                  ;
 193++A885                                      JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 193++A885 FE 10       >                        cp     16
 193++A887 D2 93 A8    >                        jp		nc,.skipPitchZero
 194++A88A                                      ZeroA                                      ; else we zero pitch but
 194++A88A AF          >                        xor a
 195++A88B B4                                   or      h                                  ; we need to retain the sign
 196++A88C 32 49 C0                             ld      (UBnKRotZCounter),a                ; .
 197++A88F                                      IFDEF MISSILEDEBUG
 198++A88F 32 0E A4                                 ld  (TacticsRotZ),a
 199++A892                                      ENDIF
 200++A892 C9                                   ret
 201++A893 3E 02        .skipPitchZero:         ld      a,2
 202++A895 B4                                   or      h
 203++A896 32 49 C0                             ld      (UBnKRotZCounter),a
 204++A899                                      IFDEF MISSILEDEBUG
 205++A899 32 0E A4                                 ld  (TacticsRotZ),a
 206++A89C                                      ENDIF
 207++A89C C9                                   ret
 208++A89D
 209++A89D CD 23 AA     ShipRollv3:             call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 210++A8A0 32 84 A3                             ld      (TacticsDotProduct3),a             ; .
 211++A8A3 6F                                   ld      l,a                                ; .
 212++A8A4 3A A1 81                             ld      a,(varS)                           ; .
 213++A8A7 32 85 A3                             ld      (TacticsDotProduct3+1),a           ; .
 214++A8AA 67                                   ld      h,a                                ; h = sign sidev
 215++A8AB 3A 82 A3                             ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 216++A8AE 47                                   ld      b,a                                ; b = roof product
 217++A8AF 7D                                   ld      a,l                                ; a = abs sidev  * 2
 218++A8B0 CB 27                                sla     a                                  ;
 219++A8B2                                      JumpIfAGTENusng 16,.skipRollZero           ;
 219++A8B2 FE 10       >                        cp     16
 219++A8B4 D2 C0 A8    >                        jp		nc,.skipRollZero
 220++A8B7                                      ZeroA                                      ; if its zoer then set rotx to zero
 220++A8B7 AF          >                        xor a
 221++A8B8 B0                                   or      b
 222++A8B9 32 48 C0                             ld      (UBnKRotXCounter),a
 223++A8BC                                      IFDEF MISSILEDEBUG
 224++A8BC 32 0C A4                                 ld  (TacticsRotX),a
 225++A8BF                                      ENDIF
 226++A8BF C9                                   ret
 227++A8C0 3E 02        .skipRollZero:          ld      a,2
 228++A8C2 B4                                   or      h
 229++A8C3 A8                                   xor     b
 230++A8C4 32 48 C0                             ld      (UBnKRotXCounter),a
 231++A8C7                                      IFDEF MISSILEDEBUG
 232++A8C7 32 0C A4                                 ld  (TacticsRotX),a
 233++A8CA                                      ENDIF
 234++A8CA C9                                   ret
 235++A8CB
 236++A8CB 2A 7E A3     ShipSpeedv3:            ld      hl,(TacticsDotProduct1)
 237++A8CE 7C                                   ld      a,h
 238++A8CF A7                                   and     a
 239++A8D0 20 13                                jr      nz,.SlowDown
 240++A8D2 ED 5B 81 A3                          ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 241++A8D6 7D                                   ld      a,l
 242++A8D7                                      JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 242++A8D7 FE 16       >                        cp      22
 242++A8D9 DA E5 A8    >                        jp		c, .SlowDown
 243++A8DC 3E 03        .Accelerate:            ld      a,3                                 ; else
 244++A8DE 32 47 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 245++A8E1                                      IFDEF MISSILEDEBUG
 246++A8E1 32 10 A4                                 ld  (TacticsSpeed),a
 247++A8E4                                      ENDIF
 248++A8E4 C9                                   ret                                         ;  .
 249++A8E5              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 249++A8E5 FE 12       >                        cp      18
 249++A8E7 DA F3 A8    >                        jp		c, .NoSpeedChange
 250++A8EA 3E FF        .Deccelerate:           ld      a,-1
 251++A8EC 32 47 C0                             ld      (UBnKAccel),a
 252++A8EF                                      IFDEF MISSILEDEBUG
 253++A8EF 32 10 A4                                 ld  (TacticsSpeed),a
 254++A8F2                                      ENDIF
 255++A8F2 C9                                   ret
 256++A8F3              .NoSpeedChange:         ZeroA                                       ; else no change
 256++A8F3 AF          >                        xor a
 257++A8F4 32 47 C0                             ld      (UBnKAccel),a
 258++A8F7                                      IFDEF MISSILEDEBUG
 259++A8F7 32 10 A4                                 ld  (TacticsSpeed),a
 260++A8FA                                      ENDIF
 261++A8FA C9                                   ret
 262++A8FB              ;;;ShipPitchv2:  ;break
 263++A8FB              ;;;                        ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 264++A8FB              ;;;                        ld      a,h                                ; .
 265++A8FB              ;;;                        xor     $80                                ; .
 266++A8FB              ;;;                        and     $80                                ; .
 267++A8FB              ;;;                        ld      h,a                                ; h  = flipped sign
 268++A8FB              ;;;                        ld      a,l                                ; a = value * 2
 269++A8FB              ;;;                        sla     a                                  ;
 270++A8FB              ;;;                        JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 271++A8FB              ;;;                        ZeroA                                      ; else we zero pitch but
 272++A8FB              ;;;                        or      h                                  ; we need to retain the sign
 273++A8FB              ;;;                        ld      (UBnKRotZCounter),a                ; .
 274++A8FB              ;;;                        IFDEF MISSILEDEBUG
 275++A8FB              ;;;                            ld  (TacticsRotZ),a
 276++A8FB              ;;;                        ENDIF
 277++A8FB              ;;;                        ret
 278++A8FB              ;;;.skipPitchZero:         ld      a,3
 279++A8FB              ;;;                        or      h
 280++A8FB              ;;;                        ld      (UBnKRotZCounter),a
 281++A8FB              ;;;                        IFDEF MISSILEDEBUG
 282++A8FB              ;;;                            ld  (TacticsRotZ),a
 283++A8FB              ;;;                        ENDIF
 284++A8FB              ;;;                        ret
 285++A8FB
 286++A8FB
 287++A8FB              ;;;ShipRollv2:             ld      a,(UBnKRotXCounter)
 288++A8FB              ;;;                        and     $7F
 289++A8FB              ;;;                        cp      16
 290++A8FB              ;;;                        ret     z
 291++A8FB              ;;;                        call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 292++A8FB              ;;;                        ld      (TacticsDotProduct3),a             ; .
 293++A8FB              ;;;                        ld      l,a                                ; .
 294++A8FB              ;;;                        ld      a,(varS)                           ; .
 295++A8FB              ;;;                        ld      (TacticsDotProduct3+1),a           ; .
 296++A8FB              ;;;                        ld      h,a                                ; h = sign sidev
 297++A8FB              ;;;                        ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 298++A8FB              ;;;                        ld      b,a                                ; b = roof product
 299++A8FB              ;;;                        ld      a,l                                ; a = abs sidev  * 2
 300++A8FB              ;;;                        sla     a                                  ;
 301++A8FB              ;;;                        JumpIfAGTENusng 16,.skipRollZero           ;
 302++A8FB              ;;;                        ZeroA                                      ; if its zoer then set rotx to zero
 303++A8FB              ;;;                        or      b
 304++A8FB              ;;;                        ld      (UBnKRotXCounter),a
 305++A8FB              ;;;                        IFDEF MISSILEDEBUG
 306++A8FB              ;;;                            ld  (TacticsRotX),a
 307++A8FB              ;;;                        ENDIF
 308++A8FB              ;;;                        ret
 309++A8FB              ;;;.skipRollZero:          ld      a,3
 310++A8FB              ;;;                        or      h
 311++A8FB              ;;;                        xor     b
 312++A8FB              ;;;                        ld      (UBnKRotXCounter),a
 313++A8FB              ;;;                        IFDEF MISSILEDEBUG
 314++A8FB              ;;;                            ld  (TacticsRotX),a
 315++A8FB              ;;;                        ENDIF
 316++A8FB              ;;;                        ret
 317++A8FB              ;;;
 318++A8FB              ;;;ShipSpeedv2:            ld      hl,(TacticsDotProduct1)
 319++A8FB              ;;;                        ld      a,h
 320++A8FB              ;;;                        and     a
 321++A8FB              ;;;                        jr      nz,.SlowDown
 322++A8FB              ;;;                        ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 323++A8FB              ;;;                        ld      a,l
 324++A8FB              ;;;                        JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 325++A8FB              ;;;.Accelerate:            ld      a,2                                 ; else
 326++A8FB              ;;;                        ld      (UBnKAccel),a                       ;  accelleration = 3
 327++A8FB              ;;;                        IFDEF MISSILEDEBUG
 328++A8FB              ;;;                            ld  (TacticsSpeed),a
 329++A8FB              ;;;                        ENDIF
 330++A8FB              ;;;                        ret                                         ;  .
 331++A8FB              ;;;.SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 332++A8FB              ;;;.Deccelerate:           ld      a,-1
 333++A8FB              ;;;                        ld      (UBnKAccel),a
 334++A8FB              ;;;                        IFDEF MISSILEDEBUG
 335++A8FB              ;;;                            ld  (TacticsSpeed),a
 336++A8FB              ;;;                        ENDIF
 337++A8FB              ;;;                        ret
 338++A8FB              ;;;.NoSpeedChange:         ZeroA                                       ; else no change
 339++A8FB              ;;;                        ld      (UBnKAccel),a
 340++A8FB              ;;;                        IFDEF MISSILEDEBUG
 341++A8FB              ;;;                            ld  (TacticsSpeed),a
 342++A8FB              ;;;                        ENDIF
 343++A8FB              ;;;                        ret
 344++A8FB              ;;;
 345++A8FB              ;;;
 346++A8FB              ;;;
 347++A8FB              ;;;RAT2 equ    4           ; roll pitch threshold
 348++A8FB              ;;;RAT  equ    3           ; magnitude of counter
 349++A8FB              ;;;CNT2 equ    22          ; angle for ship slowdown
 350++A8FB              ;;;
 351++A8FB              ;;;
 352++A8FB              ;;;ShipPitch:              ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 353++A8FB              ;;;                        ld      a,h                                ; .
 354++A8FB              ;;;                        xor     $80                                ; .
 355++A8FB              ;;;                        and     $80                                ; .
 356++A8FB              ;;;                        ld      h,a                                ; h  = flipped sign
 357++A8FB              ;;;                        ld      a,l                                ; a = value * 2
 358++A8FB              ;;;                        sla     a                                  ;
 359++A8FB              ;;;                        JumpIfAGTENusng RAT2, .skipPitchZero         ; if its > 16 then update pitch
 360++A8FB              ;;;                        ZeroA                                      ; else we zero pitch but
 361++A8FB              ;;;                        or      h                                  ; we need to retain the sign
 362++A8FB              ;;;                        ld      (UBnKRotZCounter),a                ; .
 363++A8FB              ;;;                        IFDEF MISSILEDEBUG
 364++A8FB              ;;;                            ld  (TacticsRotZ),a
 365++A8FB              ;;;                        ENDIF
 366++A8FB              ;;;                        ret
 367++A8FB              ;;;.skipPitchZero:         ld      a,l
 368++A8FB              ;;;                        or      h
 369++A8FB              ;;;                        ld      (UBnKRotZCounter),a
 370++A8FB              ;;;                        IFDEF MISSILEDEBUG
 371++A8FB              ;;;                            ld  (TacticsRotZ),a
 372++A8FB              ;;;                        ENDIF
 373++A8FB              ;;;                        ret
 374++A8FB              ;;;
 375++A8FB              ;;;
 376++A8FB              ;;;                        ;
 377++A8FB              ;;;ShipRoll:               call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 378++A8FB              ;;;                        ld      (TacticsDotProduct3),a             ; .
 379++A8FB              ;;;                        ld      l,a                                ; .
 380++A8FB              ;;;                        ld      a,(varS)                           ; .
 381++A8FB              ;;;                        ld      (TacticsDotProduct3+1),a           ; .
 382++A8FB              ;;;                        ld      h,a                                ; h = sign sidev
 383++A8FB              ;;;                        ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 384++A8FB              ;;;                        ld      b,a                                ; b = roof product
 385++A8FB              ;;;                        ld      a,l                                ; a = abs sidev  * 2
 386++A8FB              ;;;                        sla     a                                  ;
 387++A8FB              ;;;                        JumpIfAGTENusng RAT2,.skipRollZero           ;
 388++A8FB              ;;;                        ZeroA                                      ; if its zoer then set rotx to zero
 389++A8FB              ;;;                        or      b
 390++A8FB              ;;;                        ld      (UBnKRotXCounter),a
 391++A8FB              ;;;                        IFDEF MISSILEDEBUG
 392++A8FB              ;;;                            ld  (TacticsRotX),a
 393++A8FB              ;;;                        ENDIF
 394++A8FB              ;;;                        ret
 395++A8FB              ;;;.skipRollZero:          ld      a,1
 396++A8FB              ;;;                        or      h
 397++A8FB              ;;;                        xor     b
 398++A8FB              ;;;                        ld      (UBnKRotXCounter),a
 399++A8FB              ;;;                        IFDEF MISSILEDEBUG
 400++A8FB              ;;;                            ld  (TacticsRotX),a
 401++A8FB              ;;;                        ENDIF
 402++A8FB              ;;;                        ret
 403++A8FB              ;;;
 404++A8FB              ;;;ShipSpeed:              ld      hl,(TacticsDotProduct1)
 405++A8FB              ;;;                        ld      a,h
 406++A8FB              ;;;                        and     a
 407++A8FB              ;;;                        jr      nz,.SlowDown
 408++A8FB              ;;;                        ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 409++A8FB              ;;;                        ld      a,l
 410++A8FB              ;;;                        JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 411++A8FB              ;;;.Accelerate:            ld      a,3                                 ; else
 412++A8FB              ;;;                        ld      (UBnKAccel),a                       ;  accelleration = 3
 413++A8FB              ;;;                        IFDEF MISSILEDEBUG
 414++A8FB              ;;;                            ld  (TacticsSpeed),a
 415++A8FB              ;;;                        ENDIF
 416++A8FB              ;;;                        ret                                         ;  .
 417++A8FB              ;;;.SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 418++A8FB              ;;;.Deccelerate:           ld      a,-1
 419++A8FB              ;;;                        ld      (UBnKAccel),a
 420++A8FB              ;;;                        IFDEF MISSILEDEBUG
 421++A8FB              ;;;                            ld  (TacticsSpeed),a
 422++A8FB              ;;;                        ENDIF
 423++A8FB              ;;;                        ret
 424++A8FB              ;;;.NoSpeedChange:         ZeroA                                       ; else no change
 425++A8FB              ;;;                        ld      (UBnKAccel),a
 426++A8FB              ;;;                        IFDEF MISSILEDEBUG
 427++A8FB              ;;;                            ld  (TacticsSpeed),a
 428++A8FB              ;;;                        ENDIF
 429++A8FB              ;;;                        ret
 430++A8FB
# file closed: ./GameEngine/../GameEngine/NormalAI.asm
 266+ A8FB
 267+ A8FB              ; On Entry A = TacticsDotProduct2 sign (i.e. roof direction)
 268+ A8FB              ; on exit a == new roll
 269+ A8FB EE 80        calcNPitch:             xor     SignOnly8Bit                    ; c = sign flipped of dot product only
 270+ A8FD E6 80                                and     SignOnly8Bit                    ; .
 271+ A8FF 4F                                   ld      c,a                             ; . (varT in effect)
 272+ A900 F6 03                                or      MISSILEMAXPITCH                 ; a = flipped sign max pitch
 273+ A902 3A 49 C0                             ld      a,(UBnKRotZCounter)             ; b = abs (currentz pitch)
 274+ A905 C9                                   ret
 275+ A906
 276+ A906 E6 7F                                and     SignMask8Bit                    ; . which will initially be 0
 277+ A908 47                                   ld      b,a                             ; .
 278+ A909 3A 81 A3                             ld      a,(TacticsDotProduct2)          ; a = abs roof dot product
 279+ A90C                                      JumpIfALTNusng MISSILEMAXPITCH+1, .calcNPitch2    ; if a >= roll threshold
 279+ A90C FE 04       >                        cp      MISSILEMAXPITCH+1
 279+ A90E DA 1B A9    >                        jp		c, .calcNPitch2
 280+ A911 78                                   ld      a,b
 281+ A912 E6 80                                and     SignOnly8Bit
 282+ A914                                      ;jr      z,.NPitchPositive
 283+ A914                                     ; ld      a,
 284+ A914 3E 03                                ld      a,MISSILEMAXPITCH                         ;    z rot = z rot * dot product flipped sign
 285+ A916 B1                                   or      c                               ;    i.e. zrot = current magnitude but dot product sign flipped
 286+ A917 32 49 C0                             ld      (UBnKRotZCounter),a             ;    .
 287+ A91A C9                                   ret                                     ; else (a LT current abs z)
 288+ A91B B1           .calcNPitch2:           or      c                               ;     rot z = dot product with sign flipped
 289+ A91C 32 49 C0                             ld      (UBnKRotZCounter),a             ;
 290+ A91F C9                                   ret                                     ;
 291+ A920
 292+ A920 3A 49 C0     calcNRoll:              ld      a,(UBnKRotZCounter)
 293+ A923 E6 80                                and     SignOnly8Bit
 294+ A925 EE 80                                xor     SignOnly8Bit                    ; flip sign of dot product
 295+ A927 F6 05                                or      5
 296+ A929 32 48 C0                             ld      (UBnKRotXCounter),a
 297+ A92C C9                                   ret
 298+ A92D
 299+ A92D 4F                                   ld      c,a
 300+ A92E F6 03                                or      MISSILEMAXPITCH
 301+ A930 3A 48 C0                             ld      a,(UBnKRotXCounter)
 302+ A933 C9                                   ret
 303+ A934
 304+ A934
 305+ A934
 306+ A934 E6 7F                                and     SignMask8Bit                    ; get ABS value
 307+ A936 47                                   ld      b,a
 308+ A937 3A 81 A3                             ld      a,(TacticsDotProduct2)          ; now we have the dot product abs value
 309+ A93A                                      JumpIfALTNusng MISSILEMAXROLL+1, .calcNRoll2
 309+ A93A FE 04       >                        cp      MISSILEMAXROLL+1
 309+ A93C DA 46 A9    >                        jp		c, .calcNRoll2
 310+ A93F 3E 03                                ld      a,MISSILEMAXROLL
 311+ A941 B1                                   or      c
 312+ A942 32 48 C0                             ld      (UBnKRotXCounter),a
 313+ A945 C9                                   ret
 314+ A946 B1           .calcNRoll2:            or      c                               ;     rot z = dot product with sign flipped
 315+ A947 32 48 C0                             ld      (UBnKRotXCounter),a
 316+ A94A C9                                   ret
 317+ A94B
 318+ A94B
 319+ A94B 21 2A C0     CopyRotSideToTacticsMat:ld      hl,UBnkrotmatSidevX+1
 320+ A94E C3 5A A9                             jp      CopyRotmatToTacticsMat
 321+ A951
 322+ A951 21 36 C0     CopyRotNoseToTacticsMat:ld      hl,UBnkrotmatNosevX+1
 323+ A954 C3 5A A9                             jp      CopyRotmatToTacticsMat
 324+ A957
 325+ A957 21 30 C0     CopyRotRoofToTacticsMat:ld      hl,UBnkrotmatRoofvX+1
 326+ A95A              ; Coy rotation matrix high byte to trans rot mat, strip off sign and separate to rotmat byte 2
 327+ A95A 11 9F A3     CopyRotmatToTacticsMat: ld      de,TacticsRotMatX
 328+ A95D 7E                                   ld      a,(hl)              ; matrix high byte of x
 329+ A95E 47                                   ld      b,a
 330+ A95F E6 7F                                and     SignMask8Bit
 331+ A961 12                                   ld      (de),a              ; set rot mat value
 332+ A962 13                                   inc     de
 333+ A963 78                                   ld      a,b
 334+ A964 E6 80                                and     SignOnly8Bit
 335+ A966 12                                   ld      (de),a              ; set rot mat sign
 336+ A967 13                                   inc     de                  ; move to next rot mat element
 337+ A968 23                                   inc     hl
 338+ A969 23                                   inc     hl                  ; matrix high byte of y
 339+ A96A 7E           .processYElement:       ld      a,(hl)              ; matrix high byte of y
 340+ A96B 47                                   ld      b,a
 341+ A96C E6 7F                                and     SignMask8Bit
 342+ A96E 12                                   ld      (de),a              ; set rot mat value
 343+ A96F 13                                   inc     de
 344+ A970 78                                   ld      a,b
 345+ A971 E6 80                                and     SignOnly8Bit
 346+ A973 12                                   ld      (de),a              ; set rot mat sign
 347+ A974 13                                   inc     de                  ; move to next rot mat element
 348+ A975 23                                   inc     hl
 349+ A976 23                                   inc     hl                  ; matrix high byte of z
 350+ A977 7E           .ProcessZElement:       ld      a,(hl)              ; matrix high byte of z
 351+ A978 47                                   ld      b,a
 352+ A979 E6 7F                                and     SignMask8Bit
 353+ A97B 12                                   ld      (de),a              ; set rot mat value
 354+ A97C 13                                   inc     de
 355+ A97D 78                                   ld      a,b
 356+ A97E E6 80                                and     SignOnly8Bit
 357+ A980 12                                   ld      (de),a              ; set rot mat sign
 358+ A981 C9                                   ret
 359+ A982
 360+ A982                                      IFDEF TACTICSDEBUG
 361+ A982              DebugTacticsCopy:
 362+ A982 2A 29 C0                             ld      hl,(UBnkrotmatSidevX)
 363+ A985 ED 5B 2B C0                          ld      de,(UBnkrotmatSidevY)
 364+ A989 ED 4B 2D C0                          ld      bc,(UBnkrotmatSidevZ)
 365+ A98D 22 DB A3                             ld      (TacticsSideX),hl
 366+ A990 ED 53 DF A3                          ld      (TacticsSideY),de
 367+ A994 ED 43 E3 A3                          ld      (TacticsSideZ),bc
 368+ A998
 369+ A998 2A 2F C0                             ld      hl,(UBnkrotmatRoofvX)
 370+ A99B ED 5B 31 C0                          ld      de,(UBnkrotmatRoofvY)
 371+ A99F ED 4B 33 C0                          ld      bc,(UBnkrotmatRoofvZ)
 372+ A9A3 22 EB A3                             ld      (TacticsRoofX),hl
 373+ A9A6 ED 53 EF A3                          ld      (TacticsRoofY),de
 374+ A9AA ED 43 F3 A3                          ld      (TacticsRoofZ),bc
 375+ A9AE
 376+ A9AE 2A 35 C0                             ld      hl,(UBnkrotmatNosevX)
 377+ A9B1 ED 5B 37 C0                          ld      de,(UBnkrotmatNosevY)
 378+ A9B5 ED 4B 39 C0                          ld      bc,(UBnkrotmatNosevZ)
 379+ A9B9 22 FB A3                             ld      (TacticsNoseX),hl
 380+ A9BC ED 53 FF A3                          ld      (TacticsNoseY),de
 381+ A9C0 ED 43 03 A4                          ld      (TacticsNoseZ),bc
 382+ A9C4
 383+ A9C4 C9                                   ret
 384+ A9C5                                      ENDIF
 385+ A9C5
 386+ A9C5 00 00        TacticsVarResult        DW 0
 387+ A9C7 CD 51 A9     XX12EquTacticsDotNosev: call    CopyRotNoseToTacticsMat
 388+ A9CA 21 9F A3     XX12EquTacticsDotHL:    ld      hl,TacticsRotMatX; UBnkTransmatNosevX    ; ROTMATX HI
 389+ A9CD 7E           .CalcXValue:            ld      a,(hl)                              ; DE = RotMatX & Vect X
 390+ A9CE 5F                                   ld      e,a                                 ; .
 391+ A9CF 3A BB A3                             ld      a,(TacticsVectorX)                  ; .
 392+ A9D2 57                                   ld      d,a                                 ; .
 393+ A9D3 ED 30                                mul                                         ; .
 394+ A9D5 7A                                   ld      a,d                                 ; S = A = Hi (RotMatX & Vect X)
 395+ A9D6 32 A1 81                             ld      (varS),a                            ; .
 396+ A9D9 23                                   inc     hl                                  ; move to sign byte
 397+ A9DA 3A BD A3     .CalcXSign:             ld      a,(TacticsVectorX+2)                ; B  = A = Sign VecX xor sign RotMatX
 398+ A9DD AE                                   xor     (hl)                                ; .
 399+ A9DE 47                                   ld      b,a                                 ; .
 400+ A9DF 23           .MoveToY:               inc     hl                                  ; Move on to Y component
 401+ A9E0 7E           .CalcYValue:            ld      a,(hl)                              ; D = 0, E = Hi (RotMatY & Vect Y)
 402+ A9E1 5F                                   ld      e,a                                 ; .
 403+ A9E2 3A BF A3                             ld      a,(TacticsVectorY)                  ; .
 404+ A9E5 57                                   ld      d,a                                 ; .
 405+ A9E6 ED 30                                mul     de                                  ; .
 406+ A9E8 5A                                   ld      e,d                                 ; .
 407+ A9E9 16 00                                ld      d,0                                 ; .
 408+ A9EB 23                                   inc     hl                                  ; move to sign byte
 409+ A9EC 3A C1 A3     .CalcYSign:             ld      a,(TacticsVectorY+2)                ; c = sign of y_sign * sidev_y
 410+ A9EF AE                                   xor     (hl)                                ;
 411+ A9F0 4F                                   ld      c,a                                 ;
 412+ A9F1 23           .MoveToZ:               inc     hl                                  ; Move on to Z component
 413+ A9F2 E5           .AddXandY:              push    hl                                  ; but save HL as we need that
 414+ A9F3 3A A1 81                             ld      a,(varS)                            ; hl = Hi (RotMatX & Vect X) b= sign
 415+ A9F6 26 00                                ld      h,0                                 ; de = Hi (RotMatY & Vect Y) c= sign
 416+ A9F8 6F                                   ld      l,a                                 ;
 417+ A9F9 CD 92 92                             call    ADDHLDESignBC                       ; a(sign) hl = sum
 418+ A9FC 47                                   ld      b,a                                 ; b = sign of result
 419+ A9FD 22 C5 A9                             ld      (TacticsVarResult),hl               ; save sub in TacticsVarResult
 420+ AA00 E1           .CalcZValue:            pop     hl                                  ; get back to the rotation mat z
 421+ AA01 7E                                   ld      a,(hl)                              ; D = 0, E = Hi (RotMatZ & Vect Z)
 422+ AA02 5F                                   ld      e,a                                 ; .
 423+ AA03 3A C3 A3                             ld      a,(TacticsVectorZ)                  ; .
 424+ AA06 57                                   ld      d,a                                 ; .
 425+ AA07 ED 30                                mul     de                                  ; .
 426+ AA09 5A                                   ld      e,d                                 ; .
 427+ AA0A 16 00                                ld      d,0                                 ; .
 428+ AA0C 23                                   inc     hl                                  ; move to sign byte
 429+ AA0D 3A C5 A3     .CalcZSign:             ld      a,(TacticsVectorZ+2)
 430+ AA10 AE                                   xor     (hl)
 431+ AA11 4F                                   ld      c,a                                 ; Set C to the sign of z_sign * sidev_z
 432+ AA12 2A C5 A9                             ld      hl, (TacticsVarResult)              ; CHL = x + y, BDE = z products
 433+ AA15 CD 92 92                             call    ADDHLDESignBC                       ; so AHL = X y z products
 434+ AA18 32 A1 81                             ld      (varS),a                            ; for backwards compatibility
 435+ AA1B 7D                                   ld      a,l                                  ; .
 436+ AA1C C9                                   ret
 437+ AA1D
 438+ AA1D CD 57 A9     XX12EquTacticsDotRoofv: call    CopyRotRoofToTacticsMat
 439+ AA20 C3 CA A9                             jp      XX12EquTacticsDotHL
 440+ AA23
 441+ AA23 CD 4B A9     XX12EquTacticsDotSidev: call    CopyRotSideToTacticsMat
 442+ AA26 C3 CA A9                             jp      XX12EquTacticsDotHL
 443+ AA29
 444+ AA29 21 20 C0     CopyToTargetVector:     ld      hl,UBnKxlo
 445+ AA2C 11 AB A3                             ld      de,TacticsTargetX
 446+ AA2F 01 09 00                             ld      bc,9
 447+ AA32 ED B0                                ldir
 448+ AA34 C9                                   ret
 449+ AA35
 450+ AA35 2A 20 C0     CopyPosToVector:        ld      hl,(UBnKxlo)
 451+ AA38 3A 22 C0                             ld      a,(UBnKxsgn)
 452+ AA3B                                      ;xor     $80
 453+ AA3B 22 BB A3                             ld      (TacticsVectorX),hl
 454+ AA3E 32 BD A3                             ld      (TacticsVectorX+2),a
 455+ AA41
 456+ AA41 2A 23 C0                             ld      hl,(UBnKylo)
 457+ AA44 3A 25 C0                             ld      a,(UBnKysgn)
 458+ AA47                                      ;xor     $80
 459+ AA47 22 BF A3                             ld      (TacticsVectorY),hl
 460+ AA4A 32 C1 A3                             ld      (TacticsVectorY+2),a
 461+ AA4D
 462+ AA4D 2A 26 C0                             ld      hl,(UBnKzlo)
 463+ AA50 3A 28 C0                             ld      a,(UBnKzsgn)
 464+ AA53                                      ;xor     $80
 465+ AA53 22 C3 A3                             ld      (TacticsVectorZ),hl
 466+ AA56 32 C5 A3                             ld      (TacticsVectorZ+2),a
 467+ AA59 C9                                   ret
 468+ AA5A
 469+ AA5A              SetPlayerAsTarget:      ZeroA
 469+ AA5A AF          >                        xor a
 470+ AA5B 21 AB A3                             ld      hl,TacticsTargetX
 471+ AA5E 06 09                                ld      b, 3*3
 472+ AA60 77           .ZeroLoop:              ld      (hl),a                              ; player is always at 0,0,0
 473+ AA61 23                                   inc     hl
 474+ AA62 10 FC                                djnz    .ZeroLoop
 475+ AA64 C9                                   ret
 476+ AA65
 477+ AA65 CD 5A AA     CalcVectorToMyShip:     call    SetPlayerAsTarget
 478+ AA68 CD 35 AA                             call    CopyPosToVector
 479+ AA6B                                      ;call    CopyToTargetVector
 480+ AA6B                                      ;FlipSignMem     TacticsTargetX+2
 481+ AA6B                                      ;FlipSignMem     TacticsTargetY+2
 482+ AA6B                                      ;FlipSignMem     TacticsTargetZ+2
 483+ AA6B C9                                   ret
 484+ AA6C
 485+ AA6C ED 5B AB A3  CalcTargetVector:       ld      de,(TacticsTargetX)                        ; get target ship X
 486+ AA70 3A AD A3                             ld      a,(TacticsTargetX+2)                       ; and flip sign so we have missile - target
 487+ AA73                                      FlipSignBitA
 487+ AA73 EE 80       >                        xor     SignOnly8Bit
 488+ AA75 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 489+ AA76 2A 20 C0                             ld      hl,(UBnKxlo)                        ; get missile x
 490+ AA79 3A 22 C0                             ld      a,(UBnKxsgn)                        ; get missile x sign
 491+ AA7C 47                                   ld      b,a
 492+ AA7D CD 92 92                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 493+ AA80 22 BB A3                             ld      (TacticsVectorX),hl
 494+ AA83 32 BD A3                             ld      (TacticsVectorX+2),a
 495+ AA86 ED 5B AE A3  .UpdateTargetingShipY:  ld      de,(TacticsTargetY)
 496+ AA8A 3A B0 A3                             ld      a,(TacticsTargetY+2)
 497+ AA8D                                      FlipSignBitA
 497+ AA8D EE 80       >                        xor     SignOnly8Bit
 498+ AA8F 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 499+ AA90 2A 23 C0                             ld      hl,(UBnKylo)                        ; get missile x
 500+ AA93 3A 25 C0                             ld      a,(UBnKysgn)                        ; get missile x sign
 501+ AA96 47                                   ld      b,a
 502+ AA97 CD 92 92                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 503+ AA9A 22 BF A3                             ld      (TacticsVectorY),hl
 504+ AA9D 32 C1 A3                             ld      (TacticsVectorY+2),a
 505+ AAA0 ED 5B B1 A3  .UpdateTargetingShipZ:  ld      de,(TacticsTargetZ)
 506+ AAA4 3A B3 A3                             ld      a,(TacticsTargetZ+2)
 507+ AAA7                                      FlipSignBitA
 507+ AAA7 EE 80       >                        xor     SignOnly8Bit
 508+ AAA9 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 509+ AAAA 2A 26 C0                             ld      hl,(UBnKzlo)                        ; get missile x
 510+ AAAD 3A 28 C0                             ld      a,(UBnKzsgn)                        ; get missile x sign
 511+ AAB0 47                                   ld      b,a
 512+ AAB1 CD 92 92                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 513+ AAB4 22 C3 A3                             ld      (TacticsVectorZ),hl
 514+ AAB7 32 C5 A3                             ld      (TacticsVectorZ+2),a
 515+ AABA C9                                   ret
 516+ AABB
 517+ AABB              ;-- Now its scaled we can normalise
 518+ AABB              ;-- Scale down so that h d &b are zero, then do once again so l e and c are 7 bit
 519+ AABB              ;-- use 7 bit mul96 to ensure we don;t get odd maths
 520+ AABB 2A BB A3     NormalizeTactics:       ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 521+ AABE ED 5B BF A3                          ld      de, (TacticsVectorY)        ; .
 522+ AAC2 ED 4B C3 A3                          ld      bc, (TacticsVectorZ)        ; .
 523+ AAC6 7C           .ScaleLoop:             ld      a,h
 524+ AAC7 B2                                   or      d
 525+ AAC8 B0                                   or      b
 526+ AAC9 28 0F                                jr      z,.DoneScaling
 527+ AACB                                      ShiftHLRight1
 527+ AACB CB 3C       >			   srl h
 527+ AACD CB 1D       >			   rr  l
 528+ AACF                                      ShiftDERight1
 528+ AACF CB 3A       >			   srl d
 528+ AAD1 CB 1B       >			   rr  e
 529+ AAD3                                      ShiftBCRight1
 529+ AAD3 CB 38       >			   srl b
 529+ AAD5 CB 19       >			   rr  c
 530+ AAD7 C3 C6 AA                             jp      .ScaleLoop
 531+ AADA              .DoneScaling:           ShiftHLRight1                       ; as the values now need to be sign magnitued
 531+ AADA CB 3C       >			   srl h
 531+ AADC CB 1D       >			   rr  l
 532+ AADE                                      ShiftDERight1                       ; e.g. S + 7 bit we need an extra shift
 532+ AADE CB 3A       >			   srl d
 532+ AAE0 CB 1B       >			   rr  e
 533+ AAE2                                      ShiftBCRight1                       ; now values are in L E C
 533+ AAE2 CB 38       >			   srl b
 533+ AAE4 CB 19       >			   rr  c
 534+ AAE6 E5 D5 C5                             push    hl,,de,,bc                  ; save vecrtor x y and z nwo they are scaled to 1 byte
 535+ AAE9 53                                   ld      d,e                         ; hl = y(e) ^ 2
 536+ AAEA ED 30                                mul     de                          ; .
 537+ AAEC EB                                   ex      de,hl                       ; .
 538+ AAED 53                                   ld      d,e                         ; de = x(l) ^ 2
 539+ AAEE ED 30                                mul     de                          ; .
 540+ AAF0 19                                   add     hl,de                       ; hl = hl + de
 541+ AAF1 51                                   ld      d,c                         ; de = y(c)^ 2 + x ^ 2
 542+ AAF2 59                                   ld      e,c                         ; .
 543+ AAF3 ED 30                                mul     de                          ; .
 544+ AAF5 19                                   add     hl,de                       ; hl =  y^ 2 + x ^ 2 + z ^ 2
 545+ AAF6 EB                                   ex      de,hl                       ; fix as hl was holding square
 546+ AAF7 CD 28 96                             call    asm_sqrt                    ; IYH = A = hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
 547+ AAFA                                      ; add in logic if h is low then use lower bytes for all
 548+ AAFA 7D                                   ld      a,l                         ;
 549+ AAFB FD 67                                ld      iyh,a                       ;
 550+ AAFD 57                                   ld      d,a                         ; D = sqrt
 551+ AAFE C1                                   pop     bc                          ; retrive tacticsvectorz scaled
 552+ AAFF 79                                   ld      a,c                         ; a = scaled byte
 553+ AB00 CD 47 9B                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg          ; This rountine I think is wrong and retuins bad values
 554+ AB03 32 C3 A3                             ld      (TacticsVectorZ),a          ; z = normalised z
 555+ AB06 D1                                   pop     de
 556+ AB07 7B                                   ld      a,e
 557+ AB08 FD 54                                ld      d,iyh
 558+ AB0A CD 47 9B                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 559+ AB0D 32 BF A3                             ld      (TacticsVectorY),a
 560+ AB10 E1                                   pop     hl
 561+ AB11 7D                                   ld      a,l
 562+ AB12 FD 54                                ld      d,iyh
 563+ AB14 CD 47 9B                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 564+ AB17 32 BB A3                             ld      (TacticsVectorX),a
 565+ AB1A                                      ; BODGE FOR NOW
 566+ AB1A                                     ; BODGE FOR NOW
 567+ AB1A                                      ZeroA                              ;; added to help debugging
 567+ AB1A AF          >                        xor a
 568+ AB1B 32 BC A3                             ld      (TacticsVectorX+1),a       ;; added to help debugging
 569+ AB1E 32 C0 A3                             ld      (TacticsVectorY+1),a       ;; added to help debugging
 570+ AB21 32 C4 A3                             ld      (TacticsVectorZ+1),a       ;; added to help debugging
 571+ AB24                                      SignBitOnlyMem TacticsVectorX+2     ; now upper byte is sign only
 571+ AB24 3A BD A3    >                        ld      a, (TacticsVectorX+2)
 571+ AB27 E6 80       >                        and     SignOnly8Bit
 571+ AB29 32 BD A3    >                        ld      (TacticsVectorX+2),a
 572+ AB2C                                      SignBitOnlyMem TacticsVectorY+2     ; (could move it to lower perhaps later if
 572+ AB2C 3A C1 A3    >                        ld      a, (TacticsVectorY+2)
 572+ AB2F E6 80       >                        and     SignOnly8Bit
 572+ AB31 32 C1 A3    >                        ld      (TacticsVectorY+2),a
 573+ AB34                                      SignBitOnlyMem TacticsVectorZ+2     ;  its worth it)
 573+ AB34 3A C5 A3    >                        ld      a, (TacticsVectorZ+2)
 573+ AB37 E6 80       >                        and     SignOnly8Bit
 573+ AB39 32 C5 A3    >                        ld      (TacticsVectorZ+2),a
 574+ AB3C C9                                   ret
 575+ AB3D
 576+ AB3D
 577+ AB3D              ;TODOcall    TacticsPosMinusTarget              ; calculate vector to target
 578+ AB3D              ;;TODO                        check range
 579+ AB3D              ;;TODO                        if target has ecm then 7% chance it will active, reduce target energy (i.e. damage)
 580+ AB3D              ;;TODO                        else
 581+ AB3D              ;;TODO                            normalise teh vector for direction
 582+ AB3D              ;;TODO                            dot product = missile nosev . normalised vector
 583+ AB3D              ;;TODO                            cnt = high byte of dot product, cnf is +ve if facing similar direction
 584+ AB3D              ;;TODO                            negate normalised vector so its opposite product
 585+ AB3D              ;;TODO                            invert sign of cnt
 586+ AB3D              ;;TODO                            AK = roovf . XX15
 587+ AB3D              ;;TODO                            Ships pitch = call nroll to caulate teh valu eof ships pitch counter
 588+ AB3D              ;;TODO                            if pitch * 2 < 32 then
 589+ AB3D              ;;TODO                                ax = sidev . xx15
 590+ AB3D              ;;TODO                                    a = x xort current pitch direction
 591+ AB3D              ;;TODO                                    shipts roll = nroll
 592+ AB3D              ;;TODO                            do accelleration at TA6 (    https://www.bbcelite.com/disc/flight/subroutine/tactics_part_7_of_7.html#ta20
 593+ AB3D
 594+ AB3D              ;;TODO
 595+ AB3D              ;;TODO
 596+ AB3D              ;;TODO
 597+ AB3D              ;;TODOget the targetted ship inbto bank
 598+ AB3D              ;;TODO                        check range as per player
 599+ AB3D              ;;TODO                        handle explosion enc
 600+ AB3D
 601+ AB3D              ;                    else see how close it is to target
 602+ AB3D              ;                         if close to target
 603+ AB3D              ;                            then explodes destroy missile
 604+ AB3D              ;                                 if ship is not station
 605+ AB3D              ;                                    then set up signal target ship hit my missile flag
 606+ AB3D              ;                                         set blastcheckcounter to slotlist length  (12)
 607+ AB3D              ;                                 end if
 608+ AB3D              ;                                 if we are in range of missle blast
 609+ AB3D              ;                                    cause blast damage to our ship (this will signal death is needed)
 610+ AB3D              ;                                 end if
 611+ AB3D              ;                                 return
 612+ AB3D              ;                         end if
 613+ AB3D              ;                 end if
 614+ AB3D              ;         end if
 615+ AB3D
 616+ AB3D
 617+ AB3D                          ;            else if ship is angry at us
 618+ AB3D              ;
 619+ AB3D
 620+ AB3D              ; Part 1 - if type is missile and enquing a missile blast and slot free
 621+ AB3D              ;             then enqueue missile blast details
 622+ AB3D              ;                  mark as exploded
 623+ AB3D              ;                  remove missile from universe slot list
 624+ AB3D
 625+ AB3D              ; TODO, how to we deal with scared ships, e.g. if angry and no guns or missiles then should be considered scared or if hull mass < say 25% of our ship
 626+ AB3D              ; also for future ship vs ship combat
 627+ AB3D              ;... Tactics........................................................................
 628+ AB3D              ;.PART 1
 629+ AB3D              ; if shiphitbymissleflag <> false
 630+ AB3D              ;    then dec blast check counter
 631+ AB3D              ;         if blast check counter = 0
 632+ AB3D              ;            then set shiphitbymissileflag to FF
 633+ AB3D              ;    else if SetShipHitByMissileFlag = current ship number
 634+ AB3D              ;            then cause damage to ship
 635+ AB3D              ;         else if ship is in range and ship is not a station
 636+ AB3D              ;                  then cause blast damage to ship
 637+ AB3D              ;         if destroyed
 638+ AB3D              ;            then explode ship
 639+ AB3D              ;                 return
 640+ AB3D              ; end if
 641+ AB3D              ; if ship is a missle (I think we allow missile on missle action)
 642+ AB3D              ;    then if ecm is active
 643+ AB3D              ;            then destroy missile and return
 644+ AB3D              ;            else if ship is angry at us
 645+ AB3D              ;                    then if ship is close to us
 646+ AB3D              ;                            then explodes causing damage to our ship
 647+ AB3D              ;                                 enque missile blast
 648+ AB3D              ;                                 destroy missile
 649+ AB3D              ;                                 set blastcheckcounter to slotlist length
 650+ AB3D              ;                                 set shiphitbymissileflag to FE (general blast)
 651+ AB3D              ;                                 return
 652+ AB3D              ;                            else jump to part 3 to do updates
 653+ AB3D              ;                         end if
 654+ AB3D              ;                    else see how close it is to target
 655+ AB3D              ;                         if close to target
 656+ AB3D              ;                            then
 657+ AB3D              ;                                 enque missile blast
 658+ AB3D              ;                                 destroy missile
 659+ AB3D              ;                                 if ship is not station
 660+ AB3D              ;                                    then set up signal target ship hit my missile flag
 661+ AB3D              ;                                         set blastcheckcounter to slotlist length  (12)
 662+ AB3D              ;                                 end if
 663+ AB3D              ;                                 if we are in range of missle blast
 664+ AB3D              ;                                    cause blast damage to our ship (this will signal death is needed)
 665+ AB3D              ;                                 end if
 666+ AB3D              ;                                 return
 667+ AB3D              ;                         end if
 668+ AB3D              ;                 end if
 669+ AB3D              ;         end if
 670+ AB3D              ;.PART 2A ** adding in a collision logic
 671+ AB3D              ;    else if ship is close to another ship
 672+ AB3D              ;            then if docking flag set and other ship is space station or we are space station and other ship has docking flag
 673+ AB3D              ;                    then if aligned correctly
 674+ AB3D              ;                         then remove ship as docked
 675+ AB3D              ;                              return
 676+ AB3D              ;         else
 677+ AB3D              ;            call collision route and determine daamage based on sizes and bounce vectors
 678+ AB3D              ;            return
 679+ AB3D              ;.PART 2 ** Need to check if ship has AI flag
 680+ AB3D              ;    else if not hostile
 681+ AB3D              ;            then if not docking or station not present
 682+ AB3D              ;                    then calculate vector to planet
 683+ AB3D              ;                         jump to part 7
 684+ AB3D              ;                    else calculate verctor to docking slot
 685+ AB3D              ;                         call caluclate vector to docking slot (DOCKIT)
 686+ AB3D              ;                         jump to part 7
 687+ AB3D              ;                 end if
 688+ AB3D              ;            else case ship type
 689+ AB3D              ;                      >>escape pod>> point at planet and jump to step 7
 690+ AB3D              ;                      >>space station>> if hostile
 691+ AB3D              ;                                           then if cop counter < 7 and 6.2% chance
 692+ AB3D              ;                                                   then spawm hostile cop
 693+ AB3D              ;                                                end if
 694+ AB3D              ;                                           else
 695+ AB3D              ;                                                if 0.8% change and transporter count = 0
 696+ AB3D              ;                                                   then if 50% chance
 697+ AB3D              ;                                                           then spawn transporter
 698+ AB3D              ;                                                           else spawn shuttle
 699+ AB3D              ;                                                        end if
 700+ AB3D              ;                                                end if
 701+ AB3D              ;                                        end if
 702+ AB3D              ;                                        return
 703+ AB3D              ;                      >>targoid and no mother ship in slot list>> set random drift
 704+ AB3D              ;                                                                  return
 705+ AB3D              ;                      >>if bounty hunter flag>> if ship not hostile
 706+ AB3D              ;                                                   then if trader flag clear or 20% chance
 707+ AB3D              ;                                                        then if fugitive or offender
 708+ AB3D              ;                                                                then set hosile
 709+ AB3D              ;                                                end if
 710+ AB3D              ;                      >>Carrier and hanger slots > 0 >> if 22% chance (code to be added later)
 711+ AB3D              ;                                         then spawn agressive hosting one of types carried
 712+ AB3D              ;                                              reduce ships in hanger by 1
 713+ AB3D              ;                                              return
 714+ AB3D              ;                      >>rock hermit>> if 22% chance
 715+ AB3D              ;                                         then spawn agressive hosting one of Sidewinder, Mamba, Krait, Adder or Gecko
 716+ AB3D              ;                                              return
 717+ AB3D              ;                      >>pirate and in safe zone>> stop pirate being hostile by removing agressive and hostileflags
 718+ AB3D              ;                 end case
 719+ AB3D              ;         end if
 720+ AB3D              ;         recharge ship energy by recharge factor (TODO as a config item on ship type but by default 1)
 721+ AB3D              ; .PART 3
 722+ AB3D              ;         calulcate dot product of ship nose to us
 723+ AB3D              ; .PART 4
 724+ AB3D              ;         2.5% change ship rill roll a noticable amount
 725+ AB3D              ;         if ship has > 50% energy jump to part 6
 726+ AB3D              ;         if ship > 1/8th energy jump to part 5
 727+ AB3D              ;         if random 10% chance (i.e. ship < 1/8 energy and bails out)
 728+ AB3D              ;            then launch escape pod
 729+ AB3D              ;                 set AI to null
 730+ AB3D              ;                 set random pitch and roll
 731+ AB3D              ;                 set accelleation to 0
 732+ AB3D              ;         end if
 733+ AB3D              ; .PART 5
 734+ AB3D              ;         if ship does not have any missilesor ECM is firing to part 6
 735+ AB3D              ;            then if random > threshold for ship type (TODO as a config item on ship type)
 736+ AB3D              ;                    then if tharoid ; note this means thargoids are sensitve to ECM
 737+ AB3D              ;                            then launch thargon
 738+ AB3D              ;                            else spawn angry missle under ship
 739+ AB3D              ;                         end if
 740+ AB3D              ;                 end if
 741+ AB3D              ;            else return
 742+ AB3D              ;         end if
 743+ AB3D              ; .PART 6
 744+ AB3D              ;         if ship is not pointing at us from dot product ( < 160 , also > -32)
 745+ AB3D              ;            then jump to part 7
 746+ AB3D              ;            else if ship is pointing directly at us ( < 163 i.e. > -35)
 747+ AB3D              ;                    then fire laser at us (which reduces energy)
 748+ AB3D              ;                         cause laser damage to our ship (this will signal death is needed)
 749+ AB3D              ;                         decellerate by half as ship has lock on
 750+ AB3D              ;                         return
 751+ AB3D              ;                    else fire laser into space (which reduces energy)
 752+ AB3D              ;                 end if
 753+ AB3D              ;         end if
 754+ AB3D              ; .PART 7#
 755+ AB3D              ;        if ship is a msile targetting us
 756+ AB3D              ;           then ship turns towards us some more
 757+ AB3D              ;           else if z hi > =  3 or ( x hi or y hi > 1) , i.e. ship is far away
 758+ AB3D              ;                    then do random wiht bit 7 set
 759+ AB3D              ;                         if random < AI flag
 760+ AB3D              ;                            then   ship turned towards us
 761+ AB3D              ;                            else   ship turns away from us
 762+ AB3D              ;                         end if
 763+ AB3D              ;                end if
 764+ AB3D              ;           end if
 765+ AB3D              ;           calculate new roll, pitch and accelleration based on new targe vector
 766+ AB3D
 767+ AB3D
 768+ AB3D              ;        determine ship direction based on agression and type
 769+ AB3D              ;        set pitch and roll coutners
 770+ AB3D              ;        adjust speed depleding on relationship to us
 771+ AB3D              ; .PART 8 - new
 772+ AB3D              ;        if ship has ECM, another ECM is not active and missile targeted at it
 773+ AB3D              ;           if ship has enery of ECM energey cost + 1/8th total
 774+ AB3D              ;              if chance 25%
 775+ AB3D              ;                 then fire ECM
 776+ AB3D              ;
 777+ AB3D
 778+ AB3D
 779+ AB3D
 780+ AB3D
 781+ AB3D 2A BB A3     ReduceTacticVectors:ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 782+ AB40 ED 5B BF A3                      ld      de, (TacticsVectorY)        ; .
 783+ AB44 ED 4B C3 A3                      ld      bc, (TacticsVectorZ)        ; .
 784+ AB48 3A BD A3                         ld      a,(TacticsVectorX+2)        ; .
 785+ AB4B FD 67                            ld      iyh,a                       ; iyh = X sign
 786+ AB4D 3A C1 A3                         ld      a,(TacticsVectorY+2)        ; .
 787+ AB50 FD 6F                            ld      iyl,a                       ; iyl = Y sign
 788+ AB52 3A C5 A3                         ld      a,(TacticsVectorZ+2)        ; .
 789+ AB55 DD 67                            ld      ixh,a                       ; ixh = z sign
 790+ AB57 FD B4        .ScaleLoop:         or      iyh                         ; now check if upper has value
 791+ AB59 FD B5                            or      iyl                         ; .
 792+ AB5B                                  ClearSignBitA                       ;  exluding sign bit
 792+ AB5B E6 7F       >                        and     SignMask8Bit
 793+ AB5D 28 21                            jr      z,.DoneScaling              ; and exit loop if upper byte is only sign component
 794+ AB5F FD 7C        .ScaledDownBy2:     ld      a,iyh
 795+ AB61 CB 2F                            sra     a
 796+ AB63 FD 67                            ld      iyh,a                       ; actually we can keep sign bit so just sr then rr
 797+ AB65 CB 1C                            rr      h                           ; Deal with X
 798+ AB67 CB 1D                            rr      l                           ;
 799+ AB69 FD 7D                            ld      a,iyl
 800+ AB6B CB 2F                            sra     a                           ; actually we can keep sign bit so just sr then rr
 801+ AB6D FD 6F                            ld      iyl,a
 802+ AB6F CB 1A                            rr      d                           ; Deal with Y
 803+ AB71 CB 1B                            rr      e                           ;
 804+ AB73 DD 7D                            ld      a, ixl                      ; actually we can keep sign bit so just sr then rr
 805+ AB75 CB 2F                            sra     a
 806+ AB77 DD 6F                            ld      ixl,a
 807+ AB79 CB 18                            rr      b                           ; Deal with Z
 808+ AB7B CB 19                            rr      c                           ;
 809+ AB7D C3 57 AB                         jp      .ScaleLoop
 810+ AB80 7C           .DoneScaling:       ld      a,h
 811+ AB81 B2                               or      d
 812+ AB82 B0                               or      b
 813+ AB83                                  SignBitOnlyA                        ; check if new sign bit has a value rotated in,
 813+ AB83 E6 80       >                        and     SignOnly8Bit
 814+ AB85 28 0C                            jr      z,.OKToNormalise
 815+ AB87              .ShiftTo15Bit:      ShiftHLRight1                       ; one last shift to 15 bit we don't need
 815+ AB87 CB 3C       >			   srl h
 815+ AB89 CB 1D       >			   rr  l
 816+ AB8B                                  ShiftDERight1                       ; to do sign bytes
 816+ AB8B CB 3A       >			   srl d
 816+ AB8D CB 1B       >			   rr  e
 817+ AB8F                                  ShiftBCRight1                       ; as value must be 0
 817+ AB8F CB 38       >			   srl b
 817+ AB91 CB 19       >			   rr  c
 818+ AB93 7C           .OKToNormalise:     ld      a,h                         ; iyh now can only hold sign
 819+ AB94 FD B4                            or      iyh                         ; so by the end of here
 820+ AB96 67                               ld      h,a                         ;   hl = x
 821+ AB97 7A                               ld      a,d                         ;   de = y
 822+ AB98 FD B5                            or      iyl                         ;   bc = z
 823+ AB9A 57                               ld      d,a                         ; all scaled to 15 bit + sign
 824+ AB9B 78                               ld      a,b                         ;
 825+ AB9C DD B4                            or      ixh                         ;
 826+ AB9E 47                               ld      b,a                         ;
 827+ AB9F 22 CB A3                         ld      (TacticsNormX),hl
 828+ ABA2 22 CF A3                         ld      (TacticsNormY),hl
 829+ ABA5 22 D3 A3                         ld      (TacticsNormZ),hl
 830+ ABA8 C9                               ret
 831+ ABA9                                 ; ***SIgn bits*** need to be in byte 3
 832+ ABA9
# file closed: ./GameEngine/Tactics.asm
 637  ABA9                  INCLUDE "./Hardware/drive_access.asm"
# file opened: ./Hardware/drive_access.asm
   1+ ABA9              M_GETSETDRV             equ $89
   2+ ABA9              F_OPEN                  equ $9a
   3+ ABA9              F_CLOSE                 equ $9b
   4+ ABA9              F_READ                  equ $9d
   5+ ABA9              F_WRITE                 equ $9e
   6+ ABA9              F_SEEK                  equ $9f
   7+ ABA9
   8+ ABA9              FA_READ                 equ $01
   9+ ABA9              FA_APPEND               equ $06
  10+ ABA9              FA_OVERWRITE            equ $0C
  11+ ABA9              DISK_FILEMAP            equ $85
  12+ ABA9              DISK_STRMSTART          equ $86
  13+ ABA9              DISK_STRMEND            equ $87
  14+ ABA9
  15+ ABA9              ESX_MODE_READ           equ $01
  16+ ABA9              ESX_MODE_OPEN_EXIST     equ $00
  17+ ABA9
  18+ ABA9              FILEMAP_SIZE            equ $20
  19+ ABA9              FILEMAP_BLOCK_SIZE      equ $06
  20+ ABA9
  21+ ABA9              ; Success 1 = default drive, carry reset
  22+ ABA9              ; Failure HL = -1 , carry set, errno set
  23+ ABA9 F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  23+ ABAD DD E5
  24+ ABAF AF                                   xor	    a	; a = 0 means get default drive into A
  25+ ABB0 CF                                   rst	    $08
  26+ ABB1 89                                   db	    M_GETSETDRV
  27+ ABB2 32 47 AC                             ld	    (DefaultDrive),a
  28+ ABB5 DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  28+ ABB9 C1 F1
  29+ ABBB C9                                   ret
  30+ ABBC
  31+ ABBC
  32+ ABBC              ; Disable NMI Multi face - needed for streaming
  33+ ABBC              ;disable_multiface:      ld      bc,REGISTER_NUMBER_PORT
  34+ ABBC              ;                        ld      a,PERIPHERAL_2_REGISTER
  35+ ABBC              ;                        out     (c),a
  36+ ABBC              ;                        inc     b
  37+ ABBC              ;                        in      a,(c)
  38+ ABBC              ;                        and     %11110111
  39+ ABBC              ;                        out     (c),a
  40+ ABBC              ;                        ret
  41+ ABBC              ;
  42+ ABBC              ;enable_multiface:       ld      bc,REGISTER_NUMBER_PORT
  43+ ABBC              ;                        ld      a,PERIPHERAL_2_REGISTER
  44+ ABBC              ;                        out     (c),a
  45+ ABBC              ;                        inc     b
  46+ ABBC              ;                        in      a,(c)
  47+ ABBC              ;                        or      %00001000
  48+ ABBC              ;                        out     (c),a
  49+ ABBC              ;                        ret
  50+ ABBC              ;
  51+ ABBC              ; *******************************************************************************************************
  52+ ABBC              ;	Function:	Open a file read for reading/writing
  53+ ABBC              ;	In:		ix = filename
  54+ ABBC              ;			b  = Open filemode
  55+ ABBC              ;	ret		a  = handle, 0 on error
  56+ ABBC              ;   fOpen_read_exists takes defaults and sets up default drive
  57+ ABBC              ; *******************************************************************************************************
  58+ ABBC              ;fOpen_read_exists:      ld      b,ESX_MODE_READ | ESX_MODE_OPEN_EXIST
  59+ ABBC              ;                        call    GetDefaultDrive
  60+ ABBC              ;                        call    fOpen
  61+ ABBC              ;                        call    fRefill_map
  62+ ABBC              ;                        jp      c,.RefilMapError
  63+ ABBC              ;                        jp      z,.RefilMapEmpty
  64+ ABBC              ;                        ret
  65+ ABBC              ;.RefilMapError:         jp      .RefilMapError
  66+ ABBC              ;.RefilMapEmpty:         jp      .RefilMapEmpty
  67+ ABBC              ;
  68+ ABBC              ;
  69+ ABBC
  70+ ABBC 3A 47 AC     fOpen:	                ld	    a,(DefaultDrive); default drive must be called before we start
  71+ ABBF CF                                   rst	    $08
  72+ ABC0 9A                                   db	    F_OPEN
  73+ ABC1 32 48 AC                             ld      (FileHandle),a  ; make a local copy of last file opened
  74+ ABC4 38 01                                jr      c,.FileOpenError
  75+ ABC6 C9                                   ret
  76+ ABC7 C3 C7 AB     .FileOpenError:         jp      .FileOpenError
  77+ ABCA
  78+ ABCA              ; *******************************************************************************************************
  79+ ABCA              ;	Function	refills the buffer map with card addresses for the file
  80+ ABCA              ;	In:		a  = file handle (if calling fRefill_mapA)
  81+ ABCA              ;           ix = address of filemap_buffer (if calling fRefill_mapA)
  82+ ABCA              ;           de = filemap size (which should equal 4 in our case)
  83+ ABCA              ;			bc  = amount to read
  84+ ABCA              ;	ret:		carry set = error
  85+ ABCA              ;               zero set  = no data loaded so still error
  86+ ABCA              ;   you can use fRefill_map to pull default valuess
  87+ ABCA              ; *******************************************************************************************************
  88+ ABCA              ;fRefill_map:            ld      a,(FileHandle)
  89+ ABCA              ;                        ld      ix,FilemapBuffer
  90+ ABCA              ;                        ld      de,FILEMAP_SIZE
  91+ ABCA              ;fRefill_mapA:           rst     $08
  92+ ABCA              ;                        db      DISK_FILEMAP
  93+ ABCA              ;.SetFlags:              ld      (CardFlags),a                   ; set up adressing mode flags  bit 0=card id (0 or 1) bit 1=0 for byte addressing, 1 for block addressing
  94+ ABCA              ;.CheckForEntries:       ld      (FilemapBufferLast),hl          ; save last entry address +2
  95+ ABCA              ;                        ld      de,FilemapBuffer
  96+ ABCA              ;                        sbc     hl,de                           ; hl = number of entries found
  97+ ABCA              ;                        ld      a,$ff
  98+ ABCA              ;                        ret
  99+ ABCA              ;
 100+ ABCA              ;read_stream_block:      ld      hl,(FilemapBufferPointer)
 101+ ABCA              ;                        ldBCDEatHL                              ; load the disk address
 102+ ABCA              ;                        push    bc                              ; into IXDE
 103+ ABCA              ;                        pop     ix                              ; now IXDE = card address
 104+ ABCA              ;                        ldBCatHL                                ; bc = number of blocks to be read
 105+ ABCA              ;                        ld      (FilemapBlockCount),bc
 106+ ABCA              ;                        ret
 107+ ABCA              ; Start up stream of data
 108+ ABCA              ; If successful, the call returns with:
 109+ ABCA              ; B=protocol: 0=SD/MMC, 1=IDE,  C=data port
 110+ ABCA              ; NOTE: On the Next, these values will always be: B=0 C=$EB
 111+ ABCA              ;fStream_start:          ld      hl,FilemapBuffer                ; set to head of filemap
 112+ ABCA              ;                        ld      (FilemapBufferPointer),hl       ; .
 113+ ABCA              ;                        ZeroA
 114+ ABCA              ;                        ld      (FilereadsPerformed),a
 115+ ABCA              ;                        call    read_stream_block
 116+ ABCA              ;                        ld      a,(CardFlags)                   ; get card flags back
 117+ ABCA              ;                        rst     $08
 118+ ABCA              ;                        DB      DISK_STRMSTART                  ; start up stream
 119+ ABCA              ;                        ld      (FileStreamPort),bc             ; save port information (even through it will not change on a next)
 120+ ABCA              ;                        ret
 121+ ABCA
 122+ ABCA              ; *******************************************************************************************************
 123+ ABCA              ;	Function	stream in a block of data to memory
 124+ ABCA              ;	In:		ix  = address to read into
 125+ ABCA              ;			bc  = amount to read
 126+ ABCA              ;	ret:		carry set = error
 127+ ABCA              ; *******************************************************************************************************
 128+ ABCA              ;fStream_block:          ld      ix,FileBuffer
 129+ ABCA              ;                        ld      a,(CardFlags)
 130+ ABCA              ;                        ld      bc,(FileStreamPort)
 131+ ABCA              ;                        ld      hl,FileBuffer
 132+ ABCA              ;                        ld      (FilemapBufferPointer),hl
 133+ ABCA              ;.StreamLoop:            ld      b,0
 134+ ABCA              ;                        ld      a,(TargetSize+1)
 135+ ABCA              ;                        cp      2
 136+ ABCA              ;                        jr      c,.stream_partial_block
 137+ ABCA              ;.StreamFullBlock:       inir                                ; read 256 bytes to hl
 138+ ABCA              ;                        inir                                ; read 256 bytes to hl+256
 139+ ABCA              ;                        dec     b                           ; update byte count
 140+ ABCA              ;                        dec     b                           ; .
 141+ ABCA              ;                        ld      hl,TargetSize               ; 512 bytes read
 142+ ABCA              ;                        ld      de,512
 143+ ABCA              ;                        ClearCarryFlag
 144+ ABCA              ;                        sbc     hl,de
 145+ ABCA              ;                        ld      (TargetSize),hl
 146+ ABCA              ;                        ld      a,(FileStreamPort+1)        ; get the protocol
 147+ ABCA              ;                        and     a
 148+ ABCA              ;                        jr      nz,.protocol_ide            ; we arn't using but for compatibility
 149+ ABCA              ;.protocol_sdmmc:        in      a,(c)                       ; for sd and mmc, read in the 2 byte CRC
 150+ ABCA              ;                        nop                                 ; as the max performance of the interface is
 151+ ABCA              ;                        nop                                 ; 16T per byte, no ops pad out operation
 152+ ABCA              ;                        in      a,(c)
 153+ ABCA              ;                        nop
 154+ ABCA              ;                        nop
 155+ ABCA              ;.wait_for_next_block:   in      a,(c)                       ; if wait token is not FF then we are read
 156+ ABCA              ;                        cp      $FF
 157+ ABCA              ;                        jr      z,.wait_for_next_block
 158+ ABCA              ;                        cp      $FE                         ; if not and its not FE its a fault
 159+ ABCA              ;                        jr      nz,.token_error
 160+ ABCA              ;.protocol_ide:          ld      de,(TargetSize)             ; Any more bytes required
 161+ ABCA              ;                        ld      a,d
 162+ ABCA              ;                        or      e
 163+ ABCA              ;                        jr      z,.streaming_complete
 164+ ABCA              ;                        ret
 165+ ABCA              ;.stream_partial_block:  and     a                           ; is block at least 256 bytes?
 166+ ABCA              ;                        jr      z,.under256_bytes
 167+ ABCA              ;                        inir                                ; get 256 bytes
 168+ ABCA              ;.under256_bytes:        ld      b,e
 169+ ABCA              ;                        inc     b
 170+ ABCA              ;                        dec     b
 171+ ABCA              ;                        jr      z,.streaming_complete
 172+ ABCA              ;                        inir
 173+ ABCA              ;.streaming_complete:    ld      a,(CardFlags)
 174+ ABCA              ;                        rst     $08
 175+ ABCA              ;                        DB      DISK_STRMEND
 176+ ABCA              ;                        ld      a,(FileHandle)
 177+ ABCA              ;                        call    fClose
 178+ ABCA              ;                        ret
 179+ ABCA              ;.token_error:           jp      .token_error
 180+ ABCA              ;
 181+ ABCA              ;
 182+ ABCA              ;fOpenReadFile:          ld      (TargetSize),bc
 183+ ABCA              ;                        call    disable_multiface
 184+ ABCA              ;                        call    fOpen_read_exists
 185+ ABCA              ;.SetupStream:           call    fStream_start
 186+ ABCA              ;                        jr      c,.FileStreamError
 187+ ABCA              ;                        ret
 188+ ABCA              ;
 189+ ABCA              ;.FileStreamError:       jp      .FileStreamError
 190+ ABCA              ;
 191+ ABCA              ; *******************************************************************************************************
 192+ ABCA              ;	Function	Read bytes from the open file
 193+ ABCA              ;	In:		ix  = address to read into
 194+ ABCA              ;			bc  = amount to read
 195+ ABCA              ;	ret:		carry set = error
 196+ ABCA              ; *******************************************************************************************************
 197+ ABCA B7           fRead:                  or   	a             ; is it zero?
 198+ ABCB C8                                   ret  	z             ; if so return
 199+ ABCC E5                                   push    hl
 200+ ABCD DD E5 E1                             ld      hl,ix    	 ; load ix into hl and save hl for later
 201+ ABD0 CF                                   rst	    $08
 202+ ABD1 9D                                   db	    F_READ
 203+ ABD2 E1                                   pop	    hl
 204+ ABD3 C9                                   ret
 205+ ABD4
 206+ ABD4              ; *******************************************************************************************************
 207+ ABD4              ;	Function	Write bytes to the open file
 208+ ABD4              ;	In:		ix  = address to read from
 209+ ABD4              ;			bc  = amount to write
 210+ ABD4              ;	ret:		carry set = error
 211+ ABD4              ; *******************************************************************************************************
 212+ ABD4 B7           fWrite:                 or   	a             ; is it zero?
 213+ ABD5 C8                                   ret  	z             ; if so return
 214+ ABD6 E5                                   push	hl
 215+ ABD7 DD E5 E1                             ld      hl,ix
 216+ ABDA CF                                   rst	    $08
 217+ ABDB 9E                                   db	    F_WRITE
 218+ ABDC E1                                   pop	    hl
 219+ ABDD C9                                   ret
 220+ ABDE
 221+ ABDE              ; *******************************************************************************************************
 222+ ABDE              ;	Function:	Close open file
 223+ ABDE              ;	In:		a  = handle
 224+ ABDE              ;	ret		a  = handle, 0 on error
 225+ ABDE              ; *******************************************************************************************************
 226+ ABDE B7           fClose:		            or   	a             ; is it zero?
 227+ ABDF C8                                   ret  	z             ; if so return
 228+ ABE0 CF                                   rst	    $08
 229+ ABE1 9B                                   db	    F_CLOSE
 230+ ABE2 C9                                   ret
 231+ ABE3
 232+ ABE3              ;fSeekHome:              push    bc,,de,,hl,,ix
 233+ ABE3              ;                        ld      bc,0
 234+ ABE3              ;                        ld      de,0
 235+ ABE3              ;                        ld      l,0
 236+ ABE3              ;                        call    fSeek
 237+ ABE3              ;                        pop     bc,,de,,hl,,ix
 238+ ABE3              ;                        ret
 239+ ABE3              ;
 240+ ABE3              ;fSeekForward256:        push    bc,,de,,hl,,ix
 241+ ABE3              ;                        ld      bc,0
 242+ ABE3              ;                        ld      de,256
 243+ ABE3              ;                        ld      l,1
 244+ ABE3              ;                        call    fSeek
 245+ ABE3              ;                        pop     bc,,de,,hl,,ix
 246+ ABE3              ;                        ret
 247+ ABE3
 248+ ABE3              ; *******************************************************************************************************
 249+ ABE3              ;	Function	Read bytes from the open file
 250+ ABE3              ;	In:		a   = file handle
 251+ ABE3              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
 252+ ABE3              ;			BCDE = bytes to seek
 253+ ABE3              ;	ret:		BCDE = file pos from start
 254+ ABE3              ; *******************************************************************************************************
 255+ ABE3 DD E5 E5     fSeek:                  push	ix,,hl
 256+ ABE6 CF                                   rst	    $08
 257+ ABE7 9F                                   db	    F_SEEK
 258+ ABE8 E1 DD E1                             pop	    ix,,hl
 259+ ABEB C9                                   ret
 260+ ABEC
 261+ ABEC              ; *******************************************************************************************************
 262+ ABEC              ; Init the file system
 263+ ABEC              ; *******************************************************************************************************
 264+ ABEC CD A9 AB     InitFileSystem:         call    GetDefaultDrive
 265+ ABEF C9                                   ret
 266+ ABF0
 267+ ABF0              ; *******************************************************************************************************
 268+ ABF0              ; Function:	Load a whole file into memory	(confirmed working on real machine)
 269+ ABF0              ; In:		hl = file data pointer
 270+ ABF0              ;		    ix = address to load to
 271+ ABF0              ;           bc = filelength
 272+ ABF0              ; *******************************************************************************************************
 273+ ABF0 CD A9 AB     FileLoad:	            call    GetDefaultDrive
 274+ ABF3 C5 D5 F5                             push	bc,,de,,af
 275+ ABF6                                      ; get file size
 276+ ABF6 C5 DD E5                             push	bc,,ix			; store size, load address,
 277+ ABF9 E5 DD E1                             ld      ix,hl
 278+ ABFC 06 01                                ld      b,FA_READ		; mode open for reading
 279+ ABFE CD BC AB                             call    fOpen
 280+ AC01 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 281+ AC03 FE 00                                cp	    0				; was file handle 0?
 282+ AC05 28 13                                jr	    z,.error_opening; of so there was an error opening.
 283+ AC07 DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 284+ AC0A F5                                   push	af				; remember handle
 285+ AC0B CD CA AB                             call	fRead			; read data from A to address IX of length BC
 286+ AC0E 38 0C                                jr	    c,.error_reading
 287+ AC10 F1                                   pop	    af			    ; get handle back
 288+ AC11 CD DE AB                             call	fClose			; close file
 289+ AC14 38 07                                jr	    c,.error_closing
 290+ AC16 F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 291+ AC19 C9                                   ret
 292+ AC1A              ;
 293+ AC1A              ; On error, display error code an lock up so we can see it
 294+ AC1A              ;
 295+ AC1A DD E1        .error_opening:         pop	ix
 296+ AC1C C1           .error_reading:		    pop	bc	; don't pop a, need error code
 297+ AC1D
 298+ AC1D              .error_closing:
 299+ AC1D C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 300+ AC1E D1                                   pop	de
 301+ AC1F C1                                   pop	bc
 302+ AC20 C9                                   ret
 303+ AC21
 304+ AC21              ; *******************************************************************************************************
 305+ AC21              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 306+ AC21              ; In:		hl = file name
 307+ AC21              ;		    ix = address to save from
 308+ AC21              ;		    bc = size
 309+ AC21              ; *******************************************************************************************************
 310+ AC21 CD A9 AB     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 311+ AC24 C5 DD E5                             push	bc,,ix   			; store size& save address
 312+ AC27 E5 DD E1                             ld      ix,hl               ; get name into ix
 313+ AC2A 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 314+ AC2C CD BC AB                             call    fOpen
 315+ AC2F 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 316+ AC31 FE 00                                cp	    0			        ; was file handle 0?
 317+ AC33 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 318+ AC35 DD E1 C1                             pop	    bc,,ix			    ; get lenght and save address back
 319+ AC38 F5                                   push	af			        ; remember handle
 320+ AC39 CD D4 AB                             call	fWrite			    ; read data from A to address IX of length BC
 321+ AC3C 38 04                                jr	c,.error
 322+ AC3E F1                                   pop	af			            ; get handle back
 323+ AC3F CD DE AB                             call	fClose			    ; close file
 324+ AC42 C9           .error:                 ret
 325+ AC43              ;
 326+ AC43              ; On error, display error code an lock up so we can see it
 327+ AC43              ;
 328+ AC43 DD E1 C1     .error_opening:         pop	bc,,ix                  ; don't pop a, need error code
 329+ AC46 C9                                   ret
 330+ AC47
 331+ AC47 00           DefaultDrive:	        DB	0
 332+ AC48 00           FileHandle:             DB  0
 333+ AC49 00           CardFlags               DB  0
 334+ AC4A 00 00        TargetSize              DW  0
 335+ AC4C 00 00        FileStreamPort          DW  0
 336+ AC4E 00 00 00...  FileBuffer              DS  512                     ; block of data
 337+ AE4E 00           FilereadsPerformed      DB  0
 338+ AE4F 00 00        FilemapBlockCount       DW  0
 339+ AE51 00 00        FilemapBufferPointer    DW  0
 340+ AE53 00 00        FilemapBufferLast       DW  0
 341+ AE55 00 00 00...  FilemapBuffer           DS  FILEMAP_BLOCK_SIZE * FILEMAP_SIZE        ; expecting 60 to be overkill as most should be 1
 342+ AF15
# file closed: ./Hardware/drive_access.asm
 638  AF15
 639  AF15                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ AF15 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ AF19 41 4E 44 45
   1+ AF1D 52 00
   2+ AF1F 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ AF23 4E 54 4F 52
   2+ AF27 59 00
   3+ AF29 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ AF2D 65 6E 74 20
   3+ AF31 53 79 73 74
   3+ AF35 65 6D 20 20
   3+ AF39 20 3A 00
   4+ AF3C 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ AF40 72 73 70 61
   4+ AF44 63 65 20 53
   4+ AF48 79 73 74 65
   4+ AF4C 6D 3A 00
   5+ AF4F 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ AF53 69 74 69 6F
   5+ AF57 6E 20 20 20
   5+ AF5B 3A 00
   6+ AF5D 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ AF61 20 20 20 20
   6+ AF65 20 20 20 20
   6+ AF69 3A 00
   7+ AF6B 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ AF6F 20 20 20 20
   7+ AF73 20 20 20 20
   7+ AF77 3A 00
   8+ AF79 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ AF7D 6C 20 53 74
   8+ AF81 61 74 75 73
   8+ AF85 3A 00
   9+ AF87 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ AF8B 6E 67 20 20
   9+ AF8F 20 20 20 20
   9+ AF93 3A 00
  10+ AF95 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ AF99 50 4D 45 4E
  10+ AF9D 54 3A 00
  11+ AFA0
  12+ AFA0 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ AFA4 20 4C 69 67
  12+ AFA8 68 74 20 59
  12+ AFAC 65 61 72 73
  12+ AFB0 00
  13+ AFB1 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ AFB5 58 58 58 58
  13+ AFB9 58 58 00
  14+ AFBC 2E           txt_cash_decimal        DB "."
  15+ AFBD 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ AFC1 00
  16+ AFC2
  17+ AFC2              txt_status_colour		equ $FF
  18+ AFC2
  19+ AFC2              print_boiler_text_l2:
  20+ AFC2              ; ">print_boilder_text hl = text structure, b = message count"
  21+ AFC2              BoilerTextLoop:
  22+ AFC2 C5           	push		bc			; Save Message Count loop value
  23+ AFC3 4E           	ld			c,(hl)		; Get Row into b
  24+ AFC4 23           	inc			hl
  25+ AFC5 46           	ld			b,(hl)		; Get Col into b
  26+ AFC6 23           	inc			hl
  27+ AFC7 5E           	ld			e,(hl)		; Get text address Lo into E
  28+ AFC8 23           	inc			hl
  29+ AFC9 56           	ld			d,(hl)		; Get text address Hi into E
  30+ AFCA 23           	inc			hl
  31+ AFCB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  32+ AFCC EB           	ex			de,hl		; now hl = address of text data
  33+ AFCD 1E FF        	ld			e,txt_status_colour
  34+ AFCF                  MMUSelectLayer2
  34+ AFCF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ AFD3 CD C8 E0     	call		l1_print_at
  36+ AFD6 E1           	pop			hl
  37+ AFD7 C1           	pop			bc
  38+ AFD8 10 E8        	djnz		BoilerTextLoop
  39+ AFDA C9           	ret
  40+ AFDB
  41+ AFDB
  42+ AFDB              print_boiler_text:
  43+ AFDB              ; ">print_boilder_text hl = text structure, b = message count"
  44+ AFDB              .BoilerTextLoop:
  45+ AFDB C5           	push		bc			; Save Message Count loop value
  46+ AFDC 4E           	ld			c,(hl)		; Get Row into b
  47+ AFDD 23           	inc			hl
  48+ AFDE 46           	ld			b,(hl)		; Get Col into b
  49+ AFDF 23           	inc			hl
  50+ AFE0 5E           	ld			e,(hl)		; Get text address Lo into E
  51+ AFE1 23           	inc			hl
  52+ AFE2 56           	ld			d,(hl)		; Get text address Hi into E
  53+ AFE3 23           	inc			hl
  54+ AFE4 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  55+ AFE5 EB           	ex			de,hl		; now hl = address of text data
  56+ AFE6 1E FF        	ld			e,txt_status_colour
  57+ AFE8 C5           	push		bc
  58+ AFE9 D1           	pop			de
  59+ AFEA CD C8 E0     	call		l1_print_at
  60+ AFED E1           	pop			hl
  61+ AFEE C1           	pop			bc
  62+ AFEF 10 EA        	djnz		.BoilerTextLoop
  63+ AFF1 C9           	ret
  64+ AFF2
  65+ AFF2              GetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++AFF2
   2++AFF2
   3++AFF2 3A A7 87     	ld		a,(Fuel)
   4++AFF5 11 A0 AF     	ld		de,txt_fuel_level
   5++AFF8 0E 9C        	ld	c, -100
   6++AFFA CD 04 B0     	call	.Num1
   7++AFFD 0E F6        	ld	c,-10
   8++AFFF CD 04 B0     	call	.Num1
   9++B002 0E FF        	ld	c,-1
  10++B004              .Num1:
  11++B004 06 2F        	ld	b,'0'-1
  12++B006              .Num2:
  13++B006 04           	inc		b
  14++B007 81           	add		a,c
  15++B008 38 FC        	jr		c,.Num2
  16++B00A 91           	sub 	c
  17++B00B C5           	push	bc
  18++B00C F5           	push	af
  19++B00D 79           	ld		a,c
  20++B00E FE FF        	cp		-1
  21++B010 CC 19 B0     	call	z,.InsertDot
  22++B013 78           	ld		a,b
  23++B014 12           	ld		(de),a
  24++B015 13           	inc		de
  25++B016 F1           	pop		af
  26++B017 C1           	pop		bc
  27++B018 C9           	ret
  28++B019              .InsertDot:
  29++B019 3E 2E        	ld		a,'.'
  30++B01B 12           	ld		(de),a
  31++B01C 13           	inc		de
  32++B01D C9           	ret
  33++B01E
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
  66+ B01E
  67+ B01E 2A A3 87     GetCash:                ld      hl,(Cash)
  68+ B021 EB                                   ex      de,hl
  69+ B022 DD 2A A5 87                          ld      ix,(Cash+2)
  70+ B026 FD 21 B1 AF                          ld		iy,txt_cash_amount
  71+ B02A CD A5 9A                             call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ B02D FD 7E 00     .ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ B030 32 BD AF                             ld		(txt_cash_fraction),a
  74+ B033 21 B2 AF     .UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ B036 7E                                   ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ B037 FE 00                                cp		0
  77+ B039 C8                                   ret		z
  78+ B03A FD 36 00 00                          ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ B03E C9                                   ret
  80+ B03F
# file closed: ./Menus/common_menu.asm
 640  B03F
 641  B03F                  org $B000
 642  B000                  DISPLAY "Vector Table Starts at ",$
 643  B000              VectorTable:
 644  B000 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 644  B004 B1 B1 B1 B1
 644  B008 B1 B1 B1 B1
 644  B00C B1 B1 B1 B1
 644  B010 B1 B1 B1 B1
 644  B014 B1 B1 B1 B1
 644  B018 B1 B1 B1 B1
 644  B01C B1 B1 B1 B1
 645  B020 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 645  B024 B1 B1 B1 B1
 645  B028 B1 B1 B1 B1
 645  B02C B1 B1 B1 B1
 645  B030 B1 B1 B1 B1
 645  B034 B1 B1 B1 B1
 645  B038 B1 B1 B1 B1
 645  B03C B1 B1 B1 B1
 646  B040 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 646  B044 B1 B1 B1 B1
 646  B048 B1 B1 B1 B1
 646  B04C B1 B1 B1 B1
 646  B050 B1 B1 B1 B1
 646  B054 B1 B1 B1 B1
 646  B058 B1 B1 B1 B1
 646  B05C B1 B1 B1 B1
 647  B060 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 647  B064 B1 B1 B1 B1
 647  B068 B1 B1 B1 B1
 647  B06C B1 B1 B1 B1
 647  B070 B1 B1 B1 B1
 647  B074 B1 B1 B1 B1
 647  B078 B1 B1 B1 B1
 647  B07C B1 B1 B1 B1
 648  B080 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 648  B084 B1 B1 B1 B1
 648  B088 B1 B1 B1 B1
 648  B08C B1 B1 B1 B1
 648  B090 B1 B1 B1 B1
 648  B094 B1 B1 B1 B1
 648  B098 B1 B1 B1 B1
 648  B09C B1 B1 B1 B1
 649  B0A0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 649  B0A4 B1 B1 B1 B1
 649  B0A8 B1 B1 B1 B1
 649  B0AC B1 B1 B1 B1
 649  B0B0 B1 B1 B1 B1
 649  B0B4 B1 B1 B1 B1
 649  B0B8 B1 B1 B1 B1
 649  B0BC B1 B1 B1 B1
 650  B0C0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 650  B0C4 B1 B1 B1 B1
 650  B0C8 B1 B1 B1 B1
 650  B0CC B1 B1 B1 B1
 650  B0D0 B1 B1 B1 B1
 650  B0D4 B1 B1 B1 B1
 650  B0D8 B1 B1 B1 B1
 650  B0DC B1 B1 B1 B1
 651  B0E0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 651  B0E4 B1 B1 B1 B1
 651  B0E8 B1 B1 B1 B1
 651  B0EC B1 B1 B1 B1
 651  B0F0 B1 B1 B1 B1
 651  B0F4 B1 B1 B1 B1
 651  B0F8 B1 B1 B1 B1
 651  B0FC B1 B1 B1 B1
 652  B100 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine
 653  B104                              ;(The last DW could just be a DB as it needs to b 257 bytes but its cleaner for source code)
 654  B104
 655  B104 60 00        IR_COUNT        dw  $0060
 656  B106
 657  B106 00           LAST_DELTA      db  0
 658  B107 00           SavedMMU6       db  0
 659  B108 00           SavedMMU7       db  0
 660  B109              SoundInterrupt      EQU IM2Sound
 661  B109              DanubeInterrupt     EQU IM2PlayDanube
 662  B109              AttractInterrrupt   EQU IM2AttractMode
 663  B109
 664  B109
 665  B109              StartOfInterruptHandler:
 666  B109                  DISPLAY "Non Banked Code Ends At", StartOfInterruptHandler
 667  B109
 668  B109                              ; NOTE play then equeue simplifies ligic, more chance slot free
 669  B109                              org $B1B1
 670  B1B1                  DISPLAY "Interrupt Handler Starts at",$
 671  B1B1              ; keeping the handler to a minimal size in order to make best use of
 672  B1B1              ; non pageable memory
 673  B1B1              IM2Routine:             IFDEF INTERRUPT_BLOCKER
 674  B1B1 ~                                            ei
 675  B1B1 ~                                            reti
 676  B1B1                                      ENDIF
 677  B1B1 F5 C5 D5 E5                          push    af,,bc,,de,,hl,,ix,,iy
 677  B1B5 DD E5 FD E5
 678  B1B9 08                                   ex      af,af'
 679  B1BA D9                                   exx
 680  B1BB F5 C5 D5 E5                          push    af,,bc,,de,,hl
 681  B1BF 21 9D 81                             ld      hl,InterruptCounter
 682  B1C2 34                                   inc     (hl)                        ; cycles each interrupt
 683  B1C3                                      ;break
 684  B1C3 CD D7 B1     IM2SoundHandler:        call    IM2Sound                    ; This is a self modifying code address to change the actual sound vector if we are doing special music e.g. intro or docking
 685  B1C6 E1 D1 C1 F1                          pop    af,,bc,,de,,hl
 686  B1CA 08                                   ex      af,af'
 687  B1CB D9                                   exx
 688  B1CC FD E1 DD E1                          pop     af,,bc,,de,,hl,,ix,,iy
 688  B1D0 E1 D1 C1 F1
 689  B1D4 FB           .IMFinishup:            ei
 690  B1D5 ED 4D                                reti
 691  B1D7                  DISPLAY "Interrupt Handler Ends at",$
 692  B1D7              EndOfNonBanked:
 693  B1D7                  DISPLAY "Non Banked Code + Interrupt Handler Ends At", EndOfNonBanked
 694  B1D7
 695  B1D7
 696  B1D7              SaveMMU6:               MACRO
 697  B1D7 ~                                    GetNextReg  MMU_SLOT_6_REGISTER
 698  B1D7 ~                                    ld      (SavedMMU6),a
 699  B1D7                                      ENDM
 700  B1D7
 701  B1D7              RestoreMMU6:            MACRO
 702  B1D7 ~                                    ld      a,(SavedMMU6)               ; now restore up post interrupt
 703  B1D7 ~                                    nextreg MMU_SLOT_6_REGISTER,a       ; Restore MMU7
 704  B1D7                                      ENDM
 705  B1D7
 706  B1D7              SaveMMU7:               MACRO
 707  B1D7 ~                                    GetNextReg  MMU_SLOT_7_REGISTER
 708  B1D7 ~                                    ld      (SavedMMU7),a
 709  B1D7                                      ENDM
 710  B1D7
 711  B1D7              RestoreMMU7:            MACRO
 712  B1D7 ~                                    ld      a,(SavedMMU7)               ; now restore up post interrupt
 713  B1D7 ~                                    nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 714  B1D7                                      ENDM
 715  B1D7
 716  B1D7              IM2Sound:               SaveMMU7
 716  B1D7             >                        GetNextReg  MMU_SLOT_7_REGISTER
 716  B1D7 C5          >            push bc
 716  B1D8 01 3B 24    >                ld bc,$243B
 716  B1DB 3E 57       >                    ld a,MMU_SLOT_7_REGISTER
 716  B1DD ED 79       >                    out (c),a
 716  B1DF 04          >                    inc b
 716  B1E0 ED 78       >                in a,(c)
 716  B1E2 C1          >            pop bc
 716  B1E3 32 08 B1    >                        ld      (SavedMMU7),a
 717  B1E6                                      MMUSelectSound
 717  B1E6 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 718  B1EA                                      ; This is a self modifying code address to change the
 719  B1EA                                      ; actual sound vector if we are doing special music
 720  B1EA                                      ; e.g. intro or docking
 721  B1EA CD 00 E0     .IM2SoundHandler:       call    SoundInterruptHandler       ; this does the work
 722  B1ED              .DoneInterrupt:         RestoreMMU7
 722  B1ED 3A 08 B1    >                        ld      a,(SavedMMU7)               ; now restore up post interrupt
 722  B1F0 ED 92 57    >                        nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 723  B1F3 C9                                   ret
 724  B1F4
 725  B1F4
 726  B1F4              IM2PlayDanube:          SaveMMU7
 726  B1F4             >                        GetNextReg  MMU_SLOT_7_REGISTER
 726  B1F4 C5          >            push bc
 726  B1F5 01 3B 24    >                ld bc,$243B
 726  B1F8 3E 57       >                    ld a,MMU_SLOT_7_REGISTER
 726  B1FA ED 79       >                    out (c),a
 726  B1FC 04          >                    inc b
 726  B1FD ED 78       >                in a,(c)
 726  B1FF C1          >            pop bc
 726  B200 32 08 B1    >                        ld      (SavedMMU7),a
 727  B203                                      MMUSelectSound
 727  B203 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 728  B207                                      ; This is a self modifying code address to change the
 729  B207                                      ; actual sound vector if we are doing special music
 730  B207                                      ; e.g. intro or docking
 731  B207 CD 1B E4     .IM2SoundHandler:       call    PlayDanube                  ; this does the work
 732  B20A              .DoneInterrupt:         RestoreMMU7
 732  B20A 3A 08 B1    >                        ld      a,(SavedMMU7)               ; now restore up post interrupt
 732  B20D ED 92 57    >                        nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 733  B210 C9                                   ret
 734  B211
 735  B211 CD F4 B1     IM2AttractMode:         call    IM2PlayDanube
 736  B214                                      SaveMMU6
 736  B214             >                        GetNextReg  MMU_SLOT_6_REGISTER
 736  B214 C5          >            push bc
 736  B215 01 3B 24    >                ld bc,$243B
 736  B218 3E 56       >                    ld a,MMU_SLOT_6_REGISTER
 736  B21A ED 79       >                    out (c),a
 736  B21C 04          >                    inc b
 736  B21D ED 78       >                in a,(c)
 736  B21F C1          >            pop bc
 736  B220 32 07 B1    >                        ld      (SavedMMU6),a
 737  B223 CD D2 77                             call    AttractModeUpdate
 738  B226                                      RestoreMMU6
 738  B226 3A 07 B1    >                        ld      a,(SavedMMU6)               ; now restore up post interrupt
 738  B229 ED 92 56    >                        nextreg MMU_SLOT_6_REGISTER,a       ; Restore MMU7
 739  B22C C9                                   ret
 740  B22D
 741  B22D              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
 742  B22D              ;INCLUDE "./title_page.asm"
 743  B22D
 744  B22D              ; Blocks dependent on variables in Universe Banks
 745  B22D              ; Bank 49
 746  B22D              ;    SEG RESETUNIVSEG
 747  B22D              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
 748  B22D              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
 749  B22D
 750  B22D
 751  B22D
 752  B22D              ;	ORG ResetUniverseAddr
 753  B22D              ;INCLUDE "./GameEngine/resetUniverse.asm"
 754  B22D              ; Bank 50  ------------------------------------------------------------------------------------------------------------------------
 755  B22D                  SLOT    MenuShrChtAddr
 756  B22D                  PAGE    BankMenuShrCht
 757  B22D              	ORG     MenuShrChtAddr,BankMenuShrCht
 758  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 84 91  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2              .BoilerTextLoop:
   4++C0C2 C5           	push		bc			; Save Message Count loop value
   5++C0C3 4E           	ld			c,(hl)		; Get Row into b
   6++C0C4 23           	inc			hl
   7++C0C5 46           	ld			b,(hl)		; Get Col into b
   8++C0C6 23           	inc			hl
   9++C0C7 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C0C8 23           	inc			hl
  11++C0C9 56           	ld			d,(hl)		; Get text address Hi into E
  12++C0CA 23           	inc			hl
  13++C0CB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C0CC EB           	ex			de,hl		; now hl = address of text data
  15++C0CD 1E FF        	ld			e,txt_status_colour
  16++C0CF C5           	push		bc
  17++C0D0 D1           	pop			de
  18++C0D1                  MMUSelectLayer1
  18++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0D5 CD C8 E0     	call		l1_print_at
  20++C0D8 E1           	pop			hl
  21++C0D9 C1           	pop			bc
  22++C0DA 10 E6        	djnz		.BoilerTextLoop
  23++C0DC C9           	ret
  24++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B 35 82                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD F5 E0                             call	sprite_local_cursor
  39+ C0EB 3A A7 87                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD A2 E9                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B 37 82                          ld		bc,(TargetSystemX)              ; bc = selected jump
  49+ C0FD ED 5B 35 82                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD FD E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A 22 82     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,     a
  58+ C113 ED 4B 37 82                          ld      bc,(TargetSystemX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 64 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 82 F6                             call	GetDigramWorkingSeed
  64+ C124 21 50 92                             ld		hl,name_expanded
  65+ C127 CD A5 91                             call	CapitaliseString
  66+ C12A 21 50 92                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B 37 82                          ld		bc,(TargetSystemX)              ; bc = selected jump
  72+ C134 ED 5B 35 82                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c                             ; a = target x pos
  74+ C139 93                                   sub		e                               ; a = target x - present x
  75+ C13A F2 4B C1                             jp      p,.NoFlipX                      ; if > 0 skip next bit
  76+ C13D ED 44                                neg                                     ; c = a = abs a * 4
  77+ C13F CB 27                                sla		a                               ; .
  78+ C141 CB 27                                sla		a                               ; .
  79+ C143 4F                                   ld      c,a                             ;  .
  80+ C144 3E 80                                ld      a,src_x_centre                  ; c = a = centre screen - c
  81+ C146 91                                   sub     c                               ; .
  82+ C147 4F                                   ld      c,a                             ; .
  83+ C148 C3 52 C1                             jp      .fixY                           ;. now do Y
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b                             ; for Y its * 2
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD D0 E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD 87 E4                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A 22 82     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 124+ C193 ED 4B 37 82                          ld      bc,(TargetSystemX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 64 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD C1 E3                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD C1 E3                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A 22 82     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B 35 82                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B 37 82                          ld      bc,(TargetSystemX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD F7 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A 57 82                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD A5 9A                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD 59 99                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD 59 99                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD 59 99                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c, .NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c, .NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD 64 88     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A 22 82                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 256+ C2BC CD 82 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 50 92                             ld		hl,name_expanded
 258+ C2C2 CD A5 91                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 50 92                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 50 92                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD C1 E3                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 68 81                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD 64 88     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A 22 82     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 330+ C343 CD 82 F6                             call	GetDigramWorkingSeed
 331+ C346 21 50 92     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD A5 91                             call	CapitaliseString
 333+ C34C 21 50 92     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD C1 E3                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 A4 81                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD 32 7D                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A 22 82                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,     a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 0B 82                             ld      de,SystemSeed
 359+ C388 CD 37 88                             call    copy_seed
 360+ C38B 3A 0C 82                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A 36 82     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A 0E 82     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A 35 82                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A 0C 82     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 36 82                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A 0E 82                             ld		a,(SystemSeed+3)
 390+ C3C5 21 35 82                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A 10 82                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD 16 EC                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A A4 81                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 A4 81                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  InitNoDoubleBuffer
 417+ C3FC             >                            MMUSelectLayer1
 417+ C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 417+ C400 CD 80 E0    >                            call	l1_cls
 417+ C403 3E 07       >                            ld		a,7
 417+ C405 CD 9B E0    >                            call	l1_attr_cls_to_a
 417+ C408             >                            MMUSelectLayer2
 417+ C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 417+ C40C CD 0A E0    >                            call    asm_l2_double_buffer_off
 417+ C40F CD 0E E2    >                            call	l2_cls	; Get some space
 417+ C412             >                            MMUSelectSpriteBank
 417+ C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 417+ C416 CD 6E E5    >                            call    sprite_cls_cursors
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 AC 81                             ld      (MenuIdMax),a
 420+ C41E                                      CopyPresentSystemToTarget               ; for short range we always start at present and cusor on present
 420+ C41E 2A 35 82    >                        ld      hl,(PresentSystemX)
 420+ C421 22 37 82    >                        ld      (TargetSystemX),hl
 421+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 422+ C427 11 FD BE                             ld		de,$BEFD
 423+ C42A 3E C0                                ld		a,$C0
 424+ C42C                                      MMUSelectLayer2
 424+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 425+ C430 CD FC E3                             call	l2_draw_box
 426+ C433 01 01 0A                             ld		bc,$0A01
 427+ C436 11 C0 FE                             ld		de,$FEC0
 428+ C439                                      MMUSelectLayer2
 428+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 429+ C43D CD 87 E4                             call	l2_draw_horz_line
 430+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 431+ C442 CD CB 91                             call	expandTokenToString
 432+ C445 06 01                                ld		b,1
 433+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 434+ C44A CD C2 C0                             call	SRM_print_boiler_text
 435+ C44D CD 31 88     SRCSetUpChart:          call	copy_galaxy_to_system
 436+ C450 CD 65 C3                             call	plot_local_stars
 437+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 438+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 439+ C459 C9                                   ret
 440+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 441+ C45A 3A 79 83     local_chart_cursors:    ld     a,(CursorKeysPressed)
 442+ C45D                                      ReturnIfAIsZero
 442+ C45D A7          >                        and     a
 442+ C45E C8          >                        ret     z
 443+ C45F 17                                   rla
 444+ C460 DC 78 C4                             call   c,src_UpPressed
 445+ C463 17                                   rla
 446+ C464 DC 95 C4                             call   c,src_DownPressed
 447+ C467 17                                   rla
 448+ C468 DC B4 C4                             call   c,src_LeftPressed
 449+ C46B 17                                   rla
 450+ C46C DC D1 C4                             call   c,src_RightPressed
 451+ C46F 17                                   rla
 452+ C470 DC F0 C4                             call   c,src_HomePressed
 453+ C473 17                                   rla
 454+ C474 DC FA C4                             call   c,src_RecenterPressed
 455+ C477 C9                                   ret
 456+ C478              ;----------------------------------------------------------------------------------------------------------------------------------
 457+ C478 3A 38 82     src_UpPressed:          ld     a,(TargetSystemY)
 458+ C47B                                      JumpIfAIsZero   src_BoundsLimit
 458+ C47B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 458+ C47C CA 0F C5    >                        jp	    z, src_BoundsLimit
 459+ C47F 47                                   ld      b,a                         ; save target as we will need it
 460+ C480 3A 36 82                             ld      a,(PresentSystemY)
 461+ C483 90                                   sub     b                           ; get the difference between present and target
 462+ C484 FA 8C C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 463+ C487                                      JumpIfAGTENusng 40,src_BoundsLimit  ; if no more than 20 then OK
 463+ C487 FE 28       >                        cp     40
 463+ C489 D2 0F C5    >                        jp		nc,src_BoundsLimit
 464+ C48C 78           .SkipBoundsTest:        ld      a,b
 465+ C48D 3D                                   dec     a
 466+ C48E 32 38 82                             ld      (TargetSystemY),a
 467+ C491 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 468+ C494 C9                                   ret
 469+ C495              ;----------------------------------------------------------------------------------------------------------------------------------
 470+ C495 3A 36 82     src_DownPressed:        ld     a,(PresentSystemY)
 471+ C498 47                                   ld      b,a
 472+ C499 3A 38 82                             ld      a,(TargetSystemY)
 473+ C49C 4F                                   ld      c,a
 474+ C49D                                      JumpIfAEqNusng 128,src_BoundsLimit
 474+ C49D FE 80       >                        cp     128
 474+ C49F CA 0F C5    >                        jp      z,src_BoundsLimit
 475+ C4A2 90                                   sub     b
 476+ C4A3 FA AB C4                             jp      m,.SkipBoundsTest
 477+ C4A6                                      JumpIfAGTENusng 40,src_BoundsLimit
 477+ C4A6 FE 28       >                        cp     40
 477+ C4A8 D2 0F C5    >                        jp		nc,src_BoundsLimit
 478+ C4AB 79           .SkipBoundsTest:        ld      a,c
 479+ C4AC 3C                                   inc    a
 480+ C4AD 32 38 82                             ld      (TargetSystemY),a
 481+ C4B0 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 482+ C4B3 C9                                   ret
 483+ C4B4              ;----------------------------------------------------------------------------------------------------------------------------------
 484+ C4B4 3A 37 82     src_LeftPressed:        ld      a,(TargetSystemX)           ; we can't move left if target is zero
 485+ C4B7                                      JumpIfAIsZero   src_BoundsLimit
 485+ C4B7 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 485+ C4B8 CA 0F C5    >                        jp	    z, src_BoundsLimit
 486+ C4BB 47                                   ld      b,a                         ; save target as we will need it
 487+ C4BC 3A 35 82                             ld      a,(PresentSystemX)
 488+ C4BF 90                                   sub     b                           ; get the difference between present and target
 489+ C4C0 FA C8 C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 490+ C4C3                                      JumpIfAGTENusng 20,src_BoundsLimit  ; if no more than 20 then OK
 490+ C4C3 FE 14       >                        cp     20
 490+ C4C5 D2 0F C5    >                        jp		nc,src_BoundsLimit
 491+ C4C8 78           .SkipBoundsTest:        ld      a,b
 492+ C4C9 3D                                   dec     a
 493+ C4CA 32 37 82                             ld      (TargetSystemX),a
 494+ C4CD CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 495+ C4D0 C9                                   ret
 496+ C4D1              ;----------------------------------------------------------------------------------------------------------------------------------
 497+ C4D1 3A 35 82     src_RightPressed:       ld      a,(PresentSystemX)
 498+ C4D4 47                                   ld      b,a
 499+ C4D5 3A 37 82                             ld      a,(TargetSystemX)
 500+ C4D8 4F                                   ld      c,a
 501+ C4D9                                      JumpIfAEqNusng 255,src_BoundsLimit
 501+ C4D9 FE FF       >                        cp     255
 501+ C4DB CA 0F C5    >                        jp      z,src_BoundsLimit
 502+ C4DE 90                                   sub     b
 503+ C4DF FA E7 C4                             jp      m,.SkipBoundsTest
 504+ C4E2                                      JumpIfAGTENusng 20,src_BoundsLimit
 504+ C4E2 FE 14       >                        cp     20
 504+ C4E4 D2 0F C5    >                        jp		nc,src_BoundsLimit
 505+ C4E7 79           .SkipBoundsTest:        ld      a,c
 506+ C4E8 3C                                   inc    a
 507+ C4E9 32 37 82                             ld      (TargetSystemX),a
 508+ C4EC CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 509+ C4EF C9                                   ret
 510+ C4F0              ;----------------------------------------------------------------------------------------------------------------------------------
 511+ C4F0 2A 35 82     src_HomePressed:        ld      hl,(PresentSystemX)
 512+ C4F3 22 37 82                             ld      (TargetSystemX),hl
 513+ C4F6 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 514+ C4F9 C9                                   ret
 515+ C4FA              ;----------------------------------------------------------------------------------------------------------------------------------
 516+ C4FA 3A 22 82     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 517+ C4FD                                      MMUSelectGalaxyA
 517+ C4FD ED 92 57    >                     nextreg GalaxyDataMMU,     a
 518+ C500 ED 4B 37 82                          ld      bc,(TargetSystemX)
 519+ C504 CD 70 FB                             call    find_nearest_to_bc
 520+ C507 ED 43 37 82                          ld      (TargetSystemX),bc
 521+ C50B CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 522+ C50E C9                                   ret
 523+ C50F              ;----------------------------------------------------------------------------------------------------------------------------------
 524+ C50F AF           src_BoundsLimit:        xor     a
 525+ C510 C9                                   ret
 526+ C511
# file closed: ./Menus/short_range_chart_menu.asm
 759  C511                  DISPLAY "Bank ",BankMenuShrCht," - Bytes free ",/D, $2000 - ($-MenuShrChtAddr), " - BankMenuShrCht"
 760  C511              ; Bank 51  ------------------------------------------------------------------------------------------------------------------------
 761  C511                  SLOT    MenuGalChtAddr
 762  C511                  PAGE    BankMenuGalCht
 763  C511              	ORG     MenuGalChtAddr
 764  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 84 91  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014              galactic_chart_hyper_offset equ 4
   9+ C014              galactic_chart_hyper_x_offset equ 32 - 4
  10+ C014              galactic_chart_hyper_y_offset equ 32 - 4 + 24
  11+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
  11+ C018 61 6E 63 65
  11+ C01C 3A 20
  12+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  13+ C021 2E           galactic_chart_decimal      DB "."
  14+ C022 30           galactic_chart_fraction     DB "0"
  15+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  15+ C027 68 74 20 59
  15+ C02B 65 61 72 73
  15+ C02F 00
  16+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  16+ C034 30 00
  17+ C036
  18+ C036 00 00 00...  galactic_distance           DS  6
  19+ C03C
  20+ C03C              galactic_find_position      equ $B008
  21+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  21+ C040 3A 20 00
  22+ C043              galactic_find_text          equ $B038
  23+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  23+ C047 20 20 20 20
  23+ C04B 20 20 20 20
  23+ C04F 20 20 20 20
  23+ C053 20 20 20 20
  23+ C057 00
  24+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  24+ C05C 20 53 79 73
  24+ C060 74 65 6D 20
  24+ C064 4E 6F 74 20
  24+ C068 46 6F 75 6E
  24+ C06C 64 20 2D 2D
  24+ C070 2A 2A 00
  25+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  25+ C077 2D 2D 20 53
  25+ C07B 79 73 74 65
  25+ C07F 6D 20 46 6F
  25+ C083 75 6E 64 20
  25+ C087 2D 2D 2A 2A
  25+ C08B 20 20 00
  26+ C08E
  27+ C08E              GCM_print_boiler_text:
  28+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E              .BoilerTextLoop:
   4++C08E C5           	push		bc			; Save Message Count loop value
   5++C08F 4E           	ld			c,(hl)		; Get Row into b
   6++C090 23           	inc			hl
   7++C091 46           	ld			b,(hl)		; Get Col into b
   8++C092 23           	inc			hl
   9++C093 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C094 23           	inc			hl
  11++C095 56           	ld			d,(hl)		; Get text address Hi into E
  12++C096 23           	inc			hl
  13++C097 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C098 EB           	ex			de,hl		; now hl = address of text data
  15++C099 1E FF        	ld			e,txt_status_colour
  16++C09B C5           	push		bc
  17++C09C D1           	pop			de
  18++C09D                  MMUSelectLayer1
  18++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0A1 CD C8 E0     	call		l1_print_at
  20++C0A4 E1           	pop			hl
  21++C0A5 C1           	pop			bc
  22++C0A6 10 E6        	djnz		.BoilerTextLoop
  23++C0A8 C9           	ret
  24++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  29+ C0A9              GCM_draw_chart_circle_and_crosshair:
  30+ C0A9 ED 4B 35 82  	ld		bc,(PresentSystemX)				; bc = present system
  31+ C0AD              .OnGalacticChart:
  32+ C0AD CB 38        	srl		b								; but row is row / 2
  33+ C0AF C5           	push  	bc
  34+ C0B0              	MMUSelectSpriteBank
  34+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  35+ C0B4 CD 91 E0     	call	sprite_galactic_cursor
  36+ C0B7 C1           	pop		bc
  37+ C0B8 78           	ld		a,b
  38+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  39+ C0BB 47           	ld		b,a
  40+ C0BC 3A A7 87     	ld		a,(Fuel)
  41+ C0BF CB 3F        	srl		a
  42+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  43+ C0C3 57           	ld		d,a
  44+ C0C4 1E FF        	ld		e,$FF
  45+ C0C6              	MMUSelectLayer2
  45+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  46+ C0CA CD A2 E9     	call	l2_draw_circle
  47+ C0CD C9           	ret
  48+ C0CE              ; TODO MOVE CURSOR CODE
  49+ C0CE
  50+ C0CE ED 4B 37 82  GCM_draw_hyperspace_cross_hair: ld		bc,(TargetSystemX)              ; bc = selected jump
  51+ C0D2 C5                                           push    bc
  52+ C0D3 CB 38                                        srl		b								; but row is row / 2
  53+ C0D5                                              MMUSelectSpriteBank
  53+ C0D5 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C0D9 CD 9D E0                                     call	sprite_galactic_hyper_cursor
  55+ C0DC C1                                           pop     bc
  56+ C0DD CD A9 E0                                     call	sprite_ghc_move
  57+ C0E0 C9                                           ret
  58+ C0E1
  59+ C0E1
  60+ C0E1 AF           plot_gc_stars:          xor		a
  61+ C0E2 32 A4 81                             ld		(XSAV),a
  62+ C0E5 DD 21 16 E0                          ld      ix,galaxy_data
  63+ C0E9 3A 22 82     .CounterLoop:           ld      a,(Galaxy)
  64+ C0EC                                      MMUSelectGalaxyA
  64+ C0EC ED 92 57    >                     nextreg GalaxyDataMMU,     a
  65+ C0EF DD E5                                push    ix
  66+ C0F1 E1                                   pop     hl
  67+ C0F2 11 0B 82                             ld      de,SystemSeed
  68+ C0F5 CD 37 88                             call    copy_seed
  69+ C0F8 3A 0E 82                             ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  70+ C0FB 4F                                   ld		c,a								; c = X Coord
  71+ C0FC 3A 0C 82                             ld		a,(SystemSeed+1)
  72+ C0FF CB 3F                                srl		a								; Ycoord /2
  73+ C101 C6 18                                add		a,galactic_chart_y_offset		; add offset to Y coord of star
  74+ C103 47                                   ld		b,a								; b = row
  75+ C104 C5                                   push	bc
  76+ C105 3E D8                                ld		a,galactic_star_colour
  77+ C107                                      MMUSelectLayer2
  77+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  78+ C10B CD B9 E2                             call	l2_plot_pixel
  79+ C10E C1                                   pop		bc
  80+ C10F 3A 0F 82                             ld		a,(SystemSeed+4)
  81+ C112 F6 50                                or		$50								; minimum distance away
  82+ C114 FE 90                                cp		$90
  83+ C116 30 0A                                jr		nc,.NoSecondPixel
  84+ C118 0C           .SecondPixel:           inc		c
  85+ C119 3E 6C                                ld		a,galactic_star_colour2
  86+ C11B                                      MMUSelectLayer2
  86+ C11B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  87+ C11F CD B9 E2                             call	l2_plot_pixel
  88+ C122 DD E5        .NoSecondPixel:         push    ix
  89+ C124 E1                                   pop     hl
  90+ C125 ED 34 08 00                          add     hl,8
  91+ C129 E5                                   push    hl
  92+ C12A DD E1                                pop     ix
  93+ C12C 3A A4 81                             ld		a,(XSAV)
  94+ C12F 3D                                   dec		a
  95+ C130 FE 00                                cp		0
  96+ C132 C8                                   ret		z
  97+ C133 32 A4 81                             ld		(XSAV),a
  98+ C136 18 B1                                jr		.CounterLoop
  99+ C138
 100+ C138 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C13C 2A 2A 2A 2A
 100+ C140 2B 2B 2B 2B
 100+ C144 2B 2B 2B 2B
 101+ C148              draw_galactic_chart_menu:   InitNoDoubleBuffer
 101+ C148             >                            MMUSelectLayer1
 101+ C148 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 101+ C14C CD 80 E0    >                            call	l1_cls
 101+ C14F 3E 07       >                            ld		a,7
 101+ C151 CD 9B E0    >                            call	l1_attr_cls_to_a
 101+ C154             >                            MMUSelectLayer2
 101+ C154 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 101+ C158 CD 0A E0    >                            call    asm_l2_double_buffer_off
 101+ C15B CD 0E E2    >                            call	l2_cls	; Get some space
 101+ C15E             >                            MMUSelectSpriteBank
 101+ C15E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 101+ C162 CD 6E E5    >                            call    sprite_cls_cursors
 102+ C165 DD 2E DC                                 ld      ixl,$DC
 103+ C168 3E 40                                    ld      a,$40
 104+ C16A 32 AC 81                                 ld      (MenuIdMax),a
 105+ C16D 2A 35 82                                 ld      hl,(PresentSystemX)
 106+ C170              ;                            ld      (TargetSystemX),hl
 107+ C170 CD 4B C4                                 call    gc_present_system               ; Set up the seed for present system
 108+ C173 01 01 01     .Drawbox:                   ld		bc,$0101
 109+ C176 11 FD BE                                 ld		de,$BEFD
 110+ C179 3E C0                                    ld		a,$C0
 111+ C17B                                          MMUSelectLayer2
 111+ C17B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 112+ C17F CD FC E3                                 call	l2_draw_box
 113+ C182 01 01 0A                                 ld		bc,$0A01
 114+ C185 11 C0 FE                                 ld		de,$FEC0
 115+ C188 CD 87 E4                                 call	l2_draw_horz_line
 116+ C18B 3E 0D        .StaticText:                ld		a,galactic_chart_header
 117+ C18D CD CB 91                                 call	expandTokenToString
 118+ C190 06 01                                    ld		b,1
 119+ C192 21 10 C0                                 ld		hl,galactic_chart_boiler_text
 120+ C195 CD 8E C0                                 call	GCM_print_boiler_text
 121+ C198 CD A9 C0     .CircleandCrosshair:        call	GCM_draw_chart_circle_and_crosshair
 122+ C19B CD CE C0                                 call	GCM_draw_hyperspace_cross_hair
 123+ C19E CD E1 C0                                 call	plot_gc_stars
 124+ C1A1 3A 22 82                                 ld      a,(Galaxy)
 125+ C1A4                                          MMUSelectGalaxyA
 125+ C1A4 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 126+ C1A7 ED 4B 37 82                              ld      bc,(TargetSystemX)
 127+ C1AB CD 64 FC                                 call    galaxy_system_under_cursor          ; TODO for some reason this bit
 128+ C1AE FE 00                                    cp      0                                   ; does not reset cursor on a miss
 129+ C1B0 20 11                                    jr      nz,.CurrentTargetIsValid
 130+ C1B2              .CurrentTargetIsInvalid:    CopyPresentSystemToTarget
 130+ C1B2 2A 35 82    >                        ld      hl,(PresentSystemX)
 130+ C1B5 22 37 82    >                        ld      (TargetSystemX),hl
 131+ C1B8 ED 4B 37 82                              ld      bc,(TargetSystemX)
 132+ C1BC                                          MMUSelectSpriteBank
 132+ C1BC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 133+ C1C0 CD A9 E0                                 call	sprite_ghc_move
 134+ C1C3 3A 22 82     .CurrentTargetIsValid:      ld      a,(Galaxy)
 135+ C1C6                                          MMUSelectGalaxyA
 135+ C1C6 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 136+ C1C9 ED 43 5B E8                              ld      (GalaxyTargetSystem),bc
 137+ C1CD CD 64 FC                                 call    galaxy_system_under_cursor
 138+ C1D0 CD A3 C3                                 call    gc_name_if_possible
 139+ C1D3                                          SetMemFalse TextInputMode
 139+ C1D3 3E FF       >                        ld      a,$FF
 139+ C1D5 32 78 83    >                        ld      (TextInputMode),a
 140+ C1D8 C9                                       ret
 141+ C1D9
 142+ C1D9              gcDelayVal                  equ $0A
 143+ C1D9              gcBlinkVal                  equ $10
 144+ C1D9
 145+ C1D9
 146+ C1D9 10           gcCursorBlink               DB  gcBlinkVal
 147+ C1DA 20           gcCursorChar                DB  " "
 148+ C1DB 00           gcEndOfString               DB  0
 149+ C1DC 00 00 00...  gcInputText                 DS  31
 150+ C1FB 00 00 00 00                              DB  0,0,0,0,0
 150+ C1FF 00
 151+ C200 00 00 00...  gcBlank                     DS  32
 152+ C220
 153+ C220              ;----------------------------------------------------------------------------------------------------------------------------------
 154+ C220 11 08 B0     gc_display_find_text:   ld		de,galactic_find_position   ; Wipe input area on screen
 155+ C223 21 3C C0                             ld      hl,galactic_find_message
 156+ C226                                      MMUSelectLayer1
 156+ C226 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 157+ C22A CD C8 E0                             call	l1_print_at
 158+ C22D C9                                   ret
 159+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 160+ C22E 11 DC C1     gc_display_find_string: ld      de,gcInputText
 161+ C231 CD 32 7F                             call    keyboard_copy_input_to_de
 162+ C234 21 DA C1                             ld      hl,gcCursorChar         ; Now just copy cursor char too
 163+ C237 ED A0                                ldi                             ; Copy cursor to local
 164+ C239 3A 2F 7F                             ld      a,(InputCursor)
 165+ C23C 3C                                   inc     a
 166+ C23D 47                                   ld      b,a
 167+ C23E 3E 14                                ld      a,20
 168+ C240 90                                   sub     b
 169+ C241 47                                   ld      b,a
 170+ C242 3E 20                                ld      a," "
 171+ C244 12           .SpacePad:              ld      (de),a
 172+ C245 13                                   inc     de
 173+ C246 10 FC                                djnz    .SpacePad
 174+ C248 AF                                   xor     a
 175+ C249 12                                   ld      (de),a
 176+ C24A 11 38 B0                             ld		de,galactic_find_text    ; Display text
 177+ C24D 21 DC C1                             ld      hl,gcInputText
 178+ C250                                      MMUSelectLayer1
 178+ C250 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 179+ C254 CD C8 E0                             call	l1_print_at
 180+ C257 C9                                   ret
 181+ C258
 182+ C258 3A D9 C1     blink_cursor:           ld      a,(gcCursorBlink)
 183+ C25B 3D                                   dec     a
 184+ C25C 32 D9 C1                             ld      (gcCursorBlink),a
 185+ C25F C0                                   ret     nz
 186+ C260 3E 10        .FlashCursor:           ld      a,gcBlinkVal
 187+ C262 32 D9 C1                             ld      (gcCursorBlink),a
 188+ C265 3A DA C1                             ld      a,(gcCursorChar)
 189+ C268 FE 20                                cp      " "
 190+ C26A 28 06                                jr      z,.ChangeToStar
 191+ C26C 3E 20                                ld      a," "
 192+ C26E 32 DA C1                             ld      (gcCursorChar),a
 193+ C271 C9                                   ret
 194+ C272 3E 2A        .ChangeToStar:          ld      a,"*"
 195+ C274 32 DA C1                             ld      (gcCursorChar),a
 196+ C277 C9                                   ret
 197+ C278              ;----------------------------------------------------------------------------------------------------------------------------------
 198+ C278              ; The main loop handles the find key
 199+ C278              loop_gc_menu:           JumpIfMemTrue TextInputMode,AlreadyInInputMode  ;if we are in input mode then go directly there
 199+ C278 3A 78 83    >                        ld      a,(TextInputMode)
 199+ C27B A7          >                        and     a
 199+ C27C CA 95 C2    >                        jp      z, AlreadyInInputMode
 200+ C27F 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 201+ C281 CD 99 7E                             call    is_key_pressed
 202+ C284 C0                                   ret     nz                                      ;the main loop handles find key
 203+ C285 CD 45 7F                             call    initInputText                           ;Initialise find input
 204+ C288                                      SetMemTrue TextInputMode                        ;Set input mode to true
 204+ C288 AF          >                        xor     a
 204+ C289 32 78 83    >                        ld      (TextInputMode),a
 205+ C28C                                      SetMemToN gcCursorBlink, gcBlinkVal             ; set up blink
 205+ C28C 3E 10       >                        ld      a,gcBlinkVal
 205+ C28E 32 D9 C1    >                        ld      (gcCursorBlink),a
 206+ C291 CD 20 C2     .DisplayInputbar:       call    gc_display_find_text                    ; now prep the boiler plate input text
 207+ C294 C9                                   ret                                             ; and exit so next interation handles new input as we have to rescan keyboard
 208+ C295              ;Already in input mode post pressing find
 209+ C295 CD 5D 7F     AlreadyInInputMode:     call    InputName                               ; Call input routine to parse a key
 210+ C298                                      JumpIfMemFalse InputChanged, .blinkNoDelay      ; no key they bypass rest of input
 210+ C298 3A 31 7F    >                        ld      a,(InputChanged)
 210+ C29B A7          >                        and     a
 210+ C29C C2 A9 C2    >                        jp      nz, .blinkNoDelay
 211+ C29F              .WasItEnter:            JumpIfMemTrue EnterPressed, .FindEnterPressed   ; if enter was pressed then find
 211+ C29F 3A 30 7F    >                        ld      a,(EnterPressed)
 211+ C2A2 A7          >                        and     a
 211+ C2A3 CA B5 C2    >                        jp      z, .FindEnterPressed
 212+ C2A6 CD 2E C2                             call    gc_display_find_string                  ; update string
 213+ C2A9 CD 58 C2     .blinkNoDelay:          call    blink_cursor
 214+ C2AC                                      CallIfMemEqNusng    gcCursorBlink, gcBlinkVal, gc_display_find_string ; on blink we get a double update but we can live with that
 214+ C2AC 3A D9 C1    >                        ld      a,(gcCursorBlink)
 214+ C2AF FE 10       >                        cp      gcBlinkVal
 214+ C2B1 CC 2E C2    >                        call    z,gc_display_find_string
 215+ C2B4 C9                                   ret
 216+ C2B5              .FindEnterPressed:      SetMemFalse EnterPressed                        ; reset enter
 216+ C2B5 3E FF       >                        ld      a,$FF
 216+ C2B7 32 30 7F    >                        ld      (EnterPressed),a
 217+ C2BA                                      SetMemFalse TextInputMode                       ; leave input mode
 217+ C2BA 3E FF       >                        ld      a,$FF
 217+ C2BC 32 78 83    >                        ld      (TextInputMode),a
 218+ C2BF 3A 22 82                             ld      a,(Galaxy)                              ; Fetch correct galaxy seed bank into memory
 219+ C2C2                                      MMUSelectGalaxyA
 219+ C2C2 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 220+ C2C5 21 10 7F                             ld      hl,InputString
 221+ C2C8 11 5E E8                             ld      de,GalaxySearchString
 222+ C2CB CD D0 F6                             call    GalaxyCopyLoop
 223+ C2CE CD 39 FB                             call    find_system_by_name
 224+ C2D1 FE FF                                cp      $FF                                     ; 0 denotes found FF, failure
 225+ C2D3 28 1D                                jr      z,.FindNoMatch
 226+ C2D5 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 227+ C2D8 4F                                   ld      c,a
 228+ C2D9 3A F9 E8                             ld      a,(GalaxyWorkingSeed+1)
 229+ C2DC 47                                   ld      b,a
 230+ C2DD ED 43 37 82                          ld      (TargetSystemX),bc
 231+ C2E1 CD 84 C3                             call    UpdateGalacticCursor
 232+ C2E4 11 08 B0                             ld		de,galactic_find_position               ; Wipe input area on screen
 233+ C2E7 21 73 C0                             ld      hl,galactic_find_match
 234+ C2EA                                      MMUSelectLayer1
 234+ C2EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 235+ C2EE CD C8 E0                             call	l1_print_at
 236+ C2F1 C9                                   ret
 237+ C2F2              .FindNoMatch:           ; if not found display "Not found"
 238+ C2F2                                      ; move curor if found
 239+ C2F2 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 240+ C2F5 21 58 C0                             ld      hl,galactic_find_no_match
 241+ C2F8                                      MMUSelectLayer1
 241+ C2F8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C2FC CD C8 E0                             call	l1_print_at
 243+ C2FF C9                                   ret; DOSTUFFHERE
 244+ C300              ;----------------------------------------------------------------------------------------------------------------------------------
 245+ C300              galctic_chart_cursors:  ReturnIfMemTrue TextInputMode
 245+ C300 3A 78 83    >                        ld      a,(TextInputMode)
 245+ C303 A7          >                        and     a
 245+ C304 C8          >                        ret     z
 246+ C305 3A 79 83                             ld      a,(CursorKeysPressed)
 247+ C308                                      ReturnIfAIsZero
 247+ C308 A7          >                        and     a
 247+ C309 C8          >                        ret     z
 248+ C30A 17                                   rla
 249+ C30B DC 23 C3                             call   c,gc_UpPressed
 250+ C30E 17                                   rla
 251+ C30F DC 33 C3                             call   c,gc_DownPressed
 252+ C312 17                                   rla
 253+ C313 DC 43 C3                             call   c,gc_LeftPressed
 254+ C316 17                                   rla
 255+ C317 DC 53 C3                             call   c,gc_RightPressed
 256+ C31A 17                                   rla
 257+ C31B DC 63 C3                             call   c,gc_HomePressed
 258+ C31E 17                                   rla
 259+ C31F DC 6D C3                             call   c,gc_RecenterPressed
 260+ C322 C9                                   ret
 261+ C323              ;----------------------------------------------------------------------------------------------------------------------------------
 262+ C323 3A 38 82     gc_UpPressed:           ld     a,(TargetSystemX+1)
 263+ C326                                      JumpIfAEqNusng 1,gc_BoundsLimit
 263+ C326 FE 01       >                        cp     1
 263+ C328 CA 82 C3    >                        jp      z,gc_BoundsLimit
 264+ C32B 3D                                   dec     a
 265+ C32C 32 38 82                             ld      (TargetSystemX+1),a
 266+ C32F CD 84 C3                             call    UpdateGalacticCursor
 267+ C332 C9                                   ret
 268+ C333              ;----------------------------------------------------------------------------------------------------------------------------------
 269+ C333 3A 38 82     gc_DownPressed:         ld     a,(TargetSystemX+1)
 270+ C336                                      JumpIfAEqNusng 255,gc_BoundsLimit
 270+ C336 FE FF       >                        cp     255
 270+ C338 CA 82 C3    >                        jp      z,gc_BoundsLimit
 271+ C33B 3C                                   inc    a
 272+ C33C 32 38 82                             ld      (TargetSystemX+1),a
 273+ C33F CD 84 C3                             call    UpdateGalacticCursor
 274+ C342 C9                                   ret
 275+ C343              ;----------------------------------------------------------------------------------------------------------------------------------
 276+ C343 3A 37 82     gc_LeftPressed:         ld     a,(TargetSystemX)
 277+ C346                                      JumpIfAEqNusng 2,gc_BoundsLimit
 277+ C346 FE 02       >                        cp     2
 277+ C348 CA 82 C3    >                        jp      z,gc_BoundsLimit
 278+ C34B 3D                                   dec    a
 279+ C34C 32 37 82                             ld      (TargetSystemX),a
 280+ C34F CD 84 C3                             call    UpdateGalacticCursor
 281+ C352 C9                                   ret
 282+ C353              ;----------------------------------------------------------------------------------------------------------------------------------
 283+ C353 3A 37 82     gc_RightPressed:        ld     a,(TargetSystemX)
 284+ C356                                      JumpIfAEqNusng 253,gc_BoundsLimit
 284+ C356 FE FD       >                        cp     253
 284+ C358 CA 82 C3    >                        jp      z,gc_BoundsLimit
 285+ C35B 3C                                   inc    a
 286+ C35C 32 37 82                             ld      (TargetSystemX),a
 287+ C35F CD 84 C3                             call    UpdateGalacticCursor
 288+ C362 C9                                   ret
 289+ C363              ;----------------------------------------------------------------------------------------------------------------------------------
 290+ C363 2A 35 82     gc_HomePressed:         ld      hl,(PresentSystemX)
 291+ C366 22 37 82                             ld      (TargetSystemX),hl
 292+ C369 CD 84 C3                             call    UpdateGalacticCursor
 293+ C36C C9                                   ret
 294+ C36D              ;----------------------------------------------------------------------------------------------------------------------------------
 295+ C36D 3A 22 82     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 296+ C370                                      MMUSelectGalaxyA
 296+ C370 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 297+ C373 ED 4B 37 82                          ld      bc,(TargetSystemX)
 298+ C377 CD 70 FB                             call    find_nearest_to_bc
 299+ C37A ED 43 37 82                          ld      (TargetSystemX),bc
 300+ C37E CD 84 C3                             call    UpdateGalacticCursor
 301+ C381 C9                                   ret
 302+ C382              ;----------------------------------------------------------------------------------------------------------------------------------
 303+ C382 AF           gc_BoundsLimit          xor     a
 304+ C383 C9                                   ret
 305+ C384
 306+ C384              ;----------------------------------------------------------------------------------------------------------------------------------
 307+ C384 ED 4B 37 82  UpdateGalacticCursor:   ld		bc,(TargetSystemX)              ; bc = selected jump
 308+ C388              OnGalacticChart:        MMUSelectSpriteBank
 308+ C388 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 309+ C38C CD A9 E0                             call	sprite_ghc_move
 310+ C38F 3A 22 82                             ld      a,(Galaxy)
 311+ C392                                      MMUSelectGalaxyA
 311+ C392 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 312+ C395 ED 4B 37 82                          ld      bc,(TargetSystemX)
 313+ C399 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 314+ C39D CD 64 FC                             call    galaxy_system_under_cursor
 315+ C3A0 FE 00                                cp      0
 316+ C3A2 C8                                   ret     z
 317+ C3A3              ; just fall into gc_name_if_possible
 318+ C3A3 CD 82 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 319+ C3A6 CD D1 C3                             call    gc_clear_name_area
 320+ C3A9 21 50 92                             ld		hl,name_expanded
 321+ C3AC CD A5 91                             call	CapitaliseString
 322+ C3AF 21 50 92                             ld		hl, name_expanded
 323+ C3B2 01 0A A0                             ld      bc,$A00A
 324+ C3B5 1E FF                                ld		e,$FF
 325+ C3B7                                      MMUSelectLayer2
 325+ C3B7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 326+ C3BB CD C1 E3                             call	l2_print_7at
 327+ C3BE CD EB C3                             call    gc_calc_distance
 328+ C3C1 21 14 C0                             ld      hl,galactic_chart_distance
 329+ C3C4 01 0A A8                             ld      bc,$A80A
 330+ C3C7 1E FF                                ld		e,$FF
 331+ C3C9                                      MMUSelectLayer2
 331+ C3C9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 332+ C3CD CD C1 E3                             call	l2_print_7at
 333+ C3D0 C9                                   ret
 334+ C3D1              ;----------------------------------------------------------------------------------------------------------------------------------
 335+ C3D1 26 08        gc_clear_name_area:     ld      h,8
 336+ C3D3 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 337+ C3D6 01 0A A0                             ld      bc,$A00A
 338+ C3D9 E5           .ClearLoop:             push    hl
 339+ C3DA D5                                   push    de
 340+ C3DB C5                                   push    bc
 341+ C3DC                                      MMUSelectLayer2
 341+ C3DC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C3E0 CD 87 E4                             call	l2_draw_horz_line
 343+ C3E3 C1                                   pop     bc
 344+ C3E4 D1                                   pop     de
 345+ C3E5 E1                                   pop     hl
 346+ C3E6 04                                   inc     b
 347+ C3E7 25                                   dec     h
 348+ C3E8 20 EF                                jr      nz,.ClearLoop
 349+ C3EA C9                                   ret
 350+ C3EB              ;----------------------------------------------------------------------------------------------------------------------------------
 351+ C3EB 3A 22 82     gc_calc_distance:       ld      a,(Galaxy)
 352+ C3EE                                      MMUSelectGalaxyA
 352+ C3EE ED 92 57    >                     nextreg GalaxyDataMMU,     a
 353+ C3F1 11 1E C0                             ld      de,galactic_chart_dist_amount
 354+ C3F4 21 30 C0                             ld      hl,galactic_default_dist
 355+ C3F7 ED A0                                ldi
 356+ C3F9 ED A0                                ldi
 357+ C3FB ED A0                                ldi
 358+ C3FD ED A0                                ldi
 359+ C3FF ED A0                                ldi
 360+ C401 ED 4B 35 82                          ld      bc,(PresentSystemX)
 361+ C405 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 362+ C409 ED 4B 37 82                          ld      bc,(TargetSystemX)
 363+ C40D ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 364+ C411 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 365+ C414 DD 2A 57 82                          ld      ix,(Distance)
 366+ C418 11 00 00                             ld      de,0
 367+ C41B FD 21 36 C0                          ld      iy,galactic_distance
 368+ C41F CD A5 9A                             call    DispDEIXtoIY
 369+ C422 FD E5                                push    iy
 370+ C424 E1                                   pop     hl
 371+ C425 11 36 C0                             ld      de,galactic_distance
 372+ C428 7E                                   ld		a,(hl)				;Push last digit to post decimal
 373+ C429 32 22 C0                             ld		(galactic_chart_fraction),a
 374+ C42C 2B                                   dec     hl
 375+ C42D CD 59 99                             call    compare16HLDE
 376+ C430 38 18                                jr      c,.done_number
 377+ C432 7E                                   ld      a,(hl)
 378+ C433 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 379+ C436 2B                                   dec     hl
 380+ C437 CD 59 99                             call    compare16HLDE
 381+ C43A 38 0E                                jr      c,.done_number
 382+ C43C 7E                                   ld      a,(hl)
 383+ C43D 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 384+ C440 2B                                   dec     hl
 385+ C441 CD 59 99                             call    compare16HLDE
 386+ C444 38 04                                jr      c,.done_number
 387+ C446 7E                                   ld      a,(hl)
 388+ C447 32 1E C0                             ld      (galactic_chart_dist_amount),a
 389+ C44A C9           .done_number:           ret
 390+ C44B              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ C44B AF           gc_present_system:      xor     a
 392+ C44C 32 A4 81                             ld		(XSAV),a
 393+ C44F DD 21 16 E0                          ld      ix,galaxy_data
 394+ C453 3A 22 82     GCCounterLoop:          ld      a,(Galaxy)
 395+ C456                                      MMUSelectGalaxyA
 395+ C456 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 396+ C459 2A 35 82                             ld      hl,(PresentSystemX)
 397+ C45C DD E5                                push    ix
 398+ C45E 7D                                   ld      a,l
 399+ C45F DD BE 03                             cp      (ix+3)                          ; seed x
 400+ C462 20 14                                jr      nz,.ItsNotThisX
 401+ C464 7C                                   ld      a,h
 402+ C465 DD BE 01                             cp      (ix+1)                          ; seed x
 403+ C468 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 404+ C46A DD E5                                push    ix
 405+ C46C E1                                   pop     hl
 406+ C46D 11 29 82                             ld      de,PresentSystemSeeds
 407+ C470 CD 37 88                             call    copy_seed
 408+ C473 3E FF                                ld      a,$FF
 409+ C475 DD E1                                pop     ix
 410+ C477 C9                                   ret
 411+ C478 E1           .ItsNotThisX:           pop     hl
 412+ C479 ED 34 08 00                          add     hl,8
 413+ C47D E5                                   push    hl
 414+ C47E DD E1                                pop     ix
 415+ C480 3A A4 81                             ld		a,(XSAV)
 416+ C483 3D                                   dec		a
 417+ C484 32 A4 81                             ld      (XSAV),a
 418+ C487 FE 00                                cp		0
 419+ C489 C8                                   ret		z
 420+ C48A 18 C7                                jr		GCCounterLoop
 421+ C48C
# file closed: ./Menus//galactic_chart_menu.asm
 765  C48C                  DISPLAY "Bank ",BankMenuGalCht," - Bytes free ",/D, $2000 - ($-MenuGalChtAddr), " - BankMenuGalCht"
 766  C48C              ; Bank 52  ------------------------------------------------------------------------------------------------------------------------
 767  C48C                  SLOT    MenuInventAddr
 768  C48C                  PAGE    BankMenuInvent
 769  C48C              	ORG     MenuInventAddr
 770  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070              .BoilerTextLoop:
   4++C070 C5           	push		bc			; Save Message Count loop value
   5++C071 4E           	ld			c,(hl)		; Get Row into b
   6++C072 23           	inc			hl
   7++C073 46           	ld			b,(hl)		; Get Col into b
   8++C074 23           	inc			hl
   9++C075 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C076 23           	inc			hl
  11++C077 56           	ld			d,(hl)		; Get text address Hi into E
  12++C078 23           	inc			hl
  13++C079 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C07A EB           	ex			de,hl		; now hl = address of text data
  15++C07B 1E FF        	ld			e,txt_status_colour
  16++C07D C5           	push		bc
  17++C07E D1           	pop			de
  18++C07F                  MMUSelectLayer1
  18++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C083 CD C8 E0     	call		l1_print_at
  20++C086 E1           	pop			hl
  21++C087 C1           	pop			bc
  22++C088 10 E6        	djnz		.BoilerTextLoop
  23++C08A C9           	ret
  24++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A A7 87     	ld		a,(Fuel)
   4++C136 11 A0 AF     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 AA 87                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD 2B 8B                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 D0 8F                             ld		hl, WordIdx
 118+ C17A CD 2B 8B                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD C8 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD C8 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD 2B 8B                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 D0 8F                             ld		hl,WordIdx
 148+ C1C1 CD 2B 8B                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD C8 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A A5 87     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A A3 87                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    InitNoDoubleBuffer
 170+ C1F5             >                            MMUSelectLayer1
 170+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 170+ C1F9 CD 80 E0    >                            call	l1_cls
 170+ C1FC 3E 07       >                            ld		a,7
 170+ C1FE CD 9B E0    >                            call	l1_attr_cls_to_a
 170+ C201             >                            MMUSelectLayer2
 170+ C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 170+ C205 CD 0A E0    >                            call    asm_l2_double_buffer_off
 170+ C208 CD 0E E2    >                            call	l2_cls	; Get some space
 170+ C20B             >                            MMUSelectSpriteBank
 170+ C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 170+ C20F CD 6E E5    >                            call    sprite_cls_cursors
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 AC 81                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 6E E5                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD FC E3                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 87 E4                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 A0 AF                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 61 E3                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 61 E3                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
 771  C281                  DISPLAY "Bank ",BankMenuInvent," - Bytes free ",/D, $2000 - ($-MenuInventAddr), " - BankMenuInvent"
 772  C281              ; Bank 53  ------------------------------------------------------------------------------------------------------------------------
 773  C281                  SLOT    MenuSystemAddr
 774  C281                  PAGE    BankMenuSystem
 775  C281              	ORG     MenuSystemAddr
 776  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 84 91  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 50 92  						DW $0280,name_expanded
   5+ C018 08 0B E2 8C  						DW $0B08,WordDistance
   6+ C01C 08 13 EB 8C  						DW $1308,WordEconomy
   7+ C020 08 1B F3 8C  						DW $1B08,WordGovernment
   8+ C024 08 23 FE 8C  						DW $2308,WordTechLevel
   9+ C028 08 2B 08 8D  						DW $2B08,WordPopulation
  10+ C02C 08 3B 23 8D  						DW $3B08,WordGross
  11+ C030 38 3B 29 8D  						DW $3B38,WordProductivity
  12+ C034 08 43 36 8D  						DW $4308,WordAverage
  13+ C038 48 43 3E 8D  						DW $4348,WordRadius
  14+ C03C 60 0B 84 91  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 84 91  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 0A E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7F E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 64 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 85 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A 22 82     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,     a
 107+ C2B1 ED 4B 35 82                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5              .BoilerTextLoop:
   4++C2C5 C5           	push		bc			; Save Message Count loop value
   5++C2C6 4E           	ld			c,(hl)		; Get Row into b
   6++C2C7 23           	inc			hl
   7++C2C8 46           	ld			b,(hl)		; Get Col into b
   8++C2C9 23           	inc			hl
   9++C2CA 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C2CB 23           	inc			hl
  11++C2CC 56           	ld			d,(hl)		; Get text address Hi into E
  12++C2CD 23           	inc			hl
  13++C2CE E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C2CF EB           	ex			de,hl		; now hl = address of text data
  15++C2D0 1E FF        	ld			e,txt_status_colour
  16++C2D2 C5           	push		bc
  17++C2D3 D1           	pop			de
  18++C2D4                  MMUSelectLayer1
  18++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C2D8 CD C8 E0     	call		l1_print_at
  20++C2DB E1           	pop			hl
  21++C2DC C1           	pop			bc
  22++C2DD 10 E6        	djnz		.BoilerTextLoop
  23++C2DF C9           	ret
  24++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  InitNoDoubleBuffer
 129+ C2F0             >                            MMUSelectLayer1
 129+ C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 129+ C2F4 CD 80 E0    >                            call	l1_cls
 129+ C2F7 3E 07       >                            ld		a,7
 129+ C2F9 CD 9B E0    >                            call	l1_attr_cls_to_a
 129+ C2FC             >                            MMUSelectLayer2
 129+ C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 129+ C300 CD 0A E0    >                            call    asm_l2_double_buffer_off
 129+ C303 CD 0E E2    >                            call	l2_cls	; Get some space
 129+ C306             >                            MMUSelectSpriteBank
 129+ C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 129+ C30A CD 6E E5    >                            call    sprite_cls_cursors
 130+ C30D                                      ZeroA
 130+ C30D AF          >                        xor a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 AC 81                             ld		(MenuIdMax),a
 134+ C316 3A 22 82     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 136+ C31C ED 4B 37 82  .CheckCursorOrHome:     ld      bc,(TargetSystemX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 64 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B 35 82  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 64 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B 37 82  .FoundASystem:          ld      bc,(TargetSystemX)
 147+ C342 2A 35 82                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 23 82     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD 02 FA                             call    galaxy_copy_seed
 159+ C35B CD C5 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD FC E3                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 87 E4                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD CB 91                             call	expandTokenToString
 170+ C37B 3A 22 82     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,     a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F8 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD 02 FA                             call    galaxy_copy_seed
 178+ C38E CD 6D F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 50 92                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 50 92                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A 57 82  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD 96 9A                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD C8 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD CB 91                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD CB 91                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD BD 91                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD C8 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD C8 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD 96 9A                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD C8 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A 22 82     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 251+ C455 CD DC F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD C8 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD A5 9A                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD C8 E0                             call	l1_print_at
 272+ C48F 3A 22 82     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 274+ C495 2A 10 E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD A5 9A                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD C8 E0                             call	l1_print_at
 289+ C4BC 3A 22 82     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,     a
 291+ C4C2 11 F8 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD 02 FA                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6F F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD 15 E1                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
 777  C4F7                  DISPLAY "Bank ",BankMenuSystem," - Bytes free ",/D, $2000 - ($-MenuSystemAddr), " - BankMenuSystem"
 778  C4F7              ; Bank 54  ------------------------------------------------------------------------------------------------------------------------
 779  C4F7                  SLOT    MenuMarketAddr
 780  C4F7                  PAGE    BankMenuMarket
 781  C4F7                  ORG     MenuMarketAddr
 782  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 84 91  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 50 92  						DW $0220,name_expanded
   4+ C018 80 0B D2 8B  						DW $0B80,WordUnit
   5+ C01C B0 0B 1B 8E  						DW $0BB0,WordQuantity
   6+ C020 08 13 F9 8D  						DW $1308,WordProduct
   7+ C024 60 13 01 8E  						DW $1360,WordUoM
   8+ C028 80 13 05 8E  						DW $1380,WordPrice
   9+ C02C B0 13 29 8E  						DW $13B0,WordStock
  10+ C030 E0 13 25 8E  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213              .BoilerTextLoop:
   4++C213 C5           	push		bc			; Save Message Count loop value
   5++C214 4E           	ld			c,(hl)		; Get Row into b
   6++C215 23           	inc			hl
   7++C216 46           	ld			b,(hl)		; Get Col into b
   8++C217 23           	inc			hl
   9++C218 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C219 23           	inc			hl
  11++C21A 56           	ld			d,(hl)		; Get text address Hi into E
  12++C21B 23           	inc			hl
  13++C21C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C21D EB           	ex			de,hl		; now hl = address of text data
  15++C21E 1E FF        	ld			e,txt_status_colour
  16++C220 C5           	push		bc
  17++C221 D1           	pop			de
  18++C222                  MMUSelectLayer1
  18++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C226 CD C8 E0     	call		l1_print_at
  20++C229 E1           	pop			hl
  21++C22A C1           	pop			bc
  22++C22B 10 E6        	djnz		.BoilerTextLoop
  23++C22D C9           	ret
  24++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A A5 87     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A A3 87                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A A9 87                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD C8 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD C8 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position  ; hl = base cursor position + row number * 8
 249+ C28F 57                                   ld      d,a                 ; .
 250+ C290 1E 08                                ld      e,8                 ; .
 251+ C292 ED 30                                mul                         ; .
 252+ C294 53                                   ld      d,e                 ; .
 253+ C295 1E 00                                ld      e,0                 ; .
 254+ C297 19                                   add     hl,de               ; .
 255+ C298 22 41 C0                             ld      (market_cursor),hl  ; save in market cursor and copy to de
 256+ C29B EB                                   ex      hl,de               ; .
 257+ C29C 21 43 C0                             ld      hl,market_blank_line; hl = blank line text
 258+ C29F                                      MMUSelectLayer1             ; print blank line (hl) and position DE
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD C8 E0                             call	l1_print_at         ; .
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 AA 87                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 D0 8F                             ld		hl,WordIdx
 273+ C2C5 CD 2B 8B                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD C8 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 D0 8F                             ld		hl,WordIdx
 281+ C2DF CD 2B 8B                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD C8 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD C8 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD C8 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD C8 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:InitNoDoubleBuffer
 314+ C343             >                            MMUSelectLayer1
 314+ C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 314+ C347 CD 80 E0    >                            call	l1_cls
 314+ C34A 3E 07       >                            ld		a,7
 314+ C34C CD 9B E0    >                            call	l1_attr_cls_to_a
 314+ C34F             >                            MMUSelectLayer2
 314+ C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 314+ C353 CD 0A E0    >                            call    asm_l2_double_buffer_off
 314+ C356 CD 0E E2    >                            call	l2_cls	; Get some space
 314+ C359             >                            MMUSelectSpriteBank
 314+ C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 314+ C35D CD 6E E5    >                            call    sprite_cls_cursors
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 AC 81                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD FC E3                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD 87 E4                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD 87 E4                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD 87 E4                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD 87 E4                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD 87 E4                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD 87 E4                             call	l2_draw_horz_line
 340+ C3AA 3A 22 82     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,     a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD CB 91                             call	expandTokenToString
 344+ C3B5 CD 7A F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0              ; Generate the market list on screen
 349+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 350+ C3C2 21 08 20                             ld		hl,market_position          ; set current cursor position on screen
 351+ C3C5 22 41 C0                             ld		(market_cursor),hl          ; .
 352+ C3C8 F5           MarketLoop:	            push	af
 353+ C3C9 CD 8B C2                             call	PrintMarketItem             ; display a single market item
 354+ C3CC F1                                   pop		af
 355+ C3CD 3C                                   inc		a
 356+ C3CE FE 11                                cp		17
 357+ C3D0 20 F6                                jr		nz,MarketLoop
 358+ C3D2 AF           .InitialHighlight:      xor     a
 359+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 360+ C3D6 CD B3 C0                             call    mkt_highlight_row
 361+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 362+ C3DC 11 10 A8                             ld      de,$A810
 363+ C3DF                                      MMUSelectLayer1
 363+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 364+ C3E3 CD C8 E0                             call	l1_print_at
 365+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 366+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 367+ C3EC 11 10 B0                             ld      de,$B010
 368+ C3EF                                      MMUSelectLayer1
 368+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 369+ C3F3 CD C8 E0                             call	l1_print_at
 370+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 371+ C3F9 C9                                   ret
 372+ C3FA
 373+ C3FA
 374+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 375+ C3FA              ; Handles all the input whilst in the market menu
 376+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 377+ C3FC CD 99 7E                             call    is_key_pressed
 378+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 379+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 380+ C404 CD 99 7E                             call    is_key_pressed
 381+ C407 CC 2C C4                             call    z,mkt_DownPressed
 382+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 383+ C40C CD 99 7E                             call    is_key_pressed
 384+ C40F CC 46 C4                             call    z,mkt_LeftPressed
 385+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 386+ C414 CD 99 7E                             call    is_key_pressed
 387+ C417 CC 89 C4                             call    z,mkt_RightPressed
 388+ C41A C9                                   ret
 389+ C41B
 390+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 392+ C41E FE 00                                cp      0
 393+ C420 C8                                   ret     z
 394+ C421 CD C3 C0                             call    mkt_lowlight_row
 395+ C424 21 74 C0                             ld      hl,mkt_selected_row
 396+ C427 35                                   dec     (hl)
 397+ C428 CD B3 C0                             call    mkt_highlight_row
 398+ C42B C9                                   ret
 399+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 400+ C42C 3E 4C        mkt_DownPressed:        ld      a,c_Pressed_CursorDown
 401+ C42E CD 74 7E                             call    get_key_a_state
 402+ C431 FE 01                                cp      1
 403+ C433 28 00                                jr      z,.ItsOK
 404+ C435 3A 74 C0     .ItsOK:                 ld      a,(mkt_selected_row)
 405+ C438 FE 10                                cp      16
 406+ C43A C8                                   ret     z
 407+ C43B CD C3 C0                             call    mkt_lowlight_row
 408+ C43E 21 74 C0                             ld      hl,mkt_selected_row
 409+ C441 34                                   inc     (hl)
 410+ C442 CD B3 C0                             call    mkt_highlight_row
 411+ C445 C9                                   ret
 412+ C446              ;----------------------------------------------------------------------------------------------------------------------------------
 413+ C446 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 414+ C449 21 AA 87                             ld      hl,CargoTonnes
 415+ C44C ED 31                                add     hl,a
 416+ C44E 7E                                   ld      a,(hl)
 417+ C44F FE 00                                cp      0
 418+ C451 C8                                   ret     z
 419+ C452 35                                   dec     (hl)
 420+ C453 DD 21 00 E0                          ld      ix,StockFood
 421+ C457 3A 74 C0                             ld      a,(mkt_selected_row)
 422+ C45A 16 08                                ld      d,8
 423+ C45C 5F                                   ld      e,a
 424+ C45D ED 30                                mul
 425+ C45F DD 19                                add     ix,de
 426+ C461                                      MMUSelectStockTable
 426+ C461 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 427+ C465 DD 34 01                             inc     (ix+1)
 428+ C468 DD 7E 07                             ld      a,(ix+7)
 429+ C46B FE 30                                cp      48
 430+ C46D 20 04                                jr      nz,.UnderATonne
 431+ C46F 21 A9 87                             ld      hl,CargoRunningLoad
 432+ C472 35                                   dec     (hl)            ; We need to cosider UoM
 433+ C473 DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 434+ C476 16 00                                ld      d,0
 435+ C478 5F                                   ld      e,a
 436+ C479 CD C5 93                             call    addDEtoCash
 437+ C47C                                      ; DO ADD CASH
 438+ C47C 3A 74 C0                             ld      a,(mkt_selected_row)
 439+ C47F CD 8B C2                             call    PrintMarketItem
 440+ C482 CD 69 C2                             call    MKT_DisplayCargo
 441+ C485 CD 7A C2                             call    MKT_DisplayCash
 442+ C488 C9                                   ret
 443+ C489              ;----------------------------------------------------------------------------------------------------------------------------------
 444+ C489              mkt_RightPressed:       MMUSelectStockTable
 444+ C489 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 445+ C48D DD 21 00 E0                          ld      ix,StockFood
 446+ C491 3A 74 C0                             ld      a,(mkt_selected_row)
 447+ C494 16 08                                ld      d,8
 448+ C496 5F                                   ld      e,a
 449+ C497 ED 30                                mul
 450+ C499 DD 19                                add     ix,de
 451+ C49B 4F                                   ld      c,a
 452+ C49C DD 7E 01                             ld      a,(ix+1)
 453+ C49F FE 00                                cp      0
 454+ C4A1 C8                                   ret     z
 455+ C4A2 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 456+ C4A5 FE 30                                cp      48
 457+ C4A7 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 458+ C4A9 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 459+ C4AC 21 AA 87                             ld      hl,CargoTonnes
 460+ C4AF ED 31                                add     hl,a
 461+ C4B1 7E                                   ld      a,(hl)
 462+ C4B2 FE C8                                cp      200
 463+ C4B4 C8                                   ret     z                                   ; else its a 200 UoM limit
 464+ C4B5 C3 BE C4                             jp      .CheckCash
 465+ C4B8 2A A8 87     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 466+ C4BB 7C                                   ld      a,h
 467+ C4BC BD                                   cp      l
 468+ C4BD C8                                   ret     z                                   ; return if we have already maxed out
 469+ C4BE 2A A5 87     .CheckCash:             ld      hl,(Cash+2)
 470+ C4C1 7C                                   ld      a,h
 471+ C4C2 B5                                   or      l
 472+ C4C3 20 0F                                jr      nz,.MoreThanRequired
 473+ C4C5 2A A3 87                             ld      hl,(Cash)
 474+ C4C8 7C                                   ld      a,h
 475+ C4C9 FE 00                                cp      0
 476+ C4CB 20 07                                jr      nz,.MoreThanRequired
 477+ C4CD DD 7E 02                             ld      a,(ix+2)
 478+ C4D0 BD                                   cp      l
 479+ C4D1 30 01                                jr      nc,.MoreThanRequired
 480+ C4D3 C9                                   ret                         ; Insufficient Funds
 481+ C4D4 19           .MoreThanRequired:      add     hl,de
 482+ C4D5 7C                                   ld      a,h
 483+ C4D6 B3                                   or      e
 484+ C4D7                                      ; check cash can we buy, and cargo capacity
 485+ C4D7 DD 35 01                             dec     (ix+1)
 486+ C4DA 3A 74 C0                             ld      a,(mkt_selected_row)
 487+ C4DD 21 AA 87                             ld      hl,CargoTonnes
 488+ C4E0 ED 31                                add     hl,a
 489+ C4E2 34                                   inc     (hl)
 490+ C4E3 DD 7E 07                             ld      a,(ix+7)
 491+ C4E6 47                                   ld      b,a
 492+ C4E7 FE 30                                cp      48
 493+ C4E9 20 05                                jr      nz,.UnderOneTonne
 494+ C4EB 78                                   ld      a,b
 495+ C4EC 21 A9 87                             ld      hl,CargoRunningLoad
 496+ C4EF 34                                   inc     (hl)
 497+ C4F0 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 498+ C4F3 16 00                                ld      d,0
 499+ C4F5 5F                                   ld      e,a
 500+ C4F6 CD D8 93                             call    subDEfromCash
 501+ C4F9 3A 74 C0                             ld      a,(mkt_selected_row)
 502+ C4FC CD 8B C2                             call    PrintMarketItem
 503+ C4FF CD 69 C2                             call    MKT_DisplayCargo
 504+ C502 CD 7A C2                             call    MKT_DisplayCash
 505+ C505 C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
 783  C506                  DISPLAY "Bank ",BankMenuMarket," - Bytes free ",/D, $2000 - ($-MenuMarketAddr), " - BankMenuMarket"
 784  C506              ; Bank 55  ------------------------------------------------------------------------------------------------------------------------
 785  C506                  SLOT    StockTableAddr
 786  C506                  PAGE    BankStockTable
 787  C506                  ORG     StockTableAddr
 788  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48  ; 01
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48  ; 02
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48  ; 03
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48  ; 04
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48  ; 05
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48  ; 06
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48  ; 07
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48  ; 08
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48  ; 09
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48  ; 11
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48  ; 12
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48  ; 13
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48  ; 14
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49  ; 15
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49  ; 16
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50  ; 17
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48  ; 18
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088              FoodIndex               EQU 01
  63+ E088              TextilesIndex           EQU 02
  64+ E088              RadioactivesIndex       EQU 03
  65+ E088              SlavesIndex             EQU 04
  66+ E088              LiquorWinesIndex        EQU 05
  67+ E088              LuxuriesIndex           EQU 06
  68+ E088              NarcoticsIndex          EQU 07
  69+ E088              ComputersIndex          EQU 08
  70+ E088              MachineryIndex          EQU 09
  71+ E088              AlloysIndex             EQU 10
  72+ E088              FirearmsIndex           EQU 11
  73+ E088              FursIndex               EQU 12
  74+ E088              MineralsIndex           EQU 13
  75+ E088              GoldIndex               EQU 14
  76+ E088              PlatinumIndex           EQU 15
  77+ E088              GemStonesIndex          EQU 16
  78+ E088              AlienItemsIndex		    equ 17
  79+ E088              StockListLen		    equ	18
  80+ E088
  81+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  81+ E08C 10 E0
  82+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  82+ E092 28 E0
  83+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  83+ E098 40 E0
  84+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  84+ E09E 58 E0
  85+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  85+ E0A4 70 E0
  86+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  87+ E0AA
  88+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  89+ E0AC CD 31 88                             call	copy_galaxy_to_system
  90+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  91+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  92+ E0B6 DD 19                                add		ix,de				; Move down a row
  93+ E0B8 04                                   inc		b
  94+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  95+ E0BC 3A 21 82                             ld		a,(RandomMarketSeed)
  96+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  97+ E0C2 81                                   add		a,c
  98+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  99+ E0C4 3A 50 82                             ld		a,(DisplayEcononmy)	; d= economy
 100+ E0C7 57                                   ld		d,a
 101+ E0C8 DD 7E 04                             ld		a,(ix+4)
 102+ E0CB 5F                                   ld		e,a					; e  = economy adjust
 103+ E0CC CB 7B                                bit		7,e
 104+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
 105+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
 106+ E0D0 7B                                   ld		a,e
 107+ E0D1 ED 44                                neg
 108+ E0D3 5F                                   ld		e,a
 109+ E0D4              .PosMul:
 110+ E0D4 7B                                   ld		a,e
 111+ E0D5 ED 44                                neg
 112+ E0D7 5F                                   ld		e,a
 113+ E0D8 ED 30                                mul
 114+ E0DA 79                                   ld		a,c
 115+ E0DB 83                                   add		a,e
 116+ E0DC CB 27                                sla		a
 117+ E0DE CB 27                                sla		a					; Multply price by 4
 118+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 119+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 120+ E0E6 3A 21 82                             ld		a,(RandomMarketSeed)
 121+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 122+ E0EC 81                                   add		a,c
 123+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 124+ E0EE 3A 50 82                             ld		a,(DisplayEcononmy)	; d= economy
 125+ E0F1 57                                   ld		d,a
 126+ E0F2 DD 7E 04                             ld		a,(ix+4)
 127+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 128+ E0F6 CB 7B                                bit		7,e
 129+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 130+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 131+ E0FB ED 44                                neg
 132+ E0FD 5F                                   ld		e,a
 133+ E0FE 7B           .PosQtyMul:             ld		a,e
 134+ E0FF ED 44                                neg
 135+ E101 5F                                   ld		e,a
 136+ E102 ED 30                                mul
 137+ E104 79                                   ld		a,c
 138+ E105 93                                   sub		e
 139+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 140+ E109 78                                   ld		a,b
 141+ E10A FE 11                                cp		AlienItemsIndex
 142+ E10C 20 A5                                jr		nz,.generate_stock_loop
 143+ E10E AF                                   xor		a
 144+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 145+ E112 C9                                   ret
 146+ E113
# file closed: ./Tables/stock_table.asm
 789  E113                  DISPLAY "Bank ",BankStockTable," - Bytes free ",/D, $2000 - ($-StockTableAddr), " - BankStockTable"
 790  E113              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
 791  E113                  SLOT    CommanderAddr
 792  E113                  PAGE    BankCommander
 793  E113                  ORG     CommanderAddr, BankCommander
 794  E000                  INCLUDE "./Commander/commanderData.asm"
# file opened: ./Commander/commanderData.asm
   1+ E000 43 4F 4D 4D  commanderPage           DB  "COMMANDERPAGE 56"
   1+ E004 41 4E 44 45
   1+ E008 52 50 41 47
   1+ E00C 45 20 35 36
   2+ E010 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E014 53 4F 4E 00
   3+ E018 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00
   3+ E01C 03 1C 0E 00
   3+ E020 00 0A 00 11
   3+ E024 3A 07 09 08
   3+ E028 00
   4+ E029 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E02D 53 B7
   5+ E02F 14           defaultHomeX	        DB $14
   6+ E030 AD           defaultHomeY	        DB $AD
   7+ E031 44 65 66 61  defaultSaveName         DB "Default.SAV",0,0,0,0
   7+ E035 75 6C 74 2E
   7+ E039 53 41 56 00
   7+ E03D 00 00 00
   8+ E040
   9+ E040              ; Gun and cabin temps are not saved as can only be saved in dock
  10+ E040              ; Note Can only save whilst docked
  11+ E040 43 4F 4D 4D  SaveCommanderHeader     DB  "COMMANDERSAVE..."
  11+ E044 41 4E 44 45
  11+ E048 52 53 41 56
  11+ E04C 45 2E 2E 2E
  12+ E050 00 00 00...  SaveFilename            DS  15
  13+ E05F 00 00 00...  SaveCommanderName       DS  15
  14+ E06E 00 00 00...  SaveSeeds               DS  06
  15+ E074 00 00 00...  SaveStockAvaliabiliy    DS  17
  16+ E085 00 00 00...  SaveCargo               DS  16
  17+ E095 00 00 00...  SaveEquipmentFitted     DS  EQ_ITEM_COUNT
  18+ E0AF 00 00 00 00  SaveLaserType           DS  4
  19+ E0B3 00 00 00 00  SaveLaserDamagedFlag    DS  4
  20+ E0B7 00           SavePresentSystemX      DS  1
  21+ E0B8 00           SavePresentSystemY      DS  1
  22+ E0B9 00           SaveTargetSystemX       DS  1
  23+ E0BA 00           SaveTargetSystemY       DS  1
  24+ E0BB 00 00 00 00  SaveCash                DS  4
  25+ E0BF 00           SaveFuel                DS  1
  26+ E0C0 00           SaveFugitiveInnocentStatus DS 1
  27+ E0C1 00 00        SaveKillTally           DS  2
  28+ E0C3 00           SaveOuterHyperCount     DS  1
  29+ E0C4 00           SaveInnerHyperCount     DS  1
  30+ E0C5 00           SaveForeShield          DS  1
  31+ E0C6 00           SaveAftShield           DS  1
  32+ E0C7 00           SavePlayerEnergy        DS  1
  33+ E0C8 00           SaveCargoBaySize        DS  1
  34+ E0C9 00           SaveFuelScoopStatus     DS  1
  35+ E0CA              SaveSize                equ $ - SaveCommanderHeader
  36+ E0CA
  37+ E0CA              copyCommanderToSave:    ldCopyStringLen CommanderName,      SaveCommanderName, 15
  37+ E0CA 21 D3 84    >                        ld      hl,CommanderName
  37+ E0CD 11 5F E0    >                        ld      de, SaveCommanderName
  37+ E0D0 01 0F 00    >                        ld      bc, 15
  37+ E0D3 ED B0       >                        ldir
  38+ E0D5                                      ldCopyStringLen GalaxySeeds,        SaveSeeds, 6
  38+ E0D5 21 2F 82    >                        ld      hl,GalaxySeeds
  38+ E0D8 11 6E E0    >                        ld      de, SaveSeeds
  38+ E0DB 01 06 00    >                        ld      bc, 6
  38+ E0DE ED B0       >                        ldir
  39+ E0E0                                      ldCopyStringLen StockAvaliabiliy,   SaveStockAvaliabiliy, 16
  39+ E0E0 21 10 82    >                        ld      hl,StockAvaliabiliy
  39+ E0E3 11 74 E0    >                        ld      de, SaveStockAvaliabiliy
  39+ E0E6 01 10 00    >                        ld      bc, 16
  39+ E0E9 ED B0       >                        ldir
  40+ E0EB                                      ldCopyStringLen CargoTonnes,        SaveCargo, 16
  40+ E0EB 21 AA 87    >                        ld      hl,CargoTonnes
  40+ E0EE 11 85 E0    >                        ld      de, SaveCargo
  40+ E0F1 01 10 00    >                        ld      bc, 16
  40+ E0F4 ED B0       >                        ldir
  41+ E0F6                                      ldCopyStringLen EquipmentFitted,    SaveEquipmentFitted, EQ_ITEM_COUNT
  41+ E0F6 21 C2 87    >                        ld      hl,EquipmentFitted
  41+ E0F9 11 95 E0    >                        ld      de, SaveEquipmentFitted
  41+ E0FC 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  41+ E0FF ED B0       >                        ldir
  42+ E101                                      ldCopyStringLen LaserType,          SaveLaserType, 4
  42+ E101 21 BA 87    >                        ld      hl,LaserType
  42+ E104 11 AF E0    >                        ld      de, SaveLaserType
  42+ E107 01 04 00    >                        ld      bc, 4
  42+ E10A ED B0       >                        ldir
  43+ E10C                                      ldCopyStringLen LaserDamagedFlag,   SaveLaserDamagedFlag, 4
  43+ E10C 21 BE 87    >                        ld      hl,LaserDamagedFlag
  43+ E10F 11 B3 E0    >                        ld      de, SaveLaserDamagedFlag
  43+ E112 01 04 00    >                        ld      bc, 4
  43+ E115 ED B0       >                        ldir
  44+ E117                                      ldCopy2Byte     PresentSystemX,     SavePresentSystemX
  44+ E117 2A 35 82    >                        ld       hl,(PresentSystemX)
  44+ E11A 22 B7 E0    >                        ld       (SavePresentSystemX),hl
  45+ E11D                                      ldCopy2Byte     TargetSystemX,      SaveTargetSystemX
  45+ E11D 2A 37 82    >                        ld       hl,(TargetSystemX)
  45+ E120 22 B9 E0    >                        ld       (SaveTargetSystemX),hl
  46+ E123                                      ldCopyStringLen Cash,               SaveCash, 6
  46+ E123 21 A3 87    >                        ld      hl,Cash
  46+ E126 11 BB E0    >                        ld      de, SaveCash
  46+ E129 01 06 00    >                        ld      bc, 6
  46+ E12C ED B0       >                        ldir
  47+ E12E                                      ldCopyByte      Fuel,               SaveFuel
  47+ E12E 3A A7 87    >                        ld       a,(Fuel)
  47+ E131 32 BF E0    >                        ld       (SaveFuel),a
  48+ E134                                      ldCopyByte      FugitiveInnocentStatus,  SaveFugitiveInnocentStatus
  48+ E134 3A 44 82    >                        ld       a,(FugitiveInnocentStatus)
  48+ E137 32 C0 E0    >                        ld       (SaveFugitiveInnocentStatus),a
  49+ E13A                                      ldCopy2Byte     KillTally           ,SaveKillTally
  49+ E13A 2A 45 82    >                        ld       hl,(KillTally)
  49+ E13D 22 C1 E0    >                        ld       (SaveKillTally),hl
  50+ E140                                      ldCopyByte      OuterHyperCount     ,SaveOuterHyperCount
  50+ E140 3A 53 83    >                        ld       a,(OuterHyperCount)
  50+ E143 32 C3 E0    >                        ld       (SaveOuterHyperCount),a
  51+ E146                                      ldCopyByte      InnerHyperCount     ,SaveInnerHyperCount
  51+ E146 3A 52 83    >                        ld       a,(InnerHyperCount)
  51+ E149 32 C4 E0    >                        ld       (SaveInnerHyperCount),a
  52+ E14C                                      ldCopyByte      ForeShield          ,SaveForeShield
  52+ E14C 3A CD 84    >                        ld       a,(ForeShield)
  52+ E14F 32 C5 E0    >                        ld       (SaveForeShield),a
  53+ E152                                      ldCopyByte      AftShield           ,SaveAftShield
  53+ E152 3A CE 84    >                        ld       a,(AftShield)
  53+ E155 32 C6 E0    >                        ld       (SaveAftShield),a
  54+ E158                                      ldCopyByte      PlayerEnergy        ,SavePlayerEnergy
  54+ E158 3A CF 84    >                        ld       a,(PlayerEnergy)
  54+ E15B 32 C7 E0    >                        ld       (SavePlayerEnergy),a
  55+ E15E                                      ldCopyByte      CargoBaySize        ,SaveCargoBaySize
  55+ E15E 3A A8 87    >                        ld       a,(CargoBaySize)
  55+ E161 32 C8 E0    >                        ld       (SaveCargoBaySize),a
  56+ E164                                      ldCopyByte      FuelScoopsBarrelStatus     ,SaveFuelScoopStatus
  56+ E164 3A DC 87    >                        ld       a,(FuelScoopsBarrelStatus)
  56+ E167 32 C9 E0    >                        ld       (SaveFuelScoopStatus),a
  57+ E16A C9                                   ret
  58+ E16B
  59+ E16B              copyCommanderFromSave:  ldCopyStringLen SaveCommanderName,      CommanderName, 15
  59+ E16B 21 5F E0    >                        ld      hl,SaveCommanderName
  59+ E16E 11 D3 84    >                        ld      de, CommanderName
  59+ E171 01 0F 00    >                        ld      bc, 15
  59+ E174 ED B0       >                        ldir
  60+ E176                                      ldCopyStringLen SaveSeeds,              GalaxySeeds, 6
  60+ E176 21 6E E0    >                        ld      hl,SaveSeeds
  60+ E179 11 2F 82    >                        ld      de, GalaxySeeds
  60+ E17C 01 06 00    >                        ld      bc, 6
  60+ E17F ED B0       >                        ldir
  61+ E181                                      ldCopyStringLen SaveStockAvaliabiliy,   StockAvaliabiliy, 16
  61+ E181 21 74 E0    >                        ld      hl,SaveStockAvaliabiliy
  61+ E184 11 10 82    >                        ld      de, StockAvaliabiliy
  61+ E187 01 10 00    >                        ld      bc, 16
  61+ E18A ED B0       >                        ldir
  62+ E18C                                      ldCopyStringLen SaveCargo,              CargoTonnes, 16
  62+ E18C 21 85 E0    >                        ld      hl,SaveCargo
  62+ E18F 11 AA 87    >                        ld      de, CargoTonnes
  62+ E192 01 10 00    >                        ld      bc, 16
  62+ E195 ED B0       >                        ldir
  63+ E197                                      ldCopyStringLen SaveEquipmentFitted,    EquipmentFitted, EQ_ITEM_COUNT
  63+ E197 21 95 E0    >                        ld      hl,SaveEquipmentFitted
  63+ E19A 11 C2 87    >                        ld      de, EquipmentFitted
  63+ E19D 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  63+ E1A0 ED B0       >                        ldir
  64+ E1A2                                      ldCopyStringLen SaveLaserType,          LaserType, 4
  64+ E1A2 21 AF E0    >                        ld      hl,SaveLaserType
  64+ E1A5 11 BA 87    >                        ld      de, LaserType
  64+ E1A8 01 04 00    >                        ld      bc, 4
  64+ E1AB ED B0       >                        ldir
  65+ E1AD                                      ldCopyStringLen SaveLaserDamagedFlag,    LaserDamagedFlag, 4
  65+ E1AD 21 B3 E0    >                        ld      hl,SaveLaserDamagedFlag
  65+ E1B0 11 BE 87    >                        ld      de, LaserDamagedFlag
  65+ E1B3 01 04 00    >                        ld      bc, 4
  65+ E1B6 ED B0       >                        ldir
  66+ E1B8                                      ldCopy2Byte     SavePresentSystemX,     PresentSystemX
  66+ E1B8 2A B7 E0    >                        ld       hl,(SavePresentSystemX)
  66+ E1BB 22 35 82    >                        ld       (PresentSystemX),hl
  67+ E1BE                                      ldCopy2Byte     SaveTargetSystemX,      TargetSystemX
  67+ E1BE 2A B9 E0    >                        ld       hl,(SaveTargetSystemX)
  67+ E1C1 22 37 82    >                        ld       (TargetSystemX),hl
  68+ E1C4 21 68 81                             ld		hl,IndexedWork              ; not sure yet why thisis done here
  69+ E1C7 CD 31 88                             call	        copy_galaxy_to_system
  70+ E1CA CD F1 88                             call	        find_present_system
  71+ E1CD CD 54 88                             call	        copy_working_to_galaxy
  72+ E1D0                                      ldCopyStringLen SaveCash,               Cash, 6
  72+ E1D0 21 BB E0    >                        ld      hl,SaveCash
  72+ E1D3 11 A3 87    >                        ld      de, Cash
  72+ E1D6 01 06 00    >                        ld      bc, 6
  72+ E1D9 ED B0       >                        ldir
  73+ E1DB                                      ldCopyByte      SaveFuel,               Fuel
  73+ E1DB 3A BF E0    >                        ld       a,(SaveFuel)
  73+ E1DE 32 A7 87    >                        ld       (Fuel),a
  74+ E1E1                                      ldCopyByte      SaveFugitiveInnocentStatus,  FugitiveInnocentStatus
  74+ E1E1 3A C0 E0    >                        ld       a,(SaveFugitiveInnocentStatus)
  74+ E1E4 32 44 82    >                        ld       (FugitiveInnocentStatus),a
  75+ E1E7                                      ldCopy2Byte     SaveKillTally           ,KillTally
  75+ E1E7 2A C1 E0    >                        ld       hl,(SaveKillTally)
  75+ E1EA 22 45 82    >                        ld       (KillTally),hl
  76+ E1ED                                      ldCopyByte      SaveOuterHyperCount     ,OuterHyperCount
  76+ E1ED 3A C3 E0    >                        ld       a,(SaveOuterHyperCount)
  76+ E1F0 32 53 83    >                        ld       (OuterHyperCount),a
  77+ E1F3                                      ldCopyByte      SaveInnerHyperCount     ,InnerHyperCount
  77+ E1F3 3A C4 E0    >                        ld       a,(SaveInnerHyperCount)
  77+ E1F6 32 52 83    >                        ld       (InnerHyperCount),a
  78+ E1F9                                      ldCopyByte      SaveForeShield          ,ForeShield
  78+ E1F9 3A C5 E0    >                        ld       a,(SaveForeShield)
  78+ E1FC 32 CD 84    >                        ld       (ForeShield),a
  79+ E1FF                                      ldCopyByte      SaveAftShield           ,AftShield
  79+ E1FF 3A C6 E0    >                        ld       a,(SaveAftShield)
  79+ E202 32 CE 84    >                        ld       (AftShield),a
  80+ E205                                      ldCopyByte      SavePlayerEnergy        ,PlayerEnergy
  80+ E205 3A C7 E0    >                        ld       a,(SavePlayerEnergy)
  80+ E208 32 CF 84    >                        ld       (PlayerEnergy),a
  81+ E20B                                      ldCopyByte      SaveCargoBaySize        ,CargoBaySize
  81+ E20B 3A C8 E0    >                        ld       a,(SaveCargoBaySize)
  81+ E20E 32 A8 87    >                        ld       (CargoBaySize),a
  82+ E211                                      ldCopyByte      SaveFuelScoopStatus     ,FuelScoopsBarrelStatus
  82+ E211 3A C9 E0    >                        ld       a,(SaveFuelScoopStatus)
  82+ E214 32 DC 87    >                        ld       (FuelScoopsBarrelStatus),a
  83+ E217 C9                                   ret
  84+ E218
  85+ E218 CD CA E0     saveCommander:          call    copyCommanderToSave
  86+ E21B                                      ldCopyStringLen defaultSaveName, SaveFilename, 15
  86+ E21B 21 31 E0    >                        ld      hl,defaultSaveName
  86+ E21E 11 50 E0    >                        ld      de, SaveFilename
  86+ E221 01 0F 00    >                        ld      bc, 15
  86+ E224 ED B0       >                        ldir
  87+ E226 21 31 E0                             ld      hl, defaultSaveName             ; default debug name
  88+ E229 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  89+ E22D 01 8A 00                             ld      bc, SaveSize
  90+ E230 CD 21 AC                             call    FileSave
  91+ E233 C9                                   ret
  92+ E234
  93+ E234 21 31 E0     loadCommander:          ld      hl, defaultSaveName             ; default debug name
  94+ E237 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  95+ E23B 01 8A 00                             ld      bc, SaveSize
  96+ E23E CD F0 AB                             call    FileLoad
  97+ E241 CD 6B E1                             call    copyCommanderFromSave
  98+ E244                                      ClearMissileTargetting
  98+ E244 3E FF       >                        ld      a,StageMissileNotTargeting
  98+ E246 32 D2 84    >                        ld      (MissileTargettingFlag),a
  99+ E249 CD 51 86                             call    SetPlayerRank
 100+ E24C C9                                   ret
 101+ E24D
 102+ E24D               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
 103+ E24D              defaultCommander:       ldCopyStringLen defaultName, CommanderName, 8
 103+ E24D 21 10 E0    >                        ld      hl,defaultName
 103+ E250 11 D3 84    >                        ld      de, CommanderName
 103+ E253 01 08 00    >                        ld      bc, 8
 103+ E256 ED B0       >                        ldir
 104+ E258                                      ldCopyStringLen defaultSeeds, GalaxySeeds, 6
 104+ E258 21 29 E0    >                        ld      hl,defaultSeeds
 104+ E25B 11 2F 82    >                        ld      de, GalaxySeeds
 104+ E25E 01 06 00    >                        ld      bc, 6
 104+ E261 ED B0       >                        ldir
 105+ E263                                      ldCopy2Byte defaultHomeX, PresentSystemX
 105+ E263 2A 2F E0    >                        ld       hl,(defaultHomeX)
 105+ E266 22 35 82    >                        ld       (PresentSystemX),hl
 106+ E269                                      ldCopy2Byte defaultHomeX, TargetSystemX
 106+ E269 2A 2F E0    >                        ld       hl,(defaultHomeX)
 106+ E26C 22 37 82    >                        ld       (TargetSystemX),hl
 107+ E26F 21 68 81                             ld		hl,IndexedWork              ; not sure yet why thisis done here
 108+ E272 CD 31 88                             call	copy_galaxy_to_system
 109+ E275 CD F1 88                             call	find_present_system
 110+ E278 CD 54 88                             call	copy_working_to_galaxy
 111+ E27B 01 60 EA                             ld      bc,60000
 112+ E27E ED 43 A3 87                          ld      (Cash),bc
 113+ E282 01 00 00                             ld		bc,0
 114+ E285 ED 43 A5 87                          ld		(Cash+2), bc                    ; cash no longer big endian
 115+ E289 3E 46                                ld		a,MaxFuelLevel
 116+ E28B 32 A7 87                             ld		(Fuel),a
 117+ E28E 3E 5B                                ld      a,BankGalaxyData0
 118+ E290 32 22 82                             ld		(Galaxy),a
 119+ E293 AF                                   xor		a
 120+ E294 21 C2 87                             ld      hl,EquipmentFitted
 121+ E297 06 1A                                ld      b, EQ_ITEM_COUNT
 122+ E299 77           .ClearFittedLooop:      ld      (hl),a
 123+ E29A 23                                   inc     hl
 124+ E29B 10 FC                                djnz    .ClearFittedLooop
 125+ E29D                                      SetAFalse
 125+ E29D 3E FF       >                        ld      a,$FF
 126+ E29F 32 D0 87                             ld      (EquipmentFitted+EQ_FRONT_BEAM),a
 127+ E2A2 32 85 83                             ld		(MissionData),a						;The Plan/Mission
 128+ E2A5 3E 04                                ld      a,4                                  ; a = 0 = pulse laser
 129+ E2A7 32 BA 87                             ld		(LaserType),a
 130+ E2AA 3E FF                                ld      a,$FF                                 ; a = 255
 131+ E2AC 32 BB 87                             ld		(LaserType+1),a
 132+ E2AF 32 BC 87                             ld		(LaserType+2),a
 133+ E2B2 32 BD 87                             ld		(LaserType+3),a
 134+ E2B5 AF                                   xor     a                                  ; a= 0
 135+ E2B6 32 BE 87                             ld      (LaserDamagedFlag),a
 136+ E2B9 32 BF 87                             ld      (LaserDamagedFlag+1),a
 137+ E2BC 32 C0 87                             ld      (LaserDamagedFlag+2),a
 138+ E2BF 32 C1 87                             ld      (LaserDamagedFlag+3),a
 139+ E2C2              ; REMOVE?             ld      a,EQ_FRONT_PULSE
 140+ E2C2 AF                                   xor     a
 141+ E2C3 32 C5 87                             ld		(ECMPresent),a
 142+ E2C6 32 DC 87                             ld		(FuelScoopsBarrelStatus),a
 143+ E2C9 32 C8 87                             ld		(EnergyBomb),a
 144+ E2CC 32 C9 87                             ld		(ExtraEnergyUnit),a
 145+ E2CF 32 CA 87                             ld		(DockingComputer),a
 146+ E2D2 32 CB 87                             ld		(GalacticHyperDrive),a
 147+ E2D5 32 C7 87                             ld		(EscapePod),a
 148+ E2D8 32 44 82                             ld      (FugitiveInnocentStatus),a
 149+ E2DB 32 45 82                             ld		(KillTally),a
 150+ E2DE 32 53 83                             ld      (OuterHyperCount),a
 151+ E2E1 32 52 83                             ld      (InnerHyperCount),a
 152+ E2E4 3D                                   dec		a								; now a = 255
 153+ E2E5 32 CD 84                             ld		(ForeShield),a
 154+ E2E8 32 CE 84                             ld		(AftShield),a
 155+ E2EB 32 CF 84                             ld		(PlayerEnergy),a
 156+ E2EE 3E 14                                ld		a,20
 157+ E2F0 32 A8 87                             ld		(CargoBaySize),a
 158+ E2F3 CD 6E E3                             call	ZeroCargo						; Clear out cargo
 159+ E2F6 3E 00        .SetLasers:             ld      a,0                             ; we start on Front view
 160+ E2F8 CD 04 E3                             call    LoadLaserToCurrent
 161+ E2FB                                      ClearMissileTargetting
 161+ E2FB 3E FF       >                        ld      a,StageMissileNotTargeting
 161+ E2FD 32 D2 84    >                        ld      (MissileTargettingFlag),a
 162+ E300 CD 51 86                             call    SetPlayerRank
 163+ E303 C9                                   ret
 164+ E304
 165+ E304
 166+ E304              ; a = current view number
 167+ E304 21 BA 87     LoadLaserToCurrent:     ld      hl,LaserType                    ; .
 168+ E307 ED 31                                add     hl,a                            ; .
 169+ E309 7E                                   ld      a,(hl)                          ; .
 170+ E30A 47                                   ld      b,a                             ; first off is there a laser present in current view
 171+ E30B 32 E4 84                             ld      (CurrLaserType),a               ; set type
 172+ E30E FE FF                                cp      255                             ; .
 173+ E310 C8                                   ret     z                               ; we can then drop out early if nothing fitted
 174+ E311 3E 04                                ld      a,4                             ; Damage state is in next variable in memory
 175+ E313 ED 31                                add     hl,a
 176+ E315 7E                                   ld      a,(hl)
 177+ E316 32 E5 84                             ld      (CurrLaserDamage),a             ; copy over current laser's damage
 178+ E319 50                                   ld      d,b                             ; get table index
 179+ E31A 1E 0C                                ld      e,LaserStatsTableWidth          ;
 180+ E31C ED 30                                mul     de                              ;
 181+ E31E 21 F5 75                             ld      hl,LaserStatsTable              ;
 182+ E321 19                                   add     hl,de                           ;
 183+ E322 23                                   inc     hl                              ; we already have type
 184+ E323                                      ldAtHLtoMem CurrLaserPulseRate          ; table [1]
 184+ E323 7E          >                        ld      a,(hl)
 184+ E324 32 E6 84    >                        ld      (CurrLaserPulseRate),a
 185+ E327 23                                   inc     hl                              ; table [2]
 186+ E328                                      ldAtHLtoMem CurrLaserPulseOnTime
 186+ E328 7E          >                        ld      a,(hl)
 186+ E329 32 E7 84    >                        ld      (CurrLaserPulseOnTime),a
 187+ E32C 23                                   inc     hl                              ; table [3]
 188+ E32D                                      ldAtHLtoMem CurrLaserPulseOffTime
 188+ E32D 7E          >                        ld      a,(hl)
 188+ E32E 32 E8 84    >                        ld      (CurrLaserPulseOffTime),a
 189+ E331 23                                   inc     hl                              ; table [4]
 190+ E332                                      ldAtHLtoMem CurrLaserPulseRest
 190+ E332 7E          >                        ld      a,(hl)
 190+ E333 32 E9 84    >                        ld      (CurrLaserPulseRest),a
 191+ E336 23                                   inc     hl                              ; table [5]
 192+ E337                                      ldAtHLtoMem CurrLaserDamageOutput
 192+ E337 7E          >                        ld      a,(hl)
 192+ E338 32 EC 84    >                        ld      (CurrLaserDamageOutput),a
 193+ E33B 23                                   inc     hl                              ; table [6]
 194+ E33C                                      ldAtHLtoMem CurrLaserEnergyDrain
 194+ E33C 7E          >                        ld      a,(hl)
 194+ E33D 32 ED 84    >                        ld      (CurrLaserEnergyDrain),a
 195+ E340 23                                   inc     hl                              ; table [7]
 196+ E341                                      ldAtHLtoMem CurrLaserHeat
 196+ E341 7E          >                        ld      a,(hl)
 196+ E342 32 EE 84    >                        ld      (CurrLaserHeat),a
 197+ E345 23                                   inc     hl                              ; table [8]
 198+ E346                                      ldAtHLtoMem CurrLaserDurability
 198+ E346 7E          >                        ld      a,(hl)
 198+ E347 32 EF 84    >                        ld      (CurrLaserDurability),a
 199+ E34A 23                                   inc     hl                              ; table [9]
 200+ E34B                                      ldAtHLtoMem CurrLaserDurabilityAmount   ; we don't need tech level etc for in game run only markets so stop here
 200+ E34B 7E          >                        ld      a,(hl)
 200+ E34C 32 F0 84    >                        ld      (CurrLaserDurabilityAmount),a
 201+ E34F C9                                   ret
 202+ E350
 203+ E350              ; Set a = 2 * (slaves + narcotics) + firearms
 204+ E350 3A AD 87     calculateBadness:       ld      a,(SlaveCargoTonnes)            ; Badness = 2(slaves + narcotics)
 205+ E353 47                                   ld      b,a                             ; b= slaves
 206+ E354 3A B0 87                             ld      a,(NarcoticsCargoTonnes)        ; .
 207+ E357 80                                   add     a,b                             ; a = b + narcotics
 208+ E358 CB 27                                sla     a                               ; a *= 2
 209+ E35A 47                                   ld      b,a                             ; b = a
 210+ E35B 3A B4 87                             ld      a,(FirearmsCargoTonnes)         ; a = firearms tonns
 211+ E35E 80                                   add     a,b                             ; a += b so firearms + 2(slaves + narcotics)
 212+ E35F C9                                   ret
 213+ E360
 214+ E360 CD 6B E1     PlayerDeath:            call    copyCommanderFromSave           ; load last loaded/saved commander
 215+ E363                                      ZeroA                                   ; set current laser to front
 215+ E363 AF          >                        xor a
 216+ E364 CD 04 E3                             call    LoadLaserToCurrent
 217+ E367 CD 0E 86                             call    InitMainLoop
 218+ E36A CD 71 85                             call    ResetPlayerShip
 219+ E36D C9                                   ret
 220+ E36E                                  ;    clear out all other objects
 221+ E36E                                  ;    create debris
 222+ E36E                                  ;    if cargo presetn then create a cargo
 223+ E36E                                  ;
 224+ E36E                                  ;    enqueve message game over
 225+ E36E                                  ;    go to load commander page
# file closed: ./Commander/commanderData.asm
 795  E36E                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E36E              ZeroCargo:
   2+ E36E AF           		xor		a							;zero-out cargo, including gems.
   3+ E36F 06 10        		ld		b,16						;all the way up to alien items
   4+ E371 21 AA 87     		ld		hl,CargoTonnes   			; cargo levels
   5+ E374              .ZeroLoop:
   6+ E374 77                   ld      (hl),a
   7+ E375 23           		inc		hl
   8+ E376 10 FC        		djnz	.ZeroLoop
   9+ E378 C9           		ret
  10+ E379
# file closed: ./Commander/zero_player_cargo.asm
 796  E379                  DISPLAY "Bank ",BankCommander," - Bytes free ",/D, $2000 - ($-CommanderAddr), " - BankCommander"
 797  E379              ; Bank 57  ------------------------------------------------------------------------------------------------------------------------
 798  E379                  SLOT    LAYER2Addr
 799  E379                  PAGE    BankLAYER2
 800  E379                  ORG     LAYER2Addr
 801  E000
 802  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_CURRENT_BANK           DB	0
   4+ E002 00           varL2_BUFFER_MODE            DB 0
   5+ E003 00           varL2_ACCESS_MODE            DB 0
   6+ E004
   7+ E004 3E 08        asm_l2_double_buffer_on:    ld      a,8
   8+ E006 32 02 E0                                 ld      (varL2_BUFFER_MODE),a
   9+ E009 C9                                       ret
  10+ E00A
  11+ E00A AF           asm_l2_double_buffer_off:   xor     a
  12+ E00B 32 02 E0                                 ld      (varL2_BUFFER_MODE),a
  13+ E00E C9                                       ret
  14+ E00F
  15+ E00F 01 3B 12     asm_disable_l2_readwrite:   ld      bc, IO_LAYER2_PORT
  16+ E012 ED 70                                    in      (c)
  17+ E014 32 03 E0                                 ld      (varL2_ACCESS_MODE),a
  18+ E017 E6 FA                                    and     LAYER2_DISABLE_MEM_ACCESS
  19+ E019 ED 79                                    out     (c),a
  20+ E01B C9                                       ret
  21+ E01C
  22+ E01C 3A 03 E0     asm_restore_l2_readwrite:   ld      a,(varL2_ACCESS_MODE)
  23+ E01F E6 05                                    and     LAYER2_READ_WRITE_MASK
  24+ E021 57                                       ld      d,a
  25+ E022 01 3B 12                                 ld      bc, IO_LAYER2_PORT
  26+ E025 ED 70                                    in      (c)
  27+ E027 32 03 E0                                 ld      (varL2_ACCESS_MODE),a
  28+ E02A A2                                       and     d
  29+ E02B ED 79                                    out     (c),a
  30+ E02D C9                                       ret
  31+ E02E
  32+ E02E 01 3B 12     asm_enable_l2_readwrite:    ld      bc, IO_LAYER2_PORT
  33+ E031 ED 70                                    in      (c)
  34+ E033 F6 05                                    or      LAYER2_READ_WRITE_MASK
  35+ E035 ED 79                                    out     (c),a
  36+ E037 C9                                       ret
  37+ E038
  38+ E038              ; "asm_l2_bank_select"
  39+ E038              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  40+ E038 57           asm_l2_bank_select:         ld      d,a
  41+ E039 FE 00                                    cp      0
  42+ E03B 28 08                                    jr      z,.NotBreakDebug
  43+ E03D FE 40                                    cp      $40
  44+ E03F 28 04                                    jr      z,.NotBreakDebug
  45+ E041 FE 80                                    cp      $80
  46+ E043 28 00                                    jr      z,.NotBreakDebug
  47+ E045              .NotBreakDebug:
  48+ E045 3A 02 E0                                 ld      a,(varL2_BUFFER_MODE)
  49+ E048 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  50+ E04A B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  51+ E04B 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  52+ E04E ED 79                                    out 	(c),a
  53+ E050 C9                                       ret
  54+ E051              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  55+ E051 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  56+ E054 FE 00                                    cp		0
  57+ E056 20 04                                    jr 		nz,.nottopbank
  58+ E058 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  59+ E05A 18 DC                                    jr		asm_l2_bank_select
  60+ E05C FE 01        .nottopbank:                cp		1
  61+ E05E 20 04                                    jr 		nz,.notmiddlebank
  62+ E060 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  63+ E062 18 D4                                    jr		asm_l2_bank_select
  64+ E064 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  65+ E066 18 D0                                    jr		asm_l2_bank_select
  66+ E068              		; Note no ret as its handled by above routines
  67+ E068
  68+ E068              asm_l2_bank_0_macro:        MACRO
  69+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
  70+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  71+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
  72+ E068 ~                                        out 	(c),a
  73+ E068 ~                                      ;  ld      a,%0001000              ; Bank offset of + 1
  74+ E068 ~                                      ;  out     (c),a
  75+ E068 ~                                        ZeroA						; set a to 0
  76+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  77+ E068                                          ENDM
  78+ E068
  79+ E068              asm_l2_bank_1_macro:        MACRO
  80+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
  81+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  82+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
  83+ E068 ~                                        out 	(c),a
  84+ E068 ~                                       ; ld      a,%0001000              ; Bank offset of + 1
  85+ E068 ~                                      ;  out     (c),a
  86+ E068 ~                                        ld      a,1						; set a to 0
  87+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  88+ E068                                          ENDM
  89+ E068
  90+ E068              asm_l2_bank_2_macro:        MACRO
  91+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
  92+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  93+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
  94+ E068 ~                                        out 	(c),a
  95+ E068 ~                                      ;  ld      a,%0001000              ; Bank offset of + 1
  96+ E068 ~                                       ; out     (c),a
  97+ E068 ~                                        ld      a,2						; set a to 0
  98+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  99+ E068                                          ENDM
 100+ E068
 101+ E068              asm_l2_bank_3_macro:        MACRO
 102+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
 103+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 104+ E068 ~                                        or      %0001011
 105+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
 106+ E068 ~                                        out 	(c),a
 107+ E068 ~                                        ld      a,3						; set a to 0
 108+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 109+ E068                                          ENDM
 110+ E068
 111+ E068              asm_l2_bank_4_macro:        MACRO
 112+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
 113+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 114+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
 115+ E068 ~                                        out 	(c),a
 116+ E068 ~                                        ld      a,4						; set a to 0
 117+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 118+ E068                                          ENDM
 119+ E068
 120+ E068              ; "asm_l2_row_bank_select"
 121+ E068              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
 122+ E068              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
 123+ E068              ; "destroys BC call de is safe a = adjusted poke pixel row"
 124+ E068              asm_l2_row_bank_select:     JumpIfAGTENusng 128, .BottomBank
 124+ E068 FE 80       >                        cp     128
 124+ E06A D2 A6 E0    >                        jp		nc,.BottomBank
 125+ E06D                                          JumpIfAGTENusng 64, .MiddleBank
 125+ E06D FE 40       >                        cp     64
 125+ E06F D2 8A E0    >                        jp		nc,.MiddleBank
 126+ E072 08                                       ex      af,af'
 127+ E073                                          JumpIfMemZero varL2_BANK_SELECTED, .NoTopChange
 127+ E073 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 127+ E076 A7          >                        and a
 127+ E077 CA 88 E0    >                        jp  z,.NoTopChange
 128+ E07A                                          asm_l2_bank_0_macro
 128+ E07A 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 128+ E07D F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 128+ E07F 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 128+ E082 ED 79       >                            out 	(c),a
 128+ E084             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 128+ E084             >                          ;  out     (c),a
 128+ E084             >                            ZeroA						; set a to 0
 128+ E084 AF          >                        xor a
 128+ E085 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 129+ E088 08           .NoTopChange:               ex      af,af'
 130+ E089 C9                                       ret
 131+ E08A 08           .MiddleBank:                ex      af,af'
 132+ E08B                                          JumpIfMemEqNusng varL2_BANK_SELECTED, 1, .NoMiddleChange
 132+ E08B 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 132+ E08E FE 01       >                        cp  1
 132+ E090 CA A2 E0    >                        jp  z,.NoMiddleChange
 133+ E093                                          asm_l2_bank_1_macro
 133+ E093 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 133+ E096 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 133+ E098 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 133+ E09B ED 79       >                            out 	(c),a
 133+ E09D             >                           ; ld      a,%0001000              ; Bank offset of + 1
 133+ E09D             >                          ;  out     (c),a
 133+ E09D 3E 01       >                            ld      a,1						; set a to 0
 133+ E09F 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 134+ E0A2 08           .NoMiddleChange:            ex      af,af'
 135+ E0A3 D6 40                                    sub     64
 136+ E0A5 C9                                       ret
 137+ E0A6 08           .BottomBank:                ex      af,af'
 138+ E0A7                                          JumpIfMemEqNusng varL2_BANK_SELECTED, 2, .NoBottomChange
 138+ E0A7 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 138+ E0AA FE 02       >                        cp  2
 138+ E0AC CA BE E0    >                        jp  z,.NoBottomChange
 139+ E0AF                                          asm_l2_bank_2_macro
 139+ E0AF 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 139+ E0B2 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 139+ E0B4 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 139+ E0B7 ED 79       >                            out 	(c),a
 139+ E0B9             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 139+ E0B9             >                           ; out     (c),a
 139+ E0B9 3E 02       >                            ld      a,2						; set a to 0
 139+ E0BB 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 140+ E0BE 08           .NoBottomChange:            ex      af,af'
 141+ E0BF D6 80                                    sub     128
 142+ E0C1 C9                                       ret
 143+ E0C2
 144+ E0C2
 145+ E0C2              ; "asm_l2_row_bank_select"
 146+ E0C2              ; "HL (unsinged) = x column of pixel line from left
 147+ E0C2              ; 0-  63
 148+ E0C2              ; 64- 127
 149+ E0C2              ; 128 - 191
 150+ E0C2              ; 192 - 255
 151+ E0C2              ; 256 - 321
 152+ E0C2              ; outputs l with the correct column number
 153+ E0C2 7A           asm_l2_320_col_bank_select: ld      a,d
 154+ E0C3                                          JumpIfAIsNotZero .Bank5             ; 256 - 321
 154+ E0C3 A7          >                        and     a
 154+ E0C4 C2 27 E1    >                        jp	    nz,.Bank5
 155+ E0C7 7B                                       ld      a,e
 156+ E0C8                                          JumpIfAGTENusng 192, .Bank4
 156+ E0C8 FE C0       >                        cp     192
 156+ E0CA D2 10 E1    >                        jp		nc,.Bank4
 157+ E0CD                                          JumpIfAGTENusng 128, .Bank3
 157+ E0CD FE 80       >                        cp     128
 157+ E0CF D2 FB E0    >                        jp		nc,.Bank3
 158+ E0D2                                          JumpIfAGTENusng 64 , .Bank2
 158+ E0D2 FE 40       >                        cp     64
 158+ E0D4 D2 E6 E0    >                        jp		nc,.Bank2
 159+ E0D7              .Bank1:                     asm_l2_bank_0_macro
 159+ E0D7 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 159+ E0DA F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 159+ E0DC 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 159+ E0DF ED 79       >                            out 	(c),a
 159+ E0E1             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 159+ E0E1             >                          ;  out     (c),a
 159+ E0E1             >                            ZeroA						; set a to 0
 159+ E0E1 AF          >                        xor a
 159+ E0E2 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 160+ E0E5 C9                                       ret
 161+ E0E6              .Bank2:                     asm_l2_bank_1_macro
 161+ E0E6 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 161+ E0E9 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 161+ E0EB 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 161+ E0EE ED 79       >                            out 	(c),a
 161+ E0F0             >                           ; ld      a,%0001000              ; Bank offset of + 1
 161+ E0F0             >                          ;  out     (c),a
 161+ E0F0 3E 01       >                            ld      a,1						; set a to 0
 161+ E0F2 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 162+ E0F5                                          ClearCarryFlag
 162+ E0F5 B7          >                        or a
 163+ E0F6 7D                                       ld      a,l
 164+ E0F7 E6 BF                                    and     %10111111       ; fast subtract 64, just clear bit
 165+ E0F9 67                                       ld      h,a
 166+ E0FA C9                                       ret
 167+ E0FB              .Bank3:                     asm_l2_bank_2_macro
 167+ E0FB 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 167+ E0FE F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 167+ E100 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 167+ E103 ED 79       >                            out 	(c),a
 167+ E105             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 167+ E105             >                           ; out     (c),a
 167+ E105 3E 02       >                            ld      a,2						; set a to 0
 167+ E107 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 168+ E10A                                          ClearCarryFlag
 168+ E10A B7          >                        or a
 169+ E10B 7D                                       ld      a,l
 170+ E10C E6 7F                                    and     %01111111       ; fast subtract 128, just clear bit
 171+ E10E 67                                       ld      h,a
 172+ E10F C9                                       ret
 173+ E110              .Bank4:                     asm_l2_bank_3_macro
 173+ E110 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 173+ E113 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 173+ E115 F6 0B       >                            or      %0001011
 173+ E117 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 173+ E11A ED 79       >                            out 	(c),a
 173+ E11C 3E 03       >                            ld      a,3						; set a to 0
 173+ E11E 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 174+ E121                                          ClearCarryFlag
 174+ E121 B7          >                        or a
 175+ E122 7B                                       ld      a,e
 176+ E123 E6 3F                                    and     %00111111       ; fast subtract 192, just clear bit
 177+ E125 67                                       ld      h,a
 178+ E126 C9                                       ret
 179+ E127              .Bank5:                     asm_l2_bank_4_macro
 179+ E127 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 179+ E12A F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 179+ E12C 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 179+ E12F ED 79       >                            out 	(c),a
 179+ E131 3E 04       >                            ld      a,4						; set a to 0
 179+ E133 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 180+ E136 65                                       ld      h,l             ; fast subtract 256, just clear bit
 181+ E137 C9                                       ret
 182+ E138
 183+ E138              ;;;
 184+ E138              ;;;
 185+ E138              ;;;                            cp 		64			; row < 64?
 186+ E138              ;;;                            jr 		nc, .l2rowGTE64
 187+ E138              ;;;.l2rowLT64:                 ex		af,af'
 188+ E138              ;;;                            ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
 189+ E138              ;;;                            ld      a,(varL2_BUFFER_MODE)
 190+ E138              ;;;                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 191+ E138              ;;;                            ld 		bc, IO_LAYER2_PORT
 192+ E138              ;;;                            out 	(c),a
 193+ E138              ;;;                            xor		a						; set a to 0
 194+ E138              ;;;                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 195+ E138              ;;;                            ex		af,af'					; return pixel poke unharmed
 196+ E138              ;;;                            ret
 197+ E138              ;;;.l2rowGTE64:                cp 		128
 198+ E138              ;;;                            jr 		nc, .l2rowGTE128
 199+ E138              ;;;.l2row64to127:              ex		af,af'
 200+ E138              ;;;                    ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
 201+ E138              ;;;                            ld      a,(varL2_BUFFER_MODE)
 202+ E138              ;;;                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 203+ E138              ;;;                            ld 		bc, IO_LAYER2_PORT
 204+ E138              ;;;                            out 	(c),a
 205+ E138              ;;;                            ld		a,1						; set a to 1
 206+ E138              ;;;                            ld		(varL2_BANK_SELECTED),a	; save selected bank
 207+ E138              ;;;                            ex		af,af'
 208+ E138              ;;;                            sub		64
 209+ E138              ;;;                            ret
 210+ E138              ;;;.l2rowGTE128:               ex		af,af'
 211+ E138              ;;;                    ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
 212+ E138              ;;;                            ld      a,(varL2_BUFFER_MODE)
 213+ E138              ;;;                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 214+ E138              ;;;
 215+ E138              ;;;                            ld 		bc, IO_LAYER2_PORT
 216+ E138              ;;;                            out 	(c),a
 217+ E138              ;;;                            ld		a,1						; set a to 2
 218+ E138              ;;;                            ld		(varL2_BANK_SELECTED),a	; save selected bank
 219+ E138              ;;;                            ex		af,af'
 220+ E138              ;;;                            sub		128
 221+ E138              ;;;                            ret
 222+ E138
 223+ E138
# file closed: ./Layer2Graphics/layer2_bank_select.asm
 803  E138                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E138
   2+ E138 00           l2_cls_byte	            DB 0
   3+ E139              ; ">DMA Command BLOCK"
   4+ E139
   5+ E139 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E13D 7D
   6+ E13E 38 E1        l2_fill_astrt           DW l2_cls_byte
   7+ E140 00 40        l2_fill_length          DB $00,$40
   8+ E142 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E145 00 00        l2_fill_bstrt           DB $00,$00
  10+ E147 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E14B              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E14B
  13+ E14B 83 C3 C7 CB  l2_fill_burst           DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
  13+ E14F 7D
  14+ E150 38 E1        .l2_fill_astrt          DW l2_cls_byte
  15+ E152 00 40        .l2_fill_length         DB $00,$40
  16+ E154 24 10 CD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_BURST_MODE
  17+ E157 00 00        .l2_fill_bstrt          DB $00,$00
  18+ E159 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  19+ E15D              l2_fill_burst_cmd_len   EQU $ - l2_fill_burst
  20+ E15D
  21+ E15D              ; ">l2_cls_dma_bank sets a bank to"
  22+ E15D              l2_cls_dma_bank:
  23+ E15D 32 38 E1     .set_colour:            ld (l2_cls_byte),a
  24+ E160 21 39 E1     .write_dma:             ld hl, l2_fill
  25+ E163 06 12                                ld b, l2_fill_cmd_len
  26+ E165 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  27+ E167 ED B3                                otir
  28+ E169 C9                                   ret
  29+ E16A
  30+ E16A              ; ">l2_cls_dma_bank sets a bank to"
  31+ E16A              l2_cls_dma_bank_burst:
  32+ E16A 32 38 E1     .set_colour:            ld (l2_cls_byte),a
  33+ E16D 21 4B E1     .write_dma:             ld hl, l2_fill_burst
  34+ E170 06 12                                ld b, l2_fill_burst_cmd_len
  35+ E172 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  36+ E174 ED B3                                otir
  37+ E176 C9                                   ret
  38+ E177
  39+ E177 3E 00        l2_set_color_upper2:    ld      a,0
  40+ E179 CD 68 E0                             call asm_l2_row_bank_select
  41+ E17C 3A 38 E1                             ld      a,(l2_cls_byte)
  42+ E17F CD 5D E1                             call l2_cls_dma_bank
  43+ E182 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  44+ E184 CD 68 E0                             call asm_l2_row_bank_select
  45+ E187 3A 38 E1                             ld      a,(l2_cls_byte)
  46+ E18A CD 5D E1                             call l2_cls_dma_bank
  47+ E18D C9                                   ret
  48+ E18E
  49+ E18E
  50+ E18E              l2_cls_upper_two_thirds:;ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  51+ E18E                                      asm_l2_bank_0_macro ; call asm_l2_row_bank_select
  51+ E18E 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  51+ E191 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  51+ E193 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  51+ E196 ED 79       >                            out 	(c),a
  51+ E198             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  51+ E198             >                          ;  out     (c),a
  51+ E198             >                            ZeroA						; set a to 0
  51+ E198 AF          >                        xor a
  51+ E199 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  52+ E19C 3E E3                                ld 	a,COLOUR_TRANSPARENT
  53+ E19E CD 5D E1                             call l2_cls_dma_bank
  54+ E1A1                                      ;ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  55+ E1A1                                      asm_l2_bank_1_macro ;call asm_l2_row_bank_select
  55+ E1A1 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  55+ E1A4 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  55+ E1A6 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  55+ E1A9 ED 79       >                            out 	(c),a
  55+ E1AB             >                           ; ld      a,%0001000              ; Bank offset of + 1
  55+ E1AB             >                          ;  out     (c),a
  55+ E1AB 3E 01       >                            ld      a,1						; set a to 0
  55+ E1AD 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  56+ E1B0 3E E3                                ld 	a,COLOUR_TRANSPARENT
  57+ E1B2 CD 5D E1                             call l2_cls_dma_bank
  58+ E1B5 C9                                   ret
  59+ E1B6
  60+ E1B6              l2_cls_upper_two_thirds_burst:;ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  61+ E1B6                                      asm_l2_bank_0_macro ; call asm_l2_row_bank_select
  61+ E1B6 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  61+ E1B9 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  61+ E1BB 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  61+ E1BE ED 79       >                            out 	(c),a
  61+ E1C0             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  61+ E1C0             >                          ;  out     (c),a
  61+ E1C0             >                            ZeroA						; set a to 0
  61+ E1C0 AF          >                        xor a
  61+ E1C1 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  62+ E1C4 3E E3                                ld 	a,COLOUR_TRANSPARENT
  63+ E1C6 CD 6A E1                             call l2_cls_dma_bank_burst
  64+ E1C9                                      ;ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  65+ E1C9                                      asm_l2_bank_1_macro ;call asm_l2_row_bank_select
  65+ E1C9 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  65+ E1CC F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  65+ E1CE 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  65+ E1D1 ED 79       >                            out 	(c),a
  65+ E1D3             >                           ; ld      a,%0001000              ; Bank offset of + 1
  65+ E1D3             >                          ;  out     (c),a
  65+ E1D3 3E 01       >                            ld      a,1						; set a to 0
  65+ E1D5 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  66+ E1D8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  67+ E1DA CD 6A E1                             call l2_cls_dma_bank_burst
  68+ E1DD C9                                   ret
  69+ E1DE
  70+ E1DE              l2_cls_lower_third:     ;ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  71+ E1DE                                      asm_l2_bank_2_macro; call asm_l2_row_bank_select
  71+ E1DE 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  71+ E1E1 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  71+ E1E3 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  71+ E1E6 ED 79       >                            out 	(c),a
  71+ E1E8             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  71+ E1E8             >                           ; out     (c),a
  71+ E1E8 3E 02       >                            ld      a,2						; set a to 0
  71+ E1EA 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  72+ E1ED 3E E3                                ld 	a,COLOUR_TRANSPARENT
  73+ E1EF CD 5D E1                             call l2_cls_dma_bank
  74+ E1F2 C9                                   ret
  75+ E1F3
  76+ E1F3              l2_cls_lower_third_burst:asm_l2_bank_2_macro; call asm_l2_row_bank_select
  76+ E1F3 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  76+ E1F6 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  76+ E1F8 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  76+ E1FB ED 79       >                            out 	(c),a
  76+ E1FD             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  76+ E1FD             >                           ; out     (c),a
  76+ E1FD 3E 02       >                            ld      a,2						; set a to 0
  76+ E1FF 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  77+ E202 3E E3                                ld 	a,COLOUR_TRANSPARENT
  78+ E204 CD 6A E1                             call l2_cls_dma_bank_burst
  79+ E207 C9                                   ret
  80+ E208
  81+ E208
  82+ E208 CD B6 E1     l2_cls_burst:           call l2_cls_upper_two_thirds_burst
  83+ E20B C3 F3 E1                             jp   l2_cls_lower_third_burst
  84+ E20E
  85+ E20E
  86+ E20E CD 8E E1     l2_cls:                 call l2_cls_upper_two_thirds
  87+ E211 C3 DE E1                             jp   l2_cls_lower_third
  88+ E214
  89+ E214              l2_320_cls:
  90+ E214 CD 8E E1     l2_640_cls:             call l2_cls_upper_two_thirds
  91+ E217 CD DE E1                             call   l2_cls_lower_third
  92+ E21A                                      ; need to clear banks 4 and 5 via normal paging, say into C000 with interrupts disabled
  93+ E21A                                      asm_l2_bank_3_macro
  93+ E21A 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  93+ E21D F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  93+ E21F F6 0B       >                            or      %0001011
  93+ E221 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  93+ E224 ED 79       >                            out 	(c),a
  93+ E226 3E 03       >                            ld      a,3						; set a to 0
  93+ E228 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  94+ E22B 3E E3                                ld 	a,COLOUR_TRANSPARENT
  95+ E22D CD 5D E1                             call l2_cls_dma_bank
  96+ E230                                      asm_l2_bank_4_macro
  96+ E230 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  96+ E233 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  96+ E235 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  96+ E238 ED 79       >                            out 	(c),a
  96+ E23A 3E 04       >                            ld      a,4						; set a to 0
  96+ E23C 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  97+ E23F 3E E3                                ld 	a,COLOUR_TRANSPARENT
  98+ E241 CD 5D E1                             call l2_cls_dma_bank
  99+ E244
 100+ E244 C9                                   ret
 101+ E245
# file closed: ./Layer2Graphics/layer2_cls.asm
 804  E245                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E245
   2+ E245 ED 91 70 00  l2_initialise:          nextreg     LAYER_2_CONTROL_REGISTER,           %00000000               ; 256x192x8bpp
   3+ E249 ED 91 12 08                          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   4+ E24D ED 91 13 0D                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   5+ E251 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   6+ E255                                      ZeroA
   6+ E255 AF          >                        xor a
   7+ E256                                      DoubleBufferIfPossible
   7+ E256             >                        IFDEF DOUBLEBUFFER
   7+ E256             >                            MMUSelectLayer2
   7+ E256 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7+ E25A CD 0E E2    >                            call  l2_cls
   7+ E25D CD 97 E2    >                            call  l2_flip_buffers
   7+ E260             >                        ENDIF
   8+ E260                                      DoubleBufferIfPossible
   8+ E260             >                        IFDEF DOUBLEBUFFER
   8+ E260             >                            MMUSelectLayer2
   8+ E260 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   8+ E264 CD 0E E2    >                            call  l2_cls
   8+ E267 CD 97 E2    >                            call  l2_flip_buffers
   8+ E26A             >                        ENDIF
   9+ E26A CD 68 E0                             call        asm_l2_row_bank_select
  10+ E26D C9                                   ret
  11+ E26E
  12+ E26E ED 91 70 10  l2_320_initialise:      nextreg     LAYER_2_CONTROL_REGISTER,           %00010000               ; 320x256x8bpp
  13+ E272 ED 91 12 08                          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
  14+ E276 ED 91 13 0D                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
  15+ E27A ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
  16+ E27E                                      ZeroA
  16+ E27E AF          >                        xor a
  17+ E27F                                      DoubleBuffer320IfPossible
  17+ E27F             >                        IFDEF DOUBLEBUFFER
  17+ E27F             >                            MMUSelectLayer2
  17+ E27F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  17+ E283 CD 14 E2    >                            call  l2_320_cls
  17+ E286 CD 97 E2    >                            call  l2_flip_buffers
  17+ E289             >                        ENDIF
  18+ E289                                      DoubleBuffer320IfPossible
  18+ E289             >                        IFDEF DOUBLEBUFFER
  18+ E289             >                            MMUSelectLayer2
  18+ E289 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  18+ E28D CD 14 E2    >                            call  l2_320_cls
  18+ E290 CD 97 E2    >                            call  l2_flip_buffers
  18+ E293             >                        ENDIF
  19+ E293 CD C2 E0                             call        asm_l2_320_col_bank_select
  20+ E296 C9                                   ret
  21+ E297
  22+ E297              ;l2_640_initialise:      nextreg     LAYER_2_CONTROL_REGISTER,           %00100000               ; 320x256x8bpp
  23+ E297              ;                        nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
  24+ E297              ;                        nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
  25+ E297              ;                        nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
  26+ E297              ;                        ZeroA
  27+ E297              ;                        DoubleBuffer640IfPossible
  28+ E297              ;                        DoubleBuffer640IfPossible
  29+ E297              ;                        call        asm_l2_640_col_bank_select
  30+ E297              ;                        ret
  31+ E297
# file closed: ./Layer2Graphics/layer2_initialise.asm
 805  E297                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E297              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E297 C5          >            push bc
   1+ E298 01 3B 24    >                ld bc,$243B
   1+ E29B 3E 12       >                    ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E29D ED 79       >                    out (c),a
   1+ E29F 04          >                    inc b
   1+ E2A0 ED 78       >                in a,(c)
   1+ E2A2 C1          >            pop bc
   2+ E2A3 57                                   ld      d,a
   3+ E2A4                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E2A4 C5          >            push bc
   3+ E2A5 01 3B 24    >                ld bc,$243B
   3+ E2A8 3E 13       >                    ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E2AA ED 79       >                    out (c),a
   3+ E2AC 04          >                    inc b
   3+ E2AD ED 78       >                in a,(c)
   3+ E2AF C1          >            pop bc
   4+ E2B0 5F                                   ld      e,a
   5+ E2B1 ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E2B4 7A                                   ld      a,d
   7+ E2B5 ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E2B8 C9                                   ret
   9+ E2B9
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
 806  E2B9                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E2B9              l2_plot_macro:          MACRO
   2+ E2B9 ~                                    ld      a,b
   3+ E2B9 ~                                    JumpIfAGTENusng 192 ,.NoPlot
   4+ E2B9 ~                                    ld      l,c
   5+ E2B9 ~                                    call    asm_l2_row_bank_select
   6+ E2B9 ~                                    ld      h,a
   7+ E2B9 ~                                    ld      a,(line_gfx_colour)
   8+ E2B9 ~                                    ld      (hl),a
   9+ E2B9 ~            .NoPlot:
  10+ E2B9                                      ENDM
  11+ E2B9
  12+ E2B9
  13+ E2B9              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
  14+ E2B9 F5           l2_plot_pixel:          push    af
  15+ E2BA 78                                   ld      a,b
  16+ E2BB              l2_pp_row_valid:        JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
  16+ E2BB FE C0       >                        cp     ScreenHeight
  16+ E2BD D2 CB E2    >                        jp		nc,l2_pp_dont_plot
  17+ E2C0 C5                                   push    bc								; bank select destroys bc so need to save it
  18+ E2C1                                  ;	ld      a,b
  19+ E2C1 CD 68 E0                             call    asm_l2_row_bank_select
  20+ E2C4 C1                                   pop     bc
  21+ E2C5 47                                   ld      b,a
  22+ E2C6 60                                   ld      h,b								; hl now holds ram address after bank select
  23+ E2C7 69                                   ld      l,c
  24+ E2C8 F1                                   pop     af								; a = colour to plott
  25+ E2C9 77                                   ld      (hl),a
  26+ E2CA C9                                   ret
  27+ E2CB F1           l2_pp_dont_plot:        pop     af
  28+ E2CC C9                                   ret
  29+ E2CD
  30+ E2CD              ; ">l2_plot_pixel d= row number, hl = column number, e = pixel col"
  31+ E2CD 7C           l2_plot_pixel_320:      ld      a,h
  32+ E2CE FE 01                                cp      1                               ; if < 256, definite OK
  33+ E2D0 20 05                                jr      nz,.DoneCheck
  34+ E2D2 7D                                   ld      a,l
  35+ E2D3 E6 C0                                and     %11000000                       ; if its 7 or 6 set then > 319
  36+ E2D5 20 06                                jr      nz,.DontPlot
  37+ E2D7 CD C2 E0     .DoneCheck:             call    asm_l2_320_col_bank_select      ; adjust hl for column > h
  38+ E2DA 6A                                   ld      l,d                             ; as they are horizontal now
  39+ E2DB 7B                                   ld      a,e
  40+ E2DC 77                                   ld      (hl),a
  41+ E2DD C9           .DontPlot:              ret
  42+ E2DE
  43+ E2DE CD C2 E0     l2_plot_pixel_320_no_check:   call    asm_l2_320_col_bank_select      ; adjust hl for column > h
  44+ E2E1 6A                                   ld      l,d                             ; as they are horizontal now
  45+ E2E2 7B                                   ld      a,e
  46+ E2E3 77                                   ld      (hl),a
  47+ E2E4 C9                                   ret
  48+ E2E5
  49+ E2E5              ; y aixs bounds check must have been done before calling this
  50+ E2E5 F5           l2_plot_pixel_no_check: push    af
  51+ E2E6 C5                                   push    bc								; bank select destroys bc so need to save it
  52+ E2E7 78                                   ld      a,b                             ; determine target bank
  53+ E2E8 CD 68 E0                             call    asm_l2_row_bank_select
  54+ E2EB C1                                   pop     bc
  55+ E2EC 47                                   ld      b,a                             ; b now adjusted for bank, c = column
  56+ E2ED 60 69                                ld      hl,bc                           ; hl now holds ram address after bank select
  57+ E2EF F1                                   pop     af								; a = colour to plott
  58+ E2F0 77                                   ld      (hl),a                          ; poke to ram
  59+ E2F1 C9                                   ret
  60+ E2F2
  61+ E2F2              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  62+ E2F2              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  63+ E2F2 E5           l2_plot_pixel_no_bank:  push 	hl
  64+ E2F3 60                                   ld 		h,b								; hl now holds ram address after bank select
  65+ E2F4 69                                   ld 		l,c
  66+ E2F5 77                                   ld 		(hl),a
  67+ E2F6 E1                                   pop		hl
  68+ E2F7 C9                                   ret
  69+ E2F8
  70+ E2F8              ; ">l2_plot_pixel_no_bank d= row number, h = column number, a = pixel col"
  71+ E2F8              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  72+ E2F8              l2_plot_pixel_320_no_bank:
  73+ E2F8 6A                                   ld 		l,d
  74+ E2F9 77                                   ld 		(hl),a
  75+ E2FA C9                                   ret
  76+ E2FB              ; The more simpler h col l row is just ld (hl),a so no need for a function
  77+ E2FB
  78+ E2FB
  79+ E2FB F5           ShipPixel:              push    af
  80+ E2FC 78                                   ld      a,b
  81+ E2FD FE 7F                                cp      127
  82+ E2FF D0                                   ret     nc
  83+ E300 F1                                   pop     af
  84+ E301 18 E2                                jr      l2_plot_pixel_no_check
  85+ E303                                      ;***Implicit ret due to jr
  86+ E303
  87+ E303              ; in bc = yx iyl = colour
  88+ E303 78           DebrisPixel:            ld      a,b
  89+ E304 FE 7F                                cp      127
  90+ E306 D0                                   ret     nc
  91+ E307 FD 7D                                ld      a, iyl
  92+ E309 18 DA                                jr      l2_plot_pixel_no_check
  93+ E30B                                      ;***Implicit ret due to jr
  94+ E30B
  95+ E30B F5           l2_plot_pixel_y_test:   push	af
  96+ E30C 78                                   ld		a,b
  97+ E30D FE C0                                cp		192
  98+ E30F 30 03                                jr		nc,.clearup
  99+ E311 F1                                   pop		af
 100+ E312 18 A5                                jr		l2_plot_pixel
 101+ E314 F1           .clearup:               pop		af
 102+ E315 C9                                   ret
 103+ E316
 104+ E316              l2_point_pixel_y_safe:	MACRO
 105+ E316 ~            						push	hl
 106+ E316 ~            						push	bc
 107+ E316 ~            						call	l2_plot_pixel
 108+ E316 ~            						pop		bc
 109+ E316 ~            						pop		hl
 110+ E316              						ENDM
 111+ E316
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
 807  E316                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E316
   2+ E316              l2_print_chr_at:
   3+ E316              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E316              ; "Need a version that also prints absence of character"
   5+ E316 7A           	ld		a,d
   6+ E317 FE 20        	cp		32
   7+ E319 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E31B FE 7F        	cp		127
   9+ E31D 30 3B        	jr		nc,.InvalidCharacter
  10+ E31F              .ValidCharater:
  11+ E31F 26 00        	ld		h,0
  12+ E321 6A           	ld		l,d
  13+ E322 29           	add		hl,hl						; * 2
  14+ E323 29           	add		hl,hl						; * 4
  15+ E324 29           	add		hl,hl						; * 8 to get byte address
  16+ E325 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E329 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E32A 23           	inc		hl							; skip first byte
  19+ E32B 16 07        	ld		d,7
  20+ E32D              .PrintCharLoop:
  21+ E32D D5           	push	de
  22+ E32E 7E           	ld		a,(hl)
  23+ E32F FE 00        	cp		0
  24+ E331 28 21        	jr		z,.NextRowNoBCPop
  25+ E333              .PrintARow:
  26+ E333 C5           	push	bc							; save row col
  27+ E334 16 07        	ld		d,7							; d is loop row number now
  28+ E336              .PrintPixelLoop:
  29+ E336 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E337              .PrintTheRow:
  31+ E337 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E339 F5           	push	af							; save character byte
  33+ E33A CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E33C 20 04        	jr		nz,.PixelToPrint
  35+ E33E              .NoPixelToPrint:
  36+ E33E 3E E3        	ld		a,$E3
  37+ E340 18 01        	jr		.HaveSetPixelColour
  38+ E342              .PixelToPrint:
  39+ E342 7B           	ld		a,e							; Get Colour
  40+ E343              .HaveSetPixelColour
  41+ E343 E5           	push	hl
  42+ E344              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E344              .BankOnFirstOnly:
  44+ E344 F5           	push	af
  45+ E345 7A           	ld		a,d
  46+ E346 FE 07        	cp		7
  47+ E348 28 11        	jr		z,.PlotWithBank
  48+ E34A              .PlotNoBank:
  49+ E34A F1           	pop		af
  50+ E34B 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E34C 69           	ld 		l,c
  52+ E34D 77           	ld 		(hl),a
  53+ E34E              .IterateLoop:
  54+ E34E              ;	pop		bc
  55+ E34E E1           	pop		hl
  56+ E34F F1           	pop		af							; a= current byte shifted
  57+ E350 15           	dec		d						 	; do dec after inc as we amy
  58+ E351 20 E3        	jr		nz,.PrintPixelLoop
  59+ E353              .NextRow:
  60+ E353 C1           	pop		bc							; Current Col Row
  61+ E354              .NextRowNoBCPop:
  62+ E354 D1           	pop		de							; d= row loop
  63+ E355 04           	inc		b							; Down 1 row
  64+ E356 23           	inc		hl							; Next character byte
  65+ E357 15           	dec		d							; 1 done now
  66+ E358 20 D3        	jr		nz,.PrintCharLoop
  67+ E35A              .InvalidCharacter:
  68+ E35A C9           	ret
  69+ E35B              .PlotWithBank:
  70+ E35B F1           	pop		af
  71+ E35C CD B9 E2     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E35F 18 ED        	jr		.IterateLoop
  73+ E361
  74+ E361              l2_print_at:
  75+ E361              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E361              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E361 7E           	ld	a,(hl)							; Return if empty string
  78+ E362 FE 00        	cp	0
  79+ E364 C8           	ret	z
  80+ E365 E5           	push	hl
  81+ E366 D5           	push	de
  82+ E367 C5           	push	bc
  83+ E368 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E369 CD 16 E3     	call 	l2_print_chr_at
  85+ E36C C1           	pop		bc
  86+ E36D D1           	pop		de
  87+ E36E E1           	pop		hl
  88+ E36F              .Move8Pixlestoright:
  89+ E36F 08           	ex		af,af'
  90+ E370 79           	ld		a,c
  91+ E371 C6 08        	add		8
  92+ E373 4F           	ld		c,a
  93+ E374 08           	ex		af,af'
  94+ E375 23           	inc		hl
  95+ E376 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E378
  97+ E378
  98+ E378              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E378              ; "Need a version that also prints absence of character"
 100+ E378              ; removed blank line optimisation as we need spaces printed
 101+ E378 7A           l2_print_7chr_at:       ld		a,d
 102+ E379 FE 1F                                cp		31
 103+ E37B 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E37D FE 7F                                cp		127
 105+ E37F 30 39                                jr		nc,.InvalidCharacter
 106+ E381 26 00        .ValidCharater:         ld		h,0
 107+ E383 6A                                   ld		l,d
 108+ E384 29                                   add		hl,hl						; * 2
 109+ E385 29                                   add		hl,hl						; * 4
 110+ E386 29                                   add		hl,hl						; * 8 to get byte address
 111+ E387 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E38B 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E38C 23                                   inc		hl							; skip first byte
 114+ E38D 16 07                                ld		d,7
 115+ E38F D5           .PrintCharLoop:         push	de
 116+ E390 7E                                   ld		a,(hl)
 117+ E391                                      ;cp		0
 118+ E391                                      ;jr		z,.NextRowNoBCPop
 119+ E391 C5           .PrintARow:             push	bc							; save row col
 120+ E392 16 06                                ld		d,6							; d is loop row number now
 121+ E394 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E395 28 1C                                jr		z,.NextRow
 123+ E397 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E399 F5                                   push	af							; save character byte
 125+ E39A CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E39C 20 04                                jr		nz,.PixelToPrint
 127+ E39E 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E3A0 18 01                                jr		.HaveSetPixelColour
 129+ E3A2 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E3A3 E5           .HaveSetPixelColour		push	hl
 131+ E3A4                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E3A4 F5           .BankOnFirstOnly:       push	af
 133+ E3A5 7A                                   ld		a,d
 134+ E3A6 FE 06                                cp		6
 135+ E3A8 28 11                                jr		z,.PlotWithBank
 136+ E3AA F1           .PlotNoBank:            pop		af
 137+ E3AB 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E3AC 69                                   ld 		l,c
 139+ E3AD 77                                   ld 		(hl),a
 140+ E3AE              .IterateLoop:	        ;	pop		bc
 141+ E3AE E1                                   pop		hl
 142+ E3AF F1                                   pop		af							; a= current byte shifted
 143+ E3B0 15                                   dec		d						 	; do dec after inc as we amy
 144+ E3B1 20 E1                                jr		nz,.PrintPixelLoop
 145+ E3B3 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E3B4 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E3B5 04                                   inc		b							; Down 1 row
 148+ E3B6 23                                   inc		hl							; Next character byte
 149+ E3B7 15                                   dec		d							; 1 done now
 150+ E3B8 20 D5                                jr		nz,.PrintCharLoop
 151+ E3BA C9           .InvalidCharacter:      ret
 152+ E3BB F1           .PlotWithBank:          pop		af
 153+ E3BC CD B9 E2                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E3BF 18 ED                                jr		.IterateLoop
 155+ E3C1
 156+ E3C1              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E3C1              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E3C1 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E3C2 FE 00                                cp	0
 160+ E3C4 C8                                   ret	z
 161+ E3C5 E5                                   push	hl
 162+ E3C6 D5                                   push	de
 163+ E3C7 C5                                   push	bc
 164+ E3C8 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E3C9 CD 78 E3                             call 	l2_print_7chr_at
 166+ E3CC C1                                   pop		bc
 167+ E3CD D1                                   pop		de
 168+ E3CE E1                                   pop		hl
 169+ E3CF 08           .Move7Pixlestoright:	ex		af,af'
 170+ E3D0 79                                   ld		a,c
 171+ E3D1 C6 07                                add		7
 172+ E3D3 4F                                   ld		c,a
 173+ E3D4 08                                   ex		af,af'
 174+ E3D5 23                                   inc		hl
 175+ E3D6 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E3D8
 177+ E3D8
 178+ E3D8              ; "l2_print_7at b= row, hl = col de = addr of message, c = colour"
 179+ E3D8              ; "No error trapping, if there is no null is will just cycle on the line"
 180+ E3D8
 181+ E3D8 1A           l2_print_7at_320:       ld	a,(de)							; Return if empty string
 182+ E3D9 FE 00                                cp	0
 183+ E3DB C8                                   ret	z
 184+ E3DC E5 D5 C5                             push	hl,,de,,bc
 185+ E3DF 57                                   ld		d,a							; bc = pos, de = char and colour
 186+ E3E0                                      ;TODOcallcall 	l2_print_7chr_at_320
 187+ E3E0 C1 D1 E1                             pop		hl,,de,,bc
 188+ E3E3 08           .Move7Pixlestoright:	ex		af,af'
 189+ E3E4 79                                   ld		a,c
 190+ E3E5 C6 07                                add		7
 191+ E3E7 4F                                   ld		c,a
 192+ E3E8 08                                   ex		af,af'
 193+ E3E9 23                                   inc		hl
 194+ E3EA 18 EC                                jr		l2_print_7at_320		    ; Just loop until 0 found
 195+ E3EC
 196+ E3EC
# file closed: ./Layer2Graphics/layer2_print_character.asm
 808  E3EC                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E3EC              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E3EC              ; TODO DMA Optimise
   3+ E3EC C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E3EF 53                                   ld      d,e
   5+ E3F0 5C                                   ld      e,h
   6+ E3F1 CD 87 E4                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E3F4 E1 D1 C1                             pop     bc,,de,,hl
   8+ E3F7 04                                   inc     b
   9+ E3F8 15                                   dec     d
  10+ E3F9 C8                                   ret     z
  11+ E3FA 18 F0                                jr      l2_draw_fill_box
  12+ E3FC
  13+ E3FC              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E3FC C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E3FF 53                                   ld		d,e
  16+ E400 5F                                   ld		e,a
  17+ E401 14                                   inc		d
  18+ E402 CD 87 E4                             call	l2_draw_horz_line
  19+ E405 F1 D1 C1                             pop		bc,,de,,af
  20+ E408 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E40B 67                                   ld		h,a							;save color whilst b = row + height
  22+ E40C 78                                   ld		a,b
  23+ E40D 82                                   add		a,d
  24+ E40E 47                                   ld		b,a
  25+ E40F 53                                   ld		d,e							; d = width
  26+ E410 14                                   inc		d							; Extra pixel for width
  27+ E411 5C                                   ld		e,h							; e = colour
  28+ E412 CD 87 E4                             call	l2_draw_horz_line
  29+ E415 F1 D1 C1                             pop		bc,,de,,af
  30+ E418 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E41B 04                                   inc		b							; save 2 pixles
  32+ E41C 15                                   dec		d
  33+ E41D 5F                                   ld		e,a							; e = color
  34+ E41E CD F3 E4                             call	l2_draw_vert_line
  35+ E421 F1 D1 C1                             pop		bc,,de,,af
  36+ E424 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E425 15                                   dec		d
  38+ E426 67                                   ld		h,a							;save color whilst c = col + width
  39+ E427 79                                   ld		a,c
  40+ E428 83                                   add		a,e
  41+ E429 4F                                   ld		c,a
  42+ E42A 5C                                   ld		e,h							; e = color
  43+ E42B CD F3 E4                             call	l2_draw_vert_line
  44+ E42E C9                                   ret
  45+ E42F
  46+ E42F              ; "b = row, hl = col, c = height, de = width, a = colour"
  47+ E42F C5 D5 E5 F5  l2_draw_box_320:        push    bc,,de,,hl,,af
  48+ E433                                      ;TODOcall    l2_draw_horz_line_320       ; b = row, hl = col, e = width a = colour
  49+ E433 F1 E1 D1 C1                          pop     bc,,de,,hl,,af
  50+ E437 C5 D5 E5 F5                          push    bc,,de,,hl,,af
  51+ E43B 08                                   ex      af,af'
  52+ E43C 78                                   ld      a,b
  53+ E43D 3D                                   dec     a
  54+ E43E 81                                   add     a,c
  55+ E43F 41                                   ld      b,c
  56+ E440 08                                   ex      af,af'
  57+ E441                                      ;TODOcall    l2_draw_horz_line_320       ; b = row, hl = col, e = width a = colour
  58+ E441 F1 E1 D1 C1  .leftVertLine:          pop     bc,,de,,hl,,af
  59+ E445 C5 D5 E5 F5                          push    bc,,de,,hl,,af
  60+ E449                                      ;TODOcall    l2_draw_vert_line_320
  61+ E449 F1 E1 D1 C1                          pop     bc,,de,,hl,,af
  62+ E44D 19                                   add     hl,de
  63+ E44E 2B                                   dec     hl
  64+ E44F                                      ;TODOcall    l2_draw_vert_line_320
  65+ E44F C9                                   ret
  66+ E450
# file closed: ./Layer2Graphics/layer2_draw_box.asm
 809  E450                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E450
   2+ E450              ;; NOTE DMA is little endian
   3+ E450 00           l2_horz_pixel           DB 0
   4+ E451
   5+ E451 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E455 7D
   6+ E456 50 E4        l2_horz_colr            DW l2_horz_pixel
   7+ E458 00           l2_horz_lenlo           DB 0
   8+ E459 00           l2_horz_lenhi           DB 0
   9+ E45A 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E45D 00 00        l2_horz_target          DB $00, $00
  11+ E45F CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E461              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E461
  14+ E461
  15+ E461              ; "l2_draw_horz_dma"
  16+ E461              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E461 7B           l2_draw_horz_dma:       ld		a,e                                               ; T=4      ;
  18+ E462 32 50 E4                             ld		(l2_horz_pixel),a                                 ; T=13     ;
  19+ E465 5A                                   ld      e,d ; saved 3 t states ld		a,d                                               ; T=4      ; e=d   4
  20+ E466 16 00                                ld      d,0; saved 3 t states ld 		(l2_horz_lenlo),a                                 ; T=13     ; d = 0  7
  21+ E468 ED 53 58 E4                          ld      (l2_horz_lenlo),de; saved 3 t states xor 	a                                                 ; T=4      ; t 20  31
  22+ E46C                                      ; saved 3 t states ld ld 		(l2_horz_lenhi),a                                 ; T=13     ;
  23+ E46C                                    ; saved 4 t states  ld		h,b                           ;          ;
  24+ E46C                                    ; saved 4 t states  ld		l,c                           ;          ;
  25+ E46C ED 43 5D E4                          ld      (l2_horz_target),bc ; saved 4 t states  was , hl  ; T=20     ;
  26+ E470 21 51 E4     .write_dma:             ld 		hl, l2_horz_line                                  ;          ;
  27+ E473 06 10                                ld 		b, l2_horz_cmd_len                                ;
  28+ E475 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  29+ E477 ED B3                                otir                                                      ;
  30+ E479 C9                                   ret
  31+ E47A
  32+ E47A              ; "bc = left side row,col, d = length, e = color"
  33+ E47A D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E47B C5                                   push 	bc							; save row col
  35+ E47C 78                                   ld   	a,b
  36+ E47D CD 68 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E480 C1                                   pop  	bc
  38+ E481 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E482 D1                                   pop  	de							; get length back
  40+ E483 CD 61 E4                             call    l2_draw_horz_dma
  41+ E486 C9                                   ret
  42+ E487
  43+ E487              ; "l2_draw_horz_line"
  44+ E487              ; "bc = left side row,col, d = length, e = color"
  45+ E487              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E487 7A           l2_draw_horz_line:      ld		a,d
  47+ E488 FE 00                                cp 		0							; if its zero length then just return
  48+ E48A C8           .zerolengthexit:        ret		z
  49+ E48B FE 01        .isitlen1:              cp 		1
  50+ E48D CA AF E4                             jp 		z,.l2_draw_horz_line_1
  51+ E490 FE 0A        .longenoughtfordma:     cp  10
  52+ E492 C3 7A E4                             jp  l2_draw_horz_dma_bank
  53+ E495 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E497 78                                   ld   	a,b
  55+ E498 CD 68 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E49B C1                                   pop  	bc
  57+ E49C 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E49D 69                                   ld   	l,c
  59+ E49E D1                                   pop  	de							; get length back
  60+ E49F 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E4A0 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E4A1 82                                   add  	a,d
  63+ E4A2 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E4A4 3E FF        .clipat255:             ld   	a,$FF
  65+ E4A6 91                                   sub  	c							; a holds clipped length
  66+ E4A7 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E4A8 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E4AA 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E4AB 23                                   inc hl
  70+ E4AC 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E4AE C9                                   ret
  72+ E4AF 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E4B0                                      l2_plot_macro; jp		l2_plot_pixel				; hijack return
  73+ E4B0 78          >                        ld      a,b
  73+ E4B1             >                        JumpIfAGTENusng 192 ,.NoPlot
  73+ E4B1 FE C0       >                        cp     192
  73+ E4B3 D2 BF E4    >                        jp		nc,.NoPlot
  73+ E4B6 69          >                        ld      l,c
  73+ E4B7 CD 68 E0    >                        call    asm_l2_row_bank_select
  73+ E4BA 67          >                        ld      h,a
  73+ E4BB 3A 03 ED    >                        ld      a,(line_gfx_colour)
  73+ E4BE 77          >                        ld      (hl),a
  73+ E4BF             >.NoPlot:
  74+ E4BF C9                                   ret
  75+ E4C0
  76+ E4C0
  77+ E4C0              ; "l2_draw_horz_line_to"
  78+ E4C0              ; "bc = left side row,col, d right pixel, e = color"
  79+ E4C0 F3           l2_draw_horz_line_to:   di
  80+ E4C1 7A                                   ld 		a,d
  81+ E4C2 B9                                   cp 		c
  82+ E4C3 30 04                                jr		nc, .noswap
  83+ E4C5 28 07                                jr      z, .singlepixel
  84+ E4C7 51           .swap:                  ld		d,c
  85+ E4C8 4F                                   ld		c,a
  86+ E4C9 7A           .noswap:                ld		a,d
  87+ E4CA 91                                   sub		c
  88+ E4CB              ;                        dec		a							; so now its length not offset
  89+ E4CB 57                                   ld		d,a
  90+ E4CC 18 B9                                jr 		l2_draw_horz_line			; hijack routine and return statements
  91+ E4CE 7B           .singlepixel:           ld		a,e
  92+ E4CF                                      l2_plot_macro; jp		l2_plot_pixel				; hijack return
  92+ E4CF 78          >                        ld      a,b
  92+ E4D0             >                        JumpIfAGTENusng 192 ,.NoPlot
  92+ E4D0 FE C0       >                        cp     192
  92+ E4D2 D2 DE E4    >                        jp		nc,.NoPlot
  92+ E4D5 69          >                        ld      l,c
  92+ E4D6 CD 68 E0    >                        call    asm_l2_row_bank_select
  92+ E4D9 67          >                        ld      h,a
  92+ E4DA 3A 03 ED    >                        ld      a,(line_gfx_colour)
  92+ E4DD 77          >                        ld      (hl),a
  92+ E4DE             >.NoPlot:
  93+ E4DE C9                                   ret
  94+ E4DF
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
 810  E4DF                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E4DF              ; ">l2_draw_vert_segment"
   2+ E4DF              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E4DF              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E4DF 7A           l2_draw_vert_segment:   ld		a,d
   5+ E4E0 FE 00        .emptylinecheck:	    cp 		0
   6+ E4E2 C8                                   ret		z
   7+ E4E3 FE 01        .justonepixel	        cp		1
   8+ E4E5 20 02                                jr		nz, .multiplepixelsLoop
   9+ E4E7 73                                   ld		(hl),e
  10+ E4E8 C9                                   ret
  11+ E4E9              .multiplepixelsLoop:
  12+ E4E9 7C           .endofbankcheck:        ld   	a,h
  13+ E4EA FE 40                                cp   	64
  14+ E4EC D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E4ED 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E4EE 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E4EF 15                                   dec		d
  18+ E4F0 C8                                   ret		z
  19+ E4F1 18 F6                                jr		.multiplepixelsLoop
  20+ E4F3
  21+ E4F3              ; ">l2_draw_vert_line"
  22+ E4F3              ; ">bc = row col d = length, e = color"
  23+ E4F3 78           l2_draw_vert_line:      ld 		a,b
  24+ E4F4 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E4F6 D0                                   ret 	nc							; can't start off the screen
  26+ E4F7 7A           .emptylinecheck:        ld		a,d
  27+ E4F8 FE 00                                cp		0
  28+ E4FA C8                                   ret		z
  29+ E4FB FE 01                                cp		1
  30+ E4FD 20 10                                jr		nz,.multiplepixels
  31+ E4FF              .itsonepixel:           l2_plot_macro; call	l2_plot_pixel
  31+ E4FF 78          >                        ld      a,b
  31+ E500             >                        JumpIfAGTENusng 192 ,.NoPlot
  31+ E500 FE C0       >                        cp     192
  31+ E502 D2 0E E5    >                        jp		nc,.NoPlot
  31+ E505 69          >                        ld      l,c
  31+ E506 CD 68 E0    >                        call    asm_l2_row_bank_select
  31+ E509 67          >                        ld      h,a
  31+ E50A 3A 03 ED    >                        ld      a,(line_gfx_colour)
  31+ E50D 77          >                        ld      (hl),a
  31+ E50E             >.NoPlot:
  32+ E50E C9                                   ret
  33+ E50F              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E50F 7A           .clipto192:             ld		a,d							; get length
  35+ E510 80                                   add		a,b							; a= row + length
  36+ E511 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E513 FE C0                                cp		SCREEN_HEIGHT
  38+ E515 38 08                                jr		c, .noclipneeded
  39+ E517 78           .needtoclip             ld		a,b
  40+ E518 82                                   add		a,d
  41+ E519 D6 C0                                sub		SCREEN_HEIGHT
  42+ E51B 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E51C 7A                                   ld		a,d
  44+ E51D 94                                   sub		h
  45+ E51E 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E51F              ; so now BC = row col, d = length clipped, e = color
  47+ E51F 78           .noclipneeded:          ld		a,b
  48+ E520 C5 D5                                push	bc,,de
  49+ E522 CD 68 E0                             call 	asm_l2_row_bank_select
  49+ E525               	 	; we now have poke address and a variable holding current bank number
  50+ E525 D1 C1                                pop		bc,,de
  51+ E527 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E528 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E529 CD DF E4                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E52C 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E52D FE 00                                cp		0
  56+ E52F 28 27                                jr		z, .doneplotting
  57+ E531 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E534 3C                                   inc		a
  59+ E535 06 00                                ld		b,0
  60+ E537 C5 D5                                push	bc,,de
  61+ E539 CD 51 E0                             call 	asm_l2_bank_n_select
  62+ E53C D1 C1                                pop     bc,,de
  63+ E53E 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E53F 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E540 CD DF E4                             call	l2_draw_vert_segment
  66+ E543 7A                                   ld		a,d
  67+ E544 FE 00                                cp		0
  68+ E546 28 10                                jr		z,.doneplotting
  69+ E548 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E54B 3C                                   inc		a
  71+ E54C 06 00                                ld		b,0
  72+ E54E C5 D5                                push	bc,,de
  73+ E550 CD 51 E0                             call 	asm_l2_bank_n_select
  74+ E553 D1                                   pop		de
  75+ E554 E1                                   pop		hl							; hl = bc
  76+ E555 CD DF E4                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E558 C9           .doneplotting:	        ret
  78+ E559
  79+ E559              ; ">l2_draw_vert_line_to"
  80+ E559              ; ">bc = row col d = to position, e = color"
  81+ E559 78           l2_draw_vert_line_to:   ld		a,b
  82+ E55A BA                                   cp		d
  83+ E55B 38 02                                jr		c, .noyswap
  84+ E55D 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E55E 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E55F 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E560 90                                   sub		b
  88+ E561 3C                                   inc		a			; so now its length not offset
  89+ E562 57                                   ld		d,a
  90+ E563 18 8E                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E565                                      ; no return needed
  92+ E565
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
 811  E565                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E565
   2+ E565              l2_draw_box_to:
   3+ E565              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E565              ; ">NOT IMPLEMENTED YET"
   5+ E565 C9           	ret
   6+ E566
   7+ E566              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E566              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E566              l2decbstep	EQU $05
  10+ E566              l2incbstep	EQU	$04
  11+ E566              l2deccstep	EQU $0D
  12+ E566              l2inccstep	EQU	$0C
  13+ E566              		; l2 deltas are signed
  14+ E566 00 00        l2deltaY	DW	0
  15+ E568 00 00        l2deltaX	DW	0
  16+ E56A 00           l2deltaYsq	db	0
  17+ E56B 00           l2deltaXsq	db	0
  18+ E56C 00           l2deltaYn	db	0
  19+ E56D 00           l2deltaXn	db	0
  20+ E56E 00           l2deltaYsqn	db	0
  21+ E56F 00           l2deltaXsqn	db	0
  22+ E570 00           l2linecolor	db	0
  23+ E571 00 00        l2fraction	dw	0
  24+ E573 00 00        l2e2		dw	0
  25+ E575 00           l2way		db	0
  26+ E576 00 00        l2targetPtr	dw	0
  27+ E578              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  28+ E578 00 00 00...  l2targetArray1 ds	256
  29+ E678 00 00 00...  l2targetArray2 ds	256
  30+ E778              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  31+ E778              ;;plotLine(int x0, int y0, int x1, int y1)
  32+ E778              ;;    dx =  abs(x1-x0);
  33+ E778              ;;    sx = x0<x1 ? 1 : -1;
  34+ E778              ;;    dy = -abs(y1-y0);
  35+ E778              ;;    sy = y0<y1 ? 1 : -1;
  36+ E778              ;;    err = dx+dy;  /* error value e_xy */
  37+ E778              ;;    while (true)   /* loop */
  38+ E778              ;;        plot(x0, y0);
  39+ E778              ;;        if (x0==x1 && y0==y1) break;
  40+ E778              ;;        e2 = 2*err;
  41+ E778              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  42+ E778              ;;            err += dy;
  43+ E778              ;;            x0 += sx;
  44+ E778              ;;        end if
  45+ E778              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  46+ E778              ;;            err += dx;
  47+ E778              ;;            y0 += sy;
  48+ E778              ;;        end if
  49+ E778              ;;    end while
  50+ E778              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  51+ E778              ; ">hl will be either l2targetArray1 or 2"
  52+ E778              ; NOTE IF WE INTERLEAVE THESE TWO TABLES WE COUDL READ BOTH X POS as a 16 bit read
  53+ E778 FE 01        l2_draw_diagonal_save:  cp		1
  54+ E77A 28 06                                jr		z,l2S_ItsArray1
  55+ E77C 21 78 E6                             ld		hl,l2targetArray2
  56+ E77F C3 85 E7                             jp		l2S_setTarget
  57+ E782 21 78 E5     l2S_ItsArray1:	        ld		hl,l2targetArray1
  58+ E785 22 76 E5     l2S_setTarget:	        ld		(l2targetPtr),hl
  59+ E788              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  60+ E788 32 70 E5                             ld		(l2linecolor),a					;save colour for later
  61+ E78B 21 00 00                             ld		hl,0                            ;
  62+ E78E 22 68 E5                             ld		(l2deltaX),hl                   ;
  63+ E791 22 66 E5                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
  64+ E794 78           l2S_preSort:            ld		a,b								;
  65+ E795                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
  65+ E795 BA          >                        cp      d
  65+ E796 DA 9E E7    >                        jp		c, l2S_noYSort
  66+ E799              l2S_SortBasedOnY:	    ldhlbc									;
  66+ E799 60          >                        ld		h,b
  66+ E79A 69          >                        ld		l,c
  67+ E79B EB                                   ex		de,hl                           ;
  68+ E79C                                      ldbchl									; swap over bc and de using hl as an intermediate
  68+ E79C 44          >                        ld		b,h
  68+ E79D 4D          >                        ld		c,l
  69+ E79E DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
  70+ E7A0 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
  71+ E7A2 79           l2S_setXLen:            ld		a,c                             ;
  72+ E7A3                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
  72+ E7A3 BB          >                        cp      e
  72+ E7A4 DA B0 E7    >                        jp		c, l2S_PosXLen
  73+ E7A7 79           l2S_NegXLen:            ld		a,c                             ;
  74+ E7A8 93                                   sub     e                               ;
  75+ E7A9 32 68 E5                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
  76+ E7AC 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
  77+ E7AE 18 07                                jr		l2S_XINCDEC
  78+ E7B0 7B           l2S_PosXLen:	        ld		a,e                             ;
  79+ E7B1 91                                   sub		c                               ;
  80+ E7B2 32 68 E5                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
  81+ E7B5 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
  82+ E7B7              l2S_XINCDEC:
  83+ E7B7 32 23 E8     	ld		(l2S_adjustCol),a				;
  84+ E7BA 32 53 E8     	ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
  85+ E7BD              l2S_setYLen
  86+ E7BD 7A           	ld		a,d							 	; presorted on Y so it is now always positive
  87+ E7BE 90           	sub		b
  88+ E7BF 32 66 E5     	ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
  89+ E7C2              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
  90+ E7C2              ldS_FracDYltDX:								;
  91+ E7C2 2A 66 E5     	ld		hl,(l2deltaY)					; Fraction = dY - dX
  92+ E7C5 ED 5B 68 E5  	ld		de,(l2deltaX)
  93+ E7C9              	ClearCarryFlag
  93+ E7C9 B7          >                        or a
  94+ E7CA ED 52        	sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
  95+ E7CC EB           	ex		de,hl
  96+ E7CD FD 62        	ld		iyh,d							; we will use IY reg for fractions
  97+ E7CF FD 6B        	ld		iyl,e
  98+ E7D1 F2 F6 E7     	jp		p,l2S_fracIsPositive
  99+ E7D4              l2S_fracIsNegative:
 100+ E7D4              	NegIY
 100+ E7D4 AF          >                    xor a
 100+ E7D5 FD 95       >                    sub iyl
 100+ E7D7 FD 6F       >                    ld iyl,a
 100+ E7D9 9F          >                    sbc a,a
 100+ E7DA FD 94       >                    sub iyh
 100+ E7DC FD 67       >                    ld iyh,a
 101+ E7DE              	ShiftIYRight1
 101+ E7DE FD 7C       >			   ld 	a,iyh
 101+ E7E0 CB 3F       >			   srl 	a
 101+ E7E2 FD 67       >			   ld	iyh,a
 101+ E7E4 FD 7D       >			   ld 	a,iyl
 101+ E7E6 1F          >			   rra
 101+ E7E7 FD 6F       >			   ld	iyl,a
 102+ E7E9              	NegIY
 102+ E7E9 AF          >                    xor a
 102+ E7EA FD 95       >                    sub iyl
 102+ E7EC FD 6F       >                    ld iyl,a
 102+ E7EE 9F          >                    sbc a,a
 102+ E7EF FD 94       >                    sub iyh
 102+ E7F1 FD 67       >                    ld iyh,a
 103+ E7F3 C3 01 E8     	jp		l2S_SkipCalcInc					; so we have a negative frac
 104+ E7F6              l2S_fracIsPositive:
 105+ E7F6              	ShiftIYRight1
 105+ E7F6 FD 7C       >			   ld 	a,iyh
 105+ E7F8 CB 3F       >			   srl 	a
 105+ E7FA FD 67       >			   ld	iyh,a
 105+ E7FC FD 7D       >			   ld 	a,iyl
 105+ E7FE 1F          >			   rra
 105+ E7FF FD 6F       >			   ld	iyl,a
 106+ E801              l2S_SkipCalcInc:
 107+ E801              l2S_Loop:									; As we loop, bc = to plot current XY
 108+ E801 2A 76 E5     	ld		hl,(l2targetPtr)				; Insert into respective array
 109+ E804 78           	ld		a,b
 110+ E805 ED 31        	add		hl,a
 111+ E807 71           	ld		(hl),c
 112+ E808              l2S_CheckIfEnd:
 113+ E808 DD 7C        	ld		a,ixh
 114+ E80A              	JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 114+ E80A B8          >                        cp     b
 114+ E80B D2 11 E8    >                        jp		nc,l2S_CheckXPos
 115+ E80E C3 15 E8     	jp		l2S_Continue
 116+ E811              l2S_CheckXPos:
 117+ E811 79           	ld		a,c
 118+ E812              	ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 118+ E812 DD BD       >                        cp    ixl
 118+ E814 D0          >                        ret	 nc
 119+ E815              l2S_Continue:
 120+ E815              l2S_HNegative:
 121+ E815 FD 7C        	ld		a,iyh
 122+ E817 CB 7F        	bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 123+ E819 28 0B        	jr		z,l2S_ErrNotNegative			;
 124+ E81B              l2S_ErrNegative:								; if its a negative error update X
 125+ E81B 3A 66 E5     	ld		a,(l2deltaY)
 126+ E81E 16 00        	ld		d,0
 127+ E820 5F           	ld		e,a
 128+ E821 FD 19        	add		iy,de							; add deltaY(unsinged) to l2fraction
 129+ E823              l2S_adjustCol:
 130+ E823 00           	nop										; this is our inc/dec of X
 131+ E824 18 DB        	jr		l2S_Loop							; repeat loop
 132+ E826              l2S_ErrNotNegative:
 133+ E826 FD 7C        	ld		a,iyh
 134+ E828 FD B5        	or		iyl
 135+ E82A              	JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 135+ E82A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ E82B CA 44 E8    >                        jp	    z, l2S_ErrZero
 136+ E82E              l2S_ErrPositive:								; if its a positive error then we update Y
 137+ E82E              	lddeiy
 137+ E82E FD 54       >                        ld		d,iyh
 137+ E830 FD 5D       >                        ld		e,iyl
 138+ E832 EB           	ex		de,hl
 139+ E833 16 00        	ld		d,0
 140+ E835 3A 68 E5     	ld		a,(l2deltaX)
 141+ E838 5F           	ld		e,a
 142+ E839              	ClearCarryFlag
 142+ E839 B7          >                        or a
 143+ E83A ED 52        	sbc		hl,de
 144+ E83C EB           	ex		de,hl
 145+ E83D              	ldiyde
 145+ E83D FD 62       >                        ld		iyh,d
 145+ E83F FD 6B       >                        ld		iyl,e
 146+ E841              l2S_adjustRow:									; move Y down by one
 147+ E841 04           	inc		b
 148+ E842 18 BD        	jr		l2S_Loop
 149+ E844              l2S_ErrZero:
 150+ E844 2A 68 E5     	ld		hl,(l2deltaX)
 151+ E847 EB           	ex		de,hl
 152+ E848 2A 66 E5     	ld		hl,(l2deltaY)
 153+ E84B              	ClearCarryFlag
 153+ E84B B7          >                        or a
 154+ E84C ED 52        	sbc		hl,de
 155+ E84E EB           	ex		de,hl
 156+ E84F              	ldiyde
 156+ E84F FD 62       >                        ld		iyh,d
 156+ E851 FD 6B       >                        ld		iyl,e
 157+ E853              l2S_adjustCol2:
 158+ E853 00           	nop										; update X and Y
 159+ E854 04           	inc		b
 160+ E855 18 AA        	jr		l2S_Loop
 161+ E857
 162+ E857              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 163+ E857 32 70 E5     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 164+ E85A 21 00 00                             ld		hl,0                            ;
 165+ E85D 22 68 E5                             ld		(l2deltaX),hl                   ;
 166+ E860 22 66 E5                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 167+ E863 78           l2D_preSort:            ld		a,b								;
 168+ E864                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if equal then verical line picked up earlier
 168+ E864 BA          >                        cp      d
 168+ E865 DA 6D E8    >                        jp		c, l2D_noYSort
 169+ E868              l2D_SortBasedOnY:	    ldhlbc									;
 169+ E868 60          >                        ld		h,b
 169+ E869 69          >                        ld		l,c
 170+ E86A EB                                   ex		de,hl                           ;
 171+ E86B                                      ldbchl									; swap over bc and de using hl as an intermediate
 171+ E86B 44          >                        ld		b,h
 171+ E86C 4D          >                        ld		c,l
 172+ E86D DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 173+ E86F DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 174+ E871 79           l2D_setXLen:            ld		a,c                             ;
 175+ E872                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 175+ E872 BB          >                        cp      e
 175+ E873 DA 7F E8    >                        jp		c, l2D_PosXLen
 176+ E876 79           l2D_NegXLen:            ld		a,c                             ;
 177+ E877 93                                   sub     e                               ;
 178+ E878 32 68 E5                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 179+ E87B 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 180+ E87D 18 07                                jr		l2D_XINCDEC
 181+ E87F 7B           l2D_PosXLen:	        ld		a,e                             ;
 182+ E880 91                                   sub		c                               ;
 183+ E881 32 68 E5                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 184+ E884 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 185+ E886 32 F5 E8     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 186+ E889 32 25 E9                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 187+ E88C 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 188+ E88D 90                                   sub		b
 189+ E88E 32 66 E5                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 190+ E891              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 191+ E891 2A 66 E5     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 192+ E894 ED 5B 68 E5                          ld		de,(l2deltaX)
 193+ E898                                      ClearCarryFlag
 193+ E898 B7          >                        or a
 194+ E899 ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 195+ E89B EB                                   ex		de,hl
 196+ E89C FD 62                                ld		iyh,d							; we will use IY reg for fractions
 197+ E89E FD 6B                                ld		iyl,e
 198+ E8A0 F2 C5 E8                             jp		p,l2D_fracIsPositive
 199+ E8A3              l2D_fracIsNegative:     NegIY
 199+ E8A3 AF          >                    xor a
 199+ E8A4 FD 95       >                    sub iyl
 199+ E8A6 FD 6F       >                    ld iyl,a
 199+ E8A8 9F          >                    sbc a,a
 199+ E8A9 FD 94       >                    sub iyh
 199+ E8AB FD 67       >                    ld iyh,a
 200+ E8AD                                      ShiftIYRight1
 200+ E8AD FD 7C       >			   ld 	a,iyh
 200+ E8AF CB 3F       >			   srl 	a
 200+ E8B1 FD 67       >			   ld	iyh,a
 200+ E8B3 FD 7D       >			   ld 	a,iyl
 200+ E8B5 1F          >			   rra
 200+ E8B6 FD 6F       >			   ld	iyl,a
 201+ E8B8                                      NegIY
 201+ E8B8 AF          >                    xor a
 201+ E8B9 FD 95       >                    sub iyl
 201+ E8BB FD 6F       >                    ld iyl,a
 201+ E8BD 9F          >                    sbc a,a
 201+ E8BE FD 94       >                    sub iyh
 201+ E8C0 FD 67       >                    ld iyh,a
 202+ E8C2 C3 D0 E8                             jp		l2D_SkipCalcInc					; so we have a negative frac
 203+ E8C5              l2D_fracIsPositive:     ShiftIYRight1
 203+ E8C5 FD 7C       >			   ld 	a,iyh
 203+ E8C7 CB 3F       >			   srl 	a
 203+ E8C9 FD 67       >			   ld	iyh,a
 203+ E8CB FD 7D       >			   ld 	a,iyl
 203+ E8CD 1F          >			   rra
 203+ E8CE FD 6F       >			   ld	iyl,a
 204+ E8D0              l2D_SkipCalcInc:
 205+ E8D0 C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 206+ E8D2 3A 70 E5                             ld		a,(l2linecolor)     			;
 207+ E8D5 CD B9 E2                             call	l2_plot_pixel       			; Plot Pixel
 208+ E8D8 D1 C1                                pop     bc,,de
 209+ E8DA DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 210+ E8DC                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 210+ E8DC B8          >                        cp     b
 210+ E8DD D2 E3 E8    >                        jp		nc,l2D_CheckXPos
 211+ E8E0 C3 E7 E8                             jp		l2D_Continue
 212+ E8E3 79           l2D_CheckXPos:          ld		a,c
 213+ E8E4                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 213+ E8E4 DD BD       >                        cp      ixl
 213+ E8E6 C8          >                        ret     z
 214+ E8E7              l2D_Continue:
 215+ E8E7 FD 7C        l2D_HNegative:			ld		a,iyh
 216+ E8E9 CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 217+ E8EB 28 0B                                jr		z,l2D_ErrNotNegative			;
 218+ E8ED 3A 66 E5     l2D_ErrNegative:		ld		a,(l2deltaY)
 219+ E8F0 16 00                                ld		d,0
 220+ E8F2 5F                                   ld		e,a
 221+ E8F3 FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 222+ E8F5 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 223+ E8F6 18 D8                                jr		l2D_Loop							; repeat loop
 224+ E8F8 FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 225+ E8FA FD B5                                or		iyl
 226+ E8FC                                      JumpIfAIsZero l2D_ErrZero					; if there is no error then goto zeroerror
 226+ E8FC A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 226+ E8FD CA 16 E9    >                        jp	    z, l2D_ErrZero
 227+ E900              l2D_ErrPositive:		lddeiy
 227+ E900 FD 54       >                        ld		d,iyh
 227+ E902 FD 5D       >                        ld		e,iyl
 228+ E904 EB                                   ex		de,hl
 229+ E905 16 00                                ld		d,0
 230+ E907 3A 68 E5                             ld		a,(l2deltaX)
 231+ E90A 5F                                   ld		e,a
 232+ E90B                                      ClearCarryFlag
 232+ E90B B7          >                        or a
 233+ E90C ED 52                                sbc		hl,de
 234+ E90E EB                                   ex		de,hl
 235+ E90F                                      ldiyde
 235+ E90F FD 62       >                        ld		iyh,d
 235+ E911 FD 6B       >                        ld		iyl,e
 236+ E913 04           l2D_adjustRow:			inc		b
 237+ E914 18 BA                                jr		l2D_Loop
 238+ E916 2A 68 E5     l2D_ErrZero:            ld		hl,(l2deltaX)
 239+ E919 EB                                   ex		de,hl
 240+ E91A 2A 66 E5                             ld		hl,(l2deltaY)
 241+ E91D                                      ClearCarryFlag
 241+ E91D B7          >                        or a
 242+ E91E ED 52                                sbc		hl,de
 243+ E920 EB                                   ex		de,hl
 244+ E921                                      ldiyde
 244+ E921 FD 62       >                        ld		iyh,d
 244+ E923 FD 6B       >                        ld		iyl,e
 245+ E925 00           l2D_adjustCol2:         nop										; update X and Y
 246+ E926 04                                   inc		b
 247+ E927 18 A7                                jr		l2D_Loop
 248+ E929              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ E929
 250+ E929
 251+ E929
 252+ E929
 253+ E929              ;Loin:				; BBC version of line draw
 254+ E929              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 255+ E929              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 256+ E929              ;	ld		ixh,0							; ixh = s
 257+ E929              ;	ld		iyh,0							; iyh = swap
 258+ E929              ;	ld		l,0								; l will hold delta sign flags
 259+ E929              ;LoinCalcDeltaX:
 260+ E929              ;	ld		a,e
 261+ E929              ;	sub		c								; a = deltaX
 262+ E929              ;	JumpIfPositive LoinPosDx
 263+ E929              ;LoinNegDx:
 264+ E929              ;	neg										; carry flag will indicate deltaX was negative
 265+ E929              ;	ld		l,$80							; set bit 7 of l for negative
 266+ E929              ;LoinPosDx:
 267+ E929              ;	ld		ixl,a							; ixl = varP = deltaX
 268+ E929              ;LoinCalcDeltaY:
 269+ E929              ;	ld		a,d
 270+ E929              ;	sub		b								; a= deltaY
 271+ E929              ;	JumpIfPositive LoinPosDy
 272+ E929              ;LoinNegDy:
 273+ E929              ;	neg
 274+ E929              ;	set		6,l								; set bit 6 of l for negative deltaY
 275+ E929              ;LoinPosDy:
 276+ E929              ;	ld		iyl,a							; iyl = varQ = deltaY
 277+ E929              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 278+ E929              ;LoinSTPx:									; step along X
 279+ E929              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 280+ E929              ;LoinSTPxSwapCoords:
 281+ E929              ;	dec		iyh								; swap flag now becomes FF
 282+ E929              ;	ld		a,l								; save l flags
 283+ E929              ;	ex		de,hl							; save de to hl
 284+ E929              ;	lddebc									; Point2 = point1
 285+ E929              ;	ldbchl									; Point1 = point2 that was saved
 286+ E929              ;	ld		l,a								; get back l flags
 287+ E929              ;LoinSTPxCorrectOrder:
 288+ E929              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 289+ E929              ;	ld		a,iyl							; get delta Y back
 290+ E929              ;	ld		iy1,$FE							; roll counter
 291+ E929              ;LionSTPxRollQ:
 292+ E929              ;	sla		a								; highest bit of delta-Y
 293+ E929              ;	jp		c,LoinSTPxSteep
 294+ E929              ;	cp		ixl								; compare with DeltaX
 295+ E929              ;	jp		cs,LoinSTPxShallow
 296+ E929              ;LoinSTPxSteep:								;; LI4
 297+ E929              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 298+ E929              ;	scf										; force carry flag set
 299+ E929              ;LoinSTPxShallow:							;; LI5
 300+ E929              ;	rl		iyl								; rotate iyl which started as FE
 301+ E929              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 302+ E929              ;	inc		ihl								; DeltaX += 1
 303+ E929              ;LoinSTPxYDirection:							; change this to self modifying code
 304+ E929              ;	ld		a,d
 305+ E929              ;	JumpIfAGTEn	b,LionDOWN:
 306+ E929              ;	ld		a,iyh							; swap flag
 307+ E929              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 308+ E929              ;LoinSTPxX1Dec:
 309+ E929              ;	dec		c								; move left 1 pixel as we sawped
 310+ E929              ;LoinSTPxXCounter:							;; LIL2
 311+ E929              ;	sub		b
 312+ E929              ;	if
 313+ E929              ;
 314+ E929              ;85 82                   STA &82	   \ R	\ mask byte
 315+ E929              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 316+ E929              ;A2 FE                   LDX #&FE	\ roll counter
 317+ E929              ;86 81                   STX &81		\ Q
 318+ E929              ;.LIL1	\ roll Q
 319+ E929              ;0A                      ASL A		\ highest bit of delta-Y
 320+ E929              ;B0 04                   BCS LI4		\ steep
 321+ E929              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 322+ E929              ;90 03                   BCC LI5		\ shallow
 323+ E929              ;.LI4	\ steep
 324+ E929              ;E5 1B                   SBC &1B		\ P
 325+ E929              ;38                      SEC
 326+ E929              ;.LI5	\ shallow
 327+ E929              ;26 81                   ROL &81	   \ Q	\ #&FE
 328+ E929              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 329+ E929              ;A6 1B                   LDX &1B		\ P
 330+ E929              ;E8                      INX 		\ Xreg is width
 331+ E929              ;A5 37                   LDA &37		\ Y2
 332+ E929              ;E5 35                   SBC &35		\ Y1
 333+ E929              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 334+ E929              ;A5 90                   LDA &90		\ SWAP
 335+ E929              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 336+ E929              ;CA                      DEX
 337+ E929              ;.LIL2	\ counter X width
 338+ E929              ;A5 82                   LDA &82	   \ R	\ mask byte
 339+ E929              ;51 07                   EOR (&07),Y	\ (SC),Y
 340+ E929              ;91 07                   STA (&07),Y	\ (SC),Y
 341+ E929              ;.LI6	\ Xreg correct
 342+ E929              ;46 82                   LSR &82	   \ R	\ mask byte
 343+ E929              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 344+ E929              ;66 82                   ROR &82		\ R
 345+ E929              ;A5 07                   LDA &07		\ SC
 346+ E929              ;69 08                   ADC #8		\ next column
 347+ E929              ;85 07                   STA &07		\ SC
 348+ E929              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 349+ E929              ;A5 83                   LDA &83		\ S
 350+ E929              ;65 81                   ADC &81	   \ Q	\ some low bits
 351+ E929              ;85 83                   STA &83		\ S
 352+ E929              ;90 07                   BCC LIC2	\ skip Y adjustment
 353+ E929              ;88                      DEY
 354+ E929              ;10 04                   BPL LIC2	\ skip Y adjustment
 355+ E929              ;C6 08                   DEC &08		\ SC+1
 356+ E929              ;A0 07                   LDY #7
 357+ E929              ;.LIC2	\ skip Y adjustment
 358+ E929              ;CA                      DEX
 359+ E929              ;D0 DC                   BNE LIL2	\ loop X width
 360+ E929              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 361+ E929              ;60                      RTS
 362+ E929              ;
 363+ E929              ;.DOWN	\ Line is going to the right and down
 364+ E929              ;A5 90                   LDA &90		\ SWAP
 365+ E929              ;F0 07                   BEQ LI9		\ no swap
 366+ E929              ;CA                      DEX
 367+ E929              ;.LIL3	\ counter X width
 368+ E929              ;A5 82                   LDA &82	    \ R \ mask byte
 369+ E929              ;51 07                   EOR (&07),Y	\ (SC),Y
 370+ E929              ;91 07                   STA (&07),Y	\ (SC),Y
 371+ E929              ;.LI9	\ no swap
 372+ E929              ;46 82                   LSR &82		\ R
 373+ E929              ;90 08                   BCC LI10	\ still in correct column, hop
 374+ E929              ;66 82                   ROR &82		\ R
 375+ E929              ;A5 07                   LDA &07		\ SC
 376+ E929              ;69 08                   ADC #8		\ next column
 377+ E929              ;85 07                   STA &07		\ SC
 378+ E929              ;.LI10	\ this is like an overflow monitor to update Y
 379+ E929              ;A5 83                   LDA &83		\ S
 380+ E929              ;65 81                   ADC &81		\ Q
 381+ E929              ;85 83                   STA &83		\ S
 382+ E929              ;90 09                   BCC LIC3	\ skip Y adjustment
 383+ E929              ;C8                      INY
 384+ E929              ;C0 08                   CPY #8
 385+ E929              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 386+ E929              ;E6 08                   INC &08		\ SC+1
 387+ E929              ;A0 00                   LDY #0
 388+ E929              ;.LIC3	\ skipped Y adjustment
 389+ E929              ;CA                      DEX
 390+ E929              ;D0 DA                   BNE LIL3	\ loop X width
 391+ E929              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 392+ E929              ;60                      RTS
 393+ E929              ;
 394+ E929              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 395+ E929              ;A4 35                   LDY &35		\ Y1
 396+ E929              ;98                      TYA
 397+ E929              ;A6 34                   LDX &34		\ X1
 398+ E929              ;C4 37                   CPY &37		\ Y2
 399+ E929              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 400+ E929              ;C6 90                   DEC &90		\ SWAP
 401+ E929              ;A5 36                   LDA &36		\ X2
 402+ E929              ;85 34                   STA &34		\ X1
 403+ E929              ;86 36                   STX &36		\ X2
 404+ E929              ;AA                      TAX
 405+ E929              ;A5 37                   LDA &37		\ Y2
 406+ E929              ;85 35                   STA &35		\ Y1
 407+ E929              ;84 37                   STY &37		\ Y2
 408+ E929              ;A8                      TAY
 409+ E929              ;.LI15	\ Y1 Y2 order is now correct
 410+ E929              ;4A                      LSR A
 411+ E929              ;4A                      LSR A
 412+ E929              ;4A                      LSR A
 413+ E929              ;09 60                   ORA #&60
 414+ E929              ;85 08                   STA &08	 \ SC+1	\ screen hi
 415+ E929              ;8A                      TXA 		\ X1
 416+ E929              ;29 F8                   AND #&F8
 417+ E929              ;85 07                   STA &07	  \ SC	\ screen lo
 418+ E929              ;8A                      TXA
 419+ E929              ;29 07                   AND #7		\ mask index
 420+ E929              ;AA                      TAX
 421+ E929              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 422+ E929              ;85 82                   STA &82	    \ R	\ mask
 423+ E929              ;A5 35                   LDA &35		\ Y1
 424+ E929              ;29 07                   AND #7
 425+ E929              ;A8                      TAY
 426+ E929              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 427+ E929              ;A2 01                   LDX #1		\ roll counter
 428+ E929              ;86 1B                   STX &1B	    	\ P
 429+ E929              ;.LIL4	\ roll P
 430+ E929              ;0A                      ASL A
 431+ E929              ;B0 04                   BCS LI13	\ do subtraction
 432+ E929              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 433+ E929              ;90 03                   BCC LI14	\ less than Q
 434+ E929              ;.LI13	\ do subtraction
 435+ E929              ;E5 81                   SBC &81		\ Q
 436+ E929              ;38                      SEC
 437+ E929              ;.LI14	\ less than Q
 438+ E929              ;26 1B                   ROL &1B		\ P
 439+ E929              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 440+ E929              ;A6 81                   LDX &81		\ Q
 441+ E929              ;E8                      INX 		\ adjust height
 442+ E929              ;A5 36                   LDA &36		\ X2
 443+ E929              ;E5 34                   SBC &34		\ X1
 444+ E929              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 445+ E929              ;18                      CLC
 446+ E929              ;A5 90                   LDA &90		\ SWAP
 447+ E929              ;F0 07                   BEQ LI17 	\ skip first point
 448+ E929              ;CA                      DEX
 449+ E929              ;.LIL5	\ skipped first point, counter X
 450+ E929              ;A5 82                   LDA &82	    \ R \ mask byte
 451+ E929              ;51 07                   EOR (&07),Y	\ (SC),Y
 452+ E929              ;91 07                   STA (&07),Y	\ (SC),Y
 453+ E929              ;.LI17	\ skipped first point
 454+ E929              ;88                      DEY
 455+ E929              ;10 04                   BPL LI16	\ skip hi adjust
 456+ E929              ;C6 08                   DEC &08		\ SC+1
 457+ E929              ;A0 07                   LDY #7		\ new char
 458+ E929              ;	.LI16	\ skipped hi adjust
 459+ E929              ;A5 83                   LDA &83		\ S
 460+ E929              ;65 1B                   ADC &1B		\ P
 461+ E929              ;85 83                   STA &83		\ S
 462+ E929              ;90 0C                   BCC LIC5	\ skip, still in same column
 463+ E929              ;46 82                   LSR &82	  \ R	\ mask
 464+ E929              ;90 08                   BCC LIC5  	\ no mask bit hop
 465+ E929              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 466+ E929              ;A5 07                   LDA &07	  \ SC  \ screen lo
 467+ E929              ;69 08                   ADC #8		\ next char below
 468+ E929              ;85 07                   STA &07		\ SC
 469+ E929              ;.LIC5	\ same column
 470+ E929              ;CA                      DEX
 471+ E929              ;D0 DC                   BNE LIL5	\ loop X height
 472+ E929              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 473+ E929              ;60                      RTS
 474+ E929              ;
 475+ E929              ;.LFT	\ going left
 476+ E929              ;A5 90                   LDA &90		\ SWAP
 477+ E929              ;F0 07                   BEQ LI18	\ skip first point
 478+ E929              ;CA                      DEX 		\ reduce height
 479+ E929              ;.LIL6	\ counter X height
 480+ E929              ;A5 82                   LDA &82	   \ R	\ mask byte
 481+ E929              ;51 07                   EOR (&07),Y	\ (SC),Y
 482+ E929              ;91 07                   STA (&07),Y	\ (SC),Y
 483+ E929              ;.LI18
 484+ E929              ;88                      DEY
 485+ E929              ;10 04                   BPL LI19	\ skip hi adjust
 486+ E929              ;C6 08                   DEC &08		\ SC+1
 487+ E929              ;A0 07                   LDY #7		\ rest char row
 488+ E929              ;.LI19	\ skipped hi adjust
 489+ E929              ;A5 83                   LDA &83		\ S
 490+ E929              ;65 1B                   ADC &1B	    \ P \ some low bits
 491+ E929              ;85 83                   STA &83		\ S
 492+ E929              ;90 0D                   BCC LIC6	\ no overflow
 493+ E929              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 494+ E929              ;90 09                   BCC LIC6	\ no overflow
 495+ E929              ;26 82                   ROL &82		\ R
 496+ E929              ;A5 07                   LDA &07		\ SC
 497+ E929              ;E9 07                   SBC #7		\ down 1 char
 498+ E929              ;85 07                   STA &07		\ SC
 499+ E929              ;18                      CLC
 500+ E929              ;.LIC6	\ no overflow
 501+ E929              ;CA                      DEX 		\ height
 502+ E929              ;D0 DB                   BNE LIL6	\ loop X
 503+ E929              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 504+ E929              ;.HL6
 505+ E929              ;60                      RTS 		\ end Line drawing
 506+ E929
 507+ E929
 508+ E929              ;;l2_draw_diagonalopt:
 509+ E929              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 510+ E929              ;;	push	af
 511+ E929              ;;	ld		a,b
 512+ E929              ;;	cp		d
 513+ E929              ;;	jr		z,.RegularDiagnonal
 514+ E929              ;;.CheckHorz:
 515+ E929              ;;	ld		a,c
 516+ E929              ;;	cp		e
 517+ E929              ;;	jr		z,.horizontalLine
 518+ E929              ;;.RegularDiagnonal:
 519+ E929              ;;	pop		af
 520+ E929              ;;	call diag
 521+ E929
 522+ E929
 523+ E929              ;;l2_signed_mul2a:
 524+ E929              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 525+ E929              ;;	TEST	$80
 526+ E929              ;;	jr		nz, .negativecalc
 527+ E929              ;;.positivecalc:
 528+ E929              ;;	ccf
 529+ E929              ;;	rla
 530+ E929              ;;	ret
 531+ E929              ;;.negativecalc:
 532+ E929              ;;	neg
 533+ E929              ;;	ccf
 534+ E929              ;;	rla
 535+ E929              ;;	neg
 536+ E929              ;;	ret
 537+ E929              ;;
 538+ E929              ;;l2_signed_mul2atohl:
 539+ E929              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 540+ E929              ;;	TEST	$80
 541+ E929              ;;	jr		nz, .negativecalc
 542+ E929              ;;.positivecalc:
 543+ E929              ;;	ld		hl,0
 544+ E929              ;;	ld		l,a
 545+ E929              ;;	add		hl,a
 546+ E929              ;;	ret
 547+ E929              ;;.negativecalc:
 548+ E929              ;;	neg
 549+ E929              ;;	ld		hl,0
 550+ E929              ;;	ld		l,a
 551+ E929              ;;	neghl
 552+ E929              ;;	ret
 553+ E929              ;;
 554+ E929              ;;l2_e2fractionby2:
 555+ E929              ;;	ld 		hl,(l2fraction)
 556+ E929              ;;	push	de
 557+ E929              ;;	ld		d,h
 558+ E929              ;;	ld		e,l
 559+ E929              ;;	add		hl,de
 560+ E929              ;;	pop		de
 561+ E929              ;;	ld		(l2e2),hl
 562+ E929              ;;	ret
 563+ E929
 564+ E929
 565+ E929
 566+ E929
 567+ E929
 568+ E929              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 569+ E929              ;;//.catchLoop:
 570+ E929              ;;//	jp .catchLoop
 571+ E929              ;;//.continue:
 572+ E929              ;;//    ld      A,D
 573+ E929              ;;//    sub     H
 574+ E929              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 575+ E929              ;;//.DXNegative:
 576+ E929              ;;//    neg
 577+ E929              ;;//.DXPositive:
 578+ E929              ;;//    ld      B,A              ;B <- |delta_x|
 579+ E929              ;;//    ld      A,E
 580+ E929              ;;//    sub     L
 581+ E929              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 582+ E929              ;;//.DYNegative:
 583+ E929              ;;//    neg
 584+ E929              ;;//.DYPositive:
 585+ E929              ;;//    sub     B               ;|delta_y|
 586+ E929              ;;//	push	af
 587+ E929              ;;//	jr		c,.DeltaX
 588+ E929              ;;//.DeltaY
 589+ E929              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 590+ E929              ;;//    ld      H,L             			;then values x and y are swapped
 591+ E929              ;;//    ld      L,A             			;so the loop will always be performed on the
 592+ E929              ;;//    ld      A,D             			;x value. A flag must be set to
 593+ E929              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 594+ E929              ;;//    ld      E,A             			;instead of (x,y)
 595+ E929              ;;//.DeltaX:
 596+ E929              ;;//	ld		a,d
 597+ E929              ;;//	sub		h
 598+ E929              ;;//	jr		nc,.TestDY					; x1 < x2
 599+ E929              ;;//.TestDX:
 600+ E929              ;;//	ex		de,hl
 601+ E929              ;;//.TestDY:
 602+ E929              ;;//	ld		a,e
 603+ E929              ;;//	sub		l
 604+ E929              ;;//    ld      A,$01
 605+ E929              ;;//    jr      NC,.StoreA
 606+ E929              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 607+ E929              ;;//.StoreA:
 608+ E929              ;;//        ld      (l2way),A
 609+ E929              ;;//.InitLine:
 610+ E929              ;;//        ld      B,H
 611+ E929              ;;//        ld      C,L
 612+ E929              ;;//        ld      A,E
 613+ E929              ;;//        sub     L
 614+ E929              ;;//        jr      NC,.EndInit
 615+ E929              ;;//        ld      A,L
 616+ E929              ;;//        ld      L,E
 617+ E929              ;;//        ld      E,A
 618+ E929              ;;//.EndInit:
 619+ E929              ;;//        ld      A,E
 620+ E929              ;;//        sub     L
 621+ E929              ;;//        rla
 622+ E929              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 623+ E929              ;;//        add     A,H
 624+ E929              ;;//        sub     D
 625+ E929              ;;//        ld      E,A             ;'d' variable is initialised
 626+ E929              ;;//        add     A,H
 627+ E929              ;;//        sub     D
 628+ E929              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 629+ E929              ;;//.Loop:
 630+ E929              ;;//        ld      A,B
 631+ E929              ;;//        sub     D
 632+ E929              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 633+ E929              ;;//        pop     AF
 634+ E929              ;;//        bit     7,A
 635+ E929              ;;//        push    AF
 636+ E929              ;;//        push    AF
 637+ E929              ;;//        push    BC
 638+ E929              ;;//        jr      Z,.DrawPoint
 639+ E929              ;;//        ld      A,B
 640+ E929              ;;//        ld      B,C
 641+ E929              ;;//        ld      C,A
 642+ E929              ;;//.DrawPoint:
 643+ E929              ;;//		push	hl
 644+ E929              ;;//		pushbcdeaf
 645+ E929              ;;//		ld		b,e
 646+ E929              ;;//		ld		c,d
 647+ E929              ;;//	ld 		a,(l2linecolor)
 648+ E929              ;;//	call	l2_plot_pixel
 649+ E929              ;;//		popafdebc
 650+ E929              ;;//		pop		hl
 651+ E929              ;;//        pop     BC
 652+ E929              ;;//        pop     AF
 653+ E929              ;;//.TestD:
 654+ E929              ;;//        bit     7,E
 655+ E929              ;;//        jr      NZ,.Case1
 656+ E929              ;;//.Case2:                          ;d >= 0
 657+ E929              ;;//        ld      A,E
 658+ E929              ;;//        add     A,H
 659+ E929              ;;//        ld      E,A
 660+ E929              ;;//        ld      A,(l2way)
 661+ E929              ;;//        add     A,C
 662+ E929              ;;//        ld      C,A
 663+ E929              ;;//        jr      .EndLoop
 664+ E929              ;;//.Case1:                          ;d < 0
 665+ E929              ;;//        ld      A,E
 666+ E929              ;;//        add     A,L
 667+ E929              ;;//        ld      E,A
 668+ E929              ;;//.EndLoop:
 669+ E929              ;;//        inc     B
 670+ E929              ;;//        jr      .Loop
 671+ E929              ;;//.EndLine:
 672+ E929              ;;//        pop     AF              ;MUST NOT BE REMOVED
 673+ E929              ;;//        pop     HL              ;can be removed
 674+ E929              ;;//        pop     DE              ;can be removed
 675+ E929              ;;//        ret
 676+ E929
 677+ E929              ;;	ld		(.l2yadjust),a
 678+ E929              ;;	call	calcdeltax:
 679+ E929              ;;	ld		(.l2xadjust),a
 680+ E929              ;;.calcfraction:							; err(or fraction) = dx+dy;
 681+ E929              ;;	push	hl
 682+ E929              ;;	push	de
 683+ E929              ;;	ld		hl,(l2deltaX)
 684+ E929              ;;	ld		de,(l2deltaY)
 685+ E929              ;;	add		hl,de
 686+ E929              ;;	ld		(l2fraction),hl
 687+ E929              ;;	pop		de
 688+ E929              ;;	pop		hl
 689+ E929              ;;.mainloop:
 690+ E929              ;;	push	bc
 691+ E929              ;;	push	de
 692+ E929              ;;	ld 		a,(l2linecolor)
 693+ E929              ;;	call	l2_plot_pixel
 694+ E929              ;;	pop		de
 695+ E929              ;;	pop		bc
 696+ E929              ;;.arewefinishedtest
 697+ E929              ;;	ld		a,b
 698+ E929              ;;	cp		d
 699+ E929              ;;	jr		nz,.notthereyet
 700+ E929              ;;	ld		a,c
 701+ E929              ;;	cp		e
 702+ E929              ;;	ret		z
 703+ E929              ;;.notthereyet:
 704+ E929              ;;	push	de
 705+ E929              ;;	call	l2_e2fractionby2			; e2 = 2*err;
 706+ E929              ;;	pop		de
 707+ E929              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
 708+ E929              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
 709+ E929              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
 710+ E929              ;;	or		a							;
 711+ E929              ;;	sbc		hl,de						;
 712+ E929              ;;	pop		de
 713+ E929              ;;	jr		z,  .dodycalc				; if equal then calc
 714+ E929              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
 715+ E929              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
 716+ E929              ;;.dodycalc:
 717+ E929              ;;	ld		hl,(l2fraction)
 718+ E929              ;;	push	de
 719+ E929              ;;	ld		de,(l2deltaY)
 720+ E929              ;;	add		hl,de
 721+ E929              ;;	ld		(l2fraction),de
 722+ E929              ;;	pop		de
 723+ E929              ;;.l2yadjust:
 724+ E929              ;;	nop
 725+ E929              ;;.skipdycalc:
 726+ E929              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
 727+ E929              ;;	ld		hl,(l2e2)
 728+ E929              ;;	push	de							;
 729+ E929              ;;	ld		de,(l2deltaX)				;
 730+ E929              ;;	or		a							; clear carry flag
 731+ E929              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
 732+ E929              ;;	pop		de
 733+ E929              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
 734+ E929              ;;	jp		m,.dodxcalc					; was sign bit set
 735+ E929              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
 736+ E929              ;;.dodxcalc:
 737+ E929              ;;	ld		hl,(l2fraction)
 738+ E929              ;;	push	de
 739+ E929              ;;	ld		de,(l2deltaX)
 740+ E929              ;;	add		hl,de
 741+ E929              ;;	ld		(l2fraction),de
 742+ E929              ;;	pop		de
 743+ E929              ;;.l2xadjust:
 744+ E929              ;;	nop
 745+ E929              ;;.skipdxcalc:
 746+ E929              ;;	jr 		.mainloop
 747+ E929
 748+ E929
 749+ E929              ;;/l2_draw_diagonalold:
 750+ E929              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 751+ E929              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 752+ E929              ;;/.sortycoords:
 753+ E929              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
 754+ E929              ;;/	cp		d
 755+ E929              ;;/	jr		nc, .nocoordswap
 756+ E929              ;;/.swapcoords:
 757+ E929              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
 758+ E929              ;;/	lddebc
 759+ E929              ;;/	ldbchl
 760+ E929              ;;/.nocoordswap:
 761+ E929              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
 762+ E929              ;;/	sub		b							; we have already sorted  so y1 > y0
 763+ E929              ;;/	ld		(l2deltaY),a
 764+ E929              ;;/	neg									; DEBUG
 765+ E929              ;;/	ld		(l2deltaYn),a				; DEBUG
 766+ E929              ;;/	neg									; DEBUG
 767+ E929              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
 768+ E929              ;;/    ld		a,c
 769+ E929              ;;/	cp		e
 770+ E929              ;;/	jr		c, .x1GTx0
 771+ E929              ;;/.x1LTx0
 772+ E929              ;;/	ld		a,c
 773+ E929              ;;/	sub		e
 774+ E929              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
 775+ E929              ;;/	neg									; DEBUG
 776+ E929              ;;/	ld		(l2deltaXn),a				; DEBUG
 777+ E929              ;;/	neg									; DEBUG
 778+ E929              ;;/	ld		a,l2incbstep
 779+ E929              ;;/	jr		.setlayershift0
 780+ E929              ;;/.x1GTx0:
 781+ E929              ;;/	ld		a,e
 782+ E929              ;;/	sub		c
 783+ E929              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
 784+ E929              ;;/	neg									; DEBUG
 785+ E929              ;;/	ld		(l2deltaXn),a				; DEBUG
 786+ E929              ;;/	neg									; DEBUG
 787+ E929              ;;/	ld		a,l2decbstep
 788+ E929              ;;/.setlayershift0:
 789+ E929              ;;/	ld		a,0
 790+ E929              ;;/	pushbcde
 791+ E929              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
 792+ E929              ;;/	popdebc
 793+ E929              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
 794+ E929              ;;/.dymuliplyby2:
 795+ E929              ;;/	ld		a, (l2deltaY)				; dy *= 2
 796+ E929              ;;/	call	l2_signed_mul2a
 797+ E929              ;;/	ld		(l2deltaYsq),a
 798+ E929              ;;/	neg									; DEBUG
 799+ E929              ;;/	ld		(l2deltaYsqn),a				; DEBUG
 800+ E929              ;;/	neg									; DEBUG
 801+ E929              ;;/.dxmuliplyby2:
 802+ E929              ;;/	ld		a, (l2deltaX)				; dx *= 2
 803+ E929              ;;/	call	l2_signed_mul2a
 804+ E929              ;;/	ld		(l2deltaXsq),a
 805+ E929              ;;/	neg									; DEBUG
 806+ E929              ;;/	ld		(l2deltaXsqn),a				; DEBUG
 807+ E929              ;;/	neg									; DEBUG
 808+ E929              ;;/.plotfirstpixel:
 809+ E929              ;;/	pushbcde
 810+ E929              ;;/	ld a,(l2linecolor)
 811+ E929              ;;/	call	l2_plot_pixel
 812+ E929              ;;/	popdebc
 813+ E929              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
 814+ E929              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
 815+ E929              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
 816+ E929              ;;/	cp		(hl)
 817+ E929              ;;/	jp		m,	.signset
 818+ E929              ;;/.signclear:
 819+ E929              ;;/	jp		pe,	.dxLTEdybranch
 820+ E929              ;;/	jr		.dxGTdybranch
 821+ E929              ;;/.signset:
 822+ E929              ;;/	jp		po,	.dxLTEdybranch
 823+ E929              ;;/.dxGTdybranch:
 824+ E929              ;;/	ld		a,(l2deltaYsq)
 825+ E929              ;;/	ld		hl,l2deltaX
 826+ E929              ;;/	sub		(hl)
 827+ E929              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
 828+ E929              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
 829+ E929              ;;/	ld		a,c
 830+ E929              ;;/	cp		e
 831+ E929              ;;/	ret		z							; if x0 = x1 then done
 832+ E929              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
 833+ E929              ;;/	ld		a,(l2fraction)
 834+ E929              ;;/	TEST	$80
 835+ E929              ;;/	jr		nz,.BranchAskipYstep
 836+ E929              ;;/	inc		b							; 		++l2_vy0;
 837+ E929              ;;/	ld		hl,l2deltaXsq
 838+ E929              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
 839+ E929              ;;/	ld		(l2fraction),a
 840+ E929              ;;/.BranchAskipYstep:
 841+ E929              ;;/.l2stepx1:
 842+ E929              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
 843+ E929              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
 844+ E929              ;;/	ld		hl,l2deltaYsq
 845+ E929              ;;/	add		a,(hl)
 846+ E929              ;;/	ld		(l2fraction),a
 847+ E929              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
 848+ E929              ;;/	pushbcde
 849+ E929              ;;/	ld a,(l2linecolor)
 850+ E929              ;;/	call	l2_plot_pixel
 851+ E929              ;;/	popdebc
 852+ E929              ;;/.BranchAloop:
 853+ E929              ;;/	jr		.BranchAwhile
 854+ E929              ;;/.dxLTEdybranch:
 855+ E929              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
 856+ E929              ;;/	ld		hl, l2deltaY
 857+ E929              ;;/	sub		(hl)
 858+ E929              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
 859+ E929              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
 860+ E929              ;;/	ld		a,b
 861+ E929              ;;/	cp		d
 862+ E929              ;;/	ret		z							; if x0 = x1 then done
 863+ E929              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
 864+ E929              ;;/	ld		a,(l2fraction)
 865+ E929              ;;/	TEST	$80
 866+ E929              ;;/	jr		nz,.BranchBskipYstep
 867+ E929              ;;/.l2stepx2
 868+ E929              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
 869+ E929              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
 870+ E929              ;;/	ld		hl,l2deltaYsq
 871+ E929              ;;/	sub		(hl)
 872+ E929              ;;/	ld		(l2fraction),a
 873+ E929              ;;/.BranchBskipYstep:
 874+ E929              ;;/	ld		hl, l2deltaYsq
 875+ E929              ;;/	add		a,(hl)
 876+ E929              ;;/	ld		(l2fraction),a
 877+ E929              ;;/	inc		b							; ++l2_vy0;
 878+ E929              ;;/.BranchBplotBCColA:
 879+ E929              ;;/	pushbcde
 880+ E929              ;;/	ld a,(l2linecolor)
 881+ E929              ;;/	call	l2_plot_pixel
 882+ E929              ;;/	popdebc
 883+ E929              ;;/.BranchBloop:
 884+ E929              ;;/	jr		.BranchBwhile
 885+ E929
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
 812  E929                  INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_triangle.asm
   1+ E929
   2+ E929
   3+ E929
   4+ E929 00 00        l2trianglebc	        DW 0
   5+ E92B 00 00        l2trianglede	        DW 0
   6+ E92D 00 00        l2trianglehl	        DW 0
   7+ E92F
   8+ E92F              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ E92F C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ E933 CD 57 E8                             call	l2_draw_diagonal		; BC to DE
  11+ E936 F1                                   pop		af
  12+ E937 D1                                   pop		de						; swap DE and HL
  13+ E938 E1                                   pop		hl						; so BC to DE is really to HL
  14+ E939 C1                                   pop		bc
  15+ E93A D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ E93C F5                                   push	af
  17+ E93D CD 57 E8                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ E940 F1                                   pop		af
  19+ E941 C1                                   pop		bc						; Now bc = original de
  20+ E942 D1                                   pop		de						; de = original hl
  21+ E943 CD 57 E8                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ E946 C9                                   ret
  23+ E947
  24+ E947
  25+ E947
  26+ E947
  27+ E947
# file closed: ./Layer2Graphics/asm_l2_plot_triangle.asm
 813  E947                  INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_fill_triangle.asm
   1+ E947              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
   2+ E947              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
   3+ E947              ; "note line to   bc = left side row,col, d right pixel, e = color"
   4+ E947              l2_fillBottomFlatTriangle:;break
   5+ E947 7D                                   ld		a,l
   6+ E948 32 70 E5                             ld		(l2linecolor),a
   7+ E94B 79                                   ld		a,c
   8+ E94C BB                                   cp		e
   9+ E94D 30 08                                jr		nc, .x2gtex1
  10+ E94F DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x1
  11+ E952 DD 2E 02                             ld		ixl,2                           ; list 2 hols  x0 down to x2
  12+ E955 18 06                                jr		.storepoints
  13+ E957 DD 26 02     .x2gtex1:               ld		ixh,2
  14+ E95A DD 2E 01                             ld		ixl,1
  15+ E95D C5 D5 E5     .storepoints:           push	bc,,de,,hl
  16+ E960 DD 7C                                ld		a,ixh
  17+ E962 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
  18+ E963 54                                   ld		d,h
  19+ E964 CD 78 E7                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
  20+ E967 E1 D1 C1                             pop		bc,,de,,hl
  21+ E96A C5 E5                                push	bc,,hl
  22+ E96C 54                                   ld		d,h                             ; now its bc -> he
  23+ E96D DD 7D                                ld		a,ixl
  24+ E96F CD 78 E7                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
  25+ E972 E1 C1                                pop		bc,,hl
  26+ E974 50           .SaveForLoop:           ld		d,b
  27+ E975 5C                                   ld		e,h								; save loop counters
  28+ E976 D5                                   push	de								; de = y0ycommon
  29+ E977 21 78 E5     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
  30+ E97A 78                                   ld		a,b
  31+ E97B ED 31                                add		hl,a							; hl = l2targetArray1 row b
  32+ E97D 7E                                   ld		a,(hl)							;
  33+ E97E 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
  34+ E97F 21 78 E6                             ld      hl,l2targetArray2
  35+ E982 78                                   ld      a,b
  36+ E983 ED 31                                add     hl,a
  37+ E985              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
  38+ E985 7E                                   ld		a,(hl)
  39+ E986 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
  40+ E987 3A 70 E5     .SetColour:             ld		a,(l2linecolor)
  41+ E98A 5F                                   ld		e,a								; de = to colour
  42+ E98B C5           .SavePoints:            push	bc								; bc = rowcol
  43+ E98C 25                                   dec		h
  44+ E98D E5                                   push	hl								; hl = l2targetArray1[b]
  45+ E98E CD C0 E4     .DoLine:	            call	l2_draw_horz_line_to
  46+ E991 E1                                   pop		hl
  47+ E992 C1                                   pop		bc
  48+ E993 04                                   inc		b								; down a rowc
  49+ E994 D1                                   pop		de								; de = from to (and b also = current)
  50+ E995 14                                   inc		d
  51+ E996 7B                                   ld		a,e								; while e >= d
  52+ E997 BA                                   cp		d
  53+ E998 30 DA                                jr 		nc,.SaveForLoop					; Is this the right point??
  54+ E99A C9                                   ret
  55+ E99B
# file closed: ./Layer2Graphics/asm_l2_fill_triangle.asm
 814  E99B                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ E99B
   2+ E99B 00 00        l2_circle_pos		DW 0
   3+ E99D 00           l2_circle_colour	DB 0
   4+ E99E 00           l2_circle_radius	DB 0
   5+ E99F 00           l2_circle_x			DB 0
   6+ E9A0 00           l2_circle_y			DB 0
   7+ E9A1 00           l2_circle_d			DB 0
   8+ E9A2
   9+ E9A2              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  10+ E9A2 7B           l2_draw_circle:     ld		a,e
  11+ E9A3 32 49 EA                         ld		(.PlotPixel+1),a
  12+ E9A6 7A                               ld		a,d								; get radius
  13+ E9A7 A7                               and		a
  14+ E9A8 C8                               ret		z
  15+ E9A9 FE 01                            cp		1
  16+ E9AB CA 60 EA                         jp		z,CircleSinglepixel
  17+ E9AE ED 43 D8 E9                      ld		(.Plot1+1),bc					; save origin into DE reg in code
  18+ E9B2 DD 67                            ld		ixh,a							; ixh = raidus
  19+ E9B4 DD 2E 00                         ld		ixl,0
  20+ E9B7 26 00        .calcd:	            ld		h,0
  21+ E9B9 6F                               ld		l,a
  22+ E9BA 29                               add		hl,hl							; hl = r * 2
  23+ E9BB EB                               ex		de,hl							; de = r * 2
  24+ E9BC 21 03 00                         ld		hl,3
  25+ E9BF A7                               and		a
  26+ E9C0 ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
  27+ E9C2 44                               ld		b,h
  28+ E9C3 4D                               ld		c,l								; bc = 3 - (r * 2)
  29+ E9C4 21 01 00     .calcdelta:         ld		hl,1
  30+ E9C7 16 00                            ld		d,0
  31+ E9C9 DD 5D                            ld		e,ixl
  32+ E9CB A7                               and		a
  33+ E9CC ED 52                            sbc		hl,de
  34+ E9CE 11 01 00     .Setde1:            ld		de,1
  35+ E9D1 DD 7C        .CircleLoop:        ld		a,ixh
  36+ E9D3 DD BD                            cp		ixl
  37+ E9D5 D8                               ret		c
  38+ E9D6 D9           .ProcessLoop:	    exx
  39+ E9D7 11 00 00     .Plot1:             ld		de,0
  40+ E9DA 7B                               ld		a,e
  41+ E9DB DD 85                            add		a,ixl
  42+ E9DD 4F                               ld		c,a
  43+ E9DE 7A                               ld		a,d
  44+ E9DF DD 84                            add		a,ixh
  45+ E9E1 47                               ld		b,a
  46+ E9E2 CD 48 EA                         call	.PlotPixel			;CX+X,CY+Y
  47+ E9E5 7B           .Plot2:             ld 		a,e
  48+ E9E6 DD 95                            sub 	ixl
  49+ E9E8 4F                               ld 		c,a
  50+ E9E9 7A                               ld 		a,d
  51+ E9EA DD 84                            add 	a,ixh
  52+ E9EC 47                               ld		b,a
  53+ E9ED CD 48 EA                         call	.PlotPixel			;CX-X,CY+Y
  54+ E9F0 7B           .Plot3:             ld 		a,e
  55+ E9F1 DD 85                            add		a,ixl
  56+ E9F3 4F                               ld 		c,a
  57+ E9F4 7A                               ld 		a,d
  58+ E9F5 DD 94                            sub 	ixh
  59+ E9F7 47                               ld 		b,a
  60+ E9F8 CD 48 EA                         call	.PlotPixel			;CX+X,CY-Y
  61+ E9FB 7B           .Plot4:             ld 		a,e
  62+ E9FC DD 95                            sub 	ixl
  63+ E9FE 4F                               ld 		c,a
  64+ E9FF 7A                               ld 		a,d
  65+ EA00 DD 94                            sub 	ixh
  66+ EA02 47                               ld 		b,a
  67+ EA03 CD 48 EA                         call	.PlotPixel			;CX-X,CY-Y
  68+ EA06 7A           .Plot5:	            ld 		a,d
  69+ EA07 DD 85                            add 	a,ixl
  70+ EA09 47                               ld 		b,a
  71+ EA0A 7B                               ld 		a,e
  72+ EA0B DD 84                            add 	a,ixh
  73+ EA0D 4F                               ld 		c,a
  74+ EA0E CD 48 EA                         call	.PlotPixel			;CY+X,CX+Y
  75+ EA11 7A           .Plot6:	            ld 		a,d
  76+ EA12 DD 95                            sub 	ixl
  77+ EA14 47                               ld 		b,a
  78+ EA15 7B                               ld 		a,e
  79+ EA16 DD 84                            add 	a,ixh
  80+ EA18 4F                               ld 		c,a
  81+ EA19 CD 48 EA                         call	.PlotPixel			;CY-X,CX+Y
  82+ EA1C 7A           .Plot7:	            ld 		a,d
  83+ EA1D DD 85                            add 	a,ixl
  84+ EA1F 47                               ld 		b,a
  85+ EA20 7B                               ld 		a,e
  86+ EA21 DD 94                            sub 	ixh
  87+ EA23 4F                               ld 		c,a
  88+ EA24 CD 48 EA                         call	.PlotPixel			;CY+X,CX-Y
  89+ EA27 7A           .Plot8:	            ld 		a,d
  90+ EA28 DD 95                            sub 	ixl
  91+ EA2A 47                               ld		b,a
  92+ EA2B 7B                               ld 		a,e
  93+ EA2C DD 94                            sub 	ixh
  94+ EA2E 4F                               ld 		c,a
  95+ EA2F CD 48 EA                         call	.PlotPixel			;CY-X,CX-Y
  96+ EA32 D9                               exx
  97+ EA33 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
  98+ EA35 28 03                            jr z,   .draw_circle_1
  99+ EA37 19                               add hl,de			; Delta=Delta+D1
 100+ EA38 18 05                            jr      .draw_circle_2		;
 101+ EA3A 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 102+ EA3B 03                               inc     bc
 103+ EA3C 03                               inc     bc				; D2=D2+2
 104+ EA3D DD 25                            dec     ixh				; Y=Y-1
 105+ EA3F 03           .draw_circle_2:		inc bc				; D2=D2+2
 106+ EA40 03                               inc bc
 107+ EA41 13                               inc de				; D1=D1+2
 108+ EA42 13                               inc de
 109+ EA43 DD 2C                            inc ixl				; X=X+1
 110+ EA45 C3 D1 E9                         jp      .CircleLoop
 111+ EA48 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 112+ EA4A D5 C5 E5                         push	de,,bc,,hl
 113+ EA4D                                  l2_plot_macro; call 	l2_plot_pixel_y_test
 113+ EA4D 78          >                        ld      a,b
 113+ EA4E             >                        JumpIfAGTENusng 192 ,.NoPlot
 113+ EA4E FE C0       >                        cp     192
 113+ EA50 D2 5C EA    >                        jp		nc,.NoPlot
 113+ EA53 69          >                        ld      l,c
 113+ EA54 CD 68 E0    >                        call    asm_l2_row_bank_select
 113+ EA57 67          >                        ld      h,a
 113+ EA58 3A 03 ED    >                        ld      a,(line_gfx_colour)
 113+ EA5B 77          >                        ld      (hl),a
 113+ EA5C             >.NoPlot:
 114+ EA5C E1 C1 D1                         pop		de,,bc,,hl
 115+ EA5F C9                               ret
 116+ EA60 7B           CircleSinglepixel:  ld		a,e
 117+ EA61                                  l2_plot_macro; call	l2_plot_pixel_y_test
 117+ EA61 78          >                        ld      a,b
 117+ EA62             >                        JumpIfAGTENusng 192 ,.NoPlot
 117+ EA62 FE C0       >                        cp     192
 117+ EA64 D2 70 EA    >                        jp		nc,.NoPlot
 117+ EA67 69          >                        ld      l,c
 117+ EA68 CD 68 E0    >                        call    asm_l2_row_bank_select
 117+ EA6B 67          >                        ld      h,a
 117+ EA6C 3A 03 ED    >                        ld      a,(line_gfx_colour)
 117+ EA6F 77          >                        ld      (hl),a
 117+ EA70             >.NoPlot:
 118+ EA70 C9                               ret
 119+ EA71
 120+ EA71              ; ">l2_draw_clipped_circle HL = Center X 2's c, DE = Center Y 2's c = center , c = radius, b = colour"
 121+ EA71 43           l2_draw_clipped_circle:     ld		b,e                     ; save Colour
 122+ EA72 32 EA EB                         ld		(.PlotPixel+1),a
 123+ EA75 79                               ld		a,c								; get radius
 124+ EA76                                  ReturnIfAIsZero
 124+ EA76 A7          >                        and     a
 124+ EA77 C8          >                        ret     z
 125+ EA78                                  JumpIfAEqNusng  1, .circleSinglepixel
 125+ EA78 FE 01       >                        cp     1
 125+ EA7A CA 03 EC    >                        jp      z,.circleSinglepixel
 126+ EA7D ED 53 AA EA                      ld		(.Plot1Y+1),de					; save origin into DE and HL
 127+ EA81 22 AD EA                         ld      (.Plot1X+1),hl                  ; .
 128+ EA84 DD 67                            ld		ixh,a							; ixh = raidus
 129+ EA86 DD 2E 00                         ld		ixl,0						    ; ixl = 0
 130+ EA89 26 00        .calcd:	            ld		h,0                             ; hl = radius
 131+ EA8B 6F                               ld		l,a                             ; .
 132+ EA8C 29                               add		hl,hl							; hl = r * 2
 133+ EA8D EB                               ex		de,hl							; de = r * 2
 134+ EA8E 21 03 00                         ld		hl,3                            ; hl = 3 - (r * 2)
 135+ EA91 A7                               and		a                               ; .
 136+ EA92 ED 52                            sbc		hl,de							; .
 137+ EA94 44                               ld		b,h                             ; bc = 3 - (r * 2)
 138+ EA95 4D                               ld		c,l								; .
 139+ EA96 21 01 00     .calcdelta:         ld		hl,1                            ; hl = 1
 140+ EA99 16 00                            ld		d,0                             ; de = ixl
 141+ EA9B DD 5D                            ld		e,ixl                           ;
 142+ EA9D A7                               and		a                               ;
 143+ EA9E ED 52                            sbc		hl,de                           ; hl = 1 - radius
 144+ EAA0 11 01 00     .Setde1:            ld		de,1                            ; de = 1
 145+ EAA3              .CircleLoop:        ReturnIfRegLTNusng ixh, ixl             ; if radius > ixl counter
 145+ EAA3 DD 7C       >                        ld      a,ixh
 145+ EAA5 DD BD       >                        cp      ixl
 145+ EAA7 D8          >                        ret	    c
 146+ EAA8 D9           .ProcessLoop:	    exx                                     ; save all bc,de,hl registers
 147+ EAA9 11 00 00     .Plot1Y:            ld		de,0                            ; this is Y coord
 148+ EAAC 21 00 00     .Plot1X:            ld      hl,0                            ; this is x coord
 149+ EAAF E5 D5 C5                         push    hl,,de,,bc                      ; save bc +3
 150+ EAB2 06 00                            ld      b,0
 151+ EAB4 DD 4D                            ld      c,ixl
 152+ EAB6                                  ClearCarryFlag
 152+ EAB6 B7          >                        or a
 153+ EAB7 ED 4A                            adc     hl,bc
 154+ EAB9 C1                               pop     bc                              ; can optimise, perhaps use iy instead of bc or just optimise push pop and jump to an overall .Plot1Done and minimise push pops + 2
 155+ EABA                                  JumpIfRegIsNotZero  h,.Plot1Done        ; if h <> 0 then hl < 0 or hl > 255
 155+ EABA 7C          >                        ld      a,h
 155+ EABB A7          >                        and     a
 155+ EABC C2 D1 EA    >                        jp	    nz,.Plot1Done
 156+ EABF EB                               ex      de,hl                           ; now de = x coord calculated
 157+ EAC0 C5                               push    bc                              ; + 3
 158+ EAC1                                  ClearCarryFlag
 158+ EAC1 B7          >                        or a
 159+ EAC2 06 00                            ld      b,0
 160+ EAC4 DD 4D                            ld      c,ixl
 161+ EAC6 ED 4A                            adc     hl,bc
 162+ EAC8 C1                               pop     bc                              ; + 2
 163+ EAC9                                  JumpIfRegIsNotZero  h,.Plot1Done        ; if h <> 0 then hl < 0 or hl > 255
 163+ EAC9 7C          >                        ld      a,h
 163+ EACA A7          >                        and     a
 163+ EACB C2 D1 EA    >                        jp	    nz,.Plot1Done
 164+ EACE CD E9 EB                         call	.PlotPixel	            		;CX+X,CY+Y using DE = x and hl = y *** Note if we order plot 1 to 8 we can selectivley jump past many on elimiation check
 165+ EAD1 D1 E1        .Plot1Done:         pop     hl,,de                          ; get de (y) and hl (x) back but reversed as the next plot expected the to be reversed from the ex de,hl above  + 0
 166+ EAD3 E5 D5 C5     .Plot2:             push    hl,,de,,bc                      ; e.g  do all CX + X first, so plot1, plot3 and just one check for cx + x off screen
 167+ EAD6 06 00                            ld      b,0                             ;                              plot2, plot8 for cx - x
 168+ EAD8 DD 4D                            ld      c,ixl                           ;                              plot4, plot5 for cy + x  ** Need to check the comments on each plot are correct
 169+ EADA                                  ClearCarryFlag                          ;                              plot6        for cy - x
 169+ EADA B7          >                        or a
 170+ EADB ED 42                            sbc     hl,bc                           ;                              plot7 is last one
 171+ EADD C1                               pop     bc                              ;
 172+ EADE                                  JumpIfRegIsNotZero  h,.Plot2Done        ;
 172+ EADE 7C          >                        ld      a,h
 172+ EADF A7          >                        and     a
 172+ EAE0 C2 F5 EA    >                        jp	    nz,.Plot2Done
 173+ EAE3 EB                               ex      de,hl
 174+ EAE4 C5                               push    bc
 175+ EAE5 06 00                            ld      b,0
 176+ EAE7 DD 4D                            ld      c,ixl
 177+ EAE9                                  ClearCarryFlag
 177+ EAE9 B7          >                        or a
 178+ EAEA ED 4A                            adc     hl,bc
 179+ EAEC C1                               pop     bc
 180+ EAED                                  JumpIfRegIsNotZero  h,.Plot2Done
 180+ EAED 7C          >                        ld      a,h
 180+ EAEE A7          >                        and     a
 180+ EAEF C2 F5 EA    >                        jp	    nz,.Plot2Done
 181+ EAF2 CD E9 EB                         call	.PlotPixel	                    ; CX-X,CY+Y
 182+ EAF5 E1 D1        .Plot2Done:         pop     de,,hl
 183+ EAF7 E5 D5 C5     .Plot3:             push    hl,,de,,bc
 184+ EAFA 06 00                            ld      b,0
 185+ EAFC DD 4D                            ld      c,ixl
 186+ EAFE                                  ClearCarryFlag
 186+ EAFE B7          >                        or a
 187+ EAFF ED 4A                            adc     hl,bc
 188+ EB01 C1                               pop     bc
 189+ EB02                                  JumpIfRegIsNotZero  h,.Plot3Done
 189+ EB02 7C          >                        ld      a,h
 189+ EB03 A7          >                        and     a
 189+ EB04 C2 19 EB    >                        jp	    nz,.Plot3Done
 190+ EB07 EB                               ex      de,hl
 191+ EB08 C5                               push    bc
 192+ EB09 06 00                            ld      b,0
 193+ EB0B DD 4D                            ld      c,ixl
 194+ EB0D                                  ClearCarryFlag
 194+ EB0D B7          >                        or a
 195+ EB0E ED 42                            sbc     hl,bc
 196+ EB10 C1                               pop     bc
 197+ EB11                                  JumpIfRegIsNotZero  h,.Plot3Done
 197+ EB11 7C          >                        ld      a,h
 197+ EB12 A7          >                        and     a
 197+ EB13 C2 19 EB    >                        jp	    nz,.Plot3Done
 198+ EB16 CD E9 EB                         call	.PlotPixel	                    ; CX+X,CY-Y
 199+ EB19 E1 D1        .Plot3Done:         pop     de,,hl
 200+ EB1B E5 D5 C5     .Plot4:             push    hl,,de,,bc
 201+ EB1E 06 00                            ld      b,0
 202+ EB20 DD 4D                            ld      c,ixl
 203+ EB22                                  ClearCarryFlag
 203+ EB22 B7          >                        or a
 204+ EB23 ED 42                            sbc     hl,bc
 205+ EB25 C1                               pop     bc
 206+ EB26                                  JumpIfRegIsNotZero  h,.Plot4Done
 206+ EB26 7C          >                        ld      a,h
 206+ EB27 A7          >                        and     a
 206+ EB28 C2 3D EB    >                        jp	    nz,.Plot4Done
 207+ EB2B EB                               ex      de,hl
 208+ EB2C C5                               push    bc
 209+ EB2D 06 00                            ld      b,0
 210+ EB2F DD 4D                            ld      c,ixl
 211+ EB31                                  ClearCarryFlag
 211+ EB31 B7          >                        or a
 212+ EB32 ED 42                            sbc     hl,bc
 213+ EB34 C1                               pop     bc
 214+ EB35                                  JumpIfRegIsNotZero  h,.Plot4Done
 214+ EB35 7C          >                        ld      a,h
 214+ EB36 A7          >                        and     a
 214+ EB37 C2 3D EB    >                        jp	    nz,.Plot4Done
 215+ EB3A CD E9 EB                         call	.PlotPixel	                    ; CX-X,CY-Y
 216+ EB3D E1 D1        .Plot4Done:         pop     de,,hl
 217+ EB3F EB           .Plot5:             ex      de,hl
 218+ EB40 E5 D5 C5                         push    hl,,de,,bc
 219+ EB43 06 00                            ld      b,0
 220+ EB45 DD 4D                            ld      c,ixl
 221+ EB47                                  ClearCarryFlag
 221+ EB47 B7          >                        or a
 222+ EB48 ED 4A                            adc     hl,bc
 223+ EB4A C1                               pop     bc
 224+ EB4B                                  JumpIfRegIsNotZero  h,.Plot5Done
 224+ EB4B 7C          >                        ld      a,h
 224+ EB4C A7          >                        and     a
 224+ EB4D C2 62 EB    >                        jp	    nz,.Plot5Done
 225+ EB50 EB                               ex      de,hl
 226+ EB51 C5                               push    bc
 227+ EB52 06 00                            ld      b,0
 228+ EB54 DD 4D                            ld      c,ixl
 229+ EB56                                  ClearCarryFlag
 229+ EB56 B7          >                        or a
 230+ EB57 ED 4A                            adc     hl,bc
 231+ EB59 C1                               pop     bc
 232+ EB5A                                  JumpIfRegIsNotZero  h,.Plot5Done
 232+ EB5A 7C          >                        ld      a,h
 232+ EB5B A7          >                        and     a
 232+ EB5C C2 62 EB    >                        jp	    nz,.Plot5Done
 233+ EB5F CD E9 EB                         call	.PlotPixel	                    ;CY+X,CX+Y
 234+ EB62 E1 D1        .Plot5Done:         pop     de,,hl
 235+ EB64 EB           .Plot6:             ex      de,hl
 236+ EB65 E5 D5 C5                         push    hl,,de,,bc
 237+ EB68 06 00                            ld      b,0
 238+ EB6A DD 4D                            ld      c,ixl
 239+ EB6C                                  ClearCarryFlag
 239+ EB6C B7          >                        or a
 240+ EB6D ED 42                            sbc     hl,bc
 241+ EB6F C1                               pop     bc
 242+ EB70                                  JumpIfRegIsNotZero  h,.Plot6Done
 242+ EB70 7C          >                        ld      a,h
 242+ EB71 A7          >                        and     a
 242+ EB72 C2 87 EB    >                        jp	    nz,.Plot6Done
 243+ EB75 EB                               ex      de,hl
 244+ EB76 C5                               push    bc
 245+ EB77 06 00                            ld      b,0
 246+ EB79 DD 4D                            ld      c,ixl
 247+ EB7B                                  ClearCarryFlag
 247+ EB7B B7          >                        or a
 248+ EB7C ED 4A                            adc     hl,bc
 249+ EB7E C1                               pop     bc
 250+ EB7F                                  JumpIfRegIsNotZero  h,.Plot6Done
 250+ EB7F 7C          >                        ld      a,h
 250+ EB80 A7          >                        and     a
 250+ EB81 C2 87 EB    >                        jp	    nz,.Plot6Done
 251+ EB84 CD E9 EB                         call	.PlotPixel	                    ; CY-X,CX+Y
 252+ EB87 E1 D1        .Plot6Done:         pop     de,,hl
 253+ EB89 EB           .Plot7:             ex      de,hl
 254+ EB8A E5 D5 C5                         push    hl,,de,,bc
 255+ EB8D 06 00                            ld      b,0
 256+ EB8F DD 4D                            ld      c,ixl
 257+ EB91                                  ClearCarryFlag
 257+ EB91 B7          >                        or a
 258+ EB92 ED 4A                            adc     hl,bc
 259+ EB94 C1                               pop     bc
 260+ EB95                                  JumpIfRegIsNotZero  h,.Plot7Done
 260+ EB95 7C          >                        ld      a,h
 260+ EB96 A7          >                        and     a
 260+ EB97 C2 AC EB    >                        jp	    nz,.Plot7Done
 261+ EB9A EB                               ex      de,hl
 262+ EB9B C5                               push    bc
 263+ EB9C 06 00                            ld      b,0
 264+ EB9E DD 4D                            ld      c,ixl
 265+ EBA0                                  ClearCarryFlag
 265+ EBA0 B7          >                        or a
 266+ EBA1 ED 42                            sbc     hl,bc
 267+ EBA3 C1                               pop     bc
 268+ EBA4                                  JumpIfRegIsNotZero  h,.Plot7Done
 268+ EBA4 7C          >                        ld      a,h
 268+ EBA5 A7          >                        and     a
 268+ EBA6 C2 AC EB    >                        jp	    nz,.Plot7Done
 269+ EBA9 CD E9 EB                         call	.PlotPixel	                    ; CY+X,CX-Y
 270+ EBAC E1 D1        .Plot7Done:         pop     de,,hl
 271+ EBAE EB           .Plot8:             ex      de,hl
 272+ EBAF E5 D5 C5                         push    hl,,de,,bc
 273+ EBB2 06 00                            ld      b,0
 274+ EBB4 DD 4D                            ld      c,ixl
 275+ EBB6                                  ClearCarryFlag
 275+ EBB6 B7          >                        or a
 276+ EBB7 ED 42                            sbc     hl,bc
 277+ EBB9 C1                               pop     bc
 278+ EBBA                                  JumpIfRegIsNotZero  h,.Plot8Done
 278+ EBBA 7C          >                        ld      a,h
 278+ EBBB A7          >                        and     a
 278+ EBBC C2 D1 EB    >                        jp	    nz,.Plot8Done
 279+ EBBF EB                               ex      de,hl
 280+ EBC0 C5                               push    bc
 281+ EBC1 06 00                            ld      b,0
 282+ EBC3 DD 4D                            ld      c,ixl
 283+ EBC5                                  ClearCarryFlag
 283+ EBC5 B7          >                        or a
 284+ EBC6 ED 42                            sbc     hl,bc
 285+ EBC8 C1                               pop     bc
 286+ EBC9                                  JumpIfRegIsNotZero  h,.Plot8Done
 286+ EBC9 7C          >                        ld      a,h
 286+ EBCA A7          >                        and     a
 286+ EBCB C2 D1 EB    >                        jp	    nz,.Plot8Done
 287+ EBCE CD E9 EB                         call	.PlotPixel	                    ; CY-X,CX-Y
 288+ EBD1 E1 D1        .Plot8Done:         pop     de,,hl
 289+ EBD3 D9           .PlotDone:          exx
 290+ EBD4 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
 291+ EBD6 28 03                            jr z,   .draw_circle_1
 292+ EBD8 19                               add hl,de			; Delta=Delta+D1
 293+ EBD9 18 05                            jr      .draw_circle_2		;
 294+ EBDB 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 295+ EBDC 03                               inc     bc
 296+ EBDD 03                               inc     bc				; D2=D2+2
 297+ EBDE DD 25                            dec     ixh				; Y=Y-1
 298+ EBE0 03           .draw_circle_2:		inc     bc				; D2=D2+2
 299+ EBE1 03                               inc     bc
 300+ EBE2 13                               inc     de				; D1=D1+2
 301+ EBE3 13                               inc     de
 302+ EBE4 DD 2C                            inc     ixl				; X=X+1
 303+ EBE6 C3 A3 EA                         jp      .CircleLoop
 304+ EBE9 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 305+ EBEB D5 C5 E5                         push	de,,bc,,hl
 306+ EBEE 45                               ld      b,l                     ; At this point de = x and hl = y
 307+ EBEF 4B                               ld      c,e
 308+ EBF0                                  l2_plot_macro; call 	l2_plot_pixel_y_test
 308+ EBF0 78          >                        ld      a,b
 308+ EBF1             >                        JumpIfAGTENusng 192 ,.NoPlot
 308+ EBF1 FE C0       >                        cp     192
 308+ EBF3 D2 FF EB    >                        jp		nc,.NoPlot
 308+ EBF6 69          >                        ld      l,c
 308+ EBF7 CD 68 E0    >                        call    asm_l2_row_bank_select
 308+ EBFA 67          >                        ld      h,a
 308+ EBFB 3A 03 ED    >                        ld      a,(line_gfx_colour)
 308+ EBFE 77          >                        ld      (hl),a
 308+ EBFF             >.NoPlot:
 309+ EBFF E1 C1 D1                         pop		de,,bc,,hl
 310+ EC02 C9                               ret
 311+ EC03 7B           .circleSinglepixel:  ld		a,e
 312+ EC04                                  l2_plot_macro; call	l2_plot_pixel_y_test
 312+ EC04 78          >                        ld      a,b
 312+ EC05             >                        JumpIfAGTENusng 192 ,.NoPlot
 312+ EC05 FE C0       >                        cp     192
 312+ EC07 D2 13 EC    >                        jp		nc,.NoPlot
 312+ EC0A 69          >                        ld      l,c
 312+ EC0B CD 68 E0    >                        call    asm_l2_row_bank_select
 312+ EC0E 67          >                        ld      h,a
 312+ EC0F 3A 03 ED    >                        ld      a,(line_gfx_colour)
 312+ EC12 77          >                        ld      (hl),a
 312+ EC13             >.NoPlot:
 313+ EC13 C9                               ret
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
 815  EC14                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ EC14
   2+ EC14 00           l2_circle_dblx		DB 0
   3+ EC15 00           l2_circle_dbly		DB 0
   4+ EC16
   5+ EC16              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ EC16              ; Note this code currently does not process BC
   7+ EC16 7B           l2_draw_circle_fill:    ld		a,e
   8+ EC17 32 AD EC                             ld		(.LineColour+1),a
   9+ EC1A 7A                                   ld		a,d								; get radius
  10+ EC1B A7                                   and		a
  11+ EC1C C8                                   ret		z
  12+ EC1D FE 01                                cp		1
  13+ EC1F CA 60 EA                             jp		z,CircleSinglepixel
  14+ EC22 ED 43 4C EC                          ld		(.Line1+1),bc					; save origin into DE reg in code
  15+ EC26 DD 67                                ld		ixh,a							; ixh = raidus (x)
  16+ EC28 DD 2E 00                             ld		ixl,0							; ihy = y
  17+ EC2B 26 00        .calcd:	                ld		h,0
  18+ EC2D 6F                                   ld		l,a
  19+ EC2E 29                                   add		hl,hl							; hl = r * 2
  20+ EC2F EB                                   ex		de,hl							; de = r * 2
  21+ EC30 21 03 00                             ld		hl,3
  22+ EC33 A7                                   and		a
  23+ EC34 ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  24+ EC36 44                                   ld		b,h
  25+ EC37 4D                                   ld		c,l								; bc = 3 - (r * 2)
  26+ EC38 21 01 00     .calcdelta              ld		hl,1
  27+ EC3B 16 00                                ld		d,0
  28+ EC3D DD 5D                                ld		e,ixl
  29+ EC3F A7                                   and		a
  30+ EC40 ED 52                                sbc		hl,de
  31+ EC42 11 01 00     .Setde1	                ld		de,1
  32+ EC45 DD 7C        .CircleLoop:            ld		a,ixh
  33+ EC47 DD BD                                cp		ixl
  34+ EC49 D8                                   ret		c
  35+ EC4A D9           .ProcessLoop:	        exx
  36+ EC4B 11 00 00     .Line1:                 ld		de,0
  37+ EC4E 7B                                   ld 		a,e
  38+ EC4F DD 95                                sub 	ixl
  39+ EC51 4F                                   ld 		c,a
  40+ EC52 7A                                   ld 		a,d
  41+ EC53 DD 84                                add 	a,ixh
  42+ EC55 47                                   ld		b,a
  43+ EC56                                      ;; TODO ADD DOUBLE X CALC
  44+ EC56 D5                                   push	de
  45+ EC57 DD 55                                ld		d,ixl
  46+ EC59 CB 22                                sla		d
  47+ EC5B CD A8 EC                             call	.PlotLine			;CX-X,CY+Y
  48+ EC5E D1                                   pop		de
  49+ EC5F 7B           .Line2:                 ld 		a,e
  50+ EC60 DD 95                                sub		ixl
  51+ EC62 4F                                   ld 		c,a
  52+ EC63 7A                                   ld 		a,d
  53+ EC64 DD 94                                sub 	ixh
  54+ EC66 47                                   ld 		b,a
  55+ EC67                                      ;; TODO ADD DOUBLE X CALC
  56+ EC67 D5                                   push	de
  57+ EC68 DD 55                                ld		d,ixl
  58+ EC6A CB 22                                sla		d
  59+ EC6C CD A8 EC                             call	.PlotLine			;CX-X,CY-Y
  60+ EC6F D1                                   pop		de
  61+ EC70 7B           .Line3:	                ld 		a,e
  62+ EC71 DD 94                                sub		ixh
  63+ EC73 4F                                   ld 		c,a
  64+ EC74 7A                                   ld 		a,d
  65+ EC75 DD 85                                add 	a,ixl
  66+ EC77 47                                   ld 		b,a
  67+ EC78                                      ;; TODO ADD DOUBLE Y CALC
  68+ EC78 D5                                   push	de
  69+ EC79 DD 54                                ld		d,ixh
  70+ EC7B CB 22                                sla		d
  71+ EC7D CD A8 EC                             call	.PlotLine			;CX-Y,CY+x
  72+ EC80 D1                                   pop		de
  73+ EC81 7B           .Line4:	                ld 		a,e
  74+ EC82 DD 94                                sub		ixh
  75+ EC84 4F                                   ld 		c,a
  76+ EC85 7A                                   ld 		a,d
  77+ EC86 DD 95                                sub 	ixl
  78+ EC88 47                                   ld 		b,a
  79+ EC89                                      ;; TODO ADD DOUBLE Y CALC
  80+ EC89 D5                                   push	de
  81+ EC8A DD 54                                ld		d,ixh
  82+ EC8C CB 22                                sla		d
  83+ EC8E CD A8 EC                             call	.PlotLine			;CX-Y,CY+x
  84+ EC91 D1                                   pop		de
  85+ EC92 D9                                   exx
  86+ EC93 CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  87+ EC95 28 03                                jr z,.draw_circle_1
  88+ EC97 19                                   add hl,de			; Delta=Delta+D1
  89+ EC98 18 05                                jr .draw_circle_2		;
  90+ EC9A 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  91+ EC9B 03                                   inc bc
  92+ EC9C 03                                   inc bc				; D2=D2+2
  93+ EC9D DD 25                                dec ixh				; Y=Y-1
  94+ EC9F 03           .draw_circle_2:		    inc bc				; D2=D2+2
  95+ ECA0 03                                   inc bc
  96+ ECA1 13                                   inc de				; D1=D1+2
  97+ ECA2 13                                   inc de
  98+ ECA3 DD 2C                                inc ixl				; X=X+1
  99+ ECA5 C3 45 EC                             jp .CircleLoop
 100+ ECA8 D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 101+ ECAC 3E 00        .LineColour:	        ld		a,0         ; circle colur
 102+ ECAE 5F                                   ld      e,a
 103+ ECAF CD 87 E4                             call 	l2_draw_horz_line
 104+ ECB2 F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 105+ ECB6 C9                                   ret
 106+ ECB7
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
 816  ECB7                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ ECB7              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ ECB7 08           l2_draw_any_line:       ex		af,af'              ; save colour into a'
   3+ ECB8 79                                   ld		a,c                 ; if x and e are the same its horizontal
   4+ ECB9 BB                                   cp		e
   5+ ECBA 28 08                                jr		z,.HorizontalLineCheck
   6+ ECBC 78                                   ld		a,b                 ; if b and d are the same its vertica;
   7+ ECBD BA                                   cp		d
   8+ ECBE 28 0E                                jr		z,.VerticalLine
   9+ ECC0              ; use jp and get a free ret instruction optimisation
  10+ ECC0 08           .DiagonalLine:		    ex		af,af'			     ; get colour back into a
  11+ ECC1 C3 57 E8                             jp		l2_draw_diagonal
  12+ ECC4
  13+ ECC4 78           .HorizontalLineCheck:   ld      a,b
  14+ ECC5 BA                                   cp      d
  15+ ECC6 28 0B                                jr      z, .SinglePixel
  16+ ECC8 08           .HorizontalLine:        ex		af,af'              ; get colour back into a
  17+ ECC9 53                                   ld		d,e				    ; set d as target right pixel
  18+ ECCA 5F                                   ld		e,a				    ; e holds colour on this call
  19+ ECCB C3 C0 E4                             jp		l2_draw_horz_line_to
  20+ ECCE 08           .VerticalLine:          ex		af,af'
  21+ ECCF 5F                                   ld		e,a				    ; e holds colour on this call
  22+ ECD0 C3 59 E5                             jp		l2_draw_vert_line_to
  23+ ECD3 08           .SinglePixel:           ex		af,af'              ; get colour back into a
  24+ ECD4                                      l2_plot_macro; jp      l2_plot_pixel
  24+ ECD4 78          >                        ld      a,b
  24+ ECD5             >                        JumpIfAGTENusng 192 ,.NoPlot
  24+ ECD5 FE C0       >                        cp     192
  24+ ECD7 D2 E3 EC    >                        jp		nc,.NoPlot
  24+ ECDA 69          >                        ld      l,c
  24+ ECDB CD 68 E0    >                        call    asm_l2_row_bank_select
  24+ ECDE 67          >                        ld      h,a
  24+ ECDF 3A 03 ED    >                        ld      a,(line_gfx_colour)
  24+ ECE2 77          >                        ld      (hl),a
  24+ ECE3             >.NoPlot:
  25+ ECE3 C9                                   ret
  26+ ECE4              ;......................................................
  27+ ECE4
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
 817  ECE4                  INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
# file opened: ./Layer2Graphics/clearLines-LL155.asm
   1+ ECE4              ; ClearLines (LL155)
   2+ ECE4              ;   y = 0
   3+ ECE4              ; 	XX20 = UbnkEdgeHeapSize
   4+ ECE4              ;   exit if XX20 < 4
   5+ ECE4              ;   ++y
   6+ ECE4              ;   do
   7+ ECE4              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ ECE4              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ ECE4              ;		++y
  10+ ECE4              ;	until Y > XX20
  11+ ECE4
  12+ ECE4              clearLines:
  13+ ECE4              layer2_clearLines:
  14+ ECE4 3A 22 C3     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ ECE7 47                                   ld		b,a
  16+ ECE8 21 30 C2                             ld		hl,UbnkLineArray
  17+ ECEB C5           clearLinesLoop:         push	bc
  18+ ECEC 7E                                   ld		a,(hl)
  19+ ECED 23                                   inc		hl
  20+ ECEE 4F                                   ld		c,a
  21+ ECEF 7E                                   ld		a,(hl)
  22+ ECF0 23                                   inc		hl
  23+ ECF1 47                                   ld		b,a
  24+ ECF2 7E                                   ld		a,(hl)
  25+ ECF3 23                                   inc		hl
  26+ ECF4 5F                                   ld		e,a
  27+ ECF5 7E                                   ld		a,(hl)
  28+ ECF6 23                                   inc		hl
  29+ ECF7 57                                   ld		d,a
  30+ ECF8 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ ECFA E5                                   push	hl
  32+ ECFB CD B7 EC                             call    l2_draw_any_line
  33+ ECFE E1                                   pop		hl
  34+ ECFF C1                                   pop		bc
  35+ ED00 10 E9                                djnz	clearLinesLoop
  36+ ED02 C9                                   ret
  37+ ED03
# file closed: ./Layer2Graphics/clearLines-LL155.asm
 818  ED03                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ ED03              ; ******************************************************************************
   2+ ED03              ;
   3+ ED03              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ ED03              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ ED03              ;
   6+ ED03              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ ED03              ;
   8+ ED03              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ ED03              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ ED03              ;	before using line drawing.
  11+ ED03              ;
  12+ ED03              ;	The routine checks the range of specified coordinates which is the
  13+ ED03              ;	boundaries of the graphics area (256x64	pixels).
  14+ ED03              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ ED03              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ ED03              ;	visible part will be drawn.
  17+ ED03              ;
  18+ ED03              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ ED03              ;
  20+ ED03              ;	The plot routine is	defined by an address pointer	in IX.
  21+ ED03              ;
  22+ ED03              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ ED03              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ ED03              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ ED03              ;
  26+ ED03              ;	OUT:	None.
  27+ ED03              ;
  28+ ED03              ;	Registers	used	by routine:
  29+ ED03              ;		   N	:	B, loop counter
  30+ ED03              ;		   i	:	line	balance variable
  31+ ED03              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ ED03              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ ED03              ;	  (x0,y0)	:	(h,l)
  34+ ED03              ;	  direc_x	:	d, horisontal step increment
  35+ ED03              ;	  direc_y	:	e, vertical step increment
  36+ ED03              ;		 ddx	:	b, horisontal step increment
  37+ ED03              ;		 ddy	:	c, vertical step increment
  38+ ED03              ;
  39+ ED03              ;		DE, A work registers.
  40+ ED03              ;
  41+ ED03              ; The algorithm in pseudo-code:
  42+ ED03              ;
  43+ ED03              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ ED03              ;	x = ABS x: y =	ABS y
  45+ ED03              ;
  46+ ED03              ;	if x	>= y
  47+ ED03              ;		if x+y=0 then return
  48+ ED03              ;		H = x
  49+ ED03              ;		L = y
  50+ ED03              ;		ddx = direc_x
  51+ ED03              ;		ddy = 0
  52+ ED03              ;	else
  53+ ED03              ;		H = y
  54+ ED03              ;		L = x
  55+ ED03              ;		ddx = 0
  56+ ED03              ;		ddy = direc_y
  57+ ED03              ;	endif
  58+ ED03              ;
  59+ ED03              ;	B = H
  60+ ED03              ;	i = INT(B/2)
  61+ ED03              ;	FOR N=B TO 1 STEP -1
  62+ ED03              ;		i = i + L
  63+ ED03              ;		if i	< H
  64+ ED03              ;			ix =	ddx
  65+ ED03              ;			iy =	ddy
  66+ ED03              ;		else
  67+ ED03              ;			i = i - H
  68+ ED03              ;			ix =	direc_x
  69+ ED03              ;			iy =	direc_y
  70+ ED03              ;		endif
  71+ ED03              ;		x0 =	x0 +	ix
  72+ ED03              ;		y0 =	y0 +	iy
  73+ ED03              ;		plot	(x0,y0)
  74+ ED03              ;	NEXT	N
  75+ ED03              ;
  76+ ED03              ;
  77+ ED03              ;	Registers	changed after return:
  78+ ED03              ;		..BCDEHL/IXIY/af......	same
  79+ ED03              ;		AF....../..../..bcdehl	different
  80+ ED03              ;
  81+ ED03 DF           line_gfx_colour db $DF
  82+ ED04 00 00        line_gfx_coords	dw 0
  83+ ED06              LineHLtoDE:
  84+ ED06 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ ED07 FE C0                                cp	192
  86+ ED09 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ ED0B 7A                                   ld	a,d
  88+ ED0C FE C0                                cp	192
  89+ ED0E 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ ED10 22 04 ED                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ ED13 E5                                   push	hl
  92+ ED14 D5                                   push	de
  93+ ED15 6C                                   ld	l,h				; L = x0
  94+ ED16 62                                   ld	h,d				; H = x1
  95+ ED17 7C           distanceX:		        ld	a,h
  96+ ED18 95                                   sub	l
  97+ ED19 6F                                   ld	l,a
  98+ ED1A 26 00                                ld	h,0
  99+ ED1C 30 02                                jr	nc, distanceXDone
 100+ ED1E 26 FF                                ld	h,-1
 101+ ED20 D1           distanceXDone:          pop	de
 102+ ED21 E3                                   ex	(sp),hl			; L = y0
 103+ ED22 63                                   ld	h,e				; H = y1
 104+ ED23 7C           distanceY:		        ld	a,h
 105+ ED24 95                                   sub	l
 106+ ED25 6F                                   ld	l,a
 107+ ED26 26 00                                ld	h,0
 108+ ED28 30 02                                jr	nc, distanceYDone
 109+ ED2A 26 FF                                ld	h,-1
 110+ ED2C D1           distanceYDone:          pop	de
 111+ ED2D EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ ED2E CD 32 ED                             call	DrawLineRelative			; draw line...
 113+ ED31 C9           exit_line:              ret
 114+ ED32
 115+ ED32              ; ***************************************************************************
 116+ ED32              ;
 117+ ED32              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ ED32              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ ED32              ;
 120+ ED32              ; OUT: h - l distance in	HL
 121+ ED32              ;
 122+ ED32
 123+ ED32 D5           DrawLineRelative:       push	de
 124+ ED33 E5                                   push	hl
 125+ ED34 D9                                   exx
 126+ ED35 E1                                   pop	hl					; get relative	horisontal movement
 127+ ED36 CD AD ED                             call	sgn
 128+ ED39 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ ED3A CD BA ED                             call	absValue
 130+ ED3D 45                                   ld	b,l					; x = ABS(x)
 131+ ED3E E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ ED3F CD AD ED                             call	sgn
 133+ ED42 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ ED43 CD BA ED                             call	absValue
 135+ ED46 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ ED47              ; so by here BC = dx dy HL in increment/decrement x y
 137+ ED47 C5                                   push	bc
 138+ ED48 D9                                   exx
 139+ ED49 E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ ED4A 7C                                   ld	a,h
 141+ ED4B BD                                   cp	l
 142+ ED4C 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ ED4E B4           areXandYZero:           or	h					;	if x+y = 0
 144+ ED4F 28 5B                                jr	z, exit_draw		;		return
 145+ ED51 D9           y_lessorequal_x:        exx						;	else
 146+ ED52 42                                   ld	b,d					;		ddx = direc_x
 147+ ED53 0E 00                                ld	c,0					;		ddy = 0
 148+ ED55 D9                                   exx
 149+ ED56 18 08                                jr	init_drawloop		; else
 150+ ED58 7C           x_smaller_y:	        ld	a,h
 151+ ED59 65                                   ld	h,l					;	H = y
 152+ ED5A 6F                                   ld	l,a					;	L = x
 153+ ED5B D9                                   exx
 154+ ED5C 06 00                                ld	b,0					;	ddx = 0
 155+ ED5E 4B                                   ld	c,e					;	ddy = direc_y
 156+ ED5F D9                                   exx
 157+ ED60 44           init_drawloop:	        ld	b,h
 158+ ED61 4C                                   ld	c,h					; B = H
 159+ ED62 CB 39                                srl	c					; i = INT(B/2)
 160+ ED64              										; FOR N=B	TO 1	STEP	-1
 161+ ED64 79           drawloop:		        ld	a,c
 162+ ED65 85                                   add	a,l
 163+ ED66 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ ED68 BC                                   cp	h
 165+ ED69 30 06                                jr	nc, i_greater		;	if i	< H
 166+ ED6B 4F                                   ld	c,a					;		i = i + L
 167+ ED6C D9                                   exx
 168+ ED6D C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ ED6E D9                                   exx
 170+ ED6F 18 05                                jr	check_plot			;	else
 171+ ED71 94           i_greater:		        sub	h					;		i = i - H
 172+ ED72 4F                                   ld	c,a
 173+ ED73 D9                                   exx
 174+ ED74 D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ ED75 D9                                   exx						;	endif
 176+ ED76 E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ ED77 EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ ED78 2A 04 ED                             ld	hl,(line_gfx_coords)
 179+ ED7B 7D                                   ld	a,l
 180+ ED7C 83                                   add	a,e					;
 181+ ED7D 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ ED7E 7A                                   ld	a,d
 183+ ED7F 3C                                   inc	a
 184+ ED80 84                                   add	a,h
 185+ ED81 38 04                                jr	c, check_range		;	check out	of range
 186+ ED83 28 26                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ ED85 18 02                                jr	plot_point
 188+ ED87 20 22        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ ED89
 190+ ED89 3D           plot_point:             dec	a
 191+ ED8A C5                                   push	bc
 192+ ED8B F5                                   push	af
 193+ ED8C 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ ED8D 4D                                   ld		c,l
 195+ ED8E 3A 03 ED                             ld		a,(line_gfx_colour)
 196+ ED91 ED 43 04 ED                          ld      (line_gfx_coords),bc
 197+ ED95                                      l2_plot_macro; call	l2_plot_pixel:
 197+ ED95 78          >                        ld      a,b
 197+ ED96             >                        JumpIfAGTENusng 192 ,.NoPlot
 197+ ED96 FE C0       >                        cp     192
 197+ ED98 D2 A4 ED    >                        jp		nc,.NoPlot
 197+ ED9B 69          >                        ld      l,c
 197+ ED9C CD 68 E0    >                        call    asm_l2_row_bank_select
 197+ ED9F 67          >                        ld      h,a
 197+ EDA0 3A 03 ED    >                        ld      a,(line_gfx_colour)
 197+ EDA3 77          >                        ld      (hl),a
 197+ EDA4             >.NoPlot:
 198+ EDA4 F1                                   pop		af
 199+ EDA5 C1                                   pop		bc
 200+ EDA6 E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ EDA7 10 BB                                djnz	drawloop		; NEXT N
 202+ EDA9 18 01                                jr	exit_draw
 203+ EDAB
 204+ EDAB E1           range_error:	        pop	hl					; remove H,L distances...
 205+ EDAC C9           exit_draw:		        ret
 206+ EDAD
 207+ EDAD
 208+ EDAD              ; ******************************************************************************
 209+ EDAD              ;
 210+ EDAD              ;	SGN (Signum value) of 16	bit signed integer.
 211+ EDAD              ;
 212+ EDAD              ;	IN:		HL =	integer
 213+ EDAD              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ EDAD              ;
 215+ EDAD              ;	Registers	changed after return:
 216+ EDAD              ;	..BCDEHL/IXIY	same
 217+ EDAD              ;	AF....../....	different
 218+ EDAD              ;
 219+ EDAD 7C           sgn:				    ld	a,h
 220+ EDAE B5                                   or	l
 221+ EDAF C8                                   ret	z				; integer	is zero, return 0...
 222+ EDB0 CB 7C                                bit	7,h
 223+ EDB2 20 03                                jr	nz, negative_int
 224+ EDB4 3E 01                                ld	a,1
 225+ EDB6 C9                                   ret
 226+ EDB7 3E FF        negative_int:		    ld	a,-1
 227+ EDB9 C9                                   ret
 228+ EDBA
 229+ EDBA
 230+ EDBA              ; ******************************************************************************
 231+ EDBA              ;
 232+ EDBA              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ EDBA              ;
 234+ EDBA              ;	IN:		HL =	integer
 235+ EDBA              ;	OUT:		HL =	converted	integer
 236+ EDBA              ;
 237+ EDBA              ;	Registers	changed after return:
 238+ EDBA              ;	A.BCDE../IXIY	same
 239+ EDBA              ;	.F....HL/....	different
 240+ EDBA              ;
 241+ EDBA CB 7C        absValue:			    bit	7,h
 242+ EDBC C8                                   ret	z				; integer	is positive...
 243+ EDBD D5                                   push	de
 244+ EDBE EB                                   ex	de,hl
 245+ EDBF 21 00 00                             ld	hl,0
 246+ EDC2 BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ EDC3 ED 52                                sbc	hl,de			; convert	negative integer
 248+ EDC5 D1                                   pop	de
 249+ EDC6 C9                                   ret
 250+ EDC7
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
 819  EDC7                  DISPLAY "Bank ",BankLAYER2," - Bytes free ",/D, $2000 - ($-LAYER2Addr), " - BankLAYER2"
 820  EDC7              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
 821  EDC7                  SLOT    LAYER1Addr
 822  EDC7                  PAGE    BankLAYER1
 823  EDC7                  ORG     LAYER1Addr, BankLAYER1
 824  E000
 825  E000                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD 32 7D                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
 826  E047                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls_top:             xor     a
   2+ E048 21 00 40                             ld      hl, $4000
   3+ E04B 11 00 08                             ld      de, $0800
   4+ E04E CD 32 7D                             call    memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_cls_mid:             xor     a
   8+ E053 21 00 48                             ld      hl, $4800
   9+ E056 11 00 08                             ld      de, $0800
  10+ E059 CD 32 7D                             call    memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D AF           l1_cls_bottom:          xor     a
  14+ E05E 21 00 50                             ld      hl, $5000
  15+ E061 11 00 08                             ld      de, $0800
  16+ E064 CD 32 7D                             call    memfill_dma
  17+ E067 C9                                   ret
  18+ E068
  19+ E068              ; Designed specifically to clear a whole character aligned line
  20+ E068 1E 00        l1_cls_line_d:          ld      e,0
  21+ E06A ED 94                                pixelad
  22+ E06C 11 00 01                             ld      de,32 * 8
  23+ E06F AF                                   xor     a
  24+ E070 CD 32 7D                             call    memfill_dma
  25+ E073 C9                                   ret
  26+ E074
  27+ E074              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E074 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E076 ED 94                                pixelad
  30+ E078 11 00 02                             ld      de,32 * 16
  31+ E07B AF                                   xor     a
  32+ E07C CD 32 7D                             call    memfill_dma
  33+ E07F C9                                   ret
  34+ E080
  35+ E080 AF           l1_cls:                 xor		a
  36+ E081 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E084 11 00 18                             ld		de, $1800
  38+ E087 CD 32 7D                             call	memfill_dma
  39+ E08A C9                                   ret
  40+ E08B
  41+ E08B 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E08E 1E 20                                ld      e,32
  43+ E090 ED 30                                mul
  44+ E092 19                                   add     hl,de
  45+ E093 11 40 00                             ld		de, 32 * 2
  46+ E096 CD 32 7D                             call	memfill_dma
  47+ E099 C9                                   ret
  48+ E09A
  49+ E09A
  50+ E09A AF           l1_attr_cls:            xor		a
  51+ E09B 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E09E 11 00 03                             ld		de, $0300
  53+ E0A1 CD 32 7D                             call	memfill_dma
  54+ E0A4 C9                                   ret
  55+ E0A5
  56+ E0A5 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0A8 ED 79                                out		(c),a
  58+ E0AA C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
 827  E0AB                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E0AB              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E0AB D5 E5        l1_print_char:          push	de,,hl
   3+ E0AD ED 94                                pixelad								; hl = address of de
   4+ E0AF E5                                   push	hl							; save hl for loop
   5+ E0B0 26 00                                ld		h,0
   6+ E0B2 6F                                   ld		l,a
   7+ E0B3 29                                   add		hl,hl						; * 2
   8+ E0B4 29                                   add		hl,hl						; * 4
   9+ E0B5 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0B6 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0BA EB                                   ex		de,hl						; save address into de
  12+ E0BB E1                                   pop		hl							; get back hl for loop
  13+ E0BC 06 08                                ld		b,8							; do 8 rows
  14+ E0BE 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0BF 13                                   inc		de							; next byte
  16+ E0C0 77                                   ld		(hl),a						; poke to screen
  17+ E0C1 ED 93                                pixeldn								; Down 1 row
  18+ E0C3 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0C5 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0C7 C9                                   ret
  21+ E0C8
  22+ E0C8              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0C8              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0C8              l1_print_at:
  25+ E0C8 7E           .PrintLoop:             ld		a,(hl)
  26+ E0C9 FE 00                                cp		0
  27+ E0CB C8                                   ret		z
  28+ E0CC                                      CallIfAGTENusng " ", l1_print_char
  28+ E0CC FE 20       >                        cp      " "
  28+ E0CE D4 AB E0    >                        call	nc,l1_print_char
  29+ E0D1 23                                   inc		hl							; move 1 message character right
  30+ E0D2 7B                                   ld		a,e
  31+ E0D3 C6 08                                add		a,8
  32+ E0D5 5F                                   ld		e,a							; move 1 screen character right
  33+ E0D6 18 F0                                jr		.PrintLoop
  34+ E0D8              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E0D8 C9                                   ret
  36+ E0D9
  37+ E0D9              ;l1_print_at_wrap:
  38+ E0D9              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E0D9              ;	ld      iyh,e
  40+ E0D9              ;.PrintLoop:
  41+ E0D9              ;	ld		a,(hl)
  42+ E0D9              ;	cp		0
  43+ E0D9              ;	ret		z
  44+ E0D9              ;.CountWordCharLen
  45+ E0D9              ;; Need to change to word wrap, so it will loop through string as before
  46+ E0D9              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E0D9              ;; if that is > 238 then force a premature line wrap
  48+ E0D9              ;
  49+ E0D9              ;
  50+ E0D9              ;    push    iy
  51+ E0D9              ;    call	l1_print_char
  52+ E0D9              ;    pop     iy
  53+ E0D9              ;	inc		hl							; move 1 message character right
  54+ E0D9              ;	ld		a,e
  55+ E0D9              ;    cp      238
  56+ E0D9              ;    jr      nc,.NextLine
  57+ E0D9              ;	add		a,8
  58+ E0D9              ;	ld		e,a							; move 1 screen character right
  59+ E0D9              ;	jr		.PrintLoop
  60+ E0D9              ;.Clearstackandfinish:
  61+ E0D9              ;	pop		de
  62+ E0D9              ;	ret
  63+ E0D9              ;.NextLine:
  64+ E0D9              ;    ld      a,(hl)
  65+ E0D9              ;    cp      " "
  66+ E0D9              ;    ld      e,iyh
  67+ E0D9              ;    ld      a,d
  68+ E0D9              ;    add     a,8
  69+ E0D9              ;    ld      d,a
  70+ E0D9              ;    jr		.PrintLoop
  71+ E0D9
  72+ E0D9              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E0D9 E5           L1LenWordAtHL:          push    hl
  74+ E0DA D5                                   push    de
  75+ E0DB 7E           .CountLoop:             ld      a,(hl)
  76+ E0DC FE 00                                cp      0
  77+ E0DE 28 0F                                jr      z,.CountDone
  78+ E0E0 FE 20                                cp      32
  79+ E0E2 28 0B                                jr      z,.CountDone
  80+ E0E4 7B                                   ld      a,e
  81+ E0E5 C6 08                                add     a,8
  82+ E0E7 5F                                   ld      e,a
  83+ E0E8 FE EE                                cp      238
  84+ E0EA 30 07                                jr      nc,.TooLong
  85+ E0EC 23                                   inc     hl
  86+ E0ED 18 EC                                jr      .CountLoop
  87+ E0EF D1           .CountDone:             pop     de
  88+ E0F0 E1                                   pop     hl
  89+ E0F1 AF                                   xor     a
  90+ E0F2 C9                                   ret
  91+ E0F3 D1           .TooLong                pop     de
  92+ E0F4 E1                                   pop     hl
  93+ E0F5 3E FF                                ld      a,$FF
  94+ E0F7 C9                                   ret
  95+ E0F8
  96+ E0F8 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0F9 FE 00                                cp      0
  98+ E0FB C8                                   ret     z
  99+ E0FC FE 20                                cp      32
 100+ E0FE 28 0F                                jr      z,.ItsASpace
 101+ E100 FD E5                                push    iy
 102+ E102 CD AB E0                             call	l1_print_char
 103+ E105 FD E1                                pop     iy
 104+ E107 7B                                   ld      a,e
 105+ E108 C6 08                                add     a,8
 106+ E10A 5F                                   ld      e,a
 107+ E10B 23                                   inc     hl
 108+ E10C C3 F8 E0                             jp      L1PrintWordAtHL
 109+ E10F 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E110 7B                                   ld      a,e
 111+ E111 C6 08                                add     a,8
 112+ E113 5F                                   ld      e,a
 113+ E114 C9                                   ret
 114+ E115
 115+ E115
 116+ E115              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E115              ; Now has full word level wrapping
 118+ E115 FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E117 7E           .PrintLoop:             ld		a,(hl)
 120+ E118 FE 00                                cp		0
 121+ E11A C8                                   ret		z
 122+ E11B CD D9 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E11E FE FF                                cp      $FF
 124+ E120 28 06                                jr      z,.WrapNextLine
 125+ E122 CD F8 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E125              ; Need to change to word wrap, so it will loop through string as before
 127+ E125              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E125              ; if that is > 238 then force a premature line wrap
 129+ E125 18 F0                                jr		.PrintLoop
 130+ E127              .Clearstackandfinish:   ;op		de
 131+ E127 C9                                   ret
 132+ E128              .WrapNextLine:
 133+ E128 FD 5C        .NextLine:              ld      e,iyh
 134+ E12A 7A                                   ld      a,d
 135+ E12B C6 08                                add     a,8
 136+ E12D 57                                   ld      d,a
 137+ E12E 18 E7                                jr		.PrintLoop
 138+ E130
 139+ E130
# file closed: ./Layer1Graphics/layer1_print_at.asm
 828  E130                  DISPLAY "Bank ",BankLAYER1," - Bytes free ",/D, $2000 - ($-LAYER1Addr), " - BankLAYER1"
 829  E130              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
 830  E130              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
 831  E130              ; as the is aligned and data tables are after that
 832  E130              ; need to make the ship index tables same size in each to simplify further
 833  E130                  SLOT    ShipModelsAddr
 834  E130                  PAGE    BankShipModels1
 835  E130              	ORG     ShipModelsAddr, BankShipModels1
 836  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyEdgesToUniverse:   MACRO
  47+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  48+ E000 ~                                    ld          de,UBnkHullEdges
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(LineX4Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyNormsToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullNormals
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld          a,(FaceCtX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              ; Passes in ship nbr in A and bank is part of MACRO
  69+ E000              MCopyShipToUniverse:    MACRO       banklabel
  70+ E000 ~                                    ld          hl,UBnkShipModelBank
  71+ E000 ~                                    ld          (hl),banklabel
  72+ E000 ~                                    push        af
  73+ E000 ~                                    ld          a,iyl
  74+ E000 ~                                    ld          (UBnKShipModelId),a
  75+ E000 ~                                    pop         af
  76+ E000 ~                                    ld          (UBnKShipModelNbr),a
  77+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
  78+ E000 ~                                    add         hl,a
  79+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
  80+ E000 ~                                    ld          c,(hl)
  81+ E000 ~                                    inc         hl
  82+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
  83+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
  84+ E000 ~                                    add         hl,a
  85+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
  86+ E000 ~                                    ld          a,(hl)
  87+ E000 ~                                    inc         hl
  88+ E000 ~                                    ld          h,(hl)
  89+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
  90+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
  91+ E000 ~                                    ld          bc,ShipDataLength
  92+ E000 ~                                    ldir
  93+ E000 ~                                    call        CopyVertsToUniv
  94+ E000 ~                                    call        CopyEdgesToUniv
  95+ E000 ~                                    call        CopyNormsToUniv
  96+ E000 ~            .ClearName:             ld          hl,StartOfUnivName
  97+ E000 ~                                    ld          a," "
  98+ E000 ~                                    ld          b,16
  99+ E000 ~            .fillLoop:              ld          (hl),a
 100+ E000 ~                                    inc         hl
 101+ E000 ~                                    djnz        .fillLoop
 102+ E000 ~            .SetName:               ld          a,(UBnKShipModelId)
 103+ E000 ~                                    call        ShipIndexToAddress
 104+ E000 ~                                    ld          de,StartOfUnivName
 105+ E000 ~                                    ld          b,16
 106+ E000 ~            .CopyLoop:              ld          a,(hl)
 107+ E000 ~                                    cp          0
 108+ E000 ~                                    jr          z,.CopyDone
 109+ E000 ~                                    ld          (de),a
 110+ E000 ~                                    inc         hl
 111+ E000 ~                                    inc         de
 112+ E000 ~                                    djnz        .CopyLoop
 113+ E000 ~            .CopyDone:              ret
 114+ E000                                      ENDM
 115+ E000
 116+ E000              MCopyBodyToUniverse:    MACRO       copyRoutine
 117+ E000 ~                                    ld          a,13
 118+ E000 ~                                    call        copyRoutine
 119+ E000 ~                                    ret
 120+ E000                                      ENDM
 121+ E000
 122+ E000
 123+ E000              MCopyShipIdToUniverse:  MACRO
 124+ E000 ~                                    call        GetShipModelId
 125+ E000 ~                                    MMUSelectShipBankA
 126+ E000 ~                                    ld          a,b
 127+ E000 ~                                    jp          CopyShipToUniverse
 128+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
 837  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
 838  E00F              GetShipBankId:
 839  E00F              GetShipBank1Id:         MGetShipBankId ShipBankTable
 839  E00F 06 00       >                        ld      b,0
 839  E011 4F          >                        ld      c,a                                 ; c= original ship id
 839  E012 CB 3F       >.ShiftLoop:             srl     a
 839  E014 CB 3F       >                        srl     a
 839  E016 CB 3F       >                        srl     a
 839  E018 CB 3F       >                        srl     a                                   ; divide by 16
 839  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 839  E01B 79          >                        ld      a,c
 839  E01C 50          >                        ld      d,b
 839  E01D 1E 10       >                        ld      e,16
 839  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 839  E021 93          >                        sub     e                                   ; a= actual model id now
 839  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 839  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 839  E024 7A          >                        ld      a,d                                 ; a = bank number
 839  E025             >;.. Now b = bank and a = adjusted ship nbr
 839  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
 839  E028 ED 31       >                        add     hl,a
 839  E02A ED 31       >                        add     hl,a
 839  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 839  E02D             >                        ClearCarryFlag
 839  E02D B7          >                        or a
 839  E02E C9          >                        ret
 840  E02F              CopyVertsToUniv:
 841  E02F              CopyVertsToUniv1:       McopyVertsToUniverse
 841  E02F 2A 43 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 841  E032 11 49 C3    >                        ld          de,UBnkHullVerticies
 841  E035 06 00       >                        ld          b,0
 841  E037 3A 37 C3    >                        ld			a,(VertexCtX6Addr)
 841  E03A 4F          >                        ld          c,a
 841  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 841  E03C CD 58 7D    >                        call        memcopy_dma
 841  E03F C9          >                        ret
 842  E040              CopyEdgesToUniv:
 843  E040              CopyEdgesToUniv1:       McopyEdgesToUniverse
 843  E040 2A 31 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 843  E043 11 39 C4    >                        ld          de,UBnkHullEdges
 843  E046 06 00       >                        ld          b,0
 843  E048 3A 33 C3    >                        ld			a,(LineX4Addr)
 843  E04B 4F          >                        ld          c,a
 843  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 843  E04D CD 58 7D    >                        call        memcopy_dma
 843  E050 C9          >                        ret
 844  E051              CopyNormsToUniv:
 845  E051              CopyNormsToUniv1:       McopyNormsToUniverse
 845  E051 2A 3F C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 845  E054 11 01 C5    >                        ld          de,UBnkHullNormals
 845  E057 06 00       >                        ld          b,0
 845  E059 3A 3B C3    >                        ld          a,(FaceCtX4Addr)
 845  E05C 4F          >                        ld          c,a
 845  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 845  E05E CD 58 7D    >                        call        memcopy_dma
 845  E061 C9          >                        ret
 846  E062              ShipBankTable:
 847  E062              ShipBankTable1:         MShipBankTable
 847  E062 3B 00       >                        DW      BankShipModels1
 847  E064 43 00       >                        DW      BankShipModels2
 847  E066 44 00       >                        DW      BankShipModels3
 847  E068 45 00       >                        DW      BankShipModels4
 848  E06A              CopyShipToUniverse:
 849  E06A              CopyShipToUniverse1     MCopyShipToUniverse     BankShipModels1
 849  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
 849  E06D 36 3B       >                        ld          (hl),BankShipModels1
 849  E06F F5          >                        push        af
 849  E070 FD 7D       >                        ld          a,iyl
 849  E072 32 43 C0    >                        ld          (UBnKShipModelId),a
 849  E075 F1          >                        pop         af
 849  E076 32 42 C0    >                        ld          (UBnKShipModelNbr),a
 849  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 849  E07C ED 31       >                        add         hl,a
 849  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 849  E080 4E          >                        ld          c,(hl)
 849  E081 23          >                        inc         hl
 849  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 849  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 849  E086 ED 31       >                        add         hl,a
 849  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 849  E08A 7E          >                        ld          a,(hl)
 849  E08B 23          >                        inc         hl
 849  E08C 66          >                        ld          h,(hl)
 849  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 849  E08E 11 2E C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 849  E091 01 1B 00    >                        ld          bc,ShipDataLength
 849  E094 ED B0       >                        ldir
 849  E096 CD 2F E0    >                        call        CopyVertsToUniv
 849  E099 CD 40 E0    >                        call        CopyEdgesToUniv
 849  E09C CD 51 E0    >                        call        CopyNormsToUniv
 849  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
 849  E0A2 3E 20       >                        ld          a," "
 849  E0A4 06 10       >                        ld          b,16
 849  E0A6 77          >.fillLoop:              ld          (hl),a
 849  E0A7 23          >                        inc         hl
 849  E0A8 10 FC       >                        djnz        .fillLoop
 849  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnKShipModelId)
 849  E0AD CD B7 91    >                        call        ShipIndexToAddress
 849  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
 849  E0B3 06 10       >                        ld          b,16
 849  E0B5 7E          >.CopyLoop:              ld          a,(hl)
 849  E0B6 FE 00       >                        cp          0
 849  E0B8 28 05       >                        jr          z,.CopyDone
 849  E0BA 12          >                        ld          (de),a
 849  E0BB 23          >                        inc         hl
 849  E0BC 13          >                        inc         de
 849  E0BD 10 F6       >                        djnz        .CopyLoop
 849  E0BF C9          >.CopyDone:              ret
 850  E0C0              CopyBodyToUniverse:
 851  E0C0              CopyBodyToUniverse1:    MCopyBodyToUniverse     CopyShipToUniverse1
 851  E0C0 3E 0D       >                        ld          a,13
 851  E0C2 CD 6A E0    >                        call        CopyShipToUniverse1
 851  E0C5 C9          >                        ret
 852  E0C6                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E0C6              ShipModelTable:
   2+ E0C6 66 E1        ShipModelTable1:         DW Adder                                   ;00 $00
   3+ E0C8 9D E2                                 DW Anaconda                                ;01 $01
   4+ E0CA A6 E3                                 DW Asp_Mk_2                                ;02 $02
   5+ E0CC D3 E4                                 DW Boa                                     ;03 $03
   6+ E0CE CC E5                                 DW CargoType5                              ;04 $04
   7+ E0D0 7B E6                                 DW Boulder                                 ;05 $05
   8+ E0D2 24 E7                                 DW Asteroid                                ;06 $06
   9+ E0D4 01 E8                                 DW Bushmaster                              ;07 $07
  10+ E0D6 D4 E8                                 DW Chameleon                               ;08 $08
  11+ E0D8 02 EA                                 DW CobraMk3                                ;09 $09
  12+ E0DA 91 EB                                 DW Cobra_Mk_1                              ;10 $0A
  13+ E0DC 5E EC                                 DW Cobra_Mk_3_P                            ;11 $0B
  14+ E0DE ED ED                                 DW Constrictor                             ;12 $0C
  15+ E0E0 F6 EE                                 DW Coriolis                                ;13 $0D
  16+ E0E2 19 F0                                 DW Cougar                                  ;14 $0E
  17+ E0E4 22 F1                                 DW Dodo                                    ;15 $0F
  18+ E0E6              ShipVertexTable:
  19+ E0E6 81 E1        ShipVertexTable1:        DW AdderVertices                           ;00 $00
  20+ E0E8 B8 E2                                 DW AnacondaVertices                        ;01 $01
  21+ E0EA C1 E3                                 DW Asp_Mk_2Vertices                        ;02 $02
  22+ E0EC EE E4                                 DW BoaVertices                             ;03 $03
  23+ E0EE E7 E5                                 DW CargoType5Vertices                      ;04 $04
  24+ E0F0 96 E6                                 DW BoulderVertices                         ;05 $05
  25+ E0F2 3F E7                                 DW AsteroidVertices                        ;06 $06
  26+ E0F4 1C E8                                 DW BushmasterVertices                      ;07 $07
  27+ E0F6 EE E8                                 DW ChameleonVertices                       ;08 $08
  28+ E0F8 1D EA                                 DW CobraMk3Vertices                        ;09 $09
  29+ E0FA AC EB                                 DW Cobra_Mk_1Vertices                      ;10 $0A
  30+ E0FC 79 EC                                 DW Cobra_Mk_3_PVertices                    ;11 $0B
  31+ E0FE 08 EE                                 DW ConstrictorVertices                     ;12 $0C
  32+ E100 11 EF                                 DW CoriolisVertices                        ;13 $0D
  33+ E102 34 F0                                 DW CougarVertices                          ;14 $0E
  34+ E104 3D F1                                 DW DodoVertices                            ;15 $0F
  35+ E106              ShipEdgeTable:
  36+ E106 ED E1        ShipEdgeTable1:          DW AdderEdges                              ;00 $00
  37+ E108 12 E3                                 DW AnacondaEdges                           ;01 $01
  38+ E10A 33 E4                                 DW Asp_Mk_2Edges                           ;02 $02
  39+ E10C 3C E5                                 DW BoaEdges                                ;03 $03
  40+ E10E 23 E6                                 DW CargoType5Edges                         ;04 $04
  41+ E110 C0 E6                                 DW BoulderEdges                            ;05 $05
  42+ E112 75 E7                                 DW AsteroidEdges                           ;06 $06
  43+ E114 64 E8                                 DW BushmasterEdges                         ;07 $07
  44+ E116 5A E9                                 DW ChameleonEdges                          ;08 $08
  45+ E118 C5 EA                                 DW CobraMk3Edges                           ;09 $09
  46+ E11A EE EB                                 DW Cobra_Mk_1Edges                         ;10 $0A
  47+ E11C 21 ED                                 DW Cobra_Mk_3_PEdges                       ;11 $0B
  48+ E11E 6E EE                                 DW ConstrictorEdges                        ;12 $0C
  49+ E120 71 EF                                 DW CoriolisEdges                           ;13 $0D
  50+ E122 A6 F0                                 DW CougarEdges                             ;14 $0E
  51+ E124 CD F1                                 DW DodoEdges                               ;15 $0F
  52+ E126              ShipNormalTable:
  53+ E126 61 E2        ShipNormalTable1:        DW AdderNormals                            ;00 $00
  54+ E128 76 E3                                 DW AnacondaNormals                         ;01 $01
  55+ E12A A3 E4                                 DW Asp_Mk_2Normals                         ;02 $02
  56+ E12C 9C E5                                 DW BoaNormals                              ;03 $03
  57+ E12E 5F E6                                 DW CargoType5Normals                       ;04 $04
  58+ E130 FC E6                                 DW BoulderNormals                          ;05 $05
  59+ E132 C9 E7                                 DW AsteroidNormals                         ;06 $06
  60+ E134 B0 E8                                 DW BushmasterNormals                       ;07 $07
  61+ E136 CE E9                                 DW ChameleonNormals                        ;08 $08
  62+ E138 5D EB                                 DW CobraMk3Normals                         ;09 $09
  63+ E13A 36 EC                                 DW Cobra_Mk_1Normals                       ;10 $0A
  64+ E13C B9 ED                                 DW Cobra_Mk_3_PNormals                     ;11 $0B
  65+ E13E CE EE                                 DW ConstrictorNormals                      ;12 $0C
  66+ E140 E1 EF                                 DW CoriolisNormals                         ;13 $0D
  67+ E142 0A F1                                 DW CougarNormals                           ;14 $0E
  68+ E144 55 F2                                 DW DodoNormals                             ;15 $0F
  69+ E146              ShipModelSizeTable:
  70+ E146 37 01        ShipModelSizeTable1:     DW AdderLen                                ;00 $00
  71+ E148 09 01                                 DW AnacondaLen                             ;01 $01
  72+ E14A 2D 01                                 DW Asp_Mk_2Len                             ;02 $02
  73+ E14C F9 00                                 DW BoaLen                                  ;03 $03
  74+ E14E AF 00                                 DW CargoType5Len                           ;04 $04
  75+ E150 A9 00                                 DW BoulderLen                              ;05 $05
  76+ E152 DD 00                                 DW AsteroidLen                             ;06 $06
  77+ E154 D3 00                                 DW BushmasterLen                           ;07 $07
  78+ E156 2E 01                                 DW ChameleonLen                            ;08 $08
  79+ E158 8F 01                                 DW CobraMk3Len                             ;09 $09
  80+ E15A CD 00                                 DW Cobra_Mk_1Len                           ;10 $0A
  81+ E15C 8F 01                                 DW Cobra_Mk_3_PLen                         ;11 $0B
  82+ E15E 09 01                                 DW ConstrictorLen                          ;12 $0C
  83+ E160 23 01                                 DW CoriolisLen                             ;13 $0D
  84+ E162 09 01                                 DW CougarLen                               ;14 $0E
  85+ E164 63 01                                 DW DodoLen                                 ;15 $0F
  86+ E166
  87+ E166                                      include "Data/ships/Adder.asm"
# file opened: ./Data/ships/Adder.asm
   1++E166 00           Adder:	                DB $00                              ; Number of cargo canisters released when destroyed
   2++E167 C4 09                                DW 50 * 50                          ; Ship's targetable area LoHi
   3++E169 ED E1                                DW AdderEdges                       ; Edge Data
   4++E16B 74                                   DB AdderEdgesSize                   ; Size of Edge Data
   5++E16C 00                                   DB $00                              ; Gun Vertex Byte offset
   6++E16D 16                                   DB $16                              ; Explosion Count
   7++E16E 12                                   DB AdderVertSize / 6                ; Vertex Count /6
   8++E16F 6C                                   DB AdderVertSize                    ; Vertex Count
   9++E170 1D                                   DB AdderEdgesCnt                    ; Edges Count
  10++E171 28 00                                DW $0028                            ; Bounty LoHi
  11++E173 3C                                   DB AdderNormalsSize                 ; Face (Normal) Count
  12++E174 17                                   DB $17                              ; Range when it turns to a dot
  13++E175 48                                   DB $48                              ; Energy Max
  14++E176 18                                   DB $18                              ; Speed Max
  15++E177 61 E2                                DW AdderNormals                     ; Normals
  16++E179 12                                   DB $12                              ; Q scaling
  17++E17A 21                                   DB $21                              ; Laser power and Nbr Missiles
  18++E17B 81 E1                                DW AdderVertices                    ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                   ; Ship Type
  20++E17E 00                                   DB 0                                ; NewB Tactics
  21++E17F 80                                   DB ShipCanAnger                     ; AI Flags
  22++E180 80                                   DB $80                              ; chance of ECM module
  23++E181                                                     ; chance of ECM module
  24++E181 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC     ;01
  24++E185 01 BC
  25++E187 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23     ;02
  25++E18B 01 23
  26++E18D 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45     ;03
  26++E191 23 45
  27++E193 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66     ;04
  27++E197 45 66
  28++E199 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E     ;05
  28++E19D 56 7E
  29++E19F 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE     ;06
  29++E1A3 78 AE
  30++E1A5 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA     ;07
  30++E1A9 89 AA
  31++E1AB 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC     ;08
  31++E1AF 9A BC
  32++E1B1 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D     ;09
  32++E1B5 78 9D
  33++E1B7 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D     ;10
  33++E1BB 46 7D
  34++E1BD 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD     ;11
  34++E1C1 09 BD
  35++E1C3 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D     ;12
  35++E1C7 02 4D
  36++E1C9 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE     ;13
  36++E1CD 1A CE
  37++E1CF 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E     ;14
  37++E1D3 13 5E
  38++E1D5 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00     ;15
  38++E1D9 00 00
  39++E1DB 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00     ;16
  39++E1DF 00 00
  40++E1E1 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00     ;17
  40++E1E5 00 00
  41++E1E7 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00     ;18
  41++E1EB 00 00
  42++E1ED              AdderVertSize:          equ $ - AdderVertices
  43++E1ED 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04               ;01
  44++E1F1 07 23 04 08                          DB $07, $23, $04, $08               ;02
  45++E1F5 1F 45 08 0C                          DB $1F, $45, $08, $0C               ;03
  46++E1F9 1F 56 0C 10                          DB $1F, $56, $0C, $10               ;04
  47++E1FD 1F 7E 10 14                          DB $1F, $7E, $10, $14               ;05
  48++E201 1F 8A 14 18                          DB $1F, $8A, $14, $18               ;06
  49++E205 1F 9A 18 1C                          DB $1F, $9A, $18, $1C               ;07
  50++E209 07 BC 1C 00                          DB $07, $BC, $1C, $00               ;08
  51++E20D 1F 46 0C 24                          DB $1F, $46, $0C, $24               ;09
  52++E211 1F 7D 24 20                          DB $1F, $7D, $24, $20               ;10
  53++E215 1F 89 20 18                          DB $1F, $89, $20, $18               ;11
  54++E219 1F 0B 00 28                          DB $1F, $0B, $00, $28               ;12
  55++E21D 1F 9B 1C 28                          DB $1F, $9B, $1C, $28               ;13
  56++E221 1F 02 04 2C                          DB $1F, $02, $04, $2C               ;14
  57++E225 1F 24 08 2C                          DB $1F, $24, $08, $2C               ;15
  58++E229 1F 1C 00 30                          DB $1F, $1C, $00, $30               ;16
  59++E22D 1F AC 1C 30                          DB $1F, $AC, $1C, $30               ;17
  60++E231 1F 13 04 34                          DB $1F, $13, $04, $34               ;18
  61++E235 1F 35 08 34                          DB $1F, $35, $08, $34               ;19
  62++E239 1F 0D 28 2C                          DB $1F, $0D, $28, $2C               ;20
  63++E23D 1F 1E 30 34                          DB $1F, $1E, $30, $34               ;21
  64++E241 1F 9D 20 28                          DB $1F, $9D, $20, $28               ;22
  65++E245 1F 4D 24 2C                          DB $1F, $4D, $24, $2C               ;23
  66++E249 1F AE 14 30                          DB $1F, $AE, $14, $30               ;24
  67++E24D 1F 5E 10 34                          DB $1F, $5E, $10, $34               ;25
  68++E251 05 00 38 3C                          DB $05, $00, $38, $3C               ;26
  69++E255 03 00 3C 40                          DB $03, $00, $3C, $40               ;27
  70++E259 04 00 40 44                          DB $04, $00, $40, $44               ;28
  71++E25D 03 00 44 38                          DB $03, $00, $44, $38               ;29
  72++E261              AdderEdgesSize:         equ $ - AdderEdges
  73++E261              AdderEdgesCnt:          equ AdderEdgesSize/4
  74++E261 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A               ;01
  75++E265 5F 00 27 0A                          DB $5F, $00, $27, $0A               ;02
  76++E269 1F 45 32 0D                          DB $1F, $45, $32, $0D               ;03
  77++E26D 5F 45 32 0D                          DB $5F, $45, $32, $0D               ;04
  78++E271 1F 1E 34 00                          DB $1F, $1E, $34, $00               ;05
  79++E275 5F 1E 34 00                          DB $5F, $1E, $34, $00               ;06
  80++E279 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;07
  81++E27D 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;08
  82++E281 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;09
  83++E285 9F 1E 34 00                          DB $9F, $1E, $34, $00               ;10
  84++E289 DF 1E 34 00                          DB $DF, $1E, $34, $00               ;11
  85++E28D 9F 45 32 0D                          DB $9F, $45, $32, $0D               ;12
  86++E291 DF 45 32 0D                          DB $DF, $45, $32, $0D               ;13
  87++E295 1F 00 1C 00                          DB $1F, $00, $1C, $00               ;14
  88++E299 5F 00 1C 00                          DB $5F, $00, $1C, $00               ;15
  89++E29D
  90++E29D              AdderNormalsSize:       equ $ - AdderNormals
  91++E29D              AdderLen:                equ $ - Adder
  92++E29D
  93++E29D
  94++E29D
  95++E29D
  96++E29D
  97++E29D
  98++E29D
  99++E29D
 100++E29D
 101++E29D
 102++E29D
# file closed: ./Data/ships/Adder.asm
  88+ E29D                                      include "Data/ships/Anaconda.asm"
# file opened: ./Data/ships/Anaconda.asm
   1++E29D 07           Anaconda:	            DB $07                                                        ; Number of cargo canisters released when destroyed
   2++E29E 10 27                                DW 100 * 100                                                  ; Ship's targetable area LoHi
   3++E2A0 12 E3                                DW AnacondaEdges                                              ; Edge Data
   4++E2A2 64                                   DB AnacondaEdgesSize                                          ; Size of Edge Data
   5++E2A3 30                                   DB $30                                                        ; Gun Vertex Byte offset
   6++E2A4 2E                                   DB $2E                                                        ; Explosion Count
   7++E2A5 0F                                   DB AnacondaVertSize / 6                                       ; Vertex Count /6
   8++E2A6 5A                                   DB AnacondaVertSize                                           ; Vertex Count
   9++E2A7 19                                   DB AnacondaEdgesCnt                                           ; Edges Count
  10++E2A8 00 00                                DW $0000                                                      ; Bounty LoHi
  11++E2AA 30                                   DB AnacondaNormalsSize                                        ; Face (Normal) Count
  12++E2AB 24                                   DB $24                                                        ; Range when it turns to a dot
  13++E2AC FC                                   DB $FC                                                        ; Energy Max
  14++E2AD 0E                                   DB $0E                                                        ; Speed Max
  15++E2AE 76 E3                                DW AnacondaNormals                                            ; Normals
  16++E2B0 11                                   DB $11                                                        ; Q scaling
  17++E2B1 3F                                   DB $3F                                                        ; Laser power and Nbr Missiles
  18++E2B2 B8 E2                                DW AnacondaVertices                                           ; Verticles Address
  19++E2B4 00                                   DB ShipTypeNormal                                             ; Ship Type
  20++E2B5 00                                   DB 0                                                          ; NewB Tactics
  21++E2B6 A4                                   DB ShipCanAnger | ShipFighterBaySize2 | ShipFighterSidewinder ; AI Flags
  22++E2B7 D0                                   DB $D0                                                        ; chance of ECM module
  23++E2B8 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55 ;01
  23++E2BC 01 55
  24++E2BE 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22 ;02
  24++E2C2 01 22
  25++E2C4 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33 ;03
  25++E2C8 02 33
  26++E2CA 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44 ;04
  26++E2CE 03 44
  27++E2D0 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55 ;05
  27++E2D4 04 55
  28++E2D6 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66 ;06
  28++E2DA 15 66
  29++E2DC 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77 ;07
  29++E2E0 12 77
  30++E2E2 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88 ;08
  30++E2E6 23 88
  31++E2E8 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99 ;09
  31++E2EC 34 99
  32++E2EE 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA ;10
  32++E2F2 45 AA
  33++E2F4 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF ;11
  33++E2F8 FF FF
  34++E2FA 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88 ;12
  34++E2FE 27 88
  35++E300 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF ;13
  35++E304 FF FF
  36++E306 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA ;14
  36++E30A 49 AA
  37++E30C 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF ;15
  37++E310 FF FF
  38++E312              AnacondaVertSize:       equ $ - AnacondaVertices
  39++E312 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04           ;01
  40++E316 1E 02 04 08                          DB $1E, $02, $04, $08           ;02
  41++E31A 1E 03 08 0C                          DB $1E, $03, $08, $0C           ;03
  42++E31E 1E 04 0C 10                          DB $1E, $04, $0C, $10           ;04
  43++E322 1E 05 00 10                          DB $1E, $05, $00, $10           ;05
  44++E326 1D 15 00 14                          DB $1D, $15, $00, $14           ;06
  45++E32A 1D 12 04 18                          DB $1D, $12, $04, $18           ;07
  46++E32E 1D 23 08 1C                          DB $1D, $23, $08, $1C           ;08
  47++E332 1D 34 0C 20                          DB $1D, $34, $0C, $20           ;09
  48++E336 1D 45 10 24                          DB $1D, $45, $10, $24           ;10
  49++E33A 1E 16 14 28                          DB $1E, $16, $14, $28           ;11
  50++E33E 1E 17 18 28                          DB $1E, $17, $18, $28           ;12
  51++E342 1E 27 18 2C                          DB $1E, $27, $18, $2C           ;13
  52++E346 1E 28 1C 2C                          DB $1E, $28, $1C, $2C           ;14
  53++E34A 1F 38 1C 30                          DB $1F, $38, $1C, $30           ;15
  54++E34E 1F 39 20 30                          DB $1F, $39, $20, $30           ;16
  55++E352 1E 49 20 34                          DB $1E, $49, $20, $34           ;17
  56++E356 1E 4A 24 34                          DB $1E, $4A, $24, $34           ;18
  57++E35A 1E 5A 24 38                          DB $1E, $5A, $24, $38
  58++E35E 1E 56 14 38                          DB $1E, $56, $14, $38
  59++E362 1E 6B 28 38                          DB $1E, $6B, $28, $38
  60++E366 1F 7B 28 30                          DB $1F, $7B, $28, $30
  61++E36A 1F 78 2C 30                          DB $1F, $78, $2C, $30
  62++E36E 1F 9A 30 34                          DB $1F, $9A, $30, $34
  63++E372 1F AB 30 38                          DB $1F, $AB, $30, $38
  64++E376              AnacondaEdgesSize:      equ $ - AnacondaEdges
  65++E376              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  66++E376 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31           ;01
  67++E37A BE 33 12 57                          DB $BE, $33, $12, $57           ;02
  68++E37E FE 4D 39 13                          DB $FE, $4D, $39, $13           ;03
  69++E382 5F 00 5A 10                          DB $5F, $00, $5A, $10           ;04
  70++E386 7E 4D 39 13                          DB $7E, $4D, $39, $13           ;05
  71++E38A 3E 33 12 57                          DB $3E, $33, $12, $57           ;06
  72++E38E 3E 00 6F 14                          DB $3E, $00, $6F, $14           ;07
  73++E392 9F 61 48 18                          DB $9F, $61, $48, $18           ;08
  74++E396 DF 6C 44 22                          DB $DF, $6C, $44, $22           ;09
  75++E39A 5F 6C 44 22                          DB $5F, $6C, $44, $22           ;10
  76++E39E 1F 61 48 18                          DB $1F, $61, $48, $18           ;11
  77++E3A2 1F 00 5E 12                          DB $1F, $00, $5E, $12           ;12
  78++E3A6              AnacondaNormalsSize:    equ $ - AnacondaNormals
  79++E3A6              AnacondaLen:            equ $ - Anaconda
  80++E3A6
  81++E3A6
  82++E3A6
  83++E3A6
# file closed: ./Data/ships/Anaconda.asm
  89+ E3A6                                      include "Data/ships/Asp_Mk_2.asm"
# file opened: ./Data/ships/Asp_Mk_2.asm
   1++E3A6 00           Asp_Mk_2:	            DB $00                          ; Number of cargo canisters released when destroyed
   2++E3A7 10 0E                                DW 60 * 60                      ; Ship's targetable area LoHi
   3++E3A9 33 E4                                DW Asp_Mk_2Edges                ; Edge Data
   4++E3AB 70                                   DB Asp_Mk_2EdgesSize            ; Size of Edge Data
   5++E3AC 20                                   DB $20                          ; Gun Vertex Byte offset
   6++E3AD 1A                                   DB $1A                          ; Explosion Count
   7++E3AE 13                                   DB Asp_Mk_2VertSize /6          ; Vertex Count /6
   8++E3AF 72                                   DB Asp_Mk_2VertSize             ; Vertex Count
   9++E3B0 1C                                   DB Asp_Mk_2EdgesCnt             ; Edges Count
  10++E3B1 C8 00                                DW $00C8                        ; Bounty LoHi
  11++E3B3 30                                   DB Asp_Mk_2NormalsSize          ; Face (Normal) Count
  12++E3B4 28                                   DB $28                          ; Range when it turns to a dot
  13++E3B5 96                                   DB $96                          ; Energy Max
  14++E3B6 28                                   DB $28                          ; Speed Max
  15++E3B7 A3 E4                                DW Asp_Mk_2Normals              ; Normals
  16++E3B9 01                                   DB $01                          ; Q scaling
  17++E3BA 29                                   DB $29                          ; Laser power and Nbr Missiles
  18++E3BB C1 E3                                DW Asp_Mk_2Vertices             ; Verticles Address
  19++E3BD 00                                   DB ShipTypeNormal               ; Ship Type
  20++E3BE 00                                   DB 0                            ; NewB Tactics
  21++E3BF 80                                   DB ShipCanAnger                 ; AI Flags
  22++E3C0 80                                   DB $80                          ; chance of ECM module
  23++E3C1 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22 ;01
  23++E3C5 01 22
  24++E3C7 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB ;02
  24++E3CB 12 BB
  25++E3CD 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB ;03
  25++E3D1 16 BB
  26++E3D3 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79 ;04
  26++E3D7 16 79
  27++E3D9 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77 ;05
  27++E3DD 01 77
  28++E3DF 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB ;06
  28++E3E3 25 BB
  29++E3E5 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A ;07
  29++E3E9 25 8A
  30++E3EB 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88 ;08
  30++E3EF 02 88
  31++E3F1 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79 ;09
  31++E3F5 04 79
  32++E3F7 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A ;10
  32++E3FB 04 8A
  33++E3FD 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69 ;11
  33++E401 34 69
  34++E403 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A ;12
  34++E407 34 5A
  35++E409 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B ;13
  35++E40D 35 6B
  36++E40F 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB ;14
  36++E413 BB BB
  37++E415 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB ;15
  37++E419 BB BB
  38++E41B 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB ;16
  38++E41F BB BB
  39++E421 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB ;17
  39++E425 BB BB
  40++E427 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04 ;18
  40++E42B 04 04
  41++E42D 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04 ;19
  41++E431 04 04
  42++E433              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  43++E433 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04           ;01
  44++E437 16 01 00 10                          DB $16, $01, $00, $10           ;02
  45++E43B 16 02 00 1C                          DB $16, $02, $00, $1C           ;03
  46++E43F 1F 1B 04 08                          DB $1F, $1B, $04, $08           ;04
  47++E443 1F 16 08 0C                          DB $1F, $16, $08, $0C           ;05
  48++E447 10 79 0C 20                          DB $10, $79, $0C, $20           ;06
  49++E44B 1F 04 20 24                          DB $1F, $04, $20, $24           ;07
  50++E44F 10 8A 18 24                          DB $10, $8A, $18, $24           ;08
  51++E453 1F 25 14 18                          DB $1F, $25, $14, $18           ;09
  52++E457 1F 2B 04 14                          DB $1F, $2B, $04, $14           ;10
  53++E45B 1F 17 0C 10                          DB $1F, $17, $0C, $10           ;11
  54++E45F 1F 07 10 20                          DB $1F, $07, $10, $20           ;12
  55++E463 1F 28 18 1C                          DB $1F, $28, $18, $1C           ;13
  56++E467 1F 08 1C 24                          DB $1F, $08, $1C, $24           ;14
  57++E46B 1F 6B 08 30                          DB $1F, $6B, $08, $30           ;15
  58++E46F 1F 5B 14 30                          DB $1F, $5B, $14, $30           ;16
  59++E473 16 36 28 30                          DB $16, $36, $28, $30           ;17
  60++E477 16 35 2C 30                          DB $16, $35, $2C, $30           ;18
  61++E47B 16 34 28 2C                          DB $16, $34, $28, $2C
  62++E47F 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  63++E483 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  64++E487 1F 69 0C 28                          DB $1F, $69, $0C, $28
  65++E48B 1F 49 20 28                          DB $1F, $49, $20, $28
  66++E48F 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  67++E493 09 BB 3C 38                          DB $09, $BB, $3C, $38
  68++E497 08 BB 38 40                          DB $08, $BB, $38, $40
  69++E49B 08 BB 40 34                          DB $08, $BB, $40, $34
  70++E49F 0A 04 48 44                          DB $0A, $04, $48, $44
  71++E4A3              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  72++E4A3              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  73++E4A3 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05           ;01
  74++E4A7 7F 08 26 07                          DB $7F, $08, $26, $07           ;02
  75++E4AB FF 08 26 07                          DB $FF, $08, $26, $07           ;03
  76++E4AF 36 00 18 01                          DB $36, $00, $18, $01           ;04
  77++E4B3 1F 00 2B 13                          DB $1F, $00, $2B, $13           ;05
  78++E4B7 BF 06 1C 02                          DB $BF, $06, $1C, $02           ;06
  79++E4BB 3F 06 1C 02                          DB $3F, $06, $1C, $02           ;07
  80++E4BF 5F 3B 40 1F                          DB $5F, $3B, $40, $1F           ;08
  81++E4C3 DF 3B 40 1F                          DB $DF, $3B, $40, $1F           ;09
  82++E4C7 1F 50 2E 32                          DB $1F, $50, $2E, $32           ;10
  83++E4CB 9F 50 2E 32                          DB $9F, $50, $2E, $32           ;11
  84++E4CF 3F 00 00 5A                          DB $3F, $00, $00, $5A           ;12
  85++E4D3              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  86++E4D3              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  87++E4D3
  88++E4D3
  89++E4D3
  90++E4D3
# file closed: ./Data/ships/Asp_Mk_2.asm
  90+ E4D3                                      include "Data/ships/Boa.asm"
# file opened: ./Data/ships/Boa.asm
   1++E4D3 05           Boa:	                DB $05                          ; Number of cargo canisters released when destroyed
   2++E4D4 24 13                                DW 70 * 70                      ; Ship's targetable area LoHi
   3++E4D6 3C E5                                DW BoaEdges                     ; Edge Data
   4++E4D8 60                                   DB BoaEdgesSize                 ; Size of Edge Data
   5++E4D9 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E4DA 26                                   DB $26                          ; Explosion Count
   7++E4DB 0D                                   DB BoaVertSize /6               ; Vertex Count /6
   8++E4DC 4E                                   DB BoaVertSize                  ; Vertex Count
   9++E4DD 18                                   DB BoaEdgesCnt                  ; Edges Count
  10++E4DE 00 00                                DW $0000                        ; Bounty LoHi
  11++E4E0 30                                   DB BoaNormalsSize               ; Face (Normal) Count
  12++E4E1 28                                   DB $28                          ; Range when it turns to a dot
  13++E4E2 FA                                   DB $FA                          ; Energy Max
  14++E4E3 18                                   DB $18                          ; Speed Max
  15++E4E4 9C E5                                DW BoaNormals                   ; Normals
  16++E4E6 00                                   DB $00                          ; Q scaling
  17++E4E7 1C                                   DB $1C                          ; Laser power and Nbr Missiles
  18++E4E8 EE E4                                DW BoaVertices                  ; Verticles Address
  19++E4EA 00                                   DB ShipTypeNormal               ; Ship Type
  20++E4EB 00                                   DB 0                            ; NewB Tactics
  21++E4EC 80                                   DB ShipCanAnger                 ; AI Flags
  22++E4ED A0                                   DB $A0                          ; chance of ECM module
  23++E4EE 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF ; 01
  23++E4F2 FF FF
  24++E4F4 00 28 57 38                          DB $00, $28, $57, $38, $02, $33 ; 02
  24++E4F8 02 33
  25++E4FA 26 19 63 78                          DB $26, $19, $63, $78, $01, $44 ; 03
  25++E4FE 01 44
  26++E500 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55 ; 04
  26++E504 12 55
  27++E506 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69 ; 05
  27++E50A 23 69
  28++E50C 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B ; 06
  28++E510 03 6B
  29++E512 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B ; 07
  29++E516 04 8B
  30++E518 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A ; 08
  30++E51C 14 8A
  31++E51E 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A ; 09
  31++E522 15 7A
  32++E524 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79 ; 10
  32++E528 25 79
  33++E52A 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA ; 11
  33++E52E 02 AA
  34++E530 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA ; 12
  34++E534 01 AA
  35++E536 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC ; 13
  35++E53A 12 CC
  36++E53C              BoaVertSize:            equ $ - BoaVertices
  37++E53C 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  38++E540 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  39++E544 1F 79 00 24                          DB $1F, $79, $00, $24
  40++E548 1D 69 00 10                          DB $1D, $69, $00, $10
  41++E54C 1D 8B 00 18                          DB $1D, $8B, $00, $18
  42++E550 1D 7A 00 20                          DB $1D, $7A, $00, $20
  43++E554 1F 36 10 14                          DB $1F, $36, $10, $14
  44++E558 1F 0B 14 18                          DB $1F, $0B, $14, $18
  45++E55C 1F 48 18 1C                          DB $1F, $48, $18, $1C
  46++E560 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  47++E564 1F 57 20 24                          DB $1F, $57, $20, $24
  48++E568 1F 29 10 24                          DB $1F, $29, $10, $24
  49++E56C 18 23 04 10                          DB $18, $23, $04, $10
  50++E570 18 03 04 14                          DB $18, $03, $04, $14
  51++E574 18 25 0C 24                          DB $18, $25, $0C, $24
  52++E578 18 15 0C 20                          DB $18, $15, $0C, $20
  53++E57C 18 04 08 18                          DB $18, $04, $08, $18
  54++E580 18 14 08 1C                          DB $18, $14, $08, $1C
  55++E584 16 02 04 28                          DB $16, $02, $04, $28
  56++E588 16 01 08 2C                          DB $16, $01, $08, $2C
  57++E58C 16 12 0C 30                          DB $16, $12, $0C, $30
  58++E590 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  59++E594 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  60++E598 0E 2C 30 28                          DB $0E, $2C, $30, $28
  61++E59C              BoaEdgesSize:           equ $ - BoaEdges
  62++E59C              BoaEdgesCnt:            equ BoaEdgesSize/4
  63++E59C 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  64++E5A0 7F 00 2D 59                          DB $7F, $00, $2D, $59
  65++E5A4 BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  66++E5A8 1F 00 28 00                          DB $1F, $00, $28, $00
  67++E5AC 7F 3E 20 14                          DB $7F, $3E, $20, $14
  68++E5B0 FF 3E 20 14                          DB $FF, $3E, $20, $14
  69++E5B4 1F 00 17 06                          DB $1F, $00, $17, $06
  70++E5B8 DF 17 0F 09                          DB $DF, $17, $0F, $09
  71++E5BC 5F 17 0F 09                          DB $5F, $17, $0F, $09
  72++E5C0 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  73++E5C4 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  74++E5C8 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  75++E5CC              BoaNormalsSize:         equ $ - BoaNormals
  76++E5CC              BoaLen:                 equ $ - Boa
  77++E5CC
# file closed: ./Data/ships/Boa.asm
  91+ E5CC
  92+ E5CC                                      include "Data/ships/CargoType5.asm"
# file opened: ./Data/ships/CargoType5.asm
   1++E5CC 00           CargoType5              DB $00                         ; Number of cargo canisters released when destroyed
   2++E5CD 90 01                                DW 20 * 20                     ; Ship's targetable area LoHi
   3++E5CF 23 E6                                DW CargoType5Edges             ; Edge Data
   4++E5D1 3C                                   DB CargoType5EdgesSize         ; Size of Edge Data
   5++E5D2 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E5D3 12                                   DB $12                         ; Explosion Count
   7++E5D4 0A                                   DB CargoType5VertSize /6       ; Vertex Count /6
   8++E5D5 3C                                   DB CargoType5VertSize          ; Vertex Count
   9++E5D6 0F                                   DB CargoType5EdgesCnt          ; Edges Count
  10++E5D7 00 00                                DW $0000                       ; Bounty LoHi
  11++E5D9 1C                                   DB CargoType5NormalsSize       ; Face (Normal) Count
  12++E5DA 0C                                   DB $0C                         ; Range when it turns to a dot
  13++E5DB 11                                   DB $11                         ; Energy Max
  14++E5DC 0F                                   DB $0F                         ; Speed Max
  15++E5DD 5F E6                                DW CargoType5Normals           ; Normals
  16++E5DF 02                                   DB $02                         ; Q scaling
  17++E5E0 00                                   DB $00                         ; Laser power and Nbr Missiles
  18++E5E1 E7 E5                                DW CargoType5Vertices          ; Verticles Address
  19++E5E3 04                                   DB ShipTypeScoopable           ; Ship Type
  20++E5E4 00                                   DB 0                           ; NewB Tactics
  21++E5E5 00                                   DB 0                           ; AI Flags
  22++E5E6 00                                   DB $0                          ; chance of ECM module
  23++E5E7              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  24++E5E7 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	; 60 bytes in total for data
  24++E5EB 10 55
  25++E5ED 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22
  25++E5F1 10 22
  26++E5F3 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33
  26++E5F7 20 33
  27++E5F9 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44
  27++E5FD 30 44
  28++E5FF 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55   ; end of left pentagon
  28++E603 40 55
  29++E605 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66   ; start of right pentagon
  29++E609 51 66
  30++E60B 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66
  30++E60F 21 66
  31++E611 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66
  31++E615 32 66
  32++E617 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66
  32++E61B 43 66
  33++E61D 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66
  33++E621 54 66
  34++E623              CargoType5VertSize      equ $  - CargoType5Vertices
  35++E623 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04,$1F,$20,$04,$08 	; 8 x 7 = 60 bytes
  35++E627 1F 20 04 08
  36++E62B 1F 30 08 0C                          DB $1F,$30,$08,$0C,$1F,$40,$0C,$10
  36++E62F 1F 40 0C 10
  37++E633 1F 50 00 10                          DB $1F,$50,$00,$10,$1F,$51,$00,$14
  37++E637 1F 51 00 14
  38++E63B 1F 21 04 18                          DB $1F,$21,$04,$18,$1F,$32,$08,$1C
  38++E63F 1F 32 08 1C
  39++E643 1F 43 0C 20                          DB $1F,$43,$0C,$20,$1F,$54,$10,$24
  39++E647 1F 54 10 24
  40++E64B 1F 61 14 18                          DB $1F,$61,$14,$18,$1F,$62,$18,$1C
  40++E64F 1F 62 18 1C
  41++E653 1F 63 1C 20                          DB $1F,$63,$1C,$20,$1F,$64,$20,$24
  41++E657 1F 64 20 24
  42++E65B 1F 65 24 14                          DB $1F,$65,$24,$14
  43++E65F              CargoType5EdgesSize     equ $  - CargoType5Edges
  44++E65F              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  45++E65F 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00
  46++E663 1F 00 29 1E                          DB $1F,$00,$29,$1E,$5F,$00,$12,$30
  46++E667 5F 00 12 30
  47++E66B 5F 00 33 00                          DB $5F,$00,$33,$00,$7F,$00,$12,$30
  47++E66F 7F 00 12 30
  48++E673 3F 00 29 1E                          DB $3F,$00,$29,$1E,$9F,$60,$00,$00   ; end Cargo cannister
  48++E677 9F 60 00 00
  49++E67B              CargoType5NormalsSize   equ $  - CargoType5Normals
  50++E67B              CargoType5Len           equ $  - CargoType5
# file closed: ./Data/ships/CargoType5.asm
  93+ E67B                                      include "Data/ships/Boulder.asm"
# file opened: ./Data/ships/Boulder.asm
   1++E67B 00           Boulder:	            DB $00                               ; Number of cargo canisters released when destroyed
   2++E67C 84 03                                DW 30 * 30                           ; Ship's targetable area LoHi
   3++E67E C0 E6                                DW BoulderEdges                      ; Edge Data
   4++E680 3C                                   DB BoulderEdgesSize                  ; Size of Edge Data
   5++E681 00                                   DB $00                               ; Gun Vertex Byte offset
   6++E682 0E                                   DB $0E                               ; Explosion Count
   7++E683 07                                   DB BoulderVertSize /6                ; Vertex Count /6
   8++E684 2A                                   DB BoulderVertSize                   ; Vertex Count
   9++E685 0F                                   DB BoulderEdgesCnt                   ; Edges Count
  10++E686 01 00                                DW $0001                             ; Bounty LoHi
  11++E688 28                                   DB BoulderNormalsSize                ; Face (Normal) Count
  12++E689 14                                   DB $14                               ; Range when it turns to a dot
  13++E68A 14                                   DB $14                               ; Energy Max
  14++E68B 1E                                   DB $1E                               ; Speed Max
  15++E68C FC E6                                DW BoulderNormals                    ; Normals
  16++E68E 02                                   DB $02                               ; Q scaling
  17++E68F 00                                   DB $00                               ; Laser power and Nbr Missiles
  18++E690 96 E6                                DW BoulderVertices                   ; Verticles Address
  19++E692 03                                   DB ShipTypeJunk                      ; Ship Type
  20++E693 00                                   DB 0                                 ; NewB Tactics
  21++E694 00                                   DB 0                                 ; AI Flags
  22++E695 A0                                   DB $A0                               ; chance of ECM module
  23++E696 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  23++E69A 01 59
  24++E69C 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  24++E6A0 12 56
  25++E6A2 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  25++E6A6 23 67
  26++E6A8 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  26++E6AC 34 78
  27++E6AE 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  27++E6B2 04 89
  28++E6B4 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  28++E6B8 FF FF
  29++E6BA 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  29++E6BE FF FF
  30++E6C0              BoulderVertSize:        equ $ - BoulderVertices
  31++E6C0 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  32++E6C4 1F 26 04 08                          DB $1F, $26, $04, $08
  33++E6C8 1F 37 08 0C                          DB $1F, $37, $08, $0C
  34++E6CC 1F 48 0C 10                          DB $1F, $48, $0C, $10
  35++E6D0 1F 09 10 00                          DB $1F, $09, $10, $00
  36++E6D4 1F 01 00 14                          DB $1F, $01, $00, $14
  37++E6D8 1F 12 04 14                          DB $1F, $12, $04, $14
  38++E6DC 1F 23 08 14                          DB $1F, $23, $08, $14
  39++E6E0 1F 34 0C 14                          DB $1F, $34, $0C, $14
  40++E6E4 1F 04 10 14                          DB $1F, $04, $10, $14
  41++E6E8 1F 59 00 18                          DB $1F, $59, $00, $18
  42++E6EC 1F 56 04 18                          DB $1F, $56, $04, $18
  43++E6F0 1F 67 08 18                          DB $1F, $67, $08, $18
  44++E6F4 1F 78 0C 18                          DB $1F, $78, $0C, $18
  45++E6F8 1F 89 10 18                          DB $1F, $89, $10, $18
  46++E6FC              BoulderEdgesSize:       equ $ - BoulderEdges
  47++E6FC              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  48++E6FC DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  49++E700 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  50++E704 5F 20 2F 18                          DB $5F, $20, $2F, $18
  51++E708 FF 03 27 07                          DB $FF, $03, $27, $07
  52++E70C FF 05 04 01                          DB $FF, $05, $04, $01
  53++E710 1F 31 54 08                          DB $1F, $31, $54, $08
  54++E714 3F 70 15 15                          DB $3F, $70, $15, $15
  55++E718 7F 4C 23 52                          DB $7F, $4C, $23, $52
  56++E71C 3F 16 38 89                          DB $3F, $16, $38, $89
  57++E720 3F 28 6E 26                          DB $3F, $28, $6E, $26
  58++E724              BoulderNormalsSize:     equ $ - BoulderNormals
  59++E724              BoulderLen:             equ $ - Boulder
  60++E724
# file closed: ./Data/ships/Boulder.asm
  94+ E724                                      include "Data/ships/Asteroid.asm"
# file opened: ./Data/ships/Asteroid.asm
   1++E724 00           Asteroid:	            DB $00                          ; Number of cargo canisters released when destroyed
   2++E725 00 19                                DW 80 * 80                      ; Ship's targetable area LoHi
   3++E727 75 E7                                DW AsteroidEdges                ; Edge Data
   4++E729 54                                   DB AsteroidEdgesSize            ; Size of Edge Data
   5++E72A 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E72B 22                                   DB $22                          ; Explosion Count
   7++E72C 09                                   DB AsteroidVertSize /6          ; Vertex Count /6
   8++E72D 36                                   DB AsteroidVertSize             ; Vertex Count
   9++E72E 15                                   DB AsteroidEdgesCnt             ; Edges Count
  10++E72F 05 00                                DW $0005                        ; Bounty LoHi
  11++E731 38                                   DB AsteroidNormalsSize          ; Face (Normal) Count
  12++E732 32                                   DB $32                          ; Range when it turns to a dot
  13++E733 3C                                   DB $3C                          ; Energy Max
  14++E734 1E                                   DB $1E                          ; Speed Max
  15++E735 C9 E7                                DW AsteroidNormals              ; Normals
  16++E737 01                                   DB $01                          ; Q scaling
  17++E738 00                                   DB $00                          ; Laser power and Nbr Missiles
  18++E739 3F E7                                DW AsteroidVertices             ; Verticles Address
  19++E73B 03                                   DB ShipTypeJunk                 ; Ship Type
  20++E73C 00                                   DB 0                            ; NewB Tactics
  21++E73D 00                                   DB 0                            ; AI Flags
  22++E73E 00                                   DB $00                          ; chance of ECM module
  23++E73F 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF ;01
  23++E743 FF FF
  24++E745 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF ;02
  24++E749 FF FF
  25++E74B 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF ;03
  25++E74F FF FF
  26++E751 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF ;04
  26++E755 FF FF
  27++E757 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC ;05
  27++E75B 65 DC
  28++E75D 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF ;06
  28++E761 FF FF
  29++E763 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32 ;07
  29++E767 10 32
  30++E769 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF ;08
  30++E76D FF FF
  31++E76F 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA ;09
  31++E773 98 BA
  32++E775              AsteroidVertSize:       equ $ - AsteroidVertices
  33++E775 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04           ;01
  34++E779 1F D6 00 10                          DB $1F, $D6, $00, $10           ;02
  35++E77D 1F C5 0C 10                          DB $1F, $C5, $0C, $10           ;03
  36++E781 1F B4 08 0C                          DB $1F, $B4, $08, $0C           ;04
  37++E785 1F A3 04 08                          DB $1F, $A3, $04, $08           ;05
  38++E789 1F 32 04 18                          DB $1F, $32, $04, $18           ;06
  39++E78D 1F 31 08 18                          DB $1F, $31, $08, $18           ;07
  40++E791 1F 41 08 14                          DB $1F, $41, $08, $14           ;08
  41++E795 1F 10 14 18                          DB $1F, $10, $14, $18           ;09
  42++E799 1F 60 00 14                          DB $1F, $60, $00, $14           ;10
  43++E79D 1F 54 0C 14                          DB $1F, $54, $0C, $14           ;11
  44++E7A1 1F 20 00 18                          DB $1F, $20, $00, $18           ;12
  45++E7A5 1F 65 10 14                          DB $1F, $65, $10, $14           ;13
  46++E7A9 1F A8 04 20                          DB $1F, $A8, $04, $20           ;14
  47++E7AD 1F 87 04 1C                          DB $1F, $87, $04, $1C           ;15
  48++E7B1 1F D7 00 1C                          DB $1F, $D7, $00, $1C           ;16
  49++E7B5 1F DC 10 1C                          DB $1F, $DC, $10, $1C           ;17
  50++E7B9 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C           ;18
  51++E7BD 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  52++E7C1 1F BA 08 20                          DB $1F, $BA, $08, $20
  53++E7C5 1F 98 1C 20                          DB $1F, $98, $1C, $20
  54++E7C9
  55++E7C9              AsteroidEdgesSize:      equ $ - AsteroidEdges
  56++E7C9              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  57++E7C9 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51           ;01
  58++E7CD 5F 09 42 51                          DB $5F, $09, $42, $51           ;02
  59++E7D1 9F 48 40 1F                          DB $9F, $48, $40, $1F           ;03
  60++E7D5 DF 40 49 2F                          DB $DF, $40, $49, $2F           ;04
  61++E7D9 5F 2D 4F 41                          DB $5F, $2D, $4F, $41           ;05
  62++E7DD 1F 87 0F 23                          DB $1F, $87, $0F, $23           ;06
  63++E7E1 1F 26 4C 46                          DB $1F, $26, $4C, $46           ;07
  64++E7E5 BF 42 3B 27                          DB $BF, $42, $3B, $27           ;08
  65++E7E9 FF 43 0F 50                          DB $FF, $43, $0F, $50           ;09
  66++E7ED 7F 42 0E 4B                          DB $7F, $42, $0E, $4B           ;10
  67++E7F1 FF 46 50 28                          DB $FF, $46, $50, $28           ;11
  68++E7F5 7F 3A 66 33                          DB $7F, $3A, $66, $33           ;12
  69++E7F9 3F 51 09 43                          DB $3F, $51, $09, $43           ;13
  70++E7FD 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F           ;14
  71++E801              AsteroidNormalsSize:    equ $ - AsteroidNormals
  72++E801              AsteroidLen:            equ $ - Asteroid
  73++E801
  74++E801
# file closed: ./Data/ships/Asteroid.asm
  95+ E801
  96+ E801                                      include "Data/ships/Bushmaster.asm"
# file opened: ./Data/ships/Bushmaster.asm
   1++E801 00           Bushmaster:	            DB $00                           ; Number of cargo canisters released when destroyed
   2++E802 9A 10                                DW $109A                         ; Ship's targetable area LoHi
   3++E804 64 E8                                DW BushmasterEdges               ; Edge Data
   4++E806 4C                                   DB BushmasterEdgesSize           ; Size of Edge Data
   5++E807 00                                   DB $00                           ; Gun Vertex Byte offset
   6++E808 1E                                   DB $1E                           ; Explosion Count
   7++E809 0C                                   DB BushmasterVertSize /6         ; Vertex Count /6
   8++E80A 48                                   DB BushmasterVertSize            ; Vertex Count
   9++E80B 13                                   DB BushmasterEdgesCnt            ; Edges Count
  10++E80C 96 00                                DW $0096                         ; Bounty LoHi
  11++E80E 24                                   DB BushmasterNormalsSize         ; Face (Normal) Count
  12++E80F 14                                   DB $14                           ; Range when it turns to a dot
  13++E810 4A                                   DB $4A                           ; Energy Max
  14++E811 23                                   DB $23                           ; Speed Max
  15++E812 B0 E8                                DW BushmasterNormals             ; Normals
  16++E814 02                                   DB $02                           ; Q scaling
  17++E815 21                                   DB $20 | ShipMissiles1           ; Laser power and Nbr Missiles
  18++E816 1C E8                                DW BushmasterVertices            ; Verticles Address
  19++E818 00                                   DB ShipTypeNormal                ; Ship Type
  20++E819 00                                   DB 0                             ; NewB Tactics
  21++E81A 80                                   DB ShipCanAnger                  ; AI Flags
  22++E81B 70                                   DB $70                           ; chance of ECM module
  23++E81C 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01  ; 01
  23++E820 23 01
  24++E822 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13  ; 02
  24++E826 57 13
  25++E828 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02  ; 03
  25++E82C 46 02
  26++E82E 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01  ; 04
  26++E832 45 01
  27++E834 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF  ; 05
  27++E838 FF FF
  28++E83A 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45  ; 06
  28++E83E 88 45
  29++E840 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57  ; 07
  29++E844 88 57
  30++E846 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46  ; 08
  30++E84A 88 46
  31++E84C 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88  ; 09
  31++E850 88 88
  32++E852 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88  ; 10
  32++E856 88 88
  33++E858 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88  ; 11
  33++E85C 88 88
  34++E85E 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88  ; 12           ; 12 * 6 = 72
  34++E862 88 88
  35++E864              BushmasterVertSize:     equ $ - BushmasterVertices
  36++E864 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04            ; 01
  37++E868 1F 02 00 08                          DB $1F, $02, $00, $08            ; 02
  38++E86C 1F 01 00 0C                          DB $1F, $01, $00, $0C            ; 03
  39++E870 1F 23 00 10                          DB $1F, $23, $00, $10            ; 04
  40++E874 1F 45 0C 14                          DB $1F, $45, $0C, $14            ; 05
  41++E878 1F 04 08 0C                          DB $1F, $04, $08, $0C            ; 06
  42++E87C 1F 15 04 0C                          DB $1F, $15, $04, $0C            ; 07
  43++E880 1F 46 08 1C                          DB $1F, $46, $08, $1C            ; 08
  44++E884 1F 57 04 18                          DB $1F, $57, $04, $18            ; 09
  45++E888 1F 26 08 10                          DB $1F, $26, $08, $10            ; 10
  46++E88C 1F 37 04 10                          DB $1F, $37, $04, $10            ; 11
  47++E890 1F 48 14 1C                          DB $1F, $48, $14, $1C            ; 12
  48++E894 1F 58 14 18                          DB $1F, $58, $14, $18            ; 13
  49++E898 1F 68 10 1C                          DB $1F, $68, $10, $1C            ; 14
  50++E89C 1F 78 10 18                          DB $1F, $78, $10, $18            ; 15
  51++E8A0 0A 88 20 24                          DB $0A, $88, $20, $24            ; 16
  52++E8A4 0A 88 24 28                          DB $0A, $88, $24, $28            ; 17
  53++E8A8 0A 88 28 2C                          DB $0A, $88, $28, $2C            ; 18
  54++E8AC 0A 88 2C 20                          DB $0A, $88, $2C, $20            ; 19           ; 19 * 4 = 76
  55++E8B0              BushmasterEdgesSize:    equ $ - BushmasterEdges
  56++E8B0              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4        ;
  57++E8B0 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D            ; 01
  58++E8B4 1F 17 58 1D                          DB $1F, $17, $58, $1D            ; 02
  59++E8B8 DF 0E 5D 12                          DB $DF, $0E, $5D, $12            ; 03
  60++E8BC 5F 0E 5D 12                          DB $5F, $0E, $5D, $12            ; 04
  61++E8C0 BF 1F 59 0D                          DB $BF, $1F, $59, $0D            ; 05
  62++E8C4 3F 1F 59 0D                          DB $3F, $1F, $59, $0D            ; 06
  63++E8C8 FF 2A 55 07                          DB $FF, $2A, $55, $07            ; 07
  64++E8CC 7F 2A 55 07                          DB $7F, $2A, $55, $07            ; 08
  65++E8D0 3F 00 00 60                          DB $3F, $00, $00, $60            ; 09           ; 9 * 4 = 36
  66++E8D4              BushmasterNormalsSize:  equ $ - BushmasterNormals
  67++E8D4              BushmasterLen:          equ $ - Bushmaster
  68++E8D4
# file closed: ./Data/ships/Bushmaster.asm
  97+ E8D4                                      include "Data/ships/Chameleon.asm"
# file opened: ./Data/ships/Chameleon.asm
   1++E8D4 03           Chameleon:	            DB $03                          ; Number of cargo canisters released when destroyed
   2++E8D5 A0 0F                                DW $0FA0                        ; Ship's targetable area LoHi
   3++E8D7 5A E9                                DW ChameleonEdges               ; Edge Data
   4++E8D9 74                                   DB ChameleonEdgesSize           ; Size of Edge Data
   5++E8DA 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E8DB 1A                                   DB $1A                          ; Explosion Count
   7++E8DC 12                                   DB ChameleonVertSize /6         ; Vertex Count /6
   8++E8DD 6C                                   DB ChameleonVertSize            ; Vertex Count
   9++E8DE 1D                                   DB ChameleonEdgesCnt            ; Edges Count
  10++E8DF C8                                   DB $00C8                        ; Bounty LoHi
  11++E8E0 34                                   DB ChameleonNormalsSize         ; Face (Normal) Count
  12++E8E1 0A                                   DB $0A                          ; Range when it turns to a dot
  13++E8E2 64                                   DB $64                          ; Energy Max
  14++E8E3 1D                                   DB $1D                          ; Speed Max
  15++E8E4 CE E9                                DW ChameleonNormals             ; Normals
  16++E8E6 01                                   DB $01                          ; Q scaling
  17++E8E7 23                                   DB $23                          ; Laser power and Nbr Missiles
  18++E8E8 EE E8                                DW ChameleonVertices            ; Verticles Address
  19++E8EA 00                                   DB ShipTypeNormal               ; Ship Type
  20++E8EB 00                                   DB 0                            ; NewB Tactics
  21++E8EC 80                                   DB ShipCanAnger                 ; AI Flags
  22++E8ED 40                                   DB $40                          ; chance of ECM module
  23++E8EE 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  23++E8F2 25 01
  24++E8F4 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  24++E8F8 34 01
  25++E8FA 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  25++E8FE 8B 25
  26++E900 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  26++E904 68 22
  27++E906 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  27++E90A 69 33
  28++E90C 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  28++E910 9A 34
  29++E912 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  29++E916 7A 44
  30++E918 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  30++E91C 7B 55
  31++E91E 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  31++E922 36 02
  32++E924 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  32++E928 57 14
  33++E92A 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  33++E92E BC 88
  34++E930 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  34++E934 9C 68
  35++E936 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  35++E93A AC 99
  36++E93C 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  36++E940 BC 7A
  37++E942 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  37++E946 CC CC
  38++E948 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  38++E94C CC CC
  39++E94E 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  39++E952 CC CC
  40++E954 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  40++E958 CC CC
  41++E95A              ChameleonVertSize:      equ $ - ChameleonVertices
  42++E95A 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  43++E95E 1F 02 00 20                          DB $1F, $02, $00, $20
  44++E962 1F 15 00 24                          DB $1F, $15, $00, $24
  45++E966 1F 03 04 20                          DB $1F, $03, $04, $20
  46++E96A 1F 14 04 24                          DB $1F, $14, $04, $24
  47++E96E 1F 34 04 14                          DB $1F, $34, $04, $14
  48++E972 1F 25 00 08                          DB $1F, $25, $00, $08
  49++E976 1F 26 0C 20                          DB $1F, $26, $0C, $20
  50++E97A 1F 36 10 20                          DB $1F, $36, $10, $20
  51++E97E 1F 75 1C 24                          DB $1F, $75, $1C, $24
  52++E982 1F 74 18 24                          DB $1F, $74, $18, $24
  53++E986 1F 39 10 14                          DB $1F, $39, $10, $14
  54++E98A 1F 4A 14 18                          DB $1F, $4A, $14, $18
  55++E98E 1F 28 08 0C                          DB $1F, $28, $08, $0C
  56++E992 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  57++E996 1F 8B 08 28                          DB $1F, $8B, $08, $28
  58++E99A 1F 9A 14 30                          DB $1F, $9A, $14, $30
  59++E99E 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  60++E9A2 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  61++E9A6 1F 69 10 2C                          DB $1F, $69, $10, $2C
  62++E9AA 1F 7A 18 34                          DB $1F, $7A, $18, $34
  63++E9AE 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  64++E9B2 1F BC 28 34                          DB $1F, $BC, $28, $34
  65++E9B6 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  66++E9BA 1F AC 30 34                          DB $1F, $AC, $30, $34
  67++E9BE 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  68++E9C2 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  69++E9C6 0A CC 40 44                          DB $0A, $CC, $40, $44
  70++E9CA 0A CC 44 38                          DB $0A, $CC, $44, $38
  71++E9CE              ChameleonEdgesSize:     equ $ - ChameleonEdges
  72++E9CE              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  73++E9CE 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  74++E9D2 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  75++E9D6 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  76++E9DA 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  77++E9DE 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  78++E9E2 DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  79++E9E6 1F 00 60 00                          DB $1F, $00, $60, $00
  80++E9EA 5F 00 60 00                          DB $5F, $00, $60, $00
  81++E9EE BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  82++E9F2 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  83++E9F6 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  84++E9FA FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  85++E9FE 3F 00 00 60                          DB $3F, $00, $00, $60
  86++EA02              ChameleonNormalsSize:   equ $ - ChameleonNormals
  87++EA02              ChameleonLen:           equ $ - Chameleon
  88++EA02
# file closed: ./Data/ships/Chameleon.asm
  98+ EA02                                      include "Data/ships/CobraMk3.asm"
# file opened: ./Data/ships/CobraMk3.asm
   1++EA02              ; Corrected pointers
   2++EA02              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++EA02              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++EA02              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++EA02 03           CobraMk3    		    DB $03                            ; Number of cargo canisters released when destroyed
   6++EA03 41 23                                DW $2341                          ; Ship's targetable area LoHi
   7++EA05 C5 EA                                DW CobraMk3Edges                  ; Edge Data
   8++EA07 98                                   DB CobraMkEdgesSize               ; Size of Edge Data
   9++EA08 54                                   DB $54                            ; Gun Vertex Byte offset
  10++EA09 2A                                   DB $2A                            ; Explosion Count
  11++EA0A 1C                                   DB CobraMkVertSize /6             ; Vertex Count /6
  12++EA0B A8                                   DB CobraMkVertSize                ; Vertex Count
  13++EA0C 26                                   DB CobraMkEdgesCnt                ; Edges Count
  14++EA0D 00 00                                DW $0000                          ; Bounty LoHi
  15++EA0F 34                                   DB CobraMk3NormalsSize            ; Face (Normal) Count
  16++EA10 32                                   DB $32                            ; Range when it turns to a dot
  17++EA11 96                                   DB $96                            ; Energy Max
  18++EA12 1C                                   DB $1C                            ; Speed Max
  19++EA13 5D EB                                DW CobraMk3Normals                ; Normals
  20++EA15 01                                   DB $01                            ; Q scaling
  21++EA16 34                                   DB $30 | ShipMissiles4            ; Laser power and Nbr Missiles
  22++EA17 1D EA                                DW CobraMk3Vertices               ; Verticles Address
  23++EA19 00                                   DB ShipTypeNormal                 ; Ship Type
  24++EA1A 00                                   DB 0                              ; NewB Tactics
  25++EA1B 80                                   DB ShipCanAnger                   ; AI Flags
  26++EA1C 70                                   DB $70                            ; chance of ECM module
  27++EA1D 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  27++EA21 FF FF
  28++EA23 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  28++EA27 FF FF
  29++EA29 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  29++EA2D FF FF
  30++EA2F 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  30++EA33 73 AA
  31++EA35 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  31++EA39 84 CC
  32++EA3B 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  32++EA3F FF FF
  33++EA41 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  33++EA45 FF FF
  34++EA47 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  34++EA4B 98 CC
  35++EA4D 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  35++EA51 97 AA
  36++EA53 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  36++EA57 65 99
  37++EA59 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  37++EA5D A9 BB
  38++EA5F 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  38++EA63 B9 CC
  39++EA65 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  39++EA69 99 99
  40++EA6B 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  40++EA6F 99 99
  41++EA71 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  41++EA75 99 99
  42++EA77 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  42++EA7B 99 99
  43++EA7D 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  43++EA81 99 99
  44++EA83 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  44++EA87 99 99
  45++EA89 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  45++EA8D 99 99
  46++EA8F 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  46++EA93 99 99
  47++EA95 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  47++EA99 B0 BB
  48++EA9B 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  48++EA9F B0 BB
  49++EAA1 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  49++EAA5 99 99
  50++EAA7 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  50++EAAB 99 99
  51++EAAD 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  51++EAB1 99 99
  52++EAB3 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  52++EAB7 99 99
  53++EAB9 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  53++EABD 99 99
  54++EABF 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  54++EAC3 99 99
  55++EAC5              CobraMkVertSize         equ $  - CobraMk3Vertices
  56++EAC5 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
  56++EAC9 1F C4 00 10
  57++EACD 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
  57++EAD1 1F A7 0C 20
  58++EAD5 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
  58++EAD9 1F 98 18 1C
  59++EADD 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
  59++EAE1 1F 95 14 24
  60++EAE5 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
  60++EAE9 1F 51 08 14
  61++EAED 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
  61++EAF1 1F 73 0C 14
  62++EAF5 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
  62++EAF9 1F 10 04 08
  63++EAFD 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
  63++EB01 1F A9 20 28
  64++EB05 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
  64++EB09 1F C9 1C 2C
  65++EB0D 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
  65++EB11 1F CB 00 2C
  66++EB15 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
  66++EB19 1D 42 00 18
  67++EB1D 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
  67++EB21 14 99 30 34
  68++EB25 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
  68++EB29 14 99 38 3C
  69++EB2D 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
  69++EB31 13 99 3C 40
  70++EB35 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
  70++EB39 13 99 34 48
  71++EB3D 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
  71++EB41 1E 65 08 24
  72++EB45 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
  72++EB49 06 99 5C 60
  73++EB4D 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
  73++EB51 06 99 64 68
  74++EB55 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
  74++EB59 08 99 64 6C
  75++EB5D              CobraMkEdgesSize        equ $  - CobraMk3Edges
  76++EB5D              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
  77++EB5D              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  78++EB5D 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
  79++EB61 9F 12 37 10                          DB $9F,$12,$37,$10
  80++EB65 1F 12 37 10                          DB $1F,$12,$37,$10
  81++EB69 9F 10 34 0E                          DB $9F,$10,$34,$0E
  82++EB6D 1F 10 34 0E                          DB $1F,$10,$34,$0E
  83++EB71 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
  84++EB75 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
  85++EB79 9F 3D 66 00                          DB $9F,$3D,$66,$00
  86++EB7D 1F 3D 66 00                          DB $1F,$3D,$66,$00
  87++EB81 3F 00 00 50                          DB $3F,$00,$00,$50
  88++EB85 DF 07 2A 09                          DB $DF,$07,$2A,$09
  89++EB89 5F 00 1E 06                          DB $5F,$00,$1E,$06
  90++EB8D 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
  91++EB91              CobraMk3NormalsSize     equ $  - CobraMk3Normals
  92++EB91              CobraMk3Len             equ $  - CobraMk3
  93++EB91
# file closed: ./Data/ships/CobraMk3.asm
  99+ EB91                                      include "Data/ships/Cobra_Mk_1.asm"
# file opened: ./Data/ships/Cobra_Mk_1.asm
   1++EB91 03           Cobra_Mk_1:	            DB $03                              ; Number of cargo canisters released when destroyed
   2++EB92 49 26                                DW $2649                            ; Ship's targetable area LoHi
   3++EB94 EE EB                                DW Cobra_Mk_1Edges                  ; Edge Data
   4++EB96 48                                   DB Cobra_Mk_1EdgesSize              ; Size of Edge Data
   5++EB97 28                                   DB $28                              ; Gun Vertex Byte offset
   6++EB98 1A                                   DB $1A                              ; Explosion Count
   7++EB99 0B                                   DB Cobra_Mk_1VertSize /6            ; Vertex Count /6
   8++EB9A 42                                   DB Cobra_Mk_1VertSize               ; Vertex Count
   9++EB9B 12                                   DB Cobra_Mk_1EdgesCnt               ; Edges Count
  10++EB9C 00 4B                                DW $4B00                            ; Bounty LoHi
  11++EB9E 28                                   DB Cobra_Mk_1NormalsSize            ; Face (Normal) Count
  12++EB9F 13                                   DB $13                              ; Range when it turns to a dot
  13++EBA0 51                                   DB $51                              ; Energy Max
  14++EBA1 1A                                   DB $1A                              ; Speed Max
  15++EBA2 36 EC                                DW Cobra_Mk_1Normals                ; Normals
  16++EBA4 02                                   DB $02                              ; Q scaling
  17++EBA5 23                                   DB $20 | ShipMissiles3              ; Laser power and Nbr Missiles
  18++EBA6 AC EB                                DW Cobra_Mk_1Vertices               ; Verticles Address
  19++EBA8 00                                   DB ShipTypeNormal                   ; Ship Type
  20++EBA9 00                                   DB 0                                ; NewB Tactics
  21++EBAA 80                                   DB ShipCanAnger                     ; AI Flags
  22++EBAB 30                                   DB $30                              ; chance of ECM module
  23++EBAC 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  23++EBB0 01 23
  24++EBB2 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  24++EBB6 01 45
  25++EBB8 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  25++EBBC 23 88
  26++EBBE 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  26++EBC2 45 99
  27++EBC4 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  27++EBC8 26 78
  28++EBCA 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  28++EBCE 46 79
  29++EBD0 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  29++EBD4 13 78
  30++EBD6 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  30++EBDA 15 79
  31++EBDC 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  31++EBE0 02 46
  32++EBE2 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  32++EBE6 01 11
  33++EBE8 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  33++EBEC 01 11
  34++EBEE              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  35++EBEE 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  36++EBF2 1F 23 00 08                          DB $1F, $23, $00, $08
  37++EBF6 1F 38 08 18                          DB $1F, $38, $08, $18
  38++EBFA 1F 17 18 1C                          DB $1F, $17, $18, $1C
  39++EBFE 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  40++EC02 1F 45 0C 04                          DB $1F, $45, $0C, $04
  41++EC06 1F 28 08 10                          DB $1F, $28, $08, $10
  42++EC0A 1F 67 10 14                          DB $1F, $67, $10, $14
  43++EC0E 1F 49 14 0C                          DB $1F, $49, $14, $0C
  44++EC12 14 02 00 20                          DB $14, $02, $00, $20
  45++EC16 14 04 20 04                          DB $14, $04, $20, $04
  46++EC1A 10 26 10 20                          DB $10, $26, $10, $20
  47++EC1E 10 46 20 14                          DB $10, $46, $20, $14
  48++EC22 1F 78 10 18                          DB $1F, $78, $10, $18
  49++EC26 1F 79 14 1C                          DB $1F, $79, $14, $1C
  50++EC2A 14 13 00 18                          DB $14, $13, $00, $18
  51++EC2E 14 15 04 1C                          DB $14, $15, $04, $1C
  52++EC32 02 01 28 24                          DB $02, $01, $28, $24
  53++EC36              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  54++EC36              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  55++EC36 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  56++EC3A 5F 00 1B 03                          DB $5F, $00, $1B, $03
  57++EC3E 9F 08 2E 08                          DB $9F, $08, $2E, $08
  58++EC42 DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  59++EC46 1F 08 2E 08                          DB $1F, $08, $2E, $08
  60++EC4A 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  61++EC4E 1F 00 31 00                          DB $1F, $00, $31, $00
  62++EC52 3F 00 00 9A                          DB $3F, $00, $00, $9A
  63++EC56 BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  64++EC5A 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  65++EC5E              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  66++EC5E              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  67++EC5E
# file closed: ./Data/ships/Cobra_Mk_1.asm
 100+ EC5E                                      include "Data/ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/ships/Cobra_Mk_3_P.asm
   1++EC5E 01           Cobra_Mk_3_P:	        DB $01                              ; Number of cargo canisters released when destroyed
   2++EC5F 41 23                                DW $2341                            ; Ship's targetable area LoHi
   3++EC61 21 ED                                DW Cobra_Mk_3_PEdges                ; Edge Data
   4++EC63 98                                   DB Cobra_Mk_3_PEdgesSize            ; Size of Edge Data
   5++EC64 54                                   DB $54                              ; Gun Vertex Byte offset
   6++EC65 2A                                   DB $2A                              ; Explosion Count
   7++EC66 1C                                   DB Cobra_Mk_3_PVertSize /6          ; Vertex Count /6
   8++EC67 A8                                   DB Cobra_Mk_3_PVertSize             ; Vertex Count
   9++EC68 26                                   DB Cobra_Mk_3_PEdgesCnt             ; Edges Count
  10++EC69 00 AF                                DW $AF00                            ; Bounty LoHi
  11++EC6B 34                                   DB Cobra_Mk_3_PNormalsSize          ; Face (Normal) Count
  12++EC6C                                      ; Add in a new byte for range for LoD, if this is zero then no LoD Data
  13++EC6C 32                                   DB $32                              ; Range when it turns to a dot
  14++EC6D 96                                   DB $96                              ; Energy Max
  15++EC6E 1C                                   DB $1C                              ; Speed Max
  16++EC6F B9 ED                                DW Cobra_Mk_3_PNormals              ; Normals
  17++EC71 01                                   DB $01                              ; Q scaling
  18++EC72 14                                   DB $10 | ShipMissiles4              ; Laser power and Nbr Missiles
  19++EC73 79 EC                                DW Cobra_Mk_3_PVertices             ; Verticles Address
  20++EC75 00                                   DB ShipTypeNormal                   ; Ship Type
  21++EC76 00                                   DB 0                                ; NewB Tactics
  22++EC77 80                                   DB ShipCanAnger                     ; AI Flags
  23++EC78 90                                   DB $90                              ; chance of ECM module
  24++EC79 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  24++EC7D FF FF
  25++EC7F 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  25++EC83 FF FF
  26++EC85 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  26++EC89 FF FF
  27++EC8B 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  27++EC8F 73 AA
  28++EC91 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  28++EC95 84 CC
  29++EC97 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  29++EC9B FF FF
  30++EC9D 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  30++ECA1 FF FF
  31++ECA3 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  31++ECA7 98 CC
  32++ECA9 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  32++ECAD 97 AA
  33++ECAF 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  33++ECB3 65 99
  34++ECB5 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  34++ECB9 A9 BB
  35++ECBB 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  35++ECBF B9 CC
  36++ECC1 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  36++ECC5 99 99
  37++ECC7 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  37++ECCB 99 99
  38++ECCD 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  38++ECD1 99 99
  39++ECD3 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  39++ECD7 99 99
  40++ECD9 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  40++ECDD 99 99
  41++ECDF 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  41++ECE3 99 99
  42++ECE5 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  42++ECE9 99 99
  43++ECEB 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  43++ECEF 99 99
  44++ECF1 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  44++ECF5 B0 BB
  45++ECF7 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  45++ECFB B0 BB
  46++ECFD 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  46++ED01 99 99
  47++ED03 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  47++ED07 99 99
  48++ED09 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  48++ED0D 99 99
  49++ED0F 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  49++ED13 99 99
  50++ED15 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  50++ED19 99 99
  51++ED1B 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  51++ED1F 99 99
  52++ED21              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  53++ED21 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  54++ED25 1F C4 00 10                          DB $1F, $C4, $00, $10
  55++ED29 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  56++ED2D 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  57++ED31 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  58++ED35 1F 98 18 1C                          DB $1F, $98, $18, $1C
  59++ED39 1F 96 18 24                          DB $1F, $96, $18, $24
  60++ED3D 1F 95 14 24                          DB $1F, $95, $14, $24
  61++ED41 1F 97 14 20                          DB $1F, $97, $14, $20
  62++ED45 1F 51 08 14                          DB $1F, $51, $08, $14
  63++ED49 1F 62 08 18                          DB $1F, $62, $08, $18
  64++ED4D 1F 73 0C 14                          DB $1F, $73, $0C, $14
  65++ED51 1F 84 10 18                          DB $1F, $84, $10, $18
  66++ED55 1F 10 04 08                          DB $1F, $10, $04, $08
  67++ED59 1F 20 00 08                          DB $1F, $20, $00, $08
  68++ED5D 1F A9 20 28                          DB $1F, $A9, $20, $28
  69++ED61 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  70++ED65 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  71++ED69 1F BA 04 28                          DB $1F, $BA, $04, $28
  72++ED6D 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  73++ED71 1D 31 04 14                          DB $1D, $31, $04, $14
  74++ED75 1D 42 00 18                          DB $1D, $42, $00, $18
  75++ED79 06 B0 50 54                          DB $06, $B0, $50, $54
  76++ED7D 14 99 30 34                          DB $14, $99, $30, $34
  77++ED81 14 99 48 4C                          DB $14, $99, $48, $4C
  78++ED85 14 99 38 3C                          DB $14, $99, $38, $3C
  79++ED89 14 99 40 44                          DB $14, $99, $40, $44
  80++ED8D 13 99 3C 40                          DB $13, $99, $3C, $40
  81++ED91 11 99 38 44                          DB $11, $99, $38, $44
  82++ED95 13 99 34 48                          DB $13, $99, $34, $48
  83++ED99 13 99 30 4C                          DB $13, $99, $30, $4C
  84++ED9D 1E 65 08 24                          DB $1E, $65, $08, $24
  85++EDA1 06 99 58 60                          DB $06, $99, $58, $60
  86++EDA5 06 99 5C 60                          DB $06, $99, $5C, $60
  87++EDA9 08 99 58 5C                          DB $08, $99, $58, $5C
  88++EDAD 06 99 64 68                          DB $06, $99, $64, $68
  89++EDB1 06 99 68 6C                          DB $06, $99, $68, $6C
  90++EDB5 08 99 64 6C                          DB $08, $99, $64, $6C
  91++EDB9              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  92++EDB9              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  93++EDB9 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  94++EDBD 9F 12 37 10                          DB $9F, $12, $37, $10
  95++EDC1 1F 12 37 10                          DB $1F, $12, $37, $10
  96++EDC5 9F 10 34 0E                          DB $9F, $10, $34, $0E
  97++EDC9 1F 10 34 0E                          DB $1F, $10, $34, $0E
  98++EDCD 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
  99++EDD1 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
 100++EDD5 9F 3D 66 00                          DB $9F, $3D, $66, $00
 101++EDD9 1F 3D 66 00                          DB $1F, $3D, $66, $00
 102++EDDD 3F 00 00 50                          DB $3F, $00, $00, $50
 103++EDE1 DF 07 2A 09                          DB $DF, $07, $2A, $09
 104++EDE5 5F 00 1E 06                          DB $5F, $00, $1E, $06
 105++EDE9 5F 07 2A 09                          DB $5F, $07, $2A, $09
 106++EDED              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
 107++EDED              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
 108++EDED
# file closed: ./Data/ships/Cobra_Mk_3_P.asm
 101+ EDED                                      include "Data/ships/Constrictor.asm"
# file opened: ./Data/ships/Constrictor.asm
   1++EDED F3           Constrictor:    	    DB $F3                         ; Number of cargo canisters released when destroyed
   2++EDEE 49 26                                DW $2649                       ; Ship's targetable area LoHi
   3++EDF0 6E EE                                DW ConstrictorEdges            ; Edge Data
   4++EDF2 60                                   DB ConstrictorEdgesSize        ; Size of Edge Data
   5++EDF3 00                                   DB $00                         ; Gun Vertex Byte offset
   6++EDF4 2E                                   DB $2E                         ; Explosion Count
   7++EDF5 11                                   DB ConstrictorVertSize /6      ; Vertex Count /6
   8++EDF6 66                                   DB ConstrictorVertSize         ; Vertex Count
   9++EDF7 18                                   DB ConstrictorEdgesCnt         ; Edges Count
  10++EDF8 18 00                                DW $0018                       ; Bounty LoHi
  11++EDFA 28                                   DB ConstrictorNormalsSize      ; Face (Normal) Count
  12++EDFB 2D                                   DB $2D                         ; Range when it turns to a dot
  13++EDFC C8                                   DB $C8                         ; Energy Max
  14++EDFD 37                                   DB $37                         ; Speed Max
  15++EDFE CE EE                                DW ConstrictorNormals          ; Normals
  16++EE00 02                                   DB $02                         ; Q scaling
  17++EE01 2F                                   DB $20 | ShipMissiles15        ; Laser power and Nbr Missiles
  18++EE02 08 EE                                DW ConstrictorVertices         ; Verticles Address
  19++EE04 00                                   DB ShipTypeNormal              ; Ship Type
  20++EE05 00                                   DB 0                           ; NewB Tactics
  21++EE06 80                                   DB ShipCanAnger                ; AI Flags
  22++EE07 FF                                   DB $FF                         ; chance of ECM module
  23++EE08 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  23++EE0C 02 99
  24++EE0E 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  24++EE12 01 99
  25++EE14 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  25++EE18 14 99
  26++EE1A 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  26++EE1E 45 89
  27++EE20 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  27++EE24 56 88
  28++EE26 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  28++EE2A 67 88
  29++EE2C 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  29++EE30 37 89
  30++EE32 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  30++EE36 23 99
  31++EE38 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  31++EE3C FF FF
  32++EE3E 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  32++EE42 FF FF
  33++EE44 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  33++EE48 99 99
  34++EE4A 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  34++EE4E 99 99
  35++EE50 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  35++EE54 99 99
  36++EE56 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  36++EE5A 99 99
  37++EE5C 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  37++EE60 99 99
  38++EE62 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  38++EE66 99 99
  39++EE68 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  39++EE6C 9F 01
  40++EE6E              ConstrictorVertSize     equ $  - ConstrictorVertices
  41++EE6E 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
  41++EE72 1F 19 04 08
  42++EE76 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
  42++EE7A 1F 02 00 20
  43++EE7E 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
  43++EE82 1F 23 1C 20
  44++EE86 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
  44++EE8A 1F 49 08 0C
  45++EE8E 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
  45++EE92 1F 37 18 20
  46++EE96 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
  46++EE9A 1F 56 10 24
  47++EE9E 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
  47++EEA2 1F 58 0C 10
  48++EEA6 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
  48++EEAA 1F 78 14 18
  49++EEAE 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
  49++EEB2 1F 06 20 24
  50++EEB6 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
  50++EEBA 05 99 30 38
  51++EEBE 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
  51++EEC2 0A 99 2C 3C
  52++EEC6 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
  52++EECA 12 99 2C 34
  53++EECE              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  54++EECE              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  55++EECE 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  55++EED2 9F 18 4B 14
  56++EED6 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  56++EEDA 1F 2C 4B 00
  57++EEDE 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  57++EEE2 9F 2C 4B 00
  58++EEE6 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  58++EEEA 1F 2C 4B 00
  59++EEEE 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  59++EEF2 5F 00 1B 00
  60++EEF6              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  61++EEF6              ConstrictorLen          equ $  - Constrictor
  62++EEF6
# file closed: ./Data/ships/Constrictor.asm
 102+ EEF6                                      include "Data/ships/Coriolis.asm"
# file opened: ./Data/ships/Coriolis.asm
   1++EEF6 00           Coriolis:	            DB $00                                      ; Number of cargo canisters released when destroyed
   2++EEF7 00 64                                DW $6400                                    ; Ship's targetable area LoHi
   3++EEF9 71 EF                                DW CoriolisEdges                            ; Edge Data
   4++EEFB 70                                   DB CoriolisEdgesSize                        ; Size of Edge Data
   5++EEFC 00                                   DB $00                                      ; Gun Vertex Byte offset
   6++EEFD 36                                   DB $36                                      ; Explosion Count
   7++EEFE 10                                   DB CoriolisVertSize /6                      ; Vertex Count /6
   8++EEFF 60                                   DB CoriolisVertSize                         ; Vertex Count
   9++EF00 1C                                   DB CoriolisEdgesCnt                         ; Edges Count
  10++EF01 00 00                                DW $0000                                    ; Bounty LoHi
  11++EF03 38                                   DB CoriolisNormalsSize                      ; Face (Normal) Count
  12++EF04 78                                   DB $78                                      ; Range when it turns to a dot
  13++EF05 F0                                   DB $F0                                      ; Energy Max
  14++EF06 00                                   DB $00                                      ; Speed Max
  15++EF07 E1 EF                                DW CoriolisNormals                          ; Normals
  16++EF09 00                                   DB $00                                      ; Q scaling
  17++EF0A 06                                   DB $06                                      ; Laser power and Nbr Missiles
  18++EF0B 11 EF                                DW CoriolisVertices                         ; Verticles Address
  19++EF0D 02                                   DB ShipTypeStation                          ; Ship Type
  20++EF0E 00                                   DB 0                                        ; NewB Tactics
  21++EF0F 78                                   DB ShipFighterBaySize | ShipFighterViper    ; AI Flags
  22++EF10 FF                                   DB $FF                                      ; chance of ECM module
  23++EF11 A0 00 A0 1F  CoriolisVertices:	    DB $A0, $00, $A0, $1F, $10, $62
  23++EF15 10 62
  24++EF17 00 A0 A0 1F                          DB $00, $A0, $A0, $1F, $20, $83
  24++EF1B 20 83
  25++EF1D A0 00 A0 9F                          DB $A0, $00, $A0, $9F, $30, $74
  25++EF21 30 74
  26++EF23 00 A0 A0 5F                          DB $00, $A0, $A0, $5F, $10, $54
  26++EF27 10 54
  27++EF29 A0 A0 00 5F                          DB $A0, $A0, $00, $5F, $51, $A6
  27++EF2D 51 A6
  28++EF2F A0 A0 00 1F                          DB $A0, $A0, $00, $1F, $62, $B8
  28++EF33 62 B8
  29++EF35 A0 A0 00 9F                          DB $A0, $A0, $00, $9F, $73, $C8
  29++EF39 73 C8
  30++EF3B A0 A0 00 DF                          DB $A0, $A0, $00, $DF, $54, $97
  30++EF3F 54 97
  31++EF41 A0 00 A0 3F                          DB $A0, $00, $A0, $3F, $A6, $DB
  31++EF45 A6 DB
  32++EF47 00 A0 A0 3F                          DB $00, $A0, $A0, $3F, $B8, $DC
  32++EF4B B8 DC
  33++EF4D A0 00 A0 BF                          DB $A0, $00, $A0, $BF, $97, $DC
  33++EF51 97 DC
  34++EF53 00 A0 A0 7F                          DB $00, $A0, $A0, $7F, $95, $DA
  34++EF57 95 DA
  35++EF59 0A 1E A0 5E                          DB $0A, $1E, $A0, $5E, $00, $00
  35++EF5D 00 00
  36++EF5F 0A 1E A0 1E                          DB $0A, $1E, $A0, $1E, $00, $00
  36++EF63 00 00
  37++EF65 0A 1E A0 9E                          DB $0A, $1E, $A0, $9E, $00, $00
  37++EF69 00 00
  38++EF6B 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00
  38++EF6F 00 00
  39++EF71              CoriolisVertSize:       equ $ - CoriolisVertices
  40++EF71 1F 10 00 0C  CoriolisEdges:	        DB $1F, $10, $00, $0C
  41++EF75 1F 20 00 04                          DB $1F, $20, $00, $04
  42++EF79 1F 30 04 08                          DB $1F, $30, $04, $08
  43++EF7D 1F 40 08 0C                          DB $1F, $40, $08, $0C
  44++EF81 1F 51 0C 10                          DB $1F, $51, $0C, $10
  45++EF85 1F 61 00 10                          DB $1F, $61, $00, $10
  46++EF89 1F 62 00 14                          DB $1F, $62, $00, $14
  47++EF8D 1F 82 14 04                          DB $1F, $82, $14, $04
  48++EF91 1F 83 04 18                          DB $1F, $83, $04, $18
  49++EF95 1F 73 08 18                          DB $1F, $73, $08, $18
  50++EF99 1F 74 08 1C                          DB $1F, $74, $08, $1C
  51++EF9D 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  52++EFA1 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  53++EFA5 1F DB 20 24                          DB $1F, $DB, $20, $24
  54++EFA9 1F DC 24 28                          DB $1F, $DC, $24, $28
  55++EFAD 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  56++EFB1 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  57++EFB5 1F A6 10 20                          DB $1F, $A6, $10, $20
  58++EFB9 1F B6 14 20                          DB $1F, $B6, $14, $20
  59++EFBD 1F B8 14 24                          DB $1F, $B8, $14, $24
  60++EFC1 1F C8 18 24                          DB $1F, $C8, $18, $24
  61++EFC5 1F C7 18 28                          DB $1F, $C7, $18, $28
  62++EFC9 1F 97 1C 28                          DB $1F, $97, $1C, $28
  63++EFCD 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
  64++EFD1 1E 00 30 34                          DB $1E, $00, $30, $34
  65++EFD5 1E 00 34 38                          DB $1E, $00, $34, $38
  66++EFD9 1E 00 38 3C                          DB $1E, $00, $38, $3C
  67++EFDD 1E 00 3C 30                          DB $1E, $00, $3C, $30
  68++EFE1              CoriolisEdgesSize:      equ $ - CoriolisEdges
  69++EFE1              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
  70++EFE1 1F 00 00 A0  CoriolisNormals:	    DB $1F, $00, $00, $A0
  71++EFE5 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
  72++EFE9 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
  73++EFED 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
  74++EFF1 DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
  75++EFF5 5F 00 A0 00                          DB $5F, $00, $A0, $00
  76++EFF9 1F A0 00 00                          DB $1F, $A0, $00, $00
  77++EFFD 9F A0 00 00                          DB $9F, $A0, $00, $00
  78++F001 1F 00 A0 00                          DB $1F, $00, $A0, $00
  79++F005 FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
  80++F009 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
  81++F00D 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
  82++F011 BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
  83++F015 3F 00 00 A0                          DB $3F, $00, $00, $A0
  84++F019              CoriolisNormalsSize:    equ $ - CoriolisNormals
  85++F019              CoriolisLen:            equ $ - Coriolis
  86++F019
# file closed: ./Data/ships/Coriolis.asm
 103+ F019                                      include "Data/ships/Cougar.asm"
# file opened: ./Data/ships/Cougar.asm
   1++F019 03           Cougar:	                DB $03                         ; Number of cargo canisters released when destroyed
   2++F01A 24 13                                DW $1324                       ; Ship's targetable area LoHi
   3++F01C A6 F0                                DW CougarEdges                 ; Edge Data
   4++F01E 64                                   DB CougarEdgesSize             ; Size of Edge Data
   5++F01F 00                                   DB $00                         ; Gun Vertex Byte offset
   6++F020 2A                                   DB $2A                         ; Explosion Count
   7++F021 13                                   DB CougarVertSize /6           ; Vertex Count /6
   8++F022 72                                   DB CougarVertSize              ; Vertex Count
   9++F023 19                                   DB CougarEdgesCnt              ; Edges Count
  10++F024 00 00                                DW $0000                       ; Bounty LoHi
  11++F026 18                                   DB CougarNormalsSize           ; Face (Normal) Count
  12++F027 22                                   DB $22                         ; Range when it turns to a dot
  13++F028 FC                                   DB $FC                         ; Energy Max
  14++F029 28                                   DB $28                         ; Speed Max
  15++F02A 0A F1                                DW CougarNormals               ; Normals
  16++F02C 02                                   DB $02                         ; Q scaling
  17++F02D 34                                   DB $30 | ShipMissiles4         ; Laser power and Nbr Missiles
  18++F02E 34 F0                                DW CougarVertices              ; Verticles Address
  19++F030 00                                   DB ShipTypeNormal              ; Ship Type
  20++F031 00                                   DB 0                           ; NewB Tactics
  21++F032 80                                   DB ShipCanAnger                ; AI Flags
  22++F033 B0                                   DB $B0                         ; chance of ECM module
  23++F034 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  23++F038 02 44
  24++F03A 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  24++F03E 01 22
  25++F040 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  25++F044 01 55
  26++F046 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  26++F04A 04 55
  27++F04C 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  27++F050 12 35
  28++F052 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  28++F056 23 44
  29++F058 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  29++F05C 34 55
  30++F05E 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  30++F062 01 11
  31++F064 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  31++F068 01 11
  32++F06A 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  32++F06E 34 44
  33++F070 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  33++F074 34 44
  34++F076 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  34++F07A 00 44
  35++F07C 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  35++F080 00 44
  36++F082 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  36++F086 00 00
  37++F088 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  37++F08C 44 44
  38++F08E 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  38++F092 55 55
  39++F094 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  39++F098 55 55
  40++F09A 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  40++F09E 55 55
  41++F0A0 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  41++F0A4 55 55
  42++F0A6              CougarVertSize:         equ $ - CougarVertices
  43++F0A6 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  44++F0AA 1F 01 04 1C                          DB $1F, $01, $04, $1C
  45++F0AE 1F 01 1C 20                          DB $1F, $01, $1C, $20
  46++F0B2 1F 01 20 08                          DB $1F, $01, $20, $08
  47++F0B6 1E 05 08 0C                          DB $1E, $05, $08, $0C
  48++F0BA 1E 45 0C 18                          DB $1E, $45, $0C, $18
  49++F0BE 1E 15 08 10                          DB $1E, $15, $08, $10
  50++F0C2 1E 35 10 18                          DB $1E, $35, $10, $18
  51++F0C6 1F 34 18 28                          DB $1F, $34, $18, $28
  52++F0CA 1F 34 28 24                          DB $1F, $34, $28, $24
  53++F0CE 1F 34 24 14                          DB $1F, $34, $24, $14
  54++F0D2 1F 24 14 00                          DB $1F, $24, $14, $00
  55++F0D6 1B 04 00 0C                          DB $1B, $04, $00, $0C
  56++F0DA 1B 12 04 10                          DB $1B, $12, $04, $10
  57++F0DE 1B 23 14 10                          DB $1B, $23, $14, $10
  58++F0E2 1A 01 04 08                          DB $1A, $01, $04, $08
  59++F0E6 1A 34 14 18                          DB $1A, $34, $14, $18
  60++F0EA 14 00 30 34                          DB $14, $00, $30, $34
  61++F0EE 12 00 34 2C                          DB $12, $00, $34, $2C
  62++F0F2 12 44 2C 38                          DB $12, $44, $2C, $38
  63++F0F6 14 44 38 30                          DB $14, $44, $38, $30
  64++F0FA 12 55 3C 40                          DB $12, $55, $3C, $40
  65++F0FE 14 55 40 48                          DB $14, $55, $40, $48
  66++F102 12 55 48 44                          DB $12, $55, $48, $44
  67++F106 14 55 44 3C                          DB $14, $55, $44, $3C
  68++F10A              CougarEdgesSize:        equ $ - CougarEdges
  69++F10A              CougarEdgesCnt:         equ CougarEdgesSize/4
  70++F10A 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  71++F10E DF 10 2E 04                          DB $DF, $10, $2E, $04
  72++F112 5F 00 1B 05                          DB $5F, $00, $1B, $05
  73++F116 5F 10 2E 04                          DB $5F, $10, $2E, $04
  74++F11A 1F 10 2E 04                          DB $1F, $10, $2E, $04
  75++F11E 3E 00 00 A0                          DB $3E, $00, $00, $A0
  76++F122              CougarNormalsSize:      equ $ - CougarNormals
  77++F122              CougarLen:              equ $ - Cougar
  78++F122
# file closed: ./Data/ships/Cougar.asm
 104+ F122                                      include "Data/ships/Dodo.asm"
# file opened: ./Data/ships/Dodo.asm
   1++F122 00           Dodo:	                DB $00                        ; Number of cargo canisters released when destroyed
   2++F123 90 7E                                DW $7E90                      ; Ship's targetable area LoHi
   3++F125 CD F1                                DW DodoEdges                  ; Edge Data
   4++F127 88                                   DB DodoEdgesSize              ; Size of Edge Data
   5++F128 00                                   DB $00                        ; Gun Vertex Byte offset
   6++F129 36                                   DB $36                        ; Explosion Count
   7++F12A 18                                   DB DodoVertSize /6            ; Vertex Count /6
   8++F12B 90                                   DB DodoVertSize               ; Vertex Count
   9++F12C 22                                   DB DodoEdgesCnt               ; Edges Count
  10++F12D 00 00                                DW $0000                      ; Bounty LoHi
  11++F12F 30                                   DB DodoNormalsSize            ; Face (Normal) Count
  12++F130 7D                                   DB $7D                        ; Range when it turns to a dot
  13++F131 F0                                   DB $F0                        ; Energy Max
  14++F132 00                                   DB $00                        ; Speed Max
  15++F133 55 F2                                DW DodoNormals                ; Normals
  16++F135 00                                   DB $00                        ; Q scaling
  17++F136 00                                   DB $00                        ; Laser power and Nbr Missiles
  18++F137 3D F1                                DW DodoVertices               ; Verticles Address
  19++F139 02                                   DB ShipTypeStation            ; Ship Type
  20++F13A 00                                   DB 0                          ; NewB Tactics
  21++F13B 00                                   DB 0                          ; AI Flags
  22++F13C FF                                   DB $FF                        ; chance of ECM module
  23++F13D 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  23++F141 01 55
  24++F143 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  24++F147 01 22
  25++F149 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  25++F14D 02 33
  26++F14F 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  26++F153 03 44
  27++F155 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  27++F159 04 55
  28++F15B 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  28++F15F 15 66
  29++F161 E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  29++F165 12 77
  30++F167 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  30++F16B 23 88
  31++F16D 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  31++F171 34 99
  32++F173 E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  32++F177 45 AA
  33++F179 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  33++F17D 16 77
  34++F17F E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  34++F183 27 88
  35++F185 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  35++F189 38 99
  36++F18B E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  36++F18F 49 AA
  37++F191 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  37++F195 56 AA
  38++F197 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  38++F19B 67 BB
  39++F19D 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  39++F1A1 78 BB
  40++F1A3 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  40++F1A7 89 BB
  41++F1A9 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  41++F1AD 9A BB
  42++F1AF 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  42++F1B3 6A BB
  43++F1B5 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  43++F1B9 00 00
  44++F1BB 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  44++F1BF 00 00
  45++F1C1 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  45++F1C5 00 00
  46++F1C7 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  46++F1CB 00 00
  47++F1CD              DodoVertSize:           equ $ - DodoVertices
  48++F1CD 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  49++F1D1 1F 02 04 08                          DB $1F, $02, $04, $08
  50++F1D5 1F 03 08 0C                          DB $1F, $03, $08, $0C
  51++F1D9 1F 04 0C 10                          DB $1F, $04, $0C, $10
  52++F1DD 1F 05 10 00                          DB $1F, $05, $10, $00
  53++F1E1 1F 16 14 28                          DB $1F, $16, $14, $28
  54++F1E5 1F 17 28 18                          DB $1F, $17, $28, $18
  55++F1E9 1F 27 18 2C                          DB $1F, $27, $18, $2C
  56++F1ED 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  57++F1F1 1F 38 1C 30                          DB $1F, $38, $1C, $30
  58++F1F5 1F 39 30 20                          DB $1F, $39, $30, $20
  59++F1F9 1F 49 20 34                          DB $1F, $49, $20, $34
  60++F1FD 1F 4A 34 24                          DB $1F, $4A, $34, $24
  61++F201 1F 5A 24 38                          DB $1F, $5A, $24, $38
  62++F205 1F 56 38 14                          DB $1F, $56, $38, $14
  63++F209 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  64++F20D 1F 8B 40 44                          DB $1F, $8B, $40, $44
  65++F211 1F 9B 44 48                          DB $1F, $9B, $44, $48
  66++F215 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  67++F219 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  68++F21D 1F 15 00 14                          DB $1F, $15, $00, $14
  69++F221 1F 12 04 18                          DB $1F, $12, $04, $18
  70++F225 1F 23 08 1C                          DB $1F, $23, $08, $1C
  71++F229 1F 34 0C 20                          DB $1F, $34, $0C, $20
  72++F22D 1F 45 10 24                          DB $1F, $45, $10, $24
  73++F231 1F 67 28 3C                          DB $1F, $67, $28, $3C
  74++F235 1F 78 2C 40                          DB $1F, $78, $2C, $40
  75++F239 1F 89 30 44                          DB $1F, $89, $30, $44
  76++F23D 1F 9A 34 48                          DB $1F, $9A, $34, $48
  77++F241 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  78++F245 1E 00 50 54                          DB $1E, $00, $50, $54
  79++F249 14 00 54 5C                          DB $14, $00, $54, $5C
  80++F24D 17 00 5C 58                          DB $17, $00, $5C, $58
  81++F251 14 00 58 50                          DB $14, $00, $58, $50
  82++F255              DodoEdgesSize:          equ $ - DodoEdges
  83++F255              DodoEdgesCnt:           equ DodoEdgesSize/4
  84++F255 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  85++F259 1F 67 8E 58                          DB $1F, $67, $8E, $58
  86++F25D 5F A9 37 59                          DB $5F, $A9, $37, $59
  87++F261 5F 00 B0 58                          DB $5F, $00, $B0, $58
  88++F265 DF A9 37 59                          DB $DF, $A9, $37, $59
  89++F269 9F 67 8E 58                          DB $9F, $67, $8E, $58
  90++F26D 3F 00 B0 58                          DB $3F, $00, $B0, $58
  91++F271 3F A9 37 59                          DB $3F, $A9, $37, $59
  92++F275 7F 67 8E 58                          DB $7F, $67, $8E, $58
  93++F279 FF 67 8E 58                          DB $FF, $67, $8E, $58
  94++F27D BF A9 37 59                          DB $BF, $A9, $37, $59
  95++F281 3F 00 00 C4                          DB $3F, $00, $00, $C4
  96++F285              DodoNormalsSize:        equ $ - DodoNormals
  97++F285              DodoLen:                equ $ - Dodo
  98++F285
# file closed: ./Data/ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
 853  F285                  DISPLAY "Bank ",BankShipModels1," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels1"
 854  F285              ; Bank 66  ------------------------------------------------------------------------------------------------------------------------
 855  F285                  SLOT    DispMarketAddr
 856  F285                  PAGE    BankDispMarket
 857  F285                  ORG     DispMarketAddr
 858  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 84 91  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 50 92  						DW $0220,name_expanded
   4+ C018 80 0B D2 8B  						DW $0B80,WordUnit
   5+ C01C B0 0B 1B 8E  						DW $0BB0,WordQuantity
   6+ C020 08 13 F9 8D  						DW $1308,WordProduct
   7+ C024 60 13 01 8E  						DW $1360,WordUoM
   8+ C028 80 13 05 8E  						DW $1380,WordPrice
   9+ C02C B0 13 29 8E  						DW $13B0,WordStock
  10+ C030 E0 13 25 8E  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3              .BoilerTextLoop:
   4++C1F3 C5           	push		bc			; Save Message Count loop value
   5++C1F4 4E           	ld			c,(hl)		; Get Row into b
   6++C1F5 23           	inc			hl
   7++C1F6 46           	ld			b,(hl)		; Get Col into b
   8++C1F7 23           	inc			hl
   9++C1F8 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C1F9 23           	inc			hl
  11++C1FA 56           	ld			d,(hl)		; Get text address Hi into E
  12++C1FB 23           	inc			hl
  13++C1FC E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C1FD EB           	ex			de,hl		; now hl = address of text data
  15++C1FE 1E FF        	ld			e,txt_status_colour
  16++C200 C5           	push		bc
  17++C201 D1           	pop			de
  18++C202                  MMUSelectLayer1
  18++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C206 CD C8 E0     	call		l1_print_at
  20++C209 E1           	pop			hl
  21++C20A C1           	pop			bc
  22++C20B 10 E6        	djnz		.BoilerTextLoop
  23++C20D C9           	ret
  24++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A A5 87     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A A3 87                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A A9 87                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:   call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD C8 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD C8 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:       push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD C8 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 AA 87                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 D0 8F                             ld		hl,WordIdx
 256+ C2A5 CD 2B 8B                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD C8 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 D0 8F                             ld		hl,WordIdx
 264+ C2BF CD 2B 8B                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD C8 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD C8 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD C8 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD C8 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:InitNoDoubleBuffer
 297+ C323             >                            MMUSelectLayer1
 297+ C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 297+ C327 CD 80 E0    >                            call	l1_cls
 297+ C32A 3E 07       >                            ld		a,7
 297+ C32C CD 9B E0    >                            call	l1_attr_cls_to_a
 297+ C32F             >                            MMUSelectLayer2
 297+ C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C333 CD 0A E0    >                            call    asm_l2_double_buffer_off
 297+ C336 CD 0E E2    >                            call	l2_cls	; Get some space
 297+ C339             >                            MMUSelectSpriteBank
 297+ C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 297+ C33D CD 6E E5    >                            call    sprite_cls_cursors
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 AC 81                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD FC E3                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD 87 E4                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD 87 E4                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD 87 E4                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD 87 E4                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD 87 E4                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD 87 E4                             call	l2_draw_horz_line
 323+ C38A 3A 22 82     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,     a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD CB 91                             call	expandTokenToString
 327+ C395 CD 7A F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD C8 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD C8 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: ./Menus/market_prices_disp.asm
 859  C3D3                  DISPLAY "Bank ",BankDispMarket," - Bytes free ",/D, $2000 - ($-MenuShrChtAddr), " - BankDispMarket"
 860  C3D3              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
 861  C3D3                  SLOT    ShipModelsAddr
 862  C3D3                  PAGE    BankShipModels2
 863  C3D3              	ORG     ShipModelsAddr, BankShipModels2
 864  E000
 865  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
 866  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
 866  E00F 06 00       >                        ld      b,0
 866  E011 4F          >                        ld      c,a                                 ; c= original ship id
 866  E012 CB 3F       >.ShiftLoop:             srl     a
 866  E014 CB 3F       >                        srl     a
 866  E016 CB 3F       >                        srl     a
 866  E018 CB 3F       >                        srl     a                                   ; divide by 16
 866  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 866  E01B 79          >                        ld      a,c
 866  E01C 50          >                        ld      d,b
 866  E01D 1E 10       >                        ld      e,16
 866  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 866  E021 93          >                        sub     e                                   ; a= actual model id now
 866  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 866  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 866  E024 7A          >                        ld      a,d                                 ; a = bank number
 866  E025             >;.. Now b = bank and a = adjusted ship nbr
 866  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
 866  E028 ED 31       >                        add     hl,a
 866  E02A ED 31       >                        add     hl,a
 866  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 866  E02D             >                        ClearCarryFlag
 866  E02D B7          >                        or a
 866  E02E C9          >                        ret
 867  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
 867  E02F 2A 43 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 867  E032 11 49 C3    >                        ld          de,UBnkHullVerticies
 867  E035 06 00       >                        ld          b,0
 867  E037 3A 37 C3    >                        ld			a,(VertexCtX6Addr)
 867  E03A 4F          >                        ld          c,a
 867  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 867  E03C CD 58 7D    >                        call        memcopy_dma
 867  E03F C9          >                        ret
 868  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
 868  E040 2A 31 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 868  E043 11 39 C4    >                        ld          de,UBnkHullEdges
 868  E046 06 00       >                        ld          b,0
 868  E048 3A 33 C3    >                        ld			a,(LineX4Addr)
 868  E04B 4F          >                        ld          c,a
 868  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 868  E04D CD 58 7D    >                        call        memcopy_dma
 868  E050 C9          >                        ret
 869  E051              CopyNormsToUniv2:       McopyNormsToUniverse
 869  E051 2A 3F C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 869  E054 11 01 C5    >                        ld          de,UBnkHullNormals
 869  E057 06 00       >                        ld          b,0
 869  E059 3A 3B C3    >                        ld          a,(FaceCtX4Addr)
 869  E05C 4F          >                        ld          c,a
 869  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 869  E05E CD 58 7D    >                        call        memcopy_dma
 869  E061 C9          >                        ret
 870  E062              ShipBankTable2:         MShipBankTable
 870  E062 3B 00       >                        DW      BankShipModels1
 870  E064 43 00       >                        DW      BankShipModels2
 870  E066 44 00       >                        DW      BankShipModels3
 870  E068 45 00       >                        DW      BankShipModels4
 871  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
 871  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
 871  E06D 36 43       >                        ld          (hl),BankShipModels2
 871  E06F F5          >                        push        af
 871  E070 FD 7D       >                        ld          a,iyl
 871  E072 32 43 C0    >                        ld          (UBnKShipModelId),a
 871  E075 F1          >                        pop         af
 871  E076 32 42 C0    >                        ld          (UBnKShipModelNbr),a
 871  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 871  E07C ED 31       >                        add         hl,a
 871  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 871  E080 4E          >                        ld          c,(hl)
 871  E081 23          >                        inc         hl
 871  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 871  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 871  E086 ED 31       >                        add         hl,a
 871  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 871  E08A 7E          >                        ld          a,(hl)
 871  E08B 23          >                        inc         hl
 871  E08C 66          >                        ld          h,(hl)
 871  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 871  E08E 11 2E C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 871  E091 01 1B 00    >                        ld          bc,ShipDataLength
 871  E094 ED B0       >                        ldir
 871  E096 CD 2F E0    >                        call        CopyVertsToUniv
 871  E099 CD 40 E0    >                        call        CopyEdgesToUniv
 871  E09C CD 51 E0    >                        call        CopyNormsToUniv
 871  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
 871  E0A2 3E 20       >                        ld          a," "
 871  E0A4 06 10       >                        ld          b,16
 871  E0A6 77          >.fillLoop:              ld          (hl),a
 871  E0A7 23          >                        inc         hl
 871  E0A8 10 FC       >                        djnz        .fillLoop
 871  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnKShipModelId)
 871  E0AD CD B7 91    >                        call        ShipIndexToAddress
 871  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
 871  E0B3 06 10       >                        ld          b,16
 871  E0B5 7E          >.CopyLoop:              ld          a,(hl)
 871  E0B6 FE 00       >                        cp          0
 871  E0B8 28 05       >                        jr          z,.CopyDone
 871  E0BA 12          >                        ld          (de),a
 871  E0BB 23          >                        inc         hl
 871  E0BC 13          >                        inc         de
 871  E0BD 10 F6       >                        djnz        .CopyLoop
 871  E0BF C9          >.CopyDone:              ret
 872  E0C0              CopyBodyToUniverse2:    MCopyBodyToUniverse     CopyShipToUniverse2
 872  E0C0 3E 0D       >                        ld          a,13
 872  E0C2 CD 6A E0    >                        call        CopyShipToUniverse2
 872  E0C5 C9          >                        ret
 873  E0C6
 874  E0C6                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E0C6 66 E1        ShipModelTable2:         DW Dragon                                  ;16  $10
   2+ E0C8 43 E2                                 DW Escape_Pod                              ;17  $11
   3+ E0CA 9E E2                                 DW Fer_De_Lance                            ;18  $12
   4+ E0CC BF E3                                 DW Gecko                                   ;19  $13
   5+ E0CE 8A E4                                 DW Ghavial                                 ;20  $14
   6+ E0D0 75 E5                                 DW Iguana                                  ;21  $15
   7+ E0D2 6E E6                                 DW Krait                                   ;22  $16
   8+ E0D4 5B E7                                 DW Logo                                    ;23  $17
   9+ E0D6 1A E9                                 DW Mamba                                   ;24  $18
  10+ E0D8 4F EA                                 DW Missile                                 ;25  $19
  11+ E0DA 54 EB                                 DW Monitor                                 ;26  $1A
  12+ E0DC 5D EC                                 DW Moray                                   ;27  $1B
  13+ E0DE 3C ED                                 DW Ophidian                                ;28  $1C
  14+ E0E0 77 EE                                 DW Plate                                   ;29  $1D
  15+ E0E2 B8 EE                                 DW Python                                  ;30  $1E
  16+ E0E4 B1 EF                                 DW Python_P                                ;31  $1F
  17+ E0E6 81 E1        ShipVertexTable2:        DW DragonVertices                          ;16  $10
  18+ E0E8 5E E2                                 DW Escape_PodVertices                      ;17  $11
  19+ E0EA B9 E2                                 DW Fer_De_LanceVertices                    ;18  $12
  20+ E0EC DA E3                                 DW GeckoVertices                           ;19  $13
  21+ E0EE A5 E4                                 DW GhavialVertices                         ;20  $14
  22+ E0F0 90 E5                                 DW IguanaVertices                          ;21  $15
  23+ E0F2 89 E6                                 DW KraitVertices                           ;22  $16
  24+ E0F4 76 E7                                 DW LogoVertices                            ;23  $17
  25+ E0F6 35 E9                                 DW MambaVertices                           ;24  $18
  26+ E0F8 6A EA                                 DW MissileVertices                         ;25  $19
  27+ E0FA 6F EB                                 DW MonitorVertices                         ;26  $1A
  28+ E0FC 78 EC                                 DW MorayVertices                           ;27  $1B
  29+ E0FE 57 ED                                 DW OphidianVertices                        ;28  $1C
  30+ E100 92 EE                                 DW PlateVertices                           ;29  $1D
  31+ E102 D3 EE                                 DW PythonVertices                          ;30  $1E
  32+ E104 CC EF                                 DW Python_PVertices                        ;31  $1F
  33+ E106 B7 E1        ShipEdgeTable2:          DW DragonEdges                             ;16  $10
  34+ E108 76 E2                                 DW Escape_PodEdges                         ;17  $11
  35+ E10A 2B E3                                 DW Fer_De_LanceEdges                       ;18  $12
  36+ E10C 22 E4                                 DW GeckoEdges                              ;19  $13
  37+ E10E ED E4                                 DW GhavialEdges                            ;20  $14
  38+ E110 EA E5                                 DW IguanaEdges                             ;21  $15
  39+ E112 EF E6                                 DW KraitEdges                              ;22  $16
  40+ E114 72 E8                                 DW LogoEdges                               ;23  $17
  41+ E116 CB E9                                 DW MambaEdges                              ;24  $18
  42+ E118 D0 EA                                 DW MissileEdges                            ;25  $19
  43+ E11A D5 EB                                 DW MonitorEdges                            ;26  $1A
  44+ E11C CC EC                                 DW MorayEdges                              ;27  $1B
  45+ E11E CF ED                                 DW OphidianEdges                           ;28  $1C
  46+ E120 A4 EE                                 DW PlateEdges                              ;29  $1D
  47+ E122 15 EF                                 DW PythonEdges                             ;30  $1E
  48+ E124 0E F0                                 DW Python_PEdges                           ;31  $1F
  49+ E126 0B E2        ShipNormalTable2:        DW DragonNormals                           ;16  $10
  50+ E128 8E E2                                 DW Escape_PodNormals                       ;17  $11
  51+ E12A 97 E3                                 DW Fer_De_LanceNormals                     ;18  $12
  52+ E12C 66 E4                                 DW GeckoNormals                            ;19  $13
  53+ E12E 45 E5                                 DW GhavialNormals                          ;20  $14
  54+ E130 46 E6                                 DW IguanaNormals                           ;21  $15
  55+ E132 43 E7                                 DW KraitNormals                            ;22  $16
  56+ E134 06 E9                                 DW LogoNormals                             ;23  $17
  57+ E136 3B EA                                 DW MambaNormals                            ;24  $18
  58+ E138 30 EB                                 DW MissileNormals                          ;25  $19
  59+ E13A 31 EC                                 DW MonitorNormals                          ;26  $1A
  60+ E13C 18 ED                                 DW MorayNormals                            ;27  $1B
  61+ E13E 47 EE                                 DW OphidianNormals                         ;28  $1C
  62+ E140 B4 EE                                 DW PlateNormals                            ;29  $1D
  63+ E142 7D EF                                 DW PythonNormals                           ;30  $1E
  64+ E144 76 F0                                 DW Python_PNormals                         ;31  $1F
  65+ E146 DD 00        ShipModelSizeTable2:     DW DragonLen                               ;16  $10
  66+ E148 5B 00                                 DW Escape_PodLen                           ;17  $11
  67+ E14A 21 01                                 DW Fer_De_LanceLen                         ;18  $12
  68+ E14C CB 00                                 DW GeckoLen                                ;19  $13
  69+ E14E EB 00                                 DW GhavialLen                              ;20  $14
  70+ E150 F9 00                                 DW IguanaLen                               ;21  $15
  71+ E152 ED 00                                 DW KraitLen                                ;22  $16
  72+ E154 BF 01                                 DW LogoLen                                 ;23  $17
  73+ E156 35 01                                 DW MambaLen                                ;24  $18
  74+ E158 05 01                                 DW MissileLen                              ;25  $19
  75+ E15A 09 01                                 DW MonitorLen                              ;26  $1A
  76+ E15C DF 00                                 DW MorayLen                                ;27  $1B
  77+ E15E 3B 01                                 DW OphidianLen                             ;28  $1C
  78+ E160 41 00                                 DW PlateLen                                ;29  $1D
  79+ E162 F9 00                                 DW PythonLen                               ;30  $1E
  80+ E164 F9 00                                 DW Python_PLen                             ;31  $1F
  81+ E166
  82+ E166                                      include "Data/ships/Dragon.asm"
# file opened: ./Data/ships/Dragon.asm
   1++E166 00           Dragon:	                DB $00                                                    ; Number of cargo canisters released when destroyed
   2++E167 66 50                                DW $5066                                                  ; Ship's targetable area LoHi
   3++E169 B7 E1                                DW DragonEdges                                            ; Edge Data
   4++E16B 54                                   DB DragonEdgesSize                                        ; Size of Edge Data
   5++E16C 00                                   DB $00                                                    ; Gun Vertex Byte offset
   6++E16D 3C                                   db $3C                                                    ; Explosion Count
   7++E16E 09                                   DB DragonVertSize /6                                      ; Vertex Count /6
   8++E16F 36                                   DB DragonVertSize                                         ; Vertex Count
   9++E170 15                                   DB DragonEdgesCnt                                         ; Edges Count
  10++E171 00 00                                DW $0000                                                  ; Bounty LoHi
  11++E173 38                                   DB DragonNormalsSize                                      ; Face (Normal) Count
  12++E174 20                                   DB $20                                                    ; Range when it turns to a dot
  13++E175 F7                                   DB $F7                                                    ; Energy Max
  14++E176 14                                   DB $14                                                    ; Speed Max
  15++E177 0B E2                                DW DragonNormals                                          ; Normals
  16++E179 00                                   DB $00                                                    ; Q scaling
  17++E17A 47                                   DB $40 | ShipMissiles7                                    ; Laser power and Nbr Missiles
  18++E17B 81 E1                                DW DragonVertices                                         ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                                         ; Ship Type
  20++E17E 00                                   DB 0                                                      ; NewB Tactics
  21++E17F A0                                   DB ShipCanAnger | ShipFighterBaySize2 | ShipFighterWorm   ; AI Flags
  22++E180 B0                                   DB $B0                                                    ; chance of ECM module
  23++E181 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  23++E185 6B 05
  24++E187 D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  24++E18B 67 01
  25++E18D D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  25++E191 78 12
  26++E193 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  26++E197 CD 23
  27++E199 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  27++E19D CD 89
  28++E19F D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  28++E1A3 9A 34
  29++E1A5 D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  29++E1A9 AB 45
  30++E1AB 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  30++E1AF FF FF
  31++E1B1 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  31++E1B5 FF FF
  32++E1B7              DragonVertSize:         equ $ - DragonVertices
  33++E1B7 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  34++E1BB 1F 12 08 1C                          DB $1F, $12, $08, $1C
  35++E1BF 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  36++E1C3 1F 34 14 1C                          DB $1F, $34, $14, $1C
  37++E1C7 1F 45 18 1C                          DB $1F, $45, $18, $1C
  38++E1CB 1F 50 00 1C                          DB $1F, $50, $00, $1C
  39++E1CF 1F 67 04 20                          DB $1F, $67, $04, $20
  40++E1D3 1F 78 08 20                          DB $1F, $78, $08, $20
  41++E1D7 1F 89 10 20                          DB $1F, $89, $10, $20
  42++E1DB 1F 9A 14 20                          DB $1F, $9A, $14, $20
  43++E1DF 1F AB 18 20                          DB $1F, $AB, $18, $20
  44++E1E3 1F B6 00 20                          DB $1F, $B6, $00, $20
  45++E1E7 1F 06 00 04                          DB $1F, $06, $00, $04
  46++E1EB 1F 17 04 08                          DB $1F, $17, $04, $08
  47++E1EF 1F 4A 14 18                          DB $1F, $4A, $14, $18
  48++E1F3 1F 5B 00 18                          DB $1F, $5B, $00, $18
  49++E1F7 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  50++E1FB 1F 8C 08 10                          DB $1F, $8C, $08, $10
  51++E1FF 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  52++E203 1F 9D 10 14                          DB $1F, $9D, $10, $14
  53++E207 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  54++E20B              DragonEdgesSize:        equ $ - DragonEdges
  55++E20B              DragonEdgesCnt:         equ DragonEdgesSize/4
  56++E20B 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  57++E20F 1F 21 5A 00                          DB $1F, $21, $5A, $00
  58++E213 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  59++E217 BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  60++E21B 9F 21 5A 00                          DB $9F, $21, $5A, $00
  61++E21F 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  62++E223 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  63++E227 5F 21 5A 00                          DB $5F, $21, $5A, $00
  64++E22B 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  65++E22F FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  66++E233 DF 21 5A 00                          DB $DF, $21, $5A, $00
  67++E237 DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  68++E23B 3F 30 00 52                          DB $3F, $30, $00, $52
  69++E23F BF 30 00 52                          DB $BF, $30, $00, $52
  70++E243              DragonNormalsSize:      equ $ - DragonNormals
  71++E243              DragonLen:              equ $ - Dragon
  72++E243
# file closed: ./Data/ships/Dragon.asm
  83+ E243                                      include "Data/ships/Escape_Pod.asm"
# file opened: ./Data/ships/Escape_Pod.asm
   1++E243 20           Escape_Pod:             DB $20                          ; Number of cargo canisters released when destroyed
   2++E244 00 01                                DW $0100                        ; Ship's targetable area LoHi
   3++E246 76 E2                                DW Escape_PodEdges              ; Edge Data
   4++E248 18                                   DB Escape_PodEdgesSize          ; Size of Edge Data
   5++E249 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E24A 16                                   DB $16                          ; Explosion Count
   7++E24B 04                                   DB Escape_PodVertSize /6        ; Vertex Count /6
   8++E24C 18                                   DB Escape_PodVertSize           ; Vertex Count
   9++E24D 06                                   DB Escape_PodEdgesCnt           ; Edges Count
  10++E24E 00 00                                DW $0000                        ; Bounty LoHi
  11++E250 10                                   DB Escape_PodNormalsSize        ; Face (Normal) Count
  12++E251 08                                   DB $08                          ; Range when it turns to a dot
  13++E252 11                                   DB $11                          ; Energy Max
  14++E253 08                                   DB $08                          ; Speed Max
  15++E254 8E E2                                DW Escape_PodNormals            ; Normals
  16++E256 04                                   DB $04                          ; Q scaling
  17++E257 00                                   DB $00                          ; Laser power and Nbr Missiles
  18++E258 5E E2                                DW Escape_PodVertices           ; Verticles Address
  19++E25A 00                                   DB 0                            ; Ship Type
  20++E25B 00                                   DB 0                            ; NewB Tactics
  21++E25C 00                                   DB 0                            ; AI Flags
  22++E25D FF                                   DB $FF                          ; chance of ECM module
  23++E25E 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  23++E262 12 33
  24++E264 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  24++E268 02 33
  25++E26A 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  25++E26E 01 33
  26++E270 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  26++E274 01 22
  27++E276              Escape_PodVertSize:     equ $ - Escape_PodVertices
  28++E276 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  29++E27A 1F 03 04 08                          DB $1F, $03, $04, $08
  30++E27E 1F 01 08 0C                          DB $1F, $01, $08, $0C
  31++E282 1F 12 0C 00                          DB $1F, $12, $0C, $00
  32++E286 1F 13 00 08                          DB $1F, $13, $00, $08
  33++E28A 1F 02 0C 04                          DB $1F, $02, $0C, $04
  34++E28E              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  35++E28E              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  36++E28E 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  37++E292 1F 27 67 1E                          DB $1F, $27, $67, $1E
  38++E296 5F 27 67 1E                          DB $5F, $27, $67, $1E
  39++E29A 9F 70 00 00                          DB $9F, $70, $00, $00
  40++E29E              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  41++E29E              Escape_PodLen:          equ $ - Escape_Pod
  42++E29E
# file closed: ./Data/ships/Escape_Pod.asm
  84+ E29E                                      include "Data/ships/Fer_De_Lance.asm"
# file opened: ./Data/ships/Fer_De_Lance.asm
   1++E29E 00           Fer_De_Lance:	        DB $00                          ; Number of cargo canisters released when destroyed
   2++E29F 40 06                                DW $0640                        ; Ship's targetable area LoHi
   3++E2A1 2B E3                                DW Fer_De_LanceEdges            ; Edge Data
   4++E2A3 6C                                   DB Fer_De_LanceEdgesSize        ; Size of Edge Data
   5++E2A4 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E2A5 1A                                   DB $1A                          ; Explosion Count
   7++E2A6 13                                   DB Fer_De_LanceVertSize /6      ; Vertex Count /6
   8++E2A7 72                                   DB Fer_De_LanceVertSize         ; Vertex Count
   9++E2A8 1B                                   DB Fer_De_LanceEdgesCnt         ; Edges Count
  10++E2A9 00 00                                DW $0000                        ; Bounty LoHi
  11++E2AB 28                                   DB Fer_De_LanceNormalsSize      ; Face (Normal) Count
  12++E2AC 28                                   DB $28                          ; Range when it turns to a dot
  13++E2AD A0                                   DB $A0                          ; Energy Max
  14++E2AE 1E                                   DB $1E                          ; Speed Max
  15++E2AF 97 E3                                DW Fer_De_LanceNormals          ; Normals
  16++E2B1 01                                   DB $01                          ; Q scaling
  17++E2B2 17                                   DB $10 | ShipMissiles7          ; Laser power and Nbr Missiles
  18++E2B3 B9 E2                                DW Fer_De_LanceVertices         ; Verticles Address
  19++E2B5 00                                   DB ShipTypeNormal               ; Ship Type
  20++E2B6 00                                   DB 0                            ; NewB Tactics
  21++E2B7 80                                   DB ShipCanAnger                 ; AI Flags
  22++E2B8 FF                                   DB $FF                          ; chance of ECM module
  23++E2B9 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  23++E2BD 01 59
  24++E2BF 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  24++E2C3 12 99
  25++E2C5 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  25++E2C9 23 99
  26++E2CB 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  26++E2CF 34 99
  27++E2D1 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  27++E2D5 45 99
  28++E2D7 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  28++E2DB 01 26
  29++E2DD 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  29++E2E1 23 67
  30++E2E3 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  30++E2E7 34 78
  31++E2E9 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  31++E2ED 04 58
  32++E2EF 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  32++E2F3 06 78
  33++E2F5 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  33++E2F9 00 00
  34++E2FB 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  34++E2FF 00 00
  35++E301 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  35++E305 00 00
  36++E307 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  36++E30B 00 00
  37++E30D 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  37++E311 00 00
  38++E313 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  38++E317 00 00
  39++E319 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  39++E31D 99 99
  40++E31F 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  40++E323 99 99
  41++E325 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  41++E329 99 99
  42++E32B              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  43++E32B 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  44++E32F 1F 29 04 08                          DB $1F, $29, $04, $08
  45++E333 1F 39 08 0C                          DB $1F, $39, $08, $0C
  46++E337 1F 49 0C 10                          DB $1F, $49, $0C, $10
  47++E33B 1F 59 00 10                          DB $1F, $59, $00, $10
  48++E33F 1C 01 00 14                          DB $1C, $01, $00, $14
  49++E343 1C 26 14 18                          DB $1C, $26, $14, $18
  50++E347 1C 37 18 1C                          DB $1C, $37, $18, $1C
  51++E34B 1C 48 1C 20                          DB $1C, $48, $1C, $20
  52++E34F 1C 05 00 20                          DB $1C, $05, $00, $20
  53++E353 0F 06 14 24                          DB $0F, $06, $14, $24
  54++E357 0B 67 18 24                          DB $0B, $67, $18, $24
  55++E35B 0B 78 1C 24                          DB $0B, $78, $1C, $24
  56++E35F 0F 08 20 24                          DB $0F, $08, $20, $24
  57++E363 0E 12 04 14                          DB $0E, $12, $04, $14
  58++E367 0E 23 08 18                          DB $0E, $23, $08, $18
  59++E36B 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  60++E36F 0E 45 10 20                          DB $0E, $45, $10, $20
  61++E373 08 00 28 2C                          DB $08, $00, $28, $2C
  62++E377 09 00 2C 30                          DB $09, $00, $2C, $30
  63++E37B 0B 00 28 30                          DB $0B, $00, $28, $30
  64++E37F 08 00 34 38                          DB $08, $00, $34, $38
  65++E383 09 00 38 3C                          DB $09, $00, $38, $3C
  66++E387 0B 00 34 3C                          DB $0B, $00, $34, $3C
  67++E38B 0C 99 40 44                          DB $0C, $99, $40, $44
  68++E38F 0C 99 40 48                          DB $0C, $99, $40, $48
  69++E393 08 99 44 48                          DB $08, $99, $44, $48
  70++E397              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  71++E397              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  72++E397 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  73++E39B 9F 44 00 18                          DB $9F, $44, $00, $18
  74++E39F BF 3F 00 25                          DB $BF, $3F, $00, $25
  75++E3A3 3F 00 00 68                          DB $3F, $00, $00, $68
  76++E3A7 3F 3F 00 25                          DB $3F, $3F, $00, $25
  77++E3AB 1F 44 00 18                          DB $1F, $44, $00, $18
  78++E3AF BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  79++E3B3 3C 00 2D 16                          DB $3C, $00, $2D, $16
  80++E3B7 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  81++E3BB 5F 00 1C 00                          DB $5F, $00, $1C, $00
  82++E3BF              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  83++E3BF              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  84++E3BF
# file closed: ./Data/ships/Fer_De_Lance.asm
  85+ E3BF                                      include "Data/ships/Gecko.asm"
# file opened: ./Data/ships/Gecko.asm
   1++E3BF 00           Gecko:	                DB $00                         ; Number of cargo canisters released when destroyed
   2++E3C0 49 26                                DW $2649                       ; Ship's targetable area LoHi
   3++E3C2 22 E4                                DW GeckoEdges                  ; Edge Data
   4++E3C4 44                                   DB GeckoEdgesSize              ; Size of Edge Data
   5++E3C5 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E3C6 1A                                   DB $1A                         ; Explosion Count
   7++E3C7 0C                                   DB GeckoVertSize /6            ; Vertex Count /6
   8++E3C8 48                                   DB GeckoVertSize               ; Vertex Count
   9++E3C9 11                                   DB GeckoEdgesCnt               ; Edges Count
  10++E3CA 37 00                                DW $0037                       ; Bounty LoHi
  11++E3CC 24                                   DB GeckoNormalsSize            ; Face (Normal) Count
  12++E3CD 12                                   DB $12                         ; Range when it turns to a dot
  13++E3CE 46                                   DB $46                         ; Energy Max
  14++E3CF 1E                                   DB $1E                         ; Speed Max
  15++E3D0 66 E4                                DW GeckoNormals                ; Normals
  16++E3D2 03                                   DB $03                         ; Q scaling
  17++E3D3 10                                   DB $10                         ; Laser power and Nbr Missiles
  18++E3D4 DA E3                                DW GeckoVertices               ; Verticles Address
  19++E3D6 00                                   DB ShipTypeNormal              ; Ship Type
  20++E3D7 00                                   DB 0                           ; NewB Tactics
  21++E3D8 80                                   DB ShipCanAnger                ; AI Flags
  22++E3D9 60                                   DB $60                         ; chance of ECM module
  23++E3DA 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  23++E3DE 03 45
  24++E3E0 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  24++E3E4 01 23
  25++E3E6 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  25++E3EA 05 67
  26++E3EC 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  26++E3F0 01 78
  27++E3F2 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  27++E3F6 45 66
  28++E3F8 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  28++E3FC 12 88
  29++E3FE 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  29++E402 34 67
  30++E404 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  30++E408 23 78
  31++E40A 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  31++E40E 33 33
  32++E410 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  32++E414 33 33
  33++E416 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  33++E41A 33 33
  34++E41C 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  34++E420 33 33
  35++E422              GeckoVertSize:          equ $ - GeckoVertices
  36++E422 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  37++E426 1F 12 04 14                          DB $1F, $12, $04, $14
  38++E42A 1F 18 14 0C                          DB $1F, $18, $14, $0C
  39++E42E 1F 07 0C 08                          DB $1F, $07, $0C, $08
  40++E432 1F 56 08 10                          DB $1F, $56, $08, $10
  41++E436 1F 45 10 00                          DB $1F, $45, $10, $00
  42++E43A 1F 28 14 1C                          DB $1F, $28, $14, $1C
  43++E43E 1F 37 1C 18                          DB $1F, $37, $1C, $18
  44++E442 1F 46 18 10                          DB $1F, $46, $18, $10
  45++E446 1D 05 00 08                          DB $1D, $05, $00, $08
  46++E44A 1E 01 04 0C                          DB $1E, $01, $04, $0C
  47++E44E 1D 34 00 18                          DB $1D, $34, $00, $18
  48++E452 1E 23 04 1C                          DB $1E, $23, $04, $1C
  49++E456 14 67 08 18                          DB $14, $67, $08, $18
  50++E45A 14 78 0C 1C                          DB $14, $78, $0C, $1C
  51++E45E 10 33 20 28                          DB $10, $33, $20, $28
  52++E462 11 33 24 2C                          DB $11, $33, $24, $2C
  53++E466              GeckoEdgesSize:             equ $ - GeckoEdges
  54++E466              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  55++E466 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  56++E46A 1F 04 2D 08                          DB $1F, $04, $2D, $08
  57++E46E 5F 19 6C 13                          DB $5F, $19, $6C, $13
  58++E472 5F 00 54 0C                          DB $5F, $00, $54, $0C
  59++E476 DF 19 6C 13                          DB $DF, $19, $6C, $13
  60++E47A 9F 04 2D 08                          DB $9F, $04, $2D, $08
  61++E47E BF 58 10 D6                          DB $BF, $58, $10, $D6
  62++E482 3F 00 00 BB                          DB $3F, $00, $00, $BB
  63++E486 3F 58 10 D6                          DB $3F, $58, $10, $D6
  64++E48A              GeckoNormalsSize:       equ $ - GeckoNormals
  65++E48A              GeckoLen:               equ $ - Gecko
  66++E48A
# file closed: ./Data/ships/Gecko.asm
  86+ E48A                                      include "Data/ships/Ghavial.asm"
# file opened: ./Data/ships/Ghavial.asm
   1++E48A 03           Ghavial:	            DB $03                      ; Number of cargo canisters released when destroyed
   2++E48B 00 26                                DW $2600                    ; Ship's targetable area LoHi
   3++E48D ED E4                                DW GhavialEdges             ; Edge Data
   4++E48F 58                                   DB GhavialEdgesSize         ; Size of Edge Data
   5++E490 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E491 22                                   DB $22                      ; Explosion Count
   7++E492 0C                                   DB GhavialVertSize /6       ; Vertex Count /6
   8++E493 48                                   DB GhavialVertSize          ; Vertex Count
   9++E494 16                                   DB GhavialEdgesCnt          ; Edges Count
  10++E495 64 00                                DW $0064                    ; Bounty LoHi
  11++E497 30                                   DB GhavialNormalsSize       ; Face (Normal) Count
  12++E498 0A                                   DB $0A                      ; Range when it turns to a dot
  13++E499 72                                   DB $72                      ; Energy Max
  14++E49A 10                                   DB $10                      ; Speed Max
  15++E49B 45 E5                                DW GhavialNormals           ; Normals
  16++E49D 00                                   DB $00                      ; Q scaling
  17++E49E 27                                   DB $27                      ; Laser power and Nbr Missiles
  18++E49F A5 E4                                DW GhavialVertices          ; Verticles Address
  19++E4A1 00                                   DB ShipTypeNormal           ; Ship Type
  20++E4A2 00                                   DB 0                        ; NewB Tactics
  21++E4A3 80                                   DB ShipCanAnger             ; AI Flags
  22++E4A4 60                                   DB $60                      ; chance of ECM module
  23++E4A5
  24++E4A5 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  24++E4A9 67 01
  25++E4AB 1E 00 64 9F                      DB $1E, $00, $64, $9F, $6B, $05
  25++E4AF 6B 05
  26++E4B1 28 1E 1A 3F                      DB $28, $1E, $1A, $3F, $23, $01
  26++E4B5 23 01
  27++E4B7 28 1E 1A BF                      DB $28, $1E, $1A, $BF, $45, $03
  27++E4BB 45 03
  28++E4BD 3C 00 14 3F                      DB $3C, $00, $14, $3F, $78, $12
  28++E4C1 78 12
  29++E4C3 28 00 3C 3F                      DB $28, $00, $3C, $3F, $89, $23
  29++E4C7 89 23
  30++E4C9 3C 00 14 BF                      DB $3C, $00, $14, $BF, $AB, $45
  30++E4CD AB 45
  31++E4CF 28 00 3C BF                      DB $28, $00, $3C, $BF, $9A, $34
  31++E4D3 9A 34
  32++E4D5 00 1E 14 7F                      DB $00, $1E, $14, $7F, $FF, $FF
  32++E4D9 FF FF
  33++E4DB 0A 18 00 09                      DB $0A, $18, $00, $09, $00, $00
  33++E4DF 00 00
  34++E4E1 0A 18 00 89                      DB $0A, $18, $00, $89, $00, $00
  34++E4E5 00 00
  35++E4E7 00 16 0A 09                      DB $00, $16, $0A, $09, $00, $00
  35++E4EB 00 00
  36++E4ED
  37++E4ED              GhavialVertSize: equ $ - GhavialVertices
  38++E4ED
  39++E4ED
  40++E4ED 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  41++E4F1 1F 12 10 08                  DB $1F, $12, $10, $08
  42++E4F5 1F 23 14 08                  DB $1F, $23, $14, $08
  43++E4F9 1F 30 0C 08                  DB $1F, $30, $0C, $08
  44++E4FD 1F 34 1C 0C                  DB $1F, $34, $1C, $0C
  45++E501 1F 45 18 0C                  DB $1F, $45, $18, $0C
  46++E505 1F 50 0C 04                  DB $1F, $50, $0C, $04
  47++E509 1F 67 00 20                  DB $1F, $67, $00, $20
  48++E50D 1F 78 10 20                  DB $1F, $78, $10, $20
  49++E511 1F 89 14 20                  DB $1F, $89, $14, $20
  50++E515 1F 9A 1C 20                  DB $1F, $9A, $1C, $20
  51++E519 1F AB 18 20                  DB $1F, $AB, $18, $20
  52++E51D 1F B6 04 20                  DB $1F, $B6, $04, $20
  53++E521 1F 06 04 00                  DB $1F, $06, $04, $00
  54++E525 1F 17 00 10                  DB $1F, $17, $00, $10
  55++E529 1F 28 10 14                  DB $1F, $28, $10, $14
  56++E52D 1F 39 14 1C                  DB $1F, $39, $14, $1C
  57++E531 1F 4A 1C 18                  DB $1F, $4A, $1C, $18
  58++E535 1F 5B 18 04                  DB $1F, $5B, $18, $04
  59++E539 09 00 24 28                  DB $09, $00, $24, $28
  60++E53D 09 00 28 2C                  DB $09, $00, $28, $2C
  61++E541 09 00 2C 24                  DB $09, $00, $2C, $24
  62++E545
  63++E545              GhavialEdgesSize: equ $ - GhavialEdges
  64++E545
  65++E545
  66++E545              GhavialEdgesCnt: equ GhavialEdgesSize/4
  67++E545
  68++E545
  69++E545 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  70++E549 1F 33 24 0C                  DB $1F, $33, $24, $0C
  71++E54D 3F 33 1C 19                  DB $3F, $33, $1C, $19
  72++E551 3F 00 30 2A                  DB $3F, $00, $30, $2A
  73++E555 BF 33 1C 19                  DB $BF, $33, $1C, $19
  74++E559 9F 33 24 0C                  DB $9F, $33, $24, $0C
  75++E55D 5F 00 3E 0F                  DB $5F, $00, $3E, $0F
  76++E561 5F 1C 38 07                  DB $5F, $1C, $38, $07
  77++E565 7F 1B 37 0D                  DB $7F, $1B, $37, $0D
  78++E569 7F 00 33 26                  DB $7F, $00, $33, $26
  79++E56D FF 1B 37 0D                  DB $FF, $1B, $37, $0D
  80++E571 DF 1C 38 07                  DB $DF, $1C, $38, $07
  81++E575
  82++E575              GhavialNormalsSize: equ $ - GhavialNormals
  83++E575              GhavialLen: equ $ - Ghavial
  84++E575
# file closed: ./Data/ships/Ghavial.asm
  87+ E575                                      include "Data/ships/Iguana.asm"
# file opened: ./Data/ships/Iguana.asm
   1++E575 01           Iguana:	                DB $01                      ; Number of cargo canisters released when destroyed
   2++E576 AC 0D                                DW $0DAC                    ; Ship's targetable area LoHi
   3++E578 EA E5                                DW IguanaEdges              ; Edge Data
   4++E57A 5C                                   DB IguanaEdgesSize          ; Size of Edge Data
   5++E57B 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E57C 1A                                   DB $1A                      ; Explosion Count
   7++E57D 0F                                   DB IguanaVertSize /6        ; Vertex Count /6
   8++E57E 5A                                   DB IguanaVertSize           ; Vertex Count
   9++E57F 17                                   DB IguanaEdgesCnt           ; Edges Count
  10++E580 96 00                                DW $0096                    ; Bounty LoHi
  11++E582 28                                   DB IguanaNormalsSize        ; Face (Normal) Count
  12++E583 0A                                   DB $0A                      ; Range when it turns to a dot
  13++E584 5A                                   DB $5A                      ; Energy Max
  14++E585 21                                   DB $21                      ; Speed Max
  15++E586 46 E6                                DW IguanaNormals            ; Normals
  16++E588 01                                   DB $01                      ; Q scaling
  17++E589 23                                   DB $20 | ShipMissiles3      ; Laser power and Nbr Missiles
  18++E58A 90 E5                                DW IguanaVertices           ; Verticles Address
  19++E58C 00                                   DB ShipTypeNormal           ; Ship Type
  20++E58D 00                                   DB 0                        ; NewB Tactics
  21++E58E 80                                   DB ShipCanAnger             ; AI Flags
  22++E58F 80                                   DB $80                      ; chance of ECM module
  23++E590
  24++E590
  25++E590 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  25++E594 23 01
  26++E596 00 14 1E 1F                  DB $00, $14, $1E, $1F, $46, $02
  26++E59A 46 02
  27++E59C 28 00 0A 9F                  DB $28, $00, $0A, $9F, $45, $01
  27++E5A0 45 01
  28++E5A2 00 14 1E 5F                  DB $00, $14, $1E, $5F, $57, $13
  28++E5A6 57 13
  29++E5A8 28 00 0A 1F                  DB $28, $00, $0A, $1F, $67, $23
  29++E5AC 67 23
  30++E5AE 00 14 28 3F                  DB $00, $14, $28, $3F, $89, $46
  30++E5B2 89 46
  31++E5B4 28 00 1E BF                  DB $28, $00, $1E, $BF, $88, $45
  31++E5B8 88 45
  32++E5BA 00 14 28 7F                  DB $00, $14, $28, $7F, $89, $57
  32++E5BE 89 57
  33++E5C0 28 00 1E 3F                  DB $28, $00, $1E, $3F, $99, $67
  33++E5C4 99 67
  34++E5C6 28 00 28 9E                  DB $28, $00, $28, $9E, $11, $00
  34++E5CA 11 00
  35++E5CC 28 00 28 1E                  DB $28, $00, $28, $1E, $33, $22
  35++E5D0 33 22
  36++E5D2 00 08 28 2A                  DB $00, $08, $28, $2A, $99, $88
  36++E5D6 99 88
  37++E5D8 10 00 24 AA                  DB $10, $00, $24, $AA, $88, $88
  37++E5DC 88 88
  38++E5DE 00 08 28 6A                  DB $00, $08, $28, $6A, $99, $88
  38++E5E2 99 88
  39++E5E4 10 00 24 2A                  DB $10, $00, $24, $2A, $99, $99
  39++E5E8 99 99
  40++E5EA
  41++E5EA              IguanaVertSize: equ $ - IguanaVertices
  42++E5EA
  43++E5EA
  44++E5EA
  45++E5EA 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  46++E5EE 1F 01 00 08                  DB $1F, $01, $00, $08
  47++E5F2 1F 13 00 0C                  DB $1F, $13, $00, $0C
  48++E5F6 1F 23 00 10                  DB $1F, $23, $00, $10
  49++E5FA 1F 46 04 14                  DB $1F, $46, $04, $14
  50++E5FE 1F 45 08 18                  DB $1F, $45, $08, $18
  51++E602 1F 57 0C 1C                  DB $1F, $57, $0C, $1C
  52++E606 1F 67 10 20                  DB $1F, $67, $10, $20
  53++E60A 1F 48 14 18                  DB $1F, $48, $14, $18
  54++E60E 1F 58 18 1C                  DB $1F, $58, $18, $1C
  55++E612 1F 69 14 20                  DB $1F, $69, $14, $20
  56++E616 1F 79 1C 20                  DB $1F, $79, $1C, $20
  57++E61A 1F 04 04 08                  DB $1F, $04, $04, $08
  58++E61E 1F 15 08 0C                  DB $1F, $15, $08, $0C
  59++E622 1F 26 04 10                  DB $1F, $26, $04, $10
  60++E626 1F 37 0C 10                  DB $1F, $37, $0C, $10
  61++E62A 1F 89 14 1C                  DB $1F, $89, $14, $1C
  62++E62E 1E 01 08 24                  DB $1E, $01, $08, $24
  63++E632 1E 23 10 28                  DB $1E, $23, $10, $28
  64++E636 0A 88 2C 30                  DB $0A, $88, $2C, $30
  65++E63A 0A 88 34 30                  DB $0A, $88, $34, $30
  66++E63E 0A 99 2C 38                  DB $0A, $99, $2C, $38
  67++E642 0A 99 34 38                  DB $0A, $99, $34, $38
  68++E646
  69++E646              IguanaEdgesSize: equ $ - IguanaEdges
  70++E646
  71++E646
  72++E646              IguanaEdgesCnt: equ IguanaEdgesSize/4
  73++E646
  74++E646
  75++E646 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  76++E64A DF 33 4D 19  	DB $DF, $33, $4D, $19
  77++E64E 1F 33 4D 19  	DB $1F, $33, $4D, $19
  78++E652 5F 33 4D 19  	DB $5F, $33, $4D, $19
  79++E656 9F 2A 55 00  	DB $9F, $2A, $55, $00
  80++E65A DF 2A 55 00  	DB $DF, $2A, $55, $00
  81++E65E 1F 2A 55 00  	DB $1F, $2A, $55, $00
  82++E662 5F 2A 55 00  	DB $5F, $2A, $55, $00
  83++E666 BF 17 00 5D  	DB $BF, $17, $00, $5D
  84++E66A 3F 17 00 5D  	DB $3F, $17, $00, $5D
  85++E66E
  86++E66E
  87++E66E              IguanaNormalsSize: equ $ - IguanaNormals
  88++E66E              IguanaLen: equ $ - Iguana
  89++E66E
# file closed: ./Data/ships/Iguana.asm
  88+ E66E                                      include "Data/ships/Krait.asm"
# file opened: ./Data/ships/Krait.asm
   1++E66E
   2++E66E 01           Krait:                  DB $01                         ; Number of cargo canisters released when destroyed
   3++E66F 0E 10                                DW $100E                       ; Ship's targetable area LoHi
   4++E671 EF E6                                DW KraitEdges                  ; Edge Data
   5++E673 54                                   DB KraitEdgesSize              ; Size of Edge Data
   6++E674 00                                   DB $00                         ; Gun Vertex Byte offset
   7++E675 12                                   DB $12                         ; Explosion Count
   8++E676 11                                   DB KraitVertSize /6            ; Vertex Count /6
   9++E677 66                                   DB KraitVertSize               ; Vertex Count
  10++E678 15                                   DB KraitEdgesCnt               ; Edges Count
  11++E679 64 00                                DW $0064                       ; Bounty LoHi
  12++E67B 18                                   DB KraitNormalsSize            ; Face (Normal) Count
  13++E67C 14                                   DB $14                         ; Range when it turns to a dot
  14++E67D 50                                   DB $50                         ; Energy Max
  15++E67E 1E                                   DB $1E                         ; Speed Max
  16++E67F 43 E7                                DW KraitNormals                ; Normals
  17++E681 02                                   DB $02                         ; Q scaling
  18++E682 14                                   DB $10 | ShipMissiles4         ; Laser power and Nbr Missiles
  19++E683 89 E6                                DW KraitVertices               ; Verticles Address
  20++E685 00                                   DB ShipTypeNormal              ; Ship Type
  21++E686 00                                   DB 0                           ; NewB Tactics
  22++E687 80                                   DB ShipCanAnger                ; AI Flags
  23++E688 D0                                   DB $D0                         ; chance of ECM module
  24++E689 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  24++E68D 01 23
  25++E68F 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  25++E693 03 45
  26++E695 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  26++E699 12 45
  27++E69B 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  27++E69F 01 44
  28++E6A1 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  28++E6A5 23 55
  29++E6A7 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  29++E6AB 01 11
  30++E6AD 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  30++E6B1 23 33
  31++E6B3 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  31++E6B7 00 33
  32++E6B9 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  32++E6BD 00 33
  33++E6BF 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  33++E6C3 33 33
  34++E6C5 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  34++E6C9 00 00
  35++E6CB 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  35++E6CF 44 44
  36++E6D1 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  36++E6D5 44 44
  37++E6D7 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  37++E6DB 44 44
  38++E6DD 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  38++E6E1 55 55
  39++E6E3 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  39++E6E7 55 55
  40++E6E9 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  40++E6ED 55 55
  41++E6EF              KraitVertSize           equ $  - KraitVertices
  42++E6EF 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  42++E6F3 1F 12 00 08
  43++E6F7 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  43++E6FB 1F 23 00 10
  44++E6FF 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  44++E703 1F 25 10 08
  45++E707 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  45++E70B 1F 04 0C 04
  46++E70F 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  46++E713 1C 23 10 18
  47++E717 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  47++E71B 09 00 1C 28
  48++E71F 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  48++E723 09 33 1C 24
  49++E727 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  49++E72B 08 44 2C 34
  50++E72F 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  50++E733 07 44 30 2C
  51++E737 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  51++E73B 08 55 3C 40
  52++E73F 08 55 40 38                          DB $08, $55, $40, $38
  53++E743              KraitEdgesSize          equ $  - KraitEdges
  54++E743              KraitEdgesCnt           equ KraitEdgesSize/4
  55++E743 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  56++E747 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  56++E74B DF 07 30 06
  57++E74F 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  57++E753 3F 4D 00 9A
  58++E757 BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  59++E75B              KraitNormalsSize        equ $  - KraitNormals
  60++E75B              KraitLen                equ $  - Krait
  61++E75B
# file closed: ./Data/ships/Krait.asm
  89+ E75B                                      include "Data/ships/Logo.asm"
# file opened: ./Data/ships/Logo.asm
   1++E75B 00           Logo:	                DB $00                    ; Number of cargo canisters released when destroyed
   2++E75C 49 26                                DW $2649                  ; Ship's targetable area LoHi
   3++E75E 72 E8                                DW LogoEdges              ; Edge Data
   4++E760 94                                   DB LogoEdgesSize          ; Size of Edge Data
   5++E761 00                                   DB $00                    ; Gun Vertex Byte offset
   6++E762 36                                   DB $36                    ; Explosion Count
   7++E763 2A                                   DB LogoVertSize /6        ; Vertex Count /6
   8++E764 FC                                   DB LogoVertSize           ; Vertex Count
   9++E765 25                                   DB LogoEdgesCnt           ; Edges Count
  10++E766 00 00                                DW $0000                  ; Bounty LoHi
  11++E768 14                                   DB LogoNormalsSize        ; Face (Normal) Count
  12++E769 63                                   DB $63                    ; Range when it turns to a dot
  13++E76A FC                                   DB $FC                    ; Energy Max
  14++E76B 24                                   DB $24                    ; Speed Max
  15++E76C 06 E9                                DW LogoNormals            ; Normals
  16++E76E 01                                   DB $01                    ; Q scaling
  17++E76F 00                                   DB $00                    ; Laser power and Nbr Missiles
  18++E770 76 E7                                DW LogoVertices           ; Verticles Address
  19++E772 FD                                   DB ShipTypeText           ; Ship Type
  20++E773 00                                   DB 0                      ; NewB Tactics
  21++E774 00                                   DB 0                      ; AI Flags
  22++E775 FF                                   DB $FF                    ; chance of ECM module
  23++E776
  24++E776 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  24++E77A 00 00
  25++E77C 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  25++E780 00 00
  26++E782 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  26++E786 00 00
  27++E788 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  27++E78C 00 00
  28++E78E 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  28++E792 00 00
  29++E794 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  29++E798 00 00
  30++E79A 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  30++E79E 00 00
  31++E7A0 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  31++E7A4 00 00
  32++E7A6 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  32++E7AA 00 00
  33++E7AC 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  33++E7B0 00 00
  34++E7B2 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  34++E7B6 00 00
  35++E7B8 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  35++E7BC 00 00
  36++E7BE 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  36++E7C2 02 33
  37++E7C4 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  37++E7C8 02 44
  38++E7CA 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  38++E7CE 01 33
  39++E7D0 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  39++E7D4 02 33
  40++E7D6 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  40++E7DA 02 44
  41++E7DC 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  41++E7E0 01 44
  42++E7E2 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  42++E7E6 00 00
  43++E7E8 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  43++E7EC 00 00
  44++E7EE 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  44++E7F2 00 00
  45++E7F4 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  45++E7F8 00 00
  46++E7FA 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  46++E7FE 00 00
  47++E800 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  47++E804 00 00
  48++E806 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  48++E80A 00 00
  49++E80C 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  49++E810 00 00
  50++E812 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  50++E816 00 00
  51++E818 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  51++E81C 00 00
  52++E81E 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  52++E822 00 00
  53++E824 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  53++E828 00 00
  54++E82A 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  54++E82E 00 00
  55++E830 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  55++E834 00 00
  56++E836 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  56++E83A 00 00
  57++E83C 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  57++E840 00 00
  58++E842 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  58++E846 00 00
  59++E848 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  59++E84C 00 00
  60++E84E 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  60++E852 00 00
  61++E854 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  61++E858 00 00
  62++E85A 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  62++E85E 00 00
  63++E860 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  63++E864 00 00
  64++E866 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  64++E86A 00 00
  65++E86C 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  65++E870 00 00
  66++E872
  67++E872              LogoVertSize: equ $ - LogoVertices
  68++E872
  69++E872
  70++E872
  71++E872 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  72++E876 1F 00 04 08  	DB $1F, $00, $04, $08
  73++E87A 1F 00 08 0C  	DB $1F, $00, $08, $0C
  74++E87E 1F 00 0C 10  	DB $1F, $00, $0C, $10
  75++E882 1F 00 10 14  	DB $1F, $00, $10, $14
  76++E886 1F 00 14 18  	DB $1F, $00, $14, $18
  77++E88A 1F 00 18 1C  	DB $1F, $00, $18, $1C
  78++E88E 1F 00 1C 20  	DB $1F, $00, $1C, $20
  79++E892 1F 00 20 24  	DB $1F, $00, $20, $24
  80++E896 1F 00 24 28  	DB $1F, $00, $24, $28
  81++E89A 1F 00 28 2C  	DB $1F, $00, $28, $2C
  82++E89E 1F 00 2C 00  	DB $1F, $00, $2C, $00
  83++E8A2 1E 03 38 3C  	DB $1E, $03, $38, $3C
  84++E8A6 1E 01 3C 40  	DB $1E, $01, $3C, $40
  85++E8AA 1E 04 40 44  	DB $1E, $04, $40, $44
  86++E8AE 1E 01 44 38  	DB $1E, $01, $44, $38
  87++E8B2 1E 03 10 30  	DB $1E, $03, $10, $30
  88++E8B6 1E 22 30 34  	DB $1E, $22, $30, $34
  89++E8BA 1E 04 34 20  	DB $1E, $04, $34, $20
  90++E8BE 1E 11 20 10  	DB $1E, $11, $20, $10
  91++E8C2 1E 13 10 38  	DB $1E, $13, $10, $38
  92++E8C6 1E 13 30 3C  	DB $1E, $13, $30, $3C
  93++E8CA 1E 24 34 40  	DB $1E, $24, $34, $40
  94++E8CE 1E 14 20 44  	DB $1E, $14, $20, $44
  95++E8D2 1E 00 54 58  	DB $1E, $00, $54, $58
  96++E8D6 1E 00 58 60  	DB $1E, $00, $58, $60
  97++E8DA 1E 00 60 64  	DB $1E, $00, $60, $64
  98++E8DE 1E 00 5C 68  	DB $1E, $00, $5C, $68
  99++E8E2 1E 00 6C 70  	DB $1E, $00, $6C, $70
 100++E8E6 1E 00 70 74  	DB $1E, $00, $70, $74
 101++E8EA 1E 00 78 7C  	DB $1E, $00, $78, $7C
 102++E8EE 1E 00 80 84  	DB $1E, $00, $80, $84
 103++E8F2 1E 00 88 8C  	DB $1E, $00, $88, $8C
 104++E8F6 1E 00 90 94  	DB $1E, $00, $90, $94
 105++E8FA 1E 00 94 9C  	DB $1E, $00, $94, $9C
 106++E8FE 1E 00 9C A0  	DB $1E, $00, $9C, $A0
 107++E902 1E 00 A4 98  	DB $1E, $00, $A4, $98
 108++E906
 109++E906              LogoEdgesSize: equ $ - LogoEdges
 110++E906
 111++E906
 112++E906              LogoEdgesCnt: equ LogoEdgesSize/4
 113++E906
 114++E906
 115++E906 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 116++E90A 1F 00 04 0F  	DB $1F, $00, $04, $0F
 117++E90E 3F 00 0D 34  	DB $3F, $00, $0D, $34
 118++E912 9F 51 51 00  	DB $9F, $51, $51, $00
 119++E916 1F 51 51 00  	DB $1F, $51, $51, $00
 120++E91A
 121++E91A
 122++E91A              LogoNormalsSize: equ $ - LogoNormals
 123++E91A              LogoLen: equ $ - Logo
 124++E91A
# file closed: ./Data/ships/Logo.asm
  90+ E91A                                      include "Data/ships/Mamba.asm"
# file opened: ./Data/ships/Mamba.asm
   1++E91A 01           Mamba:	                DB $01                     ; Number of cargo canisters released when destroyed
   2++E91B 24 13                                DW $1324                   ; Ship's targetable area LoHi
   3++E91D CB E9                                DW MambaEdges              ; Edge Data
   4++E91F 70                                   DB MambaEdgesSize          ; Size of Edge Data
   5++E920 00                                   DB $00                     ; Gun Vertex Byte offset
   6++E921 22                                   DB $22                     ; Explosion Count
   7++E922 19                                   DB MambaVertSize /6        ; Vertex Count /6
   8++E923 96                                   DB MambaVertSize           ; Vertex Count
   9++E924 1C                                   DB MambaEdgesCnt           ; Edges Count
  10++E925 96 00                                DW $0096                   ; Bounty LoHi
  11++E927 14                                   DB MambaNormalsSize        ; Face (Normal) Count
  12++E928 19                                   DB $19                     ; Range when it turns to a dot
  13++E929 5A                                   DB $5A                     ; Energy Max
  14++E92A 1E                                   DB $1E                     ; Speed Max
  15++E92B 3B EA                                DW MambaNormals            ; Normals
  16++E92D 02                                   DB $02                     ; Q scaling
  17++E92E 12                                   DB $12 | ShipMissiles2     ; Laser power and Nbr Missiles
  18++E92F 35 E9                                DW MambaVertices           ; Verticles Address
  19++E931 00                                   DB ShipTypeNormal          ; Ship Type
  20++E932 00                                   DB 0                       ; NewB Tactics
  21++E933 80                                   DB ShipCanAnger            ; AI Flags
  22++E934 E0                                   DB $E0                     ; chance of ECM module
  23++E935
  24++E935 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  24++E939 10 32
  25++E93B 40 08 20 FF                  DB $40, $08, $20, $FF, $20, $44
  25++E93F 20 44
  26++E941 20 08 20 BE                  DB $20, $08, $20, $BE, $21, $44
  26++E945 21 44
  27++E947 20 08 20 3E                  DB $20, $08, $20, $3E, $31, $44
  27++E94B 31 44
  28++E94D 40 08 20 7F                  DB $40, $08, $20, $7F, $30, $44
  28++E951 30 44
  29++E953 04 04 10 8E                  DB $04, $04, $10, $8E, $11, $11
  29++E957 11 11
  30++E959 04 04 10 0E                  DB $04, $04, $10, $0E, $11, $11
  30++E95D 11 11
  31++E95F 08 03 1C 0D                  DB $08, $03, $1C, $0D, $11, $11
  31++E963 11 11
  32++E965 08 03 1C 8D                  DB $08, $03, $1C, $8D, $11, $11
  32++E969 11 11
  33++E96B 14 04 10 D4                  DB $14, $04, $10, $D4, $00, $00
  33++E96F 00 00
  34++E971 14 04 10 54                  DB $14, $04, $10, $54, $00, $00
  34++E975 00 00
  35++E977 18 07 14 F4                  DB $18, $07, $14, $F4, $00, $00
  35++E97B 00 00
  36++E97D 10 07 14 F0                  DB $10, $07, $14, $F0, $00, $00
  36++E981 00 00
  37++E983 10 07 14 70                  DB $10, $07, $14, $70, $00, $00
  37++E987 00 00
  38++E989 18 07 14 74                  DB $18, $07, $14, $74, $00, $00
  38++E98D 00 00
  39++E98F 08 04 20 AD                  DB $08, $04, $20, $AD, $44, $44
  39++E993 44 44
  40++E995 08 04 20 2D                  DB $08, $04, $20, $2D, $44, $44
  40++E999 44 44
  41++E99B 08 04 20 6E                  DB $08, $04, $20, $6E, $44, $44
  41++E99F 44 44
  42++E9A1 08 04 20 EE                  DB $08, $04, $20, $EE, $44, $44
  42++E9A5 44 44
  43++E9A7 20 04 20 A7                  DB $20, $04, $20, $A7, $44, $44
  43++E9AB 44 44
  44++E9AD 20 04 20 27                  DB $20, $04, $20, $27, $44, $44
  44++E9B1 44 44
  45++E9B3 24 04 20 67                  DB $24, $04, $20, $67, $44, $44
  45++E9B7 44 44
  46++E9B9 24 04 20 E7                  DB $24, $04, $20, $E7, $44, $44
  46++E9BD 44 44
  47++E9BF 26 00 20 A5                  DB $26, $00, $20, $A5, $44, $44
  47++E9C3 44 44
  48++E9C5 26 00 20 25                  DB $26, $00, $20, $25, $44, $44
  48++E9C9 44 44
  49++E9CB
  50++E9CB              MambaVertSize: equ $ - MambaVertices
  51++E9CB
  52++E9CB
  53++E9CB
  54++E9CB 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  55++E9CF 1F 30 00 10  	DB $1F, $30, $00, $10
  56++E9D3 1F 40 04 10  	DB $1F, $40, $04, $10
  57++E9D7 1E 42 04 08  	DB $1E, $42, $04, $08
  58++E9DB 1E 41 08 0C  	DB $1E, $41, $08, $0C
  59++E9DF 1E 43 0C 10  	DB $1E, $43, $0C, $10
  60++E9E3 0E 11 14 18  	DB $0E, $11, $14, $18
  61++E9E7 0C 11 18 1C  	DB $0C, $11, $18, $1C
  62++E9EB 0D 11 1C 20  	DB $0D, $11, $1C, $20
  63++E9EF 0C 11 14 20  	DB $0C, $11, $14, $20
  64++E9F3 14 00 24 2C  	DB $14, $00, $24, $2C
  65++E9F7 10 00 24 30  	DB $10, $00, $24, $30
  66++E9FB 10 00 28 34  	DB $10, $00, $28, $34
  67++E9FF 14 00 28 38  	DB $14, $00, $28, $38
  68++EA03 0E 00 34 38  	DB $0E, $00, $34, $38
  69++EA07 0E 00 2C 30  	DB $0E, $00, $2C, $30
  70++EA0B 0D 44 3C 40  	DB $0D, $44, $3C, $40
  71++EA0F 0E 44 44 48  	DB $0E, $44, $44, $48
  72++EA13 0C 44 3C 48  	DB $0C, $44, $3C, $48
  73++EA17 0C 44 40 44  	DB $0C, $44, $40, $44
  74++EA1B 07 44 50 54  	DB $07, $44, $50, $54
  75++EA1F 05 44 50 60  	DB $05, $44, $50, $60
  76++EA23 05 44 54 60  	DB $05, $44, $54, $60
  77++EA27 07 44 4C 58  	DB $07, $44, $4C, $58
  78++EA2B 05 44 4C 5C  	DB $05, $44, $4C, $5C
  79++EA2F 05 44 58 5C  	DB $05, $44, $58, $5C
  80++EA33 1E 21 00 08  	DB $1E, $21, $00, $08
  81++EA37 1E 31 00 0C  	DB $1E, $31, $00, $0C
  82++EA3B
  83++EA3B              MambaEdgesSize: equ $ - MambaEdges
  84++EA3B
  85++EA3B
  86++EA3B              MambaEdgesCnt: equ MambaEdgesSize/4
  87++EA3B
  88++EA3B
  89++EA3B 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  90++EA3F 1E 00 18 02  	DB $1E, $00, $18, $02
  91++EA43 9E 20 40 10  	DB $9E, $20, $40, $10
  92++EA47 1E 20 40 10  	DB $1E, $20, $40, $10
  93++EA4B 3E 00 00 7F  	DB $3E, $00, $00, $7F
  94++EA4F
  95++EA4F              MambaNormalsSize: equ $ - MambaNormals
  96++EA4F              MambaLen: equ $ - Mamba
  97++EA4F
# file closed: ./Data/ships/Mamba.asm
  91+ EA4F                                      include "Data/ships/Missile.asm"
# file opened: ./Data/ships/Missile.asm
   1++EA4F              ;    DEFINE DEBUGMODEL 1
   2++EA4F 00           Missile:	            DB $00                     ; Number of cargo canisters released when destroyed
   3++EA50 40 06                                DW $0640                   ; Ship's targetable area LoHi
   4++EA52 D0 EA                                DW MissileEdges            ; Edge Data
   5++EA54 60                                   DB MissileEdgesSize        ; Size of Edge Data
   6++EA55 00                                   DB $00                     ; Gun Vertex Byte offset
   7++EA56 0A                                   DB $0A                     ; Explosion Count
   8++EA57 11                                   DB MissileVertSize /6      ; Vertex Count /6
   9++EA58 66                                   DB MissileVertSize         ; Vertex Count
  10++EA59 18                                   DB MissileEdgesCnt         ; Edges Count
  11++EA5A 00 00                                DW $0000                   ; Bounty LoHi
  12++EA5C 24                                   DB MissileNormalsSize      ; Face (Normal) Count
  13++EA5D 0E                                   DB $0E                     ; Range when it turns to a dot
  14++EA5E 02                                   DB $02                     ; Energy Max
  15++EA5F 2C                                   DB $2C                     ; Speed Max
  16++EA60 30 EB                                DW MissileNormals          ; Normals
  17++EA62 02                                   DB $02                     ; Q scaling
  18++EA63 00                                   DB $00                     ; Laser power and Nbr Missiles
  19++EA64 6A EA                                DW MissileVertices         ; Verticles Address
  20++EA66 01                                   DB ShipTypeMissile         ; Ship Type
  21++EA67 00                                   DB 0                       ; NewB Tactics
  22++EA68 00                                   DB 0                       ; AI Flags
  23++EA69 00                                   DB $00                     ; chance of ECM module
  24++EA6A
  25++EA6A              ;;;     Byte 0 = X magnitide with origin at middle of ship
  26++EA6A              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  27++EA6A              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  28++EA6A              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  29++EA6A              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  30++EA6A              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  31++EA6A              MissileVertices:    IFDEF DEBUGMODEL
  32++EA6A ~                                    DB $00,$50,$00,$1F,$00,$00  ; 00 00 Y Tip (Roof)
  33++EA6A ~                                    DB $00,$00,$00,$1F,$00,$00  ; 01 04 Y base for all nodes
  34++EA6A ~                                    DB $50,$00,$00,$1F,$01,$01  ; 02 08 X Tip (Side)
  35++EA6A ~                                    DB $00,$00,$00,$1F,$01,$01  ; 03 0C X Base
  36++EA6A ~                                    DB $00,$00,$30,$1F,$02,$02  ; 04 10 Z Tip (Nose1)
  37++EA6A ~                                    DB $00,$00,$00,$1F,$02,$03  ; 05 14 Z base
  38++EA6A ~                                    DB $04,$00,$25,$9F,$03,$03  ; 06 18 Z Trangle point 1
  39++EA6A ~                                    DB $04,$00,$25,$1F,$03,$03  ; 07 1C Z Trangle point 2
  40++EA6A ~                                    DB $05,$10,$00,$9F,$00,$00  ; 08 20 Y Cross Member 1
  41++EA6A ~                                    DB $05,$10,$00,$1F,$00,$00  ; 09 24 Y Cross Member 2
  42++EA6A ~                                    DB $10,$05,$00,$1F,$00,$00  ; 10 28 X Cross Member 1
  43++EA6A ~                                    DB $20,$00,$00,$1F,$00,$00  ; 11 2C X Cross Member 2
  44++EA6A ~                                    DB $10,$05,$00,$5F,$00,$00  ; 12 30 X Cross Member 3
  45++EA6A                                  ELSE
  46++EA6A 00 00 44 1F                          DB $00, $00, $44, $1F, $10, $32
  46++EA6E 10 32
  47++EA70 08 08 24 5F                          DB $08, $08, $24, $5F, $21, $54
  47++EA74 21 54
  48++EA76 08 08 24 1F                          DB $08, $08, $24, $1F, $32, $74
  48++EA7A 32 74
  49++EA7C 08 08 24 9F                          DB $08, $08, $24, $9F, $30, $76
  49++EA80 30 76
  50++EA82 08 08 24 DF                          DB $08, $08, $24, $DF, $10, $65
  50++EA86 10 65
  51++EA88 08 08 2C 3F                          DB $08, $08, $2C, $3F, $74, $88
  51++EA8C 74 88
  52++EA8E 08 08 2C 7F                          DB $08, $08, $2C, $7F, $54, $88
  52++EA92 54 88
  53++EA94 08 08 2C FF                          DB $08, $08, $2C, $FF, $65, $88
  53++EA98 65 88
  54++EA9A 08 08 2C BF                          DB $08, $08, $2C, $BF, $76, $88
  54++EA9E 76 88
  55++EAA0 0C 0C 2C 28                          DB $0C, $0C, $2C, $28, $74, $88
  55++EAA4 74 88
  56++EAA6 0C 0C 2C 68                          DB $0C, $0C, $2C, $68, $54, $88
  56++EAAA 54 88
  57++EAAC 0C 0C 2C E8                          DB $0C, $0C, $2C, $E8, $65, $88
  57++EAB0 65 88
  58++EAB2 0C 0C 2C A8                          DB $0C, $0C, $2C, $A8, $76, $88
  58++EAB6 76 88
  59++EAB8 08 08 0C A8                          DB $08, $08, $0C, $A8, $76, $77
  59++EABC 76 77
  60++EABE 08 08 0C E8                          DB $08, $08, $0C, $E8, $65, $66
  60++EAC2 65 66
  61++EAC4 08 08 0C 28                          DB $08, $08, $0C, $28, $74, $77
  61++EAC8 74 77
  62++EACA 08 08 0C 68                          DB $08, $08, $0C, $68, $54, $55
  62++EACE 54 55
  63++EAD0                                  ENDIF
  64++EAD0              MissileVertSize: equ $ - MissileVertices
  65++EAD0
  66++EAD0              ;;;     Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  67++EAD0              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  68++EAD0              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  69++EAD0              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  70++EAD0
  71++EAD0              MissileEdges:	    IFDEF DEBUGMODEL
  72++EAD0 ~                                    DB $1F,$00,$00,$04 ; Y
  73++EAD0 ~                                    DB $1F,$00,$08,$0C ; X
  74++EAD0 ~                                    DB $1F,$00,$10,$14 ; Z
  75++EAD0 ~                                    DB $1F,$00,$10,$18 ; Z Tip Traingle 1
  76++EAD0 ~                                    DB $1F,$00,$10,$1C ; Z Tip Traingle 2
  77++EAD0 ~                                    DB $1F,$00,$1C,$18 ; Z Tip Traingle 2
  78++EAD0 ~                                    DB $1F,$00,$20,$24 ; Y Cross memeber
  79++EAD0 ~                                    DB $1F,$00,$28,$2C ; X Triangle
  80++EAD0 ~                                    DB $1F,$00,$2C,$30 ; X Triangle
  81++EAD0 ~                                    ;DB $1F,$00,$18,$1C
  82++EAD0                                  ELSE
  83++EAD0 1F 21 00 04                          DB $1F, $21, $00, $04
  84++EAD4 1F 32 00 08                          DB $1F, $32, $00, $08
  85++EAD8 1F 30 00 0C                          DB $1F, $30, $00, $0C
  86++EADC 1F 10 00 10                          DB $1F, $10, $00, $10
  87++EAE0 1F 24 04 08                          DB $1F, $24, $04, $08
  88++EAE4 1F 51 04 10                          DB $1F, $51, $04, $10
  89++EAE8 1F 60 0C 10                          DB $1F, $60, $0C, $10
  90++EAEC 1F 73 08 0C                          DB $1F, $73, $08, $0C
  91++EAF0 1F 74 08 14                          DB $1F, $74, $08, $14
  92++EAF4 1F 54 04 18                          DB $1F, $54, $04, $18
  93++EAF8 1F 65 10 1C                          DB $1F, $65, $10, $1C
  94++EAFC 1F 76 0C 20                          DB $1F, $76, $0C, $20
  95++EB00 1F 86 1C 20                          DB $1F, $86, $1C, $20
  96++EB04 1F 87 14 20                          DB $1F, $87, $14, $20
  97++EB08 1F 84 14 18                          DB $1F, $84, $14, $18
  98++EB0C 1F 85 18 1C                          DB $1F, $85, $18, $1C
  99++EB10 08 85 18 28                          DB $08, $85, $18, $28
 100++EB14 08 87 14 24                          DB $08, $87, $14, $24
 101++EB18 08 87 20 30                          DB $08, $87, $20, $30
 102++EB1C 08 85 1C 2C                          DB $08, $85, $1C, $2C
 103++EB20 08 74 24 3C                          DB $08, $74, $24, $3C
 104++EB24 08 54 28 40                          DB $08, $54, $28, $40
 105++EB28 08 76 30 34                          DB $08, $76, $30, $34
 106++EB2C 08 65 2C 38                          DB $08, $65, $2C, $38
 107++EB30                                  ENDIF
 108++EB30              MissileEdgesSize: equ $ - MissileEdges
 109++EB30
 110++EB30
 111++EB30              MissileEdgesCnt: equ MissileEdgesSize/4
 112++EB30
 113++EB30              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
 114++EB30              ;;;		Byte 1 = X Lo
 115++EB30              ;;;		Byte 2 = Y Lo
 116++EB30              ;;;		Byte 3 = Z Lo
 117++EB30              MissileNormals:	    IFDEF DEBUGMODEL
 118++EB30 ~                                    DB $1F,$00,$10,$00
 119++EB30 ~                                    DB $1F,$10,$00,$00
 120++EB30 ~                                    DB $1F,$00,$00,$10
 121++EB30 ~                                    DB $1F,$00,$00,$10
 122++EB30                                  ELSE
 123++EB30 9F 40 00 10                          DB $9F, $40, $00, $10
 124++EB34 5F 00 40 10                          DB $5F, $00, $40, $10
 125++EB38 1F 40 00 10                          DB $1F, $40, $00, $10
 126++EB3C 1F 00 40 10                          DB $1F, $00, $40, $10
 127++EB40 1F 20 00 00                          DB $1F, $20, $00, $00
 128++EB44 5F 00 20 00                          DB $5F, $00, $20, $00
 129++EB48 9F 20 00 00                          DB $9F, $20, $00, $00
 130++EB4C 1F 00 20 00                          DB $1F, $00, $20, $00
 131++EB50 3F 00 00 B0                          DB $3F, $00, $00, $B0
 132++EB54                                  ENDIF
 133++EB54
 134++EB54              MissileNormalsSize: equ $ - MissileNormals
 135++EB54              MissileLen: equ $ - Missile
 136++EB54
# file closed: ./Data/ships/Missile.asm
  92+ EB54                                      include "Data/ships/Monitor.asm"
# file opened: ./Data/ships/Monitor.asm
   1++EB54 04           Monitor:	            DB $04                     ; Number of cargo canisters released when destroyed
   2++EB55 00 36                                DW $3600                   ; Ship's targetable area LoHi
   3++EB57 D5 EB                                DW MonitorEdges            ; Edge Data
   4++EB59 5C                                   DB MonitorEdgesSize        ; Size of Edge Data
   5++EB5A 00                                   DB $00                     ; Gun Vertex Byte offset
   6++EB5B 2A                                   DB $2A                     ; Explosion Count
   7++EB5C 11                                   DB MonitorVertSize /6      ; Vertex Count /6
   8++EB5D 66                                   DB MonitorVertSize         ; Vertex Count
   9++EB5E 17                                   DB MonitorEdgesCnt         ; Edges Count
  10++EB5F 90 01                                DW $0190                   ; Bounty LoHi
  11++EB61 2C                                   DB MonitorNormalsSize      ; Face (Normal) Count
  12++EB62 28                                   DB $28                     ; Range when it turns to a dot
  13++EB63 84                                   DB $84                     ; Energy Max
  14++EB64 10                                   DB $10                     ; Speed Max
  15++EB65 31 EC                                DW MonitorNormals          ; Normals
  16++EB67 00                                   DB $00                     ; Q scaling
  17++EB68 37                                   DB $37                     ; Laser power and Nbr Missiles
  18++EB69 6F EB                                DW MonitorVertices         ; Verticles Address
  19++EB6B 00                                   DB ShipTypeNormal          ; Ship Type
  20++EB6C 00                                   DB 0                       ; NewB Tactics
  21++EB6D 80                                   DB ShipCanAnger            ; AI Flags
  22++EB6E 40                                   DB $40                     ; chance of ECM module
  23++EB6F
  24++EB6F 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  24++EB73 FF FF
  25++EB75 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  25++EB79 23 01
  26++EB7B 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  26++EB7F 50 34
  27++EB81 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  27++EB85 78 12
  28++EB87 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  28++EB8B 96 45
  29++EB8D 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  29++EB91 AA 28
  30++EB93 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  30++EB97 AA 49
  31++EB99 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  31++EB9D AA 23
  32++EB9F 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  32++EBA3 AA 34
  33++EBA5 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  33++EBA9 AA 89
  34++EBAB 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  34++EBAF 89 67
  35++EBB1 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  35++EBB5 00 00
  36++EBB7 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  36++EBBB 00 00
  37++EBBD 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  37++EBC1 77 77
  38++EBC3 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  38++EBC7 77 77
  39++EBC9 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  39++EBCD 66 66
  40++EBCF 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  40++EBD3 66 66
  41++EBD5              MonitorVertSize:        equ $ - MonitorVertices
  42++EBD5 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  43++EBD9 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  44++EBDD 1F 23 04 1C                          DB $1F, $23, $04, $1C
  45++EBE1 1F 34 08 20                          DB $1F, $34, $08, $20
  46++EBE5 1F 45 08 10                          DB $1F, $45, $08, $10
  47++EBE9 1F 50 00 08                          DB $1F, $50, $00, $08
  48++EBED 1F 03 04 08                          DB $1F, $03, $04, $08
  49++EBF1 1F 67 00 28                          DB $1F, $67, $00, $28
  50++EBF5 1F 78 0C 28                          DB $1F, $78, $0C, $28
  51++EBF9 1F 89 24 28                          DB $1F, $89, $24, $28
  52++EBFD 1F 96 10 28                          DB $1F, $96, $10, $28
  53++EC01 1F 17 00 0C                          DB $1F, $17, $00, $0C
  54++EC05 1F 28 0C 14                          DB $1F, $28, $0C, $14
  55++EC09 1F 49 18 10                          DB $1F, $49, $18, $10
  56++EC0D 1F 56 10 00                          DB $1F, $56, $10, $00
  57++EC11 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  58++EC15 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  59++EC19 1F 4A 20 18                          DB $1F, $4A, $20, $18
  60++EC1D 1F 8A 14 24                          DB $1F, $8A, $14, $24
  61++EC21 1F 9A 18 24                          DB $1F, $9A, $18, $24
  62++EC25 0A 00 2C 30                          DB $0A, $00, $2C, $30
  63++EC29 0A 77 34 38                          DB $0A, $77, $34, $38
  64++EC2D 0A 66 3C 40                          DB $0A, $66, $3C, $40
  65++EC31              MonitorEdgesSize:       equ $ - MonitorEdges
  66++EC31              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  67++EC31 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  68++EC35 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  69++EC39 3F 36 1C 10                          DB $3F, $36, $1C, $10
  70++EC3D 3F 00 39 1C                          DB $3F, $00, $39, $1C
  71++EC41 BF 36 1C 10                          DB $BF, $36, $1C, $10
  72++EC45 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  73++EC49 DF 26 2F 12                          DB $DF, $26, $2F, $12
  74++EC4D 5F 26 2F 12                          DB $5F, $26, $2F, $12
  75++EC51 7F 27 30 0D                          DB $7F, $27, $30, $0D
  76++EC55 FF 27 30 0D                          DB $FF, $27, $30, $0D
  77++EC59 3F 00 00 40                          DB $3F, $00, $00, $40
  78++EC5D              MonitorNormalsSize:     equ $ - MonitorNormals
  79++EC5D              MonitorLen:             equ $ - Monitor
  80++EC5D
# file closed: ./Data/ships/Monitor.asm
  93+ EC5D                                      include "Data/ships/Moray.asm"
# file opened: ./Data/ships/Moray.asm
   1++EC5D 01           Moray:	                DB $01                    ; Number of cargo canisters released when destroyed
   2++EC5E 84 03                                DW $0384                  ; Ship's targetable area LoHi
   3++EC60 CC EC                                DW MorayEdges             ; Edge Data
   4++EC62 4C                                   DB MorayEdgesSize         ; Size of Edge Data
   5++EC63 00                                   DB $00                    ; Gun Vertex Byte offset
   6++EC64 1A                                   DB $1A                    ; Explosion Count
   7++EC65 0E                                   DB MorayVertSize /6       ; Vertex Count /6
   8++EC66 54                                   DB MorayVertSize          ; Vertex Count
   9++EC67 13                                   DB MorayEdgesCnt          ; Edges Count
  10++EC68 32 00                                DW $0032                  ; Bounty LoHi
  11++EC6A 24                                   DB MorayNormalsSize       ; Face (Normal) Count
  12++EC6B 28                                   DB $28                    ; Range when it turns to a dot
  13++EC6C 59                                   DB $59                    ; Energy Max
  14++EC6D 19                                   DB $19                    ; Speed Max
  15++EC6E 18 ED                                DW MorayNormals           ; Normals
  16++EC70 02                                   DB $02                    ; Q scaling
  17++EC71 2A                                   DB $2A                    ; Laser power and Nbr Missiles
  18++EC72 78 EC                                DW MorayVertices          ; Verticles Address
  19++EC74 00                                   DB ShipTypeNormal         ; Ship Type
  20++EC75 00                                   DB 0                      ; NewB Tactics
  21++EC76 80                                   DB ShipCanAnger           ; AI Flags
  22++EC77 C0                                   DB $C0                    ; chance of ECM module
  23++EC78
  24++EC78 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  24++EC7C 02 78
  25++EC7E 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  25++EC82 01 67
  26++EC84 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  26++EC88 FF FF
  27++EC8A 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  27++EC8E 13 66
  28++EC90 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  28++EC94 25 88
  29++EC96 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  29++EC9A 45 78
  30++EC9C 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  30++ECA0 34 67
  31++ECA2 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  31++ECA6 44 44
  32++ECA8 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  32++ECAC 44 44
  33++ECAE 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  33++ECB2 44 44
  34++ECB4 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  34++ECB8 00 00
  35++ECBA 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  35++ECBE 00 00
  36++ECC0 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  36++ECC4 00 00
  37++ECC6 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  37++ECCA 00 00
  38++ECCC              MorayVertSize:          equ $ - MorayVertices
  39++ECCC 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  40++ECD0 1F 16 04 0C                          DB $1F, $16, $04, $0C
  41++ECD4 18 36 0C 18                          DB $18, $36, $0C, $18
  42++ECD8 18 47 14 18                          DB $18, $47, $14, $18
  43++ECDC 18 58 10 14                          DB $18, $58, $10, $14
  44++ECE0 1F 28 00 10                          DB $1F, $28, $00, $10
  45++ECE4 0F 67 04 18                          DB $0F, $67, $04, $18
  46++ECE8 0F 78 00 14                          DB $0F, $78, $00, $14
  47++ECEC 0F 02 00 08                          DB $0F, $02, $00, $08
  48++ECF0 0F 01 04 08                          DB $0F, $01, $04, $08
  49++ECF4 11 13 08 0C                          DB $11, $13, $08, $0C
  50++ECF8 11 25 08 10                          DB $11, $25, $08, $10
  51++ECFC 0D 45 08 14                          DB $0D, $45, $08, $14
  52++ED00 0D 34 08 18                          DB $0D, $34, $08, $18
  53++ED04 05 44 1C 20                          DB $05, $44, $1C, $20
  54++ED08 07 44 1C 24                          DB $07, $44, $1C, $24
  55++ED0C 07 44 20 24                          DB $07, $44, $20, $24
  56++ED10 05 00 28 2C                          DB $05, $00, $28, $2C
  57++ED14 05 00 30 34                          DB $05, $00, $30, $34
  58++ED18              MorayEdgesSize:         equ $ - MorayEdges
  59++ED18              MorayEdgesCnt:          equ MorayEdgesSize/4
  60++ED18 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  61++ED1C 9F 0A 31 07                          DB $9F, $0A, $31, $07
  62++ED20 1F 0A 31 07                          DB $1F, $0A, $31, $07
  63++ED24 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  64++ED28 78 00 34 4E                          DB $78, $00, $34, $4E
  65++ED2C 78 3B 1C 65                          DB $78, $3B, $1C, $65
  66++ED30 DF 48 63 32                          DB $DF, $48, $63, $32
  67++ED34 5F 00 53 1E                          DB $5F, $00, $53, $1E
  68++ED38 5F 48 63 32                          DB $5F, $48, $63, $32
  69++ED3C
  70++ED3C              MorayNormalsSize:       equ $ - MorayNormals
  71++ED3C              MorayLen:               equ $ - Moray
  72++ED3C
# file closed: ./Data/ships/Moray.asm
  94+ ED3C                                      include "Data/ships/Ophidian.asm"
# file opened: ./Data/ships/Ophidian.asm
   1++ED3C 02           Ophidian:	            DB $02                     ; Number of cargo canisters released when destroyed
   2++ED3D 88 0E                                DW $0E88                   ; Ship's targetable area LoHi
   3++ED3F CF ED                                DW OphidianEdges           ; Edge Data
   4++ED41 78                                   DB OphidianEdgesSize       ; Size of Edge Data
   5++ED42 00                                   DB $00                     ; Gun Vertex Byte offset
   6++ED43 3C                                   DB $3C                     ; Explosion Count
   7++ED44 14                                   DB OphidianVertSize /6     ; Vertex Count /6
   8++ED45 78                                   DB OphidianVertSize        ; Vertex Count
   9++ED46 1E                                   DB OphidianEdgesCnt        ; Edges Count
  10++ED47 32 00                                DW $0032                   ; Bounty LoHi
  11++ED49 30                                   DB OphidianNormalsSize     ; Face (Normal) Count
  12++ED4A 14                                   DB $14                     ; Range when it turns to a dot
  13++ED4B 40                                   DB $40                     ; Energy Max
  14++ED4C 22                                   DB $22                     ; Speed Max
  15++ED4D 47 EE                                DW OphidianNormals         ; Normals
  16++ED4F 01                                   DB $01                     ; Q scaling
  17++ED50 1A                                   DB $1A                     ; Laser power and Nbr Missiles
  18++ED51 57 ED                                DW OphidianVertices        ; Verticles Address
  19++ED53 00                                   DB ShipTypeNormal          ; Ship Type
  20++ED54 00                                   DB 0                       ; NewB Tactics
  21++ED55 80                                   DB ShipCanAnger            ; AI Flags
  22++ED56 C0                                   DB $C0                     ; chance of ECM module
  23++ED57
  24++ED57 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02 ; 01
  24++ED5B 68 02
  25++ED5D 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01 ; 02
  25++ED61 67 01
  26++ED63 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01 ; 03
  26++ED67 22 01
  27++ED69 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24 ; 04
  27++ED6D 8A 24
  28++ED6F 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13 ; 05
  28++ED73 79 13
  29++ED75 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF ; 06
  29++ED79 FF FF
  30++ED7B 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35 ; 07
  30++ED7F 9B 35
  31++ED81 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45 ; 08
  31++ED85 AB 45
  32++ED87 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A ; 09
  32++ED8B BB 4A
  33++ED8D 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF ; 10
  33++ED91 FF FF
  34++ED93 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF ; 11
  34++ED97 FF FF
  35++ED99 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39 ; 12
  35++ED9D BB 39
  36++ED9F 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF ; 13
  36++EDA3 FF FF
  37++EDA5 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF ; 14
  37++EDA9 FF FF
  38++EDAB 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A ; 15
  38++EDAF BB 9A
  39++EDB1 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF ; 16
  39++EDB5 FF FF
  40++EDB7 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB ; 17
  40++EDBB BB BB
  41++EDBD 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB ; 18
  41++EDC1 BB BB
  42++EDC3 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB ; 19
  42++EDC7 BB BB
  43++EDC9 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB ; 20
  43++EDCD BB BB
  44++EDCF
  45++EDCF              OphidianVertSize:       equ $ - OphidianVertices
  46++EDCF 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  47++EDD3 1F 01 04 08                          DB $1F, $01, $04, $08
  48++EDD7 1F 02 00 08                          DB $1F, $02, $00, $08
  49++EDDB 1F 12 08 14                          DB $1F, $12, $08, $14
  50++EDDF 1F 13 10 14                          DB $1F, $13, $10, $14
  51++EDE3 1F 24 0C 14                          DB $1F, $24, $0C, $14
  52++EDE7 1F 35 14 18                          DB $1F, $35, $14, $18
  53++EDEB 1F 45 14 1C                          DB $1F, $45, $14, $1C
  54++EDEF 1F 28 00 0C                          DB $1F, $28, $00, $0C
  55++EDF3 1F 17 04 10                          DB $1F, $17, $04, $10
  56++EDF7 1F 39 10 2C                          DB $1F, $39, $10, $2C
  57++EDFB 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  58++EDFF 1F 67 04 3C                          DB $1F, $67, $04, $3C
  59++EE03 1F 68 00 3C                          DB $1F, $68, $00, $3C
  60++EE07 1F 79 10 3C                          DB $1F, $79, $10, $3C
  61++EE0B 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  62++EE0F 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  63++EE13 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  64++EE17 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  65++EE1B 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  66++EE1F 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  67++EE23 1F AB 20 38                          DB $1F, $AB, $20, $38
  68++EE27 10 BB 40 44                          DB $10, $BB, $40, $44
  69++EE2B 10 BB 44 48                          DB $10, $BB, $44, $48
  70++EE2F 10 BB 48 4C                          DB $10, $BB, $48, $4C
  71++EE33 10 BB 4C 40                          DB $10, $BB, $4C, $40
  72++EE37 10 39 30 34                          DB $10, $39, $30, $34
  73++EE3B 10 39 2C 30                          DB $10, $39, $2C, $30
  74++EE3F 10 4A 28 24                          DB $10, $4A, $28, $24
  75++EE43 10 4A 24 20                          DB $10, $4A, $24, $20
  76++EE47              OphidianEdgesSize:      equ $ - OphidianEdges
  77++EE47              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  78++EE47
  79++EE47 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  80++EE4B 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  81++EE4F 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  82++EE53 1F 10 22 02                          DB $1F, $10, $22, $02
  83++EE57 9F 10 22 02                          DB $9F, $10, $22, $02
  84++EE5B 3F 00 25 03                          DB $3F, $00, $25, $03
  85++EE5F 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  86++EE63 5F 0A 14 02                          DB $5F, $0A, $14, $02
  87++EE67 DF 0A 14 02                          DB $DF, $0A, $14, $02
  88++EE6B 7F 12 20 02                          DB $7F, $12, $20, $02
  89++EE6F FF 12 20 02                          DB $FF, $12, $20, $02
  90++EE73 3F 00 00 25                          DB $3F, $00, $00, $25
  91++EE77
  92++EE77              OphidianNormalsSize:    equ $ - OphidianNormals
  93++EE77              OphidianLen:            equ $ - Ophidian
  94++EE77
# file closed: ./Data/ships/Ophidian.asm
  95+ EE77                                      include "Data/ships/Plate.asm"
# file opened: ./Data/ships/Plate.asm
   1++EE77 80           Plate:	                DB $80                    ; Number of cargo canisters released when destroyed
   2++EE78 64 00                                DW $0064                  ; Ship's targetable area LoHi
   3++EE7A A4 EE                                DW PlateEdges             ; Edge Data
   4++EE7C 10                                   DB PlateEdgesSize         ; Size of Edge Data
   5++EE7D 00                                   DB $00                    ; Gun Vertex Byte offset
   6++EE7E 0A                                   DB $0A                    ; Explosion Count
   7++EE7F 03                                   DB PlateVertSize /6       ; Vertex Count /6
   8++EE80 12                                   DB PlateVertSize          ; Vertex Count
   9++EE81 04                                   DB PlateEdgesCnt          ; Edges Count
  10++EE82 00 00                                DW $0000                  ; Bounty LoHi
  11++EE84 04                                   DB PlateNormalsSize       ; Face (Normal) Count
  12++EE85 05                                   DB $05                    ; Range when it turns to a dot
  13++EE86 10                                   DB $10                    ; Energy Max
  14++EE87 10                                   DB $10                    ; Speed Max
  15++EE88 B4 EE                                DW PlateNormals           ; Normals
  16++EE8A 03                                   DB $03                    ; Q scaling
  17++EE8B 00                                   DB $00                    ; Laser power and Nbr Missiles
  18++EE8C 92 EE                                DW PlateVertices          ; Verticles Address
  19++EE8E 04                                   DB ShipTypeScoopable      ; Ship Type
  20++EE8F 00                                   DB 0                      ; NewB Tactics
  21++EE90 80                                   DB ShipCanAnger           ; AI Flags
  22++EE91 00                                   DB $00                    ; chance of ECM module
  23++EE92
  24++EE92
  25++EE92 0F 16 09 FF  PlateVertices:	        DB $0F, $16, $09, $FF, $FF, $FF
  25++EE96 FF FF
  26++EE98 0F 26 09 BF                          DB $0F, $26, $09, $BF, $FF, $FF
  26++EE9C FF FF
  27++EE9E 13 20 0B 14                          DB $13, $20, $0B, $14, $FF, $FF
  27++EEA2 FF FF
  28++EEA4
  29++EEA4              PlateVertSize: equ $ - PlateVertices
  30++EEA4
  31++EEA4
  32++EEA4
  33++EEA4 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  34++EEA8 10 FF 04 08  	DB $10, $FF, $04, $08
  35++EEAC 14 FF 08 0C  	DB $14, $FF, $08, $0C
  36++EEB0 10 FF 0C 00  	DB $10, $FF, $0C, $00
  37++EEB4
  38++EEB4              PlateEdgesSize: equ $ - PlateEdges
  39++EEB4
  40++EEB4
  41++EEB4              PlateEdgesCnt: equ PlateEdgesSize/4
  42++EEB4
  43++EEB4
  44++EEB4 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  45++EEB8
  46++EEB8
  47++EEB8              PlateNormalsSize: equ $ - PlateNormals
  48++EEB8              PlateLen: equ $ - Plate
  49++EEB8
# file closed: ./Data/ships/Plate.asm
  96+ EEB8                                      include "Data/ships/Python.asm"
# file opened: ./Data/ships/Python.asm
   1++EEB8              ;\ -> &5BA1 \ Python = Type 12                                                   ; Number of cargo canisters released when destroyed
   2++EEB8 05           Python:                 DB $05                                                   ; Ship's targetable area LoHi
   3++EEB9 00 19                                DW $1900                                                 ; Edge Data
   4++EEBB 15 EF                                DW PythonEdges                                           ; Size of Edge Data
   5++EEBD 68                                   DB PythonEdgesSize                                       ; Gun Vertex Byte offset
   6++EEBE 00                                   DB $00                                                   ; Explosion Count
   7++EEBF 2A                                   DB $2A                                                   ; Vertex Count /6
   8++EEC0 0B                                   DB PythonVertSize /6                                     ; Vertex Count
   9++EEC1 42                                   DB PythonVertSize                                        ; Edges Count
  10++EEC2 1A                                   DB PythonEdgesCnt                                        ; Bounty LoHi
  11++EEC3 00 00                                DW $0000                                                 ; Face (Normal) Count
  12++EEC5 34                                   DB PythonNormalsSize                                     ; Range when it turns to a dot
  13++EEC6 28                                   DB $28                                                   ; Energy Max
  14++EEC7 FA                                   DB $FA                                                   ; Speed Max
  15++EEC8 14                                   DB $14                                                   ; Normals
  16++EEC9 7D EF                                DW PythonNormals                                         ; Q scaling
  17++EECB 00                                   DB $00                                                   ; Laser power and Nbr Missiles
  18++EECC 56                                   DB $50 | ShipMissiles6                                   ; Verticles Address
  19++EECD D3 EE                                DW PythonVertices                                        ; Ship Type
  20++EECF 00                                   DB ShipTypeNormal                                        ; NewB Tactics
  21++EED0 00                                   DB 0                                                     ; AI Flags
  22++EED1 90                                   DB ShipCanAnger | ShipFighterBaySize1 | ShipFighterWorm  ; chance of ECM module
  23++EED2 E0                                   DB $E0
  24++EED3 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  24++EED7 10 32
  25++EED9 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  25++EEDD 10 54
  26++EEDF 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  26++EEE3 FF FF
  27++EEE5 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  27++EEE9 FF FF
  28++EEEB 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  28++EEEF 54 98
  29++EEF1 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  29++EEF5 89 CC
  30++EEF7 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  30++EEFB B8 CC
  31++EEFD 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  31++EF01 A9 CC
  32++EF03 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  32++EF07 32 76
  33++EF09 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  33++EF0D 76 BA
  34++EF0F 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  34++EF13 BA CC
  35++EF15              PythonVertSize          equ $  - PythonVertices
  36++EF15 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  36++EF19 1F 20 00 0C
  37++EF1D 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  37++EF21 1E 10 00 04
  38++EF25 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  38++EF29 1D 51 04 08
  39++EF2D 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  39++EF31 1D 40 04 0C
  40++EF35 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  40++EF39 1D A7 08 24
  41++EF3D 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  41++EF41 1D B6 0C 24
  42++EF45 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  42++EF49 05 BB 0C 28
  43++EF4D 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  43++EF51 05 AA 08 28
  44++EF55 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  44++EF59 1F B8 0C 18
  45++EF5D 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  45++EF61 1F C9 14 1C
  46++EF65 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  46++EF69 1D CB 18 28
  47++EF6D 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  47++EF71 1D BA 24 28
  48++EF75 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  48++EF79 1D 76 20 24
  49++EF7D              PythonEdgesSize         equ $  - PythonEdges
  50++EF7D              PythonEdgesCnt          equ PythonEdgesSize/4
  51++EF7D 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  51++EF81 1E 1B 28 0B
  52++EF85 DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  52++EF89 5E 1B 28 0B
  53++EF8D 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  53++EF91 1E 13 26 00
  54++EF95 DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  54++EF99 5E 13 26 00
  55++EF9D BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  55++EFA1 3E 19 25 0B
  56++EFA5 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  56++EFA9 FE 19 25 0B
  57++EFAD 3E 00 00 70                          DB $3E, $00, $00, $70
  58++EFB1              PythonNormalsSize       equ $  - PythonNormals
  59++EFB1              PythonLen               equ $  - Python
  60++EFB1
# file closed: ./Data/ships/Python.asm
  97+ EFB1                                      include "Data/ships/Python_P.asm"
# file opened: ./Data/ships/Python_P.asm
   1++EFB1 02           Python_P:	            DB $02                           ; Number of cargo canisters released when destroyed
   2++EFB2 00 19                                DW $1900                         ; Ship's targetable area LoHi
   3++EFB4 0E F0                                DW Python_PEdges                 ; Edge Data
   4++EFB6 68                                   DB Python_PEdgesSize             ; Size of Edge Data
   5++EFB7 00                                   DB $00                           ; Gun Vertex Byte offset
   6++EFB8 2A                                   DB $2A                           ; Explosion Count
   7++EFB9 0B                                   DB Python_PVertSize /6           ; Vertex Count /6
   8++EFBA 42                                   DB Python_PVertSize              ; Vertex Count
   9++EFBB 1A                                   DB Python_PEdgesCnt              ; Edges Count
  10++EFBC C8 00                                DW $00C8                         ; Bounty LoHi
  11++EFBE 34                                   DB Python_PNormalsSize           ; Face (Normal) Count
  12++EFBF 28                                   DB $28                           ; Range when it turns to a dot
  13++EFC0 FA                                   DB $FA                           ; Energy Max
  14++EFC1 14                                   DB $14                           ; Speed Max
  15++EFC2 76 F0                                DW Python_PNormals               ; Normals
  16++EFC4 00                                   DB $00                           ; Q scaling
  17++EFC5 66                                   DB $60 | ShipMissiles6           ; Laser power and Nbr Missiles
  18++EFC6 CC EF                                DW Python_PVertices              ; Verticles Address
  19++EFC8 00                                   DB ShipTypeNormal                ; Ship Type
  20++EFC9 00                                   DB 0                             ; NewB Tactics
  21++EFCA 80                                   DB ShipCanAnger                  ; AI Flags
  22++EFCB F0                                   DB $F0                           ; chance of ECM module
  23++EFCC
  24++EFCC 00 00 E0 1F  Python_PVertices:	    DB $00, $00, $E0, $1F, $10, $32
  24++EFD0 10 32
  25++EFD2 00 30 30 1F                          DB $00, $30, $30, $1F, $10, $54
  25++EFD6 10 54
  26++EFD8 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  26++EFDC FF FF
  27++EFDE 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  27++EFE2 FF FF
  28++EFE4 00 30 20 3F                          DB $00, $30, $20, $3F, $54, $98
  28++EFE8 54 98
  29++EFEA 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  29++EFEE 89 CC
  30++EFF0 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  30++EFF4 B8 CC
  31++EFF6 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  31++EFFA A9 CC
  32++EFFC 00 30 30 5F                          DB $00, $30, $30, $5F, $32, $76
  32++F000 32 76
  33++F002 00 30 20 7F                          DB $00, $30, $20, $7F, $76, $BA
  33++F006 76 BA
  34++F008 00 18 70 7F                          DB $00, $18, $70, $7F, $BA, $CC
  34++F00C BA CC
  35++F00E
  36++F00E              Python_PVertSize: equ $ - Python_PVertices
  37++F00E
  38++F00E
  39++F00E
  40++F00E 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  41++F012 1F 20 00 0C  	DB $1F, $20, $00, $0C
  42++F016 1F 31 00 08  	DB $1F, $31, $00, $08
  43++F01A 1F 10 00 04  	DB $1F, $10, $00, $04
  44++F01E 1F 59 08 10  	DB $1F, $59, $08, $10
  45++F022 1F 51 04 08  	DB $1F, $51, $04, $08
  46++F026 1F 37 08 20  	DB $1F, $37, $08, $20
  47++F02A 1F 40 04 0C  	DB $1F, $40, $04, $0C
  48++F02E 1F 62 0C 20  	DB $1F, $62, $0C, $20
  49++F032 1F A7 08 24  	DB $1F, $A7, $08, $24
  50++F036 1F 84 0C 10  	DB $1F, $84, $0C, $10
  51++F03A 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  52++F03E 07 88 0C 14  	DB $07, $88, $0C, $14
  53++F042 07 BB 0C 28  	DB $07, $BB, $0C, $28
  54++F046 07 99 08 14  	DB $07, $99, $08, $14
  55++F04A 07 AA 08 28  	DB $07, $AA, $08, $28
  56++F04E 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  57++F052 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  58++F056 1F C8 14 18  	DB $1F, $C8, $14, $18
  59++F05A 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  60++F05E 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  61++F062 1F CB 18 28  	DB $1F, $CB, $18, $28
  62++F066 1F 98 10 14  	DB $1F, $98, $10, $14
  63++F06A 1F BA 24 28  	DB $1F, $BA, $24, $28
  64++F06E 1F 54 04 10  	DB $1F, $54, $04, $10
  65++F072 1F 76 20 24  	DB $1F, $76, $20, $24
  66++F076
  67++F076              Python_PEdgesSize: equ $ - Python_PEdges
  68++F076
  69++F076
  70++F076              Python_PEdgesCnt: equ Python_PEdgesSize/4
  71++F076
  72++F076
  73++F076 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  74++F07A 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  75++F07E DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  76++F082 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  77++F086 9F 13 26 00  	DB $9F, $13, $26, $00
  78++F08A 1F 13 26 00  	DB $1F, $13, $26, $00
  79++F08E DF 13 26 00  	DB $DF, $13, $26, $00
  80++F092 5F 13 26 00  	DB $5F, $13, $26, $00
  81++F096 BF 19 25 0B  	DB $BF, $19, $25, $0B
  82++F09A 3F 19 25 0B  	DB $3F, $19, $25, $0B
  83++F09E 7F 19 25 0B  	DB $7F, $19, $25, $0B
  84++F0A2 FF 19 25 0B  	DB $FF, $19, $25, $0B
  85++F0A6 3F 00 00 70  	DB $3F, $00, $00, $70
  86++F0AA
  87++F0AA
  88++F0AA              Python_PNormalsSize: equ $ - Python_PNormals
  89++F0AA              Python_PLen: equ $ - Python_P
  90++F0AA
# file closed: ./Data/ships/Python_P.asm
  98+ F0AA
# file closed: ./Data/ShipModelMetaData2.asm
 875  F0AA                  DISPLAY "Bank ",BankShipModels2," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels2"
 876  F0AA              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
 877  F0AA                  SLOT    ShipModelsAddr
 878  F0AA                  PAGE    BankShipModels3
 879  F0AA              	ORG     ShipModelsAddr, BankShipModels3
 880  E000
 881  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
 882  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
 882  E00F 06 00       >                        ld      b,0
 882  E011 4F          >                        ld      c,a                                 ; c= original ship id
 882  E012 CB 3F       >.ShiftLoop:             srl     a
 882  E014 CB 3F       >                        srl     a
 882  E016 CB 3F       >                        srl     a
 882  E018 CB 3F       >                        srl     a                                   ; divide by 16
 882  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 882  E01B 79          >                        ld      a,c
 882  E01C 50          >                        ld      d,b
 882  E01D 1E 10       >                        ld      e,16
 882  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 882  E021 93          >                        sub     e                                   ; a= actual model id now
 882  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 882  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 882  E024 7A          >                        ld      a,d                                 ; a = bank number
 882  E025             >;.. Now b = bank and a = adjusted ship nbr
 882  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
 882  E028 ED 31       >                        add     hl,a
 882  E02A ED 31       >                        add     hl,a
 882  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 882  E02D             >                        ClearCarryFlag
 882  E02D B7          >                        or a
 882  E02E C9          >                        ret
 883  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
 883  E02F 2A 43 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 883  E032 11 49 C3    >                        ld          de,UBnkHullVerticies
 883  E035 06 00       >                        ld          b,0
 883  E037 3A 37 C3    >                        ld			a,(VertexCtX6Addr)
 883  E03A 4F          >                        ld          c,a
 883  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 883  E03C CD 58 7D    >                        call        memcopy_dma
 883  E03F C9          >                        ret
 884  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
 884  E040 2A 31 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 884  E043 11 39 C4    >                        ld          de,UBnkHullEdges
 884  E046 06 00       >                        ld          b,0
 884  E048 3A 33 C3    >                        ld			a,(LineX4Addr)
 884  E04B 4F          >                        ld          c,a
 884  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 884  E04D CD 58 7D    >                        call        memcopy_dma
 884  E050 C9          >                        ret
 885  E051              CopyNormsToUniv3:       McopyNormsToUniverse
 885  E051 2A 3F C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 885  E054 11 01 C5    >                        ld          de,UBnkHullNormals
 885  E057 06 00       >                        ld          b,0
 885  E059 3A 3B C3    >                        ld          a,(FaceCtX4Addr)
 885  E05C 4F          >                        ld          c,a
 885  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 885  E05E CD 58 7D    >                        call        memcopy_dma
 885  E061 C9          >                        ret
 886  E062              ShipBankTable3:         MShipBankTable
 886  E062 3B 00       >                        DW      BankShipModels1
 886  E064 43 00       >                        DW      BankShipModels2
 886  E066 44 00       >                        DW      BankShipModels3
 886  E068 45 00       >                        DW      BankShipModels4
 887  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
 887  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
 887  E06D 36 44       >                        ld          (hl),BankShipModels3
 887  E06F F5          >                        push        af
 887  E070 FD 7D       >                        ld          a,iyl
 887  E072 32 43 C0    >                        ld          (UBnKShipModelId),a
 887  E075 F1          >                        pop         af
 887  E076 32 42 C0    >                        ld          (UBnKShipModelNbr),a
 887  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 887  E07C ED 31       >                        add         hl,a
 887  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 887  E080 4E          >                        ld          c,(hl)
 887  E081 23          >                        inc         hl
 887  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 887  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 887  E086 ED 31       >                        add         hl,a
 887  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 887  E08A 7E          >                        ld          a,(hl)
 887  E08B 23          >                        inc         hl
 887  E08C 66          >                        ld          h,(hl)
 887  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 887  E08E 11 2E C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 887  E091 01 1B 00    >                        ld          bc,ShipDataLength
 887  E094 ED B0       >                        ldir
 887  E096 CD 2F E0    >                        call        CopyVertsToUniv
 887  E099 CD 40 E0    >                        call        CopyEdgesToUniv
 887  E09C CD 51 E0    >                        call        CopyNormsToUniv
 887  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
 887  E0A2 3E 20       >                        ld          a," "
 887  E0A4 06 10       >                        ld          b,16
 887  E0A6 77          >.fillLoop:              ld          (hl),a
 887  E0A7 23          >                        inc         hl
 887  E0A8 10 FC       >                        djnz        .fillLoop
 887  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnKShipModelId)
 887  E0AD CD B7 91    >                        call        ShipIndexToAddress
 887  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
 887  E0B3 06 10       >                        ld          b,16
 887  E0B5 7E          >.CopyLoop:              ld          a,(hl)
 887  E0B6 FE 00       >                        cp          0
 887  E0B8 28 05       >                        jr          z,.CopyDone
 887  E0BA 12          >                        ld          (de),a
 887  E0BB 23          >                        inc         hl
 887  E0BC 13          >                        inc         de
 887  E0BD 10 F6       >                        djnz        .CopyLoop
 887  E0BF C9          >.CopyDone:              ret
 888  E0C0              CopyBodyToUniverse3:    MCopyBodyToUniverse     CopyShipToUniverse3
 888  E0C0 3E 0D       >                        ld          a,13
 888  E0C2 CD 6A E0    >                        call        CopyShipToUniverse3
 888  E0C5 C9          >                        ret
 889  E0C6                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E0C6 66 E1        ShipModelTable3:         DW Rock_Hermit                             ;32  $30
   2+ E0C8 43 E2                                 DW ShuttleType9                            ;33  $31
   3+ E0CA 7C E3                                 DW Shuttle_Mk_2                            ;34  $32
   4+ E0CC A1 E4                                 DW Sidewinder                              ;35  $33
   5+ E0CE 50 E5                                 DW Splinter                                ;36  $34
   6+ E0D0 AB E5                                 DW TestVector                              ;37  $35
   7+ E0D2 10 E6                                 DW Thargoid                                ;38  $36
   8+ E0D4 33 E7                                 DW Thargon                                 ;39  $37
   9+ E0D6 E2 E7                                 DW TransportType10                         ;40  $38
  10+ E0D8 CB E9                                 DW Viper                                   ;41  $39
  11+ E0DA AC EA                                 DW Worm                                    ;42  $3A
  12+ E0DC 63 EB                                 DW Rattler                                 ;43  $3B
  13+ E0DE 00 00                                 DW 0                                       ;44  $3C
  14+ E0E0 00 00                                 DW 0                                       ;45  $3D
  15+ E0E2 00 00                                 DW 0                                       ;46  $3E
  16+ E0E4 00 00                                 DW 0                                       ;47  $3F
  17+ E0E6 81 E1        ShipVertexTable3:        DW Rock_HermitVertices                     ;32  $30
  18+ E0E8 5E E2                                 DW ShuttleType9Vertices                    ;33  $31
  19+ E0EA 97 E3                                 DW Shuttle_Mk_2Vertices                    ;34  $32
  20+ E0EC BC E4                                 DW SidewinderVertices                      ;35  $33
  21+ E0EE 6B E5                                 DW SplinterVertices                        ;36  $34
  22+ E0F0 C6 E5                                 DW TestVectorVertices                      ;37  $35
  23+ E0F2 2B E6                                 DW ThargoidVertices                        ;38  $36
  24+ E0F4 4E E7                                 DW ThargonVertices                         ;39  $37
  25+ E0F6 FD E7                                 DW TransportType10Vertices                 ;40  $38
  26+ E0F8 E6 E9                                 DW ViperVertices                           ;41  $39
  27+ E0FA C7 EA                                 DW WormVertices                            ;42  $3A
  28+ E0FC 7E EB                                 DW RattlerVertices                         ;43  $3B
  29+ E0FE 00 00                                 DW 0                                       ;44  $3C
  30+ E100 00 00                                 DW 0                                       ;45  $3D
  31+ E102 00 00                                 DW 0                                       ;46  $3E
  32+ E104 00 00                                 DW 0                                       ;47  $3F
  33+ E106
  34+ E106 B7 E1        ShipEdgeTable3:          DW Rock_HermitEdges                        ;32  $30
  35+ E108 D0 E2                                 DW ShuttleType9Edges                       ;33  $31
  36+ E10A FD E3                                 DW Shuttle_Mk_2Edges                       ;34  $32
  37+ E10C F8 E4                                 DW SidewinderEdges                         ;35  $33
  38+ E10E 83 E5                                 DW SplinterEdges                           ;36  $34
  39+ E110 F0 E5                                 DW TestVectorEdges                         ;37  $35
  40+ E112 A3 E6                                 DW ThargoidEdges                           ;38  $36
  41+ E114 8A E7                                 DW ThargonEdges                            ;39  $37
  42+ E116 DB E8                                 DW TransportType10Edges                    ;40  $38
  43+ E118 40 EA                                 DW ViperEdges                              ;41  $39
  44+ E11A 03 EB                                 DW WormEdges                               ;42  $3A
  45+ E11C D8 EB                                 DW RattlerEdges                            ;43  $3B
  46+ E11E 00 00                                 DW 0                                       ;44  $3C
  47+ E120 00 00                                 DW 0                                       ;45  $3D
  48+ E122 00 00                                 DW 0                                       ;46  $3E
  49+ E124 00 00                                 DW 0                                       ;47  $3F
  50+ E126
  51+ E126 0B E2        ShipNormalTable3:        DW Rock_HermitNormals                      ;32  $30
  52+ E128 48 E3                                 DW ShuttleType9Normals                     ;33  $31
  53+ E12A 6D E4                                 DW Shuttle_Mk_2Normals                     ;34  $32
  54+ E12C 34 E5                                 DW SidewinderNormals                       ;35  $33
  55+ E12E 9B E5                                 DW SplinterNormals                         ;36  $34
  56+ E130 00 E6                                 DW TestVectorNormals                       ;37  $35
  57+ E132 0B E7                                 DW ThargoidNormals                         ;38  $36
  58+ E134 C6 E7                                 DW ThargonNormals                          ;39  $37
  59+ E136 93 E9                                 DW TransportType10Normals                  ;40  $38
  60+ E138 90 EA                                 DW ViperNormals                            ;41  $39
  61+ E13A 43 EB                                 DW WormNormals                             ;42  $3A
  62+ E13C D8 EB                                 DW RattlerEdges                            ;43  $3B
  63+ E13E 00 00                                 DW 0                                       ;44  $3C
  64+ E140 00 00                                 DW 0                                       ;45  $3D
  65+ E142 00 00                                 DW 0                                       ;46  $3E
  66+ E144 00 00                                 DW 0                                       ;47  $3F
  67+ E146
  68+ E146 DD 00        ShipModelSizeTable3:     DW Rock_HermitLen                          ;32  $30
  69+ E148 39 01                                 DW ShuttleType9Len                         ;33  $31
  70+ E14A 25 01                                 DW Shuttle_Mk_2Len                         ;34  $32
  71+ E14C AF 00                                 DW SidewinderLen                           ;35  $33
  72+ E14E 5B 00                                 DW SplinterLen                             ;36  $34
  73+ E150 65 00                                 DW TestVectorLen                           ;37  $35
  74+ E152 23 01                                 DW ThargoidLen                             ;38  $36
  75+ E154 AF 00                                 DW ThargonLen                              ;39  $37
  76+ E156 E9 01                                 DW TransportType10Len                      ;40  $38
  77+ E158 E1 00                                 DW ViperLen                                ;41  $39
  78+ E15A B7 00                                 DW WormLen                                 ;42  $3A
  79+ E15C 11 01                                 DW RattlerLen                              ;43  $3B
  80+ E15E 00 00                                 DW 0                                       ;44  $3C
  81+ E160 00 00                                 DW 0                                       ;45  $3D
  82+ E162 00 00                                 DW 0                                       ;46  $3E
  83+ E164 00 00                                 DW 0                                       ;47  $3F
  84+ E166
  85+ E166                                      include "Data/ships/Rock_Hermit.asm"
# file opened: ./Data/ships/Rock_Hermit.asm
   1++E166 07           Rock_Hermit:	        DB $07                            ; Number of cargo canisters released when destroyed
   2++E167 00 19                                DW $1900                          ; Ship's targetable area LoHi
   3++E169 B7 E1                                DW Rock_HermitEdges               ; Edge Data
   4++E16B 54                                   DB Rock_HermitEdgesSize           ; Size of Edge Data
   5++E16C 00                                   DB $00                            ; Gun Vertex Byte offset
   6++E16D 32                                   DB $32                            ; Explosion Count
   7++E16E 09                                   DB Rock_HermitVertSize /6         ; Vertex Count /6
   8++E16F 36                                   DB Rock_HermitVertSize            ; Vertex Count
   9++E170 15                                   DB Rock_HermitEdgesCnt            ; Edges Count
  10++E171 00 00                                DW $0000                          ; Bounty LoHi
  11++E173 38                                   DB Rock_HermitNormalsSize         ; Face (Normal) Count
  12++E174 32                                   DB $32                            ; Range when it turns to a dot
  13++E175 B4                                   DB $B4                            ; Energy Max
  14++E176 1E                                   DB $1E                            ; Speed Max
  15++E177 0B E2                                DW Rock_HermitNormals             ; Normals
  16++E179 01                                   DB $01                            ; Q scaling
  17++E17A 02                                   DB $02                            ; Laser power and Nbr Missiles
  18++E17B 81 E1                                DW Rock_HermitVertices            ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                 ; Ship Type
  20++E17E 00                                   DB 0                              ; NewB Tactics
  21++E17F 80                                   DB ShipCanAnger                   ; AI Flags
  22++E180 30                                   DB $30                            ; chance of ECM module
  23++E181
  24++E181
  25++E181 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  25++E185 FF FF
  26++E187 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF
  26++E18B FF FF
  27++E18D 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  27++E191 FF FF
  28++E193 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF
  28++E197 FF FF
  29++E199 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC
  29++E19D 65 DC
  30++E19F 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF
  30++E1A3 FF FF
  31++E1A5 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32
  31++E1A9 10 32
  32++E1AB 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF
  32++E1AF FF FF
  33++E1B1 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA
  33++E1B5 98 BA
  34++E1B7
  35++E1B7
  36++E1B7              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  37++E1B7
  38++E1B7
  39++E1B7
  40++E1B7 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  41++E1BB 1F D6 00 10  	DB $1F, $D6, $00, $10
  42++E1BF 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  43++E1C3 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  44++E1C7 1F A3 04 08  	DB $1F, $A3, $04, $08
  45++E1CB 1F 32 04 18  	DB $1F, $32, $04, $18
  46++E1CF 1F 31 08 18  	DB $1F, $31, $08, $18
  47++E1D3 1F 41 08 14  	DB $1F, $41, $08, $14
  48++E1D7 1F 10 14 18  	DB $1F, $10, $14, $18
  49++E1DB 1F 60 00 14  	DB $1F, $60, $00, $14
  50++E1DF 1F 54 0C 14  	DB $1F, $54, $0C, $14
  51++E1E3 1F 20 00 18  	DB $1F, $20, $00, $18
  52++E1E7 1F 65 10 14  	DB $1F, $65, $10, $14
  53++E1EB 1F A8 04 20  	DB $1F, $A8, $04, $20
  54++E1EF 1F 87 04 1C  	DB $1F, $87, $04, $1C
  55++E1F3 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  56++E1F7 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  57++E1FB 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  58++E1FF 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  59++E203 1F BA 08 20  	DB $1F, $BA, $08, $20
  60++E207 1F 98 1C 20  	DB $1F, $98, $1C, $20
  61++E20B
  62++E20B              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  63++E20B
  64++E20B
  65++E20B              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  66++E20B
  67++E20B
  68++E20B 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  69++E20F 5F 09 42 51  	DB $5F, $09, $42, $51
  70++E213 9F 48 40 1F  	DB $9F, $48, $40, $1F
  71++E217 DF 40 49 2F  	DB $DF, $40, $49, $2F
  72++E21B 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  73++E21F 1F 87 0F 23  	DB $1F, $87, $0F, $23
  74++E223 1F 26 4C 46  	DB $1F, $26, $4C, $46
  75++E227 BF 42 3B 27  	DB $BF, $42, $3B, $27
  76++E22B FF 43 0F 50  	DB $FF, $43, $0F, $50
  77++E22F 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  78++E233 FF 46 50 28  	DB $FF, $46, $50, $28
  79++E237 7F 3A 66 33  	DB $7F, $3A, $66, $33
  80++E23B 3F 51 09 43  	DB $3F, $51, $09, $43
  81++E23F 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  82++E243
  83++E243
  84++E243              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  85++E243              Rock_HermitLen: equ $ - Rock_Hermit
  86++E243
# file closed: ./Data/ships/Rock_Hermit.asm
  86+ E243                                      include "Data/ships/ShuttleType9.asm"
# file opened: ./Data/ships/ShuttleType9.asm
   1++E243 0F           ShuttleType9:	            DB $0F                       ; Number of cargo canisters released when destroyed
   2++E244 C4 09                                    DW $09C4                     ; Ship's targetable area LoHi
   3++E246 D0 E2                                    DW ShuttleType9Edges         ; Edge Data
   4++E248 78                                       DB ShuttleType9EdgesSize     ; Size of Edge Data
   5++E249 00                                       DB $00                       ; Gun Vertex Byte offset
   6++E24A 26                                       DB $26                       ; Explosion Count
   7++E24B 13                                       DB ShuttleType9VertSize /6   ; Vertex Count /6
   8++E24C 72                                       DB ShuttleType9VertSize      ; Vertex Count
   9++E24D 1E                                       DB ShuttleType9EdgesCnt      ; Edges Count
  10++E24E 00 00                                    DW $0000                     ; Bounty LoHi
  11++E250 34                                       DB ShuttleType9NormalsSize   ; Face (Normal) Count
  12++E251 16                                       DB $16                       ; Range when it turns to a dot
  13++E252 20                                       DB $20                       ; Energy Max
  14++E253 08                                       DB $08                       ; Speed Max
  15++E254 48 E3                                    DW ShuttleType9Normals       ; Normals
  16++E256 02                                       DB $02                       ; Q scaling
  17++E257 00                                       DB $00                       ; Laser power and Nbr Missiles
  18++E258 5E E2                                    DW ShuttleType9Vertices      ; Verticles Address
  19++E25A 00           	                        DB ShipTypeNormal            ; Ship Type
  20++E25B 00                                       DB 0                         ; NewB Tactics
  21++E25C 00                                       DB 0                         ; AI Flags
  22++E25D 80                                       DB $80                       ; chance of ECM module
  23++E25E
  24++E25E
  25++E25E 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF ; 01
  25++E262 FF FF
  26++E264 11 00 17 9F                          DB $11, $00, $17, $9F, $FF, $FF ; 02
  26++E268 FF FF
  27++E26A 00 12 17 1F                          DB $00, $12, $17, $1F, $FF, $FF ; 03
  27++E26E FF FF
  28++E270 12 00 17 1F                          DB $12, $00, $17, $1F, $FF, $FF ; 04
  28++E274 FF FF
  29++E276 14 14 1B FF                          DB $14, $14, $1B, $FF, $12, $39 ; 05
  29++E27A 12 39
  30++E27C 14 14 1B BF                          DB $14, $14, $1B, $BF, $34, $59 ; 06
  30++E280 34 59
  31++E282 14 14 1B 3F                          DB $14, $14, $1B, $3F, $56, $79 ; 07
  31++E286 56 79
  32++E288 14 14 1B 7F                          DB $14, $14, $1B, $7F, $17, $89 ; 08
  32++E28C 17 89
  33++E28E 05 00 1B 30                          DB $05, $00, $1B, $30, $99, $99 ; 09
  33++E292 99 99
  34++E294 00 02 1B 70                          DB $00, $02, $1B, $70, $99, $99 ; 10
  34++E298 99 99
  35++E29A 05 00 1B A9                          DB $05, $00, $1B, $A9, $99, $99 ; 11
  35++E29E 99 99
  36++E2A0 00 03 1B 29                          DB $00, $03, $1B, $29, $99, $99 ; 12
  36++E2A4 99 99
  37++E2A6 00 09 23 50                          DB $00, $09, $23, $50, $0A, $BC ; 13
  37++E2AA 0A BC
  38++E2AC 03 01 1F 47                          DB $03, $01, $1F, $47, $FF, $02 ; 14
  38++E2B0 FF 02
  39++E2B2 04 0B 19 08                          DB $04, $0B, $19, $08, $01, $F4 ; 15
  39++E2B6 01 F4
  40++E2B8 0B 04 19 08                          DB $0B, $04, $19, $08, $A1, $3F ; 16
  40++E2BC A1 3F
  41++E2BE 03 01 1F C7                          DB $03, $01, $1F, $C7, $6B, $23 ; 17
  41++E2C2 6B 23
  42++E2C4 03 0B 19 88                          DB $03, $0B, $19, $88, $F8, $C0 ; 18
  42++E2C8 F8 C0
  43++E2CA 0A 04 19 88                          DB $0A, $04, $19, $88, $4F, $18 ; 19
  43++E2CE 4F 18
  44++E2D0
  45++E2D0              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  46++E2D0
  47++E2D0
  48++E2D0
  49++E2D0 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  50++E2D4 1F 4A 04 08  	DB $1F, $4A, $04, $08
  51++E2D8 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  52++E2DC 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  53++E2E0 1F 18 00 1C  	DB $1F, $18, $00, $1C
  54++E2E4 18 12 00 10  	DB $18, $12, $00, $10
  55++E2E8 1F 23 04 10  	DB $1F, $23, $04, $10
  56++E2EC 18 34 04 14  	DB $18, $34, $04, $14
  57++E2F0 1F 45 08 14  	DB $1F, $45, $08, $14
  58++E2F4 0C 56 08 18  	DB $0C, $56, $08, $18
  59++E2F8 1F 67 0C 18  	DB $1F, $67, $0C, $18
  60++E2FC 18 78 0C 1C  	DB $18, $78, $0C, $1C
  61++E300 1F 39 10 14  	DB $1F, $39, $10, $14
  62++E304 1F 59 14 18  	DB $1F, $59, $14, $18
  63++E308 1F 79 18 1C  	DB $1F, $79, $18, $1C
  64++E30C 1F 19 10 1C  	DB $1F, $19, $10, $1C
  65++E310 10 0C 00 30  	DB $10, $0C, $00, $30
  66++E314 10 0A 04 30  	DB $10, $0A, $04, $30
  67++E318 10 AB 08 30  	DB $10, $AB, $08, $30
  68++E31C 10 BC 0C 30  	DB $10, $BC, $0C, $30
  69++E320 10 99 20 24  	DB $10, $99, $20, $24
  70++E324 07 99 24 28  	DB $07, $99, $24, $28
  71++E328 09 99 28 2C  	DB $09, $99, $28, $2C
  72++E32C 07 99 20 2C  	DB $07, $99, $20, $2C
  73++E330 05 BB 34 38  	DB $05, $BB, $34, $38
  74++E334 08 BB 38 3C  	DB $08, $BB, $38, $3C
  75++E338 07 BB 34 3C  	DB $07, $BB, $34, $3C
  76++E33C 05 AA 40 44  	DB $05, $AA, $40, $44
  77++E340 08 AA 44 48  	DB $08, $AA, $44, $48
  78++E344 07 AA 40 48  	DB $07, $AA, $40, $48
  79++E348              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  80++E348              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  81++E348
  82++E348 DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  83++E34C 5F 00 4A 04  	DB $5F, $00, $4A, $04
  84++E350 DF 33 33 17  	DB $DF, $33, $33, $17
  85++E354 9F 4A 00 04  	DB $9F, $4A, $00, $04
  86++E358 9F 33 33 17  	DB $9F, $33, $33, $17
  87++E35C 1F 00 4A 04  	DB $1F, $00, $4A, $04
  88++E360 1F 33 33 17  	DB $1F, $33, $33, $17
  89++E364 1F 4A 00 04  	DB $1F, $4A, $00, $04
  90++E368 5F 33 33 17  	DB $5F, $33, $33, $17
  91++E36C 3F 00 00 6B  	DB $3F, $00, $00, $6B
  92++E370 9F 29 29 5A  	DB $9F, $29, $29, $5A
  93++E374 1F 29 29 5A  	DB $1F, $29, $29, $5A
  94++E378 5F 37 37 28  	DB $5F, $37, $37, $28
  95++E37C
  96++E37C
  97++E37C              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
  98++E37C              ShuttleType9Len: equ $ - ShuttleType9
  99++E37C
# file closed: ./Data/ships/ShuttleType9.asm
  87+ E37C                                      include "Data/ships/Shuttle_Mk_2.asm"
# file opened: ./Data/ships/Shuttle_Mk_2.asm
   1++E37C 0F           Shuttle_Mk_2:	        DB $0F                         ; Number of cargo canisters released when destroyed
   2++E37D C4 09                                DW $09C4                       ; Ship's targetable area LoHi
   3++E37F FD E3                                DW Shuttle_Mk_2Edges           ; Edge Data
   4++E381 70                                   DB Shuttle_Mk_2EdgesSize       ; Size of Edge Data
   5++E382 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E383 26                                   DB $26                         ; Explosion Count
   7++E384 11                                   DB Shuttle_Mk_2VertSize /6     ; Vertex Count /6
   8++E385 66                                   DB Shuttle_Mk_2VertSize        ; Vertex Count
   9++E386 1C                                   DB Shuttle_Mk_2EdgesCnt        ; Edges Count
  10++E387 00 00                                DW $0000                       ; Bounty LoHi
  11++E389 34                                   DB Shuttle_Mk_2NormalsSize     ; Face (Normal) Count
  12++E38A 0A                                   DB $0A                         ; Range when it turns to a dot
  13++E38B 20                                   DB $20                         ; Energy Max
  14++E38C 09                                   DB $09                         ; Speed Max
  15++E38D 6D E4                                DW Shuttle_Mk_2Normals         ; Normals
  16++E38F 02                                   DB $02                         ; Q scaling
  17++E390 00                                   DB $00                         ; Laser power and Nbr Missiles
  18++E391 97 E3                                DW Shuttle_Mk_2Vertices        ; Verticles Address
  19++E393 00                                   DB ShipTypeNormal              ; Ship Type
  20++E394 00                                   DB 0                           ; NewB Tactics
  21++E395 00                                   DB 0                           ; AI Flags
  22++E396 80                                   DB $80                         ; chance of ECM module
  23++E397
  24++E397
  25++E397 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  25++E39B 23 01
  26++E39D 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  26++E3A1 34 00
  27++E3A3 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  27++E3A7 15 00
  28++E3A9 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  28++E3AD 26 11
  29++E3AF 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  29++E3B3 37 22
  30++E3B5 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  30++E3B9 58 04
  31++E3BB 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  31++E3BF 69 15
  32++E3C1 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  32++E3C5 7A 26
  33++E3C7 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  33++E3CB 7B 34
  34++E3CD 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  34++E3D1 BC 48
  35++E3D3 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  35++E3D7 9C 58
  36++E3D9 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  36++E3DD AC 69
  37++E3DF 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  37++E3E3 BC 7A
  38++E3E5 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  38++E3E9 CC CC
  39++E3EB 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  39++E3EF CC CC
  40++E3F1 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  40++E3F5 CC CC
  41++E3F7 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  41++E3FB CC CC
  42++E3FD
  43++E3FD              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  44++E3FD
  45++E3FD
  46++E3FD
  47++E3FD 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  48++E401 1F 12 00 0C  	DB $1F, $12, $00, $0C
  49++E405 1F 23 00 10  	DB $1F, $23, $00, $10
  50++E409 1F 30 00 04  	DB $1F, $30, $00, $04
  51++E40D 1F 04 04 14  	DB $1F, $04, $04, $14
  52++E411 1F 05 08 14  	DB $1F, $05, $08, $14
  53++E415 1F 15 08 18  	DB $1F, $15, $08, $18
  54++E419 1F 16 0C 18  	DB $1F, $16, $0C, $18
  55++E41D 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  56++E421 1F 27 10 1C  	DB $1F, $27, $10, $1C
  57++E425 1F 37 10 20  	DB $1F, $37, $10, $20
  58++E429 1F 34 04 20  	DB $1F, $34, $04, $20
  59++E42D 1F 48 14 24  	DB $1F, $48, $14, $24
  60++E431 1F 58 14 28  	DB $1F, $58, $14, $28
  61++E435 1F 59 18 28  	DB $1F, $59, $18, $28
  62++E439 1F 69 18 2C  	DB $1F, $69, $18, $2C
  63++E43D 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  64++E441 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  65++E445 1F 7B 20 30  	DB $1F, $7B, $20, $30
  66++E449 1F 4B 20 24  	DB $1F, $4B, $20, $24
  67++E44D 1F 8C 24 28  	DB $1F, $8C, $24, $28
  68++E451 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  69++E455 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  70++E459 1F BC 30 24  	DB $1F, $BC, $30, $24
  71++E45D 0A CC 34 38  	DB $0A, $CC, $34, $38
  72++E461 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  73++E465 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  74++E469 0A CC 40 34  	DB $0A, $CC, $40, $34
  75++E46D
  76++E46D              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  77++E46D
  78++E46D
  79++E46D              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  80++E46D
  81++E46D
  82++E46D 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  83++E471 DF 27 27 4E  	DB $DF, $27, $27, $4E
  84++E475 5F 27 27 4E  	DB $5F, $27, $27, $4E
  85++E479 1F 27 27 4E  	DB $1F, $27, $27, $4E
  86++E47D 1F 00 60 00  	DB $1F, $00, $60, $00
  87++E481 9F 60 00 00  	DB $9F, $60, $00, $00
  88++E485 5F 00 60 00  	DB $5F, $00, $60, $00
  89++E489 1F 60 00 00  	DB $1F, $60, $00, $00
  90++E48D BF 42 42 16  	DB $BF, $42, $42, $16
  91++E491 FF 42 42 16  	DB $FF, $42, $42, $16
  92++E495 7F 42 42 16  	DB $7F, $42, $42, $16
  93++E499 3F 42 42 16  	DB $3F, $42, $42, $16
  94++E49D 3F 00 00 60  	DB $3F, $00, $00, $60
  95++E4A1
  96++E4A1
  97++E4A1              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
  98++E4A1              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
  99++E4A1
# file closed: ./Data/ships/Shuttle_Mk_2.asm
  88+ E4A1                                      include "Data/ships/Sidewinder.asm"
# file opened: ./Data/ships/Sidewinder.asm
   1++E4A1 00           Sidewinder:	            DB $00                      ; Number of cargo canisters released when destroyed
   2++E4A2 81 10                                DW $1081                    ; Ship's targetable area LoHi
   3++E4A4 F8 E4                                DW SidewinderEdges          ; Edge Data
   4++E4A6 3C                                   DB SidewinderEdgesSize      ; Size of Edge Data
   5++E4A7 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E4A8 1E                                   DB $1E                      ; Explosion Count
   7++E4A9 0A                                   DB SidewinderVertSize /6    ; Vertex Count /6
   8++E4AA 3C                                   DB SidewinderVertSize       ; Vertex Count
   9++E4AB 0F                                   DB SidewinderEdgesCnt       ; Edges Count
  10++E4AC 32 00                                DW $0032                    ; Bounty LoHi
  11++E4AE 1C                                   DB SidewinderNormalsSize    ; Face (Normal) Count
  12++E4AF 14                                   DB $14                      ; Range when it turns to a dot
  13++E4B0 46                                   DB $46                      ; Energy Max
  14++E4B1 25                                   DB $25                      ; Speed Max
  15++E4B2 34 E5                                DW SidewinderNormals        ; Normals
  16++E4B4 02                                   DB $02                      ; Q scaling
  17++E4B5 11                                   DB $10 | ShipMissiles1      ; Laser power and Nbr Missiles
  18++E4B6 BC E4                                DW SidewinderVertices       ; Verticles Address
  19++E4B8 00                                   DB ShipTypeNormal           ; Ship Type
  20++E4B9 00                                   DB 0                        ; NewB Tactics
  21++E4BA 80                                   DB ShipCanAnger             ; AI Flags
  22++E4BB 30                                   DB $30                      ; chance of ECM module
  23++E4BC
  24++E4BC 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  24++E4C0 10 54
  25++E4C2 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  25++E4C6 20 65
  26++E4C8 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  26++E4CC 32 66
  27++E4CE 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  27++E4D2 31 44
  28++E4D4 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  28++E4D8 10 32
  29++E4DA 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  29++E4DE 43 65
  30++E4E0 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  30++E4E4 33 33
  31++E4E6 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  31++E4EA 33 33
  32++E4EC 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  32++E4F0 33 33
  33++E4F2 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  33++E4F6 33 33
  34++E4F8
  35++E4F8
  36++E4F8              SidewinderVertSize: equ $ - SidewinderVertices
  37++E4F8
  38++E4F8
  39++E4F8
  40++E4F8 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  41++E4FC 1F 62 04 08  	DB $1F, $62, $04, $08
  42++E500 1F 20 04 10  	DB $1F, $20, $04, $10
  43++E504 1F 10 00 10  	DB $1F, $10, $00, $10
  44++E508 1F 41 00 0C  	DB $1F, $41, $00, $0C
  45++E50C 1F 31 0C 10  	DB $1F, $31, $0C, $10
  46++E510 1F 32 08 10  	DB $1F, $32, $08, $10
  47++E514 1F 43 0C 14  	DB $1F, $43, $0C, $14
  48++E518 1F 63 08 14  	DB $1F, $63, $08, $14
  49++E51C 1F 65 04 14  	DB $1F, $65, $04, $14
  50++E520 1F 54 00 14  	DB $1F, $54, $00, $14
  51++E524 0F 33 18 1C  	DB $0F, $33, $18, $1C
  52++E528 0C 33 1C 20  	DB $0C, $33, $1C, $20
  53++E52C 0C 33 18 24  	DB $0C, $33, $18, $24
  54++E530 0C 33 20 24  	DB $0C, $33, $20, $24
  55++E534
  56++E534              SidewinderEdgesSize: equ $ - SidewinderEdges
  57++E534
  58++E534
  59++E534              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  60++E534
  61++E534
  62++E534 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  63++E538 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  64++E53C 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  65++E540 3F 00 00 70  	DB $3F, $00, $00, $70
  66++E544 DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  67++E548 5F 00 20 08  	DB $5F, $00, $20, $08
  68++E54C 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  69++E550
  70++E550
  71++E550              SidewinderNormalsSize: equ $ - SidewinderNormals
  72++E550              SidewinderLen: equ $ - Sidewinder
  73++E550
# file closed: ./Data/ships/Sidewinder.asm
  89+ E550                                      include "Data/ships/Splinter.asm"
# file opened: ./Data/ships/Splinter.asm
   1++E550 B0           Splinter:	            DB $B0                      ; Number of cargo canisters released when destroyed
   2++E551 00 01                                DW $0100                    ; Ship's targetable area LoHi
   3++E553 83 E5                                DW SplinterEdges            ; Edge Data
   4++E555 18                                   DB SplinterEdgesSize        ; Size of Edge Data
   5++E556 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E557 16                                   DB $16                      ; Explosion Count
   7++E558 04                                   DB SplinterVertSize /6      ; Vertex Count /6
   8++E559 18                                   DB SplinterVertSize         ; Vertex Count
   9++E55A 06                                   DB SplinterEdgesCnt         ; Edges Count
  10++E55B 00 00                                DW $0000                    ; Bounty LoHi
  11++E55D 10                                   DB SplinterNormalsSize      ; Face (Normal) Count
  12++E55E 08                                   DB $08                      ; Range when it turns to a dot
  13++E55F 14                                   DB $14                      ; Energy Max
  14++E560 0A                                   DB $0A                      ; Speed Max
  15++E561 9B E5                                DW SplinterNormals          ; Normals
  16++E563 05                                   DB $05                      ; Q scaling
  17++E564 00                                   DB $00                      ; Laser power and Nbr Missiles
  18++E565 6B E5                                DW SplinterVertices         ; Verticles Address
  19++E567 00                                   DB ShipTypeNormal           ; Ship Type
  20++E568 00                                   DB 0                        ; NewB Tactics
  21++E569 00                                   DB 0                        ; AI Flags
  22++E56A 00                                   DB $00                      ; chance of ECM module
  23++E56B
  24++E56B 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  24++E56F 12 33
  25++E571 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  25++E575 02 33
  26++E577 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  26++E57B 01 33
  27++E57D 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  27++E581 01 22
  28++E583              SplinterVertSize:       equ $ - SplinterVertices
  29++E583 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  30++E587 1F 03 04 08                          DB $1F, $03, $04, $08
  31++E58B 1F 01 08 0C                          DB $1F, $01, $08, $0C
  32++E58F 1F 12 0C 00                          DB $1F, $12, $0C, $00
  33++E593 1F 13 00 08                          DB $1F, $13, $00, $08
  34++E597 1F 02 0C 04                          DB $1F, $02, $0C, $04
  35++E59B              SplinterEdgesSize:      equ $ - SplinterEdges
  36++E59B              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  37++E59B 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  38++E59F 1F 03 04 08                          DB $1F, $03, $04, $08
  39++E5A3 1F 01 08 0C                          DB $1F, $01, $08, $0C
  40++E5A7 1F 12 0C 00                          DB $1F, $12, $0C, $00
  41++E5AB              SplinterNormalsSize:    equ $ - SplinterNormals
  42++E5AB              SplinterLen:            equ $ - Splinter
  43++E5AB
# file closed: ./Data/ships/Splinter.asm
  90+ E5AB                                      include "Data/ships/TestVector.asm"
# file opened: ./Data/ships/TestVector.asm
   1++E5AB 03           TestVector:             DB $03                      ; Number of cargo canisters released when destroyed
   2++E5AC 23 41                                DW $4123                    ; Ship's targetable area LoHi
   3++E5AE F0 E5                                DW TestVectorEdges          ; Edge Data
   4++E5B0 10                                   DB TestVectorEdgesSize      ; Size of Edge Data
   5++E5B1 54                                   DB $54                      ; Gun Vertex Byte offset
   6++E5B2 2A                                   DB $2A                      ; Explosion Count
   7++E5B3 07                                   DB TestVectorVertSize /6    ; Vertex Count /6
   8++E5B4 2A                                   DB TestVectorVertSize       ; Vertex Count
   9++E5B5 04                                   DB TestVectorEdgesCnt       ; Edges Count
  10++E5B6 00 00                                DW $0000                    ; Bounty LoHi
  11++E5B8 10                                   DB TestVectorNormalsSize    ; Face (Normal) Count
  12++E5B9 32                                   DB $32                      ; Range when it turns to a dot
  13++E5BA 96                                   DB $96                      ; Energy Max
  14++E5BB 1C                                   DB $1C                      ; Speed Max
  15++E5BC 00 E6                                DW TestVectorNormals        ; Normals
  16++E5BE 04                                   DB $04                      ; Q scaling
  17++E5BF 01                                   DB $01                      ; Laser power and Nbr Missiles
  18++E5C0 C6 E5                                DW TestVectorVertices       ; Verticles Address
  19++E5C2 FE                                   DB ShipTypeDebug            ; Ship Type
  20++E5C3 00                                   DB 0                        ; NewB Tactics
  21++E5C4 00                                   DB 0                        ; AI Flags
  22++E5C5 00                                   DB $00                      ; chance of ECM module
  23++E5C6
  24++E5C6 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  24++E5CA 00 00
  25++E5CC 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  25++E5D0 00 00
  26++E5D2 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  26++E5D6 01 01
  27++E5D8 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  27++E5DC 01 01
  28++E5DE 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  28++E5E2 02 02
  29++E5E4 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  29++E5E8 02 02
  30++E5EA 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  30++E5EE 03 03
  31++E5F0              TestVectorVertSize      equ $  - TestVectorVertices
  32++E5F0 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  33++E5F4 1F 00 08 0C                          DB $1F,$00,$08,$0C
  34++E5F8 1F 00 10 14                          DB $1F,$00,$10,$14
  35++E5FC 1F 00 18 18                          DB $1F,$00,$18,$18
  36++E600              TestVectorEdgesSize     equ $  - TestVectorEdges
  37++E600              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  38++E600              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  39++E600 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  40++E604 1F 10 00 00                          DB $1F,$10,$00,$00
  41++E608 1F 00 00 10                          DB $1F,$00,$00,$10
  42++E60C 1F 00 00 10                          DB $1F,$00,$00,$10
  43++E610              TestVectorNormalsSize   equ $  - TestVectorNormals
  44++E610              TestVectorLen           equ $  - TestVector
  45++E610
# file closed: ./Data/ships/TestVector.asm
  91+ E610                                      include "Data/ships/Thargoid.asm"
# file opened: ./Data/ships/Thargoid.asm
   1++E610 00           Thargoid:	            DB $00                                                      ; Number of cargo canisters released when destroyed
   2++E611 49 26                                DW $2649                                                    ; Ship's targetable area LoHi
   3++E613 A3 E6                                DW ThargoidEdges                                            ; Edge Data
   4++E615 68                                   DB ThargoidEdgesSize                                        ; Size of Edge Data
   5++E616 3C                                   DB $3C                                                      ; Gun Vertex Byte offset
   6++E617 26                                   DB $26                                                      ; Explosion Count
   7++E618 14                                   DB ThargoidVertSize /6                                      ; Vertex Count /6
   8++E619 78                                   DB ThargoidVertSize                                         ; Vertex Count
   9++E61A 1A                                   DB ThargoidEdgesCnt                                         ; Edges Count
  10++E61B F4 01                                DW $01F4                                                    ; Bounty LoHi
  11++E61D 28                                   DB ThargoidNormalsSize                                      ; Face (Normal) Count
  12++E61E 37                                   DB $37                                                      ; Range when it turns to a dot
  13++E61F F0                                   DB $F0                                                      ; Energy Max
  14++E620 27                                   DB $27                                                      ; Speed Max
  15++E621 0B E7                                DW ThargoidNormals                                          ; Normals
  16++E623 02                                   DB $02                                                      ; Q scaling
  17++E624 16                                   DB $16                                                      ; Laser power and Nbr Missiles
  18++E625 2B E6                                DW ThargoidVertices                                         ; Verticles Address
  19++E627 00                                   DB 0                                                        ; Ship Type
  20++E628 00                                   DB 0                                                        ; NewB Tactics
  21++E629 FC                                   DB ShipCanAnger | ShipFighterBaySize  | ShipFighterThargon  ; AI Flags
  22++E62A FF                                   DB $FF                                                      ; chance of ECM module
  23++E62B
  24++E62B 20 30 30 5F  ThargoidVertices:	    DB $20, $30, $30, $5F, $40, $88 ; 01
  24++E62F 40 88
  25++E631 20 44 00 5F                          DB $20, $44, $00, $5F, $10, $44 ; 02
  25++E635 10 44
  26++E637 20 30 30 7F                          DB $20, $30, $30, $7F, $21, $44 ; 03
  26++E63B 21 44
  27++E63D 20 00 44 3F                          DB $20, $00, $44, $3F, $32, $44 ; 04
  27++E641 32 44
  28++E643 20 30 30 3F                          DB $20, $30, $30, $3F, $43, $55 ; 05
  28++E647 43 55
  29++E649 20 44 00 1F                          DB $20, $44, $00, $1F, $54, $66 ; 06
  29++E64D 54 66
  30++E64F 20 30 30 1F                          DB $20, $30, $30, $1F, $64, $77 ; 07
  30++E653 64 77
  31++E655 20 00 44 1F                          DB $20, $00, $44, $1F, $74, $88 ; 08
  31++E659 74 88
  32++E65B 18 74 74 DF                          DB $18, $74, $74, $DF, $80, $99 ; 09
  32++E65F 80 99
  33++E661 18 A4 00 DF                          DB $18, $A4, $00, $DF, $10, $99 ; 10
  33++E665 10 99
  34++E667 18 74 74 FF                          DB $18, $74, $74, $FF, $21, $99 ; 11
  34++E66B 21 99
  35++E66D 18 00 A4 BF                          DB $18, $00, $A4, $BF, $32, $99 ; 12
  35++E671 32 99
  36++E673 18 74 74 BF                          DB $18, $74, $74, $BF, $53, $99 ; 13
  36++E677 53 99
  37++E679 18 A4 00 9F                          DB $18, $A4, $00, $9F, $65, $99 ; 14
  37++E67D 65 99
  38++E67F 18 74 74 9F                          DB $18, $74, $74, $9F, $76, $99 ; 15
  38++E683 76 99
  39++E685 18 00 A4 9F                          DB $18, $00, $A4, $9F, $87, $99 ; 16
  39++E689 87 99
  40++E68B 18 40 50 9E                          DB $18, $40, $50, $9E, $99, $99 ; 17
  40++E68F 99 99
  41++E691 18 40 50 BE                          DB $18, $40, $50, $BE, $99, $99 ; 18
  41++E695 99 99
  42++E697 18 40 50 FE                          DB $18, $40, $50, $FE, $99, $99 ; 19
  42++E69B 99 99
  43++E69D 18 40 50 DE                          DB $18, $40, $50, $DE, $99, $99 ; 20
  43++E6A1 99 99
  44++E6A3
  45++E6A3              ThargoidVertSize: equ $ - ThargoidVertices
  46++E6A3
  47++E6A3
  48++E6A3
  49++E6A3 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C           ;01
  50++E6A7 1F 40 00 04                  DB $1F, $40, $00, $04           ;02
  51++E6AB 1F 41 04 08                  DB $1F, $41, $04, $08           ;03
  52++E6AF 1F 42 08 0C                  DB $1F, $42, $08, $0C           ;04
  53++E6B3 1F 43 0C 10                  DB $1F, $43, $0C, $10           ;05
  54++E6B7 1F 54 10 14                  DB $1F, $54, $10, $14           ;06
  55++E6BB 1F 64 14 18                  DB $1F, $64, $14, $18           ;07
  56++E6BF 1F 74 18 1C                  DB $1F, $74, $18, $1C           ;08
  57++E6C3 1F 80 00 20                  DB $1F, $80, $00, $20           ;09
  58++E6C7 1F 10 04 24                  DB $1F, $10, $04, $24           ;10
  59++E6CB 1F 21 08 28                  DB $1F, $21, $08, $28           ;11
  60++E6CF 1F 32 0C 2C                  DB $1F, $32, $0C, $2C           ;12
  61++E6D3 1F 53 10 30                  DB $1F, $53, $10, $30           ;13
  62++E6D7 1F 65 14 34                  DB $1F, $65, $14, $34           ;14
  63++E6DB 1F 76 18 38                  DB $1F, $76, $18, $38           ;15
  64++E6DF 1F 87 1C 3C                  DB $1F, $87, $1C, $3C           ;16
  65++E6E3 1F 98 20 3C                  DB $1F, $98, $20, $3C           ;17
  66++E6E7 1F 90 20 24                  DB $1F, $90, $20, $24           ;18
  67++E6EB 1F 91 24 28                  DB $1F, $91, $24, $28
  68++E6EF 1F 92 28 2C                  DB $1F, $92, $28, $2C
  69++E6F3 1F 93 2C 30                  DB $1F, $93, $2C, $30
  70++E6F7 1F 95 30 34                  DB $1F, $95, $30, $34
  71++E6FB 1F 96 34 38                  DB $1F, $96, $34, $38
  72++E6FF 1F 97 38 3C                  DB $1F, $97, $38, $3C
  73++E703 1E 99 40 44                  DB $1E, $99, $40, $44
  74++E707 1E 99 48 4C                  DB $1E, $99, $48, $4C
  75++E70B
  76++E70B              ThargoidEdgesSize: equ $ - ThargoidEdges
  77++E70B
  78++E70B              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  79++E70B
  80++E70B 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  81++E70F 7F 67 3C 19  	DB $7F, $67, $3C, $19
  82++E713 7F 67 19 3C  	DB $7F, $67, $19, $3C
  83++E717 3F 67 19 3C  	DB $3F, $67, $19, $3C
  84++E71B 1F 40 00 00  	DB $1F, $40, $00, $00
  85++E71F 3F 67 3C 19  	DB $3F, $67, $3C, $19
  86++E723 1F 67 3C 19  	DB $1F, $67, $3C, $19
  87++E727 1F 67 19 3C  	DB $1F, $67, $19, $3C
  88++E72B 5F 67 19 3C  	DB $5F, $67, $19, $3C
  89++E72F 9F 30 00 00  	DB $9F, $30, $00, $00
  90++E733
  91++E733
  92++E733              ThargoidNormalsSize: equ $ - ThargoidNormals
  93++E733              ThargoidLen: equ $ - Thargoid
  94++E733
# file closed: ./Data/ships/Thargoid.asm
  92+ E733                                      include "Data/ships/Thargon.asm"
# file opened: ./Data/ships/Thargon.asm
   1++E733 F0           Thargon:	            DB $F0                          ; Number of cargo canisters released when destroyed
   2++E734 40 06                                DW $0640                        ; Ship's targetable area LoHi
   3++E736 8A E7                                DW ThargonEdges                 ; Edge Data
   4++E738 3C                                   DB ThargonEdgesSize             ; Size of Edge Data
   5++E739 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E73A 12                                   DB $12                          ; Explosion Count
   7++E73B 0A                                   DB ThargonVertSize /6           ; Vertex Count /6
   8++E73C 3C                                   DB ThargonVertSize              ; Vertex Count
   9++E73D 0F                                   DB ThargonEdgesCnt              ; Edges Count
  10++E73E 32 00                                DW $0032                        ; Bounty LoHi
  11++E740 1C                                   DB ThargonNormalsSize           ; Face (Normal) Count
  12++E741 14                                   DB $14                          ; Range when it turns to a dot
  13++E742 14                                   DB $14                          ; Energy Max
  14++E743 1E                                   DB $1E                          ; Speed Max
  15++E744 C6 E7                                DW ThargonNormals               ; Normals
  16++E746 02                                   DB $02                          ; Q scaling
  17++E747 10                                   DB $10                          ; Laser power and Nbr Missiles
  18++E748 4E E7                                DW ThargonVertices              ; Verticles Address
  19++E74A 00                                   DB 0                            ; Ship Type
  20++E74B 00                                   DB 0                            ; NewB Tactics
  21++E74C 80                                   DB ShipCanAnger                 ; AI Flags
  22++E74D 00                                   DB $00                          ; chance of ECM module
  23++E74E
  24++E74E
  25++E74E 09 00 28 9F  ThargonVertices:	    DB $09, $00, $28, $9F, $01, $55
  25++E752 01 55
  26++E754 09 26 0C DF                          DB $09, $26, $0C, $DF, $01, $22
  26++E758 01 22
  27++E75A 09 18 20 FF                          DB $09, $18, $20, $FF, $02, $33
  27++E75E 02 33
  28++E760 09 18 20 BF                          DB $09, $18, $20, $BF, $03, $44
  28++E764 03 44
  29++E766 09 26 0C 9F                          DB $09, $26, $0C, $9F, $04, $55
  29++E76A 04 55
  30++E76C 09 00 08 3F                          DB $09, $00, $08, $3F, $15, $66
  30++E770 15 66
  31++E772 09 0A 0F 7F                          DB $09, $0A, $0F, $7F, $12, $66
  31++E776 12 66
  32++E778 09 06 1A 7F                          DB $09, $06, $1A, $7F, $23, $66
  32++E77C 23 66
  33++E77E 09 06 1A 3F                          DB $09, $06, $1A, $3F, $34, $66
  33++E782 34 66
  34++E784 09 0A 0F 3F                          DB $09, $0A, $0F, $3F, $45, $66
  34++E788 45 66
  35++E78A
  36++E78A              ThargonVertSize:        equ $ - ThargonVertices
  37++E78A
  38++E78A
  39++E78A 1F 10 00 04  ThargonEdges:	        DB $1F, $10, $00, $04
  40++E78E 1F 20 04 08                          DB $1F, $20, $04, $08
  41++E792 1F 30 08 0C                          DB $1F, $30, $08, $0C
  42++E796 1F 40 0C 10                          DB $1F, $40, $0C, $10
  43++E79A 1F 50 00 10                          DB $1F, $50, $00, $10
  44++E79E 1F 51 00 14                          DB $1F, $51, $00, $14
  45++E7A2 1F 21 04 18                          DB $1F, $21, $04, $18
  46++E7A6 1F 32 08 1C                          DB $1F, $32, $08, $1C
  47++E7AA 1F 43 0C 20                          DB $1F, $43, $0C, $20
  48++E7AE 1F 54 10 24                          DB $1F, $54, $10, $24
  49++E7B2 1F 61 14 18                          DB $1F, $61, $14, $18
  50++E7B6 1F 62 18 1C                          DB $1F, $62, $18, $1C
  51++E7BA 1F 63 1C 20                          DB $1F, $63, $1C, $20
  52++E7BE 1F 64 20 24                          DB $1F, $64, $20, $24
  53++E7C2 1F 65 24 14                          DB $1F, $65, $24, $14
  54++E7C6
  55++E7C6              ThargonEdgesSize:       equ $ - ThargonEdges
  56++E7C6
  57++E7C6
  58++E7C6              ThargonEdgesCnt:        equ ThargonEdgesSize/4
  59++E7C6
  60++E7C6
  61++E7C6 9F 24 00 00  ThargonNormals:	        DB $9F, $24, $00, $00
  62++E7CA 5F 14 05 07                          DB $5F, $14, $05, $07
  63++E7CE 7F 2E 2A 0E                          DB $7F, $2E, $2A, $0E
  64++E7D2 3F 24 00 68                          DB $3F, $24, $00, $68
  65++E7D6 3F 2E 2A 0E                          DB $3F, $2E, $2A, $0E
  66++E7DA 1F 14 05 07                          DB $1F, $14, $05, $07
  67++E7DE 1F 24 00 00                          DB $1F, $24, $00, $00
  68++E7E2
  69++E7E2
  70++E7E2              ThargonNormalsSize:     equ $ - ThargonNormals
  71++E7E2              ThargonLen:             equ $ - Thargon
  72++E7E2
# file closed: ./Data/ships/Thargon.asm
  93+ E7E2                                      include "Data/ships/TransportType10.asm"
# file opened: ./Data/ships/TransportType10.asm
   1++E7E2 00           TransportType10:	    DB $00                             ; Number of cargo canisters released when destroyed
   2++E7E3 C4 09                                DW $09C4                           ; Ship's targetable area LoHi
   3++E7E5 DB E8                                DW TransportType10Edges            ; Edge Data
   4++E7E7 B8                                   DB TransportType10EdgesSize        ; Size of Edge Data
   5++E7E8 30                                   DB $30                             ; Gun Vertex Byte offset
   6++E7E9 1A                                   DB $1A                             ; Explosion Count
   7++E7EA 25                                   DB TransportType10VertSize /6      ; Vertex Count /6
   8++E7EB DE                                   DB TransportType10VertSize         ; Vertex Count
   9++E7EC 2E                                   DB TransportType10EdgesCnt         ; Edges Count
  10++E7ED 00 00                                DW $0000                           ; Bounty LoHi
  11++E7EF 38                                   DB TransportType10NormalsSize      ; Face (Normal) Count
  12++E7F0 10                                   DB $10                             ; Range when it turns to a dot
  13++E7F1 20                                   DB $20                             ; Energy Max
  14++E7F2 0A                                   DB $0A                             ; Speed Max
  15++E7F3 93 E9                                DW TransportType10Normals          ; Normals
  16++E7F5 02                                   DB $02                             ; Q scaling
  17++E7F6 00                                   DB $00                             ; Laser power and Nbr Missiles
  18++E7F7 FD E7                                DW TransportType10Vertices         ; Verticles Address
  19++E7F9 00                                   DB ShipTypeNormal                  ; Ship Type
  20++E7FA 00                                   DB 0                               ; NewB Tactics
  21++E7FB 00                                   DB 0                               ; AI Flags
  22++E7FC FF                                   DB $FF                             ; chance of ECM module
  23++E7FD
  24++E7FD 00 0A 1A 3F  TransportType10Vertices:DB $00, $0A, $1A, $3F, $06, $77     ;01
  24++E801 06 77
  25++E803 19 04 1A BF                          DB $19, $04, $1A, $BF, $01, $77     ;02
  25++E807 01 77
  26++E809 1C 03 1A FF                          DB $1C, $03, $1A, $FF, $01, $22     ;03
  26++E80D 01 22
  27++E80F 19 08 1A FF                          DB $19, $08, $1A, $FF, $02, $33     ;04
  27++E813 02 33
  28++E815 1A 08 1A 7F                          DB $1A, $08, $1A, $7F, $03, $44     ;05
  28++E819 03 44
  29++E81B 1D 03 1A 7F                          DB $1D, $03, $1A, $7F, $04, $55     ;06
  29++E81F 04 55
  30++E821 1A 04 1A 3F                          DB $1A, $04, $1A, $3F, $05, $66     ;07
  30++E825 05 66
  31++E827 00 06 0C 13                          DB $00, $06, $0C, $13, $FF, $FF     ;08
  31++E82B FF FF
  32++E82D 1E 01 0C DF                          DB $1E, $01, $0C, $DF, $17, $89     ;09
  32++E831 17 89
  33++E833 21 08 0C DF                          DB $21, $08, $0C, $DF, $12, $39     ;10
  33++E837 12 39
  34++E839 21 08 0C 5F                          DB $21, $08, $0C, $5F, $34, $5A     ;11
  34++E83D 34 5A
  35++E83F 1E 01 0C 5F                          DB $1E, $01, $0C, $5F, $56, $AB     ;12
  35++E843 56 AB
  36++E845 0B 02 1E DF                          DB $0B, $02, $1E, $DF, $89, $CD     ;13
  36++E849 89 CD
  37++E84B 0D 08 1E DF                          DB $0D, $08, $1E, $DF, $39, $DD     ;14
  37++E84F 39 DD
  38++E851 0E 08 1E 5F                          DB $0E, $08, $1E, $5F, $3A, $DD     ;15
  38++E855 3A DD
  39++E857 0B 02 1E 5F                          DB $0B, $02, $1E, $5F, $AB, $CD     ;16
  39++E85B AB CD
  40++E85D 05 06 02 87                          DB $05, $06, $02, $87, $77, $77     ;17
  40++E861 77 77
  41++E863 12 03 02 87                          DB $12, $03, $02, $87, $77, $77     ;18
  41++E867 77 77
  42++E869 05 07 07 A7                          DB $05, $07, $07, $A7, $77, $77     ;19
  42++E86D 77 77
  43++E86F 12 04 07 A7                          DB $12, $04, $07, $A7, $77, $77     ;20
  43++E873 77 77
  44++E875 0B 06 0E A7                          DB $0B, $06, $0E, $A7, $77, $77     ;21
  44++E879 77 77
  45++E87B 0B 05 07 A7                          DB $0B, $05, $07, $A7, $77, $77     ;22
  45++E87F 77 77
  46++E881 05 07 0E 27                          DB $05, $07, $0E, $27, $66, $66     ;23
  46++E885 66 66
  47++E887 12 04 0E 27                          DB $12, $04, $0E, $27, $66, $66     ;24
  47++E88B 66 66
  48++E88D 0B 05 07 27                          DB $0B, $05, $07, $27, $66, $66     ;25
  48++E891 66 66
  49++E893 05 06 03 27                          DB $05, $06, $03, $27, $66, $66     ;26
  49++E897 66 66
  50++E899 12 03 03 27                          DB $12, $03, $03, $27, $66, $66     ;27
  50++E89D 66 66
  51++E89F 0B 04 08 07                          DB $0B, $04, $08, $07, $66, $66     ;28
  51++E8A3 66 66
  52++E8A5 0B 05 03 27                          DB $0B, $05, $03, $27, $66, $66     ;29
  52++E8A9 66 66
  53++E8AB 10 08 0D E6                          DB $10, $08, $0D, $E6, $33, $33     ;30
  53++E8AF 33 33
  54++E8B1 10 08 10 C6                          DB $10, $08, $10, $C6, $33, $33     ;31
  54++E8B5 33 33
  55++E8B7 11 08 0D 66                          DB $11, $08, $0D, $66, $33, $33     ;32
  55++E8BB 33 33
  56++E8BD 11 08 10 46                          DB $11, $08, $10, $46, $33, $33     ;33
  56++E8C1 33 33
  57++E8C3 0D 03 1A E8                          DB $0D, $03, $1A, $E8, $00, $00     ;34
  57++E8C7 00 00
  58++E8C9 0D 03 1A 68                          DB $0D, $03, $1A, $68, $00, $00     ;35
  58++E8CD 00 00
  59++E8CF 09 03 1A 25                          DB $09, $03, $1A, $25, $00, $00     ;36
  59++E8D3 00 00
  60++E8D5 08 03 1A A5                          DB $08, $03, $1A, $A5, $00, $00     ;37
  60++E8D9 00 00
  61++E8DB
  62++E8DB              TransportType10VertSize: equ $ - TransportType10Vertices
  63++E8DB
  64++E8DB
  65++E8DB
  66++E8DB 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04               ;01
  67++E8DF 1F 01 04 08                          DB $1F, $01, $04, $08               ;02
  68++E8E3 1F 02 08 0C                          DB $1F, $02, $08, $0C               ;03
  69++E8E7 1F 03 0C 10                          DB $1F, $03, $0C, $10               ;04
  70++E8EB 1F 04 10 14                          DB $1F, $04, $10, $14               ;05
  71++E8EF 1F 05 14 18                          DB $1F, $05, $14, $18               ;06
  72++E8F3 1F 06 00 18                          DB $1F, $06, $00, $18               ;07
  73++E8F7 10 67 00 1C                          DB $10, $67, $00, $1C               ;08
  74++E8FB 1F 17 04 20                          DB $1F, $17, $04, $20               ;09
  75++E8FF 0B 12 08 24                          DB $0B, $12, $08, $24               ;10
  76++E903 1F 23 0C 24                          DB $1F, $23, $0C, $24               ;11
  77++E907 1F 34 10 28                          DB $1F, $34, $10, $28               ;12
  78++E90B 0B 45 14 28                          DB $0B, $45, $14, $28               ;13
  79++E90F 1F 56 18 2C                          DB $1F, $56, $18, $2C               ;14
  80++E913 11 78 1C 20                          DB $11, $78, $1C, $20               ;15
  81++E917 11 19 20 24                          DB $11, $19, $20, $24               ;16
  82++E91B 11 5A 28 2C                          DB $11, $5A, $28, $2C               ;17
  83++E91F 11 6B 1C 2C                          DB $11, $6B, $1C, $2C               ;18
  84++E923 13 BC 1C 3C                          DB $13, $BC, $1C, $3C               ;19
  85++E927 13 8C 1C 30                          DB $13, $8C, $1C, $30               ;20
  86++E92B 10 89 20 30                          DB $10, $89, $20, $30               ;21
  87++E92F 1F 39 24 34                          DB $1F, $39, $24, $34               ;22
  88++E933 1F 3A 28 38                          DB $1F, $3A, $28, $38               ;23
  89++E937 10 AB 2C 3C                          DB $10, $AB, $2C, $3C               ;24
  90++E93B 1F 9D 30 34                          DB $1F, $9D, $30, $34               ;25
  91++E93F 1F 3D 34 38                          DB $1F, $3D, $34, $38               ;26
  92++E943 1F AD 38 3C                          DB $1F, $AD, $38, $3C               ;27
  93++E947 1F CD 30 3C                          DB $1F, $CD, $30, $3C               ;28
  94++E94B 07 77 40 44                          DB $07, $77, $40, $44               ;29
  95++E94F 07 77 48 4C                          DB $07, $77, $48, $4C               ;30
  96++E953 07 77 4C 50                          DB $07, $77, $4C, $50               ;31
  97++E957 07 77 48 50                          DB $07, $77, $48, $50               ;32
  98++E95B 07 77 50 54                          DB $07, $77, $50, $54               ;33
  99++E95F 07 66 58 5C                          DB $07, $66, $58, $5C               ;34
 100++E963 07 66 5C 60                          DB $07, $66, $5C, $60               ;35
 101++E967 07 66 60 58                          DB $07, $66, $60, $58               ;36
 102++E96B 07 66 64 68                          DB $07, $66, $64, $68               ;37
 103++E96F 07 66 68 6C                          DB $07, $66, $68, $6C               ;38
 104++E973 07 66 64 6C                          DB $07, $66, $64, $6C               ;39
 105++E977 07 66 6C 70                          DB $07, $66, $6C, $70               ;40
 106++E97B 06 33 74 78                          DB $06, $33, $74, $78               ;41
 107++E97F 06 33 7C 80                          DB $06, $33, $7C, $80               ;42
 108++E983 08 00 84 88                          DB $08, $00, $84, $88               ;43
 109++E987 05 00 88 8C                          DB $05, $00, $88, $8C               ;44
 110++E98B 05 00 8C 90                          DB $05, $00, $8C, $90               ;45
 111++E98F 05 00 90 84                          DB $05, $00, $90, $84               ;46
 112++E993
 113++E993              TransportType10EdgesSize: equ $ - TransportType10Edges
 114++E993
 115++E993
 116++E993              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 117++E993
 118++E993
 119++E993 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67               ;01
 120++E997 BF 6F 30 07                          DB $BF, $6F, $30, $07               ;02
 121++E99B FF 69 3F 15                          DB $FF, $69, $3F, $15               ;03
 122++E99F 5F 00 22 00                          DB $5F, $00, $22, $00               ;04
 123++E9A3 7F 69 3F 15                          DB $7F, $69, $3F, $15               ;05
 124++E9A7 3F 6F 30 07                          DB $3F, $6F, $30, $07               ;06
 125++E9AB 1F 08 20 03                          DB $1F, $08, $20, $03               ;07
 126++E9AF 9F 08 20 03                          DB $9F, $08, $20, $03               ;08
 127++E9B3 93 08 22 0B                          DB $93, $08, $22, $0B               ;09
 128++E9B7 9F 4B 20 4F                          DB $9F, $4B, $20, $4F               ;10
 129++E9BB 1F 4B 20 4F                          DB $1F, $4B, $20, $4F               ;11
 130++E9BF 13 08 22 0B                          DB $13, $08, $22, $0B               ;12
 131++E9C3 1F 00 26 11                          DB $1F, $00, $26, $11               ;13
 132++E9C7 1F 00 00 79                          DB $1F, $00, $00, $79               ;14
 133++E9CB
 134++E9CB
 135++E9CB              TransportType10NormalsSize: equ $ - TransportType10Normals
 136++E9CB              TransportType10Len: equ $ - TransportType10
 137++E9CB
# file closed: ./Data/ships/TransportType10.asm
  94+ E9CB                                      include "Data/ships/Viper.asm"
# file opened: ./Data/ships/Viper.asm
   1++E9CB 00           Viper:                  DB $00                         ; Number of cargo canisters released when destroyed
   2++E9CC F9 15                                DW $15F9                       ; Ship's targetable area LoHi
   3++E9CE 40 EA                                DW ViperEdges                  ; Edge Data
   4++E9D0 50                                   DB ViperEdgesSize              ; Size of Edge Data
   5++E9D1 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E9D2 2A                                   DB $2A                         ; Explosion Count
   7++E9D3 0F                                   DB ViperVertSize /6            ; Vertex Count /6
   8++E9D4 5A                                   DB ViperVertSize               ; Vertex Count
   9++E9D5 14                                   DB ViperEdgesCnt               ; Edges Count
  10++E9D6 00 00                                DW $0000                       ; Bounty LoHi
  11++E9D8 1C                                   DB ViperNormalsSize            ; Face (Normal) Count
  12++E9D9 17                                   DB $17 ;$17 before                        ; Range when it turns to a dot
  13++E9DA 64                                   DB $64                         ; Energy Max
  14++E9DB 20                                   DB $20                         ; Speed Max
  15++E9DC 90 EA                                DW ViperNormals                ; Normals
  16++E9DE 01                                   DB $01                         ; Q scaling
  17++E9DF 11                                   DB $11                         ; Laser power and Nbr Missiles
  18++E9E0 E6 E9                                DW ViperVertices               ; Verticles Address
  19++E9E2 00                                   DB ShipTypeNormal              ; Ship Type
  20++E9E3 00                                   DB 0                           ; NewB Tactics
  21++E9E4 80                                   DB ShipCanAnger                ; AI Flags
  22++E9E5 FF                                   DB $FF                         ; chance of ECM module
  23++E9E6
  24++E9E6 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  24++E9EA 21 43
  25++E9EC 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  25++E9F0 10 22
  26++E9F2 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  26++E9F6 43 55
  27++E9F8 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  27++E9FC 42 66
  28++E9FE 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  28++EA02 31 66
  29++EA04 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  29++EA08 54 66
  30++EA0A 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  30++EA0E 35 66
  31++EA10 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  31++EA14 20 66
  32++EA16 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  32++EA1A 10 66
  33++EA1C 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  33++EA20 66 66
  34++EA22 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  34++EA26 66 66
  35++EA28 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  35++EA2C 66 66
  36++EA2E 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  36++EA32 66 66
  37++EA34 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  37++EA38 66 66
  38++EA3A 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  38++EA3E 66 66
  39++EA40              ViperVertSize           equ $  - ViperVertices
  40++EA40 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  40++EA44 1E 21 00 04
  41++EA48 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  41++EA4C 1F 31 00 10
  42++EA50 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  42++EA54 1E 10 04 20
  43++EA58 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  43++EA5C 1E 53 08 18
  44++EA60 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  44++EA64 1E 65 14 18
  45++EA68 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  45++EA6C 1E 63 10 18
  46++EA70 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  46++EA74 1E 46 0C 14
  47++EA78 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  47++EA7C 12 66 24 34
  48++EA80 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  48++EA84 12 66 28 38
  49++EA88 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  49++EA8C 10 66 30 34
  50++EA90              ViperEdgesSize          equ $  - ViperEdges
  51++EA90              ViperEdgesCnt           equ ViperEdgesSize/4
  52++EA90 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  52++EA94 9F 16 21 0B
  53++EA98 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  53++EA9C DF 16 21 0B
  54++EAA0 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  54++EAA4 5F 00 20 00
  55++EAA8 3F 00 00 30                          DB $3F, $00, $00, $30
  56++EAAC              ViperNormalsSize        equ $  - ViperNormals
  57++EAAC              ViperLen                equ $  - Viper
  58++EAAC
# file closed: ./Data/ships/Viper.asm
  95+ EAAC                                      include "Data/ships/Worm.asm"
# file opened: ./Data/ships/Worm.asm
   1++EAAC 00           Worm:	                DB $00                      ; Number of cargo canisters released when destroyed
   2++EAAD 49 26                                DW $2649                    ; Ship's targetable area LoHi
   3++EAAF 03 EB                                DW WormEdges                ; Edge Data
   4++EAB1 40                                   DB WormEdgesSize            ; Size of Edge Data
   5++EAB2 00                                   DB $00                      ; Gun Vertex Byte offset
   6++EAB3 12                                   DB $12                      ; Explosion Count
   7++EAB4 0A                                   DB WormVertSize /6          ; Vertex Count /6
   8++EAB5 3C                                   DB WormVertSize             ; Vertex Count
   9++EAB6 10                                   DB WormEdgesCnt             ; Edges Count
  10++EAB7 00 00                                DW $0000                    ; Bounty LoHi
  11++EAB9 20                                   DB WormNormalsSize          ; Face (Normal) Count
  12++EABA 13                                   DB $13                      ; Range when it turns to a dot
  13++EABB 1E                                   DB $1E                      ; Energy Max
  14++EABC 17                                   DB $17                      ; Speed Max
  15++EABD 43 EB                                DW WormNormals              ; Normals
  16++EABF 03                                   DB $03                      ; Q scaling
  17++EAC0 30                                   DB $30                      ; Laser power and Nbr Missiles
  18++EAC1 C7 EA                                DW WormVertices             ; Verticles Address
  19++EAC3 00                                   DB ShipTypeNormal           ; Ship Type
  20++EAC4 00                                   DB 0                        ; NewB Tactics
  21++EAC5 80                                   DB ShipCanAnger             ; AI Flags
  22++EAC6 B0                                   DB $B0                      ; chance of ECM module
  23++EAC7 0A 0A 23 5F  WormVertices:	        DB $0A, $0A, $23, $5F, $02, $77
  23++EACB 02 77
  24++EACD 0A 0A 23 DF                          DB $0A, $0A, $23, $DF, $03, $77
  24++EAD1 03 77
  25++EAD3 05 06 0F 1F                          DB $05, $06, $0F, $1F, $01, $24
  25++EAD7 01 24
  26++EAD9 05 06 0F 9F                          DB $05, $06, $0F, $9F, $01, $35
  26++EADD 01 35
  27++EADF 0F 0A 19 5F                          DB $0F, $0A, $19, $5F, $24, $77
  27++EAE3 24 77
  28++EAE5 0F 0A 19 DF                          DB $0F, $0A, $19, $DF, $35, $77
  28++EAE9 35 77
  29++EAEB 1A 0A 19 7F                          DB $1A, $0A, $19, $7F, $46, $77
  29++EAEF 46 77
  30++EAF1 1A 0A 19 FF                          DB $1A, $0A, $19, $FF, $56, $77
  30++EAF5 56 77
  31++EAF7 08 0E 19 3F                          DB $08, $0E, $19, $3F, $14, $66
  31++EAFB 14 66
  32++EAFD 08 0E 19 BF                          DB $08, $0E, $19, $BF, $15, $66
  32++EB01 15 66
  33++EB03
  34++EB03              WormVertSize: equ $ - WormVertices
  35++EB03
  36++EB03
  37++EB03 1F 07 00 04  WormEdges:	            DB $1F, $07, $00, $04
  38++EB07 1F 37 04 14                          DB $1F, $37, $04, $14
  39++EB0B 1F 57 14 1C                          DB $1F, $57, $14, $1C
  40++EB0F 1F 67 1C 18                          DB $1F, $67, $1C, $18
  41++EB13 1F 47 18 10                          DB $1F, $47, $18, $10
  42++EB17 1F 27 10 00                          DB $1F, $27, $10, $00
  43++EB1B 1F 02 00 08                          DB $1F, $02, $00, $08
  44++EB1F 1F 03 04 0C                          DB $1F, $03, $04, $0C
  45++EB23 1F 24 10 08                          DB $1F, $24, $10, $08
  46++EB27 1F 35 14 0C                          DB $1F, $35, $14, $0C
  47++EB2B 1F 14 08 20                          DB $1F, $14, $08, $20
  48++EB2F 1F 46 20 18                          DB $1F, $46, $20, $18
  49++EB33 1F 15 0C 24                          DB $1F, $15, $0C, $24
  50++EB37 1F 56 24 1C                          DB $1F, $56, $24, $1C
  51++EB3B 1F 01 08 0C                          DB $1F, $01, $08, $0C
  52++EB3F 1F 16 20 24                          DB $1F, $16, $20, $24
  53++EB43
  54++EB43              WormEdgesSize: equ $ - WormEdges
  55++EB43
  56++EB43
  57++EB43              WormEdgesCnt: equ WormEdgesSize/4
  58++EB43
  59++EB43
  60++EB43 1F 00 58 46  WormNormals:	        DB $1F, $00, $58, $46
  61++EB47 1F 00 45 0E                          DB $1F, $00, $45, $0E
  62++EB4B 1F 46 42 23                          DB $1F, $46, $42, $23
  63++EB4F 9F 46 42 23                          DB $9F, $46, $42, $23
  64++EB53 1F 40 31 0E                          DB $1F, $40, $31, $0E
  65++EB57 9F 40 31 0E                          DB $9F, $40, $31, $0E
  66++EB5B 3F 00 00 C8                          DB $3F, $00, $00, $C8
  67++EB5F 5F 00 50 00                          DB $5F, $00, $50, $00
  68++EB63
  69++EB63
  70++EB63              WormNormalsSize: equ $ - WormNormals
  71++EB63              WormLen: equ $ - Worm
  72++EB63
# file closed: ./Data/ships/Worm.asm
  96+ EB63                                      include "Data/ships/Rattler.asm"
# file opened: ./Data/ships/Rattler.asm
   1++EB63 02           Rattler:	            DB $02                       ; Number of cargo canisters released when destroyed
   2++EB64 70 17                                DW $1770                     ; Ship's targetable area LoHi
   3++EB66 D8 EB                                DW RattlerEdges              ; Edge Data
   4++EB68 68                                   DB RattlerEdgesSize          ; Size of Edge Data
   5++EB69 00                                   DB $00                       ; Gun Vertex Byte offset
   6++EB6A 2A                                   DB $2A                       ; Explosion Count
   7++EB6B 0F                                   DB RattlerVertSize /6        ; Vertex Count /6
   8++EB6C 5A                                   DB RattlerVertSize           ; Vertex Count
   9++EB6D 1A                                   DB RattlerEdgesCnt           ; Edges Count
  10++EB6E 96 00                                DW $0096                     ; Bounty LoHi
  11++EB70 34                                   DB RattlerNormalsSize        ; Face (Normal) Count
  12++EB71 0A                                   DB $0A                       ; Range when it turns to a dot
  13++EB72 71                                   DB $71                       ; Energy Max
  14++EB73 1F                                   DB $1F                       ; Speed Max
  15++EB74 40 EC                                DW RattlerNormals            ; Normals
  16++EB76 01                                   DB $01                       ; Q scaling
  17++EB77 22                                   DB $20 | ShipMissiles2       ; Laser power and Nbr Missiles
  18++EB78 7E EB                                DW RattlerVertices           ; Verticles Address
  19++EB7A 00                                   DB ShipTypeNormal            ; Ship Type
  20++EB7B 00                                   DB 0                         ; NewB Tactics
  21++EB7C 80                                   DB ShipCanAnger              ; AI Flags
  22++EB7D 90                                   DB $90                       ; chance of ECM module
  23++EB7E
  24++EB7E
  25++EB7E 00 00 3C 1F  RattlerVertices:	    DB $00, $00, $3C, $1F, $89, $23
  25++EB82 89 23
  26++EB84 28 00 28 1F                          DB $28, $00, $28, $1F, $9A, $34
  26++EB88 9A 34
  27++EB8A 28 00 28 9F                          DB $28, $00, $28, $9F, $78, $12
  27++EB8E 78 12
  28++EB90 3C 00 00 1F                          DB $3C, $00, $00, $1F, $AB, $45
  28++EB94 AB 45
  29++EB96 3C 00 00 9F                          DB $3C, $00, $00, $9F, $67, $01
  29++EB9A 67 01
  30++EB9C 46 00 28 3F                          DB $46, $00, $28, $3F, $CC, $5B
  30++EBA0 CC 5B
  31++EBA2 46 00 28 BF                          DB $46, $00, $28, $BF, $CC, $06
  31++EBA6 CC 06
  32++EBA8 00 14 28 3F                          DB $00, $14, $28, $3F, $FF, $FF
  32++EBAC FF FF
  33++EBAE 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  33++EBB2 FF FF
  34++EBB4 0A 06 28 AA                          DB $0A, $06, $28, $AA, $CC, $CC
  34++EBB8 CC CC
  35++EBBA 0A 06 28 EA                          DB $0A, $06, $28, $EA, $CC, $CC
  35++EBBE CC CC
  36++EBC0 14 00 28 AA                          DB $14, $00, $28, $AA, $CC, $CC
  36++EBC4 CC CC
  37++EBC6 0A 06 28 2A                          DB $0A, $06, $28, $2A, $CC, $CC
  37++EBCA CC CC
  38++EBCC 0A 06 28 6A                          DB $0A, $06, $28, $6A, $CC, $CC
  38++EBD0 CC CC
  39++EBD2 14 00 28 2A                          DB $14, $00, $28, $2A, $CC, $CC
  39++EBD6 CC CC
  40++EBD8
  41++EBD8              RattlerVertSize: equ $ - RattlerVertices
  42++EBD8
  43++EBD8
  44++EBD8 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  45++EBDC 1F 17 08 10  	DB $1F, $17, $08, $10
  46++EBE0 1F 28 00 08  	DB $1F, $28, $00, $08
  47++EBE4 1F 39 00 04  	DB $1F, $39, $00, $04
  48++EBE8 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  49++EBEC 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  50++EBF0 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  51++EBF4 1F 6C 18 20  	DB $1F, $6C, $18, $20
  52++EBF8 1F 01 10 1C  	DB $1F, $01, $10, $1C
  53++EBFC 1F 67 10 20  	DB $1F, $67, $10, $20
  54++EC00 1F 12 08 1C  	DB $1F, $12, $08, $1C
  55++EC04 1F 78 08 20  	DB $1F, $78, $08, $20
  56++EC08 1F 23 00 1C  	DB $1F, $23, $00, $1C
  57++EC0C 1F 89 00 20  	DB $1F, $89, $00, $20
  58++EC10 1F 34 04 1C  	DB $1F, $34, $04, $1C
  59++EC14 1F 9A 04 20  	DB $1F, $9A, $04, $20
  60++EC18 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  61++EC1C 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  62++EC20 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  63++EC24 1F BC 14 20  	DB $1F, $BC, $14, $20
  64++EC28 0A CC 24 28  	DB $0A, $CC, $24, $28
  65++EC2C 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  66++EC30 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  67++EC34 0A CC 30 34  	DB $0A, $CC, $30, $34
  68++EC38 0A CC 34 38  	DB $0A, $CC, $34, $38
  69++EC3C 0A CC 38 30  	DB $0A, $CC, $38, $30
  70++EC40
  71++EC40              RattlerEdgesSize: equ $ - RattlerEdges
  72++EC40
  73++EC40
  74++EC40              RattlerEdgesCnt: equ RattlerEdgesSize/4
  75++EC40
  76++EC40
  77++EC40 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  78++EC44 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  79++EC48 9F 09 5D 12  	DB $9F, $09, $5D, $12
  80++EC4C 1F 09 5D 12  	DB $1F, $09, $5D, $12
  81++EC50 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  82++EC54 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  83++EC58 DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  84++EC5C DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  85++EC60 DF 09 5D 12  	DB $DF, $09, $5D, $12
  86++EC64 5F 09 5D 12  	DB $5F, $09, $5D, $12
  87++EC68 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  88++EC6C 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  89++EC70 3F 00 00 60  	DB $3F, $00, $00, $60
  90++EC74
  91++EC74              RattlerNormalsSize: equ $ - RattlerNormals
  92++EC74              RattlerLen: equ $ - Rattler
  93++EC74
# file closed: ./Data/ships/Rattler.asm
  97+ EC74
# file closed: ./Data/ShipModelMetaData3.asm
 890  EC74              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
 891  EC74              ;;Privisioned for more models     SLOT    ShipModelsAddr
 892  EC74              ;;Privisioned for more models     PAGE    BankShipModels4
 893  EC74              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
 894  EC74                  DISPLAY "Bank ",BankShipModels3," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels3"
 895  EC74              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
 896  EC74                  SLOT    SpritemembankAddr
 897  EC74                  PAGE    BankSPRITE
 898  EC74              	ORG     SpritemembankAddr, BankSPRITE
 899  E000                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0                            ; 00
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1     ; 01
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2    ; 02
   5+ E000                                                                                   ;
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1    ; 03
   7+ E000              ;galactic_hyper_sprite1				equ galactic_hyper_sprite+1      ;
   8+ E000              ;galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1     ;
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite+1      ; 04
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1        ; 05
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1       ; 06
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1       ; 07
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1         ; 08
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2        ; 09
  17+ E000
  18+ E000              reticlule_sprite1                   equ	local_hyper_sprite2+1        ; 10
  19+ E000              reticlule_sprite2                   equ	reticlule_sprite1+1          ; 11
  20+ E000              reticlule_sprite3                   equ	reticlule_sprite2+1          ; 12
  21+ E000              reticlule_sprite4                   equ reticlule_sprite3+1          ; 13
  22+ E000
  23+ E000              laser_sprite1                       equ	reticlule_sprite4+1          ; 14
  24+ E000              laser_sprite2                       equ	laser_sprite1    +1          ; 15
  25+ E000              laser_sprite3                       equ	laser_sprite2    +1          ; 16
  26+ E000              laser_sprite4                       equ laser_sprite3    +1          ; 17
  27+ E000              laser_sprite5                       equ	laser_sprite4    +1          ; 18
  28+ E000              laser_sprite6                       equ	laser_sprite5    +1          ; 19
  29+ E000              laser_sprite7                       equ	laser_sprite6    +1          ; 20
  30+ E000              laser_sprite8                       equ laser_sprite7    +1          ; 21
  31+ E000              laser_sprite9                       equ	laser_sprite8    +1          ; 22
  32+ E000              laser_sprite10                      equ	laser_sprite9    +1          ; 23
  33+ E000              laser_sprite11                      equ	laser_sprite10   +1          ; 24
  34+ E000              laser_sprite12                      equ laser_sprite11   +1          ; 25
  35+ E000              laser_sprite13                      equ	laser_sprite12   +1          ; 26
  36+ E000              laser_sprite14                      equ	laser_sprite13   +1          ; 27
  37+ E000              laser_sprite15                      equ	laser_sprite14   +1          ; 28
  38+ E000              laser_sprite16                      equ laser_sprite15   +1          ; 29
  39+ E000              compass_sun                         equ laser_sprite16   +1          ; 30
  40+ E000              compass_station                     equ compass_sun      +1          ; 31
  41+ E000              targetting_sprite1                  equ compass_station  +1          ; 32
  42+ E000              targetting_sprite2                  equ targetting_sprite1   +1      ; 33
  43+ E000              ECM_sprite                          equ targetting_sprite2   +1      ; 34
  44+ E000              missile_sprite1                     equ ECM_sprite       +1          ; 35
  45+ E000              missile_sprite2                     equ missile_sprite1  +1          ; 36
  46+ E000              missile_sprite3                     equ missile_sprite2  +1          ; 37
  47+ E000              missile_sprite4                     equ missile_sprite3  +1          ; 38
  48+ E000
  49+ E000              glactic_pattern_1					equ 0
  50+ E000              glactic_hyper_pattern_1             equ 2
  51+ E000              local_present_cursor                equ 4
  52+ E000              local_hyper_pattern                 equ 7
  53+ E000              reticule_pattern_1                  equ 10
  54+ E000              reticule_pattern_2                  equ 11
  55+ E000              laser_pattern_1                     equ 12
  56+ E000              laser_pattern_2                     equ 13
  57+ E000              laser_pattern_3                     equ 14
  58+ E000              laser_pattern_4                     equ 15
  59+ E000              laser_pattern_5                     equ 16
  60+ E000              targetting_pattern                  equ 23
  61+ E000              lock_pattern                        equ 24
  62+ E000              ecm_pattern                         equ 25
  63+ E000              missile_ready_pattern               equ 26
  64+ E000              missile_armed_pattern               equ 27
  65+ E000              missile_locked_pattern              equ 28
  66+ E000
  67+ E000              compass_sun_infront                 equ 17
  68+ E000              compass_sun_behind                  equ 18
  69+ E000              compass_station_infront             equ 19
  70+ E000              compass_station_behind              equ 20
  71+ E000              spritecursoroffset					equ 17
  72+ E000              spriteborderoffset                  equ 32
  73+ E000
  74+ E000              HideSprite:                 MACRO   spritenbr
  75+ E000 ~                                        nextreg		SPRITE_PORT_INDEX_REGISTER,spritenbr
  76+ E000 ~                                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
  77+ E000                                          ENDM
  78+ E000
  79+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  80+ E000              sprite_big:
  81+ E000 7A           .SetAnchor:	                ld		a,d                                 ; a = sprite nbr, bug fix?
  82+ E001 F5                                       push	af									; save id for next few
  83+ E002 D5                                       push	de
  84+ E003 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  85+ E006              ; write out X position bits 1 to 8
  86+ E006 79                                       ld		a,c
  87+ E007 21 11 00                                 ld      hl,spritecursoroffset
  88+ E00A ED 31                                    add		hl,a                                ; hl = full x position
  89+ E00C 7D                                       ld		a,l
  90+ E00D ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  91+ E010              ; write out Y position bits 1 to 8
  92+ E010 EB                                       ex		de,hl								; de = full x position
  93+ E011 78                                       ld		a,b
  94+ E012 21 11 00                                 ld      hl,spritecursoroffset
  95+ E015 ED 31                                    add		hl,a
  96+ E017 7D                                       ld		a,l                                 ; hl = full y position
  97+ E018 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  98+ E01B              ; write out MSB of X as its an anchor
  99+ E01B 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 100+ E01C ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 101+ E01F              ; write out sprite pattern
 102+ E01F D1                                       pop		de                                  ; de = pattern and sprite nbr
 103+ E020 7B                                       ld		a,e
 104+ E021 F6 C0                                    or		%11000000							;
 105+ E023 ED 92 38                                 nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 106+ E026              ; write out msb of y in h must be bit 0 only
 107+ E026 3E 00                                    ld		a,%00000000							; big unified composite
 108+ E028 B4                                       or		h									; MSB Y
 109+ E029 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 110+ E02C F1           .BigSprite1:                pop		af
 111+ E02D 3C                                       inc		a
 112+ E02E F5                                       push	af
 113+ E02F ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 114+ E032 3E 10                                    ld		a,16
 115+ E034 ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 116+ E037 AF                                       xor 	a
 117+ E038 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 118+ E03B ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 119+ E03E 3E C1                                    ld		a,%11000001							; relative and 4 bytes of data, pattern 1
 120+ E040 ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 121+ E043 3E 41                                    ld		a,%01000001							; big unified composite
 122+ E045 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 123+ E048 F1           .BigSprite2:                pop		af
 124+ E049 3C                                       inc		a
 125+ E04A ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 126+ E04D AF                                       xor		a
 127+ E04E ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 128+ E051 3E 10                                    ld		a,16
 129+ E053 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 130+ E056 AF                                       xor		a
 131+ E057 ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 132+ E05A 3E C2                                    ld		a,%11000010							; relative and 4 bytes of data, pattern 2
 133+ E05C ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 134+ E05F 3E 41                                    ld		a,%01000001							; big unified composite
 135+ E061 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 136+ E064 C9                                       ret
 137+ E065
 138+ E065              ; for a sinle sprite within 256x192 area
 139+ E065 7A           sprite_single:          ld		a,d                                 ; a = sprite nbr, bug fix?
 140+ E066 D5                                   push    de
 141+ E067 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 142+ E06A              ; write out X position bits 1 to 8
 143+ E06A 79                                   ld		a,c                                 ; a = column (c)
 144+ E06B 21 20 00                             ld      hl,spriteborderoffset
 145+ E06E ED 31                                add		hl,a                                ; hl = full x position
 146+ E070 EB                                   ex		de,hl								; de = full x position
 147+ E071 7B                                   ld		a,e
 148+ E072 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 149+ E075              ; write out Y position bits 1 to 8
 150+ E075 78                                   ld		a,b                                 ; a = row
 151+ E076 21 20 00                             ld      hl,spriteborderoffset
 152+ E079 ED 31                                add		hl,a
 153+ E07B 7D                                   ld		a,l                                 ; hl = full y position
 154+ E07C ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 155+ E07F              ; write out MSB of X as its an anchor
 156+ E07F 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 157+ E080 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 158+ E083              ; write out sprite pattern
 159+ E083 D1                                   pop     de
 160+ E084 7B                                   ld		a,e
 161+ E085 F6 80                                or		%10000000							;
 162+ E087 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 163+ E08A              ; write out extended attribute
 164+ E08A 3E 00                                ld      a,%00000000                         ; its a single sprite
 165+ E08C B4                                   or      h
 166+ E08D ED 92 39                             nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 167+ E090 C9                                   ret
 168+ E091              ; ">sprite_galactic_cursor BC = rowcol"
 169+ E091 16 00        sprite_galactic_cursor:     ld		d,galactic_cursor_sprite
 170+ E093 1E 00                                    ld		e,0
 171+ E095 78                                       ld		a,b
 172+ E096 C6 18                                    add		a,galactic_chart_y_offset
 173+ E098 47                                       ld		b,a
 174+ E099 CD 00 E0                                 call	sprite_big
 175+ E09C C9                                       ret
 176+ E09D
 177+ E09D              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 178+ E09D 78           sprite_galactic_hyper_cursor:ld		a,b
 179+ E09E C6 04                                    add		a,galactic_chart_hyper_offset
 180+ E0A0 47                                       ld		b,a
 181+ E0A1 16 04                                    ld		d,galactic_hyper_sprite
 182+ E0A3 1E 03                                    ld		e,3
 183+ E0A5 CD 65 E0                                 call	sprite_single ; sprite_big:
 184+ E0A8 C9                                       ret
 185+ E0A9
 186+ E0A9
 187+ E0A9              ; moves hyperspace cursor to target system x position
 188+ E0A9 3E 04        sprite_ghc_move:            ld		a,galactic_hyper_sprite
 189+ E0AB ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 190+ E0AE              ; write out X position bits 1 to 8
 191+ E0AE 79                                       ld		a,c
 192+ E0AF 21 1C 00                                 ld      hl,galactic_chart_hyper_x_offset
 193+ E0B2 ED 31                                    add		hl,a                                ; hl = full x position
 194+ E0B4 7D                                       ld		a,l
 195+ E0B5 ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 196+ E0B8              ; write out Y position bits 1 to 8
 197+ E0B8 EB                                       ex		de,hl								; de = full x position
 198+ E0B9 CB 38                                    srl		b			    					; row is row / 2
 199+ E0BB 78                                       ld      a,b
 200+ E0BC 21 34 00                                 ld      hl,galactic_chart_hyper_y_offset
 201+ E0BF ED 31                                    add		hl,a
 202+ E0C1 7D                                       ld		a,l                                 ; hl = full y position
 203+ E0C2 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 204+ E0C5              ; write out MSB of X as its an anchor
 205+ E0C5 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 206+ E0C6 ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 207+ E0C9              ; write out msb of y in h must be bit 0 only
 208+ E0C9 3E 00                                    ld		a,%00000000							; big unified composite
 209+ E0CB B2                                       or		d									; MSB Y
 210+ E0CC ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 211+ E0CF C9                                       ret
 212+ E0D0
 213+ E0D0
 214+ E0D0 3E 08        sprite_lhc_move:            ld		a,local_hyper_sprite
 215+ E0D2 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 216+ E0D5              ; write out X position bits 1 to 8
 217+ E0D5 79                                       ld		a,c
 218+ E0D6 21 11 00                                 ld      hl,spritecursoroffset
 219+ E0D9 ED 31                                    add		hl,a                                ; hl = full x position
 220+ E0DB 7D                                       ld		a,l
 221+ E0DC ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 222+ E0DF              ; write out Y position bits 1 to 8
 223+ E0DF EB                                       ex		de,hl								; de = full x position
 224+ E0E0 78                                       ld		a,b
 225+ E0E1 21 11 00                                 ld      hl,spritecursoroffset
 226+ E0E4 ED 31                                    add		hl,a
 227+ E0E6 7D                                       ld		a,l                                 ; hl = full y position
 228+ E0E7 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 229+ E0EA              ; write out MSB of X as its an anchor
 230+ E0EA 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 231+ E0EB ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 232+ E0EE              ; write out msb of y in h must be bit 0 only
 233+ E0EE 3E 00                                    ld		a,%00000000							; big unified composite
 234+ E0F0 B2                                       or		d									; MSB Y
 235+ E0F1 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 236+ E0F4 C9                                       ret
 237+ E0F5
 238+ E0F5              ; "sprite_local_cursor BC = rowcol"
 239+ E0F5 16 05        sprite_local_cursor:        ld		d,local_cursor_sprite
 240+ E0F7 1E 04                                    ld		e,local_present_cursor
 241+ E0F9 CD 00 E0                                 call	sprite_big
 242+ E0FC C9                                       ret
 243+ E0FD
 244+ E0FD              ; "sprite_local_hyper_cursor BC = rowcol"
 245+ E0FD 16 08        sprite_local_hyper_cursor:  ld		d,local_hyper_sprite
 246+ E0FF 1E 07                                    ld		e,local_hyper_pattern
 247+ E101 CD 00 E0                                 call	sprite_big
 248+ E104 C9                                       ret
 249+ E105
 250+ E105              compass_offset              equ 2
 251+ E105              ScannerX                    equ 128
 252+ E105              ScannerY                    equ 171
 253+ E105              SunScanCenterX              equ 92
 254+ E105              SunScanCenterY              equ 171
 255+ E105              PlanetScanCenterX           equ 164
 256+ E105              PlanetScanCenterY           equ 171
 257+ E105
 258+ E105
 259+ E105 3E 20        compass_sun_move:       ld		a,compass_sun
 260+ E107 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 261+ E10A              ; write out X position bits 1 to 8
 262+ E10A 3E 5A                                ld      a, SunScanCenterX-compass_offset
 263+ E10C 81                                   add     a,c
 264+ E10D ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 265+ E110              ; write out Y position bits 1 to 8
 266+ E110 3E A9                                ld      a, SunScanCenterY-compass_offset
 267+ E112 90                                   sub     b
 268+ E113 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 269+ E116 C9                                   ret
 270+ E117
 271+ E117 3E 21        compass_station_move:   ld		a,compass_station
 272+ E119 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 273+ E11C              ; write out X position bits 1 to 8
 274+ E11C 3E A2                                ld      a, PlanetScanCenterX-compass_offset
 275+ E11E 81                                   add     a,c
 276+ E11F ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 277+ E122              ; write out Y position bits 1 to 8
 278+ E122 3E A9                                ld      a, PlanetScanCenterY-compass_offset
 279+ E124 90                                   sub     b
 280+ E125 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 281+ E128 C9                                   ret
 282+ E129
 283+ E129              ReticuleCentreX         EQU (256/2)+32 -1
 284+ E129              ReticuleCentreY         EQU (192/2)+32 -1
 285+ E129              ReticuleOffset          EQU 8
 286+ E129
 287+ E129              TargetetingCentreX1     EQU ReticuleCentreX -32
 288+ E129              TargetetingCentreX2     EQU ReticuleCentreX +16
 289+ E129              TargetetingCentreY      EQU ReticuleCentreY -7
 290+ E129
 291+ E129              sprite_missile_x        EQU 2+32
 292+ E129              sprite_missile_y        EQU 192-8+32
 293+ E129
 294+ E129              sprite_ecm_x            EQU (6*8) +2 +32
 295+ E129              sprite_ecm_y            EQU 192-15+32
 296+ E129
 297+ E129 3E 24        sprite_ECM:             ld      a,ECM_sprite
 298+ E12B ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a
 299+ E12E 3E 52                                ld      a,sprite_ecm_x
 300+ E130 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 301+ E133 3E D1                                ld		a,sprite_ecm_y
 302+ E135 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 303+ E138 3E 99                                ld      a,ecm_pattern | %10000000
 304+ E13A ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 305+ E13D C9                                   ret
 306+ E13E
 307+ E13E ED 92 34     sprite_missile_ready:   nextreg SPRITE_PORT_INDEX_REGISTER,a
 308+ E141 79                                   ld      a,c
 309+ E142 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 310+ E145 3E D8                                ld		a,sprite_missile_y
 311+ E147 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 312+ E14A 3E 9A                                ld      a,missile_ready_pattern | %10000000
 313+ E14C ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 314+ E14F C9                                   ret
 315+ E150
 316+ E150 3E 25        sprite_missile_1:       ld      a,missile_sprite1
 317+ E152 0E 22                                ld      c,sprite_missile_x
 318+ E154 C3 3E E1                             jp      sprite_missile_ready
 319+ E157
 320+ E157 3E 26        sprite_missile_2:       ld      a,missile_sprite2
 321+ E159 0E 31                                ld      c,sprite_missile_x+15
 322+ E15B C3 3E E1                             jp      sprite_missile_ready
 323+ E15E
 324+ E15E 3E 27        sprite_missile_3:       ld      a,missile_sprite3
 325+ E160 0E 3B                                ld      c,sprite_missile_x+25
 326+ E162 C3 3E E1                             jp      sprite_missile_ready
 327+ E165
 328+ E165 3E 28        sprite_missile_4:       ld      a,missile_sprite4
 329+ E167 0E 45                                ld      c,sprite_missile_x +35
 330+ E169 C3 3E E1                             jp      sprite_missile_ready
 331+ E16C
 332+ E16C
 333+ E16C
 334+ E16C 3E 0C        sprite_reticule:        ld      a,reticlule_sprite1                 ; LEFT ARM
 335+ E16E ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 336+ E171 3E 87                                ld      a,ReticuleCentreX -16 - ReticuleOffset
 337+ E173 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 338+ E176 3E 7F                                ld		a,ReticuleCentreY
 339+ E178 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 340+ E17B AF                                   xor     a
 341+ E17C ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 342+ E17F 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 343+ E181 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 344+ E184 3E 0D        .rightReticule          ld      a,reticlule_sprite2                 ; RIGHT ARM
 345+ E186 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 346+ E189 3E A7                                ld      a,ReticuleCentreX + ReticuleOffset
 347+ E18B ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 348+ E18E 3E 7F                                ld		a,ReticuleCentreY
 349+ E190 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 350+ E193 3E 08                                ld      a,%00001000
 351+ E195 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 352+ E198 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 353+ E19A ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 354+ E19D 3E 0E        .topReticule            ld      a,reticlule_sprite3
 355+ E19F ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 356+ E1A2 3E 9F                                ld      a,ReticuleCentreX
 357+ E1A4 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 358+ E1A7 3E 67                                ld		a,ReticuleCentreY-16 - ReticuleOffset
 359+ E1A9 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 360+ E1AC AF                                   xor     a
 361+ E1AD ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 362+ E1B0 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 363+ E1B2 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 364+ E1B5 3E 0F        .bottomReticule         ld      a,reticlule_sprite4
 365+ E1B7 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 366+ E1BA 3E 9F                                ld      a,ReticuleCentreX
 367+ E1BC ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 368+ E1BF 3E 87                                ld		a,ReticuleCentreY + ReticuleOffset
 369+ E1C1 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 370+ E1C4 3E 04                                ld      a,%00000100
 371+ E1C6 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring vertical
 372+ E1C9 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 373+ E1CB ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 374+ E1CE C9                                   ret
 375+ E1CF
 376+ E1CF              laserbasex              equ 6
 377+ E1CF              laserbasey              equ 14
 378+ E1CF
 379+ E1CF              ShowSprite              MACRO   spritenbr, patternnbr
 380+ E1CF ~                                    ld      a, spritenbr
 381+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 382+ E1CF ~                                    ld      a,patternnbr | %10000000
 383+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 384+ E1CF                                      ENDM
 385+ E1CF
 386+ E1CF              LeftLaser:              MACRO   xoffset, yoffset, spriteL, patternL
 387+ E1CF ~                                    ld      a, spriteL
 388+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 389+ E1CF ~                                    ld      a,((laserbasex + xoffset) *8) + 32
 390+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 391+ E1CF ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 392+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 393+ E1CF ~                                    xor     a
 394+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 395+ E1CF ~                                    ld      a, patternL | %00000000             ; hidden by default
 396+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 397+ E1CF                                      ENDM
 398+ E1CF
 399+ E1CF              RightLaser:             MACRO   xoffset, yoffset, spriteL, patternL
 400+ E1CF ~                                    ld      a, spriteL
 401+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 402+ E1CF ~                                    ld      a,(((30-laserbasex) - xoffset) *8) + 32 -2
 403+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 404+ E1CF ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 405+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 406+ E1CF ~                                    ld      a,%00001000
 407+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 408+ E1CF ~                                    ld      a, patternL | %00000000             ; hidden by default
 409+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 410+ E1CF                                      ENDM
 411+ E1CF
 412+ E1CF              show_ecm_sprite:        ShowSprite  ECM_sprite, ecm_pattern
 412+ E1CF 3E 24       >                        ld      a, ECM_sprite
 412+ E1D1 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 412+ E1D4 3E 99       >                        ld      a,ecm_pattern | %10000000
 412+ E1D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 413+ E1D9 C9                                   ret
 414+ E1DA
 415+ E1DA              show_missile_1_ready:   ShowSprite  missile_sprite1, missile_ready_pattern
 415+ E1DA 3E 25       >                        ld      a, missile_sprite1
 415+ E1DC ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 415+ E1DF 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 415+ E1E1 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 416+ E1E4 C9                                   ret
 417+ E1E5
 418+ E1E5              show_missile_2_ready:   ShowSprite  missile_sprite2, missile_ready_pattern
 418+ E1E5 3E 26       >                        ld      a, missile_sprite2
 418+ E1E7 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 418+ E1EA 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 418+ E1EC ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 419+ E1EF C9                                   ret
 420+ E1F0
 421+ E1F0              show_missile_3_ready:   ShowSprite  missile_sprite3, missile_ready_pattern
 421+ E1F0 3E 27       >                        ld      a, missile_sprite3
 421+ E1F2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 421+ E1F5 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 421+ E1F7 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 422+ E1FA C9                                   ret
 423+ E1FB
 424+ E1FB              show_missile_4_ready:   ShowSprite  missile_sprite4, missile_ready_pattern
 424+ E1FB 3E 28       >                        ld      a, missile_sprite4
 424+ E1FD ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 424+ E200 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 424+ E202 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 425+ E205 C9                                   ret
 426+ E206
 427+ E206              show_missile_1_armed:   ShowSprite  missile_sprite1, missile_armed_pattern
 427+ E206 3E 25       >                        ld      a, missile_sprite1
 427+ E208 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 427+ E20B 3E 9B       >                        ld      a,missile_armed_pattern | %10000000
 427+ E20D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 428+ E210 C9                                   ret
 429+ E211
 430+ E211              show_missile_1_locked:  ShowSprite  missile_sprite1, missile_locked_pattern
 430+ E211 3E 25       >                        ld      a, missile_sprite1
 430+ E213 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 430+ E216 3E 9C       >                        ld      a,missile_locked_pattern | %10000000
 430+ E218 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 431+ E21B C9                                   ret
 432+ E21C
 433+ E21C
 434+ E21C              show_compass_sun_infront:ShowSprite  compass_sun, compass_sun_infront
 434+ E21C 3E 20       >                        ld      a, compass_sun
 434+ E21E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 434+ E221 3E 91       >                        ld      a,compass_sun_infront | %10000000
 434+ E223 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 435+ E226 C9                                    ret
 436+ E227
 437+ E227              show_compass_sun_behind: ShowSprite  compass_sun, compass_sun_behind
 437+ E227 3E 20       >                        ld      a, compass_sun
 437+ E229 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 437+ E22C 3E 92       >                        ld      a,compass_sun_behind | %10000000
 437+ E22E ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 438+ E231 C9                                    ret
 439+ E232
 440+ E232              show_compass_station_infront: ShowSprite  compass_station, compass_station_infront
 440+ E232 3E 21       >                        ld      a, compass_station
 440+ E234 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 440+ E237 3E 93       >                        ld      a,compass_station_infront | %10000000
 440+ E239 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 441+ E23C C9                                    ret
 442+ E23D
 443+ E23D              show_compass_station_behind:  ShowSprite  compass_station, compass_station_behind
 443+ E23D 3E 21       >                        ld      a, compass_station
 443+ E23F ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 443+ E242 3E 94       >                        ld      a,compass_station_behind | %10000000
 443+ E244 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 444+ E247 C9                                    ret
 445+ E248
 446+ E248              sprite_laser:           LeftLaser  0,0,laser_sprite1 ,laser_pattern_1
 446+ E248 3E 10       >                        ld      a, laser_sprite1
 446+ E24A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 446+ E24D 3E 50       >                        ld      a,((laserbasex + 0) *8) + 32
 446+ E24F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 446+ E252 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 446+ E254 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 446+ E257 AF          >                        xor     a
 446+ E258 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 446+ E25B 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 446+ E25D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 447+ E260                                      LeftLaser  2,0,laser_sprite2 ,laser_pattern_2
 447+ E260 3E 11       >                        ld      a, laser_sprite2
 447+ E262 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 447+ E265 3E 60       >                        ld      a,((laserbasex + 2) *8) + 32
 447+ E267 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 447+ E26A 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 447+ E26C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 447+ E26F AF          >                        xor     a
 447+ E270 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 447+ E273 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 447+ E275 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 448+ E278                                      LeftLaser  4,1,laser_sprite3 ,laser_pattern_3
 448+ E278 3E 12       >                        ld      a, laser_sprite3
 448+ E27A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 448+ E27D 3E 70       >                        ld      a,((laserbasex + 4) *8) + 32
 448+ E27F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 448+ E282 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 448+ E284 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 448+ E287 AF          >                        xor     a
 448+ E288 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 448+ E28B 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 448+ E28D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 449+ E290                                      LeftLaser  6,1,laser_sprite4 ,laser_pattern_4
 449+ E290 3E 13       >                        ld      a, laser_sprite4
 449+ E292 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 449+ E295 3E 80       >                        ld      a,((laserbasex + 6) *8) + 32
 449+ E297 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 449+ E29A 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 449+ E29C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 449+ E29F AF          >                        xor     a
 449+ E2A0 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 449+ E2A3 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 449+ E2A5 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 450+ E2A8                                      LeftLaser  8,2,laser_sprite5 ,laser_pattern_5
 450+ E2A8 3E 14       >                        ld      a, laser_sprite5
 450+ E2AA ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 450+ E2AD 3E 90       >                        ld      a,((laserbasex + 8) *8) + 32
 450+ E2AF ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 450+ E2B2 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 450+ E2B4 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 450+ E2B7 AF          >                        xor     a
 450+ E2B8 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 450+ E2BB 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 450+ E2BD ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 451+ E2C0                                      RightLaser 0,0,laser_sprite9 ,laser_pattern_1
 451+ E2C0 3E 18       >                        ld      a, laser_sprite9
 451+ E2C2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 451+ E2C5 3E DE       >                        ld      a,(((30-laserbasex) - 0) *8) + 32 -2
 451+ E2C7 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 451+ E2CA 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 451+ E2CC ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 451+ E2CF 3E 08       >                        ld      a,%00001000
 451+ E2D1 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 451+ E2D4 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 451+ E2D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 452+ E2D9                                      RightLaser 2,0,laser_sprite10,laser_pattern_2
 452+ E2D9 3E 19       >                        ld      a, laser_sprite10
 452+ E2DB ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 452+ E2DE 3E CE       >                        ld      a,(((30-laserbasex) - 2) *8) + 32 -2
 452+ E2E0 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 452+ E2E3 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 452+ E2E5 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 452+ E2E8 3E 08       >                        ld      a,%00001000
 452+ E2EA ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 452+ E2ED 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 452+ E2EF ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 453+ E2F2                                      RightLaser 4,1,laser_sprite11,laser_pattern_3
 453+ E2F2 3E 1A       >                        ld      a, laser_sprite11
 453+ E2F4 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 453+ E2F7 3E BE       >                        ld      a,(((30-laserbasex) - 4) *8) + 32 -2
 453+ E2F9 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 453+ E2FC 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 453+ E2FE ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 453+ E301 3E 08       >                        ld      a,%00001000
 453+ E303 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 453+ E306 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 453+ E308 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 454+ E30B                                      RightLaser 6,1,laser_sprite12,laser_pattern_4
 454+ E30B 3E 1B       >                        ld      a, laser_sprite12
 454+ E30D ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 454+ E310 3E AE       >                        ld      a,(((30-laserbasex) - 6) *8) + 32 -2
 454+ E312 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 454+ E315 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 454+ E317 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 454+ E31A 3E 08       >                        ld      a,%00001000
 454+ E31C ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 454+ E31F 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 454+ E321 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 455+ E324                                      RightLaser 8,2,laser_sprite13,laser_pattern_5
 455+ E324 3E 1C       >                        ld      a, laser_sprite13
 455+ E326 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 455+ E329 3E 9E       >                        ld      a,(((30-laserbasex) - 8) *8) + 32 -2
 455+ E32B ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 455+ E32E 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 455+ E330 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 455+ E333 3E 08       >                        ld      a,%00001000
 455+ E335 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 455+ E338 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 455+ E33A ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 456+ E33D C9                                   ret
 457+ E33E                                      ; Need simple show updates just to update the show attribute
 458+ E33E
 459+ E33E              sprite_laser_show:      ShowSprite laser_sprite1 ,laser_pattern_1
 459+ E33E 3E 10       >                        ld      a, laser_sprite1
 459+ E340 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 459+ E343 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 459+ E345 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 460+ E348                                      ShowSprite laser_sprite2 ,laser_pattern_2
 460+ E348 3E 11       >                        ld      a, laser_sprite2
 460+ E34A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 460+ E34D 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 460+ E34F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 461+ E352                                      ShowSprite laser_sprite3 ,laser_pattern_3
 461+ E352 3E 12       >                        ld      a, laser_sprite3
 461+ E354 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 461+ E357 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 461+ E359 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 462+ E35C                                      ShowSprite laser_sprite4 ,laser_pattern_4
 462+ E35C 3E 13       >                        ld      a, laser_sprite4
 462+ E35E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 462+ E361 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 462+ E363 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 463+ E366                                      ShowSprite laser_sprite5 ,laser_pattern_5
 463+ E366 3E 14       >                        ld      a, laser_sprite5
 463+ E368 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 463+ E36B 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 463+ E36D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 464+ E370                                      ShowSprite laser_sprite9 ,laser_pattern_1
 464+ E370 3E 18       >                        ld      a, laser_sprite9
 464+ E372 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 464+ E375 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 464+ E377 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 465+ E37A                                      ShowSprite laser_sprite10,laser_pattern_2
 465+ E37A 3E 19       >                        ld      a, laser_sprite10
 465+ E37C ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 465+ E37F 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 465+ E381 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 466+ E384                                      ShowSprite laser_sprite11,laser_pattern_3
 466+ E384 3E 1A       >                        ld      a, laser_sprite11
 466+ E386 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 466+ E389 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 466+ E38B ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 467+ E38E                                      ShowSprite laser_sprite12,laser_pattern_4
 467+ E38E 3E 1B       >                        ld      a, laser_sprite12
 467+ E390 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 467+ E393 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 467+ E395 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 468+ E398                                      ShowSprite laser_sprite13,laser_pattern_5
 468+ E398 3E 1C       >                        ld      a, laser_sprite13
 468+ E39A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 468+ E39D 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 468+ E39F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 469+ E3A2 C9                                   ret
 470+ E3A3
 471+ E3A3              sprite_galactic_hide:   HideSprite galactic_cursor_sprite
 471+ E3A3 ED 91 34 00 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 471+ E3A7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 472+ E3AB                                      HideSprite galactic_cursor_sprite1
 472+ E3AB ED 91 34 01 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 472+ E3AF ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 473+ E3B3                                      HideSprite galactic_cursor_sprite2
 473+ E3B3 ED 91 34 03 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 473+ E3B7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 474+ E3BB C9                                   ret
 475+ E3BC
 476+ E3BC              sprite_galactic_hyper_hide:
 477+ E3BC                                      HideSprite galactic_hyper_sprite
 477+ E3BC ED 91 34 04 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 477+ E3C0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 478+ E3C4                                       ;nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 479+ E3C4              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 480+ E3C4              ;                        nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 481+ E3C4              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 482+ E3C4 C9                                   ret
 483+ E3C5
 484+ E3C5              sprite_local_hide:      HideSprite local_cursor_sprite
 484+ E3C5 ED 91 34 05 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 484+ E3C9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 485+ E3CD                                      HideSprite local_cursor_sprite1
 485+ E3CD ED 91 34 06 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 485+ E3D1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 486+ E3D5                                      HideSprite local_cursor_sprite2
 486+ E3D5 ED 91 34 07 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 486+ E3D9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 487+ E3DD C9                                   ret
 488+ E3DE
 489+ E3DE              sprite_local_hyper_hide:HideSprite local_hyper_sprite
 489+ E3DE ED 91 34 08 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 489+ E3E2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 490+ E3E6                                      HideSprite local_hyper_sprite1
 490+ E3E6 ED 91 34 09 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 490+ E3EA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 491+ E3EE                                      HideSprite local_hyper_sprite2
 491+ E3EE ED 91 34 0B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 491+ E3F2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 492+ E3F6 C9                                   ret
 493+ E3F7
 494+ E3F7              sprite_reticule_hide:   HideSprite reticlule_sprite1
 494+ E3F7 ED 91 34 0C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite1
 494+ E3FB ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 495+ E3FF                                      HideSprite reticlule_sprite2
 495+ E3FF ED 91 34 0D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite2
 495+ E403 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 496+ E407                                      HideSprite reticlule_sprite3
 496+ E407 ED 91 34 0E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite3
 496+ E40B ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 497+ E40F                                      HideSprite reticlule_sprite4
 497+ E40F ED 91 34 0F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite4
 497+ E413 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 498+ E417 C9                                   ret
 499+ E418
 500+ E418              sprite_ecm_hide:        HideSprite ECM_sprite
 500+ E418 ED 91 34 24 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,ECM_sprite
 500+ E41C ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 501+ E420 C9                                   ret
 502+ E421
 503+ E421              sprite_missile_1_hide:  HideSprite missile_sprite1
 503+ E421 ED 91 34 25 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite1
 503+ E425 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 504+ E429 C9                                   ret
 505+ E42A
 506+ E42A              sprite_missile_2_hide:  HideSprite missile_sprite2
 506+ E42A ED 91 34 26 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite2
 506+ E42E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 507+ E432 C9                                   ret
 508+ E433
 509+ E433              sprite_missile_3_hide:  HideSprite missile_sprite3
 509+ E433 ED 91 34 27 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite3
 509+ E437 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 510+ E43B C9                                   ret
 511+ E43C
 512+ E43C              sprite_missile_4_hide:  HideSprite missile_sprite4
 512+ E43C ED 91 34 28 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite4
 512+ E440 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 513+ E444 C9                                   ret
 514+ E445
 515+ E445 CD 21 E4     sprite_missile_all_hide:call  sprite_missile_1_hide
 516+ E448 CD 2A E4                             call  sprite_missile_2_hide
 517+ E44B CD 33 E4                             call  sprite_missile_3_hide
 518+ E44E CD 3C E4                             call  sprite_missile_4_hide
 519+ E451 C9                                   ret
 520+ E452
 521+ E452 3E 22        sprite_targetting:      ld      a,targetting_sprite1                 ; LEFT ARM
 522+ E454 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 523+ E457 3E 7F                                ld      a,TargetetingCentreX1
 524+ E459 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 525+ E45C 3E 78                                ld		a,TargetetingCentreY
 526+ E45E ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 527+ E461 AF                                   xor     a
 528+ E462 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 529+ E465 3E 97                                ld      a,targetting_pattern | %10000000
 530+ E467 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 531+ E46A 3E 23        .right:                 ld      a,targetting_sprite2                ; RIGHT ARM
 532+ E46C ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 533+ E46F 3E AF                                ld      a,TargetetingCentreX2
 534+ E471 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 535+ E474 3E 78                                ld		a,TargetetingCentreY
 536+ E476 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 537+ E479 3E 08                                ld      a,%00001000
 538+ E47B ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 539+ E47E 3E 97                                ld      a,targetting_pattern | %10000000
 540+ E480 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 541+ E483 C9                                   ret
 542+ E484
 543+ E484 3E 22        sprite_lock:            ld      a,targetting_sprite1                 ; LEFT ARM
 544+ E486 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 545+ E489 3E 7F                                ld      a,TargetetingCentreX1
 546+ E48B ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 547+ E48E 3E 78                                ld		a,TargetetingCentreY
 548+ E490 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 549+ E493 AF                                   xor     a
 550+ E494 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 551+ E497 3E 98                                ld      a,lock_pattern | %10000000
 552+ E499 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 553+ E49C 3E 23        .right:                 ld      a,targetting_sprite2                 ; RIGHT ARM
 554+ E49E ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 555+ E4A1 3E AF                                ld      a,TargetetingCentreX2
 556+ E4A3 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 557+ E4A6 3E 78                                ld		a,TargetetingCentreY
 558+ E4A8 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 559+ E4AB 3E 08                                ld      a,%00001000
 560+ E4AD ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 561+ E4B0 3E 98                                ld      a,lock_pattern | %10000000
 562+ E4B2 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 563+ E4B5 C9                                   ret
 564+ E4B6
 565+ E4B6
 566+ E4B6
 567+ E4B6              sprite_targetting_hide: HideSprite targetting_sprite1
 567+ E4B6 ED 91 34 22 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite1
 567+ E4BA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 568+ E4BE                                      HideSprite targetting_sprite2
 568+ E4BE ED 91 34 23 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite2
 568+ E4C2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 569+ E4C6 C9                                   ret
 570+ E4C7
 571+ E4C7              sprite_targetting_show: ShowSprite targetting_sprite1, targetting_pattern
 571+ E4C7 3E 22       >                        ld      a, targetting_sprite1
 571+ E4C9 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 571+ E4CC 3E 97       >                        ld      a,targetting_pattern | %10000000
 571+ E4CE ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 572+ E4D1                                      ShowSprite targetting_sprite2, targetting_pattern
 572+ E4D1 3E 23       >                        ld      a, targetting_sprite2
 572+ E4D3 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 572+ E4D6 3E 97       >                        ld      a,targetting_pattern | %10000000
 572+ E4D8 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 573+ E4DB C9                                   ret
 574+ E4DC
 575+ E4DC              sprite_laser_hide:      HideSprite laser_sprite1
 575+ E4DC ED 91 34 10 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite1
 575+ E4E0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 576+ E4E4                                      HideSprite laser_sprite2
 576+ E4E4 ED 91 34 11 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite2
 576+ E4E8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 577+ E4EC                                      HideSprite laser_sprite3
 577+ E4EC ED 91 34 12 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite3
 577+ E4F0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 578+ E4F4                                      HideSprite laser_sprite4
 578+ E4F4 ED 91 34 13 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite4
 578+ E4F8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 579+ E4FC                                      HideSprite laser_sprite5
 579+ E4FC ED 91 34 14 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite5
 579+ E500 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 580+ E504                                      HideSprite laser_sprite6
 580+ E504 ED 91 34 15 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite6
 580+ E508 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 581+ E50C                                      HideSprite laser_sprite7
 581+ E50C ED 91 34 16 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite7
 581+ E510 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 582+ E514                                      HideSprite laser_sprite8
 582+ E514 ED 91 34 17 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite8
 582+ E518 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 583+ E51C                                      HideSprite laser_sprite9
 583+ E51C ED 91 34 18 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite9
 583+ E520 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 584+ E524                                      HideSprite laser_sprite10
 584+ E524 ED 91 34 19 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite10
 584+ E528 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 585+ E52C                                      HideSprite laser_sprite11
 585+ E52C ED 91 34 1A >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite11
 585+ E530 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 586+ E534                                      HideSprite laser_sprite12
 586+ E534 ED 91 34 1B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite12
 586+ E538 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 587+ E53C                                      HideSprite laser_sprite13
 587+ E53C ED 91 34 1C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite13
 587+ E540 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 588+ E544                                      HideSprite laser_sprite14
 588+ E544 ED 91 34 1D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite14
 588+ E548 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 589+ E54C                                      HideSprite laser_sprite15
 589+ E54C ED 91 34 1E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite15
 589+ E550 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 590+ E554                                      HideSprite laser_sprite16
 590+ E554 ED 91 34 1F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite16
 590+ E558 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 591+ E55C C9                                   ret
 592+ E55D
 593+ E55D              sprite_compass_hide:    HideSprite compass_sun
 593+ E55D ED 91 34 20 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_sun
 593+ E561 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 594+ E565                                      HideSprite compass_station
 594+ E565 ED 91 34 21 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_station
 594+ E569 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 595+ E56D C9                                   ret
 596+ E56E
 597+ E56E CD A3 E3     sprite_cls_cursors:     call	sprite_galactic_hide
 598+ E571 CD BC E3                             call	sprite_galactic_hyper_hide
 599+ E574 CD C5 E3                             call	sprite_local_hide
 600+ E577 CD DE E3                             call	sprite_local_hyper_hide
 601+ E57A CD F7 E3                             call    sprite_reticule_hide
 602+ E57D CD DC E4                             call    sprite_laser_hide
 603+ E580 CD 5D E5                             call    sprite_compass_hide
 604+ E583 CD B6 E4                             call    sprite_targetting_hide
 605+ E586 CD 45 E4                             call    sprite_missile_all_hide
 606+ E589 C9                                   ret
 607+ E58A
 608+ E58A CD 6E E5     sprite_cls_all:         call    sprite_cls_cursors
 609+ E58D CD 18 E4                             call    sprite_ecm_hide
 610+ E590 CD 45 E4                             call    sprite_missile_all_hide
 611+ E593 C9                                   ret
 612+ E594
 613+ E594 CD 6E E5     init_sprites:           call		sprite_cls_cursors
 614+ E597 ED 91 15 43                          nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,%01000011
 615+ E59B C9                                   ret
 616+ E59C
 617+ E59C
 618+ E59C              select_sprite_a:        MACRO
 619+ E59C ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 620+ E59C                                      ENDM
 621+ E59C
 622+ E59C              set_sprite_x_low_a:     MACRO
 623+ E59C ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 624+ E59C                                      ENDM
 625+ E59C
 626+ E59C              set_sprite_y_low_a:     MACRO
 627+ E59C ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a
 628+ E59C                                      ENDM
 629+ E59C
 630+ E59C              set_sprite_x_msb_anc:   MACRO
 631+ E59C ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a
 632+ E59C                                      ENDM
 633+ E59C
 634+ E59C              set_sprite_pat_a:       MACRO
 635+ E59C ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 636+ E59C                                      ENDM
 637+ E59C
 638+ E59C              set_sprite_pat_a_nx:    MACRO
 639+ E59C ~                                    and     %10111111
 640+ E59C ~                                    set_sprite_pat_a
 641+ E59C                                      ENDM
 642+ E59C
 643+ E59C              set_sprite_pat_a_vis:   MACRO
 644+ E59C ~                                    or      %10000000
 645+ E59C ~                                    set_sprite_pat_a
 646+ E59C                                      ENDM
 647+ E59C
 648+ E59C              set_sprite_hidden:      MACRO
 649+ E59C ~                                    xor     a
 650+ E59C ~                                    set_sprite_pat_a
 651+ E59C                                      ENDM
 652+ E59C
 653+ E59C              set_sprite_pas_a_vis_nx:MACRO
 654+ E59C ~                                    or      %10000000
 655+ E59C ~                                    set_sprite_pat_a_nx
 656+ E59C                                      ENDM
 657+ E59C
 658+ E59C              set_sprite_extended_a:  MACRO
 659+ E59C ~                                    nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 660+ E59C                                      ENDM
 661+ E59C
 662+ E59C 20           diag_x_pos:             DB 32
 663+ E59D 40           diag_y_pos:             DB 64
 664+ E59E 00           diag_sprite_nbr:        DB 0
 665+ E59F
 666+ E59F 06 40        sprite_diagnostic_clear:ld      b,64
 667+ E5A1 0E 00                                ld      c,0
 668+ E5A3 79           .HideLoop:              ld      a,c
 669+ E5A4                                      HideSprite a
 669+ E5A4 ED 92 34    >                            nextreg		SPRITE_PORT_INDEX_REGISTER,a
 669+ E5A7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 670+ E5AB 0C                                   inc     c
 671+ E5AC 10 F5                                djnz    .HideLoop
 672+ E5AE C9                                   ret
 673+ E5AF
 674+ E5AF AF           sprite_diagnostic:      xor a
 675+ E5B0 32 9E E5                             ld      (diag_sprite_nbr),a
 676+ E5B3 01 3B 30                             ld      bc,$303B
 677+ E5B6 ED 79                                out     (c),a
 678+ E5B8 01 57 00     .sprite_loop:           ld      bc,SPRITE_INFO_PORT
 679+ E5BB 3A 9C E5                             ld      a,(diag_x_pos)
 680+ E5BE ED 79                                out     (c),a
 681+ E5C0 C6 10                                add     16
 682+ E5C2 32 9C E5                             ld      (diag_x_pos),a
 683+ E5C5 3A 9D E5                             ld      a,(diag_y_pos)
 684+ E5C8 ED 79                                out     (c),a
 685+ E5CA AF                                   xor     a
 686+ E5CB ED 79                                out     (c),a
 687+ E5CD 3A 9E E5                             ld      a,(diag_sprite_nbr)
 688+ E5D0 F6 80                                or      %10000000
 689+ E5D2 E6 BF                                and     %10111111
 690+ E5D4 ED 79                                out     (c),a
 691+ E5D6 3A 9E E5                             ld      a,(diag_sprite_nbr)
 692+ E5D9 3C                                   inc     a
 693+ E5DA 32 9E E5                             ld      (diag_sprite_nbr),a
 694+ E5DD                                      JumpIfALTNusng 14,.sprite_loop
 694+ E5DD FE 0E       >                        cp      14
 694+ E5DF DA B8 E5    >                        jp		c, .sprite_loop
 695+ E5E2 3E 40                                ld      a,64
 696+ E5E4                                      JumpIfALTNusng  25,.cont
 696+ E5E4 FE 19       >                        cp      25
 696+ E5E6 DA EA E5    >                        jp		c, .cont
 697+ E5E9 C9                                   ret
 698+ E5EA 3E 40        .cont:                  ld      a,64
 699+ E5EC 32 9D E5                             ld      (diag_y_pos),a
 700+ E5EF 18 C7                                jr      .sprite_loop
 701+ E5F1 C9                                   ret
 702+ E5F2
 703+ E5F2
 704+ E5F2
# file closed: ./Layer3Sprites/sprite_routines.asm
 900  E5F2                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E5F2
   2+ E5F2
   3+ E5F2
   4+ E5F2 00 00 00...  FileWork                DS 10
   5+ E5FC 00           FileNumber:             DB  0
   6+ E5FD
   7+ E5FD 4E 45 53 70  Filename                DB "NESpr"
   7+ E601 72
   8+ E602 30 30        FileNbr                 DB "00"
   9+ E604 2E 64 61 74  Extension:              DB ".dat",0
   9+ E608 00
  10+ E609
  11+ E609
  12+ E609 3A FC E5     FileNbrA:               ld      a,(FileNumber)
  13+ E60C ED 23                                swapnib
  14+ E60E E6 0F                                and     %00001111
  15+ E610 06 30                                ld      b,"0"
  16+ E612 80                                   add     b
  17+ E613 32 02 E6                             ld      (FileNbr),a
  18+ E616 3A FC E5                             ld      a,(FileNumber)
  19+ E619 E6 0F                                and     %00001111
  20+ E61B 80                                   add     b
  21+ E61C 32 03 E6                             ld      (FileNbr+1),a
  22+ E61F C9                                   ret
  23+ E620
  24+ E620 01 3B 30     load_pattern_files:     ld          bc,SPRITE_SLOT_PORT             ; select pattern 0
  25+ E623                                      ZeroA                                       ;
  25+ E623 AF          >                        xor a
  26+ E624 ED 79                                out         (c),a
  27+ E626 3E 01                                ld          a,$01
  28+ E628 32 FC E5                             ld          (FileNumber),a
  29+ E62B 06 1D                                ld          b,29
  30+ E62D C5           .ReadLoop:              push        bc
  31+ E62E CD 09 E6                             call        FileNbrA
  32+ E631 CD 40 E6                             call        load_a_pattern
  33+ E634 3A FC E5                             ld          a,(FileNumber)
  34+ E637 3C                                   inc         a
  35+ E638 27                                   daa
  36+ E639 32 FC E5                             ld          (FileNumber),a
  37+ E63C C1                                   pop         bc
  38+ E63D 10 EE                                djnz        .ReadLoop
  39+ E63F C9                                   ret
  40+ E640                                                   ; write byte 256
  41+ E640
  42+ E640 21 FD E5     load_a_pattern:         ld          hl,Filename
  43+ E643 DD 21 5D E6                          ld          ix,SpriteDatabuffer
  44+ E647 01 00 01                             ld          bc,256
  45+ E64A CD F0 AB                             call        FileLoad
  46+ E64D 1E FF                                ld          e,255
  47+ E64F 01 5B 00     .streamPattern:         ld          bc, SPRITE_PATTERN_UPLOAD_PORT
  48+ E652 21 5D E6                             ld          hl, SpriteDatabuffer
  49+ E655 ED 90        .streamPatternLoop:     outinb                                      ; write byte of pattern
  50+ E657 1D                                   dec         e
  51+ E658 20 FB                                jr          nz, .streamPatternLoop          ; carry on writing for "e" iterations
  52+ E65A ED 90                                outinb
  53+ E65C C9                                   ret
  54+ E65D
  55+ E65D 00 00 00...  SpriteDatabuffer:       DS  256
  56+ E75D
  57+ E75D
# file closed: ./Layer3Sprites/sprite_load.asm
 901  E75D              ;;;***    INCLUDE "./Layer3Sprites/SpriteSheet.asm"
 902  E75D                  DISPLAY "Bank ",BankSPRITE," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankSPRITE"
 903  E75D              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
 904  E75D                  SLOT    ConsoleImageAddr
 905  E75D                  PAGE    BankConsole
 906  E75D              	ORG     ConsoleImageAddr, BankConsole
 907  E000                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF ; row 1
   2+ E004 FF FF 00 7F
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 40 08
   3+ E028 01 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 10 08
   4+ E048 04 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$01,$C9,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01 ; row 2
  10+ E104 00 01 01 C9
  10+ E108 C0 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 40 08
  11+ E128 01 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 18 00
  12+ E148 0C 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$06,$08,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79 ; row 3
  18+ E204 00 01 06 08
  18+ E208 38 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 55 55
  19+ E228 55 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$0C,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 0C 08
  20+ E248 18 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$0E,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65 ; row 4
  26+ E304 00 01 0E 08
  26+ E308 18 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 40 08
  27+ E328 01 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$03,$00,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 03 00
  28+ E348 60 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$08,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65 ; row 5
  34+ E404 00 01 18 08
  34+ E408 0C 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 40 08
  35+ E428 01 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 FF
  36+ E448 80 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$30,$08,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D ; row 6
  42+ E504 00 03 30 08
  42+ E508 06 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 40 00
  43+ E528 01 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$20,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61 ; row 7
  50+ E604 24 93 20 08
  50+ E608 02 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$60,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 60 08
  51+ E628 02 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$60,$08,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61 ; row 8
  58+ E704 FF FF 60 08
  58+ E708 03 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$20,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 20 00
  59+ E728 02 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 00 01 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 45 45
  67+ E808 45 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$05,$45,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 05 45
  68+ E828 05 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 45 45
  69+ E848 45 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
  76+ E900
# file closed: ./Images/ConsoleImageData.asm
 908  E900                  DISPLAY "Bank ",BankConsole," - Bytes free ",/D, $2000 - ($-ConsoleImageAddr), " - BankConsole"
 909  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
 910  E900                  SLOT    ViewFrontAddr
 911  E900                  PAGE    BankFrontView
 912  E900                  ORG     ViewFrontAddr
 913  C000                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   1+ C004 74 56 69 65
   1+ C008 77 20 20 20
   1+ C00C 50 47 36 32
   2+ C010
   3+ C010 47           draw_front_calc_alpha:  ld      b,a
   4+ C011 E6 80                                and     $80
   5+ C013 32 BA 80                             ld      (ALP2),a                            ; set sign
   6+ C016 4F                                   ld      c,a                                 ; save sign
   7+ C017 EE 80                                xor     $80
   8+ C019 32 BB 80                             ld      (ALP2FLIP),a                        ; and oppsite sign
   9+ C01C 3A B6 80                             ld      a,(JSTX)
  10+ C01F ED 27 80                             test    $80
  11+ C022 28 02                                jr      z,  .PositiveRoll
  12+ C024 ED 44        .NegativeRoll:          neg
  13+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  14+ C028 CB 3F                                srl     a
  15+ C02A FE 08                                cp      8
  16+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  17+ C02E CB 3F        .IncreasedDamp          srl     a
  18+ C030 32 B9 80     .NotIncreasedDamp:      ld      (ALP1),a
  19+ C033 B1                                   or      c
  20+ C034 32 B8 80                             ld      (ALPHA),a                           ; a = signed bit alph1
  21+ C037 21 F4 C2     .RestartDampenRoll:     ld      hl,dampenRcounter
  22+ C03A 36 04                                ld      (hl),dampenRate
  23+ C03C C9                                   ret
  24+ C03D
  25+ C03D              ; Do the same for pitch
  26+ C03D 47           draw_front_calc_beta:   ld      b,a
  27+ C03E E6 80                                and     $80
  28+ C040 32 AE 80                             ld      (BET2),a                            ; set sign
  29+ C043 4F                                   ld      c,a                                 ; save sign
  30+ C044 EE 80                                xor     $80
  31+ C046 32 AF 80                             ld      (BET2FLIP),a                        ; and oppsite sign
  32+ C049 3A AC 80                             ld      a,(JSTY)
  33+ C04C ED 27 80                             test    $80
  34+ C04F 28 02                                jr      z,  .PositivePitch
  35+ C051 ED 44        .NegativePitch:         neg
  36+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  37+ C055 CB 3F                                srl     a
  38+ C057 FE 08                                cp      8
  39+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  40+ C05B CB 3F        .IncreasedDamp          srl     a
  41+ C05D 32 AD 80     .NotIncreasedDamp:      ld      (BET1),a
  42+ C060 B1                                   or      c
  43+ C061 32 AB 80                             ld      (BETA),a                            ; a = signed bit bet1
  44+ C064 21 F5 C2     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  45+ C067 36 04                                ld      (hl),dampenRate
  46+ C069 C9                                   ret
  47+ C06A
  48+ C06A              initialise_front_view:
  49+ C06A
  50+ C06A              draw_front_view:        MMUSelectLayer1
  50+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C06E CD 80 E0                             call    l1_cls
  52+ C071 CD 9A E0                             call    l1_attr_cls
  53+ C074                                      MMUSelectLayer2
  53+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  54+ C078 CD 04 E0                             call     asm_l2_double_buffer_on
  55+ C07B                                      MMUSelectSpriteBank
  55+ C07B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  56+ C07F CD 6E E5                             call    sprite_cls_cursors
  57+ C082 CD 6C E1                             call    sprite_reticule
  58+ C085 CD 48 E2                             call    sprite_laser
  59+ C088 CD 52 E4                             call    sprite_targetting
  60+ C08B CD 84 E4                             call    sprite_lock
  61+ C08E CD B6 E4                             call    sprite_targetting_hide      ; do not show targeting initially
  62+ C091 CD 29 E1                             call    sprite_ECM
  63+ C094 CD 50 E1                             call    sprite_missile_1
  64+ C097 CD 57 E1                             call    sprite_missile_2
  65+ C09A CD 5E E1                             call    sprite_missile_3
  66+ C09D CD 65 E1                             call    sprite_missile_4
  67+ C0A0 CD 18 E4                             call    sprite_ecm_hide
  68+ C0A3 CD 45 E4                             call    sprite_missile_all_hide
  69+ C0A6                                     ; call    sprite_laser_show
  70+ C0A6                                      MMUSelectConsoleBank
  70+ C0A6 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  71+ C0AA 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  72+ C0AD 11 00 E0                             ld          de,ConsoleImageData
  73+ C0B0 01 00 08                             ld          bc, ScreenL1BottomLen
  74+ C0B3 CD 58 7D                             call        memcopy_dma
  75+ C0B6 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  76+ C0B9 11 00 E8                             ld          de,ConsoleAttributes
  77+ C0BC 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  78+ C0BF CD 58 7D                             call        memcopy_dma
  79+ C0C2 CD DA 7A                             call        InitialiseStars
  80+ C0C5 AF                                   xor         a
  81+ C0C6 32 4C 83                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  82+ C0C9 32 D0 C0                             ld          (CurrentLock),a             ; we are on no targetting sprites
  83+ C0CC 32 D1 C0                             ld          (ShowingLock),a
  84+ C0CF C9                                   ret
  85+ C0D0
  86+ C0D0 00           CurrentLock             DB      0
  87+ C0D1 00           ShowingLock             DB      0
  88+ C0D2 3A D2 84     update_front_view:      ld      a,(MissileTargettingFlag)
  89+ C0D5                                      JumpIfANEquNusng StageMissileNotTargeting,  .NoTarget
  89+ C0D5 FE FF       >                        cp     StageMissileNotTargeting
  89+ C0D7 CA E7 C0    >                        jp     z,.NoTarget
  90+ C0DA                                      JumpIfANEquNusng StageMissileTargeting, .Targetting
  90+ C0DA FE FE       >                        cp     StageMissileTargeting
  90+ C0DC CA F4 C0    >                        jp     z,.Targetting
  91+ C0DF CB 7F                                bit     7,a
  92+ C0E1 20 26                                jr      nz, .Locked
  93+ C0E3 CD B6 E4                             call    sprite_targetting_hide
  94+ C0E6 C9                                   ret
  95+ C0E7 3A D1 C0     .NoTarget:              ld      a,(ShowingLock)
  96+ C0EA                                      ReturnIfAIsZero
  96+ C0EA A7          >                        and     a
  96+ C0EB C8          >                        ret     z
  97+ C0EC                                      MMUSelectSpriteBank
  97+ C0EC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  98+ C0F0 CD B6 E4                             call     sprite_targetting_hide
  99+ C0F3 C9                                   ret
 100+ C0F4              .Targetting:            CallIfMemZero CurrentLock, sprite_targetting
 100+ C0F4 3A D0 C0    >                        ld      a,(CurrentLock)
 100+ C0F7 A7          >                        and     a
 100+ C0F8 CC 52 E4    >                        call    z, sprite_targetting
 101+ C0FB                                      CallIfMemZero ShowingLock, sprite_targetting_show
 101+ C0FB 3A D1 C0    >                        ld      a,(ShowingLock)
 101+ C0FE A7          >                        and     a
 101+ C0FF CC C7 E4    >                        call    z, sprite_targetting_show
 102+ C102 21 00 01                             ld      hl,$0100                        ; set both bytes in one go
 103+ C105 22 D0 C0                             ld      (CurrentLock),hl
 104+ C108 C9                                   ret
 105+ C109              .Locked:                CallIfMemNotZero CurrentLock, sprite_lock
 105+ C109 3A D0 C0    >                        ld      a,(CurrentLock)
 105+ C10C A7          >                        and     a
 105+ C10D C4 84 E4    >                        call    nz, sprite_lock
 106+ C110                                      CallIfMemZero ShowingLock, sprite_targetting_show
 106+ C110 3A D1 C0    >                        ld      a,(ShowingLock)
 106+ C113 A7          >                        and     a
 106+ C114 CC C7 E4    >                        call    z, sprite_targetting_show
 107+ C117 21 01 01                             ld      hl,$0101                        ; set both bytes in one go
 108+ C11A 22 D0 C0                             ld      (CurrentLock),hl
 109+ C11D C9                                   ret
 110+ C11E
 111+ C11E                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 112+ C11E                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 113+ C11E 80 40 60 28  LightningLines:         db 128, 064, 096, 040, 255, 097, 042, 076, 035, 031, 082, 039, 079, 020, 026, 079, 026, 058, 018, 022, 064, 021, 032, 026, 018, 038, 025, 030, 009, 026, 035, 020, 005, 016, 018, 037, 021, 000, 000, 018
 113+ C122 FF 61 2A 4C
 113+ C126 23 1F 52 27
 113+ C12A 4F 14 1A 4F
 113+ C12E 1A 3A 12 16
 113+ C132 40 15 20 1A
 113+ C136 12 26 19 1E
 113+ C13A 09 1A 23 14
 113+ C13E 05 10 12 25
 113+ C142 15 00 00 12
 114+ C146 80 40 8B 28                          db 128, 064, 139, 040, 255, 137, 045, 160, 035, 031, 150, 040, 157, 056, 026, 160, 036, 175, 010, 022, 156, 037, 196, 040, 018, 197, 041, 223, 033, 026, 223, 033, 245, 030, 018, 223, 032, 254, 047, 018
 114+ C14A FF 89 2D A0
 114+ C14E 23 1F 96 28
 114+ C152 9D 38 1A A0
 114+ C156 24 AF 0A 16
 114+ C15A 9C 25 C4 28
 114+ C15E 12 C5 29 DF
 114+ C162 21 1A DF 21
 114+ C166 F5 1E 12 DF
 114+ C16A 20 FE 2F 12
 115+ C16E 80 40 5A 59                          db 128, 064, 090, 089, 255, 089, 089, 064, 098, 031, 079, 092, 064, 072, 025, 065, 075, 030, 070, 022, 035, 071, 038, 064, 018, 067, 095, 021, 099, 026, 031, 097, 000, 080, 018, 031, 097, 021, 110, 018
 115+ C172 FF 59 59 40
 115+ C176 62 1F 4F 5C
 115+ C17A 40 48 19 41
 115+ C17E 4B 1E 46 16
 115+ C182 23 47 26 40
 115+ C186 12 43 5F 15
 115+ C18A 63 1A 1F 61
 115+ C18E 00 50 12 1F
 115+ C192 61 15 6E 12
 116+ C196 80 40 61 71                          db 128, 064, 097, 113, 255, 098, 110, 064, 115, 031, 070, 115, 073, 127, 025, 071, 114, 060, 112, 022, 030, 120, 020, 126, 018, 070, 114, 050, 120, 026, 050, 120, 027, 119, 018, 020, 125, 010, 120, 018
 116+ C19A FF 62 6E 40
 116+ C19E 73 1F 46 73
 116+ C1A2 49 7F 19 47
 116+ C1A6 72 3C 70 16
 116+ C1AA 1E 78 14 7E
 116+ C1AE 12 46 72 32
 116+ C1B2 78 1A 32 78
 116+ C1B6 1B 77 12 14
 116+ C1BA 7D 0A 78 12
 117+ C1BE 80 40 84 59                          db 128, 064, 132, 089, 255, 131, 081, 145, 098, 031, 145, 097, 133, 103, 025, 145, 098, 150, 110, 022, 150, 109, 154, 105, 018, 150, 110, 146, 120, 026, 145, 120, 140, 126, 018, 147, 120, 159, 126, 018
 117+ C1C2 FF 83 51 91
 117+ C1C6 62 1F 91 61
 117+ C1CA 85 67 19 91
 117+ C1CE 62 96 6E 16
 117+ C1D2 96 6D 9A 69
 117+ C1D6 12 96 6E 92
 117+ C1DA 78 1A 91 78
 117+ C1DE 8C 7E 12 93
 117+ C1E2 78 9F 7E 12
 118+ C1E6 80 40 9F 67                          db 128, 064, 159, 103, 255, 161, 102, 171, 108, 031, 160, 102, 175, 127, 025, 175, 124, 200, 122, 022, 200, 121, 223, 120, 018, 224, 120, 225, 127, 026, 224, 119, 245, 116, 018, 246, 117, 254, 123, 018
 118+ C1EA FF A1 66 AB
 118+ C1EE 6C 1F A0 66
 118+ C1F2 AF 7F 19 AF
 118+ C1F6 7C C8 7A 16
 118+ C1FA C8 79 DF 78
 118+ C1FE 12 E0 78 E1
 118+ C202 7F 1A E0 77
 118+ C206 F5 74 12 F6
 118+ C20A 75 FE 7B 12
 119+ C20E 80 40 91 4A                          db 128, 064, 145, 074, 255, 145, 073, 158, 072, 031, 159, 072, 179, 064, 025, 159, 073, 185, 085, 022, 182, 084, 197, 076, 018, 195, 075, 207, 079, 026, 206, 079, 245, 063, 018, 206, 080, 245, 105, 018
 119+ C212 FF 91 49 9E
 119+ C216 48 1F 9F 48
 119+ C21A B3 40 19 9F
 119+ C21E 49 B9 55 16
 119+ C222 B6 54 C5 4C
 119+ C226 12 C3 4B CF
 119+ C22A 4F 1A CE 4F
 119+ C22E F5 3F 12 CE
 119+ C232 50 F5 69 12
 120+ C236
 121+ C236              ; Draw line at hl for b lines
 122+ C236 E5 C5        DrawLighningLine:       push    hl,,bc
 123+ C238 4E                                   ld      c,(hl)
 124+ C239 23                                   inc     hl
 125+ C23A 46                                   ld      b,(hl)
 126+ C23B 23                                   inc     hl
 127+ C23C 5E                                   ld      e,(hl)
 128+ C23D 23                                   inc     hl
 129+ C23E 56                                   ld      d,(hl)
 130+ C23F 23                                   inc     hl
 131+ C240 7E                                   ld      a,(hl)          ; colour
 132+ C241 CD 57 E8                             call    l2_draw_diagonal
 133+ C244 C1 E1                                pop     hl,,bc
 134+ C246 3E 05                                ld      a,5
 135+ C248 ED 31                                add     hl,a
 136+ C24A 10 EA                                djnz    DrawLighningLine
 137+ C24C C9                                   ret
 138+ C24D
 139+ C24D              ;Loop though all lines
 140+ C24D              ;   60$% chance of drawing a line, call draw line
 141+ C24D              ;   go to next line
 142+ C24D              ;repeat
 143+ C24D 06 07        hyperspace_Lightning:   ld      b, 7                    ; total number of lightning bolts
 144+ C24F 21 1E C1                             ld      hl,LightningLines
 145+ C252                                      MMUSelectLayer2
 145+ C252 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C256                                      ;break
 147+ C256              ; above here select which lines table we will use
 148+ C256 C5 E5        .LineLoop:              push    bc,,hl
 149+ C258 CD DE 87                             call    doRandom
 150+ C25B FE 1E                                cp      30
 151+ C25D 30 0C                                jr      nc,.NextLine
 152+ C25F CD DE 87                             call    doRandom
 153+ C262 E6 07                                and     $07
 154+ C264 3C                                   inc     a
 155+ C265 47                                   ld      b,a
 156+ C266 E1                                   pop     hl
 157+ C267 E5                                   push    hl
 158+ C268 CD 36 C2                             call    DrawLighningLine
 159+ C26B E1 C1        .NextLine:              pop     bc,,hl
 160+ C26D 16 08                                ld      d,8
 161+ C26F 1E 05                                ld      e,5
 162+ C271 ED 30                                mul
 163+ C273 19                                   add     hl,de
 164+ C274 10 E0                                djnz    .LineLoop
 165+ C276 3A 56 83                             ld      a,(HyperCircle)
 166+ C279 57                                   ld      d,a
 167+ C27A 01 80 40                             ld      bc, $4080
 168+ C27D                                      ;break
 169+ C27D 1E 00                                ld      e,$00
 170+ C27F CD 16 EC                             call    l2_draw_circle_fill; ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
 171+ C282 01 80 40                             ld      bc, $4080
 172+ C285 3A 56 83                             ld      a,(HyperCircle)
 173+ C288 3C                                   inc     a
 174+ C289 57                                   ld      d,a
 175+ C28A 1E FF                                ld      e,$FF
 176+ C28C CD A2 E9                             call    l2_draw_circle
 177+ C28F 3A 56 83                             ld      a,(HyperCircle)
 178+ C292 3C                                   inc     a
 179+ C293 3C                                   inc     a
 180+ C294 FE 40                                cp      64
 181+ C296 D0                                   ret     nc
 182+ C297 32 56 83                             ld      (HyperCircle),a
 183+ C29A                                      SetCarryFlag
 183+ C29A 37          >                        scf
 184+ C29B C9                                   ret
 185+ C29C
 186+ C29C
 187+ C29C              draw_hyperspace:        MMUSelectLayer1
 187+ C29C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 188+ C2A0 CD 80 E0                             call    l1_cls
 189+ C2A3 CD 9A E0                             call    l1_attr_cls
 190+ C2A6                                      MMUSelectLayer2
 190+ C2A6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 191+ C2AA CD 04 E0                             call     asm_l2_double_buffer_on
 192+ C2AD                                      MMUSelectSpriteBank
 192+ C2AD ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 193+ C2B1 CD 6E E5                             call    sprite_cls_cursors
 194+ C2B4                                      MMUSelectConsoleBank
 194+ C2B4 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 195+ C2B8 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
 196+ C2BB 11 00 E0                             ld          de,ConsoleImageData
 197+ C2BE 01 00 08                             ld          bc, ScreenL1BottomLen
 198+ C2C1 CD 58 7D                             call        memcopy_dma
 199+ C2C4 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 200+ C2C7 11 00 E8                             ld          de,ConsoleAttributes
 201+ C2CA 01 00 01                             ld          bc, ScreenL1AttrBtmLen
 202+ C2CD CD 58 7D                             call        memcopy_dma
 203+ C2D0 CD E5 7A                             call        InitialiseHyperStars
 204+ C2D3 AF                                   xor         a
 205+ C2D4 32 4C 83                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
 206+ C2D7 3E 02                                ld          a,2
 207+ C2D9 32 56 83                             ld          (HyperCircle),a
 208+ C2DC 3E FC                                ld          a,$FC
 209+ C2DE 32 4C 83                             ld          (DockedFlag),a
 210+ C2E1 C9                                   ret
 211+ C2E2
 212+ C2E2              ;----------------------------------------------------------------------------------------------------------------------------------
 213+ C2E2              front_warp:             ;call        SaveCurrentDust                         ; save current dust positions
 214+ C2E2 06 AF                                ld          b,175                                    ; loop for x iterations
 215+ C2E4 C5           .warploop:              push        bc
 216+ C2E5 CD 3D 7B                             call        DustForward
 217+ C2E8                                      MMUSelectLayer2
 217+ C2E8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 218+ C2EC CD 97 E2                             call        l2_flip_buffers
 219+ C2EF C1                                   pop         bc
 220+ C2F0 10 F2                                djnz        .warploop
 221+ C2F2 C9                                   ret
 222+ C2F3
 223+ C2F3              ;----------------------------------------------------------------------------------------------------------------------------------
 224+ C2F3 C9           loop_hyperspace         ret
 225+ C2F4              ;----------------------------------------------------------------------------------------------------------------------------------
 226+ C2F4              dampenRate:             equ     $04
 227+ C2F4 04           dampenRcounter:         DB      dampenRate
 228+ C2F5 04           dampenPcounter:         DB      dampenRate
 229+ C2F6              ;----------------------------------------------------------------------------------------------------------------------------------
 230+ C2F6              input_front_view:       ;DEFUNCT ClearEngineSoundChanged
 231+ C2F6 2A C4 7D                             ld      hl,(addr_Pressed_Accellerate)
 232+ C2F9 7E                                   ld      a,(hl)
 233+ C2FA                                      JumpIfAIsZero     .TestDecellerate
 233+ C2FA A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 233+ C2FB CA 17 C3    >                        jp	    z, .TestDecellerate
 234+ C2FE 3A 98 81                             ld      a,(SHIPMAXSPEED)
 235+ C301 57                                   ld      d,a
 236+ C302 3A 99 81                             ld      a,(DELTA)
 237+ C305                                      JumpIfAGTENusng d,.TestDecellerate
 237+ C305 BA          >                        cp     d
 237+ C306 D2 17 C3    >                        jp		nc,.TestDecellerate
 238+ C309 3C                                   inc     a
 239+ C30A 32 99 81                             ld      (DELTA),a
 240+ C30D 2A 9A 81                             ld      hl,(DELT4Lo)
 241+ C310 ED 34 04 00                          add     hl,4
 242+ C314 22 9A 81                             ld      (DELT4Lo),hl
 243+ C317                                      ;DEFUNCT SetEngineSoundChanged
 244+ C317 2A C6 7D     .TestDecellerate:       ld      hl,(addr_Pressed_Decellerate)
 245+ C31A 7E                                   ld      a,(hl)
 246+ C31B                                      JumpIfAIsZero   .TestLeftPressed
 246+ C31B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 246+ C31C CA 34 C3    >                        jp	    z, .TestLeftPressed
 247+ C31F 3A 99 81                             ld      a,(DELTA)
 248+ C322                                      JumpIfAIsZero   .TestLeftPressed
 248+ C322 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 248+ C323 CA 34 C3    >                        jp	    z, .TestLeftPressed
 249+ C326 3D                                   dec     a
 250+ C327 32 99 81                             ld      (DELTA),a
 251+ C32A 2A 9A 81                             ld      hl,(DELT4Lo)
 252+ C32D 2B                                   dec     hl
 253+ C32E 2B                                   dec     hl
 254+ C32F 2B                                   dec     hl
 255+ C330 2B                                   dec     hl
 256+ C331 22 9A 81                             ld      (DELT4Lo),hl
 257+ C334                                      ;DEFUNCT SetEngineSoundChanged
 258+ C334 2A BC 7D     .TestLeftPressed:       ld      hl,(addr_Pressed_RollLeft)
 259+ C337 7E                                   ld      a,(hl)
 260+ C338                                      JumpIfAIsZero   .TestRightPressed
 260+ C338 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 260+ C339 CA 4F C3    >                        jp	    z, .TestRightPressed
 261+ C33C 3A B6 80                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 262+ C33F 21 BD 80                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 263+ C342 BE                                   cp      (hl)
 264+ C343 28 0A                                jr      z,.TestRightPressed
 265+ C345                                      ;break
 266+ C345 3D                                   dec     a                                   ; increase joystick roll
 267+ C346 32 B6 80                             ld      (JSTX),a
 268+ C349 CD 10 C0                             call    draw_front_calc_alpha
 269+ C34C C3 84 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 270+ C34F 2A BE 7D     .TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 271+ C352 7E                                   ld      a,(hl)
 272+ C353                                      JumpIfAIsZero   .DampenRoll
 272+ C353 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 272+ C354 CA 6A C3    >                        jp	    z, .DampenRoll
 273+ C357 3A B6 80                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 274+ C35A 21 BC 80                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 275+ C35D BE                                   cp      (hl)
 276+ C35E 28 24                                jr      z,.TestDivePressed                   ; if its held then we don't dampen
 277+ C360                                      ;break
 278+ C360 3C                                   inc     a                                   ; increase joystick roll
 279+ C361 32 B6 80     .UpdateAlphRoll:        ld      (JSTX),a
 280+ C364 CD 10 C0                             call    draw_front_calc_alpha
 281+ C367 C3 84 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 282+ C36A 21 F4 C2     .DampenRoll:            ld      hl,dampenRcounter
 283+ C36D 35                                   dec     (hl)
 284+ C36E 20 14                                jr      nz,.TestDivePressed
 285+ C370 3E 04                                ld      a,dampenRate
 286+ C372 77                                   ld      (hl),a
 287+ C373 3A B6 80                             ld      a,(JSTX)
 288+ C376 FE 00                                cp      0
 289+ C378 28 0A                                jr      z, .TestDivePressed
 290+ C37A CB 7F                                bit     7,a
 291+ C37C 28 03                                jr      z,.PosRollDampen
 292+ C37E 3C           .NegRollDampen:         inc     a
 293+ C37F 18 01                                jr      .ApplyRollDampen
 294+ C381 3D           .PosRollDampen:         dec     a
 295+ C382 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 296+ C384              ; Dive and Climb input
 297+ C384 2A C0 7D     .TestDivePressed:       ld      hl,(addr_Pressed_Dive)
 298+ C387 7E                                   ld      a,(hl)
 299+ C388                                      JumpIfAIsZero   .TestClimbPressed
 299+ C388 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 299+ C389 CA 9F C3    >                        jp	    z, .TestClimbPressed
 300+ C38C 3A AC 80                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 301+ C38F 21 B1 80                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 302+ C392 BE                                   cp      (hl)
 303+ C393 28 0A                                jr      z,.TestClimbPressed
 304+ C395                                      ;break
 305+ C395 3D                                   dec     a                                   ; increase joystick roll
 306+ C396 32 AC 80                             ld      (JSTY),a
 307+ C399 CD 3D C0                             call    draw_front_calc_beta
 308+ C39C C3 D4 C3                             jp      .ForwardCursorKeysDone
 309+ C39F 2A C2 7D     .TestClimbPressed:      ld      hl,(addr_Pressed_Climb)
 310+ C3A2 7E                                   ld      a,(hl)
 311+ C3A3                                      JumpIfAIsZero   .DampenPitch
 311+ C3A3 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 311+ C3A4 CA BA C3    >                        jp	    z, .DampenPitch
 312+ C3A7 3A AC 80                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 313+ C3AA 21 B0 80                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 314+ C3AD BE                                   cp      (hl)
 315+ C3AE 28 24                                jr      z,.ForwardCursorKeysDone
 316+ C3B0 3C                                   inc     a                                   ; increase joystick roll
 317+ C3B1 32 AC 80     .UpdateBetaPitch:       ld      (JSTY),a
 318+ C3B4 CD 3D C0                             call    draw_front_calc_beta
 319+ C3B7 C3 D4 C3                             jp      .ForwardCursorKeysDone
 320+ C3BA 21 F5 C2     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 321+ C3BD 35                                   dec     (hl)
 322+ C3BE 20 14                                jr      nz,.ForwardCursorKeysDone
 323+ C3C0 3E 04                                ld      a,dampenRate
 324+ C3C2 77                                   ld      (hl),a
 325+ C3C3 3A AC 80                             ld      a,(JSTY)
 326+ C3C6 FE 00                                cp      0
 327+ C3C8 28 0A                                jr      z,.ForwardCursorKeysDone
 328+ C3CA CB 7F                                bit     7,a
 329+ C3CC 28 03                                jr      z,.PosPitchDampen
 330+ C3CE 3C           .NegPitchDampen:        inc     a
 331+ C3CF 18 01                                jr      .ApplyPitchDampen
 332+ C3D1 3D           .PosPitchDampen:        dec     a
 333+ C3D2 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 334+ C3D4              ; Now test hyperpsace. We can't be docked as this is a view routine piece of logic but for say local charts we may
 335+ C3D4              ; be in flight and they have to force a forward view when hyperspace is pressed
 336+ C3D4              ; We won't do galatic here, but for other views force to forward view
 337+ C3D4 3E 24        .ForwardCursorKeysDone: ld      a,c_Pressed_Hyperspace              ; Check for hyperspace
 338+ C3D6 CD 99 7E                             call    is_key_pressed
 339+ C3D9 20 48                                jr      nz,.NotHyperspace
 340+ C3DB              ; If we are in hyperspace countdown then test for hyperspace
 341+ C3DB 2A 52 83                             ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 342+ C3DE 7C                                   ld      a,h                                 ; hyperspace
 343+ C3DF B5                                   or      l                                   ; .
 344+ C3E0 20 41                                jr      nz,.CancelHyperspace                ; .
 345+ C3E2              ; check selected target if we find one then after gettting galaxy at bc a=0 if not found
 346+ C3E2 ED 5B 35 82                          ld      de,(PresentSystemX)
 347+ C3E6 2A 37 82                             ld      hl,(TargetSystemX)
 348+ C3E9 CD 59 99                             call    compare16HLDE
 349+ C3EC 28 35                                jr      z,.NoTargetSelected                 ; can't jump to current system
 350+ C3EE 3A 22 82                             ld      a,(Galaxy)
 351+ C3F1                                      MMUSelectGalaxyA
 351+ C3F1 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 352+ C3F4 ED 4B 37 82                          ld      bc,(TargetSystemX)
 353+ C3F8 CD BB FA                             call    galaxy_name_at_bc
 354+ C3FB FE 00                                cp      0
 355+ C3FD 28 24                                jr      z,.NotHyperspace
 356+ C3FF              ; check fuel is sufficient
 357+ C3FF ED 4B 35 82                          ld      bc,(PresentSystemX)
 358+ C403 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 359+ C407 ED 4B 37 82                          ld      bc,(TargetSystemX)
 360+ C40B ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 361+ C40F CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 362+ C412 7C                                   ld      a,h
 363+ C413 A7                                   and     a
 364+ C414 20 0D                                jr      nz,.InsufficientFuel            ; max jump capacity is 25 ly for any ship
 365+ C416 3A A7 87                             ld      a,(Fuel)
 366+ C419                                      JumpIfALTNusng    l, .InsufficientFuel
 366+ C419 BD          >                        cp      l
 366+ C41A DA 23 C4    >                        jp		c, .InsufficientFuel
 367+ C41D              ; set up timer countdown
 368+ C41D 21 0B 0B                             ld      hl,HyperSpaceTimers                 ; set both timers to 15
 369+ C420 22 52 83                             ld      (InnerHyperCount),hl                ; .
 370+ C423              .CancelHyperspace
 371+ C423              .NoTargetSelected
 372+ C423              .InsufficientFuel
 373+ C423              .NotHyperspace:
 374+ C423              ;--- Check for in system Jump---------------------------------------
 375+ C423 2A 52 83     .CheckForWarpPressd:    ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 376+ C426 7C                                   ld      a,h                                 ; hyperspace
 377+ C427 B5                                   or      l                                   ; .
 378+ C428 20 0B                                jr      nz,.WarpNotPressed
 379+ C42A 3E 54                                ld      a,c_Pressed_Warp
 380+ C42C CD 8C 7E                             call    is_key_up_state
 381+ C42F 28 04                                jr      z, .WarpNotPressed
 382+ C431                                      SetMemTrue  WarpPressed                     ; This signals the event , teh main loop will cancel this as an acknowlege
 382+ C431 AF          >                        xor     a
 382+ C432 32 7B 83    >                        ld      (WarpPressed),a
 383+ C435              .WarpNotPressed:
 384+ C435 CD 02 86     .CheckForLaserPressed:  call    IsLaserUseable                      ; no laser or destroyed?
 385+ C438 28 49                                jr      z,.CheckTargetting
 386+ C43A              .CanLaserStillFire:     SetMemFalse FireLaserPressed                ; default to no laser
 386+ C43A 3E FF       >                        ld      a,$FF
 386+ C43C 32 7A 83    >                        ld      (FireLaserPressed),a
 387+ C43F 3A E6 84                             ld      a,(CurrLaserPulseRate)              ; if not beam type
 388+ C442                                      JumpIfAIsZero .BeamType                     ; .
 388+ C442 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 388+ C443 CA 70 C4    >                        jp	    z, .BeamType
 389+ C446 47                                   ld      b,a                                 ; and not run out of pulses
 390+ C447 3A F4 84                             ld      a,(CurrLaserPulseRateCount)         ;
 391+ C44A 3A F1 84                             ld      a,(CurrLaserPulseOnCount)           ;    if not already on
 392+ C44D                                      JumpIfAEqNusng  b, .PulseLimitReached       ;
 392+ C44D B8          >                        cp     b
 392+ C44E CA 83 C4    >                        jp      z,.PulseLimitReached
 393+ C451 21 F2 84                             ld      hl,CurrLaserPulseOffCount           ;       and not in off phase
 394+ C454 B6                                   or      (hl)                                ;
 395+ C455 23                                   inc     hl  ; CurrLaserPulseRestCount       ;       and not in rest phase.
 396+ C456 B6                                   or      (hl)                                ;    .
 397+ C457 20 2A                                jr      nz, .CheckTargetting                ;    .
 398+ C459 3E 14        .IsFirePressed:         ld      a,c_Pressed_FireLaser               ;       if fire is pressed
 399+ C45B CD 8C 7E                             call    is_key_up_state                     ;       .
 400+ C45E 28 23                                jr      z,.CheckTargetting                  ;       .
 401+ C460 3A F4 84     .CanProcesFire:         ld      a,(CurrLaserPulseRateCount)         ;            pulse rate count ++
 402+ C463 3C                                   inc     a                                   ;            .
 403+ C464 32 F4 84     .StillHavePulsesLeft:   ld      (CurrLaserPulseRateCount),a         ;            .
 404+ C467                                      ldCopyByte CurrLaserPulseOnTime, CurrLaserPulseOnCount  ; pulse on count = pulse on time
 404+ C467 3A E7 84    >                        ld       a,(CurrLaserPulseOnTime)
 404+ C46A 32 F1 84    >                        ld       (CurrLaserPulseOnCount),a
 405+ C46D                                   ;   ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount; pulse off count = pulse off time
 406+ C46D                                   ;   ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount  ; pulse rest count = pulse rest time
 407+ C46D C3 83 C4                             jp      .CheckTargetting
 408+ C470 3E 14        .BeamType:              ld      a,c_Pressed_FireLaser               ; else (beam type) if fire is pressed
 409+ C472 CD 8C 7E                             call    is_key_up_state                     ;                   .
 410+ C475 28 0C                                jr      z,.CheckTargetting                  ;                   .
 411+ C477                                      SetMemTrue FireLaserPressed                 ;                   set pulse on to 1
 411+ C477 AF          >                        xor     a
 411+ C478 32 7A 83    >                        ld      (FireLaserPressed),a
 412+ C47B 3E 00                                ld      a,0
 413+ C47D 32 9C 81                             ld      (SoundFxToEnqueue),a
 414+ C480 C3 83 C4                             jp      .CheckTargetting
 415+ C483              .PulseLimitReached:     ;ZeroA                                       ;
 416+ C483                                      ;ld      (CurrLaserPulseRateCount),a         ;
 417+ C483                                      ;ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount   ; start the rest phase
 418+ C483              ; . Here we check to see if the target lock has been pressed
 419+ C483 CD C8 7F     .CheckTargetting:       call    TargetMissileTest
 420+ C486 3E 18        .CheckForMissile:       ld      a,c_Pressed_FireMissile             ; launch pressed?
 421+ C488 CD 99 7E                             call    is_key_pressed
 422+ C48B 20 13                                jr      nz,.NotMissileLaunch
 423+ C48D                                      AnyMissilesLeft
 423+ C48D 3A 42 82    >                        ld      a,(NbrMissiles)
 423+ C490 A7          >                        and     a
 424+ C491 28 0D                                jr      z,.NotMissileLaunch                 ; no missiles in rack
 425+ C493 CD A7 86                             call    IsMissileLockedOn
 426+ C496 28 08                                jr      z,.MissileNotLocked
 427+ C498              .MissileLaunch:         SetMissileLaunch
 427+ C498 3A D2 84    >                        ld      a,(MissileTargettingFlag)
 427+ C49B E6 0F       >                        and     $0F
 427+ C49D 32 D2 84    >                        ld      (MissileTargettingFlag),a
 428+ C4A0              .MissileNotLocked:                       ; later on we need a "bing bong" nose for trying to launch an unlocked missile
 429+ C4A0              .NotMissileLaunch:
 430+ C4A0 3A C5 87     .CheckForECM:           ld      a,(ECMPresent)
 431+ C4A3                                      JumpIfAEqNusng EquipmentItemNotFitted,.NoECM
 431+ C4A3 FE 00       >                        cp     EquipmentItemNotFitted
 431+ C4A5 CA C8 C4    >                        jp      z,.NoECM
 432+ C4A8 3A 43 82     .CheckECMActive:        ld      a,(PlayerECMActiveCount)
 433+ C4AB                                      JumpIfAIsNotZero .NoECM
 433+ C4AB A7          >                        and     a
 433+ C4AC C2 C8 C4    >                        jp	    nz,.NoECM
 434+ C4AF 3E 1C        .CheckForKeyPress:      ld      a, c_Pressed_ECM
 435+ C4B1 CD 99 7E                             call    is_key_pressed
 436+ C4B4 20 12                                jr      nz, .NoECM
 437+ C4B6              .FireECM:               SetMemToN      PlayerECMActiveCount, ECMCounterMax
 437+ C4B6 3E 80       >                        ld      a,ECMCounterMax
 437+ C4B8 32 43 82    >                        ld      (PlayerECMActiveCount),a
 438+ C4BB 3A B4 80                             ld      a,(ECMCountDown)
 439+ C4BE                                      JumpIfAGTENusng ECMCounterMax, .NoECM
 439+ C4BE FE 80       >                        cp     ECMCounterMax
 439+ C4C0 D2 C8 C4    >                        jp		nc,.NoECM
 440+ C4C3                                      SetMemToN      ECMCountDown, ECMCounterMax
 440+ C4C3 3E 80       >                        ld      a,ECMCounterMax
 440+ C4C5 32 B4 80    >                        ld      (ECMCountDown),a
 441+ C4C8 C9           .NoECM:                 ret
 442+ C4C9
 443+ C4C9
 444+ C4C9
 445+ C4C9
 446+ C4C9
 447+ C4C9
 448+ C4C9
# file closed: ./Views/Front_View.asm
 914  C4C9                  DISPLAY "Bank ",BankFrontView," - Bytes free ",/D, $2000 - ($-ViewFrontAddr), " - BankFrontView"
 915  C4C9              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
 916  C4C9                  SLOT    MenuStatusAddr
 917  C4C9                  PAGE    BankMenuStatus
 918  C4C9                  ORG     MenuStatusAddr
 919  C000                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 40 02 15 AF  status_boiler_text		DW $0240,txt_commander
   4+ C014 90 02 D3 84  						DW $0290,CommanderName
   5+ C018 08 0B 29 AF  						DW $0B08,txt_present_system
   6+ C01C 08 13 3C AF  						DW $1308,txt_hyperspace_system
   7+ C020 08 1B 4F AF  						DW $1B08,txt_condition
   8+ C024 08 23 5D AF  						DW $2308,txt_fuel
   9+ C028 08 2B 6B AF  						DW $2B08,txt_cash
  10+ C02C 08 33 79 AF  						DW $3308,txt_legal_status
  11+ C030 08 3B 87 AF  						DW $3B08,txt_rating
  12+ C034 08 4B 95 AF  						DW $4B08,txt_equipment
  13+ C038
  14+ C038 00 00        equipment_cursor		DW  $0000
  15+ C03A              present_position		equ	$0B98
  16+ C03A              hyperspace_position		equ	$1398
  17+ C03A              condition_position		equ	$1B70
  18+ C03A              fuel_position			equ	$2370
  19+ C03A              cash_position			equ	$2B70
  20+ C03A              legal_status_position	equ $3370
  21+ C03A              rank_position			equ $3B70
  22+ C03A              equipment_position		equ $5340
  23+ C03A              equipment_position2		equ $5378
  24+ C03A              equipmax_row			equ $FF
  25+ C03A
  26+ C03A 00           STAT_selected_row       DB 0
  27+ C03B 00           STAT_current_topItem    DB 0
  28+ C03C 00           STAT_current_end        DB 0
  29+ C03D              STAT_buffer_rows         EQU     128
  30+ C03D              STAT_buffer_row_len      EQU     24
  31+ C03D              STAT_eqip_window_len    EQU 10
  32+ C03D              STAT_display_buff_len   EQU     STAT_buffer_rows *   STAT_buffer_row_len
  33+ C03D 00 00 00...  STAT_display_buffer:    DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  34+ CC3D              STAT_position			equ $5840
  35+ CC3D 00 00 00...  STAT_cash_amount    	DS 10
  36+ CC47 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  37+ CC4B
  38+ CC4B 00 00 00...  stat_present_name       DS  30
  39+ CC69 00                                   DB  0
  40+ CC6A 00 00 00...  stat_target_name        DS  30
  41+ CC88 00                                   DB  0
  42+ CC89
  43+ CC89 21 7F E8     stat_copy_to_name:      ld      hl,GalaxyExpandedName
  44+ CC8C 01 1E 00                             ld      bc,30
  45+ CC8F ED B0                                ldir
  46+ CC91 C9                                   ret
  47+ CC92
  48+ CC92              ;----------------------------------------------------------------------------------------------------------------------------------
  49+ CC92              STAT_print_boiler_text: INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++CC92
   2++CC92              ;">print_boilder_text hl = text structure, b = message count"
   3++CC92              .BoilerTextLoop:
   4++CC92 C5           	push		bc			; Save Message Count loop value
   5++CC93 4E           	ld			c,(hl)		; Get Row into b
   6++CC94 23           	inc			hl
   7++CC95 46           	ld			b,(hl)		; Get Col into b
   8++CC96 23           	inc			hl
   9++CC97 5E           	ld			e,(hl)		; Get text address Lo into E
  10++CC98 23           	inc			hl
  11++CC99 56           	ld			d,(hl)		; Get text address Hi into E
  12++CC9A 23           	inc			hl
  13++CC9B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++CC9C EB           	ex			de,hl		; now hl = address of text data
  15++CC9D 1E FF        	ld			e,txt_status_colour
  16++CC9F C5           	push		bc
  17++CCA0 D1           	pop			de
  18++CCA1                  MMUSelectLayer1
  18++CCA1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++CCA5 CD C8 E0     	call		l1_print_at
  20++CCA8 E1           	pop			hl
  21++CCA9 C1           	pop			bc
  22++CCAA 10 E6        	djnz		.BoilerTextLoop
  23++CCAC C9           	ret
  24++CCAD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  50+ CCAD              ;----------------------------------------------------------------------------------------------------------------------------------
  51+ CCAD DD 22 51 CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  52+ CCB1 ED 53 53 CD                          ld (.STATclcn32zIX),de
  53+ CCB5 DD 21 4D CD                          ld ix,.STATclcn32t+36
  54+ CCB9 06 09                                ld b,9
  55+ CCBB 0E 00                                ld c,0
  56+ CCBD 3E 30        .STATclcn321:           ld a,'0'
  57+ CCBF B7                                   or a
  58+ CCC0 DD 5E 00     .STATclcn322:           ld e,(ix+0)
  59+ CCC3 DD 56 01                             ld d,(ix+1)
  60+ CCC6 2A 51 CD                             ld hl,(.STATclcn32z)
  61+ CCC9 ED 52                                sbc hl,de
  62+ CCCB 22 51 CD                             ld (.STATclcn32z),hl
  63+ CCCE DD 5E 02                             ld e,(ix+2)
  64+ CCD1 DD 56 03                             ld d,(ix+3)
  65+ CCD4 2A 53 CD                             ld hl,(.STATclcn32zIX)
  66+ CCD7 ED 52                                sbc hl,de
  67+ CCD9 22 53 CD                             ld (.STATclcn32zIX),hl
  68+ CCDC 38 04                                jr c,.STATclcn325
  69+ CCDE 0C                                   inc c
  70+ CCDF 3C                                   inc a
  71+ CCE0 18 DE                                jr .STATclcn322
  72+ CCE2 DD 5E 00     .STATclcn325:           ld e,(ix+0)
  73+ CCE5 DD 56 01                             ld d,(ix+1)
  74+ CCE8 2A 51 CD                             ld hl,(.STATclcn32z)
  75+ CCEB 19                                   add hl,de
  76+ CCEC 22 51 CD                             ld (.STATclcn32z),hl
  77+ CCEF DD 5E 02                             ld e,(ix+2)
  78+ CCF2 DD 56 03                             ld d,(ix+3)
  79+ CCF5 2A 53 CD                             ld hl,(.STATclcn32zIX)
  80+ CCF8 ED 5A                                adc hl,de
  81+ CCFA 22 53 CD                             ld (.STATclcn32zIX),hl
  82+ CCFD 11 FC FF                             ld de,-4
  83+ CD00 DD 19                                add ix,de
  84+ CD02 0C                                   inc c
  85+ CD03 0D                                   dec c
  86+ CD04 28 05                                jr z,.STATclcn323
  87+ CD06 FD 77 00                             ld (iy+0),a
  88+ CD09 FD 23                                inc iy
  89+ CD0B 10 B0        .STATclcn323:           djnz .STATclcn321
  90+ CD0D 3A 51 CD                             ld a,(.STATclcn32z)
  91+ CD10 C6 30                                add A,'0'
  92+ CD12 FD 77 00                             ld (iy+0),a
  93+ CD15 FD 36 02 00                          ld (iy+2),0
  94+ CD19 FD 7E 00                             ld      a,(IY+0)
  95+ CD1C FD 77 01                             ld      (IY+1),a
  96+ CD1F 3E 2E                                ld      a,"."
  97+ CD21 FD 77 00                             ld      (IY+0),a
  98+ CD24 FD 23                                inc     IY
  99+ CD26 FD 23                                inc     IY
 100+ CD28 C9                                   ret
 101+ CD29 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 101+ CD2D 0A 00 00 00
 101+ CD31 64 00 00 00
 101+ CD35 E8 03 00 00
 101+ CD39 10 27 00 00
 102+ CD3D A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 102+ CD41 40 42 0F 00
 102+ CD45 80 96 98 00
 102+ CD49 00 E1 F5 05
 102+ CD4D 00 CA 9A 3B
 103+ CD51 00 00        .STATclcn32z            ds 2
 104+ CD53 00 00        .STATclcn32zIX          ds 2
 105+ CD55              ;----------------------------------------------------------------------------------------------------------------------------------
 106+ CD55 2A A5 87     STAT_GetCash:           ld		hl,(Cash+2)
 107+ CD58 EB                                   ex      de,hl
 108+ CD59 DD 2A A3 87                          ld      ix,(Cash)
 109+ CD5D FD 21 3D CC                          ld		iy,STAT_cash_amount
 110+ CD61 CD AD CC                             call 	STAT_DispDEIXtoIY
 111+ CD64 FD E5                                push    iy
 112+ CD66 D1                                   pop     de
 113+ CD67 21 47 CC                             ld      hl,STAT_cash_UoM
 114+ CD6A 01 04 00                             ld      bc,4
 115+ CD6D ED B0                                ldir
 116+ CD6F C9                                   ret
 117+ CD70              ;----------------------------------------------------------------------------------------------------------------------------------
 118+ CD70 7E           STAT_expand_word:       ld      a,(hl)
 119+ CD71 FE 00                                cp      0
 120+ CD73 C8                                   ret     z
 121+ CD74 12                                   ld      (de),a
 122+ CD75 23                                   inc     hl
 123+ CD76 13                                   inc     de
 124+ CD77 18 F7                                jr      STAT_expand_word
 125+ CD79
 126+ CD79              ; hl = list of words
 127+ CD79              ; de = adress to expand to
 128+ CD79 7E           STAT_expand_name:       ld      a,(hl)
 129+ CD7A 47                                   ld      b,a
 130+ CD7B 23                                   inc     hl
 131+ CD7C 7E                                   ld      a,(hl)              ; its a 16 bit
 132+ CD7D 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 133+ CD7E B0                                   or      b
 134+ CD7F 20 01                                jr      nz,.MoreToDo
 135+ CD81              ;                        ld      (de),a we dont want the null marker now
 136+ CD81 C9                                   ret
 137+ CD82 E5 D5        .MoreToDo:              push    hl,,de
 138+ CD84 7E                                   ld      a,(hl)              ; bodge for now no optimise
 139+ CD85 5F                                   ld      e,a
 140+ CD86 23                                   inc     hl
 141+ CD87 7E                                   ld      a,(hl)
 142+ CD88 57                                   ld      d,a
 143+ CD89 EB                                   ex      hl,de               ; hl is now Word... address
 144+ CD8A D1                                   pop     de                  ; de back to pointer to buffer
 145+ CD8B CD 70 CD     .ProcessWord:           call    STAT_expand_word
 146+ CD8E 3E 20                                ld      a," "               ; speculative space
 147+ CD90 12                                   ld      (de),a
 148+ CD91 13                                   inc     de
 149+ CD92 E1                                   pop     hl                  ; get string pointer back
 150+ CD93 23                                   inc     hl
 151+ CD94 23                                   inc     hl                  ; on to next word
 152+ CD95 18 E2                                jr      STAT_expand_name
 153+ CD97
 154+ CD97              STAT_First_Item         EQU     EQ_CARGO_BAY
 155+ CD97 3A 22 82     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 156+ CD9A                                      MMUSelectGalaxyA
 156+ CD9A ED 92 57    >                     nextreg GalaxyDataMMU,     a
 157+ CD9D 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 158+ CDA0 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 159+ CDA2 11 00 0C                             ld      de, STAT_display_buff_len
 160+ CDA5 CD 32 7D                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 161+ CDA8 21 54 C0                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 162+ CDAB 11 18 00                             ld      de,STAT_buffer_row_len
 163+ CDAE 06 80                                ld      b,STAT_buffer_rows
 164+ CDB0                                      ZeroA
 164+ CDB0 AF          >                        xor a
 165+ CDB1 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 166+ CDB2 19                                   add     hl,de
 167+ CDB3 10 FC                                djnz    .EoLLoop
 168+ CDB5 DD 21 C4 87                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 169+ CDB9 FD 21 3D C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 170+ CDBD 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; we do not include Fuel and Missile counts
 171+ CDBF 0E 00                                ld      c,0                                         ; Current Row
 172+ CDC1 1E 02                                ld      e,STAT_First_Item
 173+ CDC3 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 174+ CDC6                                      JumpIfAIsZero .NotFitted                            ; optimised check for EquipmentItemNotFitted
 174+ CDC6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 174+ CDC7 CA EB CD    >                        jp	    z, .NotFitted
 175+ CDCA D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 175+ CDCE E5 C5
 176+ CDD0 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 177+ CDD3 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 178+ CDD5 ED 30                                mul
 179+ CDD7 19                                   add     hl,de                                       ; hl = dword list of work pointers
 180+ CDD8 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 181+ CDDC CD 79 CD                             call    STAT_expand_name                           ; expand name
 182+ CDDF C1 DD E1 FD                          pop     iy,,ix,,bc
 182+ CDE3 E1
 183+ CDE4 11 18 00                             ld      de,STAT_buffer_row_len
 184+ CDE7 FD 19                                add     iy,de                                       ; now iy = start of next column
 185+ CDE9 D1                                   pop     de
 186+ CDEA 0C                                   inc     c
 187+ CDEB              .NotFitted:
 188+ CDEB DD 23        .DoneFittedCheck:       inc     ix
 189+ CDED 1C                                   inc     e
 190+ CDEE 10 D3                                djnz    .ProcessRow
 191+ CDF0 79           .DoneProcess:           ld      a,c
 192+ CDF1 32 3C C0                             ld      (STAT_current_end),a
 193+ CDF4 C9                                   ret
 194+ CDF5
 195+ CDF5 06 0A        draw_STAT_boilertext:   ld		b,10
 196+ CDF7 21 10 C0                             ld		hl,status_boiler_text
 197+ CDFA CD 92 CC                             call	STAT_print_boiler_text
 198+ CDFD C9                                   ret
 199+ CDFE
 200+ CDFE              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ CDFE 01 01 01     draw_STAT_maintext:    	ld		bc,$0101
 202+ CE01 11 FD BE                             ld		de,$BEFD
 203+ CE04 3E C0                                ld		a,$C0
 204+ CE06                                      MMUSelectLayer2
 204+ CE06 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 205+ CE0A CD FC E3                             call	l2_draw_box
 206+ CE0D CD F5 CD                             call    draw_STAT_boilertext
 207+ CE10 3A 22 82     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 208+ CE13                                      MMUSelectGalaxyA
 208+ CE13 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 209+ CE16 ED 4B 35 82                          ld      bc, (PresentSystemX)
 210+ CE1A CD BB FA                             call    galaxy_name_at_bc
 211+ CE1D 11 4B CC                             ld      de,stat_present_name
 212+ CE20 CD 89 CC                             call    stat_copy_to_name
 212+ CE23
 213+ CE23 01 98 0B                             ld      bc,present_position
 214+ CE26 21 4B CC                             ld      hl,stat_present_name
 215+ CE29                                      MMUSelectLayer2
 215+ CE29 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 216+ CE2D 1E FF                                ld      e,txt_status_colour
 217+ CE2F CD 61 E3                             call    l2_print_at
 218+ CE32 3A 22 82     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 219+ CE35                                      MMUSelectGalaxyA
 219+ CE35 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 220+ CE38 ED 4B 37 82                          ld      bc, (TargetSystemX)
 221+ CE3C CD BB FA                             call    galaxy_name_at_bc
 222+ CE3F 11 6A CC                             ld      de,stat_target_name
 223+ CE42 CD 89 CC                             call    stat_copy_to_name
 223+ CE45
 224+ CE45 01 98 13                             ld      bc,hyperspace_position
 225+ CE48 21 6A CC                             ld      hl,stat_target_name
 226+ CE4B                                      MMUSelectLayer2
 226+ CE4B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 227+ CE4F 1E FF                                ld      e,txt_status_colour
 228+ CE51 CD 61 E3                             call    l2_print_at
 229+ CE54 CD 09 CF     .StatusText:	        call	get_cmdr_condition
 230+ CE57 21 13 8A                             ld		hl, ConditionNameIdx
 231+ CE5A CD 2B 8B                             call	getTableText
 232+ CE5D 01 70 1B                             ld		bc,condition_position
 233+ CE60                                      MMUSelectLayer2
 233+ CE60 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 234+ CE64 1E FF                                ld      e,txt_status_colour
 235+ CE66 CD 61 E3                             call    l2_print_at
 236+ CE69 CD F2 AF     .DisplayFuel:           call	GetFuelLevel
 237+ CE6C 21 A0 AF                             ld		hl, txt_fuel_level
 238+ CE6F 7E                                   ld		a,(hl)
 239+ CE70 FE 30                                cp		'0'
 240+ CE72 20 01                                jr		nz,.PrintFuel
 241+ CE74 23           .SkipLeadingZero:	    inc		hl
 242+ CE75 01 70 23     .PrintFuel:             ld		bc,fuel_position
 243+ CE78                                      MMUSelectLayer2
 243+ CE78 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 244+ CE7C 1E FF                                ld      e,txt_status_colour
 245+ CE7E CD 61 E3                             call    l2_print_at
 246+ CE81 CD 55 CD     .DisplayCash:           call	STAT_GetCash
 247+ CE84 01 70 2B                             ld		bc,cash_position
 248+ CE87 21 3D CC                             ld		hl,STAT_cash_amount
 249+ CE8A                                      MMUSelectLayer2
 249+ CE8A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 250+ CE8E 1E FF                                ld      e,txt_status_colour
 251+ CE90 CD 61 E3                             call    l2_print_at
 252+ CE93 3A 44 82     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 253+ CE96 FE 00                                cp		0
 254+ CE98 20 05                                jr		nz,.Naughty
 255+ CE9A 21 0A 8C                             ld		hl,WordClean
 256+ CE9D 18 0C                                jr		.DisplayLegalStatus
 257+ CE9F FE 32        .Naughty:               cp		50
 258+ CEA1 38 05                                jr		c,.JustOffender
 259+ CEA3 21 19 8C     .VeryNaughty:           ld		hl,WordFugitive
 260+ CEA6 18 03                                jr		.DisplayLegalStatus
 261+ CEA8 21 10 8C     .JustOffender:          ld		hl,WordOffender
 262+ CEAB 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 263+ CEAE                                      MMUSelectLayer2
 263+ CEAE ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 264+ CEB2 1E FF                                ld      e,txt_status_colour
 265+ CEB4 CD 61 E3                             call    l2_print_at
 266+ CEB7 3A 47 82     .DisplayRating:         ld      a,(CurrentRank)
 267+ CEBA                                      ; now cached ld		de,(KillTally)
 268+ CEBA                                      ; now cached call	getRankIndex
 269+ CEBA 21 15 8B                             ld		hl, RankingNameIdx
 270+ CEBD CD 2B 8B                             call	getTableText
 271+ CEC0 01 70 3B                             ld		bc,rank_position
 272+ CEC3                                      MMUSelectLayer2
 272+ CEC3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 273+ CEC7 1E FF                                ld      e,txt_status_colour
 274+ CEC9 CD 61 E3                             call    l2_print_at
 275+ CECC C9                                   ret
 276+ CECD
 277+ CECD
 278+ CECD              draw_STAT_items:        MMUSelectLayer1
 278+ CECD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 279+ CED1 CD 80 E0                             call    l1_cls
 280+ CED4                                      ; add in all the status stuff later
 281+ CED4 3A 3B C0                             ld      a,(STAT_current_topItem)                    ; Move to correct top of stat list item
 282+ CED7 16 18                                ld      d,STAT_buffer_row_len                       ; so de = offset to first item in display
 283+ CED9 5F                                   ld      e,a
 284+ CEDA ED 30                                mul
 285+ CEDC 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl = pointer to first item in display
 286+ CEDF 19                                   add     hl,de                                       ;
 287+ CEE0 3A 3B C0                             ld      a,(STAT_current_topItem)                    ; set a to number of lines to display
 288+ CEE3 47                                   ld      b,a                                         ;
 289+ CEE4 3A 3C C0                             ld      a,(STAT_current_end)                        ;
 290+ CEE7 90                                   sub     b                                           ;
 291+ CEE8                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen   ; if there are enough then just do a screen fill
 291+ CEE8 FE 0A       >                        cp      STAT_eqip_window_len
 291+ CEEA DA F1 CE    >                        jp		c, .FillScreen
 292+ CEED 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len                      ; if its more than a screen then window
 293+ CEEF 18 01                                jr      .ReadyToPrint
 294+ CEF1 47           .FillScreen:            ld      b,a                                         ; b = the mumber of rows to display
 295+ CEF2 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 296+ CEF5 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                                ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 297+ CEF8 CD C8 E0                             call    l1_print_at
 297+ CEFB
 298+ CEFB C1 E1                                pop     hl,,bc                                      ; get mesage addr back and move down one line
 299+ CEFD 11 18 00                             ld      de,STAT_buffer_row_len
 300+ CF00 19                                   add     hl,de
 301+ CF01 D1                                   pop     de                                           ; get output row back
 302+ CF02 3E 08                                ld      a,8
 303+ CF04 82                                   add     a,d
 304+ CF05 57                                   ld      d,a
 305+ CF06 10 ED                                djnz    .DrawARow
 306+ CF08 C9                                   ret
 307+ CF09
 308+ CF09              ;----------------------------------------------------------------------------------------------------------------------------------
 309+ CF09
 310+ CF09 3A 4C 83     get_cmdr_condition:     ld			a,(DockedFlag)
 311+ CF0C FE FF                                cp			StatePlayerDocked
 312+ CF0E 28 17                                jr			z,.PlayerIsDocked
 313+ CF10              .PlayerNotDocked:	    ReturnIfMemTrue    SpaceStationSafeZone
 313+ CF10 3A 3B 82    >                        ld      a,(SpaceStationSafeZone)
 313+ CF13 A7          >                        and     a
 313+ CF14 C8          >                        ret     z
 314+ CF15 CD 60 87                             call        AreShipsPresent
 315+ CF18 38 03                                jr          c,.NoShipsAround
 316+ CF1A 3E 01                                ld          a,1
 317+ CF1C C9                                   ret
 318+ CF1D 3A CF 84     .NoShipsAround:         ld			a,(PlayerEnergy)
 319+ CF20 FE 80                                cp			$80
 320+ CF22 3E 01                                ld          a,1
 321+ CF24 CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 322+ CF26 C9                                   ret
 323+ CF27 AF           .PlayerIsDocked:        xor			a
 324+ CF28 C9                                   ret
 325+ CF29
 326+ CF29              draw_status_menu:       InitNoDoubleBuffer
 326+ CF29             >                            MMUSelectLayer1
 326+ CF29 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 326+ CF2D CD 80 E0    >                            call	l1_cls
 326+ CF30 3E 07       >                            ld		a,7
 326+ CF32 CD 9B E0    >                            call	l1_attr_cls_to_a
 326+ CF35             >                            MMUSelectLayer2
 326+ CF35 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 326+ CF39 CD 0A E0    >                            call    asm_l2_double_buffer_off
 326+ CF3C CD 0E E2    >                            call	l2_cls	; Get some space
 326+ CF3F             >                            MMUSelectSpriteBank
 326+ CF3F ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 326+ CF43 CD 6E E5    >                            call    sprite_cls_cursors
 327+ CF46 3E 08                                ld		a,8
 328+ CF48 32 AC 81                             ld		(MenuIdMax),a
 329+ CF4B 01 01 01     .Drawbox:               ld		bc,$0101
 330+ CF4E 11 FD BE                             ld		de,$BEFD
 331+ CF51 3E C0                                ld		a,$C0
 332+ CF53                                      MMUSelectLayer2
 332+ CF53 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 333+ CF57 CD FC E3                             call	l2_draw_box
 334+ CF5A 01 01 0A                             ld		bc,$0A01
 335+ CF5D 11 C0 FE                             ld		de,$FEC0
 336+ CF60                                      SetMemToN STAT_current_topItem, 0
 336+ CF60 3E 00       >                        ld      a,0
 336+ CF62 32 3B C0    >                        ld      (STAT_current_topItem),a
 337+ CF65 CD 87 E4                             call	l2_draw_horz_line
 338+ CF68 CD 97 CD     .equipment              call    STAT_buffer_list
 339+ CF6B CD CD CE                             call    draw_STAT_items
 340+ CF6E CD FE CD                             call    draw_STAT_maintext
 341+ CF71 C9                                   ret
 342+ CF72
 343+ CF72              ;----------------------------------------------------------------------------------------------------------------------------------
 344+ CF72              ; Handles all the input whilst in the market menu
 345+ CF72 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 346+ CF74 CD 99 7E                             call    is_key_pressed
 347+ CF77 CC 83 CF                             call    z,STAT_UpPressed
 348+ CF7A 3E 4C                                ld      a,c_Pressed_CursorDown
 349+ CF7C CD 99 7E                             call    is_key_pressed
 350+ CF7F CC 98 CF                             call    z,STAT_DownPressed
 351+ CF82 C9                                   ret
 352+ CF83
 353+ CF83              ;----------------------------------------------------------------------------------------------------------------------------------
 354+ CF83 AF           STAT_UpPressed:         xor     a
 355+ CF84 32 3A C0                             ld      (STAT_selected_row),a
 356+ CF87 3A 3B C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 357+ CF8A FE 00                                cp      0
 358+ CF8C C8                                   ret     z
 359+ CF8D 3D                                   dec     a           ; chjange later to buffering step back 1
 360+ CF8E 32 3B C0                             ld      (STAT_current_topItem),a
 361+ CF91 CD CD CE                             call    draw_STAT_items
 362+ CF94 CD F5 CD                             call    draw_STAT_boilertext
 363+ CF97 C9                                   ret
 364+ CF98              ;----------------------------------------------------------------------------------------------------------------------------------
 365+ CF98 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 366+ CF9A 32 3A C0                             ld      (STAT_selected_row),a
 367+ CF9D 3A 3C C0                             ld      a,(STAT_current_end)
 368+ CFA0 47                                   ld      b,a                             ; This check is if the current list is < one screen
 369+ CFA1 05                                   dec     b
 370+ CFA2 3A 3A C0                             ld      a,(STAT_selected_row)
 371+ CFA5 B8                                   cp      b
 372+ CFA6 C8                                   ret     z
 373+ CFA7 FE 09                                cp      STAT_eqip_window_len-1
 374+ CFA9 28 05                                jr      z, .check_scroll_down
 375+ CFAB 21 3A C0                             ld      hl,STAT_selected_row
 376+ CFAE 34                                   inc     (hl)
 377+ CFAF C9                                   ret
 378+ CFB0 47           .check_scroll_down:     ld      b,a
 379+ CFB1 3A 3B C0                             ld      a,(STAT_current_topItem)
 380+ CFB4 80                                   add     b
 381+ CFB5 3C                                   inc     a
 382+ CFB6 21 3C C0                             ld      hl,STAT_current_end
 383+ CFB9                                      ReturnIfAGTEusng      (hl)
 383+ CFB9 BE          >                        cp    (hl)
 383+ CFBA D0          >                        ret	 nc
 384+ CFBB 21 3B C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 385+ CFBE 34                                   inc     (hl)
 386+ CFBF CD CD CE                             call    draw_STAT_items
 387+ CFC2 CD F5 CD                             call    draw_STAT_boilertext
 388+ CFC5 C9                                   ret
 389+ CFC6
# file closed: ./Menus/status_menu.asm
 920  CFC6                  DISPLAY "Bank ",BankMenuStatus," - Bytes free ",/D, $2000 - ($-MenuStatusAddr), " - BankMenuStatus"
 921  CFC6              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
 922  CFC6                  SLOT    MenuEquipSAddr
 923  CFC6                  PAGE    BankMenuEquipS
 924  CFC6                  ORG     MenuEquipSAddr
 925  C000                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 50 92  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E              .BoilerTextLoop:
   4++D26E C5           	push		bc			; Save Message Count loop value
   5++D26F 4E           	ld			c,(hl)		; Get Row into b
   6++D270 23           	inc			hl
   7++D271 46           	ld			b,(hl)		; Get Col into b
   8++D272 23           	inc			hl
   9++D273 5E           	ld			e,(hl)		; Get text address Lo into E
  10++D274 23           	inc			hl
  11++D275 56           	ld			d,(hl)		; Get text address Hi into E
  12++D276 23           	inc			hl
  13++D277 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++D278 EB           	ex			de,hl		; now hl = address of text data
  15++D279 1E FF        	ld			e,txt_status_colour
  16++D27B C5           	push		bc
  17++D27C D1           	pop			de
  18++D27D                  MMUSelectLayer1
  18++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++D281 CD C8 E0     	call		l1_print_at
  20++D284 E1           	pop			hl
  21++D285 C1           	pop			bc
  22++D286 10 E6        	djnz		.BoilerTextLoop
  23++D288 C9           	ret
  24++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A A5 87     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A A3 87                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD C8 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD 32 7D                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D6 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 80 E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD C8 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        InitNoDoubleBuffer
 377+ D3EA             >                            MMUSelectLayer1
 377+ D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 377+ D3EE CD 80 E0    >                            call	l1_cls
 377+ D3F1 3E 07       >                            ld		a,7
 377+ D3F3 CD 9B E0    >                            call	l1_attr_cls_to_a
 377+ D3F6             >                            MMUSelectLayer2
 377+ D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ D3FA CD 0A E0    >                            call    asm_l2_double_buffer_off
 377+ D3FD CD 0E E2    >                            call	l2_cls	; Get some space
 377+ D400             >                            MMUSelectSpriteBank
 377+ D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 377+ D404 CD 6E E5    >                            call    sprite_cls_cursors
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 AC 81                             ld      (MenuIdMax),a
 380+ D40C 3A 22 82     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,     a
 382+ D412 CD 6D F9                             call    galaxy_planet_data
 383+ D415 CD F5 F8                             call    galaxy_equip_market
 384+ D418 ED 4B 35 82                          ld      bc,(PresentSystemX)
 385+ D41C CD BB FA                             call    galaxy_name_at_bc
 386+ D41F CD 6D F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD FC E3                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD 87 E4                             call	l2_draw_horz_line
 398+ D441 3A 22 82     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD CB 91                             call	expandTokenToString
 402+ D44C CD 7A F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD 99 7E                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD 99 7E                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD 99 7E                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD 99 7E                             call    is_key_pressed
 443+ D4A3 CC 68 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >                        cp    (hl)
 481+ D4EA D0          >                        ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A 22 82     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 489+ D4F9 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2F                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD C5 93                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 C2 87                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),EquipmentItemNotFitted; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 08                             ld      a,(ix+8)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 BA 87     .ItsALaser              ld      hl,LaserType        ; clear out respective current laser
 523+ D541 47                                   ld      b,a
 524+ D542 DD 7E 09                             ld      a,(ix+9)
 525+ D545 ED 31                                add     hl,a
 526+ D547 36 FF                                ld      (hl),$FF            ; $FF = not fitted
 527+ D549 C9                                   ret
 528+ D54A DD 5E 04     .RefundMissle           ld      e,(ix+4)
 529+ D54D DD 56 05                             ld      d,(ix+5)
 530+ D550 E5 C5                                push    hl,,bc
 531+ D552 CD C5 93                             call    addDEtoCash         ; refund laser value
 532+ D555 C1 E1                                pop     hl,,bc
 533+ D557 DD 7E 07                             ld      a,(ix+7)
 534+ D55A 3D                                   dec     a
 535+ D55B FE 30                                cp      "0"
 536+ D55D 20 02                                jr      nz,.NotAllSold
 537+ D55F 3E 2D        .AllSold:               ld      a,"-"
 538+ D561 DD 77 07     .NotAllSold:            ld      (ix+7),a
 539+ D564 CD 5D D4                             call    eqip_refesh_buffer
 540+ D567 C9                                   ret
 541+ D568              ;----------------------------------------------------------------------------------------------------------------------------------
 542+ D568 3A 22 82     eqshp_RightPressed:     ld      a,(Galaxy)
 543+ D56B                                      MMUSelectGalaxyA
 543+ D56B ED 92 57    >                     nextreg GalaxyDataMMU,     a
 544+ D56E DD 21 D6 F4                          ld      ix,ShipEquipmentList
 545+ D572 3A 90 C0                             ld      a,(eqshp_current_topItem)
 546+ D575 47                                   ld      b,a
 547+ D576 3A 8F C0                             ld      a,(eqshp_selected_row)
 548+ D579 80                                   add     a,b
 549+ D57A FE 01                                cp      EQ_MISSILE
 550+ D57C 20 0A                                jr      nz,.NotAMissileBuy
 551+ D57E 08           .ItsAMissile:           ex      af,af'
 552+ D57F 3E 34                                ld      a,"4"
 553+ D581 32 9A D5                             ld      (.CompareCheck+1),a
 554+ D584 08                                   ex      af,af'
 555+ D585 C3 8F D5                             jp      .FindInTable
 556+ D588 08           .NotAMissileBuy:        ex      af,af'
 557+ D589 3E 2A                                ld      a,"*"
 558+ D58B 32 9A D5                             ld      (.CompareCheck+1),a
 559+ D58E 08                                   ex      af,af'
 560+ D58F 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 561+ D591 5F                                   ld      e,a
 562+ D592 ED 30                                mul
 563+ D594 DD 19                                add     ix,de
 564+ D596 DD 7E 07                             ld      a,(ix+7)
 565+ D599 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 566+ D59B C8                                   ret     z
 567+ D59C 47           .Purchasable:           ld      b,a
 568+ D59D DD 7E 06                             ld      a,(ix+6)
 569+ D5A0 FE 01                                cp      EQ_MISSILE
 570+ D5A2 20 06                                jr      nz,.NotMissleMax
 571+ D5A4 21 42 82     .MissleQuanity:         ld      hl,NbrMissiles
 572+ D5A7 78                                   ld      a,b
 573+ D5A8 BE                                   cp      (hl)
 574+ D5A9 C8                                   ret     z
 575+ D5AA 4F           .NotMissleMax:          ld      c,a
 576+ D5AB DD 7E 01                             ld      a,(ix+1)
 577+ D5AE FE FF                                cp      $FF
 578+ D5B0 C8                                   ret     z
 579+ D5B1              .CheckCash:             JumpIfMemIsNotZero  Cash+2 , .MoreThanRequired      ; Nothing in game > 65535CR
 579+ D5B1 3A A5 87    >                        ld      a,(Cash+2)
 579+ D5B4 A7          >                        and     a
 579+ D5B5 C2 C5 D5    >                        jp	    nz,.MoreThanRequired
 580+ D5B8 2A A3 87                             ld      hl,(Cash)                                   ; hl = lower 16 bits of cash
 581+ D5BB DD 5E 04                             ld      e,(ix+4)
 582+ D5BE DD 56 05                             ld      d,(ix+5)
 583+ D5C1 CD 59 99                             call	compare16HLDE
 584+ D5C4 D8                                   ret     c                                           ; Insufficient Funds
 585+ D5C5 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 586+ D5C8 FE 00                                cp      0
 587+ D5CA 28 15                                jr      z,.MaxFuelOut
 588+ D5CC FE 01                                cp      1
 589+ D5CE 28 1B                                jr      z,.AddMissle
 590+ D5D0                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 590+ D5D0 FE 0A       >                        cp     EQ_FRONT_PULSE
 590+ D5D2 D2 F5 D5    >                        jp		nc,.AddLaser
 591+ D5D5 21 C2 87     .AddNormalItem:         ld      hl,EquipmentFitted
 592+ D5D8 ED 31                                add     hl,a
 593+ D5DA 36 FF                                ld      (hl),EquipmentItemFitted
 594+ D5DC 3E 2A                                ld      a,"*"
 595+ D5DE C3 3D D6                             jp      .AddedItem
 596+ D5E1              .MaxFuelOut:            MaxFuelMacro
 596+ D5E1 3E 46       >						ld		a,MaxFuelLevel
 596+ D5E3 32 A7 87    >						ld		(Fuel),a
 597+ D5E6 3E 2A                                ld      a,"*"
 598+ D5E8 C3 3D D6                             jp      .AddedItem
 599+ D5EB 21 42 82     .AddMissle:             ld      hl,NbrMissiles
 600+ D5EE 34                                   inc     (hl)
 601+ D5EF 7E                                   ld      a,(hl)
 602+ D5F0 C6 30                                add     "0"
 603+ D5F2 C3 3D D6                             jp      .AddedItem
 604+ D5F5 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get if its a laser, $FF = no laser
 605+ D5F8 FE FF                                cp      $FF
 606+ D5FA 20 29                                jr      nz,.BuyLaser
 607+ D5FC              .LargeCargoBay: ;TODO
 608+ D5FC 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 609+ D5FD 21 D6 F4                             ld      hl,ShipEquipmentList
 610+ D600 16 10                                ld      d,ShipEquipTableRowLen
 611+ D602 5F                                   ld      e,a
 612+ D603 ED 30                                mul
 613+ D605 19                                   add     hl,de               ; now we have the row for the current laser
 614+ D606 3E 04                                ld      a,4
 615+ D608 ED 31                                add     hl,a
 616+ D60A 7E                                   ld      a,(hl)
 617+ D60B 5F                                   ld      e,a
 618+ D60C 23                                   inc     hl
 619+ D60D 7E                                   ld      a,(hl)
 620+ D60E 57                                   ld      d,a
 621+ D60F E5 C5                                push    hl,,bc
 622+ D611 CD C5 93                             call    addDEtoCash         ; refund laser value
 623+ D614 C1 E1                                pop     hl,,bc
 624+ D616 3E 02                                ld      a,2
 625+ D618 ED 31                                add     hl,a
 626+ D61A 3E 2D                                ld      a,"-"
 627+ D61C 77                                   ld      (hl),a              ; clear on ship equipment
 628+ D61D 21 C2 87                             ld      hl,EquipmentFitted
 629+ D620 79                                   ld      a,c                 ; get back current laser ref
 630+ D621 ED 31                                add     hl,a
 631+ D623 36 00                                ld      (hl),EquipmentItemNotFitted  ; remove laser from equipment
 632+ D625 21 C2 87     .BuyLaser:              ld      hl,EquipmentFitted
 633+ D628 DD 7E 06                             ld      a,(ix+6)
 634+ D62B ED 31                                add     hl,a
 635+ D62D 36 FF                                ld      (hl),EquipmentItemFitted
 636+ D62F DD 7E 09                             ld      a,(ix+9)            ; get laser position
 637+ D632 21 BA 87                             ld      hl,LaserType
 638+ D635 ED 31                                add     hl,a
 639+ D637 DD 7E 08                             ld      a,(ix+8)            ; get type
 640+ D63A 77                                   ld      (hl),a
 641+ D63B 3E 2A                                ld      a,"*"
 642+ D63D DD 77 07     .AddedItem              ld      (ix+7),a
 643+ D640 DD 5E 04                             ld      e,(ix+4)
 644+ D643 DD 56 05                             ld      d,(ix+5)
 645+ D646 CD D8 93                             call    subDEfromCash
 646+ D649 CD 5D D4                             call    eqip_refesh_buffer
 647+ D64C C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
 926  D64D                  DISPLAY "Bank ",BankMenuEquipS," - Bytes free ",/D, $2000 - ($-MenuEquipSAddr), " - BankMenuEquipS"
 927  D64D              ; Bank 65  ------------------------------------------------------------------------------------------------------------------------
 928  D64D                                  SLOT    LaunchShipAddr
 929  D64D                                  PAGE    BankLaunchShip
 930  D64D                                  ORG     LaunchShipAddr
 931  C000                                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD 7A E4                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD 7A E4                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD 57 E8                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD 57 E8                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD 58 7D                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD 58 7D                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 80 E0                             call    l1_cls
 129+ C180 CD 9A E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD 6E E5                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 04 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 38 E1                             ld      (l2_cls_byte),a
 136+ C196 CD 77 E1                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 38 E1                             ld      (l2_cls_byte),a
 139+ C19E CD DE E1                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD 97 E2                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 38 E1                             ld      (l2_cls_byte),a
 146+ C1B3 CD 77 E1                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 38 E1                             ld      (l2_cls_byte),a
 149+ C1BB CD DE E1                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A 98 81    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 99 81    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 9A 81 >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 99 81    >                        ld      (DELTA),a
 160+ C1E9 32 9A 81    >                        ld      (DELT4Lo),a
 160+ C1EC 32 9B 81    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,StateInTransition
 163+ C1F1 32 4C 83                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5              draw_docking_ship:      MMUSelectLayer1
 167+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 168+ C1F9 CD 80 E0                             call    l1_cls
 169+ C1FC CD 9A E0                             call    l1_attr_cls
 170+ C1FF                                      MMUSelectSpriteBank
 170+ C1FF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 171+ C203 CD 6E E5                             call    sprite_cls_cursors
 172+ C206                                      MMUSelectLayer2
 172+ C206 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173+ C20A CD 04 E0                             call    asm_l2_double_buffer_on
 174+ C20D 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 175+ C20F 32 38 E1                             ld      (l2_cls_byte),a
 176+ C212 CD 77 E1                             call    l2_set_color_upper2
 177+ C215 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 178+ C217 32 38 E1                             ld      (l2_cls_byte),a
 179+ C21A CD DE E1                             call    l2_cls_lower_third
 180+ C21D CD 07 C1                             call    LaunchTubeEdges
 181+ C220 CD 5C C1                             call    LaunchConsole
 182+ C223              .NextBuffer:            MMUSelectLayer2
 182+ C223 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183+ C227 CD 97 E2                             call    l2_flip_buffers
 184+ C22A 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 185+ C22C 32 38 E1                             ld      (l2_cls_byte),a
 186+ C22F CD 77 E1                             call    l2_set_color_upper2
 187+ C232 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 188+ C234 32 38 E1                             ld      (l2_cls_byte),a
 189+ C237 CD DE E1                             call    l2_cls_lower_third
 190+ C23A CD 07 C1                             call    LaunchTubeEdges
 191+ C23D CD 5C C1                             call    LaunchConsole
 192+ C240 3E FF        .SetUpTimers:           ld      a,init_countdown
 193+ C242 32 00 C1                             ld      (launch_countdown),a
 194+ C245 21 87 C0                             ld      hl,dockingdraw_table
 195+ C248 22 03 C1                             ld      (docking_table_idx),hl
 196+ C24B AF                                   xor     a
 197+ C24C 32 05 C1                             ld      (current_offsetX),a
 198+ C24F 32 06 C1                             ld      (current_offsetY),a
 199+ C252 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 200+ C253                                      ZeroThrottle
 200+ C253 AF          >                        xor     a
 200+ C254 32 99 81    >                        ld      (DELTA),a
 200+ C257 32 9A 81    >                        ld      (DELT4Lo),a
 200+ C25A 32 9B 81    >                        ld      (DELT4Lo+1),a
 201+ C25D 3E FF                                ld      a,StatePlayerDocked
 202+ C25F 32 4C 83                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 203+ C262 C9                                   ret
 204+ C263
 205+ C263 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 206+ C266 3E FF                                ld      a,init_countdown
 207+ C268 32 00 C1                             ld      (launch_countdown),a
 208+ C26B 2A 01 C1                             ld      hl,(launch_table_idx)
 209+ C26E 4E                                   ld      c,(hl)
 210+ C26F 79                                   ld      a,c
 211+ C270 FE FF                                cp      $FF
 212+ C272 28 1E                                jr      z,.FinishedLaunch
 213+ C274 23                                   inc     hl
 214+ C275 46                                   ld      b,(hl)                 ; bc = top left
 215+ C276 23                                   inc     hl
 216+ C277 5E                                   ld      e,(hl)
 217+ C278 23                                   inc     hl
 218+ C279 56                                   ld      d,(hl)                 ;de = width and height
 219+ C27A 23                                   inc     hl
 220+ C27B 7E                                   ld      a,(hl)                 ; a = colour
 221+ C27C 23                                   inc     hl
 222+ C27D 22 01 C1                             ld      (launch_table_idx),hl
 223+ C280 67                                   ld      h,a
 224+ C281 C5 D5                                push    bc,,de
 225+ C283                                      MMUSelectLayer2
 225+ C283 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ C287 CD EC E3                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 227+ C28A D1 C1                                pop     bc,,de
 228+ C28C 3E 80                                ld      a,$80
 229+ C28E CD FC E3                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 230+ C291 C9                                   ret
 231+ C292 3E FD        .FinishedLaunch:        ld      a,StateCompletedLaunch  ; now seed that we need a universe rebuild post launch
 232+ C294 32 4C 83                             ld      (DockedFlag),a
 233+ C297 C9                                   ret
 234+ C298
 235+ C298 CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 236+ C29B 3E FF                                ld      a,init_countdown
 237+ C29D 32 00 C1                             ld      (launch_countdown),a
 238+ C2A0 2A 03 C1                             ld      hl,(docking_table_idx)
 239+ C2A3 4E                                   ld      c,(hl)
 240+ C2A4 79                                   ld      a,c
 241+ C2A5 FE FF                                cp      $FF
 242+ C2A7 28 1E                                jr      z,.FinishedDocking
 243+ C2A9 23                                   inc     hl
 244+ C2AA 46                                   ld      b,(hl)                 ; bc = top left
 245+ C2AB 23                                   inc     hl
 246+ C2AC 5E                                   ld      e,(hl)
 247+ C2AD 23                                   inc     hl
 248+ C2AE 56                                   ld      d,(hl)                 ;de = width and height
 249+ C2AF 23                                   inc     hl
 250+ C2B0 7E                                   ld      a,(hl)
 251+ C2B1 23                                   inc     hl
 252+ C2B2 22 03 C1                             ld      (docking_table_idx),hl
 253+ C2B5 67                                   ld      h,a
 254+ C2B6 C5 D5                                push    bc,,de
 255+ C2B8                                      MMUSelectLayer2
 255+ C2B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ C2BC CD EC E3                             call    l2_draw_fill_box
 257+ C2BF D1 C1                                pop     bc,,de
 258+ C2C1 3E 80                                ld      a,$80
 259+ C2C3 CD FC E3                             call    l2_draw_box
 260+ C2C6 C9                                   ret
 261+ C2C7              .FinishedDocking        ForceTransition ScreenStatus              ; Force move to status screen
 261+ C2C7 3E 04       >                        ld      a,ScreenStatus
 261+ C2C9 32 7A 69    >                        ld      (ScreenTransitionForced), a
 262+ C2CC C9                                   ret
 263+ C2CD
 264+ C2CD
 265+ C2CD
# file closed: ./Transitions/launch_ship.asm
 932  C2CD                                  DISPLAY "Bank ",BankLaunchShip," - Bytes free ",/D, $2000 - ($-LaunchShipAddr), " - BankLaunchShip"
 933  C2CD              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
 934  C2CD                                  SLOT    UniverseBankAddr
 935  C2CD                                  PAGE    BankUNIVDATA0
 936  C2CD                                  ORG	    UniverseBankAddr,BankUNIVDATA0
 937  C000                                  INCLUDE "./Universe/Ships/univ_ship_data.asm"
# file opened: ./Universe/Ships/univ_ship_data.asm
   1+ C000              ;    DEFINE DEBUGMISSILELAUNCH 1
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                       1234567890123456
  14+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  14+ C004 65 72 73 65
  14+ C008 20 50 47
  15+ C00B 58           StartOfUnivN:       DB "X"
  16+ C00C 00 00        StartOfUnivPad:     DS 2
  17+ C00E 00           StartOfUnivM:       DB 0
  18+ C00F 00           StartOfUnivT        DB 0
  19+ C010 00 00 00...  StartOfUnivName     DS 16
  20+ C020              ; NOTE we can cheat and pre allocate segs just using a DS for now
  21+ C020
  22+ C020              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  23+ C020              ; Universe map substibute for INWK
  24+ C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  25+ C020                                     INCLUDE "./Universe/Ships/AIRuntimeData.asm"
# file opened: ././Universe/Ships/AIRuntimeData.asm
   1++C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C020              ;--NOTE POSTITION AND MATRIX are loaded by a single LDIR in cases so must be contiguous
   3++C020              StartOfShipRuntimeData      EQU $
   4++C020 00           UBnKxlo                     DB  0                       ; INWK+0
   5++C021 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   6++C022 00           UBnKxsgn                    DB  0                       ; INWK+2
   7++C023 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   8++C024 00           UBnKyhi                     DB  0                       ; INWK+4 \ yHi
   9++C025 00           UBnKysgn                    DB  0                       ; INWK +5
  10++C026 00           UBnKzlo                     DB  0                       ; INWK +6
  11++C027 00           UBnKzhi                     DB  0                       ; INWK +7
  12++C028 00           UBnKzsgn                    DB  0                       ; INWK +8
  13++C029              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  14++C029              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  15++C029              ; Note they seem to have to be after camera position not quite found why yet, can only assume it does an iy or ix indexed copy? Bu oddly does not affect space station.
  16++C029 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  17++C02B              UBnkrotmatSidev             equ UBnkrotmatSidevX
  18++C02B 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  19++C02D 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  20++C02F 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  21++C031              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  22++C031 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  23++C033 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  24++C035 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  25++C037              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  26++C037 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  27++C039 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  28++C03B              ; -- Note these must be here for initialise blast as it does a 12 byte ldir
  29++C03B              ; . Note missile explosion will have to have logic to cause linger if a blast is to be enqued
  30++C03B 00           UBnKMissileBlastRange:      DB  0                       ; copied in when setting up a missile
  31++C03C 00           UBnKMissileBlastDamage:     DB  0                       ; copied in when setting up a missile
  32++C03D 00           UBnKMissileDetonateRange:   DB  0                       ; copied in when setting up a missile, allows for proximity missiles
  33++C03E 00           UBnKMissileDetonateDamage:  DB  0                       ; copied in when setting up a missile
  34++C03F              ; -- Metadata for ship to help with bank managment
  35++C03F              UBnKStartOfRuntimeData:
  36++C03F 00           UBnKSlotNumber              DB  0
  37++C040 00           UbnKShipUnivBankNbr         DB  0                       ; Present ship universe bank number
  38++C041 00           UBnkShipModelBank           DB  0                       ; Bank nbr ship was from
  39++C042 00           UBnKShipModelNbr            DB  0                       ; Ship Id with in the bank
  40++C043 00           UBnKShipModelId             DB  0                       ; Absolute ship id
  41++C044              ; -- Ship AI data
  42++C044 00           UBnKMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  43++C045 00           UBnKMissileTarget           DB  0                       ; This is the ship slot number for the target from 0 to n if the missile is not hostile to us, if the target is $FF then its us
  44++C046 00           UBnKSpeed                   DB  0                       ; INWK +27
  45++C047 00           UBnKAccel                   DB  0                       ; INWK +28
  46++C048 00           UBnKRotXCounter             DB  0                       ; INWK +29
  47++C049 00           UBnKRotZCounter             DB  0                       ; INWK +30
  48++C04A 00           UBnKRAT                     DB  0                       ; temporary for rotation magnitude or roll counter, for debugging state
  49++C04B 00           UBnKRAT2                    DB  0                       ; temporary for rotation threshold
  50++C04C 00           UBnKCNT                     DB  0                       ; temp for calculating roll and pitch
  51++C04D 00           UBnKCNT2                    DB  0                       ; roll threshold, max angle boynd ship will slow down
  52++C04E 00           univRAT                     DB  0               ; 99
  53++C04F 00           univRAT2                    DB  0               ; 9A
  54++C050 00           univRAT2Val                 DB  0               ; 9A
  55++C051 00           UBnKexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  56++C052 00           UBnkDrawAllFaces            DB  0
  57++C053 00           UBnKShipAggression          DB  0                       ; calculated agression factor
  58++C054 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  59++C055 00           UBnKSpawnObject             DB  0
  60++C056 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  61++C057 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  62++C058 00           UBnKEnergy                  DB  0                       ; INWK +35
  63++C059 00           UBnKECMCountDown            DB  0                       ; counts down ECM usage if activated reducing energy too in update loop
  64++C05A 00           UBnKECMFitted               DB  0                       ; Does ship have ECM, true false
  65++C05B 00           UBnKLaserPower              DB  0                       ; Type of laser fitted
  66++C05C 00           UBnKMissilesLeft            DB  0
  67++C05D 00           UBnKFighterShipId           DB  0                       ; computed ship Id for any carriers
  68++C05E 00           UBnKFightersLeft            DB  0                       ; the number of ships left in hanger, 255 = infinite
  69++C05F 00           UBnKCloudCounter            DB  0                       ; cloud pixels
  70++C060 00           UBnKCloudRadius             DB  0                       ; cloud pixels
  71++C061              UBnKRuntimeSize             EQU $-UBnKStartOfRuntimeData
  72++C061              ; Flags work as follows:
  73++C061              ; UBnKSpawnObject - signals on death to spawn cargo items
  74++C061              ; 0 -                   Spawn Cargo 1
  75++C061              ; 1 -                   Spawn Cargo 2
  76++C061              ; 2 -                   Spawn Cargo 3
  77++C061              ; 3 -                   Spawn Cargo 4
  78++C061              ; 4 -                   Spawn Alloy 1
  79++C061              ; 5 -                   Spawn Alloy 2
  80++C061              ; 6 -                   Spawn Alloy 3
  81++C061              ; 7 -                   Spawn Alloy 4
  82++C061
  83++C061              ; UBnkaiatkecm
  84++C061              ; Bit	                Description
  85++C061              ; 7 -                   AI Enabled Flag
  86++C061              ; 6 -                   Ship Visible = ShipOnScreen/NotCloaked (cleared or set by check visible or cloaking override)
  87++C061              ; 5 -                   Ship is exploding if set, note if its a missile and one already equeued this will have to linger
  88++C061              ;                       linger can be done by not erasing ship unit missile equeue handled
  89++C061              ; 4 -                   Ship marked as exploded, cleared once aknowledged then bit 5 takes over and UBnKCloudCounter
  90++C061              ; 3 -                   Display state - Plot as a Dot
  91++C061              ; 2 -                   Nbr of Missiles bit 2
  92++C061              ; 1 -                   Nbr of Missiles bit 1
  93++C061              ; 0 -                   ECM present flag
  94++C061              ; ShipNewBitsAddr (in blueprint)
  95++C061              ;Bit	                Description
  96++C061              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  97++C061              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  98++C061              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  99++C061              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
 100++C061              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
 101++C061              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
 102++C061              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
 103++C061              ;                       Hostile ships will attack us on sight; there are quite a few of them
 104++C061              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
 105++C061              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
 106++C061              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
 107++C061              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
 108++C061              ;#4	Docking flag        * 0 = not docking * 1 = docking
 109++C061              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
 110++C061              ;                       This flag is randomly set for traders when they are spawned
 111++C061              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
 112++C061              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
 113++C061              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
 114++C061              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
 115++C061              ;#6	Cop flag            * 0 = not a cop * 1 = cop
 116++C061              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
 117++C061              ;                       Ships that are cops: Viper, Transporter
 118++C061              ;#7	Scooped, docked, escape pod flag
 119++C061              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
 120++C061              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
 121++C061              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
 122++C061
# file closed: ././Universe/Ships/AIRuntimeData.asm
  26+ C061              ; moved to runtime asm
  27+ C061              ;                        INCLUDE "./Universe/Ships/ShipPosVars.asm"
  28+ C061              ;                        INCLUDE "./Universe/Ships/RotationMatrixVars.asm"
  29+ C061
  30+ C061              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  31+ C061              ;                    [roofv x y z ] roof vector (up)
  32+ C061              ;                    [sidev x y z ] side vector (right)
  33+ C061              ;;rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  34+ C061              ;;rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  35+ C061
  36+ C061
  37+ C061                                      INCLUDE "./Universe/Ships/XX16Vars.asm"
# file opened: ././Universe/Ships/XX16Vars.asm
   1++C061              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C061 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C063              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C063 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C065 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C067 00 00        UBnkTransmatRoofvX          DW 0
   7++C069              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C069 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C06B 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C06D 00 00        UBnkTransmatNosevX          DW 0
  11++C06F              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C06F 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C071 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C073 00 00        UbnkTransmatTransX          DW 0
  15++C075 00 00        UbnkTransmatTransY          DW 0
  16++C077 00 00        UbnkTransmatTransZ          DW 0
  17++C079              XX16                        equ UBnkTransmatSidev
  18++C079              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C079 00 00        UbnkTransInvRow0x0          DW 0
  20++C07B 00 00        UbnkTransInvRow0x1          DW 0
  21++C07D 00 00        UbnkTransInvRow0x2          DW 0
  22++C07F 00 00        UbnkTransInvRow0x3          DW 0
  23++C081 00 00        UbnkTransInvRow1y0          DW 0
  24++C083 00 00        UbnkTransInvRow1y1          DW 0
  25++C085 00 00        UbnkTransInvRow1y2          DW 0
  26++C087 00 00        UbnkTransInvRow1y3          DW 0
  27++C089 00 00        UbnkTransInvRow2z0          DW 0
  28++C08B 00 00        UbnkTransInvRow2z1          DW 0
  29++C08D 00 00        UbnkTransInvRow2z2          DW 0
  30++C08F 00 00        UbnkTransInvRow2z3          DW 0
  31++C091
  32++C091              XX16Inv             equ UbnkTransInvRow0x0
  33++C091
# file closed: ././Universe/Ships/XX16Vars.asm
  38+ C091                                      INCLUDE "./Universe/Ships/XX25Vars.asm"
# file opened: ././Universe/Ships/XX25Vars.asm
   1++C091              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C091 00           UbnkProjxLo                 DB  0
   3++C092 00           UbnkProjxHi                 DB  0
   4++C093 00           UbnkProjxSgn                DB  0
   5++C094              UbnkProjx                   EQU UbnkProjxLo
   6++C094 00           UbnkProjyLo                 DB  0
   7++C095 00           UbnkProjyHi                 DB  0
   8++C096 00           UbnkProjySgn                DB  0
   9++C097              UbnkProjy                   EQU UbnkProjyLo
  10++C097 00           UbnkProjzLo                 DB  0
  11++C098 00           UbnkProjzHi                 DB  0
  12++C099 00           UbnkProjzSgn                DB  0
  13++C09A              UbnkProjz                   EQU UbnkProjzLo
  14++C09A              XX25                        EQU UbnkProjxLo
  15++C09A
# file closed: ././Universe/Ships/XX25Vars.asm
  39+ C09A                                      INCLUDE "./Universe/Ships/XX18Vars.asm"
# file opened: ././Universe/Ships/XX18Vars.asm
   1++C09A              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C09A 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C09B 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C09C 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C09D              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C09D 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C09E 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C09F 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C0A0              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C0A0 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C0A1 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C0A2 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C0A3              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C0A3              XX18                        equ UBnkDrawCam0xLo
  15++C0A3
# file closed: ././Universe/Ships/XX18Vars.asm
  40+ C0A3
  41+ C0A3              ; Used to make 16 bit reads a little cleaner in source code
  42+ C0A3 00 00 00     UbnkZPoint                  DS  3
  43+ C0A6              UbnkZPointLo                equ UbnkZPoint
  44+ C0A6              UbnkZPointHi                equ UbnkZPoint+1
  45+ C0A6              UbnkZPointSign              equ UbnkZPoint+2
  46+ C0A6                                      INCLUDE "./Universe/Ships/XX15Vars.asm"
# file opened: ././Universe/Ships/XX15Vars.asm
   1++C0A6              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C0A6 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C0A7 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C0A8 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C0A9 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C0AA 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C0AB 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C0AC
   9++C0AC              XX15                        equ UBnkXScaled
  10++C0AC              XX15VecX                    equ XX15
  11++C0AC              XX15VecY                    equ XX15+1
  12++C0AC              XX15VecZ                    equ XX15+2
  13++C0AC              UbnkXPoint                  equ XX15
  14++C0AC              UbnkXPointLo                equ XX15+0
  15++C0AC              UbnkXPointHi                equ XX15+1
  16++C0AC              UbnkXPointSign              equ XX15+2
  17++C0AC              UbnkYPoint                  equ XX15+3
  18++C0AC              UbnkYPointLo                equ XX15+3
  19++C0AC              UbnkYPointHi                equ XX15+4
  20++C0AC              UbnkYPointSign              equ XX15+5
  21++C0AC              ; Repurposed XX15 pre clip plines
  22++C0AC              UbnkPreClipX1               equ XX15+0
  23++C0AC              UbnkPreClipY1               equ XX15+2
  24++C0AC              UbnkPreClipX2               equ XX15+4
  25++C0AC              UbnkPreClipY2               equ XX15+6
  26++C0AC              ; Repurposed XX15 post clip lines
  27++C0AC              UBnkNewX1                   equ XX15+0
  28++C0AC              UBnkNewY1                   equ XX15+1
  29++C0AC              UBnkNewX2                   equ XX15+2
  30++C0AC              UBnkNewY2                   equ XX15+3
  31++C0AC              ; Repurposed XX15
  32++C0AC              regXX15fx                   equ UBnkXScaled
  33++C0AC              regXX15fxSgn                equ UBnkXScaledSign
  34++C0AC              regXX15fy                   equ UBnkYScaled
  35++C0AC              regXX15fySgn                equ UBnkYScaledSign
  36++C0AC              regXX15fz                   equ UBnkZScaled
  37++C0AC              regXX15fzSgn                equ UBnkZScaledSign
  38++C0AC              ; Repurposed XX15
  39++C0AC              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C0AC              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C0AC              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C0AC              ; After clipping the coords are two 8 bit pairs
  43++C0AC              UBnkPoint1Clipped           equ UBnkXScaled
  44++C0AC              UBnkPoint2Clipped           equ UBnkYScaled
  45++C0AC              ; Repurposed XX15 when plotting lines
  46++C0AC              ; Repurposed XX15 before calling clip routine
  47++C0AC              UBnkX1                      equ XX15
  48++C0AC              UBnKx1Lo                    equ XX15
  49++C0AC              UBnKx1Hi                    equ XX15+1
  50++C0AC              UBnkY1                      equ XX15+2
  51++C0AC              UbnKy1Lo                    equ XX15+2
  52++C0AC              UBnkY1Hi                    equ XX15+3
  53++C0AC              UBnkX2                      equ XX15+4
  54++C0AC              UBnkX2Lo                    equ XX15+4
  55++C0AC              UBnkX2Hi                    equ XX15+5
  56++C0AC
# file closed: ././Universe/Ships/XX15Vars.asm
  47+ C0AC                                      INCLUDE "./Universe/Ships/XX12Vars.asm"
# file opened: ././Universe/Ships/XX12Vars.asm
   1++C0AC              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C0AC              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C0AC 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C0AD 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C0AE 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C0AF 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C0B0 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C0B1 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C0B2 00 00 00...  XX12Save                    DS  6
  10++C0B8 00 00 00...  XX12Save2                   DS  6
  11++C0BE              XX12                        equ UBnkXX12xLo
  12++C0BE              varXX12                     equ UBnkXX12xLo
  13++C0BE              ; Repurposed XX12 when plotting lines
  14++C0BE              UBnkY2                      equ XX12+0
  15++C0BE              UbnKy2Lo                    equ XX12+0
  16++C0BE              UBnkY2Hi                    equ XX12+1
  17++C0BE              UBnkDeltaXLo                equ XX12+2
  18++C0BE              UBnkDeltaXHi                equ XX12+3
  19++C0BE              UBnkDeltaYLo                equ XX12+4
  20++C0BE              UBnkDeltaYHi                equ XX12+5
  21++C0BE              UbnkGradient                equ XX12+2
  22++C0BE              UBnkTemp1                   equ XX12+2
  23++C0BE              UBnkTemp1Lo                 equ XX12+2
  24++C0BE              UBnkTemp1Hi                 equ XX12+3
  25++C0BE              UBnkTemp2                   equ XX12+3
  26++C0BE              UBnkTemp2Lo                 equ XX12+3
  27++C0BE              UBnkTemp2Hi                 equ XX12+4
  28++C0BE
# file closed: ././Universe/Ships/XX12Vars.asm
  48+ C0BE
  49+ C0BE
  50+ C0BE              ; Post clipping the results are now 8 bit
  51+ C0BE 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  52+ C0BF 00           UBnkProjectedY              DB  0
  53+ C0C0 00           UBnkProjectedX              DB  0
  54+ C0C1              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  55+ C0C1 00 00 00...  XX15Save                    DS  8
  56+ C0C9 00 00 00...  XX15Save2                   DS  8
  57+ C0D1 00           VarBackface                 DB 0
  58+ C0D2              ; Heap (or array) information for lines and normals
  59+ C0D2              ; Coords are stored XY,XY,XY,XY
  60+ C0D2              ; Normals
  61+ C0D2              ; This needs re-oprganising now.
  62+ C0D2              ; Runtime Calculation Store
  63+ C0D2
  64+ C0D2              FaceArraySize               equ 30
  65+ C0D2              EdgeHeapSize                equ 40
  66+ C0D2              NodeArraySize               equ 40
  67+ C0D2              LineArraySize               equ 50
  68+ C0D2              ; Storage arrays for data
  69+ C0D2              ; Structure of arrays
  70+ C0D2              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  71+ C0D2              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  72+ C0D2              ; NodeArray         -  4 bytes per element      0           1            2          3
  73+ C0D2              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  74+ C0D2              ; Line Array        -  4 bytes per eleement     0           1            2          3
  75+ C0D2              ;                                               X1          Y1           X2         Y2
  76+ C0D2 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  77+ C0F0 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  78+ C190 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  79+ C230 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
  80+ C2F8              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  81+ C2F8 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  82+ C320              ; Array current Lengths
  83+ C320 00           UbnkFaceVisArrayLen         DS 1
  84+ C321 00           UBnkNodeArrayLen            DS 1
  85+ C322 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  86+ C323 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  87+ C324              XX20                        equ UbnkLineArrayLen
  88+ C324              varXX20                     equ UbnkLineArrayLen
  89+ C324
  90+ C324 00           UbnkEdgeHeapSize            DS 1
  91+ C325 00           UbnkEdgeHeapBytes           DS 1
  92+ C326 00           UBnkLinesHeapLen            DS 1
  93+ C327 00           UbnKEdgeHeapCounter         DS 1
  94+ C328 00           UbnKEdgeRadius              DS 1
  95+ C329 00           UbnKEdgeShipType            DS 1
  96+ C32A 00           UbnKEdgeExplosionType       DS 1
  97+ C32B
  98+ C32B              ; Node heap is used to write out transformed Vertexs
  99+ C32B
 100+ C32B              ; Lines
 101+ C32B 00 00 00     UBnkXX19                    DS  3
 102+ C32E
 103+ C32E 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 104+ C349              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 105+ C349              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 106+ C349              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 107+ C349              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 108+ C349              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 109+ C349              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 110+ C349              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 111+ C349              VertexCountAddr             equ UBnkHullCopy + VertexCountOffset
 112+ C349              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 113+ C349              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 114+ C349              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 115+ C349              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 116+ C349              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 117+ C349              DotAddr                     equ UBnkHullCopy + DotOffset
 118+ C349              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 119+ C349              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 120+ C349              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 121+ C349              QAddr                       equ UBnkHullCopy + QOffset
 122+ C349              LaserAddr                   equ UBnkHullCopy + LaserOffset
 123+ C349              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 124+ C349              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 125+ C349              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 126+ C349              ShipAIFlagsAddr             equ UBnkHullCopy + ShipAIFlagsOffset
 127+ C349              ShipECMFittedChanceAddr     equ UBnkHullCopy + ShipECMFittedChanceOffset
 128+ C349              ; Static Ship Data. This is copied in when creating the universe object
 129+ C349              XX0                         equ UBnkHullCopy        ; general hull index pointer TODO find biggest ship design
 130+ C349
 131+ C349 00 00 00...  UBnkHullVerticies           DS  40 * 6              ; largetst is trasnport type 10 at 37 vericies so alows for 40 * 6 Bytes  =
 132+ C439 00 00 00...  UBnkHullEdges               DS  50 * 4              ; ype 10 is 46 edges so allow 50
 133+ C501 00 00 00...  UBnkHullNormals             DS  20 * 4              ; type 10 is 14 edges so 20 to be safe
 134+ C551
 135+ C551
 136+ C551 0C           OrthagCountdown             DB  12
 137+ C552
 138+ C552              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 139+ C552              UBnk_Data_len               EQU $ - StartOfUniv
 140+ C552
 141+ C552              ZeroUnivPitchAndRoll:   MACRO
 142+ C552 ~                                    xor     a
 143+ C552 ~                                    ld      (UBnKRotXCounter),a
 144+ C552 ~                                    ld      (UBnKRotZCounter),a
 145+ C552                                      ENDM
 146+ C552
 147+ C552              MaxUnivPitchAndRoll:    MACRO
 148+ C552 ~                                    ld      a,127
 149+ C552 ~                                    ld      (UBnKRotXCounter),a
 150+ C552 ~                                    ld      (UBnKRotZCounter),a
 151+ C552                                      ENDM
 152+ C552
 153+ C552              RandomUnivPitchAndRoll: MACRO
 154+ C552 ~                                    call    doRandom
 155+ C552 ~                                    or      %01101111
 156+ C552 ~                                    ld      (UBnKRotXCounter),a
 157+ C552 ~                                    call    doRandom
 158+ C552 ~                                    or      %01101111
 159+ C552 ~                                    ld      (UBnKRotZCounter),a
 160+ C552                                      ENDM
 161+ C552
 162+ C552              RandomUnivSpeed:        MACRO
 163+ C552 ~                                    call    doRandom
 164+ C552 ~                                    and     31
 165+ C552 ~                                    ld      (UBnKSpeed),a
 166+ C552                                      ENDM
 167+ C552
 168+ C552              MaxUnivSpeed:           MACRO
 169+ C552 ~                                    ld      a,31
 170+ C552 ~                                    ld      (UBnKSpeed),a
 171+ C552                                      ENDM
 172+ C552
 173+ C552              ZeroUnivAccelleration:  MACRO
 174+ C552 ~                                    xor     a
 175+ C552 ~                                    ld      (UBnKAccel),a
 176+ C552                                      ENDM
 177+ C552
 178+ C552 3A 46 C3     SetShipHostile:         ld      a,(ShipNewBitsAddr)
 179+ C555 F6 04                                or      ShipIsHostile
 180+ C557 32 46 C3                             ld      (ShipNewBitsAddr),a
 181+ C55A C9                                   ret
 182+ C55B
 183+ C55B 3A 46 C3     ClearShipHostile:       ld      a,(ShipNewBitsAddr)
 184+ C55E E6 FB                                and     ShipNotHostile
 185+ C560 32 46 C3                             ld      (ShipNewBitsAddr),a
 186+ C563 C9                                   ret
 187+ C564
 188+ C564
 189+ C564              ; --------------------------------------------------------------
 190+ C564 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 191+ C567 11 52 05                             ld      de,UBnk_Data_len
 192+ C56A AF                                   xor     a
 193+ C56B CD 32 7D                             call    memfill_dma
 194+ C56E C9                                   ret
 195+ C56F              ; --------------------------------------------------------------
 196+ C56F 21 20 C0     ResetUbnkPosition:      ld      hl,UBnKxlo
 197+ C572 06 09                                ld      b, 3*3
 198+ C574 AF                                   xor     a
 199+ C575 77           .zeroLoop:              ld      (hl),a
 200+ C576 23                                   inc     hl
 201+ C577 10 FC                                djnz    .zeroLoop
 202+ C579 C9                                   ret
 203+ C57A
 204+ C57A 3E 80        FireECM:                ld      a,ECMCounterMax                 ; set ECM time
 205+ C57C 32 59 C0                             ld      (UBnKECMCountDown),a            ;
 206+ C57F 3A B4 80                             ld      a,(ECMCountDown)
 207+ C582                                      ReturnIfALTNusng ECMCounterMax
 207+ C582 FE 80       >                        cp    ECMCounterMax
 207+ C584 D8          >                        ret	 c
 208+ C585 3E 80                                ld      a,ECMCounterMax
 209+ C587 32 B4 80                             ld      (ECMCountDown),a
 210+ C58A C9                                   ret
 211+ C58B
 212+ C58B 3A 58 C0     RechargeEnergy:         ld      a,(UBnKEnergy)
 213+ C58E                                      ReturnIfAGTEMemusng EnergyAddr
 213+ C58E 21 3D C3    >                        ld      hl,EnergyAddr
 213+ C591 BE          >                        cp      (hl)
 213+ C592 D0          >                        ret	    nc
 214+ C593 3C                                   inc     a
 215+ C594 32 58 C0                             ld      (UBnKEnergy),a
 216+ C597 C9                                   ret
 217+ C598              ; A ship normally needs enough energy to fire ECM but if its shot then
 218+ C598              ; it may be too low, in which case the ECM does a saftey shutdown and returns 1 energy
 219+ C598              ; plus a 50% chance it will blow the ECM up
 220+ C598 3A 59 C0     UpdateECM:              ld      a,(UBnKECMCountDown)
 221+ C59B                                      ReturnIfAIsZero
 221+ C59B A7          >                        and     a
 221+ C59C C8          >                        ret     z
 222+ C59D 3D                                   dec     a
 223+ C59E 32 59 C0                             ld      (UBnKECMCountDown),a
 224+ C5A1 21 58 C0                             ld      hl,UBnKEnergy
 225+ C5A4 35                                   dec     (hl)
 226+ C5A5 F0                                   ret     p
 227+ C5A6 CD 7D C6     .ExhaustedEnergy:       call    UnivExplodeShip                 ; if it ran out of energy it was as it was also shot or collided as it checks in advance. Main ECM loop will continue as a compromise as multiple ships can fire ECM simultaneously
 228+ C5A9 C9                                   ret
 229+ C5AA
 230+ C5AA              ;-- This takes an Axis and subtracts 1, handles leading sign and boundary of 0 going negative
 231+ C5AA              JumpOffSet:             MACRO   Axis
 232+ C5AA ~                                    ld      hl,(Axis)
 233+ C5AA ~                                    ld      a,h
 234+ C5AA ~                                    and     SignOnly8Bit
 235+ C5AA ~                                    jr      nz,.NegativeAxis
 236+ C5AA ~            .PositiveAxis:          dec     l
 237+ C5AA ~                                    jp      m,.MovingNegative
 238+ C5AA ~                                    jp      .Done
 239+ C5AA ~            .NegativeAxis:          inc     l                               ; negative means increment the z
 240+ C5AA ~                                    jp      .Done
 241+ C5AA ~            .MovingNegative:        ld      hl,$8001                        ; -1
 242+ C5AA ~            .Done                   ld      (Axis),hl
 243+ C5AA                                      ENDM
 244+ C5AA
 245+ C5AA
 246+ C5AA              WarpOffset:             JumpOffSet  UBnKzhi                     ; we will simplify on just moving Z
 246+ C5AA 2A 27 C0    >                        ld      hl,(UBnKzhi)
 246+ C5AD 7C          >                        ld      a,h
 246+ C5AE E6 80       >                        and     SignOnly8Bit
 246+ C5B0 20 07       >                        jr      nz,.NegativeAxis
 246+ C5B2 2D          >.PositiveAxis:          dec     l
 246+ C5B3 FA BD C5    >                        jp      m,.MovingNegative
 246+ C5B6 C3 C0 C5    >                        jp      .Done
 246+ C5B9 2C          >.NegativeAxis:          inc     l                               ; negative means increment the z
 246+ C5BA C3 C0 C5    >                        jp      .Done
 246+ C5BD 21 01 80    >.MovingNegative:        ld      hl,$8001                        ; -1
 246+ C5C0 22 27 C0    >.Done                   ld      (UBnKzhi),hl
 247+ C5C3 C9                                   ret
 248+ C5C4
 249+ C5C4
 250+ C5C4              ; --------------------------------------------------------------
 251+ C5C4              ; update ship speed and pitch based on adjustments from AI Tactics
 252+ C5C4 3A 47 C0     UpdateSpeedAndPitch:    ld      a,(UBnKAccel)                   ; only apply non zero accelleration
 253+ C5C7                                      JumpIfAIsZero .SkipAccelleration
 253+ C5C7 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 253+ C5C8 CA E6 C5    >                        jp	    z, .SkipAccelleration
 254+ C5CB 47                                   ld      b,a                             ; b = accelleration in 2's c
 255+ C5CC 3A 46 C0                             ld      a,(UBnKSpeed)                   ; a = speed + accelleration
 256+ C5CF                                      ClearCarryFlag
 256+ C5CF B7          >                        or a
 257+ C5D0 88                                   adc     a,b
 258+ C5D1                                      JumpIfPositive  .DoneAccelleration      ; if speed < 0
 258+ C5D1 F2 D5 C5    >                        jp		p, .DoneAccelleration
 259+ C5D4              .SpeedNegative:         ZeroA                                   ;    then speed = 0
 259+ C5D4 AF          >                        xor a
 260+ C5D5 47           .DoneAccelleration:     ld      b,a                             ; if speed > speed limit
 261+ C5D6 3A 3E C3                             ld      a,(SpeedAddr)                   ;    speed = limit
 262+ C5D9                                      JumpIfAGTENusng b, .SpeedInLimits       ; .
 262+ C5D9 B8          >                        cp     b
 262+ C5DA D2 DE C5    >                        jp		nc,.SpeedInLimits
 263+ C5DD 47                                   ld      b,a                             ; .
 264+ C5DE 78           .SpeedInLimits:         ld      a,b                             ; .
 265+ C5DF 32 46 C0                             ld      (UBnKSpeed),a                   ; .
 266+ C5E2                                      ZeroA                                   ; acclleration = 0
 266+ C5E2 AF          >                        xor a
 267+ C5E3 32 47 C0                             ld      (UBnKAccel),a                   ; for next AI update
 268+ C5E6              .SkipAccelleration:     ; handle roll and pitch rates
 269+ C5E6 C9                                   ret
 270+ C5E7
 271+ C5E7 21 90 A6     UnivSetEnemyMissile:    ld      hl,NewLaunchUBnKX               ; Copy launch ship matrix
 272+ C5EA 11 20 C0                             ld      de,UBnKxlo                      ;
 273+ C5ED 01 1B 00                             ld      bc,NewLaunchDataBlockSize       ; positon + 3 rows of 3 bytes
 274+ C5F0 ED B0                                ldir                                    ;
 275+ C5F2 3E 03        .SetUpSpeed:            ld      a,3                             ; set accelleration
 276+ C5F4 32 47 C0                             ld      (UBnKAccel),a                   ;
 277+ C5F7                                      ZeroA
 277+ C5F7 AF          >                        xor a
 278+ C5F8 32 48 C0                             ld      (UBnKRotXCounter),a
 279+ C5FB 32 49 C0                             ld      (UBnKRotZCounter),a
 280+ C5FE 3E 03                                ld      a,3                             ; these are max roll and pitch rates for later
 281+ C600 32 4A C0                             ld      (UBnKRAT),a
 282+ C603 3C                                   inc     a
 283+ C604 32 4B C0                             ld      (UBnKRAT2),a
 284+ C607 3E 16                                ld      a,22
 285+ C609 32 4D C0                             ld      (UBnKCNT2),a
 286+ C60C                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 286+ C60C 3E 1F       >                        ld      a,31
 286+ C60E 32 46 C0    >                        ld      (UBnKSpeed),a
 287+ C611                                      SetMemFalse UBnKMissleHitToProcess
 287+ C611 3E FF       >                        ld      a,$FF
 287+ C613 32 44 C0    >                        ld      (UBnKMissleHitToProcess),a
 288+ C616 3E 80                                ld      a,ShipAIEnabled
 289+ C618 32 54 C0                             ld      (UBnkaiatkecm),a
 290+ C61B CD 52 C5                             call    SetShipHostile
 291+ C61E 3E 96        .SetupPayload:          ld      a,150
 292+ C620 32 3C C0                             ld      (UBnKMissileBlastDamage),a
 293+ C623 32 3E C0                             ld      (UBnKMissileDetonateDamage),a
 294+ C626 3E 05                                ld      a,5
 295+ C628 32 3B C0                             ld      (UBnKMissileBlastRange),a
 296+ C62B 32 3D C0                             ld      (UBnKMissileDetonateRange),a
 297+ C62E C9                                   ret
 298+ C62F
 299+ C62F              ; --------------------------------------------------------------
 300+ C62F              ; This sets the position of the current ship if its a player launched missile
 301+ C62F CD 55 C8     UnivSetPlayerMissile:   call    InitialisePlayerMissileOrientation  ; Copy in Player  facing
 302+ C632 CD 6F C5                             call    ResetUbnkPosition               ; home position
 303+ C635 3E 05                                ld      a,MissileDropHeight             ; the missile launches from underneath
 304+ C637 32 23 C0                             ld      (UBnKylo),a                     ; so its -ve drop height
 305+ C63A                                      IFDEF DEBUGMISSILELAUNCH
 306+ C63A ~                                        ld      a,$20       ; DEBUG
 307+ C63A ~                                        ld      (UBnKzlo),a
 308+ C63A                                      ENDIF
 309+ C63A 3E 80                                ld      a,$80                           ;
 310+ C63C 32 25 C0                             ld      (UBnKysgn),a                    ;
 311+ C63F 3E 03                                ld      a,3                             ; set accelleration
 312+ C641 32 47 C0                             ld      (UBnKAccel),a                   ;
 313+ C644                                      ZeroA
 313+ C644 AF          >                        xor a
 314+ C645 32 48 C0                             ld      (UBnKRotXCounter),a
 315+ C648 32 49 C0                             ld      (UBnKRotZCounter),a
 316+ C64B 3E 03                                ld      a,3                             ; these are max roll and pitch rates for later
 317+ C64D 32 4A C0                             ld      (UBnKRAT),a
 318+ C650 3C                                   inc     a
 319+ C651 32 4B C0                             ld      (UBnKRAT2),a
 320+ C654 3E 16                                ld      a,22
 321+ C656 32 4D C0                             ld      (UBnKCNT2),a
 322+ C659                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 322+ C659 3E 1F       >                        ld      a,31
 322+ C65B 32 46 C0    >                        ld      (UBnKSpeed),a
 323+ C65E                                      SetMemFalse UBnKMissleHitToProcess
 323+ C65E 3E FF       >                        ld      a,$FF
 323+ C660 32 44 C0    >                        ld      (UBnKMissleHitToProcess),a
 324+ C663 3E 80                                ld      a,ShipAIEnabled
 325+ C665 32 54 C0                             ld      (UBnkaiatkecm),a
 326+ C668                                      ;break
 327+ C668 CD 5B C5                             call    ClearShipHostile                ; its a player missile
 328+ C66B
 329+ C66B C9                                   ret
 330+ C66C              ; --------------------------------------------------------------
 331+ C66C              ; this applies blast damage to ship
 332+ C66C 3A 85 82     ShipMissileBlast:       ld      a,(CurrentMissileBlastDamage)
 333+ C66F 47                                   ld      b,a
 334+ C670 3A 58 C0                             ld      a,(UBnKEnergy)                   ; Reduce Energy
 335+ C673 90                                   sub     b
 336+ C674 C3 7D C6                             jp      UnivExplodeShip
 337+ C677 18 04                                jr      UnivExplodeShip
 338+ C679 32 58 C0                             ld      (UBnKEnergy),a
 339+ C67C C9                                   ret
 340+ C67D              ; --------------------------------------------------------------
 341+ C67D              ; This sets the ship as a shower of explosiondwd
 342+ C67D DD 01        UnivExplodeShip:        break
 343+ C67F 3A 54 C0                             ld      a,(UBnkaiatkecm)
 344+ C682 F6 30                                or      ShipExploding | ShipKilled      ; Set Exlpoding flag and mark as just been killed
 345+ C684 E6 7F                                and     Bit7Clear                       ; Remove AI
 346+ C686 32 54 C0                             ld      (UBnkaiatkecm),a
 347+ C689 AF                                   xor     a
 348+ C68A 32 58 C0                             ld      (UBnKEnergy),a
 349+ C68D                                      ;TODO
 350+ C68D C9                                   ret
 351+ C68E
 352+ C68E CD C7 C6     UnivSetDemoPostion:     call    UnivSetSpawnPosition
 353+ C691 3E 81                                ld      a,%10000001                     ; AI Enabled has 1 missile
 354+ C693 32 54 C0                             ld      (UBnkaiatkecm),a                ; set hostinle, no AI, has ECM
 355+ C696 32 46 C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 356+ C699 3E FF                                ld      a,$FF
 357+ C69B 32 49 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 358+ C69E 32 48 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 359+ C6A1                                      ZeroA
 359+ C6A1 AF          >                        xor a
 360+ C6A2 32 22 C0                             ld      (UBnKxsgn),a
 361+ C6A5 32 25 C0                             ld      (UBnKysgn),a
 362+ C6A8 32 28 C0                             ld      (UBnKzsgn),a
 363+ C6AB 21 00 00                             ld      hl,0
 364+ C6AE 22 20 C0                             ld      (UBnKxlo),hl
 365+ C6B1 22 23 C0                             ld      (UBnKylo),hl
 366+ C6B4 3A 45 C3                             ld      a,(ShipTypeAddr)
 367+ C6B7 21 B0 05                             ld      hl,$05B0                            ; so its a negative distance behind
 368+ C6BA                                      JumpIfANENusng ShipTypeStation, .SkipFurther
 368+ C6BA FE 02       >                        cp     ShipTypeStation
 368+ C6BC C2 C3 C6    >                        jp      nz,.SkipFurther
 369+ C6BF 3E 05                                ld      a,5
 370+ C6C1 84                                   add     h
 371+ C6C2 67                                   ld      h,a
 372+ C6C3 22 26 C0     .SkipFurther            ld      (UBnKzlo),hl
 373+ C6C6 C9                                   ret
 374+ C6C7              ; --------------------------------------------------------------
 375+ C6C7              ; This sets the position of the current ship randomly, called after spawing
 376+ C6C7 CD 30 C8     UnivSetSpawnPosition:   call    InitialiseOrientation
 377+ C6CA                                      RandomUnivPitchAndRoll
 377+ C6CA CD DE 87    >                        call    doRandom
 377+ C6CD F6 6F       >                        or      %01101111
 377+ C6CF 32 48 C0    >                        ld      (UBnKRotXCounter),a
 377+ C6D2 CD DE 87    >                        call    doRandom
 377+ C6D5 F6 6F       >                        or      %01101111
 377+ C6D7 32 49 C0    >                        ld      (UBnKRotZCounter),a
 378+ C6DA CD DE 87                             call    doRandom                        ; set x lo and y lo to random
 379+ C6DD 32 20 C0     .setXlo:                ld      (UBnKxlo),a
 380+ C6E0 32 23 C0     .setYlo:                ld      (UBnKylo),a
 381+ C6E3 0F           .setXsign:              rrca                                    ; rotate by 1 bit right
 382+ C6E4 47                                   ld      b,a
 383+ C6E5 E6 80                                and     SignOnly8Bit
 384+ C6E7 32 22 C0                             ld      (UBnKxsgn),a
 385+ C6EA 78           .setYSign:              ld      a,b                             ; get random back again
 386+ C6EB 0F                                   rrca                                    ; rotate by 1 bit right
 387+ C6EC 47                                   ld      b,a
 388+ C6ED E6 80                                and     SignOnly8Bit                    ; and set y sign
 389+ C6EF 32 25 C0                             ld      (UBnKysgn),a
 390+ C6F2 CB 08        .setYHigh:              rrc     b                               ; as value is in b rotate again
 391+ C6F4 78                                   ld      a,b                             ;
 392+ C6F5 E6 1F                                and     31                              ; set y hi to random 0 to 31
 393+ C6F7 32 24 C0                             ld      (UBnKyhi),a                     ;
 394+ C6FA CB 08        .setXHigh:              rrc     b                               ; as value is in b rotate again
 395+ C6FC 78                                   ld      a,b
 396+ C6FD E6 1F                                and     31                              ; set x hi to random 0 to 31
 397+ C6FF 4F                                   ld      c,a                             ; save shifted into c as well
 398+ C700 32 21 C0                             ld      (UBnKxhi),a
 399+ C703 3E 50        .setZHigh:              ld      a,80                            ; set z hi to 80 - xhi - yhi - carry
 400+ C705 98                                   sbc     b
 401+ C706 99                                   sbc     c
 402+ C707 32 27 C0                             ld      (UBnKzhi),a
 403+ C70A 3A 45 C3     .CheckIfBodyOrJunk:     ld      a,(ShipTypeAddr)
 404+ C70D                                      ReturnIfAEqNusng ShipTypeJunk
 404+ C70D FE 03       >                        cp      ShipTypeJunk
 404+ C70F C8          >                        ret     z
 405+ C710                                      ReturnIfAEqNusng ShipTypeScoopable
 405+ C710 FE 04       >                        cp      ShipTypeScoopable
 405+ C712 C8          >                        ret     z
 406+ C713 78                                   ld      a,b                             ; its not junk to set z sign
 407+ C714 0F                                   rrca                                    ; as it can jump in
 408+ C715 E6 80                                and     SignOnly8Bit
 409+ C717 32 28 C0                             ld      (UBnKzsgn),a
 410+ C71A C9                                   ret
 411+ C71B
 412+ C71B              ; --------------------------------------------------------------
 413+ C71B              ; This sets the cargo type or carryflag set for not cargo
 414+ C71B              ; Later this will be done via a loadable lookup table
 415+ C71B 3A 45 C3     ShipCargoType:          ld      a,(ShipTypeAddr)
 416+ C71E                                      JumpIfAEqNusng ShipID_CargoType5, .CargoCanister
 416+ C71E FE 04       >                        cp     ShipID_CargoType5
 416+ C720 CA 37 C7    >                        jp      z,.CargoCanister
 417+ C723              .IsItThargon:           JumpIfAEqNusng ShipID_Thargon,    .Thargon
 417+ C723 FE 27       >                        cp     ShipID_Thargon
 417+ C725 CA 3D C7    >                        jp      z,.Thargon
 418+ C728              .IsItAlloy:             JumpIfAEqNusng ShipID_Plate,      .Plate
 418+ C728 FE 1D       >                        cp     ShipID_Plate
 418+ C72A CA 40 C7    >                        jp      z,.Plate
 419+ C72D              .IsItSplinter:          JumpIfAEqNusng ShipID_Splinter,   .Splinter
 419+ C72D FE 24       >                        cp     ShipID_Splinter
 419+ C72F CA 43 C7    >                        jp      z,.Splinter
 420+ C732              .IsItEscapePod:         JumpIfAEqNusng ShipID_Escape_Pod, .EscapePod
 420+ C732 FE 11       >                        cp     ShipID_Escape_Pod
 420+ C734 CA 46 C7    >                        jp      z,.EscapePod
 421+ C737 CD DE 87     .CargoCanister:         call    doRandom
 422+ C73A E6 0F                                and     15                      ; Limit stock from Food to Platinum
 423+ C73C C9                                   ret
 424+ C73D 3E 11        .Thargon:               ld      a,AlienItemsIndex
 425+ C73F C9                                   ret
 426+ C740 3E 0A        .Plate:                 ld      a,AlloysIndex
 427+ C742 C9                                   ret
 428+ C743 3E 0D        .Splinter:              ld      a,MineralsIndex
 429+ C745 C9                                   ret
 430+ C746 3E 04        .EscapePod:             ld      a,SlavesIndex
 431+ C748 C9                                   ret
 432+ C749
 433+ C749 21 60 C7     FixStationPos:          ld      hl, DebugPos
 434+ C74C 11 20 C0                             ld      de, UBnKxlo
 435+ C74F 01 09 00                             ld      bc,9
 436+ C752 ED B0                                ldir
 437+ C754 21 69 C7                             ld      hl,DebugRotMat
 438+ C757 11 29 C0                             ld      de, UBnkrotmatSidevX
 439+ C75A 01 12 00                             ld      bc,6*3
 440+ C75D ED B0                                ldir
 441+ C75F C9                                   ret
 442+ C760
 443+ C760 00 00 00 92  DebugPos:               DB $00,$00,$00,$92,$01,$00,$7E,$04,$00
 443+ C764 01 00 7E 04
 443+ C768 00
 444+ C769 37 88 9A DC  DebugRotMat:            DB $37,$88,$9A,$DC,$1B,$F7
 444+ C76D 1B F7
 445+ C76F DF 6D 2A 07  DebugRotMat1:           DB $DF,$6D,$2A,$07,$C1,$83
 445+ C773 C1 83
 446+ C775 00 80 4A 9B  DebugRotMat2:           DB $00,$80,$4A,$9B,$AA,$D8
 446+ C779 AA D8
 447+ C77B
 448+ C77B
 449+ C77B              ; --------------------------------------------------------------
 450+ C77B              ; This sets current univrse object to space station
 451+ C77B 3E 81        ResetStationLaunch:     ld  a,%10000001                         ; Has AI and 1 Missile
 452+ C77D 32 54 C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 453+ C780 AF                                   xor a
 454+ C781 32 49 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 455+ C784 32 46 C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 456+ C787 3E FF                                ld      a,$FF
 457+ C789 32 48 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 458+ C78C 21 00 00     .SetPosBehindUs:        ld      hl,$0000
 459+ C78F 22 20 C0                             ld      (UBnKxlo),hl
 460+ C792 21 00 00                             ld      hl,$0000
 461+ C795 22 23 C0                             ld      (UBnKylo),hl
 462+ C798 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 463+ C79B 22 26 C0                             ld      (UBnKzlo),hl
 464+ C79E AF                                   xor     a
 465+ C79F 32 22 C0                             ld      (UBnKxsgn),a
 466+ C7A2 32 25 C0                             ld      (UBnKysgn),a
 467+ C7A5 3E 80                                ld      a,$80
 468+ C7A7 32 28 C0                             ld      (UBnKzsgn),a
 469+ C7AA CD 5F C8     .SetOrientation:        call    LaunchedOrientation             ; set initial facing
 470+ C7AD C9                                   ret
 471+ C7AE                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 472+ C7AE              ;Output: BC = Quotient, HL = Remainder
 473+ C7AE
 474+ C7AE
 475+ C7AE
 476+ C7AE 2A 23 29 27  FighterTypeMapping:     DB ShipID_Worm, ShipID_Sidewinder, ShipID_Viper, ShipID_Thargon
 477+ C7B2
 478+ C7B2              ; Initialiase data, iyh must equal slot number
 479+ C7B2              ;                   iyl must be ship type
 480+ C7B2              ;                   a  = current bank number
 481+ C7B2 01 22 00     UnivInitRuntime:        ld      bc,UBnKRuntimeSize
 482+ C7B5 21 3F C0                             ld      hl,UBnKStartOfRuntimeData
 483+ C7B8                                      ZeroA
 483+ C7B8 AF          >                        xor a
 484+ C7B9 32 59 C0                             ld      (UBnKECMCountDown),a
 485+ C7BC 77           .InitLoop:              ld      (hl),a
 486+ C7BD 23                                   inc     hl
 487+ C7BE 10 FC                                djnz    .InitLoop
 488+ C7C0              .SetEnergy:             ldCopyByte EnergyAddr, UBnKEnergy
 488+ C7C0 3A 3D C3    >                        ld       a,(EnergyAddr)
 488+ C7C3 32 58 C0    >                        ld       (UBnKEnergy),a
 489+ C7C6 FD 7C        .SetBankData:           ld      a,iyh
 490+ C7C8 32 3F C0                             ld      (UBnKSlotNumber),a
 491+ C7CB C6 46                                add     a,BankUNIVDATA0
 492+ C7CD 32 40 C0                             ld      (UbnKShipUnivBankNbr),a
 493+ C7D0 FD 7D                                ld      a,iyl
 494+ C7D2 32 43 C0                             ld      (UBnKShipModelId),a
 495+ C7D5 CD 0F E0                             call    GetShipBankId                ; this will mostly be debugging info
 496+ C7D8 32 41 C0                             ld      (UBnkShipModelBank),a        ; this will mostly be debugging info
 497+ C7DB 78                                   ld      a,b                          ; this will mostly be debugging info
 498+ C7DC 32 42 C0                             ld      (UBnKShipModelNbr),a         ; this will mostly be debugging info
 499+ C7DF 3A 42 C3     .SetUpMissileCount:     ld      a,(LaserAddr)                ; get laser and missile details
 500+ C7E2 E6 0F                                and     ShipMissileCount
 501+ C7E4 4F                                   ld      c,a
 502+ C7E5 3A 96 80                             ld      a,(RandomSeed1)              ; missile flag limit
 503+ C7E8 A1                                   and     c                            ; .
 504+ C7E9 32 5C C0                             ld      (UBnKMissilesLeft),a
 505+ C7EC 3A 42 C3     .SetupLaserType         ld      a,(LaserAddr)
 506+ C7EF E6 F0                                and     ShipLaserPower
 507+ C7F1 ED 23                                swapnib
 508+ C7F3 32 5B C0                             ld      (UBnKLaserPower),a
 509+ C7F6 3A 47 C3     .SetUpFighterBays:      ld      a,(ShipAIFlagsAddr)
 510+ C7F9 4F                                   ld      c,a
 511+ C7FA E6 70                                and     ShipFighterBaySize
 512+ C7FC                                      JumpIfANENusng ShipFighterBaySizeInf, .LimitedBay
 512+ C7FC FE 70       >                        cp     ShipFighterBaySizeInf
 512+ C7FE C2 03 C8    >                        jp      nz,.LimitedBay
 513+ C801 3E FF                                ld      a,$FF                       ; force unlimited ships
 514+ C803 ED 23        .LimitedBay:            swapnib                             ; as its bits 6 to 4 and we have removed bit 7 we can cheat with a swapnib
 515+ C805 32 5E C0                             ld      (UBnKFightersLeft),a
 516+ C808 79           .SetUpFighterType:      ld      a,c                         ; get back AI flags
 517+ C809 E6 0C                                and     ShipFighterType             ; fighter type is bits 2 and 3
 518+ C80B CB 1F                                rr      a                           ; so get them down to 0 and 1
 519+ C80D CB 1F                                rr      a                           ;
 520+ C80F 21 AE C7                             ld      hl,FighterTypeMapping       ; then use the lookup table
 521+ C812 ED 31                                add     hl,a                        ; for the respective ship id
 522+ C814 7E                                   ld      a,(hl)                      ; we work on this for optimisation
 523+ C815 32 5D C0                             ld      (UBnKFighterShipId),a       ; ship data holds index to this table
 524+ C818 3A 48 C3     .SetUpECM:              ld      a,(ShipECMFittedChanceAddr) ; Now handle ECM
 525+ C81B 47                                   ld      b,a
 526+ C81C 3A 98 80     .FetchLatestRandom:     ld      a,(RandomSeed3)
 527+ C81F                                      JumpIfALTNusng b, .ECMFitted
 527+ C81F B8          >                        cp      b
 527+ C820 DA 2B C8    >                        jp		c, .ECMFitted
 528+ C823              .ECMNotFitted:          SetMemFalse UBnKECMFitted
 528+ C823 3E FF       >                        ld      a,$FF
 528+ C825 32 5A C0    >                        ld      (UBnKECMFitted),a
 529+ C828 C3 2F C8                             jp      .DoneECM
 530+ C82B              .ECMFitted:             SetMemTrue  UBnKECMFitted
 530+ C82B AF          >                        xor     a
 530+ C82C 32 5A C0    >                        ld      (UBnKECMFitted),a
 531+ C82F              .DoneECM:               ; TODO set up laser power
 532+ C82F C9                                   ret
 533+ C830
 534+ C830                                      include "Universe/Ships/InitialiseOrientation.asm"
# file opened: ./Universe/Ships/InitialiseOrientation.asm
   1++C830              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   2++C830              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   3++C830              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   4++C830              InitialiseOrientation:
   5++C830 21 00 00     ZI1:                    ld      hl, 0
   6++C833 22 2B C0                             ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   7++C836 22 2D C0                             ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   8++C839 22 2F C0                             ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
   9++C83C 22 33 C0                             ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  10++C83F 22 35 C0                             ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  11++C842 22 37 C0                             ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  12++C845 21 00 60                             ld      hl, $6000					; 96 in hi byte
  13++C848                                      ;ld      hl,1
  14++C848 22 29 C0                             ld      (UBnkrotmatSidevX),hl
  15++C84B 22 31 C0                             ld      (UBnkrotmatRoofvY),hl
  16++C84E 21 00 E0                             ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  17++C851 22 39 C0                             ld      (UBnkrotmatNosevZ),hl
  18++C854 C9                                   ret
  19++C855
  20++C855              InitialisePlayerMissileOrientation:
  21++C855 CD 30 C8                             call    InitialiseOrientation
  22++C858 21 00 60                             ld      hl,$6000
  23++C85B 22 39 C0                             ld      (UBnkrotmatNosevZ),hl           ; mius
  24++C85E C9                                   ret
  25++C85F
  26++C85F
  27++C85F              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  28++C85F              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  29++C85F              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  30++C85F CD 30 C8     LaunchedOrientation:    call    InitialiseOrientation
  31++C862                                      FlipSignMem UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  31++C862 3A 36 C0    >                        ld  a,(UBnkrotmatNosevX+1)
  31++C865 EE 80       >                        xor SignOnly8Bit
  31++C867 32 36 C0    >                        ld  (UBnkrotmatNosevX+1),a
  32++C86A                                      FlipSignMem UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  32++C86A 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)
  32++C86D EE 80       >                        xor SignOnly8Bit
  32++C86F 32 38 C0    >                        ld  (UBnkrotmatNosevY+1),a
  33++C872                                      FlipSignMem UBnkrotmatNosevZ+1
  33++C872 3A 3A C0    >                        ld  a,(UBnkrotmatNosevZ+1)
  33++C875 EE 80       >                        xor SignOnly8Bit
  33++C877 32 3A C0    >                        ld  (UBnkrotmatNosevZ+1),a
  34++C87A C9                                   ret
  35++C87B
# file closed: ./Universe/Ships/InitialiseOrientation.asm
 535+ C87B
 536+ C87B              ;----------------------------------------------------------------------------------------------------------------------------------
 537+ C87B              ;OrientateVertex:
 538+ C87B              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 539+ C87B              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 540+ C87B              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 541+ C87B              ;
 542+ C87B
 543+ C87B              ;----------------------------------------------------------------------------------------------------------------------------------
 544+ C87B              ;TransposeVertex:
 545+ C87B              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 546+ C87B              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 547+ C87B              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 548+ C87B              ; VectorToVertex:
 549+ C87B              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 550+ C87B              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 551+ C87B              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 552+ C87B              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 553+ C87B              ;OUTPUTS:   cahl = quotient cde = divisor
 554+ C87B              ;--------------------------------------------------------------------------------------------------------
 555+ C87B                                      include "./ModelRender/EraseOldLines-EE51.asm"
# file opened: ././ModelRender/EraseOldLines-EE51.asm
   1++C87B              ;
   2++C87B              ; EraseOldLines:
   3++C87B              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++C87B              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++C87B              ;	 	loop + 4
   6++C87B              ; Return
   7++C87B
   8++C87B              EraseOldLines:
   9++C87B              EE51:										; if bit3 set draw lines in XX19 heap
  10++C87B              	ReturnOnMemBitClear UBnKexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++C87B 3A 51 C0    >                        ld     a,(UBnKexplDsp)
  10++C87E CB 5F       >                        bit 	3,a
  10++C880 C8          >                        ret		z
  11++C881 CB DF        	set		3,a
  12++C883 32 51 C0     	ld		(UBnKexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++C886 C3 E4 EC     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++C889              ; We use the ret from the clearLines so not needed here
  15++C889
# file closed: ././ModelRender/EraseOldLines-EE51.asm
 556+ C889                                      include "./ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ././ModelRender/TrimToScreenGrad-LL118.asm
   1++C889              ;TrimToScreenGrad:
   2++C889              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++C889              ;ret
   4++C889              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++C889              ;TODO        bit     7,a
   6++C889              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++C889              ;TODO        ld      a,h
   8++C889              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++C889              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++C889              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++C889
  12++C889              ;18                      CLC
  13++C889              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++C889              ;85 36                   STA &36			 \ XX15+2
  15++C889              ;98                      TYA 			 \ step Y1 hi
  16++C889              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++C889              ;85 37                   STA &37			 \ XX15+3
  18++C889              ;A9 00                   LDA #0			 \ xleft min
  19++C889              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++C889              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++C889              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++C889              ;	.LL119	\ x1 hi +ve from LL118
  23++C889              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++C889              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++C889              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++C889              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++C889              ;8A                      TXA 			 \ step Y1 lo
  28++C889              ;18                      CLC
  29++C889              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++C889              ;85 36                   STA &36			 \ XX15+2
  31++C889              ;98                      TYA 			 \ step Y1 hi
  32++C889              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++C889              ;85 37                   STA &37			 \ XX15+3
  34++C889              ;A2 FF                   LDX #&FF		 \ xright max
  35++C889              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++C889              ;E8                      INX 			 \ X = 0
  37++C889              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++C889              ;	.LL134	\ Ytrim
  39++C889              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++C889              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++C889              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++C889              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++C889              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++C889              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++C889              ;8A                      TXA 			 \ step X1 lo
  46++C889              ;18                      CLC
  47++C889              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++C889              ;85 34                   STA &34			 \ XX15+0
  49++C889              ;98                      TYA 			 \ step X1 hi
  50++C889              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++C889              ;85 35                   STA &35			 \ XX15+1
  52++C889              ;A9 00                   LDA #0			 \ Y bottom min
  53++C889              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++C889              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++C889              ;	.LL135	\ y1 hi +ve from LL134
  56++C889              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++C889              ;38                      SEC
  58++C889              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++C889              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++C889              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++C889              ;E9 00                   SBC #0			 \ any hi
  62++C889              ;85 83                   STA &83			 \ S
  63++C889              ;90 16                   BCC LL136		 \ failed, rts
  64++C889              ;	.LL139
  65++C889              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++C889              ;8A                      TXA 			 \ step X1 lo
  67++C889              ;18                      CLC
  68++C889              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++C889              ;85 34                   STA &34			 \ XX15+0
  70++C889              ;98                      TYA 			 \ step X1 hi
  71++C889              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++C889              ;85 35                   STA &35			 \ XX15+1
  73++C889              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++C889              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++C889              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++C889              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++C889              ;	.LL136	\ rts
  78++C889              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++C889              ;
  80++C889
# file closed: ././ModelRender/TrimToScreenGrad-LL118.asm
 557+ C889                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++C889              ;--------------------------------------------------------------------------------------------------------------------
   2++C889
   3++C889 00           clipDx                  DB      0           ; also XX12+2
   4++C88A 00           clipDxHigh              DB      0           ; also XX12+3
   5++C88B 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++C88C 00           clipDy                  DB      0           ; also XX12+4
   7++C88D 00           clipDyHigh              DB      0           ; also XX12+5
   8++C88E 00           clipGradient            DB      0
   9++C88F 00           clipDxySign             DB      0
  10++C890              varX12p3                equ     clipDxySign
  11++C890 00           clipXGTY                DB      0
  12++C891 00           clipFlags               DB      0
  13++C892 00           SWAP                    DB      0
  14++C893 00 00        varYX                   DW      0
  15++C895              ;varRegX                 DB      0
  16++C895              ;varXX12p2               DB      0
  17++C895 00           clipXX13                 DB      0
  18++C896 00           ClipSuccess             DB      0
  19++C897 00           Gradient                DB      0
  20++C898
  21++C898
  22++C898
  23++C898              ;--------------------------------------------------------------------------------------
  24++C898 ED 4B A8 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3)
  25++C89C DD 2A AC C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1)
  26++C8A0 2A A6 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1)
  27++C8A3 ED 5B AA C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5)
  28++C8A7 AF                                   xor     a
  29++C8A8 32 92 C8                             ld      (SWAP),a                    ; SWAP = 0
  30++C8AB 7A                                   ld      a,d                         ; A = X2Hi
  31++C8AC FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX
  32++C8AF DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  33++C8B1 20 0A                                jr      nz, .LL107
  34++C8B3 DD 7D                                ld      a,ixl
  35++C8B5 ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  36++C8B8 20 03                                jr      nz,.LL107
  37++C8BA FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  38++C8BD              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  39++C8BD              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  40++C8BD FD 7C        .LL107                  ld      a,iyh
  41++C8BF 32 95 C8                             ld      (clipXX13),a                ; debug copy iyh to xx13
  42++C8C2 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  43++C8C3 B0                                   or      b                           ;
  44++C8C4 20 27                                jr      nz,.LL83                    ;
  45++C8C6 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  46++C8C7 ED 27 80                             test    $80                         ; i.e  screen height < y1)
  47++C8CA 20 21                                jr      nz,.LL83
  48++C8CC              ; If we get here, (x1, y1) is on-screen
  49++C8CC FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  50++C8CE FE 00                                cp      0
  51++C8D0 20 15                                jr      nz, .LL108
  52++C8D2              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  53++C8D2 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  54++C8D3 32 A7 C0                             ld      (UBnkNewY1),a
  55++C8D6 DD 7D                                ld      a,ixl
  56++C8D8 32 A9 C0                             ld      (UBnkNewY2),a
  57++C8DB 7D                                   ld      a,l
  58++C8DC 32 A6 C0                             ld      (UBnkNewX1),a
  59++C8DF 7B                                   ld      a,e
  60++C8E0 32 A8 C0                             ld      (UBnkNewX2),a
  61++C8E3                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  61++C8E3 B7          >                        or a
  62++C8E4 C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  63++C8E5              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  64++C8E5 37           .PointsOutofBounds:     scf                                 ; LL109 (ClipFailed) carry flag set as not visible
  65++C8E6 C9                                   ret
  66++C8E7 FD 7C        .LL108:                 ld      a,iyh
  67++C8E9 B7                                   or      a
  68++C8EA 1F                                   rra
  69++C8EB FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  70++C8ED FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  71++C8EF ED 27 80                             test    $80                         ;
  72++C8F2 28 28                                jr      z, .LL115                   ;
  73++C8F4 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  74++C8F5 A2                                   and     d
  75++C8F6                                      JumpIfNegative  .PointsOutofBounds
  75++C8F6 FA E5 C8    >                        jp		m, .PointsOutofBounds
  76++C8F9 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  77++C8FA DD A4                                and     ixh
  78++C8FC                                      JumpIfNegative  .PointsOutofBounds
  78++C8FC FA E5 C8    >                        jp		m, .PointsOutofBounds
  79++C8FF 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  80++C900 3D                                   dec     a
  81++C901 FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  82++C903 7A                                    ld      a,d                         ; a = x2 hi
  83++C904 3D                                   dec     a
  84++C905 FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  85++C907                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  85++C907 F2 E5 C8    >                        jp		p, .PointsOutofBounds
  86++C90A              ;by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
  87++C90A DD 7C                                ld      a,ixh
  88++C90C 3D                                   dec     a
  89++C90D FD 6F                                ld      iyl,a
  90++C90F 78                                   ld      a,b
  91++C910 3D                                   dec     a
  92++C911 FD B5                                or      iyl
  93++C913                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  93++C913 F2 E5 C8    >                        jp		p, .PointsOutofBounds
  94++C916 79                                   ld      a,c
  95++C917 DD A5                                and     ixl
  96++C919                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
  96++C919 FA E5 C8    >                        jp		m, .PointsOutofBounds
  97++C91C              ; Clip line: calulate the line's gradient
  98++C91C              ; here as an optimisation we make sure X1 is always < X2  later on
  99++C91C              .LL115:                 ClearCarryFlag
  99++C91C B7          >                        or a
 100++C91D E5 D5        .CalcDX:                push    hl,,de
 101++C91F EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 102++C920 ED 52                                sbc     hl,de
 103++C922 22 89 C8                             ld      (clipDx),hl
 104++C925 7C                                   ld      a,h
 105++C926 32 8B C8                             ld      (clipDxHighNonABS),a
 106++C929              .CalcDy:                ClearCarryFlag
 106++C929 B7          >                        or a
 107++C92A DD E5 E1                             ld      hl,ix
 108++C92D ED 42                                sbc     hl,bc
 109++C92F 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 110++C931 22 8C C8                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 111++C934 7C           .CalcQuadrant:          ld      a,h
 112++C935 32 8D C8                             ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 113++C938              ;So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 114++C938 21 8A C8                             ld      hl,clipDxHigh
 115++C93B AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 116++C93C 32 A1 81                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 117++C93F 32 8F C8                             ld      (clipDxySign),a
 118++C942 3A 8D C8     .AbsDy:                 ld      a,(clipDyHigh)
 119++C945 ED 27 80                             test    $80
 120++C948 28 0E                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 121++C94A ED 5B 8C C8                          ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 122++C94E                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 122++C94E AF          >					xor 	a
 122++C94F 93          >                    sub 	e
 122++C950 5F          >                    ld 		e,a
 122++C951 9F          >                    sbc 	a,a
 122++C952 92          >                    sub 	d
 122++C953 57          >                    ld 		d,a
 123++C954 ED 53 8C C8                          ld      (clipDy),de                 ;OPTIMISATION 6/11/21 commented out
 124++C958 2A 89 C8     .LL110:                 ld      hl,(clipDx)
 125++C95B 3A 8A C8                             ld      a,(clipDxHigh)
 126++C95E ED 27 80                             test    $80                         ; is it a negative X
 127++C961 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 128++C963                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 129++C963                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 129++C963 AF          >					xor 	a
 129++C964 95          >					sub 	l
 129++C965 6F          >					ld 		l,a
 129++C966 9F          >					sbc 	a,a
 129++C967 94          >					sub 	h
 129++C968 67          >					ld 		h,a
 130++C969              .LL111:
 131++C969 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 132++C96A B2                                   or      d
 133++C96B 28 0A                                jr      z,.CalculateDelta
 134++C96D                                      ShiftDERight1
 134++C96D CB 3A       >			   srl d
 134++C96F CB 1B       >			   rr  e
 135++C971                                      ShiftHLRight1
 135++C971 CB 3C       >			   srl h
 135++C973 CB 1D       >			   rr  l
 136++C975 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 137++C977              .CalculateDelta:
 138++C977              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 139++C977 AF           .LL113:                 xor     a
 140++C978 32 BB 81                             ld      (varT),a                    ; t = 0
 141++C97B 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 142++C97C                                      JumpIfALTNusng  e, .LL114           ;
 142++C97C BB          >                        cp      e
 142++C97D DA 8D C9    >                        jp		c, .LL114
 143++C980              ; Here Dx >= Dy sp calculate Delta Y / delta X
 144++C980 32 9F 81     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 145++C983 57                                   ld      d,a                         ; d = also Q for calc
 146++C984 7B                                   ld      a,e                         ; Set A = delta_y_lo
 147++C985 CD 25 97                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 148++C988 32 A0 81                             ld      (varR),a                    ;
 149++C98B 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 150++C98D              ; Here Delta Y > Delta X so calulate delta X / delta Y
 151++C98D 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 152++C98E 57                                   ld      d,a
 153++C98F 32 9F 81                             ld      (varQ),a
 154++C992 7D                                   ld      a,l                         ; Set A = delta_x_lo
 155++C993 CD 25 97                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 156++C996 32 A0 81                             ld      (varR),a                    ;
 157++C999 21 BB 81                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 158++C99C 35                                   dec     (hl)
 159++C99D D1           .LL116:                 pop     de                          ; get back X2
 160++C99E E1                                   pop     hl                          ; get back X1 into hl,
 161++C99F 3A A0 81                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 162++C9A2 32 8E C8                             ld      (clipGradient),a
 163++C9A5 FD 6F                                ld      iyl,a
 164++C9A7 3A A1 81                             ld      a,(varS)
 165++C9AA 32 8F C8                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 166++C9AD                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 167++C9AD FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 168++C9AF FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 169++C9B1 28 05                                jr      z,.LL138                    ;
 170++C9B3 ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 171++C9B6 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 172++C9B8              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 173++C9B8 CD DF C9     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 174++C9BB FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 175++C9BD ED 27 80                             test    $80
 176++C9C0 28 1A                                jr      z,.LL124
 177++C9C2              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 178++C9C2 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 179++C9C3 B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 180++C9C4 C2 E5 C8                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 181++C9C7 B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 182++C9C8 FA E5 C8                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 183++C9CB              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 184++C9CB              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 185++C9CB EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 186++C9CC DD E5                                push    ix                          ;  swap Y1 and Y2
 187++C9CE C5                                   push    bc
 188++C9CF DD E1                                pop     ix
 189++C9D1 C1                                   pop     bc
 190++C9D2 CD DF C9                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 191++C9D5 3A 92 C8                             ld      a,(SWAP)
 192++C9D8 3D                                   dec     a
 193++C9D9 32 92 C8                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 194++C9DC C3 D2 C8     .LL124:                 jp      .ClipDone                    ; now put points in place
 195++C9DF
 196++C9DF              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 197++C9DF              ; iyh still holds XX13 iyl still holds gradient
 198++C9DF 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 199++C9E0 ED 27 80                             test    $80
 200++C9E3 28 17                                jr      z,.LL119
 201++C9E5 32 A1 81     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 202++C9E8 E5 D5 C5                             push    hl,,de,,bc
 203++C9EB CD 61 CA                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 204++C9EE                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 205++C9EE                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 206++C9EE C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 207++C9F1 2A 93 C8                             ld      hl,(varYX)
 208++C9F4 09                                   add     hl,bc                       ; y1 = y1 + varYX
 209++C9F5 44 4D                                ld      bc,hl
 210++C9F7 21 00 00                             ld      hl,0                        ; Set x1 = 0
 211++C9FA 18 1A                               jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 212++C9FC FE 00        .LL119:                 cp      0
 213++C9FE 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 214++CA00 3D                                   dec     a
 215++CA01 32 A1 81                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 216++CA04 E5 D5 C5                             push    hl,,de,,bc
 217++CA07 CD 61 CA                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 218++CA0A                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 219++CA0A                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 220++CA0A C1 D1 E1                             pop     hl,,de,,bc
 221++CA0D 2A 93 C8                             ld      hl,(varYX)
 222++CA10 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 223++CA11 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 224++CA13 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 225++CA16              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 226++CA16 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 227++CA17 ED 27 80                             test    $80                         ;
 228++CA1A 28 1A                                jr      z,.LL135                    ;
 229++CA1C 32 A1 81                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 230++CA1F 79                                   ld      a,c                         ; Set R = y1_lo
 231++CA20 32 A0 81                             ld      (varR),a                    ;
 232++CA23 E5 D5 C5                             push    hl,,de,,bc
 233++CA26 CD C2 CA                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 234++CA29                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 235++CA29                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 236++CA29 C1 D1 E1                             pop     hl,,de,,bc
 237++CA2C D5                                   push    de
 238++CA2D EB                                   ex      hl,de                       ; de = x1
 239++CA2E 2A 93 C8                             ld      hl,(varYX)                  ; hl = varYX
 240++CA31 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 241++CA32 D1                                   pop     de                          ; de = x2 again
 242++CA33 01 00 00                             ld      bc,0                        ; Set y1 = 0
 243++CA36 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 244++CA37 E6 80                                and     $80
 245++CA39 B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 246++CA3A C8                                   ret     z
 247++CA3B E5                                   push    hl
 248++CA3C 60 69                                ld      hl,bc
 249++CA3E 01 80 00                             ld      bc,128
 250++CA41 B7                                   or      a
 251++CA42 ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 252++CA44 22 A0 81                             ld      (varRS), hl                 ; and now RS (or SR)
 253++CA47 7C                                   ld      a,h
 254++CA48 E1                                   pop     hl
 255++CA49 ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 256++CA4C C0                                   ret     nz
 257++CA4D              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 258++CA4D E5 D5 C5     .LL139:                 push    hl,,de,,bc
 259++CA50 CD C2 CA                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 260++CA53                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 261++CA53                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 262++CA53 C1 D1 E1                             pop     hl,,de,,bc
 263++CA56 D5                                   push    de
 264++CA57 EB                                   ex      hl,de
 265++CA58 2A 93 C8                             ld      hl,(varYX)
 266++CA5B 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 267++CA5C 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 268++CA5F D1                                   pop     de
 269++CA60 C9           .LL136:                 ret                                 ;  Return from the subroutine
 270++CA61
 271++CA61
 272++CA61              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 273++CA61              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 274++CA61              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 275++CA61              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 276++CA61 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 277++CA62 32 A0 81                             ld      (varR),a
 278++CA65 CD 1F CB                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 279++CA68 F5                                   push    af                           ;  Store A on the stack so we can use it later
 280++CA69 C5                                   push    bc
 281++CA6A 47                                   ld      b,a
 282++CA6B 3A BB 81                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 283++CA6E FE 00                                cp      0
 284++CA70 78                                   ld      a,b
 285++CA71 C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 286++CA72 C2 89 CA                             jp      nz, .LL121
 287++CA75              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 288++CA75 3A 8E C8     .LL122:                  ld      a,(clipGradient)
 289++CA78 32 9F 81                             ld      (varQ),a; optimise
 290++CA7B CD 80 94                             call    HLequSRmulQdiv256
 291++CA7E 22 93 C8                             ld      (varYX),hl
 292++CA81 F1                                   pop     af
 293++CA82 ED 27 80                             test    $80
 294++CA85 CA B5 CA                             jp      z,.LL133
 295++CA88 C9                                   ret
 296++CA89 11 FE FF     .LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 297++CA8C 2A A0 81                             ld      hl,(varRS)                  ; hl = RS
 298++CA8F 3A 9F 81                             ld      a,(varQ)
 299++CA92 47                                   ld      b,a                         ; b = q
 300++CA93              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 300++CA93 CB 25       >			   sla l
 300++CA95 CB 14       >			   rl  h
 301++CA97 7C                                   ld      a,h
 302++CA98 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 303++CA9A                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 303++CA9A B8          >                        cp      b
 303++CA9B DA A6 CA    >                        jp		c, .LL132
 304++CA9E 3F           .LL131:                 ccf                                 ; compliment carry
 305++CA9F 98                                   sbc     a,b                         ; q
 306++CAA0 67                                   ld      h,a                         ; h (s)
 307++CAA1 7D                                   ld      a,l                         ; r
 308++CAA2 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 309++CAA4 37                                   scf                                 ; set carry for next rolls
 310++CAA5 3F                                   ccf
 311++CAA6              .LL132:                 RollDELeft1                         ; Rotate de bits left
 311++CAA6 CB 13       >               rl  e
 311++CAA8 CB 12       >               rl  d
 312++CAAA 38 E7                                jr      c,.LL130                    ;
 313++CAAC ED 53 93 C8                          ld      (varYX),de
 314++CAB0 F1                                   pop     af              ; get back sign
 315++CAB1 ED 27 80                             test    $80
 316++CAB4 C8                                   ret     z               ; if negative then return with value as is reversed sign
 317++CAB5 2A 93 C8     .LL133:                 ld      hl,(varYX)      ; may not actually need this?
 318++CAB8                                      NegHL
 318++CAB8 AF          >                    xor a
 318++CAB9 95          >                    sub l
 318++CABA 6F          >                    ld l,a
 318++CABB 9F          >                    sbc a,a
 318++CABC 94          >                    sub h
 318++CABD 67          >                    ld h,a
 319++CABE 22 93 C8                             ld      (varYX),hl
 320++CAC1 C9           .LL128:                 ret
 321++CAC2
 322++CAC2
 323++CAC2
 324++CAC2
 325++CAC2              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 326++CAC2              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 327++CAC2              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 328++CAC2              ;
 329++CAC2              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 330++CAC2              ;                          LL133                Negate (Y X) and return from the subroutine
 331++CAC2              ;                          LL128                Contains an RTS
 332++CAC2 CD 1F CB     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 333++CAC5 F5                                   push    af                          ; Store A on the stack so we can use it later
 334++CAC6 C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 335++CAC7 47                                   ld      b,a
 336++CAC8 3A BB 81                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 337++CACB FE 00                                cp      0
 338++CACD 78                                   ld      a,b
 339++CACE C1                                   pop     bc
 340++CACF C2 0B CB                             jp      nz, .LL122
 341++CAD2              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 342++CAD2 11 FE FF     .LL121:                 ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 343++CAD5 2A A0 81                             ld      hl,(varRS)                  ; hl = RS
 344++CAD8 3A 9F 81                             ld      a,(varQ)
 345++CADB 47                                   ld      b,a                         ; b = q
 346++CADC              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 346++CADC CB 25       >			   sla l
 346++CADE CB 14       >			   rl  h
 347++CAE0 7C                                   ld      a,h
 348++CAE1 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 349++CAE3                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 349++CAE3 B8          >                        cp      b
 349++CAE4 DA EF CA    >                        jp		c, .LL132
 350++CAE7 3F           .LL131:                 ccf                                 ; compliment carry
 351++CAE8 98                                   sbc     a,b                         ; q
 352++CAE9 67                                   ld      h,a                         ; h (s)
 353++CAEA 7D                                   ld      a,l                         ; r
 354++CAEB DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 355++CAED 37                                   scf                                 ; set carry for next rolls
 356++CAEE 3F                                   ccf
 357++CAEF              .LL132:                 RollDELeft1                         ; Rotate de bits left
 357++CAEF CB 13       >               rl  e
 357++CAF1 CB 12       >               rl  d
 358++CAF3 38 E7                                jr      c,.LL130                    ;
 359++CAF5 ED 53 93 C8                          ld      (varYX),de
 360++CAF9 F1                                   pop     af              ; get back sign
 361++CAFA ED 27 80                             test    $80
 362++CAFD C8                                   ret     z               ; if negative then return with value as is reversed sign
 363++CAFE 2A 93 C8     .LL133:                 ld      hl,(varYX)      ; may not actually need this?
 364++CB01                                      NegHL
 364++CB01 AF          >                    xor a
 364++CB02 95          >                    sub l
 364++CB03 6F          >                    ld l,a
 364++CB04 9F          >                    sbc a,a
 364++CB05 94          >                    sub h
 364++CB06 67          >                    ld h,a
 365++CB07 22 93 C8                             ld      (varYX),hl
 366++CB0A C9           .LL128:                 ret
 367++CB0B              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 368++CB0B 3A 8E C8     .LL122:                 ld      a,(clipGradient)
 369++CB0E 32 9F 81                             ld      (varQ),a; optimise
 370++CB11 CD 80 94                             call    HLequSRmulQdiv256
 371++CB14 22 93 C8                             ld      (varYX),hl
 372++CB17 F1                                   pop     af
 373++CB18 ED 27 80                             test    $80
 374++CB1B CA FE CA                             jp      z,.LL133
 375++CB1E C9                                   ret
 376++CB1F
 377++CB1F              ; Do the following, in this order:  Q = XX12+2
 378++CB1F              ;                                   A = S EOR XX12+3
 379++CB1F              ;                                   (S R) = |S R|
 380++CB1F              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 381++CB1F 3A 8E C8     LL129:                  ld      a,(clipGradient)
 382++CB22 32 9F 81                             ld      (varQ),a                    ; Set Q = XX12+2
 383++CB25 3A A1 81                             ld      a,(varS)                    ; If S is positive, jump to LL127
 384++CB28 E5 F5                                push    hl,,af                      ; else
 385++CB2A ED 27 80                             test    $80                         ;   if bit 7 is clear
 386++CB2D 28 0C                                jr      z,.LL127                    ;      RS = ABS RS
 387++CB2F 2A A0 81                             ld      hl,(varRS)                  ;      .
 388++CB32                                      NegHL                               ;      .
 388++CB32 AF          >                    xor a
 388++CB33 95          >                    sub l
 388++CB34 6F          >                    ld l,a
 388++CB35 9F          >                    sbc a,a
 388++CB36 94          >                    sub h
 388++CB37 67          >                    ld h,a
 389++CB38 22 A0 81                             ld      (varRS),hl                  ;      .
 390++CB3B 21 8F C8     .LL127:                 ld      hl,clipDxySign              ;   hl = dxy sign
 391++CB3E F1                                   pop     af                          ;
 392++CB3F AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 393++CB40 E1                                   pop     hl
 394++CB41 C9                                   ret
 395++CB42
 396++CB42              ;--------------------------------------------------------------------------------------
 397++CB42
 398++CB42              ;My logic version
 399++CB42              ClipLineV3:             ;break
 400++CB42 ED 4B A8 C0                          ld      bc,(UbnkPreClipY1)                  ; bc - XX15(2,3)
 401++CB46 DD 2A AC C0                          ld      ix,(UbnkPreClipY2)                  ; ix - XX12(0,1)
 402++CB4A 2A A6 C0                             ld      hl,(UbnkPreClipX1)                  ; hl - XX15(0,1)
 403++CB4D ED 5B AA C0                          ld      de,(UbnkPreClipX2)                  ; de - XX15(4,5)
 404++CB51 78           .CheckNoClip:           ld      a,b
 405++CB52 B2                                   or      d
 406++CB53 B4                                   or      h
 407++CB54 DD B4                                or      ixh
 408++CB56 C2 5F CB                             jp      nz,.CheckXOffScreen                 ; if both Y1 and y2 have bit 7 set
 409++CB59 79                                   ld      a,c                                 ; then we clip
 410++CB5A DD A5                                and     ixl
 411++CB5C CA 66 CC                             jp      z, .ClipComplete
 412++CB5F              ;if either x1hi x2hi are 0 then we clip. if both <> 0and both same sign exit
 413++CB5F              .CheckXOffScreen:       ZeroA                                       ;
 413++CB5F AF          >                        xor a
 414++CB60 32 91 C8                             ld      (clipFlags),a                       ;
 415++CB63 7C                                   ld      a,h                                 ; if x1 and x2 high are zero then check for clipping Y
 416++CB64 B2                                   or      d                                   ;
 417++CB65 28 11                                jr      z,.CheckYOffScreen                  ;
 418++CB67 7C           .CheckXSameSign:        ld      a,h                                 ; if x1 high and x2 high are same sign then off screen
 419++CB68 FE 00                                cp      0                                   ; we have already elimited x1 x2 zero
 420++CB6A 28 0C                                jr      z,.CheckYOffScreen                  ; .
 421++CB6C 7A                                   ld      a,d                                 ; .
 422++CB6D FE 00                                cp      0                                   ; .
 423++CB6F 28 07                                jr      z,.CheckYOffScreen                  ; .
 424++CB71 B4                                   or      h                                   ; .
 425++CB72 28 04                                jr      z,.CheckYOffScreen                  ; .
 426++CB74 AC                                   xor     h                                   ; .
 427++CB75 E6 80                                and     $80                                 ; .
 428++CB77 C8                                   ret     z                                   ; .
 429++CB78              ; uif y1h and y2h are negative, same sign and exit
 430++CB78 78           .CheckYOffScreen:       ld      a,b
 431++CB79 DD AC        .CheckBothYNegative:    xor     ixh
 432++CB7B E6 80                                and     $80
 433++CB7D 20 22                                jr      nz,.StartProcessing
 434++CB7F 78                                   ld      a,b                                 ; so if they are the same
 435++CB80 E6 80                                and     $80                                 ; then both negative if y1h negative
 436++CB82 C0                                   ret     nz
 437++CB83 78                                   ld      a,b
 438++CB84 E6 80                                and     $80
 439++CB86 20 19                                jr      nz,.StartProcessing                 ;negative we can go straight to clip
 440++CB88 21 7F 00                             ld      hl,127                              ; > 127 then
 441++CB8B 50 59                                ld      de,bc
 442++CB8D CD 59 99                             call    compare16HLDE
 443++CB90 F2 A1 CB                             jp      p,.StartProcessing                  ; +ve and at least one on screen
 444++CB93 DD 7C        .Y1IsNegative:          ld      a,ixh
 445++CB95 E6 80                                and     $80
 446++CB97 20 08                                jr      nz,.StartProcessing
 447++CB99 DD 54 DD 5D                          ld      de,ix
 448++CB9D CD 59 99                             call    compare16HLDE
 449++CBA0 F8                                   ret     m
 450++CBA1
 451++CBA1 2A A6 C0     .StartProcessing:       ld      hl,(UbnkPreClipX1)                  ; hl - XX15(0,1)
 452++CBA4 ED 5B AA C0                          ld      de,(UbnkPreClipX2)                  ; de - XX15(4,5)
 453++CBA8 FD 26 00                             ld      iyh,0
 454++CBAB              ;if x1hi or y1 high <> 0 or y1 > 127 then set bit 1 of clipcoord
 455++CBAB 7C                                   ld      a,h
 456++CBAC B0                                   or      b
 457++CBAD 28 06                                jr      z,.CheckP1Ylo
 458++CBAF FD 26 01     .P1OffScreen:           ld      iyh,1
 459++CBB2 C3 BD CB                             jp      .CheckP2OffScreen
 460++CBB5 79           .CheckP1Ylo:            ld      a,c
 461++CBB6 E6 80                                and     $80
 462++CBB8 28 03                                jr      z,.CheckP2OffScreen
 463++CBBA FD 26 01                             ld      iyh,1
 464++CBBD              .CheckP2OffScreen:
 465++CBBD              ;if x2hi or y2 high <> 0 or y2 > 127 then set bit 2 of clipcoord
 466++CBBD 7A                                   ld      a,d
 467++CBBE DD B4                                or      ixh
 468++CBC0 28 09                                jr      z,.CheckP2Ylo
 469++CBC2 FD 7C        .P2OffScreen:           ld      a,iyh
 470++CBC4 F6 02                                or      2
 471++CBC6 FD 67                                ld      iyh,a
 472++CBC8 C3 D7 CB                             jp      .CheckXDirection
 473++CBCB DD 7D        .CheckP2Ylo:            ld      a,ixl
 474++CBCD E6 80                                and     $80
 475++CBCF 28 06                                jr      z,.CheckXDirection
 476++CBD1 FD 7C                                ld      a,iyh
 477++CBD3 F6 02                                or      2
 478++CBD5 FD 67                                ld      iyh,a
 479++CBD7              .CheckXDirection:       ;break
 480++CBD7              ;If X1 > X2 then direction is -ve so set bit 3 of clipccord
 481++CBD7 CD 59 99                             call    compare16HLDE
 482++CBDA F2 E3 CB                             jp      p,.CheckYDirection
 483++CBDD FD 7C        .X1ltX2:                ld      a,iyh
 484++CBDF F6 04                                or      4
 485++CBE1 FD 67                                ld      iyh,a
 486++CBE3              ;if Y1 > Y2 then slop is -ve so set bit 4 of clipcoord
 487++CBE3 D5 E5        .CheckYDirection:       push    de,,hl
 488++CBE5 60 69                                ld      hl,bc
 489++CBE7 DD 54 DD 5D                          ld      de,ix
 490++CBEB CD 59 99                             call    compare16HLDE
 491++CBEE F2 F7 CB                             jp      p,.Y1gteY2
 492++CBF1 FD 7C        .Y1ltY2:                ld      a,iyh
 493++CBF3 F6 08                                or      8
 494++CBF5 FD 67                                ld      iyh,a
 495++CBF7              ;calculate DX
 496++CBF7              .Y1gteY2:               ;break
 497++CBF7 D1 E1                                pop     hl,,de                              ; reverse pop to do an ex
 498++CBF9                                      ClearCarryFlag                              ; .
 498++CBF9 B7          >                        or a
 499++CBFA ED 52                                sbc     hl,de                               ; .
 500++CBFC 7C           .ABSDX:                 ld      a,h                                 ; HL = ABS HL
 501++CBFD E6 80                                and     $80                                 ; .
 502++CBFF 28 06                                jr      z,.DXPositive                       ; .
 503++CC01                                      macronegate16hl                             ; .
 503++CC01 AF          >					xor 	a
 503++CC02 95          >					sub 	l
 503++CC03 6F          >					ld 		l,a
 503++CC04 9F          >					sbc 	a,a
 503++CC05 94          >					sub 	h
 503++CC06 67          >					ld 		h,a
 504++CC07 EB           .DXPositive:            ex      de,hl                               ; de = abs delta x
 505++CC08 DD E5 E1                             ld      hl,ix                               ; iy = hl = Y2 - Y1
 506++CC0B ED 42                                sbc     hl,bc                               ; .
 507++CC0D 7C           .ABSDY:                 ld      a,h                                 ; HL = ABS HL
 508++CC0E E6 80                                and     $80                                 ; .
 509++CC10 28 06                                jr      z,.DYPositive                       ; .
 510++CC12                                      macronegate16hl                             ; .
 510++CC12 AF          >					xor 	a
 510++CC13 95          >					sub 	l
 510++CC14 6F          >					ld 		l,a
 510++CC15 9F          >					sbc 	a,a
 510++CC16 94          >					sub 	h
 510++CC17 67          >					ld 		h,a
 511++CC18              .DYPositive:            ; Scale DX and DY to 8 bit, by here hl = abs dy, de = abs dx
 512++CC18              ;calculate DY
 513++CC18 7C           .ScaleLoop:             ld      a,h                                 ; At this point DX and DY are ABS values
 514++CC19 B2                                   or      d                                   ; .
 515++CC1A 28 0A                                jr      z,.ScaleDone                        ; .
 516++CC1C                                      ShiftDERight1                               ; .
 516++CC1C CB 3A       >			   srl d
 516++CC1E CB 1B       >			   rr  e
 517++CC20                                      ShiftHLRight1                               ; .
 517++CC20 CB 3C       >			   srl h
 517++CC22 CB 1D       >			   rr  l
 518++CC24 18 F2                                jr      .ScaleLoop                          ; scaled down Dx and Dy to 8 bit, Dy may have been;;                                                                                               negative
 519++CC26              .ScaleDone:             ; hl = ABS DY, DE = ABS DX,  bc = Y1, ix = Y2,   note H and D will be zero
 520++CC26              ;if Dx = 0 then hosrizontal line and clip X1 & X2 only then exit
 521++CC26              ;if Dy = 0 then vertical line and clip Y1 & Y2 only then exit
 522++CC26
 523++CC26              ;if DX < DY  gradient = 256 * delta_x_lo / delta_y_lo
 524++CC26              ;       else gradient = 256 * delta_y_lo / delta_x_lo, set bit 5 of clipcord
 525++CC26 7B           .CalculateDelta:        ld      a,e                                 ; if DX < DY goto DX/DY
 526++CC27                                      JumpIfALTNusng l,.DXdivDY                   ; else do DY/DX
 526++CC27 BD          >                        cp      l
 526++CC28 DA 3C CC    >                        jp		c, .DXdivDY
 527++CC2B 7D           .DYdivDX:               ld      a,l                                 ;    A = DY
 528++CC2C 53                                   ld      d,e                                 ;    D = DX
 529++CC2D CD 25 97                             call    AEquAmul256DivD                     ;    A = R = 256 * DY / DX
 530++CC30 32 97 C8     .SaveGradientDYDX:      ld      (Gradient),a
 531++CC33 FD 7C                                ld      a,iyh
 532++CC35 F6 10                                or      16
 533++CC37 FD 67                                ld      iyh,a                               ;
 534++CC39 C3 44 CC                             jp      .ClipP1                             ;
 535++CC3C 7B           .DXdivDY:               ld      a,e                                 ;    A = DX
 536++CC3D 55                                   ld      d,l                                 ;    D = DY
 537++CC3E CD 25 97                             call    AEquAmul256DivD                     ;    A = R = 256 * DX / DY
 538++CC41 32 97 C8     .SaveGradientDXDY:      ld      (Gradient),a
 539++CC44              ;if bit 1 of clipccord is set call    LL118
 540++CC44 FD 7C        .ClipP1:                ld      a,iyh
 541++CC46 E6 01                                and     1
 542++CC48 CA 55 CC                             jp      z,.ClipP2
 543++CC4B CD 96 CC                             call    LL118v3
 544++CC4E ED 43 A8 C0                          ld      (UbnkPreClipY1), bc                 ; bc - XX15(2,3);;
 545++CC52 22 A6 C0                             ld      (UbnkPreClipX1), hl
 546++CC55              ;if bit 2 of clipcoord is set
 547++CC55              ;        swap x1y1 with x2y2
 548++CC55              ;        call    LL118
 549++CC55 FD 7C        .ClipP2:                ld      a,iyh
 550++CC57 E6 02                                and     2
 551++CC59 CA 66 CC                             jp      z,.ClipComplete
 552++CC5C CD 8C CC                             call    LL118v3PreSwap
 553++CC5F ED 43 AC C0                          ld      (UbnkPreClipY2), bc                 ; bc - XX15(2,3);;
 554++CC63 22 AA C0                             ld      (UbnkPreClipX2), hl
 555++CC66              ;clip compelte exit
 556++CC66 3E FF        .ClipComplete:          ld      a,$FF
 557++CC68 32 96 C8                             ld      (ClipSuccess),a
 558++CC6B ED 4B A8 C0                          ld      bc,(UbnkPreClipY1)                  ; bc - XX15(2,3);;
 559++CC6F 2A A6 C0                             ld      hl,(UbnkPreClipX1)
 560++CC72 DD 2A AC C0                          ld      ix,(UbnkPreClipY2)                  ; bc - XX15(2,3);;
 561++CC76 ED 5B AA C0                          ld      de,(UbnkPreClipX2)
 562++CC7A 79                                   ld      a,c                                 ; Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
 563++CC7B 32 A7 C0                             ld      (UBnkNewY1),a
 564++CC7E DD 7D                                ld      a,ixl
 565++CC80 32 A9 C0                             ld      (UBnkNewY2),a
 566++CC83 7D                                   ld      a,l
 567++CC84 32 A6 C0                             ld      (UBnkNewX1),a
 568++CC87 7B                                   ld      a,e
 569++CC88 32 A8 C0                             ld      (UBnkNewX2),a
 570++CC8B C9                                   ret
 571++CC8C
 572++CC8C ED 4B AC C0  LL118v3PreSwap:         ld      bc,(UbnkPreClipY2)                  ; bc - XX15(2,3);;
 573++CC90 2A AA C0                             ld      hl,(UbnkPreClipX2)
 574++CC93 C3 9D CC                             jp      LL118v3Fetched
 575++CC96 ED 4B A8 C0  LL118v3:                ld      bc,(UbnkPreClipY1)                  ; bc - XX15(2,3);;
 576++CC9A 2A A6 C0                             ld      hl,(UbnkPreClipX1)
 577++CC9D              LL118v3Fetched:
 578++CC9D              ; if X1 hi <> 0
 579++CC9D              LL118:                  ;break
 580++CC9D 7C                                   ld      a,h
 581++CC9E A7                                   and     a
 582++CC9F 28 7D                                jr      z,.DoneXCalc
 583++CCA1              ;        if x1 hi bit 7 is set (so negative)
 584++CCA1 E6 80        .CalcBlock1:            and     $80
 585++CCA3 28 3E                                jr      z,.CalcBlockX2
 586++CCA5              ;               if clipccord bit 5 is set Adjust = abs(X1) / Gradient (may need to swap bit check?)
 587++CCA5 FD 7C        .CalcBlockX1A:          ld      a,iyh
 588++CCA7 E6 10                                and      16
 589++CCA9 20 12                                jr      nz,.CalcBlockX1B
 590++CCAB                                      macronegate16hl
 590++CCAB AF          >					xor 	a
 590++CCAC 95          >					sub 	l
 590++CCAD 6F          >					ld 		l,a
 590++CCAE 9F          >					sbc 	a,a
 590++CCAF 94          >					sub 	h
 590++CCB0 67          >					ld 		h,a
 591++CCB1 3A 97 C8                             ld      a,(Gradient)
 592++CCB4 C5                                   push    bc                                  ; abs(X1) / Gradient
 593++CCB5 4F                                   ld      c,a
 594++CCB6 CD A5 CD                             call    div_hl_c
 595++CCB9 C1                                   pop     bc
 596++CCBA C3 CB CC                             jp      .DoneX1Calc
 597++CCBD              ;                                else set Adjust = abs(X1) * Gradient
 598++CCBD C5           .CalcBlockX1B:          push    bc                                  ;  abs(X1) * Gradient
 599++CCBE                                      macronegate16hl
 599++CCBE AF          >					xor 	a
 599++CCBF 95          >					sub 	l
 599++CCC0 6F          >					ld 		l,a
 599++CCC1 9F          >					sbc 	a,a
 599++CCC2 94          >					sub 	h
 599++CCC3 67          >					ld 		h,a
 600++CCC4 3A 97 C8                             ld      a,(Gradient)
 601++CCC7 CD 86 94                             call    HLeqyHLmulAdiv256
 602++CCCA C1                                   pop     bc
 603++CCCB              ;               y1 += adjust * (-1 if bit 4 of clipcoord is set)
 604++CCCB              ;               x1 = 0 then call into DonrX1Calc
 605++CCCB FD 7C        .DoneX1Calc:            ld      a,iyh
 606++CCCD E6 08                                and     8
 607++CCCF 20 06                                jr      nz,.X1SkipNegate
 608++CCD1                                      macronegate16hl
 608++CCD1 AF          >					xor 	a
 608++CCD2 95          >					sub 	l
 608++CCD3 6F          >					ld 		l,a
 608++CCD4 9F          >					sbc 	a,a
 608++CCD5 94          >					sub 	h
 608++CCD6 67          >					ld 		h,a
 609++CCD7 50 59        .X1SkipNegate:          ld      de,bc
 610++CCD9 EB                                   ex      hl,de
 611++CCDA 19                                   add     hl,de
 612++CCDB 44 4D                                ld      bc,hl
 613++CCDD 21 00 00                             ld      hl,0
 614++CCE0 C3 1E CD                             jp      .DoneXCalc
 615++CCE3              ;        else x1 hi is positive
 616++CCE3              ;                if clipccord bit 5 is set Adjust = X1 lo / Gradient (may need to swap bit check?)
 617++CCE3 FD 7C        .CalcBlockX2:           ld      a,iyh
 618++CCE5 E6 10                                and     16
 619++CCE7 20 12                                jr      nz,.CalcBlockX2B
 620++CCE9 3A 97 C8     .CalcBlockX2A:          ld      a,(Gradient)            ;Q = gradient
 621++CCEC C5                                   push    bc
 622++CCED 4F                                   ld      c,a
 623++CCEE 11 00 01                             ld      de,256
 624++CCF1 B7 ED 52                             sub     hl,de
 625++CCF4 CD A5 CD                             call    div_hl_c
 626++CCF7 C1                                   pop     bc
 627++CCF8 C3 09 CD                             jp      .DoneX2Calc
 628++CCFB              ;                                 else set Adjust = X1 lo * Gradient
 629++CCFB C5           .CalcBlockX2B:          push    bc
 630++CCFC 3A 97 C8                             ld      a,(Gradient)            ;Q = gradient
 631++CCFF 11 00 01                             ld      de,256
 632++CD02 B7 ED 52                             sub     hl,de
 633++CD05 CD 86 94                             call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 634++CD08 C1                                   pop     bc
 635++CD09              ;                y1 += adjust * (-1 if bit 4 of clipcoord is set)
 636++CD09              ;                x1 = 255
 637++CD09 FD 7C        .DoneX2Calc:ld          a,iyh
 638++CD0B E6 08                                and     8
 639++CD0D 20 06                                jr      nz,.X2SkipNegate
 640++CD0F                                      macronegate16hl
 640++CD0F AF          >					xor 	a
 640++CD10 95          >					sub 	l
 640++CD11 6F          >					ld 		l,a
 640++CD12 9F          >					sbc 	a,a
 640++CD13 94          >					sub 	h
 640++CD14 67          >					ld 		h,a
 641++CD15 EB           .X2SkipNegate:          ex      de,hl
 642++CD16 60 69                                ld      hl,bc
 643++CD18 19                                   add     hl,de
 644++CD19 44 4D                                ld      bc,hl
 645++CD1B 21 FF 00                             ld      hl,255
 646++CD1E              ;    if Y1 hi <> 0 or Y1 low >= 128
 647++CD1E 78           .DoneXCalc:             ld      a,b
 648++CD1F A7                                   and     a
 649++CD20 20 04                                jr      nz,.CalcBlockY1Test
 650++CD22 79                                   ld      a,c
 651++CD23 E6 80                                and     $80
 652++CD25 C8                                   ret     z
 653++CD26              ;       if Y1 hi bit 7 is set
 654++CD26 78           .CalcBlockY1Test:       ld      a,b
 655++CD27 E6 80                                and     $80
 656++CD29 28 3D                                jr      z,.CalcBlockY2
 657++CD2B              ;                if clipccord bit 5 is set Adjust = abs(Y1) / Gradient (may need to swap bit check?)
 658++CD2B FD 7C        .CalcBlockY1:           ld      a,iyh
 659++CD2D E6 10                                and     16
 660++CD2F 20 15                                jr      nz,.CalcBlockY1B
 661++CD31              .CalcBlockY1A:          macronegate16bc
 661++CD31 AF          >					xor 	a
 661++CD32 91          >                    sub 	c
 661++CD33 4F          >                    ld 		c,a
 661++CD34 9F          >                    sbc 	a,a
 661++CD35 90          >                    sub 	b
 661++CD36 47          >                    ld 		b,a
 662++CD37 3A 97 C8                             ld      a,(Gradient)            ;Q = gradient
 663++CD3A E5                                   push    hl
 664++CD3B 60 69                                ld      hl,bc
 665++CD3D 4F                                   ld      c,a
 666++CD3E CD A5 CD                             call    div_hl_c;LLHLdivC;div_hl_c
 667++CD41 D1                                   pop     de
 668++CD42 EB                                   ex      de,hl
 669++CD43 C3 57 CD                             jp      .DoneBlockY1
 670++CD46              ;                                 else set Adjust = abs(Y1) * Gradient
 671++CD46              .CalcBlockY1B:          macronegate16bc
 671++CD46 AF          >					xor 	a
 671++CD47 91          >                    sub 	c
 671++CD48 4F          >                    ld 		c,a
 671++CD49 9F          >                    sbc 	a,a
 671++CD4A 90          >                    sub 	b
 671++CD4B 47          >                    ld 		b,a
 672++CD4C E5                                   push    hl
 673++CD4D 60 69                                ld      hl,bc
 674++CD4F 3A 97 C8                             ld      a,(Gradient)            ;Q = gradient
 675++CD52 CD 86 94                             call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 676++CD55 D1                                   pop     de
 677++CD56 EB                                   ex      de,hl
 678++CD57              ;                x1 += adjust * (-1 if bit 3 of clipcoord is set)
 679++CD57              ;                y1 = 0
 680++CD57              ;                ret
 681++CD57 FD 7C        .DoneBlockY1:           ld      a,iyh
 682++CD59 E6 04                                and     4
 683++CD5B 20 06                                jr      nz,.Y1SkipNegate
 684++CD5D                                      macronegate16de
 684++CD5D AF          >					xor 	a
 684++CD5E 93          >                    sub 	e
 684++CD5F 5F          >                    ld 		e,a
 684++CD60 9F          >                    sbc 	a,a
 684++CD61 92          >                    sub 	d
 684++CD62 57          >                    ld 		d,a
 685++CD63 19           .Y1SkipNegate:          add     hl,de
 686++CD64 01 00 00                             ld      bc,0
 687++CD67 C9                                   ret
 688++CD68              ;                if clipccord bit 5 is set Adjust = Y1 lo / Gradient (may need to swap bit check?)
 689++CD68 FD 7C        .CalcBlockY2:           ld      a,iyh
 690++CD6A E6 10                                and     16
 691++CD6C 28 15                                jr      z,.CalcBlockY2B
 692++CD6E 3A 97 C8     .CalcBlockY2A:          ld      a,(Gradient)            ;Q = gradient
 693++CD71 E5                                   push    hl
 694++CD72 60 69                                ld      hl,bc
 695++CD74 11 7F 00                             ld      de,127
 696++CD77 B7 ED 52                             sub     hl,de
 697++CD7A 4F                                   ld      c,a
 698++CD7B CD A5 CD                             call    div_hl_c;LLHLdivC
 699++CD7E D1                                   pop     de
 700++CD7F EB                                   ex      de,hl
 701++CD80 C3 94 CD                             jp      .DoneBlockY2
 702++CD83              ;                                 else set Adjust = Y1 lo * Gradient
 703++CD83 E5           .CalcBlockY2B:          push    hl
 704++CD84 60 69                                ld      hl,bc
 705++CD86 11 7F 00                             ld      de,127
 706++CD89 B7 ED 52                             sub     hl,de
 707++CD8C 3A 97 C8                             ld      a,(Gradient)
 708++CD8F CD 86 94                             call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 709++CD92 D1                                   pop     de
 710++CD93 EB                                   ex      de,hl
 711++CD94              ;                x1 += adjust * (-1 if bit 3 of clipcoord is set)
 712++CD94              ;                y1 = 127
 713++CD94 FD 7C        .DoneBlockY2:           ld      a,iyh
 714++CD96 E6 04                                and     4
 715++CD98 20 06                                jr      nz,.Y2SkipNegate
 716++CD9A                                      macronegate16de
 716++CD9A AF          >					xor 	a
 716++CD9B 93          >                    sub 	e
 716++CD9C 5F          >                    ld 		e,a
 716++CD9D 9F          >                    sbc 	a,a
 716++CD9E 92          >                    sub 	d
 716++CD9F 57          >                    ld 		d,a
 717++CDA0 19           .Y2SkipNegate:          add     hl,de
 718++CDA1 01 7F 00                             ld      bc,127
 719++CDA4 C9                                   ret
 720++CDA5
 721++CDA5
 722++CDA5 AF           div_hl_c:               xor	a
 723++CDA6 06 10                                ld	b, 16
 724++CDA8 29           .loop:                  add	hl, hl
 725++CDA9 17                                   rla
 726++CDAA 38 03                                jr	c, $+5
 727++CDAC B9                                   cp	c
 728++CDAD 38 02                                jr	c, $+4
 729++CDAF 91                                   sub	c
 730++CDB0 2C                                   inc	l
 731++CDB1 10 F5                                djnz	.loop
 732++CDB3 C9                                   ret
 733++CDB4
 734++CDB4 11 FE FF     LLHLdivC:               ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 735++CDB7              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 735++CDB7 CB 25       >			   sla l
 735++CDB9 CB 14       >			   rl  h
 736++CDBB 7C                                   ld      a,h
 737++CDBC 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 738++CDBE                                      JumpIfALTNusng c, .LL132            ; if S <  Q = 256/gradient skip subtractions
 738++CDBE B9          >                        cp      c
 738++CDBF DA CA CD    >                        jp		c, .LL132
 739++CDC2 3F           .LL131:                 ccf                                 ; compliment carry
 740++CDC3 99                                   sbc     a,c                         ; q
 741++CDC4 67                                   ld      h,a                         ; h (s)
 742++CDC5 7D                                   ld      a,l                         ; r
 743++CDC6 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 744++CDC8 37                                   scf                                 ; set carry for next rolls
 745++CDC9 3F                                   ccf
 746++CDCA              .LL132:                 RollDELeft1                         ; Rotate de bits left
 746++CDCA CB 13       >               rl  e
 746++CDCC CB 12       >               rl  d
 747++CDCE 38 E7                                jr      c,.LL130                    ;
 748++CDD0 EB                                   ex      de,hl                       ; hl = result
 749++CDD1 C9                                   ret
 750++CDD2
 751++CDD2              ; old code for on screen test
 752++CDD2              ;;;;;;; if y1 > 127 and y2 > 127 then same sing and exit
 753++CDD2              ;;;;;;
 754++CDD2              ;;;;;;;if y1hi y2hi are <> 0 and both same sign exit
 755++CDD2              ;;;;;;.CheckYOffScreen:       ld      a,b                                 ; y1 and y2 high tests
 756++CDD2              ;;;;;;                        and     ixh
 757++CDD2              ;;;;;;                        jp      .CheckYLow
 758++CDD2              ;;;;;;                        ld
 759++CDD2              ;;;;;;                        and     a                                   ; if either is zero then we can check for > 127
 760++CDD2              ;;;;;;                        jr      z,.YHighNegativeCheck               ;
 761++CDD2              ;;;;;;                        ld      a,ixh                               ;
 762++CDD2              ;;;;;;                        and     a                                   ;
 763++CDD2              ;;;;;;                        ret     nz                                  ;
 764++CDD2              ;;;;;;;if y1h bit 7 and y2h bit 7 set then exit as both -ve
 765++CDD2              ;;;;;;                        ld      a,b                                 ;
 766++CDD2              ;;;;;;                        and     ixh                                 ;
 767++CDD2              ;;;;;;                        and     $80                                 ;
 768++CDD2              ;;;;;;                        ret     z                                   ;
 769++CDD2              ;;;;;;;if y1h > 0 and y2h > 0 then exit as both are +ve high
 770++CDD2              ;;;;;;                        ld      a,b                                 ;
 771++CDD2              ;;;;;;                        and     ixh                                 ;
 772++CDD2              ;;;;;;                        ret     nz                                  ;
 773++CDD2              ;;;;;;;if y1h or y2h is not 0 then proceed to clip
 774++CDD2              ;;;;;;                        ld      a,b
 775++CDD2              ;;;;;;                        or      ixh
 776++CDD2              ;;;;;;                        jr      nz,.StartProcessing
 777++CDD2              ;;;;;;;if (y1l bit 7 is set and y1h is clear ) or (y2l bit 7 is set and y2h is clear) the proceed to clip
 778++CDD2              ;;;;;;                        ld      a,c
 779++CDD2              ;;;;;;                        or      ixl
 780++CDD2              ;;;;;;                        and     $80
 781++CDD2              ;;;;;;                        jr      z,.StartProcessing
 782++CDD2              ;;;;;;
 783++CDD2              ;;;;;;.CheckYOffScreen:       ld      a,b                                 ;
 784++CDD2              ;;;;;;                        cp      0                                   ;
 785++CDD2              ;;;;;;                        jr      z,.Y1HighIsZero                     ;
 786++CDD2              ;;;;;;                        ld      a,ixh                               ; if we get here Y1 high <> 0
 787++CDD2              ;;;;;;                        cp      0                                   ;
 788++CDD2              ;;;;;;                        jr      z,.Y2HighIsZero                     ; if they are both non zero we can do a sign check
 789++CDD2              ;;;;;;.CheckYSameSign:        ld      a,b                                 ; if we get here Y1 high and Y2 high are not zero
 790++CDD2              ;;;;;;                        xor     ixh                                 ; so same sign then bail out if they are
 791++CDD2              ;;;;;;                        and     $80                                 ;
 792++CDD2              ;;;;;;                        ret     z                                   ;
 793++CDD2              ;;;;;;;if we get here either y1hi or y2 hi are 0, now check and y1 low > 127 & y2 low > 127, exit
 794++CDD2              ;;;;;;.Y1HighIsZero:          ld      a,ixh                               ; as y1h is zero, if y2h is zero we do y1 y2 test
 795++CDD2              ;;;;;;                        cp      0                                   ;
 796++CDD2              ;;;;;;                        jr      nz,.Startprocessing                 ;
 797++CDD2              ;;;;;;                        ld      a,c                                 ; so by here y1h and y2h must be zero
 798++CDD2              ;;;;;;                        and     ixl
 799++CDD2              ;;;;;;
 800++CDD2              ;;;;;;                        .CheckY2Lo                        ;
 801++CDD2              ;;;;;;.CheckY1Lo:             ld      a,c
 802++CDD2              ;;;;;;                        and     $80
 803++CDD2              ;;;;;;                        jr      z,.StartProcessing
 804++CDD2              ;;;;;;.CheckY2Lo:             ld      a,ixl
 805++CDD2              ;;;;;;                        and     $80
 806++CDD2              ;;;;;;                        ret     nz
 807++CDD2              ;;;;;;;clip = 0
# file closed: ././ModelRender/CLIP-LL145.asm
 558+ CDD2              ;--------------------------------------------------------------------------------------------------------
 559+ CDD2                                      include "./Universe/Ships/CopyRotmatToTransMat.asm"
# file opened: ././Universe/Ships/CopyRotmatToTransMat.asm
   1++CDD2              ; Set TransMatTo
   2++CDD2              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CDD2              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CDD2              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CDD2              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CDD2              ; 18 byte fast copy
   7++CDD2
   8++CDD2              ; Fast copy using the stack                                                         ; T states
   9++CDD2 DD 21 00 00  CopyRotmatToTransMat:   ld      ix,0                                                ; 14
  10++CDD6 DD 39                                add     ix,sp                                               ; 15
  11++CDD8 31 29 C0                             ld      sp,UBnkrotmatSidevX ; Source                        ; 10
  12++CDDB E1                                   pop     hl                  ; UBnkrotmatSidevX              ; 10
  13++CDDC D1                                   pop     de                  ; UBnkrotmatSidevY              ; 10
  14++CDDD C1                                   pop     bc                  ; UBnkrotmatSidevZ              ; 10
  15++CDDE D9                                   exx                                                         ; 4
  16++CDDF E1                                   pop     hl                  ; UBnkrotmatRoofvX              ; 10
  17++CDE0 D1                                   pop     de                  ; UBnkrotmatRoofvY              ; 10
  18++CDE1 C1                                   pop     bc                  ; UBnkrotmatRoofvZ              ; 10
  19++CDE2 31 6D C0                             ld      sp,UBnkTransmatRoofvZ+2 ; Target + 2 reversed       ; 10
  20++CDE5 C5                                   push    bc                                                  ; 10
  21++CDE6 D5                                   push    de                                                  ; 10
  22++CDE7 E5                                   push    hl                                                  ; 10
  23++CDE8 D9                                   exx                                                         ; 4
  24++CDE9 C5                                   push    bc                                                  ; 10
  25++CDEA D5                                   push    de                                                  ; 10
  26++CDEB E5                                   push    hl                                                  ; 10
  27++CDEC 31 35 C0                             ld      sp,UBnkrotmatNosevX ; Source                        ; 10
  28++CDEF E1                                   pop     hl                  ; UBnkrotmatSidevX              ; 10
  29++CDF0 D1                                   pop     de                  ; UBnkrotmatSidevY              ; 10
  30++CDF1 C1                                   pop     bc                  ; UBnkrotmatSidevZ              ; 10
  31++CDF2 31 73 C0                             ld      sp,UBnkTransmatNosevZ+2                             ; 10
  32++CDF5 C5                                   push    bc                                                  ; 10
  33++CDF6 D5                                   push    de                                                  ; 10
  34++CDF7 E5                                   push    hl                                                  ; 10
  35++CDF8 DD F9                                ld      sp,ix               ; restore stack                 ; 10
  36++CDFA C9                                   ret                                                         ; 10 Total 267 (LDI version is 318)
  37++CDFB
  38++CDFB
  39++CDFB
  40++CDFB              ;CopyRotmatToTransMat:
  41++CDFB              ;                        ld      hl,UBnkrotmatSidevX
  42++CDFB              ;                        ld      de,UBnkTransmatSidevX
  43++CDFB              ;                        SixLDIInstrunctions
  44++CDFB              ;                        ld      hl,UBnkrotmatRoofvX
  45++CDFB              ;                        ld      de, UBnkTransmatRoofvX
  46++CDFB              ;                        SixLDIInstrunctions
  47++CDFB              ;                        ld      hl,UBnkrotmatNosevX
  48++CDFB              ;                        ld      de, UBnkTransmatNosevX
  49++CDFB              ;                        SixLDIInstrunctions
  50++CDFB              ;                        ret
  51++CDFB
  52++CDFB              CopyRotToTransMacro:    MACRO
  53++CDFB ~                                    ld      hl,UBnkrotmatSidevX
  54++CDFB ~                                    ld      de,UBnkTransmatSidevX
  55++CDFB ~                                    SixLDIInstrunctions
  56++CDFB ~                                    SixLDIInstrunctions
  57++CDFB ~                                    SixLDIInstrunctions
  58++CDFB                                      ENDM
  59++CDFB
# file closed: ././Universe/Ships/CopyRotmatToTransMat.asm
 560+ CDFB                                      include "./Universe/Ships/TransposeXX12ByShipToXX15.asm"
# file opened: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
   1++CDFB              TransposeXX12ByShipToXX15:
   2++CDFB 2A AC C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++CDFE 7C           		ld		a,h			                        ; get XX12 Sign
   4++CDFF E6 80        		and		$80									; check sign bit on high byte
   5++CE01 47           		ld		b,a									; and put it in of 12xlo in b
   6++CE02                      ;110921 debugld      h,0
   7++CE02 7C                   ld      a,h
   8++CE03 E6 7F                and     $7F
   9++CE05 67                   ld      h,a
  10++CE06                      ;110921 debugld      h,0
  11++CE06 ED 5B 20 C0  		ld		de,(UBnKxlo)						;
  12++CE0A 3A 22 C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++CE0D E6 80        		and		$80									; make sure we only have bit 7
  14++CE0F 4F           		ld		c,a									; and put sign of unkxsgn c
  15++CE10 CD 92 92     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++CE13 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++CE14 67           		ld		h,a
  18++CE15 22 A6 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++CE18              ; ..................................
  20++CE18 2A AE C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++CE1B 7C           		ld		a,h
  22++CE1C E6 80        		and		$80
  23++CE1E 47           		ld		b,a
  24++CE1F                      ;110921 debugld      h,0
  25++CE1F 7C                   ld      a,h
  26++CE20 E6 7F                and     $7F
  27++CE22 67                   ld      h,a
  28++CE23                      ;110921 debugld      h,0
  29++CE23 ED 5B 23 C0  		ld		de,(UBnKylo)
  30++CE27 3A 25 C0     		ld		a,(UBnKysgn)
  31++CE2A E6 80        		and		$80									; make sure we only have bit 7
  32++CE2C 4F           		ld		c,a
  33++CE2D CD 92 92     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++CE30 B4           		or		h									; combine sign in A with H
  35++CE31 67           		ld		h,a
  36++CE32 22 A8 C0     		ld		(UBnkYScaled),hl
  37++CE35              ; ..................................
  38++CE35 2A B0 C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++CE38 7C           		ld		a,h
  40++CE39 E6 80        		and		$80
  41++CE3B 47           		ld		b,a
  42++CE3C                      ;110921 debugld      h,0
  43++CE3C 7C                   ld      a,h
  44++CE3D E6 7F                and     $7F
  45++CE3F 67                   ld      h,a
  46++CE40                      ;110921 debugld      h,0
  47++CE40 ED 5B 26 C0  		ld		de,(UBnKzlo)
  48++CE44 3A 28 C0     		ld		a,(UBnKzsgn)
  49++CE47 E6 80        		and		$80									; make sure we only have bit 7
  50++CE49 4F           		ld		c,a
  51++CE4A CD 92 92     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++CE4D B4           		or		h									; combine sign in A with H
  53++CE4E 67           		ld		h,a
  54++CE4F CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++CE51 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++CE53 E6 7F                and     $7F                                 ; a = value unsigned
  57++CE55 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++CE57 7D                   ld      a,l                                 ; get low byte now
  59++CE58              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++CE58 FE 04       >                        cp      4
  59++CE5A DA 69 CE    >                        jp		c, ClampZto4
  60++CE5D              NoClampZto4:
  61++CE5D 22 AA C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++CE60 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++CE61 32 BB 81             ld      (varT),a
  64++CE64 7C           		ld		a,h
  65++CE65 32 9E 81             ld      (varU),a
  66++CE68 C9           		ret
  67++CE69              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++CE69 21 04 00     		ld		hl,4
  69++CE6C 22 AA C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++CE6F 7D           		ld		a,l
  71++CE70 32 BB 81             ld      (varT),a                            ;                                                                           ;;;
  72++CE73 7C           		ld		a,h
  73++CE74 32 9E 81             ld      (varU),a 						; compatibility for now
  74++CE77 C9           		ret
  75++CE78
# file closed: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
 561+ CE78                                      include "./Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ././Maths/Utilities/ScaleNodeTo8Bit.asm
   1++CE78              ScaleNodeTo8Bit:								; TODO make signed
   2++CE78 ED 4B AA C0  	ld			bc,(UBnkZScaled)
   3++CE7C 2A A6 C0     	ld			hl,(UBnkXScaled)
   4++CE7F ED 5B A8 C0  	ld			de,(UBnkYScaled)
   5++CE83              SetABSbc:
   6++CE83 78           	ld			a,b
   7++CE84 DD 67        	ld			ixh,a
   8++CE86 E6 7F        	and			SignMask8Bit
   9++CE88 47           	ld			b,a									; bc = ABS bc
  10++CE89              SetABShl:
  11++CE89 7C           	ld			a,h
  12++CE8A DD 6F        	ld			ixl,a
  13++CE8C E6 7F        	and			SignMask8Bit
  14++CE8E 67           	ld			h,a									; hl = ABS hl
  15++CE8F              SetABSde:
  16++CE8F 7A           	ld			a,d
  17++CE90 FD 67        	ld			iyh,a
  18++CE92 E6 7F        	and			SignMask8Bit
  19++CE94 57           	ld			d,a									; de = ABS de
  20++CE95              ScaleNodeTo8BitLoop:
  21++CE95 78               ld          a,b		                            ; U	\ z hi
  22++CE96 B4           	or			h                                   ; XX15+1	\ x hi
  23++CE97 B2           	or			d                                   ; XX15+4	\ y hi
  24++CE98 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++CE9A                  ShiftHLRight1
  25++CE9A CB 3C       >			   srl h
  25++CE9C CB 1D       >			   rr  l
  26++CE9E                  ShiftDERight1
  26++CE9E CB 3A       >			   srl d
  26++CEA0 CB 1B       >			   rr  e
  27++CEA2              	ShiftBCRight1
  27++CEA2 CB 38       >			   srl b
  27++CEA4 CB 19       >			   rr  c
  28++CEA6 C3 95 CE         jp          ScaleNodeTo8BitLoop
  29++CEA9              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++CEA9 DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++CEAB E6 80        	and			SignOnly8Bit
  32++CEAD B0           	or			b
  33++CEAE 47           	ld			b,a
  34++CEAF              SignforHL:
  35++CEAF DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++CEB1 E6 80        	and			SignOnly8Bit
  37++CEB3 B4           	or			h
  38++CEB4 67           	ld			h,a
  39++CEB5              SignforDE:
  40++CEB5 FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++CEB7 E6 80        	and			SignOnly8Bit
  42++CEB9 B2           	or			d
  43++CEBA 57           	ld			d,a
  44++CEBB              SignsDoneSaveResult:
  45++CEBB ED 43 AA C0  	ld			(UBnkZScaled),bc
  46++CEBF 22 A6 C0     	ld			(UBnkXScaled),hl
  47++CEC2 ED 53 A8 C0  	ld			(UBnkYScaled),de
  48++CEC6 78           	ld			a,b
  49++CEC7 32 9E 81     	ld			(varU),a
  50++CECA 79           	ld			a,c
  51++CECB 32 BB 81     	ld			(varT),a
  52++CECE C9           	ret
  53++CECF
# file closed: ././Maths/Utilities/ScaleNodeTo8Bit.asm
 562+ CECF
 563+ CECF              ;--------------------------------------------------------------------------------------------------------
 564+ CECF 21 D2 C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 565+ CED2 ED 31                                add     hl,a
 566+ CED4 3E FF                                ld      a,$FF
 567+ CED6 77                                   ld      (hl),a
 568+ CED7 C9                                   ret
 569+ CED8              ;--------------------------------------------------------------------------------------------------------
 570+ CED8 21 D2 C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 571+ CEDB ED 31                                add     hl,a
 572+ CEDD AF                                   xor     a
 573+ CEDE 77                                   ld      (hl),a
 574+ CEDF C9                                   ret
 575+ CEE0              ;--------------------------------------------------------------------------------------------------------
 576+ CEE0 3A 3B C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 577+ CEE3 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 578+ CEE5 CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 579+ CEE7 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 580+ CEE8 21 D2 C0                             ld      hl,UbnkFaceVisArray
 581+ CEEB 3E FF                                ld      a,$FF
 582+ CEED              SetAllFacesVisibleLoop:
 583+ CEED 77           EE30:                   ld      (hl),a
 584+ CEEE 23                                   inc     hl
 585+ CEEF 10 FC                                djnz    SetAllFacesVisibleLoop
 586+ CEF1 C9                                   ret
 587+ CEF2              ;--------------------------------------------------------------------------------------------------------
 588+ CEF2 3A 3B C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 589+ CEF5 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 590+ CEF7 CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 591+ CEF9 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 592+ CEFA 06 10                                ld      b,16
 593+ CEFC 21 D2 C0                             ld      hl,UbnkFaceVisArray
 594+ CEFF 3E 00                                ld      a,$00
 595+ CF01 77           SetAllFacesHiddenLoop:  ld      (hl),a
 596+ CF02 23                                   inc     hl
 597+ CF03 10 FC                                djnz    SetAllFacesHiddenLoop
 598+ CF05 C9                                   ret
 599+ CF06
 600+ CF06              ;;;;X = normal scale
 601+ CF06              ;;;;ZtempHi = zhi
 602+ CF06              ;;;;......................................................
 603+ CF06              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 604+ CF06              ;;;;  Loop                                              ::LL90
 605+ CF06              ;;;;     inc X
 606+ CF06              ;;;;     divide X, Y & ZtempHiLo by 2
 607+ CF06              ;;;;  Until ZtempHi = 0
 608+ CF06              ;;;;......................................................
 609+ CF06              ;-LL21---------------------------------------------------------------------------------------------------
 610+ CF06                                      include "Universe/Ships/NormaliseTransMat.asm"
# file opened: ./Universe/Ships/NormaliseTransMat.asm
   1++CF06              ;divdide by 16 using undocumented instrunctions
   2++CF06              Norm256mulAdivQ:
   3++CF06 47               ld      b,a
   4++CF07 0E 00            ld      c,0
   5++CF09 16 00            ld      d,0
   6++CF0B 3A 9F 81         ld      a,(varQ)
   7++CF0E 5F               ld      e,a
   8++CF0F              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++CF0F              ;Output: BC = Quotient, HL = Remainder
  10++CF0F              NormDIV16UNDOC:
  11++CF0F 21 00 00         ld      hl,0
  12++CF12 78               ld      a,b
  13++CF13 06 10            ld      b,16
  14++CF15              NormDIV16UNDOCLOOP:
  15++CF15 CB 31        	sll	    c		; unroll 16 times
  16++CF17 17           	rla	    		; ...
  17++CF18 ED 6A        	adc	    hl,hl		; ...
  18++CF1A ED 52        	sbc	    hl,de		; ...
  19++CF1C 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++CF1E 19           	add	    hl,de		; ...
  21++CF1F 0D           	dec	    c		; ...
  22++CF20              NormDIV16UNDOCSKIP:
  23++CF20 10 F3            djnz    NormDIV16UNDOCLOOP
  24++CF22 79               ld      a,c
  25++CF23 32 A0 81         ld      (varR),a
  26++CF26 C9               ret
  27++CF27
  28++CF27 FD 67        Norm256mulAdivQSignA:   ld      iyh,a
  29++CF29                                      ClearSignBitA
  29++CF29 E6 7F       >                        and     SignMask8Bit
  30++CF2B CD 06 CF                             call    Norm256mulAdivQ              ; do 15 bit unsigned
  31++CF2E FD 7C                                ld      a,iyh                       ; now correct R reg
  32++CF30                                      SignBitOnlyA
  32++CF30 E6 80       >                        and     SignOnly8Bit
  33++CF32 B1                                   or      c
  34++CF33 32 A0 81                             ld      (varR),a
  35++CF36 C9                                   ret
  36++CF37
  37++CF37              ; Tested OK
  38++CF37              ;LL21
  39++CF37              NormaliseTransMat:
  40++CF37                      IFDEF LOGMATHS
  41++CF37 ~                            ld      hl,UBnkTransmatNosevZ+1     ; initialise loop
  42++CF37 ~                            ld      b,9                         ; total of 9 elements to transform
  43++CF37 ~                            MMUSelectMathsTables
  44++CF37 ~            .LL21Loop:      ld      d,(hl)
  45++CF37 ~                            dec     hl
  46++CF37 ~                            ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  47++CF37 ~                            ShiftDELeft1                        ; De = DE * 2
  48++CF37 ~                            ld      a,d                         ; a = hi byte after shifting
  49++CF37 ~                            push	hl
  50++CF37 ~                            push	bc
  51++CF37 ~                            call    AEquAmul256Div197Log        ; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  52++CF37 ~                            ;ld      a,c                         ; BFRDIV returns R also in l reg
  53++CF37 ~                            pop		bc
  54++CF37 ~                            pop		hl							; bc gets wrecked by BFRDIV
  55++CF37 ~                            ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  56++CF37 ~                            dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  57++CF37 ~                            djnz    .LL21Loop                   ; loop from 2zLo through to 0xLo
  58++CF37 ~                            MMUSelectROM0
  59++CF37 ~                            ret
  60++CF37                      ELSE
  61++CF37 21 72 C0                     ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  62++CF3A 0E C5                        ld      c,ConstNorm                 ; c = Q = norm = 197
  63++CF3C 79                           ld      a,c
  64++CF3D 32 9F 81                     ld      (varQ),a                    ; set up varQ
  65++CF40 06 09                        ld      b,9                         ; total of 9 elements to transform
  66++CF42 56           LL21Loop:       ld      d,(hl)
  67++CF43 2B                           dec     hl
  68++CF44 5E                           ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  69++CF45                              ShiftDELeft1                        ; De = DE * 2
  69++CF45 CB 23       >			   sla e
  69++CF47 CB 12       >			   rl  d
  70++CF49 7A                           ld      a,d                         ; a = hi byte after shifting
  71++CF4A E5                           push	hl
  72++CF4B C5                           push	bc
  73++CF4C CD 06 CF                     call    Norm256mulAdivQ
  74++CF4F                              ;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  75++CF4F 79                           ld      a,c                         ; BFRDIV returns R also in l reg
  76++CF50 C1                           pop		bc
  77++CF51 E1                           pop		hl							; bc gets wrecked by BFRDIV
  78++CF52 77                           ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  79++CF53 2B                           dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  80++CF54 10 EC                        djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  81++CF56 C9                           ret
  82++CF57                      ENDIF
# file closed: ./Universe/Ships/NormaliseTransMat.asm
 611+ CF57              ;;;                        include "Universe/Ships/NormaliseXX15.asm"
 612+ CF57              ;-LL91---------------------------------------------------------------------------------------------------
 613+ CF57
 614+ CF57              ; Now we have
 615+ CF57              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 616+ CF57              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 617+ CF57              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 618+ CF57              ;
 619+ CF57              ;--------------------------------------------------------------------------------------------------------
 620+ CF57                                      include "Universe/Ships/InverseXX16.asm"
# file opened: ./Universe/Ships/InverseXX16.asm
   1++CF57              ; TESTEDOK
   2++CF57
   3++CF57              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++CF57              ;        ld      a,(XX17)
   5++CF57              ;        ld      ixl,a
   6++CF57              ;        ld      ixh,9
   7++CF57              ;        ld      hl,UBnkTransInv0x
   8++CF57              ;        ld      a,(hl)
   9++CF57              ;ScaleNode:
  10++CF57              ;        ld      b,ixl
  11++CF57              ;ScaleNodeLoop:
  12++CF57              ;        sla      a
  13++CF57              ;        djnz    ScaleNodeLoop
  14++CF57              ;        ld      (hl),a
  15++CF57              ;        inc     hl
  16++CF57              ;        inc     hl
  17++CF57              ;        dec     ixh
  18++CF57              ;        jr      nz,ScaleNode
  19++CF57              ;        ret
  20++CF57
  21++CF57
  22++CF57              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++CF57              ; we coudl combine this with move to transmat later as an optimisation
  24++CF57              ; INPUT - All Scaled
  25++CF57              ;  They transmat has already been put into side, roof nose order
  26++CF57              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++CF57              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++CF57              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++CF57              ; OUTPUT
  30++CF57              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++CF57              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++CF57              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++CF57              ; First all side values become compoment 0 of each vector
  34++CF57 2A 61 C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++CF5A ED 5B 67 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++CF5E ED 4B 6D C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++CF62 22 79 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++CF65 ED 53 7B C0          ld      (UbnkTransInvRow0x1),de     ;
  39++CF69 ED 43 7D C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++CF6D 2A 63 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++CF70 ED 5B 69 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++CF74 ED 4B 6F C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++CF78 22 81 C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++CF7B ED 53 83 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++CF7F ED 43 85 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++CF83 2A 65 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++CF86 ED 5B 6B C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++CF8A ED 4B 71 C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++CF8E 22 89 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++CF91 ED 53 8B C0          ld      (UbnkTransInvRow2z1),de     ;
  51++CF95 ED 43 8D C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++CF99 C9                   ret
  53++CF9A
  54++CF9A
# file closed: ./Universe/Ships/InverseXX16.asm
 621+ CF9A              ;--------------------------------------------------------------------------------------------------------
 622+ CF9A              ;--------------------------------------------------------------------------------------------------------
 623+ CF9A              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 624+ CF9A              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 625+ CF9A              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 626+ CF9A              ; Returns
 627+ CF9A              ;
 628+ CF9A              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 629+ CF9A              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 630+ CF9A              ;
 631+ CF9A              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 632+ CF9A              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 633+ CF9A              ;
 634+ CF9A              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 635+ CF9A              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 636+ CF9A              ; TESTEDOK
 637+ CF9A              XX12DotOneRow:
 638+ CF9A              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 638+ CF9A 3A A6 C0    >                        ld      a,(UBnkXScaled)                        ;
 638+ CF9D 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 638+ CF9E 7E          >                        ld      a,(hl)                        ; A = XX16 element
 638+ CF9F 57          >                        ld      d,a
 638+ CFA0 ED 30       >                        mul
 638+ CFA2 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 638+ CFA3 32 BB 81    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 639+ CFA6 23                                   inc     hl                                  ; move to sign byte
 640+ CFA7              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 640+ CFA7 3A A7 C0    >                        ld      a,(UBnkXScaledSign)
 640+ CFAA AE          >                        xor     (hl)
 641+ CFAB 32 A1 81                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 642+ CFAE 23                                   inc     hl
 643+ CFAF              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 643+ CFAF 3A A8 C0    >                        ld      a,(UBnkYScaled)                        ;
 643+ CFB2 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 643+ CFB3 7E          >                        ld      a,(hl)                        ; A = XX16 element
 643+ CFB4 57          >                        ld      d,a
 643+ CFB5 ED 30       >                        mul
 643+ CFB7 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 643+ CFB8 32 9F 81    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 644+ CFBB                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 644+ CFBB 3A BB 81    >                        ld       a,(varT)
 644+ CFBE 32 A0 81    >                        ld       (varR),a
 645+ CFC1 23                                   inc     hl
 646+ CFC2                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 646+ CFC2 3A A9 C0    >                        ld      a,(UBnkYScaledSign)
 646+ CFC5 AE          >                        xor     (hl)
 647+ CFC6              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 648+ CFC6 E5           STequSRplusAQ           push    hl
 649+ CFC7 CD 29 9C                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 650+ CFCA E1                                   pop     hl
 651+ CFCB 32 BB 81                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 652+ CFCE 23                                   inc     hl
 653+ CFCF              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 653+ CFCF 3A AA C0    >                        ld      a,(UBnkZScaled)                        ;
 653+ CFD2 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 653+ CFD3 7E          >                        ld      a,(hl)                        ; A = XX16 element
 653+ CFD4 57          >                        ld      d,a
 653+ CFD5 ED 30       >                        mul
 653+ CFD7 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 653+ CFD8 32 9F 81    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 654+ CFDB                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 654+ CFDB 3A BB 81    >                        ld       a,(varT)
 654+ CFDE 32 A0 81    >                        ld       (varR),a
 655+ CFE1 23                                   inc     hl
 656+ CFE2                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 656+ CFE2 3A AB C0    >                        ld      a,(UBnkZScaledSign)
 656+ CFE5 AE          >                        xor     (hl)
 657+ CFE6              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 658+ CFE6 CD 29 9C                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 659+ CFE9              ; Now we exit with A = result S = Sign
 660+ CFE9 C9                                   ret
 661+ CFEA
 662+ CFEA
 663+ CFEA
 664+ CFEA              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 665+ CFEA              ;TESTED OK
 666+ CFEA              ;XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 667+ CFEA              XX12EquXX15DotProductXX16:
 668+ CFEA 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 669+ CFED 21 61 C0                             ld      hl,UBnkTransmatSidevX
 670+ CFF0 CD 9A CF                             call    XX12DotOneRow
 671+ CFF3 32 AC C0                             ld      (UBnkXX12xLo),a
 672+ CFF6 3A A1 81                             ld      a,(varS)
 673+ CFF9 32 AD C0                             ld      (UBnkXX12xSign),a
 674+ CFFC 21 67 C0                             ld      hl,UBnkTransmatRoofvX
 675+ CFFF CD 9A CF                             call    XX12DotOneRow
 676+ D002 32 AE C0                             ld      (UBnkXX12yLo),a
 677+ D005 3A A1 81                             ld      a,(varS)
 678+ D008 32 AF C0                             ld      (UBnkXX12ySign),a
 679+ D00B 21 6D C0                             ld      hl,UBnkTransmatNosevX
 680+ D00E CD 9A CF                             call    XX12DotOneRow
 681+ D011 32 B0 C0                             ld      (UBnkXX12zLo),a
 682+ D014 3A A1 81                             ld      a,(varS)
 683+ D017 32 B1 C0                             ld      (UBnkXX12zSign),a
 684+ D01A C9                                   ret
 685+ D01B              ;--------------------------------------------------------------------------------------------------------
 686+ D01B                                      include "./Universe/Ships/CopyXX12ScaledToXX18.asm"
# file opened: ././Universe/Ships/CopyXX12ScaledToXX18.asm
   1++D01B              CopyXX12ScaledToXX18:
   2++D01B              CopyResultToDrawCam:
   3++D01B                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++D01B 3A AC C0    >                        ld       a,(XX12)
   3++D01E 32 9A C0    >                        ld       (XX18),a
   4++D021                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++D021 3A AD C0    >                        ld       a,(XX12+1)
   4++D024 32 9C C0    >                        ld       (XX18+2),a
   5++D027                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++D027 3A AE C0    >                        ld       a,(XX12+2)
   5++D02A 32 9D C0    >                        ld       (XX18+3),a
   6++D02D                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++D02D 3A AF C0    >                        ld       a,(XX12+3)
   6++D030 32 9F C0    >                        ld       (XX18+5),a
   7++D033                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++D033 3A B0 C0    >                        ld       a,(XX12+4)
   7++D036 32 A0 C0    >                        ld       (XX18+6),a
   8++D039                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++D039 3A B1 C0    >                        ld       a,(XX12+5)
   8++D03C 32 A2 C0    >                        ld       (XX18+8),a
   9++D03F C9                   ret
  10++D040
# file closed: ././Universe/Ships/CopyXX12ScaledToXX18.asm
 687+ D040                                      include "./Universe/Ships/CopyXX12toXX15.asm"
# file opened: ././Universe/Ships/CopyXX12toXX15.asm
   1++D040              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++D040 3A AC C0    >                        ld       a,(UBnkXX12xLo)
   1++D043 32 A6 C0    >                        ld       (UBnkXScaled),a
   2++D046                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++D046 3A AD C0    >                        ld       a,(UBnkXX12xSign)
   2++D049 32 A7 C0    >                        ld       (UBnkXScaledSign),a
   3++D04C                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++D04C 3A AE C0    >                        ld       a,(UBnkXX12yLo)
   3++D04F 32 A8 C0    >                        ld       (UBnkYScaled),a
   4++D052                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++D052 3A AF C0    >                        ld       a,(UBnkXX12ySign)
   4++D055 32 A9 C0    >                        ld       (UBnkYScaledSign),a
   5++D058                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++D058 3A B0 C0    >                        ld       a,(UBnkXX12zLo)
   5++D05B 32 AA C0    >                        ld       (UBnkZScaled),a
   6++D05E                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++D05E 3A B1 C0    >                        ld       a,(UBnkXX12zSign)
   6++D061 32 AB C0    >                        ld       (UBnkZScaledSign),a
   7++D064 C9                                   ret
   8++D065
# file closed: ././Universe/Ships/CopyXX12toXX15.asm
 688+ D065                                      include "./Universe/Ships/CopyXX18toXX15.asm"
# file opened: ././Universe/Ships/CopyXX18toXX15.asm
   1++D065              CopyXX18toXX15:
   2++D065              CopyDrawCamToScaled:
   3++D065                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++D065 3A 9A C0    >                        ld       a,(UBnkDrawCam0xLo)
   3++D068 32 A6 C0    >                        ld       (UBnkXScaled),a
   4++D06B                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++D06B 3A 9C C0    >                        ld       a,(UBnkDrawCam0xSgn)
   4++D06E 32 A7 C0    >                        ld       (UBnkXScaledSign),a
   5++D071                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++D071 3A 9D C0    >                        ld       a,(UBnkDrawCam0yLo)
   5++D074 32 A8 C0    >                        ld       (UBnkYScaled),a
   6++D077                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++D077 3A 9F C0    >                        ld       a,(UBnkDrawCam0ySgn)
   6++D07A 32 A9 C0    >                        ld       (UBnkYScaledSign),a
   7++D07D                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++D07D 3A A0 C0    >                        ld       a,(UBnkDrawCam0zLo)
   7++D080 32 AA C0    >                        ld       (UBnkZScaled),a
   8++D083                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++D083 3A A2 C0    >                        ld       a,(UBnkDrawCam0zSgn)
   8++D086 32 AB C0    >                        ld       (UBnkZScaledSign),a
   9++D089 C9                   ret
  10++D08A
# file closed: ././Universe/Ships/CopyXX18toXX15.asm
 689+ D08A                                      include "./Universe/Ships/CopyXX18ScaledToXX15.asm"
# file opened: ././Universe/Ships/CopyXX18ScaledToXX15.asm
   1++D08A 2A 20 C0     LoadCraftToCamera:      ld      hl,(UBnKxlo)            ; UBnKxlo, UBnKxhi
   2++D08D ED 5B 22 C0                          ld      de,(UBnKxsgn)           ; UBnKxsgn, UBnKylo
   3++D091 ED 4B 24 C0                          ld      bc,(UBnKyhi)            ; UBnKyhi, UBnKysgn
   4++D095 22 9A C0                             ld      (UBnkDrawCam0xLo),hl    ; UBnkDrawCam0xLo, UBnkDrawCam0xHi
   5++D098 ED 53 9C C0                          ld      (UBnkDrawCam0xSgn),de   ; UBnkDrawCam0xSgn,UBnkDrawCam0yLo
   6++D09C ED 43 9E C0                          ld      (UBnkDrawCam0yHi),bc    ; UBnkDrawCam0yHi, UBnkDrawCam0ySgn
   7++D0A0
   8++D0A0 2A 26 C0                             ld      hl,(UBnKzlo)            ; UBnKzlo, UBnKzhi
   9++D0A3 3A 28 C0                             ld      a,(UBnKzsgn)             ; UBnKzlo
  10++D0A6 22 A0 C0                             ld      (UBnkDrawCam0zLo),hl    ; UBnkDrawCam0zLo, UBnkDrawCam0zHi
  11++D0A9 32 A2 C0                             ld      (UBnkDrawCam0zSgn),a    ; UBnkDrawCam0zSgn
  12++D0AC C9                                   ret
  13++D0AD              ;                       ld      hl,UBnKxlo
  14++D0AD              ;                       ld      de,UBnkDrawCam0xLo
  15++D0AD              ;                       NineLDIInstrunctions                ; transfer 9 bytes
  16++D0AD C9                                   ret
  17++D0AE
  18++D0AE 2A 9A C0     CopyCameraToXX15Signed: ld  hl,(UBnkDrawCam0xLo)
  19++D0B1 3A 9C C0                             ld  a,(UBnkDrawCam0xSgn)
  20++D0B4 B4                                   or  h
  21++D0B5 67                                   ld  h,a
  22++D0B6 22 A6 C0                             ld  (UBnkXScaled),hl
  23++D0B9 2A 9D C0                             ld  hl,(UBnkDrawCam0yLo)
  24++D0BC 3A 9F C0                             ld  a,(UBnkDrawCam0ySgn)
  25++D0BF B4                                   or  h
  26++D0C0 67                                   ld  h,a
  27++D0C1 22 A8 C0                             ld  (UBnkYScaled),hl
  28++D0C4 2A A0 C0                             ld  hl,(UBnkDrawCam0zLo)
  29++D0C7 3A A2 C0                             ld  a,(UBnkDrawCam0zSgn)
  30++D0CA B4                                   or  h
  31++D0CB 67                                   ld  h,a
  32++D0CC 22 AA C0                             ld  (UBnkZScaled),hl
  33++D0CF C9                                   ret
  34++D0D0
  35++D0D0              CopyXX18ScaledToXX15:
  36++D0D0              CopyDrawCamToScaledMatrix:
  37++D0D0                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  37++D0D0 3A A2 C0    >                        ld       a,(UBnkDrawCam0zSgn)
  37++D0D3 32 AB C0    >                        ld       (UBnkZScaledSign),a
  38++D0D6                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  38++D0D6 3A 9A C0    >                        ld       a,(UBnkDrawCam0xLo)
  38++D0D9 32 A6 C0    >                        ld       (UBnkXScaled),a
  39++D0DC                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  39++D0DC 3A 9C C0    >                        ld       a,(UBnkDrawCam0xSgn)
  39++D0DF 32 A7 C0    >                        ld       (UBnkXScaledSign),a
  40++D0E2                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  40++D0E2 3A 9D C0    >                        ld       a,(UBnkDrawCam0yLo)
  40++D0E5 32 A8 C0    >                        ld       (UBnkYScaled),a
  41++D0E8                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  41++D0E8 3A 9F C0    >                        ld       a,(UBnkDrawCam0ySgn)
  41++D0EB 32 A9 C0    >                        ld       (UBnkYScaledSign),a
  42++D0EE                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  42++D0EE 3A A0 C0    >                        ld       a,(UBnkDrawCam0zLo)
  42++D0F1 32 AA C0    >                        ld       (UBnkZScaled),a
  43++D0F4 C9                   ret
  44++D0F5
  45++D0F5              CopyXX15ToXX18Scaled:
  46++D0F5              CopyScaledMatrixToDrawCam:
  47++D0F5                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  47++D0F5 3A AB C0    >                        ld       a,(UBnkZScaledSign)
  47++D0F8 32 A2 C0    >                        ld       (UBnkDrawCam0zSgn),a
  48++D0FB                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  48++D0FB 3A A6 C0    >                        ld       a,(UBnkXScaled)
  48++D0FE 32 9A C0    >                        ld       (UBnkDrawCam0xLo),a
  49++D101                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  49++D101 3A A7 C0    >                        ld       a,(UBnkXScaledSign)
  49++D104 32 9C C0    >                        ld       (UBnkDrawCam0xSgn),a
  50++D107                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  50++D107 3A A8 C0    >                        ld       a,(UBnkYScaled)
  50++D10A 32 9D C0    >                        ld       (UBnkDrawCam0yLo),a
  51++D10D                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  51++D10D 3A A9 C0    >                        ld       a,(UBnkYScaledSign)
  51++D110 32 9F C0    >                        ld       (UBnkDrawCam0ySgn),a
  52++D113                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  52++D113 3A AA C0    >                        ld       a,(UBnkZScaled)
  52++D116 32 A0 C0    >                        ld       (UBnkDrawCam0zLo),a
  53++D119 C9                   ret
  54++D11A
  55++D11A
  56++D11A              XX15EquXX15AddXX18:
  57++D11A              LL94Z:
  58++D11A 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  59++D11C 16 00                ld      d,0                                                     ;
  60++D11E 3A AA C0             ld      a,(UBnkZScaled)                                         ;
  61++D121 6F                   ld      l,a                                                     ;
  62++D122 3A AB C0             ld      a,(UBnkZScaledSign)                                     ;
  63++D125 47                   ld      b,a                                                     ;
  64++D126 3A A0 C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  65++D129 5F                   ld      e,a                                                     ;
  66++D12A 3A A2 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  67++D12D 4F                   ld      c,a                                                     ;
  68++D12E CD 92 92             call    ADDHLDESignBC                                           ;
  69++D131 47                   ld      b,a                                                     ;
  70++D132 7C                   ld      a,h                                                     ;
  71++D133 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  72++D134 32 AB C0             ld      (UBnkZScaledSign),a                                     ;
  73++D137 7D                   ld      a,l                                                     ;
  74++D138 32 AA C0             ld      (UBnkZScaled),a                                         ;           endif
  75++D13B              LL94X:
  76++D13B 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  77++D13D 16 00                ld      d,0                                                     ;
  78++D13F 3A A6 C0             ld      a,(UBnkXScaled)                                         ;
  79++D142 6F                   ld      l,a                                                     ;
  80++D143 3A A7 C0             ld      a,(UBnkXScaledSign)                                     ;
  81++D146 47                   ld      b,a                                                     ;
  82++D147 3A 9A C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  83++D14A 5F                   ld      e,a                                                     ;
  84++D14B 3A 9C C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  85++D14E 4F                   ld      c,a                                                     ;
  86++D14F CD 92 92             call    ADDHLDESignBC                                           ;
  87++D152 47                   ld      b,a                                                     ;
  88++D153 7C                   ld      a,h                                                     ;
  89++D154 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  90++D155 32 A7 C0             ld      (UBnkXScaledSign),a                                     ;
  91++D158 7D                   ld      a,l                                                     ;
  92++D159 32 A6 C0             ld      (UBnkXScaled),a                                         ;           endif
  93++D15C              LL94Y:
  94++D15C 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  95++D15E 16 00                ld      d,0                                                     ;
  96++D160 3A A8 C0             ld      a,(UBnkYScaled)                                         ;
  97++D163 6F                   ld      l,a                                                     ;
  98++D164 3A A9 C0             ld      a,(UBnkYScaledSign)                                     ;
  99++D167 47                   ld      b,a                                                     ;
 100++D168 3A 9D C0             ld      a,(UBnkDrawCam0yLo)                                     ;
 101++D16B 5F                   ld      e,a                                                     ;
 102++D16C 3A 9F C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
 103++D16F 4F                   ld      c,a                                                     ;
 104++D170 CD 92 92             call    ADDHLDESignBC                                           ;
 105++D173 47                   ld      b,a                                                     ;
 106++D174 7C                   ld      a,h                                                     ;
 107++D175 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
 108++D176 32 A9 C0             ld      (UBnkYScaledSign),a                                     ;
 109++D179 7D                   ld      a,l                                                     ;
 110++D17A 32 A8 C0             ld      (UBnkYScaled),a                                         ;
 111++D17D C9                   ret
 112++D17E
# file closed: ././Universe/Ships/CopyXX18ScaledToXX15.asm
 690+ D17E                                      include "./Universe/Ships/CopyXX12ToScaled.asm"
# file opened: ././Universe/Ships/CopyXX12ToScaled.asm
   1++D17E              CopyXX12ToScaled:
   2++D17E              CopyResultToScaled:
   3++D17E                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++D17E 3A AC C0    >                        ld       a,(XX12+0)
   3++D181 32 A6 C0    >                        ld       (UBnkXScaled),a
   4++D184                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++D184 3A AE C0    >                        ld       a,(XX12+2)
   4++D187 32 A8 C0    >                        ld       (UBnkYScaled),a
   5++D18A                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++D18A 3A B0 C0    >                        ld       a,(XX12+4)
   5++D18D 32 AA C0    >                        ld       (UBnkZScaled),a
   6++D190 C9                   ret
   7++D191
# file closed: ././Universe/Ships/CopyXX12ToScaled.asm
 691+ D191              ;--------------------------------------------------------------------------------------------------------
 692+ D191                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++D191              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++D191              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++D191              ;;; S = XX12 XSign Xor XX15 XSign
   4++D191              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++D191              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++D191              ;;; R = T
   7++D191              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++D191              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++D191              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++D191              ;;; Q = A * Q /256 usigned (zdot)
  11++D191              ;;; R = T
  12++D191              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++D191
  14++D191
  15++D191
  16++D191
  17++D191
  18++D191              MacroAequDxEdiv256usgn:	MACRO
  19++D191 ~            						mul
  20++D191 ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++D191              						ENDM
  22++D191              DotProductXX12XX15:
  23++D191 3A AC C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++D194                      JumpIfAIsZero dotxskipzero
  24++D194 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++D195 CA B2 D1    >                        jp	    z, dotxskipzero
  25++D198 5F                   ld          e,a
  26++D199 3A A6 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++D19C 57                   ld          d,a                     ; de = xx12 x signed
  28++D19D                      JumpIfAIsZero dotxskipzero
  28++D19D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++D19E CA B2 D1    >                        jp	    z, dotxskipzero
  29++D1A1 ED 30        		mul
  30++D1A3 42                   ld          b,d                     ; b = result
  31++D1A4 3A AD C0             ld          a,(UBnkXX12xSign)
  32++D1A7 21 A7 C0             ld          hl,UBnkXScaledSign
  33++D1AA AE                   xor         (hl)
  34++D1AB E6 80                and         $80                     ; so sign bit only
  35++D1AD FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++D1AF C3 B6 D1             jp          dotmuly
  37++D1B2              dotxskipzero:
  38++D1B2 AF                   xor         a
  39++D1B3 47                   ld          b,a
  40++D1B4 FD 67                ld          iyh,a
  41++D1B6              dotmuly:
  42++D1B6              ; now we have b = XX12 x &d  norm x signed
  43++D1B6 3A AE C0             ld          a,(UBnkXX12yLo)
  44++D1B9                      JumpIfAIsZero dotyskipzero
  44++D1B9 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++D1BA CA D9 D1    >                        jp	    z, dotyskipzero
  45++D1BD 5F                   ld          e,a
  46++D1BE 3A A8 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++D1C1                      JumpIfAIsZero dotyskipzero
  47++D1C1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++D1C2 CA D9 D1    >                        jp	    z, dotyskipzero
  48++D1C5 57                   ld          d,a                     ; de = xx12 x signed
  49++D1C6 ED 30                mul
  50++D1C8 4A                   ld          c,d                     ; c = result
  51++D1C9 DD 69                ld          ixl,c
  52++D1CB 3A AF C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++D1CE 21 A9 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++D1D1 AE                   xor         (hl)                    ; XX15+3
  55++D1D2 E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++D1D4 DD 67                ld          ixh,a
  57++D1D6 C3 DD D1             jp          dotaddxy
  58++D1D9              dotyskipzero:
  59++D1D9 AF                   xor         a
  60++D1DA 4F                   ld          c,a
  61++D1DB DD 67                ld          ixh,a
  62++D1DD              dotaddxy:
  63++D1DD              ; Optimise later as this is 16 bit
  64++D1DD 26 00                ld          h,0                     ;
  65++D1DF 68                   ld          l,b                     ; hl = xlo + x scaled
  66++D1E0 16 00                ld          d,0                     ;
  67++D1E2 59                   ld          e,c                     ; de = ylo + yscaled
  68++D1E3 FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++D1E5 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++D1E6 CD 92 92             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D1E9 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D1EA 3A B0 C0             ld          a,(UBnkXX12zLo)         ;
  73++D1ED                      JumpIfAIsZero dotzskipzero
  73++D1ED A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++D1EE CA 13 D2    >                        jp	    z, dotzskipzero
  74++D1F1 5F                   ld          e,a                     ;
  75++D1F2 3A AA C0             ld          a,(UBnkZScaled)         ;
  76++D1F5                      JumpIfAIsZero dotzskipzero
  76++D1F5 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++D1F6 CA 13 D2    >                        jp	    z, dotzskipzero
  77++D1F9 57                   ld          d,a
  78++D1FA ED 30                mul
  79++D1FC E5                   push        hl                      ; save prev result
  80++D1FD 3A AB C0             ld          a,(UBnkZScaledSign)
  81++D200 21 B1 C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D203 AE                   xor         (hl)                    ; hi sign
  83++D204 E6 80                and         $80                     ; a = sign of multiply
  84++D206 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D207 E1                   pop         hl
  86++D208 5A                   ld          e,d
  87++D209 16 00                ld          d,0
  88++D20B CD 92 92             call ADDHLDESignBC
  89++D20E 32 A1 81             ld          (varS),a
  90++D211 7D                   ld          a,l
  91++D212 C9                   ret                                 ; returns with A = value, varS = sign
  92++D213              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D213 78                   ld          a,b
  94++D214 32 A1 81             ld          (varS),a
  95++D217 7D                   ld          a,l
  96++D218 C9                   ret
  97++D219              ;;;;       DotProductXX12XX15:
  98++D219              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D219              ;;;;       ld          e,a
 100++D219              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D219              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D219              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D219              ;;;;		mul
 104++D219              ;;;;       ld          b,d                     ; b as var T
 105++D219              ;;;;       ld          a,(UBnkXX12xSign)
 106++D219              ;;;;       ld          hl,UBnkXScaledSign
 107++D219              ;;;;       xor         (hl)
 108++D219              ;;;;       and         $80                     ; so sign bit only
 109++D219              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D219              ;;;; now we have b = XX12 x & norm x signed
 111++D219              ;;;; by here B = xlo & xscaled C = result sign
 112++D219              ;;;;       ld          a,(UBnkXX12yLo)
 113++D219              ;;;;       ld          e,a
 114++D219              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D219              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D219              ;;;;       mul
 117++D219              ;;;;       ld          a,d
 118++D219              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D219              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D219              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D219              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D219              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D219              ;;;;       xor         (hl)                    ; XX15+3
 124++D219              ;;;;       and         $80
 125++D219              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D219              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D219              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D219              ;;;;       ld          e,a                     ; use e as var Q
 129++D219              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D219              ;;;;       ld          d,a
 131++D219              ;;;;       mul
 132++D219              ;;;;       ld          a,d
 133++D219              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D219              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D219              ;;;;       ld          a,(UBnkZScaledSign)
 136++D219              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D219              ;;;;       xor         (hl)                    ; hi sign
 138++D219              ;;;;       and         $80
 139++D219              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D219              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D219
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 693+ D219              ;--------------------------------------------------------------------------------------------------------
 694+ D219              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 695+ D219              ; Not Used in code      include "Universe/Ships/ScaleNormal.asm"
 696+ D219              ;--------------------------------------------------------------------------------------------------------
 697+ D219                                      include "./Universe/Ships/ScaleObjectDistance.asm"
# file opened: ././Universe/Ships/ScaleObjectDistance.asm
   1++D219              ScaleObjectDistance:
   2++D219              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D219 3A 41 C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D21C 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D21D              LL90:                                       ; scaling object distance
   6++D21D 3A A1 C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D220 47                   ld      b,a                         ; z_hi (yReg)
   8++D221                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D221 A7          >                        and     a
   8++D222 C8          >                        ret     z
   9++D223              LL90Loop:
  10++D223              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D223 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D224                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D224 2A 9D C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D227 CB 3C       >                    srl   h
  12++D229 CB 1D       >                    rr    l
  12++D22B 22 9D C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D22E                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D22E 2A 9A C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D231 CB 3C       >                    srl   h
  13++D233 CB 1D       >                    rr    l
  13++D235 22 9A C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D238                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D238 2A A0 C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D23B CB 3C       >                    srl   h
  14++D23D CB 1D       >                    rr    l
  14++D23F 22 A0 C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D242 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D243                      JumpIfAIsNotZero LL90Loop           ; loop until z hi = 0 this gives scalinging in c
  16++D243 A7          >                        and     a
  16++D244 C2 23 D2    >                        jp	    nz,LL90Loop
  17++D247 C9                   ret
  18++D248
# file closed: ././Universe/Ships/ScaleObjectDistance.asm
 698+ D248              ;--------------------------------------------------------------------------------------------------------
 699+ D248
 700+ D248              ; Backface cull
 701+ D248              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 702+ D248              ; normal vector = cross product of ship ccordinates
 703+ D248              ;
 704+ D248
 705+ D248                                      include "./Universe/Ships/CopyFaceToXX15.asm"
# file opened: ././Universe/Ships/CopyFaceToXX15.asm
   1++D248 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D249 47                                   ld      b,a                                                    ;;;
   3++D24A E6 80                                and     SignOnly8Bit
   4++D24C 32 A7 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D24F 78                                   ld      a,b
   6++D250 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D252 47                                   ld      b,a
   8++D253 E6 80                                and     SignOnly8Bit
   9++D255 32 A9 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D258 78                                   ld      a,b
  11++D259 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D25B E6 80                                and     SignOnly8Bit
  13++D25D 32 AB C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D260 23                                   inc     hl                          ; move to X ccord
  15++D261 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D262 32 A6 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D265 23                                   inc     hl                                                                                                                 ;;;
  18++D266 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D267 32 A8 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D26A 23                                   inc     hl                                                                                                                 ;;;
  21++D26B 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D26C 32 AA C0                             ld      (UBnkZScaled),a
  23++D26F C9                                   ret
  24++D270
# file closed: ././Universe/Ships/CopyFaceToXX15.asm
 706+ D270                                      include "./Universe/Ships/CopyFaceToXX12.asm"
# file opened: ././Universe/Ships/CopyFaceToXX12.asm
   1++D270 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D271 47                                   ld      b,a                         ; save sign bits to b
   3++D272 E6 80                                and     SignOnly8Bit
   4++D274 32 AD C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D277 78                                   ld      a,b
   6++D278 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D27A 47                                   ld      b,a
   8++D27B E6 80                                and     SignOnly8Bit
   9++D27D 32 AF C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D280 78                                   ld      a,b
  11++D281 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D283 E6 80                                and     SignOnly8Bit
  13++D285 32 B1 C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D288 23                                   inc     hl                          ; move to X ccord
  15++D289 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D28A 32 AC C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D28D 23                                   inc     hl                                                                                                                 ;;;
  18++D28E 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D28F 32 AE C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D292 23                                   inc     hl                                                                                                                 ;;;
  21++D293 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D294 32 B0 C0                             ld      (UBnkXX12zLo),a
  23++D297 C9                                   ret
  24++D298
# file closed: ././Universe/Ships/CopyFaceToXX12.asm
 707+ D298              ;--------------------------------------------------------------
 708+ D298              ; Original loginc in EE29 (LL9 4 of 12)
 709+ D298              ; Enters with XX4 = z distnace scaled to 1 .. 31
 710+ D298              ; get number of faces * 4      FaceCntX4
 711+ D298              ; return if no faces
 712+ D298              ; get Face Normal scale factor FaceScale (XX17)
 713+ D298              ; get ship pos z hi     (XX18)
 714+ D298              ; While Z hi <> 0
 715+ D298              ;    FaceScale = FaceScale + 1           (XX17)
 716+ D298              ;    Ship pos y = ship pos y / 2         (XX18)
 717+ D298              ;    ship pos x = ship pos x / 2         (XX18)
 718+ D298              ;    ship pos z = ship pos z / 2         (XX18)
 719+ D298              ; Loop
 720+ D298              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 721+ D298              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 722+ D298              ; Copy XX12 into XX18
 723+ D298              ; For each face
 724+ D298              ;     Get Face sign and visibility distance byte
 725+ D298              ;     if normal visibility range  < XX4
 726+ D298              ;        Get Face data into XX12
 727+ D298              ;        if FaceScale (XX17) >= 4
 728+ D298              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 729+ D298              ;        else
 730+ D298              ;           Copy FaceScale scaled to X  (XX17)
 731+ D298              ;LabelOverflowLoop:
 732+ D298              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 733+ D298              ;           While X >= 0
 734+ D298              ;              X--                                                                                                  ::LL93
 735+ D298              ;              if  x >= 0
 736+ D298              ;                  XX15x = XX15x / 2
 737+ D298              ;                  XX15y = XX15y / 2
 738+ D298              ;                  XX15y = XX15y / 2
 739+ D298              ;           loop
 740+ D298              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 741+ D298              ;           if A > 256 (i.e. was overflow)
 742+ D298              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 743+ D298              ;               X = 1
 744+ D298              ;               Goto LabelOverflowLoop
 745+ D298              ;           else
 746+ D298              ;              Scaled (XX15) Z = AddZ
 747+ D298              ;           endif
 748+ D298              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
 749+ D298              ;           if A > 256 (i.e. was overflow)
 750+ D298              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 751+ D298              ;               X = 1
 752+ D298              ;               Goto LabelOverflowLoop
 753+ D298              ;           else
 754+ D298              ;              Scaled (XX15) X = AddX
 755+ D298              ;           endif
 756+ D298              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
 757+ D298              ;           if A > 256 (i.e. was overflow)
 758+ D298              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 759+ D298              ;               X = 1
 760+ D298              ;               Goto LabelOverflowLoop
 761+ D298              ;           else
 762+ D298              ;              Scaled (XX15) Y = AddY
 763+ D298              ;           endif
 764+ D298              ;        endif
 765+ D298              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
 766+ D298              ;        if dot product < 0
 767+ D298              ;           set face visible
 768+ D298              ;        else
 769+ D298              ;           set face invisible
 770+ D298              ;        end if
 771+ D298              ;     else
 772+ D298              ;       Set FaceVisibility to true
 773+ D298              ;     end if
 774+ D298              ; Next Face
 775+ D298
 776+ D298              ;line of sight vector = [x y z] + face normal vector
 777+ D298
 778+ D298              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
 779+ D298              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
 780+ D298              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
 781+ D298              ;
 782+ D298              ;--------------------------------------------------------------
 783+ D298              ; line of sight (eye outwards dot face normal vector < 0
 784+ D298              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
 785+ D298              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
 786+ D298              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
 787+ D298
 788+ D298                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D298              ;    DEFINE DEBUGDRAWDISTANCE 1
   2++D298                  DEFINE CHECKDOTSHIPDATA  1
   3++D298              ;    DEFINE DEBUGFORCEFACEDRAW 1
   4++D298 00           CurrentNormIdx  DB 0
   5++D299              ; SomeFacesVisible:
   6++D299              ; EE29:
   7++D299
   8++D299              ;   Backface cull logic  line of sight vector . face normal vector
   9++D299              ;       line of sight vector . face normal vector
  10++D299              ;       => line of sight vector = [x y z] + face normal vector
  11++D299              ;       Where [x y z] =
  12++D299              ;                                               [ [x y z] . sidev ]
  13++D299              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  14++D299              ;                                               [ [x y z] . nosev ]
  15++D299              ;
  16++D299              ;   so project the [x y z] vector into the face's normal space
  17++D299              ;  line of sight vector = projected [x y z] vector + face normal vector
  18++D299              ;                         [ [x y z] . sidev ]   [ normal_x ]
  19++D299              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  20++D299              ;                         [ [x y z] . nosev ]   [ normal_z ]
  21++D299              ;
  22++D299              ;                         [ [x y z] . sidev + normal_x ]
  23++D299              ;                       = [ [x y z] . roofv + normal_y ]
  24++D299              ;                         [ [x y z] . nosev + normal_z ]
  25++D299              ;
  26++D299              ; so
  27++D299              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  28++D299              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  29++D299              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  30++D299              ;
  31++D299              ; where face is visible if visibility < 0
  32++D299              ;
  33++D299              ;   so we set XX15 to [x y z] . sidev
  34++D299              ;                     [x y z] . roofv
  35++D299              ;                     [x y z] . nosev
  36++D299              ;
  37++D299
  38++D299
  39++D299
  40++D299 3A A1 C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  41++D29C                                      JumpIfAIsZero .ScaleDone            ;
  41++D29C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  41++D29D CA C9 D2    >                        jp	    z, .ScaleDone
  42++D2A0 2A 9A C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  43++D2A3 ED 5B 9D C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  44++D2A7 ED 4B A0 C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  45++D2AB FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  46++D2AD                                      ShiftHLRight1                       ; divide cam position by 2
  46++D2AD CB 3C       >			   srl h
  46++D2AF CB 1D       >			   rr  l
  47++D2B1                                      ShiftDERight1                       ;
  47++D2B1 CB 3A       >			   srl d
  47++D2B3 CB 1B       >			   rr  e
  48++D2B5                                      ShiftBCRight1                       ;
  48++D2B5 CB 38       >			   srl b
  48++D2B7 CB 19       >			   rr  c
  49++D2B9 78                                   ld      a,b                         ; loop if not scaled down
  50++D2BA                                      JumpIfAIsNotZero .ScaleNormalLoop     ;
  50++D2BA A7          >                        and     a
  50++D2BB C2 AB D2    >                        jp	    nz,.ScaleNormalLoop
  51++D2BE 22 9A C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  52++D2C1 ED 53 9D C0                          ld      (UBnkDrawCam0yLo),de        ;
  53++D2C5 ED 43 A0 C0                          ld      (UBnkDrawCam0zLo),bc        ;
  54++D2C9 FD 7D        .ScaleDone:             ld      a,iyl
  55++D2CB 32 A6 81                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  56++D2CE C9                                   ret
  57++D2CF
  58++D2CF 3A 28 C0     CheckVisible:           ld      a,(UBnKzsgn)                 ; Is the ship behind us
  59++D2D2 E6 80        .CheckBehind:           and     SignOnly8Bit                 ; which means z sign is negative
  60++D2D4 20 31                                jr      nz,.ShipNoDraw               ; .
  61++D2D6 2A 26 C0     .CheckViewPort:         ld      hl,(UBnKzlo)                 ; now check to see if its within 90 degree arc
  62++D2D9 7C                                   ld      a,h
  63++D2DA                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
  63++D2DA FE C0       >                        cp     ShipMaxDistance
  63++D2DC D2 07 D3    >                        jp		nc,.ShipNoDraw
  64++D2DF ED 5B 20 C0  .CheckXAxis:            ld      de,(UBnKxlo)                 ; if abs x > abx z then its out side of view port
  65++D2E3 CD 59 99                             call    compare16HLDE
  66++D2E6 38 1F                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  67++D2E8 ED 5B 23 C0  .CheckYAxis:            ld      de,(UBnKylo)                ; if abs y > abx z then its out side of view port
  68++D2EC CD 59 99                             call    compare16HLDE
  69++D2EF 38 16                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  70++D2F1                                      IFDEF   CHECKDOTSHIPDATA
  71++D2F1 3A 3C C3     .CheckDotV2:                ld      a,(DotAddr)
  72++D2F4                                          JumpIfAGTENusng h, .DrawFull
  72++D2F4 BC          >                        cp     h
  72++D2F5 D2 FB D2    >                        jp		nc,.DrawFull
  73++D2F8 C3 0D D3                                 jp      .ShipIsADot
  74++D2FB 3A 54 C0     .DrawFull:                  ld      a,(UBnkaiatkecm)            ; its visible but a dot
  75++D2FE F6 40                                    or      ShipIsVisible               ; Visible and not a dot
  76++D300 E6 F7                                    and     ShipIsNotDot                ;
  77++D302 32 54 C0                                 ld      (UBnkaiatkecm),a            ;
  78++D305                                          ClearCarryFlag
  78++D305 B7          >                        or a
  79++D306 C9                                       ret
  80++D307                                      ELSE
  81++D307 ~            .CalculateXX4:              ShiftHLRight1                       ; hl = z pos / 8
  82++D307 ~                                        ShiftHLRight1                       ; .
  83++D307 ~                                        ShiftHLRight1                       ; .
  84++D307 ~                                        ld      a,h
  85++D307 ~                                        srl     a                           ; if a / 16 <> 0 then ship is a dot
  86++D307 ~            .DrawAsDotCheck:            JumpIfNotZero   .ShipIsADot
  87++D307 ~                                        ; Check visbility distance
  88++D307 ~            .SetXX4Dist:                ;break
  89++D307 ~                                        ld      a,l
  90++D307 ~                                        rra                                 ; l may have had bit 0 of h carried in
  91++D307 ~                                        srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
  92++D307 ~                                        srl     a
  93++D307 ~                                        srl     a
  94++D307 ~                                        ld      (UBnkDrawAllFaces),a        ; XX4 = "all faces" distance
  95++D307 ~                                        ld      a,(UBnkaiatkecm)            ; its visible but a dot
  96++D307 ~                                        or      ShipIsVisible               ; Visible and not a dot
  97++D307 ~                                        and     ShipIsNotDot                ;
  98++D307 ~                                        ld      (UBnkaiatkecm),a            ;
  99++D307 ~                                        ClearCarryFlag
 100++D307 ~                                        ret
 101++D307                                      ENDIF
 102++D307              .ShipNoDraw:            ClearMemBitN  UBnkaiatkecm  , ShipIsVisibleBitNbr ; Assume its hidden
 102++D307 21 54 C0    >                        ld      hl,UBnkaiatkecm
 102++D30A CB B6       >                        res     ShipIsVisibleBitNbr,(hl)
 103++D30C C9                                   ret
 104++D30D 3A 54 C0     .ShipIsADot:            ld      a,(UBnkaiatkecm)            ; its visible but a dot
 105++D310                                      IFDEF DEBUGDRAWDISTANCE
 106++D310 ~                                        or      ShipIsVisible   ;
 107++D310                                      ELSE
 108++D310 F6 48                                    or      ShipIsVisible | ShipIsDot   ;
 109++D312                                      ENDIF
 110++D312 32 54 C0                             ld      (UBnkaiatkecm),a            ;
 111++D315 C9                                   ret
 112++D316
 113++D316
 114++D316              ; TODO remove all teh processing of rotmat to load craft to camera as its already been done
 115++D316              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 115++D316 3A 3B C3    >                        ld   a,(FaceCtX4Addr)
 115++D319 A7          >                        and a
 115++D31A C8          >                        ret    z
 116++D31B                                     ; break
 117++D31B CD D2 CD                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 118++D31E CD 30 7A                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 119++D321 CD 8A D0                             call    LoadCraftToCamera           ; XX18 = camera
 120++D324                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 121++D324 3A 41 C3     .BackfaceLoop:          ld      a,(QAddr)                   ;
 122++D327 FD 6F                                ld      iyl,a                       ; iyl = scale factor
 123++D329              ; By this point XX18 = scaled draw cam and iyl = scale factor
 124++D329 CD 99 D2                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 125++D32C CD AE D0                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 126++D32F CD 87 79     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 127++D332 CD 1B D0                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 128++D335 21 01 C5     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 129++D338 22 A5 80                             ld      (varV),hl
 130++D33B 3A 3B C3                             ld      a,(FaceCtX4Addr)                                        ; For each face
 131++D33E CB 3F                                srl     a                                              ;
 132++D340 CB 3F                                srl     a                                              ;
 133++D342 47                                   ld      b,a                                            ;
 134++D343 AF                                   xor     a
 135++D344 32 98 D2                             ld      (CurrentNormIdx),a                                          ; used to increment up face incdex as b decrements
 136++D347 E5           .ProcessNormalsLoop:    push    hl
 137++D348 C5                                   push    bc
 138++D349 7E           .LL86:                  ld      a,(hl)                                         ; Get Face sign and visibility distance byte
 139++D34A E6 1F                                and     $1F                                            ; if normal visibility range  < XX4
 140++D34C E5                                   push    hl
 141++D34D 21 52 C0                             ld      hl,UBnkDrawAllFaces
 142++D350 BE                                   cp      (hl)
 143++D351 E1                                   pop     hl
 144++D352                                      IFDEF DEBUGFORCEFACEDRAW
 145++D352 ~                                        jp      .FaceVisible
 146++D352                                      ELSE
 147++D352 DA 97 D4                                 jp      c,.FaceVisible              ; then we always draw
 148++D355                                      ENDIF
 149++D355              ; This bit needs to be added to force face visible
 150++D355 CD 70 D2     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 151++D358 3A A6 81                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 152++D35B 47                                   ld      b,a
 153++D35C                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 153++D35C FE 04       >                        cp      4
 153++D35E DA 99 D3    >                        jp		c, .ScaleNormByXX17
 154++D361 CD 65 D0     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 155++D364 C3 28 D4                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 156++D367 3A 9A C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 157++D36A CB 3F                                srl     a                           ; which is held in XX18
 158++D36C 32 9A C0                             ld      (UBnkDrawCam0xLo),a         ; .
 159++D36F 3A A0 C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 160++D372 CB 3F                                srl     a                           ; .
 161++D374 32 A0 C0                             ld      (UBnkDrawCam0zLo),a         ; .
 162++D377 3A 9D C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 163++D37A CB 3F                                srl     a                           ; .
 164++D37C 32 9D C0                             ld      (UBnkDrawCam0yLo),a        ; .
 165++D37F 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 166++D381                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 166++D381 3A A6 C0    >                    ld      a,(UBnkXScaled)
 166++D384 CB 3F       >                    srl     a
 166++D386 32 A6 C0    >                    ld      (UBnkXScaled),a
 167++D389                                      ShiftMem8Right1 UBnkYScaled         ;
 167++D389 3A A8 C0    >                    ld      a,(UBnkYScaled)
 167++D38C CB 3F       >                    srl     a
 167++D38E 32 A8 C0    >                    ld      (UBnkYScaled),a
 168++D391                                      ShiftMem8Right1 UBnkZScaled         ;
 168++D391 3A AA C0    >                    ld      a,(UBnkZScaled)
 168++D394 CB 3F       >                    srl     a
 168++D396 32 AA C0    >                    ld      (UBnkZScaled),a
 169++D399              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 170++D399              .ScaleNormByXX17:       ;ld      b,a
 171++D399 CD 40 D0                             call    CopyXX12toXX15
 172++D39C 05           .LL93                   dec     b
 173++D39D FA BC D3                             jp      m, .ScaledNorm
 174++D3A0              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 174++D3A0 3A A6 C0    >                    ld      a,(UBnkXScaled)
 174++D3A3 CB 3F       >                    srl     a
 174++D3A5 32 A6 C0    >                    ld      (UBnkXScaled),a
 175++D3A8                                      ShiftMem8Right1 UBnkYScaled        ;
 175++D3A8 3A A8 C0    >                    ld      a,(UBnkYScaled)
 175++D3AB CB 3F       >                    srl     a
 175++D3AD 32 A8 C0    >                    ld      (UBnkYScaled),a
 176++D3B0                                      ShiftMem8Right1 UBnkZScaled        ;
 176++D3B0 3A AA C0    >                    ld      a,(UBnkZScaled)
 176++D3B3 CB 3F       >                    srl     a
 176++D3B5 32 AA C0    >                    ld      (UBnkZScaled),a
 177++D3B8 05                                   dec     b                          ;
 178++D3B9 F2 A0 D3                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 179++D3BC              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 180++D3BC              ; Add normal to XX15
 181++D3BC              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 182++D3BC              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 183++D3BC              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 184++D3BC              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 185++D3BC              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 185++D3BC 3A AA C0    >                        ld       a,(UBnkZScaled)
 185++D3BF 32 A0 81    >                        ld       (varR),a
 186++D3C2                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 186++D3C2 3A B1 C0    >                        ld       a,(UBnkXX12zSign)
 186++D3C5 32 A1 81    >                        ld       (varS),a
 187++D3C8                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 187++D3C8 3A A0 C0    >                        ld       a,(UBnkDrawCam0zLo)
 187++D3CB 32 9F 81    >                        ld       (varQ),a
 188++D3CE 3A A2 C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 189++D3D1 CD 29 9C                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 190++D3D4 DA 67 D3                             jp      c,.Ovflw
 191++D3D7 32 AA C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 192++D3DA                                      ldCopyByte  varS, UBnkZScaledSign   ;
 192++D3DA 3A A1 81    >                        ld       a,(varS)
 192++D3DD 32 AB C0    >                        ld       (UBnkZScaledSign),a
 193++D3E0                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 193++D3E0 3A A6 C0    >                        ld       a,(UBnkXScaled)
 193++D3E3 32 A0 81    >                        ld       (varR),a
 194++D3E6                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 194++D3E6 3A AD C0    >                        ld       a,(UBnkXX12xSign)
 194++D3E9 32 A1 81    >                        ld       (varS),a
 195++D3EC                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 195++D3EC 3A 9A C0    >                        ld       a,(UBnkDrawCam0xLo)
 195++D3EF 32 9F 81    >                        ld       (varQ),a
 196++D3F2 3A 9C C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 197++D3F5 CD 29 9C                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 198++D3F8 DA 67 D3                             jp      c,.Ovflw
 199++D3FB 32 A6 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 200++D3FE                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 200++D3FE 3A A1 81    >                        ld       a,(varS)
 200++D401 32 A7 C0    >                        ld       (UBnkXScaledSign),a
 201++D404                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 201++D404 3A A8 C0    >                        ld       a,(UBnkYScaled)
 201++D407 32 A0 81    >                        ld       (varR),a
 202++D40A                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 202++D40A 3A AF C0    >                        ld       a,(UBnkXX12ySign)
 202++D40D 32 A1 81    >                        ld       (varS),a
 203++D410                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 203++D410 3A 9D C0    >                        ld       a,(UBnkDrawCam0yLo)
 203++D413 32 9F 81    >                        ld       (varQ),a
 204++D416 3A 9F C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 205++D419 CD 29 9C                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 206++D41C DA 67 D3                             jp      c,.Ovflw                    ; .
 207++D41F 32 A8 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 208++D422                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 208++D422 3A A1 81    >                        ld       a,(varS)
 208++D425 32 A9 C0    >                        ld       (UBnkYScaledSign),a
 209++D428              ; calculate dot product LL89
 210++D428              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 210++D428 3A AC C0    >                        ld       a,(UBnkXX12xLo)
 210++D42B 32 9F 81    >                        ld       (varQ),a
 211++D42E 3A A6 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 212++D431 CD 90 9B                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 213++D434 32 BB 81                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 214++D437 3A AD C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 215++D43A 21 A7 C0                             ld      hl,UBnkXScaledSign          ; .
 216++D43D AE                                   xor     (hl)                        ; .
 217++D43E 32 A1 81                             ld      (varS),a                    ; .
 218++D441                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 218++D441 3A AE C0    >                        ld       a,(UBnkXX12yLo)
 218++D444 32 9F 81    >                        ld       (varQ),a
 219++D447 3A A8 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 220++D44A CD 90 9B                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 221++D44D 32 9F 81                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 222++D450                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 222++D450 3A BB 81    >                        ld       a,(varT)
 222++D453 32 A0 81    >                        ld       (varR),a
 223++D456 3A AF C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 224++D459 21 A9 C0                             ld      hl, UBnkYScaledSign         ; .
 225++D45C AE                                   xor     (hl)                        ; .
 226++D45D CD 29 9C                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 227++D460 32 BB 81                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 228++D463                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 228++D463 3A B0 C0    >                        ld       a,(UBnkXX12zLo)
 228++D466 32 9F 81    >                        ld       (varQ),a
 229++D469 3A AA C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 230++D46C CD 90 9B                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 231++D46F 32 9F 81                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 232++D472                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 232++D472 3A BB 81    >                        ld       a,(varT)
 232++D475 32 A0 81    >                        ld       (varR),a
 233++D478 3A AB C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 234++D47B 21 B1 C0                             ld      hl, UBnkXX12zSign           ; .
 235++D47E AE                                   xor     (hl)                        ; .
 236++D47F CD 29 9C                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 237++D482 FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 238++D484 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 239++D486 3A A1 81                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 240++D489 ED 27 80                             test    $80                         ; this should test S not A
 241++D48C 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 242++D48E 3A 98 D2     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 243++D491 CD D8 CE                             call        SetFaceAHidden                                      ;           set face invisible
 244++D494 C3 9D D4                             jp          .ProcessNormalLoopEnd                                ;        end if
 245++D497 3A 98 D2     .FaceVisible:            ld          a,(CurrentNormIdx)
 246++D49A CD CF CE                             call        SetFaceAVisible
 247++D49D 21 98 D2     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 248++D4A0 34                                   inc         (hl)                    ; move index pointer up by one
 249++D4A1 C1                                   pop         bc
 250++D4A2 E1                                   pop         hl                      ; get normal data pointer back
 251++D4A3 3E 04                                ld          a,4
 252++D4A5 ED 31                                add         hl,a                    ; move to next normal entry
 253++D4A7 22 A5 80                             ld          (varV),hl               ; save as we need it again
 254++D4AA 05                                   dec         b
 255++D4AB C2 47 D3                             jp          nz,.ProcessNormalsLoop
 256++D4AE C9                                   ret
 257++D4AF
# file closed: ././ModelRender/BackfaceCull.asm
 789+ D4AF
 790+ D4AF
 791+ D4AF              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
 792+ D4AF
 793+ D4AF              TransposeXX12NodeToXX15:
 794+ D4AF                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
 794+ D4AF 3A 22 C0    >                        ld       a,(UBnKxsgn)
 794+ D4B2 32 A8 C0    >                        ld       (UbnkXPointSign),a
 795+ D4B5 ED 4B AC C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 796+ D4B9 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 797+ D4BA FA D0 D4             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 798+ D4BD              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 799+ D4BD              NodeXPositiveX:
 800+ D4BD 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 801+ D4BE 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 802+ D4C0 2A 20 C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
 803+ D4C3 26 00                ld          h,0                                 ; but we don;t want the sign
 804+ D4C5 09                   add         hl,bc                               ; its a 16 bit add
 805+ D4C6 22 A6 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
 806+ D4C9 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 807+ D4CA 32 A8 C0             ld          (UbnkXPointSign),a
 808+ D4CD C3 EC D4             jp          FinishedThisNodeX
 809+ D4D0              ; If we get here then _sign and vertv_ have different signs so do subtract
 810+ D4D0              NodeNegativeX:
 811+ D4D0              LL52X:                                                 ;
 812+ D4D0 2A 20 C0             ld          hl,(UBnKxlo)                       ; Coord
 813+ D4D3 ED 4B AC C0          ld          bc,(UBnkXX12xLo)                   ; XX12
 814+ D4D7 06 00                ld          b,0                                 ; XX12 lo byte only
 815+ D4D9 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 816+ D4DB F2 E9 D4             jp          p,SetAndMopX                       ; if result is positive skip to write back
 817+ D4DE              NodeXNegSignChangeX:
 818+ D4DE              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 819+ D4DE CD 6F 99             call        negate16hl                          ; Convert back to positive and flip sign
 820+ D4E1 3A A8 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
 821+ D4E4 EE 80                xor         $80                                 ; Flip bit 7
 822+ D4E6 32 A8 C0             ld          (UbnkXPointSign),a                 ; XX15+2
 823+ D4E9              SetAndMopX:
 824+ D4E9 22 20 C0             ld          (UBnKxlo),hl                       ; XX15+0
 825+ D4EC              FinishedThisNodeX:
 826+ D4EC
 827+ D4EC              LL53:
 828+ D4EC
 829+ D4EC                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
 829+ D4EC 3A 25 C0    >                        ld       a,(UBnKysgn)
 829+ D4EF 32 AB C0    >                        ld       (UbnkYPointSign),a
 830+ D4F2 ED 4B AE C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
 831+ D4F6 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 832+ D4F7 FA 0D D5             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 833+ D4FA              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 834+ D4FA              NodeXPositiveY:
 835+ D4FA 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 836+ D4FB 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 837+ D4FD 2A 23 C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
 838+ D500 26 00                ld          h,0                                 ; but we don;t want the sign
 839+ D502 09                   add         hl,bc                               ; its a 16 bit add
 840+ D503 22 A9 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
 841+ D506 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 842+ D507 32 A8 C0             ld          (UbnkXPointSign),a
 843+ D50A C3 29 D5             jp          FinishedThisNodeY
 844+ D50D              ; If we get here then _sign and vertv_ have different signs so do subtract
 845+ D50D              NodeNegativeY:
 846+ D50D              LL52Y:                                                 ;
 847+ D50D 2A 23 C0             ld          hl,(UBnKylo)                       ; Coord
 848+ D510 ED 4B AE C0          ld          bc,(UBnkXX12yLo)                   ; XX12
 849+ D514 06 00                ld          b,0                                 ; XX12 lo byte only
 850+ D516 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 851+ D518 F2 26 D5             jp          p,SetAndMopY                       ; if result is positive skip to write back
 852+ D51B              NodeXNegSignChangeY:
 853+ D51B              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 854+ D51B CD 6F 99             call        negate16hl                          ; Convert back to positive and flip sign
 855+ D51E 3A AB C0             ld          a,(UbnkYPointSign)                 ; XX15+2
 856+ D521 EE 80                xor         $80                                 ; Flip bit 7
 857+ D523 32 AB C0             ld          (UbnkYPointSign),a                 ; XX15+2
 858+ D526              SetAndMopY:
 859+ D526 22 23 C0             ld          (UBnKylo),hl                       ; XX15+0
 860+ D529              FinishedThisNodeY:
 861+ D529
 862+ D529
 863+ D529              TransposeZ:
 864+ D529              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
 865+ D529 3A B1 C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
 866+ D52C                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
 866+ D52C CB 7F       >                        bit 	7,a
 866+ D52E C2 42 D5    >                        jp      nz,NegativeNodeZ
 867+ D531 3A B0 C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
 868+ D534 2A 26 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
 869+ D537 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
 870+ D539 7D                   ld          a,l
 871+ D53A 32 BB 81             ld          (varT),a                            ;                                                                           ;;;
 872+ D53D 7C                   ld          a,h
 873+ D53E 32 9E 81             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
 874+ D541 C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
 875+ D542              ; Doing additions and scalings for each visible node around here                                                                    ;;;
 876+ D542              NegativeNodeZ:
 877+ D542              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
 878+ D542 2A 26 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
 879+ D545 ED 4B B0 C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
 880+ D549 06 00                ld          b,0                                 ; upper byte will be garbage
 881+ D54B                      ClearCarryFlag
 881+ D54B B7          >                        or a
 882+ D54C ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
 883+ D54E 7D                   ld          a,l
 884+ D54F 32 BB 81             ld          (varT),a                            ; t = result low
 885+ D552 7C                   ld          a,h
 886+ D553 32 9E 81             ld          (varU),a                            ; u = result high
 887+ D556 E2 63 D5             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
 888+ D559              LL56Overflow:
 889+ D559 FE 00                cp          0                                   ; is varU 0?
 890+ D55B 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
 891+ D55D 3A BB 81             ld          a,(varT)                            ; T \ restore z lo
 892+ D560                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
 892+ D560 FE 04       >                        cp    4
 892+ D562 D0          >                        ret	 nc
 893+ D563              MakeNodeClose:
 894+ D563              LL140:                                                  ; else make node close
 895+ D563 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
 896+ D564 32 9E 81             ld          (varU),a                            ; U
 897+ D567 3E 04                ld          a,4                                 ; lo
 898+ D569 32 BB 81             ld          (varT),a                            ; T
 899+ D56C C9                   ret
 900+ D56D              ;--LL49-------------------------------------------------------------------------------------------------------------------------
 901+ D56D              ProcessVisibleNode:
 902+ D56D              RotateNode:                                                                                                                         ;;;
 903+ D56D CD EA CF             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
 904+ D570              LL52LL53LL54LL55
 905+ D570              TransposeNode:
 906+ D570 CD AF D4             call        TransposeXX12NodeToXX15
 907+ D573
 908+ D573              ; ......................................................                                                         ;;;
 909+ D573              NodeAdditionsDone:
 910+ D573              Scale16BitTo8Bit:
 911+ D573              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
 912+ D573 3A 9E 81             ld          a,(varU)                            ; U \ z hi
 913+ D576 21 A7 C0             ld          hl,UbnkXPointHi
 914+ D579 B6                   or          (hl)                                ; XX15+1    \ x hi
 915+ D57A 21 AA C0             ld          hl,UbnkYPointHi
 916+ D57D B6                   or          (hl)                                ; XX15+4    \ y hi
 917+ D57E              AreXYZHiAllZero:
 918+ D57E 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 919+ D580              DivideXYZBy2:
 920+ D580                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
 920+ D580 2A A6 C0    >                    ld    hl,(UbnkXPoint)
 920+ D583 CB 3C       >                    srl   h
 920+ D585 CB 1D       >                    rr    l
 920+ D587 22 A6 C0    >                    ld    (UbnkXPoint),hl
 921+ D58A                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
 921+ D58A 2A A9 C0    >                    ld    hl,(UbnkYPoint)
 921+ D58D CB 3C       >                    srl   h
 921+ D58F CB 1D       >                    rr    l
 921+ D591 22 A9 C0    >                    ld    (UbnkYPoint),hl
 922+ D594 3A 9E 81             ld          a,(varU)                            ; U \ z hi
 923+ D597 67                   ld          h,a
 924+ D598 3A BB 81             ld          a,(varT)                            ; T \ z lo
 925+ D59B 6F                   ld          l,a
 926+ D59C                      ShiftHLRight1
 926+ D59C CB 3C       >			   srl h
 926+ D59E CB 1D       >			   rr  l
 927+ D5A0 7C                   ld          a,h
 928+ D5A1 32 9E 81             ld          (varU),a
 929+ D5A4 7D                   ld          a,l
 930+ D5A5 32 BB 81             ld          (varT),a                            ; T \ z lo
 931+ D5A8 C3 73 D5             jp          Scale16BitTo8Bit                    ; loop U
 932+ D5AB              NodeScalingDone:
 933+ D5AB              LL60:                                                   ; hi U rolled to 0, exited loop above.
 934+ D5AB              ProjectNodeToScreen:
 935+ D5AB                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
 935+ D5AB 3A BB 81    >                        ld       a,(varT)
 935+ D5AE 32 9F 81    >                        ld       (varQ),a
 936+ D5B1 3A A6 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
 937+ D5B4 21 9F 81             ld          hl,varQ
 938+ D5B7 BE                   cp          (hl)                                ; Q
 939+ D5B8                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
 939+ D5B8 DA C1 D5    >                        jp		c,DoSmallAngle
 940+ D5BB CD 30 9D             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
 941+ D5BE C3 C9 D5             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
 942+ D5C1              DoSmallAngle:                                           ; small x angle
 943+ D5C1              LL69:
 944+ D5C1              ; TODO check if we need to retain BC as this trashes it
 945+ D5C1              ;Input: BC = Dividend, DE = Divisor, HL = 0
 946+ D5C1              ;Output: BC = Quotient, HL = Remainder
 947+ D5C1 47                   ld      b,a
 948+ D5C2 CD EE 97             call    DIV16UNDOC
 949+ D5C5 79                   ld      a,c
 950+ D5C6 32 A0 81             ld      (varR),a
 951+ D5C9               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
 952+ D5C9              SkipSmallAngle:
 953+ D5C9              ScaleX:
 954+ D5C9              LL65:                                                   ; both continue for scaling based on z
 955+ D5C9 3A A8 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
 956+ D5CC                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 956+ D5CC CB 7F       >                        bit 	7,a
 956+ D5CE C2 E1 D5    >                        jp      nz,NegativeXPoint
 957+ D5D1              ; ......................................................
 958+ D5D1              PositiveXPoint:
 959+ D5D1 3A A0 81             ld          a,(varR)
 960+ D5D4 6F                   ld          l,a
 961+ D5D5 3A 9E 81             ld          a,(varU)
 962+ D5D8 67                   ld          h,a
 963+ D5D9 3E 80                ld          a,ScreenCenterX
 964+ D5DB ED 31                add         hl,a
 965+ D5DD EB                   ex          de,hl
 966+ D5DE C3 F1 D5             jp          StoreXPoint
 967+ D5E1              NegativeXPoint:
 968+ D5E1              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
 969+ D5E1 3A A0 81             ld          a,(varR)
 970+ D5E4 6F                   ld          l,a
 971+ D5E5 3A 9E 81             ld          a,(varU)
 972+ D5E8 67                   ld          h,a
 973+ D5E9 0E 80                ld          c,ScreenCenterX
 974+ D5EB 06 00                ld          b,0
 975+ D5ED                      ClearCarryFlag
 975+ D5ED B7          >                        or a
 976+ D5EE ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
 977+ D5F0 EB                   ex          de,hl
 978+ D5F1              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
 979+ D5F1 FD 73 00             ld          (iy+0),e                            ; Update X Point
 980+ D5F4 FD 72 01             ld          (iy+1),d                            ; Update X Point
 981+ D5F7 FD 23                inc         iy
 982+ D5F9 FD 23                inc         iy
 983+ D5FB              ; ......................................................
 984+ D5FB              LL66:
 985+ D5FB              ProcessYPoint:
 986+ D5FB AF                   xor         a                                   ; y hi = 0
 987+ D5FC 32 9E 81             ld          (varU),a                            ; U
 988+ D5FF                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
 988+ D5FF 3A BB 81    >                        ld       a,(varT)
 988+ D602 32 9F 81    >                        ld       (varQ),a
 989+ D605 3A A9 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
 990+ D608 21 9F 81             ld          hl,varQ
 991+ D60B BE                   cp          (hl)                                ; Q
 992+ D60C                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
 992+ D60C DA 15 D6    >                        jp		c,SmallYHop
 993+ D60F              SmallYPoint:
 994+ D60F CD 30 9D             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
 995+ D612 C3 18 D6             jp          SkipYScale                          ; LL68 hop over small y yangle
 996+ D615              SmallYHop:
 997+ D615              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
 998+ D615 CD 0D 9D             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
 999+ D618              SkipYScale:
1000+ D618              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1001+ D618 3A AB C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1002+ D61B CB 7F                bit         7,a
1003+ D61D C2 30 D6             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1004+ D620              PositiveYPoint:
1005+ D620 3A A0 81             ld          a,(varR)
1006+ D623 6F                   ld          l,a
1007+ D624 3A 9E 81             ld          a,(varU)
1008+ D627 67                   ld          h,a
1009+ D628 3E 60                ld          a,ScreenHeightHalf
1010+ D62A ED 31                add         hl,a
1011+ D62C EB                   ex          de,hl
1012+ D62D C3 40 D6             jp          LL50
1013+ D630              NegativeYPoint:
1014+ D630              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1015+ D630 3A A0 81             ld          a,(varR)
1016+ D633 6F                   ld          l,a
1017+ D634 3A 9E 81             ld          a,(varU)
1018+ D637 67                   ld          h,a
1019+ D638 0E 60                ld          c,ScreenHeightHalf
1020+ D63A 06 00                ld          b,0
1021+ D63C                      ClearCarryFlag
1021+ D63C B7          >                        or a
1022+ D63D ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1023+ D63F EB                   ex          de,hl
1024+ D640              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1025+ D640 FD 73 00             ld          (iy+0),e                            ; Update X Point
1026+ D643 FD 72 01             ld          (iy+1),d                            ; Update X Point
1027+ D646 FD 23                inc         iy
1028+ D648 FD 23                inc         iy
1029+ D64A C9                   ret
1030+ D64B              ;--------------------------------------------------------------------------------------------------------
1031+ D64B              ;;;     Byte 0 = X magnitide with origin at middle of ship
1032+ D64B              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1033+ D64B              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1034+ D64B              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1035+ D64B              CopyNodeToXX15:
1036+ D64B                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1036+ D64B 7E          >                        ld       a,(hl)
1036+ D64C 32 A6 C0    >                        ld       (UBnkXScaled),a
1037+ D64F 23                   inc         hl
1038+ D650                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1038+ D650 7E          >                        ld       a,(hl)
1038+ D651 32 A8 C0    >                        ld       (UBnkYScaled),a
1039+ D654 23                   inc         hl
1040+ D655                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1040+ D655 7E          >                        ld       a,(hl)
1040+ D656 32 AA C0    >                        ld       (UBnkZScaled),a
1041+ D659 23                   inc         hl
1042+ D65A              PopulateXX15SignBits:
1043+ D65A              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1044+ D65A 7E                   ld          a,(hl)
1045+ D65B 4F                   ld          c,a                                 ; copy sign and visibility to c
1046+ D65C 47                   ld          b,a
1047+ D65D E6 80                and         $80                                 ; keep high 3 bits
1048+ D65F 32 A7 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1049+ D662 78                   ld          a,b
1050+ D663 E6 40                and         $40
1051+ D665 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1052+ D667 32 A9 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1053+ D66A 78                   ld          a,b
1054+ D66B E6 20                and         $20
1055+ D66D CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1056+ D66F CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1057+ D671 32 AB C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1058+ D674 79                   ld          a,c                                 ; returns a with visibility sign byte
1059+ D675 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1060+ D677 32 BB 81             ld          (varT),a                            ; and store in varT as its needed later
1061+ D67A C9                   ret
1062+ D67B
1063+ D67B              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1064+ D67B              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1065+ D67B              ;..............................................................................................................................
1066+ D67B              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1067+ D67B              LL48GetScale:
1068+ D67B 3A 91 80             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1069+ D67E 5F                   ld          e,a
1070+ D67F CD 4B D6             call        CopyNodeToXX15
1071+ D682              LL48GetVertices:
1072+ D682              LL48GetVertSignAndVisDist:
1073+ D682                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1073+ D682 BB          >                        cp      e
1073+ D683 DA C0 D6    >                        jp		c, NodeIsNotVisible
1074+ D686              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1075+ D686                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1075+ D686 23          >                    inc         hl                                  ; vertex byte#1
1075+ D687 7E          >                    ld          a,(hl)                              ;
1075+ D688 32 A0 80    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1076+ D68B 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1077+ D68C E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1078+ D68E E5                   push        hl                                  ; we need to save HL                                                        ;;;
1079+ D68F                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1079+ D68F 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
1079+ D692 ED 31       >                    add         hl,a
1079+ D694 7E          >                    ld          a,(hl)
1080+ D695 E1                   pop         hl                                  ;                                                                           ;;;
1081+ D696                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1081+ D696 A7          >                        and     a
1081+ D697 C2 C6 D6    >                        jp	    nz,NodeIsVisible
1082+ D69A              CheckFace2:                                                                                                                         ;;;
1083+ D69A 7A                   ld          a,d                                                                                                             ;;;
1084+ D69B ED 23                swapnib                                                                                                                     ;;;
1085+ D69D E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1086+ D69F                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1086+ D69F A7          >                        and     a
1086+ D6A0 C2 C6 D6    >                        jp	    nz,NodeIsVisible
1087+ D6A3              CheckFace3:                                                                                                                         ;;;
1088+ D6A3                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1088+ D6A3 23          >                    inc         hl                                  ; vertex byte#1
1088+ D6A4 7E          >                    ld          a,(hl)                              ;
1088+ D6A5 32 A0 80    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1089+ D6A8 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1090+ D6A9 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1091+ D6AB E5                   push        hl                                  ; we need to save HL                                                        ;;;
1092+ D6AC                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1092+ D6AC 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
1092+ D6AF ED 31       >                    add         hl,a
1092+ D6B1 7E          >                    ld          a,(hl)
1093+ D6B2 E1                   pop         hl                                  ;                                                                           ;;;
1094+ D6B3                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1094+ D6B3 A7          >                        and     a
1094+ D6B4 C2 C6 D6    >                        jp	    nz,NodeIsVisible
1095+ D6B7              CheckFace4:                                                                                                                         ;;;
1096+ D6B7 7A                   ld          a,d                                                                                                             ;;;
1097+ D6B8 ED 23                swapnib                                                                                                                     ;;;
1098+ D6BA E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1099+ D6BC                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1099+ D6BC A7          >                        and     a
1099+ D6BD C2 C6 D6    >                        jp	    nz,NodeIsVisible
1100+ D6C0              NodeIsNotVisible:                                                                                                                   ;;;
1101+ D6C0 01 04 00             ld          bc,4
1102+ D6C3 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1103+ D6C5                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1104+ D6C5 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1105+ D6C6              NodeIsVisible:
1106+ D6C6              LL49:
1107+ D6C6 CD 6D D5             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1108+ D6C9 C9                   ret
1109+ D6CA
1110+ D6CA
1111+ D6CA              ProjectNodeToEye:
1112+ D6CA ED 4B AA C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1113+ D6CE 79           	ld			a,c                                 ;  so no need for a negative check
1114+ D6CF 32 9F 81     	ld			(varQ),a		                    ; VarQ = z
1115+ D6D2 3A A6 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1116+ D6D5 CD D7 97     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1117+ D6D8 3A A7 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1118+ D6DB                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1118+ D6DB CB 7F       >                        bit 	7,a
1118+ D6DD C2 E8 D6    >                        jp      nz,EyeNegativeXPoint
1119+ D6E0              EyePositiveXPoint:									; x was positive result
1120+ D6E0 2E 80            ld          l,ScreenCenterX						;
1121+ D6E2 26 00            ld          h,0
1122+ D6E4 09               add         hl,bc								; hl = Screen Centre + X
1123+ D6E5 C3 EF D6         jp          EyeStoreXPoint
1124+ D6E8              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1125+ D6E8 2E 80            ld          l,ScreenCenterX
1126+ D6EA 26 00            ld          h,0
1127+ D6EC                  ClearCarryFlag
1127+ D6EC B7          >                        or a
1128+ D6ED ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1129+ D6EF              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1130+ D6EF EB               ex          de,hl
1131+ D6F0 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1132+ D6F3 FD 72 01         ld          (iy+1),d                            ; Update X Point
1133+ D6F6              EyeProcessYPoint:
1134+ D6F6 ED 4B AA C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1135+ D6FA 79           	ld			a,c
1136+ D6FB 32 9F 81     	ld			(varQ),a
1137+ D6FE 3A A8 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1138+ D701 CD D7 97     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1139+ D704 3A A9 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1140+ D707                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1140+ D707 CB 7F       >                        bit 	7,a
1140+ D709 C2 14 D7    >                        jp      nz,EyeNegativeYPoint
1141+ D70C              EyePositiveYPoint:									; Y is positive so above the centre line
1142+ D70C 2E 60            ld          l,ScreenCenterY
1143+ D70E                  ClearCarryFlag
1143+ D70E B7          >                        or a
1144+ D70F ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1145+ D711 C3 19 D7         jp          EyeStoreYPoint
1146+ D714              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1147+ D714 2E 60            ld          l,ScreenCenterY
1148+ D716 26 00            ld          h,0
1149+ D718 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1150+ D719              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1151+ D719 EB               ex          de,hl
1152+ D71A FD 73 02         ld          (iy+2),e                            ; Update Y Point
1153+ D71D FD 72 03         ld          (iy+3),d                            ; Update Y Point
1154+ D720 C9               ret
1155+ D721
1156+ D721
1157+ D721
1158+ D721              ; Pitch and roll are 2 phases
1159+ D721              ; 1 - we apply our pitch and roll to the ship position
1160+ D721              ;       x -> x + alpha * (y - alpha * x)
1161+ D721              ;       y -> y - alpha * x - beta * z
1162+ D721              ;       z -> z + beta * (y - alpha * x - beta * z)
1163+ D721              ; which can be simplified as:
1164+ D721              ;       1. K2 = y - alpha * x
1165+ D721              ;       2. z = z + beta * K2
1166+ D721              ;       3. y = K2 - beta * z
1167+ D721              ;       4. x = x + alpha * y
1168+ D721              ; 2 - we apply our patch and roll to the ship orientation
1169+ D721              ;      Roll calculations:
1170+ D721              ;
1171+ D721              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1172+ D721              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1173+ D721              ;      Pitch calculations:
1174+ D721              ;
1175+ D721              ;        nosev_y = nosev_y - beta * nosev_z_hi
1176+ D721              ;        nosev_z = nosev_z + beta * nosev_y_hi
1177+ D721
1178+ D721
1179+ D721              ; ---------------------------------------------------------------------------------------------------------------------------------
1180+ D721                          INCLUDE "./Universe/Ships/ApplyMyRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyMyRollAndPitch.asm
   1++D721
   2++D721              ; Full version
   3++D721              ; 1. K2 = y - alpha * x
   4++D721              ; 2. z = z + beta * K2
   5++D721              ; 3. y = K2 - beta * z
   6++D721              ; 4. x = x + alpha * y
   7++D721
   8++D721
   9++D721              APPequPosPlusAPP:       MACRO    Position, PositionSign
  10++D721 ~                                    push    bc
  11++D721 ~                                    ld      c,a                         ; save original value of a into c
  12++D721 ~                                    ld      a,(PositionSign)
  13++D721 ~                                    ld      b,a
  14++D721 ~                                    ld      a,c
  15++D721 ~                                    xor     b                           ; a = a xor x postition sign
  16++D721 ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  17++D721 ~            ; Signs are the same to we just add and take which ever sign
  18++D721 ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  19++D721 ~                                    ld      hl,(Position)
  20++D721 ~                                    add     hl,de
  21++D721 ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  22++D721 ~                                    ld      a,c                         ; and a = original sign as they were both the same
  23++D721 ~                                    pop     bc
  24++D721 ~                                    ret
  25++D721 ~            ; Signs are opposite so we subtract
  26++D721 ~            .MV50:                  ld      de,(varPp1)
  27++D721 ~                                    ld      hl,(Position)
  28++D721 ~                                    or      a
  29++D721 ~                                    sbc     hl,de
  30++D721 ~                                    jr      c,.MV51                     ; if the result was negative then negate result
  31++D721 ~                                    ld      a,c                         ; get back the original sign
  32++D721 ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
  33++D721 ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  34++D721 ~                                    pop     bc
  35++D721 ~                                    ret
  36++D721 ~            .MV51:                  NegHL
  37++D721 ~                                    ld      (varPp1),hl
  38++D721 ~                                    ld      a,c                         ; the original sign will still be good
  39++D721 ~                                    pop     bc
  40++D721 ~                                    ret
  41++D721                                      ENDM
  42++D721
  43++D721
  44++D721              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
  44++D721 C5          >                        push    bc
  44++D722 4F          >                        ld      c,a                         ; save original value of a into c
  44++D723 3A 22 C0    >                        ld      a,(UBnKxsgn)
  44++D726 47          >                        ld      b,a
  44++D727 79          >                        ld      a,c
  44++D728 A8          >                        xor     b                           ; a = a xor x postition sign
  44++D729 FA 3A D7    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  44++D72C             >; Signs are the same to we just add and take which ever sign
  44++D72C ED 5B A1 80 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  44++D730 2A 20 C0    >                        ld      hl,(UBnKxlo)
  44++D733 19          >                        add     hl,de
  44++D734 22 A1 80    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  44++D737 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  44++D738 C1          >                        pop     bc
  44++D739 C9          >                        ret
  44++D73A             >; Signs are opposite so we subtract
  44++D73A ED 5B A1 80 >.MV50:                  ld      de,(varPp1)
  44++D73E 2A 20 C0    >                        ld      hl,(UBnKxlo)
  44++D741 B7          >                        or      a
  44++D742 ED 52       >                        sbc     hl,de
  44++D744 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  44++D746 79          >                        ld      a,c                         ; get back the original sign
  44++D747 22 A1 80    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  44++D74A EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  44++D74C C1          >                        pop     bc
  44++D74D C9          >                        ret
  44++D74E             >.MV51:                  NegHL
  44++D74E AF          >                    xor a
  44++D74F 95          >                    sub l
  44++D750 6F          >                    ld l,a
  44++D751 9F          >                    sbc a,a
  44++D752 94          >                    sub h
  44++D753 67          >                    ld h,a
  44++D754 22 A1 80    >                        ld      (varPp1),hl
  44++D757 79          >                        ld      a,c                         ; the original sign will still be good
  44++D758 C1          >                        pop     bc
  44++D759 C9          >                        ret
  45++D75A
  46++D75A              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
  46++D75A C5          >                        push    bc
  46++D75B 4F          >                        ld      c,a                         ; save original value of a into c
  46++D75C 3A 25 C0    >                        ld      a,(UBnKysgn)
  46++D75F 47          >                        ld      b,a
  46++D760 79          >                        ld      a,c
  46++D761 A8          >                        xor     b                           ; a = a xor x postition sign
  46++D762 FA 73 D7    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  46++D765             >; Signs are the same to we just add and take which ever sign
  46++D765 ED 5B A1 80 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  46++D769 2A 23 C0    >                        ld      hl,(UBnKylo)
  46++D76C 19          >                        add     hl,de
  46++D76D 22 A1 80    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  46++D770 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  46++D771 C1          >                        pop     bc
  46++D772 C9          >                        ret
  46++D773             >; Signs are opposite so we subtract
  46++D773 ED 5B A1 80 >.MV50:                  ld      de,(varPp1)
  46++D777 2A 23 C0    >                        ld      hl,(UBnKylo)
  46++D77A B7          >                        or      a
  46++D77B ED 52       >                        sbc     hl,de
  46++D77D 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  46++D77F 79          >                        ld      a,c                         ; get back the original sign
  46++D780 22 A1 80    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  46++D783 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  46++D785 C1          >                        pop     bc
  46++D786 C9          >                        ret
  46++D787             >.MV51:                  NegHL
  46++D787 AF          >                    xor a
  46++D788 95          >                    sub l
  46++D789 6F          >                    ld l,a
  46++D78A 9F          >                    sbc a,a
  46++D78B 94          >                    sub h
  46++D78C 67          >                    ld h,a
  46++D78D 22 A1 80    >                        ld      (varPp1),hl
  46++D790 79          >                        ld      a,c                         ; the original sign will still be good
  46++D791 C1          >                        pop     bc
  46++D792 C9          >                        ret
  47++D793
  48++D793              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
  48++D793 C5          >                        push    bc
  48++D794 4F          >                        ld      c,a                         ; save original value of a into c
  48++D795 3A 28 C0    >                        ld      a,(UBnKzsgn)
  48++D798 47          >                        ld      b,a
  48++D799 79          >                        ld      a,c
  48++D79A A8          >                        xor     b                           ; a = a xor x postition sign
  48++D79B FA AC D7    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  48++D79E             >; Signs are the same to we just add and take which ever sign
  48++D79E ED 5B A1 80 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  48++D7A2 2A 26 C0    >                        ld      hl,(UBnKzlo)
  48++D7A5 19          >                        add     hl,de
  48++D7A6 22 A1 80    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  48++D7A9 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  48++D7AA C1          >                        pop     bc
  48++D7AB C9          >                        ret
  48++D7AC             >; Signs are opposite so we subtract
  48++D7AC ED 5B A1 80 >.MV50:                  ld      de,(varPp1)
  48++D7B0 2A 26 C0    >                        ld      hl,(UBnKzlo)
  48++D7B3 B7          >                        or      a
  48++D7B4 ED 52       >                        sbc     hl,de
  48++D7B6 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  48++D7B8 79          >                        ld      a,c                         ; get back the original sign
  48++D7B9 22 A1 80    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  48++D7BC EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  48++D7BE C1          >                        pop     bc
  48++D7BF C9          >                        ret
  48++D7C0             >.MV51:                  NegHL
  48++D7C0 AF          >                    xor a
  48++D7C1 95          >                    sub l
  48++D7C2 6F          >                    ld l,a
  48++D7C3 9F          >                    sbc a,a
  48++D7C4 94          >                    sub h
  48++D7C5 67          >                    ld h,a
  48++D7C6 22 A1 80    >                        ld      (varPp1),hl
  48++D7C9 79          >                        ld      a,c                         ; the original sign will still be good
  48++D7CA C1          >                        pop     bc
  48++D7CB C9          >                        ret
  49++D7CC
  50++D7CC              ; rollWork holds Alpha intermidate results
  51++D7CC 00 00 00     rollWork      DS 3
  52++D7CF              rollWorkp1    equ rollWork
  53++D7CF              rollWorkp2    equ rollWork+1
  54++D7CF              rollWorkp3    equ rollWork+2
  55++D7CF
  56++D7CF              ;----------------------------------------------------------------------------------------------------------------------------------
  57++D7CF              ; based on MVEIT part 4 of 9
  58++D7CF 3A B9 80     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
  59++D7D2 21 AD 80                             ld      hl,BET1                     ; and pitch
  60++D7D5 B6                                   or      (hl)
  61++D7D6 CA 92 D9                             jp      z,.NoRotation               ; if both zero then don't compute
  62++D7D9                                      ;break
  63++D7D9              ; P[210] = x * alph (we use P[2]P[1] later as result/256
  64++D7D9 5F                                   ld      e,a                         ; e = roll magnitude
  65++D7DA 2A 20 C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
  66++D7DD CD 20 95                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
  67++D7E0 32 A2 80                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
  68++D7E3 22 A0 80                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
  69++D7E6              ; A = Flip sign
  70++D7E6 3A BA 80                             ld      a,(ALP2)                ; flip the current roll angle alpha and xor with x sign
  71++D7E9 21 22 C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
  72++D7EC AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
  73++D7ED              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
  74++D7ED CD 5A D7                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
  75++D7F0              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
  76++D7F0 32 CE D7                             ld      (rollWorkp3),a               ; k2+3 = sign of result
  77++D7F3 22 CC D7                             ld      (rollWorkp1),hl             ; k2+1,2 = result
  78++D7F6              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
  79++D7F6 3A AD 80                             ld      a,(BET1)                    ; a = magnitude of pitch
  80++D7F9 5F                                   ld      e,a
  81++D7FA CD 20 95                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
  82++D7FD 32 A2 80                             ld      (varPp2),a                   ; save highest byte in P2
  83++D800 22 A0 80                             ld      (varP),hl
  84++D803              ; Fetch sign of previosu cal and xor with BETA inverted
  85++D803 3A CE D7                             ld      a,(rollWorkp3)
  86++D806 5F                                   ld      e,a
  87++D807 3A AE 80                             ld      a,(BET2)
  88++D80A AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
  89++D80B              ; Z = P[210] =Z + APP
  90++D80B CD 93 D7                             call    APPequZPosPlusAPP           ; MVT6
  91++D80E 32 28 C0                             ld      (UBnKzsgn),a                ; save result back into z
  92++D811 22 26 C0                             ld      (UBnKzlo),hl
  93++D814              ; A[P1]P[0] = z * Beta
  94++D814 3A AD 80                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
  95++D817 5F                                   ld      e,a
  96++D818 CD 20 95                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
  97++D81B 32 A2 80                             ld      (varPp2),a                  ; P2 = high byte of result
  98++D81E 22 A0 80                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
  99++D821              ; A xor BET2,Zsign
 100++D821 3A CE D7                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 101++D824 32 25 C0                             ld      (UBnKysgn),a                ; save result back into y
 102++D827 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 103++D828 3A AE 80                             ld      a,(BET2)                    ;
 104++D82B AB                                   xor     e                           ;
 105++D82C 5F                                   ld      e,a                         ; now xor it with z sign too
 106++D82D 3A 28 C0                             ld      a,(UBnKzsgn)                ;
 107++D830 AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 108++D831 F2 40 D8                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 109++D834 2A A1 80                             ld      hl,(varPp1)
 110++D837 ED 5B CC D7                          ld      de,(rollWorkp1)
 111++D83B B7                                   or      a
 112++D83C 19                                   add     hl,de
 113++D83D C3 5A D8                             jp      .MV44
 114++D840 2A CC D7     .MV43:                  ld      hl,(rollWorkp1)
 115++D843 ED 5B A1 80                          ld      de,(varPp1)
 116++D847 B7                                   or      a
 117++D848 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 118++D84A 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 119++D84C                                      NegHL
 119++D84C AF          >                    xor a
 119++D84D 95          >                    sub l
 119++D84E 6F          >                    ld l,a
 119++D84F 9F          >                    sbc a,a
 119++D850 94          >                    sub h
 119++D851 67          >                    ld h,a
 120++D852 3A 25 C0                             ld      a,(UBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and suns are sign + 23 bit xpos
 121++D855 EE 80                                xor     SignOnly8Bit
 122++D857 32 25 C0                             ld      (UBnKysgn),a
 123++D85A              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 124++D85A 22 23 C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 125++D85D 3A B9 80                             ld      a,(ALP1)                    ; get roll magnitude
 126++D860 5F                                   ld      e,a
 127++D861 2A 23 C0                             ld      hl,(UBnKylo)
 128++D864 CD 20 95                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 129++D867 32 A2 80                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 130++D86A 22 A0 80                             ld      (varP),hl
 131++D86D 3A BB 80                             ld      a,(ALP2FLIP)
 132++D870 5F                                   ld      e,a
 133++D871 3A 25 C0                             ld      a,(UBnKysgn)
 134++D874 AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 135++D875 CD 21 D7                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 136++D878 32 22 C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
 137++D87B 22 20 C0                             ld      (UBnKxlo),hl
 138++D87E                                      ;break
 139++D87E                                      ; if its not a sun then apply to local orientation
 140++D87E                                      ApplyMyRollToVector ALPHA, UBnkrotmatNosevX, UBnkrotmatNosevY   ; ApplyMyRollToNosev:
 140++D87E             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 140++D87E 3A B8 80    >                        ld       a,(ALPHA)
 140++D881 32 9F 81    >                        ld       (varQ),a
 140++D884             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
 140++D884 2A 37 C0    >                        ld       hl,(UBnkrotmatNosevY)
 140++D887 22 A0 81    >                        ld       (varR),hl
 140++D88A             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
 140++D88A 3A 35 C0    >                        ld       a,(UBnkrotmatNosevX)
 140++D88D 32 A0 80    >                        ld       (varP),a
 140++D890 3A 36 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
 140++D893 EE 80       >                        xor $80                             ;
 140++D895 CD A5 94    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 140++D898 ED 53 37 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 140++D89C             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
 140++D89C 2A 35 C0    >                        ld       hl,(UBnkrotmatNosevX)
 140++D89F 22 A0 81    >                        ld       (varR),hl
 140++D8A2 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
 140++D8A5 CD A5 94    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 140++D8A8 ED 53 35 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 141++D8AC                                      ApplyMyRollToVector ALPHA, UBnkrotmatSidevX, UBnkrotmatSidevY   ; ApplyMyRollToSidev:
 141++D8AC             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 141++D8AC 3A B8 80    >                        ld       a,(ALPHA)
 141++D8AF 32 9F 81    >                        ld       (varQ),a
 141++D8B2             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
 141++D8B2 2A 2B C0    >                        ld       hl,(UBnkrotmatSidevY)
 141++D8B5 22 A0 81    >                        ld       (varR),hl
 141++D8B8             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
 141++D8B8 3A 29 C0    >                        ld       a,(UBnkrotmatSidevX)
 141++D8BB 32 A0 80    >                        ld       (varP),a
 141++D8BE 3A 2A C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
 141++D8C1 EE 80       >                        xor $80                             ;
 141++D8C3 CD A5 94    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 141++D8C6 ED 53 2B C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 141++D8CA             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
 141++D8CA 2A 29 C0    >                        ld       hl,(UBnkrotmatSidevX)
 141++D8CD 22 A0 81    >                        ld       (varR),hl
 141++D8D0 3A 2C C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
 141++D8D3 CD A5 94    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 141++D8D6 ED 53 29 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 142++D8DA                                      ApplyMyRollToVector ALPHA, UBnkrotmatRoofvX, UBnkrotmatRoofvY   ; ApplyMyRollToRoofv:
 142++D8DA             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 142++D8DA 3A B8 80    >                        ld       a,(ALPHA)
 142++D8DD 32 9F 81    >                        ld       (varQ),a
 142++D8E0             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
 142++D8E0 2A 31 C0    >                        ld       hl,(UBnkrotmatRoofvY)
 142++D8E3 22 A0 81    >                        ld       (varR),hl
 142++D8E6             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
 142++D8E6 3A 2F C0    >                        ld       a,(UBnkrotmatRoofvX)
 142++D8E9 32 A0 80    >                        ld       (varP),a
 142++D8EC 3A 30 C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
 142++D8EF EE 80       >                        xor $80                             ;
 142++D8F1 CD A5 94    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 142++D8F4 ED 53 31 C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 142++D8F8             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
 142++D8F8 2A 2F C0    >                        ld       hl,(UBnkrotmatRoofvX)
 142++D8FB 22 A0 81    >                        ld       (varR),hl
 142++D8FE 3A 32 C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
 142++D901 CD A5 94    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 142++D904 ED 53 2F C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 143++D908                                      ApplyMyRollToVector BETA, UBnkrotmatNosevZ, UBnkrotmatNosevY    ; ApplyMyPitchToNosev:
 143++D908             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 143++D908 3A AB 80    >                        ld       a,(BETA)
 143++D90B 32 9F 81    >                        ld       (varQ),a
 143++D90E             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
 143++D90E 2A 37 C0    >                        ld       hl,(UBnkrotmatNosevY)
 143++D911 22 A0 81    >                        ld       (varR),hl
 143++D914             >                        ldCopyByte  UBnkrotmatNosevZ, varP           ; set P to nosevX lo (may be redundant)
 143++D914 3A 39 C0    >                        ld       a,(UBnkrotmatNosevZ)
 143++D917 32 A0 80    >                        ld       (varP),a
 143++D91A 3A 3A C0    >                        ld a,(UBnkrotmatNosevZ+1)                    ; Set A = -nosev_x_hi
 143++D91D EE 80       >                        xor $80                             ;
 143++D91F CD A5 94    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 143++D922 ED 53 37 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 143++D926             >                        ldCopy2Byte UBnkrotmatNosevZ, varR           ; Set (S R) = nosev_x
 143++D926 2A 39 C0    >                        ld       hl,(UBnkrotmatNosevZ)
 143++D929 22 A0 81    >                        ld       (varR),hl
 143++D92C 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
 143++D92F CD A5 94    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 143++D932 ED 53 39 C0 >                        ld  (UBnkrotmatNosevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 144++D936                                      ApplyMyRollToVector BETA, UBnkrotmatSidevZ, UBnkrotmatSidevY    ; ApplyMyPitchToSidev:
 144++D936             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 144++D936 3A AB 80    >                        ld       a,(BETA)
 144++D939 32 9F 81    >                        ld       (varQ),a
 144++D93C             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
 144++D93C 2A 2B C0    >                        ld       hl,(UBnkrotmatSidevY)
 144++D93F 22 A0 81    >                        ld       (varR),hl
 144++D942             >                        ldCopyByte  UBnkrotmatSidevZ, varP           ; set P to nosevX lo (may be redundant)
 144++D942 3A 2D C0    >                        ld       a,(UBnkrotmatSidevZ)
 144++D945 32 A0 80    >                        ld       (varP),a
 144++D948 3A 2E C0    >                        ld a,(UBnkrotmatSidevZ+1)                    ; Set A = -nosev_x_hi
 144++D94B EE 80       >                        xor $80                             ;
 144++D94D CD A5 94    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 144++D950 ED 53 2B C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 144++D954             >                        ldCopy2Byte UBnkrotmatSidevZ, varR           ; Set (S R) = nosev_x
 144++D954 2A 2D C0    >                        ld       hl,(UBnkrotmatSidevZ)
 144++D957 22 A0 81    >                        ld       (varR),hl
 144++D95A 3A 2C C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
 144++D95D CD A5 94    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 144++D960 ED 53 2D C0 >                        ld  (UBnkrotmatSidevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 145++D964                                      ApplyMyRollToVector BETA, UBnkrotmatRoofvZ, UBnkrotmatRoofvY    ; ApplyMyPitchToRoofv:
 145++D964             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 145++D964 3A AB 80    >                        ld       a,(BETA)
 145++D967 32 9F 81    >                        ld       (varQ),a
 145++D96A             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
 145++D96A 2A 31 C0    >                        ld       hl,(UBnkrotmatRoofvY)
 145++D96D 22 A0 81    >                        ld       (varR),hl
 145++D970             >                        ldCopyByte  UBnkrotmatRoofvZ, varP           ; set P to nosevX lo (may be redundant)
 145++D970 3A 33 C0    >                        ld       a,(UBnkrotmatRoofvZ)
 145++D973 32 A0 80    >                        ld       (varP),a
 145++D976 3A 34 C0    >                        ld a,(UBnkrotmatRoofvZ+1)                    ; Set A = -nosev_x_hi
 145++D979 EE 80       >                        xor $80                             ;
 145++D97B CD A5 94    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 145++D97E ED 53 31 C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 145++D982             >                        ldCopy2Byte UBnkrotmatRoofvZ, varR           ; Set (S R) = nosev_x
 145++D982 2A 33 C0    >                        ld       hl,(UBnkrotmatRoofvZ)
 145++D985 22 A0 81    >                        ld       (varR),hl
 145++D988 3A 32 C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
 145++D98B CD A5 94    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 145++D98E ED 53 33 C0 >                        ld  (UBnkrotmatRoofvZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 146++D992 3A 99 81     .NoRotation:            ld      a,(DELTA)                   ; get speed
 147++D995 16 00                                ld      d,0
 148++D997 5F                                   ld      e,a                         ; de = speed in low byte
 149++D998 2A 26 C0                             ld      hl,(UBnKzlo)                ; hl = z position
 150++D99B 3A 28 C0                             ld      a,(UBnKzsgn)                ; b = z sign
 151++D99E 47                                   ld      b,a                         ;
 152++D99F 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 153++D9A1 CD 92 92                             call    ADDHLDESignBC               ; update speed
 154++D9A4 22 26 C0                             ld      (UBnKzlo),hl                ; write back to zpos
 155++D9A7 32 28 C0                             ld      (UBnKzsgn),a                ;
 156++D9AA C9                                   ret
# file closed: ././Universe/Ships/ApplyMyRollAndPitch.asm
1181+ D9AB                          INCLUDE "./Universe/Ships/ApplyShipRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyShipRollAndPitch.asm
   1++D9AB
   2++D9AB              ; A = value for rotation
   3++D9AB              ; HL = address of value for rotation
   4++D9AB              ; TODO logic for permanent spin, I thik this it -127??
   5++D9AB              SplitAndDampenZ:        MACRO
   6++D9AB ~                                    ld      b,a
   7++D9AB ~                                    and     SignMask8Bit            ; if abs (Rotz) is 0 then skip
   8++D9AB ~                                    jp      z,.ProcessRoll
   9++D9AB ~                                    ld      a,b                     ; b = rotate counter S7
  10++D9AB ~                                    and     SignOnly8Bit            ; a = sign rat2 = c = sign
  11++D9AB ~                                    ld      c,a                     ; .
  12++D9AB ~                                    ld      (univRAT2),a            ; .
  13++D9AB ~                                    ld      a,b                     ; a = abs b
  14++D9AB ~                                    and     SignMask8Bit            ; .
  15++D9AB ~                                    dec     a                       ; dampen
  16++D9AB ~                                    ld      (univRAT2Val),a
  17++D9AB ~                                    or      c                       ; make S7 again after dampening
  18++D9AB ~                                    ld      (UBnKRotZCounter),a
  19++D9AB                                      ENDM
  20++D9AB
  21++D9AB              SplitAndDampenX:        MACRO
  22++D9AB ~                                    ld      b,a
  23++D9AB ~                                    and     SignMask8Bit            ; exit early is ABS = 0
  24++D9AB ~                                    and     a                       ; .
  25++D9AB ~                                    ret     z                       ; .
  26++D9AB ~                                    ld      a,b                     ; a = rotate counter S7
  27++D9AB ~                                    and     SignOnly8Bit            ; rat2 = c = sign
  28++D9AB ~                                    ld      c,a                     ; .
  29++D9AB ~                                    ld      (univRAT2),a            ; .
  30++D9AB ~                                    ld      a,b                     ; a = abs b
  31++D9AB ~                                    and     SignMask8Bit            ; .
  32++D9AB ~                                    dec     a                       ; dampen
  33++D9AB ~                                    ld      (univRAT2Val),a
  34++D9AB ~                                    or      c                       ; make S7 again after dampening
  35++D9AB ~                                    ld      (UBnKRotXCounter),a
  36++D9AB                                      ENDM
  37++D9AB
  38++D9AB
  39++D9AB              ;----------------------------------------------------------------------------------------------------------------------------------
  40++D9AB              ; based on MVEIT part 4 of 9
  41++D9AB              ; x and z counters are proper 2's c values
  42++D9AB 3A 49 C0     ApplyShipRollAndPitch:  ld      a,(UBnKRotZCounter)
  43++D9AE FE FF                                cp      $FF
  44++D9B0 28 18                                jr      z,.PitchSAxes
  45++D9B2                                      SplitAndDampenZ
  45++D9B2 47          >                        ld      b,a
  45++D9B3 E6 7F       >                        and     SignMask8Bit            ; if abs (Rotz) is 0 then skip
  45++D9B5 CA F7 D9    >                        jp      z,.ProcessRoll
  45++D9B8 78          >                        ld      a,b                     ; b = rotate counter S7
  45++D9B9 E6 80       >                        and     SignOnly8Bit            ; a = sign rat2 = c = sign
  45++D9BB 4F          >                        ld      c,a                     ; .
  45++D9BC 32 4F C0    >                        ld      (univRAT2),a            ; .
  45++D9BF 78          >                        ld      a,b                     ; a = abs b
  45++D9C0 E6 7F       >                        and     SignMask8Bit            ; .
  45++D9C2 3D          >                        dec     a                       ; dampen
  45++D9C3 32 50 C0    >                        ld      (univRAT2Val),a
  45++D9C6 B1          >                        or      c                       ; make S7 again after dampening
  45++D9C7 32 49 C0    >                        ld      (UBnKRotZCounter),a
  46++D9CA                                      ;ld      a,(UBnKRotZCounter)
  47++D9CA 21 2F C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  48++D9CD 22 85 80                             ld	    (varAxis1),hl
  49++D9D0 21 35 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  50++D9D3 22 87 80                             ld	    (varAxis2),hl
  51++D9D6 CD 43 DA                             call    MVS5RotateAxis
  52++D9D9 21 31 C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  53++D9DC 22 85 80                             ld	    (varAxis1),hl
  54++D9DF 21 37 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  55++D9E2 22 87 80                             ld	    (varAxis2),hl
  56++D9E5 CD 43 DA                             call    MVS5RotateAxis
  57++D9E8 21 33 C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  58++D9EB 22 85 80                             ld	    (varAxis1),hl
  59++D9EE 21 39 C0                             ld	    hl,UBnkrotmatNosevZ
  60++D9F1 22 87 80                             ld	    (varAxis2),hl
  61++D9F4 CD 43 DA                             call    MVS5RotateAxis
  62++D9F7 3A 48 C0     .ProcessRoll:           ld      a,(UBnKRotXCounter)
  63++D9FA FE FF                                cp      $FF
  64++D9FC 28 17                                jr      z,.RollSAxis
  65++D9FE                                      SplitAndDampenX
  65++D9FE 47          >                        ld      b,a
  65++D9FF E6 7F       >                        and     SignMask8Bit            ; exit early is ABS = 0
  65++DA01 A7          >                        and     a                       ; .
  65++DA02 C8          >                        ret     z                       ; .
  65++DA03 78          >                        ld      a,b                     ; a = rotate counter S7
  65++DA04 E6 80       >                        and     SignOnly8Bit            ; rat2 = c = sign
  65++DA06 4F          >                        ld      c,a                     ; .
  65++DA07 32 4F C0    >                        ld      (univRAT2),a            ; .
  65++DA0A 78          >                        ld      a,b                     ; a = abs b
  65++DA0B E6 7F       >                        and     SignMask8Bit            ; .
  65++DA0D 3D          >                        dec     a                       ; dampen
  65++DA0E 32 50 C0    >                        ld      (univRAT2Val),a
  65++DA11 B1          >                        or      c                       ; make S7 again after dampening
  65++DA12 32 48 C0    >                        ld      (UBnKRotXCounter),a
  66++DA15 21 2F C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  67++DA18 22 85 80                             ld	    (varAxis1),hl
  68++DA1B 21 29 C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  69++DA1E 22 87 80                             ld	    (varAxis2),hl
  70++DA21 CD 43 DA                             call    MVS5RotateAxis
  71++DA24 21 31 C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  72++DA27 22 85 80                             ld	    (varAxis1),hl
  73++DA2A 21 2B C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  74++DA2D 22 87 80                             ld	    (varAxis2),hl
  75++DA30 CD 43 DA                             call    MVS5RotateAxis
  76++DA33 21 33 C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  77++DA36 22 85 80                             ld	    (varAxis1),hl
  78++DA39 21 2D C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  79++DA3C 22 87 80                             ld	    (varAxis2),hl
  80++DA3F CD 43 DA                             call    MVS5RotateAxis
  81++DA42 C9                                   ret
  82++DA43
  83++DA43
  84++DA43
  85++DA43              ; Roate around axis
  86++DA43              ; varAxis1 and varAxis2 point to the address of the axis to rotate
  87++DA43              ; so the axis x1 points to roofv  x , y or z
  88++DA43              ;             x2           nosev or sidev  x, y or z
  89++DA43              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
  90++DA43              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
  91++DA43              ; var RAT2 gives direction
  92++DA43              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
  93++DA43              ;-Set up S R -----------------------------------------
  94++DA43              ; optimised we don't deal with sign here just the value of roof axis / 512
  95++DA43 2A 85 80     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
  96++DA46 5E                                   ld      e,(hl)
  97++DA47 23                                   inc     hl
  98++DA48 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
  99++DA49 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 100++DA4A 7C                                   ld      a,h
 101++DA4B E6 80                                and     SignOnly8Bit
 102++DA4D FD 67                                ld      iyh,a           ; iyh = sign Axis1
 103++DA4F 7C                                   ld      a,h
 104++DA50 E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 105++DA52 CB 3F                                srl     a               ; a = Axis1/2
 106++DA54 5F                                   ld      e,a             ;
 107++DA55 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 108++DA57 57                                   ld      d,a             ; de = signed Axis1 / 512
 109++DA58 B7                                   or      a               ; clear carry
 110++DA59 CD 84 93                             call    subHLDES15      ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 111++DA5C              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 112++DA5C E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 113++DA5D 7D                                   ld      a,l
 114++DA5E 32 A0 81                             ld      (varR),a
 115++DA61 7C                                   ld      a,h
 116++DA62 32 A1 81                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 117++DA65              ;-calculate roofv latter half of calc
 118++DA65 2A 87 80                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 119++DA68 5E                                   ld      e,(hl)
 120++DA69 23                                   inc     hl
 121++DA6A 56                                   ld      d,(hl)          ; de = value of roof axis
 122++DA6B 7A                                   ld      a,d
 123++DA6C E6 80                                and     SignOnly8Bit
 124++DA6E FD 67                                ld      iyh,a           ; save sign
 125++DA70 7A                                   ld      a,d
 126++DA71 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 127++DA73 57                                   ld      d,a             ; de = abs (nosev)
 128++DA74                                      ShiftDERight1
 128++DA74 CB 3A       >			   srl d
 128++DA76 CB 1B       >			   rr  e
 129++DA78                                      ShiftDERight1
 129++DA78 CB 3A       >			   srl d
 129++DA7A CB 1B       >			   rr  e
 130++DA7C                                      ShiftDERight1
 130++DA7C CB 3A       >			   srl d
 130++DA7E CB 1B       >			   rr  e
 131++DA80                                      ShiftDERight1           ; de = nosev /16 unsigned
 131++DA80 CB 3A       >			   srl d
 131++DA82 CB 1B       >			   rr  e
 132++DA84 3A 4F C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 133++DA87 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 134++DA89 E6 80                                and     SignOnly8Bit
 135++DA8B B2                                   or      d
 136++DA8C 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 137++DA8D              ;;; ld      a,e
 138++DA8D              ;;;     or      iyh
 139++DA8D              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 140++DA8D              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 141++DA8D E1                                   pop     hl              ; get back RS POP ID 1
 142++DA8E                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 143++DA8E              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 144++DA8E CD B5 92                             call    ADDHLDESignedV4 ; do add using hl and de
 145++DA91 E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 146++DA92              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 147++DA92              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 148++DA92 2A 87 80                             ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 149++DA95 5E                                   ld      e,(hl)
 150++DA96 23                                   inc     hl
 151++DA97 56                                   ld      d,(hl)
 152++DA98 EB                                   ex      de,hl
 153++DA99 7C                                   ld      a,h
 154++DA9A E6 80                                and     $80
 155++DA9C FD 67                                ld      iyh,a
 156++DA9E 7C                                   ld      a,h
 157++DA9F E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
 158++DAA1 CB 3F                                srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 159++DAA3 5F                                   ld      e,a
 160++DAA4 FD 7C                                ld      a,iyh
 161++DAA6 57                                   ld      d,a
 162++DAA7 B7                                   or      a               ; clear carry
 163++DAA8 CD 84 93                             call    subHLDES15
 164++DAAB              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 165++DAAB E5                                   push    hl              ; save hl on stack  PUSH ID 3
 166++DAAC 7D                                   ld      a,l
 167++DAAD 32 A0 80                             ld      (varP),a        ; p = low of resuilt
 168++DAB0 7C                                   ld      a,h
 169++DAB1 E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
 170++DAB3 32 BB 81                             ld      (varT),a        ; t = high of result
 171++DAB6              ;-- Set up TQ
 172++DAB6 2A 85 80                             ld      hl,(varAxis1)   ; now work on roofv axis / 16
 173++DAB9              ;   ld      hl,(varAxis2)   ; work on nosev again
 174++DAB9 5E                                   ld      e,(hl)
 175++DABA 23                                   inc     hl
 176++DABB 56                                   ld      d,(hl)
 177++DABC 7A                                   ld      a,d
 178++DABD E6 80                                and     $80
 179++DABF FD 67                                ld      iyh,a           ; save sign
 180++DAC1 7A                                   ld      a,d
 181++DAC2 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 182++DAC4 57                                   ld      d,a             ; de = abs (nosev)
 183++DAC5                                      ShiftDERight1
 183++DAC5 CB 3A       >			   srl d
 183++DAC7 CB 1B       >			   rr  e
 184++DAC9                                      ShiftDERight1
 184++DAC9 CB 3A       >			   srl d
 184++DACB CB 1B       >			   rr  e
 185++DACD                                      ShiftDERight1
 185++DACD CB 3A       >			   srl d
 185++DACF CB 1B       >			   rr  e
 186++DAD1                                      ShiftDERight1           ; de = nosev /16 unsigned
 186++DAD1 CB 3A       >			   srl d
 186++DAD3 CB 1B       >			   rr  e
 187++DAD5 3A 4F C0                             ld      a,(univRAT2)
 188++DAD8 FD AC                                xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 189++DADA E6 80                                and     $80
 190++DADC B2                                   or      d
 191++DADD 57                                   ld      d,a
 192++DADE              ;;; ld      a,e
 193++DADE              ;;;     or      iyh
 194++DADE              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 195++DADE E1                                   pop     hl              ; get back RS   POP ID 3
 196++DADF              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 197++DADF CD 84 93                             call    subHLDES15 ; do add using hl and de
 198++DAE2              ;-- Update nosev ---------------------------------------
 199++DAE2 EB                                   ex      de,hl           ; save hl to de
 200++DAE3 2A 87 80                             ld      hl,(varAxis2)
 201++DAE6 73                                   ld      (hl),e
 202++DAE7 23                                   inc     hl
 203++DAE8 72                                   ld      (hl),d          ; copy result into nosev
 204++DAE9              ;-- Update roofv ---------------------------------------
 205++DAE9 D1                                   pop     de              ; get calc saved on stack POP ID 2
 206++DAEA 2A 85 80                             ld      hl,(varAxis1)
 207++DAED 73                                   ld      (hl),e
 208++DAEE 23                                   inc     hl
 209++DAEF 72                                   ld      (hl),d          ; copy result into nosev
 210++DAF0 C9                                   ret
 211++DAF1
 212++DAF1
# file closed: ././Universe/Ships/ApplyShipRollAndPitch.asm
1182+ DAF1                          INCLUDE "./Universe/Ships/ApplyShipSpeed.asm"
# file opened: ././Universe/Ships/ApplyShipSpeed.asm
   1++DAF1
   2++DAF1
   3++DAF1              ;AddSpeedToVert:         MACRO   vertex
   4++DAF1              ;                        ld      hl,(vertex)
   5++DAF1              ;                        ld      a,(vertex+2)
   6++DAF1              ;                        ld      b,a
   7++DAF1              ;                        call    AHLEquBHLaddCDE
   8++DAF1              ;                        ld      (vertex),hl
   9++DAF1              ;                        ld      (vertex+2),a
  10++DAF1              ;                        ENDM
  11++DAF1
  12++DAF1
  13++DAF1              ; ---------------------------------------------------------------------------------------------------------------------------------
  14++DAF1 3A 46 C0     ApplyShipSpeed:         ld      a,(UBnKSpeed)                   ; get speed * 4
  15++DAF4 FE 00                                cp      0
  16++DAF6 C8                                   ret     z
  17++DAF7 CB 27                                sla     a
  18++DAF9 CB 27                                sla     a
  19++DAFB FD 6F                                ld      iyl,a                           ; save pre calculated speed
  20++DAFD              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatNosevX     ; e =  ABS (nosev x hi) c = sign
  20++DAFD 5F          >                        ld      e,a
  20++DAFE 2A 35 C0    >                        ld      hl,(UBnkrotmatNosevX)
  20++DB01 7C          >                        ld      a,h
  20++DB02             >                        ClearSignBitA
  20++DB02 E6 7F       >                        and     SignMask8Bit
  20++DB04 57          >                        ld      d,a
  20++DB05 ED 30       >                        mul     de
  20++DB07 7C          >                        ld      a,h
  20++DB08             >                        SignBitOnlyA
  20++DB08 E6 80       >                        and     SignOnly8Bit
  20++DB0A 47          >                        ld      b,a;ld      c,a
  20++DB0B 62          >                        ld      h,d;ld      e,d
  20++DB0C 0E 00       >                        ld      c,0;ld      d,0
  21++DB0E              .AddSpeedToX:           AddSpeedToVert UBnKxlo
  21++DB0E ED 5B 21 C0 >                        ld      de,(UBnKxlo+1)
  21++DB12 3A 20 C0    >                        ld      a,(UBnKxlo)
  21++DB15 6F          >                        ld      l,a
  21++DB16 CD 10 93    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  21++DB19 7D          >                        ld      a,l
  21++DB1A 32 20 C0    >                        ld      (UBnKxlo),a
  21++DB1D ED 53 21 C0 >                        ld      (UBnKxlo+1),de
  22++DB21              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatNosevY
  22++DB21 FD 5D       >                        ld      e,iyl
  22++DB23 2A 37 C0    >                        ld      hl,(UBnkrotmatNosevY)
  22++DB26 7C          >                        ld      a,h
  22++DB27             >                        ClearSignBitA
  22++DB27 E6 7F       >                        and     SignMask8Bit
  22++DB29 57          >                        ld      d,a
  22++DB2A ED 30       >                        mul     de
  22++DB2C 7C          >                        ld      a,h
  22++DB2D             >                        SignBitOnlyA
  22++DB2D E6 80       >                        and     SignOnly8Bit
  22++DB2F 47          >                        ld      b,a;ld      c,a
  22++DB30 62          >                        ld      h,d;ld      e,d
  22++DB31 0E 00       >                        ld      c,0;ld      d,0
  23++DB33              .AddSpeedToY:           AddSpeedToVert UBnKylo
  23++DB33 ED 5B 24 C0 >                        ld      de,(UBnKylo+1)
  23++DB37 3A 23 C0    >                        ld      a,(UBnKylo)
  23++DB3A 6F          >                        ld      l,a
  23++DB3B CD 10 93    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  23++DB3E 7D          >                        ld      a,l
  23++DB3F 32 23 C0    >                        ld      (UBnKylo),a
  23++DB42 ED 53 24 C0 >                        ld      (UBnKylo+1),de
  24++DB46              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatNosevZ
  24++DB46 FD 5D       >                        ld      e,iyl
  24++DB48 2A 39 C0    >                        ld      hl,(UBnkrotmatNosevZ)
  24++DB4B 7C          >                        ld      a,h
  24++DB4C             >                        ClearSignBitA
  24++DB4C E6 7F       >                        and     SignMask8Bit
  24++DB4E 57          >                        ld      d,a
  24++DB4F ED 30       >                        mul     de
  24++DB51 7C          >                        ld      a,h
  24++DB52             >                        SignBitOnlyA
  24++DB52 E6 80       >                        and     SignOnly8Bit
  24++DB54 47          >                        ld      b,a;ld      c,a
  24++DB55 62          >                        ld      h,d;ld      e,d
  24++DB56 0E 00       >                        ld      c,0;ld      d,0
  25++DB58              .AddSpeedToZ:           AddSpeedToVert UBnKzlo
  25++DB58 ED 5B 27 C0 >                        ld      de,(UBnKzlo+1)
  25++DB5C 3A 26 C0    >                        ld      a,(UBnKzlo)
  25++DB5F 6F          >                        ld      l,a
  25++DB60 CD 10 93    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  25++DB63 7D          >                        ld      a,l
  25++DB64 32 26 C0    >                        ld      (UBnKzlo),a
  25++DB67 ED 53 27 C0 >                        ld      (UBnKzlo+1),de
  26++DB6B C9                                   ret
  27++DB6C
# file closed: ././Universe/Ships/ApplyShipSpeed.asm
1183+ DB6C                          INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++DB6C
   2++DB6C              ; ---------------------------------------------------------------------------------------------------------------------------------
   3++DB6C 00           DrawLinesCounter		db	0
   4++DB6D              ; Initial tests look OK
   5++DB6D              LL155:;
   6++DB6D              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   7++DB6D                    ;break                                                                             ; ObjectInFront:
   8++DB6D 3E 65        DrawLines:              ld	a,$65 ; DEBUG
   9++DB6F FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
  10++DB71 3A 22 C3                             ld		a,(UbnkLineArrayLen)			; get number of lines
  11++DB74                                      ReturnIfAIsZero   						; No lines then bail out.
  11++DB74 A7          >                        and     a
  11++DB75 C8          >                        ret     z
  12++DB76 FD 67                                ld		iyh,a			                ; number of lines still to draw
  13++DB78 21 30 C2                             ld		hl,UbnkLineArray
  14++DB7B              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  15++DB7B 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  16++DB7C 23                                   inc     hl
  17++DB7D 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  18++DB7E 23                                   inc     hl
  19++DB7F 5E                                   ld      e,(hl)                          ; c = varX1
  20++DB80 23                                   inc     hl
  21++DB81 56                                   ld      d,(hl)                          ; de = point2 Y,X
  22++DB82 23                                   inc     hl
  23++DB83 E5                                   push	hl
  24++DB84 FD E5                                push    iy
  25++DB86 60                                   ld      h,b
  26++DB87 69                                   ld      l,c
  27++DB88                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  28++DB88 FD 7D                                ld		a,iyl							; get colour back before calling line draw
  29++DB8A                                      MMUSelectLayer2
  29++DB8A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  30++DB8E CD 06 ED                             call    LineHLtoDE
  31++DB91 FD E1                                pop     iy
  32++DB93 E1                                   pop	    hl
  33++DB94 FD 25                                dec     iyh
  34++DB96 20 E3                                jr		nz,DrawXX19ClippedLines
  35++DB98 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  36++DB99
# file closed: ././ModelRender/DrawLines.asm
1184+ DB99              ; ---------------------------------------------------------------------------------------------------------------------------------
1185+ DB99
1186+ DB99              ; DIot seem to lawyas have Y = 0???
1187+ DB99              ProcessDot:            ; break
1188+ DB99 CD D2 CD                             call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1189+ DB9C CD 30 7A                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1190+ DB9F CD 8A D0                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1191+ DBA2 CD 57 CF                             call    InverseXX16                      ;#11; Invert rotation matrix
1192+ DBA5 21 00 00                             ld      hl,0
1193+ DBA8 22 A6 C0                             ld      (UBnkXScaled),hl
1194+ DBAB 22 A8 C0                             ld      (UBnkYScaled),hl
1195+ DBAE 22 AA C0                             ld      (UBnkZScaled),hl
1196+ DBB1 AF                                   xor     a
1197+ DBB2 CD 56 79                             call    XX12EquNodeDotOrientation
1198+ DBB5 CD FB CD                             call    TransposeXX12ByShipToXX15
1199+ DBB8 CD 78 CE                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1200+ DBBB FD 21 F0 C0                          ld      iy,UBnkNodeArray
1201+ DBBF CD CA D6                             call    ProjectNodeToEye
1202+ DBC2 C9                                   ret
1203+ DBC3
1204+ DBC3              ; .....................................................
1205+ DBC3              ; Process Nodes does the following:
1206+ DBC3              ; for each node:
1207+ DBC3              ;     see if node >
1208+ DBC3 00           PNXX20DIV6          DB      0
1209+ DBC4 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1210+ DBC6 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1211+ DBC8 00           PNLASTNORM          DB      0
1212+ DBC9              ProcessNodes:           ZeroA
1212+ DBC9 AF          >                        xor a
1213+ DBCA 32 22 C3                             ld      (UbnkLineArrayLen),a
1214+ DBCD CD D2 CD                             call    CopyRotmatToTransMat ; CopyRotToTransMacro                      ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1215+ DBD0 CD 30 7A                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1216+ DBD3 CD 8A D0                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1217+ DBD6 CD 57 CF                             call    InverseXX16                      ;#11; Invert rotation matrix
1218+ DBD9 21 49 C3                             ld      hl,UBnkHullVerticies
1219+ DBDC 3A 37 C3                             ld      a,(VertexCtX6Addr)               ; get Hull byte#9 = number of vertices *6                                   ;;;
1220+ DBDF 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1221+ DBE0 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1222+ DBE1 16 06                                ld      d,6
1223+ DBE3 CD 07 98                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1224+ DBE6 41                                   ld      b,c                              ; c = number of vertices
1225+ DBE7 FD 21 F0 C0                          ld      iy,UBnkNodeArray
1226+ DBEB              LL48:
1227+ DBEB C5           PointLoop:	            push	bc                                  ; save counters
1228+ DBEC E5                                   push	hl                                  ; save verticies list pointer
1229+ DBED FD E5                                push	iy                                  ; save Screen plot array pointer
1230+ DBEF 78                                   ld      a,b
1231+ DBF0                                      ;break
1232+ DBF0 CD 4B D6                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
1233+ DBF3 3A A7 C0                             ld		a,(UBnkXScaledSign)
1234+ DBF6 CD 56 79                             call    XX12EquNodeDotOrientation
1235+ DBF9 CD FB CD                             call    TransposeXX12ByShipToXX15
1236+ DBFC CD 78 CE                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1237+ DBFF FD E1                                pop		iy                                  ; get back screen plot array pointer
1238+ DC01 CD CA D6                             call    ProjectNodeToEye                     ; set up screen plot list entry
1239+ DC04                 ; ld      hl,UbnkLineArrayLen
1240+ DC04                ;  inc     (hl)                                ; another node done
1241+ DC04 FD E5        ReadyForNextPoint:      push	iy                                  ; copy screen plot pointer to hl
1242+ DC06 E1                                   pop		hl
1243+ DC07 3E 04                                ld		a,4
1244+ DC09 ED 31                                add		hl,a
1245+ DC0B E5                                   push	hl                                  ; write it back at iy + 4
1246+ DC0C FD E1                                pop		iy								    ; and put it in iy again
1247+ DC0E E1                                   pop		hl                                  ; get hl back as vertex list
1248+ DC0F 3E 06                                ld		a,6
1249+ DC11 ED 31                                add 	hl,a                                ; and move to next vertex
1250+ DC13 C1                                   pop		bc                                  ; get counter back
1251+ DC14 10 D5                                djnz	PointLoop
1252+ DC16              ; ......................................................
1253+ DC16                                      ClearCarryFlag
1253+ DC16 B7          >                        or a
1254+ DC17 C9                                   ret
1255+ DC18              ; ...........................................................
1256+ DC18 CD CF D2     ProcessShip:            call    CheckVisible                ; checks for z -ve and outside view frustrum, sets up flags for next bit
1257+ DC1B 3A 54 C0     .IsItADot:              ld      a,(UBnkaiatkecm)
1258+ DC1E E6 68                                and     ShipIsVisible | ShipIsDot | ShipExploding  ; first off set if we can draw or need to update explosion
1259+ DC20 C8                                   ret     z                           ; if none of these flags are set we can fast exit
1260+ DC21                                      JumpOnABitSet ShipExplodingBitNbr, .ExplodingCloud; we always do the cloud processing even if invisible
1260+ DC21 CB 6F       >                        bit 	ShipExplodingBitNbr, a
1260+ DC23 C2 5F DC    >                        jp      nz,.ExplodingCloud
1261+ DC26              ;............................................................
1262+ DC26              .DetermineDrawType:     ReturnOnBitClear    a, ShipIsVisibleBitNbr          ; if its not visible exit early
1262+ DC26 CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1262+ DC28 C8          >                        ret		z
1263+ DC29                                      JumpOnABitClear ShipIsDotBitNbr, .CarryOnWithDraw   ; if not dot do normal draw
1263+ DC29 CB 5F       >                        bit 	ShipIsDotBitNbr, a
1263+ DC2B CA 52 DC    >                        jp      z,.CarryOnWithDraw
1264+ DC2E              ;............................................................
1265+ DC2E CD 99 DB     .itsJustADot:           call    ProcessDot
1266+ DC31                                      SetMemBitN  UBnkaiatkecm , ShipIsDotBitNbr ; set is a dot flag
1266+ DC31 21 54 C0    >                        ld      hl,UBnkaiatkecm
1266+ DC34 CB DE       >                        set     ShipIsDotBitNbr,(hl)
1267+ DC36 ED 4B F0 C0                          ld      bc,(UBnkNodeArray)          ; if its at dot range get X
1268+ DC3A ED 5B F2 C0                          ld      de,(UBnkNodeArray+2)        ; and Y
1269+ DC3E 78                                   ld      a,b                         ; if high byte components are not 0 then off screen
1270+ DC3F B2                                   or      d                           ;
1271+ DC40 C0                                   ret     nz                          ;
1272+ DC41 7B                                   ld      a,e
1273+ DC42 E6 80                                and     %10000000                   ; check to see if Y > 128
1274+ DC44 C0                                   ret     nz
1275+ DC45 43                                   ld      b,e                         ; now b = y and c = x
1276+ DC46 3E FF                                ld      a,L2ColourWHITE_1           ; just draw a pixel
1277+ DC48 3E E0                                ld      a,224
1278+ DC4A                                      MMUSelectLayer2                     ; then go to update radar
1278+ DC4A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1279+ DC4E CD FB E2                             call    ShipPixel                   ;
1280+ DC51 C9                                   ret
1281+ DC52              ;............................................................
1282+ DC52 CD C9 DB     .CarryOnWithDraw:       call    ProcessNodes                ; process notes is the poor performer or check distnace is not culling
1283+ DC55 CD 16 D3                             call    CullV2
1284+ DC58                                     ; break
1285+ DC58 CD 20 DE                             call    PrepLines
1286+ DC5B CD 6D DB                             call    DrawLines
1287+ DC5E C9                                   ret
1288+ DC5F              ;............................................................
1289+ DC5F CD C9 DB     .ExplodingCloud:        call    ProcessNodes
1290+ DC62                                      ClearMemBitN  UBnkaiatkecm, ShipKilledBitNbr ; acknowledge ship exploding
1290+ DC62 21 54 C0    >                        ld      hl,UBnkaiatkecm
1290+ DC65 CB A6       >                        res     ShipKilledBitNbr,(hl)
1291+ DC67 3A 5F C0     .UpdateCloudCounter:    ld      a,(UBnKCloudCounter)        ; counter += 4 until > 255
1292+ DC6A C6 04                                add     4                           ; we do this early as we now have logic for
1293+ DC6C DA 2E DD                             jp      c,.FinishedExplosion        ; display or not later
1294+ DC6F 32 5F C0                             ld      (UBnKCloudCounter),a        ; .
1295+ DC72              .SkipHiddenShip:        ReturnOnMemBitClear  UBnkaiatkecm , ShipIsVisibleBitNbr
1295+ DC72 3A 54 C0    >                        ld     a,(UBnkaiatkecm)
1295+ DC75 CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1295+ DC77 C8          >                        ret		z
1296+ DC78              .IsShipADot:            JumpOnABitSet ShipIsDotBitNbr, .itsJustADot ; if its dot distance then explosion is a dot, TODO later we will do as a coloured dot
1296+ DC78 CB 5F       >                        bit 	ShipIsDotBitNbr, a
1296+ DC7A C2 2E DC    >                        jp      nz,.itsJustADot
1297+ DC7D 2A 26 C0     .CalculateZ:            ld      hl,(UBnKzlo)                ; al = hl = z
1298+ DC80 7C                                   ld      a,h                         ; .
1299+ DC81                                      JumpIfALTNusng 32,.CalcFromZ        ; if its >= 32 then set a to FE and we are done
1299+ DC81 FE 20       >                        cp      32
1299+ DC83 DA 8B DC    >                        jp		c, .CalcFromZ
1300+ DC86 26 FE                                ld      h,$FE                       ; .
1301+ DC88 C3 96 DC                             jp      .DoneZDist                  ; .
1302+ DC8B              .CalcFromZ:             ShiftHLLeft1                        ; else
1302+ DC8B CB 25       >			   sla l
1302+ DC8D CB 14       >			   rl  h
1303+ DC8F                                      ShiftHLLeft1                        ; hl = hl * 2
1303+ DC8F CB 25       >			   sla l
1303+ DC91 CB 14       >			   rl  h
1304+ DC93                                      SetCarryFlag                        ; h = h * 3 rolling in lower bit
1304+ DC93 37          >                        scf
1305+ DC94 CB 14                                rl  h                               ;
1306+ DC96 06 00        .DoneZDist:             ld      b,0                         ; bc = cloud z distance calculateed
1307+ DC98 4C                                   ld      c,h                         ; .
1308+ DC99 3A 5F C0     .CalcCloudRadius:       ld      a,(UBnKCloudCounter)        ; de = cloud counter * 256
1309+ DC9C                      IFDEF LOGMATHS
1310+ DC9C ~                                    MMUSelectMathsTables
1311+ DC9C ~                                    ld      b,h
1312+ DC9C ~                                    call    AEquAmul256DivBLog
1313+ DC9C ~                                    ld      d,a
1314+ DC9C ~                                    MMUSelectROM0
1315+ DC9C                      ELSE
1316+ DC9C 57                                   ld      d,a                         ;
1317+ DC9D 1E 00                                ld      e,0                         ;
1318+ DC9F CD 4B 97                             call    DEequDEDivBC                ; de = cloud counter * 256 / z distance
1319+ DCA2 7A                                   ld      a,d                         ; if radius >= 28
1320+ DCA3                      ENDIF
1321+ DCA3                                      JumpIfALTNusng  28,.SetCloudRadius  ; then set raidus in d to $FE
1321+ DCA3 FE 1C       >                        cp      28
1321+ DCA5 DA AD DC    >                        jp		c, .SetCloudRadius
1322+ DCA8 16 FE        .MaxCloudRadius:        ld      d,$FE                       ;
1323+ DCAA C3 B9 DC                             jp      .SizedUpCloud               ;
1324+ DCAD              .SetCloudRadius:        ShiftDELeft1                        ; de = 8 * de
1324+ DCAD CB 23       >			   sla e
1324+ DCAF CB 12       >			   rl  d
1325+ DCB1                                      ShiftDELeft1                        ; .
1325+ DCB1 CB 23       >			   sla e
1325+ DCB3 CB 12       >			   rl  d
1326+ DCB5                                      ShiftDELeft1                        ; .
1326+ DCB5 CB 23       >			   sla e
1326+ DCB7 CB 12       >			   rl  d
1327+ DCB9 7A           .SizedUpCloud:          ld      a,d                         ; cloudradius = a = d or (cloudcounter * 8 / 256)
1328+ DCBA 32 60 C0                             ld      (UBnKCloudRadius),a         ; .
1329+ DCBD DD 67                                ld      ixh,a                       ; ixh = a = calculated cloud radius
1330+ DCBF 3A 5F C0     .CalcSubParticleColour: ld      a,(UBnKCloudCounter)        ; colur fades away
1331+ DCC2 ED 23                                swapnib                             ; divive by 16
1332+ DCC4 E6 0F                                and     $0F                         ; mask off upper bytes
1333+ DCC6 CB 2F                                sra     a                           ; divide by 32
1334+ DCC8 21 3A DD                             ld      hl,DebrisColourTable
1335+ DCCB ED 31                                add     hl,a
1336+ DCCD 7E                                   ld      a,(hl)
1337+ DCCE FD 6F                                ld      iyl,a                       ; iyl = pixel colours
1338+ DCD0 3A 5F C0     .CalcSubParticleCount:  ld      a,(UBnKCloudCounter)        ; cloud counter = abs (cloud counter) in effect if > 127 then shrinks it
1339+ DCD3                                      ABSa2c                              ; a = abs a
1339+ DCD3 CB 7F       >                        bit     7,a
1339+ DCD5 CA DA DC    >                        jp      z,.DoneABSa
1339+ DCD8 ED 44       >                        neg
1339+ DCDA             >.DoneABSa:
1340+ DCDA CB 2F        .ParticlePositive:      sra a                               ; iyh = (a /8)
1341+ DCDC CB 2F                                sra a                               ; .
1342+ DCDE CB 2F                                sra a                               ; .
1343+ DCE0 F6 01                                or  1                               ; bit 0 set so minimum 1
1344+ DCE2 DD 6F        .DoneSubParticleCount:  ld      ixl,a                       ; ixl = nbr particles per vertex
1345+ DCE4 3A 36 C3     .ForEachVertex:         ld      a,(VertexCountAddr)         ; load vertex count into b
1346+ DCE7 47                                   ld      b,a                         ; .
1347+ DCE8 21 F0 C0                             ld      hl,UBnkNodeArray            ; hl = list of vertices
1348+ DCEB C5 E5        .ExplosionVertLoop:     push    bc,,hl                      ; save vertex counter in b and pointer to verticles in hl
1349+ DCED DD 68                                    ld      ixl,b                   ; save counter
1350+ DCEF 4E                                       ld      c,(hl)                  ; get vertex into bc and de
1351+ DCF0 23                                       inc     hl                      ; .
1352+ DCF1 46                                       ld      b,(hl)                  ; .
1353+ DCF2 23                                       inc     hl                      ; .
1354+ DCF3 5E                                       ld      e,(hl)                  ; .
1355+ DCF4 23                                       inc     hl                      ; .
1356+ DCF5 56                                       ld      d,(hl)                  ; now hl is done with and we can use it
1357+ DCF6 DD 7D        .LoopSubParticles:          ld      a,ixl                   ; iyh = loop iterator for nbr of particles per vertex
1358+ DCF8 FD 67                                    ld      iyh,a                   ;
1359+ DCFA                                          ;break
1360+ DCFA D5 C5        .ProcessAParticle:          push    de,,bc                  ; save y then x coordinates
1361+ DCFC EB                                           ex      de,hl               ; hl = de (Y)
1362+ DCFD DD 54                                        ld      d,ixh               ; d = cloud radius
1363+ DCFF CD 42 DD                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1364+ DD02 7C                                           ld      a,h                 ; if off screen skip
1365+ DD03                                              JumpIfAIsNotZero  .NextIteration
1365+ DD03 A7          >                        and     a
1365+ DD04 C2 1F DD    >                        jp	    nz,.NextIteration
1366+ DD07 EB                                           ex      de,hl               ; de = result for y which was put into hl
1367+ DD08 E1                                           pop     hl                  ; get x back from bc on stack
1368+ DD09 E5                                           push    hl                  ; put bc (which is now in hl) back on the stack
1369+ DD0A D5                                           push    de                  ; save de
1370+ DD0B DD 54                                        ld      d,ixh               ; d = cloud radius
1371+ DD0D CD 42 DD                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1372+ DD10 D1                                           pop     de                  ; get de back doing pop here clears stack up
1373+ DD11 7C                                           ld      a,h                 ; if high byte has a value then off screen
1374+ DD12                                              JumpIfAIsNotZero .NextIteration ;
1374+ DD12 A7          >                        and     a
1374+ DD13 C2 1F DD    >                        jp	    nz,.NextIteration
1375+ DD16 43                                           ld      b,e                 ; bc = y x of pixel from e and c regs
1376+ DD17 4D                                           ld      c,l                 ; iyl already has colour
1377+ DD18                                              MMUSelectLayer2             ; plot it with debris code as this can chop y > 128
1377+ DD18 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1378+ DD1C CD 03 E3                                     call    DebrisPixel         ; .
1379+ DD1F C1 D1        .NextIteration:             pop    de,,bc                   ; ready for next iteration, get back y and x coordinates
1380+ DD21 FD 25                                    dec    iyh                      ; one partcile done
1381+ DD23 20 D5                                    jr      nz,.ProcessAParticle    ; until all done
1382+ DD25 E1 C1        .NextVert:              pop     bc,,hl                      ; recover loop counter and source pointer
1383+ DD27 3E 04                                ld      a,4                         ; move to next vertex group
1384+ DD29 ED 31                                add     hl,a                        ;
1385+ DD2B 10 BE                                djnz    .ExplosionVertLoop          ;
1386+ DD2D C9                                   ret
1387+ DD2E              .FinishedExplosion:     ;break
1388+ DD2E 3A 3F C0                             ld      a,(UBnKSlotNumber)          ; get slot number
1389+ DD31 CD 0D 87                             call    ClearSlotA                  ; gauranted to be in main memory as non bankables
1390+ DD34                                      ClearMemBitN UBnkaiatkecm, ShipExplodingBitNbr
1390+ DD34 21 54 C0    >                        ld      hl,UBnkaiatkecm
1390+ DD37 CB AE       >                        res     ShipExplodingBitNbr,(hl)
1391+ DD39 C9                                   ret
1392+ DD3A
1393+ DD3A
1394+ DD3A FC D8 B4 90  DebrisColourTable:      DB L2ColourYELLOW_1, L2ColourYELLOW_2, L2ColourYELLOW_3, L2ColourYELLOW_4, L2ColourYELLOW_5, L2ColourYELLOW_6, L2ColourYELLOW_7,L2ColourGREY_4
1394+ DD3E 6C 48 24 25
1395+ DD42                                      ; set flags and signal to remove from slot list
1396+ DD42
1397+ DD42              ; Hl = HlL +/- (Random * projected cloud size)
1398+ DD42              ; In - d = z distance, hl = vert hi lo
1399+ DD42              ; Out hl = adjusted distance
1400+ DD42              ; uses registers hl, de
1401+ DD42 E5           HLEquARandCloud:        push    hl                          ; random number geneator upsets hl register
1402+ DD43 CD DE 87                             call    doRandom                    ; a= random * 2
1403+ DD46 E1                                   pop     hl
1404+ DD47 17                                   rla                                 ;
1405+ DD48 38 0A                                jr      c,.Negative                 ; if buit 7 went into carry
1406+ DD4A 5F           .Positive:              ld  e,a
1407+ DD4B ED 30                                mul
1408+ DD4D 5A                                   ld  e,d
1409+ DD4E 16 00                                ld  d,0
1410+ DD50                                      ClearCarryFlag
1410+ DD50 B7          >                        or a
1411+ DD51 ED 5A                                adc     hl,de                       ; hl = hl + a
1412+ DD53 C9                                   ret
1413+ DD54 5F           .Negative:              ld  e,a
1414+ DD55 ED 30                                mul
1415+ DD57 5A                                   ld  e,d
1416+ DD58 16 00                                ld  d,0
1417+ DD5A                                      ClearCarryFlag
1417+ DD5A B7          >                        or a
1418+ DD5B ED 52                                sbc     hl,de                       ; hl = hl + a
1419+ DD5D C9                                   ret
1420+ DD5E
1421+ DD5E              GetExperiencePoints:    ; TODO calculate experience points
1422+ DD5E                                      ; TODO mission updates check
1423+ DD5E C9                                   ret
1424+ DD5F
1425+ DD5F              ; ......................................................
1426+ DD5F 3A 45 C3     KillShip:               ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1427+ DD62 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1428+ DD64 C8                                   ret     z
1429+ DD65 3A 54 C0                             ld      a,(UBnkaiatkecm)            ; remove AI, mark killed, mark exploding
1430+ DD68 F6 30                                or      ShipExploding | ShipKilled  ; .
1431+ DD6A E6 7F                                and     ShipAIDisabled              ; .
1432+ DD6C 32 54 C0                             ld      (UBnkaiatkecm),a            ; .
1433+ DD6F                                      SetMemToN   UBnKexplDsp, ShipExplosionDuration ; set debris cloud timer, also usered in main to remove from slots
1433+ DD6F 3E 4B       >                        ld      a,ShipExplosionDuration
1433+ DD71 32 51 C0    >                        ld      (UBnKexplDsp),a
1434+ DD74                                      ldWriteZero UBnKEnergy              ; Zero ship energy
1434+ DD74 AF          >                        xor      a
1434+ DD75 32 58 C0    >                        ld       (UBnKEnergy),a
1435+ DD78 32 60 C0                             ld      (UBnKCloudRadius),a
1436+ DD7B 3E 12                                ld      a,18
1437+ DD7D 32 5F C0                             ld      (UBnKCloudCounter),a        ; Zero cloud
1438+ DD80                                      ; TODO logic to spawn cargo/plates goes here
1439+ DD80 C9                                   ret
1440+ DD81
1441+ DD81              ; in a = damage
1442+ DD81 47           DamageShip:             ld      b,a                         ; b = a = damage comming in
1443+ DD82 3A 45 C3                             ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1444+ DD85 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1445+ DD87 C8                                   ret     z
1446+ DD88 3A 58 C0                             ld      a,(UBnKEnergy)              ; get current energy level
1447+ DD8B                                      ClearCarryFlag
1447+ DD8B B7          >                        or a
1448+ DD8C 98                                   sbc     a,b                         ; subtract damage
1449+ DD8D D2 94 DD     .Overkilled:            jp      nc,.DoneDamage              ; if no carry then its not gone negative
1450+ DD90 CD 5F DD                             call    KillShip                    ; else kill it
1451+ DD93 C9                                   ret
1452+ DD94 32 58 C0     .DoneDamage:            ld      (UBnKEnergy),a
1453+ DD97 C9                                   ret
1454+ DD98              ; need recovery for energy too
1455+ DD98              ; Shall we have a "jolt ship off course routine for when it gets hit by a blast or collision)
1456+ DD98
1457+ DD98              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1458+ DD98              ;  Entering Here we have the following:
1459+ DD98              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1460+ DD98              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1461+ DD98              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1462+ DD98              ;
1463+ DD98              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1464+ DD98              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1465+ DD98              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1466+ DD98              ;--------------------------------------------------------------------------------------------------------
1467+ DD98              AddLaserBeamLine:
1468+ DD98              ; this code is a bag of shit and needs re-writing
1469+ DD98              GetGunVertexNode:
1470+ DD98 3A 34 C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1471+ DD9B 21 F0 C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1472+ DD9E ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1473+ DDA0 FD 2E 00             ld          iyl,0
1474+ DDA3              MoveX1PointToXX15:
1475+ DDA3 4E                   ld          c,(hl)                              ;
1476+ DDA4 23                   inc         hl
1477+ DDA5 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1478+ DDA6 23                   inc         hl
1479+ DDA7 ED 43 A6 C0          ld          (UBnkX1),bc
1480+ DDAB 0C                   inc         c
1481+ DDAC C8                   ret         z                                   ; was c 255?
1482+ DDAD 04                   inc         b
1483+ DDAE C8                   ret         z                                   ; was c 255?
1484+ DDAF              MoveY1PointToXX15:
1485+ DDAF 4E                   ld          c,(hl)                              ;
1486+ DDB0 23                   inc         hl
1487+ DDB1 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1488+ DDB2 23                   inc         hl
1489+ DDB3 ED 43 A8 C0          ld          (UBnkY1),bc
1490+ DDB7              SetX2PointToXX15:
1491+ DDB7 01 00 00             ld          bc,0                                ; set X2 to 0
1492+ DDBA ED 43 AA C0          ld          (UBnkX2),bc
1493+ DDBE 3A 26 C0             ld          a,(UBnKzlo)
1494+ DDC1 4F                   ld          c,a
1495+ DDC2              SetY2PointToXX15:
1496+ DDC2 ED 43 AC C0          ld          (UBnkY2),bc                         ; set Y2to 0
1497+ DDC6 3A 22 C0             ld          a,(UBnKxsgn)
1498+ DDC9                      JumpOnBitClear a,7,LL74SkipDec
1498+ DDC9 CB 7F       >                        bit 	7,a
1498+ DDCB CA D3 DD    >                        jp      z,LL74SkipDec
1499+ DDCE              LL74DecX2:
1500+ DDCE 3E FF                ld          a,$FF
1501+ DDD0 32 AA C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1502+ DDD3              LL74SkipDec:
1503+ DDD3 CD 42 CB             call        ClipLineV3                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1504+ DDD6 3A 96 C8             ld          a,(ClipSuccess)
1505+ DDD9 A7                   and         a
1506+ DDDA 28 71                jr          z,CalculateNewLines
1507+ DDDC              ;        jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1508+ DDDC              ; Here we are usign hl to replace VarU as index
1509+ DDDC 2A A2 81             ld          hl,(varU16)
1510+ DDDF 3A A6 C0             ld          a,(UBnKx1Lo)
1511+ DDE2 77                   ld          (hl),a
1512+ DDE3 23                   inc         hl
1513+ DDE4 3A A8 C0             ld          a,(UbnKy1Lo)
1514+ DDE7 77                   ld          (hl),a
1515+ DDE8 23                   inc         hl
1516+ DDE9 3A AA C0             ld          a,(UBnkX2Lo)
1517+ DDEC 77                   ld          (hl),a
1518+ DDED 23                   inc         hl
1519+ DDEE 3A AC C0             ld          a,(UbnKy2Lo)
1520+ DDF1 77                   ld          (hl),a
1521+ DDF2 FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1522+ DDF4 23                   inc         hl
1523+ DDF5 FD 2C                inc         iyl                                 ; ready for next byte
1524+ DDF7 22 A2 81             ld          (varU16),hl
1525+ DDFA C9                   ret
1526+ DDFB
1527+ DDFB                  INCLUDE "Universe/Ships/PrepLines.asm"
# file opened: ./Universe/Ships/PrepLines.asm
   1++DDFB                  ;DEFINE  CLIPVersion3 1
   2++DDFB              ;--------------------------------------------------------------------------------------------------------
   3++DDFB                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DDFB              ;--------------------------------------------------------------------------------------------------------
   2++DDFB              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DDFB 21 F0 C0     getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DDFE ED 31                                add         hl,a                                ; hl = address of Node
   5++DE00 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DE01 11 A6 C0                             ld          de,UBnkX1
   7++DE04 ED A0                                ldi                                             ; x1 lo
   8++DE06 ED A0                                ldi                                             ; x1 hi
   9++DE08 ED A0                                ldi                                             ; y1 lo
  10++DE0A ED A0                                ldi                                             ; y1 hi
  11++DE0C C9                                   ret
  12++DE0D
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   4++DE0D                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DE0D              ;--------------------------------------------------------------------------------------------------------
   2++DE0D              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DE0D 21 F0 C0     getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DE10 ED 31                                add         hl,a                                ; hl = address of Node
   5++DE12 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DE13 11 AA C0                             ld          de,UBnkX2
   7++DE16 ED A0                                ldi                                             ; x1 lo
   8++DE18 ED A0                                ldi                                             ; x1 hi
   9++DE1A ED A0                                ldi                                             ; y1 lo
  10++DE1C ED A0                                ldi                                             ; y1 hi
  11++DE1E C9                                   ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   5++DE1F                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DE1F              ;--------------------------------------------------------------------------------------------------------
   2++DE1F              GetFaceAtA:         MACRO
   3++DE1F ~                                ld          hl,UbnkFaceVisArray
   4++DE1F ~                                add         hl,a
   5++DE1F ~                                ld          a,(hl)                              ; get face visibility
   6++DE1F                                  ENDM
   7++DE1F
# file closed: ././ModelRender/GetFaceAtA.asm
   6++DE1F              ;--------------------------------------------------------------------------------------------------------
   7++DE1F              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
   8++DE1F               ;   DEFINE NOBACKFACECULL 1
   9++DE1F 00           PLEDGECTR           DB          0
  10++DE20
  11++DE20              PrepLines:
  12++DE20              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  13++DE20
  14++DE20              ; TODO add in onced DOEXP is finished
  15++DE20              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  16++DE20              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  17++DE20              ;        or          8
  18++DE20              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  19++DE20              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  20++DE20              ;EE31:                                                   ; no explosion
  21++DE20              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  22++DE20              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  23++DE20              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  24++DE20              ;
  25++DE20              ;--------------------------------------------------------------------------------------------------------
  26++DE20              InitialiseLineRead:
  27++DE20                      ;break
  28++DE20                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  28++DE20 AF          >                        xor      a
  28++DE21 32 22 C3    >                        ld       (UbnkLineArrayLen),a
  29++DE24                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  29++DE24 AF          >                        xor      a
  29++DE25 32 23 C3    >                        ld       (UbnkLineArrayBytes),a
  30++DE28                      ldWriteZero PLEDGECTR
  30++DE28 AF          >                        xor      a
  30++DE29 32 1F DE    >                        ld       (PLEDGECTR),a
  31++DE2C 3A 38 C3             ld          a,(EdgeCountAddr)
  32++DE2F DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  33++DE31 FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  34++DE34 21 30 C2             ld          hl,UbnkLineArray                    ; head of array
  35++DE37 22 A2 81             ld          (varU16),hl                         ; store current line array pointer un varU16
  36++DE3A                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  36++DE3A 3A 38 C3    >                        ld       a,(EdgeCountAddr)
  36++DE3D 32 A6 81    >                        ld       (XX17),a
  37++DE40 3A 51 C0             ld          a,(UBnKexplDsp)                     ; get explosion status
  38++DE43                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  38++DE43 CB 77       >                        bit 	6,a
  38++DE45 CA 4D DE    >                        jp      z,CalculateNewLines
  39++DE48 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  40++DE4A 32 51 C0             ld          (UBnKexplDsp),a                     ; INWK+31
  41++DE4D              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  42++DE4D              ; NOw we can calculate hull after including laser line
  43++DE4D              CalculateNewLines:
  44++DE4D              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  45++DE4D              CheckEdgesForVisibility:
  46++DE4D 21 39 C4             ld          hl,UBnkHullEdges
  47++DE50                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  48++DE50 22 A5 80             ld          (varV),hl                           ; V \ is pointer to where edges data start
  49++DE53 3A 33 C3             ld          a,(LineX4Addr)
  50++DE56 47                   ld          b,a                                 ; nbr of bytes of edge data
  51++DE57              LL75Loop:                                               ; count Visible edges
  52++DE57              IsEdgeInVisibilityRange:
  53++DE57 2A A5 80             ld          hl,(varV)
  54++DE5A E5                   push        hl
  55++DE5B FD E1                pop         iy
  56++DE5D                      IFDEF NOBACKFACECULL
  57++DE5D ~                        jp          VisibileEdge; DEBUGTODO
  58++DE5D                      ENDIF
  59++DE5D 3A 91 80             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  60++DE60 57                   ld          d,a                                 ; d holds copy of XX4
  61++DE61              ; Get Edge Byte 0
  62++DE61 FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  63++DE64                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  63++DE64 BA          >                        cp      d
  63++DE65 DA B7 DE    >                        jp		c, LL78EdgeNotVisible
  64++DE68              EdgeMayBeVisibile:
  65++DE68              ; Get Edge Byte 1
  66++DE68              IsFace1Visibile:                                        ; edges have 2 faces to test
  67++DE68 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  68++DE6B 4F                   ld          c,a                                 ;  c = a copy of byte 1
  69++DE6C E6 0F                and         $0F                                 ;
  70++DE6E                      GetFaceAtA
  70++DE6E 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
  70++DE71 ED 31       >                    add         hl,a
  70++DE73 7E          >                    ld          a,(hl)                              ; get face visibility
  71++DE74              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  72++DE74                      JumpIfAIsNotZero VisibileEdge                     ; LL70 visible edge
  72++DE74 A7          >                        and     a
  72++DE75 C2 89 DE    >                        jp	    nz,VisibileEdge
  73++DE78              IsFace2Visibile:
  74++DE78 79                   ld          a,c                                 ; restore byte 1 from c register
  75++DE79 ED 23                swapnib                                         ;
  76++DE7B E6 0F                and         $0F                                 ; swap high byte into low byte
  77++DE7D E5                   push        hl
  78++DE7E                      GetFaceAtA
  78++DE7E 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
  78++DE81 ED 31       >                    add         hl,a
  78++DE83 7E          >                    ld          a,(hl)                              ; get face visibility
  79++DE84 E1                   pop         hl
  80++DE85                      JumpIfAIsZero LL78EdgeNotVisible                ; edge not visible
  80++DE85 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  80++DE86 CA B7 DE    >                        jp	    z, LL78EdgeNotVisible
  81++DE89              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  82++DE89              ;LL79--Visible edge--------------------------------------
  83++DE89              ; Get Edge Byte 2
  84++DE89 FD 7E 02             ld          a,(IY+2)                            ; get Node id
  85++DE8C CD FB DD             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  86++DE8F FD 7E 03             ld          a,(IY+3)
  87++DE92 CD 0D DE             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
  88++DE95                      IFDEF       CLIPVersion3
  89++DE95 ~                        call        ClipLineV3
  90++DE95 ~                        ld          a,(ClipSuccess)
  91++DE95 ~                        and         a
  92++DE95 ~                        jr          z,LL78EdgeNotVisible
  93++DE95                      ELSE
  94++DE95 CD 98 C8                 call        ClipLine
  95++DE98 38 1D                    jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
  96++DE9A                      ENDIF
  97++DE9A              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
  98++DE9A ED 5B A2 81          ld          de,(varU16)                         ; clipped edges heap address
  99++DE9E 21 A6 C0             ld          hl,UBnkNewX1
 100++DEA1                      FourLDIInstrunctions
 100++DEA1 ED A0       >                        ldi
 100++DEA3 ED A0       >                        ldi
 100++DEA5 ED A0       >                        ldi
 100++DEA7 ED A0       >                        ldi
 101++DEA9 ED 53 A2 81          ld          (varU16),de                         ; update U16 with current address
 102++DEAD 21 22 C3             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
 103++DEB0 34                   inc         (hl)
 104++DEB1 7E                   ld          a,(hl)
 105++DEB2                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
 105++DEB2 FE 32       >                        cp     LineArraySize
 105++DEB4 D2 CD DE    >                        jp		nc,CompletedLineGeneration
 106++DEB7              ; If we hit here we skip the write of line arryay u16
 107++DEB7              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 108++DEB7              LL78:
 109++DEB7 2A A5 80             ld          hl,(varV)                           ; varV is current edge address
 110++DEBA 3E 04                ld          a,4
 111++DEBC ED 31                add         hl,a
 112++DEBE 22 A5 80             ld          (varV),hl
 113++DEC1 21 1F DE             ld          hl,PLEDGECTR                        ;
 114++DEC4 34                   inc         (hl)                                ;
 115++DEC5 7E                   ld          a,(hl)                              ; current edge index ++
 116++DEC6                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 116++DEC6 21 A6 81    >                        ld    hl,XX17
 116++DEC9 BE          >                        cp    (hl)
 116++DECA C2 57 DE    >                        jp      nz,LL75Loop
 117++DECD              CompletedLineGeneration:
 118++DECD              LL81:
 119++DECD              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 120++DECD 3A 22 C3             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 121++DED0 CB 27                sla         a
 122++DED2 CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 123++DED4 32 23 C3             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 124++DED7              ExitEdgeDataLoop:
 125++DED7 C9                   ret
 126++DED8
# file closed: ./Universe/Ships/PrepLines.asm
1528+ DED8
1529+ DED8              UnivBankSize  EQU $ - StartOfUniv
1530+ DED8
# file closed: ./Universe/Ships/univ_ship_data.asm
 938  DED8                                  DISPLAY "Bank ",BankUNIVDATA0," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data A"
 939  DED8              ; Bank 71  ------------------------------------------------------------------------------------------------------------------------
 940  DED8                                  SLOT    UniverseBankAddr
 941  DED8                                  PAGE    BankUNIVDATA1
 942  DED8                                  ORG	UniverseBankAddr,BankUNIVDATA1
 943  C000 FF           UNIVDATABlock1      DB $FF
 944  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 945  E000                                  DISPLAY "Bank ",BankUNIVDATA1," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data B"
 946  E000              ; Bank 72  ------------------------------------------------------------------------------------------------------------------------
 947  E000                                  SLOT    UniverseBankAddr
 948  E000                                  PAGE    BankUNIVDATA2
 949  E000                                  ORG	UniverseBankAddr,BankUNIVDATA2
 950  C000 FF           UNIVDATABlock2      DB $FF
 951  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 952  E000                                  DISPLAY "Bank ",BankUNIVDATA2," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data C"
 953  E000              ; Bank 73  ------------------------------------------------------------------------------------------------------------------------
 954  E000                                  SLOT    UniverseBankAddr
 955  E000                                  PAGE    BankUNIVDATA3
 956  E000                                  ORG	UniverseBankAddr,BankUNIVDATA3
 957  C000 FF           UNIVDATABlock3      DB $FF
 958  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 959  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data D"
 960  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 961  E000                                  SLOT    UniverseBankAddr
 962  E000                                  PAGE    BankUNIVDATA4
 963  E000                                  ORG	UniverseBankAddr,BankUNIVDATA4
 964  C000 FF           UNIVDATABlock4      DB $FF
 965  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 966  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data E"
 967  E000              ; Bank 75  ------------------------------------------------------------------------------------------------------------------------
 968  E000                                  SLOT    UniverseBankAddr
 969  E000                                  PAGE    BankUNIVDATA5
 970  E000                                  ORG	UniverseBankAddr,BankUNIVDATA5
 971  C000 FF           UNIVDATABlock5      DB $FF
 972  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 973  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data F"
 974  E000              ; Bank 76  ------------------------------------------------------------------------------------------------------------------------
 975  E000                                  SLOT    UniverseBankAddr
 976  E000                                  PAGE    BankUNIVDATA6
 977  E000                                  ORG	UniverseBankAddr,BankUNIVDATA6
 978  C000 FF           UNIVDATABlock6      DB $FF
 979  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 980  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data G"
 981  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 982  E000                                  SLOT    UniverseBankAddr
 983  E000                                  PAGE    BankUNIVDATA7
 984  E000                                  ORG	UniverseBankAddr,BankUNIVDATA7
 985  C000 FF           UNIVDATABlock7      DB $FF
 986  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 987  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data H"
 988  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 989  E000                                  SLOT    UniverseBankAddr
 990  E000                                  PAGE    BankUNIVDATA8
 991  E000                                  ORG	UniverseBankAddr,BankUNIVDATA8
 992  C000 FF           UNIVDATABlock8      DB $FF
 993  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 994  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data I"
 995  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 996  E000                                  SLOT    UniverseBankAddr
 997  E000                                  PAGE    BankUNIVDATA9
 998  E000                                  ORG	UniverseBankAddr,BankUNIVDATA9
 999  C000 FF           UNIVDATABlock9      DB $FF
1000  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1001  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data J"
1002  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
1003  E000                                  SLOT    UniverseBankAddr
1004  E000                                  PAGE    BankUNIVDATA10
1005  E000                                  ORG	UniverseBankAddr,BankUNIVDATA10
1006  C000 FF           UNIVDATABlock10     DB $FF
1007  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1008  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data K"
1009  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
1010  E000                                  SLOT    UniverseBankAddr
1011  E000                                  PAGE    BankUNIVDATA11
1012  E000                                  ORG	UniverseBankAddr,BankUNIVDATA11
1013  C000 FF           UNIVDATABlock11     DB $FF
1014  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1015  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data L"
1016  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
1017  E000                                  SLOT    UniverseBankAddr
1018  E000                                  PAGE    BankUNIVDATA12
1019  E000                                  ORG	UniverseBankAddr,BankUNIVDATA12
1020  C000 FF           UNIVDATABlock12     DB $FF
1021  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1022  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data M"
1023  E000              ; Bank 83  ------------------------------------------------------------------------------------------------------------------------
1024  E000                                      SLOT    SunBankAddr
1025  E000                                      PAGE    BankSunData
1026  E000                                      ORG	    SunBankAddr,BankSunData
1027  C000                                      INCLUDE "./Universe/Sun/sun_data.asm"
# file opened: ./Universe/Sun/sun_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                      0123456789ABCDEF
  14+ C000 53 75 6E 20  StartOfSun:        DB "Sun Data ......."
  14+ C004 44 61 74 61
  14+ C008 20 2E 2E 2E
  14+ C00C 2E 2E 2E 2E
  15+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  16+ C010              CheckRowHLOnScreen:     MACRO   failtarget
  17+ C010 ~                                    ld      a,h                             ; is h byte set, i.e > 256 or < 0
  18+ C010 ~                                    and     a                               ; .
  19+ C010 ~                                    jr      nz,failtarget                   ; h <> 0 so fails (covers <0 and > 255
  20+ C010 ~                                    ld      a,l                             ; l bit 7 0?
  21+ C010 ~                                    and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
  22+ C010 ~                                    jr      nz,failtarget                   ;
  23+ C010                                      ENDM
  24+ C010
  25+ C010              ; IY = SBnKLineArray + rowValue*2
  26+ C010              IYEquRowN:              MACRO   rowValue                        ; set up iy as target address
  27+ C010 ~                                    ld      a,rowValue
  28+ C010 ~                                    ld      hl,SBnKLineArray
  29+ C010 ~                                    add     hl,a
  30+ C010 ~                                    add     hl,a
  31+ C010 ~                                    push    hl
  32+ C010 ~                                    pop     iy
  33+ C010                                      ENDM
  34+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  35+ C010              ; Universe map substibute for INWK
  36+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  37+ C010              SBnKDataBlock:
  38+ C010                                      INCLUDE "./Universe/Sun/SunPosVars.asm"
# file opened: ././Universe/Sun/SunPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           SBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           SBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           SBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           SBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           SBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           SBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           SBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           SBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           SBnKzsgn                    DB  0                       ; INWK +8
  11++C019 00 00        SunCompassX                 DW  0
  12++C01B 00 00        SunCompassY                 DW  0
  13++C01D
# file closed: ././Universe/Sun/SunPosVars.asm
  39+ C01D                                      INCLUDE "./Universe/Sun/SunRotationMatrixVars.asm"
# file opened: ././Universe/Sun/SunRotationMatrixVars.asm
   1++C01D              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C01D              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C01D 00 00        SBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01F              SBnKrotmatSidev             equ SBnKrotmatSidevX
   5++C01F 00 00        SBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C021 00 00        SBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C023 00 00        SBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C025              SBnKrotmatRoofv             equ SBnKrotmatRoofvX
   9++C025 00 00        SBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C027 00 00        SBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C029 00 00        SBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C02B              SBnKrotmatNosev             EQU SBnKrotmatNosevX
  13++C02B 00 00        SBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C02D 00 00        SBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02F
# file closed: ././Universe/Sun/SunRotationMatrixVars.asm
  40+ C02F                                      INCLUDE "./Universe/Sun/SunAIRuntimeData.asm"
# file opened: ././Universe/Sun/SunAIRuntimeData.asm
   1++C02F              ; -- Ship AI data
   2++C02F 00           SBnKRotXCounter             DB  0                       ; INWK +29
   3++C030 00           SBnKRotZCounter             DB  0                       ; INWK +30
   4++C031 00           SBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C032 00           SBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C033
# file closed: ././Universe/Sun/SunAIRuntimeData.asm
  41+ C033
  42+ C033
  43+ C033                                      INCLUDE "./Universe/Sun/SunXX16Vars.asm"
# file opened: ././Universe/Sun/SunXX16Vars.asm
   1++C033              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C033 00 00        SBnkTransmatSidevX          DW  0               ; XX16+0
   3++C035              SBnkTransmatSidev           EQU SBnkTransmatSidevX
   4++C035 00 00        SBnkTransmatSidevY          DW 0                ; XX16+2
   5++C037 00 00        SBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C039 00 00        SBnkTransmatRoofvX          DW 0
   7++C03B              SBnkTransmatRoofv           EQU SBnkTransmatRoofvX
   8++C03B 00 00        SBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03D 00 00        SBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03F 00 00        SBnkTransmatNosevX          DW 0
  11++C041              SBnkTransmatNosev           EQU SBnkTransmatNosevX
  12++C041 00 00        SBnkTransmatNosevY          DW 0                ; XX16+2
  13++C043 00 00        SBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C045 00 00        SBnkTransmatTransX          DW 0
  15++C047 00 00        SBnkTransmatTransY          DW 0
  16++C049 00 00        SBnkTransmatTransZ          DW 0
  17++C04B              SunXX16                      equ SBnkTransmatSidev
  18++C04B              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04B 00 00        SBnkTransInvRow0x0          DW 0
  20++C04D 00 00        SBnkTransInvRow0x1          DW 0
  21++C04F 00 00        SBnkTransInvRow0x2          DW 0
  22++C051 00 00        SBnkTransInvRow0x3          DW 0
  23++C053 00 00        SBnkTransInvRow1y0          DW 0
  24++C055 00 00        SBnkTransInvRow1y1          DW 0
  25++C057 00 00        SBnkTransInvRow1y2          DW 0
  26++C059 00 00        SBnkTransInvRow1y3          DW 0
  27++C05B 00 00        SBnkTransInvRow2z0          DW 0
  28++C05D 00 00        SBnkTransInvRow2z1          DW 0
  29++C05F 00 00        SBnkTransInvRow2z2          DW 0
  30++C061 00 00        SBnkTransInvRow2z3          DW 0
  31++C063
  32++C063              SunXX16Inv             equ SBnkTransInvRow0x0
  33++C063
# file closed: ././Universe/Sun/SunXX16Vars.asm
  44+ C063                                      INCLUDE "./Universe/Sun/SunXX25Vars.asm"
# file opened: ././Universe/Sun/SunXX25Vars.asm
   1++C063              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C063 00           SBnKProjxLo                 DB  0
   3++C064 00           SBnKProjxHi                 DB  0
   4++C065 00           SBnKProjxSgn                DB  0
   5++C066              SBnKProjx                   EQU SBnKProjxLo
   6++C066 00           SBnKProjyLo                 DB  0
   7++C067 00           SBnKProjyHi                 DB  0
   8++C068 00           SBnKProjySgn                DB  0
   9++C069              SBnKProjy                   EQU SBnKProjyLo
  10++C069 00           SBnKProjzLo                 DB  0
  11++C06A 00           SBnKProjzHi                 DB  0
  12++C06B 00           SBnKProjzSgn                DB  0
  13++C06C              SBnKProjz                   EQU SBnKProjzLo
  14++C06C              SXX25                       EQU SBnKProjxLo
  15++C06C
# file closed: ././Universe/Sun/SunXX25Vars.asm
  45+ C06C                                      INCLUDE "./Universe/Sun/SunXX18Vars.asm"
# file opened: ././Universe/Sun/SunXX18Vars.asm
   1++C06C              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06C 00           SBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C06D 00           SBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06E 00           SBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C06F              SBnKDrawCam0x               equ SBnKDrawCam0xLo
   6++C06F 00           SBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C070 00           SBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C071 00           SBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C072              SBnKDrawCam0y               equ SBnKDrawCam0yLo
  10++C072 00           SBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C073 00           SBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C074 00           SBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C075              SBnKDrawCam0z               equ SBnKDrawCam0zLo
  14++C075              SXX18                       equ SBnKDrawCam0xLo
  15++C075
# file closed: ././Universe/Sun/SunXX18Vars.asm
  46+ C075
  47+ C075              ; Used to make 16 bit reads a little cleaner in source code
  48+ C075 00 00 00     SBnKzPoint                  DS  3
  49+ C078              SBnKzPointLo                equ SBnKzPoint
  50+ C078              SBnKzPointHi                equ SBnKzPoint+1
  51+ C078              SBnKzPointSign              equ SBnKzPoint+2
  52+ C078                                      INCLUDE "./Universe/Sun/SunXX15Vars.asm"
# file opened: ././Universe/Sun/SunXX15Vars.asm
   1++C078              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C078 00           SBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C079 00           SBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C07A 00           SBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C07B 00           SBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C07C 00           SBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C07D 00           SBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07E
   9++C07E              SXX15                       equ SBnKXScaled
  10++C07E              SXX15VecX                   equ SXX15
  11++C07E              SXX15VecY                   equ SXX15+1
  12++C07E              SXX15VecZ                   equ SXX15+2
  13++C07E              SBnKXPoint                  equ SXX15
  14++C07E              SBnKXPointLo                equ SXX15+0
  15++C07E              SBnKXPointHi                equ SXX15+1
  16++C07E              SBnKXPointSign              equ SXX15+2
  17++C07E              SBnKYPoint                  equ SXX15+3
  18++C07E              SBnKYPointLo                equ SXX15+3
  19++C07E              SBnKYPointHi                equ SXX15+4
  20++C07E              SBnKYPointSign              equ SXX15+5
  21++C07E
# file closed: ././Universe/Sun/SunXX15Vars.asm
  53+ C07E                                      INCLUDE "./Universe/Sun/SunXX12Vars.asm"
# file opened: ././Universe/Sun/SunXX12Vars.asm
   1++C07E              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07E              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07E 00           SBnKXX12xLo                 DB  0               ; XX12+0
   4++C07F 00           SBnKXX12xSign               DB  0               ; XX12+1
   5++C080 00           SBnKXX12yLo                 DB  0               ; XX12+2
   6++C081 00           SBnKXX12ySign               DB  0               ; XX12+3
   7++C082 00           SBnKXX12zLo                 DB  0               ; XX12+4
   8++C083 00           SBnKXX12zSign               DB  0               ; XX12+5
   9++C084 00 00 00...  SXX12Save                   DS  6
  10++C08A 00 00 00...  SXX12Save2                  DS  6
  11++C090              SXX12                       equ SBnKXX12xLo
  12++C090              varSXX12                    equ SBnKXX12xLo
  13++C090              ; Repurposed XX12 when plotting lines
  14++C090              SBnkY2                      equ SXX12+0
  15++C090              SbnKy2Lo                    equ SXX12+0
  16++C090              SBnkY2Hi                    equ SXX12+1
  17++C090              SBnkDeltaXLo                equ SXX12+2
  18++C090              SBnkDeltaXHi                equ SXX12+3
  19++C090              SBnkDeltaYLo                equ SXX12+4
  20++C090              SBnkDeltaYHi                equ SXX12+5
  21++C090              SbnkGradient                equ SXX12+2
  22++C090              SBnkTemp1                   equ SXX12+2
  23++C090              SBnkTemp1Lo                 equ SXX12+2
  24++C090              SBnkTemp1Hi                 equ SXX12+3
  25++C090              SBnkTemp2                   equ SXX12+3
  26++C090              SBnkTemp2Lo                 equ SXX12+3
  27++C090              SBnkTemp2Hi                 equ SXX12+4
  28++C090
# file closed: ././Universe/Sun/SunXX12Vars.asm
  54+ C090
  55+ C090
  56+ C090              ; Post clipping the results are now 8 bit
  57+ C090 00           SBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  58+ C091 00           SBnKProjectedY              DB  0
  59+ C092 00           SBnKProjectedX              DB  0
  60+ C093              SBnKProjected               equ SBnKProjectedY  ; resultant projected position
  61+ C093 00 00 00...  SunXX15Save                 DS  8
  62+ C09B 00 00 00...  SunXX15Save2                DS  8
  63+ C0A3              ; Heap (or array) information for lines and normals
  64+ C0A3              ; Coords are stored XY,XY,XY,XY
  65+ C0A3              ; Normals
  66+ C0A3              ; This needs re-oprganising now.
  67+ C0A3              ; Runtime Calculation Store
  68+ C0A3
  69+ C0A3              SunLineArraySize            equ 128 * 2
  70+ C0A3              ; Storage arrays for data
  71+ C0A3
  72+ C0A3 00 00 00...  SBnKLineArray               DS SunLineArraySize ; XX19 Holds the clipped line details
  73+ C1A3              SBnKLinesHeapMax            EQU $ - SBnKLineArray
  74+ C1A3
  75+ C1A3 00 00        LineArrayPtr                DW  0
  76+ C1A5
  77+ C1A5              SBnK_Data_len               EQU $ - SBnKDataBlock
  78+ C1A5
  79+ C1A5              ; --------------------------------------------------------------
  80+ C1A5 21 10 C0     ResetSBnKData:          ld      hl,SBnKDataBlock
  81+ C1A8 11 95 01                             ld      de,SBnK_Data_len
  82+ C1AB AF                                   xor     a
  83+ C1AC CD 32 7D                             call    memfill_dma
  84+ C1AF C9                                   ret
  85+ C1B0              ; --------------------------------------------------------------
  86+ C1B0 21 10 C0     ResetSBnKPosition:      ld      hl,SBnKxlo
  87+ C1B3 06 09                                ld      b, 3*3
  88+ C1B5 AF                                   xor     a
  89+ C1B6 77           .zeroLoop:              ld      (hl),a
  90+ C1B7 23                                   inc     hl
  91+ C1B8 10 FC                                djnz    .zeroLoop
  92+ C1BA C9                                   ret
  93+ C1BB
  94+ C1BB              ; Z Must be at least 2 and positve to warp
  95+ C1BB 21 18 C0     WarpSunCloser:          ld      hl,SBnKzsgn
  96+ C1BE 7E                                   ld      a,(hl)
  97+ C1BF                                      ReturnIfALTNusng 2                      ; hard liit along z axis
  97+ C1BF FE 02       >                        cp    2
  97+ C1C1 D8          >                        ret	 c
  98+ C1C2 35                                   dec     (hl)
  99+ C1C3 C9                                   ret
 100+ C1C4
 101+ C1C4              ; It should normally be behind but someone could fly past a planet, turn aroudn and jump
 102+ C1C4 21 18 C0     WarpSunFurther:         ld      hl,SBnKzsgn
 103+ C1C7 7E                                   ld      a,(hl)
 104+ C1C8                                      ReturnIfAGTENusng $7F                   ; this is the hard limit else it woudl turn negative and flip to -0
 104+ C1C8 FE 7F       >                        cp    $7F
 104+ C1CA D0          >                        ret	 nc
 105+ C1CB 34                                   inc     (hl)                           ; if its negative it will still increase as we will block insane values
 106+ C1CC C9                                   ret
 107+ C1CD              ; This uses UBNKNodeArray as the list
 108+ C1CD              ; the array is 256 * 2 bytes
 109+ C1CD              ; counter is current row y pos
 110+ C1CD              ; byte 1 is start x pos
 111+ C1CD              ; byte 2 is end x pos
 112+ C1CD              ; if they are both 0 then skip
 113+ C1CD              ; its always horizontal, yellow
 114+ C1CD
 115+ C1CD              ; PLANET
 116+ C1CD
 117+ C1CD
 118+ C1CD              .SunNoDraw:             SetCarryFlag                    ; ship is behind so do not draw, so we don't care abour draw as dot
 118+ C1CD 37          >                        scf
 119+ C1CE C9                                   ret
 120+ C1CF
 121+ C1CF
 122+ C1CF
 123+ C1CF              SunBankDraw:            MACRO
 124+ C1CF ~            .drawLoop               ld      a,(hl)
 125+ C1CF ~                                    ld      c,a                     ; c = left column
 126+ C1CF ~                                    inc     hl
 127+ C1CF ~                                    ld      d,(hl)                  ; d = right col
 128+ C1CF ~                                    inc     hl                      ; now ready for next linel
 129+ C1CF ~                                    push    hl,,bc
 130+ C1CF ~                                    cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 131+ C1CF ~                                    IfResultZeroGoto .NoLineDraw
 132+ C1CF ~                                    ld      a,d                     ; get right col back
 133+ C1CF ~                                    sub     c                       ; subtract left so a = length
 134+ C1CF ~                                    inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 135+ C1CF ~                                    call    z, .FixWidth
 136+ C1CF ~                                    ld      d,a                     ; de = length (e - d)
 137+ C1CF ~                                    ld      e,216                   ; yellow
 138+ C1CF ~                                    call    l2_draw_horz_dma        ; draw without bank switch
 139+ C1CF ~            .NoLineDraw:            pop     hl,,bc
 140+ C1CF ~                                    inc     b
 141+ C1CF ~                                    dec     iyh
 142+ C1CF ~                                    IfResultNotZeroGoto  .drawLoop
 143+ C1CF                                      ENDM
 144+ C1CF
 145+ C1CF
 146+ C1CF
 147+ C1CF              SunDraw:                MMUSelectLayer2
 147+ C1CF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 148+ C1D3 3A B3 C5     .OptimiseStartPos:      ld      a,(MinYOffset)
 149+ C1D6                                      JumpIfAIsZero .OffsetIsZero     ; if offset is 0 then just initate as normal
 149+ C1D6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 149+ C1D7 CA E7 C1    >                        jp	    z, .OffsetIsZero
 150+ C1DA                                      JumpIfALTNusng 64, .OffsetLT64  ; if offset >=64 then we adjust and mve to bank 0
 150+ C1DA FE 40       >                        cp      64
 150+ C1DC DA F4 C1    >                        jp		c, .OffsetLT64
 151+ C1DF D6 40        .OffsetGTE64:           sub     64
 152+ C1E1 32 B3 C5                             ld      (MinYOffset),a          ; adjust offset for bank 2
 153+ C1E4 C3 2C C2                             jp      .StartBank2
 154+ C1E7 06 00        .OffsetIsZero:          ld      b,0                     ; row
 155+ C1E9 FD 26 40                             ld      iyh,64                  ; counter
 156+ C1EC 21 A3 C0                             ld      hl,SBnKLineArray        ; set hl to start of array
 157+ C1EF C3 06 C2                             jp      .StartBank1
 158+ C1F2              ;-- Snuck routine in here so that the macro will be happier
 159+ C1F2 3D           .FixWidth:              dec     a                       ; if carry resulted in a value of zero then correct
 160+ C1F3 C9                                   ret
 161+ C1F4 21 A3 C0     .OffsetLT64:            ld      hl,SBnKLineArray        ; adjust hl for line array offset
 162+ C1F7 ED 31                                add     hl,a                    ; .
 163+ C1F9 ED 31                                add     hl,a                    ; .
 164+ C1FB 47                                   ld      b,a                     ; set b row to the actual offset
 165+ C1FC 4F                                   ld      c,a                     ; iyh = 64 - Y offset
 166+ C1FD 3E 40                                ld      a,64                    ; .
 167+ C1FF 91                                   sub     c                       ; .
 168+ C200 FD 67                                ld      iyh,a
 169+ C202 AF                                   xor     a                       ; Ready bank 2 with no offset
 170+ C203 32 B3 C5                             ld      (MinYOffset),a          ; .
 171+ C206 D9           .StartBank1:            exx
 172+ C207 3E 00                                ld      a,LAYER2_SHIFTED_SCREEN_TOP
 173+ C209 CD 38 E0                             call    asm_l2_bank_select      ; get in the first bank, we will only then bank select when needed
 174+ C20C D9                                   exx
 175+ C20D                                      SunBankDraw
 175+ C20D 7E          >.drawLoop               ld      a,(hl)
 175+ C20E 4F          >                        ld      c,a                     ; c = left column
 175+ C20F 23          >                        inc     hl
 175+ C210 56          >                        ld      d,(hl)                  ; d = right col
 175+ C211 23          >                        inc     hl                      ; now ready for next linel
 175+ C212 E5 C5       >                        push    hl,,bc
 175+ C214 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 175+ C215             >                        IfResultZeroGoto .NoLineDraw
 175+ C215 CA 24 C2    >                        jp	z,.NoLineDraw
 175+ C218 7A          >                        ld      a,d                     ; get right col back
 175+ C219 91          >                        sub     c                       ; subtract left so a = length
 175+ C21A 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 175+ C21B CC F2 C1    >                        call    z, .FixWidth
 175+ C21E 57          >                        ld      d,a                     ; de = length (e - d)
 175+ C21F 1E D8       >                        ld      e,216                   ; yellow
 175+ C221 CD 61 E4    >                        call    l2_draw_horz_dma        ; draw without bank switch
 175+ C224 C1 E1       >.NoLineDraw:            pop     hl,,bc
 175+ C226 04          >                        inc     b
 175+ C227 FD 25       >                        dec     iyh
 175+ C229             >                        IfResultNotZeroGoto  .drawLoop
 175+ C229 C2 0D C2    >                        jp	nz,.drawLoop
 176+ C22C 3A B3 C5     .StartBank2:            ld      a,(MinYOffset)
 177+ C22F                                      JumpIfAIsZero .OffsetBank2IsZero; if offset is 0 then we just continue, offset can never be >127 else there would be no draw
 177+ C22F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 177+ C230 CA 44 C2    >                        jp	    z, .OffsetBank2IsZero
 178+ C233 21 23 C1     .NotZeroOffset:         ld      hl,SBnKLineArray + (64 * 2); adjust to correct offset
 179+ C236 ED 31                                add     hl,a
 180+ C238 ED 31                                add     hl,a
 181+ C23A 4F                                   ld      c,a                     ; iyh = 64 - offset
 182+ C23B 3E 40                                ld      a,64                    ; .
 183+ C23D 91                                   sub     c                       ; .
 184+ C23E FD 67                                ld      iyh,a                   ; .
 185+ C240 41                                   ld      b,c                     ; b = offset row
 186+ C241 C3 4C C2                             jp      .drawLineBank2
 187+ C244 21 23 C1     .OffsetBank2IsZero:     ld      hl,SBnKLineArray + (64 * 2); start with offset adjusted
 188+ C247 06 00                                ld      b,0
 189+ C249 FD 26 40                             ld      iyh,64
 190+ C24C D9           .drawLineBank2:         exx
 191+ C24D 3E 40                                ld      a,LAYER2_SHIFTED_SCREEN_MIDDLE
 192+ C24F CD 38 E0                             call    asm_l2_bank_select      ; now do the lower bank
 193+ C252 D9                                   exx
 194+ C253              ; Could make this a sub routine but unwrapping saves a call
 195+ C253                                      SunBankDraw
 195+ C253 7E          >.drawLoop               ld      a,(hl)
 195+ C254 4F          >                        ld      c,a                     ; c = left column
 195+ C255 23          >                        inc     hl
 195+ C256 56          >                        ld      d,(hl)                  ; d = right col
 195+ C257 23          >                        inc     hl                      ; now ready for next linel
 195+ C258 E5 C5       >                        push    hl,,bc
 195+ C25A BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 195+ C25B             >                        IfResultZeroGoto .NoLineDraw
 195+ C25B CA 6A C2    >                        jp	z,.NoLineDraw
 195+ C25E 7A          >                        ld      a,d                     ; get right col back
 195+ C25F 91          >                        sub     c                       ; subtract left so a = length
 195+ C260 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 195+ C261 CC F2 C1    >                        call    z, .FixWidth
 195+ C264 57          >                        ld      d,a                     ; de = length (e - d)
 195+ C265 1E D8       >                        ld      e,216                   ; yellow
 195+ C267 CD 61 E4    >                        call    l2_draw_horz_dma        ; draw without bank switch
 195+ C26A C1 E1       >.NoLineDraw:            pop     hl,,bc
 195+ C26C 04          >                        inc     b
 195+ C26D FD 25       >                        dec     iyh
 195+ C26F             >                        IfResultNotZeroGoto  .drawLoop
 195+ C26F C2 53 C2    >                        jp	nz,.drawLoop
 196+ C272 C9                                   ret
 197+ C273
 198+ C273              ; --------------------------------------------------------------
 199+ C273              ; This sets current universe object to a star / sun, they use sign + 23 bit positions
 200+ C273 CD A5 C1     CreateSun:              call    ResetSBnKData
 201+ C276 3A 26 82                             ld      a,(WorkingSeeds+3)
 202+ C279 E6 07                                and     %00000111
 203+ C27B F6 81                                or      %10000001
 204+ C27D 32 18 C0                             ld      (SBnKzsgn),a
 205+ C280 3A 28 82                             ld      a,(WorkingSeeds+5)
 206+ C283 E6 03                                and     %00000011
 207+ C285 32 12 C0                             ld      (SBnKxsgn),a
 208+ C288 32 15 C0                             ld      (SBnKysgn),a
 209+ C28B 21 00 00                             ld      hl, $0000
 210+ C28E 22 17 C0                             ld      (SBnKzhi),hl
 211+ C291 3E E3                                ld      a, $E3
 212+ C293 32 16 C0                             ld      (SBnKzlo),a
 213+ C296 C9                                   ret
 214+ C297              ; --------------------------------------------------------------
 215+ C297              ; This creates a sun relative to space station on launch
 216+ C297 CD A5 C1     CreateSunLaunched:      call    ResetSBnKData
 217+ C29A 21 00 00                             ld      hl,0
 218+ C29D 3E 00                                ld      a,0
 219+ C29F 22 10 C0                             ld      (SBnKxlo),hl
 220+ C2A2 22 13 C0                             ld      (SBnKylo),hl
 221+ C2A5 21 00 E0                             ld      hl,$E000
 222+ C2A8 22 16 C0                             ld      (SBnKzlo),hl
 223+ C2AB 32 12 C0                             ld      (SBnKxsgn),a
 224+ C2AE 32 18 C0                             ld      (SBnKzsgn),a
 225+ C2B1 3E 06                                ld      a,$06
 226+ C2B3 32 15 C0                             ld      (SBnKysgn),a
 227+ C2B6 C9                                   ret
 228+ C2B7              ; --------------------------------------------------------------
 229+ C2B7              ; This sets current universe object to a planet,they use sign + 23 bit positions
 230+ C2B7              ;;TODOCreatePlanet:           call    ResetSBnKData
 231+ C2B7              ;;TODO                        ld      a,(DisplayTekLevel)
 232+ C2B7              ;;TODO                        and     $00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 233+ C2B7              ;;TODO                        or      $10000000
 234+ C2B7              ;;TODO                        ld      (SBnKShipType),a
 235+ C2B7              ;;TODO                        xor     a
 236+ C2B7              ;;TODO                        ld      (SBnKaiatkecm),a
 237+ C2B7              ;;TODO                        MaxUnivPitchAndRoll
 238+ C2B7              ;;TODO                        ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 239+ C2B7              ;;TODO                        and     %00000011               ; .
 240+ C2B7              ;;TODO                        adc     3                       ; .
 241+ C2B7              ;;TODO                        ld      (SBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
 242+ C2B7              ;;TODO                        rr      a
 243+ C2B7              ;;TODO                        ld      (PlanetXsgn),a
 244+ C2B7              ;;TODO                        ld      (PlanetYsgn),a
 245+ C2B7              ;;TODO                        ret
 246+ C2B7
 247+ C2B7
 248+ C2B7                                 ;     include "./Maths/ADDHLDESignBC.asm"
 249+ C2B7
 250+ C2B7 7C           SunADDHLDESignedv3:     ld      a,h
 251+ C2B8 E6 80                                and     SignOnly8Bit
 252+ C2BA 47                                   ld      b,a                         ;save sign bit in b
 253+ C2BB AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 254+ C2BC                                      JumpIfNegative .SunADDHLDEOppSGN    ;Signs are opposite there fore we can subtract to get difference
 254+ C2BC FA D7 C2    >                        jp		m, .SunADDHLDEOppSGN
 255+ C2BF 78           .SunADDHLDESameSigns:   ld      a,b
 256+ C2C0 B2                                   or      d
 257+ C2C1                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 257+ C2C1 FA C9 C2    >                        jp		m, .SunADDHLDESameNeg
 258+ C2C4                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 258+ C2C4 FA C9 C2    >                        jp		m, .SunADDHLDESameNeg
 259+ C2C7 19                                   add     hl,de
 260+ C2C8 C9                                   ret
 261+ C2C9 7C           .SunADDHLDESameNeg:     ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 262+ C2CA E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 263+ C2CC 67                                   ld      h,a
 264+ C2CD 7A                                   ld      a,d
 265+ C2CE E6 7F                                and     SignMask8Bit
 266+ C2D0 57                                   ld      d,a
 267+ C2D1 19                                   add     hl,de
 268+ C2D2 3E 80                                ld      a,SignOnly8Bit
 269+ C2D4 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 270+ C2D5 67                                   ld      h,a
 271+ C2D6 C9                                   ret
 272+ C2D7 7C           .SunADDHLDEOppSGN:      ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 273+ C2D8 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 274+ C2DA 67                                   ld      h,a
 275+ C2DB 7A                                   ld      a,d
 276+ C2DC E6 7F                                and     SignMask8Bit
 277+ C2DE 57                                   ld      d,a
 278+ C2DF B7                                   or      a
 279+ C2E0 ED 52                                sbc     hl,de
 280+ C2E2 38 04                                jr      c,.SunADDHLDEOppInvert
 281+ C2E4 78           .SunADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 282+ C2E5 B4                                   or      h
 283+ C2E6 67                                   ld      h,a                         ; set the previou sign value
 284+ C2E7 C9                                   ret
 285+ C2E8              .SunADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 285+ C2E8 AF          >                    xor a
 285+ C2E9 95          >                    sub l
 285+ C2EA 6F          >                    ld l,a
 285+ C2EB 9F          >                    sbc a,a
 285+ C2EC 94          >                    sub h
 285+ C2ED 67          >                    ld h,a
 286+ C2EE 78                                   ld      a,b
 287+ C2EF EE 80                                xor     SignOnly8Bit                ; flip sign bit
 288+ C2F1 B4                                   or      h
 289+ C2F2 67                                   ld      h,a                         ; recover sign
 290+ C2F3 C9                                   ret
 291+ C2F4
 292+ C2F4              ; we could cheat, flip the sign of DE and just add but its not very optimised
 293+ C2F4 7C           .SunSUBHLDESignedv3:        ld      a,h
 294+ C2F5 E6 80                                and     SignOnly8Bit
 295+ C2F7 47                                   ld      b,a                         ;save sign bit in b
 296+ C2F8 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 297+ C2F9                                      JumpIfNegative .SunSUBHLDEOppSGN        ;Signs are opposite therefore we can add
 297+ C2F9 FA 27 C3    >                        jp		m, .SunSUBHLDEOppSGN
 298+ C2FC 78           .SunSUBHLDESameSigns:       ld      a,b
 299+ C2FD B2                                   or      d
 300+ C2FE                                      JumpIfNegative .SunSUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 300+ C2FE FA 08 C3    >                        jp		m, .SunSUBHLDESameNeg
 301+ C301 B7                                   or      a
 302+ C302 ED 52                                sbc     hl,de
 303+ C304                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 303+ C304 FA 1B C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 304+ C307 C9                                   ret
 305+ C308 7C           .SunSUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 306+ C309 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 307+ C30B 67                                   ld      h,a
 308+ C30C 7A                                   ld      a,d
 309+ C30D E6 7F                                and     SignMask8Bit
 310+ C30F 57                                   ld      d,a
 311+ C310 B7                                   or      a
 312+ C311 ED 52                                sbc     hl,de
 313+ C313                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 313+ C313 FA 1B C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 314+ C316 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 315+ C317 F6 80                                or      SignOnly8Bit
 316+ C319 67                                   ld      h,a
 317+ C31A C9                                   ret
 318+ C31B              .SunSUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 318+ C31B AF          >                    xor a
 318+ C31C 95          >                    sub l
 318+ C31D 6F          >                    ld l,a
 318+ C31E 9F          >                    sbc a,a
 318+ C31F 94          >                    sub h
 318+ C320 67          >                    ld h,a
 319+ C321 78                                   ld      a,b
 320+ C322 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 321+ C324 B4                                   or      h
 322+ C325 67                                   ld      h,a                         ; recover sign
 323+ C326 C9                                   ret
 324+ C327 B7           .SunSUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 325+ C328 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 326+ C329 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 327+ C32B 67                                   ld      h,a
 328+ C32C 7A                                   ld      a,d
 329+ C32D E6 7F                                and     SignMask8Bit
 330+ C32F 57                                   ld      d,a
 331+ C330 19                                   add     hl,de
 332+ C331 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 333+ C332 B4                                   or      h
 334+ C333 67                                   ld      h,a                         ; set the previou sign value
 335+ C334 C9                                   ret
 336+ C335
 337+ C335
 338+ C335              .SunSBCHLDESigned:      JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 338+ C335 CB 7C       >                        bit 	7,h
 338+ C337 C2 48 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 339+ C33A              .SunSBCHLDEhlPos:       JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 339+ C33A CB 7C       >                        bit 	7,h
 339+ C33C C2 48 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 340+ C33F ED 52        .SunSBCHLDEhlPosDePos:  sbc     hl,de                           ; ignore overflow for now will sort later TODO
 341+ C341 C9                                   ret
 342+ C342 CB BA        .SunSBCHLDEhlPosDeNeg:  res     7,d
 343+ C344 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 344+ C345 CB FA                                set     7,d
 345+ C347 C9                                   ret
 346+ C348 CB BC        .SunSBCHLDEhlNeg:       res     7,h
 347+ C34A                                      JumpOnBitSet d,7,.SunSBCHLDEhlNegdeNeg
 347+ C34A CB 7A       >                        bit 	7,d
 347+ C34C C2 54 C3    >                        jp      nz,.SunSBCHLDEhlNegdeNeg
 348+ C34F ED 52        .SunSBCHLDEhlNegdePos:  sbc     hl,de                       ; ignore overflow for now will sort later TODO
 349+ C351 CB FC                                set     7,h
 350+ C353 C9                                   ret
 351+ C354 CB BA        .SunSBCHLDEhlNegdeNeg:      res     7,d
 352+ C356 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 353+ C357 CB FA                                set     7,d
 354+ C359 CB FC                                set     7,h
 355+ C35B C9                                   ret
 356+ C35C
 357+ C35C
 358+ C35C                                      include "./Universe/Sun/TransposeSunXX12BySunToSunXX15.asm"
# file opened: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
   1++C35C              TransposeSXX12BySunToSXX15:
   2++C35C 2A 7E C0                             ld		hl,(SBnKXX12xLo)					; get X into HL
   3++C35F 7C                                   ld		a,h			                        ; get XX12 Sign
   4++C360 E6 80                                and		$80									; check sign bit on high byte
   5++C362 47                                   ld		b,a									; and put it in of 12xlo in b
   6++C363                                      ;110921 debugld      h,0
   7++C363 7C                                   ld      a,h
   8++C364 E6 7F                                and     $7F
   9++C366 67                                   ld      h,a
  10++C367                                      ;110921 debugld      h,0
  11++C367 ED 5B 10 C0                          ld		de,(SBnKxlo)						;
  12++C36B 3A 12 C0                             ld		a,(SBnKxsgn)						; get Ship Pos (low,high,sign)
  13++C36E E6 80                                and		$80									; make sure we only have bit 7
  14++C370 4F                                   ld		c,a									; and put sign of unkxsgn c
  15++C371 CD 92 92                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++C374 B4                                   or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++C375 67                                   ld		h,a
  18++C376 22 78 C0                             ld		(SBnKXScaled),hl					; now write it out to XX15 X pos
  19++C379              ; ..................................
  20++C379 2A 80 C0                             ld		hl,(SBnKXX12yLo)					; Repeat above for Y coordinate
  21++C37C 7C                                   ld		a,h
  22++C37D E6 80                                and		$80
  23++C37F 47                                   ld		b,a
  24++C380                                      ;110921 debugld      h,0
  25++C380 7C                                   ld      a,h
  26++C381 E6 7F                                and     $7F
  27++C383 67                                   ld      h,a
  28++C384                                      ;110921 debugld      h,0
  29++C384 ED 5B 13 C0                          ld		de,(SBnKylo)
  30++C388 3A 15 C0                             ld		a,(SBnKysgn)
  31++C38B E6 80                                and		$80									; make sure we only have bit 7
  32++C38D 4F                                   ld		c,a
  33++C38E CD 92 92                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++C391 B4                                   or		h									; combine sign in A with H
  35++C392 67                                   ld		h,a
  36++C393 22 7A C0                             ld		(SBnKYScaled),hl
  37++C396              ; ..................................
  38++C396 2A 82 C0                             ld		hl,(SBnKXX12zLo)					; and now repeat for Z cooord
  39++C399 7C                                   ld		a,h
  40++C39A E6 80                                and		$80
  41++C39C 47                                   ld		b,a
  42++C39D                                      ;110921 debugld      h,0
  43++C39D 7C                                   ld      a,h
  44++C39E E6 7F                                and     $7F
  45++C3A0 67                                   ld      h,a
  46++C3A1                                      ;110921 debugld      h,0
  47++C3A1 ED 5B 16 C0                          ld		de,(SBnKzlo)
  48++C3A5 3A 18 C0                             ld		a,(SBnKzsgn)
  49++C3A8 E6 80                                and		$80									; make sure we only have bit 7
  50++C3AA 4F                                   ld		c,a
  51++C3AB CD 92 92                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++C3AE B4                                   or		h									; combine sign in A with H
  53++C3AF 67                                   ld		h,a
  54++C3B0 CB 7C                                bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++C3B2 20 16                                jr		nz,.ClampZto4                        ; result was negative so we need to clamp to 4
  56++C3B4 E6 7F                                and     $7F                                 ; a = value unsigned
  57++C3B6 20 06                                jr      nz,.NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++C3B8 7D                                   ld      a,l                                 ; get low byte now
  59++C3B9                                      JumpIfALTNusng 4,.ClampZto4					; if its < 4 then fix at 4
  59++C3B9 FE 04       >                        cp      4
  59++C3BB DA CA C3    >                        jp		c, .ClampZto4
  60++C3BE 22 7C C0     .NoClampZto4:           ld		(SBnKZScaled),hl					; hl = signed calculation and > 4
  61++C3C1 7D                                   ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  62++C3C2 32 BB 81                             ld      (varT),a
  63++C3C5 7C                                   ld		a,h
  64++C3C6 32 9E 81                             ld      (varU),a
  65++C3C9 C9                                   ret
  66++C3CA              ; This is where we limit 4 to a minimum of 4
  67++C3CA 21 04 00     .ClampZto4:             ld		hl,4
  68++C3CD 22 7C C0                             ld		(SBnKZScaled),hl; BODGE FOR NOW
  69++C3D0 7D                                   ld		a,l
  70++C3D1 32 BB 81                             ld      (varT),a                            ;                                                                           ;;;
  71++C3D4 7C                                   ld		a,h
  72++C3D5 32 9E 81                             ld      (varU),a 						; compatibility for now
  73++C3D8 C9                                   ret
  74++C3D9
# file closed: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
 359+ C3D9
 360+ C3D9
 361+ C3D9 ED 4B 7C C0  ScaleSunTo8Bit:			ld			bc,(SBnKZScaled)
 362+ C3DD 2A 78 C0                             ld			hl,(SBnKXScaled)
 363+ C3E0 ED 5B 7A C0                          ld			de,(SBnKYScaled)
 364+ C3E4 78           .SetABSbc:              ld			a,b
 365+ C3E5 DD 67                                ld			ixh,a
 366+ C3E7 E6 7F                                and			SignMask8Bit
 367+ C3E9 47                                   ld			b,a									; bc = ABS bc
 368+ C3EA 7C           .SetABShl:              ld			a,h
 369+ C3EB DD 6F                                ld			ixl,a
 370+ C3ED E6 7F                                and			SignMask8Bit
 371+ C3EF 67                                   ld			h,a									; hl = ABS hl
 372+ C3F0 7A           .SetABSde:              ld			a,d
 373+ C3F1 FD 67                                ld			iyh,a
 374+ C3F3 E6 7F                                and			SignMask8Bit
 375+ C3F5 57                                   ld			d,a									; de = ABS de
 376+ C3F6 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 377+ C3F7 B4                                   or			h                                   ; XX15+1	\ x hi
 378+ C3F8 B2                                   or			d                                   ; XX15+4	\ y hi
 379+ C3F9 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 380+ C3FB                                      ShiftHLRight1
 380+ C3FB CB 3C       >			   srl h
 380+ C3FD CB 1D       >			   rr  l
 381+ C3FF                                      ShiftDERight1
 381+ C3FF CB 3A       >			   srl d
 381+ C401 CB 1B       >			   rr  e
 382+ C403                                      ShiftBCRight1
 382+ C403 CB 38       >			   srl b
 382+ C405 CB 19       >			   rr  c
 383+ C407 C3 F6 C3                             jp          .ScaleNodeTo8BitLoop
 384+ C40A              ; now we have scaled values we have to deal with sign
 385+ C40A DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 386+ C40C E6 80                                and			SignOnly8Bit
 387+ C40E B0                                   or			b
 388+ C40F 47                                   ld			b,a
 389+ C410 DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 390+ C412 E6 80                                and			SignOnly8Bit
 391+ C414 B4                                   or			h
 392+ C415 67                                   ld			h,a
 393+ C416 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 394+ C418 E6 80                                and			SignOnly8Bit
 395+ C41A B2                                   or			d
 396+ C41B 57                                   ld			d,a
 397+ C41C ED 43 7C C0  .SignsDoneSaveResult:	ld			(SBnKZScaled),bc
 398+ C420 22 78 C0                             ld			(SBnKXScaled),hl
 399+ C423 ED 53 7A C0                          ld			(SBnKYScaled),de
 400+ C427 78                                   ld			a,b
 401+ C428 32 9E 81                             ld			(varU),a
 402+ C42B 79                                   ld			a,c
 403+ C42C 32 BB 81                             ld			(varT),a
 404+ C42F C9                                   ret
 405+ C430
 406+ C430              ;--------------------------------------------------------------------------------------------------------
 407+ C430              ;;;;X = normal scale
 408+ C430              ;;;;ZtempHi = zhi
 409+ C430              ;;;;......................................................
 410+ C430              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 411+ C430              ;;;;  Loop                                              ::LL90
 412+ C430              ;;;;     inc X
 413+ C430              ;;;;     divide X, Y & ZtempHiLo by 2
 414+ C430              ;;;;  Until ZtempHi = 0
 415+ C430              ;;;;......................................................
 416+ C430              ;-LL21---------------------------------------------------------------------------------------------------
 417+ C430              ;                        include "./Universe/NormaliseTransMat.asm"
 418+ C430              ;-LL91---------------------------------------------------------------------------------------------------
 419+ C430
 420+ C430              ; Now we have
 421+ C430              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 422+ C430              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 423+ C430              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 424+ C430              ;
 425+ C430              ;--------------------------------------------------------------------------------------------------------
 426+ C430              ;--------------------------------------------------------------------------------------------------------
 427+ C430              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 428+ C430              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 429+ C430              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 430+ C430              ; Returns
 431+ C430              ;
 432+ C430              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 433+ C430              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 434+ C430              ;
 435+ C430              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 436+ C430              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 437+ C430              ;
 438+ C430              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 439+ C430              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 440+ C430
 441+ C430
 442+ C430               ; TESTEDOK
 443+ C430              SXX12DotOneRow:
 444+ C430              SXX12CalcX:              N0equN1byN2div256 varT, (hl), (SBnKXScaled)       ; T = (hl) * regSunXX15fx /256
 444+ C430 3A 78 C0    >                        ld      a,(SBnKXScaled)                        ;
 444+ C433 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 444+ C434 7E          >                        ld      a,(hl)                        ; A = XX16 element
 444+ C435 57          >                        ld      d,a
 444+ C436 ED 30       >                        mul
 444+ C438 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 444+ C439 32 BB 81    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 445+ C43C 23                                   inc     hl                                  ; move to sign byte
 446+ C43D              SXX12CalcXSign:          AequN1xorN2 SBnKXScaledSign,(hl)             ;
 446+ C43D 3A 79 C0    >                        ld      a,(SBnKXScaledSign)
 446+ C440 AE          >                        xor     (hl)
 447+ C441 32 A1 81                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 448+ C444 23                                   inc     hl
 449+ C445              SXX12CalcY:              N0equN1byN2div256 varQ, (hl),(SBnKYScaled)       ; Q = XX16 * SunXX15 /256 using varQ to hold regSunXX15fx
 449+ C445 3A 7A C0    >                        ld      a,(SBnKYScaled)                        ;
 449+ C448 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 449+ C449 7E          >                        ld      a,(hl)                        ; A = XX16 element
 449+ C44A 57          >                        ld      d,a
 449+ C44B ED 30       >                        mul
 449+ C44D 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 449+ C44E 32 9F 81    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 450+ C451                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 450+ C451 3A BB 81    >                        ld       a,(varT)
 450+ C454 32 A0 81    >                        ld       (varR),a
 451+ C457 23                                   inc     hl
 452+ C458                                      AequN1xorN2 SBnKYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 452+ C458 3A 7B C0    >                        ld      a,(SBnKYScaledSign)
 452+ C45B AE          >                        xor     (hl)
 453+ C45C              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 454+ C45C E5           SSTequSRplusAQ           push    hl
 455+ C45D CD 29 9C                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 456+ C460 E1                                   pop     hl
 457+ C461 32 BB 81                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 458+ C464 23                                   inc     hl
 459+ C465              SXX12CalcZ:              N0equN1byN2div256 varQ,(hl),(SBnKZScaled)       ; Q = |sidev_z| * z_lo / 256
 459+ C465 3A 7C C0    >                        ld      a,(SBnKZScaled)                        ;
 459+ C468 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 459+ C469 7E          >                        ld      a,(hl)                        ; A = XX16 element
 459+ C46A 57          >                        ld      d,a
 459+ C46B ED 30       >                        mul
 459+ C46D 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 459+ C46E 32 9F 81    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 460+ C471                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 460+ C471 3A BB 81    >                        ld       a,(varT)
 460+ C474 32 A0 81    >                        ld       (varR),a
 461+ C477 23                                   inc     hl
 462+ C478                                      AequN1xorN2 SBnKZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 462+ C478 3A 7D C0    >                        ld      a,(SBnKZScaledSign)
 462+ C47B AE          >                        xor     (hl)
 463+ C47C              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 464+ C47C CD 29 9C                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 465+ C47F              ; Now we exit with A = result S = Sign
 466+ C47F C9                                   ret
 467+ C480
 468+ C480
 469+ C480
 470+ C480              ;--------------------------------------------------------------------------------------------------------
 471+ C480                                      include "./Universe/Sun/CopySunXX12ScaledToSunXX18.asm"
# file opened: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
   1++C480              CopySXX12ScaledToSXX18:
   2++C480              CopyResultToSDrawCam:
   3++C480                      ldCopyByte SXX12         ,SXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C480 3A 7E C0    >                        ld       a,(SXX12)
   3++C483 32 6C C0    >                        ld       (SXX18),a
   4++C486                      ldCopyByte SXX12+1       ,SXX18+2           ; XX12+1 => XX18+2
   4++C486 3A 7F C0    >                        ld       a,(SXX12+1)
   4++C489 32 6E C0    >                        ld       (SXX18+2),a
   5++C48C                      ldCopyByte SXX12+2       ,SXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C48C 3A 80 C0    >                        ld       a,(SXX12+2)
   5++C48F 32 6F C0    >                        ld       (SXX18+3),a
   6++C492                      ldCopyByte SXX12+3       ,SXX18+5           ; XX12+3 => XX18+5
   6++C492 3A 81 C0    >                        ld       a,(SXX12+3)
   6++C495 32 71 C0    >                        ld       (SXX18+5),a
   7++C498                      ldCopyByte SXX12+4       ,SXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C498 3A 82 C0    >                        ld       a,(SXX12+4)
   7++C49B 32 72 C0    >                        ld       (SXX18+6),a
   8++C49E                      ldCopyByte SXX12+5       ,SXX18+8           ; XX12+5 => XX18+8
   8++C49E 3A 83 C0    >                        ld       a,(SXX12+5)
   8++C4A1 32 74 C0    >                        ld       (SXX18+8),a
   9++C4A4 C9                   ret
  10++C4A5
# file closed: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
 472+ C4A5              ;                        include "./Variables/CopySunXX12toSunXX15.asm"
 473+ C4A5              ;                       include "./Variables/CopySunXX18toSunXX15.asm"
 474+ C4A5              ;                       include "./Variables/CopySunXX18ScaledToSunXX15.asm"
 475+ C4A5              ;                       include "./Variables/CopySunXX12ToScaled.asm"
 476+ C4A5              ;--------------------------------------------------------------------------------------------------------
 477+ C4A5              ;                        include "./Maths/Utilities/DotProductXX12SunXX15.asm"
 478+ C4A5              ;--------------------------------------------------------------------------------------------------------
 479+ C4A5
 480+ C4A5 DD 25        ScaleDownSXX15byIXH:    dec     ixh
 481+ C4A7 F8                                   ret     m
 482+ C4A8 21 78 C0                             ld      hl,SBnKXScaled
 483+ C4AB CB 3E                                srl     (hl)                        ; SunXX15  \ xnormal lo/2 \ LL93+3 \ counter X
 484+ C4AD 23                                   inc     hl                          ; looking at SunXX15 x sign now
 485+ C4AE 23                                   inc     hl                          ; looking at SunXX15 y Lo now
 486+ C4AF CB 3E                                srl     (hl)                        ; SunXX15+2    \ ynormal lo/2
 487+ C4B1 23                                   inc     hl                          ; looking at SunXX15 y sign now
 488+ C4B2 23                                   inc     hl                          ; looking at SunXX15 z Lo now
 489+ C4B3 CB 3E                                srl     (hl)
 490+ C4B5 C3 A5 C4                             jp      ScaleDownSXX15byIXH
 491+ C4B8 C9                                   ret
 492+ C4B9
 493+ C4B9 21 6C C0     DivideSXX18By2:         ld      hl,SBnKDrawCam0xLo
 494+ C4BC CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 495+ C4BE 23                                   inc     hl                          ; looking at XX18 x sign now
 496+ C4BF 23                                   inc     hl                          ; looking at XX18 y Lo now
 497+ C4C0 CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 498+ C4C2 23                                   inc     hl                          ; looking at XX18 y sign now
 499+ C4C3 23                                   inc     hl                          ; looking at XX18 z Lo now
 500+ C4C4 CB 3E                                srl     (hl)
 501+ C4C6 C9                                   ret
 502+ C4C7
 503+ C4C7              ; ......................................................                                                         ;;;
 504+ C4C7
 505+ C4C7
 506+ C4C7
 507+ C4C7
 508+ C4C7              ; Pitch and roll are 2 phases
 509+ C4C7              ; 1 - we apply our pitch and roll to the ship position
 510+ C4C7              ;       x -> x + alpha * (y - alpha * x)
 511+ C4C7              ;       y -> y - alpha * x - beta * z
 512+ C4C7              ;       z -> z + beta * (y - alpha * x - beta * z)
 513+ C4C7              ; which can be simplified as:
 514+ C4C7              ;       1. K2 = y - alpha * x
 515+ C4C7              ;       2. z = z + beta * K2
 516+ C4C7              ;       3. y = K2 - beta * z
 517+ C4C7              ;       4. x = x + alpha * y
 518+ C4C7              ; 2 - we apply our patch and roll to the ship orientation
 519+ C4C7              ;      Roll calculations:
 520+ C4C7              ;
 521+ C4C7              ;        nosev_y = nosev_y - alpha * nosev_x_hi
 522+ C4C7              ;        nosev_x = nosev_x + alpha * nosev_y_hi
 523+ C4C7              ;      Pitch calculations:
 524+ C4C7              ;
 525+ C4C7              ;        nosev_y = nosev_y - beta * nosev_z_hi
 526+ C4C7              ;        nosev_z = nosev_z + beta * nosev_y_hi
 527+ C4C7
 528+ C4C7
 529+ C4C7                          INCLUDE "./Universe/Sun/SunApplyMyRollAndPitch.asm"
# file opened: ././Universe/Sun/SunApplyMyRollAndPitch.asm
   1++C4C7
   2++C4C7              ; Full version
   3++C4C7              ; 1. K2 = y - alpha * x
   4++C4C7              ; 2. z = z + beta * K2
   5++C4C7              ; 3. y = K2 - beta * z
   6++C4C7              ; 4. x = x + alpha * y
   7++C4C7
   8++C4C7
   9++C4C7
  10++C4C7              ; SunrollWork holds Alpha intermidate results
  11++C4C7              ;  1. K2 = y - alpha * x
  12++C4C7              ;  2. z = z + beta * K2
  13++C4C7              ;  3. y = K2 - beta * z
  14++C4C7              ;  4. x = x + alpha * y
  15++C4C7              ;.... or
  16++C4C7              ;  2. z = z + (beta * (y - alpha * x))
  17++C4C7              ;  3. y = (y - alpha * x) - (beta * z)
  18++C4C7              ;  4. x = x + (alpha * y)
  19++C4C7
  20++C4C7
  21++C4C7              ;----------------------------------------------------------------------------------------------------------------------------------
  22++C4C7              ; Sun version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
  23++C4C7              ; Need to write a test routine for roll and pitchs
  24++C4C7 00 00 00 00  SunAlphaMulX            DS 4
  25++C4CB 00 00 00 00  SunAlphaMulY            DS 4
  26++C4CF 00 00 00 00  SunBetaMulZ             DS 4
  27++C4D3 00 00 00     SunK2                   DS 3
  28++C4D6
  29++C4D6 3A B8 80     SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  30++C4D9 21 AB 80                             ld      hl,BETA
  31++C4DC B6                                   or      (hl)
  32++C4DD E6 7F                                and     SignMask8Bit
  33++C4DF CA 90 C5                             jp      z,.NoRotation
  34++C4E2 3A B8 80     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
  35++C4E5 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
  36++C4E7 57                                   ld      d,a                         ; .
  37++C4E8 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  38++C4EB 5F                                   ld      e,a                         ; .
  39++C4EC 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  40++C4EF CD 94 95                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  41++C4F2              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
  42++C4F2                                      ;ld      (SunAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
  43++C4F2 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  44++C4F3 32 C8 C4                             ld      (SunAlphaMulX+1),a
  45++C4F6 7B                                   ld      a,e
  46++C4F7 32 C9 C4                             ld      (SunAlphaMulX+2),a
  47++C4FA 7A                                   ld      a,d
  48++C4FB 32 CA C4                             ld      (SunAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
  49++C4FE ED 5B 14 C0  .CalcK2:                ld      de,(SBnKyhi)                ; DEL = Y
  50++C502 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  51++C505 6F                                   ld      l,a                         ; .
  52++C506 ED 4B C9 C4                          ld      bc,(SunAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
  53++C50A 3A C8 C4                             ld      a,(SunAlphaMulX+1)          ; Deal with sign in byte 4
  54++C50D 67                                   ld      h,a                         ; .
  55++C50E CD 10 93                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
  56++C511 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
  57++C512 32 D3 C4                             ld      (SunK2),a                   ; we also need to save l for teh beta k2 calc
  58++C515 ED 53 D4 C4                          ld      (SunK2+1),de                ;
  59++C519 EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
  60++C51A 5F                                   ld      e,a                         ; .
  61++C51B 3A AB 80                             ld      a,(BETA)                    ; D = BETA
  62++C51E 57                                   ld      d,a                         ; .
  63++C51F CD 94 95                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
  64++C522 ED 4B 17 C0  .CalcZ:                 ld      bc,(SBnKzhi)                ; BCH = z
  65++C526 3A 16 C0                             ld      a,(SBnKzlo)                 ;
  66++C529 67                                   ld      h,a                         ;
  67++C52A CD 10 93                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
  68++C52D ED 53 17 C0                          ld      (SBnKzhi),de                ; z = resuklt
  69++C531 7D                                   ld      a,l                         ; .
  70++C532 32 16 C0                             ld      (SBnKzlo),a                 ; .
  71++C535 3A AB 80     .CalcBetaZ:             ld      a,(BETA)
  72++C538 EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
  73++C53A 57                                   ld      d,a                         ; .
  74++C53B 3A 16 C0                             ld      a,(SBnKzlo)                 ; HLE = z
  75++C53E 5F                                   ld      e,a                         ; .
  76++C53F 2A 17 C0                             ld      hl,(SBnKzhi)                ; .
  77++C542 CD 94 95                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
  78++C545              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
  79++C545                                      ;ld      (SunBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
  80++C545                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
  81++C545                                      ;ld      (SunBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  82++C545                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  83++C545                                      ;ld      (SunBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  84++C545                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  85++C545                                      ;ld      (SunBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
  86++C545 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
  87++C547 65                                   ld      h,l
  88++C548 ED 5B D4 C4                          ld      de,(SunK2+1)                ; DEL = k2
  89++C54C 3A D3 C4                             ld      a,(SunK2)
  90++C54F 6F                                   ld      l,a
  91++C550 CD 10 93                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
  92++C553 ED 53 14 C0                          ld      (SBnKyhi),de                ; y = DEL = K2 - Beta * Z
  93++C557 7D                                   ld      a,l                         ; .
  94++C558 32 13 C0                             ld      (SBnKylo),a                 ; .
  95++C55B 3A B8 80     .CalcAlphaMulY:         ld      a,(ALPHA)
  96++C55E 57                                   ld      d,a                         ; d = alpha (Q value)
  97++C55F 3A 13 C0                             ld      a,(SBnKylo)                 ; HLE = x sgn, hi, lo
  98++C562 5F                                   ld      e,a                         ; .
  99++C563 2A 14 C0                             ld      hl,(SBnKyhi)                ; .
 100++C566 CD 94 95                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
 101++C569 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
 102++C56A 32 CB C4                             ld      (SunAlphaMulY),a            ; save sign from result, ELC holds actual result
 103++C56D 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
 104++C56E 32 CC C4                             ld      (SunAlphaMulY+1),a
 105++C571 7B                                   ld      a,e
 106++C572 32 CD C4                             ld      (SunAlphaMulY+2),a
 107++C575 7A                                   ld      a,d
 108++C576 32 CE C4                             ld      (SunAlphaMulY+3),a
 109++C579 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
 110++C57B 65                                   ld      h,l                         ; .
 111++C57C ED 5B 11 C0                          ld      de,(SBnKxhi)                ; DEL = Y
 112++C580 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
 113++C583 6F                                   ld      l,a                         ; .
 114++C584 CD 10 93                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
 115++C587 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
 116++C588 63                                   ld      h,e                         ;
 117++C589 32 12 C0     .CopyResultTo2:         ld      (SBnKxlo+2),a               ; .
 118++C58C 22 10 C0                             ld      (SBnKxlo) ,hl               ; .
 119++C58F C9                                   ret
 120++C590 3A 99 81     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 121++C593                                      ReturnIfAIsZero
 121++C593 A7          >                        and     a
 121++C594 C8          >                        ret     z
 122++C595 0E 00                                ld      c,0                         ;
 123++C597 67                                   ld      h,a                         ;
 124++C598 06 80                                ld      b,$80                       ;
 125++C59A ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 126++C59E 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 127++C5A1 6F                                   ld      l,a                         ; .
 128++C5A2 CD 10 93                             call    AddBCHtoDELsigned           ; update speed
 129++C5A5 ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 130++C5A9 7D                                   ld      a,l
 131++C5AA 32 16 C0                             ld      (SBnKzlo),a                ;
 132++C5AD C9                                   ret
 133++C5AE              ;
 134++C5AE              ;SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
 135++C5AE              ;                        ld      hl,BETA
 136++C5AE              ;                        or      (hl)
 137++C5AE              ;                        and     SignMask8Bit
 138++C5AE              ;                        ret     z
 139++C5AE              ;.CalcZ:                 ;break
 140++C5AE              ;                        ld      a,(ALPHA)                   ; get roll magnitude
 141++C5AE              ;                        xor     SignOnly8Bit                ; get Q = -alpha
 142++C5AE              ;                        ld      d,a                         ; d reg represents Q (abount to roll)
 143++C5AE              ;                        ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
 144++C5AE              ;                        ld      e,a                         ;
 145++C5AE              ;                        ld      hl,(SBnKxhi)                ;
 146++C5AE              ;                        call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256
 147++C5AE              ;                        ld      a,d
 148++C5AE              ;                        ld      (SunRollResultp4),a         ; save D (I guess we need the sign?)
 149++C5AE              ;.CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo
 150++C5AE              ;                        ld      h,a
 151++C5AE              ;                        ld      bc,(SBnKyhi)
 152++C5AE              ;                        call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256)
 153++C5AE              ;.SaveResult1:           ld      a,l                         ; SunPitchWork = DEL
 154++C5AE              ;                        ;ld      (SunRollResult), a          ; SunPitchWork + 0 = L
 155++C5AE              ;                        ex      de,hl                       ; SunPitchWork + 1 = E
 156++C5AE              ;.CopyResultTo2:         ld      (SunRollResult+1),a         ; SunPitchWork + 2 = D
 157++C5AE              ;                        ld      (SunRollResult+1) ,hl       ; Copy K to K2 (y - alpha * x)
 158++C5AE              ;                        ;ld      (SunRollResult2+1),hl       ; also HLA = result
 159++C5AE              ;                        ld      a,(SunRollResult)           ; .
 160++C5AE              ;                        ;ld      (SunRollResult2),a          ; .
 161++C5AE              ;.CalcY:                 ld      e,a                         ; so now HLE = result
 162++C5AE              ;                        ld      a,(BETA)                    ; get pitch
 163++C5AE              ;                        ld      d,a                         ; now D = BETA
 164++C5AE              ;                        call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta
 165++C5AE              ;                        ld      bc,(SBnKzhi)                ; BCH = z
 166++C5AE              ;                        ld      a,(SBnKzlo)                 ;
 167++C5AE              ;                        ld      h,a                         ;
 168++C5AE              ;                        call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
 169++C5AE              ;.SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
 170++C5AE              ;                        ld      (SBnKzhi),de                ; .
 171++C5AE              ;                        ld      a,l                         ; .
 172++C5AE              ;                        ld      (SunZResult),a              ; .
 173++C5AE              ;                        ld      (SBnKzlo),a                 ; .
 174++C5AE              ;.CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
 175++C5AE              ;                        ld      e,l                         ;
 176++C5AE              ;                        ld      a,(BETA)                    ; d = - BETA
 177++C5AE              ;                        ld      d,a                         ;
 178++C5AE              ;                        xor     SignOnly8Bit                ;
 179++C5AE              ;                        call    mulHLEbyDSigned             ; DELC = z * - BETA
 180++C5AE              ;                        ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
 181++C5AE              ;                        ld      a,(SunRollResult)           ;
 182++C5AE              ;                        ld      h,a                         ;
 183++C5AE              ;                        call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA)
 184++C5AE              ;                        ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
 185++C5AE              ;                        ld      a,l                         ;
 186++C5AE              ;                        ld      (SBnKylo),a                 ;
 187++C5AE              ;.CalcX:                 ex      de,hl                       ; HLE = DEL = Y
 188++C5AE              ;                        ld      e,l                         ;
 189++C5AE              ;                        ld      a,(ALPHA)
 190++C5AE              ;                        ld      d,a                         ; D = alpha
 191++C5AE              ;                        call    mulHLEbyDSigned             ; DELC = Y * alpha
 192++C5AE              ;                        ld      bc,(SBnKxhi)                ; BCH = x
 193++C5AE              ;                        ld      a,(SBnKxlo)                 ;
 194++C5AE              ;                        ld      h,a                         ;
 195++C5AE              ;                        call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
 196++C5AE              ;                        ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
 197++C5AE              ;                        ld      a,h                         ;
 198++C5AE              ;                        ld      (SBnKxlo),a                 ;
 199++C5AE              ;                        ret
 200++C5AE              ;
# file closed: ././Universe/Sun/SunApplyMyRollAndPitch.asm
 530+ C5AE              ;            INCLUDE "./Universe/SunApplyShipRollAndPitch.asm"
 531+ C5AE
 532+ C5AE 00           SunOnScreen             DB 0
 533+ C5AF 00 00        cLineArrayPtr            DW 0
 534+ C5B1 00           LineCount               DB 0
 535+ C5B2 00           RaggedSize              DB 0
 536+ C5B3 00           MinYOffset              DB 0
 537+ C5B4 00           MaxYOffSet              DB 0
 538+ C5B5 00 00        SunScrnX                DW  0       ; signed
 539+ C5B7 00 00        SunScrnY                DW  0       ; signed
 540+ C5B9 00           SunRadius               DB  0       ; unsigned
 541+ C5BA              ; draw circle
 542+ C5BA
 543+ C5BA              ;
 544+ C5BA              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 545+ C5BA
 546+ C5BA 00 00 00 00  SunVarK                 DS 4
 547+ C5BE 00 00 00     SunVarP                 DS 3
 548+ C5C1 00           SunVarQ                 DS 1
 549+ C5C2 00           SunVarR                 DS 1
 550+ C5C3 00           SunVarS                 DS 1
 551+ C5C4 00           SunVarT                 DS 1
 552+ C5C5
 553+ C5C5              ; Optimisation
 554+ C5C5              ; if a <> 0
 555+ C5C5              ;       divide AH by CD
 556+ C5C5              ; if h <> 0
 557+ C5C5              ;      if c <> 0 return 0
 558+ C5C5              ;      else
 559+ C5C5              ;        divide HL by DE
 560+ C5C5              ; if l <>0
 561+ C5C5              ;      if c or d <> 0 return 0
 562+ C5C5              ;      else
 563+ C5C5              ;        divide l by e
 564+ C5C5              ;
 565+ C5C5 47           SunAHLequAHLDivCDE:     ld      b,a                         ; save a reg
 566+ C5C6 79                                   ld      a,c                         ; check for divide by zero
 567+ C5C7 B2                                   or      d                           ; .
 568+ C5C8 B3                                   or      e                           ; .
 569+ C5C9                                      JumpIfZero      .divideByZero       ; .
 569+ C5C9 CA E2 C5    >                        jp	z,.divideByZero
 570+ C5CC 78                                   ld      a,b                         ; get a back
 571+ C5CD                                      JumpIfAIsNotZero    .divideAHLbyCDE
 571+ C5CD A7          >                        and     a
 571+ C5CE C2 E9 C5    >                        jp	    nz,.divideAHLbyCDE
 572+ C5D1 7C           .AIsZero:               ld      a,h
 573+ C5D2                                      JumpIfAIsNotZero    .divideHLbyDE
 573+ C5D2 A7          >                        and     a
 573+ C5D3 C2 F0 C5    >                        jp	    nz,.divideHLbyDE
 574+ C5D6 7D           .HIsZero:               ld      a,l
 575+ C5D7                                      JumpIfAIsNotZero    .divideLbyE
 575+ C5D7 A7          >                        and     a
 575+ C5D8 C2 FF C5    >                        jp	    nz,.divideLbyE
 576+ C5DB              .resultIsZero:          ZeroA
 576+ C5DB AF          >                        xor a
 577+ C5DC 67                                   ld      h,a                        ; result is zero so set hlde
 578+ C5DD 6F                                   ld      l,a                        ; result is zero so set hlde
 579+ C5DE 54 5D                                ld      de,hl
 580+ C5E0                                      ClearCarryFlag
 580+ C5E0 B7          >                        or a
 581+ C5E1 C9                                   ret
 582+ C5E2 3E FF        .divideByZero:          ld      a,$FF
 583+ C5E4 67                                   ld      h,a
 584+ C5E5 6F                                   ld      l,a
 585+ C5E6 54 5D                                ld      de,hl
 586+ C5E8                                      SetCarryFlag
 586+ C5E8 37          >                        scf
 587+ C5E9              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 588+ C5E9              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 589+ C5E9 CD 07 94     .divideAHLbyCDE:        call    Div24by24
 590+ C5EC EB                                   ex      hl,de                         ; ahl is result
 591+ C5ED 79                                   ld      a,c                           ; ahl is result
 592+ C5EE                                      ClearCarryFlag
 592+ C5EE B7          >                        or a
 593+ C5EF
 594+ C5EF C9                                   ret
 595+ C5F0              ; AHL = 0hl/0de as A is zero
 596+ C5F0 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 597+ C5F1                                      JumpIfAIsNotZero   .resultIsZero
 597+ C5F1 A7          >                        and     a
 597+ C5F2 C2 DB C5    >                        jp	    nz,.resultIsZero
 598+ C5F5 44 4D                                ld      bc,hl
 599+ C5F7 CD 63 98                             call    BC_Div_DE                   ; BC = HL/DE
 600+ C5FA 60 69                                ld      hl,bc
 601+ C5FC                                      ZeroA                               ; so we can set A to Zero
 601+ C5FC AF          >                        xor a
 602+ C5FD                                      ClearCarryFlag
 602+ C5FD B7          >                        or a
 603+ C5FE C9                                   ret
 604+ C5FF              ; AHL = 00l/00e as A and H are zero
 605+ C5FF 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 606+ C600 B2                                   or      d
 607+ C601                                      JumpIfAIsNotZero   .resultIsZero
 607+ C601 A7          >                        and     a
 607+ C602 C2 DB C5    >                        jp	    nz,.resultIsZero
 608+ C605 4B                                   ld      c,e
 609+ C606 5D                                   ld      e,l
 610+ C607 CD 25 98                             call    E_Div_C
 611+ C60A 6F                                   ld      l,a
 612+ C60B                                      ZeroA
 612+ C60B AF          >                        xor a
 613+ C60C 67                                   ld      h,a
 614+ C60D                                      ClearCarryFlag
 614+ C60D B7          >                        or a
 615+ C60E C9                                   ret
 616+ C60F
 617+ C60F
 618+ C60F              ; Needs tuning for registers vs memroy
 619+ C60F 22 BE C5     SunKEquAHLDivCDE:       ld      (SunVarP),hl
 620+ C612 32 C0 C5                             ld      (SunVarP+2),a
 621+ C615 ED 53 C1 C5                          ld      (SunVarQ),de
 622+ C619 79                                   ld      a,c
 623+ C61A 32 C3 C5                             ld      (SunVarS),a
 624+ C61D 3A BE C5     SunDivD3B:              ld      a,(SunVarP)                 ; Ensure P is at least 1
 625+ C620 F6 01                                or      1
 626+ C622 32 BE C5                             ld      (SunVarP),a
 627+ C625 3A C0 C5                             ld      a,(SunVarP+2)               ; T = Sign xor Sign
 628+ C628 21 C3 C5                             ld      hl,SunVarS
 629+ C62B AE                                   xor     (hl)
 630+ C62C E6 80                                and     SignOnly8Bit
 631+ C62E 32 C4 C5                             ld      (SunVarT),a
 632+ C631 06 00                                ld      b,0                         ; b = y counter
 633+ C633 3A C0 C5                             ld      a,(SunVarP+2)               ; a = abs high byte of p
 634+ C636 E6 7F                                and     SignMask8Bit                ; .
 635+ C638 2A BE C5                             ld      hl,(SunVarP)                ; shift P left
 636+ C63B              .SunDVL9:               JumpIfAGTENusng   64, .SunDV14      ; if high p > 64 then go to DV14
 636+ C63B FE 40       >                        cp     64
 636+ C63D D2 4A C6    >                        jp		nc,.SunDV14
 637+ C640                                      ShiftHLLeft1                        ;
 637+ C640 CB 25       >			   sla l
 637+ C642 CB 14       >			   rl  h
 638+ C644 CB 17                                rl      a                           ;
 639+ C646 04                                   inc     b                           ; increase shift count
 640+ C647 C3 3B C6                             jp      .SunDVL9
 641+ C64A 22 BE C5     .SunDV14:               ld      (SunVarP),hl                ; save off var P
 642+ C64D 32 C0 C5                             ld      (SunVarP+2),a
 643+ C650 3A C3 C5                             ld      a,(SunVarS)                 ; a= ABS varS
 644+ C653 E6 7F                                and     SignMask8Bit
 645+ C655 2A C1 C5                             ld      hl,(SunVarQ)                ; HL = vars Q & R
 646+ C658 05           .SunDVL6:               dec     b                           ; reduce b counter by 1
 647+ C659                                      ShiftHLLeft1                        ; varQRA  shift left
 647+ C659 CB 25       >			   sla l
 647+ C65B CB 14       >			   rl  h
 648+ C65D CB 17                                rl      a                           ;
 649+ C65F F2 58 C6                             jp      p, .SunDVL6                 ; keep shifting until bit 7 of a is set
 650+ C662 22 C1 C5                             ld      (SunVarQ),hl                ; save QR
 651+ C665 32 C3 C5     .SunDV9:                ld      (SunVarS),a                 ; save S
 652+ C668                                      ;ld      a,h
 653+ C668                                      ;ld      (varQ),a
 654+ C668 4F                                   ld      c,a
 655+ C669 3A C0 C5                             ld      a,(SunVarP+2)
 656+ C66C C5                                   push    bc                          ; save shift counter in b
 657+ C66D CD D7 97                             call    DIV16Amul256dCUNDOC
 658+ C670                                      ;call    RequAmul256divQ
 659+ C670 79                                   ld      a, c
 660+ C671 32 A0 81                             ld      (varR),a
 661+ C674 C1                                   pop     bc                          ; retrieve shift counter
 662+ C675 21 00 00                             ld      hl,0                        ; set K to 0
 663+ C678 22 BA C5                             ld      (SunVarK),hl                ; .
 664+ C67B 22 BC C5                             ld      (SunVarK+2),hl              ; .
 665+ C67E CB 78                                bit     7,b                         ; is counter positive
 666+ C680 28 32                                jr      z,.SunDV12                  ; .
 667+ C682 3A A0 81                             ld      a,(varR)                    ;
 668+ C685 CB 27        .SunDVL8:               sla     a                           ; Shift K by 1 left
 669+ C687 21 BB C5                             ld      hl,SunVarK+1                ; .
 670+ C68A CB 16                                rl      (hl)                        ; .
 671+ C68C 23                                   inc     hl                          ; .
 672+ C68D CB 16                                rl      (hl)                        ; .
 673+ C68F 23                                   inc     hl                          ; .
 674+ C690 CB 16                                rl      (hl)                        ; .
 675+ C692 04                                   inc     b
 676+ C693 20 F0                                jr      nz,.SunDVL8                 ; loop until K is shifted
 677+ C695 32 BA C5                             ld      (SunVarK),a
 678+ C698 3A BD C5                             ld      a,(SunVarK+3)
 679+ C69B 21 C4 C5                             ld      hl,SunVarT
 680+ C69E B6                                   or      (hl)
 681+ C69F 32 BD C5                             ld      (SunVarK+3),a
 682+ C6A2 C9                                   ret
 683+ C6A3 3A A0 81     .SunDV13:               ld      a,(varR)                    ; when we get here, shift is zero
 684+ C6A6 32 BA C5                             ld      (SunVarK),a
 685+ C6A9 3A BD C5                             ld      a,(SunVarK+3)
 686+ C6AC 21 C4 C5                             ld      hl,SunVarT
 687+ C6AF B6                                   or      (hl)
 688+ C6B0 32 BD C5                             ld      (SunVarK+3),a
 689+ C6B3 C9                                   ret
 690+ C6B4 78           .SunDV12:               ld      a,b
 691+ C6B5 A7                                   and     a
 692+ C6B6 28 EB                                jr      z,.SunDV13
 693+ C6B8 3A A0 81                             ld      a,(varR)                    ; it probably is already R so need to test
 694+ C6BB CB 2F        .SunDVL10:              sra     a                           ; Shift K by 1 left
 695+ C6BD 05                                   dec     b
 696+ C6BE 20 FB                                jr      nz,.SunDVL10
 697+ C6C0 32 BA C5                             ld      (SunVarK),a                 ; as original divide was onyl 8 bits K 1,2,3 don;t matter
 698+ C6C3 3A C4 C5                             ld      a,(SunVarT)
 699+ C6C6 32 BD C5                             ld      (SunVarK+3),a
 700+ C6C9 C9                                   ret
 701+ C6CA
 702+ C6CA
 703+ C6CA
 704+ C6CA 47           SunProcessVertex:       ld      b,a                         ; save sign byte
 705+ C6CB ED 5B 16 C0  .SunProjectToEye:       ld      de,(SBnKzlo)                ; X Pos = X / Z
 706+ C6CF 3A 18 C0                             ld      a,(SBnKzsgn)                ; CDE = z
 707+ C6D2 FD 67                                ld      iyh,a                       ; save sign
 708+ C6D4                                      ClearSignBitA
 708+ C6D4 E6 7F       >                        and     SignMask8Bit
 709+ C6D6                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 710+ C6D6              ;                        ld      c,a                         ;
 711+ C6D6 5A                                   ld      e,d
 712+ C6D7 57                                   ld      d,a
 713+ C6D8 0E 00                                ld      c,0
 714+ C6DA                                      ; added above to correct positioning as in reality its X/(Z/256)
 715+ C6DA 78                                   ld      a,b                         ; restore sign byte
 716+ C6DB FD 6F                                ld      iyl,a                       ; save sign
 717+ C6DD                                      ClearSignBitA
 717+ C6DD E6 7F       >                        and     SignMask8Bit
 718+ C6DF CD C5 C5                             call SunAHLequAHLDivCDE             ; AHL = AHL/CDE unsigned
 719+ C6E2              .CheckPosOnScreenX:     JumpIfAIsNotZero .IsOffScreen         ; if A has a value then its way too large regardless of sign
 719+ C6E2 A7          >                        and     a
 719+ C6E3 C2 00 C7    >                        jp	    nz,.IsOffScreen
 720+ C6E6                                      JumpOnLeadSignSet h, .IsOffScreen      ; or bit 7 set of h
 720+ C6E6 7C          >                        ld      a,h
 720+ C6E7 E6 80       >                        and     SignOnly8Bit
 720+ C6E9 C2 00 C7    >                        jp      nz,.IsOffScreen
 721+ C6EC 7C                                   ld      a,h
 722+ C6ED                                      ReturnIfAGTEusng 4                  ; if a > 1024 then its way too large regardless of sign
 722+ C6ED FE 04       >                        cp    4
 722+ C6EF D0          >                        ret	 nc
 723+ C6F0 FD 7C                                ld      a,iyh                       ; now deal with the sign
 724+ C6F2 FD AD                                xor     iyl
 725+ C6F4                                      SignBitOnlyA                        ; a= resultant sign
 725+ C6F4 E6 80       >                        and     SignOnly8Bit
 726+ C6F6 28 06                                jr      z,.calculatedVert           ; result is positive so we don't 2's compliment it
 727+ C6F8              .XIsNegative:           NegHL                               ; make 2's c as negative
 727+ C6F8 AF          >                    xor a
 727+ C6F9 95          >                    sub l
 727+ C6FA 6F          >                    ld l,a
 727+ C6FB 9F          >                    sbc a,a
 727+ C6FC 94          >                    sub h
 727+ C6FD 67          >                    ld h,a
 728+ C6FE              .calculatedVert:        ClearCarryFlag
 728+ C6FE B7          >                        or a
 729+ C6FF C9                                   ret
 730+ C700 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 731+ C703 FD 7C                                ld      a,iyh
 732+ C705 FD AD                                xor     iyl
 733+ C707                                      SignBitOnlyA
 733+ C707 E6 80       >                        and     SignOnly8Bit
 734+ C709 28 02                                jr      z,.calculatedOffScreen
 735+ C70B 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 736+ C70C 23                                   inc     hl                          ; .
 737+ C70D              .calculatedOffScreen:   SetCarryFlag
 737+ C70D 37          >                        scf
 738+ C70E C9                                   ret
 739+ C70F
 740+ C70F
 741+ C70F              ; .........................................................................................................................
 742+ C70F              ; we only hit this if z is positive so we can ignore signs
 743+ C70F ED 4B 16 C0  SunCalculateRadius:     ld      bc,(SBnKzlo)                ; DBC = z position
 744+ C713 3A 18 C0                             ld      a,(SBnKzsgn)                ;
 745+ C716 57                                   ld      d,a                         ;
 746+ C717 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 747+ C71A CD D0 96                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 748+ C71D B4                                   or      h                           ; if A or H are not 0 then max Radius
 749+ C71E                                      JumpIfAIsZero  .SaveRadius
 749+ C71E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 749+ C71F CA 24 C7    >                        jp	    z, .SaveRadius
 750+ C722 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 751+ C724 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 752+ C725 F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 753+ C727 32 B9 C5                             ld      (SunRadius),a               ; save a copy of radius now for later
 754+ C72A 5F                                   ld      e,a                         ; as later code expects it to be in e
 755+ C72B C9                                   ret
 756+ C72C
 757+ C72C              ; Shorter version when sun does not need to be processed to screen
 758+ C72C 3A 12 C0     SunUpdateCompass:       ld      a,(SBnKxsgn)
 759+ C72F 2A 10 C0                             ld      hl,(SBnKxlo)
 760+ C732 CD CA C6                             call    SunProcessVertex
 761+ C735 22 19 C0                             ld      (SunCompassX),hl
 762+ C738 3A 15 C0                             ld      a,(SBnKysgn)
 763+ C73B 2A 13 C0                             ld      hl,(SBnKylo)
 764+ C73E CD CA C6                             call    SunProcessVertex
 765+ C741 22 1B C0                             ld      (SunCompassY),hl
 766+ C744 C9                                   ret
 767+ C745
 768+ C745                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 769+ C745 CD D6 C4     SunUpdateAndRender:     call    SunApplyMyRollAndPitch
 770+ C748 3A 18 C0     .CheckDrawable:         ld      a,(SBnKzsgn)
 771+ C74B                                      JumpIfAGTENusng 48,  SunUpdateCompass ; at a distance over 48 its too far away
 771+ C74B FE 30       >                        cp     48
 771+ C74D D2 2C C7    >                        jp		nc,SunUpdateCompass
 772+ C750 21 17 C0                             ld      hl,SBnKzhi                  ; if the two high bytes are zero then its too close
 773+ C753 B6                                   or      (hl)
 774+ C754                                      JumpIfAIsZero       SunUpdateCompass
 774+ C754 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 774+ C755 CA 2C C7    >                        jp	    z, SunUpdateCompass
 775+ C758 3A 12 C0     .calculateX:            ld      a,(SBnKxsgn)
 776+ C75B 2A 10 C0                             ld      hl,(SBnKxlo)
 777+ C75E CD CA C6                             call    SunProcessVertex            ; now returns carry set for failure
 778+ C761 22 19 C0                             ld      (SunCompassX),hl
 779+ C764 D8                                   ret     c
 780+ C765 1E 80        .calculatedX:           ld      e,ScreenCenterX
 781+ C767 16 00                                ld      d,0
 782+ C769                                      ClearCarryFlag
 782+ C769 B7          >                        or a
 783+ C76A ED 5A                                adc     hl,de
 784+ C76C                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 785+ C76C 22 B5 C5                             ld      (SunScrnX),hl               ; save projected X Position, 2's compliment
 786+ C76F 3A 15 C0     .calculateY:            ld      a,(SBnKysgn)
 787+ C772 2A 13 C0                             ld      hl,(SBnKylo)
 788+ C775 CD CA C6                             call    SunProcessVertex            ; now returns carry set for failure
 789+ C778 22 1B C0                             ld      (SunCompassY),hl
 790+ C77B D8                                   ret     c
 791+ C77C 1E 60        .calculatedY:           ld      e,ScreenCenterY
 792+ C77E 16 00                                ld      d,0
 793+ C780 EB                                   ex      de,hl
 794+ C781                                      ClearCarryFlag
 794+ C781 B7          >                        or a
 795+ C782 ED 52                                sbc     hl,de
 796+ C784                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 797+ C784 22 B7 C5                             ld      (SunScrnY),hl               ; save projected Y Position, 2's compliment
 798+ C787              ; .........................................................................................................................
 799+ C787 CD 0F C7                             call    SunCalculateRadius
 800+ C78A              ; .........................................................................................................................
 801+ C78A 2A B5 C5     .CheckIfSunOnScreen:    ld      hl,(SunScrnX)               ; get x pixel position
 802+ C78D FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 803+ C790 16 00                                ld      d,0                         ; e still holds radius
 804+ C792 7C                                   ld      a,h
 805+ C793                                      JumpOnLeadSignSet   h,.CheckXNegative
 805+ C793 7C          >                        ld      a,h
 805+ C794 E6 80       >                        and     SignOnly8Bit
 805+ C796 C2 AC C7    >                        jp      nz,.CheckXNegative
 806+ C799 7C           .CheckXPositive:        ld      a,h
 807+ C79A                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 807+ C79A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 807+ C79B CA B5 C7    >                        jp	    z, .XOnScreen
 808+ C79E 16 00                                ld      d,0                         ; de = radius
 809+ C7A0                                      ClearCarryFlag
 809+ C7A0 B7          >                        or a
 810+ C7A1 ED 52                                sbc     hl,de
 811+ C7A3 FA B5 C7                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 812+ C7A6 7C                                   ld      a,h
 813+ C7A7                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 813+ C7A7 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 813+ C7A8 CA B5 C7    >                        jp	    z, .XOnScreen
 814+ C7AB C9                                   ret                                 ; None of the X coordinates are on screen
 815+ C7AC 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 816+ C7AE                                      ClearCarryFlag
 816+ C7AE B7          >                        or a
 817+ C7AF ED 5A                                adc     hl,de                       ; so we have hl - de
 818+ C7B1 F2 B5 C7                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 819+ C7B4 C9                                   ret                                 ; else x is totally off the left side of the screen
 820+ C7B5              ; .........................................................................................................................
 821+ C7B5 2A B7 C5     .XOnScreen:             ld      hl,(SunScrnY)               ; now Check Y coordinate
 822+ C7B8                                      JumpOnLeadSignSet   h,.CheckYNegative
 822+ C7B8 7C          >                        ld      a,h
 822+ C7B9 E6 80       >                        and     SignOnly8Bit
 822+ C7BB C2 DC C7    >                        jp      nz,.CheckYNegative
 823+ C7BE 7C           .CheckYPositive:        ld      a,h
 824+ C7BF                                      JumpIfAIsNotZero   .PosYCheck2
 824+ C7BF A7          >                        and     a
 824+ C7C0 C2 C9 C7    >                        jp	    nz,.PosYCheck2
 825+ C7C3 7D                                   ld      a,l
 826+ C7C4 E6 80                                and     %10000000
 827+ C7C6 CA E5 C7                             jp      z,YOnScreen                ; at least 1 row is on screen as > 128
 828+ C7C9 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 829+ C7CB                                      ClearCarryFlag
 829+ C7CB B7          >                        or a
 830+ C7CC ED 52                                sbc     hl,de
 831+ C7CE FA E5 C7                             jp      m,YOnScreen                ; so if its -ve then it spans screen
 832+ C7D1 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 833+ C7D2                                      ReturnIfANotZero                    ; .
 833+ C7D2 A7          >                        and     a
 833+ C7D3 C0          >                        ret     nz
 834+ C7D4 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 835+ C7D5 E6 80                                and     %10000000                   ; .
 836+ C7D7                                      ReturnIfANotZero                    ; .
 836+ C7D7 A7          >                        and     a
 836+ C7D8 C0          >                        ret     nz
 837+ C7D9 C3 E5 C7                             jp      YOnScreen                  ; so Y at least spans
 838+ C7DC 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 839+ C7DE                                      ClearCarryFlag
 839+ C7DE B7          >                        or a
 840+ C7DF ED 5A                                adc     hl,de                       ; so we have hl - de
 841+ C7E1 F2 E5 C7                             jp      p,YOnScreen                ; if result was positive then it spans screen so we are good
 842+ C7E4 C9                                   ret                                 ; else never gets above 0 so return
 843+ C7E5              ; .........................................................................................................................
 844+ C7E5 21 A3 C0     YOnScreen:             ld      hl,SBnKLineArray            ; we load start and end as 0
 845+ C7E8 11 00 01                             ld		de, SunLineArraySize        ; just if we get a 0,0 genuine we will not plot it
 846+ C7EB 3E 00                                ld		a,0
 847+ C7ED CD 32 7D                             call	memfill_dma
 848+ C7F0              ; .........................................................................................................................
 849+ C7F0 11 00 00     .SetRaggedEdgeMax:      ld      de,0
 850+ C7F3 3A B9 C5                             ld      a,(SunRadius)               ; get readius
 851+ C7F6 FE 60                                cp      96                          ; if > 96 then roll carry flag into e
 852+ C7F8                                      FlipCarryFlag
 852+ C7F8 3F          >                        ccf
 853+ C7F9 CB 13                                rl      e                           ; if > 40 then roll carry flag into e
 854+ C7FB FE 28                                cp      40
 855+ C7FD                                      FlipCarryFlag
 855+ C7FD 3F          >                        ccf
 856+ C7FE CB 13                                rl      e
 857+ C800 FE 10                                cp      16                          ; if > 16 then roll carry flag into e
 858+ C802                                      FlipCarryFlag
 858+ C802 3F          >                        ccf
 859+ C803 CB 13                                rl     e
 860+ C805 7B                                   ld      a,e                         ; a = ragged size from %00000111 to %00000000
 861+ C806 32 B2 C5                             ld      (RaggedSize),a
 862+ C809              ; .........................................................................................................................
 863+ C809 21 A3 C0     .SkipSetK:              ld      hl,SBnKLineArray            ; prep line array details ready for filling
 864+ C80C 22 A3 C1                             ld      (LineArrayPtr),hl
 865+ C80F AF                                   xor     a
 866+ C810 32 B1 C5                             ld      (LineCount),a
 867+ C813              ; .........................................................................................................................
 868+ C813 2A B7 C5     .GetMinY:               ld      hl,(SunScrnY)               ; now calculate start Y position
 869+ C816 3A B9 C5                             ld      a,(SunRadius)
 870+ C819 5F                                   ld      e,a
 871+ C81A 16 00                                ld      d,0
 872+ C81C                                      ClearCarryFlag
 872+ C81C B7          >                        or a
 873+ C81D ED 52                                sbc     hl,de
 874+ C81F F2 25 C8                             jp      p,.DoneMinY
 875+ C822 21 00 00                             ld      hl,0                        ; if its negative then we start with 0 as it can only go up screen after radius
 876+ C825              .DoneMinY:              ReturnIfRegNotZero h                ; if h > 0 then off the screen
 876+ C825 7C          >                        ld      a, h
 876+ C826 A7          >                        and     a
 876+ C827 C0          >                        ret     nz
 877+ C828 7D                                   ld      a,l                         ; check if l > 127
 878+ C829 E6 80                                and     SignOnly8Bit                ; .
 879+ C82B C0                                   ret     nz                          ; if bit is set then > 128
 880+ C82C 7D           .SetMinY:               ld      a,l
 881+ C82D 32 B3 C5                             ld      (MinYOffset),a              ; so now we have Y top of screen
 882+ C830 2A B7 C5     .GetMaxY:               ld      hl,(SunScrnY)               ; get hl = Y + radius, note if we got here then this can never be a negative result but can go from -ve hl to +ve result
 883+ C833 3A B9 C5                             ld      a,(SunRadius)               ; hl = hl + radius
 884+ C836 16 00                                ld      d,0                         ; .
 885+ C838 5F                                   ld      e,a                         ; .
 886+ C839                                      ClearCarryFlag                      ; .
 886+ C839 B7          >                        or a
 887+ C83A ED 5A                                adc     hl,de                       ; .
 888+ C83C 7C                                   ld      a,h
 889+ C83D A7                                   and     a
 890+ C83E 28 06                                jr      z,.YHiOK
 891+ C840 21 7F 00     .YHiGTE127:             ld      hl,127
 892+ C843 C3 4F C8                             jp      .SetMaxY
 893+ C846 7D           .YHiOK:                 ld      a,l                         ; clamp at 127
 894+ C847 E6 80                                and     SignOnly8Bit                ; .
 895+ C849 CA 4F C8                             jp      z,.SetMaxY
 896+ C84C 21 7F 00                             ld      hl,127
 897+ C84F 7D           .SetMaxY                ld      a,l
 898+ C850 32 B4 C5                             ld      (MaxYOffSet),a              ; so now we have min and max Y coordinates and SunScrnX & Y holds center
 899+ C853 CD 5A C8                             call    SunDrawCircle
 900+ C856 CD CF C1                             call    SunDraw
 901+ C859 C9                                   ret
 902+ C85A                                      ; b8 04 00 02 00 00 60 01 00 gives a 0.5 so we have the cal wrong as its +-1 so should be * result of divide by 128
 903+ C85A              ;.. Now we caluclate the circle of the star
 904+ C85A              ;.. its from MinY down the screen to MaxY center ProjX,ProjY.
 905+ C85A              ;.. We can use the circle draw logic gtom Bressenham's algorithm
 906+ C85A              ; so now there are the following conditions to consider
 907+ C85A              ; y min = 0   y center is negative radius <= ABS (Y center)             => Don't draw
 908+ C85A              ; y min = 0   y center is negative radius > ABS (Y center)+1            => Draw bottom half only
 909+ C85A              ; y max = 127 y center is > 127    radius <= y center - 127             => Don't draw
 910+ C85A              ; y max = 127 y center is > 127    radius > y center - 127              => Draw top half only
 911+ C85A              ; y min >= 0  y center > y min     we don't need to worry about radius  => Draw both halves
 912+ C85A              ; x center + radius < 0                                                 => Don't draw
 913+ C85A              ; x center - radius > 255                                               => Don't draw
 914+ C85A              ; we won't consider x more here as the driver is the y coordinate but we will check if x is vaiable
 915+ C85A              ; x point = max (x point, 0)   on left
 916+ C85A              ; x point = min (x point, 255) on right
 917+ C85A
 918+ C85A              SetIYPlusOffset:        MACRO   reg
 919+ C85A ~                                    push    hl,,iy                          ; save hl, then hl = iy
 920+ C85A ~                                    pop     hl                              ;
 921+ C85A ~                                    ld      a,reg
 922+ C85A ~                                    add     hl,a
 923+ C85A ~                                    add     hl,a
 924+ C85A ~                                    push    hl
 925+ C85A ~                                    pop     iy
 926+ C85A ~                                    pop     hl
 927+ C85A                                      ENDM
 928+ C85A
 929+ C85A              SetIYMinusOffset:       MACRO   reg
 930+ C85A ~                                    push    de,,hl,,iy                      ; save hl, then hl = iy
 931+ C85A ~                                    pop     hl                              ;
 932+ C85A ~                                    ld      a,reg
 933+ C85A ~                                    add     a,a
 934+ C85A ~                                    ld      e,a
 935+ C85A ~                                    ld      d,0
 936+ C85A ~                                    ClearCarryFlag
 937+ C85A ~                                    sbc     hl,de
 938+ C85A ~                                    push    hl
 939+ C85A ~                                    pop     iy
 940+ C85A ~                                    pop     de,,hl
 941+ C85A                                      ENDM
 942+ C85A
 943+ C85A
 944+ C85A              ;;;-SunDrawCircle:          ld      a,(SunRadius)
 945+ C85A              ;;;-.CheckRadius:           ReturnIfAIsZero                         ; elimiate zero or single pixel
 946+ C85A              ;;;-                        JumpIfAEqNusng  1, SunCircleSinglePixel
 947+ C85A              ;;;-                       ; JumpIfAGTENusng 127, SunFullScreen      ; if its covering whole then just make it yellow
 948+ C85A              ;;;-; already done .MakeCentreX2C:         MemSignedTo2C SunScrnX                   ; convert 16 bit signed to 2's compliment
 949+ C85A              ;;;-; already done .MakeCentreY2C:         MemSignedTo2C SunScrnY                   ; .
 950+ C85A              ;;;-.BoundsCheck            ld      hl,(SunScrnY)
 951+ C85A              ;;;-                        push    hl
 952+ C85A              ;;;-                        ld      a,(SunRadius)
 953+ C85A              ;;;-                        add     hl,a
 954+ C85A              ;;;-                        bit     7,h
 955+ C85A              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 956+ C85A              ;;;-                        pop     hl
 957+ C85A              ;;;-                        ld      d,0
 958+ C85A              ;;;-                        ld      e,a
 959+ C85A              ;;;-                        ClearCarryFlag
 960+ C85A              ;;;-                        sbc     hl,de
 961+ C85A              ;;;-                        ld      a,h
 962+ C85A              ;;;-                        ReturnIfAGTENusng  1                     ; really shoudl be signed TODO
 963+ C85A              ;;;-
 964+ C85A              ;;;-                        ld      hl,(SunScrnX)
 965+ C85A              ;;;-                        push    hl
 966+ C85A              ;;;-                        ld      a,(SunRadius)
 967+ C85A              ;;;-                        add     hl,a
 968+ C85A              ;;;-                        bit     7,h
 969+ C85A              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 970+ C85A              ;;;-                        pop     hl
 971+ C85A              ;;;-                        ld      d,0
 972+ C85A              ;;;-                        ld      e,a
 973+ C85A              ;;;-                        ClearCarryFlag
 974+ C85A              ;;;-                        sbc     hl,de
 975+ C85A              ;;;-                        ld      a,h
 976+ C85A              ;;;-
 977+ C85A              ;;;-                        ReturnIfAGTENusng 1                      ; really shoudl be signed TODO
 978+ C85A              SunDrawCircle
 979+ C85A                                      ; ** BNOTE Ptuichj abnd roll has a bug as piitch increases z axis value
 980+ C85A              .PrepCircleData:       ; ld      ixl,0
 981+ C85A                                     ; ld		(.Plot1+1),bc			        ; save origin into DE reg in code
 982+ C85A 3A B9 C5                             ld      a,(SunRadius)
 983+ C85D DD 67                                ld		ixh,a							; ixh = radius
 984+ C85F DD 2E 00                             ld		ixl,0						    ; ixl = delta (y)
 985+ C862 26 00        .calcd:	                ld		h,0                             ; de = radius * 2
 986+ C864 6F                                   ld		l,a                             ; .
 987+ C865 29                                   add		hl,hl							; .
 988+ C866 EB                                   ex		de,hl							; .
 989+ C867 21 03 00                             ld		hl,3                            ; hl = 3 - (r * 2)
 990+ C86A A7                                   and		a                               ; .
 991+ C86B ED 52                                sbc		hl,de							; .
 992+ C86D 44                                   ld		b,h                             ; bc = 3 - (r * 2) : d = 3 - 2r
 993+ C86E 4D                                   ld		c,l								; .
 994+ C86F 21 01 00     .calcdelta:             ld		hl,1                            ; set hl to 1
 995+ C872 16 00                                ld		d,0                             ; de = ixl
 996+ C874 DD 5D                                ld		e,ixl                           ;
 997+ C876                                      ClearCarryFlag                          ;
 997+ C876 B7          >                        or a
 998+ C877 ED 52                                sbc		hl,de                           ; hl = 1 - ixl
 999+ C879 11 01 00     .Setde1:                ld		de,1                            ; del = 1
1000+ C87C DD 7C        .CircleLoop:            ld		a,ixh                           ; if x = y then exit
1001+ C87E DD BD                                cp		ixl                             ;
1002+ C880 D8                                   ret		c                               ;
1003+ C881 D9           .ProcessLoop:	        exx                                     ; save out registers
1004+ C882              ; Process CY+Y CX+X & CY+Y CX-X..................................
1005+ C882 2A B7 C5     .Plot1:                 ld      hl, (SunScrnY)
1006+ C885 DD 7C        .Get1YRow:              ld      a,ixh
1007+ C887 ED 31                                add     hl,a                            ; Check to see if CY+Y (note is add hl ,a usginedf only??)
1008+ C889              .Check1YRowOnScreen:    CheckRowHLOnScreen .NoTopPixelPair
1008+ C889 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1008+ C88A A7          >                        and     a                               ; .
1008+ C88B 20 26       >                        jr      nz,.NoTopPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1008+ C88D 7D          >                        ld      a,l                             ; l bit 7 0?
1008+ C88E E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1008+ C890 20 21       >                        jr      nz,.NoTopPixelPair                   ;
1009+ C892              .Write1YCoord:          SetIYPlusOffset ixh                     ; IY = IY + ixh
1009+ C892 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1009+ C895 E1          >                        pop     hl                              ;
1009+ C896 DD 7C       >                        ld      a,ixh
1009+ C898 ED 31       >                        add     hl,a
1009+ C89A ED 31       >                        add     hl,a
1009+ C89C E5          >                        push    hl
1009+ C89D FD E1       >                        pop     iy
1009+ C89F E1          >                        pop     hl
1010+ C8A0                                      IYEquRowN l                             ; IY = SBnkLineArray + (2 * l) - set up iy as target address
1010+ C8A0 7D          >                        ld      a,l
1010+ C8A1 21 A3 C0    >                        ld      hl,SBnKLineArray
1010+ C8A4 ED 31       >                        add     hl,a
1010+ C8A6 ED 31       >                        add     hl,a
1010+ C8A8 E5          >                        push    hl
1010+ C8A9 FD E1       >                        pop     iy
1011+ C8AB DD 7D                                ld      a,ixl
1012+ C8AD CD 80 C9                             call    ProcessXRowA
1013+ C8B0 C3 B3 C8                             jp      .Plot2
1014+ C8B3              .NoTopPixelPair:        ;break
1015+ C8B3              ; Process CY-Y CX+X & CY-Y CX-X..................................
1016+ C8B3 2A B7 C5     .Plot2:                 ld      hl, (SunScrnY)
1017+ C8B6 16 00        .Get2YRow:              ld      d,0
1018+ C8B8 DD 5C                                ld      e,ixh
1019+ C8BA                                      ClearCarryFlag
1019+ C8BA B7          >                        or a
1020+ C8BB ED 52                                sbc     hl,de
1021+ C8BD              .Check2YRowOnScreen:    CheckRowHLOnScreen .NoBottomPixelPair
1021+ C8BD 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1021+ C8BE A7          >                        and     a                               ; .
1021+ C8BF 20 2B       >                        jr      nz,.NoBottomPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1021+ C8C1 7D          >                        ld      a,l                             ; l bit 7 0?
1021+ C8C2 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1021+ C8C4 20 26       >                        jr      nz,.NoBottomPixelPair                   ;
1022+ C8C6                                      SetIYMinusOffset ixh
1022+ C8C6 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1022+ C8CA E1          >                        pop     hl                              ;
1022+ C8CB DD 7C       >                        ld      a,ixh
1022+ C8CD 87          >                        add     a,a
1022+ C8CE 5F          >                        ld      e,a
1022+ C8CF 16 00       >                        ld      d,0
1022+ C8D1             >                        ClearCarryFlag
1022+ C8D1 B7          >                        or a
1022+ C8D2 ED 52       >                        sbc     hl,de
1022+ C8D4 E5          >                        push    hl
1022+ C8D5 FD E1       >                        pop     iy
1022+ C8D7 E1 D1       >                        pop     de,,hl
1023+ C8D9              .Write2YCoord:          IYEquRowN l                             ; set up iy as target address
1023+ C8D9 7D          >                        ld      a,l
1023+ C8DA 21 A3 C0    >                        ld      hl,SBnKLineArray
1023+ C8DD ED 31       >                        add     hl,a
1023+ C8DF ED 31       >                        add     hl,a
1023+ C8E1 E5          >                        push    hl
1023+ C8E2 FD E1       >                        pop     iy
1024+ C8E4 DD 7D                                ld      a,ixl
1025+ C8E6 CD 80 C9                             call    ProcessXRowA
1026+ C8E9 C3 EC C8                             jp      .Plot3
1027+ C8EC              .NoBottomPixelPair:     ;break
1028+ C8EC              ; Process CY+X CX+Y & CY+X CX-Y..................................
1029+ C8EC 2A B7 C5     .Plot3:                 ld      hl, (SunScrnY)
1030+ C8EF DD 7D        .Get3YRow:              ld      a,ixl
1031+ C8F1 ED 31                                add     hl,a                            ; Check to see if CY+Y
1032+ C8F3              .Check3YRowOnScreen:    CheckRowHLOnScreen .NoTop3PixelPair
1032+ C8F3 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1032+ C8F4 A7          >                        and     a                               ; .
1032+ C8F5 20 26       >                        jr      nz,.NoTop3PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1032+ C8F7 7D          >                        ld      a,l                             ; l bit 7 0?
1032+ C8F8 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1032+ C8FA 20 21       >                        jr      nz,.NoTop3PixelPair                   ;
1033+ C8FC                                      SetIYPlusOffset ixl
1033+ C8FC E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1033+ C8FF E1          >                        pop     hl                              ;
1033+ C900 DD 7D       >                        ld      a,ixl
1033+ C902 ED 31       >                        add     hl,a
1033+ C904 ED 31       >                        add     hl,a
1033+ C906 E5          >                        push    hl
1033+ C907 FD E1       >                        pop     iy
1033+ C909 E1          >                        pop     hl
1034+ C90A              .Write3YCoord:          IYEquRowN l                             ; set up iy as target address
1034+ C90A 7D          >                        ld      a,l
1034+ C90B 21 A3 C0    >                        ld      hl,SBnKLineArray
1034+ C90E ED 31       >                        add     hl,a
1034+ C910 ED 31       >                        add     hl,a
1034+ C912 E5          >                        push    hl
1034+ C913 FD E1       >                        pop     iy
1035+ C915 DD 7C                                ld      a,ixh
1036+ C917 CD 80 C9                             call    ProcessXRowA
1037+ C91A C3 1D C9                             jp      .Plot4
1038+ C91D              .NoTop3PixelPair:       ;break
1039+ C91D              ; Process CY-X CX+Y & CY-X CX-Y..................................
1040+ C91D 2A B7 C5     .Plot4:                 ld      hl, (SunScrnY)
1041+ C920 16 00        .Get4YRow:              ld      d,0
1042+ C922 DD 5D                                ld      e,ixl
1043+ C924                                      ClearCarryFlag
1043+ C924 B7          >                        or a
1044+ C925 ED 52                                sbc     hl,de
1045+ C927              .Check4YRowOnScreen:    CheckRowHLOnScreen .NoBottom4PixelPair
1045+ C927 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1045+ C928 A7          >                        and     a                               ; .
1045+ C929 20 28       >                        jr      nz,.NoBottom4PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1045+ C92B 7D          >                        ld      a,l                             ; l bit 7 0?
1045+ C92C E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1045+ C92E 20 23       >                        jr      nz,.NoBottom4PixelPair                   ;
1046+ C930                                      SetIYMinusOffset ixl
1046+ C930 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1046+ C934 E1          >                        pop     hl                              ;
1046+ C935 DD 7D       >                        ld      a,ixl
1046+ C937 87          >                        add     a,a
1046+ C938 5F          >                        ld      e,a
1046+ C939 16 00       >                        ld      d,0
1046+ C93B             >                        ClearCarryFlag
1046+ C93B B7          >                        or a
1046+ C93C ED 52       >                        sbc     hl,de
1046+ C93E E5          >                        push    hl
1046+ C93F FD E1       >                        pop     iy
1046+ C941 E1 D1       >                        pop     de,,hl
1047+ C943              .Write4YCoord:          IYEquRowN l                             ; set up iy as target address
1047+ C943 7D          >                        ld      a,l
1047+ C944 21 A3 C0    >                        ld      hl,SBnKLineArray
1047+ C947 ED 31       >                        add     hl,a
1047+ C949 ED 31       >                        add     hl,a
1047+ C94B E5          >                        push    hl
1047+ C94C FD E1       >                        pop     iy
1048+ C94E DD 7C                                ld      a,ixh
1049+ C950 CD 80 C9                             call    ProcessXRowA
1050+ C953              .NoBottom4PixelPair:
1051+ C953              ; Completed one iteration........................................
1052+ C953 D9                                   exx
1053+ C954 CB 7C        .IncrementCircle:	    bit     7,h				; Check for Hl<=0
1054+ C956 28 03                                jr z,   .draw_circle_1
1055+ C958 19                                   add hl,de			; Delta=Delta+D1
1056+ C959 18 05                                jr      .draw_circle_2		;
1057+ C95B 09           .draw_circle_1:		    add     hl,bc			; Delta=Delta+D2
1058+ C95C 03                                   inc     bc
1059+ C95D 03                                   inc     bc				; D2=D2+2
1060+ C95E DD 25                                dec     ixh				; Y=Y-1
1061+ C960 03           .draw_circle_2:		    inc bc				    ; D2=D2+2
1062+ C961 03                                   inc bc
1063+ C962 13                                   inc de				    ; D1=D1+2
1064+ C963 13                                   inc de
1065+ C964 DD 2C                                inc ixl				    ; X=X+1
1066+ C966 C3 7C C8                             jp      .CircleLoop
1067+ C969 2A B5 C5     SunCircleSinglePixel:     ld      hl,(SunScrnX)
1068+ C96C 7C                                   ld      a,h
1069+ C96D A7                                   and     a
1070+ C96E C0                                   ret     nz                  ; if the high byte is set then no pixel
1071+ C96F 4D                                   ld      c,l
1072+ C970 2A B7 C5                             ld      hl,(SunScrnY)
1073+ C973 7C                                   ld      a,h
1074+ C974 A7                                   and     a
1075+ C975 C0                                   ret     nz                  ; if the high byte is set then no pixel
1076+ C976 7D                                   ld      a,l
1077+ C977 CB 7F                                bit     7,a
1078+ C979 C0                                   ret     nz                  ; if l > 127 then no pixel
1079+ C97A 47                                   ld      b,a
1080+ C97B 7B                                   ld		a,e
1081+ C97C CD 0B E3                             call	l2_plot_pixel_y_test
1082+ C97F C9                                   ret
1083+ C980
1084+ C980              ProcessXRowA:           ;break
1085+ C980 2A B5 C5                             ld      hl,(SunScrnX)                    ; get X Center
1086+ C983 F5                                   push    af                              ; save A (curent offset +/- value
1087+ C984 ED 31                                add     hl,a                            ; Hl = HL + offset
1088+ C986 7C                                   ld      a,h                             ; is HL negative?, if so then set C to 0
1089+ C987 CB 7F                                bit     7,a                             ;
1090+ C989 20 14                                jr      nz,.XCoordNegative              ; We can have this for non X + Radius i.e. the equater
1091+ C98B A7                                   and     a                               ; if H <> 0? (why by here must be +ve), set c to $FF
1092+ C98C 20 16                                jr      nz,.XCoordMaxed                 ; .
1093+ C98E 4D                                   ld      c,l                             ; else set c to l and do the -ve offset
1094+ C98F C5           .AddFuzz:               push    bc
1095+ C990 CD DE 87                             call    doRandom                        ; c = c - random AND ragged Size
1096+ C993 C1                                   pop     bc
1097+ C994 21 B2 C5                             ld      hl,RaggedSize                   ;
1098+ C997 A6                                   and     (hl)                            ;
1099+ C998 81                                   add     c                               ;
1100+ C999 4F                                   ld      c,a                             ;
1101+ C99A 38 08                                jr      c,.XCoordMaxed                  ; has fuzz caused a carry, if so > 255 to make 255
1102+ C99C C3 A6 C9                             jp      .ProcessSubtract                ;
1103+ C99F 0E 00        .XCoordNegative:        ld      c,0                             ; if it was negative then 0
1104+ C9A1 C3 A6 C9                             jp      .ProcessSubtract
1105+ C9A4 0E FF        .XCoordMaxed:           ld      c,255                           ; if it was +ve then 255
1106+ C9A6 F1           .ProcessSubtract:       pop     af                              ; get offset back
1107+ C9A7 5F                                   ld      e,a                             ; but goes into DE as its a subtract
1108+ C9A8 16 00                                ld      d,0
1109+ C9AA 2A B5 C5                             ld      hl,(SunScrnX)                    ; so do subtract
1110+ C9AD                                      ClearCarryFlag                          ; .
1110+ C9AD B7          >                        or a
1111+ C9AE ED 52                                sbc     hl,de                           ; .
1112+ C9B0 FA CD C9                             jp      m,.XCoordLeftNegative           ; again test for min max
1113+ C9B3 E5 C5        .AddFuzzSubtract:       push    hl,,bc
1114+ C9B5 CD DE 87                             call    doRandom                        ; c = c - random AND ragged Size
1115+ C9B8 C1                                   pop     bc
1116+ C9B9 21 B2 C5                             ld      hl,RaggedSize                   ;
1117+ C9BC A6                                   and     (hl)                            ;
1118+ C9BD 5F                                   ld      e,a
1119+ C9BE E1                                   pop     hl
1120+ C9BF ED 52                                sbc     hl,de
1121+ C9C1 FA CD C9                             jp      m,.XCoordLeftNegative           ; again test for min max
1122+ C9C4 7C                                   ld      a,h
1123+ C9C5 A7                                   and     a
1124+ C9C6 C2 D2 C9                             jp      nz,.XCordLeftMaxed
1125+ C9C9 45                                   ld      b,l
1126+ C9CA C3 D4 C9                             jp      .CompletedXCoords
1127+ C9CD 06 00        .XCoordLeftNegative:    ld      b,0
1128+ C9CF C3 D4 C9                             jp      .CompletedXCoords
1129+ C9D2 06 FF        .XCordLeftMaxed:        ld      b,255
1130+ C9D4 78           .CompletedXCoords:      ld      a,b
1131+ C9D5 FD 77 00     .RowSaveIY1             ld      (iy+0),a                        ; iy holds current line array index
1132+ C9D8 79                                   ld      a,c
1133+ C9D9 FD 77 01     .RowSaveIY3             ld      (iy+1),a
1134+ C9DC C9                                   ret
1135+ C9DD
1136+ C9DD              ; .....................................................
1137+ C9DD              ; if the universe object is a planet or sun then do that instead
1138+ C9DD              ;;TODOProcessPlanet:          cp      129
1139+ C9DD              ;;TODO                        jr      nz, .ItsAPlanet
1140+ C9DD              ;;TODO.ItsAStar:              ld      a,(SBnKzsgn)
1141+ C9DD              ;;TODO                        cp      48                               ; if z > 48 (it must be positive to enter this routine)
1142+ C9DD
1143+ C9DD
1144+ C9DD              ; Square Root using tables
1145+ C9DD              ; DE = number to find
1146+ C9DD 21 FD CB     SunLookupSqrtDE:        ld      hl,SunSquareRootTable
1147+ C9E0 7A           .LookupCorseJump:       ld      a,d
1148+ C9E1 ED 31                                add     hl,a
1149+ C9E3 ED 31                                add     hl,a
1150+ C9E5 7E                                   ld      a,(hl)
1151+ C9E6 23                                   inc     hl
1152+ C9E7 66                                   ld      h,(hl)
1153+ C9E8 6F                                   ld      l,a
1154+ C9E9 7E           .FineSearchLoop:        ld      a,(hl)
1155+ C9EA                                      JumpIfAEqNusng  e, .FoundByte
1155+ C9EA BB          >                        cp     e
1155+ C9EB CA F7 C9    >                        jp      z,.FoundByte
1156+ C9EE                                      JumpIfAGTENusng e, .PreviousByte
1156+ C9EE BB          >                        cp     e
1156+ C9EF D2 FA C9    >                        jp		nc,.PreviousByte
1157+ C9F2 23           .NotFound:              inc     hl
1158+ C9F3 23                                   inc     hl
1159+ C9F4 C3 E9 C9                             jp      .FineSearchLoop
1160+ C9F7 23           .FoundByte:             inc     hl
1161+ C9F8 7E                                   ld      a,(hl)
1162+ C9F9 C9                                   ret
1163+ C9FA 2B           .PreviousByte:          dec     hl
1164+ C9FB 7E                                   ld      a,(hl)
1165+ C9FC C9                                   ret
1166+ C9FD
1167+ C9FD FD CB 0F CC  SunRootHighIndex:       DW SunSqr00,SunSqr01,SunSqr02,SunSqr03,SunSqr04,SunSqr05,SunSqr06,SunSqr07,SunSqr08,SunSqr09,SunSqr0A,SunSqr0B,SunSqr0C,SunSqr0D,SunSqr0E,SunSqr0F
1167+ CA01 1D CC 29 CC
1167+ CA05 33 CC 3B CC
1167+ CA09 43 CC 4B CC
1167+ CA0D 53 CC 59 CC
1167+ CA11 61 CC 67 CC
1167+ CA15 6B CC 71 CC
1167+ CA19 77 CC 7D CC
1168+ CA1D 83 CC 89 CC                          DW SunSqr10,SunSqr11,SunSqr12,SunSqr13,SunSqr14,SunSqr15,SunSqr16,SunSqr17,SunSqr18,SunSqr19,SunSqr1A,SunSqr1B,SunSqr1C,SunSqr1D,SunSqr1E,SunSqr1F
1168+ CA21 8F CC 95 CC
1168+ CA25 9B CC 9F CC
1168+ CA29 A3 CC A5 CC
1168+ CA2D A9 CC AD CC
1168+ CA31 B1 CC B5 CC
1168+ CA35 B9 CC BD CC
1168+ CA39 BF CC C3 CC
1169+ CA3D C5 CC C9 CC                          DW SunSqr20,SunSqr21,SunSqr22,SunSqr23,SunSqr24,SunSqr25,SunSqr26,SunSqr27,SunSqr28,SunSqr29,SunSqr2A,SunSqr2B,SunSqr2C,SunSqr2D,SunSqr2E,SunSqr2F
1169+ CA41 CD CC CF CC
1169+ CA45 D1 CC D5 CC
1169+ CA49 D7 CC D9 CC
1169+ CA4D DD CC DF CC
1169+ CA51 E1 CC E3 CC
1169+ CA55 E7 CC E9 CC
1169+ CA59 EB CC EF CC
1170+ CA5D F3 CC F7 CC                          DW SunSqr30,SunSqr31,SunSqr32,SunSqr33,SunSqr34,SunSqr35,SunSqr36,SunSqr37,SunSqr38,SunSqr39,SunSqr3A,SunSqr3B,SunSqr3C,SunSqr3D,SunSqr3E,SunSqr3F
1170+ CA61 FB CC FF CC
1170+ CA65 01 CD 05 CD
1170+ CA69 09 CD 0D CD
1170+ CA6D 0F CD 13 CD
1170+ CA71 17 CD 1B CD
1170+ CA75 1F CD 23 CD
1170+ CA79 27 CD 2B CD
1171+ CA7D 2F CD 33 CD                          DW SunSqr40,SunSqr41,SunSqr42,SunSqr43,SunSqr44,SunSqr45,SunSqr46,SunSqr47,SunSqr48,SunSqr49,SunSqr4A,SunSqr4B,SunSqr4C,SunSqr4D,SunSqr4E,SunSqr4F
1171+ CA81 37 CD 3B CD
1171+ CA85 3F CD 43 CD
1171+ CA89 47 CD 4B CD
1171+ CA8D 4F CD 53 CD
1171+ CA91 57 CD 5B CD
1171+ CA95 5F CD 63 CD
1171+ CA99 67 CD 6B CD
1172+ CA9D 6F CD 71 CD                          DW SunSqr50,SunSqr51,SunSqr52,SunSqr53,SunSqr54,SunSqr55,SunSqr56,SunSqr57,SunSqr58,SunSqr59,SunSqr5A,SunSqr5B,SunSqr5C,SunSqr5D,SunSqr5E,SunSqr5F
1172+ CAA1 75 CD 79 CD
1172+ CAA5 7D CD 81 CD
1172+ CAA9 85 CD 89 CD
1172+ CAAD 8D CD 8F CD
1172+ CAB1 93 CD 97 CD
1172+ CAB5 9B CD 9F CD
1172+ CAB9 A3 CD A5 CD
1173+ CABD A9 CD AD CD                          DW SunSqr60,SunSqr61,SunSqr62,SunSqr63,SunSqr64,SunSqr65,SunSqr66,SunSqr67,SunSqr68,SunSqr69,SunSqr6A,SunSqr6B,SunSqr6C,SunSqr6D,SunSqr6E,SunSqr6F
1173+ CAC1 B1 CD B5 CD
1173+ CAC5 B7 CD BB CD
1173+ CAC9 BF CD C3 CD
1173+ CACD C7 CD C9 CD
1173+ CAD1 CD CD D1 CD
1173+ CAD5 D5 CD D7 CD
1173+ CAD9 D9 CD DD CD
1174+ CADD E1 CD E5 CD                          DW SunSqr70,SunSqr71,SunSqr72,SunSqr73,SunSqr74,SunSqr75,SunSqr76,SunSqr77,SunSqr78,SunSqr79,SunSqr7A,SunSqr7B,SunSqr7C,SunSqr7D,SunSqr7E,SunSqr7F
1174+ CAE1 E9 CD ED CD
1174+ CAE5 F1 CD F5 CD
1174+ CAE9 F7 CD FB CD
1174+ CAED FF CD 01 CE
1174+ CAF1 05 CE 09 CE
1174+ CAF5 0D CE 0F CE
1174+ CAF9 13 CE 17 CE
1175+ CAFD 1B CE 1D CE                          DW SunSqr80,SunSqr81,SunSqr82,SunSqr83,SunSqr84,SunSqr85,SunSqr86,SunSqr87,SunSqr88,SunSqr89,SunSqr8A,SunSqr8B,SunSqr8C,SunSqr8D,SunSqr8E,SunSqr8F
1175+ CB01 21 CE 23 CE
1175+ CB05 27 CE 2B CE
1175+ CB09 2F CE 31 CE
1175+ CB0D 35 CE 39 CE
1175+ CB11 3B CE 3F CE
1175+ CB15 43 CE 45 CE
1175+ CB19 49 CE 4D CE
1176+ CB1D 4F CE 53 CE                          DW SunSqr90,SunSqr91,SunSqr92,SunSqr93,SunSqr94,SunSqr95,SunSqr96,SunSqr97,SunSqr98,SunSqr99,SunSqr9A,SunSqr9B,SunSqr9C,SunSqr9D,SunSqr9E,SunSqr9F
1176+ CB21 57 CE 59 CE
1176+ CB25 5D CE 61 CE
1176+ CB29 63 CE 67 CE
1176+ CB2D 6B CE 6D CE
1176+ CB31 71 CE 75 CE
1176+ CB35 77 CE 7B CE
1176+ CB39 7F CE 81 CE
1177+ CB3D 85 CE 89 CE                          DW SunSqrA0,SunSqrA1,SunSqrA2,SunSqrA3,SunSqrA4,SunSqrA5,SunSqrA6,SunSqrA7,SunSqrA8,SunSqrA9,SunSqrAA,SunSqrAB,SunSqrAC,SunSqrAD,SunSqrAE,SunSqrAF
1177+ CB41 8B CE 8F CE
1177+ CB45 91 CE 95 CE
1177+ CB49 99 CE 9B CE
1177+ CB4D 9F CE A1 CE
1177+ CB51 A5 CE A9 CE
1177+ CB55 AB CE AF CE
1177+ CB59 B3 CE B5 CE
1178+ CB5D B7 CE B9 CE                          DW SunSqrB0,SunSqrB1,SunSqrB2,SunSqrB3,SunSqrB4,SunSqrB5,SunSqrB6,SunSqrB7,SunSqrB8,SunSqrB9,SunSqrBA,SunSqrBB,SunSqrBC,SunSqrBD,SunSqrBE,SunSqrBF
1178+ CB61 BD CE C1 CE
1178+ CB65 C3 CE C7 CE
1178+ CB69 C9 CE CD CE
1178+ CB6D D1 CE D5 CE
1178+ CB71 D7 CE D9 CE
1178+ CB75 DD CE DF CE
1178+ CB79 E3 CE E7 CE
1179+ CB7D E9 CE ED CE                          DW SunSqrC0,SunSqrC1,SunSqrC2,SunSqrC3,SunSqrC4,SunSqrC5,SunSqrC6,SunSqrC7,SunSqrC8,SunSqrC9,SunSqrCA,SunSqrCB,SunSqrCC,SunSqrCD,SunSqrCE,SunSqrCF
1179+ CB81 EF CE F3 CE
1179+ CB85 F5 CE F9 CE
1179+ CB89 FD CE FF CE
1179+ CB8D 01 CF 03 CF
1179+ CB91 07 CF 09 CF
1179+ CB95 0D CF 11 CF
1179+ CB99 13 CF 17 CF
1180+ CB9D 19 CF 1D CF                          DW SunSqrD0,SunSqrD1,SunSqrD2,SunSqrD3,SunSqrD4,SunSqrD5,SunSqrD6,SunSqrD7,SunSqrD8,SunSqrD9,SunSqrDA,SunSqrDB,SunSqrDC,SunSqrDD,SunSqrDE,SunSqrDF
1180+ CBA1 1F CF 23 CF
1180+ CBA5 25 CF 29 CF
1180+ CBA9 2D CF 2F CF
1180+ CBAD 33 CF 35 CF
1180+ CBB1 39 CF 3B CF
1180+ CBB5 3F CF 41 CF
1180+ CBB9 43 CF 45 CF
1181+ CBBD 49 CF 4D CF                          DW SunSqrE0,SunSqrE1,SunSqrE2,SunSqrE3,SunSqrE4,SunSqrE5,SunSqrE6,SunSqrE7,SunSqrE8,SunSqrE9,SunSqrEA,SunSqrEB,SunSqrEC,SunSqrED,SunSqrEE,SunSqrEF
1181+ CBC1 51 CF 55 CF
1181+ CBC5 59 CF 5D CF
1181+ CBC9 5F CF 63 CF
1181+ CBCD 67 CF 6B CF
1181+ CBD1 6D CF 71 CF
1181+ CBD5 73 CF 75 CF
1181+ CBD9 77 CF 7B CF
1182+ CBDD 7D CF 7F CF                          DW SunSqrF0,SunSqrF1,SunSqrF2,SunSqrF3,SunSqrF4,SunSqrF5,SunSqrF6,SunSqrF7,SunSqrF8,SunSqrF9,SunSqrFA,SunSqrFB,SunSqrFC,SunSqrFD,SunSqrFE,SunSqrFF
1182+ CBE1 81 CF 85 CF
1182+ CBE5 87 CF 8B CF
1182+ CBE9 8D CF 91 CF
1182+ CBED 93 CF 97 CF
1182+ CBF1 99 CF 9D CF
1182+ CBF5 9F CF A3 CF
1182+ CBF9 A5 CF A7 CF
1183+ CBFD
1184+ CBFD              SunSquareRootTable:
1185+ CBFD 00 00        SunSqr00:               DB $00,   0
1186+ CBFF 04 02                                DB $04,   2
1187+ CC01 10 04                                DB $10,   4
1188+ CC03 24 06                                DB $24,   6
1189+ CC05 40 08                                DB $40,   8
1190+ CC07 64 0A                                DB $64,  10
1191+ CC09 90 0C                                DB $90,  12
1192+ CC0B C4 0E                                DB $C4,  14
1193+ CC0D FF 0F                                DB $FF,  15
1194+ CC0F 00 10        SunSqr01:               DB $00,  16
1195+ CC11 21 11                                DB $21,  17
1196+ CC13 44 12                                DB $44,  18
1197+ CC15 69 13                                DB $69,  19
1198+ CC17 90 14                                DB $90,  20
1199+ CC19 B9 15                                DB $B9,  21
1200+ CC1B FF 16                                DB $FF,  22
1201+ CC1D 11 17        SunSqr02:               DB $11,  23
1202+ CC1F 40 18                                DB $40,  24
1203+ CC21 71 19                                DB $71,  25
1204+ CC23 A4 1A                                DB $A4,  26
1205+ CC25 D9 1B                                DB $D9,  27
1206+ CC27 FF 1B                                DB $FF,  27
1207+ CC29 10 1C        SunSqr03:               DB $10,  28
1208+ CC2B 49 1D                                DB $49,  29
1209+ CC2D 84 1E                                DB $84,  30
1210+ CC2F C1 1F                                DB $C1,  31
1211+ CC31 FF 1F                                DB $FF,  31
1212+ CC33 00 20        SunSqr04:               DB $00,  32
1213+ CC35 41 21                                DB $41,  33
1214+ CC37 84 22                                DB $84,  34
1215+ CC39 FF 23                                DB $FF,  35
1216+ CC3B 10 24        SunSqr05:               DB $10,  36
1217+ CC3D 59 25                                DB $59,  37
1218+ CC3F A4 26                                DB $A4,  38
1219+ CC41 FF 27                                DB $FF,  39
1220+ CC43 40 28        SunSqr06:               DB $40,  40
1221+ CC45 91 29                                DB $91,  41
1222+ CC47 E4 2A                                DB $E4,  42
1223+ CC49 FF 2A                                DB $FF,  42
1224+ CC4B 39 2B        SunSqr07:               DB $39,  43
1225+ CC4D 90 2C                                DB $90,  44
1226+ CC4F E9 2D                                DB $E9,  45
1227+ CC51 FF 2D                                DB $FF,  45
1228+ CC53 44 2E        SunSqr08:               DB $44,  46
1229+ CC55 A1 2F                                DB $A1,  47
1230+ CC57 FF 2F                                DB $FF,  47
1231+ CC59 00 30        SunSqr09:               DB $00,  48
1232+ CC5B 61 31                                DB $61,  49
1233+ CC5D C4 32                                DB $C4,  50
1234+ CC5F FF 32                                DB $FF,  50
1235+ CC61 29 33        SunSqr0A:               DB $29,  51
1236+ CC63 90 34                                DB $90,  52
1237+ CC65 FF 35                                DB $FF,  53
1238+ CC67 64 36        SunSqr0B:               DB $64,  54
1239+ CC69 FF 37                                DB $FF,  55
1240+ CC6B 40 38        SunSqr0C:               DB $40,  56
1241+ CC6D B1 39                                DB $B1,  57
1242+ CC6F FF 39                                DB $FF,  57
1243+ CC71 24 3A        SunSqr0D:               DB $24,  58
1244+ CC73 99 3B                                DB $99,  59
1245+ CC75 FF 3B                                DB $FF,  59
1246+ CC77 10 3C        SunSqr0E:               DB $10,  60
1247+ CC79 89 3D                                DB $89,  61
1248+ CC7B FF 3D                                DB $FF,  61
1249+ CC7D 04 3E        SunSqr0F:               DB $04,  62
1250+ CC7F 81 3F                                DB $81,  63
1251+ CC81 FF 3F                                DB $FF,  63
1252+ CC83 00 40        SunSqr10:               DB $00,  64
1253+ CC85 81 41                                DB $81,  65
1254+ CC87 FF 41                                DB $FF,  65
1255+ CC89 04 42        SunSqr11:               DB $04,  66
1256+ CC8B 89 43                                DB $89,  67
1257+ CC8D FF 43                                DB $FF,  67
1258+ CC8F 10 44        SunSqr12:               DB $10,  68
1259+ CC91 99 45                                DB $99,  69
1260+ CC93 FF 45                                DB $FF,  69
1261+ CC95 24 46        SunSqr13:               DB $24,  70
1262+ CC97 B1 47                                DB $B1,  71
1263+ CC99 FF 47                                DB $FF,  71
1264+ CC9B 40 48        SunSqr14:               DB $40,  72
1265+ CC9D FF 49                                DB $FF,  73
1266+ CC9F 64 4A        SunSqr15:               DB $64,  74
1267+ CCA1 FF 4B                                DB $FF,  75
1268+ CCA3 FF 4C        SunSqr16:               DB $FF,  76
1269+ CCA5 C4 4D        SunSqr17:               DB $C4,  77
1270+ CCA7 FF 4E                                DB $FF,  78
1271+ CCA9 61 4F        SunSqr18:               DB $61,  79
1272+ CCAB FF 4F                                DB $FF,  79
1273+ CCAD 00 50        SunSqr19:               DB $00,  80
1274+ CCAF FF 51                                DB $FF,  81
1275+ CCB1 44 52        SunSqr1A:               DB $44,  82
1276+ CCB3 FF 53                                DB $FF,  83
1277+ CCB5 90 54        SunSqr1B:               DB $90,  84
1278+ CCB7 FF 54                                DB $FF,  84
1279+ CCB9 39 55        SunSqr1C:               DB $39,  85
1280+ CCBB FF 56                                DB $FF,  86
1281+ CCBD FF 57        SunSqr1D:               DB $FF,  87
1282+ CCBF 40 58        SunSqr1E:               DB $40,  88
1283+ CCC1 FF 59                                DB $FF,  89
1284+ CCC3 FF 5A        SunSqr1F:               DB $FF,  90
1285+ CCC5 59 5B        SunSqr20:               DB $59,  91
1286+ CCC7 FF 5B                                DB $FF,  91
1287+ CCC9 10 5C        SunSqr21:               DB $10,  92
1288+ CCCB FF 5D                                DB $FF,  93
1289+ CCCD FF 5E        SunSqr22:               DB $FF,  94
1290+ CCCF FF 5F        SunSqr23:               DB $FF,  95
1291+ CCD1 00 60        SunSqr24:               DB $00,  96
1292+ CCD3 FF 61                                DB $FF,  97
1293+ CCD5 84 62        SunSqr25:               DB $84,  98
1294+ CCD7 49 63        SunSqr26:               DB $49,  99
1295+ CCD9 10 64        SunSqr27:               DB $10, 100
1296+ CCDB FF 65                                DB $FF, 101
1297+ CCDD FF 66        SunSqr28:               DB $FF, 102
1298+ CCDF FF 67        SunSqr29:               DB $FF, 103
1299+ CCE1 FF 68        SunSqr2A:               DB $FF, 104
1300+ CCE3 11 69        SunSqr2B:               DB $11, 105
1301+ CCE5 FF 6A                                DB $FF, 106
1302+ CCE7 FF 6B        SunSqr2C:               DB $FF, 107
1303+ CCE9 FF 6C        SunSqr2D:               DB $FF, 108
1304+ CCEB 69 6D        SunSqr2E:               DB $69, 109
1305+ CCED FF 6E                                DB $FF, 110
1306+ CCEF 44 6E        SunSqr2F:               DB $44, 110
1307+ CCF1 FF 6F                                DB $FF, 111
1308+ CCF3 21 6F        SunSqr30:               DB $21, 111
1309+ CCF5 FF 70                                DB $FF, 112
1310+ CCF7 00 70        SunSqr31:               DB $00, 112
1311+ CCF9 FF 71                                DB $FF, 113
1312+ CCFB C4 72        SunSqr32:               DB $C4, 114
1313+ CCFD FF 72                                DB $FF, 114
1314+ CCFF FF 73        SunSqr33:               DB $FF, 115
1315+ CD01 90 74        SunSqr34:               DB $90, 116
1316+ CD03 FF 75                                DB $FF, 117
1317+ CD05 79 75        SunSqr35:               DB $79, 117
1318+ CD07 FF 76                                DB $FF, 118
1319+ CD09 64 76        SunSqr36:               DB $64, 118
1320+ CD0B 64 77                                DB $64, 119
1321+ CD0D 51 77        SunSqr37:               DB $51, 119
1322+ CD0F 40 78        SunSqr38:               DB $40, 120
1323+ CD11 FF 79                                DB $FF, 121
1324+ CD13 31 79        SunSqr39:               DB $31, 121
1325+ CD15 FF 7A                                DB $FF, 122
1326+ CD17 24 7A        SunSqr3A:               DB $24, 122
1327+ CD19 FF 7B                                DB $FF, 123
1328+ CD1B 19 7B        SunSqr3B:               DB $19, 123
1329+ CD1D FF 7C                                DB $FF, 124
1330+ CD1F 10 7C        SunSqr3C:               DB $10, 124
1331+ CD21 FF 7D                                DB $FF, 125
1332+ CD23 09 7D        SunSqr3D:               DB $09, 125
1333+ CD25 FF 7D                                DB $FF, 125
1334+ CD27 04 7E        SunSqr3E:               DB $04, 126
1335+ CD29 FF 7E                                DB $FF, 126
1336+ CD2B 01 7F        SunSqr3F:               DB $01, 127
1337+ CD2D FF 7F                                DB $FF, 127
1338+ CD2F 00 80        SunSqr40:               DB $00, 128
1339+ CD31 FF 80                                DB $FF, 128
1340+ CD33 01 81        SunSqr41:               DB $01, 129
1341+ CD35 FF 82                                DB $FF, 130
1342+ CD37 04 82        SunSqr42:               DB $04, 130
1343+ CD39 FF 83                                DB $FF, 131
1344+ CD3B 09 83        SunSqr43:               DB $09, 131
1345+ CD3D FF 84                                DB $FF, 132
1346+ CD3F 10 84        SunSqr44:               DB $10, 132
1347+ CD41 FF 85                                DB $FF, 133
1348+ CD43 19 85        SunSqr45:               DB $19, 133
1349+ CD45 FF 86                                DB $FF, 134
1350+ CD47 24 86        SunSqr46:               DB $24, 134
1351+ CD49 FF 87                                DB $FF, 135
1352+ CD4B 31 87        SunSqr47:               DB $31, 135
1353+ CD4D FF 88                                DB $FF, 136
1354+ CD4F 40 88        SunSqr48:               DB $40, 136
1355+ CD51 FF 89                                DB $FF, 137
1356+ CD53 51 89        SunSqr49:               DB $51, 137
1357+ CD55 FF 8A                                DB $FF, 138
1358+ CD57 64 8A        SunSqr4A:               DB $64, 138
1359+ CD59 FF 8A                                DB $FF, 138
1360+ CD5B 79 8B        SunSqr4B:               DB $79, 139
1361+ CD5D FF 8B                                DB $FF, 139
1362+ CD5F 90 8C        SunSqr4C:               DB $90, 140
1363+ CD61 FF 8C                                DB $FF, 140
1364+ CD63 A9 8D        SunSqr4D:               DB $A9, 141
1365+ CD65 FF 8D                                DB $FF, 141
1366+ CD67 C4 8E        SunSqr4E:               DB $C4, 142
1367+ CD69 FF 8E                                DB $FF, 142
1368+ CD6B E1 8F        SunSqr4F:               DB $E1, 143
1369+ CD6D FF 8F                                DB $FF, 143
1370+ CD6F FF 8F        SunSqr50:               DB $FF, 143
1371+ CD71 00 90        SunSqr51:               DB $00, 144
1372+ CD73 FF 90                                DB $FF, 144
1373+ CD75 21 91        SunSqr52:               DB $21, 145
1374+ CD77 FF 91                                DB $FF, 145
1375+ CD79 44 92        SunSqr53:               DB $44, 146
1376+ CD7B FF 92                                DB $FF, 146
1377+ CD7D 69 93        SunSqr54:               DB $69, 147
1378+ CD7F FF 93                                DB $FF, 147
1379+ CD81 90 94        SunSqr55:               DB $90, 148
1380+ CD83 FF 94                                DB $FF, 148
1381+ CD85 B9 95        SunSqr56:               DB $B9, 149
1382+ CD87 FF 95                                DB $FF, 149
1383+ CD89 E4 96        SunSqr57:               DB $E4, 150
1384+ CD8B FF 96                                DB $FF, 150
1385+ CD8D FF 96        SunSqr58:               DB $FF, 150
1386+ CD8F 11 97        SunSqr59:               DB $11, 151
1387+ CD91 FF 97                                DB $FF, 151
1388+ CD93 40 98        SunSqr5A:               DB $40, 152
1389+ CD95 FF 98                                DB $FF, 152
1390+ CD97 71 99        SunSqr5B:               DB $71, 153
1391+ CD99 FF 99                                DB $FF, 153
1392+ CD9B A4 9A        SunSqr5C:               DB $A4, 154
1393+ CD9D FF 9A                                DB $FF, 154
1394+ CD9F D9 9B        SunSqr5D:               DB $D9, 155
1395+ CDA1 FF 9B                                DB $FF, 155
1396+ CDA3 FF 9B        SunSqr5E:               DB $FF, 155
1397+ CDA5 10 9C        SunSqr5F:               DB $10, 156
1398+ CDA7 FF 9C                                DB $FF, 156
1399+ CDA9 49 9D        SunSqr60:               DB $49, 157
1400+ CDAB FF 9D                                DB $FF, 157
1401+ CDAD 84 9E        SunSqr61:               DB $84, 158
1402+ CDAF FF 9E                                DB $FF, 158
1403+ CDB1 C1 9F        SunSqr62:               DB $C1, 159
1404+ CDB3 FF 9F                                DB $FF, 159
1405+ CDB5 FF 9F        SunSqr63:               DB $FF, 159
1406+ CDB7 00 A0        SunSqr64:               DB $00, 160
1407+ CDB9 FF A0                                DB $FF, 160
1408+ CDBB 41 A1        SunSqr65:               DB $41, 161
1409+ CDBD FF A1                                DB $FF, 161
1410+ CDBF 84 A2        SunSqr66:               DB $84, 162
1411+ CDC1 FF A2                                DB $FF, 162
1412+ CDC3 C9 A3        SunSqr67:               DB $C9, 163
1413+ CDC5 FF A3                                DB $FF, 163
1414+ CDC7 FF A3        SunSqr68:               DB $FF, 163
1415+ CDC9 10 A4        SunSqr69:               DB $10, 164
1416+ CDCB FF A4                                DB $FF, 164
1417+ CDCD 59 A5        SunSqr6A:               DB $59, 165
1418+ CDCF FF A5                                DB $FF, 165
1419+ CDD1 A4 A6        SunSqr6B:               DB $A4, 166
1420+ CDD3 FF A6                                DB $FF, 166
1421+ CDD5 FF A7        SunSqr6C:               DB $FF, 167
1422+ CDD7 FF A7        SunSqr6D:               DB $FF, 167
1423+ CDD9 40 A8        SunSqr6E:               DB $40, 168
1424+ CDDB FF A8                                DB $FF, 168
1425+ CDDD 91 A9        SunSqr6F:               DB $91, 169
1426+ CDDF FF A9                                DB $FF, 169
1427+ CDE1 E4 AA        SunSqr70:               DB $E4, 170
1428+ CDE3 FF AA                                DB $FF, 170
1429+ CDE5 00 AA        SunSqr71:               DB $00, 170
1430+ CDE7 FF AA                                DB $FF, 170
1431+ CDE9 39 AB        SunSqr72:               DB $39, 171
1432+ CDEB FF AB                                DB $FF, 171
1433+ CDED 90 AC        SunSqr73:               DB $90, 172
1434+ CDEF FF AC                                DB $FF, 172
1435+ CDF1 E9 AD        SunSqr74:               DB $E9, 173
1436+ CDF3 FF AD                                DB $FF, 173
1437+ CDF5 FF AD        SunSqr75:               DB $FF, 173
1438+ CDF7 44 AE        SunSqr76:               DB $44, 174
1439+ CDF9 FF AE                                DB $FF, 174
1440+ CDFB A1 AF        SunSqr77:               DB $A1, 175
1441+ CDFD FF AF                                DB $FF, 175
1442+ CDFF FF AF        SunSqr78:               DB $FF, 175
1443+ CE01 00 B0        SunSqr79:               DB $00, 176
1444+ CE03 FF B0                                DB $FF, 176
1445+ CE05 61 B1        SunSqr7A:               DB $61, 177
1446+ CE07 FF B1                                DB $FF, 177
1447+ CE09 C4 B2        SunSqr7B:               DB $C4, 178
1448+ CE0B FF B2                                DB $FF, 178
1449+ CE0D FF B2        SunSqr7C:               DB $FF, 178
1450+ CE0F 29 B3        SunSqr7D:               DB $29, 179
1451+ CE11 FF B3                                DB $FF, 179
1452+ CE13 90 B4        SunSqr7E:               DB $90, 180
1453+ CE15 FF B4                                DB $FF, 180
1454+ CE17 F9 B5        SunSqr7F:               DB $F9, 181
1455+ CE19 FF B5                                DB $FF, 181
1456+ CE1B FF B5        SunSqr80:               DB $FF, 181
1457+ CE1D 64 B6        SunSqr81:               DB $64, 182
1458+ CE1F FF B6                                DB $FF, 182
1459+ CE21 D1 B7        SunSqr82:               DB $D1, 183
1460+ CE23 FF B7        SunSqr83:               DB $FF, 183
1461+ CE25 FF B7                                DB $FF, 183
1462+ CE27 40 B8        SunSqr84:               DB $40, 184
1463+ CE29 FF B8                                DB $FF, 184
1464+ CE2B B1 B9        SunSqr85:               DB $B1, 185
1465+ CE2D FF B9                                DB $FF, 185
1466+ CE2F FF B9        SunSqr86:               DB $FF, 185
1467+ CE31 24 BA        SunSqr87:               DB $24, 186
1468+ CE33 FF BA                                DB $FF, 186
1469+ CE35 99 BB        SunSqr88:               DB $99, 187
1470+ CE37 FF BB                                DB $FF, 187
1471+ CE39 FF BB        SunSqr89:               DB $FF, 187
1472+ CE3B 10 BC        SunSqr8A:               DB $10, 188
1473+ CE3D FF BC                                DB $FF, 188
1474+ CE3F 89 BD        SunSqr8B:               DB $89, 189
1475+ CE41 FF BD                                DB $FF, 189
1476+ CE43 FF BD        SunSqr8C:               DB $FF, 189
1477+ CE45 04 BE        SunSqr8D:               DB $04, 190
1478+ CE47 FF BE                                DB $FF, 190
1479+ CE49 81 BF        SunSqr8E:               DB $81, 191
1480+ CE4B FF BF                                DB $FF, 191
1481+ CE4D FF BF        SunSqr8F:               DB $FF, 191
1482+ CE4F 00 C0        SunSqr90:               DB $00, 192
1483+ CE51 FF C0                                DB $FF, 192
1484+ CE53 81 C1        SunSqr91:               DB $81, 193
1485+ CE55 FF C1                                DB $FF, 193
1486+ CE57 FF C1        SunSqr92:               DB $FF, 193
1487+ CE59 04 C2        SunSqr93:               DB $04, 194
1488+ CE5B FF C2                                DB $FF, 194
1489+ CE5D 89 C3        SunSqr94:               DB $89, 195
1490+ CE5F FF C3                                DB $FF, 195
1491+ CE61 FF C3        SunSqr95:               DB $FF, 195
1492+ CE63 10 C4        SunSqr96:               DB $10, 196
1493+ CE65 FF C4                                DB $FF, 196
1494+ CE67 99 C5        SunSqr97:               DB $99, 197
1495+ CE69 FF C5                                DB $FF, 197
1496+ CE6B FF C5        SunSqr98:               DB $FF, 197
1497+ CE6D 24 C6        SunSqr99:               DB $24, 198
1498+ CE6F FF C6                                DB $FF, 198
1499+ CE71 B1 C7        SunSqr9A:               DB $B1, 199
1500+ CE73 FF C7                                DB $FF, 199
1501+ CE75 FF C7        SunSqr9B:               DB $FF, 199
1502+ CE77 40 C8        SunSqr9C:               DB $40, 200
1503+ CE79 FF C8                                DB $FF, 200
1504+ CE7B D1 C9        SunSqr9D:               DB $D1, 201
1505+ CE7D FF C9                                DB $FF, 201
1506+ CE7F FF C9        SunSqr9E:               DB $FF, 201
1507+ CE81 64 CA        SunSqr9F:               DB $64, 202
1508+ CE83 FF CA                                DB $FF, 202
1509+ CE85 F9 CB        SunSqrA0:               DB $F9, 203
1510+ CE87 FF CB                                DB $FF, 203
1511+ CE89 FF CB        SunSqrA1:               DB $FF, 203
1512+ CE8B 90 CC        SunSqrA2:               DB $90, 204
1513+ CE8D FF CC                                DB $FF, 204
1514+ CE8F FF CC        SunSqrA3:               DB $FF, 204
1515+ CE91 29 CD        SunSqrA4:               DB $29, 205
1516+ CE93 FF CD                                DB $FF, 205
1517+ CE95 C4 CE        SunSqrA5:               DB $C4, 206
1518+ CE97 FF CE                                DB $FF, 206
1519+ CE99 FF CE        SunSqrA6:               DB $FF, 206
1520+ CE9B 61 CF        SunSqrA7:               DB $61, 207
1521+ CE9D FF CF                                DB $FF, 207
1522+ CE9F FF CF        SunSqrA8:               DB $FF, 207
1523+ CEA1 00 D0        SunSqrA9:               DB $00, 208
1524+ CEA3 FF D0                                DB $FF, 208
1525+ CEA5 A1 D1        SunSqrAA:               DB $A1, 209
1526+ CEA7 FF D1                                DB $FF, 209
1527+ CEA9 FF D1        SunSqrAB:               DB $FF, 209
1528+ CEAB 44 D2        SunSqrAC:               DB $44, 210
1529+ CEAD FF D2                                DB $FF, 210
1530+ CEAF E9 D3        SunSqrAD:               DB $E9, 211
1531+ CEB1 FF D3                                DB $FF, 211
1532+ CEB3 FF D3        SunSqrAE:               DB $FF, 211
1533+ CEB5 90 D4        SunSqrAF:               DB $90, 212
1534+ CEB7 FF D4        SunSqrB0:               DB $FF, 212
1535+ CEB9 39 D5        SunSqrB1:               DB $39, 213
1536+ CEBB FF D5                                DB $FF, 213
1537+ CEBD E4 D6        SunSqrB2:               DB $E4, 214
1538+ CEBF FF D6                                DB $FF, 214
1539+ CEC1 FF D6        SunSqrB3:               DB $FF, 214
1540+ CEC3 91 D7        SunSqrB4:               DB $91, 215
1541+ CEC5 FF D7                                DB $FF, 215
1542+ CEC7 FF D7        SunSqrB5:               DB $FF, 215
1543+ CEC9 40 D8        SunSqrB6:               DB $40, 216
1544+ CECB FF D8                                DB $FF, 216
1545+ CECD F1 D9        SunSqrB7:               DB $F1, 217
1546+ CECF FF D9                                DB $FF, 217
1547+ CED1 FF D9        SunSqrB8:               DB $FF, 217
1548+ CED3 FF D9                                DB $FF, 217
1549+ CED5 A4 DA        SunSqrB9:               DB $A4, 218
1550+ CED7 FF DA        SunSqrBA:               DB $FF, 218 ; we can reuse SunSeqrBA as  $FF for B9 terminator as well as they have the same target
1551+ CED9 59 DB        SunSqrBB:               DB $59, 219
1552+ CEDB FF DB                                DB $FF, 219
1553+ CEDD FF DB        SunSqrBC:               DB $FF, 219
1554+ CEDF 10 DC        SunSqrBD:               DB $10, 220
1555+ CEE1 FF DC                                DB $FF, 220
1556+ CEE3 C9 DD        SunSqrBE:               DB $C9, 221
1557+ CEE5 FF DD                                DB $FF, 221
1558+ CEE7 FF DD        SunSqrBF:               DB $FF, 221
1559+ CEE9 84 DE        SunSqrC0:               DB $84, 222
1560+ CEEB FF DE                                DB $FF, 222
1561+ CEED FF DE        SunSqrC1:               DB $FF, 222
1562+ CEEF 41 DF        SunSqrC2:               DB $41, 223
1563+ CEF1 FF DF                                DB $FF, 223
1564+ CEF3 FF DF        SunSqrC3:               DB $FF, 223
1565+ CEF5 00 E0        SunSqrC4:               DB $00, 224
1566+ CEF7 FF E0                                DB $FF, 224
1567+ CEF9 C1 E1        SunSqrC5:               DB $C1, 225
1568+ CEFB FF E1                                DB $FF, 225
1569+ CEFD FF E1        SunSqrC6:               DB $FF, 225
1570+ CEFF 84 E2        SunSqrC7:               DB $84, 226
1571+ CF01 FF E2        SunSqrC8:               DB $FF, 226
1572+ CF03 49 E3        SunSqrC9:               DB $49, 227
1573+ CF05 FF E3                                DB $FF, 227
1574+ CF07 FF E4        SunSqrCA:               DB $FF, 228
1575+ CF09 10 E4        SunSqrCB:               DB $10, 228
1576+ CF0B FF E4                                DB $FF, 228
1577+ CF0D D9 E5        SunSqrCC:               DB $D9, 229
1578+ CF0F FF E5                                DB $FF, 229
1579+ CF11 FF E5        SunSqrCD:               DB $FF, 229
1580+ CF13 A4 E6        SunSqrCE:               DB $A4, 230
1581+ CF15 FF E6                                DB $FF, 230
1582+ CF17 FF E6        SunSqrCF:               DB $FF, 230
1583+ CF19 71 E7        SunSqrD0:               DB $71, 231
1584+ CF1B FF E7                                DB $FF, 231
1585+ CF1D FF E7        SunSqrD1:               DB $FF, 231
1586+ CF1F 40 E8        SunSqrD2:               DB $40, 232
1587+ CF21 FF E8                                DB $FF, 232
1588+ CF23 FF E8        SunSqrD3:               DB $FF, 232
1589+ CF25 11 E9        SunSqrD4:               DB $11, 233
1590+ CF27 FF E9                                DB $FF, 233
1591+ CF29 E4 EA        SunSqrD5:               DB $E4, 234
1592+ CF2B FF EA                                DB $FF, 234
1593+ CF2D FF EA        SunSqrD6:               DB $FF, 234
1594+ CF2F B9 EB        SunSqrD7:               DB $B9, 235
1595+ CF31 FF EB                                DB $FF, 235
1596+ CF33 FF EB        SunSqrD8:               DB $FF, 235
1597+ CF35 90 EC        SunSqrD9:               DB $90, 236
1598+ CF37 FF EC                                DB $FF, 236
1599+ CF39 FF EC        SunSqrDA:               DB $FF, 236
1600+ CF3B 69 ED        SunSqrDB:               DB $69, 237
1601+ CF3D FF ED                                DB $FF, 237
1602+ CF3F FF ED        SunSqrDC:               DB $FF, 237
1603+ CF41 44 EE        SunSqrDD:               DB $44, 238
1604+ CF43 FF EE        SunSqrDE:               DB $FF, 238
1605+ CF45 21 EF        SunSqrDF:               DB $21, 239
1606+ CF47 FF EF                                DB $FF, 239
1607+ CF49 00 F0        SunSqrE0:               DB $00, 240
1608+ CF4B FF F0                                DB $FF, 240
1609+ CF4D 00 F0        SunSqrE1:               DB $00, 240
1610+ CF4F FF F0                                DB $FF, 240
1611+ CF51 E1 F1        SunSqrE2:               DB $E1, 241
1612+ CF53 FF F1                                DB $FF, 241
1613+ CF55 E1 F1        SunSqrE3:               DB $E1, 241
1614+ CF57 FF F1                                DB $FF, 241
1615+ CF59 C4 F2        SunSqrE4:               DB $C4, 242
1616+ CF5B FF F2                                DB $FF, 242
1617+ CF5D FF F2        SunSqrE5:               DB $FF, 242
1618+ CF5F A9 F3        SunSqrE6:               DB $A9, 243
1619+ CF61 FF F3                                DB $FF, 243
1620+ CF63 FF F3        SunSqrE7:               DB $FF, 243
1621+ CF65 FF F3                                DB $FF, 243
1622+ CF67 90 F3        SunSqrE8:               DB $90, 243
1623+ CF69 FF F4                                DB $FF, 244
1624+ CF6B FF F4        SunSqrE9:               DB $FF, 244
1625+ CF6D 79 F5        SunSqrEA:               DB $79, 245
1626+ CF6F FF F5                                DB $FF, 245
1627+ CF71 FF F5        SunSqrEB:               DB $FF, 245
1628+ CF73 64 F6        SunSqrEC:               DB $64, 246
1629+ CF75 FF F6        SunSqrED:               DB $FF, 246
1630+ CF77 51 F7        SunSqrEE:               DB $51, 247
1631+ CF79 FF F7                                DB $FF, 247
1632+ CF7B FF F7        SunSqrEF:               DB $FF, 247
1633+ CF7D 40 F8        SunSqrF0:               DB $40, 248
1634+ CF7F FF F8        SunSqrF1:               DB $FF, 248
1635+ CF81 31 F9        SunSqrF2:               DB $31, 249
1636+ CF83 FF F9                                DB $FF, 249
1637+ CF85 FF F9        SunSqrF3:               DB $FF, 249
1638+ CF87 24 FA        SunSqrF4:               DB $24, 250
1639+ CF89 FF FA                                DB $FF, 250
1640+ CF8B FF FA        SunSqrF5:               DB $FF, 250
1641+ CF8D 19 FB        SunSqrF6:               DB $19, 251
1642+ CF8F FF FB                                DB $FF, 251
1643+ CF91 FF FB        SunSqrF7:               DB $FF, 251
1644+ CF93 10 FC        SunSqrF8:               DB $10, 252
1645+ CF95 FF FC                                DB $FF, 252
1646+ CF97 FF FC        SunSqrF9:               DB $FF, 252
1647+ CF99 09 FD        SunSqrFA:               DB $09, 253
1648+ CF9B FF FD                                DB $FF, 253
1649+ CF9D FF FD        SunSqrFB:               DB $FF, 253
1650+ CF9F 04 FE        SunSqrFC:               DB $04, 254
1651+ CFA1 FF FE                                DB $FF, 254
1652+ CFA3 FF FE        SunSqrFD:               DB $FF, 254
1653+ CFA5 01 FF        SunSqrFE:               DB $01, 255
1654+ CFA7 FF FF        SunSqrFF:               DB $FF, 255
1655+ CFA9
1656+ CFA9
1657+ CFA9
1658+ CFA9              SunBankSize  EQU $ - StartOfSun
1659+ CFA9
1660+ CFA9
# file closed: ./Universe/Sun/sun_data.asm
1028  CFA9                                      DISPLAY "Bank ",BankSunData," - Bytes free ",/D, $2000 - ($-SunBankAddr), " - BankSunData"
1029  CFA9              ; Bank 84  ------------------------------------------------------------------------------------------------------------------------
1030  CFA9                                      SLOT    PlanetBankAddr
1031  CFA9                                      PAGE    BankPlanetData
1032  CFA9                                      ORG	    PlanetBankAddr,BankPlanetData
1033  C000                                      INCLUDE "./Universe/Planet/planet_data.asm"
# file opened: ./Universe/Planet/planet_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                      0123456789ABCDEF
  14+ C000 50 6C 61 6E  StartOfPlanet:     DB "Planet Data....."
  14+ C004 65 74 20 44
  14+ C008 61 74 61 2E
  14+ C00C 2E 2E 2E 2E
  15+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  16+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  17+ C010              ; Universe map substibute for INWK
  18+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  19+ C010              PBnKDataBlock:
  20+ C010                                      INCLUDE "./Universe/Planet/PlanetPosVars.asm"
# file opened: ././Universe/Planet/PlanetPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           PBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           PBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           PBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           PBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           PBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           PBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           PBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           PBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           PBnKzsgn                    DB  0                       ; INWK +8
  11++C019 00 00        PlanetCompassX              DW  0
  12++C01B 00 00        PlanetCompassY              DW  0
  13++C01D
# file closed: ././Universe/Planet/PlanetPosVars.asm
  21+ C01D                                      INCLUDE "./Universe/Planet/PlanetRotationMatrixVars.asm"
# file opened: ././Universe/Planet/PlanetRotationMatrixVars.asm
   1++C01D              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C01D              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C01D 00 00        PBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01F              PBnKrotmatSidev             equ PBnKrotmatSidevX
   5++C01F 00 00        PBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C021 00 00        PBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C023 00 00        PBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C025              PBnKrotmatRoofv             equ PBnKrotmatRoofvX
   9++C025 00 00        PBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C027 00 00        PBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C029 00 00        PBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C02B              PBnKrotmatNosev             EQU PBnKrotmatNosevX
  13++C02B 00 00        PBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C02D 00 00        PBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02F
# file closed: ././Universe/Planet/PlanetRotationMatrixVars.asm
  22+ C02F                                      INCLUDE "./Universe/Planet/PlanetAIRuntimeData.asm"
# file opened: ././Universe/Planet/PlanetAIRuntimeData.asm
   1++C02F              ; -- Ship AI data
   2++C02F 00           PBnKRotXCounter             DB  0                       ; INWK +29
   3++C030 00           PBnKRotZCounter             DB  0                       ; INWK +30
   4++C031 00           PBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C032 00           PBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C033 00           PBnKShipType                DB  0
# file closed: ././Universe/Planet/PlanetAIRuntimeData.asm
  23+ C034
  24+ C034
  25+ C034                                      INCLUDE "./Universe/Planet/PlanetXX16Vars.asm"
# file opened: ././Universe/Planet/PlanetXX16Vars.asm
   1++C034              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C034 00 00        PBnkTransmatSidevX          DW  0               ; XX16+0
   3++C036              PBnkTransmatSidev           EQU PBnkTransmatSidevX
   4++C036 00 00        PBnkTransmatSidevY          DW 0                ; XX16+2
   5++C038 00 00        PBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C03A 00 00        PBnkTransmatRoofvX          DW 0
   7++C03C              PBnkTransmatRoofv           EQU PBnkTransmatRoofvX
   8++C03C 00 00        PBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03E 00 00        PBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C040 00 00        PBnkTransmatNosevX          DW 0
  11++C042              PBnkTransmatNosev           EQU PBnkTransmatNosevX
  12++C042 00 00        PBnkTransmatNosevY          DW 0                ; XX16+2
  13++C044 00 00        PBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C046 00 00        PBnkTransmatTransX          DW 0
  15++C048 00 00        PBnkTransmatTransY          DW 0
  16++C04A 00 00        PBnkTransmatTransZ          DW 0
  17++C04C              PlanetXX16                      equ PBnkTransmatSidev
  18++C04C              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04C 00 00        PBnkTransInvRow0x0          DW 0
  20++C04E 00 00        PBnkTransInvRow0x1          DW 0
  21++C050 00 00        PBnkTransInvRow0x2          DW 0
  22++C052 00 00        PBnkTransInvRow0x3          DW 0
  23++C054 00 00        PBnkTransInvRow1y0          DW 0
  24++C056 00 00        PBnkTransInvRow1y1          DW 0
  25++C058 00 00        PBnkTransInvRow1y2          DW 0
  26++C05A 00 00        PBnkTransInvRow1y3          DW 0
  27++C05C 00 00        PBnkTransInvRow2z0          DW 0
  28++C05E 00 00        PBnkTransInvRow2z1          DW 0
  29++C060 00 00        PBnkTransInvRow2z2          DW 0
  30++C062 00 00        PBnkTransInvRow2z3          DW 0
  31++C064
  32++C064              PlanetXX16Inv             equ PBnkTransInvRow0x0
  33++C064
# file closed: ././Universe/Planet/PlanetXX16Vars.asm
  26+ C064                                      INCLUDE "./Universe/Planet/PlanetXX25Vars.asm"
# file opened: ././Universe/Planet/PlanetXX25Vars.asm
   1++C064              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C064 00           PBnKProjxLo                 DB  0
   3++C065 00           PBnKProjxHi                 DB  0
   4++C066 00           PBnKProjxSgn                DB  0
   5++C067              PBnKProjx                   EQU PBnKProjxLo
   6++C067 00           PBnKProjyLo                 DB  0
   7++C068 00           PBnKProjyHi                 DB  0
   8++C069 00           PBnKProjySgn                DB  0
   9++C06A              PBnKProjy                   EQU PBnKProjyLo
  10++C06A 00           PBnKProjzLo                 DB  0
  11++C06B 00           PBnKProjzHi                 DB  0
  12++C06C 00           PBnKProjzSgn                DB  0
  13++C06D              PBnKProjz                   EQU PBnKProjzLo
  14++C06D              PXX25                       EQU PBnKProjxLo
  15++C06D
# file closed: ././Universe/Planet/PlanetXX25Vars.asm
  27+ C06D                                      INCLUDE "./Universe/Planet/PlanetXX18Vars.asm"
# file opened: ././Universe/Planet/PlanetXX18Vars.asm
   1++C06D              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06D 00           PBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C06E 00           PBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06F 00           PBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C070              PBnKDrawCam0x               equ PBnKDrawCam0xLo
   6++C070 00           PBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C071 00           PBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C072 00           PBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C073              PBnKDrawCam0y               equ PBnKDrawCam0yLo
  10++C073 00           PBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C074 00           PBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C075 00           PBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C076              PBnKDrawCam0z               equ PBnKDrawCam0zLo
  14++C076              PXX18                       equ PBnKDrawCam0xLo
  15++C076
# file closed: ././Universe/Planet/PlanetXX18Vars.asm
  28+ C076
  29+ C076              ; Used to make 16 bit reads a little cleaner in source code
  30+ C076 00 00 00     PBnKzPoint                  DS  3
  31+ C079              PBnKzPointLo                equ PBnKzPoint
  32+ C079              PBnKzPointHi                equ PBnKzPoint+1
  33+ C079              PBnKzPointSign              equ PBnKzPoint+2
  34+ C079                                      INCLUDE "./Universe/Planet/PlanetXX15Vars.asm"
# file opened: ././Universe/Planet/PlanetXX15Vars.asm
   1++C079              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C079 00           PBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C07A 00           PBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C07B 00           PBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C07C 00           PBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C07D 00           PBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C07E 00           PBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07F
   9++C07F              PXX15                       equ PBnKXScaled
  10++C07F              PXX15VecX                   equ PXX15
  11++C07F              PXX15VecY                   equ PXX15+1
  12++C07F              PXX15VecZ                   equ PXX15+2
  13++C07F              PBnKXPoint                  equ PXX15
  14++C07F              PBnKXPointLo                equ PXX15+0
  15++C07F              PBnKXPointHi                equ PXX15+1
  16++C07F              PBnKXPointSign              equ PXX15+2
  17++C07F              PBnKYPoint                  equ PXX15+3
  18++C07F              PBnKYPointLo                equ PXX15+3
  19++C07F              PBnKYPointHi                equ PXX15+4
  20++C07F              PBnKYPointSign              equ PXX15+5
  21++C07F
# file closed: ././Universe/Planet/PlanetXX15Vars.asm
  35+ C07F                                      INCLUDE "./Universe/Planet/PlanetXX12Vars.asm"
# file opened: ././Universe/Planet/PlanetXX12Vars.asm
   1++C07F              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07F              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07F 00           PBnKXX12xLo                 DB  0               ; XX12+0
   4++C080 00           PBnKXX12xSign               DB  0               ; XX12+1
   5++C081 00           PBnKXX12yLo                 DB  0               ; XX12+2
   6++C082 00           PBnKXX12ySign               DB  0               ; XX12+3
   7++C083 00           PBnKXX12zLo                 DB  0               ; XX12+4
   8++C084 00           PBnKXX12zSign               DB  0               ; XX12+5
   9++C085 00 00 00...  PXX12Save                   DS  6
  10++C08B 00 00 00...  PXX12Save2                  DS  6
  11++C091              PXX12                       equ PBnKXX12xLo
  12++C091              varPXX12                    equ PBnKXX12xLo
  13++C091              ; Repurposed XX12 when plotting lines
  14++C091              PBnkY2                      equ PXX12+0
  15++C091              PbnKy2Lo                    equ PXX12+0
  16++C091              PBnkY2Hi                    equ PXX12+1
  17++C091              PBnkDeltaXLo                equ PXX12+2
  18++C091              PBnkDeltaXHi                equ PXX12+3
  19++C091              PBnkDeltaYLo                equ PXX12+4
  20++C091              PBnkDeltaYHi                equ PXX12+5
  21++C091              PbnkGradient                equ PXX12+2
  22++C091              PBnkTemp1                   equ PXX12+2
  23++C091              PBnkTemp1Lo                 equ PXX12+2
  24++C091              PBnkTemp1Hi                 equ PXX12+3
  25++C091              PBnkTemp2                   equ PXX12+3
  26++C091              PBnkTemp2Lo                 equ PXX12+3
  27++C091              PBnkTemp2Hi                 equ PXX12+4
  28++C091
# file closed: ././Universe/Planet/PlanetXX12Vars.asm
  36+ C091
  37+ C091
  38+ C091              ; Post clipping the results are now 8 bit
  39+ C091 00           PBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  40+ C092 00           PBnKProjectedY              DB  0
  41+ C093 00           PBnKProjectedX              DB  0
  42+ C094              PBnKProjected               equ PBnKProjectedY  ; resultant projected position
  43+ C094 00 00 00...  PLanetXX15Save              DS  8
  44+ C09C 00 00 00...  PLanetXX15Save2             DS  8
  45+ C0A4
  46+ C0A4              PBnK_Data_len               EQU $ - PBnKDataBlock
  47+ C0A4
  48+ C0A4              ; --------------------------------------------------------------
  49+ C0A4 21 10 C0     ResetPBnKData:          ld      hl,PBnKDataBlock
  50+ C0A7 11 94 00                             ld      de,PBnK_Data_len
  51+ C0AA AF                                   xor     a
  52+ C0AB CD 32 7D                             call    memfill_dma
  53+ C0AE C9                                   ret
  54+ C0AF              ; --------------------------------------------------------------
  55+ C0AF 21 10 C0     ResetPBnKPosition:      ld      hl,PBnKxlo
  56+ C0B2 06 09                                ld      b, 3*3
  57+ C0B4 AF                                   xor     a
  58+ C0B5 77           .zeroLoop:              ld      (hl),a
  59+ C0B6 23                                   inc     hl
  60+ C0B7 10 FC                                djnz    .zeroLoop
  61+ C0B9 C9                                   ret
  62+ C0BA              ; This uses UBNKNodeArray as the list
  63+ C0BA              ; the array is 256 * 2 bytes
  64+ C0BA              ; counter is current row y pos
  65+ C0BA              ; byte 1 is start x pos
  66+ C0BA              ; byte 2 is end x pos
  67+ C0BA              ; if they are both 0 then skip
  68+ C0BA              ; its always horizontal, yellow
  69+ C0BA
  70+ C0BA              ; PLANET
  71+ C0BA 21 18 C0     WarpPlanetCloser:       ld      hl,PBnKzsgn
  72+ C0BD 7E           .PositiveAxis:          ld      a,(hl)
  73+ C0BE                                      ReturnIfALTNusng 2                      ; hard liit along z axis
  73+ C0BE FE 02       >                        cp    2
  73+ C0C0 D8          >                        ret	 c
  74+ C0C1 35                                   dec     (hl)
  75+ C0C2 C9                                   ret
  76+ C0C3
  77+ C0C3              ; It should normally be behind but someone could fly past a planet, turn aroudn and jump
  78+ C0C3 21 18 C0     WarpPlanetFurther:      ld      hl,PBnKzsgn
  79+ C0C6 7E                                   ld      a,(hl)
  80+ C0C7                                      ReturnIfAGTENusng $7F                   ; this is the hard limit else it woudl turn negative and flip to -0
  80+ C0C7 FE 7F       >                        cp    $7F
  80+ C0C9 D0          >                        ret	 nc
  81+ C0CA 34                                   inc     (hl)                           ; if its negative it will still increase as we will block insane values
  82+ C0CB C9                                   ret
  83+ C0CC              ; --------------------------------------------------------------
  84+ C0CC              ; This sets current universe object to a planet,they use sign + 23 bit positions
  85+ C0CC CD A4 C0     CreatePlanet:           call    ResetPBnKData
  86+ C0CF 3A 52 82                             ld      a,(DisplayTekLevel)
  87+ C0D2 E6 02                                and     %00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
  88+ C0D4 F6 80                                or      %10000000
  89+ C0D6 32 33 C0                             ld      (PBnKShipType),a
  90+ C0D9                                      MaxUnivPitchAndRoll
  90+ C0D9 3E 7F       >                        ld      a,127
  90+ C0DB 32 48 C0    >                        ld      (UBnKRotXCounter),a
  90+ C0DE 32 49 C0    >                        ld      (UBnKRotZCounter),a
  91+ C0E1 3A 24 82                             ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
  92+ C0E4 E6 03                                and     %00000011               ; .
  93+ C0E6 CE 03                                adc     3                       ; .
  94+ C0E8 32 18 C0                             ld      (PBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
  95+ C0EB CB 1F                                rr      a
  96+ C0ED 32 12 C0                             ld      (PBnKxsgn),a
  97+ C0F0 32 15 C0                             ld      (PBnKysgn),a
  98+ C0F3 C9                                   ret
  99+ C0F4
 100+ C0F4 CD A4 C0     CreatePlanetLaunched:   call    ResetPBnKData
 101+ C0F7 21 00 00                             ld      hl,0
 102+ C0FA                                      ZeroA
 102+ C0FA AF          >                        xor a
 103+ C0FB 22 10 C0                             ld      (PBnKxlo),hl
 104+ C0FE 22 13 C0                             ld      (PBnKylo),hl
 105+ C101 21 FF FF                             ld      hl,$FFFF
 106+ C104 22 16 C0                             ld      (PBnKzlo),hl
 107+ C107 32 12 C0                             ld      (PBnKxsgn),a
 108+ C10A 32 15 C0                             ld      (PBnKysgn),a
 109+ C10D 32 18 C0                             ld      (PBnKzsgn),a
 110+ C110                                      MaxUnivPitchAndRoll
 110+ C110 3E 7F       >                        ld      a,127
 110+ C112 32 48 C0    >                        ld      (UBnKRotXCounter),a
 110+ C115 32 49 C0    >                        ld      (UBnKRotZCounter),a
 111+ C118 C9                                   ret
 112+ C119              ; NEED FINSIHGING
 113+ C119
 114+ C119
 115+ C119 ED 4B 7D C0  ScalePlanetTo8Bit:		ld			bc,(PBnKZScaled)
 116+ C11D 2A 79 C0                             ld			hl,(PBnKXScaled)
 117+ C120 ED 5B 7B C0                          ld			de,(PBnKYScaled)
 118+ C124 78           .SetABSbc:              ld			a,b
 119+ C125 DD 67                                ld			ixh,a
 120+ C127 E6 7F                                and			SignMask8Bit
 121+ C129 47                                   ld			b,a									; bc = ABS bc
 122+ C12A 7C           .SetABShl:              ld			a,h
 123+ C12B DD 6F                                ld			ixl,a
 124+ C12D E6 7F                                and			SignMask8Bit
 125+ C12F 67                                   ld			h,a									; hl = ABS hl
 126+ C130 7A           .SetABSde:              ld			a,d
 127+ C131 FD 67                                ld			iyh,a
 128+ C133 E6 7F                                and			SignMask8Bit
 129+ C135 57                                   ld			d,a									; de = ABS de
 130+ C136 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 131+ C137 B4                                   or			h                                   ; XX15+1	\ x hi
 132+ C138 B2                                   or			d                                   ; XX15+4	\ y hi
 133+ C139 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 134+ C13B                                      ShiftHLRight1
 134+ C13B CB 3C       >			   srl h
 134+ C13D CB 1D       >			   rr  l
 135+ C13F                                      ShiftDERight1
 135+ C13F CB 3A       >			   srl d
 135+ C141 CB 1B       >			   rr  e
 136+ C143                                      ShiftBCRight1
 136+ C143 CB 38       >			   srl b
 136+ C145 CB 19       >			   rr  c
 137+ C147 C3 36 C1                             jp          .ScaleNodeTo8BitLoop
 138+ C14A              ; now we have scaled values we have to deal with sign
 139+ C14A DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 140+ C14C E6 80                                and			SignOnly8Bit
 141+ C14E B0                                   or			b
 142+ C14F 47                                   ld			b,a
 143+ C150 DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 144+ C152 E6 80                                and			SignOnly8Bit
 145+ C154 B4                                   or			h
 146+ C155 67                                   ld			h,a
 147+ C156 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 148+ C158 E6 80                                and			SignOnly8Bit
 149+ C15A B2                                   or			d
 150+ C15B 57                                   ld			d,a
 151+ C15C ED 43 7D C0  .SignsDoneSaveResult:	ld			(PBnKZScaled),bc
 152+ C160 22 79 C0                             ld			(PBnKXScaled),hl
 153+ C163 ED 53 7B C0                          ld			(PBnKYScaled),de
 154+ C167 78                                   ld			a,b
 155+ C168 32 9E 81                             ld			(varU),a
 156+ C16B 79                                   ld			a,c
 157+ C16C 32 BB 81                             ld			(varT),a
 158+ C16F C9                                   ret
 159+ C170
 160+ C170              ;--------------------------------------------------------------------------------------------------------
 161+ C170                                      include "./Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm"
# file opened: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
   1++C170              CopyPSXX12ScaledToPXX18:
   2++C170              CopyResultToPDrawCam:
   3++C170                      ldCopyByte PXX12         ,PXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C170 3A 7F C0    >                        ld       a,(PXX12)
   3++C173 32 6D C0    >                        ld       (PXX18),a
   4++C176                      ldCopyByte PXX12+1       ,PXX18+2           ; XX12+1 => XX18+2
   4++C176 3A 80 C0    >                        ld       a,(PXX12+1)
   4++C179 32 6F C0    >                        ld       (PXX18+2),a
   5++C17C                      ldCopyByte PXX12+2       ,PXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C17C 3A 81 C0    >                        ld       a,(PXX12+2)
   5++C17F 32 70 C0    >                        ld       (PXX18+3),a
   6++C182                      ldCopyByte PXX12+3       ,PXX18+5           ; XX12+3 => XX18+5
   6++C182 3A 82 C0    >                        ld       a,(PXX12+3)
   6++C185 32 72 C0    >                        ld       (PXX18+5),a
   7++C188                      ldCopyByte PXX12+4       ,PXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C188 3A 83 C0    >                        ld       a,(PXX12+4)
   7++C18B 32 73 C0    >                        ld       (PXX18+6),a
   8++C18E                      ldCopyByte PXX12+5       ,PXX18+8           ; XX12+5 => XX18+8
   8++C18E 3A 84 C0    >                        ld       a,(PXX12+5)
   8++C191 32 75 C0    >                        ld       (PXX18+8),a
   9++C194 C9                   ret
  10++C195
# file closed: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
 162+ C195
 163+ C195              ; ......................................................                                                         ;;;
 164+ C195                          INCLUDE "./Universe/Planet/PlanetApplyMyRollAndPitch.asm"
# file opened: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
   1++C195
   2++C195              ;----------------------------------------------------------------------------------------------------------------------------------
   3++C195              ; Planet version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
   4++C195              ; Need to write a test routine for roll and pitchs
   5++C195 00 00 00 00  PlanetAlphaMulX            DS 4
   6++C199 00 00 00 00  PlanetAlphaMulY            DS 4
   7++C19D 00 00 00 00  PlanetBetaMulZ             DS 4
   8++C1A1 00 00 00     PlanetK2                   DS 3
   9++C1A4
  10++C1A4 3A B8 80     PlanetApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  11++C1A7 21 AB 80                             ld      hl,BETA
  12++C1AA B6                                   or      (hl)
  13++C1AB E6 7F                                and     SignMask8Bit
  14++C1AD CA 5E C2                             jp      z,.NoRotation
  15++C1B0 3A B8 80     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
  16++C1B3 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
  17++C1B5 57                                   ld      d,a                         ; .
  18++C1B6 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  19++C1B9 5F                                   ld      e,a                         ; .
  20++C1BA 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  21++C1BD CD 94 95                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  22++C1C0              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
  23++C1C0                                      ;ld      (PlanetAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
  24++C1C0 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  25++C1C1 32 96 C1                             ld      (PlanetAlphaMulX+1),a
  26++C1C4 7B                                   ld      a,e
  27++C1C5 32 97 C1                             ld      (PlanetAlphaMulX+2),a
  28++C1C8 7A                                   ld      a,d
  29++C1C9 32 98 C1                             ld      (PlanetAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
  30++C1CC ED 5B 14 C0  .CalcK2:                ld      de,(SBnKyhi)                ; DEL = Y
  31++C1D0 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  32++C1D3 6F                                   ld      l,a                         ; .
  33++C1D4 ED 4B 97 C1                          ld      bc,(PlanetAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
  34++C1D8 3A 96 C1                             ld      a,(PlanetAlphaMulX+1)          ; Deal with sign in byte 4
  35++C1DB 67                                   ld      h,a                         ; .
  36++C1DC CD 10 93                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
  37++C1DF 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
  38++C1E0 32 A1 C1                             ld      (PlanetK2),a                   ; we also need to save l for teh beta k2 calc
  39++C1E3 ED 53 A2 C1                          ld      (PlanetK2+1),de                ;
  40++C1E7 EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
  41++C1E8 5F                                   ld      e,a                         ; .
  42++C1E9 3A AB 80                             ld      a,(BETA)                    ; D = BETA
  43++C1EC 57                                   ld      d,a                         ; .
  44++C1ED CD 94 95                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
  45++C1F0 ED 4B 17 C0  .CalcZ:                 ld      bc,(SBnKzhi)                ; BCH = z
  46++C1F4 3A 16 C0                             ld      a,(SBnKzlo)                 ;
  47++C1F7 67                                   ld      h,a                         ;
  48++C1F8 CD 10 93                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
  49++C1FB ED 53 17 C0                          ld      (SBnKzhi),de                ; z = resuklt
  50++C1FF 7D                                   ld      a,l                         ; .
  51++C200 32 16 C0                             ld      (SBnKzlo),a                 ; .
  52++C203 3A AB 80     .CalcBetaZ:             ld      a,(BETA)
  53++C206 EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
  54++C208 57                                   ld      d,a                         ; .
  55++C209 3A 16 C0                             ld      a,(SBnKzlo)                 ; HLE = z
  56++C20C 5F                                   ld      e,a                         ; .
  57++C20D 2A 17 C0                             ld      hl,(SBnKzhi)                ; .
  58++C210 CD 94 95                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
  59++C213              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
  60++C213                                      ;ld      (PlanetBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
  61++C213                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
  62++C213                                      ;ld      (PlanetBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  63++C213                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  64++C213                                      ;ld      (PlanetBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  65++C213                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  66++C213                                      ;ld      (PlanetBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
  67++C213 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
  68++C215 65                                   ld      h,l
  69++C216 ED 5B A2 C1                          ld      de,(PlanetK2+1)                ; DEL = k2
  70++C21A 3A A1 C1                             ld      a,(PlanetK2)
  71++C21D 6F                                   ld      l,a
  72++C21E CD 10 93                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
  73++C221 ED 53 14 C0                          ld      (SBnKyhi),de                ; y = DEL = K2 - Beta * Z
  74++C225 7D                                   ld      a,l                         ; .
  75++C226 32 13 C0                             ld      (SBnKylo),a                 ; .
  76++C229 3A B8 80     .CalcAlphaMulY:         ld      a,(ALPHA)
  77++C22C 57                                   ld      d,a                         ; d = alpha (Q value)
  78++C22D 3A 13 C0                             ld      a,(SBnKylo)                 ; HLE = x sgn, hi, lo
  79++C230 5F                                   ld      e,a                         ; .
  80++C231 2A 14 C0                             ld      hl,(SBnKyhi)                ; .
  81++C234 CD 94 95                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
  82++C237 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
  83++C238 32 99 C1                             ld      (PlanetAlphaMulY),a            ; save sign from result, ELC holds actual result
  84++C23B 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  85++C23C 32 9A C1                             ld      (PlanetAlphaMulY+1),a
  86++C23F 7B                                   ld      a,e
  87++C240 32 9B C1                             ld      (PlanetAlphaMulY+2),a
  88++C243 7A                                   ld      a,d
  89++C244 32 9C C1                             ld      (PlanetAlphaMulY+3),a
  90++C247 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
  91++C249 65                                   ld      h,l                         ; .
  92++C24A ED 5B 11 C0                          ld      de,(SBnKxhi)                ; DEL = Y
  93++C24E 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
  94++C251 6F                                   ld      l,a                         ; .
  95++C252 CD 10 93                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
  96++C255 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
  97++C256 63                                   ld      h,e                         ;
  98++C257 32 12 C0     .CopyResultTo2:         ld      (SBnKxlo+2),a               ; .
  99++C25A 22 10 C0                             ld      (SBnKxlo) ,hl               ; .
 100++C25D C9                                   ret
 101++C25E 3A 99 81     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 102++C261                                      ReturnIfAIsZero
 102++C261 A7          >                        and     a
 102++C262 C8          >                        ret     z
 103++C263 0E 00                                ld      c,0                         ;
 104++C265 67                                   ld      h,a                         ;
 105++C266 06 80                                ld      b,$80                       ;
 106++C268 ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 107++C26C 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 108++C26F 6F                                   ld      l,a                         ; .
 109++C270 CD 10 93                             call    AddBCHtoDELsigned           ; update speed
 110++C273 ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 111++C277 7D                                   ld      a,l
 112++C278 32 16 C0                             ld      (SBnKzlo),a                ;
 113++C27B C9                                   ret
 114++C27C
# file closed: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
 165+ C27C
 166+ C27C 00           PlanetOnScreen          DB 0
 167+ C27D 00 00        PlanetScrnX             DW  0       ; signed
 168+ C27F 00 00        PlanetScrnY             DW  0       ; signed
 169+ C281 00           PlanetRadius            DB  0       ; unsigned
 170+ C282              ; draw circle
 171+ C282
 172+ C282              ;
 173+ C282              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 174+ C282
 175+ C282 00 00 00 00  PlanetVarK                 DS 4
 176+ C286 00 00 00     PlanetVarP                 DS 3
 177+ C289 00           PlanetVarQ                 DS 1
 178+ C28A 00           PlanetVarR                 DS 1
 179+ C28B 00           PlanetVarS                 DS 1
 180+ C28C 00           PlanetVarT                 DS 1
 181+ C28D
 182+ C28D              ; Optimisation
 183+ C28D              ; if a <> 0
 184+ C28D              ;       divide AH by CD
 185+ C28D              ; if h <> 0
 186+ C28D              ;      if c <> 0 return 0
 187+ C28D              ;      else
 188+ C28D              ;        divide HL by DE
 189+ C28D              ; if l <>0
 190+ C28D              ;      if c or d <> 0 return 0
 191+ C28D              ;      else
 192+ C28D              ;        divide l by e
 193+ C28D              ;
 194+ C28D 47           PLanetAHLequAHLDivCDE:  ld      b,a                         ; save a reg
 195+ C28E 79                                   ld      a,c                         ; check for divide by zero
 196+ C28F B2                                   or      d                           ; .
 197+ C290 B3                                   or      e                           ; .
 198+ C291                                      JumpIfZero      .divideByZero       ; .
 198+ C291 CA AA C2    >                        jp	z,.divideByZero
 199+ C294 78                                   ld      a,b                         ; get a back
 200+ C295                                      JumpIfAIsNotZero    .divideAHLbyCDE
 200+ C295 A7          >                        and     a
 200+ C296 C2 B1 C2    >                        jp	    nz,.divideAHLbyCDE
 201+ C299 7C           .AIsZero:               ld      a,h
 202+ C29A                                      JumpIfAIsNotZero    .divideHLbyDE
 202+ C29A A7          >                        and     a
 202+ C29B C2 B8 C2    >                        jp	    nz,.divideHLbyDE
 203+ C29E 7D           .HIsZero:               ld      a,l
 204+ C29F                                      JumpIfAIsNotZero    .divideLbyE
 204+ C29F A7          >                        and     a
 204+ C2A0 C2 C7 C2    >                        jp	    nz,.divideLbyE
 205+ C2A3              .resultIsZero:          ZeroA
 205+ C2A3 AF          >                        xor a
 206+ C2A4 67                                   ld      h,a                        ; result is zero so set hlde
 207+ C2A5 6F                                   ld      l,a                        ; result is zero so set hlde
 208+ C2A6 54 5D                                ld      de,hl
 209+ C2A8                                      ClearCarryFlag
 209+ C2A8 B7          >                        or a
 210+ C2A9 C9                                   ret
 211+ C2AA 3E FF        .divideByZero:          ld      a,$FF
 212+ C2AC 67                                   ld      h,a
 213+ C2AD 6F                                   ld      l,a
 214+ C2AE 54 5D                                ld      de,hl
 215+ C2B0                                      SetCarryFlag
 215+ C2B0 37          >                        scf
 216+ C2B1              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 217+ C2B1              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 218+ C2B1 CD 07 94     .divideAHLbyCDE:        call    Div24by24
 219+ C2B4 EB                                   ex      hl,de                         ; ahl is result
 220+ C2B5 79                                   ld      a,c                           ; ahl is result
 221+ C2B6                                      ClearCarryFlag
 221+ C2B6 B7          >                        or a
 222+ C2B7 C9                                  ret
 223+ C2B8              ; AHL = 0hl/0de as A is zero
 224+ C2B8 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 225+ C2B9                                      JumpIfAIsNotZero   .resultIsZero
 225+ C2B9 A7          >                        and     a
 225+ C2BA C2 A3 C2    >                        jp	    nz,.resultIsZero
 226+ C2BD 44 4D                                ld      bc,hl
 227+ C2BF CD 63 98                             call    BC_Div_DE                   ; BC = HL/DE
 228+ C2C2 60 69                                ld      hl,bc
 229+ C2C4                                      ZeroA                               ; so we can set A to Zero
 229+ C2C4 AF          >                        xor a
 230+ C2C5                                      ClearCarryFlag
 230+ C2C5 B7          >                        or a
 231+ C2C6 C9                                   ret
 232+ C2C7              ; AHL = 00l/00e as A and H are zero
 233+ C2C7 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 234+ C2C8 B2                                   or      d
 235+ C2C9                                      JumpIfAIsNotZero   .resultIsZero
 235+ C2C9 A7          >                        and     a
 235+ C2CA C2 A3 C2    >                        jp	    nz,.resultIsZero
 236+ C2CD 4B                                   ld      c,e
 237+ C2CE 5D                                   ld      e,l
 238+ C2CF CD 25 98                             call    E_Div_C
 239+ C2D2 6F                                   ld      l,a
 240+ C2D3                                      ZeroA
 240+ C2D3 AF          >                        xor a
 241+ C2D4 67                                   ld      h,a
 242+ C2D5                                      ClearCarryFlag
 242+ C2D5 B7          >                        or a
 243+ C2D6 C9                                   ret
 244+ C2D7
 245+ C2D7
 246+ C2D7 47           PlanetProcessVertex:    ld      b,a                         ; save sign byte
 247+ C2D8 ED 5B 16 C0  .PlanetProjectToEye:    ld      de,(PBnKzlo)                ; X Pos = X / Z
 248+ C2DC 3A 18 C0                             ld      a,(PBnKzsgn)                ; CDE = z
 249+ C2DF FD 67                                ld      iyh,a                       ; save sign
 250+ C2E1                                      ClearSignBitA
 250+ C2E1 E6 7F       >                        and     SignMask8Bit
 251+ C2E3                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 252+ C2E3              ;                        ld      c,a                         ;
 253+ C2E3 5A                                   ld      e,d
 254+ C2E4 57                                   ld      d,a
 255+ C2E5 0E 00                                ld      c,0
 256+ C2E7                                      ; added above to correct positioning as in reality its X/(Z/256)
 257+ C2E7 78                                   ld      a,b                         ; restore sign byte
 258+ C2E8 FD 6F                                ld      iyl,a                       ; save sign
 259+ C2EA                                      ClearSignBitA
 259+ C2EA E6 7F       >                        and     SignMask8Bit
 260+ C2EC CD 8D C2                             call PLanetAHLequAHLDivCDE             ; AHL = AHL/CDE unsigned
 261+ C2EF              .CheckPosOnScreenX:     JumpIfAIsNotZero .IsOffScreen         ; if A has a value then its way too large regardless of sign
 261+ C2EF A7          >                        and     a
 261+ C2F0 C2 0D C3    >                        jp	    nz,.IsOffScreen
 262+ C2F3                                      JumpOnLeadSignSet h, .IsOffScreen      ; or bit 7 set of h
 262+ C2F3 7C          >                        ld      a,h
 262+ C2F4 E6 80       >                        and     SignOnly8Bit
 262+ C2F6 C2 0D C3    >                        jp      nz,.IsOffScreen
 263+ C2F9 7C                                   ld      a,h
 264+ C2FA                                      ReturnIfAGTEusng 4                  ; if a > 1024 then its way too large regardless of sign
 264+ C2FA FE 04       >                        cp    4
 264+ C2FC D0          >                        ret	 nc
 265+ C2FD FD 7C                                ld      a,iyh                       ; now deal with the sign
 266+ C2FF FD AD                                xor     iyl
 267+ C301                                      SignBitOnlyA                        ; a= resultant sign
 267+ C301 E6 80       >                        and     SignOnly8Bit
 268+ C303 28 06                                jr      z,.calculatedVert           ; result is positive so we don't 2's compliment it
 269+ C305              .XIsNegative:           NegHL                               ; make 2's c as negative
 269+ C305 AF          >                    xor a
 269+ C306 95          >                    sub l
 269+ C307 6F          >                    ld l,a
 269+ C308 9F          >                    sbc a,a
 269+ C309 94          >                    sub h
 269+ C30A 67          >                    ld h,a
 270+ C30B              .calculatedVert:        ClearCarryFlag
 270+ C30B B7          >                        or a
 271+ C30C C9                                   ret
 272+ C30D 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 273+ C310 FD 7C                                ld      a,iyh
 274+ C312 FD AD                                xor     iyl
 275+ C314                                      SignBitOnlyA
 275+ C314 E6 80       >                        and     SignOnly8Bit
 276+ C316 28 02                                jr      z,.calculatedOffScreen
 277+ C318 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 278+ C319 23                                   inc     hl                          ; .
 279+ C31A              .calculatedOffScreen:   SetCarryFlag
 279+ C31A 37          >                        scf
 280+ C31B C9                                   ret
 281+ C31C
 282+ C31C
 283+ C31C              ; .........................................................................................................................
 284+ C31C              ; we only hit this if z is positive so we can ignore signs
 285+ C31C ED 4B 16 C0  PlanetCalculateRadius:  ld      bc,(PBnKzlo)                ; DBC = z position
 286+ C320 3A 18 C0                             ld      a,(PBnKzsgn)                ;
 287+ C323 57                                   ld      d,a                         ;
 288+ C324 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 289+ C327 CD D0 96                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 290+ C32A B4                                   or      h                           ; if A or H are not 0 then max Radius
 291+ C32B                                      JumpIfAIsZero  .SaveRadius
 291+ C32B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 291+ C32C CA 31 C3    >                        jp	    z, .SaveRadius
 292+ C32F 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 293+ C331 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 294+ C332 F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 295+ C334 32 81 C2                             ld      (PlanetRadius),a               ; save a copy of radius now for later
 296+ C337 5F                                   ld      e,a                         ; as later code expects it to be in e
 297+ C338 C9                                   ret
 298+ C339
 299+ C339              ; Shorter version when sun does not need to be processed to screen
 300+ C339 3A 12 C0     PlanetUpdateCompass:    ld      a,(PBnKxsgn)
 301+ C33C 2A 10 C0                             ld      hl,(PBnKxlo)
 302+ C33F CD D7 C2                             call    PlanetProcessVertex
 303+ C342 22 19 C0                             ld      (PlanetCompassX),hl
 304+ C345 3A 15 C0                             ld      a,(PBnKysgn)
 305+ C348 2A 13 C0                             ld      hl,(PBnKylo)
 306+ C34B CD D7 C2                             call    PlanetProcessVertex
 307+ C34E 22 1B C0                             ld      (PlanetCompassY),hl
 308+ C351 C9                                   ret
 309+ C352
 310+ C352                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 311+ C352 C9           PlanetUpdateAndRender:  ret; This is the source of the rogue single pixel
 312+ C353 CD A4 C1                             call    PlanetApplyMyRollAndPitch
 313+ C356 3A 18 C0     .CheckDrawable:         ld      a,(PBnKzsgn)
 314+ C359                                      JumpIfAGTENusng 48,  PlanetUpdateCompass ; at a distance over 48 its too far away
 314+ C359 FE 30       >                        cp     48
 314+ C35B D2 39 C3    >                        jp		nc,PlanetUpdateCompass
 315+ C35E 21 17 C0                             ld      hl,PBnKzhi                  ; if the two high bytes are zero then its too close
 316+ C361 B6                                   or      (hl)
 317+ C362                                      JumpIfAIsZero       PlanetUpdateCompass
 317+ C362 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 317+ C363 CA 39 C3    >                        jp	    z, PlanetUpdateCompass
 318+ C366 3A 12 C0     .calculateX:            ld      a,(PBnKxsgn)
 319+ C369 2A 10 C0                             ld      hl,(PBnKxlo)
 320+ C36C CD D7 C2                             call    PlanetProcessVertex            ; now returns carry set for failure
 321+ C36F 22 19 C0                             ld      (PlanetCompassX),hl
 322+ C372 D8                                   ret     c
 323+ C373 1E 80        .calculatedX:           ld      e,ScreenCenterX
 324+ C375 16 00                                ld      d,0
 325+ C377                                      ClearCarryFlag
 325+ C377 B7          >                        or a
 326+ C378 ED 5A                                adc     hl,de
 327+ C37A                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 328+ C37A 22 7D C2                             ld      (PlanetScrnX),hl               ; save projected X Position, 2's compliment
 329+ C37D 3A 15 C0     .calculateY:            ld      a,(PBnKysgn)
 330+ C380 2A 13 C0                             ld      hl,(PBnKylo)
 331+ C383 CD D7 C2                             call    PlanetProcessVertex            ; now returns carry set for failure
 332+ C386 22 1B C0                             ld      (PlanetCompassY),hl
 333+ C389 D8                                   ret     c
 334+ C38A 1E 60        .calculatedY:           ld      e,ScreenCenterY
 335+ C38C 16 00                                ld      d,0
 336+ C38E EB                                   ex      de,hl
 337+ C38F                                      ClearCarryFlag
 337+ C38F B7          >                        or a
 338+ C390 ED 52                                sbc     hl,de
 339+ C392                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 340+ C392 22 7F C2                             ld      (PlanetScrnY),hl               ; save projected Y Position, 2's compliment
 341+ C395              ; .........................................................................................................................
 342+ C395 CD 1C C3                             call    PlanetCalculateRadius
 343+ C398              ; .........................................................................................................................
 344+ C398 2A 7D C2     .CheckIfSunOnScreen:    ld      hl,(PlanetScrnX)               ; get x pixel position
 345+ C39B FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 346+ C39E 16 00                                ld      d,0                         ; e still holds radius
 347+ C3A0 7C                                   ld      a,h
 348+ C3A1                                      JumpOnLeadSignSet   h,.CheckXNegative
 348+ C3A1 7C          >                        ld      a,h
 348+ C3A2 E6 80       >                        and     SignOnly8Bit
 348+ C3A4 C2 BA C3    >                        jp      nz,.CheckXNegative
 349+ C3A7 7C           .CheckXPositive:        ld      a,h
 350+ C3A8                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 350+ C3A8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 350+ C3A9 CA C3 C3    >                        jp	    z, .XOnScreen
 351+ C3AC 16 00                                ld      d,0                         ; de = radius
 352+ C3AE                                      ClearCarryFlag
 352+ C3AE B7          >                        or a
 353+ C3AF ED 52                                sbc     hl,de
 354+ C3B1 FA C3 C3                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 355+ C3B4 7C                                   ld      a,h
 356+ C3B5                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 356+ C3B5 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 356+ C3B6 CA C3 C3    >                        jp	    z, .XOnScreen
 357+ C3B9 C9                                   ret                                 ; None of the X coordinates are on screen
 358+ C3BA 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 359+ C3BC                                      ClearCarryFlag
 359+ C3BC B7          >                        or a
 360+ C3BD ED 5A                                adc     hl,de                       ; so we have hl - de
 361+ C3BF F2 C3 C3                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 362+ C3C2 C9                                   ret                                 ; else x is totally off the left side of the screen
 363+ C3C3              ; .........................................................................................................................
 364+ C3C3 2A 7F C2     .XOnScreen:             ld      hl,(PlanetScrnY)               ; now Check Y coordinate
 365+ C3C6                                      JumpOnLeadSignSet   h,.CheckYNegative
 365+ C3C6 7C          >                        ld      a,h
 365+ C3C7 E6 80       >                        and     SignOnly8Bit
 365+ C3C9 C2 EA C3    >                        jp      nz,.CheckYNegative
 366+ C3CC 7C           .CheckYPositive:        ld      a,h
 367+ C3CD                                      JumpIfAIsNotZero   .PosYCheck2
 367+ C3CD A7          >                        and     a
 367+ C3CE C2 D7 C3    >                        jp	    nz,.PosYCheck2
 368+ C3D1 7D                                   ld      a,l
 369+ C3D2 E6 80                                and     %10000000
 370+ C3D4 CA F3 C3                             jp      z,.YOnScreen                ; at least 1 row is on screen as > 128
 371+ C3D7 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 372+ C3D9                                      ClearCarryFlag
 372+ C3D9 B7          >                        or a
 373+ C3DA ED 52                                sbc     hl,de
 374+ C3DC FA F3 C3                             jp      m,.YOnScreen                ; so if its -ve then it spans screen
 375+ C3DF 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 376+ C3E0                                      ReturnIfANotZero                    ; .
 376+ C3E0 A7          >                        and     a
 376+ C3E1 C0          >                        ret     nz
 377+ C3E2 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 378+ C3E3 E6 80                                and     %10000000                   ; .
 379+ C3E5                                      ReturnIfANotZero                    ; .
 379+ C3E5 A7          >                        and     a
 379+ C3E6 C0          >                        ret     nz
 380+ C3E7 C3 E5 C7                             jp      YOnScreen                  ; so Y at least spans
 381+ C3EA 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 382+ C3EC                                      ClearCarryFlag
 382+ C3EC B7          >                        or a
 383+ C3ED ED 5A                                adc     hl,de                       ; so we have hl - de
 384+ C3EF F2 F3 C3                             jp      p,.YOnScreen                ; if result was positive then it spans screen so we are good
 385+ C3F2 C9                                   ret                                 ; else never gets above 0 so return
 386+ C3F3              ; .........................................................................................................................
 387+ C3F3 CD F7 C3     .YOnScreen:             call    PlanetDraw
 388+ C3F6 C9                                   ret
 389+ C3F7
 390+ C3F7              PlanetDraw:             MMUSelectLayer2
 390+ C3F7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 391+ C3FB 2A 7D C2                             ld      hl,(PlanetScrnX)
 392+ C3FE ED 5B 7F C2                          ld      de,(PlanetScrnY)
 393+ C402 3A 81 C2                             ld      a,(PlanetRadius)
 394+ C405 4F                                   ld      c,a
 395+ C406 3E 0C                                ld      a,L2ColourGREEN_4
 396+ C408 CD 71 EA                             call    l2_draw_clipped_circle
 397+ C40B C9                                   ret
 398+ C40C
 399+ C40C
 400+ C40C              PlanetBankSize  EQU $ - StartOfPlanet
 401+ C40C
 402+ C40C
# file closed: ./Universe/Planet/planet_data.asm
1034  C40C                                      DISPLAY "Bank ",BankPlanetData," - Bytes free ",/D, $2000 - ($-PlanetBankAddr), " - BankPlanetData"
1035  C40C              ;;;***; Bank 85  ------------------------------------------------------------------------------------------------------------------------
1036  C40C              ;;;***                        SLOT    SpriteDataAAddr
1037  C40C              ;;;***                        PAGE    BankSpriteDataA
1038  C40C              ;;;***                        ORG     SpriteDataAAddr, BankSpriteDataA
1039  C40C              ;;;***                        INCLUDE "./Layer3Sprites/sprite_loadA.asm"
1040  C40C              ;;;***                        INCLUDE "./Layer3Sprites/SpriteSheetA.asm"
1041  C40C              ;;;***                        DISPLAY "Bank ",BankSpriteDataA," - Bytes free ",/D, $2000 - ($-SpriteDataAAddr), " - BankSpriteDataA"
1042  C40C              ;;;***; Bank 86  ------------------------------------------------------------------------------------------------------------------------
1043  C40C              ;;;***                        SLOT    SpriteDataBAddr
1044  C40C              ;;;***                        PAGE    BankSpriteDataB
1045  C40C              ;;;***                        ORG     SpriteDataBAddr, BankSpriteDataB
1046  C40C              ;;;***                        INCLUDE "./Layer3Sprites/sprite_loadB.asm"
1047  C40C              ;;;***                        INCLUDE "./Layer3Sprites/SpriteSheetB.asm"
1048  C40C              ;;;***                        DISPLAY "Bank ",BankSpriteDataB," - Bytes free ",/D, $2000 - ($-SpriteDataBAddr), " - BankSpriteDataB"
1049  C40C              ; Bank 91  ------------------------------------------------------------------------------------------------------------------------
1050  C40C                                      SLOT    GalaxyDataAddr
1051  C40C                                      PAGE    BankGalaxyData0
1052  C40C                                      ORG GalaxyDataAddr, BankGalaxyData0
1053  E000                                      INCLUDE "./Universe/Galaxy/galaxy_data.asm"
# file opened: ./Universe/Galaxy/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00           GalaxySearchLength:      DB 0
  11+ E85E 00 00 00...  GalaxySearchString:      DS 32
  12+ E87E 00                                    DB 0
  13+ E87F 00 00 00...  GalaxyExpandedName:      DS 32
  14+ E89F 00                                    DB 0
  15+ E8A0 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  15+ E8A4 53 45 49 54
  15+ E8A8 49 4C 45 54
  15+ E8AC 53 54 4F 4E
  15+ E8B0 4C 4F 4E 55
  15+ E8B4 54 48 4E 4F
  15+ E8B8 41 4C 4C 45
  15+ E8BC 58 45 47 45
  15+ E8C0 5A 41 43 45
  15+ E8C4 42 49 53 4F
  15+ E8C8 55 53 45 53
  15+ E8CC 41 52 4D 41
  15+ E8D0 49 4E 44 49
  15+ E8D4 52 45 41 3F
  15+ E8D8 45 52 41 54
  15+ E8DC 45 4E 42 45
  15+ E8E0 52 41 4C 41
  15+ E8E4 56 45 54 49
  15+ E8E8 45 44 4F 52
  15+ E8EC 51 55 41 4E
  15+ E8F0 54 45 49 53
  15+ E8F4 52 49 4F 4E
  16+ E8F8 00 00 00...  GalaxyWorkingSeed        DS 6
  17+ E8FE 00 00 00...  GalaxyNamingSeed         DS 6
  18+ E904 00 00 00...  GalaxySavedRandomSeed    DS 6
  19+ E90A
  20+ E90A 00           GalaxyDisplayGovernment         DB 0
  21+ E90B 00           GalaxyDisplayEconomy            DB 0
  22+ E90C 00           GalaxyDisplayTekLevel           DB 0
  23+ E90D 00           GalaxyDisplayPopulation         DB 0
  24+ E90E 00 00        GalaxyDisplayProductivity       DW 0
  25+ E910 00 00        GalaxyDisplayRadius             DW 0
  26+ E912
  27+ E912 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  27+ E916 65 64 00
  28+ E919 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  28+ E91D 62 6C 65 00
  29+ E921 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  29+ E925 20 6B 6E 6F
  29+ E929 77 6E 00
  30+ E92C 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  30+ E930 75 73 00
  31+ E933 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  31+ E937 64 00
  32+ E939 76 65 72 79  GalaxyDescList02A       DB "very",0
  32+ E93D 00
  33+ E93E 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  33+ E942 6C 79 00
  34+ E945 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  34+ E949 00
  35+ E94A 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  35+ E94E 6F 6E 61 62
  35+ E952 6C 79 00
  36+ E955 00           GalaxyDescList02E       DB 0
  37+ E956 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  37+ E95A 65 6E 74 00
  38+ E95E 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  38+ E962 00
  39+ E963 67 72 65 61  GalaxyDescList03C       DB "great",0
  39+ E967 74 00
  40+ E969 76 61 73 74  GalaxyDescList03D       DB "vast",0
  40+ E96D 00
  41+ E96E 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  41+ E972 00
  42+ E973 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  42+ E977 20 3C 32 38
  42+ E97B 3E 20 70 6C
  42+ E97F 61 6E 74 61
  42+ E983 74 69 6F 6E
  42+ E987 73 00
  43+ E989 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  43+ E98D 74 61 69 6E
  43+ E991 73 00
  44+ E993 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  44+ E997 00
  45+ E998 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  45+ E99C 20 66 6F 72
  45+ E9A0 65 73 74 73
  45+ E9A4 00
  46+ E9A5 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  46+ E9A9 6E 73 00
  47+ E9AC 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  47+ E9B0 65 73 73 00
  48+ E9B4 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  48+ E9B8 69 6E 65 73
  48+ E9BC 73 00
  49+ E9BE 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  49+ E9C2 6E 67 20 74
  49+ E9C6 72 61 64 69
  49+ E9CA 74 69 6F 6E
  49+ E9CE 73 00
  50+ E9D0 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  50+ E9D4 68 69 6E 67
  50+ E9D8 20 6F 66 20
  50+ E9DC 3C 35 3E 00
  51+ E9E0 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  51+ E9E4 20 66 6F 72
  51+ E9E8 20 3C 35 3E
  51+ E9EC 00
  52+ E9ED 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  52+ E9F1 20 62 6C 65
  52+ E9F5 6E 64 65 72
  52+ E9F9 73 00
  53+ E9FB 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  53+ E9FF 69 73 74 73
  53+ EA03 00
  54+ EA04 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  54+ EA08 72 79 00
  55+ EA0B 64 69 73 63  GalaxyDescList06D       DB "discos",0
  55+ EA0F 6F 73 00
  56+ EA12 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  56+ EA16 00
  57+ EA17 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  57+ EA1B 69 6E 67 20
  57+ EA1F 74 72 65 65
  57+ EA23 00
  58+ EA24 63 72 61 62  GalaxyDescList07B       DB "crab",0
  58+ EA28 00
  59+ EA29 62 61 74 00  GalaxyDescList07C       DB "bat",0
  60+ EA2D 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  60+ EA31 74 00
  61+ EA33 25 52 00     GalaxyDescList07E       DB "%R",0
  62+ EA36 62 65 73 65  GalaxyDescList08A       DB "beset",0
  62+ EA3A 74 00
  63+ EA3C 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  63+ EA40 75 65 64 00
  64+ EA44 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  64+ EA48 67 65 64 00
  65+ EA4C 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  65+ EA50 65 64 00
  66+ EA53 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  66+ EA57 72 67 65 64
  66+ EA5B 00
  67+ EA5C 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  67+ EA60 20 63 69 76
  67+ EA64 69 6C 20 77
  67+ EA68 61 72 00
  68+ EA6B 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  68+ EA6F 20 3C 32 33
  68+ EA73 3E 20 3C 32
  68+ EA77 34 3E 73 00
  69+ EA7B 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  69+ EA7F 36 3E 20 64
  69+ EA83 69 73 65 61
  69+ EA87 73 65 00
  70+ EA8A 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  70+ EA8E 20 65 61 72
  70+ EA92 74 68 71 75
  70+ EA96 61 6B 65 73
  70+ EA9A 00
  71+ EA9B 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  71+ EA9F 20 73 6F 6C
  71+ EAA3 61 72 20 61
  71+ EAA7 63 74 69 76
  71+ EAAB 69 74 79 00
  72+ EAAF 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  72+ EAB3 3C 32 3E 20
  72+ EAB7 3C 33 3E 00
  73+ EABB 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  73+ EABF 25 49 20 3C
  73+ EAC3 32 33 3E 20
  73+ EAC7 3C 32 34 3E
  73+ EACB 00
  74+ EACC 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  74+ EAD0 69 6E 68 61
  74+ EAD4 62 69 74 61
  74+ EAD8 6E 74 73 27
  74+ EADC 20 3C 32 35
  74+ EAE0 3E 20 3C 34
  74+ EAE4 3E 00
  75+ EAE6 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  75+ EAEA 00
  76+ EAEB 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  76+ EAEF 3C 31 32 3E
  76+ EAF3 20 3C 31 33
  76+ EAF7 3E 00
  77+ EAF9 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  77+ EAFD 65 00
  78+ EAFF 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  78+ EB03 64 79 00
  79+ EB06 77 61 74 65  GalaxyDescList11C       DB "water",0
  79+ EB0A 72 00
  80+ EB0C 62 72 65 77  GalaxyDescList11D       DB "brew",0
  80+ EB10 00
  81+ EB11 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  81+ EB15 6C 65 20 62
  81+ EB19 6C 61 73 74
  81+ EB1D 65 72 73 00
  82+ EB21 25 52 00     GalaxyDescList12A       DB "%R",0
  83+ EB24 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  83+ EB28 32 34 3E 00
  84+ EB2C 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  84+ EB30 52 00
  85+ EB32 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  85+ EB36 32 36 3E 00
  86+ EB3A 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  86+ EB3E 20 25 52 00
  87+ EB42 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  87+ EB46 6C 6F 75 73
  87+ EB4A 00
  88+ EB4B 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  88+ EB4F 69 63 00
  89+ EB52 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  89+ EB56 79 00
  90+ EB58 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  90+ EB5C 75 61 6C 00
  91+ EB60 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  91+ EB64 74 69 6E 67
  91+ EB68 00
  92+ EB69 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  92+ EB6D 69 6E 65 00
  93+ EB71 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  93+ EB75 74 20 6C 69
  93+ EB79 66 65 00
  94+ EB7C 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  94+ EB80 6E 6F 73 00
  95+ EB84 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  95+ EB88 63 6F 6D 73
  95+ EB8C 00
  96+ EB8D 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  96+ EB91 3E 20 00
  97+ EB94 25 48 00     GalaxyDescList15A       DB "%H",0
  98+ EB97 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  98+ EB9B 70 6C 61 6E
  98+ EB9F 65 74 20 25
  98+ EBA3 48 00
  99+ EBA5 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  99+ EBA9 77 6F 72 6C
  99+ EBAD 64 20 25 48
  99+ EBB1 00
 100+ EBB2 54 68 69 73  GalaxyDescList15D       DB "This planet",0
 100+ EBB6 20 70 6C 61
 100+ EBBA 6E 65 74 00
 101+ EBBE 54 68 69 73  GalaxyDescList15E       DB "This world",0
 101+ EBC2 20 77 6F 72
 101+ EBC6 6C 64 00
 102+ EBC9 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 102+ EBCD 72 65 6D 61
 102+ EBD1 72 6B 61 62
 102+ EBD5 6C 65 00
 103+ EBD8 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 103+ EBDC 69 6E 67 00
 104+ EBE0 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 104+ EBE4 6C 00
 105+ EBE6 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 105+ EBEA 69 6F 75 73
 105+ EBEE 00
 106+ EBEF 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 106+ EBF3 6F 6C 74 69
 106+ EBF7 6E 67 00
 107+ EBFA 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 107+ EBFE 65 74 00
 108+ EC01 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 108+ EC05 64 00
 109+ EC07 70 6C 61 63  GalaxyDescList17C       DB "place",0
 109+ EC0B 65 00
 110+ EC0D 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 110+ EC11 6C 65 20 70
 110+ EC15 6C 61 6E 65
 110+ EC19 74 00
 111+ EC1B 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 111+ EC1F 00
 112+ EC20 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 112+ EC24 00
 113+ EC25 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 113+ EC29 00
 114+ EC2A 67 72 75 62  GalaxyDescList18C       DB "grub",0
 114+ EC2E 00
 115+ EC2F 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 116+ EC33 25 52 00     GalaxyDescList18E       DB "%R",0
 117+ EC36 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 117+ EC3A 00
 118+ EC3B 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 118+ EC3F 20 67 72 61
 118+ EC43 64 75 61 74
 118+ EC47 65 00
 119+ EC49 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 120+ EC4D 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 120+ EC51 6C 00
 121+ EC53 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 121+ EC57 00
 122+ EC58 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 122+ EC5C 69 63 61 6C
 122+ EC60 00
 123+ EC61 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 123+ EC65 65 00
 124+ EC67 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 124+ EC6B 00
 125+ EC6C 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 125+ EC70 6E 65 74 72
 125+ EC74 61 62 6C 65
 125+ EC78 00
 126+ EC79 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 126+ EC7D 65 72 61 6E
 126+ EC81 74 00
 127+ EC83 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 127+ EC87 79 00
 128+ EC89 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 128+ EC8D 64 00
 129+ EC8F 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 129+ EC93 75 61 6C 00
 130+ EC97 73 74 72 61  GalaxyDescList21D       DB "strange",0
 130+ EC9B 6E 67 65 00
 131+ EC9F 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 131+ ECA3 6C 69 61 72
 131+ ECA7 00
 132+ ECA8 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 132+ ECAC 75 65 6E 74
 132+ ECB0 00
 133+ ECB1 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 133+ ECB5 73 69 6F 6E
 133+ ECB9 61 6C 00
 134+ ECBC 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 134+ ECC0 65 64 69 63
 134+ ECC4 74 61 62 6C
 134+ ECC8 65 00
 135+ ECCA 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 135+ ECCE 64 66 75 6C
 135+ ECD2 00
 136+ ECD3 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 136+ ECD7 6C 79 00
 137+ ECDA 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 137+ ECDE 3C 30 3E 20
 137+ ECE2 66 6F 72 20
 137+ ECE6 3C 39 3E 00
 138+ ECEA 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 138+ ECEE 3C 30 3E 20
 138+ ECF2 66 6F 72 20
 138+ ECF6 3C 39 3E 20
 138+ ECFA 61 6E 64 20
 138+ ECFE 3C 39 3E 00
 139+ ED02 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 139+ ED06 62 79 20 3C
 139+ ED0A 38 3E 00
 140+ ED0D 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 140+ ED11 3C 30 3E 20
 140+ ED15 66 6F 72 20
 140+ ED19 3C 39 3E 20
 140+ ED1D 62 75 74 20
 140+ ED21 3C 37 3E 20
 140+ ED25 62 79 20 3C
 140+ ED29 38 3E 00
 141+ ED2C 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 141+ ED30 3E 20 3C 31
 141+ ED34 36 3E 00
 142+ ED37 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 142+ ED3B 00
 143+ ED3C 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 143+ ED40 74 61 69 6E
 143+ ED44 00
 144+ ED45 65 64 69 62  GalaxyDescList24C       DB "edible",0
 144+ ED49 6C 65 00
 145+ ED4C 74 72 65 65  GalaxyDescList24D       DB "tree",0
 145+ ED50 00
 146+ ED51 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 146+ ED55 74 65 64 00
 147+ ED59 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 147+ ED5D 00
 148+ ED5E 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 148+ ED62 00
 149+ ED63 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 149+ ED67 69 64 00
 150+ ED6A 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 150+ ED6E 00
 151+ ED6F 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 151+ ED73 00
 152+ ED74 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 152+ ED78 65 6E 74 00
 153+ ED7C 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 153+ ED80 70 74 69 6F
 153+ ED84 6E 61 6C 00
 154+ ED88 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 154+ ED8C 6E 74 72 69
 154+ ED90 63 00
 155+ ED92 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 155+ ED96 61 69 6E 65
 155+ ED9A 64 00
 156+ ED9C 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 156+ EDA0 00
 157+ EDA1 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 157+ EDA5 65 72 00
 158+ EDA8 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 158+ EDAC 6C 79 00
 159+ EDAF 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 159+ EDB3 00
 160+ EDB4 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 160+ EDB8 61 6C 00
 161+ EDBB 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 161+ EDBF 6F 75 73 00
 162+ EDC3 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 162+ EDC7 69 6E 67 20
 162+ EDCB 6D 65 74 65
 162+ EDCF 72 73 00
 163+ EDD2 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 163+ EDD6 20 63 6C 6F
 163+ EDDA 75 64 73 00
 164+ EDDE 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 164+ EDE2 62 65 72 67
 164+ EDE6 73 00
 165+ EDE8 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 165+ EDEC 20 66 6F 72
 165+ EDF0 6D 61 74 69
 165+ EDF4 6F 6E 73 00
 166+ EDF8 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 166+ EDFC 61 6E 6F 65
 166+ EE00 73 00
 167+ EE02 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 167+ EE06 74 00
 168+ EE08 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 168+ EE0C 70 00
 169+ EE0E 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 169+ EE12 6E 61 00
 170+ EE15 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 170+ EE19 00
 171+ EE1A 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 171+ EE1E 65 64 00
 172+ EE21 25 52 00     GalaxyDescList30A       DB "%R",0
 173+ EE24 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 173+ EE28 52 00
 174+ EE2A 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 174+ EE2E 32 36 3E 00
 175+ EE32 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 175+ EE36 62 69 74 61
 175+ EE3A 6E 74 00
 176+ EE3D 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 176+ EE41 52 00
 177+ EE43 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 177+ EE47 77 00
 178+ EE49 62 65 61 73  GalaxyDescList31B       DB "beast",0
 178+ EE4D 74 00
 179+ EE4F 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 179+ EE53 6E 00
 180+ EE55 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 180+ EE59 65 00
 181+ EE5B 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 181+ EE5F 00
 182+ EE60 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 182+ EE64 61 72 64 00
 183+ EE68 63 61 74 00  GalaxyDescList32B       DB "cat",0
 184+ EE6C 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 184+ EE70 65 79 00
 185+ EE73 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 185+ EE77 00
 186+ EE78 66 69 73 68  GalaxyDescList32E       DB "fish",0
 186+ EE7C 00
 187+ EE7D 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 187+ EE81 20 3C 31 30
 187+ EE85 3E 00
 188+ EE87 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 188+ EE8B 33 30 3E 20
 188+ EE8F 3C 33 33 3E
 188+ EE93 00
 189+ EE94 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 189+ EE98 3C 31 32 3E
 189+ EE9C 20 3C 33 31
 189+ EEA0 3E 20 3C 33
 189+ EEA4 33 3E 00
 190+ EEA7 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 190+ EEAB 20 3C 33 35
 190+ EEAF 3E 00
 191+ EEB1 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 191+ EEB5 20 3C 31 30
 191+ EEB9 3E 00
 192+ EEBB 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 192+ EEBF 00
 193+ EEC0 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 193+ EEC4 65 74 00
 194+ EEC7 73 74 65 61  GalaxyDescList34C       DB "steak",0
 194+ EECB 6B 00
 195+ EECD 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 195+ EED1 65 72 73 00
 196+ EED5 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 196+ EED9 00
 197+ EEDA 69 63 65 00  GalaxyDescList35A       DB "ice",0
 198+ EEDE 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 199+ EEE2 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 199+ EEE6 2D 47 00
 200+ EEE9 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 200+ EEED 75 6D 00
 201+ EEF0 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 201+ EEF4 6C 74 72 61
 201+ EEF8 00
 202+ EEF9 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 202+ EEFD 65 79 00
 203+ EF00 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 203+ EF04 6B 65 74 00
 204+ EF08 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 204+ EF0C 74 65 00
 205+ EF0F 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 205+ EF13 00
 206+ EF14 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 206+ EF18 69 73 00
 207+ EF1B
 208+ EF1B 12 E9 19 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 208+ EF1F 21 E9 2C E9
 208+ EF23 33 E9
 209+ EF25 39 E9 3E E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 209+ EF29 45 E9 4A E9
 209+ EF2D 55 E9
 210+ EF2F 56 E9 5E E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 210+ EF33 63 E9 69 E9
 210+ EF37 6E E9
 211+ EF39 73 E9 89 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 211+ EF3D 93 E9 98 E9
 211+ EF41 A5 E9
 212+ EF43 AC E9 B4 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 212+ EF47 BE E9 D0 E9
 212+ EF4B E0 E9
 213+ EF4D ED E9 FB E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 213+ EF51 04 EA 0B EA
 213+ EF55 12 EA
 214+ EF57 17 EA 24 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 214+ EF5B 29 EA 2D EA
 214+ EF5F 33 EA
 215+ EF61 36 EA 3C EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 215+ EF65 44 EA 4C EA
 215+ EF69 53 EA
 216+ EF6B 5C EA 6B EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 216+ EF6F 7B EA 8A EA
 216+ EF73 9B EA
 217+ EF75 AF EA BB EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 217+ EF79 CC EA E6 EA
 217+ EF7D EB EA
 218+ EF7F F9 EA FF EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 218+ EF83 06 EB 0C EB
 218+ EF87 11 EB
 219+ EF89 21 EB 24 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 219+ EF8D 2C EB 32 EB
 219+ EF91 3A EB
 220+ EF93 42 EB 4B EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 220+ EF97 52 EB 58 EB
 220+ EF9B 60 EB
 221+ EF9D 69 EB 71 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 221+ EFA1 7C EB 84 EB
 221+ EFA5 8D EB
 222+ EFA7 94 EB 97 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 222+ EFAB A5 EB B2 EB
 222+ EFAF BE EB
 223+ EFB1 C9 EB D8 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 223+ EFB5 E0 EB E6 EB
 223+ EFB9 EF EB
 224+ EFBB FA EB 01 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 224+ EFBF 07 EC 0D EC
 224+ EFC3 1B EC
 225+ EFC5 20 EC 25 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 225+ EFC9 2A EC 2F EC
 225+ EFCD 33 EC
 226+ EFCF 36 EC 3B EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 226+ EFD3 49 EC 4D EC
 226+ EFD7 53 EC
 227+ EFD9 58 EC 61 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 227+ EFDD 67 EC 6C EC
 227+ EFE1 79 EC
 228+ EFE3 83 EC 89 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 228+ EFE7 8F EC 97 EC
 228+ EFEB 9F EC
 229+ EFED A8 EC B1 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 229+ EFF1 BC EC CA EC
 229+ EFF5 D3 EC
 230+ EFF7 DA EC EA EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 230+ EFFB 02 ED 0D ED
 230+ EFFF 2C ED
 231+ F001 37 ED 3C ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 231+ F005 45 ED 4C ED
 231+ F009 51 ED
 232+ F00B 59 ED 5E ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 232+ F00F 63 ED 6A ED
 232+ F013 6F ED
 233+ F015 74 ED 7C ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 233+ F019 88 ED 92 ED
 233+ F01D 9C ED
 234+ F01F A1 ED A8 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 234+ F023 AF ED B4 ED
 234+ F027 BB ED
 235+ F029 C3 ED D2 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 235+ F02D DE ED E8 ED
 235+ F031 F8 ED
 236+ F033 02 EE 08 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 236+ F037 0E EE 15 EE
 236+ F03B 1A EE
 237+ F03D 21 EE 24 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 237+ F041 2A EE 32 EE
 237+ F045 3D EE
 238+ F047 43 EE 49 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 238+ F04B 4F EE 55 EE
 238+ F04F 5B EE
 239+ F051 60 EE 68 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 239+ F055 6C EE 73 EE
 239+ F059 78 EE
 240+ F05B 7D EE 87 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 240+ F05F 94 EE A7 EE
 240+ F063 B1 EE
 241+ F065 BB EE C0 EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 241+ F069 C7 EE CD EE
 241+ F06D D5 EE
 242+ F06F DA EE DE EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 242+ F073 E2 EE E9 EE
 242+ F077 F0 EE
 243+ F079 F9 EE 00 EF                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 243+ F07D 08 EF 0F EF
 243+ F081 14 EF
 244+ F083
 245+ F083 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 245+ F087 65 20 00
 246+ F08A 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 246+ F08E 63 65 20 00
 247+ F092 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 247+ F096 6C 20 00
 248+ F099 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 248+ F09D 6E 20 00
 249+ F0A0 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 249+ F0A4 00
 250+ F0A5 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 250+ F0A9 6F 77 20 00
 251+ F0AD 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 251+ F0B1 20 00
 252+ F0B3 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 252+ F0B7 6B 20 00
 253+ F0BA 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 253+ F0BE 6C 65 73 73
 253+ F0C2 20 00
 254+ F0C4 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 254+ F0C8 79 20 00
 255+ F0CB 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 255+ F0CF 45 79 65 64
 255+ F0D3 20 00
 256+ F0D5 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 256+ F0D9 65 64 20 00
 257+ F0DD 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 257+ F0E1 20 00
 258+ F0E3 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 258+ F0E7 00
 259+ F0E8 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 259+ F0EC 79 20 00
 260+ F0EF 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 260+ F0F3 6E 74 00
 261+ F0F6 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 261+ F0FA 00
 262+ F0FB 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 262+ F0FF 72 64 00
 263+ F102 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 263+ F106 74 65 72 00
 264+ F10A 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 264+ F10E 00
 265+ F10F 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 265+ F113 6E 6F 69 64
 265+ F117 00
 266+ F118 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 266+ F11C 6E 65 00
 267+ F11F 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 267+ F123 63 74 00
 268+ F126 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 268+ F12A 6E 20 43 6F
 268+ F12E 6C 6F 6E 61
 268+ F132 6C 00
 269+ F134
 270+ F134 83 F0 8A F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 270+ F138 92 F0
 271+ F13A 99 F0 A0 F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 271+ F13E A5 F0 AD F0
 271+ F142 B3 F0 BA F0
 272+ F146 C4 F0 CB F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 272+ F14A D5 F0 DD F0
 272+ F14E E3 F0 E8 F0
 273+ F152 EF F0 F6 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 273+ F156 FB F0 02 F1
 273+ F15A 0A F1 0F F1
 273+ F15E 18 F1 1F F1
 274+ F162 26 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 275+ F164 00 00 00...  GalaxySpecies           DS 32
 276+ F184 00                                   DB 0
 277+ F185 00 00 00...  GalaxyPlanetDescription DS 300
 278+ F2B1 00                                   DB 0
 279+ F2B2 00 00 00...  GalaxyPlanetSource      DS 300,0
 280+ F3DE 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 280+ F3E2 20 69 73 20
 280+ F3E6 3C 32 32 3E
 280+ F3EA 00
 281+ F3EB
 282+ F3EB
 283+ F3EB D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 284+ F3EC 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 285+ F3ED 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 286+ F3EE 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 287+ F3EF FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 288+ F3F0 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 289+ F3F1 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 290+ F3F2 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 291+ F3F3 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 292+ F3F4 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 293+ F3F5 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 294+ F3F6 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 295+ F3F7 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 296+ F3F8 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 297+ F3F9 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 298+ F3FA A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 299+ F3FB 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 300+ F3FC 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 301+ F3FD 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 302+ F3FE C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 303+ F3FF B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 304+ F400 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 305+ F401 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 306+ F402 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 307+ F403 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 308+ F404 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 309+ F405 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 310+ F406
 311+ F406                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F406
   2++F406              EQ_FUEL                 EQU 0
   3++F406              EQ_MISSILE              EQU 1
   4++F406              EQ_CARGO_BAY            EQU 2
   5++F406              EQ_ECM                  EQU 3
   6++F406              EQ_FUEL_SCOOPS          EQU 4
   7++F406              EQ_ESCAPE_POD           EQU 5
   8++F406              EQ_ENERGY_BOMB          EQU 6
   9++F406              EQ_ENERGY_UNIT          EQU 7
  10++F406              EQ_DOCK_COMP            EQU 8
  11++F406              EQ_GAL_DRIVE            EQU 9
  12++F406              EQ_FRONT_PULSE          EQU 10
  13++F406              EQ_REAR_PULSE           EQU 11
  14++F406              EQ_LEFT_PULSE           EQU 12
  15++F406              EQ_RIGHT_PULSE          EQU 13
  16++F406              EQ_FRONT_BEAM           EQU 14
  17++F406              EQ_REAR_BEAM            EQU 15
  18++F406              EQ_LEFT_BEAM            EQU 16
  19++F406              EQ_RIGHT_BEAM           EQU 17
  20++F406              EQ_FRONT_MINING         EQU 18
  21++F406              EQ_REAR_MINING          EQU 19
  22++F406              EQ_LEFT_MINING          EQU 20
  23++F406              EQ_RIGHT_MINING         EQU 21
  24++F406              EQ_FRONT_MILITARY       EQU 22
  25++F406              EQ_REAR_MILITARY        EQU 23
  26++F406              EQ_LEFT_MILITARY        EQU 24
  27++F406              EQ_RIGHT_MILITARY       EQU 25
  28++F406
  29++F406              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F406
# file closed: ././Data/EquipmentEquates.asm
 312+ F406
 313+ F406              EquipNameTableRowLen    EQU 8
 314+ F406 85 8B 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 314+ F40A 00 00 00 00
 315+ F40E 22 8F 00 00                          DW  WordMissile,    0,              0,          0
 315+ F412 00 00 00 00
 316+ F416 6A 8B 7B 8B                          DW  WordLarge,      WordCargo,      WordBay,    0
 316+ F41A 81 8B 00 00
 317+ F41E 91 8B 98 8B                          DW  WordECM,        WordSystem,     0,          0
 317+ F422 00 00 00 00
 318+ F426 85 8B 8A 8B                          DW  WordFuel,       WordScoops,     0,          0
 318+ F42A 00 00 00 00
 319+ F42E 70 8B 77 8B                          DW  WordEscape,     WordPod,        0,          0
 319+ F432 00 00 00 00
 320+ F436 9F 8B A6 8B                          DW  WordEnergy,     WordBomb,       0,          0
 320+ F43A 00 00 00 00
 321+ F43E 04 8C 9F 8B                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 321+ F442 D2 8B 00 00
 322+ F446 DE 8B E6 8B                          DW  WordDocking,    WordComputers,  0,          0
 322+ F44A 00 00 00 00
 323+ F44E FB 8B 3A 8E                          DW  WordGalactic,   WordHyperdrive, 0,          0
 323+ F452 00 00 00 00
 324+ F456 54 8B B1 8B                          DW  WordFront,      WordPulse,      WordLaser,  0
 324+ F45A AB 8B 00 00
 325+ F45E 65 8B B1 8B                          DW  WordRear,       WordPulse,      WordLaser,  0
 325+ F462 AB 8B 00 00
 326+ F466 60 8B B1 8B                          DW  WordLeft,       WordPulse,      WordLaser,  0
 326+ F46A AB 8B 00 00
 327+ F46E 5A 8B B1 8B                          DW  WordRight,      WordPulse,      WordLaser,  0
 327+ F472 AB 8B 00 00
 328+ F476 54 8B B7 8B                          DW  WordFront,      WordBeam,       WordLaser,  0
 328+ F47A AB 8B 00 00
 329+ F47E 65 8B B7 8B                          DW  WordRear,       WordBeam,       WordLaser,  0
 329+ F482 AB 8B 00 00
 330+ F486 60 8B B7 8B                          DW  WordLeft,       WordBeam,       WordLaser,  0
 330+ F48A AB 8B 00 00
 331+ F48E 5A 8B B7 8B                          DW  WordRight,      WordBeam,       WordLaser,  0
 331+ F492 AB 8B 00 00
 332+ F496 54 8B C4 8B                          DW  WordFront,      WordMining,     WordLaser,  0
 332+ F49A AB 8B 00 00
 333+ F49E 65 8B C4 8B                          DW  WordRear,       WordMining,     WordLaser,  0
 333+ F4A2 AB 8B 00 00
 334+ F4A6 60 8B C4 8B                          DW  WordLeft,       WordMining,     WordLaser,  0
 334+ F4AA AB 8B 00 00
 335+ F4AE 5A 8B C4 8B                          DW  WordRight,      WordMining,     WordLaser,  0
 335+ F4B2 AB 8B 00 00
 336+ F4B6 54 8B 45 8E                          DW  WordFront,      WordMilitary,   WordLaser,  0
 336+ F4BA AB 8B 00 00
 337+ F4BE 65 8B 45 8E                          DW  WordRear,       WordMilitary,   WordLaser,  0
 337+ F4C2 AB 8B 00 00
 338+ F4C6 60 8B 45 8E                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 338+ F4CA AB 8B 00 00
 339+ F4CE 5A 8B 45 8E                          DW  WordRight,      WordMilitary,   WordLaser,  0
 339+ F4D2 AB 8B 00 00
 340+ F4D6
 341+ F4D6              ;Each row is 7 bytes
 342+ F4D6              ;                                                               12345  6  789012345678901
 343+ F4D6              ;	canbuy;
 344+ F4D6              ;	y;
 345+ F4D6              ;	show;
 346+ F4D6              ;	level;
 347+ F4D6              ;	price 2 bytes;
 348+ F4D6              ;	type;
 349+ F4D6              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 350+ F4D6              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 351+ F4D6              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 352+ F4D6              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 353+ F4D6              ;                           c  y  s  t
 354+ F4D6              ;                           a  p  h  e                                            fi     P     Vi
 355+ F4D6              ;                           n  o  o  c                                            tt     o     ew
 356+ F4D6              ;                           B  s  w  h  price                  type               ed     s
 357+ F4D6 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4DA 02 00 00 00
 357+ F4DE FF 00 00 00
 357+ F4E2 00 00 00 00
 358+ F4E6 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4EA 2C 01 01 00
 358+ F4EE FF 00 00 00
 358+ F4F2 00 00 00 00
 359+ F4F6 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F4FA A0 0F 02 00
 359+ F4FE FF 00 00 00
 359+ F502 00 00 00 00
 360+ F506 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F50A 70 17 03 00
 360+ F50E FF 00 00 00
 360+ F512 00 00 00 00
 361+ F516 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F51A 82 14 04 00
 361+ F51E FF 00 00 00
 361+ F522 00 00 00 00
 362+ F526 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F52A 10 27 05 00
 362+ F52E FF 00 00 00
 362+ F532 00 00 00 00
 363+ F536 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F53A 28 23 06 00
 363+ F53E FF 00 00 00
 363+ F542 00 00 00 00
 364+ F546 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F54A 98 3A 07 00
 364+ F54E FF 00 00 00
 364+ F552 00 00 00 00
 365+ F556 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F55A 98 3A 08 00
 365+ F55E FF 00 00 00
 365+ F562 00 00 00 00
 366+ F566 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F56A 50 C3 09 00
 366+ F56E FF 00 00 00
 366+ F572 00 00 00 00
 367+ F576 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F57A A0 0F 0A 00
 367+ F57E 00 00 00 00
 367+ F582 00 00 00 00
 368+ F586 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F58A A0 0F 0B 00
 368+ F58E 01 01 00 00
 368+ F592 00 00 00 00
 369+ F596 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F59A A0 0F 0C 00
 369+ F59E 02 02 00 00
 369+ F5A2 00 00 00 00
 370+ F5A6 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5AA A0 0F 0D 00
 370+ F5AE 03 03 00 00
 370+ F5B2 00 00 00 00
 371+ F5B6 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5BA 10 27 0E 00
 371+ F5BE 00 00 00 00
 371+ F5C2 00 00 00 00
 372+ F5C6 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5CA 10 27 0F 00
 372+ F5CE 01 01 00 00
 372+ F5D2 00 00 00 00
 373+ F5D6 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5DA 10 27 10 00
 373+ F5DE 02 02 00 00
 373+ F5E2 00 00 00 00
 374+ F5E6 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5EA 10 27 11 00
 374+ F5EE 03 03 00 00
 374+ F5F2 00 00 00 00
 375+ F5F6 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F5FA 40 1F 12 00
 375+ F5FE 00 00 00 00
 375+ F602 00 00 00 00
 376+ F606 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F60A 40 1F 13 00
 376+ F60E 01 01 00 00
 376+ F612 00 00 00 00
 377+ F616 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F61A 40 1F 14 00
 377+ F61E 02 02 00 00
 377+ F622 00 00 00 00
 378+ F626 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F62A 40 1F 15 00
 378+ F62E 03 03 00 00
 378+ F632 00 00 00 00
 379+ F636 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F63A 60 EA 16 00
 379+ F63E 00 00 00 00
 379+ F642 00 00 00 00
 380+ F646 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F64A 60 EA 17 00
 380+ F64E 01 01 00 00
 380+ F652 00 00 00 00
 381+ F656 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F65A 60 EA 18 00
 381+ F65E 02 02 00 00
 381+ F662 00 00 00 00
 382+ F666 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 382+ F66A 60 EA 19 00
 382+ F66E 03 03 00 00
 382+ F672 00 00 00 00
 383+ F676              ShipEquipTableRowLen    EQU 16
 384+ F676              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 385+ F676
 386+ F676              ;------------------------------------------------------------------------------------------------------------------------------------
 387+ F676 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 388+ F677 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 389+ F678 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 390+ F679 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 391+ F67A              GalaxySeedRandom:
 392+ F67A              ;------------------------------------------------------------------------------------------------------------------------------------
 393+ F67A CD 4C 88     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 394+ F67D 18 03                                jr		GetDigramWorkingSeed
 395+ F67F CD 64 88     GetDigramSystemSeed:    call	copy_system_to_working
 396+ F682 11 50 92     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 397+ F685 06 03                                ld		b,3
 398+ F687 3A 23 82                             ld		a,(WorkingSeeds)
 399+ F68A E6 40                                and		$40
 400+ F68C 28 03                                jr		z,.SmallSizeName
 401+ F68E CD 71 92     .LargeSizeName:         call	NamingLoop
 402+ F691 CD 71 92     .SmallSizeName:         call	NamingLoop
 403+ F694 CD 71 92                             call	NamingLoop
 404+ F697 CD 71 92                             call	NamingLoop
 405+ F69A EB           .DoneName:              ex		de,hl
 406+ F69B 36 00                                ld		(hl),0
 407+ F69D EB                                   ex		de,hl
 408+ F69E C9                                   ret
 409+ F69F
 410+ F69F 11 76 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 411+ F6A2              ; Uses registers a,b and hl
 412+ F6A2 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 413+ F6A3 3A 76 F6                             ld      a,(GalaxyRandSeed)
 414+ F6A6 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 415+ F6A8 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 416+ F6A9 21 78 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 417+ F6AC 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 418+ F6AD 32 76 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 419+ F6B0 78                                   ld      a,b
 420+ F6B1 32 78 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 421+ F6B4 3A 77 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 422+ F6B7 47                                   ld      b,a                                             ; b = r1
 423+ F6B8 21 79 F6                             ld      hl,GalaxyRandSeed3
 424+ F6BB 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 425+ F6BC 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 426+ F6BF 4F                                   ld      c,a
 427+ F6C0 78                                   ld      a,b
 428+ F6C1 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 429+ F6C4 79                                   ld      a,c
 430+ F6C5 C9                                   ret
 431+ F6C6
 432+ F6C6              ;------------------------------------------------------------------------------------------------------------------------------------
 433+ F6C6 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 434+ F6C8 ED 31                                add     hl,a
 435+ F6CA 7E                                   ld      a,(hl)              ;  Fetch low byte
 436+ F6CB 47                                   ld      b,a
 437+ F6CC 23                                   inc     hl
 438+ F6CD 7E                                   ld      a,(hl)              ;  Fetch high byte
 439+ F6CE 68                                   ld      l,b
 440+ F6CF 67                                   ld      h,a
 441+ F6D0 7E           GalaxyCopyLoop:         ld      a,(hl)
 442+ F6D1 FE 00                                cp      0
 443+ F6D3 28 05                                jr      z,.CopyDone
 444+ F6D5 12                                   ld      (de),a
 445+ F6D6 23                                   inc     hl
 446+ F6D7 13                                   inc     de
 447+ F6D8 18 F6                                jr      GalaxyCopyLoop
 448+ F6DA 12           .CopyDone:              ld      (de),a
 449+ F6DB C9                                   ret
 450+ F6DC              ;------------------------------------------------------------------------------------------------------------------------------------
 451+ F6DC 11 64 F1     galaxy_get_species:     ld      de,GalaxySpecies
 452+ F6DF 3E 28                                ld      a,"("
 453+ F6E1 12                                   ld      (de),a
 454+ F6E2 13                                   inc     de
 455+ F6E3 3A FC E8                             ld      a,(GalaxyWorkingSeed+4)
 456+ F6E6 CB 7F                                bit     7,a
 457+ F6E8 20 0A                                jr      nz,.NonHuman
 458+ F6EA 21 62 F1                             ld      hl,GalaxyInhabitantHumanIx
 459+ F6ED AF                                   xor     a
 460+ F6EE CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 461+ F6F1 C3 4F F7                             jp      .galaxy_species_exit
 462+ F6F4 3A FD E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 463+ F6F7 CB 3F                                srl     a
 464+ F6F9 CB 3F                                srl     a
 465+ F6FB E6 07                                and     $07
 466+ F6FD FE 03                                cp      3
 467+ F6FF 30 0A                                jr      nc,.NotDesc1
 468+ F701 21 34 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 469+ F704 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 470+ F707 3E 20                                ld      a," "
 471+ F709 12                                   ld      (de),a
 472+ F70A 13                                   inc     de
 473+ F70B 3A FD E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 474+ F70E CB 3F                                srl     a
 475+ F710 CB 3F                                srl     a
 476+ F712 CB 3F                                srl     a
 477+ F714 CB 3F                                srl     a
 478+ F716 CB 3F                                srl     a
 479+ F718 FE 06                                cp      6
 480+ F71A 30 0A                                jr      nc,.NotDesc2
 481+ F71C 21 3A F1                             ld      hl,GalaxyInhabitantDesc2Ix
 482+ F71F CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 483+ F722 3E 20                                ld      a," "
 484+ F724 12                                   ld      (de),a
 485+ F725 13                                   inc     de
 486+ F726 3A F9 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 487+ F729 47                                   ld      b,a
 488+ F72A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 489+ F72D A8                                   xor     b
 490+ F72E E6 07                                and     $07
 491+ F730 F5                                   push    af
 492+ F731 FE 06                                cp      6
 493+ F733 30 0A                                jr      nc,.NotDesc3
 494+ F735 21 46 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 495+ F738 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 496+ F73B 3E 20                                ld      a," "
 497+ F73D 12                                   ld      (de),a
 498+ F73E 13                                   inc     de
 499+ F73F F1           .NotDesc3:              pop     af
 500+ F740 47                                   ld      b,a
 501+ F741 3A FD E8                             ld      a,(GalaxyWorkingSeed+5)
 502+ F744 E6 03                                and     $03
 503+ F746 80                                   add     a,b
 504+ F747 E6 07                                and     $07
 505+ F749 21 52 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 506+ F74C CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 507+ F74F 3E 73        .galaxy_species_exit:   ld      a,"s"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 3E 29                                ld      a,")"
 511+ F755 12                                   ld      (de),a
 512+ F756 13                                   inc     de
 513+ F757 AF                                   xor     a
 514+ F758 12                                   ld      (de),a
 515+ F759 C9                                   ret
 516+ F75A
 517+ F75A
 518+ F75A              ; To copy seed, loops from 3 to 0
 519+ F75A              ; copy seed X + 2 to target X
 520+ F75A              ; x = x -1
 521+ F75A
 522+ F75A              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 523+ F75A
 524+ F75A              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 525+ F75A 23                                   inc		hl
 526+ F75B 7E                                   ld		a,(hl)
 527+ F75C FE 00                                cp		0
 528+ F75E C8                                   ret		z
 529+ F75F FE 5B                                cp		'Z'+1
 530+ F761 30 F7                                jr		nc,GalaxyCapitaliseString
 531+ F763 FE 41                                cp		'A'
 532+ F765 38 F3                                jr		c,GalaxyCapitaliseString
 533+ F767 C6 20        .LowerCase:             add		a,'a'-'A'
 534+ F769 77                                   ld		(hl),a
 535+ F76A 18 EE                                jr		GalaxyCapitaliseString
 536+ F76C
 537+ F76C
 538+ F76C              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 539+ F76C                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 540+ F76C                                      ;cp      $FF
 541+ F76C                                      ;jr      z,.NoSystemFound
 542+ F76C 3A 25 82     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 543+ F76F 32 76 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 544+ F772 3A 26 82                             ld      a,(WorkingSeeds+3)                              ;
 545+ F775 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 546+ F778 3A 27 82                             ld      a,(WorkingSeeds+4)                              ;
 547+ F77B 32 78 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 548+ F77E 3A 28 82                             ld      a,(WorkingSeeds+5)                              ;
 549+ F781 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 550+ F784 C9                                   ret
 551+ F785              ; For later......
 552+ F785 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 553+ F787 F5           .GalaxyExpandDesc:      push    af
 554+ F788 47                                   ld      b,a                                             ; b = 6502 X reg
 555+ F789 C5                                   push    bc                                              ; save Y reg
 556+ F78A
 557+ F78A              ;------------------------------------------------------------------------------------------------------------------------------------
 558+ F78A              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 559+ F78A              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 560+ F78A ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 561+ F78E CD 64 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 562+ F791                                      ;cp      $FF
 563+ F791                                      ;jr      z,.NoSystemFound
 564+ F791              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 565+ F791
 566+ F791
 567+ F791
 568+ F791              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 569+ F791
 570+ F791 00 00 00...  GalaxyNameCopy          DS      30
 571+ F7AF
 572+ F7AF 1E 00        ExpandAtHLToE:          ld      e,0
 573+ F7B1 7E           .ExpandTokenLoop:       ld      a,(hl)
 574+ F7B2 FE 3E                                cp      ">"
 575+ F7B4 C8                                   ret     z
 576+ F7B5 23                                   inc     hl
 577+ F7B6 16 0A                                ld      d,10
 578+ F7B8 ED 30                                mul
 579+ F7BA D6 30                                sub     "0"
 580+ F7BC 83                                   add     a,e
 581+ F7BD 5F                                   ld      e,a
 582+ F7BE 18 F1                                jr      .ExpandTokenLoop
 583+ F7C0
 584+ F7C0 E5           SelectTokenToHL:        push    hl                                          ;+1
 585+ F7C1 C5                                   push    bc                                          ;+2
 586+ F7C2 CD A2 F6                             call    GalaxyDoRandom
 587+ F7C5 C1                                   pop     bc                                          ;+1
 588+ F7C6 E1                                   pop     hl                                          ;+0
 589+ F7C7 16 00        .CalcOptionAToD:        ld      d,0
 590+ F7C9 FE 33                                cp      $33
 591+ F7CB DA CF F7                             jp      c,.Check66
 592+ F7CE 14           .IsGTE33:               inc     d
 593+ F7CF FE 66        .Check66:               cp      $66
 594+ F7D1 DA D5 F7                             jp      c,.Check99
 595+ F7D4 14           .IsGTE66:               inc     d
 596+ F7D5 FE 99        .Check99:               cp      $99
 597+ F7D7 DA DB F7     .IsGTE99:               jp      c,.CheckCC
 598+ F7DA 14                                   inc     d
 599+ F7DB FE CC        .CheckCC:               cp      $CC
 600+ F7DD 38 01                                jr      c,.TokenIdToAddress
 601+ F7DF 14           .ItGETCC:               inc     d
 602+ F7E0 21 1B EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 603+ F7E3 7B                                   ld      a,e
 604+ F7E4 CB 27                                sla     a                                               ; x 2
 605+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 2
 606+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 4
 607+ F7EA ED 31                                add     hl,a                                            ; hl + a * 6
 608+ F7EC ED 31                                add     hl,a                                            ; hl + a * 8
 609+ F7EE ED 31                                add     hl,a                                            ; hl + a * 10
 610+ F7F0 7A                                   ld      a,d
 611+ F7F1 ED 31                                add     hl,a
 612+ F7F3 ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 613+ F7F5 7E           .LookUpDataFromTable:   ld      a,(hl)
 614+ F7F6 DD 6F                                ld      ixl,a
 615+ F7F8 23                                   inc     hl
 616+ F7F9 7E                                   ld      a,(hl)
 617+ F7FA DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 618+ F7FC DD E5                                push    ix                                              ;+2
 619+ F7FE E1                                   pop     hl                                              ;+1
 620+ F7FF C9                                   ret
 621+ F800              ;------------------------------------------------------------------------------------------------------------------------------------
 622+ F800 E5           ProcessHSymbol:         push    hl                                              ;+1
 623+ F801 D5                                   push    de                                              ;+2
 624+ F802 C5                                   push    bc                                              ;+3
 625+ F803 21 91 F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 626+ F806 FD 54                                ld      d,iyh
 627+ F808 FD 5D                                ld      e,iyl
 628+ F80A CD D0 F6                             call    GalaxyCopyLoop
 629+ F80D FD 62                                ld      iyh,d
 630+ F80F FD 6B                                ld      iyl,e
 631+ F811 C1                                   pop     bc                                              ;+2
 632+ F812 D1                                   pop     de                                              ;+1
 633+ F813 E1                                   pop     hl
 634+ F814 C9                                   ret
 635+ F815              ;------------------------------------------------------------------------------------------------------------------------------------
 636+ F815 E5           ProcessISymbol:         push    hl                                              ;+1
 637+ F816 D5                                   push    de                                              ;+2
 638+ F817 C5                                   push    bc                                              ;+3
 639+ F818 21 91 F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 640+ F81B FD 54                                ld      d,iyh
 641+ F81D FD 5D                                ld      e,iyl
 642+ F81F CD D0 F6                             call    GalaxyCopyLoop
 643+ F822 FD 62                                ld      iyh,d
 644+ F824 FD 6B                                ld      iyl,e
 645+ F826 3E 69                                ld      a,"i"
 646+ F828 EB                                   ex      de,hl
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 61                                ld      a,"a"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F 3E 6E                                ld      a,"n"
 653+ F831 77                                   ld      (hl),a
 654+ F832 23                                   inc     hl
 655+ F833 E5                                   push    hl
 656+ F834 FD E1                                pop     iy
 657+ F836 C1                                   pop     bc                                              ;+2
 658+ F837 D1                                   pop     de                                              ;+1
 659+ F838 E1                                   pop     hl                                              ;+0
 660+ F839 C9                                   ret
 661+ F83A              ;------------------------------------------------------------------------------------------------------------------------------------
 662+ F83A E5           ProcessRSymbol:         push    hl                                              ;+1
 663+ F83B D5                                   push    de                                              ;+2
 664+ F83C CD A2 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 665+ F83F E6 03                                and     $03
 666+ F841 47                                   ld      b,a
 667+ F842 04                                   inc     b
 668+ F843 AF                                   xor     a
 669+ F844 4F                                   ld      c,a
 670+ F845 C5           .RLoop:                 push    bc                                              ;+3
 671+ F846 CD A2 F6                             call    GalaxyDoRandom
 672+ F849 C1                                   pop     bc                                              ;+2
 673+ F84A E6 3E                                and     $3E
 674+ F84C 21 A0 E8                             ld      hl,GalaxyName_digrams
 675+ F84F ED 31                                add     hl,a
 676+ F851 7E                                   ld      a,(hl)
 677+ F852 FE 41                                cp      "A"
 678+ F854 38 01                                jr      c,.NotLowercase
 679+ F856 81                                   add     a,c
 680+ F857 FD 77 00     .NotLowercase:          ld      (iy+0),a
 681+ F85A 23                                   inc     hl
 682+ F85B FD 23                                inc     iy
 683+ F85D 0E 20                                ld      c,$20               ; fixed force to lower case
 684+ F85F 7E                                   ld      a,(hl)
 685+ F860 FE 41                                cp      "A"
 686+ F862 38 01                                jr      c,.NotLowercase2
 687+ F864 81                                   add     a,c
 688+ F865 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 689+ F868 FD 23                                inc     iy
 690+ F86A 10 D9                                djnz    .RLoop
 691+ F86C D1                                   pop     de                                              ;+1
 692+ F86D E1                                   pop     hl                                              ;+0
 693+ F86E C9                                   ret
 694+ F86F              ;------------------------------------------------------------------------------------------------------------------------------------
 695+ F86F ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 696+ F873 CD 64 FC                             call    galaxy_system_under_cursor
 697+ F876 CD BF FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 698+ F879 21 7F E8                             ld      hl,GalaxyExpandedName
 699+ F87C 11 91 F7                             ld      de,GalaxyNameCopy
 700+ F87F CD D0 F6                             call    GalaxyCopyLoop
 701+ F882 21 91 F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 702+ F885 CD 5A F7                             call    GalaxyCapitaliseString
 703+ F888                                      ; we will also capitalise the local copy here later
 704+ F888 21 DE F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 705+ F88B 11 B2 F2                             ld      de,GalaxyPlanetSource
 706+ F88E CD D0 F6                             call    GalaxyCopyLoop
 707+ F891 AF           .ClearOutDescription:   xor     a
 708+ F892 21 85 F1                             ld      hl,GalaxyPlanetDescription
 709+ F895 77                                   ld      (hl),a
 710+ F896 11 86 F1                             ld      de,GalaxyPlanetDescription+1
 711+ F899 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 712+ F89C ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 713+ F89E CD 6C F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 714+ F8A1 21 B2 F2                             ld      hl,GalaxyPlanetSource
 715+ F8A4 FD 21 85 F1                          ld      iy,GalaxyPlanetDescription
 716+ F8A8              ; At this point we are now prepped ready to expand the string to a full description
 717+ F8A8              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 718+ F8A8 7E           .ExpRecursive:          ld      a,(hl)
 719+ F8A9 FE 00                                cp      0
 720+ F8AB CA F0 F8                             jp      z,.ExpansionComplete
 721+ F8AE FE 3C                                cp      "<"
 722+ F8B0 C2 C3 F8                             jp      nz,.NotToken
 723+ F8B3 23           .ItIsAToken:            inc     hl
 724+ F8B4 CD AF F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 725+ F8B7 23                                   inc     hl
 726+ F8B8 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 727+ F8B9 CD C0 F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 728+ F8BC CD A8 F8                             call    .ExpRecursive
 729+ F8BF E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 730+ F8C0 C3 A8 F8     .TokenNextIteration:    jp      .ExpRecursive
 731+ F8C3              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 732+ F8C3 FE 25        .NotToken:              cp      "%"
 733+ F8C5 C2 E7 F8                             jp      nz,.RegularCharacter
 734+ F8C8 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 735+ F8C9 7E                                   ld      a,(hl)
 736+ F8CA FE 48                                cp      "H"
 737+ F8CC 20 07                                jr      nz,.IsItI
 738+ F8CE 23           .ItIsAnH:               inc     hl
 739+ F8CF CD 00 F8                             call    ProcessHSymbol
 740+ F8D2 C3 A8 F8                             jp      .ExpRecursive
 741+ F8D5 FE 49        .IsItI:                 cp      "I"
 742+ F8D7 20 07                                jr      nz,.ItIsR
 743+ F8D9 23           .ItIsAnI:               inc     hl
 744+ F8DA CD 15 F8                             call    ProcessISymbol
 745+ F8DD C3 A8 F8                             jp      .ExpRecursive
 746+ F8E0 CD 3A F8     .ItIsR:                 call    ProcessRSymbol
 747+ F8E3 23                                   inc     hl
 748+ F8E4 C3 A8 F8     .SystemNextIteration:   jp      .ExpRecursive
 749+ F8E7 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 750+ F8EA FD 23                                inc     iy
 751+ F8EC 23                                   inc     hl
 752+ F8ED C3 A8 F8     .RegularNextIteration:  jp      .ExpRecursive
 753+ F8F0 AF           .ExpansionComplete:     xor     a
 754+ F8F1 FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 755+ F8F4 C9                                   ret
 756+ F8F5              ;----------------------------------------------------------------------------------------------------------------------------------
 757+ F8F5 3A 0C E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 758+ F8F8 3C                                   inc     a
 759+ F8F9 67                                   ld      h,a
 760+ F8FA 0E 00                                ld      c,0
 761+ F8FC 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 762+ F8FE 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 763+ F901 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 764+ F905 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 765+ F908 FE 00                                cp      0
 766+ F90A                                      ; Check Cash TODO
 767+ F90A 28 00                                jr      z,.CheckTechLevel
 768+ F90C DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 769+ F90F BC                                   cp      h
 770+ F910                                      ;jr      nc,.DoNotShowItem
 771+ F910 DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 772+ F913 FE 00                                cp      0
 773+ F915                                    ;  jr      z,.DoNotShowItem
 774+ F915 79           .ShowItem:              ld      a,c
 775+ F916 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 776+ F919 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 777+ F91C FE 00                                cp      EQ_FUEL
 778+ F91E 28 18                                jr      z,.FuelLevel
 779+ F920 FE 01                                cp      EQ_MISSILE
 780+ F922 28 25                                jr      z,.CountMissiles
 781+ F924 21 C2 87     .IsFitted:              ld      hl,EquipmentFitted
 782+ F927 ED 31                                add     hl,a
 783+ F929 7E                                   ld      a,(hl)
 784+ F92A FE 00                                cp      0
 785+ F92C 28 05                                jr      z,.NotFittedItem
 786+ F92E 3E 2A        .FittedItem:            ld      a,"*"
 787+ F930 C3 5A F9                             jp      .MoreToDoCheck
 788+ F933 3E 2D        .NotFittedItem:         ld      a,"-"
 789+ F935 C3 5A F9                             jp      .MoreToDoCheck
 790+ F938 3A A7 87     .FuelLevel:             ld      a,(Fuel)
 791+ F93B FE 46                                cp      MaxFuelLevel
 792+ F93D 28 05                                jr      z,.FullFuel
 793+ F93F 3E 2D        .NotFullFuel:           ld      a,"-"
 794+ F941 C3 5A F9                             jp      .MoreToDoCheck
 795+ F944 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 796+ F946 C3 5A F9                             jp      .MoreToDoCheck
 797+ F949 3A 42 82     .CountMissiles:         ld      a,(NbrMissiles)
 798+ F94C FE 00                                cp      0
 799+ F94E 28 05                                jr      z,.NoMissiles
 800+ F950 C6 30                                add     "0"
 801+ F952 C3 5A F9                             jp      .MoreToDoCheck
 802+ F955 3E 2D        .NoMissiles:            ld      a,"-"
 803+ F957 C3 5A F9                             jp      .MoreToDoCheck
 804+ F95A DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 805+ F95D 0C                                   inc     c
 806+ F95E DD 19                                add     ix,de
 807+ F960 10 A3                                djnz    .ItemCheckLoop
 808+ F962 C9                                   ret
 809+ F963 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 810+ F965 DD 77 01                             ld      (ix+1),a
 811+ F968 DD 19                                add     ix,de
 812+ F96A 10 99                                djnz    .ItemCheckLoop
 813+ F96C C9                                   ret
 814+ F96D              ;----------------------------------------------------------------------------------------------------------------------------------
 815+ F96D 3A FA E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 816+ F970 B7           .GenerateGovernment:    or      a
 817+ F971 CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 818+ F973 CB 3F                                srl	    a
 819+ F975 CB 3F                                srl	    a                                                   ;
 820+ F977 E6 07                                and     $07                                             ;
 821+ F979 32 0A E9                             ld      (GalaxyDisplayGovernment),a                     ;
 822+ F97C 3A F9 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 823+ F97F E6 07                                and     $07
 824+ F981 47                                   ld      b,a
 825+ F982 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 826+ F985                                      JumpIfAGTENusng 1, .GreaterThan1
 826+ F985 FE 01       >                        cp     1
 826+ F987 D2 93 F9    >                        jp		nc,.GreaterThan1
 827+ F98A 78           .OneOrZero:             ld      a,b
 828+ F98B F6 02                                or      2
 829+ F98D 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 830+ F990 C3 97 F9                             jp      .GenerateTechLevel
 831+ F993 78           .GreaterThan1:          ld      a,b
 832+ F994 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 833+ F997 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 834+ F999 47                                   ld      b,a
 835+ F99A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 836+ F99D E6 03                                and     $03
 837+ F99F 80                                   add     b
 838+ F9A0 47                                   ld      b,a
 839+ F9A1 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 840+ F9A4 4F                                   ld      c,a
 841+ F9A5 CB 2F                                sra     a
 842+ F9A7 80                                   add     b
 843+ F9A8 47                                   ld      b,a
 844+ F9A9 79                                   ld      a,c
 845+ F9AA E6 01                                and     $1
 846+ F9AC 80                                   add     b
 847+ F9AD 32 0C E9                             ld      (GalaxyDisplayTekLevel),a
 848+ F9B0 CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 849+ F9B2 CB 27                                sla     a
 850+ F9B4 21 0A E9                             ld      hl,GalaxyDisplayGovernment
 851+ F9B7 86                                   add     a,(hl)
 852+ F9B8 47                                   ld      b,a
 853+ F9B9 3A 0B E9                             ld      a,(GalaxyDisplayEconomy)
 854+ F9BC 80                                   add     a,b
 855+ F9BD 3C                                   inc     a
 856+ F9BE 32 0D E9                             ld      (GalaxyDisplayPopulation),a
 857+ F9C1 3A 0B E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 858+ F9C4 EE 07                                xor     7
 859+ F9C6 C6 03                                add     3
 860+ F9C8 57                                   ld      d,a
 861+ F9C9 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 862+ F9CC C6 04                                add     4
 863+ F9CE 5F                                   ld      e,a
 864+ F9CF ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 865+ F9D1 3A 0D E9                             ld      a,(GalaxyDisplayPopulation)
 866+ F9D4 26 00                                ld      h,0
 867+ F9D6 6F                                   ld      l,a
 868+ F9D7 CD 55 95                             call    mulDEbyHL
 869+ F9DA EB                                   ex      de,hl
 870+ F9DB                                      ShiftDELeft1
 870+ F9DB CB 23       >			   sla e
 870+ F9DD CB 12       >			   rl  d
 871+ F9DF                                      ShiftDELeft1
 871+ F9DF CB 23       >			   sla e
 871+ F9E1 CB 12       >			   rl  d
 872+ F9E3                                      ShiftDELeft1
 872+ F9E3 CB 23       >			   sla e
 872+ F9E5 CB 12       >			   rl  d
 873+ F9E7 ED 53 0E E9                          ld      (GalaxyDisplayProductivity),de
 874+ F9EB 3A FD E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 875+ F9EE E6 0F                                and		$0F
 876+ F9F0 C6 0B                                add     11
 877+ F9F2 47                                   ld      b,a
 878+ F9F3 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 879+ F9F6 4F                                   ld      c,a
 880+ F9F7 ED 43 10 E9                          ld      (GalaxyDisplayRadius),bc
 881+ F9FB C9                                   ret
 882+ F9FC
 883+ F9FC              galaxy_master_seed_to_system:
 884+ F9FC 21 10 E0     		ld		hl,galaxy_master_seed
 885+ F9FF 11 0B 82     		ld		de,SystemSeed
 886+ FA02              galaxy_copy_seed:
 887+ FA02 ED A0        		ldi
 888+ FA04 ED A0        		ldi
 889+ FA06 ED A0        		ldi
 890+ FA08 ED A0        		ldi
 891+ FA0A ED A0        		ldi
 892+ FA0C ED A0        		ldi
 893+ FA0E C9           		ret
 894+ FA0F
 895+ FA0F              galaxy_master_to_galaxy_working:
 896+ FA0F 21 10 E0     		ld		hl,galaxy_master_seed
 897+ FA12 11 F8 E8     		ld		de,GalaxyWorkingSeed
 898+ FA15 18 EB        		jr		galaxy_copy_seed
 899+ FA17
 900+ FA17              galaxy_master_to_galaxy_naming:
 901+ FA17 21 10 E0     		ld		hl,galaxy_master_seed
 902+ FA1A 11 FE E8     		ld		de,GalaxyNamingSeed
 903+ FA1D 18 E3        		jr		galaxy_copy_seed
 904+ FA1F
 905+ FA1F              working_seed_to_galaxy_working:
 906+ FA1F 21 23 82             ld      hl,WorkingSeeds
 907+ FA22 11 F8 E8     		ld		de,GalaxyWorkingSeed
 908+ FA25 18 DB        		jr		galaxy_copy_seed
 909+ FA27
 910+ FA27              working_seed_to_galaxy_naming:
 911+ FA27 21 23 82             ld      hl,WorkingSeeds
 912+ FA2A 11 FE E8     		ld		de,GalaxyNamingSeed
 913+ FA2D 18 D3        		jr		galaxy_copy_seed
 914+ FA2F
 915+ FA2F              galaxy_ix_seed_to_galaxy_naming:
 916+ FA2F DD E5                push    ix
 917+ FA31 E1                   pop     hl
 918+ FA32 11 FE E8     		ld		de,GalaxyNamingSeed
 919+ FA35 18 CB        		jr		galaxy_copy_seed
 920+ FA37
 921+ FA37
 922+ FA37              galaxy_working_seed_to_galaxy_naming:
 923+ FA37 21 F8 E8             ld      hl,GalaxyWorkingSeed
 924+ FA3A 11 FE E8     		ld		de,GalaxyNamingSeed
 925+ FA3D 18 C3        		jr		galaxy_copy_seed
 926+ FA3F
 927+ FA3F              galaxy_working_seed_to_system:
 928+ FA3F 21 F8 E8     		ld		hl,GalaxyWorkingSeed
 929+ FA42 11 0B 82     		ld		de,SystemSeed
 930+ FA45 18 BB        		jr		galaxy_copy_seed
 931+ FA47
 932+ FA47              system_seed_to_galaxy_working:
 933+ FA47 21 0B 82     		ld		hl,SystemSeed
 934+ FA4A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 935+ FA4D 18 B3        		jr		galaxy_copy_seed
 936+ FA4F
 937+ FA4F
 938+ FA4F              system_seed_to_galaxy_naming:
 939+ FA4F 21 0B 82     		ld		hl,SystemSeed
 940+ FA52 11 FE E8     		ld		de,GalaxyNamingSeed
 941+ FA55 18 AB        		jr		galaxy_copy_seed
 942+ FA57
 943+ FA57              ix_seed_to_galaxy_working:
 944+ FA57 DD E5                push    ix
 945+ FA59 E1                   pop     hl
 946+ FA5A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 947+ FA5D 18 A3        		jr		galaxy_copy_seed
 948+ FA5F
 949+ FA5F              ; Here we twist just once rather than the usual4 for a system
 950+ FA5F 3A FE E8     NextGalaxyNamingSeed:   ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 951+ FA62 B7                                   or		a							; clear carry flag
 952+ FA63 21 00 E9                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 953+ FA66 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 954+ FA67 47                                   ld		b,a							; partial sum lo [x]
 955+ FA68              ; y = b + d	+ carry
 956+ FA68 3A FF E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 957+ FA6B 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 958+ FA6E 8E                                   adc		a,(hl)						; note add with carry
 959+ FA6F 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 960+ FA70 3A 00 E9                             ld		a,(GalaxyNamingSeed+2)
 961+ FA73 32 FE E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 962+ FA76 3A 01 E9                             ld		a,(GalaxyNamingSeed+3)
 963+ FA79 32 FF E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 964+ FA7C 3A 03 E9                             ld		a,(GalaxyNamingSeed+5)
 965+ FA7F 32 01 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 966+ FA82 3A 02 E9                             ld		a,(GalaxyNamingSeed+4)
 967+ FA85 32 00 E9                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 968+ FA88 B7                                   or		a
 969+ FA89 78                                   ld		a,b
 970+ FA8A 21 00 E9                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 971+ FA8D 86                                   add	    a,(hl)
 972+ FA8E 32 02 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 973+ FA91 79                                   ld		a,c
 974+ FA92 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 975+ FA95 8E                                   adc		a,(hl)
 976+ FA96 32 03 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 977+ FA99 C9                                   ret
 978+ FA9A
 979+ FA9A
 980+ FA9A 3A 03 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 981+ FA9D E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 982+ FA9F FE 00                                cp		0					            ; 0 = skip 2 chars
 983+ FAA1 28 12                                jr		z,.SkipPhrase
 984+ FAA3 C6 0C                                add		a,12
 985+ FAA5 CB 27                                sla		a					            ; phrase = (a+12)*2
 986+ FAA7 21 A0 E8                             ld		hl,GalaxyName_digrams
 987+ FAAA ED 31                                add		hl,a
 988+ FAAC ED A0                                ldi
 989+ FAAE 7E                                   ld		a,(hl)
 990+ FAAF FE 3F                                cp		'?'
 991+ FAB1 28 02                                jr		z,.SkipPhrase
 992+ FAB3 ED A0        .AddExtra:              ldi
 993+ FAB5 D5           .SkipPhrase:            push	de
 994+ FAB6 CD 5F FA                             call	NextGalaxyNamingSeed
 995+ FAB9 D1                                   pop		de
 996+ FABA C9                                   ret
 997+ FABB
 998+ FABB              ; takes location in BC, finds seed and expands the name
 999+ FABB ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
1000+ FABF CD 64 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
1001+ FAC2 FE 00                                cp      0
1002+ FAC4 C8                                   ret     z
1003+ FAC5
1004+ FAC5 CD 27 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1005+ FAC8 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1006+ FACB
1007+ FACB CD 17 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1008+ FACE C3 E0 FA                             jp      GalaxyDigramNamingSeed
1009+ FAD1
1010+ FAD1 CD 37 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1011+ FAD4 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1012+ FAD7
1013+ FAD7 CD 2F FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1014+ FADA C3 E0 FA                             jp      GalaxyDigramNamingSeed
1015+ FADD
1016+ FADD CD 4F FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1017+ FAE0
1018+ FAE0 11 7F E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1019+ FAE3 06 03        GalaxyDigramToDE:       ld		b,3
1020+ FAE5 3A FE E8                             ld		a,(GalaxyNamingSeed)
1021+ FAE8 E6 40                                and		$40
1022+ FAEA 28 03                                jr		z,.SmallSizeName
1023+ FAEC CD 9A FA     .LargeSizeName:         call	GalaxyNamingLoop
1024+ FAEF CD 9A FA     .SmallSizeName:         call	GalaxyNamingLoop
1025+ FAF2 CD 9A FA                             call	GalaxyNamingLoop
1026+ FAF5 CD 9A FA                             call	GalaxyNamingLoop
1027+ FAF8 EB           .DoneName:              ex		de,hl
1028+ FAF9 36 00                                ld		(hl),0
1029+ FAFB EB                                   ex		de,hl
1030+ FAFC AF                                   xor     a
1031+ FAFD 3D                                   dec     a
1032+ FAFE C9                                   ret
1033+ FAFF              ;reorte X 13 Y 97
1034+ FAFF
1035+ FAFF              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFF 3A 5D E8     is_system_found:        ld      a,(GalaxySearchLength)
1037+ FB02                                      ;dec     a                       ; as we won't check the /0 just first match
1038+ FB02 4F                                   ld      c,a                     ; will always be max of 32 as that is what length routine does
1039+ FB03 06 00                                ld      b,0                     ; so we can use cpir
1040+ FB05 11 5E E8     .readyToSearch:         ld      de,GalaxySearchString   ; hl = string we are serching
1041+ FB08 21 7F E8                             ld      hl,GalaxyExpandedName   ; de = the expanded galaxy name
1042+ FB0B 7E           .searchLoop:            ld      a,(hl)                  ; if the string is too short then maybe there is a longer one to find
1043+ FB0C                                      JumpIfAIsZero   .noMatch        ; but
1043+ FB0C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1043+ FB0D CA 1B FB    >                        jp	    z, .noMatch
1044+ FB10 1A                                   ld      a,(de)                  ; get the character to search for
1045+ FB11 ED A1                                cpi                             ; compare with value in A from HL
1046+ FB13 20 06                                jr      nz,.noMatch
1047+ FB15 13                                   inc     de                      ; move to next search character
1048+ FB16 E2 1E FB                             jp      po, .matched            ; if c = 0 then we have hit the bingpot
1049+ FB19 18 F0                                jr      .searchLoop             ; else keep looping
1050+ FB1B              .noMatch:               SetAFalse
1050+ FB1B 3E FF       >                        ld      a,$FF
1051+ FB1D C9                                   ret
1052+ FB1E              .matched:               SetATrue
1052+ FB1E AF          >                        xor     a
1053+ FB1F C9                                   ret
1054+ FB20
1055+ FB20 21 5E E8     set_galaxy_search_len:  ld      hl,GalaxySearchString
1056+ FB23 06 00                                ld      b,0
1057+ FB25 0E 20                                ld      c,32                    ; limiter for missing /0
1058+ FB27 7E           .SearchLoop:            ld      a,(hl)
1059+ FB28                                      JumpIfAIsZero .foundLength
1059+ FB28 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1059+ FB29 CA 34 FB    >                        jp	    z, .foundLength
1060+ FB2C 04                                   inc     b
1061+ FB2D 0D                                   dec     c
1062+ FB2E 28 04                                jr      z,.foundLength
1063+ FB30 23                                   inc     hl
1064+ FB31 C3 27 FB                             jp      .SearchLoop
1065+ FB34 78           .foundLength:           ld      a,b
1066+ FB35 32 5D E8                             ld      (GalaxySearchLength),a
1067+ FB38 C9                                   ret
1068+ FB39
1069+ FB39              ; find system by searching for GalaxySearchString
1070+ FB39 CD 20 FB     find_system_by_name:    call    set_galaxy_search_len
1071+ FB3C AF                                   xor     a
1072+ FB3D 32 A4 81                             ld      (XSAV),a
1073+ FB40 DD 21 16 E0                          ld      ix,galaxy_data
1074+ FB44 CD 57 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1075+ FB47 CD D1 FA                             call    GalaxyDigramWorkingSeed
1076+ FB4A CD FF FA                             call    is_system_found
1077+ FB4D                                      JumpIfATrue .FoundAtIX
1077+ FB4D A7          >                        and     a
1077+ FB4E CA 6A FB    >                        jp      z, .FoundAtIX
1078+ FB51 3A A4 81     .notFoundYet:           ld      a,(XSAV)
1079+ FB54 3D                                   dec     a
1080+ FB55 28 10                                jr      z,.NoMoreSystems
1081+ FB57 32 A4 81     .moreToSearch:          ld      (XSAV),a
1082+ FB5A DD E5                                push    ix
1083+ FB5C E1                                   pop     hl
1084+ FB5D ED 34 08 00                          add     hl,8
1085+ FB61 E5                                   push    hl
1086+ FB62 DD E1                                pop     ix
1087+ FB64 C3 44 FB                             jp      .nextSystem
1088+ FB67 3E FF        .NoMoreSystems:         ld      a,$FF
1089+ FB69 C9                                   ret
1090+ FB6A CD 57 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1091+ FB6D C9                                   ret
1092+ FB6E              ;----------------------------------------------------------------------------------------------------------------------------------
1093+ FB6E 00 00        nearestfound:           DW 0
1094+ FB70              ; In here de carries current nearest and loads into nearest found
1095+ FB70              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1096+ FB70 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1097+ FB74 FD 26 00                             ld      iyh,0
1098+ FB77 FD 2E 78                             ld      iyl,120
1099+ FB7A ED 43 6E FB                          ld      (nearestfound),bc
1100+ FB7E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1101+ FB81 5F                                   ld      e,a                             ; e= current seed x
1102+ FB82                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1102+ FB82 B9          >                        cp      c
1102+ FB83 DA 94 FB    >                        jp		c, nearestXPosLT
1103+ FB86 D5           nearestXPosGTE:         push    de                              ;
1104+ FB87 26 00                                ld      h,0                             ;
1105+ FB89 6F                                   ld      l,a                             ; hl = seed x
1106+ FB8A 16 00                                ld      d,0                             ;
1107+ FB8C 59                                   ld      e,c                             ; de = nearest x
1108+ FB8D B7                                   or      a                               ;
1109+ FB8E ED 52                                sbc     hl,de                           ; hl = distance between the two
1110+ FB90 D1                                   pop     de
1111+ FB91 C3 9E FB                             jp      nearestDistXPos
1112+ FB94 D5           nearestXPosLT:          push    de                              ;
1113+ FB95 26 00                                ld      h,0                             ;
1114+ FB97 69                                   ld      l,c                             ; hl = nearest x
1115+ FB98 16 00                                ld      d,0                             ;
1116+ FB9A B7                                   or      a                               ; de = seed x
1117+ FB9B ED 52                                sbc     hl,de                           ;
1118+ FB9D D1                                   pop     de                              ; hl = distance between the two
1119+ FB9E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1120+ FB9F FD BD                                cp      iyl                             ; under initial threshold?
1121+ FBA1 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1122+ FBA3               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1123+ FBA3 DD 7E 01                             ld      a,(ix+1)                        ;
1124+ FBA6 57                                   ld      d,a                             ; d = seed y
1125+ FBA7                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1125+ FBA7 B8          >                        cp      b
1125+ FBA8 DA BC FB    >                        jp		c, nearestYPosLT
1126+ FBAB E5           nearestYPosGTE:         push    hl                              ; save current x distance
1127+ FBAC D5                                   push    de                              ;
1128+ FBAD 26 00                                ld      h,0                             ;
1129+ FBAF 6F                                   ld      l,a                             ; hl = seed y
1130+ FBB0 16 00                                ld      d,0                             ;
1131+ FBB2 58                                   ld      e,b                             ; de = nearest y
1132+ FBB3 B7                                   or      a                               ;
1133+ FBB4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1134+ FBB6 7D                                   ld      a,l
1135+ FBB7 D1                                   pop     de
1136+ FBB8 E1                                   pop     hl
1137+ FBB9 C3 CA FB                             jp      nearestDistYPos
1138+ FBBC E5           nearestYPosLT:          push    hl                              ; save current x distance
1139+ FBBD D5                                   push    de                              ;
1140+ FBBE 26 00                                ld      h,0                             ;
1141+ FBC0 68                                   ld      l,b                             ; hl = nearest y
1142+ FBC1 5A                                   ld      e,d                             ;
1143+ FBC2 16 00                                ld      d,0                             ; de = seed y
1144+ FBC4 B7                                   or      a                               ;
1145+ FBC5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1146+ FBC7 7D                                   ld      a,l
1147+ FBC8 D1                                   pop     de
1148+ FBC9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1149+ FBCA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1150+ FBCC 30 12                                jr      nc, find_nearest_miss
1151+ FBCE 26 00                                ld      h,0                             ; hl = distance for x
1152+ FBD0 ED 31                                add     hl,a                            ; adding distance y
1153+ FBD2 7D                                   ld      a,l                             ; and copy it to l
1154+ FBD3 FD BD                                cp      iyl                             ; is the pair under distance
1155+ FBD5 30 09                                jr      nc, find_nearest_miss           ;
1156+ FBD7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1157+ FBD9 ED 53 6E FB                          ld      (nearestfound),de               ;
1158+ FBDD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1158+ FBDD FE 02       >                        cp    2
1158+ FBDF D8          >                        ret	 c
1159+ FBE0 DD E5        find_nearest_miss:      push     ix
1160+ FBE2 E1                                   pop      hl
1161+ FBE3 ED 34 08 00                          add      hl,8
1162+ FBE7 E5                                   push     hl
1163+ FBE8 DD E1                                pop      ix
1164+ FBEA FD 25                                dec     iyh
1165+ FBEC FD 7C                                ld      a,iyh
1166+ FBEE                                      JumpIfAIsNotZero find_nearest_loop
1166+ FBEE A7          >                        and     a
1166+ FBEF C2 7E FB    >                        jp	    nz,find_nearest_loop
1167+ FBF2 ED 4B 6E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1168+ FBF6 C9                                   ret
1169+ FBF7              ;----------------------------------------------------------------------------------------------------------------------------------
1170+ FBF7              ; Does a sqare root distance
1171+ FBF7 16 00        galaxy_find_distance:   ld      d,0
1172+ FBF9 26 00                                ld      h,0
1173+ FBFB 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1174+ FBFE 47                                   ld      b,a
1175+ FBFF 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1176+ FC02 B8                                   cp      b
1177+ FC03 20 0E                                jr      nz,.NotSame
1178+ FC05 C5           .XSame:                 push    bc
1179+ FC06 F5                                   push    af
1180+ FC07 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1181+ FC0A 47                                   ld      b,a
1182+ FC0B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1183+ FC0E B8                                   cp      b
1184+ FC0F C1                                   pop     bc
1185+ FC10 F1                                   pop     af
1186+ FC11 28 49                                jr      z,.ZeroDistance
1187+ FC13 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1188+ FC15 68           .DestinationLTPresentX: ld      l,b
1189+ FC16 5F                                   ld      e,a
1190+ FC17 B7                                   or      a
1191+ FC18 ED 52                                sbc     hl,de
1192+ FC1A C3 22 FC                             jp      .SquareXDist
1193+ FC1D 6F           .DestinationGTEPresentX:ld      l,a
1194+ FC1E 58                                   ld      e,b
1195+ FC1F B7                                   or      a
1196+ FC20 ED 52                                sbc     hl,de
1197+ FC22 55           .SquareXDist:           ld      d,l
1198+ FC23 5D                                   ld      e,l
1199+ FC24 ED 30                                mul
1200+ FC26 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1201+ FC29 47                                   ld      b,a
1202+ FC2A 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1203+ FC2D B8                                   cp      b
1204+ FC2E 30 0B                                jr      nc,.DestinationGTEPresentY
1205+ FC30 4F           .DestinationLTPresentY: ld      c,a
1206+ FC31 68                                   ld      l,b
1207+ FC32 06 00                                ld      b,0
1208+ FC34 26 00                                ld      h,0
1209+ FC36 ED 42                                sbc     hl,bc
1210+ FC38 C3 43 FC                             jp      .DestinationYDone
1211+ FC3B 48           .DestinationGTEPresentY:ld      c,b
1212+ FC3C 6F                                   ld      l,a
1213+ FC3D 06 00                                ld      b,0
1214+ FC3F 26 00                                ld      h,0
1215+ FC41 ED 42                                sbc     hl,bc
1216+ FC43 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1217+ FC45 7D                                   ld      a,l
1218+ FC46 EB                                   ex      de,hl
1219+ FC47 57                                   ld      d,a
1220+ FC48 5F                                   ld      e,a
1221+ FC49 ED 30        .SquareYDist:           mul
1222+ FC4B 19                                   add     hl,de
1223+ FC4C EB                                   ex      de,hl
1224+ FC4D CD 28 96                             call    asm_sqrt            ; distance via pythagoras in hl
1225+ FC50                                      ShiftHLLeft1
1225+ FC50 CB 25       >			   sla l
1225+ FC52 CB 14       >			   rl  h
1226+ FC54                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1226+ FC54 CB 25       >			   sla l
1226+ FC56 CB 14       >			   rl  h
1227+ FC58 22 57 82                             ld      (Distance),hl       ; Distance is now caulated distance
1228+ FC5B C9                                   ret
1229+ FC5C AF           .ZeroDistance:          xor     a
1230+ FC5D 32 57 82                             ld      (Distance),a
1231+ FC60 32 58 82                             ld      (Distance+1),a
1232+ FC63 C9                                   ret
1233+ FC64              ;----------------------------------------------------------------------------------------------------------------------------------
1234+ FC64              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds
1235+ FC64              ; this needs to chagne to galaxyresultseed or galayxworkingseed
1236+ FC64 AF           galaxy_system_under_cursor:xor     a
1237+ FC65 32 A4 81                             ld		(XSAV),a
1238+ FC68 DD 21 16 E0                          ld      ix,galaxy_data
1239+ FC6C 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1240+ FC6F DD E5                                push    ix
1241+ FC71 7D                                   ld      a,l
1242+ FC72 DD BE 03                             cp      (ix+3)                          ; seed x
1243+ FC75 20 14                                jr      nz,.ItsNotThisX
1244+ FC77 7C                                   ld      a,h
1245+ FC78 DD BE 01                             cp      (ix+1)                          ; seed x
1246+ FC7B 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1247+ FC7D DD E5                                push    ix
1248+ FC7F E1                                   pop     hl
1249+ FC80 11 23 82                             ld      de,WorkingSeeds                 ;' copy to wkring Seeds
1250+ FC83 CD 37 88                             call    copy_seed
1251+ FC86 3E FF                                ld      a,$FF
1252+ FC88 DD E1                                pop     ix
1253+ FC8A C9                                   ret
1254+ FC8B E1           .ItsNotThisX:           pop     hl
1255+ FC8C ED 34 08 00                          add     hl,8
1256+ FC90 E5                                   push    hl
1257+ FC91 DD E1                                pop     ix
1258+ FC93 3A A4 81                             ld		a,(XSAV)
1259+ FC96 3D                                   dec		a
1260+ FC97 32 A4 81                             ld      (XSAV),a
1261+ FC9A FE 00                                cp		0
1262+ FC9C C8                                   ret		z
1263+ FC9D 18 CD                                jr		.GCCounterLoop
1264+ FC9F              ;----------------------------------------------------------------------------------------------------------------------------------
1265+ FC9F 21 0B 82     SeedGalaxy:             ld      hl,SystemSeed                   ; First copy system seed to galaxy master
1266+ FCA2 11 10 E0                             ld      de,galaxy_master_seed           ; .
1267+ FCA5 ED A0                                ldi                                     ; .
1268+ FCA7 ED A0                                ldi                                     ; .
1269+ FCA9 ED A0                                ldi                                     ; .
1270+ FCAB ED A0                                ldi                                     ; .
1271+ FCAD ED A0                                ldi                                     ; .
1272+ FCAF ED A0                                ldi                                     ; .
1273+ FCB1 DD 21 16 E0                          ld      ix,galaxy_data                  ; Generate system seed data for each planet
1274+ FCB5 AF                                   xor		a                               ; .
1275+ FCB6 32 A4 81                             ld		(XSAV),a                        ; .
1276+ FCB9 DD E5        SeedGalaxyLoop:         push    ix                              ; .
1277+ FCBB D1                                   pop     de                              ; .
1278+ FCBC 21 0B 82                             ld      hl,SystemSeed                   ; .
1279+ FCBF CD 37 88                             call    copy_seed                       ; .
1280+ FCC2 DD E5                                push    ix                              ; .
1281+ FCC4 E1                                   pop     hl                              ; .
1282+ FCC5 ED 34 08 00                          add     hl,8                            ; .
1283+ FCC9 E5                                   push    hl                              ; .
1284+ FCCA DD E1                                pop     ix                              ; .
1285+ FCCC CD 6C 88                             call    next_system_seed                ; .
1286+ FCCF 3A A4 81                             ld		a,(XSAV)                        ; .
1287+ FCD2 3D                                   dec		a                               ; .
1288+ FCD3 FE 00                                cp		0                               ; .
1289+ FCD5 C8                                   ret		z                               ; .
1290+ FCD6 32 A4 81                             ld		(XSAV),a                        ; .
1291+ FCD9 18 DE                                jr      SeedGalaxyLoop                  ; .
1292+ FCDB C9                                   ret
1293+ FCDC
1294+ FCDC              GalaxyBankSize   EQU $ - galaxy_page_marker
1295+ FCDC
# file closed: ./Universe/Galaxy/galaxy_data.asm
1054  FCDC                                      DISPLAY "Bank ",BankGalaxyData0," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData0"
1055  FCDC              ; Bank 92  ------------------------------------------------------------------------------------------------------------------------
1056  FCDC                                      SLOT    GalaxyDataAddr
1057  FCDC                                      PAGE    BankGalaxyData1
1058  FCDC                                      ORG GalaxyDataAddr, BankGalaxyData1
1059  E000 FF           GALAXYDATABlock1         DB $FF
1060  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1061  0000                                      DISPLAY "Bank ",BankGalaxyData1," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData1"
1062  0000              ; Bank 93  ------------------------------------------------------------------------------------------------------------------------
1063  0000                                      SLOT    GalaxyDataAddr
1064  0000                                      PAGE    BankGalaxyData2
1065  0000                                      ORG GalaxyDataAddr, BankGalaxyData2
1066  E000 FF           GALAXYDATABlock2        DB $FF
1067  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
1068  0000                                      DISPLAY "Bank ",BankGalaxyData2," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData2"
1069  0000              ; Bank 94  ------------------------------------------------------------------------------------------------------------------------
1070  0000                                      SLOT    GalaxyDataAddr
1071  0000                                      PAGE    BankGalaxyData3
1072  0000                                      ORG GalaxyDataAddr, BankGalaxyData3
1073  E000 FF           GALAXYDATABlock3        DB $FF
1074  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
1075  0000                                      DISPLAY "Bank ",BankGalaxyData3," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData3"
1076  0000              ; Bank 95  ------------------------------------------------------------------------------------------------------------------------
1077  0000                                      SLOT    GalaxyDataAddr
1078  0000                                      PAGE    BankGalaxyData4
1079  0000                                      ORG GalaxyDataAddr, BankGalaxyData4
1080  E000 FF           GALAXYDATABlock4        DB $FF
1081  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
1082  0000                                      DISPLAY "Bank ",BankGalaxyData4," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData4"
1083  0000              ; Bank 96  ------------------------------------------------------------------------------------------------------------------------
1084  0000                                      SLOT    GalaxyDataAddr
1085  0000                                      PAGE    BankGalaxyData5
1086  0000                                      ORG GalaxyDataAddr,BankGalaxyData5
1087  E000 FF           GALAXYDATABlock5        DB $FF
1088  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
1089  0000                                      DISPLAY "Bank ",BankGalaxyData5," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData5"
1090  0000              ; Bank 97  ------------------------------------------------------------------------------------------------------------------------
1091  0000                                      SLOT    GalaxyDataAddr
1092  0000                                      PAGE    BankGalaxyData6
1093  0000                                      ORG GalaxyDataAddr,BankGalaxyData6
1094  E000 FF           GALAXYDATABlock6        DB $FF
1095  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
1096  0000                                      DISPLAY "Bank ",BankGalaxyData6," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData6"
1097  0000              ; Bank 98  ------------------------------------------------------------------------------------------------------------------------
1098  0000                                      SLOT    GalaxyDataAddr
1099  0000                                      PAGE    BankGalaxyData7
1100  0000                                      ORG GalaxyDataAddr,BankGalaxyData7
1101  E000 FF           GALAXYDATABlock7        DB $FF
1102  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
1103  0000                                      DISPLAY "Bank ",BankGalaxyData7," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData7"
1104  0000              ; Bank 99  ------------------------------------------------------------------------------------------------------------------------
1105  0000                                      SLOT    MathsTablesAddr
1106  0000                                      PAGE    BankMathsTables
1107  0000                                      ORG     MathsTablesAddr,BankMathsTables
1108  0000                                      INCLUDE "./Maths/logmaths.asm"
# file opened: ./Maths/logmaths.asm
   1+ 0000 4C 6F 67 4D  logmaths_page_marker    DB "LogMaths   PG99"
   1+ 0004 61 74 68 73
   1+ 0008 20 20 20 50
   1+ 000C 47 39 39
   2+ 000F
   3+ 000F EB           AntiLogHL:              ex      de,hl
   4+ 0010 21 05 07                             ld      hl,LogReverseHighByte
   5+ 0013 01 14 02                             ld      bc,LogReverseTableLen
   6+ 0016 7A                                   ld      a,d
   7+ 0017 ED A1        .SearchLoop:            cpi                                     ; first pass index into high byte
   8+ 0019 28 03                                jr      z,.FoundHighByte
   9+ 001B 23                                   inc     hl
  10+ 001C 18 F9                                jr      .SearchLoop
  11+ 001E 23           .FoundHighByte:         inc     hl                              ; now we have high double it for table of words
  12+ 001F 7E                                   ld      a,(hl)                          ; .
  13+ 0020 21 05 05                             ld      hl,LogTable                     ; .
  14+ 0023 ED 31                                add     hl,a                            ; .
  15+ 0025 ED 31                                add     hl,a                            ; .
  16+ 0027 7A           .LookForLowByteLoop:    ld      a,d                             ; search for low byte or change in high byte
  17+ 0028 BE                                   cp      (hl)
  18+ 0029 20 09                                jr      nz,.SkippedPastHigh
  19+ 002B 23                                   inc     hl
  20+ 002C 7B                                   ld      a,e
  21+ 002D                                      JumpIfAGTENusng (hl), .SkippedPastLow
  21+ 002D BE          >                        cp     (hl)
  21+ 002E D2 35 00    >                        jp		nc,.SkippedPastLow
  22+ 0031 C3 27 00                             jp      .LookForLowByteLoop
  23+ 0034
  24+ 0034 2B           .SkippedPastHigh:       dec     hl                              ; for high we are on next word
  25+ 0035 2B           .SkippedPastLow:        dec     hl                              ; for low we are no next byte
  26+ 0036 EB                                   ex      de,hl                           ; move address to de for subtract
  27+ 0037 21 05 05                             ld      hl,LogTable                     ; subtract from log table address
  28+ 003A                                      ClearCarryFlag
  28+ 003A B7          >                        or a
  29+ 003B ED 52                                sbc     hl,de                           ; so nwo we have nbr of words, i.e anito log * 2
  30+ 003D                                      ShiftHLRight1                           ; now must be >= 255
  30+ 003D CB 3C       >			   srl h
  30+ 003F CB 1D       >			   rr  l
  31+ 0041 7D                                   ld      a,l
  32+ 0042 C9                                   ret
  33+ 0043
  34+ 0043              AEquAmul256DivBLogLT:   JumpIfAIsZero   .ResultIsZero
  34+ 0043 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  34+ 0044 CA 6C 00    >                        jp	    z, .ResultIsZero
  35+ 0047 21 05 05                             ld      hl,LogTable                     ; de = log a
  36+ 004A ED 31                                add     hl,a                            ; .
  37+ 004C ED 31                                add     hl,a                            ; .
  38+ 004E 5E                                   ld      e,(hl)                          ; .
  39+ 004F 23                                   inc     hl                              ; .
  40+ 0050 56                                   ld      d,(hl)                          ; .
  41+ 0051 21 05 05                             ld      hl,LogTable                     ; hl = log b
  42+ 0054 78                                   ld      a,b                             ; .
  43+ 0055 ED 31                                add     hl,a                            ; .
  44+ 0057 ED 31                                add     hl,a                            ; .
  45+ 0059 7E                                   ld      a,(hl)                          ; .
  46+ 005A 23                                   inc     hl                              ; .
  47+ 005B 66                                   ld      h,(hl)                          ; .
  48+ 005C 6F                                   ld      l,a                             ; .
  49+ 005D                                      ClearCarryFlag                          ;
  49+ 005D B7          >                        or a
  50+ 005E EB                                   ex      de,hl                           ; now hl = log a and de = log b
  51+ 005F ED 52                                sbc     hl,de                           ; hl = log a - log b
  52+ 0061 7C                                   ld      a,h                             ; .
  53+ 0062 21 05 03                             ld      hl,AnitLogODDTable               ; hl = anti log (log a - log b)
  54+ 0065 ED 31                                add     hl,a                            ; which is also a / b
  55+ 0067 ED 31                                add     hl,a                            ; .
  56+ 0069 7E                                   ld      a,(hl)                          ; .
  57+ 006A                                      ClearCarryFlag                          ;
  57+ 006A B7          >                        or a
  58+ 006B C9                                   ret
  59+ 006C              .ResultIsZero:          ClearCarryFlag
  59+ 006C B7          >                        or a
  60+ 006D                                      ZeroA
  60+ 006D AF          >                        xor a
  61+ 006E C9                                   ret
  62+ 006F
  63+ 006F              AEquAmul256DivBLog:     JumpIfAIsZero   .ResultIsZero
  63+ 006F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  63+ 0070 CA A6 00    >                        jp	    z, .ResultIsZero
  64+ 0073                                      JumpIfAGTENusng d, AEquAmul256DivBLogLT
  64+ 0073 BA          >                        cp     d
  64+ 0074 D2 43 00    >                        jp		nc,AEquAmul256DivBLogLT
  65+ 0077 21 05 05                             ld      hl,LogTable                     ; de = log a
  66+ 007A ED 31                                add     hl,a                            ; .
  67+ 007C ED 31                                add     hl,a                            ; .
  68+ 007E 5E                                   ld      e,(hl)                          ; .
  69+ 007F 23                                   inc     hl                              ; .
  70+ 0080 56                                   ld      d,(hl)                          ; .
  71+ 0081 21 05 05                             ld      hl,LogTable                     ; hl = log b
  72+ 0084 78                                   ld      a,b                             ; .
  73+ 0085 ED 31                                add     hl,a                            ; .
  74+ 0087 ED 31                                add     hl,a                            ; .
  75+ 0089 7E                                   ld      a,(hl)                          ; .
  76+ 008A 23                                   inc     hl                              ; .
  77+ 008B 66                                   ld      h,(hl)                          ; .
  78+ 008C 6F                                   ld      l,a                             ; .
  79+ 008D                                      ClearCarryFlag                          ;
  79+ 008D B7          >                        or a
  80+ 008E EB                                   ex      de,hl                           ; now hl = log a and de = log b
  81+ 008F ED 52                                sbc     hl,de                           ; hl = log a - log b
  82+ 0091 38 0B                                jr      c,.ResultIsOne                  ; .
  83+ 0093 7C                                   ld      a,h                             ; .
  84+ 0094 21 05 01                             ld      hl,AntiLogTable                 ; hl = anti log (log a - log b)
  85+ 0097 ED 31                                add     hl,a                            ; which is also a / b
  86+ 0099 ED 31                                add     hl,a                            ; .
  87+ 009B 7E                                   ld      a,(hl)                          ; .
  88+ 009C                                      ClearCarryFlag                          ;
  88+ 009C B7          >                        or a
  89+ 009D C9                                   ret
  90+ 009E              .ResultIsOne:           ClearCarryFlag
  90+ 009E B7          >                        or a
  91+ 009F 3E FF                                ld      a,$FF
  92+ 00A1 C9                                   ret
  93+ 00A2              .ResultIsInfinte:       SetCarryFlag
  93+ 00A2 37          >                        scf
  94+ 00A3 3E FF                                ld      a,$FF
  95+ 00A5 C9                                   ret
  96+ 00A6              .ResultIsZero:          ClearCarryFlag
  96+ 00A6 B7          >                        or a
  97+ 00A7 C9                                   ret
  98+ 00A8
  99+ 00A8              AEquAmul256Div197LogLT: JumpIfAIsZero   .ResultIsZero
  99+ 00A8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  99+ 00A9 CA C8 00    >                        jp	    z, .ResultIsZero
 100+ 00AC 21 05 05                             ld      hl,LogTable                     ; point to log a in LogTable
 101+ 00AF ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 102+ 00B1 ED 31                                add     hl,a
 103+ 00B3 5E                                   ld      e,(hl)                          ; de = log a
 104+ 00B4 23                                   inc     hl                              ; .
 105+ 00B5 56                                   ld      d,(hl)                          ; .
 106+ 00B6 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 107+ 00B9                                      ClearCarryFlag
 107+ 00B9 B7          >                        or a
 108+ 00BA EB                                   ex      hl,de                           ; hl = log a, de = log 197
 109+ 00BB ED 52                                sbc     hl,de
 110+ 00BD 7C                                   ld      a,h
 111+ 00BE 21 05 03                             ld      hl,AnitLogODDTable
 112+ 00C1 ED 31                                add     hl,a
 113+ 00C3 ED 31                                add     hl,a
 114+ 00C5 7E                                   ld      a,(hl)
 115+ 00C6                                      ClearCarryFlag
 115+ 00C6 B7          >                        or a
 116+ 00C7 C9                                   ret
 117+ 00C8              .ResultIsZero:          ClearCarryFlag
 117+ 00C8 B7          >                        or a
 118+ 00C9                                      ZeroA
 118+ 00C9 AF          >                        xor a
 119+ 00CA C9                                   ret
 120+ 00CB
 121+ 00CB
 122+ 00CB              AEquAmul256Div197Log:   JumpIfAIsZero   .ResultIsZero
 122+ 00CB A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 122+ 00CC CA F5 00    >                        jp	    z, .ResultIsZero
 123+ 00CF                                      JumpIfAGTENusng d, AEquAmul256Div197LogLT
 123+ 00CF BA          >                        cp     d
 123+ 00D0 D2 A8 00    >                        jp		nc,AEquAmul256Div197LogLT
 124+ 00D3 21 05 05                             ld      hl,LogTable                     ; point to log a in LogTable
 125+ 00D6 ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 126+ 00D8 ED 31                                add     hl,a
 127+ 00DA 5E                                   ld      e,(hl)                          ; de = log a
 128+ 00DB 23                                   inc     hl                              ; .
 129+ 00DC 56                                   ld      d,(hl)                          ; .
 130+ 00DD 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 131+ 00E0                                      ClearCarryFlag
 131+ 00E0 B7          >                        or a
 132+ 00E1 EB                                   ex      hl,de                           ; hl = log a, de = log 197
 133+ 00E2 ED 52                                sbc     hl,de
 134+ 00E4 38 0B                                jr      c,.ResultIsOne
 135+ 00E6 7C                                   ld      a,h
 136+ 00E7 21 05 01                             ld      hl,AntiLogTable
 137+ 00EA ED 31                                add     hl,a
 138+ 00EC ED 31                                add     hl,a
 139+ 00EE 7E                                   ld      a,(hl)
 140+ 00EF                                      ClearCarryFlag
 140+ 00EF B7          >                        or a
 141+ 00F0 C9                                   ret
 142+ 00F1              .ResultIsOne:           ClearCarryFlag
 142+ 00F1 B7          >                        or a
 143+ 00F2 3E FF                                ld      a,$FF
 144+ 00F4 C9                                   ret
 145+ 00F5              .ResultIsZero:          ClearCarryFlag
 145+ 00F5 B7          >                        or a
 146+ 00F6 C9                                   ret
 147+ 00F7
 148+ 00F7              AEquAmul256Div197LogSignA:
 149+ 00F7 FD 67                                ld      iyh,a
 150+ 00F9                                      ClearSignBitA
 150+ 00F9 E6 7F       >                        and     SignMask8Bit
 151+ 00FB CD CB 00                             call    AEquAmul256Div197Log
 152+ 00FE 47                                   ld      b,a
 153+ 00FF FD 7C                                ld      a,iyh
 154+ 0101                                      SignBitOnlyA
 154+ 0101 E6 80       >                        and     SignOnly8Bit
 155+ 0103 B0                                   or      b
 156+ 0104 C9                                   ret
# file closed: ./Maths/logmaths.asm
1109  0105                                      INCLUDE "./Tables/antilogtable.asm"
# file opened: ./Tables/antilogtable.asm
   1+ 0105 01 00 01 00  AntiLogTable:           DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
   1+ 0109 01 00 01 00
   1+ 010D 01 00 01 00
   1+ 0111 01 00 01 00
   1+ 0115 01 00 01 00
   1+ 0119 01 00 01 00
   1+ 011D 01 00 01 00
   1+ 0121 01 00 01 00
   2+ 0125 01 00 01 00                          DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
   2+ 0129 01 00 01 00
   2+ 012D 01 00 01 00
   2+ 0131 01 00 01 00
   2+ 0135 01 00 01 00
   2+ 0139 01 00 01 00
   2+ 013D 01 00 01 00
   2+ 0141 01 00 01 00
   3+ 0145 02 00 02 00                          DW $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
   3+ 0149 02 00 02 00
   3+ 014D 02 00 02 00
   3+ 0151 02 00 02 00
   3+ 0155 02 00 02 00
   3+ 0159 02 00 02 00
   3+ 015D 02 00 02 00
   3+ 0161 02 00 02 00
   4+ 0165 02 00 02 00                          DW $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03
   4+ 0169 02 00 03 00
   4+ 016D 03 00 03 00
   4+ 0171 03 00 03 00
   4+ 0175 03 00 03 00
   4+ 0179 03 00 03 00
   4+ 017D 03 00 03 00
   4+ 0181 03 00 03 00
   5+ 0185 04 00 04 00                          DW $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $05, $05, $05, $05, $05
   5+ 0189 04 00 04 00
   5+ 018D 04 00 04 00
   5+ 0191 04 00 04 00
   5+ 0195 04 00 04 00
   5+ 0199 04 00 05 00
   5+ 019D 05 00 05 00
   5+ 01A1 05 00 05 00
   6+ 01A5 05 00 05 00                          DW $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $07, $07, $07, $07, $07, $07
   6+ 01A9 05 00 06 00
   6+ 01AD 06 00 06 00
   6+ 01B1 06 00 06 00
   6+ 01B5 06 00 06 00
   6+ 01B9 07 00 07 00
   6+ 01BD 07 00 07 00
   6+ 01C1 07 00 07 00
   7+ 01C5 08 00 08 00                          DW $08, $08, $08, $08, $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A, $0B
   7+ 01C9 08 00 08 00
   7+ 01CD 08 00 08 00
   7+ 01D1 09 00 09 00
   7+ 01D5 09 00 09 00
   7+ 01D9 09 00 0A 00
   7+ 01DD 0A 00 0A 00
   7+ 01E1 0A 00 0B 00
   8+ 01E5 0B 00 0B 00                          DW $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0D, $0D, $0D, $0E, $0E, $0E, $0E, $0F, $0F
   8+ 01E9 0B 00 0C 00
   8+ 01ED 0C 00 0C 00
   8+ 01F1 0C 00 0D 00
   8+ 01F5 0D 00 0D 00
   8+ 01F9 0E 00 0E 00
   8+ 01FD 0E 00 0E 00
   8+ 0201 0F 00 0F 00
   9+ 0205 10 00 10 00                          DW $10, $10, $10, $11, $11, $11, $12, $12, $13, $13, $13, $14, $14, $15, $15, $16
   9+ 0209 10 00 11 00
   9+ 020D 11 00 11 00
   9+ 0211 12 00 12 00
   9+ 0215 13 00 13 00
   9+ 0219 13 00 14 00
   9+ 021D 14 00 15 00
   9+ 0221 15 00 16 00
  10+ 0225 16 00 17 00                          DW $16, $17, $17, $18, $18, $19, $19, $1A, $1A, $1B, $1C, $1C, $1D, $1D, $1E, $1F
  10+ 0229 17 00 18 00
  10+ 022D 18 00 19 00
  10+ 0231 19 00 1A 00
  10+ 0235 1A 00 1B 00
  10+ 0239 1C 00 1C 00
  10+ 023D 1D 00 1D 00
  10+ 0241 1E 00 1F 00
  11+ 0245 20 00 20 00                          DW $20, $20, $21, $22, $22, $23, $24, $25, $26, $26, $27, $28, $29, $2A, $2B, $2C
  11+ 0249 21 00 22 00
  11+ 024D 22 00 23 00
  11+ 0251 24 00 25 00
  11+ 0255 26 00 26 00
  11+ 0259 27 00 28 00
  11+ 025D 29 00 2A 00
  11+ 0261 2B 00 2C 00
  12+ 0265 2D 00 2E 00                          DW $2D, $2E, $2F, $30, $31, $32, $33, $34, $35, $36, $38, $39, $3A, $3B, $3D, $3E
  12+ 0269 2F 00 30 00
  12+ 026D 31 00 32 00
  12+ 0271 33 00 34 00
  12+ 0275 35 00 36 00
  12+ 0279 38 00 39 00
  12+ 027D 3A 00 3B 00
  12+ 0281 3D 00 3E 00
  13+ 0285 40 00 41 00                          DW $40, $41, $42, $44, $45, $47, $48, $4A, $4C, $4D, $4F, $51, $52, $54, $56, $58
  13+ 0289 42 00 44 00
  13+ 028D 45 00 47 00
  13+ 0291 48 00 4A 00
  13+ 0295 4C 00 4D 00
  13+ 0299 4F 00 51 00
  13+ 029D 52 00 54 00
  13+ 02A1 56 00 58 00
  14+ 02A5 5A 00 5C 00                          DW $5A, $5C, $5E, $60, $62, $64, $67, $69, $6B, $6D, $70, $72, $75, $77, $7A, $7D
  14+ 02A9 5E 00 60 00
  14+ 02AD 62 00 64 00
  14+ 02B1 67 00 69 00
  14+ 02B5 6B 00 6D 00
  14+ 02B9 70 00 72 00
  14+ 02BD 75 00 77 00
  14+ 02C1 7A 00 7D 00
  15+ 02C5 80 00 82 00                          DW $80, $82, $85, $88, $8B, $8E, $91, $94, $98, $9B, $9E, $A2, $A5, $A9, $AD, $B1
  15+ 02C9 85 00 88 00
  15+ 02CD 8B 00 8E 00
  15+ 02D1 91 00 94 00
  15+ 02D5 98 00 9B 00
  15+ 02D9 9E 00 A2 00
  15+ 02DD A5 00 A9 00
  15+ 02E1 AD 00 B1 00
  16+ 02E5 B5 00 B8 00                          DW $B5, $B8, $BD, $C1, $C5, $C9, $CE, $D2, $D7, $DB, $E0, $E5, $EA, $EF, $F5, $FA
  16+ 02E9 BD 00 C1 00
  16+ 02ED C5 00 C9 00
  16+ 02F1 CE 00 D2 00
  16+ 02F5 D7 00 DB 00
  16+ 02F9 E0 00 E5 00
  16+ 02FD EA 00 EF 00
  16+ 0301 F5 00 FA 00
  17+ 0305
  18+ 0305 01 00 01 00  AnitLogODDTable:        DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ;  0 - 15
  18+ 0309 01 00 01 00
  18+ 030D 01 00 01 00
  18+ 0311 01 00 01 00
  18+ 0315 01 00 01 00
  18+ 0319 01 00 01 00
  18+ 031D 01 00 01 00
  18+ 0321 01 00 01 00
  19+ 0325 01 00 01 00                          DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 16 - 31
  19+ 0329 01 00 01 00
  19+ 032D 01 00 01 00
  19+ 0331 01 00 01 00
  19+ 0335 01 00 01 00
  19+ 0339 01 00 01 00
  19+ 033D 01 00 01 00
  19+ 0341 01 00 01 00
  20+ 0345 02 00 02 00                          DW $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 32 - 47
  20+ 0349 02 00 02 00
  20+ 034D 02 00 02 00
  20+ 0351 02 00 02 00
  20+ 0355 02 00 02 00
  20+ 0359 02 00 02 00
  20+ 035D 02 00 02 00
  20+ 0361 02 00 02 00
  21+ 0365 02 00 02 00                          DW $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 48 - 55
  21+ 0369 02 00 03 00
  21+ 036D 03 00 03 00
  21+ 0371 03 00 03 00
  21+ 0375 03 00 03 00
  21+ 0379 03 00 03 00
  21+ 037D 03 00 03 00
  21+ 0381 03 00 03 00
  22+ 0385 04 00 04 00                          DW $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $05, $05, $05, $05, $05, $05 ; 64 - 71
  22+ 0389 04 00 04 00
  22+ 038D 04 00 04 00
  22+ 0391 04 00 04 00
  22+ 0395 04 00 04 00
  22+ 0399 05 00 05 00
  22+ 039D 05 00 05 00
  22+ 03A1 05 00 05 00
  23+ 03A5 05 00 05 00                          DW $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $07, $07, $07, $07, $07, $07 ; 80 - 87
  23+ 03A9 05 00 06 00
  23+ 03AD 06 00 06 00
  23+ 03B1 06 00 06 00
  23+ 03B5 06 00 06 00
  23+ 03B9 07 00 07 00
  23+ 03BD 07 00 07 00
  23+ 03C1 07 00 07 00
  24+ 03C5 08 00 08 00                          DW $08, $08, $08, $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A, $0A, $0B ; 96 -
  24+ 03C9 08 00 08 00
  24+ 03CD 08 00 09 00
  24+ 03D1 09 00 09 00
  24+ 03D5 09 00 09 00
  24+ 03D9 0A 00 0A 00
  24+ 03DD 0A 00 0A 00
  24+ 03E1 0A 00 0B 00
  25+ 03E5 0B 00 0B 00                          DW $0B, $0B, $0B, $0C, $0C, $0C, $0D, $0D, $0D, $0D, $0E, $0E, $0E, $0F, $0F, $0F ; 112
  25+ 03E9 0B 00 0C 00
  25+ 03ED 0C 00 0C 00
  25+ 03F1 0D 00 0D 00
  25+ 03F5 0D 00 0D 00
  25+ 03F9 0E 00 0E 00
  25+ 03FD 0E 00 0F 00
  25+ 0401 0F 00 0F 00
  26+ 0405 10 00 10 00                          DW $10, $10, $10, $11, $11, $12, $12, $12, $13, $13, $14, $14, $14, $15, $15, $16 ; 128
  26+ 0409 10 00 11 00
  26+ 040D 11 00 12 00
  26+ 0411 12 00 12 00
  26+ 0415 13 00 13 00
  26+ 0419 14 00 14 00
  26+ 041D 14 00 15 00
  26+ 0421 15 00 16 00
  27+ 0425 16 00 17 00                          DW $16, $17, $17, $18, $18, $19, $1A, $1A, $1B, $1B, $1C, $1D, $1D, $1E, $1E, $1F ; 144
  27+ 0429 17 00 18 00
  27+ 042D 18 00 19 00
  27+ 0431 1A 00 1A 00
  27+ 0435 1B 00 1B 00
  27+ 0439 1C 00 1D 00
  27+ 043D 1D 00 1E 00
  27+ 0441 1E 00 1F 00
  28+ 0445 20 00 21 00                          DW $20, $21, $21, $22, $23, $24, $24, $25, $26, $27, $28, $29, $29, $2A, $2B, $2C ; 160
  28+ 0449 21 00 22 00
  28+ 044D 23 00 24 00
  28+ 0451 24 00 25 00
  28+ 0455 26 00 27 00
  28+ 0459 28 00 29 00
  28+ 045D 29 00 2A 00
  28+ 0461 2B 00 2C 00
  29+ 0465 2D 00 2E 00                          DW $2D, $2E, $2F, $30, $31, $32, $34, $35, $36, $37, $38, $3A, $3B, $3C, $3D, $3F ; 176
  29+ 0469 2F 00 30 00
  29+ 046D 31 00 32 00
  29+ 0471 34 00 35 00
  29+ 0475 36 00 37 00
  29+ 0479 38 00 3A 00
  29+ 047D 3B 00 3C 00
  29+ 0481 3D 00 3F 00
  30+ 0485 40 00 42 00                          DW $40, $42, $43, $45, $46, $48, $49, $4B, $4C, $4E, $50, $52, $53, $55, $57, $59 ; 192
  30+ 0489 43 00 45 00
  30+ 048D 46 00 48 00
  30+ 0491 49 00 4B 00
  30+ 0495 4C 00 4E 00
  30+ 0499 50 00 52 00
  30+ 049D 53 00 55 00
  30+ 04A1 57 00 59 00
  31+ 04A5 5B 00 5D 00                          DW $5B, $5D, $5F, $61, $63, $65, $68, $6A, $6C, $6F, $71, $74, $76, $79, $7B, $7E ; 208
  31+ 04A9 5F 00 61 00
  31+ 04AD 63 00 65 00
  31+ 04B1 68 00 6A 00
  31+ 04B5 6C 00 6F 00
  31+ 04B9 71 00 74 00
  31+ 04BD 76 00 79 00
  31+ 04C1 7B 00 7E 00
  32+ 04C5 81 00 84 00                          DW $81, $84, $87, $8A, $8D, $90, $93, $96, $99, $9D, $A0, $A4, $A7, $AB, $AF, $B3 ; 224
  32+ 04C9 87 00 8A 00
  32+ 04CD 8D 00 90 00
  32+ 04D1 93 00 96 00
  32+ 04D5 99 00 9D 00
  32+ 04D9 A0 00 A4 00
  32+ 04DD A7 00 AB 00
  32+ 04E1 AF 00 B3 00
  33+ 04E5 B6 00 BA 00                          DW $B6, $BA, $BF, $C3, $C7, $CB, $D0, $D4, $D9, $DE, $E3, $E8, $ED, $F2, $F7, $FD ; 240 - 255
  33+ 04E9 BF 00 C3 00
  33+ 04ED C7 00 CB 00
  33+ 04F1 D0 00 D4 00
  33+ 04F5 D9 00 DE 00
  33+ 04F9 E3 00 E8 00
  33+ 04FD ED 00 F2 00
  33+ 0501 F7 00 FD 00
  34+ 0505
# file closed: ./Tables/antilogtable.asm
1110  0505                                      INCLUDE "./Tables/logtable.asm"
# file opened: ./Tables/logtable.asm
   1+ 0505 00 00        LogTable:               DW $0000                                                            ; 0
   2+ 0507 00 00 06 20                          DW $0000, $2006, $320F, $400D, $4AEC, $5216, $59C2, $6013           ; 8
   2+ 050B 0F 32 0D 40
   2+ 050F EC 4A 16 52
   2+ 0513 C2 59 13 60
   3+ 0517 1E 65 F2 6A                          DW $651E, $6AF2, $6E9A, $721C, $7680, $79C9, $7DFB, $801A           ; 16
   3+ 051B 9A 6E 1C 72
   3+ 051F 80 76 C9 79
   3+ 0523 FB 7D 1A 80
   4+ 0527 27 82 25 85                          DW $8227, $8525, $8715, $8AF9, $8CD2, $8EA0, $9066, $9223           ; 24
   4+ 052B 15 87 F9 8A
   4+ 052F D2 8C A0 8E
   4+ 0533 66 90 23 92
   5+ 0537 D8 94 86 96                          DW $94D8, $9686, $982E, $99CF, $9B6B, $9D02, $9E93, $A020           ; 32
   5+ 053B 2E 98 CF 99
   5+ 053F 6B 9B 02 9D
   5+ 0543 93 9E 20 A0
   6+ 0547 A9 A1 2E A2                          DW $A1A9, $A22E, $A4AE, $A52C, $A6A5, $A71C, $A98F, $AA00           ; 40
   6+ 054B AE A4 2C A5
   6+ 054F A5 A6 1C A7
   6+ 0553 8F A9 00 AA
   7+ 0557 6D AB D8 AC                          DW $AB6D, $ACD8, $AD41, $AEA7, $AF0B, $B06C, $B1CC, $B229           ; 48
   7+ 055B 41 AD A7 AE
   7+ 055F 0B AF 6C B0
   7+ 0563 CC B1 29 B2
   8+ 0567 85 B3 DF B4                          DW $B385, $B4DF, $B537, $B68D, $B7E1, $B834, $B986, $B9D6           ; 56
   8+ 056B 37 B5 8D B6
   8+ 056F E1 B7 34 B8
   8+ 0573 86 B9 D6 B9
   9+ 0577 25 BA 72 BB                          DW $BA25, $BB72, $BCBE, $BD08, $BD52, $BE9A, $BFE1, $C027           ; 64
   9+ 057B BE BC 08 BD
   9+ 057F 52 BD 9A BE
   9+ 0583 E1 BF 27 C0
  10+ 0587 6C C0 B0 C1                          DW $C06C, $C1B0, $C2F2, $C234, $C375, $C4B5, $C4F4, $C532           ; 72
  10+ 058B F2 C2 34 C2
  10+ 058F 75 C3 B5 C4
  10+ 0593 F4 C4 32 C5
  11+ 0597 6F C6 AC C6                          DW $C66F, $C6AC, $C7E7, $C722, $C85C, $C996, $C9CE, $CA06           ; 80
  11+ 059B E7 C7 22 C7
  11+ 059F 5C C8 96 C9
  11+ 05A3 CE C9 06 CA
  12+ 05A7 3D CA 74 CB                          DW $CA3D, $CB74, $CCAA, $CCDF, $CD13, $CD47, $CE7B, $CEAD           ; 88
  12+ 05AB AA CC DF CC
  12+ 05AF 13 CD 47 CD
  12+ 05B3 7B CE AD CE
  13+ 05B7 E0 CF 11 CF                          DW $CFE0, $CF11, $D042, $D073, $D1A3, $D1D2, $D201, $D230           ; 96
  13+ 05BB 42 D0 73 D0
  13+ 05BF A3 D1 D2 D1
  13+ 05C3 01 D2 30 D2
  14+ 05C7 5E D3 8B D3                          DW $D35E, $D38B, $D4B9, $D4E5, $D511, $D53D, $D568, $D693           ; 104
  14+ 05CB B9 D4 E5 D4
  14+ 05CF 11 D5 3D D5
  14+ 05D3 68 D5 93 D6
  15+ 05D7 BE D6 E8 D7                          DW $D6BE, $D7E8, $D712, $D83B, $D864, $D98C, $D9B5, $D9DD           ; 112
  15+ 05DB 12 D7 3B D8
  15+ 05DF 64 D8 8C D9
  15+ 05E3 B5 D9 DD D9
  16+ 05E7 04 DA 2B DA                          DW $DA04, $DA2B, $DB52, $DB78, $DB9E, $DCC4, $DCEA, $DD0F           ; 120
  16+ 05EB 52 DB 78 DB
  16+ 05EF 9E DB C4 DC
  16+ 05F3 EA DC 0F DD
  17+ 05F7 34 DD 58 DD                          DW $DD34, $DD58, $DE7D, $DEA1, $DEC4, $DFE8, $DF0B, $E02E           ; 128
  17+ 05FB 7D DE A1 DE
  17+ 05FF C4 DE E8 DF
  17+ 0603 0B DF 2E E0
  18+ 0607 50 E0 72 E0                          DW $E050, $E072, $E194, $E1B6, $E1D8, $E2F9, $E21A, $E23B           ; 136
  18+ 060B 94 E1 B6 E1
  18+ 060F D8 E1 F9 E2
  18+ 0613 1A E2 3B E2
  19+ 0617 5B E3 7C E3                          DW $E35B, $E37C, $E39C, $E4BC, $E4DB, $E4FB, $E51A, $E539           ; 144
  19+ 061B 9C E3 BC E4
  19+ 061F DB E4 FB E4
  19+ 0623 1A E5 39 E5
  20+ 0627 57 E5 76 E6                          DW $E557, $E676, $E694, $E6B2, $E7D0, $E7EE, $E70C, $E729           ; 152
  20+ 062B 94 E6 B2 E6
  20+ 062F D0 E7 EE E7
  20+ 0633 0C E7 29 E7
  21+ 0637 46 E8 63 E8                          DW $E846, $E863, $E880, $E99C, $E9B9, $E9D5, $EAF1, $EA0D           ; 160
  21+ 063B 80 E8 9C E9
  21+ 063F B9 E9 D5 E9
  21+ 0643 F1 EA 0D EA
  22+ 0647 28 EA 44 EA                          DW $EA28, $EA44, $EB5F, $EB7A, $EB95, $ECB0, $ECCB, $ECE5           ; 168
  22+ 064B 5F EB 7A EB
  22+ 064F 95 EB B0 EC
  22+ 0653 CB EC E5 EC
  23+ 0657 00 EC 1A ED                          DW $EC00, $ED1A, $ED34, $ED4E, $ED68, $EE81, $EE9B, $EEB4           ; 176
  23+ 065B 34 ED 4E ED
  23+ 065F 68 ED 81 EE
  23+ 0663 9B EE B4 EE
  24+ 0667 CD EE E6 EF                          DW $EECD, $EFE6, $EFFF, $EF18, $EF30, $F049, $F061, $F079           ; 184
  24+ 066B FF EF 18 EF
  24+ 066F 30 EF 49 F0
  24+ 0673 61 F0 79 F0
  25+ 0677 91 F1 A9 F1                          DW $F191, $F1A9, $F1C1, $F1D9, $F1F0, $F208, $F21F, $F236           ; 192
  25+ 067B C1 F1 D9 F1
  25+ 067F F0 F1 08 F2
  25+ 0683 1F F2 36 F2
  26+ 0687 4E F2 64 F3                          DW $F24E, $F364, $F37B, $F392, $F3A9, $F4BF, $F4D5, $F4EC           ; 200
  26+ 068B 7B F3 92 F3
  26+ 068F A9 F3 BF F4
  26+ 0693 D5 F4 EC F4
  27+ 0697 02 F4 18 F5                          DW $F402, $F518, $F52E, $F544, $F559, $F56F, $F685, $F69A           ; 208
  27+ 069B 2E F5 44 F5
  27+ 069F 59 F5 6F F5
  27+ 06A3 85 F6 9A F6
  28+ 06A7 AF F6 C4 F6                          DW $F6AF, $F6C4, $F7DA, $F7EF, $F703, $F718, $F72D, $F842           ; 216
  28+ 06AB DA F7 EF F7
  28+ 06AF 03 F7 18 F7
  28+ 06B3 2D F7 42 F8
  29+ 06B7 56 F8 6B F8                          DW $F856, $F86B, $F87F, $F993, $F9A7, $F9BB, $F9CF, $F9E3           ; 224
  29+ 06BB 7F F8 93 F9
  29+ 06BF A7 F9 BB F9
  29+ 06C3 CF F9 E3 F9
  30+ 06C7 F7 FA 0B FA                          DW $FAF7, $FA0B, $FA1E, $FA32, $FA45, $FB58, $FB6C, $FB7F           ; 232
  30+ 06CB 1E FA 32 FA
  30+ 06CF 45 FA 58 FB
  30+ 06D3 6C FB 7F FB
  31+ 06D7 92 FB A5 FB                          DW $FB92, $FBA5, $FCB8, $FCCB, $FCDE, $FCF0, $FC03, $FD16           ; 240
  31+ 06DB B8 FC CB FC
  31+ 06DF DE FC F0 FC
  31+ 06E3 03 FC 16 FD
  32+ 06E7 28 FD 3A FD                          DW $FD28, $FD3A, $FD4D, $FD5F, $FD71, $FE83, $FE95, $FEA7           ; 248
  32+ 06EB 4D FD 5F FD
  32+ 06EF 71 FD 83 FE
  32+ 06F3 95 FE A7 FE
  33+ 06F7 B9 FE CB FE                          DW $FEB9, $FECB, $FFDD, $FFEE, $FF00, $FF11, $FF23                  ; 255
  33+ 06FB DD FF EE FF
  33+ 06FF 00 FF 11 FF
  33+ 0703 23 FF
  34+ 0705
  35+ 0705 00 00 00 00  LogReverseHighByte:     DW $00, 000, $20, 002, $32, 003, $40, 004, $4A, 005, $52, 006
  35+ 0709 20 00 02 00
  35+ 070D 32 00 03 00
  35+ 0711 40 00 04 00
  35+ 0715 4A 00 05 00
  35+ 0719 52 00 06 00
  36+ 071D 59 00 07 00                          DW $59, 007, $60, 008, $65, 009, $6A, 010, $6E, 011, $72, 012
  36+ 0721 60 00 08 00
  36+ 0725 65 00 09 00
  36+ 0729 6A 00 0A 00
  36+ 072D 6E 00 0B 00
  36+ 0731 72 00 0C 00
  37+ 0735 76 00 0D 00                          DW $76, 013, $79, 014, $7D, 015, $80, 016, $82, 017, $85, 018
  37+ 0739 79 00 0E 00
  37+ 073D 7D 00 0F 00
  37+ 0741 80 00 10 00
  37+ 0745 82 00 11 00
  37+ 0749 85 00 12 00
  38+ 074D 87 00 13 00                          DW $87, 019, $8A, 020, $8C, 021, $8E, 022, $90, 023, $92, 024
  38+ 0751 8A 00 14 00
  38+ 0755 8C 00 15 00
  38+ 0759 8E 00 16 00
  38+ 075D 90 00 17 00
  38+ 0761 92 00 18 00
  39+ 0765 94 00 19 00                          DW $94, 025, $96, 026, $98, 027, $99, 028, $9B, 029, $9D, 030
  39+ 0769 96 00 1A 00
  39+ 076D 98 00 1B 00
  39+ 0771 99 00 1C 00
  39+ 0775 9B 00 1D 00
  39+ 0779 9D 00 1E 00
  40+ 077D 9E 00 1F 00                          DW $9E, 031, $A0, 032, $A1, 033, $A2, 034, $A4, 035, $A5, 036
  40+ 0781 A0 00 20 00
  40+ 0785 A1 00 21 00
  40+ 0789 A2 00 22 00
  40+ 078D A4 00 23 00
  40+ 0791 A5 00 24 00
  41+ 0795 A6 00 25 00                          DW $A6, 037, $A7, 038, $A9, 039, $AA, 040, $AB, 041, $AC, 042
  41+ 0799 A7 00 26 00
  41+ 079D A9 00 27 00
  41+ 07A1 AA 00 28 00
  41+ 07A5 AB 00 29 00
  41+ 07A9 AC 00 2A 00
  42+ 07AD AD 00 2B 00                          DW $AD, 043, $AE, 044, $AF, 045, $B0, 046, $B1, 047, $B2, 048
  42+ 07B1 AE 00 2C 00
  42+ 07B5 AF 00 2D 00
  42+ 07B9 B0 00 2E 00
  42+ 07BD B1 00 2F 00
  42+ 07C1 B2 00 30 00
  43+ 07C5 B3 00 31 00                          DW $B3, 049, $B4, 050, $B5, 051, $B6, 052, $B7, 053, $B8, 054
  43+ 07C9 B4 00 32 00
  43+ 07CD B5 00 33 00
  43+ 07D1 B6 00 34 00
  43+ 07D5 B7 00 35 00
  43+ 07D9 B8 00 36 00
  44+ 07DD B9 00 38 00                          DW $B9, 056, $B9, 056, $BA, 057, $BB, 058, $BC, 059, $BD, 060
  44+ 07E1 B9 00 38 00
  44+ 07E5 BA 00 39 00
  44+ 07E9 BB 00 3A 00
  44+ 07ED BC 00 3B 00
  44+ 07F1 BD 00 3C 00
  45+ 07F5 BE 00 3E 00                          DW $BE, 062, $BF, 063, $C0, 064, $C1, 066, $C2, 067, $C3, 069
  45+ 07F9 BF 00 3F 00
  45+ 07FD C0 00 40 00
  45+ 0801 C1 00 42 00
  45+ 0805 C2 00 43 00
  45+ 0809 C3 00 45 00
  46+ 080D C4 00 46 00                          DW $C4, 070, $C5, 072, $C6, 072, $C7, 074, $C8, 076, $C9, 077
  46+ 0811 C5 00 48 00
  46+ 0815 C6 00 48 00
  46+ 0819 C7 00 4A 00
  46+ 081D C8 00 4C 00
  46+ 0821 C9 00 4D 00
  47+ 0825 CA 00 50 00                          DW $CA, 080, $CB, 082, $CC, 083, $CD, 085, $CE, 087, $CF, 088
  47+ 0829 CB 00 52 00
  47+ 082D CC 00 53 00
  47+ 0831 CD 00 55 00
  47+ 0835 CE 00 57 00
  47+ 0839 CF 00 58 00
  48+ 083D D0 00 5A 00                          DW $D0, 090, $D1, 092, $D2, 094, $D3, 097, $D4, 100, $D5, 102
  48+ 0841 D1 00 5C 00
  48+ 0845 D2 00 5E 00
  48+ 0849 D3 00 61 00
  48+ 084D D4 00 64 00
  48+ 0851 D5 00 66 00
  49+ 0855 D6 00 68 00                          DW $D6, 104, $D6, 105, $D7, 106, $D7, 107, $D8, 108, $D8, 109
  49+ 0859 D6 00 69 00
  49+ 085D D7 00 6A 00
  49+ 0861 D7 00 6B 00
  49+ 0865 D8 00 6C 00
  49+ 0869 D8 00 6D 00
  50+ 086D D9 00 6E 00                          DW $D9, 110, $D9, 111, $D9, 112, $DA, 113, $DB, 114, $DC, 117
  50+ 0871 D9 00 6F 00
  50+ 0875 D9 00 70 00
  50+ 0879 DA 00 71 00
  50+ 087D DB 00 72 00
  50+ 0881 DC 00 75 00
  51+ 0885 DD 00 78 00                          DW $DD, 120, $DE, 123, $DF, 126, $E0, 128, $E1, 131, $E2, 134
  51+ 0889 DE 00 7B 00
  51+ 088D DF 00 7E 00
  51+ 0891 E0 00 80 00
  51+ 0895 E1 00 83 00
  51+ 0899 E2 00 86 00
  52+ 089D E3 00 89 00                          DW $E3, 137, $E4, 140, $E5, 143, $E6, 146, $E7, 149, $E8, 153
  52+ 08A1 E4 00 8C 00
  52+ 08A5 E5 00 8F 00
  52+ 08A9 E6 00 92 00
  52+ 08AD E7 00 95 00
  52+ 08B1 E8 00 99 00
  53+ 08B5 E9 00 9C 00                          DW $E9, 156, $EA, 159, $EB, 163, $EC, 166, $ED, 170, $EE, 174
  53+ 08B9 EA 00 9F 00
  53+ 08BD EB 00 A3 00
  53+ 08C1 EC 00 A6 00
  53+ 08C5 ED 00 AA 00
  53+ 08C9 EE 00 AE 00
  54+ 08CD EF 00 B2 00                          DW $EF, 178, $F0, 182, $F1, 185, $F2, 190, $F3, 194, $F4, 198
  54+ 08D1 F0 00 B6 00
  54+ 08D5 F1 00 B9 00
  54+ 08D9 F2 00 BE 00
  54+ 08DD F3 00 C2 00
  54+ 08E1 F4 00 C6 00
  55+ 08E5 F5 00 CA 00                          DW $F5, 202, $F6, 207, $F7, 211, $F8, 216, $F8, 217, $F9, 220
  55+ 08E9 F6 00 CF 00
  55+ 08ED F7 00 D3 00
  55+ 08F1 F8 00 D8 00
  55+ 08F5 F8 00 D9 00
  55+ 08F9 F9 00 DC 00
  56+ 08FD FA 00 E1 00                          DW $FA, 225, $FB, 230, $FB, 233, $FC, 235, $FD, 240, $FE, 246
  56+ 0901 FB 00 E6 00
  56+ 0905 FB 00 E9 00
  56+ 0909 FC 00 EB 00
  56+ 090D FD 00 F0 00
  56+ 0911 FE 00 F6 00
  57+ 0915 FF 00 FB 00                          DW $FF, 251
  58+ 0919              LogReverseTableLen:     EQU $ - LogReverseHighByte
# file closed: ./Tables/logtable.asm
1111  0919                                      DISPLAY "Bank ",BankMathsTables," - Bytes free ",/D, $2000 - ($-MathsTablesAddr), " - BankMathsTables"
1112  0919
1113  0919              ; Bank 100  -----------------------------------------------------------------------------------------------------------------------
1114  0919
1115  0919                                      SLOT    SoundAddr
1116  0919                                      PAGE    BankSound
1117  0919                                      ORG SoundAddr, BankSound
1118  E000                                      INCLUDE "./Hardware/sound.asm"
# file opened: ./Hardware/sound.asm
   1+ E000
   2+ E000              ;-------------------------------------------------------------------------------------------------
   3+ E000              ;--- Equates for sounds
   4+ E000              ;       DEFINE          USETIMER 1
   5+ E000                     DEFINE          DANUBEATTACK 1
   6+ E000                                      IFDEF   USETIMER
   7+ E000 ~            SOUNDSTEPLENGTH             EQU     25
   8+ E000                                      ENDIF
   9+ E000
  10+ E000
  11+ E000              WriteTurboControlA:     MACRO
  12+ E000 ~                                    ld      bc,TURBO_SOUND_NEXT_CONTROL
  13+ E000 ~                                    out     (c),a
  14+ E000                                      ENDM
  15+ E000
  16+ E000              WriteTurboRegisterA:    MACRO   value
  17+ E000 ~                                    WriteTurboControlA
  18+ E000 ~                                    ld      b,$BF
  19+ E000 ~                                    ld      a,value
  20+ E000 ~                                    out     (c),a
  21+ E000                                      ENDM
  22+ E000
  23+ E000              WriteTurboRegister:     MACRO   register,value
  24+ E000 ~                                    ld      a,register
  25+ E000 ~                                    WriteTurboControlA
  26+ E000 ~                                    ld      b,$BF
  27+ E000 ~                                    ld      a,value
  28+ E000 ~                                    out     (c),a
  29+ E000                                      ENDM
  30+ E000
  31+ E000              WriteAToTurboRegister:  MACRO   register
  32+ E000 ~                                    ex      af,af'
  33+ E000 ~                                    ld      a,register
  34+ E000 ~                                    WriteTurboControlA
  35+ E000 ~                                    ld      b, $BF
  36+ E000 ~                                    ex      af,af'
  37+ E000 ~                                    out     (c),a
  38+ E000                                      ENDM
  39+ E000
  40+ E000              SelectAY:               MACRO   chipNbr
  41+ E000 ~                                    ld      a,TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT | chipNbr
  42+ E000 ~                                    WriteTurboControlA
  43+ E000                                      ENDM
  44+ E000
  45+ E000              ;--- Interrupt handler, moved from main code
  46+ E000 3A 99 81     SoundInterruptHandler:  ld      a,(DELTA)
  47+ E003 21 06 B1                             ld      hl,LAST_DELTA
  48+ E006 BE                                   cp      (hl)
  49+ E007 C4 37 E2     .SpeedChange:           call    nz, UpdateEngineSound
  50+ E00A 3A 9C 81     .NoSpeedChange:         ld      a,(SoundFxToEnqueue)        ; Check for new sound
  51+ E00D FE FF                                cp      $FF
  52+ E00F C4 4C E1                             call    nz,EnqueSound
  53+ E012              .NoNewSound:            IFDEF   USETIMER
  54+ E012 ~                                        ld      hl,SoundChannelTimer
  55+ E012                                      ENDIF
  56+ E012 11 D2 E2                             ld      de,SoundChannelSeq
  57+ E015 06 08                                ld      b,8
  58+ E017 1A           .ResetLoop:             ld      a,(de)                  ; we only update active channels
  59+ E018 FE FF                                cp      $FF
  60+ E01A 28 0A                                jr      z,.NextCounter
  61+ E01C                                      IFDEF   USETIMER
  62+ E01C ~                                        dec     (hl)                    ; so update channel timer
  63+ E01C ~                                        jr      nz,.NextCounter         ; if its not zero then continue
  64+ E01C                                      ENDIF
  65+ E01C 3E 08                                ld      a,8                     ; a now = channel to play
  66+ E01E 90                                   sub     a,b
  67+ E01F                                      IFDEF   USETIMER
  68+ E01F ~                                        push    bc,,de,,hl              ; save state
  69+ E01F                                      ELSE
  70+ E01F C5 D5                                    push    bc,,de
  71+ E021                                      ENDIF
  72+ E021 CD A7 E1                             call    PlaySound               ; play sound
  73+ E024                                      IFDEF   USETIMER
  74+ E024 ~                                        pop     bc,,de,,hl              ; restore state so de = correct timer & hl = correct channel, b = coutner
  75+ E024                                      ELSE
  76+ E024 D1 C1                                    pop     bc,,de              ; restore state so de = correct timer & hl = correct channel, b = coutner
  77+ E026                                      ENDIF
  78+ E026              ; If it went negative new sound update
  79+ E026                                      IFDEF   USETIMER
  80+ E026 ~            .ResetTimer:                ld      a,SOUNDSTEPLENGTH       ; as we fallin to this it will auto update counter
  81+ E026 ~                                        ld      (hl),a                  ; so may take it out of playsound routine
  82+ E026                                      ENDIF
  83+ E026              .NextCounter:
  84+ E026                                      IFDEF   USETIMER
  85+ E026 ~                                        inc     hl
  86+ E026                                      ENDIF
  87+ E026 13                                   inc     de
  88+ E027 10 EE                                djnz    .ResetLoop
  89+ E029 C9                                   ret
  90+ E02A
  91+ E02A
  92+ E02A              ; On entering here a = AY chip to select
  93+ E02A 21 BF FF     DefaultAYChip:          ld      hl,$FFBF            ; h = turbo control, l = turbo register
  94+ E02D 0E FD                                ld      c,$FD               ; bc = h$FD or l$FD
  95+ E02F 11 0E 00                             ld      de,$000E            ; d = value 0, e = counter
  96+ E032 F6 FC                                or      TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT
  97+ E034 44                                   ld      b,h                 ; now select chip and set to stereo
  98+ E035 ED 79                                out     (c),a               ; .
  99+ E037 1D           .DefaultLoop:           dec     e                   ; loop down we set E 1 higher
 100+ E038 CA 44 E0                             jp      z,.Complete         ; On zero we complete, we
 101+ E03B 44                                   ld      b,h                 ; Set register to 0
 102+ E03C ED 59                                out     (c),e               ; .
 103+ E03E 45                                   ld      b,l                 ; .
 104+ E03F ED 51                                out     (c),d               ; .
 105+ E041 C3 37 E0     .DefaultDone:           jp      .DefaultLoop        ; and loop
 106+ E044 44           .Complete:              ld      b,h                 ; we set fine tone to 0
 107+ E045 ED 59                                out     (c),e               ; though as volume is 0
 108+ E047 45                                   ld      b,l                 ; it doesn't really
 109+ E048 ED 51                                out     (c),d               ; matter
 110+ E04A C9                                   ret
 111+ E04B
 112+ E04B              ;-- Initialise Audio channels to AY1 noise, AY2 and 3 tone, all channels to volume 0
 113+ E04B
 114+ E04B              ; For each AY channel, set everything to zero, then set up envelope and tone channels.
 115+ E04B              ; for now we are blocking noise channels whilst debugging
 116+ E04B 3E 01        InitAudio:              ld      a, TURBO_CHIP_AY1
 117+ E04D CD 2A E0                             call    DefaultAYChip
 118+ E050                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 118+ E050 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 118+ E052             >                        WriteTurboControlA
 118+ E052 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 118+ E055 ED 79       >                        out     (c),a
 118+ E057 06 BF       >                        ld      b,$BF
 118+ E059 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 118+ E05B ED 79       >                        out     (c),a
 119+ E05D                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 119+ E05D 3E 07       >                        ld      a,TONE_ENABLE
 119+ E05F             >                        WriteTurboControlA
 119+ E05F 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 119+ E062 ED 79       >                        out     (c),a
 119+ E064 06 BF       >                        ld      b,$BF
 119+ E066 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 119+ E068 ED 79       >                        out     (c),a
 120+ E06A 3E 02                                ld      a, TURBO_CHIP_AY2
 121+ E06C CD 2A E0                             call    DefaultAYChip
 122+ E06F                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 122+ E06F 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 122+ E071             >                        WriteTurboControlA
 122+ E071 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 122+ E074 ED 79       >                        out     (c),a
 122+ E076 06 BF       >                        ld      b,$BF
 122+ E078 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 122+ E07A ED 79       >                        out     (c),a
 123+ E07C                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 123+ E07C 3E 07       >                        ld      a,TONE_ENABLE
 123+ E07E             >                        WriteTurboControlA
 123+ E07E 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 123+ E081 ED 79       >                        out     (c),a
 123+ E083 06 BF       >                        ld      b,$BF
 123+ E085 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 123+ E087 ED 79       >                        out     (c),a
 124+ E089 3E 03                                ld      a, TURBO_CHIP_AY3
 125+ E08B CD 2A E0                             call    DefaultAYChip
 126+ E08E                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 126+ E08E 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 126+ E090             >                        WriteTurboControlA
 126+ E090 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 126+ E093 ED 79       >                        out     (c),a
 126+ E095 06 BF       >                        ld      b,$BF
 126+ E097 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 126+ E099 ED 79       >                        out     (c),a
 127+ E09B                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 127+ E09B 3E 07       >                        ld      a,TONE_ENABLE
 127+ E09D             >                        WriteTurboControlA
 127+ E09D 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 127+ E0A0 ED 79       >                        out     (c),a
 127+ E0A2 06 BF       >                        ld      b,$BF
 127+ E0A4 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 127+ E0A6 ED 79       >                        out     (c),a
 128+ E0A8 21 D2 E2                             ld      hl,SoundChannelSeq      ; now set up all the channel data to $FF
 129+ E0AB 21 D2 E2                             ld      hl,SoundChannelSeq      ; now set up all the channel data to $FF
 130+ E0AE 3E FF                                ld      a,$FF                   ; which means that it
 131+ E0B0 06 08                                ld      b,8                     ; has no data to play
 132+ E0B2 77           .InitLoop:              ld      (hl),a
 133+ E0B3 23                                   inc     hl
 134+ E0B4 10 FC                                djnz    .InitLoop
 135+ E0B6 C9                                   ret
 136+ E0B7
 137+ E0B7              ;Enable with no noise chanels active
 138+ E0B7 3E 01        InitAudioMusic:         ld      a, TURBO_CHIP_AY1
 139+ E0B9 CD 2A E0                             call    DefaultAYChip
 140+ E0BC                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 140+ E0BC 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 140+ E0BE             >                        WriteTurboControlA
 140+ E0BE 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 140+ E0C1 ED 79       >                        out     (c),a
 140+ E0C3 06 BF       >                        ld      b,$BF
 140+ E0C5 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 140+ E0C7 ED 79       >                        out     (c),a
 141+ E0C9                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 141+ E0C9 3E 07       >                        ld      a,TONE_ENABLE
 141+ E0CB             >                        WriteTurboControlA
 141+ E0CB 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 141+ E0CE ED 79       >                        out     (c),a
 141+ E0D0 06 BF       >                        ld      b,$BF
 141+ E0D2 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 141+ E0D4 ED 79       >                        out     (c),a
 142+ E0D6 3E 02                                ld      a, TURBO_CHIP_AY2
 143+ E0D8 CD 2A E0                             call    DefaultAYChip
 144+ E0DB                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 144+ E0DB 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 144+ E0DD             >                        WriteTurboControlA
 144+ E0DD 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 144+ E0E0 ED 79       >                        out     (c),a
 144+ E0E2 06 BF       >                        ld      b,$BF
 144+ E0E4 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 144+ E0E6 ED 79       >                        out     (c),a
 145+ E0E8                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 145+ E0E8 3E 07       >                        ld      a,TONE_ENABLE
 145+ E0EA             >                        WriteTurboControlA
 145+ E0EA 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 145+ E0ED ED 79       >                        out     (c),a
 145+ E0EF 06 BF       >                        ld      b,$BF
 145+ E0F1 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 145+ E0F3 ED 79       >                        out     (c),a
 146+ E0F5 3E 03                                ld      a, TURBO_CHIP_AY3
 147+ E0F7 CD 2A E0                             call    DefaultAYChip
 148+ E0FA                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 148+ E0FA 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 148+ E0FC             >                        WriteTurboControlA
 148+ E0FC 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 148+ E0FF ED 79       >                        out     (c),a
 148+ E101 06 BF       >                        ld      b,$BF
 148+ E103 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 148+ E105 ED 79       >                        out     (c),a
 149+ E107                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 149+ E107 3E 07       >                        ld      a,TONE_ENABLE
 149+ E109             >                        WriteTurboControlA
 149+ E109 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 149+ E10C ED 79       >                        out     (c),a
 149+ E10E 06 BF       >                        ld      b,$BF
 149+ E110 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 149+ E112 ED 79       >                        out     (c),a
 150+ E114 C9                                   ret
 151+ E115
 152+ E115              GetSoundAAddressToHL:   MACRO
 153+ E115 ~                                    ld      hl,SFXPointerList
 154+ E115 ~                                    add     a,a
 155+ E115 ~                                    add     hl,a
 156+ E115 ~                                    ld      a,(hl)
 157+ E115 ~                                    inc     hl
 158+ E115 ~                                    ld      h,(hl)
 159+ E115 ~                                    ld      l,a
 160+ E115                                      ENDM
 161+ E115
 162+ E115              SetIXToChannelA:        MACRO
 163+ E115 ~                                    ld      hl,SoundChannelSeq
 164+ E115 ~                                    add     hl,a
 165+ E115 ~                                    ld      ix,hl
 166+ E115                                      ENDM
 167+ E115
 168+ E115              SelectChannelMapping:   MACRO
 169+ E115 ~                                    ld      hl,SoundChipMapNumber
 170+ E115 ~                                    add     hl,a
 171+ E115 ~                                    ld      a,(hl)
 172+ E115                                      ENDM
 173+ E115
 174+ E115              ; This version ignores nooise and envelope setup so its always 0 atack hold and
 175+ E115              ; noise is pre-configured in channel
 176+ E115              ; The channel always holds a pointer to the next block of data to play
 177+ E115 DD 7E 18     PlayChannelD:           ld      a,(ix+SoundDataPointerOffset)    ; set hl to current data block
 178+ E118 6F                                   ld      l,a                              ; for SFX step
 179+ E119 DD 7E 19                             ld      a,(ix+SoundDataPointerOffset1)   ;
 180+ E11C 67                                   ld      h,a                              ;
 181+ E11D 7E                                   ld      a,(hl)                           ; get fine
 182+ E11E                                      WriteAToTurboRegister d
 182+ E11E 08          >                        ex      af,af'
 182+ E11F 7A          >                        ld      a,d
 182+ E120             >                        WriteTurboControlA
 182+ E120 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 182+ E123 ED 79       >                        out     (c),a
 182+ E125 06 BF       >                        ld      b, $BF
 182+ E127 08          >                        ex      af,af'
 182+ E128 ED 79       >                        out     (c),a
 183+ E12A 14                                   inc     d                                ; Move to channel coarse
 184+ E12B 23                                   inc     hl
 185+ E12C 7E                                   ld      a,(hl)
 186+ E12D                                      WriteAToTurboRegister d
 186+ E12D 08          >                        ex      af,af'
 186+ E12E 7A          >                        ld      a,d
 186+ E12F             >                        WriteTurboControlA
 186+ E12F 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 186+ E132 ED 79       >                        out     (c),a
 186+ E134 06 BF       >                        ld      b, $BF
 186+ E136 08          >                        ex      af,af'
 186+ E137 ED 79       >                        out     (c),a
 187+ E139 7A                                   ld      a,d
 188+ E13A C6 07                                add     a,7
 189+ E13C 57                                   ld      d,a
 190+ E13D 23                                   inc     hl                               ; Get Volume
 191+ E13E 7E                                   ld      a,(hl)
 192+ E13F                                      WriteAToTurboRegister d
 192+ E13F 08          >                        ex      af,af'
 192+ E140 7A          >                        ld      a,d
 192+ E141             >                        WriteTurboControlA
 192+ E141 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 192+ E144 ED 79       >                        out     (c),a
 192+ E146 06 BF       >                        ld      b, $BF
 192+ E148 08          >                        ex      af,af'
 192+ E149 ED 79       >                        out     (c),a
 193+ E14B C9                                   ret
 194+ E14C
 195+ E14C              ;--- Take the current sound to play, Put it in a noise or tone channel (if bit 1 is clear is a tone only)
 196+ E14C 3A 9C 81     EnqueSound:             ld      a,(SoundFxToEnqueue)                ; Get Sound FX to Enque
 197+ E14F                                      JumpIfAGTENusng SFXEndOfList, .InvalidSound ; Invalid sounds get discarded quickly
 197+ E14F FE 01       >                        cp     SFXEndOfList
 197+ E151 D2 A1 E1    >                        jp		nc,.InvalidSound
 198+ E154 5F           .GetSoundData:          ld      e,a                                 ; save SoundFxToEnqeue
 199+ E155 E6 01                                and     $01                                 ; even numbers are tone only (Including 0)
 200+ E157 20 12                                jr      nz,.FindFreeNoiseChannel
 201+ E159 21 D4 E2     .FindFreeToneChannel:   ld      hl,SoundChannelSeq + 2              ; so we start at the first tone channel
 202+ E15C 16 FF                                ld      d,$FF                               ; d = marker for free slot cp d will be faster in the loop
 203+ E15E 0E 02                                ld      c,2                                 ; c= current slot
 204+ E160 06 07                                ld      b,7                                 ; b = nbr of slots
 205+ E162 7E           .ToneScanLoop:          ld      a,(hl)                              ; is channel occupied
 206+ E163 BA                                   cp      d
 207+ E164 28 16                                jr      z,.SaveSoundId                      ; if its free then move forward
 208+ E166 0C                                   inc     c                                   ; c is hunting for a free channel
 209+ E167 23                                   inc     hl                                  ; move tonext address in channel list
 210+ E168 10 F8                                djnz    .ToneScanLoop
 211+ E16A C9           .NoFreeSlot:            ret                                         ; no free slot, leave sound enqued
 212+ E16B 21 D2 E2     .FindFreeNoiseChannel:  ld      hl,SoundChannelSeq                  ; We only have 2 noise channels so no need to
 213+ E16E 0E 00                                ld      c,0                                 ; do a complex loop
 214+ E170 7E                                   ld      a,(hl)
 215+ E171 16 FF                                ld      d,$FF                               ; d = marker for free slot
 216+ E173 BA                                   cp      d
 217+ E174 28 06                                jr      z,.SaveSoundId
 218+ E176 23                                   inc     hl
 219+ E177 7E                                   ld      a,(hl)
 220+ E178 BA                                   cp      d
 221+ E179 C0           .NoNoiseSlot:           ret     nz                                  ; no free slot, leave sound enqued
 222+ E17A 0E 01        .NoiseChannel2:         ld      c,1                                 ; So we have channel 1 free
 223+ E17C 7B           .SaveSoundId:           ld      a,e                                 ; get back sound id
 224+ E17D                                      GetSoundAAddressToHL                        ; hl = pointer to sfx data
 224+ E17D 21 10 E3    >                        ld      hl,SFXPointerList
 224+ E180 87          >                        add     a,a
 224+ E181 ED 31       >                        add     hl,a
 224+ E183 7E          >                        ld      a,(hl)
 224+ E184 23          >                        inc     hl
 224+ E185 66          >                        ld      h,(hl)
 224+ E186 6F          >                        ld      l,a
 225+ E187 EB                                   ex      de,hl                               ; save pointer to data also makes loading to (ix) easier
 226+ E188 21 D2 E2     .SetIXToChannelPointer: ld      hl,SoundChannelSeq                  ; Get the sequence for the
 227+ E18B 79                                   ld      a,c                                 ; respective channel
 228+ E18C ED 31                                add     hl,a                                ; that we are looking at
 229+ E18E E5 DD E1                             ld      ix,hl                               ; now we can use indexed access
 230+ E191 EB           .GetSFXDataBack:        ex      de,hl                               ; hl = sound fx again
 231+ E192              .LoadSeqCount           ZeroA
 231+ E192 AF          >                        xor a
 232+ E193 DD 77 00                             ld      (ix+0),a                            ; set SoundChannelSeq[channel] to 0 as its starting
 233+ E196 7E                                   ld      a,(hl)                              ; get the nbr of steps
 234+ E197 DD 77 08                             ld      (ix+SoundLastSeqOffset),a           ; load SoundChannelLastSeq[channel]
 235+ E19A                                      IFDEF   USETIMER
 236+ E19A ~                                        ld      a,1                             ; for now we have separate timers, we enque with 1 so the loops starts immediatly
 237+ E19A ~                                        ld      (ix+SoundTimerOffset),a         a; load SoundChannelTimer[channel] with duration
 238+ E19A                                      ENDIF
 239+ E19A 23                                   inc     hl                                  ; move hl to first byte of data block
 240+ E19B DD 75 18                             ld      (ix+SoundDataPointerOffset),l       ; load SoundDataPointer[channel] with current data set
 241+ E19E DD 74 19                             ld      (ix+SoundDataPointerOffset1),h
 242+ E1A1 3E FF        .InvalidSound:          ld      a,$FF
 243+ E1A3 32 9C 81                             ld      (SoundFxToEnqueue),a                ; ClearFXEnqeue
 244+ E1A6 C9                                   ret
 245+ E1A7
 246+ E1A7 5F           PlaySound:              ld      e,a                                 ; save channel number
 247+ E1A8                                      SetIXToChannelA                             ; We trap for debugging
 247+ E1A8 21 D2 E2    >                        ld      hl,SoundChannelSeq
 247+ E1AB ED 31       >                        add     hl,a
 247+ E1AD E5 DD E1    >                        ld      ix,hl
 248+ E1B0 DD 7E 00     .GetCurrentSeq:         ld      a,(ix+0)                            ; for optimisation we
 249+ E1B3 FE FF                                cp      $FF                                 ; will never call this if its $FF
 250+ E1B5 C8                                   ret     z                                   ; its just a belt n braces
 251+ E1B6              ;--- Play Next Step, we select chip, select channel, set up tone then step, timer & pointer
 252+ E1B6 DD 7E 28     .SelectChip             ld      a,(ix+SoundChipMapOffset)           ; get the mapping. bits 1 and 0 hold
 253+ E1B9 57                                   ld      d,a                                 ; .
 254+ E1BA F6 FC                                or      %11111100                           ; .
 255+ E1BC                                      WriteTurboControlA                          ; .
 255+ E1BC 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 255+ E1BF ED 79       >                        out     (c),a
 256+ E1C1 DD 7E 08     .CheckLastSeq:          ld      a,(ix+SoundLastSeqOffset)           ; get last in sequence
 257+ E1C4                                      JumpIfALTNusng  (ix+0),.CompletedSFX        ; if we have gone beyond last then done
 257+ E1C4 DD BE 00    >                        cp      (ix+0)
 257+ E1C7 DA E9 E1    >                        jp		c, .CompletedSFX
 258+ E1CA 7A           .PlayStep:              ld      a,d                                 ; Get the channel number
 259+ E1CB E6 30                                and     %00110000
 260+ E1CD ED 23                                swapnib                                     ; get channel to lower bits
 261+ E1CF 57                                   ld      d,a
 262+ E1D0 CD 15 E1                             call    PlayChannelD                        ; play channel D step ix is pointer to correct soundchannelseq
 263+ E1D3 DD 34 00     .UpdateStep:            inc     (ix+0)                              ; next stepssss
 264+ E1D6                                      IFDEF   USETIMER
 265+ E1D6 ~            .UpdateTimer:               ld      a,SOUNDSTEPLENGTH
 266+ E1D6 ~                                        ld      (ix+SoundTimerOffset),a
 267+ E1D6                                      ENDIF
 268+ E1D6 DD 5E 18     .UpdateStepPointer:     ld      e,(ix+SoundDataPointerOffset)       ; move pointer on by 7 bytes
 269+ E1D9 DD 56 19                             ld      d,(ix+SoundDataPointerOffset+1)     ;
 270+ E1DC EB                                   ex      de,hl                               ; hl = current pointer
 271+ E1DD 3E 03                                ld      a,SFXBlockLength                    ; move to next block
 272+ E1DF ED 31                                add     hl,a                                ; .
 273+ E1E1 EB                                   ex      de,hl                               ; move to de for load back
 274+ E1E2 DD 73 18                             ld      (ix+SoundDataPointerOffset),e       ;
 275+ E1E5 DD 72 19                             ld      (ix+SoundDataPointerOffset+1),d     ;
 276+ E1E8 C9                                   ret
 277+ E1E9 DD 7E 28     .CompletedSFX:          ld      a,(ix+SoundChipMapOffset)           ; channel number is in upper bits
 278+ E1EC ED 23                                swapnib                                     ; so we need it in
 279+ E1EE E6 03                                and     %00000011                           ; lower for selecting volume register
 280+ E1F0 C6 08                                add     a,CHANNEL_A_AMPLITUDE               ; select the register
 281+ E1F2                                      WriteTurboRegisterA 0                       ; set volume to 0
 281+ E1F2             >                        WriteTurboControlA
 281+ E1F2 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 281+ E1F5 ED 79       >                        out     (c),a
 281+ E1F7 06 BF       >                        ld      b,$BF
 281+ E1F9 3E 00       >                        ld      a,0
 281+ E1FB ED 79       >                        out     (c),a
 282+ E1FD                                      WriteTurboRegister ENVELOPE_PERIOD_FINE,0
 282+ E1FD 3E 0B       >                        ld      a,ENVELOPE_PERIOD_FINE
 282+ E1FF             >                        WriteTurboControlA
 282+ E1FF 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 282+ E202 ED 79       >                        out     (c),a
 282+ E204 06 BF       >                        ld      b,$BF
 282+ E206 3E 00       >                        ld      a,0
 282+ E208 ED 79       >                        out     (c),a
 283+ E20A                                      WriteTurboRegister ENVELOPE_PERIOD_COARSE,0
 283+ E20A 3E 0C       >                        ld      a,ENVELOPE_PERIOD_COARSE
 283+ E20C             >                        WriteTurboControlA
 283+ E20C 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 283+ E20F ED 79       >                        out     (c),a
 283+ E211 06 BF       >                        ld      b,$BF
 283+ E213 3E 00       >                        ld      a,0
 283+ E215 ED 79       >                        out     (c),a
 284+ E217                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 284+ E217 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 284+ E219             >                        WriteTurboControlA
 284+ E219 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 284+ E21C ED 79       >                        out     (c),a
 284+ E21E 06 BF       >                        ld      b,$BF
 284+ E220 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 284+ E222 ED 79       >                        out     (c),a
 285+ E224                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 285+ E224 3E 07       >                        ld      a,TONE_ENABLE
 285+ E226             >                        WriteTurboControlA
 285+ E226 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 285+ E229 ED 79       >                        out     (c),a
 285+ E22B 06 BF       >                        ld      b,$BF
 285+ E22D 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 285+ E22F ED 79       >                        out     (c),a
 286+ E231 3E FF                                ld      a,$FF                               ; set sequence to FF to denote
 287+ E233 DD 77 00                             ld      (ix+0),a                            ; channel is now free
 288+ E236 C9                                   ret
 289+ E237
 290+ E237              ; Engine Sound is always a priority so gets a dedicated channel
 291+ E237              ; this is only called if delta has changed
 292+ E237              UpdateEngineSound:      SelectAY TURBO_CHIP_AY1
 292+ E237 3E FD       >                        ld      a,TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT | TURBO_CHIP_AY1
 292+ E239             >                        WriteTurboControlA
 292+ E239 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 292+ E23C ED 79       >                        out     (c),a
 293+ E23E 3A 99 81     .SetUpTone:             ld      a,(DELTA)
 294+ E241 A7                                   and     a
 295+ E242 CA 7D E2                             jp      z,.EngineOff    ; if speed is 0 the engine off as a = 0
 296+ E245 21 F3 08                             ld      hl,$08F3        ; base tone - delta * 15
 297+ E248 57                                   ld      d,a             ; we subtract as the tone is the
 298+ E249 1E 0F                                ld      e,15            ; time between pulses
 299+ E24B B7 ED 52                             sub     hl,de
 300+ E24E 3E 00                                ld      a,CHANNEL_A_FINE
 301+ E250 01 FD FF                             ld      bc,$FFFD
 302+ E253 ED 79                                out     (c),a
 303+ E255 06 BF                                ld      b,$BF
 304+ E257 ED 61                                out     (c),h
 305+ E259 3C                                   inc     a
 306+ E25A 06 FF                                ld      b,$FF
 307+ E25C ED 79                                out     (c),a
 308+ E25E 06 BF                                ld      b,$BF
 309+ E260 ED 69                                out     (c),l
 310+ E262 3A 99 81     .SetUpNoise:            ld      a,(DELTA)       ; l = DELTA / 4
 311+ E265 CB 3F                                srl     a
 312+ E267 57                                   ld      d,a             ;
 313+ E268 CB 3F                                srl     a
 314+ E26A CB 3F                                srl     a               ; a = DELTA / 8
 315+ E26C C6 1F                                add     a, $1F          ; more noise higher the speed
 316+ E26E 06 FF                                ld      b,$FF
 317+ E270 1E 06                                ld      e,NOISE_PERIOD
 318+ E272 ED 59                                out     (c),e
 319+ E274 06 BF                                ld      b,$BF
 320+ E276 ED 79                                out     (c),a
 321+ E278 7A                                   ld      a,d             ; get back delta / 4
 322+ E279 C6 05                                add     a,5
 323+ E27B CB 3F                                srl     a               ; calculate a scaled from 2 to 7
 324+ E27D 1E 08        .EngineOff:             ld      e,CHANNEL_A_AMPLITUDE
 325+ E27F 06 FF                                ld      b,$FF
 326+ E281 ED 59                                out     (c),e
 327+ E283 06 BF                                ld      b,$BF
 328+ E285 ED 79                                out     (c),a
 329+ E287                                      WriteTurboRegister ENVELOPE_PERIOD_FINE,0
 329+ E287 3E 0B       >                        ld      a,ENVELOPE_PERIOD_FINE
 329+ E289             >                        WriteTurboControlA
 329+ E289 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 329+ E28C ED 79       >                        out     (c),a
 329+ E28E 06 BF       >                        ld      b,$BF
 329+ E290 3E 00       >                        ld      a,0
 329+ E292 ED 79       >                        out     (c),a
 330+ E294                                      WriteTurboRegister ENVELOPE_PERIOD_COARSE,0
 330+ E294 3E 0C       >                        ld      a,ENVELOPE_PERIOD_COARSE
 330+ E296             >                        WriteTurboControlA
 330+ E296 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 330+ E299 ED 79       >                        out     (c),a
 330+ E29B 06 BF       >                        ld      b,$BF
 330+ E29D 3E 00       >                        ld      a,0
 330+ E29F ED 79       >                        out     (c),a
 331+ E2A1                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 331+ E2A1 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 331+ E2A3             >                        WriteTurboControlA
 331+ E2A3 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 331+ E2A6 ED 79       >                        out     (c),a
 331+ E2A8 06 BF       >                        ld      b,$BF
 331+ E2AA 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 331+ E2AC ED 79       >                        out     (c),a
 332+ E2AE                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 332+ E2AE 3E 07       >                        ld      a,TONE_ENABLE
 332+ E2B0             >                        WriteTurboControlA
 332+ E2B0 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 332+ E2B3 ED 79       >                        out     (c),a
 332+ E2B5 06 BF       >                        ld      b,$BF
 332+ E2B7 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 332+ E2B9 ED 79       >                        out     (c),a
 333+ E2BB 3A 99 81                             ld      a,(DELTA)
 334+ E2BE 32 06 B1                             ld      (LAST_DELTA),a
 335+ E2C1 C9                                   ret
 336+ E2C2
 337+ E2C2 53 6F 75 6E  SoundLabel              DB      "Sound Channels  "
 337+ E2C6 64 20 43 68
 337+ E2CA 61 6E 6E 65
 337+ E2CE 6C 73 20 20
 338+ E2D2 00 00 00...  SoundChannelSeq         DS      8   ; The current step in the SFX or $FX for empty
 339+ E2DA 00 00 00...  SoundChannelLastSeq     DS      8   ; A copy of SFX length to save an extra lookup, $FF means 1 step always on, $00 means off
 340+ E2E2 00 00 00...  SoundChannelTimer       DS      8   ; The count down to next sequence
 341+ E2EA 00 00 00...  SoundDataPointer        DS      2*8 ; pointer to current sound step
 342+ E2FA              ;                  Channel/Chip B/1  C/1  A/2  B/2  C/2  A/3  B/3  C/3
 343+ E2FA 11 21        SoundChipMapNumber      DB      $10 | TURBO_CHIP_AY1, $20 | TURBO_CHIP_AY1
 344+ E2FC 02 32                                DB      $00 | TURBO_CHIP_AY2, $10 | TURBO_CHIP_AY2 | $20 | TURBO_CHIP_AY2
 345+ E2FE 02 33                                DB      $00 | TURBO_CHIP_AY2, $10 | TURBO_CHIP_AY3 | $20 | TURBO_CHIP_AY3
 346+ E300              SoundLastSeqOffset      EQU     8
 347+ E300              SoundTimerOffset        EQU     SoundLastSeqOffset + 8
 348+ E300              SoundDataPointerOffset  EQU     SoundTimerOffset + 8
 349+ E300              SoundDataPointerOffset1 EQU     SoundTimerOffset + 9
 350+ E300              SoundChipMapOffset      EQU     SoundDataPointerOffset + 16
 351+ E300              ;Chip map is            bits 5,4 channel letter A = 0 B =1 C = 2    1,0 Chip Number
 352+ E300              ;Mapping                0 = 1B, 1 = 1C, 3=2A, 4 = 2B, 5=2C, 6 = 3A, 7 = 3B, 8 = 3C
 353+ E300              ;                       Chip 1 Engine, noise channel but engine noise period is priority
 354+ E300              ;                       Chip 2 General FX, no noise
 355+ E300              ;                       Chip 3 General FX, no noise
 356+ E300
 357+ E300              ;--- Data sets for Sound
 358+ E300              ;--- Sound Channels are 0 to 9 AY1 A B C AY2 A B C AY3 A B C
 359+ E300              ;--- Sounds can not enqueu, the find a free slot & SoundFxtoEnqueue gets zeroed or it gets left
 360+ E300              ;--- AY1 channel 1 is reserved for engine noise as its calculated on the fly
 361+ E300              ; Predefined value for each channel to load to $FFFD before setting up tone
 362+ E300              ; Hcops a copy of the 3 chips register 7
 363+ E300
 364+ E300
 365+ E300              ; StepLength            DB      1   ; $FF = 1 step forever else number of entries in StepListArray
 366+ E300              ; StepListArray
 367+ E300              ;     TonePitch         DW      4 bits unused + 12 bits
 368+ E300              ;     NoisePitch        DB      5 bit or $FF for no noise
 369+ E300              ;     Volume            DB      0 to 15
 370+ E300              ;     EnvelopePeriod    DW      0
 371+ E300              ;     WaveForm          DB      0
 372+ E300
 373+ E300              ; SFX Format
 374+ E300              ; SFXPointerList - Odd numbers are tone, Even Numbers have noise too, optimisation for channel handling
 375+ E300 53 6F 75 6E  SoundLabelSFX   DB      "Sound Data      "
 375+ E304 64 20 44 61
 375+ E308 74 61 20 20
 375+ E30C 20 20 20 20
 376+ E310 19 E3        SFXPointerList  dw      SFXLaser
 377+ E312              SFXEndOfList    EQU     1
 378+ E312              SFXBlockLength  EQU     3
 379+ E312              SFXFineOffset   EQU     0
 380+ E312              SFXCorseOffset  EQU     1
 381+ E312              SFXVolOffset    EQU     2
 382+ E312              ;                       Step Count
 383+ E312 4C 61 73 65  SoundLaser      DB      "Laser  "
 383+ E316 72 20 20
 384+ E319 0B           SFXLaser        db      11
 385+ E31A              ;                       Tone
 386+ E31A              ;                      Fine Crs  Vol
 387+ E31A 5F 00 0E                    db      $5F, $00, $0E
 388+ E31D 39 00 0E                    db      $39, $00, $0E
 389+ E320 47 00 0D                    db      $47, $00, $0D
 390+ E323 5E 00 0C                    db      $5E, $00, $0C
 391+ E326 6E 10 0A                    db      $6E, $10, $0A
 392+ E329 76 00 08                    db      $76, $00, $08
 393+ E32C 76 00 07                    db      $76, $00, $07
 394+ E32F 06 01 06                    db      $06, $01, $06
 395+ E332 2E 01 03                    db      $2E, $01, $03
 396+ E335 16 01 03                    db      $16, $01, $03
 397+ E338 03 00 01                    db      $03, $00, $01
 398+ E33B
 399+ E33B              ;
 400+ E33B              ;
 401+ E33B              ;Laser1:          db 14,14,13,12,10, 8, 7, 6, 3, 1
 402+ E33B              ;LaserFrameCount  db  5, 5, 5, 5, 5, 5, 5, 5, 5, 5
 403+ E33B              ;LaserLength:     db $-LaserFrameCount
 404+ E33B              ;LaserTone:       dw $05F, $089, $097, $0AE, $0CE, $0B6, $0E6, $106, $13E, $126, $136
 405+ E33B
 406+ E33B C5 E5        DanubePointer1:         DW BlueDanube1
 407+ E33D DA E6        DanubePointer2:         DW BlueDanube2
 408+ E33F EF E7        DanubePointer3:         DW BlueDanube3
 409+ E341 04 E9        DanubePointer4:         DW BlueDanube4
 410+ E343 19 EA        DanubePointer5:         DW BlueDanube5
 411+ E345 2E EB        DanubePointer6:         DW BlueDanube6
 412+ E347              ; Sustain reduces volume each cycle, playing a note resets it
 413+ E347 00           DanubeVolume1:          DB 0
 414+ E348 02           DanubeChip1:            DB TURBO_CHIP_AY2
 415+ E349 00           DanubeVolume2:          DB 0
 416+ E34A 02           DanubeChip2:            DB TURBO_CHIP_AY2
 417+ E34B 00           DanubeVolume3:          DB 0
 418+ E34C 02           DanubeChip3:            DB TURBO_CHIP_AY2
 419+ E34D 00           DanubeVolume4:          DB 0
 420+ E34E 03           DanubeChip4:            DB TURBO_CHIP_AY3
 421+ E34F 00           DanubeVolume5:          DB 0
 422+ E350 03           DanubeChip5:            DB TURBO_CHIP_AY3
 423+ E351 00           DanubeVolume6:          DB 0
 424+ E352 03           DanubeChip6:            DB TURBO_CHIP_AY3
 425+ E353              PointerVolOffset:       EQU 12
 426+ E353              PointerChipOffset:      EQU 13
 427+ E353 00 00        DanubeCounter:          DW 0
 428+ E355              DanubeMax:              EQU BlueDanube2 - BlueDanube1 +1
 429+ E355 16 01        DanubeMaxMem:           DW  DanubeMax
 430+ E357 0F           DanubeVolume:           DB $0F
 431+ E358 08           DanubePace:             DB 8
 432+ E359 08           DanubeTimer:            DB 8
 433+ E35A 00 00        DanubeAttackEnvelope    DW $0000
 434+ E35C
 435+ E35C F6 FC        SelectDanubeAYa:        or TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT
 436+ E35E                                      WriteTurboControlA
 436+ E35E 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 436+ E361 ED 79       >                        out     (c),a
 437+ E363 C9                                   ret
 438+ E364
 439+ E364 08           WriteAToTurboRegisterD: ex      af,af'
 440+ E365 7A                                   ld      a,d
 441+ E366                                      WriteTurboControlA
 441+ E366 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 441+ E369 ED 79       >                        out     (c),a
 442+ E36B 06 BF                                ld      b,$BF
 443+ E36D 08                                   ex      af,af'
 444+ E36E ED 79                                out     (c),a
 445+ E370 C9                                   ret
 446+ E371
 447+ E371              SetChannelAVolume0:     WriteTurboControlA
 447+ E371 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 447+ E374 ED 79       >                        out     (c),a
 448+ E376 06 BF                                ld      b,$BF
 449+ E378                                      ZeroA
 449+ E378 AF          >                        xor a
 450+ E379 ED 79                                out     (c),a
 451+ E37B C9                                   ret
 452+ E37C
 453+ E37C 7A           SetChannelDNoteAtHL:    ld      a,d                 ; a is now 0 to 2
 454+ E37D CB 27                                sla     a                   ; multiply by 2 so now 0, 2, 4
 455+ E37F F5                                   push    af                  ; save fine adjust register nbr
 456+ E380                                      WriteTurboControlA          ; Send out fine adjust
 456+ E380 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 456+ E383 ED 79       >                        out     (c),a
 457+ E385 06 BF                                ld      b,$BF
 458+ E387 7E                                   ld      a,(hl)              ; get fine note
 459+ E388 ED 79                                out     (c),a               ; write fine note
 460+ E38A F1                                   pop     af                  ; get back fine adjust register
 461+ E38B 3C                                   inc     a
 462+ E38C                                      WriteTurboControlA
 462+ E38C 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 462+ E38F ED 79       >                        out     (c),a
 463+ E391 23                                   inc     hl                  ; move to coarse value
 464+ E392 06 BF                                ld      b,$BF
 465+ E394 7E                                   ld      a,(hl)
 466+ E395 ED 79                                out     (c),a
 467+ E397                                      ;IFDEF   DANUBEATTACK
 468+ E397              .SetAttack:             ;    ld      hl,(DanubeAttackEnvelope)
 469+ E397                                      ;    ld      a,ENVELOPE_PERIOD_FINE
 470+ E397                                      ;    WriteTurboControlA
 471+ E397                                      ;    ld      b,$BF
 472+ E397                                      ;    ld      a,l
 473+ E397                                      ;    out     (c),a
 474+ E397                                      ;    ld      a,ENVELOPE_PERIOD_COARSE
 475+ E397                                      ;    WriteTurboControlA
 476+ E397                                      ;    ld      b,$BF
 477+ E397                                      ;    ld      a,h
 478+ E397                                      ;    out     (c),a
 479+ E397                                      ;ENDIF
 480+ E397 7A           .SetVolume:             ld      a,d                 ; get back channel
 481+ E398 C6 08                                add     a,8
 482+ E39A                                      WriteTurboControlA
 482+ E39A 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 482+ E39D ED 79       >                        out     (c),a
 483+ E39F 06 BF                                ld      b,$BF
 484+ E3A1 3A 57 E3                             ld      a,(DanubeVolume)    ; could put in ixh but we have plenty of cycles
 485+ E3A4 ED 79                                out     (c),a
 486+ E3A6 C9                                   ret
 487+ E3A7
 488+ E3A7 DD 7E 06     SustainNote:            ld      a,(ix+6)
 489+ E3AA 3D                                   dec     a
 490+ E3AB 20 02                                jr      nz,.MinNoteSkip
 491+ E3AD 3E 01                                ld      a,1
 492+ E3AF DD 77 0C     .MinNoteSkip:           ld      (ix+PointerVolOffset),a
 493+ E3B2 78                                   ld      a,b          ; get back channel which is passed in via b
 494+ E3B3 C6 08                                add     a,8
 495+ E3B5                                      WriteTurboControlA
 495+ E3B5 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 495+ E3B8 ED 79       >                        out     (c),a
 496+ E3BA 06 BF                                ld      b,$BF
 497+ E3BC DD 7E 0C                             ld      a,(ix+PointerVolOffset)
 498+ E3BF ED 79                                out     (c),a
 499+ E3C1                                      IFDEF   DANUBEATTACK
 500+ E3C1 3E 0B        .SetAttack:                 ld      a,ENVELOPE_PERIOD_FINE
 501+ E3C3                                          WriteTurboControlA
 501+ E3C3 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 501+ E3C6 ED 79       >                        out     (c),a
 502+ E3C8 06 BF                                    ld      b,$BF
 503+ E3CA                                          ZeroA
 503+ E3CA AF          >                        xor a
 504+ E3CB ED 79                                    out     (c),a
 505+ E3CD 3E 0C                                    ld      a,ENVELOPE_PERIOD_COARSE
 506+ E3CF                                          WriteTurboControlA
 506+ E3CF 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 506+ E3D2 ED 79       >                        out     (c),a
 507+ E3D4 06 BF                                    ld      b,$BF
 508+ E3D6                                          ZeroA
 508+ E3D6 AF          >                        xor a
 509+ E3D7 ED 79                                    out     (c),a
 510+ E3D9                                      ENDIF
 511+ E3D9 C9                                   ret
 512+ E3DA
 513+ E3DA
 514+ E3DA              ; IN iyh = channel number, a = note, ix = pointer to danubepointer table corresponding to guitar string
 515+ E3DA DD 7E 0D     PlayDanubeNote:         ld      a,(ix+PointerChipOffset)
 516+ E3DD C5                                   push    bc
 517+ E3DE CD 5C E3                             call    SelectDanubeAYa
 518+ E3E1 C1                                   pop     bc
 519+ E3E2 DD 7E 00                             ld      a,(ix+0)
 520+ E3E5 6F                                   ld      l,a
 521+ E3E6 DD 7E 01                             ld      a,(ix+1)
 522+ E3E9 67                                   ld      h,a
 523+ E3EA 7E                                   ld      a,(hl)
 524+ E3EB A7                                   and     a
 525+ E3EC 28 26                                jr      z,  .NoNote
 526+ E3EE FE FF                                cp      $FF
 527+ E3F0 C8                                   ret     z
 528+ E3F1                                      ;jp      z,SustainNote
 529+ E3F1 21 1D E5                             ld      hl, TonesPitch
 530+ E3F4 5F                                   ld      e,a         ; save a
 531+ E3F5 E6 F0                                and     $F0         ; load octave to d
 532+ E3F7 ED 23                                swapnib             ;
 533+ E3F9 57                                   ld      d,a         ;
 534+ E3FA 7B                                   ld      a,e         ; get a back
 535+ E3FB 1E 0C                                ld      e,12        ; 12 semi tones so mul by 12
 536+ E3FD ED 30                                mul                 ;
 537+ E3FF E6 0F                                and     $0F         ; get semi tone
 538+ E401 EB                                   ex      de,hl       ; hl = octave * 12 + semi tone
 539+ E402 ED 31                                add     hl,a        ; .
 540+ E404                                      ShiftHLLeft1        ; multiply by 2 as we have 2 bytes per tone
 540+ E404 CB 25       >			   sla l
 540+ E406 CB 14       >			   rl  h
 541+ E408 11 1D E5                             ld      de,TonesPitch
 542+ E40B 19                                   add     hl,de       ; now we are pointing at table
 543+ E40C 50                                   ld      d,b         ; get channel number
 544+ E40D CD 7C E3                             call    SetChannelDNoteAtHL ; leaves with A = volume note
 545+ E410 DD 77 0C                             ld      (ix+PointerVolOffset),a    ;
 546+ E413 C9                                   ret
 547+ E414 78           .NoNote:                ld      a,b         ; a= channel number 0 to 3
 548+ E415 C6 08                                add     8           ; adjust to volume register
 549+ E417 CD 71 E3     .NoNoteOK               call    SetChannelAVolume0
 550+ E41A C9                                   ret
 551+ E41B
 552+ E41B 3A 59 E3     PlayDanube:             ld      a,(DanubeTimer)
 553+ E41E 3D                                   dec     a
 554+ E41F 28 04                                jr      z,.PlaySequence
 555+ E421 32 59 E3                             ld      (DanubeTimer),a
 556+ E424 C9                                   ret
 557+ E425 06 06        .PlaySequence:          ld      b,6
 558+ E427 DD 21 3B E3                          ld      ix,DanubePointer1
 559+ E42B 0E 00                                ld      c,0
 560+ E42D C5           .ChannelLoop:           push    bc
 561+ E42E 41                                   ld      b,c
 562+ E42F CD DA E3                             call    PlayDanubeNote
 563+ E432 C1                                   pop     bc
 564+ E433 DD 23                                inc     ix
 565+ E435 DD 23                                inc     ix
 566+ E437 0C                                   inc     c
 567+ E438 79                                   ld      a,c
 568+ E439 FE 03                                cp      3
 569+ E43B 20 02                                jr      nz,.SkipChannelMax
 570+ E43D 0E 00                                ld      c,0
 571+ E43F 10 EC        .SkipChannelMax:        djnz    .ChannelLoop
 572+ E441 C3 AE E4                             jp      UpdatePointers
 573+ E444              ;
 574+ E444              .sPlaySequence:
 575+ E444 3E 02        .PlayChannel1:          ld      a,TURBO_CHIP_AY2
 576+ E446 CD 5C E3                             call    SelectDanubeAYa
 577+ E449 DD 21 3B E3                          ld      ix,DanubePointer1
 578+ E44D DD 7E 00                             ld      a,(ix+0)
 579+ E450 2A 3B E3                             ld      hl,(DanubePointer1)
 580+ E453 7E                                   ld      a,(hl)
 581+ E454 06 00                                ld      b,0
 582+ E456 CD DA E3                             call    PlayDanubeNote
 583+ E459              .PlayChannel2:          ;break
 584+ E459 3E 02                                ld      a,TURBO_CHIP_AY2
 585+ E45B CD 5C E3                             call    SelectDanubeAYa
 586+ E45E DD 21 3D E3                          ld      ix,DanubePointer2
 587+ E462 DD 7E 00                             ld      a,(ix+0)
 588+ E465 06 01                                ld      b,1
 589+ E467 CD DA E3                             call    PlayDanubeNote
 590+ E46A 3E 02        .PlayChannel3:          ld      a,TURBO_CHIP_AY2
 591+ E46C CD 5C E3                             call    SelectDanubeAYa
 592+ E46F DD 21 3F E3                          ld      ix,DanubePointer3
 593+ E473 DD 7E 00                             ld      a,(ix+0)
 594+ E476 06 02                                ld      b,2
 595+ E478 CD DA E3                             call    PlayDanubeNote
 596+ E47B 3E 03        .PlayChannel4:          ld      a,TURBO_CHIP_AY3
 597+ E47D CD 5C E3                             call    SelectDanubeAYa
 598+ E480 DD 21 41 E3                          ld      ix,DanubePointer4
 599+ E484 DD 7E 00                             ld      a,(ix+0)
 600+ E487 06 00                                ld      b,0
 601+ E489 CD DA E3                             call    PlayDanubeNote
 602+ E48C 3E 03        .PlayChannel5:          ld      a,TURBO_CHIP_AY3
 603+ E48E CD 5C E3                             call    SelectDanubeAYa
 604+ E491 DD 21 43 E3                          ld      ix,DanubePointer5
 605+ E495 DD 7E 00                             ld      a,(ix+0)
 606+ E498 06 01                                ld      b,1
 607+ E49A CD DA E3                             call    PlayDanubeNote
 608+ E49D 3E 03        .PlayChannel6:          ld      a,TURBO_CHIP_AY3
 609+ E49F CD 5C E3                             call    SelectDanubeAYa
 610+ E4A2 DD 21 45 E3                          ld      ix,DanubePointer6
 611+ E4A6 DD 7E 00                             ld      a,(ix+0)
 612+ E4A9 06 02                                ld      b,2
 613+ E4AB CD DA E3                             call    PlayDanubeNote
 614+ E4AE 3A 58 E3     UpdatePointers:         ld      a,(DanubePace)
 615+ E4B1 32 59 E3                             ld      (DanubeTimer),a
 616+ E4B4 2A 53 E3                             ld      hl,(DanubeCounter)
 617+ E4B7 11 16 01                             ld      de,DanubeMax
 618+ E4BA E5           .compare16HLDE:         push    hl
 619+ E4BB A7                                   and     a
 620+ E4BC ED 52                                sbc     hl,de
 621+ E4BE E1                                   pop     hl
 622+ E4BF                                      ;break
 623+ E4BF 20 2A                                jr      nz,.MovePointersForward
 624+ E4C1 21 C5 E5     .ResetPointers:         ld      hl,BlueDanube1
 625+ E4C4 22 3B E3                             ld      (DanubePointer1),hl
 626+ E4C7 21 DA E6                             ld      hl,BlueDanube2
 627+ E4CA 22 3D E3                             ld      (DanubePointer2),hl
 628+ E4CD 21 EF E7                             ld      hl,BlueDanube3
 629+ E4D0 22 3F E3                             ld      (DanubePointer3),hl
 630+ E4D3 21 04 E9                             ld      hl,BlueDanube4
 631+ E4D6 22 41 E3                             ld      (DanubePointer4),hl
 632+ E4D9 21 19 EA                             ld      hl,BlueDanube5
 633+ E4DC 22 43 E3                             ld      (DanubePointer5),hl
 634+ E4DF 21 2E EB                             ld      hl,BlueDanube6
 635+ E4E2 22 45 E3                             ld      (DanubePointer6),hl
 636+ E4E5 21 00 00                             ld      hl,0
 637+ E4E8 22 53 E3                             ld      (DanubeCounter),hl
 638+ E4EB 23           .MovePointersForward:   inc     hl
 639+ E4EC 22 53 E3                             ld      (DanubeCounter),hl
 640+ E4EF 21 3B E3                             ld      hl,DanubePointer1
 641+ E4F2 CD 14 E5                             call    AdvancePointer
 642+ E4F5 21 3D E3                             ld      hl,DanubePointer2
 643+ E4F8 CD 14 E5                             call    AdvancePointer
 644+ E4FB 21 3F E3                             ld      hl,DanubePointer3
 645+ E4FE CD 14 E5                             call    AdvancePointer
 646+ E501 21 41 E3                             ld      hl,DanubePointer4
 647+ E504 CD 14 E5                             call    AdvancePointer
 648+ E507 21 43 E3                             ld      hl,DanubePointer5
 649+ E50A CD 14 E5                             call    AdvancePointer
 650+ E50D 21 45 E3                             ld      hl,DanubePointer6
 651+ E510 CD 14 E5                             call    AdvancePointer
 652+ E513 C9                                   ret
 653+ E514
 654+ E514 7E           AdvancePointer:         ld      a,(hl)
 655+ E515 23                                   inc     hl
 656+ E516 56                                   ld      d,(hl)
 657+ E517 5F                                   ld      e,a
 658+ E518 13                                   inc     de
 659+ E519 72                                   ld      (hl),d
 660+ E51A 2B                                   dec     hl
 661+ E51B 73                                   ld      (hl),e
 662+ E51C C9                                   ret
 663+ E51D
 664+ E51D
 665+ E51D
 666+ E51D
 667+ E51D BF 0F        TonesPitch       db  $BF,   $0F
 668+ E51F DC 0E                         db  $DC,   $0E
 669+ E521 07 0E                         db  $07,   $0E
 670+ E523 7B 1A                         db  $7B,   $1A
 671+ E525 FE 18                         db  $FE,   $18
 672+ E527 97 17                         db  $97,   $17
 673+ E529 44 16                         db  $44,   $16
 674+ E52B 04 15                         db  $04,   $15
 675+ E52D D6 13                         db  $D6,   $13
 676+ E52F B9 12                         db  $B9,   $12
 677+ E531 AC 11                         db  $AC,   $11
 678+ E533 AE 10                         db  $AE,   $10
 679+ E535 DF 07                         db  $DF,   $07
 680+ E537 6E 07                         db  $6E,   $07
 681+ E539 03 07                         db  $03,   $07
 682+ E53B 3D 0D                         db  $3D,   $0D
 683+ E53D 7F 0C                         db  $7F,   $0C
 684+ E53F CC 0B                         db  $CC,   $0B
 685+ E541 22 0B                         db  $22,   $0B
 686+ E543 82 0A                         db  $82,   $0A
 687+ E545 EB 09                         db  $EB,   $09
 688+ E547 5D 09                         db  $5D,   $09
 689+ E549 D6 08                         db  $D6,   $08
 690+ E54B 57 08                         db  $57,   $08
 691+ E54D F0 03                         db  $F0,   $03
 692+ E54F B7 03                         db  $B7,   $03
 693+ E551 82 03                         db  $82,   $03
 694+ E553 9F 06                         db  $9F,   $06
 695+ E555 40 06                         db  $40,   $06
 696+ E557 E6 05                         db  $E6,   $05
 697+ E559 91 05                         db  $91,   $05
 698+ E55B 41 05                         db  $41,   $05
 699+ E55D F6 04                         db  $F6,   $04
 700+ E55F AE 04                         db  $AE,   $04
 701+ E561 6B 04                         db  $6B,   $04
 702+ E563 2C 04                         db  $2C,   $04
 703+ E565 F8 01                         db  $F8,   $01
 704+ E567 DC 01                         db  $DC,   $01
 705+ E569 C1 01                         db  $C1,   $01
 706+ E56B 4F 03                         db  $4F,   $03
 707+ E56D 20 03                         db  $20,   $03
 708+ E56F F3 02                         db  $F3,   $02
 709+ E571 C9 02                         db  $C9,   $02
 710+ E573 A1 02                         db  $A1,   $02
 711+ E575 7B 02                         db  $7B,   $02
 712+ E577 57 02                         db  $57,   $02
 713+ E579 36 02                         db  $36,   $02
 714+ E57B 16 02                         db  $16,   $02
 715+ E57D FC 00                         db  $FC,   $00
 716+ E57F EE 00                         db  $EE,   $00
 717+ E581 E0 00                         db  $E0,   $00
 718+ E583 A8 01                         db  $A8,   $01
 719+ E585 90 01                         db  $90,   $01
 720+ E587 79 01                         db  $79,   $01
 721+ E589 64 01                         db  $64,   $01
 722+ E58B 50 01                         db  $50,   $01
 723+ E58D 3D 01                         db  $3D,   $01
 724+ E58F 2C 01                         db  $2C,   $01
 725+ E591 1B 01                         db  $1B,   $01
 726+ E593 0B 01                         db  $0B,   $01
 727+ E595 7E 00                         db  $7E,   $00
 728+ E597 77 00                         db  $77,   $00
 729+ E599 70 00                         db  $70,   $00
 730+ E59B D4 00                         db  $D4,   $00
 731+ E59D C8 00                         db  $C8,   $00
 732+ E59F BD 00                         db  $BD,   $00
 733+ E5A1 B2 00                         db  $B2,   $00
 734+ E5A3 A8 00                         db  $A8,   $00
 735+ E5A5 9F 00                         db  $9F,   $00
 736+ E5A7 96 00                         db  $96,   $00
 737+ E5A9 8D 00                         db  $8D,   $00
 738+ E5AB 85 00                         db  $85,   $00
 739+ E5AD 3F 00                         db  $3F,   $00
 740+ E5AF 3B 00                         db  $3B,   $00
 741+ E5B1 38 00                         db  $38,   $00
 742+ E5B3 6A 00                         db  $6A,   $00
 743+ E5B5 64 00                         db  $64,   $00
 744+ E5B7 5E 00                         db  $5E,   $00
 745+ E5B9 59 00                         db  $59,   $00
 746+ E5BB 54 00                         db  $54,   $00
 747+ E5BD 4F 00                         db  $4F,   $00
 748+ E5BF 4B 00                         db  $4B,   $00
 749+ E5C1 47 00                         db  $47,   $00
 750+ E5C3 43 00                         db  $43,   $00
 751+ E5C5
 752+ E5C5
 753+ E5C5              ; 1 Byte high nibble Octave, low note
 754+ E5C5              ; for now middle octave 3,
 755+ E5C5              ; low nibble mapping
 756+ E5C5              ;       0      1  2  3  4  5  6   7  8  9   A  B  C
 757+ E5C5              ;       None   A  A# B  C  C# D  D#  E  F  F#  G  G#
 758+ E5C5              ;BlueDanube1:     DB $00, $00, $00, $00, $00, $61, $61, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $61, $61, $5B, $5B, $00, $00, $00
 759+ E5C5              ;BlueDanube2:     DB $00, $00, $00, $00, $00, $5A, $5A, $5A, $5A, $00, $00, $00, $00, $00, $00, $00, $00, $58, $58, $55, $55, $00, $00, $00
 760+ E5C5              ;BlueDanube3:     DB $00, $00, $00, $41, $41, $00, $00, $56, $56, $00, $00, $00, $00, $00, $00, $41, $41, $00, $00, $00, $00, $00, $00, $00
 761+ E5C5              ;BlueDanube4:     DB $36, $36, $3A, $00, $00, $00, $00, $00, $00, $00, $00, $00, $36, $36, $3A, $00, $00, $00, $00, $00, $00, $00, $00, $00
 762+ E5C5
 763+ E5C5 00 00 00 48  BlueDanube1:          DB 	$00, 	$00, 	$00, 	$48, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$4A, 	$FF, 	$4A, 	$FF, 	$00, 	$00, 	$48, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 763+ E5C9 00 00 00 4A
 763+ E5CD FF 4A FF 4A
 763+ E5D1 FF 00 00 48
 763+ E5D5 00 00 00 4B
 763+ E5D9 FF 4B FF 4B
 763+ E5DD FF 00 00 00
 763+ E5E1 00 00 00 00
 763+ E5E5 00 00 00 00
 763+ E5E9 00 00 00 00
 763+ E5ED 00 00 00 00
 763+ E5F1 00 00 00 00
 763+ E5F5 00 00 00 00
 763+ E5F9 00 00 00 00
 763+ E5FD 00 00 00 00
 763+ E601 00 00 00 00
 764+ E605 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 764+ E609 00 00 00 00
 764+ E60D 00 00 00 00
 764+ E611 00 00 00 00
 764+ E615 00 00 00 00
 764+ E619 00 00 00 00
 764+ E61D 00 00 00 00
 764+ E621 00 00 00 00
 764+ E625 00 00 00 00
 764+ E629 00 00 00 00
 764+ E62D 00 00 00 00
 764+ E631 00 00 00 00
 764+ E635 00 00 00 00
 764+ E639 00 00 00 00
 764+ E63D 00 00 00 00
 764+ E641 00 00 00 00
 765+ E645 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$00, 	$48, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00
 765+ E649 00 00 00 00
 765+ E64D 00 00 48 FF
 765+ E651 48 FF 00 00
 765+ E655 00 00 00 00
 765+ E659 00 00 00 00
 765+ E65D 00 00 00 00
 765+ E661 00 00 00 00
 765+ E665 00 00 00 48
 765+ E669 00 48 00 00
 765+ E66D 00 00 00 00
 765+ E671 00 00 00 00
 765+ E675 00 00 00 00
 765+ E679 00 00 00 00
 765+ E67D 00 00 4B FF
 765+ E681 4B FF 00 00
 766+ E685 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$4A, 	$FF, 	$4A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48
 766+ E689 00 00 00 00
 766+ E68D 00 00 00 00
 766+ E691 00 00 00 00
 766+ E695 00 4B FF 4B
 766+ E699 FF 00 00 48
 766+ E69D FF 48 FF 00
 766+ E6A1 00 00 00 00
 766+ E6A5 00 00 00 00
 766+ E6A9 00 00 00 4A
 766+ E6AD FF 4A FF 4A
 766+ E6B1 FF 00 00 00
 766+ E6B5 00 00 00 00
 766+ E6B9 00 00 00 00
 766+ E6BD 00 00 00 00
 766+ E6C1 00 00 00 48
 767+ E6C5 FF 00 00 00                        DB	$FF, 	$00, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$4B, 	$FF, 	$49, 	$FF
 767+ E6C9 00 4A FF 00
 767+ E6CD 00 00 00 4B
 767+ E6D1 FF 4B FF 00
 767+ E6D5 00 4B FF 49
 767+ E6D9 FF
 768+ E6DA 00 44 46 00  BlueDanube2:          DB 	$00, 	$44, 	$46, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$46, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$44, 	$46, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 768+ E6DE 00 44 FF 44
 768+ E6E2 FF 44 FF 44
 768+ E6E6 FF 44 46 00
 768+ E6EA 00 43 FF 43
 768+ E6EE FF 43 FF 43
 768+ E6F2 FF 43 44 46
 768+ E6F6 00 00 00 44
 768+ E6FA 00 00 00 00
 768+ E6FE 00 44 00 00
 768+ E702 00 00 00 44
 768+ E706 00 00 00 00
 768+ E70A 00 00 00 00
 768+ E70E 00 00 00 00
 768+ E712 00 00 00 00
 768+ E716 00 00 00 00
 769+ E71A 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$46, 	$00, 	$46, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$46, 	$FF, 	$46, 	$FF, 	$00, 	$00, 	$44, 	$44, 	$00, 	$00, 	$00, 	$00
 769+ E71E 00 00 00 00
 769+ E722 00 00 00 00
 769+ E726 00 00 00 00
 769+ E72A 00 00 00 00
 769+ E72E 00 00 00 00
 769+ E732 00 00 00 00
 769+ E736 46 00 46 00
 769+ E73A 00 00 43 00
 769+ E73E 43 00 00 00
 769+ E742 00 00 00 00
 769+ E746 00 00 00 00
 769+ E74A 00 00 00 00
 769+ E74E 46 FF 46 FF
 769+ E752 00 00 44 44
 769+ E756 00 00 00 00
 770+ E75A 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$46
 770+ E75E 00 00 00 00
 770+ E762 00 00 44 FF
 770+ E766 44 FF 00 00
 770+ E76A 44 FF 44 FF
 770+ E76E 00 00 00 00
 770+ E772 00 00 00 00
 770+ E776 00 00 00 00
 770+ E77A 00 00 00 43
 770+ E77E 00 43 00 00
 770+ E782 00 43 FF 43
 770+ E786 FF 00 00 00
 770+ E78A 00 00 00 00
 770+ E78E 00 00 00 00
 770+ E792 00 00 43 FF
 770+ E796 43 FF 00 46
 771+ E79A FF 46 FF 00                        DB	$FF, 	$46, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44
 771+ E79E 00 00 00 00
 771+ E7A2 00 00 00 00
 771+ E7A6 00 00 00 00
 771+ E7AA 00 48 FF 48
 771+ E7AE FF 00 00 44
 771+ E7B2 FF 44 FF 00
 771+ E7B6 00 00 00 00
 771+ E7BA 00 00 00 00
 771+ E7BE 00 00 00 44
 771+ E7C2 FF 44 FF 44
 771+ E7C6 FF 00 00 00
 771+ E7CA 00 43 FF 00
 771+ E7CE 00 00 00 43
 771+ E7D2 FF 00 00 00
 771+ E7D6 00 00 00 44
 772+ E7DA FF 00 00 00                        DB	$FF, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00
 772+ E7DE 00 44 FF 00
 772+ E7E2 00 00 00 43
 772+ E7E6 FF 43 FF 00
 772+ E7EA 00 43 FF 00
 772+ E7EE 00
 773+ E7EF 00 00 00 00  BlueDanube3:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$41, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 773+ E7F3 00 00 00 41
 773+ E7F7 FF 41 FF 41
 773+ E7FB FF 00 00 00
 773+ E7FF 00 00 00 3B
 773+ E803 FF 3B FF 3B
 773+ E807 FF 00 00 00
 773+ E80B 00 41 00 00
 773+ E80F 00 00 00 3B
 773+ E813 00 00 00 00
 773+ E817 00 00 00 00
 773+ E81B 00 00 00 00
 773+ E81F 00 41 00 00
 773+ E823 00 00 00 3B
 773+ E827 00 00 00 00
 773+ E82B 00 00 00 00
 774+ E82F 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$41, 	$41, 	$00, 	$00, 	$00, 	$00
 774+ E833 00 00 00 00
 774+ E837 00 00 00 00
 774+ E83B 00 00 00 00
 774+ E83F 00 00 00 00
 774+ E843 00 00 00 00
 774+ E847 00 00 00 00
 774+ E84B 43 00 43 00
 774+ E84F 00 00 3B 00
 774+ E853 3B 00 00 00
 774+ E857 00 00 00 00
 774+ E85B 00 00 00 00
 774+ E85F 00 00 00 00
 774+ E863 41 FF 41 FF
 774+ E867 00 00 41 41
 774+ E86B 00 00 00 00
 775+ E86F 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$3B
 775+ E873 00 00 00 00
 775+ E877 00 00 00 00
 775+ E87B 00 00 00 00
 775+ E87F 41 FF 41 FF
 775+ E883 00 00 00 00
 775+ E887 00 00 00 00
 775+ E88B 00 00 00 00
 775+ E88F 00 00 00 00
 775+ E893 00 00 00 00
 775+ E897 00 3B FF 3B
 775+ E89B FF 00 00 00
 775+ E89F 00 00 00 00
 775+ E8A3 00 00 3B FF
 775+ E8A7 FF FF FF FF
 775+ E8AB FF FF 00 3B
 776+ E8AF FF 3B FF 00                        DB	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00
 776+ E8B3 00 00 00 00
 776+ E8B7 00 00 00 00
 776+ E8BB 00 3B FF 00
 776+ E8BF 00 00 00 3B
 776+ E8C3 FF 00 00 00
 776+ E8C7 00 00 00 00
 776+ E8CB 00 00 00 00
 776+ E8CF 00 00 00 00
 776+ E8D3 00 00 00 41
 776+ E8D7 FF 41 FF 41
 776+ E8DB FF 00 00 00
 776+ E8DF 00 00 00 3B
 776+ E8E3 FF 3B FF 00
 776+ E8E7 00 3B FF 00
 776+ E8EB 00 00 00 00
 777+ E8EF 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$3C, 	$FF
 777+ E8F3 00 00 00 00
 777+ E8F7 00 00 00 3B
 777+ E8FB FF 3B FF 00
 777+ E8FF 00 00 00 3C
 777+ E903 FF
 778+ E904 00 00 00 00  BlueDanube4:          DB 	$00, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$36, 	$36, 	$00, 	$00, 	$00, 	$36, 	$00, 	$36, 	$00, 	$00, 	$00, 	$36, 	$00, 	$3A, 	$00, 	$00, 	$00, 	$36, 	$00, 	$38, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3A, 	$00, 	$00
 778+ E908 36 00 00 36
 778+ E90C FF 36 FF 36
 778+ E910 FF 00 00 00
 778+ E914 36 00 00 36
 778+ E918 FF 36 FF 36
 778+ E91C FF 00 00 00
 778+ E920 36 36 00 00
 778+ E924 00 36 00 36
 778+ E928 00 00 00 36
 778+ E92C 00 3A 00 00
 778+ E930 00 36 00 38
 778+ E934 00 00 00 00
 778+ E938 00 36 00 00
 778+ E93C 00 00 00 00
 778+ E940 00 3A 00 00
 779+ E944 00 36 00 00                        DB	$00, 	$36, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00
 779+ E948 00 00 00 00
 779+ E94C 00 00 00 00
 779+ E950 00 00 00 00
 779+ E954 00 00 00 00
 779+ E958 00 00 00 36
 779+ E95C FF 36 FF FF
 779+ E960 FF FF FF FF
 779+ E964 FF FF FF FF
 779+ E968 FF FF 00 00
 779+ E96C 00 00 00 00
 779+ E970 00 00 36 FF
 779+ E974 36 FF FF FF
 779+ E978 FF FF FF FF
 779+ E97C FF FF FF FF
 779+ E980 00 00 00 00
 780+ E984 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$38, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$38, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00
 780+ E988 38 FF FF FF
 780+ E98C FF FF FF FF
 780+ E990 FF FF FF FF
 780+ E994 38 FF 38 FF
 780+ E998 00 00 00 00
 780+ E99C 00 00 00 00
 780+ E9A0 00 38 FF 38
 780+ E9A4 FF FF FF FF
 780+ E9A8 FF FF FF 00
 780+ E9AC 00 00 00 00
 780+ E9B0 00 00 00 00
 780+ E9B4 00 00 00 00
 780+ E9B8 00 36 36 FF
 780+ E9BC FF FF FF FF
 780+ E9C0 FF FF 00 00
 781+ E9C4 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 781+ E9C8 00 00 00 00
 781+ E9CC 00 00 00 36
 781+ E9D0 FF 38 FF 00
 781+ E9D4 00 00 00 00
 781+ E9D8 00 00 00 00
 781+ E9DC 00 00 00 00
 781+ E9E0 00 00 00 00
 781+ E9E4 00 00 00 38
 781+ E9E8 FF 38 FF 00
 781+ E9EC 00 00 00 00
 781+ E9F0 00 00 00 36
 781+ E9F4 FF 00 00 36
 781+ E9F8 FF 36 FF 36
 781+ E9FC FF 00 00 00
 781+ EA00 00 00 00 00
 782+ EA04 00 00 00 38                        DB	$00, 	$00, 	$00, 	$38, 	$FF, 	$00, 	$00, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 782+ EA08 FF 00 00 36
 782+ EA0C FF 00 00 00
 782+ EA10 00 00 00 00
 782+ EA14 00 00 00 00
 782+ EA18 00
 783+ EA19 00 00 00 00  BlueDanube5:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$34, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$00, 	$34, 	$00, 	$00, 	$00, 	$31
 783+ EA1D 00 00 00 00
 783+ EA21 00 00 00 00
 783+ EA25 00 00 00 00
 783+ EA29 00 00 00 00
 783+ EA2D 00 00 00 00
 783+ EA31 00 00 00 00
 783+ EA35 00 00 00 00
 783+ EA39 00 00 00 00
 783+ EA3D 00 00 00 00
 783+ EA41 00 00 00 00
 783+ EA45 00 00 00 00
 783+ EA49 00 00 00 34
 783+ EA4D 00 00 00 00
 783+ EA51 00 33 00 34
 783+ EA55 00 00 00 31
 784+ EA59 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$34, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 784+ EA5D 00 00 00 34
 784+ EA61 00 00 00 00
 784+ EA65 00 31 00 00
 784+ EA69 00 00 00 00
 784+ EA6D 00 33 FF 00
 784+ EA71 00 33 FF 00
 784+ EA75 00 00 00 00
 784+ EA79 00 00 00 00
 784+ EA7D 00 00 00 00
 784+ EA81 00 00 00 00
 784+ EA85 33 FF 00 00
 784+ EA89 31 FF 00 00
 784+ EA8D 00 00 00 00
 784+ EA91 00 00 00 00
 784+ EA95 00 00 00 00
 785+ EA99 00 00 31 FF                        DB	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$31, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$33, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$33, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$33
 785+ EA9D 00 00 31 00
 785+ EAA1 00 00 00 00
 785+ EAA5 00 00 00 00
 785+ EAA9 00 00 31 FF
 785+ EAAD 00 00 00 00
 785+ EAB1 00 00 00 31
 785+ EAB5 FF 00 00 33
 785+ EAB9 FF FF FF FF
 785+ EABD FF FF FF 00
 785+ EAC1 00 00 00 00
 785+ EAC5 00 00 00 00
 785+ EAC9 00 00 00 33
 785+ EACD FF 00 33 FF
 785+ EAD1 FF FF FF FF
 785+ EAD5 FF FF 00 33
 786+ EAD9 FF 33 FF 00                        DB	$FF, 	$33, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$34, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$31, 	$FF, 	$34, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$35, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$33, 	$FF, 	$00
 786+ EADD 00 00 00 00
 786+ EAE1 00 33 FF 00
 786+ EAE5 00 34 FF 00
 786+ EAE9 00 00 00 00
 786+ EAED 00 00 00 00
 786+ EAF1 00 00 00 00
 786+ EAF5 00 31 FF 31
 786+ EAF9 FF 34 FF 00
 786+ EAFD 00 00 00 00
 786+ EB01 00 00 00 00
 786+ EB05 00 35 FF 00
 786+ EB09 00 00 00 00
 786+ EB0D 00 00 00 00
 786+ EB11 00 00 00 33
 786+ EB15 FF 33 FF 00
 787+ EB19 00 31 FF 00                        DB	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 787+ EB1D 00 00 00 00
 787+ EB21 00 00 00 00
 787+ EB25 00 00 00 00
 787+ EB29 00 00 00 00
 787+ EB2D 00
 788+ EB2E 00 00 00 00  BlueDanube6:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 788+ EB32 00 00 00 00
 788+ EB36 00 00 00 00
 788+ EB3A 00 00 00 00
 788+ EB3E 00 00 00 00
 788+ EB42 00 00 00 00
 788+ EB46 00 00 00 00
 788+ EB4A 00 00 00 00
 788+ EB4E 00 00 00 00
 788+ EB52 00 00 00 00
 788+ EB56 00 00 00 00
 788+ EB5A 00 00 00 00
 788+ EB5E 00 00 00 00
 788+ EB62 00 00 00 00
 788+ EB66 00 00 00 00
 788+ EB6A 00 00 00 00
 789+ EB6E 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF
 789+ EB72 00 00 00 00
 789+ EB76 00 00 00 00
 789+ EB7A 00 00 00 00
 789+ EB7E 00 00 00 2B
 789+ EB82 FF 00 00 00
 789+ EB86 00 2B FF 00
 789+ EB8A 00 00 00 00
 789+ EB8E 00 00 00 00
 789+ EB92 00 00 00 00
 789+ EB96 2B FF 2B FF
 789+ EB9A 00 00 00 00
 789+ EB9E 2A FF 00 00
 789+ EBA2 00 00 00 00
 789+ EBA6 00 00 00 00
 789+ EBAA 00 00 2A FF
 790+ EBAE 2A FF 00 00                        DB	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF, 	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 790+ EBB2 00 00 00 00
 790+ EBB6 00 00 00 00
 790+ EBBA 00 00 00 00
 790+ EBBE 00 00 00 00
 790+ EBC2 00 00 00 2A
 790+ EBC6 FF 2A FF 00
 790+ EBCA 00 00 00 2B
 790+ EBCE FF FF FF FF
 790+ EBD2 FF FF FF 00
 790+ EBD6 00 00 00 00
 790+ EBDA 00 00 00 2B
 790+ EBDE FF 2B FF 00
 790+ EBE2 00 00 00 00
 790+ EBE6 00 00 00 00
 790+ EBEA 00 00 00 00
 791+ EBEE 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 791+ EBF2 00 2B FF 2B
 791+ EBF6 FF 00 00 00
 791+ EBFA 00 00 00 00
 791+ EBFE 00 00 00 00
 791+ EC02 00 00 00 00
 791+ EC06 00 00 00 00
 791+ EC0A 00 00 00 00
 791+ EC0E 00 00 00 00
 791+ EC12 00 00 00 00
 791+ EC16 00 00 00 00
 791+ EC1A 00 00 00 00
 791+ EC1E 00 2B FF 00
 791+ EC22 00 00 00 00
 791+ EC26 00 00 00 00
 791+ EC2A 00 00 00 00
 792+ EC2E 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 792+ EC32 00 00 00 00
 792+ EC36 00 2B FF 00
 792+ EC3A 00 00 00 00
 792+ EC3E 00 00 00 00
 792+ EC42 00
 793+ EC43
# file closed: ./Hardware/sound.asm
1119  EC43                                      DISPLAY "Sound ",BankSound," - Bytes free ",/D, $2000 - ($-SoundAddr), " - BankSound"
1120  EC43
1121  EC43                  SAVENEX OPEN "EliteN.nex", EliteNextStartup , TopOfStack
1122  EC43                  SAVENEX CFG  0,0,0,1
1123  EC43                  SAVENEX AUTO
1124  EC43                  SAVENEX CLOSE
1125  EC43
# file closed: eliteNext.asm
