# file opened: eliteNext.asm
   1  0000               DEVICE ZXSPECTRUMNEXT
   2  0000               DEFINE  DOUBLEBUFFER 1
   3  0000               CSPECTMAP eliteN.map
   4  0000               OPT --zxnext=cspect --syntax=a --reversepop
   5  0000
   6  0000              DEBUGSEGSIZE   equ 1
   7  0000              DEBUGLOGSUMMARY equ 1
   8  0000              ;DEBUGLOGDETAIL equ 1
   9  0000
  10  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  11  0000              ; Game Defines
  12  0000              ScreenLocal      EQU 0
  13  0000              ScreenGalactic   EQU ScreenLocal + 1
  14  0000              ScreenMarket     EQU ScreenGalactic + 1
  15  0000              ScreenMarketDsp  EQU ScreenMarket + 1
  16  0000              ScreenStatus     EQU ScreenMarketDsp + 1
  17  0000              ScreenInvent     EQU ScreenStatus + 1
  18  0000              ScreenPlanet     EQU ScreenInvent + 1
  19  0000              ScreenEquip      EQU ScreenPlanet + 1
  20  0000              ScreenLaunch     EQU ScreenEquip + 1
  21  0000              ScreenFront      EQU ScreenLaunch + 1
  22  0000              ScreenAft        EQU ScreenFront+1
  23  0000              ScreenLeft       EQU ScreenAft+1
  24  0000              ScreenRight      EQU ScreenLeft+1
  25  0000              ScreenDocking    EQU ScreenRight+1
  26  0000              ScreenHyperspace EQU ScreenDocking+1
  27  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  28  0000              ; Colour Defines
  29  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
   3+ 0000              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
   4+ 0000              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
   5+ 0000              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
   6+ 0000              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
   7+ 0000              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
   8+ 0000              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
   9+ 0000              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
  10+ 0000              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
  11+ 0000              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
  12+ 0000              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
  13+ 0000              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
  14+ 0000              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
  15+ 0000              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
  16+ 0000              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
  17+ 0000              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
  18+ 0000              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
  19+ 0000              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
  20+ 0000              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
  21+ 0000              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
  22+ 0000              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
  23+ 0000              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
  24+ 0000              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
  25+ 0000
  26+ 0000
  27+ 0000              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
  28+ 0000              L2ColourWHITE_2         EQU 146
  29+ 0000              L2ColourGREY_1		    EQU L2ColourWHITE_2
  30+ 0000              L2ColourGREY_2		    EQU 109
  31+ 0000              L2ColourGREY_3		    EQU  73
  32+ 0000              L2ColourGREY_4		    EQU  37
  33+ 0000
  34+ 0000              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
  35+ 0000              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
  36+ 0000              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
  37+ 0000              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
  38+ 0000              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
  39+ 0000
  40+ 0000              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
  41+ 0000              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
  42+ 0000              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
  43+ 0000              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
  44+ 0000              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
  45+ 0000              L2ColourORANGE_1        EQU 236                 ; RGB
  46+ 0000              L2ColourORANGE_2        EQU 168                 ; RGB
  47+ 0000              L2ColourORANGE_3        EQU  68                 ; RGB
  48+ 0000              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
  49+ 0000              L2ColourCYAN_2          EQU  18                 ; RGB
  50+ 0000              L2ColourCYAN_3          EQU   9                 ; RGB
  51+ 0000              L2ColourPURPLE_1        EQU 109                 ; RGB
  52+ 0000              L2ColourPURPLE_2        EQU  66                 ; RGB
  53+ 0000              L2ColourPURPLE_3        EQU  33                 ; RGB
  54+ 0000              L2ColourPINK_1		    EQU 231                 ; RGB
  55+ 0000              L2ColourPINK_2		    EQU 226                 ; RGB
  56+ 0000              L2ColourPINK_3		    EQU 225                 ; RGB
  57+ 0000              L2ColourPINK_4		    EQU 224                 ; RGB
  58+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  30  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  31  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  32  0000              ; Total screen list
  33  0000              ; Local Chart
  34  0000              ; Galactic Chart
  35  0000              ; Market Prices
  36  0000              ; Inventory
  37  0000              ; Comander status
  38  0000              ; System Data
  39  0000              ; Mission Briefing
  40  0000              ; missio completion
  41  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  42  0000              ; Pause Menu (only place you can load from )
  43  0000              ; byint and selling equipment
  44  0000              ; bying and selling stock
  45  0000
  46  0000                                      INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              IO_LAYER2_PORT                          EQU $123B
   2+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
   3+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
   4+ 0000              REGISTER_NUMBER_PORT					EQU $243B
   5+ 0000              REGISTER_VALUE_PORT						EQU $253B
   6+ 0000              SPRITE_SLOT_PORT						EQU $303B
   7+ 0000              SPRITE_INFO_PORT                        EQU $0057
   8+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
   9+ 0000
  10+ 0000              MACHINE_ID_REGISTER						EQU 0
  11+ 0000              VERSION_REGISTER						EQU 1
  12+ 0000              RESET_REGISTER		    				EQU 2
  13+ 0000              MACHINE_TYPE_REGISTER					EQU 3
  14+ 0000              PAGE_RAM_REGISTER						EQU 4
  15+ 0000              PERIPHERAL_1_REGISTER					EQU 5
  16+ 0000              PERIPHERAL_2_REGISTER					EQU 6
  17+ 0000              TURBO_MODE_REGISTER						EQU 7
  18+ 0000              PERIPHERAL_3_REGISTER					EQU 8
  19+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 10
  20+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
  21+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
  22+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
  23+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
  24+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
  25+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
  26+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
  27+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
  28+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
  29+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
  30+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
  31+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
  32+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
  33+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
  34+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
  35+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
  36+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
  37+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
  38+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
  39+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
  40+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
  41+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
  42+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
  43+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
  44+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
  45+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
  46+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
  47+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
  48+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
  49+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
  50+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
  51+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
  52+ 0000              PALETTE_INDEX_REGISTER					EQU 64
  53+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
  54+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
  55+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
  56+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
  57+ 0000              MMU_SLOT_0_REGISTER						EQU 80
  58+ 0000              MMU_SLOT_1_REGISTER						EQU 81
  59+ 0000              MMU_SLOT_2_REGISTER						EQU 82
  60+ 0000              MMU_SLOT_3_REGISTER						EQU 83
  61+ 0000              MMU_SLOT_4_REGISTER						EQU 84
  62+ 0000              MMU_SLOT_5_REGISTER						EQU 85
  63+ 0000              MMU_SLOT_6_REGISTER						EQU 86
  64+ 0000              MMU_SLOT_7_REGISTER						EQU 87
  65+ 0000              COPPER_DATA_REGISTER					EQU 96
  66+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
  67+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
  68+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
  69+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
  70+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
  71+ 0000              DEBUG_LEDS_REGISTER						EQU 255
  72+ 0000
  73+ 0000
  74+ 0000              GetNextReg:	MACRO register
  75+ 0000 ~                        push bc
  76+ 0000 ~                            ld bc,$243B
  77+ 0000 ~                                ld a,register
  78+ 0000 ~                                out (c),a
  79+ 0000 ~                                inc b
  80+ 0000 ~                            in a,(c)
  81+ 0000 ~                        pop bc
  82+ 0000                          ENDM
  83+ 0000
# file closed: ./Hardware/register_defines.asm
  47  0000                                      INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000              IO_DATAGEAR_DMA_PORT 		 equ 107
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ $01
  21+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  22+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  23+ 0000
  24+ 0000              LAYER2_SCREEN_BANK1          equ 8
  25+ 0000              LAYER2_SCREEN_BANK2          equ 9
  26+ 0000              LAYER2_SCREEN_BANK3          equ 10
  27+ 0000              LAYER2_SHADOW_BANK1          equ 11
  28+ 0000              LAYER2_SHADOW_BANK2          equ 12
  29+ 0000              LAYER2_SHADOW_BANK3          equ 13
  30+ 0000
  31+ 0000              SCREEN_HEIGHT 				 equ 192
  32+ 0000              SCREEN_RAM_BASE				 equ $0000
  33+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  34+ 0000
  35+ 0000              SPRITES_VISIBLE_MASK         equ $01
  36+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  37+ 0000              LAYER_PRIORITIES_MASK        equ $07
  38+ 0000              LORES_MODE_MASK              equ $80
  39+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  40+ 0000
  41+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  42+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  43+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  44+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  45+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  46+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  47+ 0000
  48+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  49+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  50+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  51+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  52+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  53+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  54+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  55+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  56+ 0000              DMA_WR4_CONT_MODE            equ $AD
  57+ 0000              DMA_RESET                    equ $c3
  58+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  59+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  60+ 0000              DMA_LOAD                     equ $cf
  61+ 0000              DMA_CONTINUE                 equ $d3
  62+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  63+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  64+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  65+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  66+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  67+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  68+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  69+ 0000              DMA_FORCE_READY              equ $b3
  70+ 0000              DMA_STOP_AT_END			     equ $82
  71+ 0000              DMA_DISABLE                  equ $83
  72+ 0000              DMA_ENABLE                   equ $87
  73+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  74+ 0000              DMA_BURST                    equ $cd
  75+ 0000              DMA_CONTINUOUS               equ $ad
  76+ 0000              ZXN_DMA_PORT                 equ $6b
  77+ 0000
  78+ 0000
  79+ 0000              COLOUR_TRANSPARENT			 equ $E3
  80+ 0000
  81+ 0000
  82+ 0000
  83+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  48  0000                                      INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              membank1 			    equ $2000
   9+ 0000              membank2 			    equ $4000
  10+ 0000              membank3 			    equ $6000
  11+ 0000              membank4 			    equ $8000
  12+ 0000              membank5 			    equ $a000
  13+ 0000              membank6 			    equ $c000
  14+ 0000              ScreenBank              equ $c000
  15+ 0000              MenuGalChtAddr          equ $c000
  16+ 0000              MenuEquipSAddr          equ $c000
  17+ 0000              MenuInventAddr          equ $c000
  18+ 0000              MenuMarketAddr          equ $c000
  19+ 0000              DispMarketAddr          equ $c000
  20+ 0000              MenuShrChtAddr          equ $c000
  21+ 0000              MenuStatusAddr          equ $c000
  22+ 0000              MenuSystemAddr          equ $c000
  23+ 0000              ViewFrontAddr           equ $c000
  24+ 0000              SunBankAddr             equ $c000
  25+ 0000              PlanetBankAddr          equ $c000
  26+ 0000              UniverseBankAddr	    equ $c000
  27+ 0000              LaunchShipAddr          equ $c000
  28+ 0000              membank7 			    equ $e000
  29+ 0000              L1membankAddr   	    equ $e000
  30+ 0000              L2membankAddr   	    equ $e000
  31+ 0000              ShipModelsAddr	        equ $e000
  32+ 0000              SpritemembankAddr       equ $e000
  33+ 0000              ResetUniverseAddr       equ $e000
  34+ 0000              StockTableAddr	        equ $e000
  35+ 0000              CMDRDATAAddr            equ $e000
  36+ 0000              LAYER2Addr              equ $e000
  37+ 0000              LAYER1Addr              equ $e000
  38+ 0000              SPRITEAddr              equ $e000
  39+ 0000              ConsoleImageAddr        equ $e000
  40+ 0000              GalaxyDataAddr          equ $e000
  41+ 0000
  42+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  43+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  44+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  45+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  46+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  47+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  48+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  49+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  50+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  51+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  52+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  53+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  54+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  55+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  56+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  57+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  58+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  59+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  60+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  61+ 0000              CmdrDataMMU			    equ MMU_SLOT_7_REGISTER
  62+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  63+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  64+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  65+ 0000
  66+ 0000              BankResetUniv           equ 49
  67+ 0000              BankMenuShrCht          equ 50
  68+ 0000              BankMenuGalCht          equ 51
  69+ 0000              BankMenuInvent          equ 52
  70+ 0000              BankMenuSystem          equ 53
  71+ 0000              BankMenuMarket          equ 54
  72+ 0000              BankStockTable          equ 55
  73+ 0000              BankCmdrData            equ 56
  74+ 0000              BankLAYER2              equ 57
  75+ 0000              BankLAYER1              equ 58
  76+ 0000              BankShipModels1         equ 59
  77+ 0000              BankSPRITE              equ 60
  78+ 0000              BankConsole             equ 61
  79+ 0000              BankFrontView           equ 62
  80+ 0000              BankMenuStatus          equ 63
  81+ 0000              BankMenuEquipS          equ 64
  82+ 0000              BankLaunchShip          equ 65
  83+ 0000              BankDispMarket          equ 66
  84+ 0000              BankShipModels2         equ 67
  85+ 0000              BankShipModels3         equ 68
  86+ 0000              BankShipModels4         equ 69
  87+ 0000
  88+ 0000              BankUNIVDATA0           equ 70
  89+ 0000              BankUNIVDATA1           equ 71
  90+ 0000              BankUNIVDATA2           equ 72
  91+ 0000              BankUNIVDATA3           equ 73
  92+ 0000              BankUNIVDATA4           equ 74
  93+ 0000              BankUNIVDATA5           equ 75
  94+ 0000              BankUNIVDATA6           equ 76
  95+ 0000              BankUNIVDATA7           equ 77
  96+ 0000              BankUNIVDATA8           equ 78
  97+ 0000              BankUNIVDATA9           equ 79
  98+ 0000              BankUNIVDATA10          equ 80
  99+ 0000              BankUNIVDATA11          equ 81
 100+ 0000              BankUNIVDATA12          equ 82
 101+ 0000              BankSunData             equ 83
 102+ 0000              BankPlanetData          equ 84
 103+ 0000
 104+ 0000              BankGalaxyData0         equ 91
 105+ 0000              BankGalaxyData1         equ 92
 106+ 0000              BankGalaxyData2         equ 93
 107+ 0000              BankGalaxyData3         equ 94
 108+ 0000              BankGalaxyData4         equ 95
 109+ 0000              BankGalaxyData5         equ 96
 110+ 0000              BankGalaxyData6         equ 97
 111+ 0000              BankGalaxyData7         equ 98
 112+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  49  0000                                      INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: ./Hardware/screen_equates.asm
  50  0000                                      INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	    equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	    equ 1
   3+ 0000              MissileLockHiOffset	    equ 2
   4+ 0000              EdgeAddyOffset		    equ 3
   5+ 0000              LineX4Offset		    equ 5
   6+ 0000              GunVertexOffset		    equ 6
   7+ 0000              ExplosionCtOffset	    equ 7
   8+ 0000              VertexCtX6Offset	    equ 8
   9+ 0000              EdgeCountOffset		    equ 9
  10+ 0000              BountyLoOffset		    equ 10
  11+ 0000              BountyHiOffset		    equ 11
  12+ 0000              FaceCtX4Offset		    equ 12
  13+ 0000              DotOffset			    equ 13
  14+ 0000              EnergyOffset		    equ 14
  15+ 0000              SpeedOffset			    equ 15
  16+ 0000              FaceAddyOffset		    equ 16
  17+ 0000              QOffset				    equ 18
  18+ 0000              LaserOffset			    equ 19
  19+ 0000              VerticiesAddyOffset     equ 20
  20+ 0000              ShipTypeOffset          equ 22
  21+ 0000              ShipNewBitsOffset       equ 23
  22+ 0000              ShipDataLength          equ ShipNewBitsOffset+1
  23+ 0000
  24+ 0000              CobraTablePointer       equ 43
  25+ 0000              ;29 faulty
  26+ 0000              BankThreshold           equ 16
  27+ 0000
  28+ 0000              ShipTableALast          equ 23
  29+ 0000              ShipTableBLast          equ 39
  30+ 0000              ShipTableCLast          equ 55
  31+ 0000
# file closed: ./Data/ShipModelEquates.asm
  51  0000                                      INCLUDE "./Macros/callMacros.asm"
# file opened: ./Macros/callMacros.asm
   1+ 0000
   2+ 0000              CallIfAGTENusng:        MACRO   reg,target
   3+ 0000 ~                                    cp      reg
   4+ 0000 ~                                    call	nc,target
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              CallIfAGTEMemusng:      MACRO   reg,target
   8+ 0000 ~                                    ld      hl,reg
   9+ 0000 ~                                    cp      (hl)
  10+ 0000 ~                                    call	nc,target
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              CallIfALTNusng:         MACRO   reg,target
  14+ 0000 ~                                    cp      reg
  15+ 0000 ~                                    call	c,target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  19+ 0000 ~                                    ld   a,(mem)
  20+ 0000 ~                                    ld   hl,address
  21+ 0000 ~                                    cp   (hl)
  22+ 0000 ~                                    call    z,target
  23+ 0000                                      ENDM
  24+ 0000
# file closed: ./Macros/callMacros.asm
  52  0000                                      INCLUDE "./Macros/carryFlagMacros.asm"
# file opened: ./Macros/carryFlagMacros.asm
   1+ 0000
   2+ 0000              SetCarryFlag:           MACRO
   3+ 0000 ~                                    scf
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearCarryFlag:	        MACRO
   7+ 0000 ~                                    or a
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              FlipCarryFlag:          MACRO
  11+ 0000 ~                                    ccf
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ./Macros/carryFlagMacros.asm
  53  0000                                      INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ./Macros/CopyByteMacros.asm
  54  0000                                      INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		            MACRO
   2+ 0000 ~                                    xor a
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000
   6+ 0000              ldCopyTextAtHLtoDE:     MACRO
   7+ 0000 ~            .CopyLoop:              ld      a,(hl)
   8+ 0000 ~                                    ld      (de),a
   9+ 0000 ~                                    cp      0
  10+ 0000 ~                                    ret     z
  11+ 0000 ~                                    inc     hl
  12+ 0000 ~                                    inc     de
  13+ 0000 ~                                    jr      .CopyLoop
  14+ 0000                                      ENDM
  15+ 0000
  16+ 0000              ldClearTextLoop:        MACRO   TextSize
  17+ 0000 ~                                    ld      b,a
  18+ 0000 ~                                    ld      a,TextSize
  19+ 0000 ~            .ClearLoop:             ld      (hl),a
  20+ 0000 ~                                    inc     hl
  21+ 0000 ~                                    djnz    .ClearLoop
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              ldCopyByte:             MACRO memfrom, memto
  25+ 0000 ~                                    ld       a,(memfrom)
  26+ 0000 ~                                    ld       (memto),a
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000
  30+ 0000              ldCopyByteABS:          MACRO memfrom, memto
  31+ 0000 ~                                    ld       a,(memfrom)
  32+ 0000 ~                                    and		$7F
  33+ 0000 ~                                    ld       (memto),a
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ldCopy2Byte             MACRO  memfrom, memto
  37+ 0000 ~                                    ld       hl,(memfrom)
  38+ 0000 ~                                    ld       (memto),hl
  39+ 0000                                      ENDM
  40+ 0000
  41+ 0000              ldWriteConst            MACRO  memfrom, memto
  42+ 0000 ~                                    ld       a,memfrom
  43+ 0000 ~                                    ld       (memto),a
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ldWriteZero             MACRO  memto
  47+ 0000 ~                                    xor      a
  48+ 0000 ~                                    ld       (memto),a
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ldIXLaFromN:	        MACRO memfrom
  52+ 0000 ~                                    ld		a,(memfrom)
  53+ 0000 ~                                    ld		ixl,a
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              ldIXHaFromN:	        MACRO memfrom
  57+ 0000 ~                                    ld		a,(memfrom)
  58+ 0000 ~                                    ld		ixh,a
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              ldIYLaFromN:	        MACRO memfrom
  62+ 0000 ~                                    ld		a,(memfrom)
  63+ 0000 ~                                    ld		iyl,a
  64+ 0000                                      ENDM
  65+ 0000
  66+ 0000              ldIYHaFromN:	        MACRO memfrom
  67+ 0000 ~                                    ld		a,(memfrom)
  68+ 0000 ~                                    ld		iyh,a
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              ldhlde:			        MACRO
  72+ 0000 ~                                    ld		h,d
  73+ 0000 ~                                    ld		l,e
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              ldhlbc:			        MACRO
  77+ 0000 ~                                    ld		h,b
  78+ 0000 ~                                    ld		l,c
  79+ 0000                                      ENDM
  80+ 0000
  81+ 0000              ldbcde:			        MACRO
  82+ 0000 ~                                    ld		b,d
  83+ 0000 ~                                    ld		c,e
  84+ 0000                                      ENDM
  85+ 0000
  86+ 0000              lddebc:			        MACRO
  87+ 0000 ~                                    ld		d,b
  88+ 0000 ~                                    ld		e,c
  89+ 0000                                      ENDM
  90+ 0000
  91+ 0000              ldbchl:			        MACRO
  92+ 0000 ~                                    ld		b,h
  93+ 0000 ~                                    ld		c,l
  94+ 0000                                      ENDM
  95+ 0000
  96+ 0000              lddeiy:			        MACRO
  97+ 0000 ~                                    ld		d,iyh
  98+ 0000 ~                                    ld		e,iyl
  99+ 0000                                      ENDM
 100+ 0000
 101+ 0000              ldiyde:			        MACRO
 102+ 0000 ~                                    ld		iyh,d
 103+ 0000 ~                                    ld		iyl,e
 104+ 0000                                      ENDM
 105+ 0000
 106+ 0000
 107+ 0000              FourLDIInstrunctions:   MACRO
 108+ 0000 ~                                    ldi
 109+ 0000 ~                                    ldi
 110+ 0000 ~                                    ldi
 111+ 0000 ~                                    ldi
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              FiveLDIInstrunctions:   MACRO
 115+ 0000 ~                                    ldi
 116+ 0000 ~                                    ldi
 117+ 0000 ~                                    ldi
 118+ 0000 ~                                    ldi
 119+ 0000 ~                                    ldi
 120+ 0000                                      ENDM
 121+ 0000
 122+ 0000              SixLDIInstrunctions:    MACRO
 123+ 0000 ~                                    ldi
 124+ 0000 ~                                    ldi
 125+ 0000 ~                                    ldi
 126+ 0000 ~                                    ldi
 127+ 0000 ~                                    ldi
 128+ 0000 ~                                    ldi
 129+ 0000                                      ENDM
 130+ 0000
 131+ 0000              EightLDIInstrunctions:  MACRO
 132+ 0000 ~            		                ldi
 133+ 0000 ~            		                ldi
 134+ 0000 ~            		                ldi
 135+ 0000 ~            		                ldi
 136+ 0000 ~            		                ldi
 137+ 0000 ~            		                ldi
 138+ 0000 ~            		                ldi
 139+ 0000 ~            		                ldi
 140+ 0000                                      ENDM
 141+ 0000
 142+ 0000              NineLDIInstrunctions:  MACRO
 143+ 0000 ~            		                ldi
 144+ 0000 ~            		                ldi
 145+ 0000 ~            		                ldi
 146+ 0000 ~            		                ldi
 147+ 0000 ~            		                ldi
 148+ 0000 ~            		                ldi
 149+ 0000 ~            		                ldi
 150+ 0000 ~            		                ldi
 151+ 0000 ~            		                ldi
 152+ 0000                                      ENDM
# file closed: ./Macros/ldCopyMacros.asm
  55  0000                                      INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              GetByteAInTable:    MACRO table
   2+ 0000 ~                                ld          hl,table
   3+ 0000 ~                                add         hl,a
   4+ 0000 ~                                ld          a,(hl)
   5+ 0000                                  ENDM
   6+ 0000
   7+ 0000              HLWordAInTable:     MACRO table
   8+ 0000 ~                                ld          hl,table
   9+ 0000 ~                                sla         a
  10+ 0000 ~                                add         hl,a
  11+ 0000 ~                                ld          a,(hl)
  12+ 0000 ~                                inc         hl
  13+ 0000 ~                                ld          h,(hl)
  14+ 0000 ~                                ld          l,a
  15+ 0000                                  ENDM
  16+ 0000
  17+ 0000
  18+ 0000              ldAToHLixl:			MACRO value
  19+ 0000 ~            					ld          hl,value
  20+ 0000 ~            					ex          af,af'
  21+ 0000 ~            					ld          a,ixl
  22+ 0000 ~            					add         hl,a
  23+ 0000 ~            					ex          af,af'
  24+ 0000 ~            					ld          (hl),a
  25+ 0000              					ENDM
  26+ 0000
  27+ 0000              ldAToHLiyl:			MACRO value
  28+ 0000 ~            					ld          hl,value
  29+ 0000 ~            					ex          af,af'
  30+ 0000 ~            					ld          a,iyl
  31+ 0000 ~            					add         hl,a
  32+ 0000 ~            					ex          af,af'
  33+ 0000 ~            					ld          (hl),a
  34+ 0000              					ENDM
  35+ 0000
  36+ 0000
  37+ 0000              ldHLixlToA:         MACRO value
  38+ 0000 ~                                ld          hl,value
  39+ 0000 ~                                ex          af,af'
  40+ 0000 ~                                ld          a,ixl
  41+ 0000 ~                                add         hl,a
  42+ 0000 ~                                ld          a,(hl)
  43+ 0000                                  ENDM
  44+ 0000
  45+ 0000              ldHLiylToA:         MACRO value
  46+ 0000 ~                                ld          hl,value
  47+ 0000 ~                                ex          af,af'
  48+ 0000 ~                                ld          a,iyl
  49+ 0000 ~                                add         hl,a
  50+ 0000 ~                                ld          a,(hl)
  51+ 0000                                  ENDM
  52+ 0000
  53+ 0000              ldHLIdxAToA:        MACRO value
  54+ 0000 ~                                ld          hl,value
  55+ 0000 ~                                add         hl,a
  56+ 0000 ~                                ld          a,(hl)
  57+ 0000                                  ENDM
  58+ 0000
  59+ 0000              HLEquAddrAtHLPlusA: MACRO
  60+ 0000 ~                                sla         a
  61+ 0000 ~                                add         hl,a
  62+ 0000 ~                                ld          a,(hl)
  63+ 0000 ~                                inc         hl
  64+ 0000 ~                                ld          h,(hl)
  65+ 0000 ~                                ld          l,a
  66+ 0000                                  ENDM
# file closed: ./Macros/ldIndexedMacros.asm
  56  0000                                      INCLUDE "./Macros/jumpMacros.asm"
# file opened: ./Macros/jumpMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p, target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m, target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000
  10+ 0000              JumpIfUnderflow:	    MACRO target
  11+ 0000 ~                                    jp		po, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000              JumpIfOverflow:	        MACRO target
  15+ 0000 ~                                    jp		po, target
  16+ 0000                                      ENDM
  17+ 0000              ;.. Bit routines
  18+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  19+ 0000 ~                                    ld      a,(mem)
  20+ 0000 ~                                    bit 	bitnbr,a
  21+ 0000 ~                                    jp      nz,target
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  25+ 0000 ~                                    ld      a,(mem)
  26+ 0000 ~                                    bit 	bitnbr,a
  27+ 0000 ~                                    jp      z,target
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000
  31+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
  32+ 0000 ~                                    bit 	bitnbr,reg
  33+ 0000 ~                                    jp      nz,target
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
  37+ 0000 ~                                    bit 	bitnbr,reg
  38+ 0000 ~                                    jp      z,target
  39+ 0000                                      ENDM
  40+ 0000
  41+ 0000              ; Comparison Routines
  42+ 0000              JumpIfAGTEusng:         MACRO
  43+ 0000 ~                                    jp		nc,target
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              JumpIfAGTENusng:        MACRO reg,target
  47+ 0000 ~                                    cp     reg
  48+ 0000 ~                                    jp		nc,target
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
  52+ 0000 ~                                    ld      hl,mem
  53+ 0000 ~                                    cp      (hl)
  54+ 0000 ~                                    jp		nc,target
  55+ 0000                                      ENDM
  56+ 0000
  57+ 0000              JumpIfALTMemusng:       MACRO mem,target
  58+ 0000 ~                                    ld      hl,mem
  59+ 0000 ~                                    cp      (hl)
  60+ 0000 ~                                    jp		c,target
  61+ 0000                                      ENDM
  62+ 0000
  63+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
  64+ 0000 ~                                    ld     a,(mem)
  65+ 0000 ~                                    cp     value
  66+ 0000 ~                                    jp	  nc,target
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
  70+ 0000 ~                                    ld   a,(mem)
  71+ 0000 ~                                    ld   hl,address
  72+ 0000 ~                                    cp   (hl)
  73+ 0000 ~                                    jp	  nc,target
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
  77+ 0000 ~                                    ld   a,(mem)
  78+ 0000 ~                                    ld   hl,address
  79+ 0000 ~                                    cp   (hl)
  80+ 0000 ~                                    jp	  z,target
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000              JumpIfALTusng:          MACRO target
  84+ 0000 ~                                    jp		c,target
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000              JumpIfALTNusng:         MACRO value, target
  88+ 0000 ~                                    cp      value
  89+ 0000 ~                                    jp		c, target
  90+ 0000                                      ENDM
  91+ 0000
  92+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
  93+ 0000 ~                                    ld      a,(mem)
  94+ 0000 ~                                    cp      value
  95+ 0000 ~                                    jp	  c,target
  96+ 0000                                      ENDM
  97+ 0000
  98+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
  99+ 0000 ~                                    ld    a,(mem)
 100+ 0000 ~                                    ld    hl,value
 101+ 0000 ~                                    cp    (hl)
 102+ 0000 ~                                    jp	  c,target
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 106+ 0000 ~                                    ld  a,(mem)
 107+ 0000 ~                                    cp  value
 108+ 0000 ~                                    jp  z,target
 109+ 0000                                      ENDM
 110+ 0000
 111+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 112+ 0000 ~                                    ld  a,(mem)
 113+ 0000 ~                                    cp  value
 114+ 0000 ~                                    jp  nz,target
 115+ 0000                                      ENDM
 116+ 0000
 117+ 0000              JumpIfMemZero:          MACRO mem,target
 118+ 0000 ~                                    ld  a,(mem)
 119+ 0000 ~                                    and a
 120+ 0000 ~                                    jp  z,target
 121+ 0000                                      ENDM
 122+ 0000
 123+ 0000              JumpIfMemNotZero:       MACRO mem,target
 124+ 0000 ~                                    ld  a,(mem)
 125+ 0000 ~                                    and a
 126+ 0000 ~                                    jp  nz,target
 127+ 0000                                      ENDM
 128+ 0000
 129+ 0000              JumpIfALTMemHLusng:     MACRO target
 130+ 0000 ~                                    cp    (hl)
 131+ 0000 ~                                    jp	  c,target
 132+ 0000                                      ENDM
 133+ 0000
 134+ 0000              JumpIfANENusng:         MACRO value, target
 135+ 0000 ~                                    cp     value
 136+ 0000 ~                                    jp      nz,target
 137+ 0000                                      ENDM
 138+ 0000
 139+ 0000              JumpIfANEMemusng:       MACRO  value, target
 140+ 0000 ~                                    ld    hl,value
 141+ 0000 ~                                    cp    (hl)
 142+ 0000 ~                                    jp      nz,target
 143+ 0000                                      ENDM
 144+ 0000
 145+ 0000              JumpIfAEqNusng:         MACRO value, target
 146+ 0000 ~                                    cp     value
 147+ 0000 ~                                    jp      z,target
 148+ 0000                                      ENDM
 149+ 0000
 150+ 0000              IfAIsZeroGoto:	        MACRO target
 151+ 0000 ~                                    and a   ; cp 0 - changed to and a for optimisation but affects other flags
 152+ 0000 ~                                    jp	z, target
 153+ 0000                                      ENDM
 154+ 0000
 155+ 0000              IfANotZeroGoto:	        MACRO target
 156+ 0000 ~                                    cp	0
 157+ 0000 ~                                    jp	nz,target
 158+ 0000                                      ENDM
 159+ 0000
 160+ 0000              IfResultZeroGoto:	    MACRO target
 161+ 0000 ~                                    jp	z,target
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              IfResultNotZeroGoto:    MACRO target
 165+ 0000 ~                                    jp	nz,target
 166+ 0000                                      ENDM
 167+ 0000
# file closed: ./Macros/jumpMacros.asm
  57  0000                                      INCLUDE "./Macros/MathsMacros.asm"
# file opened: ./Macros/MathsMacros.asm
   1+ 0000
   2+ 0000
   3+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
   4+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
   5+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
   6+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
   7+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
   8+ 0000 ~                                    xor $80                             ;
   9+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  10+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  11+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  12+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  13+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  14+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              SignedHLTo2C:           MACRO
  18+ 0000 ~                                    bit     7,h
  19+ 0000 ~                                    jr      z,.Done2c
  20+ 0000 ~                                    ld      a,h
  21+ 0000 ~                                    and     SignMask8Bit
  22+ 0000 ~                                    ld      h,a
  23+ 0000 ~                                    NegHL
  24+ 0000 ~            .Done2c:
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              MemSignedTo2C:          MACRO   memfrom
  28+ 0000 ~                                    ld      hl,(memfrom)
  29+ 0000 ~                                    bit     7,h
  30+ 0000 ~                                    jr      z,.Done2c
  31+ 0000 ~                                    ld      a,h
  32+ 0000 ~                                    and     SignMask8Bit
  33+ 0000 ~                                    ld      h,a
  34+ 0000 ~            .Done2c:                ld      (memfrom),hl
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000
  38+ 0000                  ;returns result in H
  39+ 0000              EDiv10Inline:           MACRO
  40+ 0000 ~                                    ld      d,0
  41+ 0000 ~                                    ld      hl,de
  42+ 0000 ~                                    add     hl,hl
  43+ 0000 ~                                    add     hl,de
  44+ 0000 ~                                    add     hl,hl
  45+ 0000 ~                                    add     hl,hl
  46+ 0000 ~                                    add     hl,de
  47+ 0000 ~                                    add     hl,hl
  48+ 0000                                      ENDM
  49+ 0000
# file closed: ./Macros/MathsMacros.asm
  58  0000                                      INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectSpriteBank: MACRO
   2+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
   3+ 0000              					 ENDM
   4+ 0000
   5+ 0000              MMUSelectConsoleBank: MACRO
   6+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
   7+ 0000              					 ENDM
   8+ 0000
   9+ 0000              MMUSelectLayer1: 	 MACRO
  10+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  11+ 0000              					 ENDM
  12+ 0000
  13+ 0000              MMUSelectLayer2: 	 MACRO
  14+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  15+ 0000              					 ENDM
  16+ 0000
  17+ 0000              MMUSelectResetUniv:  MACRO
  18+ 0000 ~                                 nextreg  ResetUniverseMMU, BankResetUniv
  19+ 0000                                   ENDM
  20+ 0000
  21+ 0000              MMUSelectShipBank1:  MACRO
  22+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  23+ 0000              					 ENDM
  24+ 0000              MMUSelectShipBank2:  MACRO
  25+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  26+ 0000              					 ENDM
  27+ 0000              MMUSelectShipBank3:  MACRO
  28+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  29+ 0000              					 ENDM
  30+ 0000              MMUSelectShipBank4:  MACRO
  31+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  32+ 0000              					 ENDM
  33+ 0000
  34+ 0000              MMUSelectShipBankA   MACRO
  35+ 0000 ~            					 nextreg ShipModelMMU,	    a
  36+ 0000              					 ENDM
  37+ 0000
  38+ 0000              MMUSelectShipBankN:  MACRO value
  39+ 0000 ~            					 nextreg ShipModelMMU,	    value
  40+ 0000              					 ENDM
  41+ 0000
  42+ 0000              MMUSelectCmdrData:	 MACRO
  43+ 0000 ~                                 nextreg CmdrDataMMU,       BankCmdrData
  44+ 0000              					 ENDM
  45+ 0000
  46+ 0000              MMUSelectStockTable: MACRO
  47+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  48+ 0000              					 ENDM
  49+ 0000
  50+ 0000              MMUSelectCpySrcA:    MACRO
  51+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  52+ 0000              					 ENDM
  53+ 0000
  54+ 0000              MMUSelectCpySrcN:    MACRO value
  55+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  56+ 0000              					 ENDM
  57+ 0000
  58+ 0000              MMUSelectSun:        MACRO
  59+ 0000 ~                                 nextreg SunMMU,            BankSunData
  60+ 0000                                   ENDM
  61+ 0000
  62+ 0000              MMUSelectPlanet:     MACRO
  63+ 0000 ~                                 nextreg PlanetMMU,         PlanetBankAddr
  64+ 0000                                   ENDM
  65+ 0000
  66+ 0000              MMUSelectUniverseA:  MACRO
  67+ 0000 ~                                 add    a,BankUNIVDATA0
  68+ 0000 ~                                 nextreg UniverseMMU,       a
  69+ 0000                                   ENDM
  70+ 0000
  71+ 0000              MMUSelectUniverseN:  MACRO value
  72+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  73+ 0000                                   ENDM
  74+ 0000
  75+ 0000              MMUSelectGalaxyA:    MACRO
  76+ 0000 ~                                 nextreg GalaxyDataMMU,       a
  77+ 0000                                   ENDM
  78+ 0000
  79+ 0000              MMUSelectGalaxyN:    MACRO value
  80+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
  81+ 0000                                   ENDM
  82+ 0000              MMUSelectGalaxyACopy:MACRO
  83+ 0000 ~                                 nextreg UniverseMMU,       a
  84+ 0000                                   ENDM
  85+ 0000
  86+ 0000              MMUSelectUniverseAbs:MACRO value
  87+ 0000 ~                                 nextreg UniverseMMU,       value
  88+ 0000                                   ENDM
  89+ 0000
  90+ 0000              MMUSelectMenuGalCht: MACRO
  91+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
  92+ 0000              					 ENDM
  93+ 0000
  94+ 0000              MMUSelectMenuShrCht: MACRO
  95+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
  96+ 0000              					 ENDM
  97+ 0000
  98+ 0000              MMUSelectMenuInvent: MACRO
  99+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 100+ 0000              					 ENDM
 101+ 0000
 102+ 0000              MMUSelectMenuSystem: MACRO
 103+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 104+ 0000              					 ENDM
 105+ 0000
 106+ 0000              MMUSelectMenuMarket: MACRO
 107+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 108+ 0000              					 ENDM
 109+ 0000
 110+ 0000              MMUSelectMenuStatus: MACRO
 111+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 112+ 0000              					 ENDM
 113+ 0000
 114+ 0000              MMUSelectViewFront:  MACRO
 115+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 116+ 0000              					 ENDM
 117+ 0000
 118+ 0000              MMUSelectScreenA:    MACRO
 119+ 0000 ~                                 nextreg ScreenBankMMU,		a
 120+ 0000              					 ENDM
 121+ 0000
# file closed: ./Macros/MMUMacros.asm
  59  0000                                      INCLUDE "./Macros/NegateMacros.asm"
# file opened: ./Macros/NegateMacros.asm
   1+ 0000
   2+ 0000              NegIY:			    MACRO
   3+ 0000 ~                                xor a
   4+ 0000 ~                                sub iyl
   5+ 0000 ~                                ld iyl,a
   6+ 0000 ~                                sbc a,a
   7+ 0000 ~                                sub iyh
   8+ 0000 ~                                ld iyh,a
   9+ 0000                                  ENDM
  10+ 0000
  11+ 0000              NegHL:			    MACRO
  12+ 0000 ~                                xor a
  13+ 0000 ~                                sub l
  14+ 0000 ~                                ld l,a
  15+ 0000 ~                                sbc a,a
  16+ 0000 ~                                sub h
  17+ 0000 ~                                ld h,a
  18+ 0000                                  ENDM
  19+ 0000
  20+ 0000              NegDE:			    MACRO
  21+ 0000 ~                                xor a
  22+ 0000 ~                                sub e
  23+ 0000 ~                                ld e,a
  24+ 0000 ~                                sbc a,a
  25+ 0000 ~                                sub d
  26+ 0000 ~                                ld d,a
  27+ 0000                                  ENDM
  28+ 0000
  29+ 0000              NegBC:			    MACRO
  30+ 0000 ~                                xor a
  31+ 0000 ~                                sub c
  32+ 0000 ~                                ld c,a
  33+ 0000 ~                                sbc a,a
  34+ 0000 ~                                sub  b
  35+ 0000 ~                                ld b,a
  36+ 0000                                  ENDM
  37+ 0000
  38+ 0000              NegH                MACRO
  39+ 0000 ~                                ld      a,h
  40+ 0000 ~                                neg
  41+ 0000 ~                                ld      h,a
  42+ 0000                                  ENDM
  43+ 0000
  44+ 0000              NegD                MACRO
  45+ 0000 ~                                ld      a,d
  46+ 0000 ~                                neg
  47+ 0000 ~                                ld      d,a
  48+ 0000                                  ENDM
  49+ 0000
  50+ 0000              NegB                MACRO
  51+ 0000 ~                                ld      a,b
  52+ 0000 ~                                neg
  53+ 0000 ~                                ld      b,a
  54+ 0000                                  ENDM
  55+ 0000
# file closed: ./Macros/NegateMacros.asm
  60  0000                                      INCLUDE "./Macros/returnMacros.asm"
# file opened: ./Macros/returnMacros.asm
   1+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr,
   2+ 0000 ~                                    bit 	bitnbr,reg
   3+ 0000 ~                                    ret     nz
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
   7+ 0000 ~                                    ld   a,(mem)
   8+ 0000 ~                                    bit 	bitnbr,a
   9+ 0000 ~                                    ret     nz
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  13+ 0000 ~                                    bit 	bitnbr,reg
  14+ 0000 ~                                    ret		z
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  18+ 0000 ~                                    ld     a,(mem)
  19+ 0000 ~                                    bit 	bitnbr,a
  20+ 0000 ~                                    ret		z
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              ReturnIfAIsZero:        MACRO
  24+ 0000 ~                                    and a
  25+ 0000 ~                                    ret    z
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              ReturnIfMemisZero:      MACRO mem
  29+ 0000 ~                                    ld   a,(mem)
  30+ 0000 ~                                    and a
  31+ 0000 ~                                    ret    z
  32+ 0000                                      ENDM
  33+ 0000
  34+ 0000              ReturnIfMemEquN:        MACRO mem, value
  35+ 0000 ~                                    ld   a,(mem)
  36+ 0000 ~                                    cp     value
  37+ 0000 ~                                    ret    z
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ReturnIfANotZero:       MACRO
  41+ 0000 ~                                    cp     0
  42+ 0000 ~                                    ret    nz
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              ReturnIfMemNotZero:     MACRO mem
  46+ 0000 ~                                    ld     a,(mem)
  47+ 0000 ~                                    cp     0
  48+ 0000 ~                                    ret    nz
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ReturnIfAGTEusng:       MACRO value
  52+ 0000 ~                                    cp    value
  53+ 0000 ~                                    ret	 nc
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              ReturnIfALTNusng:       MACRO value
  57+ 0000 ~                                    cp    value
  58+ 0000 ~                                    ret	 c
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              ReturnIfAGTENusng:      MACRO value
  62+ 0000 ~                                    cp    value
  63+ 0000 ~                                    ret	 nc
  64+ 0000                                      ENDM
  65+ 0000
  66+ 0000              ReturnIfANENusng:       MACRO value
  67+ 0000 ~                                    cp      value
  68+ 0000 ~                                    ret     nz
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              ReturnIfAEqNusng:       MACRO value
  72+ 0000 ~                                    cp      value
  73+ 0000 ~                                    ret     z
  74+ 0000                                      ENDM
  75+ 0000
# file closed: ./Macros/returnMacros.asm
  61  0000                                      INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000
  47+ 0000              RollDELeft1:   MACRO
  48+ 0000 ~                           rl  e
  49+ 0000 ~                           rl  d
  50+ 0000                             ENDM
  51+ 0000
  52+ 0000              ShiftBCLeft1:  MACRO
  53+ 0000 ~            			   sla c
  54+ 0000 ~            			   rl  b
  55+ 0000              			   ENDM
  56+ 0000
  57+ 0000
  58+ 0000              ShiftMem16Right1:   MACRO memaddr
  59+ 0000 ~                                ld    hl,(memaddr)
  60+ 0000 ~                                srl   h
  61+ 0000 ~                                rr    l
  62+ 0000 ~                                ld    (memaddr),hl
  63+ 0000                                  ENDM
  64+ 0000
  65+ 0000              ShiftMem8Right1:    MACRO memaddr
  66+ 0000 ~                                ld      a,(memaddr)
  67+ 0000 ~                                srl     a
  68+ 0000 ~                                ld      (memaddr),a
  69+ 0000                                  ENDM
  70+ 0000
  71+ 0000
  72+ 0000              ShiftMem8Left1A:    MACRO memaddr
  73+ 0000 ~                                ld      a,(memaddr)
  74+ 0000 ~                                sla     a
  75+ 0000 ~                                ld      (memaddr),a
  76+ 0000                                  ENDM
  77+ 0000
# file closed: ./Macros/ShiftMacros.asm
  62  0000                                      INCLUDE "./Macros/signBitMacros.asm"
# file opened: ./Macros/signBitMacros.asm
   1+ 0000
   2+ 0000              FlipMemSign:            MACRO mem
   3+ 0000 ~                                    ld  a,(mem)
   4+ 0000 ~                                    xor SignOnly8Bit
   5+ 0000 ~                                    ld  (mem),a
   6+ 0000                                      ENDM
   7+ 0000
# file closed: ./Macros/signBitMacros.asm
  63  0000                                      INCLUDE "./Tables/message_queue_macros.asm"
# file opened: ./Tables/message_queue_macros.asm
   1+ 0000
   2+ 0000              AnyMessagesMacro:       MACRO   NoMessageTarget
   3+ 0000 ~                                    ld      a, (MessageCount)
   4+ 0000 ~                                    and     a
   5+ 0000 ~                                    jr      z, NoMessageTarget
   6+ 0000                                      ENDM
   7+ 0000
   8+ 0000              AnyHyperSpaceMacro:     MACRO   NoMessageText
   9+ 0000 ~                                    ld      hl,(InnerHyperCount)
  10+ 0000 ~                                    ld      a,h
  11+ 0000 ~                                    or      l
  12+ 0000 ~                                    jr      z, NoMessageText
  13+ 0000                                      ENDM
  14+ 0000
# file closed: ./Tables/message_queue_macros.asm
  64  0000                                      INCLUDE "./Variables/general_variables_macros.asm"
# file opened: ./Variables/general_variables_macros.asm
   1+ 0000              ; limited to 255 character length
   2+ 0000              CountLengthHL:          MACRO   Limiter
   3+ 0000 ~                                    ld      de,hl
   4+ 0000 ~                                    ld      bc,Limiter
   5+ 0000 ~                                    xor     a
   6+ 0000 ~                                    cpir
   7+ 0000 ~                                    ClearCarryFlag
   8+ 0000 ~                                    sbc     hl,de
   9+ 0000 ~                                    ld      a,l
  10+ 0000 ~                                    ret
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              HalfLengthHL:           MACRO
  14+ 0000 ~                                    ld      b,0
  15+ 0000 ~            .CountLenLoop:          ld      a,(hl)
  16+ 0000 ~                                    cp      0
  17+ 0000 ~                                    jr      z,.DoneCount
  18+ 0000 ~                                    inc     b
  19+ 0000 ~                                    inc     hl
  20+ 0000 ~                                    jr      .CountLenLoop
  21+ 0000 ~            .DoneCount:             ld      a,32
  22+ 0000 ~                                    sub     b
  23+ 0000 ~                                    sra     a
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000              MakeInnocentMacro:		MACRO
  27+ 0000 ~            						xor		a
  28+ 0000 ~            						ld		(FugitiveInnocentStatus),a
  29+ 0000              						ENDM
  30+ 0000
  31+ 0000              NoEscapePodMacro:		MACRO
  32+ 0000 ~            						xor		a
  33+ 0000 ~            						ld		(EscapePod),a
  34+ 0000              						ENDM
  35+ 0000
  36+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  37+ 0000              MaxFuelMacro:			MACRO
  38+ 0000 ~            						ld		a,MaxFuelLevel
  39+ 0000 ~            						ld		(Fuel),a
  40+ 0000              						ENDM
  41+ 0000
  42+ 0000              MaxThrottle:            MACRO
  43+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  44+ 0000 ~                                    ld      (DELTA),a
  45+ 0000 ~                                    ld      d,a
  46+ 0000 ~                                    ld      e,4
  47+ 0000 ~                                    mul
  48+ 0000 ~                                    ld      (DELT4Lo),de
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ZeroThrottle:           MACRO
  52+ 0000 ~                                    xor     a
  53+ 0000 ~                                    ld      (DELTA),a
  54+ 0000 ~                                    ld      (DELT4Lo),a
  55+ 0000 ~                                    ld      (DELT4Lo+1),a
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              ZeroPitch:              MACRO
  59+ 0000 ~                                    xor     a
  60+ 0000 ~                                    ld      (BET2),a
  61+ 0000 ~                                    ld      (BET2FLIP),a
  62+ 0000 ~                                    ld      (JSTY),a
  63+ 0000 ~                                    ld      (BETA),a
  64+ 0000                                      ENDM
  65+ 0000
  66+ 0000              ZeroRoll:               MACRO
  67+ 0000 ~                                    xor     a                              ; zero roll and climb
  68+ 0000 ~                                    ld      (ALP2),a
  69+ 0000 ~                                    ld      (ALP2FLIP),a
  70+ 0000 ~                                    ld      (JSTX),a
  71+ 0000 ~                                    ld      (ALPHA),a
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              CorrectPostJumpFuel:    MACRO
  75+ 0000 ~                                    ld      a,(Fuel)
  76+ 0000 ~                                    ld      hl,Distance
  77+ 0000 ~                                    sub     a,(hl)
  78+ 0000 ~                                    ld      (Fuel),a
  79+ 0000                                      ENDM
  80+ 0000
  81+ 0000              ClearMissileTarget:     MACRO
  82+ 0000 ~                                    xor     a
  83+ 0000 ~                                    dec     a
  84+ 0000 ~                                    ld      (MissileTarget),a
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000              ClearECM:               MACRO
  88+ 0000 ~                                    xor     a
  89+ 0000 ~                                    ld      (ECMLoopA),a
  90+ 0000 ~                                    ld      (ECMLoopB),a
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              ChargeEnergyAndShields: MACRO
  94+ 0000 ~                                    ld      a,$FF
  95+ 0000 ~                                    ld      (PlayerEnergy),a
  96+ 0000 ~                                    ld      (ForeShield),a
  97+ 0000 ~                                    ld      (AftShield),a
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              HalveFugitiveStatus:    MACRO
 101+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
 102+ 0000 ~                                    srl     (hl)
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              ClearForceTransition    MACRO
 106+ 0000 ~                                    ld      a,$FF
 107+ 0000 ~                                    ld      (ScreenTransitionForced),a
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              ForceTransition:        MACRO newScreen
 111+ 0000 ~                                    ld      a,newScreen
 112+ 0000 ~                                    ld      (ScreenTransitionForced), a
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              SetSafeZone:            MACRO
 116+ 0000 ~                                    ld      a,$FF
 117+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              ClearSafeZone:          MACRO
 121+ 0000 ~                                    xor     a
 122+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              CoolLasers:             MACRO
 126+ 0000 ~                                    ld      a,(GunTemperature)
 127+ 0000 ~                                    and     a
 128+ 0000 ~                                    jr      z,.AlreadyCool
 129+ 0000 ~                                    dec     a
 130+ 0000 ~                                    ld      (GunTemperature),a
 131+ 0000 ~            .AlreadyCool:
 132+ 0000                                      ENDM
 133+ 0000
 134+ 0000              InitEventCounter:       MACRO
 135+ 0000 ~                                    xor     a
 136+ 0000 ~                                    ld      (EventCounter),a
 137+ 0000                                      ENDM
 138+ 0000
 139+ 0000              ClearMissJump:          MACRO
 140+ 0000 ~                                    xor     a
 141+ 0000 ~                                    ld      (MissJumpFlag),a
 142+ 0000                                      ENDM
 143+ 0000
# file closed: ./Variables/general_variables_macros.asm
  65  0000                                      INCLUDE "./Variables/UniverseSlot_macros.asm"
# file opened: ./Variables/UniverseSlot_macros.asm
   1+ 0000
   2+ 0000              AddJunkCount:           MACRO
   3+ 0000 ~                                    ld      hl,JunkCount
   4+ 0000 ~                                    inc     (hl)
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SubJunkCount:           MACRO
   8+ 0000 ~                                    ld      hl,JunkCount
   9+ 0000 ~                                    dec     (hl)
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              TestRoomForJunk:        MACRO   Target
  13+ 0000 ~                                    ld      a,3
  14+ 0000 ~                                    JumpIfALTMemusng    JunkCount, Target
  15+ 0000                                      ENDM
  16+ 0000
# file closed: ./Variables/UniverseSlot_macros.asm
  66  0000                                      INCLUDE "./Data/ShipIdEquates.asm"
# file opened: ./Data/ShipIdEquates.asm
   1+ 0000              ShipID_Adder            EQU 00
   2+ 0000              ShipID_Anaconda         EQU 01
   3+ 0000              ShipID_Asp_Mk_2         EQU 02
   4+ 0000              ShipID_Boa              EQU 03
   5+ 0000              ShipID_CargoType5       EQU 04
   6+ 0000              ShipID_Boulder          EQU 05
   7+ 0000              ShipID_Asteroid         EQU 06
   8+ 0000              ShipID_Bushmaster       EQU 07
   9+ 0000              ShipID_Chameleon        EQU 08
  10+ 0000              ShipID_CobraMk3         EQU 09
  11+ 0000              ShipID_Cobra_Mk_1       EQU 10
  12+ 0000              ShipID_Cobra_Mk_3_P     EQU 11
  13+ 0000              ShipID_Constrictor      EQU 12
  14+ 0000              ShipID_Coriolis         EQU 13
  15+ 0000              ShipID_Cougar           EQU 14
  16+ 0000              ShipID_Dodo             EQU 15
  17+ 0000              ShipID_Dragon           EQU 16
  18+ 0000              ShipID_Escape_Pod       EQU 17
  19+ 0000              ShipID_Fer_De_Lance     EQU 18
  20+ 0000              ShipID_Gecko            EQU 19
  21+ 0000              ShipID_Ghavial          EQU 20
  22+ 0000              ShipID_Iguana           EQU 21
  23+ 0000              ShipID_Krait            EQU 22
  24+ 0000              ShipID_Logo             EQU 23
  25+ 0000              ShipID_Mamba            EQU 24
  26+ 0000              ShipID_Missile          EQU 25
  27+ 0000              ShipID_Monitor          EQU 26
  28+ 0000              ShipID_Moray            EQU 27
  29+ 0000              ShipID_Ophidian         EQU 28
  30+ 0000              ShipID_Plate            EQU 29
  31+ 0000              ShipID_Python           EQU 30
  32+ 0000              ShipID_Python_P         EQU 31
  33+ 0000              ShipID_Rock_Hermit      EQU 32
  34+ 0000              ShipID_ShuttleType9     EQU 33
  35+ 0000              ShipID_Shuttle_Mk_2     EQU 34
  36+ 0000              ShipID_Sidewinder       EQU 35
  37+ 0000              ShipID_Splinter         EQU 36
  38+ 0000              ShipID_TestVector       EQU 37
  39+ 0000              ShipID_Thargoid         EQU 38
  40+ 0000              ShipID_Thargon          EQU 39
  41+ 0000              ShipID_TransportType10  EQU 40
  42+ 0000              ShipID_Viper            EQU 41
  43+ 0000              ShipID_Worm             EQU 42
  44+ 0000              ShipID_Rattler          EQU 43
  45+ 0000
# file closed: ./Data/ShipIdEquates.asm
  67  0000
  68  0000
  69  0000              charactersetaddr		equ 15360
  70  0000              STEPDEBUG               equ 1
  71  0000
  72  0000
  73  0000                                      ORG         $8000
  74  8000 F3                                   di
  75  8001                                      ; "STARTUP"
  76  8001                                      MMUSelectLayer1
  76  8001 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  77  8005 CD 80 E0                             call		l1_cls
  78  8008 3E 07                                ld			a,7
  79  800A CD 9B E0                             call		l1_attr_cls_to_a
  80  800D 3E FF                                ld          a,$FF
  81  800F CD A5 E0                             call        l1_set_border
  82  8012                                      MMUSelectSpriteBank
  82  8012 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  83  8016 CD 4C E4                             call		sprite_load_sprite_data
  84  8019              Initialise:             MMUSelectLayer2
  84  8019 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  85  801D CD D0 E0                             call 		l2_initialise
  86  8020                                      ClearForceTransition
  86  8020 3E FF       >                        ld      a,$FF
  86  8022 32 8C 86    >                        ld      (ScreenTransitionForced),a
  87  8025 3E 10        TidyDEBUG:              ld          a,16
  88  8027 32 5A 85                             ld          (TidyCounter),a
  89  802A
  90  802A AF           TestText:               xor			a
  91  802B 32 A0 96                             ld      (JSTX),a
  92  802E                                      MMUSelectCmdrData
  92  802E ED 91 57 38 >                     nextreg CmdrDataMMU,       BankCmdrData
  93  8032 CD 1F E0                             call		defaultCommander
  94  8035              DEBUGCODE:              ClearSafeZone ; just set in open space so compas treacks su n
  94  8035 AF          >                        xor     a
  94  8036 32 90 96    >                        ld      (SpaceStationSafeZone),a
  95  8039                                      MMUSelectSpriteBank
  95  8039 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  96  803D CD 44 E4                             call		init_sprites
  97  8040
  98  8040                                      IFDEF DOUBLEBUFFER
  99  8040                                          MMUSelectLayer2
  99  8040 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 100  8044 CD C9 E0                                 call        l2_cls
 101  8047 CD DD E0                                 call  l2_flip_buffers
 102  804A                                      ENDIF
 103  804A              ; Set up all 8 galaxies, 7later this will be pre built and loaded into memory from files
 104  804A CD 8D 86     InitialiseGalaxies:     call		ResetUniv                       ; Reset ship data
 105  804D CD B5 86                             call        ResetGalaxy                     ; Reset each galaxy copying in code
 106  8050 CD DE 86                             call        SeedAllGalaxies
 107  8053
 108  8053              .ClearLayer2Buffers:    MMUSelectLayer2
 108  8053 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 109  8057 CD C9 E0                             call        l2_cls
 110  805A                                      IFDEF DOUBLEBUFFER
 111  805A                                          MMUSelectLayer2
 111  805A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 112  805E CD DD E0                                 call  l2_flip_buffers
 113  8061                                      ENDIF
 114  8061
 115  8061
 116  8061              ;.Sa                        MMUSelectUniverseN 0
 117  8061
 118  8061              ;InitialiseDemoShip:     call    ClearFreeSlotList
 119  8061              ;                        call    FindNextFreeSlotInA
 120  8061              ;                        ld      b,a
 121  8061              ;                        ld      a,13 ;Coriolis station
 122  8061              ;                        call    InitialiseShipAUnivB
 123  8061              ;                        xor     a
 124  8061 AF           InitialiseMainLoop:     xor     a
 125  8062 32 22 98                             ld      (CurrentUniverseAI),a
 126  8065 3E 03                                ld      a,3
 127  8067 32 A2 97                             ld      (MenuIdMax),a
 128  806A 3E FF                                ld      a,$FF                               ; Starts Docked
 129  806C 32 A6 97                             ld      (DockedFlag),a
 130  806F              ;                        call    InitialiseFrontView
 131  806F CD 23 87                             call    InitialiseCommander
 132  8072                                      MMUSelectUniverseN 2
 132  8072 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 133  8076 CD EF 87                             call    SetInitialShipPosition
 134  8079
 135  8079                                      MMUSelectStockTable
 135  8079 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 136  807D CD AA E0                             call    generate_stock_market
 137  8080 CD BE 8C                             call    ResetMessageQueue
 138  8083                                      InitEventCounter
 138  8083 AF          >                        xor     a
 138  8084 32 A8 96    >                        ld      (EventCounter),a
 139  8087                                      ClearMissJump
 139  8087 AF          >                        xor     a
 139  8088 32 A9 96    >                        ld      (MissJumpFlag),a
 140  808B              ;..MAIN GAME LOOP..................................................................................................................
 141  808B              ; MACRO BLOCKS.....................................................................................................................
 142  808B              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 143  808B              InputMainMacro:         MACRO
 144  808B ~                                    call    ViewKeyTest
 145  808B ~                                    call    TestPauseMode
 146  808B ~                                    ld      a,(GamePaused)
 147  808B ~                                    cp      0
 148  808B ~                                    jr      nz,MainLoop
 149  808B ~                                    call    MovementKeyTest
 150  808B                                      ENDM
 151  808B
 152  808B              ;..................................................................................................................................
 153  808B CD 2B 9C     MainLoop:	            call    doRandom                            ; redo the seeds every frame
 154  808E                                      CoolLasers
 154  808E 3A 46 98    >                        ld      a,(GunTemperature)
 154  8091 A7          >                        and     a
 154  8092 28 04       >                        jr      z,.AlreadyCool
 154  8094 3D          >                        dec     a
 154  8095 32 46 98    >                        ld      (GunTemperature),a
 154  8098             >.AlreadyCool:
 155  8098 CD 47 94                             call    scan_keyboard
 156  809B              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
 157  809B CD 8F 83     DemoOfShipsDEBUG:       call    TestForNextShip
 158  809E              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 159  809E 3E 00        InputBlockerCheck:      ld      a,$0
 160  80A0                                      JumpIfAEqNusng $01, SkipInputHandlers       ; as we are in a transition the whole update AI is skipped
 160  80A0 FE 01       >                        cp     $01
 160  80A2 CA C4 80    >                        jp      z,SkipInputHandlers
 161  80A5                                      InputMainMacro
 161  80A5 CD 87 87    >                        call    ViewKeyTest
 161  80A8 CD AB 84    >                        call    TestPauseMode
 161  80AB 3A A7 97    >                        ld      a,(GamePaused)
 161  80AE FE 00       >                        cp      0
 161  80B0 20 D9       >                        jr      nz,MainLoop
 161  80B2 CD D8 95    >                        call    MovementKeyTest
 162  80B5              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
 163  80B5 3A C3 80     HandleMovement:         ld      a,(CallCursorRoutine+2)
 164  80B8                                      IfAIsZeroGoto     TestAreWeDocked
 164  80B8 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 164  80B9 CA C4 80    >                        jp	z, TestAreWeDocked
 165  80BC              ;.. Handle displaying correct screen ..............................................................................................
 166  80BC 3E 00        HandleBankSelect:       ld      a,$00
 167  80BE                                      MMUSelectScreenA
 167  80BE ED 92 56    >                     nextreg ScreenBankMMU,		a
 168  80C1 CD 00 00     CallCursorRoutine:      call    $0000
 169  80C4              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
 170  80C4              ;.. Also end up here if we have the screen input blocker set
 171  80C4              SkipInputHandlers:
 172  80C4              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
 173  80C4 3A A6 97     TestAreWeDocked:        ld      a,(DockedFlag)                                ; if if we are in free space do universe update
 174  80C7                                      JumpIfANENusng  0, SkipUniveseUpdate                  ; else we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
 174  80C7 FE 00       >                        cp     0
 174  80C9 C2 2D 81    >                        jp      nz,SkipUniveseUpdate
 175  80CC
 176  80CC 21 A8 96     .UpdateEventCounter:    ld      hl,EventCounter                               ; evnery 256 cycles we do a trigger test
 177  80CF 35                                   dec     (hl)
 178  80D0 CC C1 81                             call    z,LoopEventTriggered
 179  80D3              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
 180  80D3              ;.. we do one universe slot each loop update ......................................................................................
 181  80D3              ;.. First update Sun...............................................................................................................
 182  80D3 CD C9 82     .UpdateShips:           call    UpdateUniverseObjects
 183  80D6                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange                          ; if we docked then a transition would have been forced
 183  80D6 3A 8C 86    >                        ld  a,(ScreenTransitionForced)
 183  80D9 FE FF       >                        cp  $FF
 183  80DB C2 B8 82    >                        jp  nz,BruteForceChange
 184  80DE 3E 00        CheckIfViewUpdate:      ld      a,$00                                         ; if this is set to a view number then we process a view
 185  80E0 FE 00                                cp      0                                             ; .
 186  80E2 28 41                                jr      z, MenusLoop                                  ; This will change as more screens are added TODO
 187  80E4              ;..Processing a view...............................................................................................................
 188  80E4              ;..Display any message ............................................................................................................
 189  80E4              .CheckHyperspaceMessage:AnyHyperSpaceMacro .HandleMessages
 189  80E4 2A 9A 96    >                        ld      hl,(InnerHyperCount)
 189  80E7 7C          >                        ld      a,h
 189  80E8 B5          >                        or      l
 189  80E9 28 03       >                        jr      z, .HandleMessages
 190  80EB CD 5A 8D                             call    HyperSpaceMessage
 191  80EE              .HandleMessages:        AnyMessagesMacro  .NoMessages
 191  80EE 3A B0 96    >                        ld      a, (MessageCount)
 191  80F1 A7          >                        and     a
 191  80F2 28 06       >                        jr      z, .NoMessages
 192  80F4 CD 3C 8D                             call    DisplayCurrentMessage
 193  80F7 CD 1B 8D                             call    UpdateMessageTimer
 194  80FA
 195  80FA              .NoMessages:            MMUSelectLayer2
 195  80FA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 196  80FE CD C9 E0                             call   l2_cls
 197  8101                                      MMUSelectLayer1
 197  8101 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 198  8105              .UpdateSun:             MMUSelectSun
 198  8105 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 199  8109              .DEBUGFORCE:            ;ld      hl,$0000
 200  8109                                      ;ld      (SBnKxlo),hl
 201  8109                                      ;ld      (SBnKylo),hl
 202  8109                                      ;xor     a
 203  8109                                      ;ld      (SBnKxsgn),a
 204  8109                                      ;ld      (SBnKysgn),a
 205  8109                                      ;ld      hl,$0200
 206  8109                                      ;ld      (SBnKzlo),hl
 207  8109                                      ;ld      a,$00
 208  8109                                      ;ld      (SBnKzsgn),a
 209  8109 CD 5F C5                             call    SunUpdateAndRender
 210  810C              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
 211  810C 3E DF        DrawDustForwards:       ld     a,$DF
 212  810E 32 E7 E8                             ld     (line_gfx_colour),a
 213  8111              DustUpdateBank:         MMUSelectViewFront                                    ; This needs to be self modifying
 213  8111 ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 214  8115 CD 47 91     DustUpdateRoutine:      call   DustForward                                   ; This needs to be self modifying
 215  8118              PrepLayer2:             MMUSelectLayer2                                       ; Clear layer 2 for graphics
 215  8118 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 216  811C                                    ;  call   l2_cls
 217  811C              ;ProcessSun:             call    DrawForwardSun
 218  811C              ProcessPlanet:
 219  811C CD 5B 83     ProcessShipModels:      call   DrawForwardShips                               ; Draw all ships (this may need to be self modifying)
 220  811F CD 7C 88                             call   UpdateConsole                                  ; Update display console on layer 1
 221  8122 C3 3C 81                             jp LoopRepeatPoint                                    ; And we are done with views, so check if there was a special command to do
 222  8125              ;..If we were not in views then we were in display screens/menus...................................................................
 223  8125 2A 3A 81     MenusLoop:              ld      hl,(ScreenLoopJP+1)
 224  8128 7C                                   ld      a,h
 225  8129 B5                                   or      l
 226  812A CA 3C 81                             jp      z,LoopRepeatPoint
 227  812D              ;..This is the screen update routine for menus.....................................................................................
 228  812D              ;.. Also used by transition routines
 229  812D              SkipUniveseUpdate:      JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 229  812D 3A 3A 81    >                        ld  a,(ScreenLoopJP+1)
 229  8130 A7          >                        and a
 229  8131 CA 3C 81    >                        jp  z,LoopRepeatPoint
 230  8134 3E 00        ScreenLoopBank:         ld      a,$0
 231  8136                                      MMUSelectScreenA
 231  8136 ED 92 56    >                     nextreg ScreenBankMMU,		a
 232  8139 CD 00 00     ScreenLoopJP:           call    $0000
 233  813C 3A A6 97     LoopRepeatPoint:        ld      a,(DockedFlag)
 234  813F              HandleLaunched:         JumpIfAEqNusng  $FD, WeHaveCompletedLaunch
 234  813F FE FD       >                        cp     $FD
 234  8141 CA 5B 81    >                        jp      z,WeHaveCompletedLaunch
 235  8144                                      JumpIfAEqNusng  $FE, WeAreInTransition
 235  8144 FE FE       >                        cp     $FE
 235  8146 CA 9D 82    >                        jp      z,WeAreInTransition
 236  8149                                      JumpIfAEqNusng  $FC, WeAreHJumping
 236  8149 FE FC       >                        cp     $FC
 236  814B CA 61 81    >                        jp      z,WeAreHJumping
 237  814E                                      JumpIfAEqNusng  $FB, WeAreHEntering
 237  814E FE FB       >                        cp     $FB
 237  8150 CA 6F 81    >                        jp      z,WeAreHEntering
 238  8153                                      JumpIfAEqNusng  $FA, WeHaveCompletedHJump
 238  8153 FE FA       >                        cp     $FA
 238  8155 CA 77 81    >                        jp      z,WeHaveCompletedHJump
 239  8158 C3 9D 82                             jp  DoubleBufferCheck
 240  815B CD EF 86     WeHaveCompletedLaunch:  call    LaunchedFromStation
 241  815E C3 9D 82                             jp      DoubleBufferCheck
 242  8161 CD DE C1     WeAreHJumping:          call        hyperspace_Lightning
 243  8164 DA 9D 82                             jp      c,DoubleBufferCheck
 244  8167 3E FB                                ld      a,$FB
 245  8169 32 A6 97                             ld      (DockedFlag),a
 246  816C C3 9D 82                             jp      DoubleBufferCheck
 247  816F 3E FA        WeAreHEntering:         ld      a,$FA
 248  8171 32 A6 97                             ld      (DockedFlag),a
 249  8174 C3 9D 82                             jp  DoubleBufferCheck
 250  8177 3A 95 98     WeHaveCompletedHJump:   ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 251  817A                                      MMUSelectGalaxyA
 251  817A ED 92 57    >                     nextreg GalaxyDataMMU,       a
 252  817D 2A AA 98                             ld      hl,(TargetPlanetX)
 253  8180 22 A8 98                             ld      (PresentSystemX),hl
 254  8183 44                                   ld      b,h
 255  8184 4D                                   ld      c,l
 256  8185                                      CorrectPostJumpFuel
 256  8185 3A D4 9B    >                        ld      a,(Fuel)
 256  8188 21 8A 98    >                        ld      hl,Distance
 256  818B 96          >                        sub     a,(hl)
 256  818C 32 D4 9B    >                        ld      (Fuel),a
 257  818F                                      ForceTransition ScreenFront            ; This will also trigger stars
 257  818F 3E 09       >                        ld      a,ScreenFront
 257  8191 32 8C 86    >                        ld      (ScreenTransitionForced), a
 258  8194 3E 00                                ld      a,$00
 259  8196 32 AA 96                             ld      (ExtraVesselsCounter),a
 260  8199 32 A6 97                             ld      (DockedFlag),a
 261  819C CD 6B F8                             call    GalaxyGenerateDesc             ; bc  holds new system to generate system
 262  819F CD 92 9C                             call    copy_working_to_system         ; and propogate copies of seeds
 263  81A2 CD 8A 9C                             call    copy_working_to_galaxy         ; .
 264  81A5 CD 78 9D                             call    get_planet_data_working_seed   ; sort out system data
 265  81A8                                      ;call    GetDigramGalaxySeed           ; .
 266  81A8                                      MMUSelectStockTable                    ; .
 266  81A8 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 267  81AC CD AA E0                             call    generate_stock_market          ; generate new prices
 268  81AF CD 5D 9B                             call    ClearUnivSlotList              ; clear out any ships
 269  81B2 CD E5 9A                             call    ResetPlayerShip
 270  81B5                                      HalveFugitiveStatus                    ; halves status and brings bit into carry
 270  81B5 21 60 98    >                        ld      hl,FugitiveInnocentStatus
 270  81B8 CB 3E       >                        srl     (hl)
 271  81BA                                      MMUSelectSun
 271  81BA ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 272  81BE CD 5D C2                             call    CreateSun                      ; create the local sun and set position based on seed
 273  81C1              ;TODO                        call    generateSunAndPlanetPos        ; uses current carry state too
 274  81C1              ;TODO.CreateSun:             call    SetSunSlot
 275  81C1              ; PROBABLY NOT NEEDED NOW                      MMUSelectShipBank1
 276  81C1              ; PROBABLY NOT NEEDED NOW                      call    GetShipBankId
 277  81C1              ;;SELECT CORRECT BANK                        MMUSelectUniverseN 0
 278  81C1              ;;TODO                        call    CopyBodyToUniverse
 279  81C1              ;;TODO                        call    CreateSun
 280  81C1              ;;TODOCreatePlanet:          call    SetPlanetSlot
 281  81C1              ;;TODO                       MMUSelectShipBank1
 282  81C1              ;;TODO                       call    GetShipBankId
 283  81C1              ;;TODO                       MMUSelectUniverseBankN 1
 284  81C1              ;;TODO                       call    CopyBodyToUniverse
 285  81C1
 286  81C1              LoopEventTriggered:     JumpIfMemNotZero MissJumpFlag, .WitchSpaceEvent
 286  81C1 3A A9 96    >                        ld  a,(MissJumpFlag)
 286  81C4 A7          >                        and a
 286  81C5 C2 8E 82    >                        jp  nz,.WitchSpaceEvent
 287  81C8 CD 2B 9C                             call    doRandom
 288  81CB                                      JumpIfAGTENusng 35, .NotJunk
 288  81CB FE 23       >                        cp     35
 288  81CD D2 0B 82    >                        jp		nc,.NotJunk
 289  81D0              .SpawnJunk:             TestRoomForJunk .NotJunk
 289  81D0 3E 03       >                        ld      a,3
 289  81D2             >                        JumpIfALTMemusng    JunkCount, .NotJunk
 289  81D2 21 AB 96    >                        ld      hl,JunkCount
 289  81D5 BE          >                        cp      (hl)
 289  81D6 DA 0B 82    >                        jp		c,.NotJunk
 290  81D9 CD B2 9B                             call    FindNextFreeSlotInC                         ; c= slot number
 291  81DC D8                                   ret     c
 292  81DD                                      AddJunkCount
 292  81DD 21 AB 96    >                        ld      hl,JunkCount
 292  81E0 34          >                        inc     (hl)
 293  81E1 CD 2B 9C     .CouldBeTrader:         call    doRandom
 294  81E4 E6 01                                and     1
 295  81E6 CA 51 82                             jp      z,.SpawnTrader
 296  81E9 79                                   ld      a,c                                 ; a = slot number
 297  81EA                                      MMUSelectUniverseA
 297  81EA C6 46       >                     add    a,BankUNIVDATA0
 297  81EC ED 92 56    >                     nextreg UniverseMMU,       a
 298  81EF                                      MMUSelectShipBank1
 298  81EF ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 299  81F3 CD 2B 9C                             call    doRandom
 300  81F6 FE 0A                                cp      10                                  ; will set carry if a < 10
 301  81F8                                      FlipCarryFlag                               ; so now carry is set if a > 10
 301  81F8 3F          >                        ccf
 302  81F9 E6 01                                and     1                                   ; so only have carry flag
 303  81FB CE 04                                adc     ShipID_CargoType5                   ; so now a = 4 + random + poss carry
 304  81FD 47                                   ld      b,a                                 ; save ship type
 305  81FE 3A 90 96                             ld      a,(SpaceStationSafeZone)            ; if in space station zone
 306  8201 A7                                   and     a                                   ; then we can't do asteroids
 307  8202 28 04                                jr      z,.NotInSafeZone                    ; .
 308  8204 78                                   ld      a,b
 309  8205                                      ReturnIfAEqNusng   ShipID_Asteroid
 309  8205 FE 06       >                        cp      ShipID_Asteroid
 309  8207 C8          >                        ret     z
 310  8208 C3 8F 82     .NotInSafeZone:         jp      SpawnShipTypeA
 311  820B                                      ;.......implicit ret
 312  820B              .NotJunk:               ReturnIfMemNotZero SpaceStationSafeZone
 312  820B 3A 90 96    >                        ld     a,(SpaceStationSafeZone)
 312  820E FE 00       >                        cp     0
 312  8210 C0          >                        ret    nz
 313  8211                                    ;TODO  a = work out our contrasband and badness level
 314  8211 CB 27                                sla     a
 315  8213                                      JumpIfMemZero CopCount,.NoCopsInSystem
 315  8213 3A AD 96    >                        ld  a,(CopCount)
 315  8216 A7          >                        and a
 315  8217 CA 1E 82    >                        jp  z,.NoCopsInSystem
 316  821A 21 60 98                             ld      hl,FugitiveInnocentStatus           ; or a with FIST status
 317  821D B6                                   or      (hl)
 318  821E 32 AF 96     .NoCopsInSystem:        ld      (BadnessStatus),a                   ; if badness level triggers a cop
 319  8221 CD 2B 9C                             call    doRandom                            ; then its hostile
 320  8224                                      CallIfAGTEMemusng BadnessStatus, .SpawnHostileCop  ;
 320  8224 21 AF 96    >                        ld      hl,BadnessStatus
 320  8227 BE          >                        cp      (hl)
 320  8228 D4 51 82    >                        call	nc,.SpawnHostileCop
 321  822B                                      ReturnIfMemNotZero CopCount                 ; if here are police then we are done
 321  822B 3A AD 96    >                        ld     a,(CopCount)
 321  822E FE 00       >                        cp     0
 321  8230 C0          >                        ret    nz
 322  8231 21 AA 96                             ld      hl, ExtraVesselsCounter             ; count down extra vessels counter
 323  8234 35                                   dec     (hl)                                ; to prevent mass spawing
 324  8235 F0                                   ret     p                                   ;
 325  8236 34           .ExtraVesselHit0:       inc     (hl)                                ; set counter to 0
 326  8237                        ;TODO              JumpIfMemNotZero MissionData,.DoMissionPlans; call special mission spawn logic routine
 327  8237 D8                                   ret     c                                   ; return if carry was set (i.e. it did something)
 328  8238 3A 95 98                             ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 329  823B                                      MMUSelectGalaxyA
 329  823B ED 92 57    >                     nextreg GalaxyDataMMU,       a
 330  823E 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 331  8241                                      IfANotZeroGoto .NotAnarchySystem
 331  8241 FE 00       >                        cp	0
 331  8243 C2 6A 82    >                        jp	nz,.NotAnarchySystem
 332  8246 47                                   ld      b,a
 333  8247 CD 2B 9C                             call    doRandom                            ; if random > 120 then don't spawn
 334  824A                                      ReturnIfAGTENusng 120                       ;
 334  824A FE 78       >                        cp    120
 334  824C D0          >                        ret	 nc
 335  824D E6 07                                and     7                                   ; if random 0 ..7 < gov rating
 336  824F                                      ReturnIfALTNusng b                          ; then return
 336  824F B8          >                        cp    b
 336  8250 D8          >                        ret	 c
 337  8251              .SpawnTrader:       ; TODO
 338  8251              .SpawnHostileCop: ;TODO
 339  8251 78           .SpawnHostile:          ld      a,b
 340  8252                                      JumpIfAGTENusng 100,.SpawnPirates               ; 100 in 255 change of one or more pirates
 340  8252 FE 64       >                        cp     100
 340  8254 D2 6B 82    >                        jp		nc,.SpawnPirates
 341  8257 21 AA 96                             ld      hl, ExtraVesselsCounter             ; prevent the next spawning
 342  825A 34                                   inc     (hl)                                ;
 343  825B E6 03                                and     3                                   ; a = random 0..3
 344  825D                                      MMUSelectShipBank1
 344  825D ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 345  8261                                      GetByteAInTable ShipHunterTable             ; get hunter ship type
 345  8261 21 2A 8E    >                    ld          hl,ShipHunterTable
 345  8264 ED 31       >                    add         hl,a
 345  8266 7E          >                    ld          a,(hl)
 346  8267 C3 8F 82                             jp      SpawnShipTypeA
 347  826A                                      ;.......implicit ret
 348  826A C9           .NotAnarchySystem:      ret
 349  826B 78           .SpawnPirates:          ld      a,b                                 ; a = random 0..3
 350  826C E6 03                                and     3
 351  826E 32 AA 96                             ld      (ExtraVesselsCounter),a
 352  8271 32 AE 96                             ld      (PirateCount),a
 353  8274 CD 2B 9C     .PirateLoop:            call    doRandom
 354  8277 4F                                   ld      c,a                                 ; random and random and 7
 355  8278 CD 2B 9C                             call    doRandom
 356  827B A1                                   and     c
 357  827C E6 07                                and     7
 358  827E                                      GetByteAInTable ShipPackList
 358  827E 21 22 8E    >                    ld          hl,ShipPackList
 358  8281 ED 31       >                    add         hl,a
 358  8283 7E          >                    ld          a,(hl)
 359  8284 CD 8F 82                             call    SpawnShipTypeA
 360  8287 21 AE 96                             ld      hl,PirateCount
 361  828A 35                                   dec     (hl)
 362  828B 20 E7                                jr      nz,.PirateLoop
 363  828D C9                                   ret
 364  828E C9           .WitchSpaceEvent:       ret; TODO for now
 365  828F
 366  828F CD 0F E0     SpawnShipTypeA:         call    GetShipBankId
 367  8292                                      MMUSelectShipBankA
 367  8292 ED 92 57    >					 nextreg ShipModelMMU,	    a
 368  8295 78                                   ld      a,b
 369  8296 CD 6A E0                             call    CopyShipToUniverse
 370  8299 CD 3B CA                             call    UnivSetSpawnPosition
 371  829C C9                                   ret
 372  829D
 373  829D
 374  829D                                      ; reset main loop counters
 375  829D                                      ; from BBC TT18 jump code
 376  829D                                      ; need to set system corrodinates, flush out univere ships etc
 377  829D                                      ; set up new star system and landing location in system
 378  829D                                      ; reset ship speed etc (RES2)
 379  829D                                      ; update legal status, missle indicatrions, planet data block, sun data block (SOLAR)
 380  829D                                      ;   put planet into data blokc 1 of FRIN
 381  829D                                      ;   put sun inot data block (NWWSHIP)
 382  829D                                      ; need to look at in system warp code (WARP) - note we need to -reorg all to code for teh station as that will never be in slot 0
 383  829D
 384  829D
 385  829D              WeAreInTransition:
 386  829D 3E 00        DoubleBufferCheck:      ld      a,00
 387  829F                                      IFDEF DOUBLEBUFFER
 388  829F FE 00                                    cp      0
 389  82A1 CA B0 82                                 jp      z,TestTransition
 390  82A4                                          MMUSelectLayer2
 390  82A4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 391  82A8 3A 01 E0                                 ld     a,(varL2_BUFFER_MODE)
 392  82AB FE 00                                    cp     0
 393  82AD C4 DD E0                                 call   nz,l2_flip_buffers
 394  82B0                                      ENDIF
 395  82B0 3A 8C 86     TestTransition:        ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 396  82B3 FE FF                                cp      $FF
 397  82B5 CA 8B 80                             jp      z,MainLoop
 398  82B8 57           BruteForceChange:      ld      d,a
 399  82B9 1E 10                                ld      e,ScreenMapRow
 400  82BB ED 30                                mul
 401  82BD DD 21 9F 85                          ld      ix,ScreenKeyMap
 402  82C1 DD 19                                add     ix,de                               ; Force screen transition
 403  82C3 CD 37 87                             call    SetScreenAIX
 404  82C6 C3 8B 80                             jp MainLoop
 405  82C9
 406  82C9              ;..................................................................................................................................
 407  82C9              ;..Update Universe Objects.........................................................................................................
 408  82C9 AF           UpdateUniverseObjects:  xor     a
 409  82CA 32 23 98                             ld      (SelectedUniverseSlot),a
 410  82CD 57           .UpdateUniverseLoop:     ld      d,a                                             ; d is unaffected by GetTypeInSlotA
 411  82CE              ;.. If the slot is empty (FF) then skip this slot..................................................................................
 412  82CE CD A6 9B                             call    GetTypeAtSlotA
 413  82D1 FE FF                                cp      $FF
 414  82D3 28 2F                                jr      z,.ProcessedUniverseSlot
 415  82D5 7A           .UniverseObjectFound:   ld      a,d                                             ; Get back Universe slot as we want it
 416  82D6                                      MMUSelectUniverseA                                      ; and we apply roll and pitch
 416  82D6 C6 46       >                     add    a,BankUNIVDATA0
 416  82D8 ED 92 56    >                     nextreg UniverseMMU,       a
 417  82DB CD 78 DA                             call    ApplyMyRollAndPitch
 418  82DE CD 52 DB                             call    ApplyShipRollAndPitch
 419  82E1              ;.. If its a space station then see if we are ready to dock........................................................................
 420  82E1 3A 1A C3     .CheckIfDockable:       ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
 421  82E4                                      JumpIfANENusng  ShipTypeStation, .NotDockingCheck       ; if its not a station so we don't test docking
 421  82E4 FE 02       >                        cp     ShipTypeStation
 421  82E6 C2 FA 82    >                        jp      nz,.NotDockingCheck
 422  82E9              .IsDockableAngryCheck:  JumpOnMemBitSet ShipNewBitsAddr, 4, .NotDockingCheck    ; if it is angry then we dont test docking
 422  82E9 3A 1B C3    >                        ld      a,(ShipNewBitsAddr)
 422  82EC CB 67       >                        bit 	4,a
 422  82EE C2 FA 82    >                        jp      nz,.NotDockingCheck
 423  82F1 CD 20 83                             call    DockingCheck                                    ; So it is a candiate to test docking. Now we do the position and angle checks
 424  82F4                                      ReturnIfMemEquN ScreenTransitionForced, $FF            ; if we docked then a transition would have been forced
 424  82F4 3A 8C 86    >                        ld   a,(ScreenTransitionForced)
 424  82F7 FE FF       >                        cp     $FF
 424  82F9 C8          >                        ret    z
 425  82FA              .NotDockingCheck:       CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 425  82FA 3A 23 98    >                        ld   a,(SelectedUniverseSlot)
 425  82FD 21 22 98    >                        ld   hl,CurrentUniverseAI
 425  8300 BE          >                        cp   (hl)
 425  8301 CC D6 84    >                        call    z,UpdateShip
 426  8304 3A 23 98     .ProcessedUniverseSlot: ld      a,(SelectedUniverseSlot)                        ; Move to next ship cycling if need be to 0
 427  8307 3C                                   inc     a                                               ; .
 428  8308                                      JumpIfAGTENusng   UniverseListSize, .UpdateAICounter    ; .
 428  8308 FE 0C       >                        cp     UniverseListSize
 428  830A D2 13 83    >                        jp		nc,.UpdateAICounter
 429  830D 32 23 98                             ld      (SelectedUniverseSlot),a
 430  8310 C3 CD 82                             jp      .UpdateUniverseLoop
 431  8313 3A 22 98     .UpdateAICounter:       ld      a,(CurrentUniverseAI)
 432  8316 3C                                   inc     a
 433  8317 FE 0C                                cp      12
 434  8319 38 01                                jr      c,.IterateAI
 435  831B AF                                   xor     a
 436  831C 32 22 98     .IterateAI:             ld      (CurrentUniverseAI),a
 437  831F C9                                   ret
 438  8320              ;..................................................................................................................................
 439  8320              ;.. Quickly eliminate space stations too far away..................................................................................
 440  8320 ED 4B 0C C0  DockingCheck:           ld      bc,(UBnKxlo)
 441  8324 2A 0F C0                             ld      hl,(UBnKylo)
 442  8327 ED 5B 12 C0                          ld      de,(UBnKzlo)
 443  832B 78                                   ld      a,b
 444  832C B4                                   or      h
 445  832D B2                                   or      d
 446  832E C0                                   ret     nz
 447  832F 79           .CheckIfInRangeLo:      ld      a,c
 448  8330 B5                                   or      l
 449  8331 B3                                   or      e
 450  8332 E6 C0                                and     %11000000                           ; Note we should make this 1 test for scoop or collision too
 451  8334 C0                                   ret     nz
 452  8335              ;.. Now check to see if we are comming in at a viable angle........................................................................
 453  8335 3A 26 C0     .CheckDockingAngle:     ld      a,(UBnkrotmatNosevZ+1)              ; get get high byte of rotmat
 454  8338                                      ReturnIfALTNusng 214                       ; this is the magic angle to be within 26 degrees +/-
 454  8338 FE D6       >                        cp    214
 454  833A D8          >                        ret	 c
 455  833B CD F4 84                             call    GetStationVectorToWork              ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
 456  833E CB 7F                                bit     7,a                                 ; if its negative
 457  8340 C0                                   ret     nz                                  ; we are flying away from it
 458  8341                                      ReturnIfALTNusng 89                         ; if the axis <89 the we are not in the 22 degree angle
 458  8341 FE 59       >                        cp    89
 458  8343 D8          >                        ret	 c
 459  8344 3A 1C C0                             ld      a,(UBnkrotmatRoofvX+1)              ; get roof vector high
 460  8347 E6 7F                                and     SignMask8Bit
 461  8349                                      ReturnIfALTNusng 80                         ; note 80 decimal for 36.6 degrees
 461  8349 FE 50       >                        cp    80
 461  834B D8          >                        ret	 c
 462  834C              ;.. Its passed all validation and we are docking...................................................................................
 463  834C              .AreDocking:            MMUSelectLayer1
 463  834C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 464  8350 3E 06                                ld        a,$6
 465  8352 CD A5 E0                             call      l1_set_border
 466  8355              .EnterDockingBay:       ForceTransition ScreenDocking
 466  8355 3E 0D       >                        ld      a,ScreenDocking
 466  8357 32 8C 86    >                        ld      (ScreenTransitionForced), a
 467  835A C9                                   ret
 468  835B
 469  835B              ;..................................................................................................................................
 470  835B              ;; TODODrawForwardSun:         MMUSelectSun
 471  835B              ;; TODO                        ld      a,(SunKShipType)
 472  835B              ;; TODO.ProcessBody:           cp      129
 473  835B              ;; TODO                        jr      nz,.ProcessPlanet
 474  835B              ;; TODO.ProcessSun:            call    ProcessSun
 475  835B              ;; TODO
 476  835B              ;; TODOProcessSun:             call    CheckSunDistance
 477  835B              ;; TODO
 478  835B              ;; TODO                        ret
 479  835B              ;; TODO.ProcessPlanet:         call    ProcessPlanet
 480  835B              ;; TODO                        ret
 481  835B              ;..................................................................................................................................
 482  835B AF           DrawForwardShips:       xor     a
 483  835C 32 8E 83     DrawShipLoop:           ld      (CurrentShipUniv),a
 484  835F CD A6 9B                             call    GetTypeAtSlotA
 485  8362 FE FF                                cp      $FF
 486  8364 28 0E                                jr      z,ProcessedDrawShip
 487  8366              ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 488  8366 3A 8E 83     SelectShipToDraw:       ld      a,(CurrentShipUniv)
 489  8369                                      MMUSelectUniverseA
 489  8369 C6 46       >                     add    a,BankUNIVDATA0
 489  836B ED 92 56    >                     nextreg UniverseMMU,       a
 490  836E                                      ; Need check for exploding here
 491  836E CD 90 DC     .ProcessUnivShip:       call    ProcessShip             ;; call    ProcessUnivShip
 492  8371              UpdateRadar:
 493  8371              ;;;Does nothing                       ld      a,BankFrontView
 494  8371              ;;;Does nothing                       MMUSelectScreenA
 495  8371              ;;;Does nothing         ld      a,(CurrentShipUniv)
 496  8371              ;;;Does nothing         MMUSelectUniverseA
 497  8371 CD 18 8C                             call    UpdateScannerShip               ; Always update ship positions
 498  8374 3A 8E 83     ProcessedDrawShip:      ld      a,(CurrentShipUniv)
 499  8377 3C                                   inc     a
 500  8378                                      JumpIfALTNusng   UniverseListSize, DrawShipLoop
 500  8378 FE 0C       >                        cp      UniverseListSize
 500  837A DA 5C 83    >                        jp		c, DrawShipLoop
 501  837D              .DrawSunCompass:        MMUSelectSun
 501  837D ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 502  8381 CD 13 8A                             call    UpdateCompassSun                ; Always update the sun position
 503  8384 CD 57 8B                             call    UpdateScannerSun                ; Always attempt to put the sun on the scanner
 504  8387 3A 90 96     .CheckPlanetCompass:    ld      a,(SpaceStationSafeZone)
 505  838A A7                                   and     a
 506  838B 20 00                                jr      nz,.DrawSpaceStationCompass
 507  838D              .DrawPlanetCompass:
 508  838D
 509  838D              .DrawSpaceStationCompass:
 510  838D
 511  838D C9                                   ret
 512  838E              ;..................................................................................................................................
 513  838E 00           CurrentShipUniv:        DB      0
 514  838F
 515  838F              ;;;ProcessUnivShip:        call    CheckDistance               ; Will check for negative Z and skip (how do we deal with read and side views? perhaps minsky transformation handles that?)
 516  838F              ;;;                        ret     c
 517  838F              ;;;                        ld      a,(UbnkDrawAsDot)
 518  838F              ;;;                        and     a
 519  838F              ;;;                        jr      z,.CarryOnWithDraw
 520  838F              ;;;.itsJustADot:           ld      bc,(UBnkNodeArray)          ; if its at dot range
 521  838F              ;;;                        ld      a,$FF                       ; just draw a pixel
 522  838F              ;;;                        MMUSelectLayer2                     ; then go to update radar
 523  838F              ;;;                        call    l2_plot_pixel               ;
 524  838F              ;;;                        ClearCarryFlag
 525  838F              ;;;                        ret
 526  838F              ;;;.ProcessShipNodes:      call    ProcessShip
 527  838F              ;;;
 528  838F              ;;;call    ProcessNodes ; it hink here we need the star and planet special cases
 529  838F              ;;;.DrawShip:              call    CullV2				        ; culling but over aggressive backface assumes all 0 up front TOFIX
 530  838F              ;;;                        call    PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 531  838F              ;;;                        ld      a,(CurrentShipUniv)
 532  838F              ;;;                        MMUSelectUniverseA
 533  838F              ;;;                        call   DrawLines
 534  838F              ;;;                        ClearCarryFlag
 535  838F              ;;;                        ret
 536  838F
 537  838F
 538  838F 3E 46        TestForNextShip:        ld      a,c_Pressed_Quit
 539  8391 CD CE 94                             call    is_key_pressed
 540  8394 C0                                   ret     nz
 541  8395 3A D5 84                             ld      a,(currentDemoShip)
 542  8398 3C                                   inc     a
 543  8399 FE 2C                                cp      44
 544  839B 20 01                                jr      nz,.TestOK
 545  839D AF                                   xor     a
 546  839E 32 D5 84     .TestOK:                ld      (currentDemoShip),a
 547  83A1 CD 5D 9B                             call    ClearUnivSlotList
 548  83A4 3A D5 84                             ld      a,(currentDemoShip)
 549  83A7 47                                   ld      b,a
 550  83A8 AF                                   xor     a
 551  83A9 CD 6F 9B                             call    SetSlotAToTypeB
 552  83AC                                      MMUSelectUniverseN 2
 552  83AC ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 553  83B0 CD 25 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 554  83B3 3A D5 84                             ld      a,(currentDemoShip)
 555  83B6                                      MMUSelectShipBank1
 555  83B6 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 556  83BA CD 0F E0                             call    GetShipBankId
 557  83BD                                      MMUSelectShipBankA
 557  83BD ED 92 57    >					 nextreg ShipModelMMU,	    a
 558  83C0 78                                   ld      a,b
 559  83C1 CD 6A E0                             call    CopyShipToUniverse
 560  83C4 CD EF 87                             call    SetInitialShipPosition
 561  83C7 CD 5B 85                             call    DEBUGSETNODES
 562  83CA C9                                   ret
 563  83CB
 564  83CB              ;----------------------------------------------------------------------------------------------------------------------------------
 565  83CB              NeedAMessageQueue:
 566  83CB
 567  83CB 3A 9B 96     UpdateCountdownNumber:  ld		a,(OuterHyperCount)
 568  83CE 11 25 84                             ld		de,Hyp_counter
 569  83D1 0E 9C                                ld	c, -100
 570  83D3 CD DD 83                             call	.Num1
 571  83D6 0E F6                                ld	c,-10
 572  83D8 CD DD 83                             call	.Num1
 573  83DB 0E FF                                ld	c,-1
 574  83DD 06 2F        .Num1:	                ld	b,'0'-1
 575  83DF 04           .Num2:	                inc		b
 576  83E0 81                                   add		a,c
 577  83E1 38 FC                                jr		c,.Num2
 578  83E3 91                                   sub 	c
 579  83E4 C5                                   push	bc
 580  83E5 F5                                   push	af
 581  83E6 79                                   ld		a,c
 582  83E7 FE FF                                cp		-1
 583  83E9 78                                   ld		a,b
 584  83EA 12                                   ld		(de),a
 585  83EB 13                                   inc		de
 586  83EC F1                                   pop		af
 587  83ED C1                                   pop		bc
 588  83EE C9                                   ret
 589  83EF
 590  83EF              ;----------------------------------------------------------------------------------------------------------------------------------
 591  83EF 54 6F 3A     Hyp_message             DB "To:"
 592  83F2 00 00 00...  Hyp_to                  DS 32
 593  8412 20           Hyp_space1              DB " "
 594  8413 30 2E 30     Hyp_dist_amount         DB "0.0"
 595  8416 2E           Hyp_decimal             DB "."
 596  8417 30           Hyp_fraction            DB "0"
 597  8418 20 4C 59 00  Hyp_dis_ly              DB " LY",0
 598  841C 43 68 61 72  Hyp_charging            DB "Charging:"
 598  8420 67 69 6E 67
 598  8424 3A
 599  8425 30 30 30 00  Hyp_counter             DB "000",0
 600  8429 00 00 00...  Hyp_centeredTarget      DS 32
 601  8449 00           Hyp_centeredEol         DB 0
 602  844A 00 00 00...  Hyp_bufferpadding       DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
 603  846A 00 00 00...  Hyp_centeredCharging    DS 32
 604  848A 00           Hyp_centeredEol2        DB 0
 605  848B 00 00 00...  Hyp_bufferpadding2      DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
 606  84AB
 607  84AB
 608  84AB              ;DisplayTargetAndRange
 609  84AB              ;DisplayCountDownNumber
 610  84AB              ;----------------------------------------------------------------------------------------------------------------------------------
 611  84AB 3A A7 97     TestPauseMode:          ld      a,(GamePaused)
 612  84AE FE 00                                cp      0
 613  84B0 20 12                                jr      nz,.TestForResume
 614  84B2 3A 9F 97     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 615  84B5                                      ReturnIfAGTENusng       ScreenFront
 615  84B5 FE 09       >                        cp    ScreenFront
 615  84B7 D0          >                        ret	 nc
 616  84B8 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 617  84BA CD CE 94                             call    is_key_pressed
 618  84BD C0                                   ret     nz
 619  84BE 3E FF        .PausePressed:          ld      a,$FF                               ; doesn't really matter if we were in pause already as resume is a different key
 620  84C0 32 A7 97                             ld      (GamePaused),a
 621  84C3 C9                                   ret
 622  84C4 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 623  84C6 CD CE 94                             call    is_key_pressed
 624  84C9 C0                                   ret     nz
 625  84CA AF           .ResumePressed:         xor     a
 626  84CB 32 A7 97                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 627  84CE C9                                   ret
 628  84CF
 629  84CF 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 630  84D1 CD CE 94                             call    is_key_pressed
 631  84D4 C9                                   ret
 632  84D5 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 633  84D6
 634  84D6
 635  84D6              ;----------------------------------------------------------------------------------------------------------------------------------
 636  84D6              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
 637  84D6 21 5A 85                             ld      hl,TidyCounter
 638  84D9 35                                   dec     (hl)
 639  84DA C0                                   ret     nz
 640  84DB 3E 10                                ld      a,16
 641  84DD 32 5A 85                             ld      (TidyCounter),a
 642  84E0                                      ; call    TIDY TIDY IS BROKEN
 643  84E0                                     ; add AI in here too
 644  84E0 C9                                   ret
 645  84E1
 646  84E1 F5           InitialiseShipAUnivB:   push    af
 647  84E2 78                                   ld      a,b
 648  84E3                                      MMUSelectUniverseA                          ; load up register into universe bank
 648  84E3 C6 46       >                     add    a,BankUNIVDATA0
 648  84E5 ED 92 56    >                     nextreg UniverseMMU,       a
 649  84E8 CD 25 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 650  84EB                                      MMUSelectShipBank1
 650  84EB ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 651  84EF F1                                   pop     af
 652  84F0 CD 6A E0                             call    CopyShipToUniverse
 653  84F3 C9                                   ret
 654  84F4
 655  84F4 21 0C C0     GetStationVectorToWork: ld      hl,UBnKxlo
 656  84F7 11 B4 97                             ld      de,varVector9ByteWork
 657  84FA ED A0                                ldi
 658  84FC ED A0                                ldi
 659  84FE ED A0                                ldi
 660  8500 ED A0                                ldi
 661  8502 ED A0                                ldi
 662  8504 ED A0                                ldi
 663  8506 ED A0                                ldi
 664  8508 ED A0                                ldi
 665  850A ED A0                                ldi
 666  850C 2A B4 97     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 667  850F ED 5B B7 97                          ld      de, (varVector9ByteWork+3); Y
 668  8513 ED 4B BA 97                          ld      bc, (varVector9ByteWork+6); Z
 669  8517 7D                                   ld      a,l
 670  8518 B3                                   or      e
 671  8519 B1                                   or      c
 672  851A F6 01                                or      1
 673  851C DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 674  851E 7C                                   ld      a,h
 675  851F B2                                   or      d
 676  8520 B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 677  8521 C5           .MulBy2Loop:            push    bc
 678  8522 DD 45                                ld      b,ixl
 679  8524 CB 20                                sla     b                       ; Shift ixl left
 680  8526 DD 68                                ld      ixl,b
 681  8528 C1                                   pop     bc
 682  8529 CB 17                                rl      a                       ; roll into a
 683  852B 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 684  852D                                      ShiftHLLeft1                    ; Shift Left X
 684  852D CB 25       >			   sla l
 684  852F CB 14       >			   rl  h
 685  8531                                      ShiftDELeft1                    ; Shift Left Y
 685  8531 CB 23       >			   sla e
 685  8533 CB 12       >			   rl  d
 686  8535                                      ShiftBCLeft1                    ; Shift Left Z
 686  8535 CB 21       >			   sla c
 686  8537 CB 10       >			   rl  b
 687  8539 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 688  853B 3A B6 97     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 689  853E CB 3C                                srl     h
 690  8540 B4                                   or      h
 691  8541 32 79 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 692  8544 3A B9 97                             ld      a,(varVector9ByteWork+5); y sign
 693  8547 CB 3A                                srl     d
 694  8549 B2                                   or      d
 695  854A 32 7A C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 696  854D 3A BC 97                             ld      a,(varVector9ByteWork+8); y sign
 697  8550 CB 38                                srl     b
 698  8552 B0                                   or      b
 699  8553 32 7B C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 700  8556 CD 8D AB                             call    normaliseXX1596fast
 701  8559 C9                                   ret                             ; will return with a holding Vector Z
 702  855A
 703  855A 00           TidyCounter             DB  0
 704  855B
 705  855B                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 855B
   2+ 855B
   3+ 855B 21 7E 85     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 855E 11 0C C0                             ld      de,UBnKxlo
   5+ 8561 01 09 00                             ld      bc,9
   6+ 8564 ED B0                                ldir
   7+ 8566 21 87 85                             ld      hl,DEBUGROTMATDATA
   8+ 8569 11 15 C0                             ld      de,UBnkrotmatSidevX
   9+ 856C 01 12 00                             ld      bc,6*3
  10+ 856F ED B0                                ldir
  11+ 8571 C9                                   ret
  12+ 8572
  13+ 8572 21 7E 85     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 8575 11 0C C0                             ld      de,UBnKxlo
  15+ 8578 01 06 00                             ld      bc,9 - 3
  16+ 857B ED B0                                ldir
  17+ 857D C9                                   ret
  18+ 857E
  19+ 857E              ; culltest
  20+ 857E              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 857E 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 8582 00 00 5C 07
  21+ 8586 00
  22+ 8587 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 858B 00 00
  23+ 858D 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 8591 00 00
  24+ 8593 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 8597 00 E0
  25+ 8599
  26+ 8599              ; FAILS due to sharp angle, OK now
  27+ 8599              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 8599              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 8599              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 8599              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 8599              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 8599              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 8599              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 8599              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 8599              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 8599              ; Looks OK
  37+ 8599              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 8599              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 8599              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 8599              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 8599              ;
  42+ 8599              ; Massive horizontal line
  43+ 8599              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 8599              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 8599              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 8599              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 8599              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 8599              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 8599              ; Line lost in clipping
  50+ 8599              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 8599              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 8599              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 8599              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 8599              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 8599              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 8599              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 8599              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 8599              ;
  59+ 8599              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 8599              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 8599              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 8599              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 8599              ; top left off right issue
  64+ 8599              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 8599              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 8599              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 8599              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 8599              ; test middle of screen
  69+ 8599              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 8599              ;
  71+ 8599              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 8599              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 8599              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 8599              ; test middle of screen futher away
  75+ 8599              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 8599              ;
  77+ 8599              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 8599              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 8599              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 8599
  81+ 8599              ; Test left center clip still warping
  82+ 8599              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 8599              ;
  84+ 8599              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 8599              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 8599              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 8599              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 8599              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 8599              ;
  90+ 8599              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 8599              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 8599              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 8599              ; Test top center clip test 1 - good test many ships fail
  94+ 8599              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 8599              ;
  96+ 8599              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 8599              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 8599              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 8599              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 8599              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 8599              ;
 102+ 8599              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 8599              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 8599              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 8599              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 8599              ; looks better now may have some clipping issues maybe ship data
 107+ 8599              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 8599              ;
 109+ 8599              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 8599              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 8599 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 859D B0 55
 112+ 859F              ; Test left top center clip
 113+ 859F
 114+ 859F              ; Test right top center clip
 115+ 859F              ; Test left bottom center clip
 116+ 859F              ; Test right bottom center clip
 117+ 859F
 118+ 859F              ; Tests with no clip
 119+ 859F              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 859F              ;
 121+ 859F              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 859F              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 859F              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 859F              ;
 125+ 859F              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 859F              ;
 127+ 859F              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 859F              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 859F
# file closed: ./debugMatrices.asm
 706  859F
 707  859F
 708  859F              ;TODO Optimisation
 709  859F              ; Need this table to handle differnet events
 710  859F              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 711  859F              ; cursor key, joystick press
 712  859F              ; cursor key, joystick press
 713  859F              ; non cursor keys presses
 714  859F              ;
 715  859F              ; First byte is now docked flag
 716  859F              ;
 717  859F              ; Padded to 8 bytes to allow a * 8 for addressing
 718  859F              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 719  859F              ; Byte 1   - Screen Id
 720  859F              ; Byte 2,3 - address of keypress table
 721  859F              ; Byte 4   - Bank with Display code
 722  859F              ; Byte 5,6 - Function for display
 723  859F              ; Byte 7,8 - Main loop update routine
 724  859F              ; Byte 9   - Draw stars Y/N
 725  859F              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 726  859F              ; byte 11  - Double Buffering 0 = no, 1 = yes
 727  859F              ; byte 12,13  - cursor key input routine
 728  859F              ; byte 14  - HyperspaceBlock - can not select this screen if in hyperpace - 00 can , 01 can not
 729  859F              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
 730  859F              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15
 731  859F 00 00 F7 93  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $01,$00;low loop_local_chart_menu,   high loop_local_chart_menu
 731  85A3 32 FC C3 00
 731  85A7 00 00 00 00
 731  85AB 5A C4 01 00
 732  85AF 00 01 F5 93  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $01,$00
 732  85B3 33 43 C1 62
 732  85B7 C2 00 00 00
 732  85BB 05 C3 01 00
 733  85BF 01 02 F9 93                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $01,$00
 733  85C3 36 43 C3 FA
 733  85C7 C3 00 00 00
 733  85CB 00 00 01 00
 734  85CF 02 03 F9 93                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 734  85D3 36 43 C3 00
 734  85D7 00 00 00 00
 734  85DB 00 00 01 00
 735  85DF 00 04 FB 93  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $01,$00
 735  85E3 3F 2C CF 70
 735  85E7 CF 00 00 00
 735  85EB 00 00 01 00
 736  85EF 00 05 FD 93                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 736  85F3 34 F5 C1 00
 736  85F7 00 00 00 00
 736  85FB 00 00 01 00
 737  85FF 00 06 0B 94                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 737  8603 35 F0 C2 00
 737  8607 00 00 00 00
 737  860B 00 00 01 00
 738  860F 01 07 F3 93                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $01,$00
 738  8613 40 EA D3 86
 738  8617 D4 00 00 00
 738  861B 00 00 01 00
 739  861F 01 08 ED 93                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00
 739  8623 41 79 C1 63
 739  8627 C2 00 01 01
 739  862B 00 00 01 00
 740  862F 02 09 C3 93  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 740  8633 3E 6A C0 00
 740  8637 00 01 00 01
 740  863B 75 C2 00 00
 741  863F 02 0A C3 93                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 741  8643 3E 6A C0 00
 741  8647 00 01 00 01
 741  864B 75 C2 00 00
 742  864F 02 0B C3 93                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 742  8653 3E 6A C0 00
 742  8657 00 01 00 01
 742  865B 75 C2 00 00
 743  865F 02 0C C3 93                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 743  8663 3E 6A C0 00
 743  8667 00 01 00 01
 743  866B 75 C2 00 00
 744  866F 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $01,$00
 744  8673 41 F5 C1 98
 744  8677 C2 00 01 01
 744  867B 00 00 01 00
 745  867F 01 0E FF FF                          DB 1,   ScreenHyperspace, $FF,                           $FF,                            BankFrontView,       low draw_hyperspace,         high draw_hyperspace,          low loop_hyperspace,  high loop_hyperspace,   $00,$01,$01,$00
 745  8683 3E 2D C2 73
 745  8687 C2 00 01 01
 745  868B 00
 746  868C
 747  868C              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 748  868C              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 749  868C              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 750  868C              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
 751  868C              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
 752  868C              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
 753  868C FF           ScreenTransitionForced  DB $FF
 754  868D                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 868D              ; Use bank 0 as source and bank 7 as write target
   2+ 868D              ResetUniv:              MODULE ResetUniv
   3+ 868D              ; Move bank 70 into page 0
   4+ 868D                                      MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   4+ 868D ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   5+ 8691 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
   6+ 8693 06 0C                                ld		b,12
   7+ 8695 C5           ResetCopyLoop:          push	bc
   8+ 8696                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
   8+ 8696 C6 46       >                     add    a,BankUNIVDATA0
   8+ 8698 ED 92 56    >                     nextreg UniverseMMU,       a
   9+ 869B F5                                   push	af
  10+ 869C 21 00 C0                             ld		hl,UniverseBankAddr
  11+ 869F 11 00 00                             ld		de,dmaCopySrcAddr
  12+ 86A2 01 F4 1D                             ld		bc,UnivBankSize
  13+ 86A5 CD 6E 93                             call	memcopy_dma
  14+ 86A8 F1                                   pop		af
  15+ 86A9 C1                                   pop		bc
  16+ 86AA 3C                                   inc		a
  17+ 86AB 57                                   ld      d,a
  18+ 86AC C6 41                                add     "A"
  19+ 86AE 32 0B C0                             ld      (StartOfUnivN),a
  20+ 86B1 7A                                   ld      a,d
  21+ 86B2 10 E1                                djnz	ResetCopyLoop
  22+ 86B4 C9                                   ret
  23+ 86B5                                      ENDMODULE
  24+ 86B5
  25+ 86B5              ; Use bank 0 as source and bank 7 as write target
  26+ 86B5              ResetGalaxy:            MODULE ResetGalaxy
  27+ 86B5              ; Move bank 70 into page 0
  28+ 86B5                                      MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0 we can read bank 0 as if it was rom
  28+ 86B5 ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  29+ 86B9 3E 5C                                ld		a,BankGalaxyData1 			   	 ; and write to real location for galaxy data
  30+ 86BB 06 07                                ld		b,7                              ; 8 galaxies but we start with galaxy 0
  31+ 86BD 0E 01                                ld      c,1                              ;
  32+ 86BF F5           ResetCopyLoop:          push	af                               ;
  33+ 86C0 C5                                   push	bc                               ;
  34+ 86C1                                      MMUSelectGalaxyA    	                 ; copy from bank 0 to galaxy 1 to 7
  34+ 86C1 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  35+ 86C4 21 00 E0                             ld		hl,GalaxyDataAddr                ; using dma transfer
  36+ 86C7 11 00 00                             ld		de,dmaCopySrcAddr                ; .
  37+ 86CA 01 CD 1C                             ld		bc,GalaxyBankSize                ; .
  38+ 86CD CD 6E 93                             call	memcopy_dma                      ; .
  39+ 86D0 C1                                   pop		bc                               ; .
  40+ 86D1 21 0F E0                             ld      hl, galaxy_pg_cnt                ; write out the galaxy page nbr to the page so we can diagnose page swapping
  41+ 86D4 79                                   ld      a,c                              ;
  42+ 86D5 C6 30                                add     a, $30                           ; add $30 (48) to get ascii of galaxy nbr
  43+ 86D7 77                                   ld      (hl),a                           ; .
  44+ 86D8 0C                                   inc     c                                ; Do next bank
  45+ 86D9 F1                                   pop     af                               ; .
  46+ 86DA 3C                                   inc		a                                ; .
  47+ 86DB 10 E2                                djnz	ResetCopyLoop                    ; .
  48+ 86DD C9                                   ret
  49+ 86DE                                      ENDMODULE
  50+ 86DE
  51+ 86DE 06 08        SeedAllGalaxies:        ld          b,8
  52+ 86E0 0E 5B                                ld          c,BankGalaxyData0
  53+ 86E2 C5           .SeedAllGalaxiesLoop:   push        bc
  54+ 86E3 79                                   ld          a,c
  55+ 86E4                                      MMUSelectGalaxyA
  55+ 86E4 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  56+ 86E7 CD 90 FC                             call        SeedGalaxy
  57+ 86EA C1                                   pop         bc
  58+ 86EB 0C                                   inc         c
  59+ 86EC 10 F4                                djnz        .SeedAllGalaxiesLoop
  60+ 86EE C9                                   ret
# file closed: ./GameEngine/resetUniverse.asm
 755  86EF
 756  86EF
 757  86EF              ;----------------------------------------------------------------------------------------------------------------------------------
 758  86EF              LaunchedFromStation:    MMUSelectSun
 758  86EF ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 759  86F3 CD 5D C2                             call    CreateSun                      ; create the local sun and set position based on seed
 760  86F6 CD 5D 9B                             call    ClearUnivSlotList
 761  86F9 3E 01                                ld      a,1
 762  86FB CD 69 9B                             call    SetSlot1ToSpaceStation              ; set slot 1 to space station
 763  86FE                                      MMUSelectUniverseA                          ; Prep Target universe
 763  86FE C6 46       >                     add    a,BankUNIVDATA0
 763  8700 ED 92 56    >                     nextreg UniverseMMU,       a
 764  8703                                      MMUSelectShipBank1                          ; Bank in the ship model code
 764  8703 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 765  8707 3E 0D                                ld      a,CoriloisStation
 766  8709 CD 0F E0                             call    GetShipBankId
 767  870C                                      MMUSelectShipBankA                          ; Select the correct bank found
 767  870C ED 92 57    >					 nextreg ShipModelMMU,	    a
 768  870F 78                                   ld      a,b                                 ; Select the correct ship
 769  8710 CD 6A E0                             call    CopyShipToUniverse
 770  8713 CD 89 CA     .BuiltStation:          call    ResetStationLaunch
 771  8716 AF           .NowInFlight:           xor     a
 772  8717 32 A6 97                             ld      (DockedFlag),a
 773  871A                                      ForceTransition ScreenFront
 773  871A 3E 09       >                        ld      a,ScreenFront
 773  871C 32 8C 86    >                        ld      (ScreenTransitionForced), a
 774  871F CD E5 9A                             call    ResetPlayerShip
 775  8722 C9                                   ret
 776  8723
 777  8723 3A E0 85     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 778  8726 DD 21 DF 85                          ld      ix,ScreenCmdr
 779  872A C3 37 87                             jp      SetScreenAIX
 780  872D
 781  872D 3A 30 86     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 782  8730 DD 21 2F 86                          ld      ix,ScreenKeyFront
 783  8734 C3 37 87                             jp      SetScreenAIX
 784  8737              ; false ret here as we get it free from jp
 785  8737
 786  8737              ;----------------------------------------------------------------------------------------------------------------------------------
 787  8737 32 9F 97     SetScreenAIX:           ld      (ScreenIndex),a                 ; Set screen index to a
 788  873A                                      ClearForceTransition                    ; In case it was called by a brute force change in an update loop
 788  873A 3E FF       >                        ld      a,$FF
 788  873C 32 8C 86    >                        ld      (ScreenTransitionForced),a
 789  873F 32 9E 97                             ld      (ScreenChanged),a               ; Set screen changed to FF
 790  8742 DD 7E 04                             ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
 791  8745 32 35 81                             ld      (ScreenLoopBank+1),a            ; setup loop
 792  8748 32 BD 80                             ld      (HandleBankSelect+1),a          ; setup cursor keys
 793  874B                                      MMUSelectScreenA
 793  874B ED 92 56    >                     nextreg ScreenBankMMU,		a
 794  874E DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 - Function for display
 795  8751 32 85 87                             ld      (ScreenUpdateAddr+1),a
 796  8754 DD 7E 06                             ld      a,(ix+6)                        ; Screen Map Byte 6 - Function for display
 797  8757 32 86 87                             ld      (ScreenUpdateAddr+2),a
 798  875A DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 - Main loop update routine
 799  875D 32 3A 81                             ld      (ScreenLoopJP+1),a
 800  8760 DD 7E 08                             ld      a,(ix+8)                        ; Screen Map Byte 8 - Main loop update routine
 801  8763 32 3B 81                             ld      (ScreenLoopJP+2),a
 802  8766 DD 7E 09                             ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N
 803  8769 32 DF 80                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
 804  876C DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 805  876F 32 9F 80                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
 806  8772 DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
 807  8775 32 9E 82                             ld      (DoubleBufferCheck+1),a
 808  8778 DD 7E 0C                             ld      a,(ix+12)
 809  877B 32 C2 80                             ld      (CallCursorRoutine+1),a
 810  877E DD 7E 0D                             ld      a,(ix+13)
 811  8781 32 C3 80                             ld      (CallCursorRoutine+2),a
 812  8784
 813  8784 C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
 814  8787              ;----------------------------------------------------------------------------------------------------------------------------------
 815  8787 3A 9F 97     ViewKeyTest:            ld      a,(ScreenIndex)
 816  878A 4F                                   ld      c,a
 817  878B 06 0E                                ld      b,ScreenMapLen                  ; For now until add screens are added
 818  878D DD 21 9F 85                          ld      ix,ScreenKeyMap
 819  8791 2A 9A 96                             ld      hl,(InnerHyperCount)
 820  8794 7C                                   ld      a,h
 821  8795 B5                                   or      l
 822  8796 FD 67                                ld      iyh,a
 823  8798 FD 7C        ViewScanLoop:           ld      a,iyh
 824  879A A7           .HyperspaceCountdown:   and     a
 825  879B 28 08                                jr      z,.DockedFlag
 826  879D DD 7E 0E                             ld      a,(ix+14)
 827  87A0 FE 01                                cp      1
 828  87A2 CA E7 87                             jp      z,NotReadNextKey
 829  87A5 DD 7E 00     .DockedFlag:            ld      a,(ix+0)                        ; Screen Map Byte 0 Docked flag
 830  87A8              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 831  87A8 FE 03                                cp      3                               ; if not selectable then don't scan this (becuase its a transition screen)
 832  87AA 28 3B                                jr      z,NotReadNextKey                ;
 833  87AC FE 00                                cp      0                               ; if itr a always read skip docking check
 834  87AE 28 14                                jr      z,.NoDocCheck
 835  87B0 57           .DocCheck:              ld      d,a
 836  87B1 3A A6 97                             ld      a,(DockedFlag)
 837  87B4 FE 00                                cp      0                               ; if we are docked
 838  87B6 28 07                                jr      z,.NotDockedCheck
 839  87B8 7A           .DockedCheck:           ld      a,d
 840  87B9 FE 01                                cp      1                               ; if we are docked and its a dock only then scan
 841  87BB 20 2A                                jr      nz,NotReadNextKey
 842  87BD 18 05                                jr      .NoDocCheck
 843  87BF 7A           .NotDockedCheck:        ld      a,d
 844  87C0 FE 02                                cp      2                               ; if we are not docked and its a flight only then scan
 845  87C2 20 23                                jr      nz,NotReadNextKey
 846  87C4 DD 7E 01     .NoDocCheck:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
 847  87C7 B9                                   cp      c                               ; is the index the current screen, if so skip the scan
 848  87C8 5F                                   ld      e,a
 849  87C9 28 1C                                jr      z,NotReadNextKey
 850  87CB DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
 851  87CE FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
 852  87D0 28 15                                jr      z,NotReadNextKey
 853  87D2 32 DC 87                             ld      (ReadKeyAddr+1),a               ; Poke address into the ld hl,(....) below
 854  87D5 DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
 855  87D8 32 DD 87                             ld      (ReadKeyAddr+2),a
 856  87DB 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
 857  87DE 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
 858  87DF                                      IfAIsZeroGoto NotReadNextKey
 858  87DF A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 858  87E0 CA E7 87    >                        jp	z, NotReadNextKey
 859  87E3 7B           .ValidScreenChange:     ld      a,e
 860  87E4 C3 37 87                             jp      SetScreenAIX
 861  87E7              ;--- CODE WILL NOT FALL TO HERE ---
 862  87E7 11 10 00     NotReadNextKey:         ld      de,ScreenMapRow
 863  87EA DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
 864  87EC 10 AA                                djnz    ViewScanLoop
 865  87EE C9                                   ret
 866  87EF
 867  87EF 21 00 00     SetInitialShipPosition: ld      hl,$0000
 868  87F2 22 0C C0                             ld      (UBnKxlo),hl
 869  87F5 21 00 00                             ld      hl,$0000
 870  87F8 22 0F C0                             ld      (UBnKylo),hl
 871  87FB 21 B4 03                             ld      hl,$03B4
 872  87FE 22 12 C0                             ld      (UBnKzlo),hl
 873  8801 AF                                   xor     a
 874  8802 32 0E C0                             ld      (UBnKxsgn),a
 875  8805 32 11 C0                             ld      (UBnKysgn),a
 876  8808 32 14 C0                             ld      (UBnKzsgn),a
 877  880B              ;    call    Reset TODO
 878  880B CD 0B CC                             call	InitialiseOrientation            ;#00;
 879  880E 3E 01                                ld      a,1
 880  8810 32 92 97                             ld      (DELTA),a
 881  8813 21 04 00                             ld      hl,4
 882  8816 22 93 97                             ld      (DELTA4),hl
 883  8819 C9                                   ret
 884  881A
 885  881A
 886  881A                          INCLUDE "./Views/ConsoleDrawing.asm"
# file opened: ./Views/ConsoleDrawing.asm
   1+ 881A              ; bc = start position, d = length, e = colour
   2+ 881A 1E 10        Draw3LineBar:           ld      e,16
   3+ 881C C5 D5                                push    bc,,de
   4+ 881E                                      MMUSelectLayer2
   4+ 881E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   5+ 8822 CD 60 E2                             call    l2_draw_horz_line
   6+ 8825 D1 C1                                pop     bc,,de
   7+ 8827 05                                   dec     b
   8+ 8828 C5 D5                                push    bc,,de
   9+ 882A 1E 14                                ld      e,20
  10+ 882C                                      MMUSelectLayer2
  10+ 882C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  11+ 8830 CD 60 E2                             call    l2_draw_horz_line
  12+ 8833 D1 C1                                pop     bc,,de
  13+ 8835 05                                   dec     b
  14+ 8836                                      MMUSelectLayer2
  14+ 8836 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  15+ 883A CD 60 E2                             call    l2_draw_horz_line
  16+ 883D C9                                   ret
  17+ 883E
  18+ 883E 1E 7C        DrawColourCodedBar:     ld      e,124
  19+ 8840 FE 28                                cp      40
  20+ 8842 30 18                                jr      nc,DrawColourEBar
  21+ 8844 1E 54                                ld      e,84
  22+ 8846 FE 1E                                cp      30
  23+ 8848 30 12                                jr      nc,DrawColourEBar
  24+ 884A 1E D8                                ld      e,216
  25+ 884C FE 14                                cp      20
  26+ 884E 1E EC                                ld      e,236
  27+ 8850 FE 0A                                cp      10
  28+ 8852 30 08                                jr      nc,DrawColourEBar
  29+ 8854 1E E1                                ld      e,225
  30+ 8856 FE 05                                cp      5
  31+ 8858 30 02                                jr      nc,DrawColourEBar
  32+ 885A 1E E0                                ld      e,224
  33+ 885C C5 D5        DrawColourEBar:         push    bc,,de
  34+ 885E                                      MMUSelectLayer2
  34+ 885E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ 8862 CD 60 E2                             call    l2_draw_horz_line
  36+ 8865 D1 C1                                pop     bc,,de
  37+ 8867 05                                   dec     b
  38+ 8868 C5 D5                                push    bc,,de
  39+ 886A                                      MMUSelectLayer2
  39+ 886A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  40+ 886E CD 60 E2                             call    l2_draw_horz_line
  41+ 8871 D1 C1                                pop     bc,,de
  42+ 8873 05                                   dec     b
  43+ 8874                                      MMUSelectLayer2
  43+ 8874 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  44+ 8878 CD 60 E2                             call    l2_draw_horz_line
  45+ 887B C9                                   ret
  46+ 887C
  47+ 887C                                      ; no ret needed as jp handles it
  48+ 887C
  49+ 887C
  50+ 887C
  51+ 887C
  52+ 887C 3A 92 97     UpdateConsole:          ld      a,(DELTA)
  53+ 887F FE 00                                cp      0                           ; don't draw if there is nothing to draw
  54+ 8881 28 0C                                jr      z,.UpdateRoll
  55+ 8883 01 D1 84                             ld      bc,SpeedoStart
  56+ 8886 21 BC 9A                             ld      hl,SpeedoMapping
  57+ 8889 ED 31                                add     hl,a
  58+ 888B 56                                   ld      d,(hl)
  59+ 888C CD 1A 88                             call    Draw3LineBar
  60+ 888F 3A A3 96     .UpdateRoll:            ld      a,(ALP1)
  61+ 8892 FE 00                                cp      0
  62+ 8894 CA C8 88                             jp      z,.UpdatePitch
  63+ 8897 21 E0 8C                             ld      hl,RollMiddle
  64+ 889A 3A A4 96                             ld      a,(ALP2)
  65+ 889D FE 00                                cp      0
  66+ 889F CA BA 88                             jp     z,.PosRoll
  67+ 88A2 16 00        .NegRoll:               ld      d,0
  68+ 88A4 3A A3 96                             ld      a,(ALP1)
  69+ 88A7 CB 27                                sla     a
  70+ 88A9 5F                                   ld      e,a
  71+ 88AA B7                                   or      a
  72+ 88AB ED 52                                sbc     hl,de
  73+ 88AD 44 4D                                ld      bc,hl
  74+ 88AF 3E E1                                ld      a,DialMiddleXPos
  75+ 88B1 91                                   sub     c
  76+ 88B2 57                                   ld      d,a
  77+ 88B3 1E FF                                ld      e,$FF
  78+ 88B5 CD 1A 88                             call    Draw3LineBar
  79+ 88B8 18 0E                                jr      .UpdatePitch
  80+ 88BA 01 E0 8C     .PosRoll:               ld      bc,RollMiddle
  81+ 88BD 3A A3 96                             ld      a,(ALP1)
  82+ 88C0 CB 27                                sla     a
  83+ 88C2 57                                   ld      d,a
  84+ 88C3 1E FF                                ld      e,$FF
  85+ 88C5 CD 1A 88                             call    Draw3LineBar
  86+ 88C8 3A 93 96     .UpdatePitch:           ld      a,(BET1)
  87+ 88CB FE 00                                cp      0
  88+ 88CD CA 02 89                             jp      z,.Fuel
  89+ 88D0 21 E0 94                             ld      hl,PitchMiddle
  90+ 88D3 3A 94 96                             ld      a,(BET2)
  91+ 88D6 FE 00                                cp      0
  92+ 88D8 CA F4 88                             jp      z,.PosPitch
  93+ 88DB 16 00        .NegPitch:              ld      d,0
  94+ 88DD 3A 93 96                             ld      a,(BET1)
  95+ 88E0 CB 27                                sla     a
  96+ 88E2 5F                                   ld      e,a
  97+ 88E3 B7                                   or      a
  98+ 88E4 ED 52                                sbc     hl,de
  99+ 88E6 44 4D                                ld      bc,hl
 100+ 88E8 3E E1                                ld      a,DialMiddleXPos
 101+ 88EA 91                                   sub     c
 102+ 88EB 57                                   ld      d,a
 103+ 88EC 1E FF                                ld      e,$FF
 104+ 88EE CD 1A 88                             call    Draw3LineBar
 105+ 88F1 C3 02 89                             jp      .Fuel
 106+ 88F4 01 E0 94     .PosPitch:              ld      bc,PitchMiddle
 107+ 88F7 3A 93 96                             ld      a,(BET1)
 108+ 88FA CB 27                                sla     a
 109+ 88FC 57                                   ld      d,a
 110+ 88FD 1E FF                                ld      e,$FF
 111+ 88FF CD 1A 88                             call    Draw3LineBar
 112+ 8902 3A D4 9B     .Fuel:                  ld      a,(Fuel)
 113+ 8905 CB 3F                                srl     a               ; divide by 4 to get range on screen
 114+ 8907 21 97 9A                             ld      hl,FuelMapping
 115+ 890A ED 31                                add     hl,a
 116+ 890C 7E                                   ld      a,(hl)
 117+ 890D 01 10 94                             ld      bc,FuelStart
 118+ 8910 57                                   ld      d,a
 119+ 8911 CD 3E 88                             call    DrawColourCodedBar
 120+ 8914 3A 77 98     .ForeShield:            ld      a,(ForeShield)
 121+ 8917 CB 3F                                srl     a
 122+ 8919 CB 3F                                srl     a
 123+ 891B CB 3F                                srl     a
 124+ 891D 01 10 84                             ld      bc,FShieldStart
 125+ 8920 CD 3E 88                             call    DrawColourCodedBar
 126+ 8923 3A 78 98     .AftShield:             ld      a,(AftShield)
 127+ 8926 CB 3F                                srl     a
 128+ 8928 CB 3F                                srl     a
 129+ 892A CB 3F                                srl     a
 130+ 892C 01 10 8D                             ld      bc,AShieldStart
 131+ 892F 57                                   ld      d,a
 132+ 8930 CD 3E 88                             call    DrawColourCodedBar  ;ld		(ForeShield),a
 133+ 8933 3A 79 98     .EnergyBars:            ld      a,(PlayerEnergy)
 134+ 8936 CB 3F                                srl     a                   ; energy = energy / 2 so 31 per bar
 135+ 8938                                      CallIfALTNusng  31 + 1,.Draw1EnergyBar
 135+ 8938 FE 20       >                        cp      31 + 1
 135+ 893A DC 73 89    >                        call	c,.Draw1EnergyBar
 136+ 893D                                      CallIfALTNusng  (31*2) + 1,.Draw2EnergyBars
 136+ 893D FE 3F       >                        cp      (31*2) + 1
 136+ 893F DC 7F 89    >                        call	c,.Draw2EnergyBars
 137+ 8942                                      CallIfALTNusng  (31*3) + 1,.Draw3EnergyBars
 137+ 8942 FE 5E       >                        cp      (31*3) + 1
 137+ 8944 DC 97 89    >                        call	c,.Draw3EnergyBars
 138+ 8947 1E 18        .Draw4EnergyBars:       ld      e,24
 139+ 8949 D6 60                                sub     (32*3)
 140+ 894B 57                                   ld      d,a
 141+ 894C 01 D5 A5                             ld      bc,EnergyBar4Start
 142+ 894F CD 5C 88                             call    DrawColourEBar
 143+ 8952 16 1F                                ld      d,31
 144+ 8954 1E 18                                ld      e,24
 145+ 8956 01 D5 AD                             ld      bc,EnergyBar3Start
 146+ 8959 CD 5C 88                             call    DrawColourEBar
 147+ 895C 16 1F                                ld      d,31
 148+ 895E 1E 18                                ld      e,24
 149+ 8960 01 D5 B5                             ld      bc,EnergyBar2Start
 150+ 8963 CD 5C 88                             call    DrawColourEBar
 151+ 8966 16 1F                                ld      d,31
 152+ 8968 1E 18                                ld      e,24
 153+ 896A 01 D5 BD                             ld      bc,EnergyBar1Start
 154+ 896D CD 5C 88                             call    DrawColourEBar
 155+ 8970 C3 B8 89                             jp      .DoneEnergyBars
 156+ 8973 1E E0        .Draw1EnergyBar:        ld      e,224
 157+ 8975 57                                   ld      d,a
 158+ 8976 01 D5 BD                             ld      bc,EnergyBar1Start
 159+ 8979 CD 5C 88                             call    DrawColourEBar
 160+ 897C C3 B8 89                             jp      .DoneEnergyBars
 161+ 897F 1E D8        .Draw2EnergyBars:       ld      e,216
 162+ 8981 D6 1F                                sub     31
 163+ 8983 57                                   ld      d,a
 164+ 8984 01 D5 B5                             ld      bc,EnergyBar2Start
 165+ 8987 CD 5C 88                             call    DrawColourEBar
 166+ 898A 16 1F                                ld      d,31
 167+ 898C 1E D8                                ld      e,216
 168+ 898E 01 D5 BD                             ld      bc,EnergyBar1Start
 169+ 8991 CD 5C 88                             call    DrawColourEBar
 170+ 8994 C3 B8 89                             jp      .DoneEnergyBars
 171+ 8997 1E 14        .Draw3EnergyBars:       ld      e,20
 172+ 8999 D6 3E                                sub     31*2
 173+ 899B 57                                   ld      d,a
 174+ 899C 1E 14                                ld      e,20
 175+ 899E 01 D5 AD                             ld      bc,EnergyBar3Start
 176+ 89A1 CD 5C 88                             call    DrawColourEBar
 177+ 89A4 16 1F                                ld      d,31
 178+ 89A6 1E 14                                ld      e,20
 179+ 89A8 01 D5 B5                             ld      bc,EnergyBar2Start
 180+ 89AB CD 5C 88                             call    DrawColourEBar
 181+ 89AE 16 1F                                ld      d,31
 182+ 89B0 1E 14                                ld      e,20
 183+ 89B2 01 D5 BD                             ld      bc,EnergyBar1Start
 184+ 89B5 CD 5C 88                             call    DrawColourEBar
 185+ 89B8              .DoneEnergyBars:
 186+ 89B8
 187+ 89B8
 188+ 89B8
 189+ 89B8              ; NEED ENERGY BAR
 190+ 89B8              ;PlayerEnergy
 191+ 89B8              ; BNEED LASER temp
 192+ 89B8              ; NEED CABIN TEMP
 193+ 89B8              ;NEED ALTITUDE
 194+ 89B8              ; Draw compas - if in range draw station, else do planet
 195+ 89B8 C9           .DoneConsole:           ret
 196+ 89B9
 197+ 89B9
 198+ 89B9
 199+ 89B9              ScannerBottom           equ 190
 200+ 89B9              ScannerTypeMissle       equ 2
 201+ 89B9              ScannerXRangeOffset     equ $35
 202+ 89B9              ScannerCenter           equ 127
 203+ 89B9
 204+ 89B9              ScannerDefault          equ 0
 205+ 89B9              ScannerMissile          equ 2
 206+ 89B9              ScannerStation          equ 4
 207+ 89B9              ScannerEnemy            equ 6
 208+ 89B9
 209+ 89B9
 210+ 89B9 00           SunXScaled              DB  0
 211+ 89BA 00           SunYScaled              DB  0
 212+ 89BB 00           SunZScaled              DB  0
 213+ 89BC
 214+ 89BC
 215+ 89BC 18 1C 90 FC  ScannerColourTable:     DB  L2ColourGREEN_2, L2ColourGREEN_1, L2ColourYELLOW_4,L2ColourYELLOW_1,L2ColourCYAN_2,L2ColourCYAN_1,L2ColourRED_4,L2ColourPINK_4
 215+ 89C0 12 1F 80 E0
 216+ 89C4 C0 E0        ScannerColourTableAngry:DB  L2ColourRED_2, L2ColourRED_1 ; just a place holder for now
 217+ 89C6
 218+ 89C6              GetShipColor:           MACRO
 219+ 89C6 ~                                    ld      a,(ShipTypeAddr)
 220+ 89C6 ~                                    sla     a                            ; as its byte pairs * 2
 221+ 89C6 ~                                    ld      hl,ScannerColourTable
 222+ 89C6 ~                                    add     hl,a
 223+ 89C6 ~                                    ld      a,(hl)
 224+ 89C6                                      ENDM
 225+ 89C6              GetShipColorBright:     MACRO
 226+ 89C6 ~                                    ld      a,(ShipTypeAddr)
 227+ 89C6 ~                                    sla     a                            ; as its byte pairs * 2
 228+ 89C6 ~                                    inc     a
 229+ 89C6 ~                                    ld      hl,ScannerColourTable
 230+ 89C6 ~                                    add     hl,a
 231+ 89C6 ~                                    ld      a,(hl)
 232+ 89C6                                      ENDM
 233+ 89C6
 234+ 89C6              Shift24BitScan:         MACRO   regHi, reglo
 235+ 89C6 ~                                    ld      hl,(regHi)
 236+ 89C6 ~                                    ld      b,h
 237+ 89C6 ~                                    ld      a,h
 238+ 89C6 ~                                    and     SignMask8Bit
 239+ 89C6 ~                                    ld      h,a
 240+ 89C6 ~                                    ld      a,(reglo)
 241+ 89C6 ~                                    sla     a
 242+ 89C6 ~                                    rl      l
 243+ 89C6 ~                                    rl      h
 244+ 89C6 ~                                    sla     a
 245+ 89C6 ~                                    rl      l
 246+ 89C6 ~                                    rl      h
 247+ 89C6 ~                                    sla     a
 248+ 89C6 ~                                    rl      l
 249+ 89C6 ~                                    rl      h
 250+ 89C6 ~                                    sla     a
 251+ 89C6 ~                                    rl      l
 252+ 89C6 ~                                    rl      h
 253+ 89C6 ~                                    sla     a
 254+ 89C6 ~                                    rl      l
 255+ 89C6 ~                                    rl      h
 256+ 89C6 ~                                    sla     a
 257+ 89C6 ~                                    rl      l
 258+ 89C6 ~                                    rl      h
 259+ 89C6                                      ENDM
 260+ 89C6
 261+ 89C6              SunShiftRight           MACRO   reglo, reghi, regsgn
 262+ 89C6 ~                                    ld      a,regsgn
 263+ 89C6 ~                                    srl     a
 264+ 89C6 ~                                    rr      reghi
 265+ 89C6 ~                                    rr      reglo
 266+ 89C6 ~                                    ld      regsgn,a
 267+ 89C6                                      ENDM
 268+ 89C6
 269+ 89C6              ;SunShiftPosTo15Bit:     ld      de,(SBnKzlo)
 270+ 89C6              ;                        ld      a,(SBnKzsgn)
 271+ 89C6              ;                        push    af
 272+ 89C6              ;                        and     SignMask8Bit
 273+ 89C6              ;                        ld      iyl,a
 274+ 89C6              ;                        ld      hl,(SBnKxlo)
 275+ 89C6              ;                        ld      a,(SBnKxsgn)
 276+ 89C6              ;                        push    af
 277+ 89C6              ;                        and     SignMask8Bit
 278+ 89C6              ;                        ld      ixl,a
 279+ 89C6              ;                        ld      bc,(SBnKylo)
 280+ 89C6              ;                        ld      a,(SBnKysgn)
 281+ 89C6              ;                        and     SignMask8Bit
 282+ 89C6              ;                        push    af
 283+ 89C6              ;                        ld      iyh,a
 284+ 89C6              ;.ShiftLoop:             ld      a,iyh
 285+ 89C6              ;                        or      iyl
 286+ 89C6              ;                        or      ixl
 287+ 89C6              ;                        jr      z,.ShiftBit15
 288+ 89C6              ;.ShiftZ:                SunShiftRight iyl, d, e
 289+ 89C6              ;.ShiftX:                SunShiftRight ixl, h, l
 290+ 89C6              ;.ShiftY:                SunShiftRight ixh, b, c
 291+ 89C6              ;                        jr      .ShipLoop
 292+ 89C6              ;.ShiftBit15:            ld      a,iyh
 293+ 89C6              ;                        or      iyl
 294+ 89C6              ;                        or      ixl
 295+ 89C6              ;                        jr      z,.CompletedShift
 296+ 89C6              ;.ShiftZ:                SunShiftRight iyl, d, e
 297+ 89C6              ;.ShiftX:                SunShiftRight ixl, h, l
 298+ 89C6              ;.ShiftY:                SunShiftRight ixh, b, c             ; finally shift to 15 bits so we can get the sign back
 299+ 89C6              ;.CompletedShift:        pop     af                          ; get ysgn
 300+ 89C6              ;                        and     SignOnly8Bit
 301+ 89C6              ;                        or      b
 302+ 89C6              ;                        ld      b,a
 303+ 89C6              ;                        pop     af                          ; get xsgn
 304+ 89C6              ;                        and     SignOnly8Bit
 305+ 89C6              ;                        or      h
 306+ 89C6              ;                        ld      h,a
 307+ 89C6              ;                        pop     af                          ; get zsgn
 308+ 89C6              ;                        and     SignOnly8Bit
 309+ 89C6              ;                        or      d
 310+ 89C6              ;                        ld      d,a
 311+ 89C6              ;                        ret
 312+ 89C6              ;
 313+ 89C6 ED 5B 17 C0  ScaleSunPos:            ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 314+ 89CA 7A                                   ld      a,d                         ; .
 315+ 89CB F5                                   push    af                          ; .
 316+ 89CC E6 7F                                and     SignMask8Bit                ; .
 317+ 89CE 57                                   ld      d,a                         ; .
 318+ 89CF 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 319+ 89D2 7C                                   ld      a,h                         ; .
 320+ 89D3 F5                                   push    af                          ; .
 321+ 89D4 E6 7F                                and     SignMask8Bit                ; .
 322+ 89D6 67                                   ld      h,a                         ; .
 323+ 89D7 ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 324+ 89DB 78                                   ld      a,b                         ; .
 325+ 89DC F5                                   push    af                          ; .
 326+ 89DD E6 7F                                and     SignMask8Bit                ; .
 327+ 89DF 47                                   ld      b,a                         ; .
 328+ 89E0 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 329+ 89E1 B2                                   or      d                           ; .
 330+ 89E2 B4                                   or      h                           ; .
 331+ 89E3 28 0E                                jr      z,.Shifted                  ; .
 332+ 89E5                                      ShiftBCRight1                       ; .
 332+ 89E5 CB 38       >			   srl b
 332+ 89E7 CB 19       >			   rr  c
 333+ 89E9                                      ShiftHLRight1                       ; .
 333+ 89E9 CB 3C       >			   srl h
 333+ 89EB CB 1D       >			   rr  l
 334+ 89ED                                      ShiftDERight1                       ; .
 334+ 89ED CB 3A       >			   srl d
 334+ 89EF CB 1B       >			   rr  e
 335+ 89F1 18 ED                                jr      .ShiftLoop
 336+ 89F3 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 337+ 89F4 B5                                   or      l                           ;
 338+ 89F5 B2                                   or      d                           ;
 339+ 89F6 E6 80                                and     $80                         ;
 340+ 89F8 28 0C                                jr      z,.NoAdditionalShift        ;
 341+ 89FA                                      ShiftBCRight1                       ; we want 7 bit
 341+ 89FA CB 38       >			   srl b
 341+ 89FC CB 19       >			   rr  c
 342+ 89FE                                      ShiftHLRight1                       ; to acommodate the sign
 342+ 89FE CB 3C       >			   srl h
 342+ 8A00 CB 1D       >			   rr  l
 343+ 8A02                                      ShiftDERight1                       ; .
 343+ 8A02 CB 3A       >			   srl d
 343+ 8A04 CB 1B       >			   rr  e
 344+ 8A06 F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 345+ 8A07 E6 80                                and     SignOnly8Bit                ;
 346+ 8A09 47                                   ld      b,a                         ; bc = shifted signed Y
 347+ 8A0A F1                                   pop     af                          ; get xsgn
 348+ 8A0B E6 80                                and     SignOnly8Bit                ;
 349+ 8A0D 67                                   ld      h,a                         ; hl = shifted signed X
 350+ 8A0E F1                                   pop     af                          ; get zsgn
 351+ 8A0F E6 80                                and     SignOnly8Bit                ;
 352+ 8A11 57                                   ld      d,a                         ; de = shifted signed Z
 353+ 8A12 C9                                   ret
 354+ 8A13
 355+ 8A13
 356+ 8A13
 357+ 8A13              UpdateCompassSun:       MMUSelectSun
 357+ 8A13 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 358+ 8A17 CD C6 89                             call    ScaleSunPos                 ; get as 7 bit signed
 359+ 8A1A C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 360+ 8A1E 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 361+ 8A1F 59                                   ld      e,c                         ; .
 362+ 8A20 ED 30                                mul                                 ; .
 363+ 8A22 42 4B                                ld      bc,de                       ; .
 364+ 8A24 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 365+ 8A25 5D                                   ld      e,l                         ; .
 366+ 8A26 ED 30                                mul                                 ; .
 367+ 8A28 EB                                   ex      de,hl                       ; .
 368+ 8A29 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 369+ 8A2A 53                                   ld      d,e                         ; de = z ^
 370+ 8A2B ED 30                                mul                                 ; .
 371+ 8A2D 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 372+ 8A2E 09                                   add     hl,bc
 373+ 8A2F EB                                   ex      de,hl
 374+ 8A30 CD CC A8                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 375+ 8A33                                      ; if h <> 0 then more difficult
 376+ 8A33 55                                   ld      d,l                         ; iyl = q
 377+ 8A34 FD 6A                                ld      iyl,d                       ; .
 378+ 8A36 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 379+ 8A37 7C                                   ld      a,h                         ; c = sign
 380+ 8A38 E6 80                                and     SignOnly8Bit                ; .
 381+ 8A3A 4F                                   ld      c,a                         ; .
 382+ 8A3B C5                                   push    bc                          ; save sign to stack
 383+ 8A3C 7D                                   ld      a,l                         ; a = 8 bit abs z
 384+ 8A3D CD AF AD                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 385+ 8A40 5F                                   ld      e,a                         ; .
 386+ 8A41                                      EDiv10Inline                        ; a = e / 10
 386+ 8A41 16 00       >                        ld      d,0
 386+ 8A43 62 6B       >                        ld      hl,de
 386+ 8A45 29          >                        add     hl,hl
 386+ 8A46 19          >                        add     hl,de
 386+ 8A47 29          >                        add     hl,hl
 386+ 8A48 29          >                        add     hl,hl
 386+ 8A49 19          >                        add     hl,de
 386+ 8A4A 29          >                        add     hl,hl
 387+ 8A4B 7C                                   ld      a,h                         ; .
 388+ 8A4C C1                                   pop     bc                          ; retrieve sign
 389+ 8A4D FE 00                                cp      0
 390+ 8A4F 28 06                                jr      z,.DoneNormX                 ; in case we end up with - 0
 391+ 8A51 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 392+ 8A53 28 02                                jr      z,.DoneNormX
 393+ 8A55 ED 44                                neg
 394+ 8A57 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 395+ 8A59 FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 396+ 8A5B E1                                   pop     hl                          ; hl z scaled
 397+ 8A5C 7C                                   ld      a,h                         ; c = sign
 398+ 8A5D E6 80                                and     SignOnly8Bit                ; .
 399+ 8A5F 4F                                   ld      c,a                         ; .
 400+ 8A60 C5                                   push    bc                          ; save sign to stack
 401+ 8A61 7D                                   ld      a,l                         ; e = a /q * 96
 402+ 8A62 CD AF AD                             call    AequAdivQmul96ABS              ; .
 403+ 8A65 5F                                   ld      e,a                         ; a = e / 10
 404+ 8A66                                      EDiv10Inline                        ; .
 404+ 8A66 16 00       >                        ld      d,0
 404+ 8A68 62 6B       >                        ld      hl,de
 404+ 8A6A 29          >                        add     hl,hl
 404+ 8A6B 19          >                        add     hl,de
 404+ 8A6C 29          >                        add     hl,hl
 404+ 8A6D 29          >                        add     hl,hl
 404+ 8A6E 19          >                        add     hl,de
 404+ 8A6F 29          >                        add     hl,hl
 405+ 8A70 7C                                   ld      a,h                         ; retrieve sign
 406+ 8A71 C1                                   pop     bc                          ; retrieve sign
 407+ 8A72 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 408+ 8A74 28 02                                jr      z,.DoneNormZ
 409+ 8A76 ED 44                                neg
 410+ 8A78 DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 411+ 8A7A FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 412+ 8A7C E1                                   pop     hl                          ; hl y scaled
 413+ 8A7D 7C                                   ld      a,h                         ; c = sign
 414+ 8A7E E6 80                                and     SignOnly8Bit                ; .
 415+ 8A80 4F                                   ld      c,a                         ; .
 416+ 8A81 C5                                   push    bc                          ; save sign to stack
 417+ 8A82 7D                                   ld      a,l                         ; a = 8 bit signed z
 418+ 8A83 CD AF AD                             call    AequAdivQmul96ABS              ; .
 419+ 8A86 5F                                   ld      e,a                         ; a = e / 10
 420+ 8A87                                      EDiv10Inline                        ; .
 420+ 8A87 16 00       >                        ld      d,0
 420+ 8A89 62 6B       >                        ld      hl,de
 420+ 8A8B 29          >                        add     hl,hl
 420+ 8A8C 19          >                        add     hl,de
 420+ 8A8D 29          >                        add     hl,hl
 420+ 8A8E 29          >                        add     hl,hl
 420+ 8A8F 19          >                        add     hl,de
 420+ 8A90 29          >                        add     hl,hl
 421+ 8A91 7C                                   ld      a,h                         ; retrieve sign
 422+ 8A92 C1                                   pop     bc                          ; retrieve sign
 423+ 8A93 FE 00                                cp      0
 424+ 8A95 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 425+ 8A97 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 426+ 8A99 28 02                                jr      z,.DoneNormY
 427+ 8A9B ED 44                                neg
 428+ 8A9D 47           .DoneNormY:             ld      b,a                       ; .
 429+ 8A9E DD 4C                                ld      c,ixh
 430+ 8AA0              .SetSprite:             MMUSelectSpriteBank
 430+ 8AA0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 431+ 8AA4 CD 02 E1                             call    compass_sun_move
 432+ 8AA7 DD 7D                                ld      a,ixl
 433+ 8AA9 CB 7F                                bit     7,a
 434+ 8AAB 20 04                                jr      nz,.SunBehind
 435+ 8AAD CD 96 E1     .SunInfront:            call    show_compass_sun_infront
 436+ 8AB0 C9                                   ret
 437+ 8AB1 CD A1 E1     .SunBehind:             call    show_compass_sun_behind
 438+ 8AB4 C9                                   ret
 439+ 8AB5
 440+ 8AB5              UpdateCompassStation:   MMUSelectShipBankN 0
 440+ 8AB5 ED 91 57 00 >					 nextreg ShipModelMMU,	    0
 441+ 8AB9
 442+ 8AB9 CD C6 89                             call    ScaleSunPos                 ; get as 7 bit signed
 443+ 8ABC C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 444+ 8AC0 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 445+ 8AC1 59                                   ld      e,c                         ; .
 446+ 8AC2 ED 30                                mul                                 ; .
 447+ 8AC4 42 4B                                ld      bc,de                       ; .
 448+ 8AC6 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 449+ 8AC7 5D                                   ld      e,l                         ; .
 450+ 8AC8 ED 30                                mul                                 ; .
 451+ 8ACA EB                                   ex      de,hl                       ; .
 452+ 8ACB D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 453+ 8ACC 53                                   ld      d,e                         ; de = z ^
 454+ 8ACD ED 30                                mul                                 ; .
 455+ 8ACF 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 456+ 8AD0 09                                   add     hl,bc
 457+ 8AD1 EB                                   ex      de,hl
 458+ 8AD2 CD CC A8                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 459+ 8AD5                                      ; if h <> 0 then more difficult
 460+ 8AD5 55                                   ld      d,l                         ; iyl = q
 461+ 8AD6 FD 6A                                ld      iyl,d                       ; .
 462+ 8AD8 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 463+ 8AD9 7C                                   ld      a,h                         ; c = sign
 464+ 8ADA E6 80                                and     SignOnly8Bit                ; .
 465+ 8ADC 4F                                   ld      c,a                         ; .
 466+ 8ADD C5                                   push    bc                          ; save sign to stack
 467+ 8ADE 7D                                   ld      a,l                         ; a = 8 bit abs z
 468+ 8ADF CD AF AD                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 469+ 8AE2 5F                                   ld      e,a                         ; .
 470+ 8AE3                                      EDiv10Inline                        ; a = e / 10
 470+ 8AE3 16 00       >                        ld      d,0
 470+ 8AE5 62 6B       >                        ld      hl,de
 470+ 8AE7 29          >                        add     hl,hl
 470+ 8AE8 19          >                        add     hl,de
 470+ 8AE9 29          >                        add     hl,hl
 470+ 8AEA 29          >                        add     hl,hl
 470+ 8AEB 19          >                        add     hl,de
 470+ 8AEC 29          >                        add     hl,hl
 471+ 8AED 7C                                   ld      a,h                         ; .
 472+ 8AEE C1                                   pop     bc                          ; retrieve sign
 473+ 8AEF FE 00                                cp      0
 474+ 8AF1 28 06                                jr      z,.DoneNormX                 ; in case we end up with - 0
 475+ 8AF3 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 476+ 8AF5 28 02                                jr      z,.DoneNormX
 477+ 8AF7 ED 44                                neg
 478+ 8AF9 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 479+ 8AFB FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 480+ 8AFD E1                                   pop     hl                          ; hl z scaled
 481+ 8AFE 7C                                   ld      a,h                         ; c = sign
 482+ 8AFF E6 80                                and     SignOnly8Bit                ; .
 483+ 8B01 4F                                   ld      c,a                         ; .
 484+ 8B02 C5                                   push    bc                          ; save sign to stack
 485+ 8B03 7D                                   ld      a,l                         ; e = a /q * 96
 486+ 8B04 CD AF AD                             call    AequAdivQmul96ABS              ; .
 487+ 8B07 5F                                   ld      e,a                         ; a = e / 10
 488+ 8B08                                      EDiv10Inline                        ; .
 488+ 8B08 16 00       >                        ld      d,0
 488+ 8B0A 62 6B       >                        ld      hl,de
 488+ 8B0C 29          >                        add     hl,hl
 488+ 8B0D 19          >                        add     hl,de
 488+ 8B0E 29          >                        add     hl,hl
 488+ 8B0F 29          >                        add     hl,hl
 488+ 8B10 19          >                        add     hl,de
 488+ 8B11 29          >                        add     hl,hl
 489+ 8B12 7C                                   ld      a,h                         ; retrieve sign
 490+ 8B13 C1                                   pop     bc                          ; retrieve sign
 491+ 8B14 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 492+ 8B16 28 02                                jr      z,.DoneNormZ
 493+ 8B18 ED 44                                neg
 494+ 8B1A DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 495+ 8B1C FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 496+ 8B1E E1                                   pop     hl                          ; hl y scaled
 497+ 8B1F 7C                                   ld      a,h                         ; c = sign
 498+ 8B20 E6 80                                and     SignOnly8Bit                ; .
 499+ 8B22 4F                                   ld      c,a                         ; .
 500+ 8B23 C5                                   push    bc                          ; save sign to stack
 501+ 8B24 7D                                   ld      a,l                         ; a = 8 bit signed z
 502+ 8B25 CD AF AD                             call    AequAdivQmul96ABS              ; .
 503+ 8B28 5F                                   ld      e,a                         ; a = e / 10
 504+ 8B29                                      EDiv10Inline                        ; .
 504+ 8B29 16 00       >                        ld      d,0
 504+ 8B2B 62 6B       >                        ld      hl,de
 504+ 8B2D 29          >                        add     hl,hl
 504+ 8B2E 19          >                        add     hl,de
 504+ 8B2F 29          >                        add     hl,hl
 504+ 8B30 29          >                        add     hl,hl
 504+ 8B31 19          >                        add     hl,de
 504+ 8B32 29          >                        add     hl,hl
 505+ 8B33 7C                                   ld      a,h                         ; retrieve sign
 506+ 8B34 C1                                   pop     bc                          ; retrieve sign
 507+ 8B35 FE 00                                cp      0
 508+ 8B37 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 509+ 8B39 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 510+ 8B3B 28 02                                jr      z,.DoneNormY
 511+ 8B3D ED 44                                neg
 512+ 8B3F 47           .DoneNormY:             ld      b,a                       ; .
 513+ 8B40 DD 4C                                ld      c,ixh
 514+ 8B42              .SetSprite:             MMUSelectSpriteBank
 514+ 8B42 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 515+ 8B46 CD 02 E1                             call    compass_sun_move
 516+ 8B49 DD 7D                                ld      a,ixl
 517+ 8B4B CB 7F                                bit     7,a
 518+ 8B4D 20 04                                jr      nz,.SunBehind
 519+ 8B4F CD 96 E1     .SunInfront:            call    show_compass_sun_infront
 520+ 8B52 C9                                   ret
 521+ 8B53 CD A1 E1     .SunBehind:             call    show_compass_sun_behind
 522+ 8B56 C9                                   ret
 523+ 8B57
 524+ 8B57
 525+ 8B57              UpdateScannerSun:       MMUSelectSun
 525+ 8B57 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 526+ 8B5B                                      Shift24BitScan  SBnKyhi, SBnKylo
 526+ 8B5B 2A 14 C0    >                        ld      hl,(SBnKyhi)
 526+ 8B5E 44          >                        ld      b,h
 526+ 8B5F 7C          >                        ld      a,h
 526+ 8B60 E6 7F       >                        and     SignMask8Bit
 526+ 8B62 67          >                        ld      h,a
 526+ 8B63 3A 13 C0    >                        ld      a,(SBnKylo)
 526+ 8B66 CB 27       >                        sla     a
 526+ 8B68 CB 15       >                        rl      l
 526+ 8B6A CB 14       >                        rl      h
 526+ 8B6C CB 27       >                        sla     a
 526+ 8B6E CB 15       >                        rl      l
 526+ 8B70 CB 14       >                        rl      h
 526+ 8B72 CB 27       >                        sla     a
 526+ 8B74 CB 15       >                        rl      l
 526+ 8B76 CB 14       >                        rl      h
 526+ 8B78 CB 27       >                        sla     a
 526+ 8B7A CB 15       >                        rl      l
 526+ 8B7C CB 14       >                        rl      h
 526+ 8B7E CB 27       >                        sla     a
 526+ 8B80 CB 15       >                        rl      l
 526+ 8B82 CB 14       >                        rl      h
 526+ 8B84 CB 27       >                        sla     a
 526+ 8B86 CB 15       >                        rl      l
 526+ 8B88 CB 14       >                        rl      h
 527+ 8B8A 3A 12 C0     .IsItInRange:           ld      a,(SBnKxsgn)                ; if the high byte is not
 528+ 8B8D 21 15 C0                             ld      hl,SBnKysgn                 ; a sign only
 529+ 8B90 B6                                   or      (hl)                        ; then its too far away
 530+ 8B91 21 18 C0                             ld      hl,SBnKzsgn                 ; for the scanner to draw
 531+ 8B94 B6                                   or      (hl)                        ; so rely on the compass
 532+ 8B95 E6 7F                                and     SignMask8Bit                ;
 533+ 8B97 C0                                   ret     nz                          ;
 534+ 8B98 2A 16 C0     .ItsInRange:            ld      hl,(SBnKzlo)                ; we will get unsigned values
 535+ 8B9B ED 5B 10 C0                          ld      de,(SBnKxlo)
 536+ 8B9F ED 4B 13 C0                          ld      bc,(SBnKylo)
 537+ 8BA3 7C                                   ld      a,h
 538+ 8BA4 B2                                   or      d
 539+ 8BA5 B0                                   or      b
 540+ 8BA6 E6 C0                                and     %11000000
 541+ 8BA8 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 542+ 8BA9 3A 12 C0     .MakeX2Compliment:      ld      a,(SBnKxsgn)
 543+ 8BAC CB 7F                                bit     7,a
 544+ 8BAE 28 04                                jr      z,.absXHi
 545+ 8BB0                                      NegD
 545+ 8BB0 7A          >                    ld      a,d
 545+ 8BB1 ED 44       >                    neg
 545+ 8BB3 57          >                    ld      d,a
 546+ 8BB4 7A           .absXHi:                ld      a,d
 547+ 8BB5 C6 80                                add     ScannerX
 548+ 8BB7 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 549+ 8BB9 CB 3C        .ProcessZCoord:         srl     h
 550+ 8BBB CB 3C                                srl     h
 551+ 8BBD 3A 18 C0     .MakeZ2Compliment:      ld      a,(SBnKzsgn)
 552+ 8BC0 CB 7F                                bit     7,a
 553+ 8BC2 28 04                                jr      z,.absZHi
 554+ 8BC4                                      NegH
 554+ 8BC4 7C          >                    ld      a,h
 554+ 8BC5 ED 44       >                    neg
 554+ 8BC7 67          >                    ld      h,a
 555+ 8BC8 3E AB        .absZHi:                ld      a,ScannerY
 556+ 8BCA 94                                   sub     h
 557+ 8BCB FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 558+ 8BCD CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 559+ 8BCF 20 0B                                jr      nz,.StickHasLength
 560+ 8BD1 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 561+ 8BD3 FD 6F                                ld      iyl,a
 562+ 8BD5                                      MMUSelectLayer2
 562+ 8BD5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 563+ 8BD9 C3 04 8C                             jp      .NoStick
 564+ 8BDC 3A 15 C0     .StickHasLength:        ld      a,(SBnKysgn)                ; if b  =  0 then no line
 565+ 8BDF CB 7F                                bit     7,a
 566+ 8BE1 28 04                                jr      z,.absYHi
 567+ 8BE3                                      NegB
 567+ 8BE3 78          >                    ld      a,b
 567+ 8BE4 ED 44       >                    neg
 567+ 8BE6 47          >                    ld      b,a
 568+ 8BE7 FD 7C        .absYHi:                ld      a,iyh
 569+ 8BE9 90           .SetStickPos:           sub     b
 570+ 8BEA                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 570+ 8BEA FE BE       >                        cp      ScannerBottom
 570+ 8BEC DA F1 8B    >                        jp		c, .StickOnScreen
 571+ 8BEF 3E BE                                ld      a,ScannerBottom
 572+ 8BF1 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 573+ 8BF3 DD 6F                                ld      ixl,a
 574+ 8BF5 FD 44                                ld      b,iyh                       ; from row
 575+ 8BF7 DD 4C                                ld      c,ixh                       ; from col
 576+ 8BF9 FD 55                                ld      d,iyl                       ; to row
 577+ 8BFB 1E B4                                ld      e,L2SunScanner
 578+ 8BFD                                      MMUSelectLayer2
 578+ 8BFD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 579+ 8C01 CD 0B E3                             call    l2_draw_vert_line_to
 580+ 8C04 FD 45        .NoStick:               ld      b,iyl                       ; row
 581+ 8C06 DD 4C                                ld      c,ixh                       ; col
 582+ 8C08 3E FC                                ld      a,L2SunScannerBright
 583+ 8C0A CD FF E0                             call    l2_plot_pixel
 584+ 8C0D FD 45                                ld      b,iyl
 585+ 8C0F DD 4C                                ld      c,ixh
 586+ 8C11 0C                                   inc     c
 587+ 8C12 3E FC                                ld      a,L2SunScannerBright
 588+ 8C14 CD FF E0                             call    l2_plot_pixel
 589+ 8C17 C9                                   ret
 590+ 8C18
 591+ 8C18              ; This will do a planet update if we are not in space station range
 592+ 8C18              UpdateScannerPlanet:
 593+ 8C18
 594+ 8C18              ; As the space station is always ship 0 then we can just use the scanner
 595+ 8C18
 596+ 8C18              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
 597+ 8C18 3A 2C C0     UpdateScannerShip:      ld      a,(UBnKexplDsp)             ; if bit 4 is clear then ship should not be drawn
 598+ 8C1B CB 67                                bit     4,a                         ; .
 599+ 8C1D                                      ;DEBUG ret     z                           ; .
 600+ 8C1D 3A 1A C3                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
 601+ 8C20 CB 7F                                bit     7,a
 602+ 8C22 C0                                   ret     nz
 603+ 8C23              ; DEBUG Add in station types later
 604+ 8C23 2A 12 C0     .NotMissile:            ld      hl,(UBnKzlo)
 605+ 8C26 ED 5B 0C C0                          ld      de,(UBnKxlo)
 606+ 8C2A ED 4B 0F C0                          ld      bc,(UBnKylo)
 607+ 8C2E 7C                                   ld      a,h
 608+ 8C2F B2                                   or      d
 609+ 8C30 B0                                   or      b
 610+ 8C31 E6 C0                                and     %11000000
 611+ 8C33 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 612+ 8C34 3A 0E C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
 613+ 8C37 CB 7F                                bit     7,a
 614+ 8C39 28 04                                jr      z,.absXHi
 615+ 8C3B                                      NegD
 615+ 8C3B 7A          >                    ld      a,d
 615+ 8C3C ED 44       >                    neg
 615+ 8C3E 57          >                    ld      d,a
 616+ 8C3F 7A           .absXHi:                ld      a,d
 617+ 8C40 C6 80                                add     ScannerX
 618+ 8C42 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 619+ 8C44 CB 3C        .ProcessZCoord:         srl     h
 620+ 8C46 CB 3C                                srl     h
 621+ 8C48 3A 14 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
 622+ 8C4B CB 7F                                bit     7,a
 623+ 8C4D 28 04                                jr      z,.absZHi
 624+ 8C4F                                      NegH
 624+ 8C4F 7C          >                    ld      a,h
 624+ 8C50 ED 44       >                    neg
 624+ 8C52 67          >                    ld      h,a
 625+ 8C53 3E AB        .absZHi:                ld      a,ScannerY
 626+ 8C55 94                                   sub     h
 627+ 8C56 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 628+ 8C58 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 629+ 8C5A 20 19                                jr      nz,.StickHasLength
 630+ 8C5C FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 631+ 8C5E FD 6F                                ld      iyl,a
 632+ 8C60 DD 7D                                ld      a,ixl
 633+ 8C62                                      GetShipColorBright
 633+ 8C62 3A 1A C3    >                        ld      a,(ShipTypeAddr)
 633+ 8C65 CB 27       >                        sla     a                            ; as its byte pairs * 2
 633+ 8C67 3C          >                        inc     a
 633+ 8C68 21 BC 89    >                        ld      hl,ScannerColourTable
 633+ 8C6B ED 31       >                        add     hl,a
 633+ 8C6D 7E          >                        ld      a,(hl)
 634+ 8C6E                                      MMUSelectLayer2
 634+ 8C6E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 635+ 8C72 C3 AC 8C                             jp      .NoStick
 636+ 8C75 3A 11 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
 637+ 8C78 CB 7F                                bit     7,a
 638+ 8C7A 28 04                                jr      z,.absYHi
 639+ 8C7C                                      NegB
 639+ 8C7C 78          >                    ld      a,b
 639+ 8C7D ED 44       >                    neg
 639+ 8C7F 47          >                    ld      b,a
 640+ 8C80 FD 7C        .absYHi:                ld      a,iyh
 641+ 8C82 90           .SetStickPos:           sub     b
 642+ 8C83                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 642+ 8C83 FE BE       >                        cp      ScannerBottom
 642+ 8C85 DA 8A 8C    >                        jp		c, .StickOnScreen
 643+ 8C88 3E BE                                ld      a,ScannerBottom
 644+ 8C8A FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 645+ 8C8C                                      GetShipColor
 645+ 8C8C 3A 1A C3    >                        ld      a,(ShipTypeAddr)
 645+ 8C8F CB 27       >                        sla     a                            ; as its byte pairs * 2
 645+ 8C91 21 BC 89    >                        ld      hl,ScannerColourTable
 645+ 8C94 ED 31       >                        add     hl,a
 645+ 8C96 7E          >                        ld      a,(hl)
 646+ 8C97 DD 6F                                ld      ixl,a
 647+ 8C99 FD 44                                ld      b,iyh                       ; from row
 648+ 8C9B DD 4C                                ld      c,ixh                       ; from col
 649+ 8C9D FD 55                                ld      d,iyl                       ; to row
 650+ 8C9F DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
 651+ 8CA1 E5                                   push    hl
 652+ 8CA2                                      MMUSelectLayer2
 652+ 8CA2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 653+ 8CA6 CD 0B E3                             call    l2_draw_vert_line_to
 654+ 8CA9 E1                                   pop     hl
 655+ 8CAA 23                                   inc     hl
 656+ 8CAB 7E                                   ld      a,(hl)
 657+ 8CAC FD 45        .NoStick:               ld      b,iyl                       ; row
 658+ 8CAE DD 4C                                ld      c,ixh                       ; col
 659+ 8CB0 F5                                   push    af
 660+ 8CB1 CD FF E0                             call    l2_plot_pixel
 661+ 8CB4 F1                                   pop     af
 662+ 8CB5 FD 45                                ld      b,iyl
 663+ 8CB7 DD 4C                                ld      c,ixh
 664+ 8CB9 0C                                   inc     c
 665+ 8CBA CD FF E0                             call    l2_plot_pixel
 666+ 8CBD C9                                   ret
 667+ 8CBE
 668+ 8CBE
# file closed: ./Views/ConsoleDrawing.asm
 887  8CBE                          INCLUDE "./Tables/message_queue.asm"
# file opened: ./Tables/message_queue.asm
   1+ 8CBE
   2+ 8CBE
   3+ 8CBE              ResetMessageQueue:      ZeroA
   3+ 8CBE AF          >                        xor a
   4+ 8CBF 32 B0 96                             ld      (MessageCount),a
   5+ 8CC2 32 B1 96                             ld      (MessageCurrent),a
   6+ 8CC5 21 B4 96                             ld      hl,MessageQueue
   7+ 8CC8 11 B2 96                             ld      de,MessageIndex
   8+ 8CCB 06 05                                ld      b,5
   9+ 8CCD 7D           .ClearMessageIndexs:    ld      a,l                                 ; Wipe out the indexes to all the data
  10+ 8CCE 12                                   ld      (de),a                              ;
  11+ 8CCF 13                                   inc     de                                  ;
  12+ 8CD0 7C                                   ld      a,h                                 ;
  13+ 8CD1 12                                   ld      (de),a                              ;
  14+ 8CD2 13                                   inc     de                                  ;
  15+ 8CD3 3E 21                                ld      a,MESSAGESIZE                       ;
  16+ 8CD5 ED 31                                add     hl,a                                ;
  17+ 8CD7 10 F4                                djnz    .ClearMessageIndexs                 ;
  18+ 8CD9 21 B4 96     .ClearText:             ld      hl,MessageQueue
  19+ 8CDC 11 AA 00                             ld      de,(MAXMESSAGES * MESSAGESIZE) + MAXMESSAGES    ; MessageQueue + MessageTimeout
  20+ 8CDF 3E 00                                ld      a,0
  21+ 8CE1 CD 48 93                             call	memfill_dma
  22+ 8CE4 C9                                   ret
  23+ 8CE5
  24+ 8CE5              ; Message to enqeue is a string held at DE that must be terminated in \0
  25+ 8CE5              ;                                       IYH = timer for message
  26+ 8CE5 3A B0 96     EnqueMessage:           ld      a,(MessageCount)                    ; Maximum message count check
  27+ 8CE8                                      ReturnIfAGTENusng    MAXMESSAGES            ; we do not enque if queue is full
  27+ 8CE8 FE 05       >                        cp    MAXMESSAGES
  27+ 8CEA D0          >                        ret	 nc
  28+ 8CEB 3C                                   inc     a
  29+ 8CEC 32 B0 96                             ld      (MessageCount),a                    ; get ready for next message
  30+ 8CEF 4F           .AddMessage:            ld      c,a
  31+ 8CF0 3A B1 96                             ld      a,(MessageCurrent)                  ; a = current message id + count + 1
  32+ 8CF3 81                                   add     c                                   ;
  33+ 8CF4                                      JumpIfALTNusng MAXMESSAGES, .ReadyToAdd     ; a = a modulus 5 (note we can only hit 5 messages
  33+ 8CF4 FE 05       >                        cp      MAXMESSAGES
  33+ 8CF6 DA FB 8C    >                        jp		c, .ReadyToAdd
  34+ 8CF9 D6 05        .CircularQueue:         sub     MAXMESSAGES                         ; so only need 1 cycle of modulus
  35+ 8CFB 21 59 97     .ReadyToAdd:            ld      hl,MessageTimeout                   ; write out message display time
  36+ 8CFE ED 31                                add     hl,a                                ; as some may be brief messages
  37+ 8D00 4F                                   ld      c,a                                 ;
  38+ 8D01 FD 7C                                ld      a,iyh                               ;
  39+ 8D03 77                                   ld      (hl),a                              ;
  40+ 8D04 79                                   ld      a,c                                 ; get back index
  41+ 8D05 21 B2 96                             ld      hl,MessageIndex
  42+ 8D08                                      HLEquAddrAtHLPlusA                          ; hl = target location for message
  42+ 8D08 CB 27       >                    sla         a
  42+ 8D0A ED 31       >                    add         hl,a
  42+ 8D0C 7E          >                    ld          a,(hl)
  42+ 8D0D 23          >                    inc         hl
  42+ 8D0E 66          >                    ld          h,(hl)
  42+ 8D0F 6F          >                    ld          l,a
  43+ 8D10 EB                                   ex      de,hl                               ; de = destination, hl = message
  44+ 8D11                                      ldCopyTextAtHLtoDE                          ; copy over text as we have done the rest
  44+ 8D11 7E          >.CopyLoop:              ld      a,(hl)
  44+ 8D12 12          >                        ld      (de),a
  44+ 8D13 FE 00       >                        cp      0
  44+ 8D15 C8          >                        ret     z
  44+ 8D16 23          >                        inc     hl
  44+ 8D17 13          >                        inc     de
  44+ 8D18 18 F7       >                        jr      .CopyLoop
  45+ 8D1A C9                                   ret
  46+ 8D1B
  47+ 8D1B 3A B1 96     UpdateMessageTimer:     ld      a,(MessageCurrent)
  48+ 8D1E 21 59 97                             ld      hl,MessageTimeout
  49+ 8D21 ED 31                                add     hl,a
  50+ 8D23 7E                                   ld      a,(hl)
  51+ 8D24 3D                                   dec     a
  52+ 8D25 28 02                                jr      z,.UpdateQueue
  53+ 8D27 77           .UpdateTimer            ld      (hl),a
  54+ 8D28 C9                                   ret
  55+ 8D29 77           .UpdateQueue:           ld      (hl),a
  56+ 8D2A 21 B0 96                             ld      hl,MessageCount
  57+ 8D2D 35                                   dec     (hl)
  58+ 8D2E 3A B1 96                             ld      a,(MessageCurrent)
  59+ 8D31 23                                   inc     hl
  60+ 8D32                                      JumpIfALTNusng MAXMESSAGES, .ReadyToUpdate
  60+ 8D32 FE 05       >                        cp      MAXMESSAGES
  60+ 8D34 DA 38 8D    >                        jp		c, .ReadyToUpdate
  61+ 8D37              .CircularQueue:         ZeroA
  61+ 8D37 AF          >                        xor a
  62+ 8D38 32 B1 96     .ReadyToUpdate          ld      (MessageCurrent),a
  63+ 8D3B C9                                   ret
  64+ 8D3C
  65+ 8D3C 3A B0 96     DisplayCurrentMessage:  ld      a,(MessageCount)
  66+ 8D3F                                      ReturnIfAIsZero
  66+ 8D3F A7          >                        and a
  66+ 8D40 C8          >                        ret    z
  67+ 8D41 3A B1 96                             ld      a,(MessageCurrent)
  68+ 8D44 21 B2 96                             ld      hl,MessageIndex
  69+ 8D47                                      HLEquAddrAtHLPlusA
  69+ 8D47 CB 27       >                    sla         a
  69+ 8D49 ED 31       >                    add         hl,a
  69+ 8D4B 7E          >                    ld          a,(hl)
  69+ 8D4C 23          >                    inc         hl
  69+ 8D4D 66          >                    ld          h,(hl)
  69+ 8D4E 6F          >                    ld          l,a
  70+ 8D4F                                      MMUSelectLayer1
  70+ 8D4F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  71+ 8D53 11 01 00                             ld      de,MESSAGELINE
  72+ 8D56 CD 15 E1                             call    l1_print_at_wrap
  73+ 8D59 C9                                   ret
  74+ 8D5A
  75+ 8D5A              HyperSpaceMessage:      MMUSelectLayer1
  75+ 8D5A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  76+ 8D5E 11 F2 83     .DisplayHyperCountDown: ld      de,Hyp_to
  77+ 8D61 21 98 A4                             ld      hl,name_expanded
  78+ 8D64                                      ldCopyTextAtHLtoDE
  78+ 8D64 7E          >.CopyLoop:              ld      a,(hl)
  78+ 8D65 12          >                        ld      (de),a
  78+ 8D66 FE 00       >                        cp      0
  78+ 8D68 C8          >                        ret     z
  78+ 8D69 23          >                        inc     hl
  78+ 8D6A 13          >                        inc     de
  78+ 8D6B 18 F7       >                        jr      .CopyLoop
  79+ 8D6D AF           .DoneName:              xor     a
  80+ 8D6E 12                                   ld      (de),a
  81+ 8D6F 32 0E 84                             ld      (Hyp_message+31),a      ; max out at 32 characters
  82+ 8D72 21 EF 83     .CentreJustify:         ld      hl,Hyp_message
  83+ 8D75                                      HalfLengthHL
  83+ 8D75 06 00       >                        ld      b,0
  83+ 8D77 7E          >.CountLenLoop:          ld      a,(hl)
  83+ 8D78 FE 00       >                        cp      0
  83+ 8D7A 28 04       >                        jr      z,.DoneCount
  83+ 8D7C 04          >                        inc     b
  83+ 8D7D 23          >                        inc     hl
  83+ 8D7E 18 F7       >                        jr      .CountLenLoop
  83+ 8D80 3E 20       >.DoneCount:             ld      a,32
  83+ 8D82 90          >                        sub     b
  83+ 8D83 CB 2F       >                        sra     a
  84+ 8D85 21 29 84                             ld      hl,Hyp_centeredTarget
  85+ 8D88                                      ldClearTextLoop 32
  85+ 8D88 47          >                        ld      b,a
  85+ 8D89 3E 20       >                        ld      a,32
  85+ 8D8B 77          >.ClearLoop:             ld      (hl),a
  85+ 8D8C 23          >                        inc     hl
  85+ 8D8D 10 FC       >                        djnz    .ClearLoop
  86+ 8D8F EB                                   ex      de,hl
  87+ 8D90 21 EF 83                             ld      hl,Hyp_message
  88+ 8D93                                      ldCopyTextAtHLtoDE
  88+ 8D93 7E          >.CopyLoop:              ld      a,(hl)
  88+ 8D94 12          >                        ld      (de),a
  88+ 8D95 FE 00       >                        cp      0
  88+ 8D97 C8          >                        ret     z
  88+ 8D98 23          >                        inc     hl
  88+ 8D99 13          >                        inc     de
  88+ 8D9A 18 F7       >                        jr      .CopyLoop
  89+ 8D9C                                      ZeroA
  89+ 8D9C AF          >                        xor a
  90+ 8D9D 32 49 84                             ld      (Hyp_centeredEol),a
  91+ 8DA0 21 25 84                             ld      hl,Hyp_counter           ; clear counter digits
  92+ 8DA3 3E 20                                ld      a,32                     ; clear counter digits
  93+ 8DA5 77                                   ld      (hl),a                   ; clear counter digits
  94+ 8DA6 23                                   inc     hl                       ; clear counter digits
  95+ 8DA7 77                                   ld      (hl),a                   ; clear counter digits
  96+ 8DA8 23                                   inc     hl                       ; clear counter digits
  97+ 8DA9 77                                   ld      (hl),a                   ; clear counter digits
  98+ 8DAA CD CB 83                             call    UpdateCountdownNumber
  99+ 8DAD 21 1C 84                             ld      hl,Hyp_charging
 100+ 8DB0                                      HalfLengthHL
 100+ 8DB0 06 00       >                        ld      b,0
 100+ 8DB2 7E          >.CountLenLoop:          ld      a,(hl)
 100+ 8DB3 FE 00       >                        cp      0
 100+ 8DB5 28 04       >                        jr      z,.DoneCount
 100+ 8DB7 04          >                        inc     b
 100+ 8DB8 23          >                        inc     hl
 100+ 8DB9 18 F7       >                        jr      .CountLenLoop
 100+ 8DBB 3E 20       >.DoneCount:             ld      a,32
 100+ 8DBD 90          >                        sub     b
 100+ 8DBE CB 2F       >                        sra     a
 101+ 8DC0 21 6A 84                             ld      hl,Hyp_centeredCharging
 102+ 8DC3                                      ldClearTextLoop 32
 102+ 8DC3 47          >                        ld      b,a
 102+ 8DC4 3E 20       >                        ld      a,32
 102+ 8DC6 77          >.ClearLoop:             ld      (hl),a
 102+ 8DC7 23          >                        inc     hl
 102+ 8DC8 10 FC       >                        djnz    .ClearLoop
 103+ 8DCA EB                                   ex      de,hl
 104+ 8DCB 21 1C 84                             ld      hl,Hyp_charging
 105+ 8DCE                                      ldCopyTextAtHLtoDE
 105+ 8DCE 7E          >.CopyLoop:              ld      a,(hl)
 105+ 8DCF 12          >                        ld      (de),a
 105+ 8DD0 FE 00       >                        cp      0
 105+ 8DD2 C8          >                        ret     z
 105+ 8DD3 23          >                        inc     hl
 105+ 8DD4 13          >                        inc     de
 105+ 8DD5 18 F7       >                        jr      .CopyLoop
 106+ 8DD7 AF                                   xor     a
 107+ 8DD8 32 8A 84                             ld      (Hyp_centeredEol2),a
 108+ 8DDB 2A 9A 96     .UpdateHyperCountdown:  ld      hl,(InnerHyperCount)
 109+ 8DDE 2D                                   dec     l
 110+ 8DDF 20 24                                jr      nz,.decHyperInnerOnly
 111+ 8DE1 25                                   dec     h
 112+ 8DE2 F8                                   ret     m
 113+ 8DE3 2E 0B        .resetHyperInner:       ld      l,$0B
 114+ 8DE5 E5                                   push    hl
 115+ 8DE6 16 0C                                ld      d,12
 116+ 8DE8 3E 06                                ld      a,L1ColourPaperBlack | L1ColourInkYellow
 117+ 8DEA CD 8B E0                             call    l1_attr_cls_2DlinesA
 118+ 8DED 16 60                                ld      d,12 * 8
 119+ 8DEF CD 74 E0                             call    l1_cls_2_lines_d
 120+ 8DF2 11 00 60                             ld      de,$6000
 121+ 8DF5 21 29 84                             ld      hl,Hyp_centeredTarget
 122+ 8DF8 CD C8 E0                             call    l1_print_at
 123+ 8DFB 11 00 68                             ld      de,$6800
 124+ 8DFE 21 6A 84                             ld      hl,Hyp_centeredCharging
 125+ 8E01 CD C8 E0                             call    l1_print_at
 126+ 8E04 E1                                   pop     hl
 127+ 8E05 22 9A 96     .decHyperInnerOnly:     ld      (InnerHyperCount),hl
 128+ 8E08 C9                                   ret
 129+ 8E09 21 00 00     .HyperCountDone:        ld      hl,0
 130+ 8E0C 22 9A 96                             ld      (InnerHyperCount),hl
 131+ 8E0F 16 0C                                ld      d,12
 132+ 8E11 3E 00                                ld      a,L1ColourPaperBlack | L1ColourInkBlack
 133+ 8E13 CD 8B E0                             call    l1_attr_cls_2DlinesA
 134+ 8E16 16 60                                ld      d,12 * 8
 135+ 8E18 CD 74 E0                             call    l1_cls_2_lines_d
 136+ 8E1B                                      ForceTransition ScreenHyperspace                            ; transition to hyperspace
 136+ 8E1B 3E 0E       >                        ld      a,ScreenHyperspace
 136+ 8E1D 32 8C 86    >                        ld      (ScreenTransitionForced), a
 137+ 8E20 C9                                   ret
 138+ 8E21
# file closed: ./Tables/message_queue.asm
 888  8E21                          INCLUDE "./Tables/ShipClassTable.asm"
# file opened: ./Tables/ShipClassTable.asm
   1+ 8E21 00           ShipBodiesTable:        DB  $ - ShipBodiesTable
   2+ 8E22 23 18 16 00  ShipPackList:           DB  ShipID_Sidewinder, ShipID_Mamba, ShipID_Krait, ShipID_Adder, ShipID_Gecko, ShipID_Cobra_Mk_1, ShipID_Worm, ShipID_Cobra_Mk_3_P
   2+ 8E26 13 0A 2A 0B
   3+ 8E2A              ShipPackTableSize       EQU $ - ShipPackList
   4+ 8E2A 0B 02 1F 12  ShipHunterTable         DB  ShipID_Cobra_Mk_3_P, ShipID_Asp_Mk_2, ShipID_Python_P, ShipID_Fer_De_Lance
   5+ 8E2E              ShipHunterTableSize     EQU $ - ShipHunterTable
   6+ 8E2E
# file closed: ./Tables/ShipClassTable.asm
 889  8E2E
 890  8E2E
 891  8E2E
 892  8E2E              ;.absXhi:
 893  8E2E              ;                        ld      a,ScannerX
 894  8E2E              ;                        JumpOnBitSet d,7,ScannerNegX
 895  8E2E              ;                        add     a,e
 896  8E2E              ;                        jp      ScannerZCoord
 897  8E2E              ;ScannerNegX:            sub     e
 898  8E2E              ;ScannerZCoord:          ld      e,a
 899  8E2E              ;                        srl     c
 900  8E2E              ;                        srl     c
 901  8E2E              ;                        ld      a,ScannerY
 902  8E2E              ;                        JumpOnBitSet b,7,ScannerNegZ
 903  8E2E              ;                        sub     c
 904  8E2E              ;                        jp      ScannerYCoord
 905  8E2E              ;ScannerNegZ:            add     a,c
 906  8E2E              ;ScannerYCoord:          ld      d,a                     ; now de = pixel pos d = y e = x  for base of stick X & Z , so need Y Stick height
 907  8E2E              ;                        JumpOnBitSet h,7,ScannerStickDown
 908  8E2E              ;                        sub     l                       ; a already holds actual Y
 909  8E2E              ;                        JumpIfAGTENusng 128,ScannerHeightDone
 910  8E2E              ;                        ld      a,128
 911  8E2E              ;                        jp      ScannerHeightDone
 912  8E2E              ;ScannerStickDown:       add     a,l
 913  8E2E              ;                        JumpIfAGTENusng 191,ScannerHeightDone
 914  8E2E              ;                        ld      a,191
 915  8E2E              ;ScannerHeightDone:      ld      c,e            ; Now sort out line from point DE horzontal by a
 916  8E2E              ;                        ld      b,d
 917  8E2E              ;                        ld      d,a
 918  8E2E              ;                        cp      b
 919  8E2E              ;                        jp      z,Scanner0Height
 920  8E2E              ;                        ld      e,194 ; Should be coloured based on status but this will do for now
 921  8E2E              ;                        push    bc
 922  8E2E              ;                        push    de
 923  8E2E              ;                        MMUSelectLayer2
 924  8E2E              ;                        call    l2_draw_vert_line_to
 925  8E2E              ;                        pop     de
 926  8E2E              ;                        pop     bc
 927  8E2E              ;Scanner0Height:         ld      b,d
 928  8E2E              ;                       push    bc
 929  8E2E              ;                       ld      a,255
 930  8E2E              ;                       MMUSelectLayer2
 931  8E2E              ;                       call    l2_plot_pixel
 932  8E2E              ;                       pop     bc
 933  8E2E              ;                       inc     c
 934  8E2E              ;                       ld      a,255
 935  8E2E              ;                       MMUSelectLayer2
 936  8E2E              ;                       call    l2_plot_pixel
 937  8E2E C9                                   ret
 938  8E2F
 939  8E2F
 940  8E2F AF           SeedGalaxy0:            xor     a
 941  8E30                                      MMUSelectGalaxyA
 941  8E30 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 942  8E33 DD 21 16 E0                          ld      ix,galaxy_data
 943  8E37 AF                                   xor		a
 944  8E38 32 9B 97                             ld		(XSAV),a
 945  8E3B CD 67 9C                             call    copy_galaxy_to_system
 946  8E3E DD E5        SeedGalaxy0Loop:        push    ix
 947  8E40 D1                                   pop     de
 948  8E41 21 82 97                             ld      hl,SystemSeed
 949  8E44 CD 6D 9C                             call    copy_seed
 950  8E47 DD E5                                push    ix
 951  8E49 E1                                   pop     hl
 952  8E4A ED 34 08 00                          add     hl,8
 953  8E4E E5                                   push    hl
 954  8E4F DD E1                                pop     ix
 955  8E51 CD A2 9C                             call    next_system_seed
 956  8E54 3A 9B 97                             ld		a,(XSAV)
 957  8E57 3D                                   dec		a
 958  8E58 FE 00                                cp		0
 959  8E5A C8                                   ret		z
 960  8E5B 32 9B 97                             ld		(XSAV),a
 961  8E5E 20 DE                                jr      nz,SeedGalaxy0Loop
 962  8E60 C9                                   ret
 963  8E61
 964  8E61
 965  8E61
 966  8E61
 967  8E61                  ;include "./ModelRender/testdrawing.asm"
 968  8E61 00 00        XX12PVarQ			DW 0
 969  8E63 00 00        XX12PVarR			DW 0
 970  8E65 00 00        XX12PVarS			DW 0
 971  8E67 00 00        XX12PVarResult1		DW 0
 972  8E69 00 00        XX12PVarResult2		DW 0
 973  8E6B 00 00        XX12PVarResult3		DW 0
 974  8E6D 00           XX12PVarSign2		DB 0
 975  8E6E 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
 976  8E6F 00           XX12PVarSign3		DB 0
 977  8E70
 978  8E70                  include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 8E70              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 8E70              ; so xx12 = XX15 * XX16 row
   3+ 8E70              XX12ProcessOneRow:
   4+ 8E70              XX12CalcXCell:
   5+ 8E70 ED 4B 79 C0          ld		bc,(UBnkXScaled)
   6+ 8E74 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 8E75 23           		inc		hl
   8+ 8E76 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 8E77 7A           		ld		a,d
  10+ 8E78 A8                   xor     b
  11+ 8E79 E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 8E7B DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 8E7D 78           		ld		a,b                                     ; now make bc abs bc
  14+ 8E7E E6 7F        		and		SignMask8Bit
  15+ 8E80 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 8E81 E5           		push	hl
  17+ 8E82 16 00                ld      d,0                                     ; d = value
  18+ 8E84 60           		ld		h,b
  19+ 8E85 69           		ld		l,c
  20+ 8E86 CD 2D A8     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 8E89 22 67 8E     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 8E8C DD 7C        		ld		a,ixh
  23+ 8E8E 32 6E 8E     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 8E91 E1           		pop		hl
  25+ 8E92              XX12CalcYCell:
  26+ 8E92 ED 4B 7B C0          ld		bc,(UBnkYScaled)
  27+ 8E96 23           		inc		hl
  28+ 8E97 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 8E98 23           		inc		hl
  30+ 8E99 56           		ld		d,(hl)
  31+ 8E9A 7A           		ld		a,d
  32+ 8E9B A8                   xor     b
  33+ 8E9C E6 80        		and		SignOnly8Bit
  34+ 8E9E DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 8EA0 78           		ld		a,b                                     ; now make bc abs bc
  36+ 8EA1 E6 7F        		and		SignMask8Bit
  37+ 8EA3 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 8EA4 E5           		push	hl
  39+ 8EA5 16 00                ld      d,0                                     ; d = value
  40+ 8EA7 60           		ld		h,b
  41+ 8EA8 69           		ld		l,c
  42+ 8EA9 CD 2D A8     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 8EAC 22 69 8E     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 8EAF DD 7C        		ld		a,ixh
  45+ 8EB1 32 6D 8E     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 8EB4 E1           		pop		hl
  47+ 8EB5              XX12CalcZCell:
  48+ 8EB5 ED 4B 7D C0          ld		bc,(UBnkZScaled)
  49+ 8EB9 23           		inc		hl
  50+ 8EBA 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 8EBB 23           		inc		hl
  52+ 8EBC 56           		ld		d,(hl)
  53+ 8EBD 7A           		ld		a,d
  54+ 8EBE A8                   xor     b
  55+ 8EBF E6 80        		and		SignOnly8Bit
  56+ 8EC1 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 8EC3 78           		ld		a,b                                     ; now make bc abs bc
  58+ 8EC4 E6 7F        		and		SignMask8Bit
  59+ 8EC6 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 8EC7 16 00                ld      d,0                                     ; d = value
  61+ 8EC9 60           		ld		h,b
  62+ 8ECA 69           		ld		l,c
  63+ 8ECB CD 2D A8     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 8ECE 22 6B 8E     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 8ED1 DD 7C        		ld		a,ixh
  66+ 8ED3 32 6F 8E     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 8ED6              XX12CalcCellResult:
  68+ 8ED6 2A 67 8E     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 8ED9 ED 5B 69 8E  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 8EDD ED 4B 6D 8E  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 8EE1              XX12MSBOnly:
  72+ 8EE1 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 8EE2 5A           		ld		e,d									    ; for both results
  74+ 8EE3 AF           		xor		a									    ;
  75+ 8EE4 67           		ld		h,a									    ;
  76+ 8EE5 57           		ld		d,a									    ; so set high byte to 0
  77+ 8EE6 CD 8C AD     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 8EE9 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 8EEA 3A 6F 8E     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 8EED 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 8EEE ED 5B 6B 8E  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 8EF2 5A           		ld		e,d                                     ; d = result /256
  83+ 8EF3 16 00        		ld		d,0									    ; and only us high byte
  84+ 8EF5 CD 8C AD     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 8EF8 C9           		ret											    ; hl = result, a = sign
  86+ 8EF9              								    ; hl = result, a = sign
  87+ 8EF9
  88+ 8EF9              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 8EF9              ;...X cell
  90+ 8EF9 21 4C C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 8EFC CD 70 8E             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 8EFF 47           		ld		b,a                                 ; b = sign
  93+ 8F00 7C           		ld		a,h                                 ; a = high byte
  94+ 8F01 B0           		or		b
  95+ 8F02 32 80 C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 8F05 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 8F06 32 7F C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 8F09              ;...Y cell
  99+ 8F09 21 54 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 8F0C CD 70 8E             call    XX12ProcessOneRow
 101+ 8F0F 47           		ld		b,a
 102+ 8F10 7C           		ld		a,h
 103+ 8F11              ;		ld		a,l
 104+ 8F11 B0           		or		b
 105+ 8F12 32 82 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 8F15 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 8F16 32 81 C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 8F19              ;...Z cell
 109+ 8F19 21 5C C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 8F1C CD 70 8E             call    XX12ProcessOneRow
 111+ 8F1F 47           		ld		b,a
 112+ 8F20 7C                   ld		a,h
 113+ 8F21              ;		ld		a,l
 114+ 8F21 B0           		or		b
 115+ 8F22 32 84 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 8F25 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 8F26 32 83 C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 8F29 C9                   ret
 119+ 8F2A
 120+ 8F2A              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 8F2A              ;...X cell
 122+ 8F2A 21 4C C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 8F2D CD 70 8E             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 8F30 47           		ld		b,a                                 ; b = sign
 125+ 8F31 7C           		ld		a,h                                 ; a = high byte
 126+ 8F32 B0           		or		b
 127+ 8F33 32 80 C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 8F36 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 8F37 32 7F C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 8F3A              ;...Y cell
 131+ 8F3A 21 54 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 8F3D CD 70 8E             call    XX12ProcessOneRow
 133+ 8F40 47           		ld		b,a
 134+ 8F41 7C           		ld		a,h
 135+ 8F42              ;		ld		a,l
 136+ 8F42 B0           		or		b
 137+ 8F43 32 82 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 8F46 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 8F47 32 81 C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 8F4A              ;...Z cell
 141+ 8F4A 21 5C C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 8F4D CD 70 8E             call    XX12ProcessOneRow
 143+ 8F50 47           		ld		b,a
 144+ 8F51 7C                   ld		a,h
 145+ 8F52              ;		ld		a,l
 146+ 8F52 B0           		or		b
 147+ 8F53 32 84 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 8F56 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 8F57 32 83 C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 8F5A C9                   ret
 151+ 8F5B
 152+ 8F5B              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 8F5B              ;...X cell
 154+ 8F5B 21 34 C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 8F5E CD 70 8E             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 8F61 47           		ld		b,a                                 ; b = sign
 157+ 8F62 7C           		ld		a,h                                 ; a = high byte
 158+ 8F63 B0           		or		b
 159+ 8F64 32 80 C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 8F67 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 8F68 32 7F C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 8F6B              ;...Y cell
 163+ 8F6B 21 3A C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 8F6E CD 70 8E             call    XX12ProcessOneRow
 165+ 8F71 47           		ld		b,a
 166+ 8F72 7C           		ld		a,h
 167+ 8F73              ;		ld		a,l
 168+ 8F73 B0           		or		b
 169+ 8F74 32 82 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 8F77 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 8F78 32 81 C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 8F7B              ;...Z cell
 173+ 8F7B 21 40 C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 8F7E CD 70 8E             call    XX12ProcessOneRow
 175+ 8F81 47           		ld		b,a
 176+ 8F82 7C                   ld		a,h
 177+ 8F83              ;		ld		a,l
 178+ 8F83 B0           		or		b
 179+ 8F84 32 84 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 8F87 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 8F88 32 83 C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 8F8B C9                   ret
# file closed: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
 979  8F8C                  include "./ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1+ 8F8C 21 7F C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 8F8F 11 79 C0                             ld      de,XX15
   3+ 8F92 01 06 00                             ld      bc,6
   4+ 8F95 ED B0                                ldir
   5+ 8F97 C9                                   ret
   6+ 8F98
   7+ 8F98 21 7F C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 8F9B 11 85 C0                             ld      de,XX12Save
   9+ 8F9E 01 06 00                             ld      bc,6
  10+ 8FA1 ED B0                                ldir
  11+ 8FA3 C9                                   ret
  12+ 8FA4
  13+ 8FA4 21 85 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 8FA7 11 7F C0                             ld      de,XX12
  15+ 8FAA 01 06 00                             ld      bc,6
  16+ 8FAD ED B0                                ldir
  17+ 8FAF C9                                   ret
  18+ 8FB0
  19+ 8FB0 21 7F C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 8FB3 11 8B C0                             ld      de,XX12Save2
  21+ 8FB6 01 06 00                             ld      bc,6
  22+ 8FB9 ED B0                                ldir
  23+ 8FBB C9                                   ret
  24+ 8FBC
  25+ 8FBC 21 8B C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 8FBF 11 7F C0                             ld      de,XX12
  27+ 8FC2 01 06 00                             ld      bc,6
  28+ 8FC5 ED B0                                ldir
  29+ 8FC7 C9                                   ret
  30+ 8FC8
# file closed: ./ModelRender/CopyXX12ToXX15.asm
 980  8FC8                  include "./ModelRender/CopyXX15ToXX12.asm"
# file opened: ./ModelRender/CopyXX15ToXX12.asm
   1+ 8FC8 21 79 C0     CopyXX15ToXX12:         ld		hl,XX15
   2+ 8FCB 11 7F C0                             ld      de,XX12
   3+ 8FCE 01 06 00                             ld      bc,6
   4+ 8FD1 ED B0                                ldir
   5+ 8FD3 C9                                   ret
   6+ 8FD4
   7+ 8FD4
   8+ 8FD4
   9+ 8FD4 21 79 C0     CopyXX15ToXX15Save:     ld		hl,XX15
  10+ 8FD7 11 95 C0                             ld      de,XX15Save
  11+ 8FDA 01 06 00                             ld      bc,6
  12+ 8FDD ED B0                                ldir
  13+ 8FDF C9                                   ret
  14+ 8FE0
  15+ 8FE0 21 95 C0     CopyXX15SaveToXX15:     ld		hl,XX15Save
  16+ 8FE3 11 79 C0                             ld      de,XX15
  17+ 8FE6 01 06 00                             ld      bc,6
  18+ 8FE9 ED B0                                ldir
  19+ 8FEB C9                                   ret
  20+ 8FEC
  21+ 8FEC 21 79 C0     CopyXX15ToXX15Save2:    ld		hl,XX15
  22+ 8FEF 11 9D C0                             ld      de,XX15Save2
  23+ 8FF2 01 06 00                             ld      bc,6
  24+ 8FF5 ED B0                                ldir
  25+ 8FF7 C9                                   ret
  26+ 8FF8
  27+ 8FF8 21 9D C0     CopyXX15Save2ToXX15:    ld		hl,XX15Save2
  28+ 8FFB 11 79 C0                             ld      de,XX15
  29+ 8FFE 01 06 00                             ld      bc,6
  30+ 9001 ED B0                                ldir
  31+ 9003 C9                                   ret
  32+ 9004
# file closed: ./ModelRender/CopyXX15ToXX12.asm
 981  9004                  include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ./Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 9004              ScaleXX16Matrix197:
   2+ 9004 06 09        	ld		b,9                 ; Interate though all 9 matrix elements
   3+ 9006 0E C5        	ld		c,ConstNorm         ; c = 197
   4+ 9008 21 34 C0     	ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5+ 900B              .ScaleXX16Loop:
   6+ 900B 7E           	ld		a,(hl)              ; set DE = matrix value
   7+ 900C 5F           	ld		e,a                 ;
   8+ 900D 23           	inc		hl                  ;
   9+ 900E 7E           	ld		a,(hl)              ;
  10+ 900F 57           	ld		d,a                 ;
  11+ 9010 E6 80            and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  12+ 9012 DD 6F        	ld		ixl,a				; retain for sign bit
  13+ 9014              	ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13+ 9014 CB 23       >			   sla e
  13+ 9016 CB 12       >			   rl  d
  14+ 9018 7A               ld      a,d                 ; a = high byte after x 2
  15+ 9019 C5           	push	bc                  ; save BC  counter and constant 197
  16+ 901A E5           	push	hl                  ; save HL
  17+ 901B CD 8B A9     	call	DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  18+ 901E E1           	pop		hl
  19+ 901F 2B               dec     hl                  ; move back to low byte
  20+ 9020 71               ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  21+ 9021 23               inc     hl                  ; move back to high byte
  22+ 9022              ;    ld      a,(hl)
  23+ 9022              ;    and     $80
  24+ 9022 DD 7D            ld      a,ixl
  25+ 9024 77               ld      (hl),a              ; write back just sign bit
  26+ 9025 C1           	pop		bc                  ; retrieve both counter and constant 197
  27+ 9026 23               inc     hl                  ; no to next vertex value
  28+ 9027 10 E2        	djnz	.ScaleXX16Loop
  29+ 9029 C9           	ret
  30+ 902A
# file closed: ./Maths/Utilities/ScaleXX16Matrix197.asm
 982  902A
 983  902A                  include "./Universe/StarDust/StarRoutines.asm"
# file opened: ./Universe/StarDust/StarRoutines.asm
   1+ 902A              ;note: DIV16Amul256dCUNDOC as per
   2+ 902A              ;                                   BC = A0
   3+ 902A              ;                                   DE = 0C
   4+ 902A              ;                                   so BC = a * 256 / C
   5+ 902A
   6+ 902A              ; We can cheat here, Speed is always 0 or positive
   7+ 902A              ; z postion will always be positive if we can see it
   8+ 902A
   9+ 902A EB           InitStarAtHL:           ex      de,hl
  10+ 902B CD 2B 9C                             call    doRND
  11+ 902E EB                                   ex      de,hl
  12+ 902F F6 08                                or      8
  13+ 9031 77                                   ld      (hl),a
  14+ 9032 E6 7F                                and     $7F
  15+ 9034 23                                   inc     hl
  16+ 9035 77                                   ld      (hl),a
  17+ 9036 EB                                   ex      de,hl
  18+ 9037 CD 2B 9C                             call    doRND
  19+ 903A EB                                   ex      de,hl
  20+ 903B 0F                                   rrca
  21+ 903C E6 80                                and     $80
  22+ 903E B6                                   or      (hl)
  23+ 903F 77                                   ld      (hl),a
  24+ 9040 23                                   inc     hl
  25+ 9041 EB                                   ex      de,hl
  26+ 9042 CD 2B 9C                             call    doRND
  27+ 9045 EB                                   ex      de,hl
  28+ 9046 F6 04                                or      4
  29+ 9048 77                                   ld      (hl),a
  30+ 9049 23                                   inc     hl
  31+ 904A E6 7F                                and     $7F
  32+ 904C 77                                   ld      (hl),a
  33+ 904D EB                                   ex      de,hl
  34+ 904E CD 2B 9C                             call    doRND
  35+ 9051 EB                                   ex      de,hl
  36+ 9052 0F                                   rrca
  37+ 9053 E6 80                                and     $80
  38+ 9055 B6                                   or      (hl)
  39+ 9056 77                                   ld      (hl),a
  40+ 9057 23                                   inc     hl
  41+ 9058 EB                                   ex      de,hl
  42+ 9059 CD 2B 9C                             call    doRND
  43+ 905C EB                                   ex      de,hl
  44+ 905D F6 90                                or      144
  45+ 905F 77                                   ld      (hl),a
  46+ 9060 23                                   inc     hl
  47+ 9061 F6 70                                or      %01110000
  48+ 9063 E6 7F                                and     $7f     ; bodge
  49+ 9065 77                                   ld      (hl),a
  50+ 9066 23                                   inc     hl
  51+ 9067 C9                                   ret
  52+ 9068
  53+ 9068 EB           InitHyperStarAtHL:      ex      de,hl
  54+ 9069 CD 2B 9C                             call    doRND
  55+ 906C CB 27                                sla     a
  56+ 906E CB 27                                sla     a                ; so its * 4 as we have a blank spot
  57+ 9070 EB                                   ex      de,hl
  58+ 9071 E6 F8                                and     %11111000
  59+ 9073 77                                   ld      (hl),a
  60+ 9074 E6 7F                                and     $7F
  61+ 9076 23                                   inc     hl
  62+ 9077 77                                   ld      (hl),a
  63+ 9078 EB                                   ex      de,hl
  64+ 9079 CD 2B 9C                             call    doRND
  65+ 907C EB                                   ex      de,hl
  66+ 907D 0F                                   rrca
  67+ 907E E6 80                                and     $80
  68+ 9080 B6                                   or      (hl)
  69+ 9081 77                                   ld      (hl),a
  70+ 9082 23                                   inc     hl
  71+ 9083 EB                                   ex      de,hl
  72+ 9084 CD 2B 9C                             call    doRND
  73+ 9087 CB 27                                sla     a
  74+ 9089 CB 27                                sla     a               ; so its * 4 as we have a blank spot
  75+ 908B EB                                   ex      de,hl
  76+ 908C E6 F8                                and     %11111000
  77+ 908E 77                                   ld      (hl),a
  78+ 908F 23                                   inc     hl
  79+ 9090 E6 7F                                and     $7F
  80+ 9092 77                                   ld      (hl),a
  81+ 9093 EB                                   ex      de,hl
  82+ 9094 CD 2B 9C                             call    doRND
  83+ 9097 EB                                   ex      de,hl
  84+ 9098 0F                                   rrca
  85+ 9099 E6 80                                and     $80
  86+ 909B B6                                   or      (hl)
  87+ 909C 77                                   ld      (hl),a
  88+ 909D 23                                   inc     hl
  89+ 909E EB                                   ex      de,hl
  90+ 909F CD 2B 9C                             call    doRND
  91+ 90A2 EB                                   ex      de,hl
  92+ 90A3 F6 5F                                or      95
  93+ 90A5 77                                   ld      (hl),a
  94+ 90A6 23                                   inc     hl
  95+ 90A7 F6 70                                or      %01110000
  96+ 90A9 E6 7F                                and     $7f     ; bodge
  97+ 90AB 77                                   ld      (hl),a
  98+ 90AC 23                                   inc     hl
  99+ 90AD C9                                   ret
 100+ 90AE
 101+ 90AE              ; we could cheat, flip the sign of DE and just add but its not very optimised
 102+ 90AE 7C           StarsSUBHLDESigned:     ld      a,h
 103+ 90AF E6 80                                and     SignOnly8Bit
 104+ 90B1 47                                   ld      b,a                         ;save sign bit in b
 105+ 90B2 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 106+ 90B3                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 106+ 90B3 FA E1 90    >                        jp		m, .SUBHLDEOppSGN
 107+ 90B6 78           .SUBHLDESameSigns:      ld      a,b
 108+ 90B7 B2                                   or      d
 109+ 90B8                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 109+ 90B8 FA C2 90    >                        jp		m, .SUBHLDESameNeg
 110+ 90BB B7                                   or      a
 111+ 90BC ED 52                                sbc     hl,de
 112+ 90BE                                      JumpIfNegative .SUBHLDESameOvrFlw
 112+ 90BE FA D5 90    >                        jp		m, .SUBHLDESameOvrFlw
 113+ 90C1 C9                                   ret
 114+ 90C2 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 115+ 90C3 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 116+ 90C5 67                                   ld      h,a
 117+ 90C6 7A                                   ld      a,d
 118+ 90C7 E6 7F                                and     SignMask8Bit
 119+ 90C9 57                                   ld      d,a
 120+ 90CA B7                                   or      a
 121+ 90CB ED 52                                sbc     hl,de
 122+ 90CD                                      JumpIfNegative .SUBHLDESameOvrFlw
 122+ 90CD FA D5 90    >                        jp		m, .SUBHLDESameOvrFlw
 123+ 90D0 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 124+ 90D1 F6 80                                or      SignOnly8Bit
 125+ 90D3 67                                   ld      h,a
 126+ 90D4 C9                                   ret
 127+ 90D5              .SUBHLDESameOvrFlw:     NegHL
 127+ 90D5 AF          >                    xor a
 127+ 90D6 95          >                    sub l
 127+ 90D7 6F          >                    ld l,a
 127+ 90D8 9F          >                    sbc a,a
 127+ 90D9 94          >                    sub h
 127+ 90DA 67          >                    ld h,a
 128+ 90DB 78                                   ld      a,b
 129+ 90DC EE 80                                xor     SignOnly8Bit                ; flip sign bit
 130+ 90DE B4                                   or      h
 131+ 90DF 67                                   ld      h,a                         ; recover sign
 132+ 90E0 C9                                   ret
 133+ 90E1 B7           .SUBHLDEOppSGN:         or      a
 134+ 90E2 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 135+ 90E3 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 136+ 90E5 67                                   ld      h,a
 137+ 90E6 7A                                   ld      a,d
 138+ 90E7 E6 7F                                and     SignMask8Bit
 139+ 90E9 57                                   ld      d,a
 140+ 90EA 19                                   add     hl,de
 141+ 90EB 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 142+ 90EC B4                                   or      h
 143+ 90ED 67                                   ld      h,a                         ; set the previou sign value
 144+ 90EE C9                                   ret
 145+ 90EF
 146+ 90EF 7C           StarsADDHLDESigned:     ld      a,h
 147+ 90F0 E6 80                                and     SignOnly8Bit
 148+ 90F2 47                                   ld      b,a                         ;save sign bit in b
 149+ 90F3 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 150+ 90F4                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 150+ 90F4 FA 0C 91    >                        jp		m, .ADDHLDEOppSGN
 151+ 90F7 78           .ADDHLDESameSigns:      ld      a,b
 152+ 90F8 B2                                   or      d
 153+ 90F9                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 153+ 90F9 FA FE 90    >                        jp		m, .ADDHLDESameNeg
 154+ 90FC 19                                   add     hl,de
 155+ 90FD C9                                   ret
 156+ 90FE 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 157+ 90FF E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 158+ 9101 67                                   ld      h,a
 159+ 9102 7A                                   ld      a,d
 160+ 9103 E6 7F                                and     SignMask8Bit
 161+ 9105 57                                   ld      d,a
 162+ 9106 19                                   add     hl,de
 163+ 9107 3E 80                                ld      a,SignOnly8Bit
 164+ 9109 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 165+ 910A 67                                   ld      h,a
 166+ 910B C9                                   ret
 167+ 910C 7C           .ADDHLDEOppSGN:         ld      a,h                         ; here HL and DE are opposite  so if we enter here then signs are the same so we clear the 16th bit
 168+ 910D E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 169+ 910F 67                                   ld      h,a
 170+ 9110 7A                                   ld      a,d
 171+ 9111 E6 7F                                and     SignMask8Bit
 172+ 9113 57                                   ld      d,a
 173+ 9114 B7                                   or      a
 174+ 9115 ED 52                                sbc     hl,de
 175+ 9117 38 04                                jr      c,.ADDHLDEOppInvert
 176+ 9119 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 177+ 911A B4                                   or      h
 178+ 911B 67                                   ld      h,a                         ; set the previou sign value
 179+ 911C C9                                   ret
 180+ 911D              .ADDHLDEOppInvert:      NegHL
 180+ 911D AF          >                    xor a
 180+ 911E 95          >                    sub l
 180+ 911F 6F          >                    ld l,a
 180+ 9120 9F          >                    sbc a,a
 180+ 9121 94          >                    sub h
 180+ 9122 67          >                    ld h,a
 181+ 9123 78                                   ld      a,b
 182+ 9124 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 183+ 9126 B4                                   or      h
 184+ 9127 67                                   ld      h,a                         ; recover sign
 185+ 9128 C9                                   ret
 186+ 9129              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ 9129 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 188+ 912B 78                                   ld      a,b
 189+ 912C 32 AE 98                             ld      (NumberOfStarsNOSTM),a
 190+ 912F 21 FB 99                             ld      hl,varDust
 191+ 9132 CD 2A 90     .InitStarsLoop:         call    InitStarAtHL
 192+ 9135 10 FB                                djnz    .InitStarsLoop
 193+ 9137 C9                                   ret
 194+ 9138              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ 9138 06 0B        InitialiseHyperStars:   ld      b,MaxNumberOfStars
 196+ 913A 78                                   ld      a,b
 197+ 913B 32 AE 98                             ld      (NumberOfStarsNOSTM),a
 198+ 913E 21 FB 99                             ld      hl,varDust
 199+ 9141 CD 68 90     .InitStarsLoop:         call    InitHyperStarAtHL
 200+ 9144 10 FB                                djnz    .InitStarsLoop
 201+ 9146 C9                                   ret
 202+ 9147              ;----------------------------------------------------------------------------------------------------------------------------------
 203+ 9147              DustForward:            ; break
 204+ 9147 3A AE 98                             ld      a,(NumberOfStarsNOSTM)
 205+ 914A 47                                   ld      b,a                                 ; get the number of stars to process
 206+ 914B FD 21 FB 99                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 207+ 914F C5           StarProcessLoop:        push    bc                                  ; save counter +1
 208+ 9150 FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)
 209+ 9153 5F                                   ld      e,a
 210+ 9154 16 00                                ld      d,0                                 ; de = zhi/256
 211+ 9156 3A 92 97                             ld      a,(DELTA)
 212+ 9159 FE 00                                cp      0
 213+ 915B 20 01                                jr      nz,.NormalSpeed
 214+ 915D 3C                                   inc     a                                   ; so the is at lest some dust movement
 215+ 915E 47           .NormalSpeed:           ld      b,a
 216+ 915F 0E 00                                ld      c,0                                 ; bc = delta * 256
 217+ 9161 CD FF A9                             call    BC_Div_DE                           ; BC = BC.DE , HL = remainder
 218+ 9164                                      ShiftHLRight1
 218+ 9164 CB 3C       >			   srl h
 218+ 9166 CB 1D       >			   rr  l
 219+ 9168                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 219+ 9168 CB 3C       >			   srl h
 219+ 916A CB 1D       >			   rr  l
 220+ 916C 7D                                   ld      a,l                                 ;
 221+ 916D F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 222+ 916F DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 223+ 9171 FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 223+ 9175 66 05
 224+ 9177 ED 5B 93 97                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 225+ 917B CD AE 90                             call    StarsSUBHLDESigned
 226+ 917E                                      JumpOnBitSet h,7,ResetStar
 226+ 917E CB 7C       >                        bit 	7,h
 226+ 9180 C2 D5 92    >                        jp      nz,ResetStar
 227+ 9183 FD 75 04 FD                          ld      (iy+4),hl
 227+ 9187 74 05
 228+ 9189 FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 228+ 918D 66 01
 229+ 918F 7C                                   ld      a,h                                 ;
 230+ 9190 E6 7F                                and     $7F                                 ;
 231+ 9192 57                                   ld      d,a                                 ; d = abs(x hi)
 232+ 9193 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 233+ 9195 ED 30                                mul                                         ; de =  abs(x hi) * Q
 234+ 9197 7C                                   ld      a,h                                 ;
 235+ 9198 E6 80                                and     $80                                 ;
 236+ 919A B2                                   or      d                                   ; set sign bit in d
 237+ 919B 57                                   ld      d,a                                 ;
 238+ 919C CD EF 90                             call    StarsADDHLDESigned                  ; x = x + (x hi/256 * Q)
 239+ 919F 7C                                   ld      a,h
 240+ 91A0 E6 7F                                and     $7F
 241+ 91A2                                      JumpIfAGTENusng $70, ResetStar
 241+ 91A2 FE 70       >                        cp     $70
 241+ 91A4 D2 D5 92    >                        jp		nc,ResetStar
 242+ 91A7 FD 75 00 FD                          ld      (iy+0),hl                           ;
 242+ 91AB 74 01
 243+ 91AD FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 243+ 91B1 66 03
 244+ 91B3 7C                                   ld      a,h                                 ;
 245+ 91B4 E6 7F                                and     $7F                                 ;
 246+ 91B6 57                                   ld      d,a                                 ; d = abs(y hi)
 247+ 91B7 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 248+ 91B9 ED 30                                mul                                         ; de =  abs(y hi) * Q
 249+ 91BB 7C                                   ld      a,h                                 ;
 250+ 91BC E6 80                                and     $80                                 ;
 251+ 91BE B2                                   or      d                                   ; set sign bit in d
 252+ 91BF 57                                   ld      d,a                                 ;
 253+ 91C0 CD EF 90                             call    StarsADDHLDESigned                  ; y = y + (x hi/256 * Q)
 254+ 91C3 7C                                   ld      a,h
 255+ 91C4 E6 7F                                and     $7F
 256+ 91C6                                      JumpIfAGTENusng $60, ResetStar
 256+ 91C6 FE 60       >                        cp     $60
 256+ 91C8 D2 D5 92    >                        jp		nc,ResetStar
 257+ 91CB 7C                                   ld      a,h
 258+ 91CC E6 80                                and     $80
 259+ 91CE 20 06                                jr      nz,.NoSecondCheck
 260+ 91D0 7C                                   ld      a,h
 261+ 91D1                                      JumpIfAGTENusng $20, ResetStar
 261+ 91D1 FE 20       >                        cp     $20
 261+ 91D3 D2 D5 92    >                        jp		nc,ResetStar
 262+ 91D6 FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 262+ 91DA 74 03
 263+ 91DC              ; Now roll
 264+ 91DC              ;  6. x = x - alpha * y / 256
 265+ 91DC 2A A3 96     .XRoll:                 ld      hl,(ALP1)                           ; h = sign, l = magnitude
 266+ 91DF 7D                                   ld      a,l
 267+ 91E0 FE 00                                cp      0
 268+ 91E2 28 4C                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 269+ 91E4                                      ;break
 270+ 91E4                                      ;ld      a,$80
 271+ 91E4                                      ;xor     l                                   ; l = flipped sign as we are rotating stars not us
 272+ 91E4 E5                                   push    hl
 273+ 91E5 7C                                   ld      a,h
 274+ 91E6 E6 80                                and     $80
 275+ 91E8 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 276+ 91E9 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 277+ 91EA FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 278+ 91ED 5F                                   ld      e,a
 279+ 91EE E6 80                                and     $80
 280+ 91F0 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 281+ 91F1 7B           .rxEEquABSignX:         ld      a,e
 282+ 91F2 E6 7F                                and     $7F
 283+ 91F4 5F                                   ld      e,a                                 ; save abs x hi in e
 284+ 91F5 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 285+ 91F7 79                                   ld      a,c
 286+ 91F8 A8                                   xor     b                                   ; handle muliple sign bits
 287+ 91F9 B2                                   or      d
 288+ 91FA 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 289+ 91FB FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 289+ 91FF 66 01
 290+ 9201 CD AE 90                             call    StarsSUBHLDESigned                  ; we are usign add, so may need to fip sign?
 291+ 9204 FD 75 00 FD                          ld      (iy+0),hl
 291+ 9208 74 01
 292+ 920A              ;  5. y = y + alpha * x / 256
 293+ 920A              .YRoll:                 ;break
 294+ 920A E1                                   pop     hl                                  ; h = sign, l = magnitude
 295+ 920B 7C                                   ld      a,h
 296+ 920C E6 80                                and     $80
 297+ 920E 4F           .rySaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 298+ 920F 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 299+ 9210 FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 300+ 9213 5F                                   ld      e,a
 301+ 9214 E6 80                                and     $80
 302+ 9216 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 303+ 9217 7B           .ryEEquABSignX:         ld      a,e
 304+ 9218 E6 7F                                and     $7F
 305+ 921A 5F                                   ld      e,a                                 ; save abs x hi in e
 306+ 921B ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 307+ 921D 79                                   ld      a,c
 308+ 921E A8                                   xor     b                                   ; handle muliple sign bits
 309+ 921F B2                                   or      d
 310+ 9220 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 311+ 9221 FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 311+ 9225 66 03
 312+ 9227 CD EF 90                             call    StarsADDHLDESigned                  ; we are usign add, so may need to fip sign?
 313+ 922A FD 75 02 FD                          ld      (iy+2),hl
 313+ 922E 74 03
 314+ 9230 3A 93 96     .NoRoll:                ld      a,(BET1)
 315+ 9233 FE 00                                cp      0
 316+ 9235 28 22                                jr      z,.NoPitch
 317+ 9237              ;  8. y = y - beta * 256
 318+ 9237 57           .YPitch:                ld      d,a                                 ; d = BET1
 319+ 9238 FD 7E 02                             ld      a,(iy+2)
 320+ 923B 5F                                   ld      e,a                                 ; e = Y HI
 321+ 923C ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 322+ 923E 5F                                   ld      e,a
 323+ 923F ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 324+ 9241                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 324+ 9241 CB 23       >			   sla e
 324+ 9243 CB 12       >			   rl  d
 325+ 9245 3A 95 96                             ld      a,(BET2FLIP)                        ; get inverted Sign
 326+ 9248 B2                                   or      d
 327+ 9249 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 328+ 924A FD 6E 02 FD                          ld      hl,(iy+2)
 328+ 924E 66 03
 329+ 9250 CD EF 90                             call    StarsADDHLDESigned
 330+ 9253 FD 75 02 FD                          ld      (iy+2),hl
 330+ 9257 74 03
 331+ 9259              ; now work out screen pos
 332+ 9259              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 333+ 9259              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 334+ 9259              ;        pop     de
 335+ 9259               ;       call    ProjectStarXToScreen
 336+ 9259                                      ;pop     de
 337+ 9259              .NoPitch:
 338+ 9259 FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 339+ 925C 6F                                   ld      l,a
 340+ 925D E6 7F                                and     $7F
 341+ 925F                                      JumpOnBitSet l,7,StarNegXPt
 341+ 925F CB 7D       >                        bit 	7,l
 341+ 9261 C2 6A 92    >                        jp      nz,StarNegXPt
 342+ 9264 C6 80                                add     a,$80
 343+ 9266 4F                                   ld      c,a
 344+ 9267 C3 6F 92                             jp      StarDoneX
 345+ 926A 47           StarNegXPt:             ld      b,a
 346+ 926B 3E 80                                ld      a,$80
 347+ 926D 90                                   sub     b
 348+ 926E 4F                                   ld      c,a
 349+ 926F FD 7E 03     StarDoneX:              ld      a,(iy+3)
 350+ 9272 6F                                   ld      l,a
 351+ 9273 E6 7F                                and     $7F
 352+ 9275                                      JumpOnBitSet l,7,StarNegYPt
 352+ 9275 CB 7D       >                        bit 	7,l
 352+ 9277 C2 80 92    >                        jp      nz,StarNegYPt
 353+ 927A C6 60                                add     a,$60
 354+ 927C 47                                   ld      b,a
 355+ 927D C3 85 92                             jp      StarDoneY
 356+ 9280 47           StarNegYPt:             ld      b,a
 357+ 9281 3E 60                                ld      a,$60
 358+ 9283 90                                   sub     b
 359+ 9284 47                                   ld      b,a
 360+ 9285 3E 92        StarDoneY:              ld      a,L2DustColour
 361+ 9287 C5                                   push    bc
 362+ 9288              .DrawStar:              MMUSelectLayer2
 362+ 9288 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 363+ 928C CD FF E0                             call    l2_plot_pixel
 364+ 928F FD 7E 05                             ld      a,(iy+5)
 365+ 9292 C1                                   pop    bc
 366+ 9293                                      JumpIfAGTENusng $60,EndofStarsLoop
 366+ 9293 FE 60       >                        cp     $60
 366+ 9295 D2 C5 92    >                        jp		nc,EndofStarsLoop
 367+ 9298 3E 92                                ld      a,L2DustColour
 368+ 929A 0C                                   inc     c
 369+ 929B C5                                   push    bc
 370+ 929C                                      MMUSelectLayer2
 370+ 929C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 371+ 92A0 CD FF E0                             call    l2_plot_pixel
 372+ 92A3 FD 7E 05                             ld      a,(iy+5)
 373+ 92A6 C1                                   pop    bc
 374+ 92A7                                      JumpIfAGTENusng $37,EndofStarsLoop
 374+ 92A7 FE 37       >                        cp     $37
 374+ 92A9 D2 C5 92    >                        jp		nc,EndofStarsLoop
 375+ 92AC 3E 92                                ld      a,L2DustColour
 376+ 92AE 04                                   inc     b
 377+ 92AF C5                                   push    bc
 378+ 92B0                                      MMUSelectLayer2
 378+ 92B0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 379+ 92B4 CD FF E0                             call    l2_plot_pixel
 380+ 92B7 FD 7E 05                             ld      a,(iy+5)
 381+ 92BA C1                                   pop    bc
 382+ 92BB 3E 92                                ld      a,L2DustColour
 383+ 92BD 0D                                   dec     c
 384+ 92BE                                      MMUSelectLayer2
 384+ 92BE ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 385+ 92C2 CD FF E0                             call    l2_plot_pixel
 386+ 92C5 C1           EndofStarsLoop:         pop     bc                                      ;  0
 387+ 92C6 FD E5                                push    iy                                      ; +1
 388+ 92C8 E1                                   pop     hl                                      ;  0
 389+ 92C9 ED 34 06 00                          add     hl,6
 390+ 92CD E5           NextStarLoop2:          push    hl                                      ; +1
 391+ 92CE FD E1                                pop     iy                                      ;  0
 392+ 92D0 05                                   dec     b
 393+ 92D1 C2 4F 91                             jp      nz,StarProcessLoop
 394+ 92D4 C9                                   ret
 395+ 92D5              ResetStar:              ;break
 396+ 92D5                                      ;pop     de
 397+ 92D5 C1                                   pop     bc                                      ; 0
 398+ 92D6 3A AE 98                             ld      a,(NumberOfStarsNOSTM)
 399+ 92D9 90                                   sub     b
 400+ 92DA 57                                   ld      d,a
 401+ 92DB 1E 06                                ld      e,6
 402+ 92DD ED 30                                mul
 403+ 92DF 21 FB 99                             ld      hl,varDust
 404+ 92E2 19                                   add     hl,de
 405+ 92E3 CD 2A 90                             call    InitStarAtHL
 406+ 92E6 C3 CD 92                             jp      NextStarLoop2
 407+ 92E9              ;----------------------------------------------------------------------------------------------------------------------------------
 408+ 92E9 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 409+ 92EC FD 7E 01                             ld      a,(iy+1)
 410+ 92EF 6F                                   ld      l,a
 411+ 92F0 E6 7F                                and     $7F
 412+ 92F2 47                                   ld      b,a
 413+ 92F3 CD A2 A9                             call    DIV16BCDivDEUNDOC
 414+ 92F6 7D                                   ld      a,l
 415+ 92F7                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 415+ 92F7 CB 7F       >                        bit 	7,a
 415+ 92F9 C2 04 93    >                        jp      nz,StarXNegativePoint
 416+ 92FC              ;StarXPositivePoint:									; x was positive result
 417+ 92FC 2E 80                                ld          l,ScreenCenterX						;
 418+ 92FE 26 00                                ld          h,0
 419+ 9300 09                                   add         hl,bc								; hl = Screen Centre + X
 420+ 9301 C3 0B 93                             jp          StarStoreXPoint
 421+ 9304              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 422+ 9304 2E 80                                ld          l,ScreenCenterX
 423+ 9306 26 00                                ld          h,0
 424+ 9308                                      ClearCarryFlag
 424+ 9308 B7          >                        or a
 425+ 9309 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 426+ 930B              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 427+ 930B 7D                                   ld          a,l
 428+ 930C 32 53 9A                             ld          (varStarX),a
 429+ 930F C9                                   ret
 430+ 9310
 431+ 9310 FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 432+ 9313 FD 7E 03                             ld          a,(iy+3)
 433+ 9316 6F                                   ld          l,a
 434+ 9317 E6 7F                                and         $7F
 435+ 9319 47                                   ld          b,a
 436+ 931A CD A2 A9                             call        DIV16BCDivDEUNDOC
 437+ 931D 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 438+ 931E                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 438+ 931E CB 7F       >                        bit 	7,a
 438+ 9320 C2 2B 93    >                        jp      nz,StarNegativeYPoint
 439+ 9323                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 440+ 9323 2E 60                               ld          l,ScreenCenterY
 441+ 9325                                      ClearCarryFlag
 441+ 9325 B7          >                        or a
 442+ 9326 ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 443+ 9328 C3 30 93                             jp          StarStoreYPoint
 444+ 932B              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 445+ 932B 2E 60                                ld          l,ScreenCenterY
 446+ 932D 26 00                                ld          h,0
 447+ 932F 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 448+ 9330              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 449+ 9330 7D                                   ld          a,l
 450+ 9331 32 54 9A                             ld          (varStarY),a
 451+ 9334 C9                                   ret
 452+ 9335
 453+ 9335
# file closed: ./Universe/StarDust/StarRoutines.asm
 984  9335              ;    include "Universe/move_object-MVEIT.asm"
 985  9335              ;    include "./ModelRender/draw_object.asm"
 986  9335              ;    include "./ModelRender/draw_ship_point.asm"
 987  9335              ;    include "./ModelRender/drawforwards-LL17.asm"
 988  9335
 989  9335                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 9335
   2+ 9335 00           memfillvalue		DB 0
   3+ 9336 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 933A 7D
   4+ 933B 35 93        memfill_astrt  		DW memfillvalue
   5+ 933D 00 40        memfill_length 		DB $00,$40
   6+ 933F 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 9342 00 00        memfill_bstrt  		DB $00,$00
   8+ 9344 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 9348              memfill_cmd_len	  	EQU $ - memfill
  10+ 9348
  11+ 9348              memfill_dma:
  12+ 9348              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 9348              .set_fill_value:
  14+ 9348 32 35 93     	ld 		(memfillvalue),a
  15+ 934B              .set_target:
  16+ 934B 22 42 93     	ld		(memfill_bstrt),hl
  17+ 934E              .set_length:
  18+ 934E ED 53 3D 93  	ld		(memfill_length),de
  19+ 9352              .write_dma:
  20+ 9352 21 36 93     	ld 		hl, memfill
  21+ 9355 06 12        	ld 		b, memfill_cmd_len
  22+ 9357 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 9359 ED B3        	otir
  24+ 935B C9           	ret
  25+ 935C
# file closed: ./Hardware/memfill_dma.asm
 990  935C                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 935C
   2+ 935C 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 9360 7D
   3+ 9361 00 00        memcopy_astrt  		DB $00,$00
   4+ 9363 00 40        memcopy_length 		DB $00,$40
   5+ 9365 14 10 AD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   6+ 9368 00 00        memcopy_bstrt  		DB $00,$00
   7+ 936A 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 936E              memcopy_cmd_len	  	equ $ - memcopy
   9+ 936E
  10+ 936E              memcopy_dma:
  11+ 936E              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 936E              .set_target:
  13+ 936E 22 68 93     	ld		(memcopy_bstrt),hl
  14+ 9371              .set_source:
  15+ 9371 ED 53 61 93  	ld		(memcopy_astrt),de
  16+ 9375              .set_length:
  17+ 9375 ED 43 63 93  	ld		(memcopy_length),bc
  18+ 9379              .write_dma:
  19+ 9379 21 5C 93     	ld 		hl, memcopy
  20+ 937C 06 12        	ld 		b, memcopy_cmd_len
  21+ 937E 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 9380 ED B3        	otir
  23+ 9382 C9           	ret
  24+ 9383
# file closed: ./Hardware/memcopy_dma.asm
 991  9383                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ 9383              ;
   2+ 9383              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 9383              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 9383              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 9383              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 9383              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 9383              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 9383              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 9383              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 9383              ;
  11+ 9383              ; Keyboard
  12+ 9383              ;
  13+ 9383              ;   0      1       2       3       4       5        6       7       8       9
  14+ 9383              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 9383              ;   10     11      12      13      14      15       16      17      18      19
  16+ 9383              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 9383              ;   20     21      22      23      24      25       26      27      28      29
  18+ 9383              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 9383              ;   30     31      32      33      34      35       36      37      38      39
  20+ 9383              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 9383              ;
  22+ 9383              ; Default map
  23+ 9383              ;-----------------------------------------------------------------------------------------------------------------------------------
  24+ 9383              ;   0          1           2             3              4           5           6           7           8           9
  25+ 9383              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  26+ 9383              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  27+ 9383              ;                                                                                                       Find System
  28+ 9383              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 9383              ;   10         11          12            13             14          15          16          17          18          19
  30+ 9383              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  31+ 9383              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  32+ 9383              ;-----------------------------------------------------------------------------------------------------------------------------------
  33+ 9383              ;   20         Accel       22            23             24          25          26          27          28          29
  34+ 9383              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  35+ 9383              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  36+ 9383              ;   PlanetData                                                      PauseGame   SaveGame
  37+ 9383              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 9383              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  39+ 9383              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  40+ 9383              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  41+ 9383              ;              ResumeGame
  42+ 9383
  43+ 9383              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  44+ 9383
  45+ 9383              c_Pressed_Front         equ 0  * 2
  46+ 9383              c_Pressed_Aft           equ 1  * 2
  47+ 9383              c_Pressed_Left          equ 2  * 2
  48+ 9383              c_Pressed_Right         equ 3  * 2
  49+ 9383              c_Pressed_RollLeft      equ 4  * 2
  50+ 9383              c_Pressed_RollRight     equ 5  * 2
  51+ 9383              c_Pressed_Dive          equ 6  * 2
  52+ 9383              c_Pressed_Climb         equ 7  * 2
  53+ 9383              c_Pressed_Accellerate   equ 8  * 2
  54+ 9383              c_Pressed_Decellerate   equ 9  * 2
  55+ 9383              c_Pressed_FireLaser     equ 10 * 2
  56+ 9383              c_Pressed_TargetMissle  equ 11 * 2
  57+ 9383              c_Pressed_FireMissile   equ 12 * 2
  58+ 9383              c_Pressed_UnarmMissile  equ 13 * 2
  59+ 9383              c_Pressed_ECM           equ 14 * 2
  60+ 9383              c_Pressed_EnergyBomb    equ 15 * 2
  61+ 9383              c_Pressed_EscapePod     equ 16 * 2
  62+ 9383              c_Pressed_DockingComp   equ 17 * 2
  63+ 9383              c_Pressed_Hyperspace    equ 18 * 2
  64+ 9383              c_Pressed_Distance      equ 19 * 2
  65+ 9383              c_Pressed_HomeCursor    equ 20 * 2
  66+ 9383              c_Pressed_Launch        equ 21 * 2
  67+ 9383              c_Pressed_BuyCargo      equ 22 * 2
  68+ 9383              c_Pressed_SellCargo     equ 23 * 2
  69+ 9383              c_Pressed_Equip         equ 24 * 2
  70+ 9383              c_Pressed_GalacticChrt  equ 25 * 2
  71+ 9383              c_Pressed_LocalChart    equ 26 * 2
  72+ 9383              c_Pressed_MarketPrices  equ 27 * 2
  73+ 9383              c_Pressed_Status        equ 28 * 2
  74+ 9383              c_Pressed_Inventory     equ 29 * 2
  75+ 9383              c_Pressed_GameSkip      equ 30 * 2
  76+ 9383              c_Pressed_Save          equ 31 * 2
  77+ 9383              c_Pressed_Freeze        equ 32 * 2
  78+ 9383              c_Pressed_Resume        equ 33 * 2
  79+ 9383              c_Pressed_Recentre      equ 34 * 2
  80+ 9383              c_Pressed_Quit          equ 35 * 2
  81+ 9383              c_Pressed_PlanetData    equ 36 * 2
  82+ 9383              c_Pressed_CursorUp      equ 37 * 2
  83+ 9383              c_Pressed_CursorDown    equ 38 * 2
  84+ 9383              c_Pressed_Find          equ 39 * 2
  85+ 9383
  86+ 9383              ; half row 1
  87+ 9383              VK_CAPS  				equ 0
  88+ 9383              VK_Z  					equ 1
  89+ 9383              VK_X  					equ 2
  90+ 9383              VK_C  					equ 3
  91+ 9383              VK_V  					equ 4
  92+ 9383              ; half row 2
  93+ 9383              VK_A  					equ 5
  94+ 9383              VK_S  					equ 6
  95+ 9383              VK_D  					equ 7
  96+ 9383              VK_F  					equ 8
  97+ 9383              VK_G  					equ 9
  98+ 9383              ; half row 3
  99+ 9383              VK_Q  					equ 10
 100+ 9383              VK_W  					equ 11
 101+ 9383              VK_E  					equ 12
 102+ 9383              VK_R  					equ 13
 103+ 9383              VK_T  					equ 14
 104+ 9383              ; half row 4
 105+ 9383              VK_1  					equ 15
 106+ 9383              VK_2  					equ 16
 107+ 9383              VK_3  					equ 17
 108+ 9383              VK_4  					equ 18
 109+ 9383              VK_5  					equ 19
 110+ 9383              ; half row 5
 111+ 9383              VK_0 					equ 20
 112+ 9383              VK_9 					equ 21
 113+ 9383              VK_8 					equ 22
 114+ 9383              VK_7 					equ 23
 115+ 9383              VK_6 					equ 24
 116+ 9383              ; half row 6
 117+ 9383              VK_P  					equ 25
 118+ 9383              VK_O  					equ 26
 119+ 9383              VK_I  					equ 27
 120+ 9383              VK_U  					equ 28
 121+ 9383              VK_Y  					equ 29
 122+ 9383              ; half row 7
 123+ 9383              VK_ENTER 				equ 30
 124+ 9383              VK_L  					equ 31
 125+ 9383              VK_K  					equ 32
 126+ 9383              VK_J  					equ 33
 127+ 9383              VK_H  					equ 34
 128+ 9383              ; half row 8
 129+ 9383              VK_SPACE 				equ 35
 130+ 9383              VK_SYM  				equ 36
 131+ 9383              VK_M  					equ 37
 132+ 9383              VK_N  					equ 38
 133+ 9383              VK_B  					equ 39
 134+ 9383
 135+ 9383              ;KeyboardMapping
 136+ 9383              KeyCode_Front        	equ VK_1
 137+ 9383              KeyCode_Aft          	equ VK_2
 138+ 9383              KeyCode_Left         	equ VK_3
 139+ 9383              KeyCode_Right        	equ VK_4
 140+ 9383              KeyCode_RollLeft     	equ VK_O
 141+ 9383              KeyCode_RollRight    	equ VK_P
 142+ 9383              KeyCode_Dive         	equ VK_Q
 143+ 9383              KeyCode_Climb        	equ VK_A
 144+ 9383              KeyCode_Accellerate  	equ VK_W
 145+ 9383              KeyCode_Decellerate  	equ VK_S
 146+ 9383              KeyCode_FireLaser    	equ VK_SPACE
 147+ 9383              KeyCode_TargetMissle 	equ VK_T
 148+ 9383              KeyCode_FireMissile  	equ VK_F
 149+ 9383              KeyCode_Find        	equ VK_F
 150+ 9383              KeyCode_UnarmMissile 	equ VK_R
 151+ 9383              KeyCode_ECM          	equ VK_E
 152+ 9383              KeyCode_EnergyBomb   	equ VK_U
 153+ 9383              KeyCode_EscapePod    	equ VK_CAPS
 154+ 9383              KeyCode_DockingComp  	equ VK_N
 155+ 9383              KeyCode_Hyperspace   	equ VK_H
 156+ 9383              KeyCode_Distance     	equ VK_J
 157+ 9383              KeyCode_HomeCursor   	equ VK_G
 158+ 9383              KeyCode_Launch       	equ VK_L
 159+ 9383              KeyCode_BuyCargo     	equ VK_B
 160+ 9383              KeyCode_SellCargo    	equ VK_V
 161+ 9383              KeyCode_Equip        	equ VK_C
 162+ 9383              KeyCode_GalacticChrt 	equ VK_5
 163+ 9383              KeyCode_LocalChart   	equ VK_6
 164+ 9383              KeyCode_MarketPrices 	equ VK_7
 165+ 9383              KeyCode_Status       	equ VK_8
 166+ 9383              KeyCode_Inventory    	equ VK_9
 167+ 9383              KeyCode_GameSkip     	equ VK_Z
 168+ 9383              KeyCode_Save         	equ VK_O
 169+ 9383              KeyCode_Freeze       	equ VK_B
 170+ 9383              KeyCode_Resume       	equ VK_L
 171+ 9383              KeyCode_Recentre     	equ VK_D
 172+ 9383              KeyCode_Quit         	equ VK_Y
 173+ 9383              KeyCode_PlanetData   	equ VK_0
 174+ 9383              KeyCode_CursorUp        equ VK_Q
 175+ 9383              KeyCode_CursorDown      equ VK_A
 176+ 9383
 177+ 9383 00 00 00...  Keys					DS	40
 178+ 93AB              c_KeyBoardLen 			equ $ - Keys
 179+ 93AB 00 00 00...  RawKeys					DS	8
 180+ 93B3 FE FE FE FD  KeyAddrTab				DW	$FEFE, $FDFE, $FBFE, $F7FE, $EFFE, $DFFE, $BFFE, $7FFE
 180+ 93B7 FE FB FE F7
 180+ 93BB FE EF FE DF
 180+ 93BF FE BF FE 7F
 181+ 93C3              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 182+ 93C3              ; of updating this table with the respective location to look up
 183+ 93C3              ; key list sequence is in table above
 184+ 93C3 92 93 93 93  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 184+ 93C7 94 93 95 93
 184+ 93CB 9D 93
 185+ 93CD 9C 93 8D 93                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 185+ 93D1 88 93 8E 93
 185+ 93D5 89 93
 186+ 93D7 A6 93 91 93                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 186+ 93DB 8B 93 90 93
 186+ 93DF 8F 93
 187+ 93E1 9F 93 83 93                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 187+ 93E5 A9 93 A5 93
 187+ 93E9 A4 93
 188+ 93EB 8C 93 A2 93                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 188+ 93EF AA 93 87 93
 188+ 93F3 86 93
 189+ 93F5 96 93 9B 93                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 189+ 93F9 9A 93 99 93
 189+ 93FD 98 93
 190+ 93FF 84 93 9D 93                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 190+ 9403 AA 93 A2 93
 190+ 9407 8A 93
 191+ 9409 A0 93 97 93                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 191+ 940D 8D 93 88 93
 191+ 9411 8B 93
 192+ 9413
 193+ 9413 23 5A 58 43  ASCII_Map:              DB "#","Z","X","C","V"
 193+ 9417 56
 194+ 9418 41 53 44 46                          DB "A","S","D","F","G"
 194+ 941C 47
 195+ 941D 51 57 45 52                          DB "Q","W","E","R","T"
 195+ 9421 54
 196+ 9422 31 32 33 34                          DB "1","2","3","4","5"
 196+ 9426 35
 197+ 9427 30 39 38 37                          DB "0","9","8","7","6"
 197+ 942B 36
 198+ 942C 50 4F 49 55                          DB "P","O","I","U","Y"
 198+ 9430 59
 199+ 9431 3E 4C 4B 4A                          DB ">","L","K","J","H"
 199+ 9435 48
 200+ 9436 20 5E 4D 4E                          DB " ","^","M","N","B"
 200+ 943A 42
 201+ 943B
 202+ 943B
 203+ 943B              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 204+ 943B              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 205+ 943B              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 206+ 943B              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 207+ 943B              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 208+ 943B              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 209+ 943B              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 210+ 943B              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 211+ 943B              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 212+ 943B              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 213+ 943B              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 214+ 943B              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 215+ 943B              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 216+ 943B              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 217+ 943B              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 218+ 943B              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 219+ 943B              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 220+ 943B              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 221+ 943B              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 222+ 943B              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 223+ 943B              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 224+ 943B              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 225+ 943B              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 226+ 943B              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 227+ 943B              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 228+ 943B              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 229+ 943B              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 230+ 943B              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 231+ 943B              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 232+ 943B              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 233+ 943B              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 234+ 943B              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 235+ 943B              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 236+ 943B              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 237+ 943B              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 238+ 943B              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 239+ 943B              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 240+ 943B              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 241+ 943B              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 242+ 943B              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 243+ 943B
 244+ 943B
 245+ 943B              MIsKeyPressed:      MACRO   keyaddress, misstarget
 246+ 943B ~                                ld      hl,(keyaddress)
 247+ 943B ~                                ld      a,(hl)
 248+ 943B ~                                IfAIsZeroGoto   misstarget
 249+ 943B                                  ENDM
 250+ 943B
 251+ 943B 21 83 93     init_keyboard:      ld		hl,Keys
 252+ 943E 11 28 00                         ld		de, c_KeyBoardLen
 253+ 9441 3E 00                            ld		a,0
 254+ 9443 CD 48 93                         call	memfill_dma
 255+ 9446 C9                               ret
 256+ 9447
 257+ 9447 21 AB 93     scan_keyboard:      ld		hl,RawKeys
 258+ 944A 11 B3 93                         ld		de,KeyAddrTab
 259+ 944D AF                               xor		a
 260+ 944E FD 2E 08                         ld		iyl,8
 261+ 9451 DD 21 83 93                      ld      ix,Keys
 262+ 9455 1A           .PortReadLoop:      ld		a,(de)							; Set up BC as port to read
 263+ 9456 4F                               ld		c,a
 264+ 9457 13                               inc		de
 265+ 9458 1A                               ld      a,(de)
 266+ 9459 47                               ld		b,a
 267+ 945A 13                               inc		de
 268+ 945B ED 78                            in		a,(c)							; read port to a
 269+ 945D 77                               ld		(hl),a							; set raw keys to value
 270+ 945E 23                               inc		hl								; and ready for next element
 271+ 945F 06 05                            ld		b,5								; loop all bits (there are only 5 keys to a group)
 272+ 9461 CB 47        .ProcessBitsLoop:   bit		0,a								; is bit set
 273+ 9463 28 07                            jr      z,.SetKeyPressed
 274+ 9465 08                               ex      af,af'
 275+ 9466 AF                               xor     a
 276+ 9467 C3 73 94                         jp      .SetKey
 277+ 946A 20 0B                            jr		nz,.SkipKeySet
 278+ 946C 08           .SetKeyPressed:	    ex		af,af'
 279+ 946D DD 7E 00                         ld      a,(ix+0)
 280+ 9470 3C                               inc     a
 281+ 9471 E6 03                            and     $3                              ; so bit 0 set is pressed, bit 1 set is repeat pressed, i.e. 0 = no, 1 = yes 2,3 = held
 282+ 9473 DD 77 00     .SetKey:            ld		(ix+0),a							; Key Pressed
 283+ 9476 08                               ex		af,af'
 284+ 9477 DD 23        .SkipKeySet:	    inc		ix								; move to next key
 285+ 9479 CB 3F                            srl		a								; move next key into bit 0
 286+ 947B 10 E4                            djnz	.ProcessBitsLoop				; Process all key group bits
 287+ 947D FD 2D                            dec     iyl
 288+ 947F 20 D4                            jr      nz,.PortReadLoop				; Read next input port
 289+ 9481 C9                               ret
 290+ 9482
 291+ 9482              GetKeyStateAddressDE: MACRO
 292+ 9482 ~                                  ld      hl,KeyboardMap                  ; work our address to read from
 293+ 9482 ~                                  add     hl,a
 294+ 9482 ~                                  ld      a,(hl)
 295+ 9482 ~                                  ld      e,a
 296+ 9482 ~                                  inc     hl
 297+ 9482 ~                                  ld      a,(hl)
 298+ 9482 ~                                  ld      d,a                             ; now de = address in keypress list
 299+ 9482                                    ENDM
 300+ 9482
 301+ 9482
 302+ 9482              ; call with a = c_Pressed key, will then read mapping
 303+ 9482              wait_for_key_a_press:       GetKeyStateAddressDE
 303+ 9482 21 C3 93    >                      ld      hl,KeyboardMap                  ; work our address to read from
 303+ 9485 ED 31       >                      add     hl,a
 303+ 9487 7E          >                      ld      a,(hl)
 303+ 9488 5F          >                      ld      e,a
 303+ 9489 23          >                      inc     hl
 303+ 948A 7E          >                      ld      a,(hl)
 303+ 948B 57          >                      ld      d,a                             ; now de = address in keypress list
 304+ 948C D5                                       push    de
 305+ 948D CD 47 94     wait_for_key_press_loop:    call    scan_keyboard
 306+ 9490 E1                                       pop     hl                              ; get key address into hl
 307+ 9491 E5                                       push    hl
 308+ 9492 7E                                       ld      a,(hl)
 309+ 9493                                          JumpIfANENusng  1,wait_for_key_press_loop         ; will also loop if held down when entering this routine
 309+ 9493 FE 01       >                        cp     1
 309+ 9495 C2 8D 94    >                        jp      nz,wait_for_key_press_loop
 310+ 9498 E1                                       pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 311+ 9499 C9                                       ret
 312+ 949A
 313+ 949A              wait_for_key_a_held:        GetKeyStateAddressDE
 313+ 949A 21 C3 93    >                      ld      hl,KeyboardMap                  ; work our address to read from
 313+ 949D ED 31       >                      add     hl,a
 313+ 949F 7E          >                      ld      a,(hl)
 313+ 94A0 5F          >                      ld      e,a
 313+ 94A1 23          >                      inc     hl
 313+ 94A2 7E          >                      ld      a,(hl)
 313+ 94A3 57          >                      ld      d,a                             ; now de = address in keypress list
 314+ 94A4 D5                                       push    de
 315+ 94A5 CD 47 94     wait_for_key_a_held_loop:   call    scan_keyboard
 316+ 94A8 E1                                       pop     hl
 317+ 94A9 E5                                       push    hl
 318+ 94AA 7E                                       ld      a,(hl)
 319+ 94AB                                          JumpIfALTNusng  2,wait_for_key_a_held_loop
 319+ 94AB FE 02       >                        cp      2
 319+ 94AD DA A5 94    >                        jp		c, wait_for_key_a_held_loop
 320+ 94B0 E1                                       pop     hl
 321+ 94B1 C9                                       ret
 322+ 94B2
 323+ 94B2              get_key_a_state:            GetKeyStateAddressDE                 ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 323+ 94B2 21 C3 93    >                      ld      hl,KeyboardMap                  ; work our address to read from
 323+ 94B5 ED 31       >                      add     hl,a
 323+ 94B7 7E          >                      ld      a,(hl)
 323+ 94B8 5F          >                      ld      e,a
 323+ 94B9 23          >                      inc     hl
 323+ 94BA 7E          >                      ld      a,(hl)
 323+ 94BB 57          >                      ld      d,a                             ; now de = address in keypress list
 324+ 94BC EB                                       ex      de,hl
 325+ 94BD 7E                                       ld      a,(hl)                        ; a = keystate
 326+ 94BE C9                                       ret
 327+ 94BF
 328+ 94BF              force_key_press:            GetKeyStateAddressDE
 328+ 94BF 21 C3 93    >                      ld      hl,KeyboardMap                  ; work our address to read from
 328+ 94C2 ED 31       >                      add     hl,a
 328+ 94C4 7E          >                      ld      a,(hl)
 328+ 94C5 5F          >                      ld      e,a
 328+ 94C6 23          >                      inc     hl
 328+ 94C7 7E          >                      ld      a,(hl)
 328+ 94C8 57          >                      ld      d,a                             ; now de = address in keypress list
 329+ 94C9 EB                                       ex      de,hl
 330+ 94CA 3E 01                                    ld      a,1
 331+ 94CC 77                                       ld      (hl),a
 332+ 94CD C9                                       ret
 333+ 94CE
 334+ 94CE              ; returns z is set if c_ key is pressed
 335+ 94CE              is_key_pressed:             GetKeyStateAddressDE
 335+ 94CE 21 C3 93    >                      ld      hl,KeyboardMap                  ; work our address to read from
 335+ 94D1 ED 31       >                      add     hl,a
 335+ 94D3 7E          >                      ld      a,(hl)
 335+ 94D4 5F          >                      ld      e,a
 335+ 94D5 23          >                      inc     hl
 335+ 94D6 7E          >                      ld      a,(hl)
 335+ 94D7 57          >                      ld      d,a                             ; now de = address in keypress list
 336+ 94D8 EB                                       ex      de,hl
 337+ 94D9 7E                                       ld      a,(hl)                          ; a = keystate
 338+ 94DA FE 01                                    cp      1
 339+ 94DC C9                                       ret
 340+ 94DD
 341+ 94DD              ; returns z is set if c_ key is held
 342+ 94DD              is_key_held:                GetKeyStateAddressDE
 342+ 94DD 21 C3 93    >                      ld      hl,KeyboardMap                  ; work our address to read from
 342+ 94E0 ED 31       >                      add     hl,a
 342+ 94E2 7E          >                      ld      a,(hl)
 342+ 94E3 5F          >                      ld      e,a
 342+ 94E4 23          >                      inc     hl
 342+ 94E5 7E          >                      ld      a,(hl)
 342+ 94E6 57          >                      ld      d,a                             ; now de = address in keypress list
 343+ 94E7 EB                                       ex      de,hl
 344+ 94E8 7E                                       ld      a,(hl)                          ; a = keystate
 345+ 94E9 E6 02                                    and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 346+ 94EB FE 02                                    cp      2
 347+ 94ED C9                                       ret
 348+ 94EE
 349+ 94EE              is_any_key_pressed:
 350+ 94EE 21 83 93         ld      hl,Keys
 351+ 94F1 06 28            ld      b,40
 352+ 94F3 0E 00            ld      c,0
 353+ 94F5              .KeyReadLoop:
 354+ 94F5 7E               ld      a,(hl)
 355+ 94F6 FE 01            cp      1
 356+ 94F8 CA 02 95         jp      z,.KeyPressed
 357+ 94FB 23               inc     hl
 358+ 94FC 0C               inc     c
 359+ 94FD 10 F6            djnz    .KeyReadLoop
 360+ 94FF 3E FF            ld      a,$FF
 361+ 9501 C9               ret
 362+ 9502              .KeyPressed:
 363+ 9502 79               ld      a,c
 364+ 9503 C9               ret
 365+ 9504
 366+ 9504              is_any_key_held:
 367+ 9504 21 83 93         ld      hl,Keys
 368+ 9507 06 28            ld      b,40
 369+ 9509 0E 00            ld      c,0
 370+ 950B              .KeyReadLoop:
 371+ 950B 7E               ld      a,(hl)
 372+ 950C E6 02            and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 373+ 950E FE 02            cp      2
 374+ 9510 CA 1A 95         jp      z,.KeyPressed
 375+ 9513 23               inc     hl
 376+ 9514 0C               inc     c
 377+ 9515 10 F4            djnz    .KeyReadLoop
 378+ 9517 3E FF            ld      a,$FF
 379+ 9519 C9               ret
 380+ 951A              .KeyPressed:
 381+ 951A 79               ld      a,c
 382+ 951B C9               ret
 383+ 951C
 384+ 951C
 385+ 951C 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 386+ 953A 00                                   DB  0               ; end of string marker as a safety
 387+ 953B 00           InputCursor             DB  0
 388+ 953C 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 389+ 953D 00           InputChanged            DB  0
 390+ 953E              InputLimit              EQU 20
 391+ 953E
 392+ 953E              keyboard_copy_input_to_de:
 393+ 953E 21 1C 95         ld      hl,InputString
 394+ 9541 3A 3B 95         ld      a,(InputCursor)
 395+ 9544 FE 00            cp      0
 396+ 9546 28 05            jr      z,.NoString
 397+ 9548 4F               ld      c,a
 398+ 9549 06 00            ld      b,0
 399+ 954B ED B0            ldir
 400+ 954D              .NoString
 401+ 954D 3E 00            ld      a,0
 402+ 954F 12               ld      (de),a
 403+ 9550 C9               ret
 404+ 9551
 405+ 9551              initInputText:
 406+ 9551 AF               xor     a
 407+ 9552 32 3B 95         ld      (InputCursor),a
 408+ 9555 32 3C 95         ld      (EnterPressed),a
 409+ 9558 32 3D 95         ld      (InputChanged),a
 410+ 955B 21 1C 95         ld      hl,InputString
 411+ 955E 06 1E            ld      b,30
 412+ 9560              .wipeloop:
 413+ 9560 77               ld      (hl),a
 414+ 9561 23               inc     hl
 415+ 9562 10 FC            djnz    .wipeloop
 416+ 9564 C9               ret
 417+ 9565
 418+ 9565 AF           InputName:                  xor     a
 419+ 9566 32 3D 95                                 ld      (InputChanged),a
 420+ 9569 CD EE 94                                 call    is_any_key_pressed
 421+ 956C FE FF                                    cp      $FF
 422+ 956E C8                                       ret     z
 423+ 956F              .KeyPressed:
 424+ 956F 4F               ld      c,a
 425+ 9570 3A 3B 95         ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 426+ 9573 FE 14            cp      InputLimit                      ; move to variable later and then cp (hl)
 427+ 9575 28 0B            jr      z,.DeleteOrEnterOnly            ;
 428+ 9577 21 13 94         ld      hl,ASCII_Map
 429+ 957A 79               ld      a,c
 430+ 957B ED 31            add     hl,a
 431+ 957D 7E               ld      a,(hl)
 432+ 957E FE 41            cp      "A"
 433+ 9580 30 15            jr      nc,.AlphaPressed
 434+ 9582              .DeleteOrEnterOnly                          ; CAPS and Symbol act as delete for now
 435+ 9582 FE 30            cp      "0"                             ; if 0 was preseed check caps shift too
 436+ 9584 28 3B            jr      z,.CheckShiftDelete             ; for now we will ignore the shift and just assume delete
 437+ 9586 FE 3E            cp      ">"         ; ENTER
 438+ 9588 28 24            jr      z,.EnterPressed
 439+ 958A FE 23            cp      "#"         ; CAPS
 440+ 958C 28 33            jr      z,.CapsPressed
 441+ 958E FE 5E            cp      "^"         ; SYMBOLSHIFT
 442+ 9590 28 2F            jr      z,.SymbolPressed
 443+ 9592 FE 20            cp      " "         ; space
 444+ 9594 28 2B            jr      z,.SpacePressed
 445+ 9596 C9               ret
 446+ 9597              .AlphaPressed:
 447+ 9597 47               ld      b,a
 448+ 9598 3A 3B 95         ld      a,(InputCursor)
 449+ 959B 4F               ld      c,a
 450+ 959C 21 1C 95         ld      hl,InputString
 451+ 959F ED 31            add     hl,a
 452+ 95A1 78               ld      a,b
 453+ 95A2 70               ld      (hl),b
 454+ 95A3 79               ld      a,c
 455+ 95A4 21 3B 95         ld      hl,InputCursor
 456+ 95A7 34               inc     (hl)
 457+ 95A8 3E FF            ld      a,$FF
 458+ 95AA 32 3D 95         ld      (InputChanged),a
 459+ 95AD C9               ret
 460+ 95AE              .EnterPressed:
 461+ 95AE 3A 3B 95         ld      a,(InputCursor)
 462+ 95B1 3C               inc     a
 463+ 95B2 21 1C 95         ld      hl,InputString
 464+ 95B5 ED 31            add     hl,a
 465+ 95B7 AF               xor     a
 466+ 95B8 77               ld      (hl),a
 467+ 95B9 3D               dec     a
 468+ 95BA 32 3C 95         ld      (EnterPressed),a
 469+ 95BD 32 3D 95         ld      (InputChanged),a
 470+ 95C0 C9               ret
 471+ 95C1              .CheckShiftDelete:
 472+ 95C1              .CapsPressed:                               ; act as a delete key for now
 473+ 95C1              .SymbolPressed:
 474+ 95C1              .SpacePressed:
 475+ 95C1 3A 3B 95         ld      a,(InputCursor)
 476+ 95C4 FE 00            cp      0
 477+ 95C6 C8               ret     z
 478+ 95C7 3D               dec     a
 479+ 95C8 32 3B 95         ld      (InputCursor),a
 480+ 95CB 21 1C 95         ld      hl,InputString
 481+ 95CE ED 31            add     hl,a
 482+ 95D0 AF               xor     a
 483+ 95D1 77               ld      (hl),a
 484+ 95D2 3E FF            ld      a,$FF
 485+ 95D4 32 3D 95         ld      (InputChanged),a
 486+ 95D7 C9               ret
 487+ 95D8
 488+ 95D8              MovementKeyTest:
 489+ 95D8              ;DBG1:jp dbg1
 490+ 95D8              ;dbx1:
 491+ 95D8 AF               xor     a
 492+ 95D9 32 A0 97         ld      (CursorKeysPressed),a
 493+ 95DC 3A A2 97         ld      a,(MenuIdMax)
 494+ 95DF E6 FC            and     $FC
 495+ 95E1 20 26            jr      nz,CursorKeys
 496+ 95E3              ClimbDiveKeys:
 497+ 95E3 2A D1 93         ld      hl,(addr_Pressed_Climb)
 498+ 95E6 7E               ld      a,(hl)
 499+ 95E7                  IfAIsZeroGoto ScanDiveKey
 499+ 95E7 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 499+ 95E8 CA F6 95    >                        jp	z, ScanDiveKey
 500+ 95EB 3A A0 97         ld      a,(CursorKeysPressed)
 501+ 95EE F6 80            or      $80
 502+ 95F0 32 A0 97         ld      (CursorKeysPressed),a
 503+ 95F3 C3 2C 96         jp      ScanLeftKey
 504+ 95F6              ScanDiveKey:
 505+ 95F6 2A CF 93         ld      hl,(addr_Pressed_Dive)
 506+ 95F9 7E               ld      a,(hl)
 507+ 95FA                  IfAIsZeroGoto ScanLeftKey
 507+ 95FA A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 507+ 95FB CA 2C 96    >                        jp	z, ScanLeftKey
 508+ 95FE 3A A0 97         ld      a,(CursorKeysPressed)
 509+ 9601 F6 40            or      $40
 510+ 9603 32 A0 97         ld      (CursorKeysPressed),a
 511+ 9606 C3 2C 96         jp      ScanLeftKey
 512+ 9609              CursorKeys:
 513+ 9609 2A 0D 94         ld      hl,(addr_Pressed_CursorUp)
 514+ 960C 7E               ld      a,(hl)
 515+ 960D                  IfAIsZeroGoto ScanCursorDownKey
 515+ 960D A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 515+ 960E CA 1C 96    >                        jp	z, ScanCursorDownKey
 516+ 9611 3A A0 97         ld      a,(CursorKeysPressed)
 517+ 9614 F6 80            or      $80
 518+ 9616 32 A0 97         ld      (CursorKeysPressed),a
 519+ 9619 C3 2C 96         jp      ScanLeftKey
 520+ 961C              ScanCursorDownKey
 521+ 961C 2A 0F 94         ld      hl,(addr_Pressed_CursorDown)
 522+ 961F 7E               ld      a,(hl)
 523+ 9620                  IfAIsZeroGoto ScanLeftKey
 523+ 9620 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 523+ 9621 CA 2C 96    >                        jp	z, ScanLeftKey
 524+ 9624 3A A0 97         ld      a,(CursorKeysPressed)
 525+ 9627 F6 40            or      $40
 526+ 9629 32 A0 97         ld      (CursorKeysPressed),a
 527+ 962C              ScanLeftKey:
 528+ 962C 2A CB 93         ld      hl,(addr_Pressed_RollLeft)
 529+ 962F 7E               ld      a,(hl)
 530+ 9630                  IfAIsZeroGoto ScanRightKey
 530+ 9630 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 530+ 9631 CA 3D 96    >                        jp	z, ScanRightKey
 531+ 9634 3A A0 97         ld      a,(CursorKeysPressed)
 532+ 9637 F6 20            or      $20
 533+ 9639 32 A0 97         ld      (CursorKeysPressed),a
 534+ 963C C9               ret
 535+ 963D              ScanRightKey:
 536+ 963D 2A CD 93         ld      hl,(addr_Pressed_RollRight)
 537+ 9640 7E               ld      a,(hl)
 538+ 9641                  IfAIsZeroGoto ScanHomeKey
 538+ 9641 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 538+ 9642 CA 4E 96    >                        jp	z, ScanHomeKey
 539+ 9645 3A A0 97         ld      a,(CursorKeysPressed)
 540+ 9648 F6 10            or      $10
 541+ 964A 32 A0 97         ld      (CursorKeysPressed),a
 542+ 964D C9               ret
 543+ 964E              ScanHomeKey:
 544+ 964E 2A EB 93         ld      hl,(addr_Pressed_HomeCursor)
 545+ 9651 7E               ld      a,(hl)
 546+ 9652                  IfAIsZeroGoto ScanRecentreKey
 546+ 9652 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 546+ 9653 CA 5F 96    >                        jp	z, ScanRecentreKey
 547+ 9656 3A A0 97         ld      a,(CursorKeysPressed)
 548+ 9659 F6 08            or      $08
 549+ 965B 32 A0 97         ld      (CursorKeysPressed),a
 550+ 965E C9               ret
 551+ 965F              ScanRecentreKey:
 552+ 965F 2A 07 94         ld      hl,(addr_Pressed_Recentre)
 553+ 9662 7E               ld      a,(hl)
 554+ 9663                  ReturnIfAIsZero
 554+ 9663 A7          >                        and a
 554+ 9664 C8          >                        ret    z
 555+ 9665 3A A0 97         ld      a,(CursorKeysPressed)
 556+ 9668 F6 04            or      $04
 557+ 966A 32 A0 97         ld      (CursorKeysPressed),a
 558+ 966D C9               ret
 559+ 966E
 560+ 966E
# file closed: ./Hardware/keyboard.asm
 992  966E
 993  966E                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 966E              ;Contants
   2+ 966E
   3+ 966E              SignMask8Bit		equ %01111111
   4+ 966E              SignMask16Bit		equ %0111111111111111
   5+ 966E              SignOnly8Bit		equ $80
   6+ 966E              SignOnly16Bit		equ $8000
   7+ 966E
   8+ 966E              ConstPi				equ $80
   9+ 966E              ConstNorm           equ 197
  10+ 966E
  11+ 966E              ;Text Tokens
  12+ 966E              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  13+ 966E              BrabenBellToken 	equ $0D
  14+ 966E              AcorToken			equ $0C
  15+ 966E
  16+ 966E              ; Intro Screen
  17+ 966E              TitleShip			equ	$8C
  18+ 966E              RotationUnity		equ $60
  19+ 966E              DBCheckCode			equ $DB
  20+ 966E              MaxVisibility		equ $1F
  21+ 966E              FarInFront			equ $C0
  22+ 966E
  23+ 966E              ; Universe Managment
  24+ 966E              ShipTypeJunk        equ 3
  25+ 966E              ShipTypeStation     equ 2
  26+ 966E              ShipTypeMissile     equ 1
  27+ 966E              ShipTypeNormal      equ 0
  28+ 966E              ShipMaxDistance     equ 192
  29+ 966E              HyperSpaceTimers    equ $0B0B
  30+ 966E
  31+ 966E
  32+ 966E              MaxNumberOfStars	equ 11
  33+ 966E              UniverseListSize    equ	12
  34+ 966E              ShipTypeSize		equ	32 			;??????? just a guess for now
  35+ 966E              ShipSST				equ 4			; its a space station
  36+ 966E              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
  37+ 966E              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
  38+ 966E              ShipCountMax		equ	2			; For now just 2 ships to debug
  39+ 966E              LineLimitPerShip	equ 70			; Max lines per ship
  40+ 966E              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
  41+ 966E              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
  42+ 966E              PlayerDocked		equ	$FF
  43+ 966E
  44+ 966E              ; Memory page managment	(Refers to a memory slot as a place to access data)
  45+ 966E              ShipDataSlot		equ	6			; this may move into rom swap out space later
  46+ 966E              UniverseObjectSlot	equ	7
  47+ 966E
  48+ 966E              KeyForwardsView		equ	$20
  49+ 966E
  50+ 966E              ;...Game Colour Mapping
  51+ 966E              L2DustColour        equ L2ColourGREY_1
  52+ 966E              L2SunScannerBright  equ 252
  53+ 966E              L2SunScanner        equ 180
  54+ 966E
  55+ 966E
  56+ 966E              ; Ship Data
  57+ 966E              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
  58+ 966E              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
  59+ 966E              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
  60+ 966E              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
  61+ 966E              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
  62+ 966E              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
  63+ 966E              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
  64+ 966E              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
  65+ 966E              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
  66+ 966E              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
  67+ 966E              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
  68+ 966E              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
  69+ 966E              ;;;;00 00			 EQUW 0     \ type 12 is       Python
  70+ 966E              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
  71+ 966E              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
  72+ 966E              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
  73+ 966E              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
  74+ 966E              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
  75+ 966E              ;;;;00 00			 EQUW 0     \ type 18 is
  76+ 966E              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
  77+ 966E              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
  78+ 966E              ;;;;00 00			 EQUW 0     \ type 21 is
  79+ 966E              ;;;;00 00			 EQUW 0     \ type 22 is
  80+ 966E              ;;;;00 00			 EQUW 0     \ type 23 is
  81+ 966E              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
  82+ 966E              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
  83+ 966E              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
  84+ 966E              ;;;;00 00			 EQUW 0     \ type 27 is
  85+ 966E              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
  86+ 966E              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
  87+ 966E              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
  88+ 966E              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
  89+ 966E              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
  90+ 966E              ;;;;			\ NEWB examples
  91+ 966E              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
  92+ 966E              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
  93+ 966E              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
  94+ 966E              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
  95+ 966E              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
  96+ 966E
# file closed: ./Variables/constant_equates.asm
 994  966E                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 966E              ;	PAGE 0 Map to variable anmes
   2+ 966E              ;	PAGE 0 Map to variable anmes
   3+ 966E              ;
   4+ 966E              ;
   5+ 966E              ;
   6+ 966E              ;	06		T1
   7+ 966E              ;	07
   8+ 966E              ;	08		SC1					Screen Hi
   9+ 966E              ;	09							XX16 Matrix
  10+ 966E              ;	0A							XX16+1
  11+ 966E              ;	0B							XX16+2
  12+ 966E              ;	0C							XX16+3
  13+ 966E              ;	0D                          XX16+4
  14+ 966E              ;	0E                          XX16+5
  15+ 966E              ;	0F							XX16+6
  16+ 966E              ;	10		varP				XX16+7
  17+ 966E              ;	11		varP				XX16+8
  18+ 966E              ;	12                          XX16+9
  19+ 966E              ;	13                          XX16+10
  20+ 966E              ;	14							XX16+11
  21+ 966E              ;	15                          XX16+12
  22+ 966E              ;	16                          XX16+13
  23+ 966E              ;	17                          XX16+14
  24+ 966E              ;	17                          XX16+14
  25+ 966E              ;	18                          XX16+15
  26+ 966E              ;	19
  27+ 966E              ;	1A
  28+ 966E              ;	1B
  29+ 966E              ;	1C
  30+ 966E              ;	1D
  31+ 966E              ;	1E							XX0
  32+ 966E              ;	1F                          XX0+1
  33+ 966E              ;	20		INF                 XX0+2
  34+ 966E              ;	21      INF+1               XX0+3
  35+ 966E              ;	22      varV                XX0+4
  36+ 966E              ;	23      varV +1             XX0+5
  37+ 966E              ;	24		XXlo                XX0+6
  38+ 966E              ;	25		XXHi
  39+ 966E              ;	26		YYlo
  40+ 966E              ;	27		YYHi
  41+ 966E              ;	28
  42+ 966E              ;	29
  43+ 966E              ;	2A		BETA (pitch done)
  44+ 966E              ;	2B		BET1 lower7 magnitude
  45+ 966E              ;	2C		XC
  46+ 966E              ;	2D		YC
  47+ 966E              ;	2E		QQ22				Outer Hyperspace Countdown
  48+ 966E              ;	2E		QQ22				Outer Hyperspace Countdown
  49+ 966E              ;	2F		QQ22+1				Inner Hyperspace Countdown
  50+ 966E              ;	30		ECM Active
  51+ 966E              ;	31		ALP1
  52+ 966E              ;	32		ALP2
  53+ 966E              ;	33		ALP2FLIP
  54+ 966E
  55+ 966E              ;	36		Z1					XX15+2yscaled
  56+ 966E              ;	37		                    XX15+3ysign
  57+ 966E              ;	38		                    XX15+4zscaled
  58+ 966E              ;	39							XX15+5zsign
  59+ 966E              ;	3A		XX12				xplot for star
  60+ 966E              ;	3B
  61+ 966E              ;	3C
  62+ 966E              ;	3D
  63+ 966E              ;	3E
  64+ 966E              ;	3F
  65+ 966E              ;	40		varKlo
  66+ 966E              ;	41		varKmid
  67+ 966E              ;	42		varKHi
  68+ 966E              ;	43		varKVeryHi+Sign
  69+ 966E              ;	44
  70+ 966E              ;	45		MSTG				MissileTarget
  71+ 966E              ;	46		INWK				; Inner working space of 37 bytes
  72+ 966E              ;	47		INWK
  73+ 966E              ;	48		INWK
  74+ 966E              ;	49		INWK
  75+ 966E              ;	4A		INWK
  76+ 966E              ;	4B		INWK
  77+ 966E              ;	4C		INWK
  78+ 966E              ;	4D		INWK
  79+ 966E              ;	4E		INWK
  80+ 966E              ;	4F		INWK+9
  81+ 966E              ;	50		INWK
  82+ 966E              ;	51		INWK
  83+ 966E              ;	52		INWK
  84+ 966E              ;	53		INWK
  85+ 966E              ;	54		INWK
  86+ 966E              ;	55		INWK
  87+ 966E              ;	56		INWK
  88+ 966E              ;	57		INWK
  89+ 966E              ;	58		INWK
  90+ 966E              ;	59		INWK
  91+ 966E              ;	5A		INWK
  92+ 966E              ;	5B		INWK
  93+ 966E              ;	5C		INWK
  94+ 966E              ;	5D		INWK
  95+ 966E              ;	5E		INWK
  96+ 966E              ;	5F		INWK
  97+ 966E              ;	60		INWK
  98+ 966E              ;	61		INWK
  99+ 966E              ;	62		INWK
 100+ 966E              ;	63		INWK
 101+ 966E              ;	64		INWK
 102+ 966E              ;	65		INWK31				 clear exploding/display state|missiles
 103+ 966E              ;	66		INWK
 104+ 966E              ;	67		INWK				XX19
 105+ 966E              ;	68		INWK
 106+ 966E              ;	69		INWK
 107+ 966E              ;	6A		INWK36
 108+ 966E              ;	6B
 109+ 966E              ;	6C		QQ15				Current Seed
 110+ 966E              ;	6D		QQ15+1
 111+ 966E              ;	6E		QQ15+2
 112+ 966E              ;	6F		QQ15+3
 113+ 966E              ;	70		QQ15+4
 114+ 966E              ;	71
 115+ 966E              ;	72		XX18   xlo			QQ17
 116+ 966E              ;	73		XX18+1 xhi
 117+ 966E              ;	74		XX18+2 xsgn
 118+ 966E              ;	75		XX18   ylo
 119+ 966E              ;	76		XX18+1 yhi
 120+ 966E              ;	77		XX18+2 ysgn
 121+ 966E              ;	78		XX18   zlo
 122+ 966E              ;	79		XX18+1 zhi
 123+ 966E              ;	7A		XX18+2 zsgn
 124+ 966E              ;	7B		BET2				Pitch Sign
 125+ 966E              ;	7C		BET2FLIP
 126+ 966E              ;	7D		DELTA
 127+ 966E              ;	7E		DELT4Lo
 128+ 966E              ;	7F		DELT4Hi
 129+ 966E              ;	80
 130+ 966E              ;	81		varQ
 131+ 966E              ;	82		varR
 132+ 966E              ;	83		varS
 133+ 966E              ;	84		XSAV
 134+ 966E              ;	85		YSAV
 135+ 966E              ;	86		XX17
 136+ 966E              ;	87		MenuIdMax		QQ11
 137+ 966E              ;	88		ZZDust
 138+ 966E              ;	89
 139+ 966E              ;	8A		MCNT			Move Count
 140+ 966E              ;	8B		ALPHA
 141+ 966E              ;	8C		TYPE
 142+ 966E              ;	8D
 143+ 966E              ;	8E		DockedFlag		QQ12
 144+ 966E              ;	8F
 145+ 966E              ;	96		XX4				Nbr of Normals Visible
 146+ 966E              ;
 147+ 966E              ;   9F      POINT
 148+ 966E              ;	D0
 149+ 966E              ;	D1		varT
 150+ 966E              ;array list of each face during draw flagged visible or not
 151+ 966E              ;	D2      XX2
 152+ 966E              ;	D3      XX2+1
 153+ 966E              ;	D4      XX2+2
 154+ 966E              ;	D5      XX2+3
 155+ 966E              ;	D6      XX2+4
 156+ 966E              ;	D7      XX2+5
 157+ 966E              ;	D8      XX2+6
 158+ 966E              ;	D9      XX2+7
 159+ 966E              ;	DA      XX2+8
 160+ 966E              ;	DB      XX2+9
 161+ 966E              ;	DC      XX2+10
 162+ 966E              ;	DD      XX2+11
 163+ 966E              ;	DE      XX2+12
 164+ 966E              ;	DF		XX2+13
 165+ 966E              ;	E0		XX2+14
 166+ 966E              ;	E1		XX2+15
 167+ 966E              ;	E2
 168+ 966E              ;	E3
 169+ 966E              ;	E4
 170+ 966E              ;	E5
 171+ 966E              ;	E6
 172+ 966E              ;	E7
 173+ 966E              ;	E8
 174+ 966E              ;	E9
 175+ 966E              ;	EA
 176+ 966E              ;	EB
 177+ 966E              ;	EC
 178+ 966E              ;	ED
 179+ 966E              ;	EE
 180+ 966E              ;	8F
 181+ 966E
 182+ 966E 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
 183+ 9670 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
 184+ 9672              ; Variables to simulate 6502 registers until code fixed
 185+ 9672              ; These must be here in this order as reading Y and X can then be a 16 bit read
 186+ 9672 00           regX		DB	0               ; using 16 bit read into BC this would go into C
 187+ 9673 00           regY		DB	0               ; using 16 bit read into BC this would go into B
 188+ 9674 00           regA		DB	0
 189+ 9675
 190+ 9675
 191+ 9675 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
 192+ 9676 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
 193+ 9678 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
 194+ 967A
 195+ 967A
 196+ 967A
 197+ 967A              ;XX16		DS	16				; 16 byte Matrix
 198+ 967A
 199+ 967A              P0INWK							; page 0 & 46
 200+ 967A              p0INWK31						; page 0 & 65
 201+ 967A              P0INWK36						; PAGE 0 &6A
 202+ 967A
 203+ 967A 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
 204+ 967B              LastNormalVisible	equ	XX4
 205+ 967B              varXX4              equ XX4
 206+ 967B
 207+ 967B
 208+ 967B
 209+ 967B 00           PATG		DB	0				; 6502 &03C9
 210+ 967C 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
 211+ 967E
 212+ 967E
 213+ 967E              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
 214+ 967E              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
 215+ 967E
 216+ 967E              ; Present System Variables
 217+ 967E
 218+ 967E 2B           RandomSeed				DB	43			; 00 DEBUG JUST SOME START VALUES
 219+ 967F 20           RandomSeed1				DB	32	; 01
 220+ 9680 0C           RandomSeed2				DB	12			; 02
 221+ 9681 42           RandomSeed3				DB	66			; 03
 222+ 9682
 223+ 9682 00           varT1					DB	0				; 06
 224+ 9683 00           SClo					DB 0				; 07
 225+ 9684 00           SChi					DB 0				; 08
 226+ 9685 00           varP					DB 0 				; 10	XX16+7
 227+ 9686 00           varPhi					DB 0 				; 11	XX16+8
 228+ 9687 00           varPhi2					DB 0 				; 12	XX16+9
 229+ 9688              varPp1                  equ varPhi
 230+ 9688              varPp2                  equ varPhi2
 231+ 9688 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
 232+ 9689 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
 233+ 968A              UnivPointer				equ	UnivPointerLo
 234+ 968A 00           varV					DB 0				; 22                          XX0+4
 235+ 968B 00           varVHi					DB 0				; 23                          XX0+5
 236+ 968C 00           varXXlo                 DB 0                ; 24
 237+ 968D 00           varXXHi                 DB 0                ; 25
 238+ 968E              varXX					equ	varXXlo
 239+ 968E 00           YYlo                    DB 0                ; 26
 240+ 968F 00           YYHi                    DB 0                ; 27
 241+ 9690              varYY					equ	YYlo
 242+ 9690              											;	28
 243+ 9690              											;	29
 244+ 9690              ;PlayerShipPositionData - Must be contiguous for setup
 245+ 9690 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
 246+ 9691 00           BETA 					DB	0               ; 2A        (pitch done)
 247+ 9692 00           JSTY                    DB  0               ; Joystick analog
 248+ 9693 00           BET1 					DB	0               ; 2B        lower7 magnitude
 249+ 9694 00           BET2                    DB  0               ;            climb sign
 250+ 9695 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
 251+ 9696 1F           BET1MAXC                DB  31              ; max climb
 252+ 9697 E1           BET1MAXD                DB  -31             ; max dive
 253+ 9698 00           XC						DB	0               ; 2C
 254+ 9699 00           YC						DB 	0               ; 2D
 255+ 969A 00           InnerHyperCount			DB 	0				; 2F QQ22+1
 256+ 969B 00           OuterHyperCount			DB 	0				; 2E QQ22
 257+ 969C 00           HyperCircle             DB  0
 258+ 969D 00           ECMActive				DB 	0				; 30		ECM Active flag
 259+ 969E 00           ECMLoopA                DB  0
 260+ 969F 00           ECMLoopB                DB  0
 261+ 96A0 00 00        JSTX                    DW  0               ;           Joystick analog value
 262+ 96A2 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
 263+ 96A3 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
 264+ 96A4 00           ALP2					DB  0				; 32		ALP2	Roll Sign
 265+ 96A5 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
 266+ 96A6 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
 267+ 96A7 E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
 268+ 96A8
 269+ 96A8 00           EventCounter    		DB 	0				; 8A
 270+ 96A9 00           MissJumpFlag            DB  0
 271+ 96AA 00           ExtraVesselsCounter     DB  0
 272+ 96AB 00           JunkCount				DB  0				; $033E
 273+ 96AC 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 274+ 96AD 00           CopCount                DB  0
 275+ 96AE 00           PirateCount             DB  0
 276+ 96AF 00           BadnessStatus           DB  0
 277+ 96B0
 278+ 96B0              MAXMESSAGES             EQU 5
 279+ 96B0              MESSAGETIMELIMIT        EQU 20
 280+ 96B0              MESSAGESIZE             EQU 33
 281+ 96B0              MESSAGELINE             EQU $0001
 282+ 96B0
 283+ 96B0 00           MessageCount            DB 0                ; used for enquing messages later
 284+ 96B1 00           MessageCurrent          DB 0
 285+ 96B2 05 00        MessageIndex            DW MAXMESSAGES
 286+ 96B4 00 00 00...  MessageQueue            DS MAXMESSAGES * MESSAGESIZE
 287+ 9759 05           MessageTimeout          DB MAXMESSAGES
 288+ 975A 00 00        MissileTarget			DW 0				; 45
 289+ 975C 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 290+ 9781
 291+ 9781              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 292+ 9781              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 293+ 9781              NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 294+ 9781 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 295+ 9782              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 296+ 9782
 297+ 9782
 298+ 9782 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 299+ 9787              											;	6D		QQ15+1
 300+ 9787              											;	6E		QQ15+2
 301+ 9787              											;	6F		QQ15+3
 302+ 9787              											;	70		QQ15+4
 303+ 9787              											;	71		QQ15+5
 304+ 9787 00           QQ17					DB	0				;   72
 305+ 9788 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 306+ 9789 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 307+ 978A 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 308+ 978B 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 309+ 978C 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 310+ 978D 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 311+ 978E 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 312+ 978F 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 313+ 9790 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 314+ 9791
 315+ 9791 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 316+ 9792 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 317+ 9793 00           DELT4Lo					DB 	0				; 7E
 318+ 9794 00           DELT4Hi					DB 	0				; 7F
 319+ 9795              DELTA4                  equ                 DELT4Lo
 320+ 9795
 321+ 9795
 322+ 9795              ; Not thise must be in this order else 16 bit fetches will fail
 323+ 9795 00           varU                    DB  0               ;   80
 324+ 9796 00           varQ					DB  0 				;	81
 325+ 9797 00           varR					DB  0 				;	82
 326+ 9798 00           varS					DB  0 				;	83
 327+ 9799              varRS                   equ varR
 328+ 9799
 329+ 9799 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 330+ 979B
 331+ 979B 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 332+ 979C 00           YSAV                    DB  0               ; 85
 333+ 979D 00           XX17					DB	0				; 86
 334+ 979E              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 335+ 979E              varXX17                 equ  XX17
 336+ 979E 00           ScreenChanged           DB  0
 337+ 979F 00           ScreenIndex             DB  0
 338+ 97A0 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 339+ 97A1                                                          ; 7    6    5    4     3    2        1    0
 340+ 97A1                                                          ; Up   Down Left Right Home Recentre
 341+ 97A1 00           InvertedYAxis           DB  0
 342+ 97A2 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 343+ 97A3              											; Bit 7 Set  ShortRangeChart    $80
 344+ 97A3              											; Bit 6 Set  Galactic Chart     $40
 345+ 97A3              											; Bit 5 Set  Market Place       $20
 346+ 97A3              											; Bit 4 Set  Status Screen      $10
 347+ 97A3              											; Bit 3 Set  Display Inventory  $08
 348+ 97A3                                                          ; Bit 2 Set  Planet Data        $04
 349+ 97A3                                                          ; View bit combinations if the ones above not matched
 350+ 97A3                                                          ; bits 1 0
 351+ 97A3                                                          ;      1 1  Front view , i.e. $03
 352+ 97A3                                                          ;      1 0  Aft View          $02
 353+ 97A3                                                          ;      0 1  Left View         $01
 354+ 97A3                                                          ;      0 0  Right view        $00
 355+ 97A3              											; Bit 0 Set  Data On System
 356+ 97A3              											; 0  Space View (Not a menu)
 357+ 97A3 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 358+ 97A4 00           XX13                    DB  0               ;   89
 359+ 97A5 00           TYPE					DB	0				; 8C used for ship type in drawing
 360+ 97A6              ;Docked flag = 00 = in free space
 361+ 97A6              ;              FF = Docked
 362+ 97A6              ;              FE = transition
 363+ 97A6              ;              FD = Setup open space and transition to not docked
 364+ 97A6              ;              FC = Hyperspace manimation
 365+ 97A6              ;              FB = Hyperspace complete
 366+ 97A6 00           DockedFlag				DB	0				; 8E -
 367+ 97A7 00           GamePaused              DB  0
 368+ 97A8 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 369+ 97A9 00           varCNT                  DB  0               ; 93
 370+ 97AA
 371+ 97AA 00           varK					DB	0				; 40
 372+ 97AB 00           varKp1					DB	0				; 41
 373+ 97AC 00           varKp2					DB	0				; 42
 374+ 97AD 00           varKp3					DB	0				; 43
 375+ 97AE
 376+ 97AE 00           varK2                   DB  0               ; 9B
 377+ 97AF 00           varK2p1                 DB  0               ; 9C K2 plus 1
 378+ 97B0 00           varK2p2                 DB  0               ; 9D K2 plus 2
 379+ 97B1 00           varK2p3                 DB  0               ; 9E K2 plus 3
 380+ 97B2
 381+ 97B2 00           Point                   DB  0               ; 9F      POINT
 382+ 97B3
 383+ 97B3 00           varT					DB	0				; D1
 384+ 97B4
 385+ 97B4 00 00 00...  varVector9ByteWork      DS  9
 386+ 97BD
 387+ 97BD 00 00 00 00  varK3					DS	4				; D2
 388+ 97C1 00           varK3p2					DB	0				; 42
 389+ 97C2 00           varK3p3					DB	0				; 43
 390+ 97C3              varK3p1					equ varK3+1			; D3
 391+ 97C3 00 00 00 00  varK4					DS	4				; E0
 392+ 97C7              varK4p1					equ varK4+1			; D3
 393+ 97C7
 394+ 97C7              ;PlayerData:
 395+ 97C7 00           PlayerForwardSheild0	DB	0 ; ?????
 396+ 97C8 00           PlayerForwardSheild1    DB	0
 397+ 97C9 00           PlayerForwardSheild2    DB	0
 398+ 97CA
 399+ 97CA
 400+ 97CA              ;Heap
 401+ 97CA
 402+ 97CA 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 403+ 97CC 00 00 00...  HeapData				DS	50
 404+ 97FE              ; Contains 				X 16 bit, Y 16 bit
 405+ 97FE              ;RuntimeData:
 406+ 97FE              HeapHead				equ HeapStart
 407+ 97FE
 408+ 97FE              ; For the UniverseSlot list, for an optimisation the type slot will be the ship type, e.g. ship type this will optimise searching for a station or star
 409+ 97FE              ; bit 7 will be set for a sun or planet so we can only ever have 128 types of ship, in relality there are about 3 types
 410+ 97FE              ; note this is ship type as it space station, transporter, pirate etc not model of ship
 411+ 97FE              ; This replaces FRIN
 412+ 97FE              ; slot 0 always equals the planet
 413+ 97FE              ; slot 1 is the space station or sun depending on if we are in the space station safe zone)
 414+ 97FE 00 00 00...  UniverseSlotList		DS UniverseListSize		; &0311 for 12 bytes Array of Free Index - Now array of while universe pages are occupied
 415+ 980A 00 00 00...  UniverseSlotCount       DS UniverseListSize * 2 ; To be implemented, keeps a count of each slot type, may merge into slot list and set as a DW
 416+ 9822 00           CurrentUniverseAI       DB  0               ; used to cycle ships in each iterations of main loop
 417+ 9823 00           SelectedUniverseSlot    DB  0
 418+ 9824              ;SpaceStationPresent		DB	0				; flag to determine if we are within space station safe zone
 419+ 9824
 420+ 9824 00           SUN						DB	0				; &031D Actually MANY -1? As we can only have 1?
 421+ 9825 00           MANY					DB	0				; &031E array of ship types???
 422+ 9826 00           						DB	0				; &0321	Speculative?
 423+ 9827 00           						DB	0				; &0322	Speculative?
 424+ 9828 00           						DB	0				; &0323	Speculative?
 425+ 9829 00           						DB	0				; &0324	Speculative?
 426+ 982A 00           						DB	0				; &0325	Speculative?
 427+ 982B 00           						DB	0				; &0326	Speculative?
 428+ 982C 00           						DB	0				; &0327	Speculative?
 429+ 982D 00           TransporterPresent		DB	0				; &0328	MANY + 10 (or #SHU + 1)
 430+ 982E 00           						DB	0				; &0329	MANY + 11 Speculative?
 431+ 982F 00           				        DB	0				; &032A	MANY + 12 Speculative?
 432+ 9830 00           				        DB	0				; &032B	MANY + 13 Speculative?
 433+ 9831 00           				        DB	0				; &032C	MANY + 14 Speculative?
 434+ 9832 00           				        DB	0				; &032D	MANY + 15 Speculative?
 435+ 9833 00           				        DB	0				; &032E	MANY+COPS #COP Confirmed in code
 436+ 9834 00           				        DB	0				; &032F	MANY + 17 Speculative?
 437+ 9835 00           				        DB	0				; &0330	MANY + 18 Speculative?
 438+ 9836 00           				        DB	0				; &0331	MANY + 19 Speculative?
 439+ 9837 00           						DB	0				; &0332	MANY + 20 Speculative?
 440+ 9838 00           				        DB	0				; &0333	MANY + 21 Speculative?
 441+ 9839 00           				        DB	0				; &0334	MANY + 22 Speculative?
 442+ 983A 00           				        DB	0				; &0335	MANY + 23 Speculative?
 443+ 983B 00           				        DB	0				; &0336	MANY + 24 Speculative?
 444+ 983C 00           				        DB	0				; &0337	MANY + 25 Speculative?
 445+ 983D 00           				        DB	0				; &0338	MANY + 26 Speculative?
 446+ 983E 00           				        DB	0				; &0339	MANY + 27 Speculative?
 447+ 983F 00           				        DB	0				; &033A	MANY + 28 Speculative?
 448+ 9840 00           				        DB	0				; &033B	MANY + 29 Speculative?
 449+ 9841 00           				        DB	0				; &033C	MANY + 30 Thargoids
 450+ 9842 00           				        DB	0				; &033D	MANY + 31 Constrictor?
 451+ 9843 00           CabinTemp				DB	0				; $0342
 452+ 9844 00           MissileArmedStatus		DB	0				; 0344 MSAR
 453+ 9845 00           View					DB	0				; 0345 Index for laser mount and screen view, 1 = front 2 = aft = 4 left 8 = right
 454+ 9846 00           GunTemperature			DB	0				; 0347	GNTMP
 455+ 9847 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 456+ 9848 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 457+ 9849 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 458+ 984A 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 459+ 984B 00           JoystickX				DB	0				; 034C JSTX
 460+ 984C 00           JoystickY				DB	0				; 034D JSTY
 461+ 984D 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 462+ 984E 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 463+ 984F 00 00 00...  CommanderName			DS  8				; 0350 - 3057 Commander Name
 464+ 9857 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 465+ 9858              ;036C to D???
 466+ 9858 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 467+ 985F              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 468+ 985F              ;  #&5 Does J reverse both joystick channels
 469+ 985F              ;  #&4 Does Y reverse joystick Y channel			03CB
 470+ 985F              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 471+ 985F              ;  #&3 Does F toggle flashing information			03CA
 472+ 985F              ;  #&1 Does A toggle keyboard auto-recentering ?
 473+ 985F              ;  #&0 Caps-lock toggles keyboard flight damping
 474+ 985F 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 475+ 9860 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 476+ 9861 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 477+ 9871 00           AlienItemsAvaliability  DB	0				; 039D
 478+ 9872 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 479+ 9873 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 480+ 9875 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 481+ 9876              											;
 482+ 9876 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 483+ 9877 00           ForeShield				DB	0				; 03A5
 484+ 9878 00           AftShield				DB	0				; 03A6
 485+ 9879 00           PlayerEnergy			DB	0				; 03A7
 486+ 987A 00           CompassX				DB	0				; 03A8
 487+ 987B 00           CompassY				DB	0				; 03A9
 488+ 987C 00           MarketPrice				DB	0				; 03AA QQ24
 489+ 987D 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 490+ 987E 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 491+ 987F 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 492+ 9880 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 493+ 9882              											; this is ship lines stack pointer so may be redundant with paging
 494+ 9882              											; LS = line stack so we will have one for now to remove later
 495+ 9882 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 496+ 9883 00           DisplayEcononmy			DB	0				; 03B8
 497+ 9884 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 498+ 9885 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 499+ 9886 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 500+ 9888 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 501+ 988A 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 502+ 988C 00 00        DisplayRadius			DW	0
 503+ 988E              ; --- Used in creation of sun and planet----;
 504+ 988E 00           PlanetXPos     DS  1
 505+ 988F 00           PlanetYPos     DS  1
 506+ 9890 00           PlanetZPos     DS  1
 507+ 9891 00           PlanetType     DS  1
 508+ 9892 00           SunXPos        DS  1
 509+ 9893 00           SunYPos        DS  1
 510+ 9894 00           SunZPos        DS  1
 511+ 9895              ; --- Galaxy Data --------------------------;
 512+ 9895 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 513+ 9896 00 00 00...  WorkingSeeds			DS	6
 514+ 989C 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 515+ 98A2 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 516+ 98A8 00           PresentSystemX			DB	0				; 0359 - 035A QQ0 X Y
 517+ 98A9 00           PresentSystemY			DB  0
 518+ 98AA 00           TargetPlanetX			DB	0               ; 03C1
 519+ 98AB 00           TargetPlanetY			DB	0               ; 03C2
 520+ 98AC 00           GovPresentSystem		DB	0				; 03AE Govenment
 521+ 98AD 00           TekPresentSystem		DB	0				; 03AF Technology
 522+ 98AE              ;SRCTargetPlanetX		DB	0               ; Used for short range chart cursor
 523+ 98AE              ;SRCTargetPlanetY		DB	0               ; then divided down to target planet for compatibilit with galactic chart routines
 524+ 98AE 00           NumberOfStarsNOSTM		DB	0				; 03C3 NOSTM  \ number of stars, dust.
 525+ 98AF
 526+ 98AF 00           CompassColor			DB	0				; 03C5
 527+ 98B0 00           SoundToggle				DB	0				; 03C6
 528+ 98B1 00           KeyboardRecenterToggle	DB	0				; 03C8
 529+ 98B2 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 530+ 98B3 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 531+ 98B4 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 532+ 98B5 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 533+ 98B6 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 534+ 98B7 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 535+ 98B8
 536+ 98B8              ; Working Data
 537+ 98B8
 538+ 98B8              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 539+ 98B8              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 540+ 98B8              ; $0925 =	EQUW page9+37* 1
 541+ 98B8              ; $094A =	EQUW page9+37* 2
 542+ 98B8              ; $096F =	EQUW page9+37* 3
 543+ 98B8              ; $0994 =	EQUW page9+37* 4
 544+ 98B8              ; $09B9 =	EQUW page9+37* 5
 545+ 98B8              ; $09DE =	EQUW page9+37* 6
 546+ 98B8              ; $0A03 =	EQUW page9+37* 7
 547+ 98B8              ; $0A28 =	EQUW page9+37* 8
 548+ 98B8              ; $0A4D =	EQUW page9+37* 9
 549+ 98B8              ; $0A72 =	EQUW page9+37*10
 550+ 98B8              ; $0A97 =	EQUW page9+37*11
 551+ 98B8              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 552+ 98B8
 553+ 98B8
 554+ 98B8
 555+ 98B8              ; 0b00 is start address of data to save
 556+ 98B8              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 557+ 98B8              											; Bit mask XXXX10XX - Thargoid plan mission
 558+ 98B8
 559+ 98B8 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 560+ 98B9
 561+ 98B9 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 562+ 98BB 00 00        CommanderLoadAddress	DW	0				;0C03
 563+ 98BD 00 00        LengthOfFile			DW	0				;0C0B
 564+ 98BF 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 565+ 98C1
 566+ 98C1 00 00 00...  EdgesBuffer				DS 50
 567+ 98F3              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 568+ 98F3              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 569+ 98F3
 570+ 98F3 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 571+ 9939              ShipLineStackTop		equ $ - ShipLineStack
 572+ 9939
 573+ 9939 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 574+ 99F9              ; LSX vector overlaps with LSO
 575+ 99F9 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 576+ 99FA 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 577+ 99FB
 578+ 99FB              ; Star Positions are 16 bit 3d coordinates
 579+ 99FB 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
 580+ 9A3D 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 581+ 9A53 00           varStarX                DB  0
 582+ 9A54 00           varStarY                DB  0
 583+ 9A55 00 00 00...  varDustX                DS MaxNumberOfStars *2
 584+ 9A6B 00 00 00...  varDustY                DS MaxNumberOfStars *2
 585+ 9A81 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 586+ 9A97
 587+ 9A97              FShieldStart            equ $8410
 588+ 9A97              AShieldStart            equ $8D10
 589+ 9A97              FuelStart               equ $9410
 590+ 9A97
 591+ 9A97              EnergyBar4Start         equ $A5D5
 592+ 9A97              EnergyBar3Start         equ $ADD5
 593+ 9A97              EnergyBar2Start         equ $B5D5
 594+ 9A97              EnergyBar1Start         equ $BDD5
 595+ 9A97              ; 70 /2 = 35 values
 596+ 9A97              ;                            0                             1                             2                             3
 597+ 9A97              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 598+ 9A97 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 598+ 9A9B 04 04 05 06
 598+ 9A9F 06 07 08 09
 598+ 9AA3 0A 0A 0B 0C
 598+ 9AA7 0D 0E 0E 0F
 598+ 9AAB 10 10 11 13
 598+ 9AAF 14 15 15 16
 598+ 9AB3 17 18 19 1A
 598+ 9AB7 1B 1C 1E 1F
 598+ 9ABB 1F
 599+ 9ABC              SpeedoStart             equ $84D1
 600+ 9ABC              ;                            0                             1                             2                             3                             4
 601+ 9ABC              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 602+ 9ABC 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 602+ 9AC0 04 04 05 06
 602+ 9AC4 06 07 08 09
 602+ 9AC8 0A 0A 0B 0C
 602+ 9ACC 0D 0E 0E 0F
 602+ 9AD0 10 10 11 12
 602+ 9AD4 13 14 14 15
 602+ 9AD8 16 17 18 18
 602+ 9ADC 19 1A 1A 1B
 602+ 9AE0 1C 1C 1D 1E
 602+ 9AE4 1F
 603+ 9AE5
 604+ 9AE5              DialMiddleXPos          equ $E1
 605+ 9AE5              RollMiddle              equ $8CE0
 606+ 9AE5              PitchMiddle             equ $94E0
 607+ 9AE5
 608+ 9AE5
 609+ 9AE5              ResetPlayerShip:        ZeroThrottle
 609+ 9AE5 AF          >                        xor     a
 609+ 9AE6 32 92 97    >                        ld      (DELTA),a
 609+ 9AE9 32 93 97    >                        ld      (DELT4Lo),a
 609+ 9AEC 32 94 97    >                        ld      (DELT4Lo+1),a
 610+ 9AEF                                      ZeroPitch
 610+ 9AEF AF          >                        xor     a
 610+ 9AF0 32 94 96    >                        ld      (BET2),a
 610+ 9AF3 32 95 96    >                        ld      (BET2FLIP),a
 610+ 9AF6 32 92 96    >                        ld      (JSTY),a
 610+ 9AF9 32 91 96    >                        ld      (BETA),a
 611+ 9AFC                                      ZeroRoll
 611+ 9AFC AF          >                        xor     a                              ; zero roll and climb
 611+ 9AFD 32 A4 96    >                        ld      (ALP2),a
 611+ 9B00 32 A5 96    >                        ld      (ALP2FLIP),a
 611+ 9B03 32 A0 96    >                        ld      (JSTX),a
 611+ 9B06 32 A2 96    >                        ld      (ALPHA),a
 612+ 9B09                                      ClearMissileTarget
 612+ 9B09 AF          >                        xor     a
 612+ 9B0A 3D          >                        dec     a
 612+ 9B0B 32 5A 97    >                        ld      (MissileTarget),a
 613+ 9B0E                                      ClearECM
 613+ 9B0E AF          >                        xor     a
 613+ 9B0F 32 9E 96    >                        ld      (ECMLoopA),a
 613+ 9B12 32 9F 96    >                        ld      (ECMLoopB),a
 614+ 9B15                                      ChargeEnergyAndShields
 614+ 9B15 3E FF       >                        ld      a,$FF
 614+ 9B17 32 79 98    >                        ld      (PlayerEnergy),a
 614+ 9B1A 32 77 98    >                        ld      (ForeShield),a
 614+ 9B1D 32 78 98    >                        ld      (AftShield),a
 615+ 9B20 C9                                   ret
 616+ 9B21
# file closed: ./Variables/general_variables.asm
 995  9B21
 996  9B21                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ 9B21 AF           ClearSlotCount:         xor     a
   2+ 9B22 21 0A 98                             ld      hl,UniverseSlotCount
   3+ 9B25 06 18                                ld      b, UniverseListSize * 2
   4+ 9B27 77           .fillLoop:              ld      (hl),a
   5+ 9B28 23                                   inc     hl
   6+ 9B29 10 FC                                djnz    .fillLoop
   7+ 9B2B C9                                   ret
   8+ 9B2C
   9+ 9B2C              ; Initialises all types to a count of 1 where there is an occupied universe slot
  10+ 9B2C              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  11+ 9B2C CD 21 9B     CorrectSlotCount:       call    ClearSlotCount
  12+ 9B2F 21 0A 98                             ld      hl,UniverseSlotCount
  13+ 9B32 11 FE 97                             ld      de,UniverseSlotList
  14+ 9B35 06 0C                                ld      b,UniverseListSize
  15+ 9B37 1A           .fillLoop:              ld      a,(de)
  16+ 9B38 FE FF                                cp      $FF
  17+ 9B3A 28 05                                jr      z,.SkipSlot
  18+ 9B3C 77           .CorrectSlot:           ld      (hl),a
  19+ 9B3D 23                                   inc     hl
  20+ 9B3E 36 01                                ld      (hl),1
  21+ 9B40 23                                   inc     hl
  22+ 9B41 13           .SkipSlot               inc     de
  23+ 9B42 10 F3                                djnz    .fillLoop
  24+ 9B44 C9                                   ret
  25+ 9B45
  26+ 9B45 3E FF        ClearUnivExceptSun:     ld      a,$FF
  27+ 9B47 21 FF 97                             ld      hl,UniverseSlotList + 1
  28+ 9B4A 06 0B                                ld      b, UniverseListSize - 1
  29+ 9B4C 77           .fillLoop:              ld      (hl),a
  30+ 9B4D 23                                   inc     hl
  31+ 9B4E 10 FC                                djnz    .fillLoop
  32+ 9B50 C9                                   ret
  33+ 9B51
  34+ 9B51 3E 81        SetSunSlot:             ld      a,129
  35+ 9B53 32 FE 97                             ld      (UniverseSlotList),a
  36+ 9B56 C9                                   ret
  37+ 9B57
  38+ 9B57 3E 81        SetPlanetSlot:          ld      a,129
  39+ 9B59 32 FF 97                             ld      (UniverseSlotList+1),a
  40+ 9B5C C9                                   ret
  41+ 9B5D
  42+ 9B5D              ; Wipe all items
  43+ 9B5D 3E FF        ClearUnivSlotList:      ld      a,$FF
  44+ 9B5F 21 FE 97                             ld      hl,UniverseSlotList
  45+ 9B62 06 0C                                ld      b, UniverseListSize
  46+ 9B64 77           .fillLoop:              ld      (hl),a
  47+ 9B65 23                                   inc     hl
  48+ 9B66 10 FC                                djnz    .fillLoop
  49+ 9B68 C9                                   ret
  50+ 9B69
  51+ 9B69 21 FF 97     SetSlot1ToSpaceStation: ld      hl,UniverseSlotList+1
  52+ 9B6C 36 02                                ld      (hl),ShipTypeStation
  53+ 9B6E C9                                   ret
  54+ 9B6F
  55+ 9B6F 21 FE 97     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  56+ 9B72 ED 31                                add     hl,a
  57+ 9B74 70                                   ld      (hl),b
  58+ 9B75 C9                                   ret
  59+ 9B76
  60+ 9B76              ; Clears all except slot A, used when say restarting a space station post launch
  61+ 9B76 57           ClearFreeSlotListSaveA: ld      d,a
  62+ 9B77 0E 00                                ld      c,0
  63+ 9B79 21 FE 97                             ld      hl,UniverseSlotList
  64+ 9B7C 06 0C                                ld      b, UniverseListSize
  65+ 9B7E 79           .fillLoop:              ld      a,c
  66+ 9B7F BA                                   cp      d
  67+ 9B80 28 03                                jr      z,.SkipSlot
  68+ 9B82 3E FF                                ld      a,$FF
  69+ 9B84 77                                   ld      (hl),a
  70+ 9B85 23           .SkipSlot:              inc     hl
  71+ 9B86 10 F6                                djnz    .fillLoop
  72+ 9B88 C9                                   ret
  73+ 9B89
  74+ 9B89 21 FE 97     SetSlotAOccupiedByB:    ld      hl,UniverseSlotList
  75+ 9B8C ED 31                                add     hl,a
  76+ 9B8E 78                                   ld      a,b
  77+ 9B8F 70                                   ld      (hl),b
  78+ 9B90 C9                                   ret
  79+ 9B91
  80+ 9B91 21 FE 97     FindSpaceStationSlotInC:ld      hl,UniverseSlotList
  81+ 9B94 06 0C                                ld      b,UniverseListSize
  82+ 9B96 0E 00                                ld      c,0
  83+ 9B98 7E           .SearchLoop:            ld      a,(hl)
  84+ 9B99                                      JumpIfAEqNusng ShipTypeStation, .FoundSlot
  84+ 9B99 FE 02       >                        cp     ShipTypeStation
  84+ 9B9B CA A4 9B    >                        jp      z,.FoundSlot
  85+ 9B9E 0C                                   inc     c
  86+ 9B9F 23                                   inc     hl
  87+ 9BA0 10 F6                                djnz    .SearchLoop
  88+ 9BA2                                      SetCarryFlag
  88+ 9BA2 37          >                        scf
  89+ 9BA3 C9                                   ret
  90+ 9BA4              .FoundSlot:             ClearCarryFlag
  90+ 9BA4 B7          >                        or a
  91+ 9BA5 C9                                   ret
  92+ 9BA6
  93+ 9BA6 21 FE 97     GetTypeAtSlotA:         ld      hl,UniverseSlotList
  94+ 9BA9 ED 31                                add     hl,a
  95+ 9BAB 7E                                   ld      a,(hl)
  96+ 9BAC C9                                   ret
  97+ 9BAD
  98+ 9BAD 21 FF 97     IsPlanetOrSpaceStation: ld      hl,UniverseSlotList+1
  99+ 9BB0 7E                                   ld      a,(hl)
 100+ 9BB1 C9                                   ret
 101+ 9BB2
 102+ 9BB2 21 FE 97     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 103+ 9BB5 06 0C                                ld      b, UniverseListSize
 104+ 9BB7 0E 00                                ld      c, 0
 105+ 9BB9 7E           .SearchLoop:            ld      a,(hl)
 106+ 9BBA                                      JumpIfAEqNusng $FF, .FoundSlot
 106+ 9BBA FE FF       >                        cp     $FF
 106+ 9BBC CA C5 9B    >                        jp      z,.FoundSlot
 107+ 9BBF 0C                                   inc     c
 108+ 9BC0 23                                   inc     hl
 109+ 9BC1 10 F6                                djnz    .SearchLoop
 110+ 9BC3                                      SetCarryFlag
 110+ 9BC3 37          >                        scf
 111+ 9BC4 C9                                   ret
 112+ 9BC5              .FoundSlot:             ClearCarryFlag
 112+ 9BC5 B7          >                        or a
 113+ 9BC6 C9                                   ret
 114+ 9BC7
 115+ 9BC7 CD B2 9B     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 116+ 9BCA 79                                   ld      a,c
 117+ 9BCB C9                                   ret
 118+ 9BCC
# file closed: ./Variables/UniverseSlotRoutines.asm
 997  9BCC
 998  9BCC                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 9BCC 00           AutoDocking				DB	0				; $033F
   2+ 9BCD 00           PlayerECM				DB	0				; $0340
   3+ 9BCE 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 9BCF 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 9BD0 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 9BD4 19           Fuel					DB	25				; 0365  QQ14
   7+ 9BD5 05 02 03 01  LaserList				DB	5,2,3,1			; View Lasers $0368 to $036B
   8+ 9BD9 46           CargoBaySize			DB	70				; 036E
   9+ 9BDA 00           CargoRunningLoad        DB  0
  10+ 9BDB 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  10+ 9BDF 00 00 00 00
  10+ 9BE3 00 00 00 00
  10+ 9BE7 00 00 00 00
  11+ 9BEB              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  12+ 9BEB              SlaveCargoTonnes		equ CargoTonnes+3
  13+ 9BEB              NarcoticsCargoTonnes	equ CargoTonnes+6
  14+ 9BEB              FirearmsCargoTonnes		equ CargoTonnes+10
  15+ 9BEB              ; For each view laser a localised copy of the stats
  16+ 9BEB              ; TODO - need to add code to maintain on load/save/equipment transactions
  17+ 9BEB 00 00 00 00  LaserType               DS  4               ; quick reference to laser type
  18+ 9BEF 00 00 00 00  LaserDamagedFlag        DS  4               ; probabiliy out of 255 that it will no fire, 0 = good, 255 = will not fire
  19+ 9BF3 00 00 00 00  LaserPulsePause         DS  4               ; time before next pulse - 0 = beam
  20+ 9BF7 00 00 00 00  LaserPulseDuration      DS  4               ; time laser is on per shot
  21+ 9BFB 00 00 00 00  LaserDamageOutput       DS  4               ; amount of damage for a laser hit
  22+ 9BFF 00 00 00 00  LaserEnergyDrain        DS  4               ; amount of energy drained by cycle
  23+ 9C03 00 00 00 00  LaserHeat               DS  4               ; amount of heat generated
  24+ 9C07 00 00 00 00  LaserDurability         DS  4               ; probabability out of 255 that a hit on unshielded will add random amount of damage
  25+ 9C0B 00 00 00 00  LaserDurabilityAmount   DS  4               ; max amount of damagage can be sustained in one damage hit
  26+ 9C0F
  27+ 9C0F
  28+ 9C0F              QQ20                    equ CargoTonnes
  29+ 9C0F 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  30+ 9C29              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  31+ 9C29              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  32+ 9C29              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  33+ 9C29              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  34+ 9C29              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  35+ 9C29              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  36+ 9C29 01           FuelScoopsBarrelStatus	DB	1				; 0381
  37+ 9C2A
# file closed: ./Variables/EquipmentVariables.asm
 999  9C2A
1000  9C2A                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 9C2A              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 9C2A              doRND2:
   3+ 9C2A A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 9C2B              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 9C2B              ; "doRandom, Random Seed update, new value in A & B)"
   6+ 9C2B 3A 7E 96     doRND:                  ld		a,(RandomSeed)					; Get Seed 0
   7+ 9C2E CB 17                                rl		a								; Rotate L including carry
   8+ 9C30 4F                                   ld		c,a								; c =  double lo
   9+ 9C31 21 80 96     .AddSeed2:              ld		hl,RandomSeed2
  10+ 9C34 8E                                   adc		a,(hl)							; RAND+2
  11+ 9C35 32 7E 96     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  12+ 9C38 08           .SaveBtoSeed2:          ex		af,af'
  13+ 9C39 79                                   ld		a,c
  14+ 9C3A 32 80 96                             ld		(RandomSeed2),a
  15+ 9C3D 08                                   ex		af,af'
  16+ 9C3E 3A 7F 96                             ld		a,(RandomSeed1)
  17+ 9C41 4F                                   ld		c,a								; C = Seed1
  18+ 9C42 21 81 96     .AddSeed3:              ld		hl,RandomSeed3
  19+ 9C45 8E                                   adc		a,(hl)
  20+ 9C46 32 7F 96                             ld		(RandomSeed1),a
  21+ 9C49 08                                   ex		af,af'
  22+ 9C4A 79                                   ld		a,c
  23+ 9C4B 32 81 96                             ld		(RandomSeed3),a
  24+ 9C4E 08                                   ex		af,af'
  25+ 9C4F C9                                   ret
  26+ 9C50
  27+ 9C50              fillHeapRandom4Points:                      ; counter Y, 4 rnd bytes to edge heap
  28+ 9C50 06 04        	ld		b,4
  29+ 9C52 21 04 C2     	ld		hl,UbnkLineArray				; line data
  30+ 9C55              FillRandom:                                 ; Writes random bytes hl = start address, b = nbr bytes to fill
  31+ 9C55              EE55:
  32+ 9C55 CD 2B 9C     	call	doRND							; get random
  33+ 9C58 77           	ld		(hl),a							; (XX19),Y
  34+ 9C59 23           	inc		hl
  35+ 9C5A 10 F9        	djnz	FillRandom						; 3to6 = random bytes for seed
  36+ 9C5C C9               ret
  37+ 9C5D
# file closed: ./Variables/random_number.asm
1001  9C5D                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 9C5D 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 9C61 58 59 53 45
   1+ 9C65 45 44
   2+ 9C67 21 A2 98     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 9C6A 11 82 97                             ld		de,SystemSeed
   4+ 9C6D ED A0        copy_seed:		        ldi
   5+ 9C6F ED A0                                ldi
   6+ 9C71 ED A0                                ldi
   7+ 9C73 ED A0                                ldi
   8+ 9C75 ED A0                                ldi
   9+ 9C77 ED A0                                ldi
  10+ 9C79 C9                                   ret
  11+ 9C7A
  12+ 9C7A 21 82 97     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 9C7D 11 A2 98                             ld		de,GalaxySeeds
  14+ 9C80 18 EB                                jr		copy_seed
  15+ 9C82
  16+ 9C82 21 A2 98     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 9C85 11 96 98                             ld		de,WorkingSeeds
  18+ 9C88 18 E3                                jr		copy_seed
  19+ 9C8A
  20+ 9C8A 21 96 98     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 9C8D 11 A2 98                             ld		de,GalaxySeeds
  22+ 9C90 18 DB                                jr		copy_seed
  23+ 9C92
  24+ 9C92 21 96 98     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 9C95 11 82 97                             ld		de,SystemSeed
  26+ 9C98 18 D3                                jr		copy_seed
  27+ 9C9A
  28+ 9C9A 21 82 97     copy_system_to_working: ld		hl,SystemSeed
  29+ 9C9D 11 96 98                             ld		de,WorkingSeeds
  30+ 9CA0 18 CB                                jr		copy_seed
  31+ 9CA2
  32+ 9CA2              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 9CA2 CD A5 9C     		call	.NextStep					; This logic means we hard code x4
  34+ 9CA5              .NextStep:
  35+ 9CA5 CD A8 9C     		call	process_seed				; This logic means we hard code x2
  36+ 9CA8              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 9CA8 3A 82 97     		ld		a,(SystemSeed)				; QQ15
  38+ 9CAB B7           		or		a							; clear carry flag
  39+ 9CAC 21 84 97     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 9CAF 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 9CB0 47           		ld		b,a							; partial sum lo
  42+ 9CB1 3A 83 97     		ld		a,(SystemSeed+1)
  43+ 9CB4 21 85 97     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 9CB7 8E           		adc		a,(hl)						; note add with carry
  45+ 9CB8 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 9CB9 3A 84 97     		ld		a,(SystemSeed+2)
  47+ 9CBC 32 82 97     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 9CBF 3A 85 97     		ld		a,(SystemSeed+3)
  49+ 9CC2 32 83 97     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 9CC5 3A 87 97     		ld		a,(SystemSeed+5)
  51+ 9CC8 32 85 97     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 9CCB 3A 86 97     		ld		a,(SystemSeed+4)
  53+ 9CCE 32 84 97     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 9CD1 B7           		or		a
  55+ 9CD2 78           		ld		a,b
  56+ 9CD3 21 84 97     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 9CD6 86           		add	    a,(hl)
  58+ 9CD7 32 86 97     		ld		(SystemSeed+4),a
  59+ 9CDA 79           		ld		a,c
  60+ 9CDB 21 85 97     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 9CDE 8E           		adc		a,(hl)
  62+ 9CDF 32 87 97     		ld		(SystemSeed+5),a
  63+ 9CE2 C9           		ret
  64+ 9CE3
  65+ 9CE3              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 9CE3 CD E6 9C     		call	.NextStep					; This logic means we hard code x4
  67+ 9CE6              .NextStep:
  68+ 9CE6 CD E9 9C     		call	working_seed				; This logic means we hard code x2
  69+ 9CE9              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 9CE9              ; x = a + c
  71+ 9CE9 3A 96 98     		ld		a,(WorkingSeeds)			; QQ15
  72+ 9CEC B7           		or		a							; clear carry flag
  73+ 9CED 21 98 98     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 9CF0 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 9CF1 47           		ld		b,a							; partial sum lo [x]
  76+ 9CF2              ; y = b + d	+ carry
  77+ 9CF2 3A 97 98     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 9CF5 21 99 98     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 9CF8 8E           		adc		a,(hl)						; note add with carry
  80+ 9CF9 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 9CFA 3A 98 98     		ld		a,(WorkingSeeds+2)
  82+ 9CFD 32 96 98     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 9D00 3A 99 98     		ld		a,(WorkingSeeds+3)
  84+ 9D03 32 97 98     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 9D06 3A 9B 98     		ld		a,(WorkingSeeds+5)
  86+ 9D09 32 99 98     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 9D0C 3A 9A 98     		ld		a,(WorkingSeeds+4)
  88+ 9D0F 32 98 98     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 9D12 B7           		or		a
  90+ 9D13 78           		ld		a,b
  91+ 9D14 21 98 98     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 9D17 86           		add	    a,(hl)
  93+ 9D18 32 9A 98     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 9D1B 79           		ld		a,c
  95+ 9D1C 21 99 98     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 9D1F 8E           		adc		a,(hl)
  97+ 9D20 32 9B 98     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 9D23 C9           		ret
  99+ 9D24
 100+ 9D24 32           working_distX	DB 50
 101+ 9D25 32           working_distY	DB 50
 102+ 9D26 00           current_distY	DB 0
 103+ 9D27
 104+ 9D27 AF           find_present_system:    xor		a
 105+ 9D28 32 9B 97                             ld		(XSAV),a
 106+ 9D2B 3A 83 97     .CounterLoop:           ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 107+ 9D2E 4F                                   ld		c,a
 108+ 9D2F 3A A9 98     .calcLocaldy:           ld		a,(PresentSystemY)
 109+ 9D32 47                                   ld		b,a								; so b holds Y ccord
 110+ 9D33 79                                   ld		a,c
 111+ 9D34 90                                   sub		b
 112+ 9D35 CB 7F                                bit		7,a
 113+ 9D37 28 02                                jr		z,.positivedy
 114+ 9D39 ED 44        .negativedy:            neg
 115+ 9D3B 32 26 9D     .positivedy:            ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 116+ 9D3E ED 5B 24 9D                          ld		de,(working_distX)
 117+ 9D42 BA                                   cp		d
 118+ 9D43 30 24                                jr		nc,.toofar
 119+ 9D45 3A 85 97     .calcLocaldx:           ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 120+ 9D48 4F                                   ld		c,a
 121+ 9D49 3A A8 98                             ld		a,(PresentSystemX)
 122+ 9D4C 47                                   ld		b,a								; so b holds Y ccord
 123+ 9D4D 79                                   ld		a,c
 124+ 9D4E 90                                   sub		b
 125+ 9D4F CB 7F                                bit		7,a
 126+ 9D51 28 02                                jr		z,.positivedx
 127+ 9D53 ED 44        .negativedx:            neg
 128+ 9D55 4F           .positivedx:            ld		c,a
 129+ 9D56 BB                                   cp		e
 130+ 9D57 30 10                                jr		nc,.toofar
 131+ 9D59 3A 26 9D     .Nearer:			    ld		a,(current_distY) 				; we have a closer system
 132+ 9D5C 47                                   ld		b,a								; we have c to recall Y into b
 133+ 9D5D ED 43 24 9D                          ld		(working_distX),bc
 134+ 9D61 C5                                   push	bc
 135+ 9D62 CD 9A 9C                             call 	copy_system_to_working
 136+ 9D65 C1                                   pop		bc
 137+ 9D66 78                                   ld		a,b								;
 138+ 9D67 B1                                   or		c								;
 139+ 9D68 C8                                   ret		z								; if we have distance 0 then bang on
 140+ 9D69 CD A2 9C     .toofar:                call	next_system_seed
 141+ 9D6C 3A 9B 97                             ld		a,(XSAV)
 142+ 9D6F 3D                                   dec		a
 143+ 9D70 FE 00                                cp		0
 144+ 9D72 C8                                   ret		z
 145+ 9D73 32 9B 97                             ld		(XSAV),a
 146+ 9D76 18 B3                                jr		.CounterLoop
 147+ 9D78
 148+ 9D78              get_planet_data_working_seed:
 149+ 9D78 3A 97 98     		ld		a, (WorkingSeeds+1)
 150+ 9D7B E6 07        		and		7
 151+ 9D7D 32 83 98     		ld		(DisplayEcononmy),a
 152+ 9D80 3A 98 98     		ld		a, (WorkingSeeds+2)
 153+ 9D83 CB 3F        		srl	a
 154+ 9D85 CB 3F        		srl	a
 155+ 9D87 CB 3F        		srl	a
 156+ 9D89 CB 3F        		srl	a								; c/8
 157+ 9D8B E6 07        		and		7
 158+ 9D8D 32 84 98     		ld		(DisplayGovernment),a
 159+ 9D90 CB 3F        		srl	a
 160+ 9D92 FE 00        		cp		0
 161+ 9D94 20 08        		jr		nz,.CanBeRich
 162+ 9D96              .Fedual:
 163+ 9D96 3A 83 98     		ld		a,(DisplayEcononmy)
 164+ 9D99 F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 165+ 9D9B 32 83 98     		ld		(DisplayEcononmy),a
 166+ 9D9E              .CanBeRich:
 167+ 9D9E 3A 83 98     		ld		a,(DisplayEcononmy)
 168+ 9DA1 EE 07        		xor		7							; flip economy so Rich is now 7
 169+ 9DA3 32 85 98     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 170+ 9DA6 47           		ld		b,a
 171+ 9DA7 3A 99 98     		ld		a,(WorkingSeeds+3)
 172+ 9DAA E6 03        		and		3
 173+ 9DAC 80           		add		a,b
 174+ 9DAD 32 85 98     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 175+ 9DB0 3A 84 98     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 176+ 9DB3 CB 3F        		srl		a 							; gov/2
 177+ 9DB5 47           		ld		b,a
 178+ 9DB6 3A 85 98     		ld		a,(DisplayTekLevel)
 179+ 9DB9 80           		add		a,b
 180+ 9DBA 32 85 98     		ld		(DisplayTekLevel),a			; Tek += gov /2
 181+ 9DBD CB 27        		sla		a
 182+ 9DBF CB 27        		sla		a							; Onto Population (TL-1)*= 4
 183+ 9DC1 47           		ld		b,a
 184+ 9DC2 3A 83 98     		ld		a,(DisplayEcononmy)
 185+ 9DC5 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 186+ 9DC6 47           		ld		b,a
 187+ 9DC7 3A 84 98     		ld		a,(DisplayGovernment)
 188+ 9DCA 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 189+ 9DCB 32 86 98     		ld		(DisplayPopulation),a
 190+ 9DCE 3A 83 98     		ld		a,(DisplayEcononmy)
 191+ 9DD1 EE 07        		xor		7							; Onto productivity
 192+ 9DD3 C6 03        		add		3							;  (Flipped eco +3)
 193+ 9DD5 57           		ld		d,a
 194+ 9DD6 3A 84 98     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 195+ 9DD9 C6 04        		add		4
 196+ 9DDB 5F           		ld		e,a
 197+ 9DDC ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 198+ 9DDE 3A 86 98     		ld		a,(DisplayPopulation)		; then we use d for radius
 199+ 9DE1 57           		ld		d,a
 200+ 9DE2 ED 30        		mul
 201+ 9DE4 CB 23        		sla		e
 202+ 9DE6 CB 1A        		rr		d
 203+ 9DE8 CB 23        		sla		e
 204+ 9DEA CB 1A        		rr		d
 205+ 9DEC CB 23        		sla		e
 206+ 9DEE CB 1A        		rr		d							; de * 8
 207+ 9DF0 ED 53 88 98  		ld		(DisplayProductivity),de
 208+ 9DF4              .DoRadius:
 209+ 9DF4 3A 99 98     		ld		a,(WorkingSeeds+3)
 210+ 9DF7 4F           		ld		c,a
 211+ 9DF8 3A 9B 98     		ld		a,(WorkingSeeds+5)
 212+ 9DFB E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 213+ 9DFD C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 214+ 9DFF 47           		ld		b,a							;
 215+ 9E00 ED 43 8C 98  		ld		(DisplayRadius),bc
 216+ 9E04 C9           		ret
 217+ 9E05
# file closed: ./Variables/galaxy_seed.asm
1002  9E05                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 9E05 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 9E09 65 00
   2+ 9E0B 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 9E0F 00
   3+ 9E10 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 9E14 74 61 72 79
   3+ 9E18 00
   4+ 9E19 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 9E1D 6E 67 00
   5+ 9E20 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 9E24 6F 6D 00
   6+ 9E27
   7+ 9E27 05 9E 0B 9E  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 9E2B 10 9E 19 9E
   7+ 9E2F 20 9E
   8+ 9E31              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 9E31
  10+ 9E31 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 9E35 65 64 00
  11+ 9E38 47 72 65 65  ConditionName2		DB "Green",0
  11+ 9E3C 6E 00
  12+ 9E3E 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 9E42 6F 77 00
  13+ 9E45 52 65 64 00  ConditionName4		DB "Red",0
  14+ 9E49
  15+ 9E49 31 9E 38 9E  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 9E4D 3E 9E 45 9E
  16+ 9E51              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 9E51
  18+ 9E51 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 9E55 53 45 49 54
  18+ 9E59 49 4C 45 54
  18+ 9E5D 53 54 4F 4E
  18+ 9E61 4C 4F 4E 55
  18+ 9E65 54 48 4E 4F
  18+ 9E69 41 4C 4C 45
  18+ 9E6D 58 45 47 45
  18+ 9E71 5A 41 43 45
  18+ 9E75 42 49 53 4F
  18+ 9E79 55 53 45 53
  18+ 9E7D 41 52 4D 41
  18+ 9E81 49 4E 44 49
  18+ 9E85 52 45 41 3F
  18+ 9E89 45 52 41 54
  18+ 9E8D 45 4E 42 45
  18+ 9E91 52 41 4C 41
  18+ 9E95 56 45 54 49
  18+ 9E99 45 44 4F 52
  18+ 9E9D 51 55 41 4E
  18+ 9EA1 54 45 49 53
  18+ 9EA5 52 49 4F 4E
  18+ 9EA9 00
  19+ 9EAA
  20+ 9EAA 00 00 08 00  RankingTable		DW	$0000,$0008,$0010,$0020,$0040,$0080,$0200,$0A00,$1900,$4900,$FFFF
  20+ 9EAE 10 00 20 00
  20+ 9EB2 40 00 80 00
  20+ 9EB6 00 02 00 0A
  20+ 9EBA 00 19 00 49
  20+ 9EBE FF FF
  21+ 9EC0
  22+ 9EC0 48 61 72 6D  RankingName1		DB 	"Harmless",0
  22+ 9EC4 6C 65 73 73
  22+ 9EC8 00
  23+ 9EC9 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  23+ 9ECD 6C 79 20 48
  23+ 9ED1 61 72 6D 6C
  23+ 9ED5 65 73 73 00
  24+ 9ED9 50 6F 6F 72  RankingName3		DB 	"Poor",0
  24+ 9EDD 00
  25+ 9EDE 41 76 65 72  RankingName4		DB 	"Average",0
  25+ 9EE2 61 67 65 00
  26+ 9EE6 41 62 6F 76  RankingName5		DB 	"Above Average",0
  26+ 9EEA 65 20 41 76
  26+ 9EEE 65 72 61 67
  26+ 9EF2 65 00
  27+ 9EF4 43 6F 6D 70  RankingName6		DB 	"Competent",0
  27+ 9EF8 65 74 65 6E
  27+ 9EFC 74 00
  28+ 9EFE 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  28+ 9F02 65 72 6F 75
  28+ 9F06 73 00
  29+ 9F08 44 65 61 64  RankingName8		DB 	"Deadly",0
  29+ 9F0C 6C 79 00
  30+ 9F0F 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  30+ 9F13 20 45 20 4C
  30+ 9F17 20 49 20 54
  30+ 9F1B 20 45 20 2D
  30+ 9F1F 2D 2D 00
  31+ 9F22 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  31+ 9F26 6C 6F 62 73
  31+ 9F2A 67 6F 64 00
  32+ 9F2E 4E 75 74 74  RankingName11		DB 	"Nutter",0
  32+ 9F32 65 72 00
  33+ 9F35
  34+ 9F35 C0 9E C9 9E  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  34+ 9F39 D9 9E DE 9E
  34+ 9F3D E6 9E F4 9E
  34+ 9F41 FE 9E 08 9F
  34+ 9F45 0F 9F 22 9F
  34+ 9F49 2E 9F
  35+ 9F4B              RankingNameIdxLen EQU $ - RankingNameIdx
  36+ 9F4B
  37+ 9F4B
  38+ 9F4B              getTableText:
  39+ 9F4B              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  40+ 9F4B              ; ">Note for ranking first 2 bytes are target rank"
  41+ 9F4B D5           	push	de								; save DE as we will likley need it in caller
  42+ 9F4C ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  43+ 9F4E ED 31        	add		hl,a
  44+ 9F50 5E           	ld		e,(hl)
  45+ 9F51 23           	inc		hl
  46+ 9F52 56           	ld		d,(hl)							; de = indexed address
  47+ 9F53 EB           	ex		de,hl							; flip it to hl
  48+ 9F54 D1           	pop		de								; retrieve de
  49+ 9F55 C9           	ret										; return with hl as start entry
  50+ 9F56
  51+ 9F56
  52+ 9F56              ;               CF      ZF      Result
  53+ 9F56              ;               -----------------------------------
  54+ 9F56              ;               0       0       HL > DE
  55+ 9F56              ;               0       1       HL == DE
  56+ 9F56              ;               1       0       HL < DE
  57+ 9F56              ;               1       1       Impossible
  58+ 9F56              getRankIndex:
  59+ 9F56              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  60+ 9F56              ; ">Note for ranking first 2 bytes are target rank"
  61+ 9F56 7A           	ld		a,d
  62+ 9F57 B3           	or		e
  63+ 9F58 FE 00        	cp		0
  64+ 9F5A C8           	ret		z								; quicks skip for 0 kills
  65+ 9F5B AF           	xor 	a
  66+ 9F5C 21 AA 9E     	ld		hl,RankingTable
  67+ 9F5F              .testLoop:
  68+ 9F5F 4E           	ld		c,(hl)
  69+ 9F60 23           	inc		hl
  70+ 9F61 46           	ld		b,(hl)							; bc = ranking
  71+ 9F62 E5           	push	hl
  72+ 9F63 60           	ld		h,b
  73+ 9F64 69           	ld		l,c
  74+ 9F65 CD 43 AB     	call	compare16HLDE
  75+ 9F68 38 06        	jr		c,.HLLTDE
  76+ 9F6A              .HLGTEDE									; Found the correct rank
  77+ 9F6A E1           	pop		hl
  78+ 9F6B 23           	inc		hl								; move to next value
  79+ 9F6C 23           	inc		hl
  80+ 9F6D 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  81+ 9F6E 18 EF        	jr		.testLoop
  82+ 9F70              .HLLTDE:									; HL < Kills so found correct rank
  83+ 9F70 E1           	pop		hl
  84+ 9F71 C9           	ret
  85+ 9F72
# file closed: ./Tables/text_tables.asm
1003  9F72                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ 9F72 58 00        WordDummy					DB  "X",0
   2+ 9F74 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   2+ 9F78 74 00
   3+ 9F7A 52 69 67 68  WordRight					DB	"Right",0              ;2
   3+ 9F7E 74 00
   4+ 9F80 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   4+ 9F84 00
   5+ 9F85 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   5+ 9F89 00
   6+ 9F8A 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   6+ 9F8E 65 00
   7+ 9F90 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   7+ 9F94 70 65 00
   8+ 9F97 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
   9+ 9F9B 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
   9+ 9F9F 6F 00
  10+ 9FA1 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  11+ 9FA5 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  11+ 9FA9 00
  12+ 9FAA 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  12+ 9FAE 70 73 00
  13+ 9FB1 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  13+ 9FB5 4D 2E 00
  14+ 9FB8 53 79 73 74  WordSystem          		DB  "System",0             ;13
  14+ 9FBC 65 6D 00
  15+ 9FBF 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  15+ 9FC3 67 79 00
  16+ 9FC6 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  16+ 9FCA 00
  17+ 9FCB 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  17+ 9FCF 72 00
  18+ 9FD1 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  18+ 9FD5 65 00
  19+ 9FD7 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  19+ 9FDB 00
  20+ 9FDC 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  20+ 9FE0 61 72 79 00
  21+ 9FE4 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  21+ 9FE8 6E 67 00
  22+ 9FEB 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  22+ 9FEF 6F 6D 00
  23+ 9FF2 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  23+ 9FF6 00
  24+ 9FF7 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  24+ 9FFB 6C 64 00
  25+ 9FFE 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  25+ A002 69 6E 67 00
  26+ A006 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  26+ A00A 75 74 65 72
  26+ A00E 73 00
  27+ A010 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  27+ A014 72 73 70 61
  27+ A018 63 65 00
  28+ A01B 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  28+ A01F 63 74 69 63
  28+ A023 00
  29+ A024 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  29+ A028 61 00
  30+ A02A 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  30+ A02E 6E 00
  31+ A030 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  31+ A034 6E 64 65 72
  31+ A038 00
  32+ A039 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  32+ A03D 74 69 76 65
  32+ A041 00
  33+ A042 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  33+ A046 00
  34+ A047 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  34+ A04B 69 6C 65 73
  34+ A04F 00
  35+ A050 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  35+ A054 6F 61 63 74
  35+ A058 69 76 65 73
  35+ A05C 00
  36+ A05D 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  36+ A061 65 73 00
  37+ A064 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  37+ A068 6F 72 2F 57
  37+ A06C 69 6E 65 73
  37+ A070 00
  38+ A071 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  38+ A075 72 69 65 73
  38+ A079 00
  39+ A07A 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  39+ A07E 6F 74 69 63
  39+ A082 73 00
  40+ A084 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  40+ A088 69 6E 65 72
  40+ A08C 79 00
  41+ A08E 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  41+ A092 79 73 00
  42+ A095 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  42+ A099 61 72 6D 73
  42+ A09D 00
  43+ A09E 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  43+ A0A2 00
  44+ A0A3 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  44+ A0A7 72 61 6C 73
  44+ A0AB 00
  45+ A0AC 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  45+ A0B0 00
  46+ A0B1 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  46+ A0B5 69 6E 75 6D
  46+ A0B9 00
  47+ A0BA 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  47+ A0BE 53 74 6F 6E
  47+ A0C2 65 73 00
  48+ A0C5 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  48+ A0C9 6E 20 49 74
  48+ A0CD 65 6D 73 00
  49+ A0D1 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  49+ A0D5 65 73 00
  50+ A0D8 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  50+ A0DC 67 72 61 6D
  50+ A0E0 73 00
  51+ A0E2 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  51+ A0E6 73 00
  52+ A0E8 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  52+ A0EC 74 00
  53+ A0EE 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  53+ A0F2 65 00
  54+ A0F4 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  54+ A0F8 74 00
  55+ A0FA 44 61 74 61  WordData					DB	"Data",0			   ;54
  55+ A0FE 00
  56+ A0FF 4F 6E 00     WordOn						DB  "On",0                 ;55
  57+ A102 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  57+ A106 61 6E 63 65
  57+ A10A 00
  58+ A10B 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  58+ A10F 6F 6D 79 00
  59+ A113 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  59+ A117 72 6E 6D 65
  59+ A11B 6E 74 00
  60+ A11E 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  60+ A122 4C 65 76 65
  60+ A126 6C 00
  61+ A128 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  61+ A12C 6C 61 74 69
  61+ A130 6F 6E 00
  62+ A133 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  62+ A137 69 6F 6E 00
  63+ A13B 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  63+ A13F 69 6F 6E 00
  64+ A143 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  64+ A147 73 00
  65+ A149 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  65+ A14D 75 63 74 69
  65+ A151 76 69 74 79
  65+ A155 00
  66+ A156 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  66+ A15A 61 67 65 00
  67+ A15E 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  67+ A162 75 73 00
  68+ A165 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  69+ A168 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  69+ A16C 00
  70+ A16D 52 69 63 68  WordRich					DB  "Rich",0               ;69
  70+ A171 00
  71+ A172 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  72+ A176 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  72+ A17A 6C 79 00
  73+ A17D 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  73+ A181 00
  74+ A182 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  74+ A186 73 74 72 69
  74+ A18A 61 6C 00
  75+ A18D 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  75+ A191 63 75 6C 74
  75+ A195 75 72 61 6C
  75+ A199 00
  76+ A19A 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  76+ A19E 63 68 79 00
  77+ A1A2 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  77+ A1A6 61 6C 00
  78+ A1A9 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  78+ A1AD 69 2D 47 6F
  78+ A1B1 76 65 72 6E
  78+ A1B5 6D 65 6E 74
  78+ A1B9 00
  79+ A1BA 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  79+ A1BE 61 74 6F 72
  79+ A1C2 73 68 69 70
  79+ A1C6 00
  80+ A1C7 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  80+ A1CB 75 6E 69 73
  80+ A1CF 74 00
  81+ A1D1 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  81+ A1D5 65 64 65 72
  81+ A1D9 61 63 79 00
  82+ A1DD 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  82+ A1E1 63 72 61 63
  82+ A1E5 79 00
  83+ A1E7 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  83+ A1EB 6F 72 61 74
  83+ A1EF 65 20 53 74
  83+ A1F3 61 74 65 00
  84+ A1F7 53 74 61 74  WordState 					DB  "State",0              ;83
  84+ A1FB 65 00
  85+ A1FD 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  85+ A201 74 00
  86+ A203 59 65 61 72  WordYears 					DB  "Years",0              ;85
  86+ A207 73 00
  87+ A209 30 00        Word0						DB  "0",0				   ;86
  88+ A20B 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  88+ A20F 65 74 00
  89+ A212 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  89+ A216 65 73 00
  90+ A219 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  90+ A21D 75 63 74 00
  91+ A221 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  92+ A225 50 72 69 63  WordPrice					DB  "Price",0              ;91
  92+ A229 65 00
  93+ A22B 46 6F 72 00  WordFor                     DB  "For",0                ;92
  94+ A22F 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  94+ A233 00
  95+ A234 74 00        Wordt						DB  "t",0                  ;94
  96+ A236 6B 67 00     Wordkg						DB  "kg",0                 ;95
  97+ A239 67 00        Wordg						DB  "g",0                  ;96
  98+ A23B 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  98+ A23F 69 74 69 74
  98+ A243 79 00
  99+ A245 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 100+ A249 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 100+ A24D 6B 00
 101+ A24F 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 101+ A253 70 00
 102+ A255 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 102+ A259 00
 103+ A25A 4D 69 73 73  WordMissile                 DB  "Missile",0            ;102
 103+ A25E 69 6C 65 00
 104+ A262 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 104+ A266 72 64 72 69
 104+ A26A 76 65 00
 105+ A26D 4D 69 6C 69  WordMilitary                DB  "Military",0
 105+ A271 74 61 72 79
 105+ A275 00
 106+ A276
 107+ A276 72 9F 74 9F  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 107+ A27A 7A 9F 80 9F
 108+ A27E 85 9F 8A 9F  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 108+ A282 90 9F 97 9F
 109+ A286 9B 9F A1 9F  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 109+ A28A A5 9F AA 9F
 110+ A28E B1 9F B8 9F  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 110+ A292 BF 9F C6 9F
 111+ A296 CB 9F D1 9F  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 111+ A29A D7 9F DC 9F
 112+ A29E E4 9F EB 9F  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 112+ A2A2 F2 9F F7 9F
 113+ A2A6 FE 9F 06 A0  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 113+ A2AA 10 A0 1B A0
 114+ A2AE 24 A0 2A A0  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 114+ A2B2 30 A0 39 A0
 115+ A2B6 42 A0 47 A0  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 115+ A2BA 50 A0 5D A0
 116+ A2BE 64 A0 71 A0  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 116+ A2C2 7A A0 84 A0
 117+ A2C6 8E A0 95 A0  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 117+ A2CA 9E A0 A3 A0
 118+ A2CE AC A0 B1 A0  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 118+ A2D2 BA A0 C5 A0
 119+ A2D6 D1 A0 D8 A0  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 119+ A2DA E2 A0 E8 A0
 120+ A2DE EE A0 F4 A0  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 120+ A2E2 FA A0 FF A0
 121+ A2E6 02 A1 0B A1  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 121+ A2EA 13 A1 1E A1
 122+ A2EE 28 A1 33 A1  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 122+ A2F2 3B A1 43 A1
 123+ A2F6 49 A1 56 A1  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 123+ A2FA 5E A1 65 A1
 124+ A2FE 68 A1        					DW  WordMCR																	;68
 125+ A300 6D A1 72 A1  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 125+ A304 76 A1 7D A1
 126+ A308 82 A1 8D A1                      DW  WordIndustrial,     WordAgricultural									;73
 127+ A30C 9A A1 A2 A1  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 127+ A310 A9 A1 BA A1
 128+ A314 C7 A1 D1 A1                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 128+ A318 DD A1 E7 A1
 129+ A31C F7 A1 FD A1  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 129+ A320 03 A2 09 A2
 130+ A324 0B A2 12 A2  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 130+ A328 19 A2 21 A2
 131+ A32C 25 A2 2B A2                      DW  WordPrice,          WordFor,          WordSale                          ;91
 131+ A330 2F A2
 132+ A332 34 A2 36 A2  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 132+ A336 39 A2
 133+ A338 3B A2 45 A2  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 133+ A33C 49 A2 4F A2
 134+ A340 55 A2 5A A2                      DW  WordShip,           WordMissile       ; 101
 135+ A344
 136+ A344              ; Phrases
 137+ A344 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 138+ A348 06 07 00     TextEscapePod				DB	6,7,0            ;1
 139+ A34B 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 140+ A34E 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 141+ A351 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 142+ A354 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 143+ A357 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 144+ A35A 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 145+ A35D 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 146+ A361 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 147+ A365 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 148+ A369 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 149+ A36D 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 150+ A371 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 151+ A374 36 37 00     TextDataOn					DB	54,55,0          ;14
 152+ A377 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 153+ A37A 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 154+ A37D 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 155+ A380 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 156+ A383 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 157+ A386 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 158+ A389 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 159+ A38C 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 160+ A38F 54 55 00     TextLightYears				DB  84,85,0			 ;23
 161+ A392 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 162+ A396 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 163+ A399 64 65        TextEquipShip               DB  100,101          ;26
 164+ A39B
 165+ A39B 00           TextDummy					DB  0
 166+ A39C
 167+ A39C 44 A3 48 A3  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 167+ A3A0 4B A3
 168+ A3A2 4E A3 51 A3  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 168+ A3A6 54 A3
 169+ A3A8 57 A3 5A A3  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 170+ A3AC 5D A3 61 A3  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 170+ A3B0 65 A3 69 A3
 171+ A3B4 6D A3 71 A3  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 171+ A3B8 74 A3
 172+ A3BA 77 A3 7A A3  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 172+ A3BE 80 A3 7D A3
 172+ A3C2 89 A3 83 A3
 172+ A3C6 86 A3 8C A3
 173+ A3CA 8F A3        					DW  TextLightYears		                                            ; 21 23
 174+ A3CC 92 A3 96 A3  					DW  Text0LightYears, TextMarketPrices
 175+ A3D0 9B A3        					DW  TextDummy;  25
 176+ A3D2 00 00 00...  TextBuffer			DS	33
 177+ A3F3
 178+ A3F3              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 179+ A3F3              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 180+ A3F3
 181+ A3F3              CapitaliseString:
 182+ A3F3              ; ">CapitaliseString hl = address"
 183+ A3F3              .CapLoop:
 184+ A3F3 23           	inc		hl
 185+ A3F4 7E           	ld		a,(hl)
 186+ A3F5 FE 00        	cp		0
 187+ A3F7 C8           	ret		z
 188+ A3F8 FE 5B        	cp		'Z'+1
 189+ A3FA 30 F7        	jr		nc,.CapLoop
 190+ A3FC FE 41        	cp		'A'
 191+ A3FE 38 F3        	jr		c,.CapLoop
 192+ A400              .LowerCase:
 193+ A400 C6 20        	add		a,'a'-'A'
 194+ A402 77           	ld		(hl),a
 195+ A403 18 EE        	jr		.CapLoop
 196+ A405
 197+ A405              WordIndexToAddress:
 198+ A405 21 76 A2     	ld		hl,WordIdx
 199+ A408 ED 31        	add		hl,a
 200+ A40A ED 31        	add		hl,a
 201+ A40C D5           	push	de
 202+ A40D 5E           	ld		e,(hl)
 203+ A40E 23           	inc		hl
 204+ A40F 56           	ld		d,(hl)
 205+ A410 EB           	ex		de,hl
 206+ A411 D1           	pop		de
 207+ A412 C9           	ret
 208+ A413
 209+ A413
 210+ A413              expandTokenToString:
 211+ A413              ; ">expandTokenToString a = texttoken"
 212+ A413 21 9C A3     	ld		hl,TextTokens
 213+ A416 CD 4B 9F     	call	getTableText
 214+ A419 11 D2 A3     	ld		de,TextBuffer
 215+ A41C              .ReadLoop:
 216+ A41C 7E           	ld		a,(hl)
 217+ A41D FE 00        	cp		0
 218+ A41F 28 1B        	jr		z,.ReadDone
 219+ A421 E5           	push	hl
 220+ A422 D5           	push	de
 221+ A423 21 76 A2     	ld		hl,WordIdx
 222+ A426 CD 4B 9F     	call	getTableText
 223+ A429 D1           	pop		de
 224+ A42A              .WordExpandLoop:
 225+ A42A 7E           	ld		a,(hl)
 226+ A42B FE 00        	cp		0
 227+ A42D 28 05        	jr		z,.AddSpace
 228+ A42F              ;.GetChar:
 229+ A42F 12           	ld		(de),a
 230+ A430 13           	inc		de
 231+ A431 23           	inc		hl
 232+ A432 18 F6        	jr		.WordExpandLoop
 233+ A434              .AddSpace:
 234+ A434 3E 20        	ld		a,' '
 235+ A436 12           	ld		(de),a
 236+ A437 13           	inc		de
 237+ A438 E1           	pop		hl
 238+ A439 23           	inc		hl
 239+ A43A 18 E0        	jr		.ReadLoop
 240+ A43C              .ReadDone:
 241+ A43C 1B           	dec		de
 242+ A43D AF           	xor		a
 243+ A43E 12           	ld		(de),a
 244+ A43F C9           	ret
 245+ A440
# file closed: ./Tables/dictionary.asm
1004  A440                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ A440 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ A444 53 45 49 54
   1+ A448 49 4C 45 54
   1+ A44C 53 54 4F 4E
   1+ A450 4C 4F 4E 55
   1+ A454 54 48 4E 4F
   2+ A458 41 4C 4C     name_digrams2   DB "ALL"
   3+ A45B 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ A45F 45 5A 41 43
   3+ A463 45 42 49 53
   3+ A467 4F 55 53 45
   3+ A46B 53 41 52 4D
   3+ A46F 41 49 4E 44
   3+ A473 49 52 45 41
   4+ A477 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ A47B 54 45 4E 42
   4+ A47F 45 52 41 4C
   4+ A483 41 56 45 54
   4+ A487 49 45 44 4F
   4+ A48B 52 51 55 41
   4+ A48F 4E 54 45 49
   4+ A493 53 52 49 4F
   4+ A497 4E
   5+ A498
   6+ A498              ; TODO Moveinto galaxy data module
   7+ A498 00 00 00...  name_expanded	DS 32
   8+ A4B8 00           				DB 0
   9+ A4B9
  10+ A4B9
  11+ A4B9
  12+ A4B9              NamingLoop:
  13+ A4B9 3A 9B 98     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ A4BC E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ A4BE FE 00        	cp		0					; 0 = skip 2 chars
  16+ A4C0 28 12        	jr		z,.SkipPhrase
  17+ A4C2 C6 0C        	add		a,12
  18+ A4C4 CB 27        	sla		a					; phrase = (a+12)*2
  19+ A4C6 21 40 A4     	ld		hl,name_digrams
  20+ A4C9 ED 31        	add		hl,a
  21+ A4CB ED A0        	ldi
  22+ A4CD 7E           	ld		a,(hl)
  23+ A4CE FE 3F        	cp		'?'
  24+ A4D0 28 02        	jr		z,.SkipPhrase
  25+ A4D2              .AddExtra:
  26+ A4D2 ED A0        	ldi
  27+ A4D4              .SkipPhrase:
  28+ A4D4 D5           	push	de
  29+ A4D5 CD E9 9C     	call	working_seed
  30+ A4D8 D1           	pop		de
  31+ A4D9 C9           	ret
  32+ A4DA
  33+ A4DA              ;GetDigramGalaxySeed:
  34+ A4DA              ;	call	copy_galaxy_to_working
  35+ A4DA              ;	jr		GetDigramWorkingSeed
  36+ A4DA              ;GetDigramSystemSeed:
  37+ A4DA              ;	call	copy_system_to_working
  38+ A4DA              ;GetDigramWorkingSeed:
  39+ A4DA              ;; ">GetDigram a = digram seed"
  40+ A4DA              ;	ld		de,name_expanded
  41+ A4DA              ;	ld		b,3
  42+ A4DA              ;	ld		a,(WorkingSeeds)
  43+ A4DA              ;	and		$40
  44+ A4DA              ;	jr		z,.SmallSizeName
  45+ A4DA              ;.LargeSizeName:
  46+ A4DA              ;	call	NamingLoop
  47+ A4DA              ;.SmallSizeName:
  48+ A4DA              ;	call	NamingLoop
  49+ A4DA              ;	call	NamingLoop
  50+ A4DA              ;	call	NamingLoop
  51+ A4DA              ;.DoneName:
  52+ A4DA              ;	ex		de,hl
  53+ A4DA              ;	ld		(hl),0
  54+ A4DA              ;	ex		de,hl
  55+ A4DA              ;	ret
  56+ A4DA
  57+ A4DA
  58+ A4DA
  59+ A4DA              ;GetDigramWorkingSeed:
  60+ A4DA              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ A4DA              ;	ld		b,5					; working seed
  62+ A4DA              ;	ld		de,name_expanded
  63+ A4DA              ;.ExpansionLoop:
  64+ A4DA              ;	push	bc
  65+ A4DA              ;	ld		hl,WorkingSeeds
  66+ A4DA              ;	ld		a,b
  67+ A4DA              ;	add		hl,a
  68+ A4DA              ;	ld		a,(hl)	; a = first byte of name seed
  69+ A4DA              ;	and 	$1F					; Keep bottom 5 bits only
  70+ A4DA              ;	cp		0					; 0 = skip 2 chars
  71+ A4DA              ;	jr		z,.SkipPhrase
  72+ A4DA              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ A4DA              ;	call	TT27
  74+ A4DA              ;.SkipPhrase:
  75+ A4DA              ;	push	de
  76+ A4DA              ;	call	next_working_seed
  77+ A4DA              ;	pop		de
  78+ A4DA              ;	pop		bc
  79+ A4DA              ;	djnz	GetDigramWorkingSeed
  80+ A4DA              ;.DoneName:
  81+ A4DA              ;	ex		de,hl
  82+ A4DA              ;	ld		(hl),0
  83+ A4DA              ;	ex		de,hl
  84+ A4DA              ;	ret
  85+ A4DA              ;
  86+ A4DA              ;ExpandToken:
  87+ A4DA              ;	DE = target
  88+ A4DA              ;	a = token
  89+ A4DA              ;
  90+ A4DA              ;PlanetDigram:
  91+ A4DA              ;	cp		&A0							; >- 160
  92+ A4DA              ;	jr		c,MorePage4
  93+ A4DA              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ A4DA              ;	asl		2							; Multiply by 2
  95+ A4DA              ;	ld		hl, name_digrams2
  96+ A4DA              ;	add		hl,a
  97+ A4DA              ;	ld		a,(hl)
  98+ A4DA              ;	call	ProcessTextToken
  99+ A4DA              ;	inc		hl
 100+ A4DA              ;	ld		a,(hl)
 101+ A4DA              ;	cp		'?'
 102+ A4DA              ;	ret		z
 103+ A4DA              ;	call	ProcessTextToken
 104+ A4DA              ;	ret
 105+ A4DA              ;MorePage4:
 106+ A4DA              ;	sub		$A0
 107+ A4DA              ;ExtraTokenCheck:
 108+ A4DA              ;	push	de							; save target address
 109+ A4DA              ;	push	bc
 110+ A4DA              ;	ld		b,a
 111+ A4DA              ;	ld		hl,varV
 112+ A4DA              ;	ld		(VarV),0400
 113+ A4DA              ;	ld		(varV),a
 114+ A4DA              ;	ld
 115+ A4DA              ;
 116+ A4DA              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ A4DA              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ A4DA              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ A4DA              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ A4DA              ;0A                      ASL A		      \ *= 2
 121+ A4DA              ;A8                      TAY 		      \ digram index = 0to62
 122+ A4DA              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ A4DA              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ A4DA              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ A4DA              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ A4DA              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ A4DA              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ A4DA              ;
 129+ A4DA              ;	.TT47	\ more page4, subtract #160
 130+ A4DA              ;E9 A0                   SBC #&A0	\ -= 160
 131+ A4DA              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ A4DA              ;AA                      TAX 		\ copy of word index
 133+ A4DA              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ A4DA              ;85 22                   STA &22		\ V
 135+ A4DA              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ A4DA              ;85 23                   STA &23		\ V+1
 137+ A4DA              ;A0 00                   LDY #0
 138+ A4DA              ;8A                      TXA 		\ token = word index
 139+ A4DA              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ A4DA              ;	.TT51	\ counters Y letter, X token
 141+ A4DA              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ A4DA              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ A4DA              ;C8                      INY 		\ letter count
 144+ A4DA              ;D0 F9                   BNE TT51	\ loop Y
 145+ A4DA              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ A4DA              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ A4DA              ;	.TT49	\ word ended
 148+ A4DA              ;C8                      INY
 149+ A4DA              ;D0 02                   BNE TT59    	\ next word
 150+ A4DA              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ A4DA              ;	.TT59	\ next word
 152+ A4DA              ;CA                      DEX 		\ token count
 153+ A4DA              ;D0 ED                   BNE TT51	\ loop X token
 154+ A4DA              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ A4DA              ;98                      TYA
 156+ A4DA              ;48                      PHA 		\ store Yindex
 157+ A4DA              ;A5 23                   LDA &23		\ V+1
 158+ A4DA              ;48                      PHA 		\ correct pointer hi
 159+ A4DA              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ A4DA              ;49 23                   EOR #&23	\ decode '#'
 161+ A4DA              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ A4DA              ;68                      PLA 		\ restore this depth's Vhi
 163+ A4DA              ;85 23                   STA &23		\ V+1
 164+ A4DA              ;68                      PLA
 165+ A4DA              ;A8                      TAY 		\ restore this depth's Yindex
 166+ A4DA              ;C8                      INY 		\ next letter
 167+ A4DA              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ A4DA              ;E6 23                   INC &23		\ V+1
 169+ A4DA              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ A4DA              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ A4DA              ;	.TT48 	\ rts
 172+ A4DA              ;60                      RTS 		\ end of flight token printing TT27
 173+ A4DA              ;
 174+ A4DA              ;
 175+ A4DA              ;
 176+ A4DA              ;
 177+ A4DA              ;
 178+ A4DA              ;
 179+ A4DA              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ A4DA              ;;AA                      TAX		\ copy token to count down
 181+ A4DA              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ A4DA              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ A4DA              ;CA                      DEX
 184+ A4DA              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ A4DA              ;CA                      DEX
 186+ A4DA              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ A4DA              ;CA                      DEX
 188+ A4DA              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ A4DA              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ A4DA              ;CA                      DEX
 191+ A4DA              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ A4DA              ;CA                      DEX
 193+ A4DA              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ A4DA              ;CA                      DEX
 195+ A4DA              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ A4DA              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ A4DA              ;85 72                   STA &72	 	\ QQ17
 198+ A4DA              ;60                      RTS
 199+ A4DA              ;CA                      DEX 		\ skip Acc ==7
 200+ A4DA              ;CA                      DEX
 201+ A4DA              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ A4DA              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ A4DA              ;60                      RTS
 204+ A4DA              ;CA                      DEX 		\ continue 9to127 tokens
 205+ A4DA              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ A4DA              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ A4DA              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ A4DA              ;C9 0E                   CMP #14		\ < 14 ?
 209+ A4DA              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ A4DA              ;C9 20                   CMP #32		\ < 32 ?
 211+ A4DA              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ A4DA              ;		\ Token  < 14 or > 31
 213+ A4DA              ;A6 72                   LDX &72	 	\ QQ17
 214+ A4DA              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ A4DA              ;30 11                   BMI TT41 	\ if bit7 set
 216+ A4DA              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ A4DA              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ A4DA              ;	.TT42	\ Uppercase to lowercase
 219+ A4DA              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ A4DA              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ A4DA              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ A4DA              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ A4DA              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ A4DA              ;	.TT44	\ print character as is with TT26
 225+ A4DA              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ A4DA              ;
 227+ A4DA              ;	.TT41	\ QQ17 bit7 set
 228+ A4DA              ;24 72                   BIT &72		\ QQ17
 229+ A4DA              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ A4DA              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ A4DA              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ A4DA              ;48                      PHA 		\ else store token Acc
 233+ A4DA              ;8A                      TXA 		\ QQ17 copy
 234+ A4DA              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ A4DA              ;85 72                   STA &72	 	\ QQ17
 236+ A4DA              ;68                      PLA 		\ restore token
 237+ A4DA              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ A4DA              ;
 239+ A4DA              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ A4DA              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ A4DA              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ A4DA              ;
 243+ A4DA              ;	.crlf	\ Acc == 9,  colon on right
 244+ A4DA              ;A9 15                   LDA #21		\ on right
 245+ A4DA              ;85 2C                   STA &2C		\ XC
 246+ A4DA              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ A4DA              ;
 248+ A4DA              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ A4DA              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ A4DA              ;F0 63                   BEQ TT48	\ rts
 251+ A4DA              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ A4DA              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ A4DA              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ A4DA              ;48                      PHA 		\ push token
 255+ A4DA              ;8A                      TXA 		\ QQ17 copy
 256+ A4DA              ;29 BF                   AND #&BF	\ clear bit6
 257+ A4DA              ;85 72                   STA &72	 	\ QQ17
 258+ A4DA              ;68                      PLA 		\ pull token
 259+ A4DA              ;	.TT74	\ TT26, print character.
 260+ A4DA              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ A4DA              ;
 262+ A4DA              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ A4DA              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ A4DA              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ A4DA              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ A4DA              ;0A                      ASL A		      \ *= 2
 267+ A4DA              ;A8                      TAY 		      \ digram index = 0to62
 268+ A4DA              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ A4DA              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ A4DA              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ A4DA              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ A4DA              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ A4DA              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ A4DA              ;
 275+ A4DA              ;	.TT47	\ more page4, subtract #160
 276+ A4DA              ;E9 A0                   SBC #&A0	\ -= 160
 277+ A4DA              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ A4DA              ;AA                      TAX 		\ copy of word index
 279+ A4DA              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ A4DA              ;85 22                   STA &22		\ V
 281+ A4DA              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ A4DA              ;85 23                   STA &23		\ V+1
 283+ A4DA              ;A0 00                   LDY #0
 284+ A4DA              ;8A                      TXA 		\ token = word index
 285+ A4DA              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ A4DA              ;	.TT51	\ counters Y letter, X token
 287+ A4DA              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ A4DA              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ A4DA              ;C8                      INY 		\ letter count
 290+ A4DA              ;D0 F9                   BNE TT51	\ loop Y
 291+ A4DA              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ A4DA              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ A4DA              ;	.TT49	\ word ended
 294+ A4DA              ;C8                      INY
 295+ A4DA              ;D0 02                   BNE TT59    	\ next word
 296+ A4DA              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ A4DA              ;	.TT59	\ next word
 298+ A4DA              ;CA                      DEX 		\ token count
 299+ A4DA              ;D0 ED                   BNE TT51	\ loop X token
 300+ A4DA              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ A4DA              ;98                      TYA
 302+ A4DA              ;48                      PHA 		\ store Yindex
 303+ A4DA              ;A5 23                   LDA &23		\ V+1
 304+ A4DA              ;48                      PHA 		\ correct pointer hi
 305+ A4DA              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ A4DA              ;49 23                   EOR #&23	\ decode '#'
 307+ A4DA              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ A4DA              ;68                      PLA 		\ restore this depth's Vhi
 309+ A4DA              ;85 23                   STA &23		\ V+1
 310+ A4DA              ;68                      PLA
 311+ A4DA              ;A8                      TAY 		\ restore this depth's Yindex
 312+ A4DA              ;C8                      INY 		\ next letter
 313+ A4DA              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ A4DA              ;E6 23                   INC &23		\ V+1
 315+ A4DA              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ A4DA              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ A4DA              ;	.TT48 	\ rts
 318+ A4DA              ;60                      RTS 		\ end of flight token printing TT27
 319+ A4DA              ;
 320+ A4DA              ;
 321+ A4DA              ;
# file closed: ./Tables/name_digrams.asm
1005  A4DA              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
1006  A4DA
1007  A4DA              ; Include all maths libraries to test assembly
1008  A4DA
1009  A4DA                  INCLUDE "./Maths/addhldesigned.asm"
# file opened: ./Maths/addhldesigned.asm
   1+ A4DA              addhldesigned:
   2+ A4DA CB 7C                bit     7,h
   3+ A4DC 20 03                jr      nz,.noneghl
   4+ A4DE CD 59 AB             call    negate16hl
   5+ A4E1              .noneghl:
   6+ A4E1 CB 7A                bit     7,d
   7+ A4E3 20 03                jr      nz,.nonegde
   8+ A4E5 CD 60 AB             call    negate16de
   9+ A4E8              .nonegde:
  10+ A4E8 19                   add     hl,de                       ; do 2'd c add
  11+ A4E9 AF                   xor     a                           ; assume positive
  12+ A4EA CB 7C                bit     7,h
  13+ A4EC C8                   ret     z                           ; if not set then can exit early
  14+ A4ED CD 59 AB             call    negate16hl
  15+ A4F0 3E FF                ld      a,$FF
  16+ A4F2 C9                   ret
  17+ A4F3
# file closed: ./Maths/addhldesigned.asm
1010  A4F3                  INCLUDE "./Maths/addhlasigned.asm"
# file opened: ./Maths/addhlasigned.asm
   1+ A4F3              ; HL = HL (signed) + A (unsigned), uses HL, DE, A
   2+ A4F3 57           AddAusngToHLsng:        ld      d,a
   3+ A4F4 5C                                   ld      e,h
   4+ A4F5 7C                                   ld      a,h
   5+ A4F6 E6 7F                                and     SignMask8Bit
   6+ A4F8 67                                   ld      h,a
   7+ A4F9 7A                                   ld      a,d
   8+ A4FA ED 31                                add     hl,a
   9+ A4FC 7B                                   ld      a,e
  10+ A4FD E6 80                                and     SignOnly8Bit
  11+ A4FF B4                                   or      h
  12+ A500 C9                                   ret
  13+ A501              ; HL = A (unsigned) - HL (signed), uses HL, DE, BC, A
  14+ A501 44           HLEequAusngMinusHLsng:  ld      b,h
  15+ A502 4F                                   ld      c,a
  16+ A503 78                                   ld      a,b
  17+ A504 E6 80                                and     SignOnly8Bit
  18+ A506 20 08                                jr      nz,.DoAdd
  19+ A508 EB           .DoSubtract:            ex      de,hl               ; move hl into de
  20+ A509 26 00                                ld      h,0                 ; hl = a
  21+ A50B 69                                   ld      l,c
  22+ A50C                                      ClearCarryFlag
  22+ A50C B7          >                        or a
  23+ A50D ED 52                                sbc     hl,de               ; hl = a - hl
  24+ A50F C9                                   ret
  25+ A510 79           .DoAdd:                 ld      a,c
  26+ A511 ED 31                                add hl,a
  27+ A513 C9                                   ret
  28+ A514
  29+ A514              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
  30+ A514 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
  31+ A515 AA                                   xor     d                   ; .
  32+ A516 E6 80                                and     SignOnly8Bit        ; .
  33+ A518 20 19                                jr      nz,.SignDifferent   ; .
  34+ A51A 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
  35+ A51B E6 80                                and     SignOnly8Bit        ; so store it in iyh
  36+ A51D FD 67                                ld      iyh,a               ;
  37+ A51F 78                                   ld      a,b                 ; bch = abs bch
  38+ A520 E6 7F                                and     SignMask8Bit        ; .
  39+ A522 47                                   ld      b,a                 ; .
  40+ A523 7A                                   ld      a,d                 ; del = abs del
  41+ A524 E6 7F                                and     SignMask8Bit        ; .
  42+ A526 57                                   ld      d,a                 ; .
  43+ A527 7C                                   ld      a,h                 ; l = h + l
  44+ A528 85                                   add     l                   ; .
  45+ A529 6F                                   ld      l,a                 ; .
  46+ A52A 79                                   ld      a,c                 ; e = e + c + carry
  47+ A52B 8B                                   adc     e                   ; .
  48+ A52C 5F                                   ld      e,a                 ; .
  49+ A52D 78                                   ld      a,b                 ; d = b + d + carry (signed)
  50+ A52E 8A                                   adc     d                   ;
  51+ A52F FD B4                                or      iyh                 ; d = or back in sign bit
  52+ A531 57                                   ld      d,a                 ;
  53+ A532 C9                                   ret                         ; done
  54+ A533 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
  55+ A534 FD 67                                ld      iyh,a               ; iyh = b sign
  56+ A536 E6 7F                                and     SignMask8Bit        ; .
  57+ A538 47                                   ld      b,a                 ; .
  58+ A539 7A                                   ld      a,d                 ; del = abs del
  59+ A53A FD 6F                                ld      iyl,a               ; iyl = d sign
  60+ A53C E6 7F                                and     SignMask8Bit        ; .
  61+ A53E 57                                   ld      d,a                 ; .
  62+ A53F E5                                   push    hl                  ; hl = bc - de
  63+ A540 60 69                                ld      hl,bc               ; if bc < de then there is a carry
  64+ A542 ED 52                                sbc     hl,de               ;
  65+ A544 E1                                   pop     hl                  ;
  66+ A545 38 0E                                jr      c,.BCHltDEL
  67+ A547 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
  68+ A549 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
  69+ A54A                                      JumpIfALTNusng l,.BCHltDEL
  69+ A54A BD          >                        cp      l
  69+ A54B DA 55 A5    >                        jp		c, .BCHltDEL
  70+ A54E 20 15                                jr      nz,.DELltBCH
  71+ A550              ; The same so its just zero
  72+ A550 AF           .BCHeqDEL:              xor     a                  ; its just zero
  73+ A551 57                                   ld      d,a                ; .
  74+ A552 5F                                   ld      e,a                ; .
  75+ A553 6F                                   ld      l,a                ; .
  76+ A554 C9                                   ret                        ; .
  77+ A555              ;BCH is less than DEL so its DEL - BCH the sort out sign
  78+ A555 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
  79+ A556 94                                   sub     h                  ; .                              ;   01D70F DEL
  80+ A557 6F                                   ld      l,a                ; .                              ;  -000028 BCH
  81+ A558 7B                                   ld      a,e                ; e = e - c - carry              ;1.
  82+ A559 99                                   sbc     c                  ; .                              ;
  83+ A55A 5F                                   ld      e,a                ; .                              ;
  84+ A55B 7A                                   ld      a,d                ; d = d - b - carry              ;
  85+ A55C 98                                   sbc     b                  ; .                              ;
  86+ A55D 57                                   ld      d,a                ; .                              ;
  87+ A55E FD 7D                                ld      a,iyl              ; as d was larger, take d sign
  88+ A560 E6 80                                and     SignOnly8Bit       ;
  89+ A562 B2                                   or      d                  ;
  90+ A563 57                                   ld      d,a                ;
  91+ A564 C9                                   ret
  92+ A565 7C           .DELltBCH:              ld      a,h                ; l = h - l
  93+ A566 95                                   sub     l                  ;
  94+ A567 6F                                   ld      l,a                ;
  95+ A568 79                                   ld      a,c                ; e = c - e - carry
  96+ A569 9B                                   sbc     e                  ;
  97+ A56A 5F                                   ld      e,a                ;
  98+ A56B 78                                   ld      a,b                ; d = b - d - carry
  99+ A56C 9A                                   sbc     d                  ;
 100+ A56D 57                                   ld      d,a                ;
 101+ A56E FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
 102+ A570 E6 80                                and     SignOnly8Bit       ;
 103+ A572 B2                                   or      d                  ;
 104+ A573 57                                   ld      d,a                ;
 105+ A574 C9                                   ret
 106+ A575
 107+ A575
 108+ A575              ;BHL = AHL + DE where AHL = 16 bit + A sign and DE = 15 bit signed
 109+ A575 47           AddAHLtoDEsigned:       ld      b,a                     ; B = A , C = D (save sign bytes)
 110+ A576 4A                                   ld      c,d                     ; .
 111+ A577 A9                                   xor     c                       ; A = A xor C
 112+ A578 CB BA                                res     7,d                     ; clear sign bit of D
 113+ A57A 20 02                                jr nz,  .OppositeSigns          ; if A xor C is opposite signs job to A0A1
 114+ A57C 19                                   add     hl,de                   ; HL = HL + DE
 115+ A57D C9                                   ret                             ; return
 116+ A57E ED 52        .OppositeSigns:         sbc     hl,de                   ; HL = HL -DE
 117+ A580 D0                                   ret     nc                      ; if no carry return
 118+ A581 19                                   add     hl,de                   ; else HL = HL + DE
 119+ A582 EB                                   ex      de,hl                   ;      swap HL and DE
 120+ A583 A7                                   and     a                       ;      reset carry
 121+ A584 ED 52                                sbc     hl,de                   ;      HL = DE - HL (as they were swapped)
 122+ A586 41                                   ld      b,c                     ;      B = sign of C
 123+ A587 C9                                   ret                             ;      ret
 124+ A588
 125+ A588
 126+ A588
 127+ A588              ; a = value to add
 128+ A588              ; b = offset (equivalent to regX)
 129+ A588              ; returns INWK [x] set to new value
 130+ A588              addINWKbasigned:
 131+ A588 21 0C C0     		ld 		hl,UBnKxlo                  ; hl = INWK 0
 132+ A58B 4F           		ld      c,a                         ; preserve a
 133+ A58C 78           		ld		a,b
 134+ A58D ED 31        		add		hl,a                        ; hl = INWK[x]
 135+ A58F 79                   ld      a,c                         ; get back a value
 136+ A590 E6 80                and     $80                         ; get sign bit from a
 137+ A592 47                   ld      b,a                         ; now b = sign bit of a
 138+ A593 79                   ld      a,c                         ; a = original value
 139+ A594 E6 7F                and     SignMask8Bit                ; a = unsigned version of original value
 140+ A596              ; hl = unsigned version of INWK0[b]
 141+ A596              ; a = value to add, also in c which will optimise later code
 142+ A596              ; b = sign bit of a ( in old code was varT)
 143+ A596              addhlcsigned:
 144+ A596 5E                   ld      e,(hl)                      ; de = INKK value
 145+ A597 23                   inc     hl
 146+ A598 56                   ld      d,(hl)
 147+ A599 23                   inc     hl                          ; now pointing a sign
 148+ A59A 7E                   ld      a,(hl)                      ; a = sign bit
 149+ A59B EB                   ex      de,hl                       ; hl = value now and de = pointer to sign
 150+ A59C A8                   xor     b                           ; a = resultant sign
 151+ A59D CB 7F                bit     7,a                         ; is it negative?
 152+ A59F 28 28                jr      z,.postivecalc
 153+ A5A1              .negativecalc:
 154+ A5A1 7C                   ld      a,h
 155+ A5A2 E6 7F                and     SignMask8Bit
 156+ A5A4 67                   ld      h,a                         ; strip high bit
 157+ A5A5 DD 68                ld      ixl,b                       ; save sign bit from b into d
 158+ A5A7 06 00                ld      b,0                         ; c = value to subtract so now bc = value to subtract
 159+ A5A9 ED 42                sbc     hl,bc
 160+ A5AB DD 45                ld      b,ixl                       ; get sign back
 161+ A5AD EB                   ex      de,hl                       ; de = value hl = pointer to sign
 162+ A5AE 7E                   ld      a,(hl)                      ;
 163+ A5AF E6 7F                and     SignMask8Bit
 164+ A5B1 DE 00                sbc     a,0                         ; subtract carry which could flip sign bit
 165+ A5B3 F6 80                or      $80                         ; set bit 0
 166+ A5B5 A8                   xor     b                           ; flip bit on sign (var T)
 167+ A5B6 77                   ld      (hl),a
 168+ A5B7 2B                   dec     hl
 169+ A5B8 72                   ld      (hl),d
 170+ A5B9 2B                   dec     hl
 171+ A5BA 73                   ld      (hl),e                      ; write out DE to INKW[x]0,1
 172+ A5BB EB                   ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
 173+ A5BC D8                   ret     c                           ; if carry was set then we can exit now
 174+ A5BD              .nocarry:
 175+ A5BD CD 59 AB             call    negate16hl                  ; get hl back to positive, a is still inkw+2
 176+ A5C0 B0                   or      b                           ; b is still varT
 177+ A5C1 EB                   ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
 178+ A5C2 73                   ld      (hl),e
 179+ A5C3 23                   inc     hl
 180+ A5C4 72                   ld      (hl),d
 181+ A5C5 23                   inc     hl
 182+ A5C6 77                   ld      (hl),a                      ; set sign bit in INKK[x]+2
 183+ A5C7 EB                   ex      de,hl                       ; hl = value de = pointer to sign
 184+ A5C8 C9                   ret
 185+ A5C9              .postivecalc:
 186+ A5C9 DD 68                ld      ixl,b
 187+ A5CB 06 00                ld      b,0
 188+ A5CD 19                   add     hl,de
 189+ A5CE EB                   ex      de,hl
 190+ A5CF DD B5                or      ixl                         ; we don;t need to recover b here
 191+ A5D1 77                   ld      (hl),a                      ; push sign into INWK[x]
 192+ A5D2 2B                   dec     hl
 193+ A5D3 72                   ld      (hl),d
 194+ A5D4 2B                   dec     hl
 195+ A5D5 73                   ld      (hl),e
 196+ A5D6 C9                   ret
 197+ A5D7
 198+ A5D7              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
 199+ A5D7              ;MVT1
 200+ A5D7              ;    S = bits 6 to 0 of A
 201+ A5D7              ;    A = sign bit => T
 202+ A5D7              ;    xor sign bit with ink[x] Sign
 203+ A5D7              ;    if negative thn its not an add
 204+ A5D7              ;
 205+ A5D7              ;        and h, 7F
 206+ A5D7              ;        b = 0
 207+ A5D7              ;        c = varS
 208+ A5D7              ;        subtract INW[X]hilo, bc
 209+ A5D7              ;        retain carry
 210+ A5D7              ;        get INKW[x]Sign
 211+ A5D7              ;        and 7F
 212+ A5D7              ;        subtract carry (so will go negtive if negative)
 213+ A5D7              ;        xor bit 7 of h with T to flip bit
 214+ A5D7              ;        write to INKW[x]Sign
 215+ A5D7              ;
 216+ A5D7              ;    else
 217+ A5D7              ;MV10.
 218+ A5D7              ;        add INWK[x]hi,lo, varS
 219+ A5D7              ;        or      sign bit
 220+ A5D7
 221+ A5D7
# file closed: ./Maths/addhlasigned.asm
1011  A5D7                  INCLUDE "./Maths/Utilities/AddDEToCash.asm"
# file opened: ./Maths/Utilities/AddDEToCash.asm
   1+ A5D7              ; Note its big endian
   2+ A5D7 2A D0 9B     addDEtoCash:            ld      hl,(Cash)
   3+ A5DA 19                                   add     hl,de
   4+ A5DB 22 D0 9B                             ld      (Cash),hl
   5+ A5DE 11 00 00                             ld      de,0
   6+ A5E1 2A D2 9B                             ld      hl,(Cash+2)
   7+ A5E4 ED 5A                                adc     hl,de
   8+ A5E6 22 D2 9B                             ld      (Cash+2),hl
   9+ A5E9 C9                                   ret
  10+ A5EA
  11+ A5EA 2A D0 9B     subDEfromCash:          ld      hl,(Cash)
  12+ A5ED 7C                                   ld      a,h
  13+ A5EE B5                                   or      l
  14+ A5EF 2A D2 9B                             ld      hl,(Cash+2)
  15+ A5F2 B4                                   or      h
  16+ A5F3 B5                                   or      l
  17+ A5F4 C8                                   ret     z               ; No cash return
  18+ A5F5 B7                                   or      a
  19+ A5F6 2A D0 9B                             ld      hl,(Cash)
  20+ A5F9 ED 52                                sbc     hl,de
  21+ A5FB 22 D0 9B                             ld      (Cash),hl
  22+ A5FE 11 00 00                             ld      de,0
  23+ A601 2A D2 9B                             ld      hl,(Cash+2)
  24+ A604 ED 52                                sbc     hl,de
  25+ A606 22 D2 9B                             ld      (Cash+2),hl
  26+ A609                                      JumpOnBitSet h,7,.ZeroCash
  26+ A609 CB 7C       >                        bit 	7,h
  26+ A60B C2 0F A6    >                        jp      nz,.ZeroCash
  27+ A60E C9                                   ret
  28+ A60F 21 00 00     .ZeroCash:              ld      hl,0
  29+ A612 22 D0 9B                             ld      (Cash),hl
  30+ A615 22 D2 9B                             ld      (Cash+2),hl
  31+ A618 C9                                   ret
  32+ A619
# file closed: ./Maths/Utilities/AddDEToCash.asm
1012  A619                  INCLUDE "./Maths/DIVD3B2.asm"
# file opened: ./Maths/DIVD3B2.asm
   1+ A619              ;INPUTS: ahl = dividend cde = divisor
   2+ A619              ;OUTPUTS: cde = quotient ahl = remainder
   3+ A619 47           Div24by24:              ld b,a
   4+ A61A E5                                   push hl
   5+ A61B DD E1                                pop ix
   6+ A61D 2E 18                                ld l,24
   7+ A61F E5                                   push hl
   8+ A620 AF                                   xor a
   9+ A621 67                                   ld h,a
  10+ A622 6F                                   ld l,a
  11+ A623 DD 29        .Div24by24loop:         add ix,ix
  12+ A625 CB 10                                rl b
  13+ A627 ED 6A                                adc hl,hl
  14+ A629 17                                   rla
  15+ A62A B9                                   cp c
  16+ A62B 38 0C                                jr c,.Div24by24skip
  17+ A62D 20 05                                jr nz,.Div24by24setbit
  18+ A62F ED 52                                sbc hl,de
  19+ A631 19                                   add hl,de
  20+ A632 38 05                                jr c,.Div24by24skip
  21+ A634 ED 52        .Div24by24setbit:       sbc hl,de
  22+ A636 99                                   sbc a,c
  23+ A637 DD 23                                inc ix
  24+ A639 E3           .Div24by24skip:         ex (sp),hl
  25+ A63A 2D                                   dec l
  26+ A63B E3                                   ex (sp),hl
  27+ A63C 20 E5                                jr nz,.Div24by24loop
  28+ A63E D1                                   pop de
  29+ A63F 48                                   ld c,b
  30+ A640 DD E5                                push ix
  31+ A642 D1                                   pop de
  32+ A643 C9                                   ret
  33+ A644
  34+ A644 FD 67        Div24by24ASigned:       ld      iyh,a
  35+ A646 E6 7F                                and     SignMask8Bit
  36+ A648 CD 19 A6                             call    Div24by24
  37+ A64B F5                                   push    af
  38+ A64C FD 7C                                ld      a,iyh
  39+ A64E E6 80                                and     SignOnly8Bit
  40+ A650 B1                                   or      c
  41+ A651 4F                                   ld      c,a
  42+ A652 F1                                   pop     af
  43+ A653 C9                                   ret
  44+ A654
  45+ A654
  46+ A654 FD 67        Div24by24LeadSign:      ld      iyh,a           ; Preserve signed in IYL
  47+ A656 A9                                   xor     c               ; flip sign if negative
  48+ A657 E6 80                                and     SignOnly8Bit    ; .
  49+ A659 FD 6F                                ld      iyl,a           ; .
  50+ A65B 79                                   ld      a,c             ; make both values ABS
  51+ A65C E6 7F                                and     SignMask8Bit    ; .
  52+ A65E 4F                                   ld      c,a             ; .
  53+ A65F FD 7C                                ld      a,iyh           ; .
  54+ A661 E6 7F                                and     SignMask8Bit    ; .
  55+ A663 CD 19 A6                             call    Div24by24       ; do abs divide
  56+ A666 FD B5                                or      iyl             ; bring in sign bit
  57+ A668 FD 67                                ld      iyh,a           ; save a
  58+ A66A 79                                   ld      a,c             ; sort sign for c
  59+ A66B FD B5                                or      iyl             ;
  60+ A66D 4F                                   ld      c,a             ;
  61+ A66E FD 7C                                ld      a,iyh           ; sort sign of a
  62+ A670 C9                                   ret
  63+ A671
  64+ A671              ; --------------------------------------------------------------
  65+ A671              ;divdide by 16 using undocumented instrunctions
  66+ A671              ;Input: BC = Dividend, DE = Divisor, HL = 0
  67+ A671              ;Output: BC = Quotient, HL = Remainder
  68+ A671 47           PROJ256mulAdivQ:        ld      b,a
  69+ A672 0E 00                                ld      c,0
  70+ A674 16 00                                ld      d,0
  71+ A676 3A 96 97                             ld      a,(varQ)
  72+ A679 5F                                   ld      e,a
  73+ A67A 21 00 00     PROJDIV16UNDOC:         ld      hl,0
  74+ A67D 78                                   ld      a,b
  75+ A67E 06 10                                ld      b,16
  76+ A680 CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
  77+ A682 17                                   rla             ; ...
  78+ A683 ED 6A                                adc     hl,hl       ; ...
  79+ A685 ED 52                                sbc     hl,de       ; ...
  80+ A687 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
  81+ A689 19                                   add     hl,de       ; ...
  82+ A68A 0D                                   dec     c       ; ...
  83+ A68B 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
  84+ A68D 79                                   ld      a,c
  85+ A68E 32 97 97                             ld      (varR),a
  86+ A691 C9                                   ret
  87+ A692
  88+ A692              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
  89+ A692              ;OUTPUTS:   cahl = quotient cde = divisor
  90+ A692 32 87 96     DVID3B2:                ld      (varPhi2),a                     ;DVID3B2 \ Divide 3 bytes by 2, K = [P(HiLo).A]/[INWK_z HiLo], for planet radius, Xreg protected. ; P+2    \ num sg
  91+ A695                                      ldCopy2Byte UBnKzlo, varQ               ; [QR} = Ubnk zlohi  (i.e. Inwk_z HiLo)
  91+ A695 2A 12 C0    >                        ld       hl,(UBnKzlo)
  91+ A698 22 96 97    >                        ld       (varQ),hl
  92+ A69B 3A 14 C0                             ld      a,(UBnKzsgn)                    ;
  93+ A69E 32 98 97                             ld      (varS),a                        ; S = inkw z sign
  94+ A6A1 ED 5B 85 96  DVID3B:                 ld      de,(varP)                       ; K (3bytes)=P(Lo Hi Hi2)/S.R.Q approx  Acc equiv K(0).; get P and P+1 into de
  95+ A6A5 7B                                   ld      a,e                             ; num lo
  96+ A6A6 F6 01                                or      1                               ; must be at least 1
  97+ A6A8 32 85 96                             ld      (varP),a                        ; store
  98+ A6AB 5F                                   ld      e,a                             ; update DE too
  99+ A6AC 3A 87 96                             ld      a,(varPhi2)                     ; varP Sign     E.D.A = P Lo Hi Hi2
 100+ A6AF 21 98 97                             ld      hl,varS                         ; hl = address of VarS
 101+ A6B2 AE                                   xor     (hl)                            ; A = PHi2 Xor S Signs
 102+ A6B3 E6 80                                and     $80                             ;
 103+ A6B5 32 B3 97                             ld      (varT),a                        ; T = Sign bit of A
 104+ A6B8 FD 2E 00                             ld      iyl,0                           ; iyl = yReg = counter
 105+ A6BB 3A 87 96                             ld      a,(varPhi2)                     ;
 106+ A6BE E6 7F                                and     $7F                             ; A = Ph2 again but minus sign bit
 107+ A6C0              DVL9:                   JumpIfAGTENusng $40,DV14                ; counter Y up; if object is over $40 away then scaled and exit Y count
 107+ A6C0 FE 40       >                        cp     $40
 107+ A6C2 D2 D0 A6    >                        jp		nc,DV14
 108+ A6C5                                      ShiftDELeft1                            ; de (or P,P1) > 1
 108+ A6C5 CB 23       >			   sla e
 108+ A6C7 CB 12       >			   rl  d
 109+ A6C9 CB 17                                rl      a                               ; and accumulator as 3rd byte
 110+ A6CB FD 2C                                inc     iyl
 111+ A6CD C2 C0 A6                             jp      nz,DVL9                         ; loop again with a max of 256 iterations
 112+ A6D0 32 87 96     DV14:                   ld      (varPhi2),a                     ; scaled, exited Ycount
 113+ A6D3 ED 53 85 96                          ld      (varP),de                       ; store off the value so far
 114+ A6D7 3A 98 97                             ld      a,(varS)                        ; zsign
 115+ A6DA E6 7F                                and     $7F                             ; denom sg7
 116+ A6DC                                      ; jp mi,DV9                             ; this can never happen as bit 7 is and'ed out
 117+ A6DC 2A 96 97                             ld      hl,(varQ)                       ; demon lo
 118+ A6DF FD 2D        DVL6:                   dec     iyl                             ; counter Y back down, roll S. ;  scale Y back
 119+ A6E1                                      ShiftHLLeft1
 119+ A6E1 CB 25       >			   sla l
 119+ A6E3 CB 14       >			   rl  h
 120+ A6E5 CB 17                                rl      a                               ; mulitply QRS by 2
 121+ A6E7 F2 DF A6                             jp      p,DVL6                          ; loop roll S until Abit7 set.
 122+ A6EA 22 96 97     DV9:                    ld      (varQ),hl                       ; bmi cant enter here from above ; save off so far
 123+ A6ED 32 96 97                             ld      (varQ),a                        ; Q \ mostly empty so now reuse as hi denom
 124+ A6F0 3E FE                                ld      a,$FE                           ;  Xreg protected so can't LL28+4
 125+ A6F2 32 97 97                             ld      (varR),a                        ;  R
 126+ A6F5 3A 87 96                             ld      a,(varPhi2)                     ; P+2 \ big numerator
 127+ A6F8 CD 71 A6                             call    PROJ256mulAdivQ                 ; TODO LL31\ R now =A*256/Q
 128+ A6FB 3E 00                                ld      a,0
 129+ A6FD 32 AB 97                             ld      (varKp1),a
 130+ A700 32 AC 97                             ld      (varKp2),a
 131+ A703 32 AD 97                             ld      (varKp3),a                      ; clear out K+1 to K+3
 132+ A706 FD 7D                                ld      a,iyl                           ; Y counter for scale
 133+ A708                                      JumpOnBitClear a,7,DV12                 ; Ycount +ve
 133+ A708 CB 7F       >                        bit 	7,a
 133+ A70A CA 35 A7    >                        jp      z,DV12
 134+ A70D 3A 97 97                             ld      a,(varR)                        ; R     \ else Y count is -ve, Acc = remainder.
 135+ A710 ED 5B AA 97                          ld      de,(varK)                       ; d= k1
 136+ A714 2A AE 97                             ld      hl,(varK2)                      ; h = k3, l = k2
 137+ A717 5F                                   ld      e,a                             ; use e to hold K0 pulled from a
 138+ A718 CB 27        DVL8:                   sla     a                               ; boost up a                     ;  counter Y up
 139+ A71A CB 12                                rl      d                               ; k1
 140+ A71C CB 15                                rl      l                               ; k2
 141+ A71E CB 14                                rl      h                               ; k3
 142+ A720 FD 2C                                inc     iyl
 143+ A722 20 F4                                jr      nz,DVL8                         ;
 144+ A724 ED 53 AA 97  DVL8Save:               ld      (varK),de
 145+ A728 22 AE 97                             ld      (varK2),hl                      ; save back K0 to k3
 146+ A72B 3A B3 97                             ld      a,(varT)
 147+ A72E 4F                                   ld      c,a                             ; get varT into c reg
 148+ A72F 7C                                   ld      a,h                             ; a= k3 (sign)
 149+ A730 B1                                   or      c                               ; merge in varT (sign)that was saved much earlier up)
 150+ A731 32 BD 97                             ld      (varK3),a                       ; load sign bit back into K3
 151+ A734 C9                                   ret
 152+ A735              DV12:                   IfAIsZeroGoto   DV13                    ; Y Count zerp, go to DV13
 152+ A735 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 152+ A736 CA 4D A7    >                        jp	z, DV13
 153+ A739 3A 97 97                             ld      a,(varR)                        ; Reduce Remainder
 154+ A73C CB 3F        DVL10:                  srl     a                               ; divide by 2                     ; counter Y reduce
 155+ A73E FD 2D                                dec     iyl
 156+ A740 C2 3C A7                             jp      nz,DVL10                        ; loop y reduce until y is zero
 157+ A743 32 AA 97                             ld      (varK),a                        ; k Lo
 158+ A746                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 158+ A746 3A B3 97    >                        ld       a,(varT)
 158+ A749 32 AD 97    >                        ld       (varKp3),a
 159+ A74C C9                                   ret
 160+ A74D              DV13:                   ldCopyByte  varR,varK                   ; R \ already correct so copy to K lo;DV13   \ Ycount zero \ K(1to2) already = 0
 160+ A74D 3A 97 97    >                        ld       a,(varR)
 160+ A750 32 AA 97    >                        ld       (varK),a
 161+ A753                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 161+ A753 3A B3 97    >                        ld       a,(varT)
 161+ A756 32 AD 97    >                        ld       (varKp3),a
 162+ A759 C9                                   ret
 163+ A75A
 164+ A75A
 165+ A75A CD 92 A6     PLS6:                   call    DVID3B2                         ; Returns AHL K ( 2 1 0 )
 166+ A75D 3A AD 97                             ld      a,(varKp3)
 167+ A760 E6 7F                                and     $7F
 168+ A762 21 AC 97                             ld      hl,varKp2
 169+ A765 B6                                   or      (hl)
 170+ A766 C2 7B A7                             jp      nz,PL44TooBig
 171+ A769 3A AB 97                             ld      a,(varKp1)
 172+ A76C FE 04                                cp      4                               ; if high byte > 4 then total > 1024 so too big
 173+ A76E 30 0B                                jr      nc,PL44TooBig
 174+ A770                                      ClearCarryFlag                          ; we have a good result regardless
 174+ A770 B7          >                        or a
 175+ A771 2A AA 97                             ld      hl,(varK)                       ; get K (0 1)
 176+ A774 3A AD 97                             ld      a,(varKp3)                      ; if sign bit high?
 177+ A777 CB 7F                                bit     7,a
 178+ A779 C8                                   ret     z                               ; no so we can just return
 179+ A77A C9           PL44:                   ret
 180+ A77B 37           PL44TooBig:             scf
 181+ A77C C9                                   ret
 182+ A77D
# file closed: ./Maths/DIVD3B2.asm
1013  A77D                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ A77D              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ A77D 2A 97 97                             ld  hl,(varRS)
   3+ A780 3A 96 97                             ld  a,(varQ)
   4+ A783 C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ A785 11 00 00                             ld  de,0        ; de = XY
   6+ A788 47                                   ld  b,a         ; b = Q
   7+ A789                                      ShiftHLRight1
   7+ A789 CB 3C       >			   srl h
   7+ A78B CB 1D       >			   rr  l
   8+ A78D CB 20                                sla b
   9+ A78F 30 03                                jr  nc,.LL126
  10+ A791 EB           .LL125:                 ex de,hl
  11+ A792 19                                   add hl,de
  12+ A793 EB                                   ex  de,hl       ; de = de + rs
  13+ A794              .LL126:                 ShiftHLRight1
  13+ A794 CB 3C       >			   srl h
  13+ A796 CB 1D       >			   rr  l
  14+ A798 CB 20                                sla b
  15+ A79A 38 F5                                jr      c,.LL125
  16+ A79C 20 F6                                jr      nz,.LL126
  17+ A79E EB                                   ex      de,hl   ; hl = result
  18+ A79F D1 C1                                pop     bc,,de
  19+ A7A1 C9                                   ret
  20+ A7A2
  21+ A7A2
  22+ A7A2              MacroDEEquQmulASigned:  MACRO
  23+ A7A2 ~                                    ld      d,a                         ; save a into d
  24+ A7A2 ~                                    ld      a,(varQ)
  25+ A7A2 ~                                    ld      e,a
  26+ A7A2 ~                                    xor     d                           ; a = a xor var Q
  27+ A7A2 ~                                    and     SignOnly8Bit
  28+ A7A2 ~                                    ld      b,a                         ; b = sign of a xor q
  29+ A7A2 ~                                    ld      a,d                         ; d = abs d (or a reg)
  30+ A7A2 ~                                    and     SignMask8Bit
  31+ A7A2 ~                                    ld      d,a
  32+ A7A2 ~                                    ld      a,e                         ; e = abs e (or varQ)
  33+ A7A2 ~                                    and     SignMask8Bit
  34+ A7A2 ~                                    ld      e,a
  35+ A7A2 ~                                    mul                                 ; de = a * Q
  36+ A7A2 ~                                    ld      a,d
  37+ A7A2 ~                                    or      b                           ; de = a * Q leading sign bit
  38+ A7A2 ~                                    ld      d,a
  39+ A7A2                                      ENDM
  40+ A7A2
  41+ A7A2
  42+ A7A2
  43+ A7A2                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  44+ A7A2              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  44+ A7A2 57          >                        ld      d,a                         ; save a into d
  44+ A7A3 3A 96 97    >                        ld      a,(varQ)
  44+ A7A6 5F          >                        ld      e,a
  44+ A7A7 AA          >                        xor     d                           ; a = a xor var Q
  44+ A7A8 E6 80       >                        and     SignOnly8Bit
  44+ A7AA 47          >                        ld      b,a                         ; b = sign of a xor q
  44+ A7AB 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  44+ A7AC E6 7F       >                        and     SignMask8Bit
  44+ A7AE 57          >                        ld      d,a
  44+ A7AF 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  44+ A7B0 E6 7F       >                        and     SignMask8Bit
  44+ A7B2 5F          >                        ld      e,a
  44+ A7B3 ED 30       >                        mul                                 ; de = a * Q
  44+ A7B5 7A          >                        ld      a,d
  44+ A7B6 B0          >                        or      b                           ; de = a * Q leading sign bit
  44+ A7B7 57          >                        ld      d,a
  45+ A7B8 2A 97 97     madDEaddRS:             ld		hl,(varR)
  46+ A7BB CD C4 A7                             call	madXAAddHLDESigned
  47+ A7BE EB                                   ex      de,hl                       ; de = R.S + DE
  48+ A7BF                                      ClearCarryFlag
  48+ A7BF B7          >                        or a
  49+ A7C0 DD 6B                                ld      ixl,e
  50+ A7C2 7A                                   ld      a,d
  51+ A7C3 C9                                   ret
  52+ A7C4
  53+ A7C4
  54+ A7C4 7C           madXAAddHLDESigned:     ld      a,h
  55+ A7C5 E6 80                                and     SignOnly8Bit
  56+ A7C7 47                                   ld      b,a                         ;save sign bit in b
  57+ A7C8 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ A7C9                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  58+ A7C9 FA E1 A7    >                        jp		m, .ADDHLDEOppSGN
  59+ A7CC 78           .ADDHLDESameSigns:       ld      a,b
  60+ A7CD B2                                   or      d
  61+ A7CE                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ A7CE FA D3 A7    >                        jp		m, .ADDHLDESameNeg
  62+ A7D1 19                                   add     hl,de
  63+ A7D2 C9                                   ret
  64+ A7D3 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  65+ A7D4 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  66+ A7D6 67                                   ld      h,a
  67+ A7D7 7A                                   ld      a,d
  68+ A7D8 E6 7F                                and     SignMask8Bit
  69+ A7DA 57                                   ld      d,a
  70+ A7DB 19                                   add     hl,de
  71+ A7DC 3E 80                                ld      a,SignOnly8Bit
  72+ A7DE B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  73+ A7DF 67                                   ld      h,a
  74+ A7E0 C9                                   ret
  75+ A7E1 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  76+ A7E2 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  77+ A7E4 67                                   ld      h,a
  78+ A7E5 7A                                   ld      a,d
  79+ A7E6 E6 7F                                and     SignMask8Bit
  80+ A7E8 57                                   ld      d,a
  81+ A7E9 B7                                   or      a
  82+ A7EA ED 52                                sbc     hl,de
  83+ A7EC 38 04                                jr      c,.ADDHLDEOppInvert
  84+ A7EE 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  85+ A7EF B4                                   or      h
  86+ A7F0 67                                   ld      h,a                         ; set the previou sign value
  87+ A7F1 C9                                   ret
  88+ A7F2              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  88+ A7F2 AF          >                    xor a
  88+ A7F3 95          >                    sub l
  88+ A7F4 6F          >                    ld l,a
  88+ A7F5 9F          >                    sbc a,a
  88+ A7F6 94          >                    sub h
  88+ A7F7 67          >                    ld h,a
  89+ A7F8 78                                   ld      a,b
  90+ A7F9 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  91+ A7FB B4                                   or      h
  92+ A7FC 67                                   ld      h,a                         ; recover sign
  93+ A7FD C9                                   ret
  94+ A7FE
  95+ A7FE
  96+ A7FE                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
  97+ A7FE                  ;
  98+ A7FE                  ; enter : hl = 16-bit multiplier   = x
  99+ A7FE                  ;          e =  8-bit multiplicand = y
 100+ A7FE                  ;
 101+ A7FE                  ; exit  : ahl = 24-bit product
 102+ A7FE                  ;         carry reset
 103+ A7FE                  ;
 104+ A7FE                  ; uses  : af, de, hl
 105+ A7FE 54           AHLequHLmulE:           ld d,h                      ; xh
 106+ A7FF 63                                   ld h,e                      ; yl
 107+ A800 ED 30                                mul de                      ; xh*yl
 108+ A802 EB                                   ex de,hl
 109+ A803 ED 30                                mul de                      ; yl*xl, hl = xh*yl
 110+ A805
 111+ A805 7A                                   ld  a,d                     ; sum products
 112+ A806 85                                   add a,l
 113+ A807 57                                   ld  d,a
 114+ A808 EB                                   ex de,hl
 115+ A809
 116+ A809 7A                                   ld  a,d
 117+ A80A CE 00                                adc a,0
 118+ A80C C9                                   ret
 119+ A80D
 120+ A80D
 121+ A80D
 122+ A80D                 ; multiplication of two 16-bit numbers into a 32-bit product
 123+ A80D                 ;
 124+ A80D                 ; enter : de = 16-bit multiplicand = y
 125+ A80D                 ;         hl = 16-bit multiplicand = x
 126+ A80D                 ;
 127+ A80D                 ; exit  : dehl = 32-bit product
 128+ A80D                 ;         carry reset
 129+ A80D                 ;
 130+ A80D                 ; uses  : af, bc, de, hl
 131+ A80D
 132+ A80D
 133+ A80D
 134+ A80D 45           DEHLequDEmulHL:         ld b,l                      ; x0
 135+ A80E 4B                                   ld c,e                      ; y0
 136+ A80F 5D                                   ld e,l                      ; x0
 137+ A810 6A                                   ld l,d
 138+ A811 E5                                   push hl                     ; x1 y1
 139+ A812 69                                   ld l,c                      ; y0
 140+ A813              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 141+ A813 ED 30                                mul de                      ; y1*x0
 142+ A815 EB                                   ex de,hl
 143+ A816 ED 30                                mul de                      ; x1*y0
 144+ A818
 145+ A818 AF                                   xor a                       ; zero A
 146+ A819 19                                   add hl,de                   ; sum cross products p2 p1
 147+ A81A 8F                                   adc a,a                     ; capture carry p3
 148+ A81B
 149+ A81B 59                                   ld e,c                      ; x0
 150+ A81C 50                                   ld d,b                      ; y0
 151+ A81D ED 30                                mul de                      ; y0*x0
 152+ A81F
 153+ A81F 47                                   ld b,a                      ; carry from cross products
 154+ A820 4C                                   ld c,h                      ; LSB of MSW from cross products
 155+ A821
 156+ A821 7A                                   ld a,d
 157+ A822 85                                   add a,l
 158+ A823 67                                   ld h,a
 159+ A824 6B                                   ld l,e                      ; LSW in HL p1 p0
 160+ A825
 161+ A825 D1                                   pop de
 162+ A826 ED 30                                mul de                      ; x1*y1
 163+ A828
 164+ A828 EB                                   ex de,hl
 165+ A829 ED 4A                                adc hl,bc
 166+ A82B EB                                   ex de,hl                    ; de = final MSW
 167+ A82C
 168+ A82C C9                                   ret
 169+ A82D
 170+ A82D              ; multiplication of two 16-bit numbers into a 16-bit product
 171+ A82D              ; enter : de = 16-bit multiplicand
 172+ A82D              ;         hl = 16-bit multiplicand
 173+ A82D              ; exit  : hl = 16-bit product
 174+ A82D              ;         carry reset
 175+ A82D              ; maths is
 176+ A82D              ;        hl = y , de= x
 177+ A82D              ;        hl = xhi,ylo + (yhigh * xlow)
 178+ A82D              ;        hl = yhih & xlo + x
 179+ A82D              ;
 180+ A82D              ;
 181+ A82D              ; uses  : af, bc, de, hl
 182+ A82D C5           mulDEbyHL:              push    bc
 183+ A82E 7A                                   ld a,d                      ; a = xh
 184+ A82F 54                                   ld d,h                      ; d = yh
 185+ A830 67                                   ld h,a                      ; h = xh
 186+ A831 4B                                   ld c,e                      ; c = xl
 187+ A832 45                                   ld b,l                      ; b = yl
 188+ A833 ED 30                                mul                         ; yh * yl
 189+ A835 EB                                   ex de,hl
 190+ A836 ED 30                                mul                         ; xh * yl
 191+ A838 19                                   add hl,de                   ; add cross products
 192+ A839 59                                   ld e,c
 193+ A83A 50                                   ld d,b
 194+ A83B ED 30                                mul                         ; yl * xl
 195+ A83D 7D                                   ld a,l                      ; cross products lsb
 196+ A83E 82                                   add a,d                     ; add to msb final
 197+ A83F 67                                   ld h,a
 198+ A840 6B                                   ld l,e                      ; hl = final
 199+ A841                                      ; 83 cycles, 19 bytes
 200+ A841 AF                                   xor a                       ; reset carry
 201+ A842 C1                                   pop     bc
 202+ A843 C9                                   ret
 203+ A844
 204+ A844              ; DELC = HLE * D, uses HL, DE, C , A , IYH
 205+ A844 7A           mulHLEbyDSigned:        ld      a,d
 206+ A845 AC                                   xor     h
 207+ A846 E6 80                                and     SignOnly8Bit
 208+ A848 FD 67                                ld      iyh,a               ; iyh = copy of sign
 209+ A84A 7C                                   ld      a,h
 210+ A84B E6 7F                                and     SignMask8Bit
 211+ A84D 67                                   ld      h,a                 ; hle = abs (hle)
 212+ A84E 7A                                   ld      a,d
 213+ A84F E6 7F                                and     SignMask8Bit
 214+ A851 57                                   ld      d,a                 ; now also d = abs d
 215+ A852 ED 30        .PerformMultiply:       mul                         ; de = E*A
 216+ A854 4B                                   ld      c,e                 ; c = low E*A
 217+ A855 5D                                   ld      e,l                 ;
 218+ A856 6F                                   ld      l,a                 ; hl = H,A
 219+ A857 7A                                   ld      a,d                 ; a = (E*A)/256
 220+ A858 55                                   ld      d,l                 ; de = A,L
 221+ A859 ED 30                                mul                         ; de = E*A (high) + E*A/256(low)
 222+ A85B ED 32                                add     de,a                ; .
 223+ A85D 7A                                   ld      a,d                 ; hl = E*A (high) + E*A/256(low)
 224+ A85E EB                                   ex      de,hl               ; A =  E*A, de = HA
 225+ A85F ED 30                                mul
 226+ A861 ED 32                                add     de,a                ;
 227+ A863 7A                                   ld      a,d
 228+ A864 FD B4                                or      iyh                 ; recover sign
 229+ A866 57                                   ld      d,a                 ; sign back on d
 230+ A867 C9                                   ret
 231+ A868
 232+ A868
 233+ A868              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 234+ A868              ; enter : de = 16-bit multiplicand
 235+ A868              ;         hl = 16-bit multiplicand
 236+ A868              ; exit  : hl = 16-bit product
 237+ A868              ;         carry reset
 238+ A868              ;
 239+ A868              ; uses  : af, bc, de, hl
 240+ A868 00           mulDEbyHLSignByte       DB      0
 241+ A869 AF           mulDEbyHLSgnTo2c:       xor     a
 242+ A86A 32 68 A8                             ld      (mulDEbyHLSignByte),a
 243+ A86D 7A           .SignDE:                ld      a,d
 244+ A86E ED 27 80                             test    $80
 245+ A871 28 08                                jr      z,.SignHL
 246+ A873 E6 7F        .NegativeDE:            and     $7F
 247+ A875 57                                   ld      d,a
 248+ A876 3E 80                                ld      a,$80
 249+ A878 32 68 A8                             ld      (mulDEbyHLSignByte),a
 250+ A87B 7C           .SignHL:                ld      a,h
 251+ A87C ED 27 80                             test    $80
 252+ A87F 28 0B                                jr      z,.AbsoluteMultiply
 253+ A881 E6 7F        .NegativeHL:            and     $7F
 254+ A883 67                                   ld      h,a
 255+ A884 3A 68 A8                             ld      a,(mulDEbyHLSignByte)
 256+ A887 EE 80                                xor     $80
 257+ A889 32 68 A8                             ld      (mulDEbyHLSignByte),a
 258+ A88C CD 2D A8     .AbsoluteMultiply:      call    mulDEbyHL
 259+ A88F 3A 68 A8     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 260+ A892 ED 27 80                             test    $80
 261+ A895 C8                                   ret     z
 262+ A896 AF           .Negateghl: 			xor 	a
 263+ A897 95                                   sub 	l
 264+ A898 6F                                   ld 		l,a
 265+ A899 9F                                   sbc 	a,a
 266+ A89A 94                                   sub 	h
 267+ A89B 67                                   ld 		h,a
 268+ A89C C9                                   ret
 269+ A89D
 270+ A89D AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 271+ A89E 32 68 A8                             ld      (mulDEbyHLSignByte),a
 272+ A8A1 7A           .SignDE:                ld      a,d
 273+ A8A2 ED 27 80                             test    $80
 274+ A8A5 28 08                                jr      z,.AbsoluteMultiply
 275+ A8A7 E6 7F        .NegativeDE:            and     $7F
 276+ A8A9 57                                   ld      d,a
 277+ A8AA 3E 80                                ld      a,$80
 278+ A8AC 32 68 A8                             ld      (mulDEbyHLSignByte),a
 279+ A8AF CD 2D A8     .AbsoluteMultiply:      call    mulDEbyHL
 280+ A8B2 3A 68 A8     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 281+ A8B5 ED 27 80                             test    $80
 282+ A8B8 C8                                   ret     z
 283+ A8B9 AF           .Negateghl:             xor 	a
 284+ A8BA 95                                   sub 	l
 285+ A8BB 6F                                   ld 		l,a
 286+ A8BC 9F                                   sbc 	a,a
 287+ A8BD 94                                   sub 	h
 288+ A8BE 67                                   ld 		h,a
 289+ A8BF C9                                   ret
 290+ A8C0
 291+ A8C0
# file closed: ./Maths/multiply.asm
1014  A8C0                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ A8C0              ; "ASM_SQUA : TESTGOOD"
   2+ A8C0              ; "AP = A^2 A = low,P = hi"
   3+ A8C0
   4+ A8C0              inline_squde: MACRO
   5+ A8C0 ~            			ld	e,a
   6+ A8C0 ~            			ld  d,a
   7+ A8C0 ~            			mul
   8+ A8C0              			ENDM
   9+ A8C0
  10+ A8C0              inline_squa: MACRO
  11+ A8C0 ~            			ld	e,a
  12+ A8C0 ~            			ld  d,a
  13+ A8C0 ~            			mul
  14+ A8C0 ~            			ld	a,e
  15+ A8C0              			ENDM
  16+ A8C0
  17+ A8C0
  18+ A8C0              asm_squa:
  19+ A8C0 E6 7F        	and SignMask8Bit
  20+ A8C2              ; "ASM SQUA2 : TESTGOOD"
  21+ A8C2              ; "AP = A^2 A = low,P = hi singed"
  22+ A8C2              asm_squa2:
  23+ A8C2 5F           	ld e, a
  24+ A8C3 57           	ld d,a
  25+ A8C4 ED 30        	mul
  26+ A8C6 ED 53 85 96  	ld (varP),de
  27+ A8CA 7B           	ld a,e
  28+ A8CB C9           	ret
# file closed: ./Maths/asm_square.asm
1015  A8CC                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ A8CC              ; "ASM SQRT : TESTGOOD"
   2+ A8CC              ; "16-bit integer square root"
   3+ A8CC              ; "call with de = number to square root"
   4+ A8CC              ; "returns   hl = square root"
   5+ A8CC              ; "corrupts  bc, de"
   6+ A8CC              asm_sqrt:
   7+ A8CC 01 00 80     	ld bc,$8000
   8+ A8CF 61           	ld h,c
   9+ A8D0 69           	ld l,c
  10+ A8D1              .sqrloop:
  11+ A8D1 CB 38        	srl b
  12+ A8D3 CB 19        	rr c
  13+ A8D5 09           	add hl,bc
  14+ A8D6 EB           	ex de,hl
  15+ A8D7 ED 52        	sbc hl,de
  16+ A8D9 38 04        	jr c,.sqrbit
  17+ A8DB EB           	ex de,hl
  18+ A8DC 09           	add hl,bc
  19+ A8DD 18 05        	jr .sqrfi
  20+ A8DF              .sqrbit:
  21+ A8DF 19           	add hl,de
  22+ A8E0 EB           	ex de,hl
  23+ A8E1 B7           	or a
  24+ A8E2 ED 42        	sbc hl,bc
  25+ A8E4              .sqrfi:
  26+ A8E4 CB 3C        	srl h
  27+ A8E6 CB 1D        	rr l
  28+ A8E8 CB 38        	srl b
  29+ A8EA CB 19        	rr c
  30+ A8EC 30 E3        	jr nc,.sqrloop
  31+ A8EE C9           	ret
  32+ A8EF
  33+ A8EF
  34+ A8EF              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ A8EF 3A 96 97     	ld		a,(varQ)
  36+ A8F2 5F           	ld		e,a
  37+ A8F3 3A 97 97     	ld		a,(varR)
  38+ A8F6 57           	ld		d,a
  39+ A8F7 CD CC A8     	call	asm_sqrt
  40+ A8FA 7D               ld      a,l
  41+ A8FB 32 96 97     	ld		(varQ),a
  42+ A8FE C9           	ret
  43+ A8FF
# file closed: ./Maths/asm_sqrt.asm
1016  A8FF                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ A8FF              ; Divide 8-bit values
   2+ A8FF              ; In: Divide E by divider C
   3+ A8FF              ; Out: A = result, B = rest
   4+ A8FF              ;
   5+ A8FF              ;;;Div8:
   6+ A8FF              ;;;    xor a
   7+ A8FF              ;;;    ld b,8
   8+ A8FF              ;;;Div8_Loop:
   9+ A8FF              ;;;    rl e
  10+ A8FF              ;;;    rla
  11+ A8FF              ;;;    sub c
  12+ A8FF              ;;;    jr nc,Div8_NoAdd
  13+ A8FF              ;;;    add a,c
  14+ A8FF              ;;;Div8_NoAdd:
  15+ A8FF              ;;;    djnz Div8_Loop
  16+ A8FF              ;;;    ld b,a
  17+ A8FF              ;;;    ld a,e
  18+ A8FF              ;;;    rla
  19+ A8FF              ;;;    cpl
  20+ A8FF              ;;;    ret
  21+ A8FF
  22+ A8FF              ;;Inputs: DE is the numerator, BC is the divisor
  23+ A8FF              ;;Outputs: DE is the result
  24+ A8FF              ;;         A is a copy of E
  25+ A8FF              ;;         HL is the remainder
  26+ A8FF              ;;         BC is not changed
  27+ A8FF              ;; so DE = DE /BC
  28+ A8FF              ;140 bytes
  29+ A8FF              ;145cc
  30+ A8FF
  31+ A8FF              MacroDEDivBC:       MACRO
  32+ A8FF ~                                rla
  33+ A8FF ~                                adc     hl,hl
  34+ A8FF ~                                sbc     hl,bc
  35+ A8FF ~                                jr      nc,$+3
  36+ A8FF ~                                add     hl,bc
  37+ A8FF                                  ENDM
  38+ A8FF
  39+ A8FF              DEequDEDivBC:
  40+ A8FF AF               xor a
  41+ A900 ED 62            sbc hl,hl
  42+ A902 7A               ld a,d
  43+ A903                  MacroDEDivBC
  43+ A903 17          >                    rla
  43+ A904 ED 6A       >                    adc     hl,hl
  43+ A906 ED 42       >                    sbc     hl,bc
  43+ A908 30 01       >                    jr      nc,$+3
  43+ A90A 09          >                    add     hl,bc
  44+ A90B                  MacroDEDivBC
  44+ A90B 17          >                    rla
  44+ A90C ED 6A       >                    adc     hl,hl
  44+ A90E ED 42       >                    sbc     hl,bc
  44+ A910 30 01       >                    jr      nc,$+3
  44+ A912 09          >                    add     hl,bc
  45+ A913                  MacroDEDivBC
  45+ A913 17          >                    rla
  45+ A914 ED 6A       >                    adc     hl,hl
  45+ A916 ED 42       >                    sbc     hl,bc
  45+ A918 30 01       >                    jr      nc,$+3
  45+ A91A 09          >                    add     hl,bc
  46+ A91B                  MacroDEDivBC
  46+ A91B 17          >                    rla
  46+ A91C ED 6A       >                    adc     hl,hl
  46+ A91E ED 42       >                    sbc     hl,bc
  46+ A920 30 01       >                    jr      nc,$+3
  46+ A922 09          >                    add     hl,bc
  47+ A923                  MacroDEDivBC
  47+ A923 17          >                    rla
  47+ A924 ED 6A       >                    adc     hl,hl
  47+ A926 ED 42       >                    sbc     hl,bc
  47+ A928 30 01       >                    jr      nc,$+3
  47+ A92A 09          >                    add     hl,bc
  48+ A92B                  MacroDEDivBC
  48+ A92B 17          >                    rla
  48+ A92C ED 6A       >                    adc     hl,hl
  48+ A92E ED 42       >                    sbc     hl,bc
  48+ A930 30 01       >                    jr      nc,$+3
  48+ A932 09          >                    add     hl,bc
  49+ A933                  MacroDEDivBC
  49+ A933 17          >                    rla
  49+ A934 ED 6A       >                    adc     hl,hl
  49+ A936 ED 42       >                    sbc     hl,bc
  49+ A938 30 01       >                    jr      nc,$+3
  49+ A93A 09          >                    add     hl,bc
  50+ A93B                  MacroDEDivBC
  50+ A93B 17          >                    rla
  50+ A93C ED 6A       >                    adc     hl,hl
  50+ A93E ED 42       >                    sbc     hl,bc
  50+ A940 30 01       >                    jr      nc,$+3
  50+ A942 09          >                    add     hl,bc
  51+ A943 17               rla
  52+ A944 2F               cpl
  53+ A945 57               ld d,a
  54+ A946
  55+ A946 7B               ld a,e
  56+ A947                  MacroDEDivBC
  56+ A947 17          >                    rla
  56+ A948 ED 6A       >                    adc     hl,hl
  56+ A94A ED 42       >                    sbc     hl,bc
  56+ A94C 30 01       >                    jr      nc,$+3
  56+ A94E 09          >                    add     hl,bc
  57+ A94F                  MacroDEDivBC
  57+ A94F 17          >                    rla
  57+ A950 ED 6A       >                    adc     hl,hl
  57+ A952 ED 42       >                    sbc     hl,bc
  57+ A954 30 01       >                    jr      nc,$+3
  57+ A956 09          >                    add     hl,bc
  58+ A957                  MacroDEDivBC
  58+ A957 17          >                    rla
  58+ A958 ED 6A       >                    adc     hl,hl
  58+ A95A ED 42       >                    sbc     hl,bc
  58+ A95C 30 01       >                    jr      nc,$+3
  58+ A95E 09          >                    add     hl,bc
  59+ A95F                  MacroDEDivBC
  59+ A95F 17          >                    rla
  59+ A960 ED 6A       >                    adc     hl,hl
  59+ A962 ED 42       >                    sbc     hl,bc
  59+ A964 30 01       >                    jr      nc,$+3
  59+ A966 09          >                    add     hl,bc
  60+ A967                  MacroDEDivBC
  60+ A967 17          >                    rla
  60+ A968 ED 6A       >                    adc     hl,hl
  60+ A96A ED 42       >                    sbc     hl,bc
  60+ A96C 30 01       >                    jr      nc,$+3
  60+ A96E 09          >                    add     hl,bc
  61+ A96F                  MacroDEDivBC
  61+ A96F 17          >                    rla
  61+ A970 ED 6A       >                    adc     hl,hl
  61+ A972 ED 42       >                    sbc     hl,bc
  61+ A974 30 01       >                    jr      nc,$+3
  61+ A976 09          >                    add     hl,bc
  62+ A977                  MacroDEDivBC
  62+ A977 17          >                    rla
  62+ A978 ED 6A       >                    adc     hl,hl
  62+ A97A ED 42       >                    sbc     hl,bc
  62+ A97C 30 01       >                    jr      nc,$+3
  62+ A97E 09          >                    add     hl,bc
  63+ A97F                  MacroDEDivBC
  63+ A97F 17          >                    rla
  63+ A980 ED 6A       >                    adc     hl,hl
  63+ A982 ED 42       >                    sbc     hl,bc
  63+ A984 30 01       >                    jr      nc,$+3
  63+ A986 09          >                    add     hl,bc
  64+ A987 17               rla
  65+ A988 2F               cpl
  66+ A989 5F               ld e,a
  67+ A98A C9               ret
  68+ A98B
  69+ A98B
  70+ A98B
  71+ A98B              ;divdide by 16 using undocumented instrunctions
  72+ A98B              ;Input: BC = Dividend, DE = Divisor, HL = 0
  73+ A98B              ;Output: BC = Quotient, HL = Remainder
  74+ A98B              ; Our use
  75+ A98B              ; BC = A0
  76+ A98B              ; DE = 0C
  77+ A98B              ; so BC = a * 256 / C
  78+ A98B              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
  78+ A98B B9          >                        cp     c
  78+ A98C D2 B7 A9    >                        jp		nc,DEV16ATooLarge
  79+ A98F 47                                   ld      b,a
  80+ A990 59                                   ld      e,c
  81+ A991 0E 00                                ld      c,0
  82+ A993 16 00                                ld      d,0
  83+ A995 C3 A2 A9                             jp      DIV16UNDOC
  84+ A998 47           DIV16Amul256dQUNDOC:    ld      b,a
  85+ A999 0E 00                                ld      c,0
  86+ A99B 21 96 97                             ld      hl,varQ
  87+ A99E 7E                                   ld      a,(hl)
  88+ A99F 16 00                                ld      d,0
  89+ A9A1 5F                                   ld      e,a
  90+ A9A2              DIV16BCDivDEUNDOC:
  91+ A9A2 21 00 00     DIV16UNDOC:             ld      hl,0
  92+ A9A5 78                                   ld      a,b
  93+ A9A6 06 10                                ld      b,16
  94+ A9A8 CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
  95+ A9AA 17                                   rla			; ...
  96+ A9AB ED 6A                                adc	hl,hl		; ...
  97+ A9AD ED 52                                sbc	hl,de		; ...
  98+ A9AF 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
  99+ A9B1 19                                   add	hl,de		; ...
 100+ A9B2 0D                                   dec	c		; ...
 101+ A9B3 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 102+ A9B5 47                                   ld   b,a
 103+ A9B6 C9                                   ret
 104+ A9B7 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 105+ A9BA C9                                   ret
 106+ A9BB
 107+ A9BB              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 108+ A9BB 06 08        asm_div8:               ld b,8
 109+ A9BD AF                                   xor a
 110+ A9BE CB 21        div8_loop:	            sla c
 111+ A9C0 17                                   rla
 112+ A9C1 BA                                   cp d
 113+ A9C2 38 02                                jr c,div8_skip
 113+ A9C4
 114+ A9C4 0C                                   inc c
 115+ A9C5 92                                   sub d
 116+ A9C6 10 F6        div8_skip:	            djnz div8_loop
 117+ A9C8 C9                                   ret
 118+ A9C9              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 119+ A9C9 06 10        asm_div16:              ld b,16
 120+ A9CB AF                                   xor a
 121+ A9CC CB 25        div16_loop:	            sla l
 122+ A9CE CB 14                                rl	h
 123+ A9D0              ;    add hl,hl
 124+ A9D0 17                                   rla
 125+ A9D1 B9                                   cp c
 126+ A9D2 38 02                                jr c,div16_skip
 127+ A9D4 2C                                   inc l
 128+ A9D5 91                                   sub c
 129+ A9D6 10 F4        div16_skip:		        djnz div16_loop
 130+ A9D8 C9                                   ret
 131+ A9D9              ;
 132+ A9D9              ; Divide 16-bit values (with 16-bit result)
 133+ A9D9              ; In: Divide BC by divider DE
 134+ A9D9              ; Out: BC = result, HL = rest
 135+ A9D9              ;
 136+ A9D9              HLDivC_Iteration: 	MACRO
 137+ A9D9 ~            					add	hl,hl		; unroll 16 times
 138+ A9D9 ~            					rla				; ...
 139+ A9D9 ~            					cp	c			; ...
 140+ A9D9 ~            					jr	1F
 141+ A9D9 ~            					sub	c			; ...
 142+ A9D9 ~            1:
 143+ A9D9 ~            					inc	l			; ...
 144+ A9D9              					ENDM
 145+ A9D9
 146+ A9D9
 147+ A9D9
 148+ A9D9              ; ">div1616: BC = BC / DE. HL = remainder"
 149+ A9D9 21 00 00     Div1616:            ld hl,0
 150+ A9DC 78                               ld a,b
 151+ A9DD 06 08                            ld b,8
 152+ A9DF 17           .Div16_Loop1:       rla
 153+ A9E0 ED 6A                            adc hl,hl
 154+ A9E2 ED 52                            sbc hl,de
 155+ A9E4 30 01                            jr nc,.Div16_NoAdd1
 156+ A9E6 19                               add hl,de
 157+ A9E7 10 F6        .Div16_NoAdd1:      djnz .Div16_Loop1
 158+ A9E9 17                               rla
 159+ A9EA 2F                               cpl
 160+ A9EB 47                               ld b,a
 161+ A9EC 79                               ld a,c
 162+ A9ED 48                               ld c,b
 163+ A9EE 06 08                            ld b,8
 164+ A9F0 17           .Div16_Loop2:       rla
 165+ A9F1 ED 6A                            adc hl,hl
 166+ A9F3 ED 52                            sbc hl,de
 167+ A9F5 30 01                            jr nc,.Div16_NoAdd2
 168+ A9F7 19                               add hl,de
 169+ A9F8 10 F6        .Div16_NoAdd2:      djnz .Div16_Loop2
 170+ A9FA 17                               rla
 171+ A9FB 2F                               cpl
 172+ A9FC 41                               ld b,c
 173+ A9FD 4F                               ld c,a
 174+ A9FE C9                               ret
 175+ A9FF
 176+ A9FF
 177+ A9FF
 178+ A9FF              BCDIVDE_Iteration: MACRO
 179+ A9FF ~            				   rla
 180+ A9FF ~            				   adc	hl,hl
 181+ A9FF ~            				   add	hl,de
 182+ A9FF ~            				   jr	c,1F
 183+ A9FF ~            				   sbc	hl,de
 184+ A9FF ~            1:
 185+ A9FF              				   ENDM
 186+ A9FF
 187+ A9FF
 188+ A9FF              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 189+ A9FF              ;BC/DE ==> BC, remainder in HL
 190+ A9FF              ;NOTE: BC/0 returns 0 as the quotient.
 191+ A9FF              ;min: 738cc
 192+ A9FF              ;max: 898cc
 193+ A9FF              ;avg: 818cc
 194+ A9FF              ;144 bytes
 195+ A9FF AF           BC_Div_DE:              xor a
 196+ AA00 67                                   ld h,a
 197+ AA01 6F                                   ld l,a
 198+ AA02 93                                   sub e
 199+ AA03 5F                                   ld e,a
 200+ AA04 9F                                   sbc a,a
 201+ AA05 92                                   sub d
 202+ AA06 57                                   ld d,a
 203+ AA07 78                                   ld a,b
 204+ AA08                                      BCDIVDE_Iteration
 204+ AA08 17          >				   rla
 204+ AA09 ED 6A       >				   adc	hl,hl
 204+ AA0B 19          >				   add	hl,de
 204+ AA0C 38 02       >				   jr	c,1F
 204+ AA0E ED 52       >				   sbc	hl,de
 204+ AA10             >1:
 205+ AA10                                      BCDIVDE_Iteration
 205+ AA10 17          >				   rla
 205+ AA11 ED 6A       >				   adc	hl,hl
 205+ AA13 19          >				   add	hl,de
 205+ AA14 38 02       >				   jr	c,1F
 205+ AA16 ED 52       >				   sbc	hl,de
 205+ AA18             >1:
 206+ AA18                                      BCDIVDE_Iteration
 206+ AA18 17          >				   rla
 206+ AA19 ED 6A       >				   adc	hl,hl
 206+ AA1B 19          >				   add	hl,de
 206+ AA1C 38 02       >				   jr	c,1F
 206+ AA1E ED 52       >				   sbc	hl,de
 206+ AA20             >1:
 207+ AA20                                      BCDIVDE_Iteration
 207+ AA20 17          >				   rla
 207+ AA21 ED 6A       >				   adc	hl,hl
 207+ AA23 19          >				   add	hl,de
 207+ AA24 38 02       >				   jr	c,1F
 207+ AA26 ED 52       >				   sbc	hl,de
 207+ AA28             >1:
 208+ AA28                                      BCDIVDE_Iteration
 208+ AA28 17          >				   rla
 208+ AA29 ED 6A       >				   adc	hl,hl
 208+ AA2B 19          >				   add	hl,de
 208+ AA2C 38 02       >				   jr	c,1F
 208+ AA2E ED 52       >				   sbc	hl,de
 208+ AA30             >1:
 209+ AA30                                      BCDIVDE_Iteration
 209+ AA30 17          >				   rla
 209+ AA31 ED 6A       >				   adc	hl,hl
 209+ AA33 19          >				   add	hl,de
 209+ AA34 38 02       >				   jr	c,1F
 209+ AA36 ED 52       >				   sbc	hl,de
 209+ AA38             >1:
 210+ AA38                                      BCDIVDE_Iteration
 210+ AA38 17          >				   rla
 210+ AA39 ED 6A       >				   adc	hl,hl
 210+ AA3B 19          >				   add	hl,de
 210+ AA3C 38 02       >				   jr	c,1F
 210+ AA3E ED 52       >				   sbc	hl,de
 210+ AA40             >1:
 211+ AA40                                      BCDIVDE_Iteration
 211+ AA40 17          >				   rla
 211+ AA41 ED 6A       >				   adc	hl,hl
 211+ AA43 19          >				   add	hl,de
 211+ AA44 38 02       >				   jr	c,1F
 211+ AA46 ED 52       >				   sbc	hl,de
 211+ AA48             >1:
 212+ AA48 17                                   rla
 213+ AA49 47                                   ld b,a
 214+ AA4A
 215+ AA4A 79                                   ld a,c
 216+ AA4B                                      BCDIVDE_Iteration
 216+ AA4B 17          >				   rla
 216+ AA4C ED 6A       >				   adc	hl,hl
 216+ AA4E 19          >				   add	hl,de
 216+ AA4F 38 02       >				   jr	c,1F
 216+ AA51 ED 52       >				   sbc	hl,de
 216+ AA53             >1:
 217+ AA53                                      BCDIVDE_Iteration
 217+ AA53 17          >				   rla
 217+ AA54 ED 6A       >				   adc	hl,hl
 217+ AA56 19          >				   add	hl,de
 217+ AA57 38 02       >				   jr	c,1F
 217+ AA59 ED 52       >				   sbc	hl,de
 217+ AA5B             >1:
 218+ AA5B                                      BCDIVDE_Iteration
 218+ AA5B 17          >				   rla
 218+ AA5C ED 6A       >				   adc	hl,hl
 218+ AA5E 19          >				   add	hl,de
 218+ AA5F 38 02       >				   jr	c,1F
 218+ AA61 ED 52       >				   sbc	hl,de
 218+ AA63             >1:
 219+ AA63                                      BCDIVDE_Iteration
 219+ AA63 17          >				   rla
 219+ AA64 ED 6A       >				   adc	hl,hl
 219+ AA66 19          >				   add	hl,de
 219+ AA67 38 02       >				   jr	c,1F
 219+ AA69 ED 52       >				   sbc	hl,de
 219+ AA6B             >1:
 220+ AA6B                                      BCDIVDE_Iteration
 220+ AA6B 17          >				   rla
 220+ AA6C ED 6A       >				   adc	hl,hl
 220+ AA6E 19          >				   add	hl,de
 220+ AA6F 38 02       >				   jr	c,1F
 220+ AA71 ED 52       >				   sbc	hl,de
 220+ AA73             >1:
 221+ AA73                                      BCDIVDE_Iteration
 221+ AA73 17          >				   rla
 221+ AA74 ED 6A       >				   adc	hl,hl
 221+ AA76 19          >				   add	hl,de
 221+ AA77 38 02       >				   jr	c,1F
 221+ AA79 ED 52       >				   sbc	hl,de
 221+ AA7B             >1:
 222+ AA7B                                      BCDIVDE_Iteration
 222+ AA7B 17          >				   rla
 222+ AA7C ED 6A       >				   adc	hl,hl
 222+ AA7E 19          >				   add	hl,de
 222+ AA7F 38 02       >				   jr	c,1F
 222+ AA81 ED 52       >				   sbc	hl,de
 222+ AA83             >1:
 223+ AA83                                      BCDIVDE_Iteration
 223+ AA83 17          >				   rla
 223+ AA84 ED 6A       >				   adc	hl,hl
 223+ AA86 19          >				   add	hl,de
 223+ AA87 38 02       >				   jr	c,1F
 223+ AA89 ED 52       >				   sbc	hl,de
 223+ AA8B             >1:
 224+ AA8B 17                                   rla
 225+ AA8C 4F                                   ld c,a
 226+ AA8D C9                                   ret
 227+ AA8E
 228+ AA8E              ;Inputs:
 229+ AA8E              ;     DE,BC are 8.8 Fixed Point numbers
 230+ AA8E              ;Outputs:
 231+ AA8E              ;     DE is the 8.8 Fixed Point result (rounded to the least significant bit)
 232+ AA8E              ;if DE is 0 : 122cc or 136cc if BC is negative
 233+ AA8E              ;if |BC|>=128*|DE| : 152cc or 166cc if BC is negative
 234+ AA8E              ;Otherwise:
 235+ AA8E              ;min: 1107cc
 236+ AA8E              ;max: 1319cc
 237+ AA8E              ;avg: 1201cc
 238+ AA8E 78           BC_Div_DE_88:           ld a,b  ; First, find out if the output is positive or negative
 239+ AA8F AA                                   xor d
 240+ AA90 F5                                   push af   ;sign bit is the result sign bit
 241+ AA91              ; Now make sure the inputs are positive
 242+ AA91 A8                                   xor b     ;A now has the value of B, since I XORed it with D twice (cancelling)
 243+ AA92 F2 9B AA                             jp p,BC_Div_DE_88_lbl1   ;if Positive, don't negate
 244+ AA95 AF                                   xor a
 245+ AA96 91                                   sub c
 246+ AA97 4F                                   ld c,a
 247+ AA98 9F                                   sbc a,a
 248+ AA99 90                                   sub b
 249+ AA9A 47                                   ld b,a
 250+ AA9B 7A           BC_Div_DE_88_lbl1:      ld a,d  ;now make DE negative to optimize the remainder comparison
 251+ AA9C B2                                   or d
 252+ AA9D FA A6 AA                             jp m,BC_Div_DE_88_lbl2
 253+ AAA0 AF                                   xor a
 254+ AAA1 93                                   sub e
 255+ AAA2 5F                                   ld e,a
 256+ AAA3 9F                                   sbc a,a
 257+ AAA4 92                                   sub d
 258+ AAA5 57                                   ld d,a
 259+ AAA6 B3           BC_Div_DE_88_lbl2:      or e      ;if DE is 0, we can call it an overflow ;A is the current value of D
 260+ AAA7 28 1D                                jr z,div_fixed88_overflow
 261+ AAA9 26 00                                ld h,0          ;The accumulator gets set to B if no overflow.;We can use H=0 to save a few cc in the meantime
 262+ AAAB 78                                   ld a,b;if B+DE>=0, then we'll have overflow
 263+ AAAC 83                                   add a,e
 264+ AAAD 7A                                   ld a,d
 265+ AAAE 8C                                   adc a,h
 266+ AAAF 38 15                                jr c,div_fixed88_overflow
 267+ AAB1 68                                   ld l,b  ;Now we can load the accumulator/remainder with B;H is already 0
 268+ AAB2 79                                   ld a,c
 269+ AAB3 CD CE AA                             call div_fixed88_sub
 270+ AAB6 4F                                   ld c,a
 271+ AAB7 78                                   ld a,b      ;A is now 0
 272+ AAB8 CD CE AA                             call div_fixed88_sub
 273+ AABB 51                                   ld d,c
 274+ AABC 5F                                   ld e,a
 275+ AABD F1                                   pop af
 276+ AABE F0                                   ret p
 277+ AABF AF                                   xor a
 278+ AAC0 93                                   sub e
 279+ AAC1 5F                                   ld e,a
 280+ AAC2 9F                                   sbc a,a
 281+ AAC3 92                                   sub d
 282+ AAC4 57                                   ld d,a
 283+ AAC5 C9                                   ret
 284+ AAC6
 285+ AAC6 11 FF 7F     div_fixed88_overflow:   ld de,$7FFF
 286+ AAC9 F1                                   pop af
 287+ AACA F0                                   ret p
 288+ AACB 13                                   inc de
 289+ AACC 1C                                   inc e
 290+ AACD C9                                   ret
 291+ AACE
 292+ AACE              ;min: 456cc
 293+ AACE              ;max: 536cc
 294+ AACE              ;avg: 496cc
 295+ AACE 06 08        div_fixed88_sub:        ld b,8
 296+ AAD0 17           BC_Div_DE_88_lbl3:      rla
 297+ AAD1 ED 6A                                adc hl,hl
 298+ AAD3 19                                   add hl,de
 299+ AAD4 38 02                                jr c,$+4
 300+ AAD6 ED 52                                sbc hl,de
 301+ AAD8 10 F6                                djnz BC_Div_DE_88_lbl3
 302+ AADA 8F                                   adc a,a
 303+ AADB C9                                   ret
 304+ AADC
# file closed: ./Maths/asm_divide.asm
1017  AADC                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ AADC              asm_tis2:
   2+ AADC              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ AADC              ; ">DOES NOT DO SIGNED YET"
   4+ AADC F5           	push af
   5+ AADD E6 7F            and SignMask8Bit
   6+ AADF 57           	ld d,a				;; d = A
   7+ AAE0 3A 96 97     	ld a,(varQ)
   8+ AAE3 5F           	ld e,a
   9+ AAE4 7A           	ld a,d
  10+ AAE5 BB           	cp e
  11+ AAE6 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ AAE8 1E 60        	ld e, 96
  13+ AAEA ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ AAEC EB           	ex de,hl
  15+ AAED 3A 96 97     	ld a,(varQ)
  16+ AAF0 4F           	ld c,a
  17+ AAF1 CD C9 A9     	call asm_div16
  18+ AAF4 F1           	pop af
  19+ AAF5 E6 80        	and $80
  20+ AAF7 B5           	or l
  21+ AAF8 C9           	ret
  22+ AAF9              .tis2_set96:
  23+ AAF9 F1           	pop af
  24+ AAFA E6 80        	and $80
  25+ AAFC F6 96        	or $96
  26+ AAFE C9           	ret
  27+ AAFF
  28+ AAFF
  29+ AAFF              asm_unit_vector:
  30+ AAFF              squareregfx:
  31+ AAFF 3A 79 C0     	ld a,(UBnkXScaled)
  32+ AB02 57           	ld d,a
  33+ AB03 5F           	ld e,a
  34+ AB04 ED 30        	mul
  35+ AB06 EB           	ex de,hl
  36+ AB07              squareregfy:
  37+ AB07 3A 7B C0     	ld a, (UBnkYScaled)
  38+ AB0A 57           	ld d,a
  39+ AB0B 5F           	ld e,a
  40+ AB0C ED 30        	mul
  41+ AB0E 19           	add hl,de
  42+ AB0F              squareregfz:
  43+ AB0F 3A 7D C0     	ld a, (UBnkZScaled)
  44+ AB12 57           	ld d,a
  45+ AB13 5F           	ld e,a
  46+ AB14 ED 30        	mul
  47+ AB16 19           	add hl,de
  48+ AB17 EB           	ex de,hl			; de de to number to root
  49+ AB18              hlequsquareroot:
  50+ AB18 CD CC A8     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ AB1B E5           	push hl				; save it for work 3 copies
  52+ AB1C E5           	push hl				; save it for work
  53+ AB1D E5           	push hl				; save it for work
  54+ AB1E              normfx:
  55+ AB1E 3A 79 C0     	ld a,(UBnkXScaled)
  56+ AB21 E1           	pop hl				; get copy #1
  57+ AB22 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ AB23 4F           	ld c,a
  59+ AB24 CD DC AA     	call asm_tis2
  60+ AB27 32 79 C0     	ld (UBnkXScaled),a
  61+ AB2A              normfy:
  62+ AB2A 3A 7B C0     	ld a,(UBnkYScaled)
  63+ AB2D E1           	pop hl				; get copy #2
  64+ AB2E 7D           	ld a,l
  65+ AB2F 4F           	ld c,a
  66+ AB30 CD DC AA     	call asm_tis2
  67+ AB33 32 7B C0     	ld (UBnkYScaled),a
  68+ AB36              normfz:
  69+ AB36 3A 7D C0     	ld a,(UBnkZScaled)
  70+ AB39 E1           	pop hl				; get copy #2
  71+ AB3A 7D           	ld a,l
  72+ AB3B 4F           	ld c,a
  73+ AB3C CD DC AA     	call asm_tis2
  74+ AB3F 32 7D C0     	ld (UBnkZScaled),a
  75+ AB42              asm_unit_vector_end:
  76+ AB42 C9           	ret
  77+ AB43
# file closed: ./Maths/asm_unitvector.asm
1018  AB43                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ AB43              ; Input:
   2+ AB43              ;       HL = 1st value
   3+ AB43              ;       DE = 2nd value
   4+ AB43              ; Output:
   5+ AB43              ;       CF, ZF = results of comparison:
   6+ AB43              ;
   7+ AB43              ;               CF      ZF      Result
   8+ AB43              ;               -----------------------------------
   9+ AB43              ;               0       0       HL > DE
  10+ AB43              ;               0       1       HL == DE
  11+ AB43              ;               1       0       HL < DE
  12+ AB43              ;               1       1       Impossible
  13+ AB43              ;
  14+ AB43
  15+ AB43 E5           compare16HLDE:      push    hl
  16+ AB44 A7                               and     a
  17+ AB45 ED 52                            sbc     hl,de
  18+ AB47 E1                               pop     hl
  19+ AB48 C9                               ret
  20+ AB49
  21+ AB49              ; With compare signed we do ABS comparison
  22+ AB49              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  23+ AB49
  24+ AB49 E5 D5        compare16HLDEABS:   push    hl,,de
  25+ AB4B 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  26+ AB4C E6 7F                            and     SignMask8Bit
  27+ AB4E 67                               ld      h,a
  28+ AB4F 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  29+ AB50 E6 7F                            and     SignMask8Bit
  30+ AB52 57                               ld      d,a
  31+ AB53 A7                               and     a
  32+ AB54 ED 52                            sbc     hl,de
  33+ AB56 D1 E1                            pop     hl,,de
  34+ AB58 C9                               ret
  35+ AB59
  36+ AB59
# file closed: ./Maths/compare16.asm
1019  AB59                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ AB59              ;;----------------------------------------------------------------------------------------------------------------------
   2+ AB59              ;; 16-bit negate
   3+ AB59              negate16:
   4+ AB59              negate16hl:
   5+ AB59                      ; Input:
   6+ AB59                      ;       HL = value
   7+ AB59                      ; Output:
   8+ AB59                      ;       HL = -value
   9+ AB59                      ; Destroys:
  10+ AB59                      ;       AF
  11+ AB59                      ;
  12+ AB59 AF           	xor 	a
  13+ AB5A 95           	sub 	l
  14+ AB5B 6F           	ld 		l,a
  15+ AB5C 9F           	sbc 	a,a
  16+ AB5D 94           	sub 	h
  17+ AB5E 67           	ld 		h,a
  18+ AB5F C9           	ret
  19+ AB60
  20+ AB60              negate16de:
  21+ AB60 AF           	xor 	a
  22+ AB61 93           	sub 	e
  23+ AB62 5F           	ld 		e,a
  24+ AB63 9F           	sbc 	a,a
  25+ AB64 92           	sub 	d
  26+ AB65 57           	ld 		d,a
  27+ AB66 C9           	ret
  28+ AB67
  29+ AB67              negate16bc:
  30+ AB67 AF           	xor 	a
  31+ AB68 91           	sub 	c
  32+ AB69 4F           	ld 		c,a
  33+ AB6A 9F           	sbc 	a,a
  34+ AB6B 90           	sub 	b
  35+ AB6C 47           	ld 		b,a
  36+ AB6D C9           	ret
  37+ AB6E
  38+ AB6E
  39+ AB6E              macronegate16hl:	MACRO
  40+ AB6E ~            					xor 	a
  41+ AB6E ~            					sub 	l
  42+ AB6E ~            					ld 		l,a
  43+ AB6E ~            					sbc 	a,a
  44+ AB6E ~            					sub 	h
  45+ AB6E ~            					ld 		h,a
  46+ AB6E              					ENDM
  47+ AB6E
  48+ AB6E              macronegate16de:	MACRO
  49+ AB6E ~            					xor 	a
  50+ AB6E ~                                sub 	e
  51+ AB6E ~                                ld 		e,a
  52+ AB6E ~                                sbc 	a,a
  53+ AB6E ~                                sub 	d
  54+ AB6E ~                                ld 		d,a
  55+ AB6E              					ENDM
  56+ AB6E              macronegate16bc:	MACRO
  57+ AB6E ~            					xor 	a
  58+ AB6E ~                                sub 	c
  59+ AB6E ~                                ld 		c,a
  60+ AB6E ~                                sbc 	a,a
  61+ AB6E ~                                sub 	b
  62+ AB6E ~                                ld 		b,a
  63+ AB6E              					ENDM
  64+ AB6E
  65+ AB6E              macronegate16ix:	MACRO
  66+ AB6E ~            					xor 	a
  67+ AB6E ~                                sub 	ixl
  68+ AB6E ~                                ld 		ixl,a
  69+ AB6E ~                                sbc 	a,a
  70+ AB6E ~                                sub 	ixh
  71+ AB6E ~                                ld 		ixh,a
  72+ AB6E              					ENDM
# file closed: ./Maths/negate16.asm
1020  AB6E                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ AB6E DD 68        AequAdivDmul96Unsg:     ld			ixl,b						; Get sign bit passed in as bit 7 in b
   2+ AB70                                      JumpIfAGTENusng d, TISXAccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   2+ AB70 BA          >                        cp     d
   2+ AB71 D2 86 AB    >                        jp		nc,TISXAccGTEQ
   3+ AB74 4F                                   ld			c,a
   4+ AB75 CD BB A9                             call		asm_div8
   5+ AB78 79                                   ld			a,c							; a = result
   6+ AB79 CB 3F                                srl			a							; result / 4
   7+ AB7B 47                                   ld			b,a							; t = t /4
   8+ AB7C CB 3F                                srl			a							; result / 8
   9+ AB7E 80                                   add			a,b							; result /8 + result /4
  10+ AB7F 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
  11+ AB80 DD 7D                                ld			a,ixl						; copy of Acc to look at sign bit
  12+ AB82 E6 80                                and			$80							; recover sign only
  13+ AB84 B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  14+ AB85 C9                                   ret
  15+ AB86              TISXAccGTEQ:
  16+ AB86              ;TI4:										;\ clean to +/- unity
  17+ AB86 DD 7D                                ld			a,ixl     					; get saved sign from b
  18+ AB88 E6 80                                and			$80							; copy of Acc
  19+ AB8A F6 60                                or			$60							; unity
  20+ AB8C C9                                   ret
  21+ AB8D
  22+ AB8D
  23+ AB8D
  24+ AB8D
  25+ AB8D              normaliseXX1596fast:
  26+ AB8D                  ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  27+ AB8D 3A 79 C0     	ld		a,(XX15)		    ; XX15+0
  28+ AB90 DD 67        	ld		ixh,a               ; ixh = signed x component
  29+ AB92 E6 7F        	and		SignMask8Bit                 ; a = unsigned version
  30+ AB94              N96SQX:
  31+ AB94              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  31+ AB94 5F          >			ld	e,a
  31+ AB95 57          >			ld  d,a
  31+ AB96 ED 30       >			mul
  32+ AB98 62           	ld		h,d					; h == varR d = varO e= varA
  33+ AB99 6B           	ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  34+ AB9A              N96SQY:
  35+ AB9A 3A 7A C0     	ld		a,(XX15+1)
  36+ AB9D DD 6F        	ld		ixl,a               ; ixl = signed y componet
  37+ AB9F E6 7F        	and		SignMask8Bit                 ; = abs
  38+ ABA1              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  38+ ABA1 5F          >			ld	e,a
  38+ ABA2 57          >			ld  d,a
  38+ ABA3 ED 30       >			mul
  39+ ABA5 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  40+ ABA6              N96SQZ:
  41+ ABA6 3A 7B C0     	ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  42+ ABA9 FD 67        	ld		iyh,a               ; iyh = signed
  43+ ABAB E6 7F        	and		SignMask8Bit                 ; unsigned
  44+ ABAD              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  44+ ABAD 5F          >			ld	e,a
  44+ ABAE 57          >			ld  d,a
  44+ ABAF ED 30       >			mul
  45+ ABB1              N96SQADD:
  46+ ABB1 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  47+ ABB2 EB           	ex		de,hl				; hl => de ready for square root
  48+ ABB3              N96SQRT:
  49+ ABB3 CD CC A8     	call	asm_sqrt			; hl = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  50+ ABB6              N96NORMX:
  51+ ABB6 3A 79 C0     	ld		a,(XX15+0)
  52+ ABB9 E6 7F        	and		SignMask8Bit
  53+ ABBB 4F           	ld		c,a
  54+ ABBC 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  55+ ABBD CD E4 AD     	call	AequAdivDmul96	; does not use HL so we can retain it
  56+ ABC0 47           	ld		b,a				;++SGN
  57+ ABC1 DD 7C        	ld		a,ixh			;++SGN
  58+ ABC3 E6 80        	and		$80				;++SGN
  59+ ABC5 B0           	or		b				;++SGN
  60+ ABC6 32 79 C0     	ld		(XX15+0),a
  61+ ABC9              N96NORMY:
  62+ ABC9 3A 7A C0     	ld		a,(XX15+1)
  63+ ABCC E6 7F        	and		SignMask8Bit
  64+ ABCE 4F           	ld		c,a
  65+ ABCF 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  66+ ABD0 CD E4 AD     	call	AequAdivDmul96     	; does not use HL so we can retain it
  67+ ABD3 47           	ld		b,a				;++SGN
  68+ ABD4 DD 7D        	ld		a,ixl			;++SGN
  69+ ABD6 E6 80        	and		$80				;++SGN
  70+ ABD8 B0           	or		b				;++SGN
  71+ ABD9 32 7A C0     	ld		(XX15+1),a
  72+ ABDC              N96NORMZ:
  73+ ABDC 3A 7B C0     	ld		a,(XX15+2)
  74+ ABDF E6 7F        	and		SignMask8Bit
  75+ ABE1 4F           	ld		c,a
  76+ ABE2 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  77+ ABE3 CD E4 AD     	call	AequAdivDmul96	; does not use HL so we can retain it
  78+ ABE6 47           	ld		b,a				;++SGN
  79+ ABE7 FD 7C        	ld		a,iyh			;++SGN
  80+ ABE9 E6 80        	and		$80				;++SGN
  81+ ABEB B0           	or		b				;++SGN
  82+ ABEC 32 7B C0     	ld		(XX15+2),a
  83+ ABEF C9           	ret
  84+ ABF0
  85+ ABF0              ; Normalise vector
  86+ ABF0              ; scale Q = Sqrt (X^2 + Y^2 + Z^2)
  87+ ABF0              ; X = X / Q with 96 = 1 , i.e X = X / Q * 3/8
  88+ ABF0              ; Y = Y / Q with 96 = 1 , i.e Y = Y / Q * 3/8
  89+ ABF0              ; Z = Z / Q with 96 = 1 , i.e Z = Z / Q * 3/8
  90+ ABF0              ;
  91+ ABF0              ;
  92+ ABF0              ;
  93+ ABF0
  94+ ABF0              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  95+ ABF0 3A 79 C0     normaliseXX1596:        ld		a,(XX15)		    ; XX15+0
  96+ ABF3                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  96+ ABF3 5F          >			ld	e,a
  96+ ABF4 57          >			ld  d,a
  96+ ABF5 ED 30       >			mul
  97+ ABF7 7A                                   ld		a,d
  98+ ABF8 32 97 97                             ld		(varR),a			; R	 \ hi sum later use b
  99+ ABFB 7B                                   ld		a,e
 100+ ABFC 32 96 97                             ld		(varQ),a			; Q	 \ lo sum later use c
 101+ ABFF 32 85 96                             ld		(varP),a			; P	 \ lo sum later just drop
 102+ AC02 3A 7A C0                             ld		a,(XX15+1)
 103+ AC05                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 103+ AC05 5F          >			ld	e,a
 103+ AC06 57          >			ld  d,a
 103+ AC07 ED 30       >			mul
 104+ AC09 7A                                   ld		a,d
 105+ AC0A 32 B3 97                             ld		(varT),a			; T	 \ hi sum
 106+ AC0D 7B                                   ld		a,e
 107+ AC0E 32 85 96                             ld		(varP),a			; P	 \ lo sum
 108+ AC11 21 96 97                             ld		hl,varQ
 109+ AC14 8E                                   adc		a,(hl)				; +Q
 110+ AC15 32 96 97                             ld		(varQ),a			; =>Q
 111+ AC18 3A B3 97                             ld		a,(varT)			;
 112+ AC1B 21 97 97                             ld		hl,varR
 113+ AC1E 8E                                   adc		a,(hl)				;  R
 114+ AC1F 32 97 97                             ld		(varR),a			; R
 115+ AC22 3A 7B C0                             ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
 116+ AC25                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 116+ AC25 5F          >			ld	e,a
 116+ AC26 57          >			ld  d,a
 116+ AC27 ED 30       >			mul
 117+ AC29 7A                                   ld		a,d
 118+ AC2A 32 B3 97                             ld		(varT),a			; T	 \ hi sum
 119+ AC2D 7B                                   ld		a,e
 120+ AC2E 32 85 96                             ld		(varP),a			; P	 \ lo sum
 121+ AC31 21 96 97                             ld		hl,varQ
 122+ AC34 8E                                   adc		a,(hl)				; +Q
 123+ AC35 32 96 97                             ld		(varQ),a			; =>Q  xlo2 + ylo2 + zlo2
 124+ AC38 3A B3 97                             ld		a,(varT)			; T temp Hi
 125+ AC3B 21 97 97                             ld		hl,varR
 126+ AC3E 8E                                   adc		a,(hl)				; +R
 127+ AC3F 32 97 97                             ld		(varR),a			; R
 128+ AC42 CD EF A8                             call	sqrtQR				; Q = SQR(Qlo.Rhi) Q <~127
 129+ AC45 3A 79 C0                             ld		a,(XX15+0)
 130+ AC48 CD DE AD                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 131+ AC4B 32 79 C0                             ld		(XX15+0),a
 132+ AC4E 3A 7A C0                             ld		a,(XX15+1)
 133+ AC51 CD DE AD                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 134+ AC54 32 7A C0                             ld		(XX15+1),a
 135+ AC57 3A 7A C0                             ld		a,(XX15+1)
 136+ AC5A CD DE AD                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 137+ AC5D 32 7A C0                             ld		(XX15+1),a
 138+ AC60 C9                                   ret
 139+ AC61
 140+ AC61
# file closed: ./Maths/normalise96.asm
1021  AC61                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ AC61              ;Number in hl to decimal ASCII
   2+ AC61              ;Thanks to z80 Bits
   3+ AC61              ;inputs:	hl = number to ASCII
   4+ AC61              ;example: hl=300 outputs '00300'
   5+ AC61              ;destroys: af, bc, hl, de used
   6+ AC61              DispHLtoDE:
   7+ AC61              ; "DispHL, writes HL to DE address"
   8+ AC61 01 F0 D8     	ld	bc,-10000
   9+ AC64 CD 7A AC     	call	Num1
  10+ AC67 01 18 FC     	ld	bc,-1000
  11+ AC6A CD 7A AC     	call	Num1
  12+ AC6D 01 9C FF     	ld	bc,-100
  13+ AC70 CD 7A AC     	call	Num1
  14+ AC73 0E F6        	ld	c,-10
  15+ AC75 CD 7A AC     	call	Num1
  16+ AC78 0E FF        	ld	c,-1
  17+ AC7A              Num1:
  18+ AC7A 3E 2F        	ld	a,'0'-1
  19+ AC7C              .Num2:
  20+ AC7C 3C           	inc	a
  21+ AC7D 09           	add	hl,bc
  22+ AC7E 38 FC        	jr	c,.Num2
  23+ AC80 ED 42        	sbc	hl,bc
  24+ AC82 12           	ld	(de),a
  25+ AC83 13           	inc	de
  26+ AC84 C9           	ret
  27+ AC85
  28+ AC85              DispAtoDE:
  29+ AC85 26 00        	ld h,0
  30+ AC87 6F           	ld l,a
  31+ AC88 C3 61 AC     	jp DispHLtoDE
  32+ AC8B
  33+ AC8B              DispPriceAtoDE:
  34+ AC8B 26 00        	ld h,0
  35+ AC8D 6F           	ld l,a
  36+ AC8E 01 9C FF     	ld	bc,-100
  37+ AC91 CD A1 AC     	call	.NumLeadBlank1
  38+ AC94 0E F6        	ld	c,-10
  39+ AC96 CD 7A AC     	call	Num1
  40+ AC99 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ AC9B 12           	ld		(de),a					; we can optimse that later TODO
  42+ AC9C 13           	inc		de						; with just an inc De
  43+ AC9D 0E FF        	ld	c,-1
  44+ AC9F 18 D9        	jr		Num1
  45+ ACA1              .NumLeadBlank1:
  46+ ACA1 3E 2F        	ld	a,'0'-1
  47+ ACA3              .NumLeadBlank2:
  48+ ACA3 3C           	inc	a
  49+ ACA4 09           	add	hl,bc
  50+ ACA5 38 FC        	jr	c,.NumLeadBlank2
  51+ ACA7 FE 30        	cp	'0'
  52+ ACA9 20 02        	jr	nz,.DontBlank
  53+ ACAB              .Blank:
  54+ ACAB 3E 20        	ld	a,' '
  55+ ACAD              .DontBlank:
  56+ ACAD ED 42        	sbc	hl,bc
  57+ ACAF 12           	ld	(de),a
  58+ ACB0 13           	inc	de
  59+ ACB1 C9           	ret
  60+ ACB2
  61+ ACB2              DispQtyAtoDE:
  62+ ACB2 FE 00        	cp	0
  63+ ACB4 28 23        	jr	z,.NoStock
  64+ ACB6 26 00        	ld h,0
  65+ ACB8 6F           	ld l,a
  66+ ACB9 01 9C FF     	ld	bc,-100
  67+ ACBC CD C8 AC     	call	.NumLeadBlank1
  68+ ACBF 0E F6        	ld	c,-10
  69+ ACC1 CD C8 AC     	call	.NumLeadBlank1
  70+ ACC4 0E FF        	ld	c,-1
  71+ ACC6 18 B2        	jr		Num1
  72+ ACC8              .NumLeadBlank1:
  73+ ACC8 3E 2F        	ld	a,'0'-1
  74+ ACCA              .NumLeadBlank2:
  75+ ACCA 3C           	inc	a
  76+ ACCB 09           	add	hl,bc
  77+ ACCC 38 FC        	jr	c,.NumLeadBlank2
  78+ ACCE FE 30        	cp	'0'
  79+ ACD0 20 02        	jr	nz,.DontBlank
  80+ ACD2              .Blank:
  81+ ACD2 3E 20        	ld	a,' '
  82+ ACD4              .DontBlank:
  83+ ACD4 ED 42        	sbc	hl,bc
  84+ ACD6 12           	ld	(de),a
  85+ ACD7 13           	inc	de
  86+ ACD8 C9           	ret
  87+ ACD9              .NoStock:
  88+ ACD9 3E 20        	ld	a,' '
  89+ ACDB 12           	ld	(de),a
  90+ ACDC 13           	inc	de
  91+ ACDD 12           	ld	(de),a
  92+ ACDE 13           	inc	de
  93+ ACDF 3E 2D        	ld	a,'-'
  94+ ACE1 12           	ld	(de),a
  95+ ACE2 13           	inc de
  96+ ACE3 C9           	ret
  97+ ACE4
  98+ ACE4
  99+ ACE4              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ ACE4              ;### Input      DE,IX=32bit value, IY=destination address
 101+ ACE4              ;### Output     IY=last char in destination string
 102+ ACE4              ;### Destroyed AF,BC,DE,HL,IX
 103+ ACE4 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ ACE8 0A 00 00 00
 103+ ACEC 64 00 00 00
 103+ ACF0 E8 03 00 00
 103+ ACF4 10 27 00 00
 104+ ACF8 A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ ACFC 40 42 0F 00
 104+ AD00 80 96 98 00
 104+ AD04 00 E1 F5 05
 104+ AD08 00 CA 9A 3B
 105+ AD0C 00 00 00 00  clcn32z ds 4
 106+ AD10
 107+ AD10              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ AD10 CD 1F AD     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ AD13 FD 7E 00                             ld      a,(IY+0)
 110+ AD16 FD 77 01                             ld      (IY+1),a
 111+ AD19 3E 2E                                ld      a,"."
 112+ AD1B FD 77 00                             ld      (IY+0),a
 113+ AD1E C9                                   ret
 114+ AD1F
 115+ AD1F DD 22 0C AD  DispDEIXtoIY:           ld (clcn32z),ix
 116+ AD23 ED 53 0E AD                          ld (clcn32z+2),de
 117+ AD27 DD 21 08 AD                          ld ix,clcn32t+36
 118+ AD2B 06 09                                ld b,9
 119+ AD2D 0E 00                                ld c,0
 120+ AD2F 3E 30        .clcn321:               ld a,'0'
 121+ AD31 B7                                   or a
 122+ AD32 DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ AD35 DD 56 01                             ld d,(ix+1)
 124+ AD38 2A 0C AD                             ld hl,(clcn32z)
 125+ AD3B ED 52                                sbc hl,de
 126+ AD3D 22 0C AD                             ld (clcn32z),hl
 127+ AD40 DD 5E 02                             ld e,(ix+2)
 128+ AD43 DD 56 03                             ld d,(ix+3)
 129+ AD46 2A 0E AD                             ld hl,(clcn32z+2)
 130+ AD49 ED 52                                sbc hl,de
 131+ AD4B 22 0E AD                             ld (clcn32z+2),hl
 132+ AD4E 38 04                                jr c,.clcn325
 133+ AD50 0C                                   inc c
 134+ AD51 3C                                   inc a
 135+ AD52 18 DE                                jr .clcn322
 136+ AD54 DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ AD57 DD 56 01                             ld d,(ix+1)
 138+ AD5A 2A 0C AD                             ld hl,(clcn32z)
 139+ AD5D 19                                   add hl,de
 140+ AD5E 22 0C AD                             ld (clcn32z),hl
 141+ AD61 DD 5E 02                             ld e,(ix+2)
 142+ AD64 DD 56 03                             ld d,(ix+3)
 143+ AD67 2A 0E AD                             ld hl,(clcn32z+2)
 144+ AD6A ED 5A                                adc hl,de
 145+ AD6C 22 0E AD                             ld (clcn32z+2),hl
 146+ AD6F 11 FC FF                             ld de,-4
 147+ AD72 DD 19                                add ix,de
 148+ AD74 0C                                   inc c
 149+ AD75 0D                                   dec c
 150+ AD76 28 05                                jr z,.clcn323
 151+ AD78 FD 77 00                             ld (iy+0),a
 152+ AD7B FD 23                                inc iy
 153+ AD7D 10 B0        .clcn323:               djnz .clcn321
 154+ AD7F 3A 0C AD                             ld a,(clcn32z)
 155+ AD82 C6 30                                add A,'0'
 156+ AD84 FD 77 00                             ld (iy+0),a
 157+ AD87 FD 36 01 00                          ld (iy+1),0
 158+ AD8B C9                                   ret
 159+ AD8C
# file closed: ./Maths/binary_to_decimal.asm
1022  AD8C                  include "./Maths/ADDHLDESignBC.asm"
# file opened: ./Maths/ADDHLDESignBC.asm
   1+ AD8C              ;; calcs HLB + DEC where B and C are signs
   2+ AD8C              ;; result HL with A as sign
   3+ AD8C              ;; special handling if result is zero forcign sign bit to be zero
   4+ AD8C 78           ADDHLDESignBC:          ld      a,b
   5+ AD8D E6 80                                and     SignOnly8Bit
   6+ AD8F A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
   7+ AD90                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
   7+ AD90 FA 9E AD    >                        jp		m, ADDHLDEsBCOppSGN
   8+ AD93 78           ADDHLDEsBCSameSigns:    ld      a,b
   9+ AD94 B1                                   or      c
  10+ AD95                                      JumpIfNegative ADDHLDEsBCSameNeg        ; optimisation so we can just do simple add if both positive
  10+ AD95 FA 9A AD    >                        jp		m, ADDHLDEsBCSameNeg
  11+ AD98 19                                   add     hl,de                       ; both positive so a will already be zero
  12+ AD99 C9                                   ret
  13+ AD9A 19           ADDHLDEsBCSameNeg:      add     hl,de
  14+ AD9B 78                                   ld      a,b
  15+ AD9C B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  16+ AD9D C9                                   ret
  17+ AD9E B7           ADDHLDEsBCOppSGN:       or      a
  18+ AD9F ED 52                                sbc     hl,de
  19+ ADA1 38 02                                jr      c,ADDHLDEsBCOppInvert
  20+ ADA3 78           ADDHLDEsBCOppSGNNoCarry: ld      a,b                                               ; we got here so hl > de therefore we can just take hl's previous sign bit
  21+ ADA4 C9                                   ret
  22+ ADA5              ADDHLDEsBCOppInvert:    NegHL                         ; if result was zero then set sign to zero (which doing h or l will give us for free)
  22+ ADA5 AF          >                    xor a
  22+ ADA6 95          >                    sub l
  22+ ADA7 6F          >                    ld l,a
  22+ ADA8 9F          >                    sbc a,a
  22+ ADA9 94          >                    sub h
  22+ ADAA 67          >                    ld h,a
  23+ ADAB 78                                   ld      a,b
  24+ ADAC EE 80                                xor     SignOnly8Bit                ; flip sign bit
  25+ ADAE C9                                   ret
  26+ ADAF
# file closed: ./Maths/ADDHLDESignBC.asm
1023  ADAF              ;INCLUDE "badd_ll38.asm"
1024  ADAF              ;;INCLUDE "XX12equXX15byXX16.asm"
1025  ADAF                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ ADAF              AequAdivQmul96ABS:      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   1+ ADAF BA          >                        cp     d
   1+ ADB0 D2 CB AD    >                        jp		nc,.TIS2AccGTEQ
   2+ ADB3 06 FE                                ld			b,$FE						; division roll (replaced varT)
   3+ ADB5 CB 27        .TIS2RollTLoop:			sla			a
   4+ ADB7                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
   4+ ADB7 BA          >                        cp      d
   4+ ADB8 DA CE AD    >                        jp		c, .TIS2SkipSub
   5+ ADBB 9A                                   sbc			a,d							; do subtraction with carry
   6+ ADBC 37                                   scf
   7+ ADBD CB 10                                rl			b							; T rolled left to push bit out the end
   8+ ADBF 38 F4                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
   9+ ADC1 78           .TIS2SKIPCont:	        ld			a,b							; T
  10+ ADC2 CB 3F                                srl			a							; result / 2
  11+ ADC4 CB 3F                                srl			a							; result / 4
  12+ ADC6 47                                   ld			b,a							; t = t /4
  13+ ADC7 CB 3F                                srl			a							; result / 8
  14+ ADC9 80                                   add			a,b							; result /8 + result /4
  15+ ADCA C9                                   ret
  16+ ADCB 3E 60        .TIS2AccGTEQ:           ld			a,$60							; unity
  17+ ADCD C9                                   ret
  18+ ADCE B7           .TIS2SkipSub:           or			a
  19+ ADCF CB 10                                rl			b							; T rolled left to push bit out the end
  20+ ADD1 38 E2                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  21+ ADD3 C3 C1 AD                             jp			.TIS2SKIPCont
  22+ ADD6
  23+ ADD6
  24+ ADD6              ; USES 			A DE BC
  25+ ADD6              ; DOES NOT USE 	HL
  26+ ADD6              TIS2962C:		; two's compliment entry point, exits not 2's compliment
  27+ ADD6 CB 7F        	bit			7,a
  28+ ADD8 28 04        	jr			z,AequAdivQmul96
  29+ ADDA ED 44        	neg										; revers 2s'c and just set neg bit
  30+ ADDC CB FF        	set			7,a
  31+ ADDE              ; Note negative numbers are bit 7 set not 2's compliment
  32+ ADDE              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  33+ ADDE              TIS2:
  34+ ADDE 4F           	ld			c,a							; copy of Acc
  35+ ADDF 3A 96 97     	ld			a,(varQ)
  36+ ADE2 57           	ld			d,a							; d = varQ
  37+ ADE3 79           	ld			a,c							; recover a
  38+ ADE4              AequAdivDmul96:
  39+ ADE4 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  40+ ADE5 E6 7F        	and			SignMask8Bit				; ignore sign
  41+ ADE7              	JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  41+ ADE7 BA          >                        cp     d
  41+ ADE8 D2 08 AE    >                        jp		nc,.TIS2AccGTEQ
  42+ ADEB 06 FE        	ld			b,$FE						; division roll (replaced varT)
  43+ ADED              .TIS2RollTLoop:									; .TIL2	; roll T
  44+ ADED CB 27        	sla			a
  45+ ADEF              	JumpIfALTNusng d,.TIS2SkipSub            ; a < d so don;t subtract
  45+ ADEF BA          >                        cp      d
  45+ ADF0 DA 0E AE    >                        jp		c, .TIS2SkipSub
  46+ ADF3 9A           	sbc			a,d							; do subtraction with carry
  47+ ADF4 37           	scf
  48+ ADF5 CB 10        	rl			b							; T rolled left to push bit out the end
  49+ ADF7 38 F4        	jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  50+ ADF9              .TIS2SKIPCont:
  51+ ADF9 78           	ld			a,b							; T
  52+ ADFA CB 3F        	srl			a							; result / 2
  53+ ADFC CB 3F        	srl			a							; result / 4
  54+ ADFE 47           	ld			b,a							; t = t /4
  55+ ADFF CB 3F        	srl			a							; result / 8
  56+ AE01 80           	add			a,b							; result /8 + result /4
  57+ AE02 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  58+ AE03 79           	ld			a,c							; copy of Acc to look at sign bit
  59+ AE04 E6 80        	and			$80							; recover sign only
  60+ AE06 B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  61+ AE07 C9           	ret
  62+ AE08              .TIS2AccGTEQ:
  63+ AE08              ;TI4:										;\ clean to +/- unity
  64+ AE08 79           	ld			a,c
  65+ AE09 E6 80        	and			$80							; copy of Acc
  66+ AE0B F6 60        	or			$60							; unity
  67+ AE0D C9           	ret
  68+ AE0E              .TIS2SkipSub:
  69+ AE0E B7           	or			a
  70+ AE0F CB 10        	rl			b							; T rolled left to push bit out the end
  71+ AE11 38 DA        	jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  72+ AE13 C3 F9 AD     	jp			.TIS2SKIPCont
  73+ AE16
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
1026  AE16                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ AE16              fmltu:
   2+ AE16              AequAmulQdiv256:
   3+ AE16              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   4+ AE16 57           	ld	d,a
   5+ AE17 3A 96 97     	ld	a,(varQ)
   6+ AE1A 5F           	ld	e,a
   7+ AE1B ED 30        	mul
   8+ AE1D 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   9+ AE1E C9           	ret
  10+ AE1F
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
1027  AE1F                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ AE1F              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ AE1F              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ AE1F 21 81 9A     		ld		hl,varDustZ
   4+ AE22 FD 7D        		ld		a,iyl
   5+ AE24 ED 31        		add		hl,a
   6+ AE26 7E           		ld		a,(hl)
   7+ AE27 C3 33 AE     		jp		DV41
   8+ AE2A              DV42:										; travel step of dust particle front/rear
   9+ AE2A 21 81 9A     		ld		hl,varDustZ
  10+ AE2D 3A 73 96     		ld		a,(regY)
  11+ AE30 ED 31        		add		hl,a
  12+ AE32 7E           		ld		a,(hl)						; a = SZ[y]
  13+ AE33              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ AE33 5F           		ld		e,a							; using E as Q var replacement
  15+ AE34 3A 92 97     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ AE37              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ AE37 06 08        		ld		b,8							; counter
  18+ AE39 CB 27        		sla		a							;
  19+ AE3B 57           		ld		d,a							; use d for - p = delta * 2
  20+ AE3C AF           		xor		a
  21+ AE3D              DVL4:										; counter x loop (b reg)
  22+ AE3D CB 17        		rl		a							; a = a * 2
  23+ AE3F 38 03        		jr		c,DV8						; jump on carry
  24+ AE41 BB           		cp		e							; var Q
  25+ AE42 38 02        		jr		c,DV5						; skip subtraction
  26+ AE44              DV8:
  27+ AE44 9B           		sbc		a,e							; a = a - q (with carry)
  28+ AE45 37           		scf									;  carry gets set
  29+ AE46              DV5:										; skipped subtraction
  30+ AE46 CB 12        		rl		d							; d (P hi)
  31+ AE48 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ AE4A              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ AE4A              ; Note we are not going to call LL28+4 but inline code here:
  34+ AE4A 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ AE4C 4F           		ld		c,a							; use c as R var
  36+ AE4D              .RollRemainder:
  37+ AE4D CB 27        		sla		a
  38+ AE4F 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ AE51 B8           		cp		b							; a < q?
  40+ AE52 30 01        		jr		nc,.DontSBC
  41+ AE54              .DoSBC:										; a is < q
  42+ AE54 98           		sbc		a,b							; 	a -= q
  43+ AE55              .DontSBC:
  44+ AE55 CB 11        		rl		c							; r << 1
  45+ AE57 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ AE59 79           		ld		a,c
  47+ AE5A 32 97 97     		ld		(varR),a					; for backwards compat
  48+ AE5D 7A           		ld		a,d
  49+ AE5E 32 85 96     		ld		(varP),a
  50+ AE61 C9           		ret									; R (c) left with remainder
  51+ AE62              .Reduce:									; a geneated a carry
  52+ AE62 98           		sbc		a,b							; a = a - (q +1)
  53+ AE63 37           		scf									; set carry flag for rl
  54+ AE64 CB 11        		rl		c							; r << 1 briging in carry
  55+ AE66 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ AE68 79           		ld		a,c
  57+ AE69 32 97 97     		ld		(varR),a					; for backwards compat
  58+ AE6C 7A           		ld		a,d
  59+ AE6D 32 85 96     		ld		(varP),a
  60+ AE70 C9           		ret
  61+ AE71              .AnswerTooBig:
  62+ AE71 0E FF        		ld		c,$FF						; arse its too big
  63+ AE73 79           		ld		a,c
  64+ AE74 32 97 97     		ld		(varR),a					; for backwards compat
  65+ AE77 7A           		ld		a,d
  66+ AE78 32 85 96     		ld		(varP),a
  67+ AE7B C9           		ret
  68+ AE7C
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
1028  AE7C                  INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ AE7C
   2+ AE7C              asm_defmutl:
   3+ AE7C              AequDmulEdiv256usgn:
   4+ AE7C              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ AE7C ED 30        	mul
   6+ AE7E 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ AE7F C9           	ret
   8+ AE80
   9+ AE80
# file closed: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
1029  AE80              ;INCLUDE "AP2equAPmulQunsgEorP-MLTU2.asm"
1030  AE80              ;INCLUDE "APequPmulQUnsg-MULTU.asm"
1031  AE80              ;INCLUDE "APequPmulX-MU11.asm"
1032  AE80                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ AE80              APequQmulA:
   2+ AE80              asm_mult1:
   3+ AE80              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ AE80 FE 00        	cp	0
   5+ AE82 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ AE84 5F           	ld	e,a
   7+ AE85 3A 96 97     	ld	a,(varQ)
   8+ AE88 57           	ld	d,a
   9+ AE89 FE 00        	cp	0				; compare a
  10+ AE8B 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ AE8D AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ AE8E E6 80        	and $80				; get the resultant sign and save into b
  13+ AE90 47           	ld	b,a
  14+ AE91 7A           	ld	a,d
  15+ AE92 E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ AE94 57           	ld	d,a
  17+ AE95 7B           	ld	a,e
  18+ AE96 E6 7F        	and SignMask8Bit
  19+ AE98 5F           	ld	e,a
  20+ AE99 ED 30        	mul					; zxn de = d * e
  21+ AE9B 7B           	ld	a,e
  22+ AE9C 32 85 96     	ld	(varP),a		; p = lo
  23+ AE9F 7A           	ld	a,d				; a = hi
  24+ AEA0 B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ AEA1 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ AEA2 C9           	ret
  27+ AEA3              .mul0:
  28+ AEA3 AF           	xor	a
  29+ AEA4 32 85 96     	ld	(varP),a
  30+ AEA7 57           	ld	d,a
  31+ AEA8 5F           	ld  e,a
  32+ AEA9 C9           	ret
  33+ AEAA
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
1033  AEAA                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ AEAA              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ AEAA              SAEquSRPlusAQ:
   3+ AEAA              ; Calculate the following between sign-magnitude numbers:
   4+ AEAA              ;   (S A) = (S R) + (A Q)
   5+ AEAA              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ AEAA              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ AEAA              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ AEAA              LL38:
   9+ AEAA              ;	ld		d,a
  10+ AEAA              ;	ld		a,(varQ)
  11+ AEAA              ;	ld		e,a
  12+ AEAA              ;	ld		a,(varS)
  13+ AEAA              ;	ld		h,a
  14+ AEAA              ;	ld		a,(varR)
  15+ AEAA              ;	ld		l,a
  16+ AEAA              ;	call	ADDHLDESignedv3
  17+ AEAA              ;	ld		a,h
  18+ AEAA              ;	ld		(varS),a
  19+ AEAA              ;	ld		a,l
  20+ AEAA              ;	ret
  21+ AEAA              ; calculation table
  22+ AEAA              ;   R     Q    Op            Sign calc
  23+ AEAA              ;	10    5    Add           +    sign same add R sign
  24+ AEAA              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ AEAA              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ AEAA              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ AEAA              ;   5    10    Add           +    sign same add R sign
  28+ AEAA              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ AEAA              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ AEAA              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ AEAA
  32+ AEAA              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ AEAA              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ AEAA              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ AEAA              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ AEAA
  37+ AEAA
  38+ AEAA              ; Calculate sign for Q from A and varS
  39+ AEAA 21 98 97     	ld		hl,varS							;
  40+ AEAD AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ AEAE FA B9 AE     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ AEB1 3A 96 97     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ AEB4 21 97 97     	ld		hl,varR
  44+ AEB7 86           	add		a,(hl)							; a = Q + R
  45+ AEB8 C9           	ret										; Done carry set if overflow
  46+ AEB9              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ AEB9 3A 97 97     	ld		a,(varR)						; a = R
  48+ AEBC 21 96 97     	ld		hl,varQ                         ; Q
  49+ AEBF              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ AEBF              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ AEBF B7          >                        or a
  51+ AEC0 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ AEC1 38 01            jr      c,.LL39SignCorrection
  53+ AEC3              ;--    jr      a,.LL39ResultZero
  54+ AEC3              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ AEC3              ;--	or		a								; Clear carry flag to say result is correct
  56+ AEC3 C9           	ret
  57+ AEC4              .LL39SignCorrection:
  58+ AEC4 FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ AEC6 28 0E            jr      z,.LL39ResultZero
  60+ AEC8 ED 44            neg                                     ; flip A 2'c value to positive
  61+ AECA 08           	ex		af,af'							; save A temporarily
  62+ AECB 3A 98 97     	ld		a,(varS)						; Flip Sign bit in varS
  63+ AECE EE 80        	xor		$80							    ;
  64+ AED0 32 98 97     	ld		(varS),a                        ; flip sign bit of a
  65+ AED3 08           	ex		af,af'                          ; get back a which is the result
  66+ AED4                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ AED4 B7          >                        or a
  67+ AED5 C9           	ret
  68+ AED6              .LL39ResultZero:
  69+ AED6 32 98 97         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ AED9                  ClearCarryFlag                          ; clear carry
  70+ AED9 B7          >                        or a
  71+ AEDA C9               ret
  72+ AEDB              ;--LL39SwapSubtraction:
  73+ AEDB              ;--	push	bc
  74+ AEDB              ;--	ld		b,a
  75+ AEDB              ;--	ld		a,(hl)
  76+ AEDB              ;--	sub		b
  77+ AEDB              ;--	pop		bc
  78+ AEDB              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ AEDB              ;--	ld		a,(varS)
  80+ AEDB              ;--	xor		$80
  81+ AEDB              ;--	ld		(varS),a
  82+ AEDB              ;--	ex		af,af'
  83+ AEDB              ;--	ret
  84+ AEDB
  85+ AEDB              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ AEDB              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ AEDB              ;;;;;   (S A) = (S R) + (A Q)
  88+ AEDB              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ AEDB              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ AEDB              ;;;;LL38:
  91+ AEDB              ;;;;; Calculate sign for Q from A and varS
  92+ AEDB              ;;;;	ld		hl,varS							;
  93+ AEDB              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ AEDB              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ AEDB              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ AEDB              ;;;;	ld		hl,varR
  97+ AEDB              ;;;;	add		a,(hl)							; a = Q + R
  98+ AEDB              ;;;;	ret										; Done
  99+ AEDB              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ AEDB              ;;;;	ld		hl,varQ                         ;
 101+ AEDB              ;;;;	ld		a,(hl)
 102+ AEDB              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ AEDB              ;;;;	ld		a,(varR)						;
 104+ AEDB              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ AEDB              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ AEDB              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ AEDB              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ AEDB              ;;;;	ret
 109+ AEDB              ;;;;.SignCorrection:
 110+ AEDB              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ AEDB              ;;;;	ex		af,af'							; save A temporarily
 112+ AEDB              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ AEDB              ;;;;	xor		$80							    ;
 114+ AEDB              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ AEDB              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ AEDB              ;;;;	ret
 117+ AEDB              ;;;;LL39Sub16Bit:
 118+ AEDB              ;;;;	ld		e,a
 119+ AEDB              ;;;;	ld		d,0
 120+ AEDB              ;;;;	ld		a,(varR)
 121+ AEDB              ;;;;	ld		l,a
 122+ AEDB              ;;;;	ld		h,0
 123+ AEDB              ;;;;	ClearCarryFlag
 124+ AEDB              ;;;;	sbc		hl,de
 125+ AEDB              ;;;;	jr		c,.SignCorrection16bit
 126+ AEDB              ;;;;	bit		7,h
 127+ AEDB              ;;;;	jr		z,.GoodToReturn
 128+ AEDB              ;;;;.Needtonegate:
 129+ AEDB              ;;;;	macronegate16hl
 130+ AEDB              ;;;;.GoodToReturn
 131+ AEDB              ;;;;	ld		a,l
 132+ AEDB              ;;;;	or		a
 133+ AEDB              ;;;;	ret
 134+ AEDB              ;;;;.SignCorrection16bit:
 135+ AEDB              ;;;;	macronegate16hl
 136+ AEDB              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ AEDB              ;;;;	xor		$80							    ;
 138+ AEDB              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ AEDB              ;;;;	ld		a,l
 140+ AEDB              ;;;;	ret
 141+ AEDB
 142+ AEDB
# file closed: ./Maths/Utilities/badd_ll38.asm
1034  AEDB                  INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
# file opened: ./Maths/Utilities/moveship4-MVS4.asm
   1+ AEDB              ; Note comparing hl vs iY, you need at least 3 incs or decs for hl to be slower
   2+ AEDB              ; it may be faster though if we can use hl to avoid memory actions if needed
   3+ AEDB              ; need to optimise mad as push hl pop hl and use de doesn't really improve speed
   4+ AEDB
   5+ AEDB
   6+ AEDB              moveship4Yreg:
   7+ AEDB 3A 73 96     		ld		a,(regY)
   8+ AEDE 47           		ld		b,a
   9+ AEDF              moveship4breg:
  10+ AEDF              		; b = Y index, 9 = nosev, 15 = roofv 21 = sidev
  11+ AEDF              MVS4PitchAlphaRollBeta:
  12+ AEDF              MVS4:										;.MVS4	\ -> &52A1 \ Moveship4, Y is matrix row, pitch&roll update to coordinates
  13+ AEDF 3A A2 96     		ld		a,(ALPHA)					;  ALPHA
  14+ AEE2 32 96 97     		ld		(varQ),a					; player ship's roll Q = Alpha
  15+ AEE5 21 0E C0     		ld		hl,UBnKxsgn
  16+ AEE8 78           		ld		a,b							; from
  17+ AEE9 ED 31        		add		hl,a
  18+ AEEB 7E           		ld		a,(hl)						; INWK+2,Y
  19+ AEEC 32 97 97     		ld		(varR),a					; R  \ lo
  20+ AEEF 23           		inc		hl
  21+ AEF0 7E           		ld		a,(hl)						; INWK+3,Y
  22+ AEF1 32 98 97     		ld		(varS),a					; S  \ hi		SR = nosev_y (or axis y)
  23+ AEF4 2B           		dec		hl
  24+ AEF5 2B           		dec		hl
  25+ AEF6 2B           		dec		hl							;
  26+ AEF7 7E           		ld		a,(hl)						; INWK+0,Y
  27+ AEF8 32 85 96     		ld		(varP),a					; P  \ over-written	 P = nosevx lo
  28+ AEFB 23           		inc		hl
  29+ AEFC 7E           		ld		a,(hl)						; INWK+1,Y
  30+ AEFD EE 80        		xor		$80							; flip sign  AP = nosevx * - 1
  31+ AEFF CD A2 A7     		call	madXAequQmulAaddRS			; MAD	\ DE = X.A = alpha*INWK+1,Y + INWK+2to3,Y
  32+ AF02 23                   inc     hl
  33+ AF03 23                   inc     hl
  34+ AF04 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  35+ AF05 2B                   dec     hl
  36+ AF06 3A 72 96             ld      a,(regX)
  37+ AF09 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-aX   \ their comment
  38+ AF0A 32 85 96             ld      (varP),a                    ;  P
  39+ AF0D 2B                   dec     hl
  40+ AF0E 2B                   dec     hl
  41+ AF0F 7E                   ld      a,(hl)                      ; INWK+0,Y
  42+ AF10 32 97 97             ld      (varR),a                    ;  R	\ lo
  43+ AF13 23                   inc     hl
  44+ AF14 7E                   ld      a,(hl)                      ;  INWK+1,Y
  45+ AF15 32 98 97             ld      (varS),a                    ; S	\ hi
  46+ AF18 23                   inc     hl
  47+ AF19 23                   inc     hl
  48+ AF1A 7E                   ld      a,(hl)                      ; INWK+3,Y
  49+ AF1B CD A2 A7             call    madXAequQmulAaddRS          ; MAD	\ X.A = alpha*INWK+3,Y + INWK+0to1,Y
  50+ AF1E 2B                   dec     hl
  51+ AF1F 2B                   dec     hl
  52+ AF20 77                   ld      (hl),a                      ; INWK+1,Y  \ hi
  53+ AF21 3A 72 96             ld      a,(regX)
  54+ AF24 2B                   dec     hl
  55+ AF25 77                   ld      (hl),a                      ; INWK+0,Y  \ X=X+aY   \ their comment
  56+ AF26 32 85 96             ld      (varP),a                    ; P
  57+ AF29 3A 91 96             ld      a,(BETA)                    ; BETA
  58+ AF2C 32 96 97             ld      (varQ),a                    ; Q	\ player ship's pitch
  59+ AF2F 23                   inc     hl
  60+ AF30 23                   inc     hl
  61+ AF31 7E                   ld      a,(hl)                      ; INWK+2,Y
  62+ AF32 32 97 97             ld      (varR),a                    ; R	\ lo
  63+ AF35 23                   inc     hl
  64+ AF36 7E                   ld      a,(hl)                      ; INWK+3,Y
  65+ AF37 32 98 97             ld      (varS),a                    ; S	\ hi
  66+ AF3A 23                   inc     hl
  67+ AF3B 7E                   ld      a,(hl)                      ; INWK+4,Y
  68+ AF3C 32 85 96             ld      (varP),a                    ; P	\ lo
  69+ AF3F 23                   inc     hl
  70+ AF40 7E                   ld      a,(hl)                      ; INWK+5,Y
  71+ AF41 EE 80                xor     $80                         ; flip sign hi
  72+ AF43 CD A2 A7             call    madXAequQmulAaddRS          ; MAD	\ X.A =-beta*INWK+5,Y + INWK+2to3,Y
  73+ AF46 2B                   dec     hl
  74+ AF47 2B                   dec     hl
  75+ AF48 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  76+ AF49 3A 72 96             ld      a,(regX)
  77+ AF4C 2B                   dec     hl
  78+ AF4D 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-bZ  \ their comment
  79+ AF4E 32 85 96             ld      (varP),a                    ; P
  80+ AF51 23                   inc     hl
  81+ AF52 23                   inc     hl
  82+ AF53 7E                   ld      a,(hl)                      ; INWK+4,Y
  83+ AF54 32 97 97             ld      (varR),a                    ; R	\ lo
  84+ AF57 23                   inc     hl
  85+ AF58 7E                   ld      a,(hl)                      ; INWK+5,Y
  86+ AF59 32 98 97             ld      (varS),a                    ; S	\ hi
  87+ AF5C 2B                   dec     hl
  88+ AF5D 2B                   dec     hl
  89+ AF5E 7E                   ld      a,(hl)                      ; INWK+3,Y
  90+ AF5F CD A2 A7             call    madXAequQmulAaddRS          ; MAD	\ X.A = beta*INWK+3,Y + INWK+4,5,Y
  91+ AF62 23                   inc     hl
  92+ AF63 23                   inc     hl
  93+ AF64 77                   ld      (hl),a                      ; INWK+5,Y \ hi
  94+ AF65 3A 72 96             ld      a,(regX)
  95+ AF68 2B                   dec     hl
  96+ AF69 77                   ld      (hl),a                      ; INWK+4,Y \ Z=Z+bY   \ their comment
  97+ AF6A C9                   ret
  98+ AF6B
  99+ AF6B
# file closed: ./Maths/Utilities/moveship4-MVS4.asm
1035  AF6B              ;INCLUDE "MoveShip5-MVS5.asm"
1036  AF6B              ;INCLUDE "PAequAmulQusgn-MLU2.asm"
1037  AF6B              ;INCLUDE "PAequDustYIdxYmulQ-MLU1.asm"
1038  AF6B              ;INCLUDE "PlanetP12addInwkX-MVT6.asm"
1039  AF6B                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ AF6B              ;;;LL28:
   2+ AF6B              ;;;    ld      c,a                         ;
   3+ AF6B              ;;;    ld      a,(varQ)                    ;
   4+ AF6B              ;;;    ld      b,a                         ;
   5+ AF6B              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ AF6B              ;;;RequAmul256divB:                        ;
   7+ AF6B              ;;;LL28Breg:
   8+ AF6B              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ AF6B              ;;;	cp		b							; Check A >= Q
  10+ AF6B              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ AF6B              ;;;.CalcRemainder:
  12+ AF6B              ;;;	ld		c, 	$FE						; set R to $FE
  13+ AF6B              ;;;.RollRemainder:
  14+ AF6B              ;;;	sla		a
  15+ AF6B              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ AF6B              ;;;	cp		b							; a < q?
  17+ AF6B              ;;;	jr		nc,.DontSBC
  18+ AF6B              ;;;.DoSBC:									; a is < q
  19+ AF6B              ;;;	sbc		a,b							; 	a -= q
  20+ AF6B              ;;;.DontSBC:
  21+ AF6B              ;;;	rl		c							; r << 1
  22+ AF6B              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ AF6B              ;;;    ld      a,c
  24+ AF6B              ;;;    ld      (varR),a
  25+ AF6B              ;;;	ret									; R (c) left with remainder
  26+ AF6B              ;;;.Reduce:								; a geneated a carry
  27+ AF6B              ;;;	sbc		a,b							; a = a - (q +1)
  28+ AF6B              ;;;	scf									; set carry flag for rl
  29+ AF6B              ;;;	rl		c							; r << 1 briging in carry
  30+ AF6B              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ AF6B              ;;;    ld      a,c
  32+ AF6B              ;;;    ld      (varR),a
  33+ AF6B              ;;;	ret
  34+ AF6B              ;;;.AnswerTooBig:
  35+ AF6B              ;;;	ld	    c,$FF							; arse its too big
  36+ AF6B              ;;;    ld      a,c
  37+ AF6B              ;;;    ld      (varR),a
  38+ AF6B              ;;;	ret
  39+ AF6B
  40+ AF6B              BCequAmul256DivC:
  41+ AF6B 59             ld    e,c
  42+ AF6C 67             ld    h,a
  43+ AF6D 2E 00          ld    l,0
  44+ AF6F              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ AF6F 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ AF70 B7             or a                                   ; from this time on the carry is cleared
  47+ AF71 C8             ret z
  48+ AF72 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ AF75 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ AF77              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ AF77 ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ AF79 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ AF7A 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ AF7C C9             ret
  55+ AF7D
  56+ AF7D              HL_Div_C:
  57+ AF7D              ; Integer divides HL by C
  58+ AF7D              ; Result in HL, remainder in A
  59+ AF7D              ; Clobbers F, B
  60+ AF7D 06 10                ld b,16
  61+ AF7F AF                   xor a
  62+ AF80              HL_Div_C_Loop:
  63+ AF80 29                   add hl,hl
  64+ AF81 17                   rla
  65+ AF82 B9                   cp c
  66+ AF83 38 02                jr c,HL_DivC_Skip
  67+ AF85 91                   sub c
  68+ AF86 2C                   inc l
  69+ AF87              HL_DivC_Skip:
  70+ AF87 10 F7                djnz HL_Div_C_Loop
  71+ AF89 7D                   ld   a,l
  72+ AF8A 32 97 97             ld  (varR),a
  73+ AF8D C9                   ret
  74+ AF8E
  75+ AF8E
  76+ AF8E
  77+ AF8E              ; Entry point if varQ is populated with demoninator
  78+ AF8E              RequAmul256divQ:
  79+ AF8E              BFRDIV:
  80+ AF8E F5           		push	af
  81+ AF8F 3A 96 97     		ld		a,(varQ)
  82+ AF92 4F           		ld		c,a
  83+ AF93 F1           		pop		af
  84+ AF94 FE 00        		cp		0
  85+ AF96 CA AD AF     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ AF99              RequAmul256divC:
  87+ AF99 2E 00        		ld		l,0
  88+ AF9B 67           		ld		h,a
  89+ AF9C              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ AF9C 06 10        		ld b,16
  91+ AF9E AF           		xor a
  92+ AF9F              LOOPPOINT:
  93+ AF9F 29           		add hl,hl
  94+ AFA0 17           		rla
  95+ AFA1 B9           		cp c
  96+ AFA2 38 02        		jr c,SKIPINCSUB
  97+ AFA4 2C           		inc l
  98+ AFA5 91           		sub c
  99+ AFA6              SKIPINCSUB:
 100+ AFA6 10 F7        		djnz LOOPPOINT
 101+ AFA8 7D           		ld		a,l
 102+ AFA9 32 97 97     		ld 		(varR),a
 103+ AFAC C9           		ret
 104+ AFAD              HLDIVC_0_BY:
 105+ AFAD 32 97 97     		ld		(varR),a
 106+ AFB0 C9           		ret
 107+ AFB1              ;	push	af
 108+ AFB1              ;	ld		a,b
 109+ AFB1              ;	ld		(varQ),a
 110+ AFB1              ;	pop		af
 111+ AFB1              ;RequAmul256divQ:
 112+ AFB1              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ AFB1              ;	ld		hl,varQ
 114+ AFB1              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ AFB1              ;	ld		b,$FE						; b = X
 116+ AFB1              ;	ld		c,a							; c = R	div roll counter
 117+ AFB1              ;LL31:									; roll R
 118+ AFB1              ;	sla		a
 119+ AFB1              ;	jr		c,LL29						; hop to Reduce
 120+ AFB1              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ AFB1              ;	sbc		a,(hl)						; a = a - Q
 122+ AFB1              ;	rl		c							; rotate R left
 123+ AFB1              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ AFB1              ;	jr		LL2Good
 125+ AFB1              ;LL29:									; Reduce
 126+ AFB1              ;	sbc		a,(hl)
 127+ AFB1              ;	scf
 128+ AFB1              ;	rl		c							; roll a carry flag into R
 129+ AFB1              ;	jr		c,LL31						;  loop R
 130+ AFB1              ;	jr		LL2Good
 131+ AFB1              ;LL2:
 132+ AFB1              ;	ld		c,$FF
 133+ AFB1              ;LL2Good:
 134+ AFB1              ;	ld		a,c
 135+ AFB1              ;	ld		(varR),a
 136+ AFB1              ;	ret
 137+ AFB1
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
1040  AFB1                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ AFB1              RequAdivQ:
   2+ AFB1              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ AFB1              LL61:										; Handling division R=A/Q for case further down
   4+ AFB1 4F           	ld		c,a								; c = A
   5+ AFB2 3A 96 97     	ld		a,(varQ)						; test for divide by 0
   6+ AFB5 FE 00        	cp		0
   7+ AFB7 28 16        	jr		z,LL84							; divide by zero error
   8+ AFB9 57           	ld		d,a								; now we can do C/D
   9+ AFBA 06 08            ld b,8
  10+ AFBC AF               xor a
  11+ AFBD              LL63:										; roll divide loop
  12+ AFBD CB 21            sla c
  13+ AFBF 17               rla
  14+ AFC0 BA               cp d
  15+ AFC1 38 02            jr c,LL64
  16+ AFC3 0C               inc c
  17+ AFC4 92               sub d
  18+ AFC5              LL64:
  19+ AFC5 10 F6            djnz LL63
  20+ AFC7 32 95 97     	ld	(varU),a							; store remainder in U
  21+ AFCA 79           	ld	a,c
  22+ AFCB 32 97 97     	ld	(varR),a							; store remainder in R
  23+ AFCE C9               ret
  24+ AFCF              LL84:										; div error  R=U=#5
  25+ AFCF 3E 32        	ld		a,50
  26+ AFD1 32 97 97     	ld		(varR),a
  27+ AFD4 32 95 97     	ld		(varU),a
  28+ AFD7 C9           	ret
  29+ AFD8
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
1041  AFD8              ;    INCLUDE "./Maths/Utilities/RSequABSrs-LL129.asm"
1042  AFD8                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ AFD8              asm_mult12:
   2+ AFD8              RSequQmulA:
   3+ AFD8              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ AFD8 CD 80 AE     	call APequQmulA
   5+ AFDB 08           	ex 	af,af'
   6+ AFDC 7A           	ld	a,d
   7+ AFDD 32 98 97     	ld	(varS),a
   8+ AFE0 7B           	ld	a,e
   9+ AFE1 32 97 97     	ld	(varR),a
  10+ AFE4 08           	ex 	af,af'
  11+ AFE5 C9           	ret
  12+ AFE6
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
1043  AFE6              ;INCLUDE "SwapRotmapXY-PUS1.asm"
1044  AFE6                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ AFE6              ;rotmap0xLo: DB	0				; INWK +9
   2+ AFE6              ;rotmap0xHi: DB	0				; INWK +10
   3+ AFE6              ;rotmat0yLo: DB	0				; INWK +11
   4+ AFE6              ;rotmat0yHi: DB	0				; INWK +12
   5+ AFE6              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ AFE6              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ AFE6              ;rotmap1xLo: DB	0				; INWK +15
   8+ AFE6              ;rotmap1xHi:	DB	0				; INWK +16
   9+ AFE6              ;rotmat1yLo:	DB	0				; INWK +17
  10+ AFE6              ;rotmat1yHi:	DB	0				; INWK +18
  11+ AFE6              ;rotmat1zLo:	DB	0				; INWK +19
  12+ AFE6              ;rotmat1zHi:	DB	0				; INWK +20
  13+ AFE6              ;rotmat2xLo: DB	0				; INWK +21
  14+ AFE6              ;rotmat2xHi:	DB	0				; INWK +22
  15+ AFE6              ;rotmat2yLo:	DB	0				; INWK +23
  16+ AFE6              ;rotmat2yHi:	DB	0				; INWK +24
  17+ AFE6              ;rotmat2zLo:	DB	0				; INWK +25
  18+ AFE6              ;rotmat2zHi:	DB	0				; INWK +26
  19+ AFE6              ;
  20+ AFE6              ;rotmatFx	equ	rotmat0xHi
  21+ AFE6              ;rotmatFy	equ	rotmat0yHi
  22+ AFE6              ;rotmatFz	equ	rotmat0zHi
  23+ AFE6              ;rotmatUx	equ	rotmat1xHi
  24+ AFE6              ;rotmatUy	equ	rotmat1yHi
  25+ AFE6              ;rotmatUz	equ	rotmat1zHi
  26+ AFE6              ;
  27+ AFE6              ;inwkarray			equ		INWK+10
  28+ AFE6
  29+ AFE6                  include "./Universe/Ships/CopyRotMattoXX15.asm"
# file opened: ././Universe/Ships/CopyRotMattoXX15.asm
   1++AFE6              CopyRotMatNoseVtoXX15:
   2++AFE6                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2++AFE6 3A 22 C0    >                        ld       a,(UBnkrotmatNosevX+1)
   2++AFE9 32 79 C0    >                        ld       (XX15VecX),a
   3++AFEC                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3++AFEC 3A 24 C0    >                        ld       a,(UBnkrotmatNosevY+1)
   3++AFEF 32 7A C0    >                        ld       (XX15VecY),a
   4++AFF2                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4++AFF2 3A 26 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
   4++AFF5 32 7B C0    >                        ld       (XX15VecZ),a
   5++AFF8 C9                   ret
   6++AFF9
   7++AFF9              CopyRotMatRoofVtoXX15:
   8++AFF9                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8++AFF9 3A 1C C0    >                        ld       a,(UBnkrotmatRoofvX+1)
   8++AFFC 32 79 C0    >                        ld       (XX15VecX),a
   9++AFFF                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9++AFFF 3A 1E C0    >                        ld       a,(UBnkrotmatRoofvY+1)
   9++B002 32 7A C0    >                        ld       (XX15VecY),a
  10++B005                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10++B005 3A 20 C0    >                        ld       a,(UBnkrotmatRoofvZ+1)
  10++B008 32 7B C0    >                        ld       (XX15VecZ),a
  11++B00B C9                   ret
  12++B00C
  13++B00C              CopyRotMatSideVtoXX15:
  14++B00C                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14++B00C 3A 16 C0    >                        ld       a,(UBnkrotmatSidevX+1)
  14++B00F 32 79 C0    >                        ld       (XX15VecX),a
  15++B012                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15++B012 3A 18 C0    >                        ld       a,(UBnkrotmatSidevY+1)
  15++B015 32 7A C0    >                        ld       (XX15VecY),a
  16++B018                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16++B018 3A 1A C0    >                        ld       a,(UBnkrotmatSidevZ+1)
  16++B01B 32 7B C0    >                        ld       (XX15VecZ),a
  17++B01E C9                   ret
  18++B01F
# file closed: ././Universe/Ships/CopyRotMattoXX15.asm
  30+ B01F
  31+ B01F                  include "./Universe/Ships/CopyXX15toRotMat.asm"
# file opened: ././Universe/Ships/CopyXX15toRotMat.asm
   1++B01F              CopyXX15toRotMatNoseV:
   2++B01F                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2++B01F 3A 79 C0    >                        ld       a,(XX15VecX)
   2++B022 32 22 C0    >                        ld       (UBnkrotmatNosevX+1),a
   3++B025                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3++B025 3A 7A C0    >                        ld       a,(XX15VecY)
   3++B028 32 24 C0    >                        ld       (UBnkrotmatNosevY+1),a
   4++B02B                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4++B02B 3A 7B C0    >                        ld       a,(XX15VecZ)
   4++B02E 32 26 C0    >                        ld       (UBnkrotmatNosevZ+1),a
   5++B031 C9                   ret
   6++B032
   7++B032              CopyXX15toRotMatRoofV:
   8++B032                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
   8++B032 3A 79 C0    >                        ld       a,(XX15VecX)
   8++B035 32 1C C0    >                        ld       (UBnkrotmatRoofvX+1),a
   9++B038                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
   9++B038 3A 7A C0    >                        ld       a,(XX15VecY)
   9++B03B 32 1E C0    >                        ld       (UBnkrotmatRoofvY+1),a
  10++B03E                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  10++B03E 3A 7B C0    >                        ld       a,(XX15VecZ)
  10++B041 32 20 C0    >                        ld       (UBnkrotmatRoofvZ+1),a
  11++B044 C9                   ret
  12++B045
  13++B045              CopyXX15toRotMatSideV:
  14++B045                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  14++B045 3A 79 C0    >                        ld       a,(XX15VecX)
  14++B048 32 16 C0    >                        ld       (UBnkrotmatSidevX+1),a
  15++B04B                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  15++B04B 3A 7A C0    >                        ld       a,(XX15VecY)
  15++B04E 32 18 C0    >                        ld       (UBnkrotmatSidevY+1),a
  16++B051                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  16++B051 3A 7B C0    >                        ld       a,(XX15VecZ)
  16++B054 32 1A C0    >                        ld       (UBnkrotmatSidevZ+1),a
  17++B057 C9                   ret
  18++B058
# file closed: ././Universe/Ships/CopyXX15toRotMat.asm
  32+ B058
  33+ B058              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
  34+ B058              		; b = regX on entry
  35+ B058              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
  36+ B058 08           		ex		af,af'
  37+ B059 78           		ld		a,b
  38+ B05A 32 96 97     		ld		(varQ),a
  39+ B05D 08           		ex		af,af'
  40+ B05E EE 80        		xor		$80							;	 flip sign of Acc
  41+ B060 CD A2 A7     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  42+ B063              ; USES 				A BC E
  43+ B063              ; DOES NOT USE		D HL
  44+ B063              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
  45+ B063 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
  46+ B064 E6 80        		and		SignOnly8Bit						; ..
  47+ B066 5F           		ld		e,a							; ..
  48+ B067 79           		ld		a,c							; a = high byte again with sign bit cleared
  49+ B068 E6 7F        		and		SignMask8Bit							; ..
  50+ B06A 06 FE        		ld		b,$FE						; slide counter T1
  51+ B06C              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
  52+ B06C CB 27        		sla		a
  53+ B06E              		JumpIfALTNusng $60, TIS1SkipSub
  53+ B06E FE 60       >                        cp      $60
  53+ B070 DA 7D B0    >                        jp		c, TIS1SkipSub
  54+ B073 DE 60        		sbc		a,$60							; subtract 96
  55+ B075 37           		scf
  56+ B076 CB 10        		rl		b							;  T1
  57+ B078 38 F2        		jr		c,TIS1RollTLoop
  58+ B07A              TIS1KIPCont:
  59+ B07A 78           		ld		a,b							;   T1
  60+ B07B B3           		or		e							;   restore T sign
  61+ B07C C9           		ret
  62+ B07D              TIS1SkipSub:
  63+ B07D B7           	or			a
  64+ B07E CB 10        	rl			b							; T rolled left to push bit out the end
  65+ B080 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
  66+ B082 C3 7A B0     	jp			TIS1KIPCont
  67+ B085
  68+ B085              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
  69+ B085              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
  70+ B085
  71+ B085
  72+ B085
  73+ B085
  74+ B085              TidyRotYSmall:
  75+ B085 CD B0 B1     		call	CalcRoofvZ
  76+ B088 32 20 C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
  77+ B08B C3 C1 B0     		jp		NormaliseRoofV
  78+ B08E
  79+ B08E              TidyRotXSmall:
  80+ B08E AF           		xor		a
  81+ B08F 47           		ld		b,a
  82+ B090 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
  83+ B093 E6 60        		and		%01100000
  84+ B095 CA 85 B0     		jp		z,TidyRotYSmall
  85+ B098 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
  86+ B09B 47           		ld		b,a							; b = regX for now
  87+ B09C 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
  88+ B09F CD 76 B1     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
  89+ B0A2 32 1E C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
  90+ B0A5 C3 C1 B0     		jp		NormaliseRoofV
  91+ B0A8              ; TIDY is broken
  92+ B0A8              TIDY:
  93+ B0A8 DD 01                break
  94+ B0AA              ORTHOGALISE:
  95+ B0AA              ;-- NormaliseNosev
  96+ B0AA CD E6 AF     		call	CopyRotMatNoseVtoXX15
  97+ B0AD CD 8D AB     		call	normaliseXX1596fast			; normalise z hi, its really TIS3
  98+ B0B0 CD 1F B0     		call	CopyXX15toRotMatNoseV
  99+ B0B3              .CheckNXSmall:
 100+ B0B3 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)
 101+ B0B6 E6 60        		and		%01100000					; check top two magnitude bits
 102+ B0B8 CA 8E B0     		jp		z,TidyRotXSmall
 103+ B0BB              .RotXIsBig:
 104+ B0BB CD 3C B1             call	CalcRoofvX
 105+ B0BE 32 1C C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 106+ B0C1              NormaliseRoofV:
 107+ B0C1 CD F9 AF     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 108+ B0C4 CD 8D AB     		call	normaliseXX1596fast			; normalise roof
 109+ B0C7              ;calc sidev x
 110+ B0C7 CD 32 B0     		call	CopyXX15toRotMatRoofV		; get back normalised version
 111+ B0CA 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)
 112+ B0CD 32 96 97     		ld		(varQ),a					; q = nosev_y
 113+ B0D0 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 114+ B0D3 CD D8 AF     		call	RSequQmulA
 115+ B0D6 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 116+ B0D9 47           		ld		b,a							; b = regX for now
 117+ B0DA 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 118+ B0DD CD 58 B0     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 119+ B0E0                      IfAIsZeroGoto NormSideXNoNeg
 119+ B0E0 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 119+ B0E1 CA E6 B0    >                        jp	z, NormSideXNoNeg
 120+ B0E4 EE 80        		xor		$80							; flip a to get -sidev_x
 121+ B0E6              NormSideXNoNeg:
 122+ B0E6 32 16 C0     		ld		(UBnkrotmatSidevX+1),a
 123+ B0E9              ;calc sidev y
 124+ B0E9 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 125+ B0EC 32 96 97     		ld		(varQ),a
 126+ B0EF 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 127+ B0F2 CD D8 AF     		call	RSequQmulA
 128+ B0F5 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 129+ B0F8 47           		ld		b,a							; b = regX for now
 130+ B0F9 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 131+ B0FC CD 58 B0     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 132+ B0FF                      IfAIsZeroGoto NormSideYNoNeg
 132+ B0FF A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 132+ B100 CA 05 B1    >                        jp	z, NormSideYNoNeg
 133+ B103 EE 80        		xor		$80							; flip a to get -sidev_y
 134+ B105              NormSideYNoNeg:
 135+ B105 32 24 C0     		ld		(UBnkrotmatNosevY+1),a
 136+ B108              ;calc sidev z
 137+ B108 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 138+ B10B 32 96 97     		ld		(varQ),a
 139+ B10E 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 140+ B111 CD D8 AF     		call	RSequQmulA
 141+ B114 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 142+ B117 47           		ld		b,a							; b = regX for now
 143+ B118 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 144+ B11B CD 58 B0     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 145+ B11E                      IfAIsZeroGoto NormSideZNoNeg
 145+ B11E A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 145+ B11F CA 24 B1    >                        jp	z, NormSideZNoNeg
 146+ B122 EE 80        		xor		$80							; flip a to get -sidev_y
 147+ B124              NormSideZNoNeg:
 148+ B124 32 18 C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 149+ B127              .ClearLoBytes:
 150+ B127 21 21 C0     		ld		hl,UBnkrotmatNosevX
 151+ B12A 06 09        		ld		b,9
 152+ B12C AF                   xor     a
 153+ B12D              .ClearLoLoop:
 154+ B12D 77           		ld		(hl),a						; zero out lo bytes
 155+ B12E 23           		inc		hl
 156+ B12F 23           		inc		hl
 157+ B130 10 FB        		djnz	.ClearLoLoop
 158+ B132 CD 0C B0     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 159+ B135 CD 8D AB     		call	normaliseXX1596fast			; normalise roof
 160+ B138              ;calc sidev x
 161+ B138 CD 45 B0     		call	CopyXX15toRotMatSideV		; get back normalised version
 162+ B13B
 163+ B13B C9           		ret
 164+ B13C
 165+ B13C
 166+ B13C
 167+ B13C              ;;;;;;;;.CheckNYSmall:
 168+ B13C              ;;;;;;;;		ld		a,(XX15+2)					; first check z zero, if so we have to do Y
 169+ B13C              ;;;;;;;;		and		$7F
 170+ B13C              ;;;;;;;;		cp		0
 171+ B13C              ;;;;;;;;		jp		z,Tidy1RZ
 172+ B13C              ;;;;;;;;		ld		a,(XX15+1)					; now we can do a realistic check of RY
 173+ B13C              ;;;;;;;;		cp 		0							; we can't end up with divide by 0 for RY
 174+ B13C              ;;;;;;;;		jp		z,Tidy1RZ					; We can't have all values of vector 0 so we must do RZ
 175+ B13C              ;;;;;;;;		and		%01100000					; check top two magnitude bits
 176+ B13C              ;;;;;;;;		jp		z,Tidy1RY					; and tidy based on roofy
 177+ B13C              ;;;;;;;;.DoNZ:
 178+ B13C              ;;;;;;;;		jp		Tidy1RZ						; else we tidy based on roofz
 179+ B13C              ;;;;;;;;;---RE ENTRY POINT -------------------------------------
 180+ B13C              ;;;;;;;;NormaliseRoofv:
 181+ B13C              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 182+ B13C              ;;;;;;;;		push	bc
 183+ B13C              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 184+ B13C              ;;;;;;;;		pop		bc
 185+ B13C              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 186+ B13C              ;;;;;;;;ProcessSidev:
 187+ B13C              ;;;;;;;;; -- SIDEV X
 188+ B13C              ;;;;;;;;		ldCopyByte	nosev_z+1, varQ         ; use ixh as Q later
 189+ B13C              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 190+ B13C              ;;;;;;;;		push	bc
 191+ B13C              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 192+ B13C              ;;;;;;;;		pop		bc
 193+ B13C              ;;;;;;;;		ld		a,(UBnkrotmatNosevY+1)
 194+ B13C              ;;;;;;;;		ld		b,a							; set x (b) to value of nosev_z
 195+ B13C              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 196+ B13C              ;;;;;;;;		push	bc
 197+ B13C              ;;;;;;;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 198+ B13C              ;;;;;;;;		pop		bc
 199+ B13C              ;;;;;;;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 200+ B13C              ;;;;;;;;; -- SIDEV Y
 201+ B13C              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 202+ B13C              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 203+ B13C              ;;;;;;;;		push	bc
 204+ B13C              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 205+ B13C              ;;;;;;;;		pop		bc
 206+ B13C              ;;;;;;;;		ld		a,(UBnkrotmatNosevZ+1)
 207+ B13C              ;;;;;;;;		ld		b,a
 208+ B13C              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)
 209+ B13C              ;;;;;;;;		push	bc
 210+ B13C              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 211+ B13C              ;;;;;;;;		pop		bc
 212+ B13C              ;;;;;;;;		ld		(sidev_y+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 213+ B13C              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 214+ B13C              ;;;;;;;;		push	bc
 215+ B13C              ;;;;;;;;; -- SIDEV Z
 216+ B13C              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 217+ B13C              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)				;
 218+ B13C              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 219+ B13C              ;;;;;;;;		pop		bc
 220+ B13C              ;;;;;;;;		ld		a,(UBnkrotmatNosevX+1)
 221+ B13C              ;;;;;;;;		ld		b,a
 222+ B13C              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 223+ B13C              ;;;;;;;;		push	bc
 224+ B13C              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 225+ B13C              ;;;;;;;;		pop		bc
 226+ B13C              ;;;;;;;;		ld		(sidev_z+1),a
 227+ B13C              ;;;;;;;;		xor		a							; set a = 0 so we can clear orientation low bytes
 228+ B13C              ;;;;;;;;		ld		hl,sidev_z
 229+ B13C              ;;;;;;;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 230+ B13C              ;;;;;;;;		ld		hl,UBnkrotmatNosevX
 231+ B13C              ;;;;;;;;NormaliseSideV:
 232+ B13C              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 233+ B13C              ;;;;;;;;		push	bc
 234+ B13C              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 235+ B13C              ;;;;;;;;		pop		bc
 236+ B13C              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 237+ B13C              ;;;;;;;;
 238+ B13C
 239+ B13C
 240+ B13C              CalcRoofvX:
 241+ B13C              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 242+ B13C              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 242+ B13C 3A 26 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 242+ B13F 32 96 97    >                        ld       (varQ),a
 243+ B142 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 244+ B145 CD D8 AF     		call	RSequQmulA						; rs = nosez hi * roofz hi
 245+ B148              		ldCopyByte UBnkrotmatNosevY+1,varQ
 245+ B148 3A 24 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 245+ B14B 32 96 97    >                        ld       (varQ),a
 246+ B14E 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)
 247+ B151 CD A2 A7     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 248+ B154 7A           		ld		a,d
 249+ B155 E6 80        		and 	$80
 250+ B157 FD 67        		ld		iyh,a
 251+ B159              ;DEBUG		ld		c,a
 252+ B159 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 253+ B15C 4F           		ld		c,a								; temp save
 254+ B15D E6 80        		and		$80
 255+ B15F FD AC        		xor		iyh								; flip from saved multiply sign result
 256+ B161 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 257+ B163 79           		ld		a,c								; recover a
 258+ B164 E6 7F        		and		$7F								; a is unsigned nosev x
 259+ B166 42           		ld		b,d
 260+ B167 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 261+ B168 57           		ld		d,a								; de = nosev x hi
 262+ B169 1E 00        		ld		e,0
 263+ B16B CD FF A9     		call	BC_Div_DE
 264+ B16E FD 7C        		ld		a,iyh							; get back sign from nosevx
 265+ B170 EE 80        		xor		$80								; flip sign
 266+ B172 E6 80        		and		$80								; keep sign bit only
 267+ B174 B0           		or		b
 268+ B175 C9           		ret
 269+ B176
 270+ B176
 271+ B176              CalcRoofvY:
 272+ B176              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 273+ B176              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 273+ B176 3A 26 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 273+ B179 32 96 97    >                        ld       (varQ),a
 274+ B17C 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 275+ B17F CD D8 AF     		call	RSequQmulA
 276+ B182              		ldCopyByte UBnkrotmatNosevX+1,varQ
 276+ B182 3A 22 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 276+ B185 32 96 97    >                        ld       (varQ),a
 277+ B188 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)
 278+ B18B CD A2 A7     		call	madXAequQmulAaddRS
 279+ B18E 7A           		ld		a,d
 280+ B18F E6 80        		and 	$80
 281+ B191 FD 67        		ld		iyh,a
 282+ B193 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 283+ B196 4F           		ld		c,a								; temp save
 284+ B197 E6 80        		and		$80
 285+ B199 FD AC        		xor		iyh								; flip from saved multiply sign result
 286+ B19B FD 67        		ld		iyh,a							; save nosesev sign to iyh
 287+ B19D 79           		ld		a,c								; recover a
 288+ B19E E6 7F        		and		$7F								; a is unsigned nosev x
 289+ B1A0 42           		ld		b,d
 290+ B1A1 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 291+ B1A2 57           		ld		d,a								; de = nosev x hi
 292+ B1A3 1E 00        		ld		e,0
 293+ B1A5 CD FF A9     		call	BC_Div_DE
 294+ B1A8 FD 7C        		ld		a,iyh
 295+ B1AA EE 80        		xor		$80
 296+ B1AC E6 80        		and		$80
 297+ B1AE B0           		or		b
 298+ B1AF C9           		ret
 299+ B1B0
 300+ B1B0              CalcRoofvZ:
 301+ B1B0              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 302+ B1B0              		ldCopyByte UBnkrotmatNosevY+1,varQ
 302+ B1B0 3A 24 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 302+ B1B3 32 96 97    >                        ld       (varQ),a
 303+ B1B6 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)
 304+ B1B9 CD D8 AF     		call	RSequQmulA						; rs = NOSEy * ROOFy
 305+ B1BC              		ldCopyByte UBnkrotmatNosevX+1,varQ
 305+ B1BC 3A 22 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 305+ B1BF 32 96 97    >                        ld       (varQ),a
 306+ B1C2 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)
 307+ B1C5 CD A2 A7     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 308+ B1C8 7A           		ld		a,d
 309+ B1C9 E6 80        		and 	$80
 310+ B1CB FD 67        		ld		iyh,a
 311+ B1CD 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 312+ B1D0 4F           		ld		c,a								; temp save
 313+ B1D1 E6 80        		and		$80
 314+ B1D3 FD AC        		xor		iyh								; flip from saved multiply sign result
 315+ B1D5 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 316+ B1D7 79           		ld		a,c								; recover a
 317+ B1D8 E6 7F        		and		$7F								; a is unsigned nosev x
 318+ B1DA 42           		ld		b,d
 319+ B1DB 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 320+ B1DC 57           		ld		d,a								; de = nosev x hi
 321+ B1DD 1E 00        		ld		e,0
 322+ B1DF CD FF A9     		call	BC_Div_DE
 323+ B1E2 FD 7C        		ld		a,iyh
 324+ B1E4 EE 80        		xor		$80
 325+ B1E6 E6 80        		and		$80
 326+ B1E8 B0           		or		b
 327+ B1E9 C9           		ret
 328+ B1EA
 329+ B1EA
 330+ B1EA
 331+ B1EA              ;;ProcessSidev:
 332+ B1EA              ;;		ldCopyByte	UBnkrotmatNosevZ+1, varQ         ; use ixh as Q later
 333+ B1EA              ;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 334+ B1EA              ;;		push	bc
 335+ B1EA              ;;		call	RSequQmulA					; RS = Q * A MULT12
 336+ B1EA              ;;		pop		bc
 337+ B1EA              ;;		ld		a,(UBnkrotmatNosevY+1)
 338+ B1EA              ;;		ld		b,a							; set x (b) to value of nosev_z
 339+ B1EA              ;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 340+ B1EA              ;;		push	bc
 341+ B1EA              ;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 342+ B1EA              ;;		pop		bc
 343+ B1EA              ;;		xor		$80							; sidev_x = -a by flipping sign bit
 344+ B1EA              ;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 345+ B1EA              ;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 346+ B1EA              ;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 347+ B1EA              ;;		push	bc
 348+ B1EA              ;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 349+ B1EA              ;;		pop		bc
 350+ B1EA              ;;		ld		a,(UBnkrotmatNosevZ+1)
 351+ B1EA              ;;		ld		b,a
 352+ B1EA              ;;		ld		a,(UBnkrotmatNosevY+1)
 353+ B1EA              ;;		push	bc
 354+ B1EA              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 355+ B1EA              ;;		pop		bc
 356+ B1EA              ;;		xor		$80							; a *= -1
 357+ B1EA              ;;		ld		(UBnkrotmatSidevY+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 358+ B1EA              ;;		ld		a,(UBnkrotmatRoofvY+1)
 359+ B1EA              ;;		push	bc
 360+ B1EA              ;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 361+ B1EA              ;;		ld		a,(UBnkrotmatRoofvX+1)				;
 362+ B1EA              ;;		call	RSequQmulA					; RS = Q * A MULT12
 363+ B1EA              ;;		pop		bc
 364+ B1EA              ;;		ld		a,(UBnkrotmatNosevX+1)
 365+ B1EA              ;;		ld		b,a
 366+ B1EA              ;;		ld		a,(UBnkrotmatRoofvY+1)
 367+ B1EA              ;;		push	bc
 368+ B1EA              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 369+ B1EA              ;;		pop		bc
 370+ B1EA              ;;		xor		$80
 371+ B1EA              ;;		ld		(UBnkrotmatSidevZ+1),a
 372+ B1EA              ;;		xor		a							; set a = 0 so we can clear orientation low bytes
 373+ B1EA              ;;		ld		hl,UBnkrotmatSidevZ
 374+ B1EA              ;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 375+ B1EA              ;;		ld		hl,UBnkrotmatNosevX
 376+ B1EA
 377+ B1EA
 378+ B1EA
 379+ B1EA
 380+ B1EA
 381+ B1EA
 382+ B1EA              ;;;;;;;;;-- Check to see if the top two magnitude bits are clear in nosev_x, if so jump to TI1
 383+ B1EA              ;;;;;;;;.ProcessRoofv:
 384+ B1EA              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 385+ B1EA              ;;;;;;;;		push	bc
 386+ B1EA              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 387+ B1EA              ;;;;;;;;		pop		bc
 388+ B1EA              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 389+ B1EA              ;;;;;;;;.ProcessSidev:
 390+ B1EA              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 391+ B1EA              ;;;;;;;;		push	bc
 392+ B1EA              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 393+ B1EA              ;;;;;;;;		pop		bc
 394+ B1EA              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 395+ B1EA
# file closed: ./Maths/Utilities/tidy.asm
1045  B1EA                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ B1EA
   2+ B1EA              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ B1EA BA          >                        cp     d
   2+ B1EB D2 09 B2    >                        jp		nc,.Ll28Exit255
   3+ B1EE 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ B1F0 CB 27        .LL31:                  sla     a
   5+ B1F2 38 0D                                jr      c,.LL29
   6+ B1F4                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ B1F4 BA          >                        cp      d
   6+ B1F5 DA FA B1    >                        jp		c, .SkipSub
   7+ B1F8 92                                   sub     d
   8+ B1F9                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ B1F9 B7          >                        or a
   9+ B1FA 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ B1FB CB 13                                rl      e
  11+ B1FD 38 F1                                jr      c,.LL31
  12+ B1FF 7B                                   ld      a,e
  13+ B200 C9                                   ret
  14+ B201 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ B202 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ B203 CB 13                                rl      e                           ; rotate counter e left
  17+ B205 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ B207 7B                                   ld      a,e                         ; stick result in a
  19+ B208 C9                                   ret
  20+ B209 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ B20B C9                                   ret
  22+ B20C
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
1046  B20C                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ B20C              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ B20C              TIS1:
   3+ B20C 08           		ex		af,af'
   4+ B20D 3A 72 96     		ld		a,(regX)
   5+ B210 47           		ld		b,a
   6+ B211 08           		ex		af,af'
   7+ B212              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ B212 08           		ex		af,af'
   9+ B213 78           		ld		a,b
  10+ B214 32 96 97     		ld		(varQ),a
  11+ B217 08           		ex		af,af'
  12+ B218 EE 80        		xor		$80							;	 flip sign of Acc
  13+ B21A CD A2 A7     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ B21D              ; USES 				A BC E
  15+ B21D              ; DOES NOT USE		D HL
  16+ B21D              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ B21D 47           		ld		b,a
  18+ B21E E6 80        		and		$80							;	hi sign
  19+ B220 5F           		ld		e,a							;   e = varT
  20+ B221 78           		ld		a,b
  21+ B222 E6 7F        		and		$7F							;	hi A7
  22+ B224 06 FE        		ld		b,$FE						;   slide counter
  23+ B226 48           		ld		c,b							;   c == T1 ::  T1
  24+ B227              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ B227 CB 27        		sla		a
  26+ B229 FE 60        		cp		$60							; max 96
  27+ B22B 30 02        		jr		nc,.DV4
  28+ B22D DE 60        		sbc		a,$60							;  SBC #&60
  29+ B22F              .DV4:										; skip subtraction
  30+ B22F CB 11        		rl		c							;  T1
  31+ B231 38 F4        		jr		c,.DVL3
  32+ B233 79           		ld		a,c							;   T1
  33+ B234 B3           		or		e							;   restore T sign
  34+ B235 C9           		ret
  35+ B236
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
1047  B236              ;INCLUDE "XAequQmuilAaddRS-MAD-ADD.asm"
1048  B236              ;INCLUDE "XHiYLoequPA-gc3.asm"
1049  B236              ;INCLUDE "XHiYLoequPmulAmul4-gc2.asm"
1050  B236              ;INCLUDE "XLoYHiequPmulQmul4-gcash.asm"
1051  B236              ;INCLUDE "XX12equXX15byXX16-LL51.asm"
1052  B236                ;  INCLUDE "./Maths/Utilities/XYeqyx1loSmulMdiv256-Ll120-LL123.asm"
1053  B236
1054  B236
1055  B236                  INCLUDE "./Drive/drive_access.asm"
# file opened: ./Drive/drive_access.asm
   1+ B236              M_GETSETDRV             equ $89
   2+ B236              F_OPEN                  equ $9a
   3+ B236              F_CLOSE                 equ $9b
   4+ B236              F_READ                  equ $9d
   5+ B236              F_WRITE                 equ $9e
   6+ B236              F_SEEK                  equ $9f
   7+ B236
   8+ B236              FA_READ                 equ $01
   9+ B236              FA_APPEND               equ $06
  10+ B236              FA_OVERWRITE            equ $0C
  11+ B236
  12+ B236 F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  12+ B23A DD E5
  13+ B23C AF                                   xor	    a	; set drive. 0 is default
  14+ B23D CF                                   rst	    $08
  15+ B23E 89                                   db	    $89
  16+ B23F 32 49 B2                             ld	    (DefaultDrive),a
  17+ B242 DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  17+ B246 C1 F1
  18+ B248 C9                                   ret
  19+ B249 00           DefaultDrive:	        db	0
  20+ B24A
  21+ B24A              ; *******************************************************************************************************
  22+ B24A              ;	Function:	Open a file read for reading/writing
  23+ B24A              ;	In:		ix = filename
  24+ B24A              ;			b  = Open filemode
  25+ B24A              ;	ret		a  = handle, 0 on error
  26+ B24A              ; *******************************************************************************************************
  27+ B24A E5 DD E5     fOpen:	                push	hl,,ix
  28+ B24D DD E5                                push	ix
  29+ B24F 3A 49 B2                             ld	    a,(DefaultDrive)
  30+ B252 CF                                   rst	    $08
  31+ B253 9A                                   db	    F_OPEN
  32+ B254 DD E1 E1                             pop	    hl,,ix
  33+ B257 C9                                   ret
  34+ B258
  35+ B258              ; *******************************************************************************************************
  36+ B258              ;	Function	Read bytes from the open file
  37+ B258              ;	In:		ix  = address to read into
  38+ B258              ;			bc  = amount to read
  39+ B258              ;	ret:		carry set = error
  40+ B258              ; *******************************************************************************************************
  41+ B258 B7           fRead:                  or   	a             ; is it zero?
  42+ B259 C8                                   ret  	z             ; if so return
  43+ B25A E5 DD E5                             push	hl,,ix   	 ; load ix into hl and save hl for later
  44+ B25D E1                                   pop		hl
  45+ B25E CF                                   rst	    $08
  46+ B25F 9D                                   db	    F_READ
  47+ B260 E1                                   pop	    hl
  48+ B261 C9                                   ret
  49+ B262
  50+ B262              ; *******************************************************************************************************
  51+ B262              ;	Function	Read bytes from the open file
  52+ B262              ;	In:		ix  = address to read into
  53+ B262              ;			bc  = amount to read
  54+ B262              ;	ret:		carry set = error
  55+ B262              ; *******************************************************************************************************
  56+ B262 B7           fWrite:                 or   	a             ; is it zero?
  57+ B263 C8                                   ret  	z             ; if so return
  58+ B264 E5 DD E5                             push	hl,,ix
  59+ B267 E1                                   pop	    hl
  60+ B268 CF                                   rst	    $08
  61+ B269 9E                                   db	    F_WRITE
  62+ B26A E1                                   pop	    hl
  63+ B26B C9                                   ret
  64+ B26C
  65+ B26C              ; *******************************************************************************************************
  66+ B26C              ;	Function:	Close open file
  67+ B26C              ;	In:		a  = handle
  68+ B26C              ;	ret		a  = handle, 0 on error
  69+ B26C              ; *******************************************************************************************************
  70+ B26C B7           fClose:		            or   	a             ; is it zero?
  71+ B26D C8                                   ret  	z             ; if so return
  72+ B26E CF                                   rst	    $08
  73+ B26F 9B                                   db	    F_CLOSE
  74+ B270 C9                                   ret
  75+ B271
  76+ B271              ; *******************************************************************************************************
  77+ B271              ;	Function	Read bytes from the open file
  78+ B271              ;	In:		a   = file handle
  79+ B271              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
  80+ B271              ;			BCDE = bytes to seek
  81+ B271              ;	ret:		BCDE = file pos from start
  82+ B271              ; *******************************************************************************************************
  83+ B271 DD E5 E5     fSeek:                  push	ix,,hl
  84+ B274 CF                                   rst	    $08
  85+ B275 9F                                   db	    F_SEEK
  86+ B276 E1 DD E1                             pop	    ix,,hl
  87+ B279 C9                                   ret
  88+ B27A
  89+ B27A              ; *******************************************************************************************************
  90+ B27A              ; Init the file system
  91+ B27A              ; *******************************************************************************************************
  92+ B27A CD 36 B2     InitFileSystem:         call    GetDefaultDrive
  93+ B27D C9                                   ret
  94+ B27E
  95+ B27E              ; *******************************************************************************************************
  96+ B27E              ; Function:	Load a whole file into memory	(confirmed working on real machine)
  97+ B27E              ; In:		hl = file data pointer
  98+ B27E              ;		ix = address to load to
  99+ B27E              ; *******************************************************************************************************
 100+ B27E CD 36 B2     FileLoad:	            call    GetDefaultDrive		; need to do this each time?!?!?
 101+ B281 C5 D5 F5                             push	bc,,de,,af
 102+ B284                                      ; get file size
 103+ B284 4E                                   ld	    c,(hl)
 104+ B285 2C                                   inc	    l
 105+ B286 46                                   ld	    b,(hl)
 106+ B287 2C                                   inc	    l
 107+ B288 C5 DD E5                             push	bc,,ix			; store size, load address,
 108+ B28B E5                                   push	hl				; get name into ix
 109+ B28C DD E1                                pop	    ix
 110+ B28E 06 01                                ld      b,FA_READ		; mode open for reading
 111+ B290 CD 4A B2                             call    fOpen
 112+ B293 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 113+ B295 FE 00                                cp	    0				; was file handle 0?
 114+ B297 28 13                                jr	    z,.error_opening; of so there was an error opening.
 115+ B299 DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 116+ B29C F5                                   push	af				; remember handle
 117+ B29D CD 58 B2                             call	fRead			; read data from A to address IX of length BC
 118+ B2A0 38 0C                                jr	    c,.error_reading
 119+ B2A2 F1                                   pop	    af			    ; get handle back
 120+ B2A3 CD 6C B2                             call	fClose			; close file
 121+ B2A6 38 07                                jr	    c,.error_closing
 122+ B2A8 F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 123+ B2AB C9                                   ret
 124+ B2AC              ;
 125+ B2AC              ; On error, display error code an lock up so we can see it
 126+ B2AC              ;
 127+ B2AC DD E1        .error_opening:         pop	ix
 128+ B2AE C1           .error_reading:		    pop	bc	; don't pop a, need error code
 129+ B2AF
 130+ B2AF              .error_closing:
 131+ B2AF C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 132+ B2B0 D1                                   pop	de
 133+ B2B1 C1                                   pop	bc
 134+ B2B2 C9                                   ret
 135+ B2B3
 136+ B2B3              ; *******************************************************************************************************
 137+ B2B3              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 138+ B2B3              ; In:		hl = file data pointer
 139+ B2B3              ;		ix = address to save from
 140+ B2B3              ;		bc = size
 141+ B2B3              ; *******************************************************************************************************
 142+ B2B3 CD 36 B2     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 143+ B2B6 C5 E5                                push	bc,,hl   			; store size& save address
 144+ B2B8 E5                                   push	hl		        	; get name into ix
 145+ B2B9 DD E1                                pop	    ix
 146+ B2BB 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 147+ B2BD CD 4A B2                             call    fOpen
 148+ B2C0 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 149+ B2C2 FE 00                                cp	    0			        ; was file handle 0?
 150+ B2C4 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 151+ B2C6 DD E1                                pop	    ix			        ; get save address back
 152+ B2C8 C1                                   pop	    bc			        ; get size back
 153+ B2C9 F5                                   push	af			        ; remember handle
 154+ B2CA CD 62 B2                             call	fWrite			    ; read data from A to address IX of length BC
 155+ B2CD 38 04                                jr	c,.error
 156+ B2CF F1                                   pop	af			            ; get handle back
 157+ B2D0 CD 6C B2                             call	fClose			    ; close file
 158+ B2D3 C9           .error:                 ret
 159+ B2D4              ;
 160+ B2D4              ; On error, display error code an lock up so we can see it
 161+ B2D4              ;
 162+ B2D4 DD E1        .error_opening:         pop	ix
 163+ B2D6 C1                                   pop	bc	; don't pop a, need error code
 164+ B2D7 C9                                   ret
 165+ B2D8
# file closed: ./Drive/drive_access.asm
1056  B2D8
1057  B2D8                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ B2D8 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ B2DC 41 4E 44 45
   1+ B2E0 52 00
   2+ B2E2 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ B2E6 4E 54 4F 52
   2+ B2EA 59 00
   3+ B2EC 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ B2F0 65 6E 74 20
   3+ B2F4 53 79 73 74
   3+ B2F8 65 6D 20 20
   3+ B2FC 20 3A 00
   4+ B2FF 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ B303 72 73 70 61
   4+ B307 63 65 20 53
   4+ B30B 79 73 74 65
   4+ B30F 6D 3A 00
   5+ B312 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ B316 69 74 69 6F
   5+ B31A 6E 20 20 20
   5+ B31E 3A 00
   6+ B320 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ B324 20 20 20 20
   6+ B328 20 20 20 20
   6+ B32C 3A 00
   7+ B32E 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ B332 20 20 20 20
   7+ B336 20 20 20 20
   7+ B33A 3A 00
   8+ B33C 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ B340 6C 20 53 74
   8+ B344 61 74 75 73
   8+ B348 3A 00
   9+ B34A 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ B34E 6E 67 20 20
   9+ B352 20 20 20 20
   9+ B356 3A 00
  10+ B358 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ B35C 50 4D 45 4E
  10+ B360 54 3A 00
  11+ B363
  12+ B363 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ B367 20 4C 69 67
  12+ B36B 68 74 20 59
  12+ B36F 65 61 72 73
  12+ B373 00
  13+ B374 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ B378 58 58 58 58
  13+ B37C 58 58 00
  14+ B37F 2E           txt_cash_decimal        DB "."
  15+ B380 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ B384 00
  16+ B385
  17+ B385              txt_status_colour		equ $FF
  18+ B385
  19+ B385              print_boiler_text_l2:
  20+ B385              ; ">print_boilder_text hl = text structure, b = message count"
  21+ B385              BoilerTextLoop:
  22+ B385 C5           	push		bc			; Save Message Count loop value
  23+ B386 4E           	ld			c,(hl)		; Get Row into b
  24+ B387 23           	inc			hl
  25+ B388 46           	ld			b,(hl)		; Get Col into b
  26+ B389 23           	inc			hl
  27+ B38A 5E           	ld			e,(hl)		; Get text address Lo into E
  28+ B38B 23           	inc			hl
  29+ B38C 56           	ld			d,(hl)		; Get text address Hi into E
  30+ B38D 23           	inc			hl
  31+ B38E E5           	push		hl			; Save present HL to stack as this is the address for the next message
  32+ B38F EB           	ex			de,hl		; now hl = address of text data
  33+ B390 1E FF        	ld			e,txt_status_colour
  34+ B392                  MMUSelectLayer2
  34+ B392 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ B396 CD C8 E0     	call		l1_print_at
  36+ B399 E1           	pop			hl
  37+ B39A C1           	pop			bc
  38+ B39B 10 E8        	djnz		BoilerTextLoop
  39+ B39D C9           	ret
  40+ B39E
  41+ B39E
  42+ B39E              print_boiler_text:
  43+ B39E              ; ">print_boilder_text hl = text structure, b = message count"
  44+ B39E              .BoilerTextLoop:
  45+ B39E C5           	push		bc			; Save Message Count loop value
  46+ B39F 4E           	ld			c,(hl)		; Get Row into b
  47+ B3A0 23           	inc			hl
  48+ B3A1 46           	ld			b,(hl)		; Get Col into b
  49+ B3A2 23           	inc			hl
  50+ B3A3 5E           	ld			e,(hl)		; Get text address Lo into E
  51+ B3A4 23           	inc			hl
  52+ B3A5 56           	ld			d,(hl)		; Get text address Hi into E
  53+ B3A6 23           	inc			hl
  54+ B3A7 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  55+ B3A8 EB           	ex			de,hl		; now hl = address of text data
  56+ B3A9 1E FF        	ld			e,txt_status_colour
  57+ B3AB C5           	push		bc
  58+ B3AC D1           	pop			de
  59+ B3AD CD C8 E0     	call		l1_print_at
  60+ B3B0 E1           	pop			hl
  61+ B3B1 C1           	pop			bc
  62+ B3B2 10 EA        	djnz		.BoilerTextLoop
  63+ B3B4 C9           	ret
  64+ B3B5
  65+ B3B5              GetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++B3B5
   2++B3B5
   3++B3B5 3A D4 9B     	ld		a,(Fuel)
   4++B3B8 11 63 B3     	ld		de,txt_fuel_level
   5++B3BB 0E 9C        	ld	c, -100
   6++B3BD CD C7 B3     	call	.Num1
   7++B3C0 0E F6        	ld	c,-10
   8++B3C2 CD C7 B3     	call	.Num1
   9++B3C5 0E FF        	ld	c,-1
  10++B3C7              .Num1:
  11++B3C7 06 2F        	ld	b,'0'-1
  12++B3C9              .Num2:
  13++B3C9 04           	inc		b
  14++B3CA 81           	add		a,c
  15++B3CB 38 FC        	jr		c,.Num2
  16++B3CD 91           	sub 	c
  17++B3CE C5           	push	bc
  18++B3CF F5           	push	af
  19++B3D0 79           	ld		a,c
  20++B3D1 FE FF        	cp		-1
  21++B3D3 CC DC B3     	call	z,.InsertDot
  22++B3D6 78           	ld		a,b
  23++B3D7 12           	ld		(de),a
  24++B3D8 13           	inc		de
  25++B3D9 F1           	pop		af
  26++B3DA C1           	pop		bc
  27++B3DB C9           	ret
  28++B3DC              .InsertDot:
  29++B3DC 3E 2E        	ld		a,'.'
  30++B3DE 12           	ld		(de),a
  31++B3DF 13           	inc		de
  32++B3E0 C9           	ret
  33++B3E1
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
  66+ B3E1
  67+ B3E1 2A D0 9B     GetCash:                ld      hl,(Cash)
  68+ B3E4 EB                                   ex      de,hl
  69+ B3E5 DD 2A D2 9B                          ld      ix,(Cash+2)
  70+ B3E9 FD 21 74 B3                          ld		iy,txt_cash_amount
  71+ B3ED CD 1F AD                             call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ B3F0 FD 7E 00     .ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ B3F3 32 80 B3                             ld		(txt_cash_fraction),a
  74+ B3F6 21 75 B3     .UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ B3F9 7E                                   ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ B3FA FE 00                                cp		0
  77+ B3FC C8                                   ret		z
  78+ B3FD FD 36 00 00                          ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ B401 C9                                   ret
  80+ B402
# file closed: ./Menus/common_menu.asm
1058  B402              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
1059  B402              ;INCLUDE "./title_page.asm"
1060  B402
1061  B402              ; Blocks dependent on variables in Universe Banks
1062  B402              ; Bank 49
1063  B402              ;    SEG RESETUNIVSEG
1064  B402              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
1065  B402              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
1066  B402
1067  B402              ;	ORG ResetUniverseAddr
1068  B402              ;INCLUDE "./GameEngine/resetUniverse.asm"
1069  B402              ; Bank 50
1070  B402
1071  B402
1072  B402
1073  B402                  SLOT    MenuShrChtAddr
1074  B402                  PAGE    BankMenuShrCht
1075  B402              	ORG     MenuShrChtAddr,BankMenuShrCht
1076  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 D2 A3  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2              .BoilerTextLoop:
   4++C0C2 C5           	push		bc			; Save Message Count loop value
   5++C0C3 4E           	ld			c,(hl)		; Get Row into b
   6++C0C4 23           	inc			hl
   7++C0C5 46           	ld			b,(hl)		; Get Col into b
   8++C0C6 23           	inc			hl
   9++C0C7 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C0C8 23           	inc			hl
  11++C0C9 56           	ld			d,(hl)		; Get text address Hi into E
  12++C0CA 23           	inc			hl
  13++C0CB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C0CC EB           	ex			de,hl		; now hl = address of text data
  15++C0CD 1E FF        	ld			e,txt_status_colour
  16++C0CF C5           	push		bc
  17++C0D0 D1           	pop			de
  18++C0D1                  MMUSelectLayer1
  18++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0D5 CD C8 E0     	call		l1_print_at
  20++C0D8 E1           	pop			hl
  21++C0D9 C1           	pop			bc
  22++C0DA 10 E6        	djnz		.BoilerTextLoop
  23++C0DC C9           	ret
  24++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B A8 98                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD F2 E0                             call	sprite_local_cursor
  39+ C0EB 3A D4 9B                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD 56 E7                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B AA 98                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0FD ED 5B A8 98                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD FA E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A 95 98     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  58+ C113 ED 4B AA 98                          ld      bc,(TargetPlanetX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 55 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 81 F6                             call	GetDigramWorkingSeed
  64+ C124 21 98 A4                             ld		hl,name_expanded
  65+ C127 CD F3 A3                             call	CapitaliseString
  66+ C12A 21 98 A4                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B AA 98                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  72+ C134 ED 5B A8 98                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c
  74+ C139 93                                   sub		e
  75+ C13A F2 4B C1                             jp      p,.NoFlipX
  76+ C13D ED 44                                neg
  77+ C13F CB 27                                sla		a
  78+ C141 CB 27                                sla		a
  79+ C143 4F                                   ld      c,a
  80+ C144 3E 80                                ld      a,src_x_centre
  81+ C146 91                                   sub     c
  82+ C147 4F                                   ld      c,a
  83+ C148 C3 52 C1                             jp      .fixY
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD CD E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD 60 E2                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A 95 98     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 124+ C193 ED 4B AA 98                          ld      bc,(TargetPlanetX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 55 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD CF E1                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD CF E1                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A 95 98     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B A8 98                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B AA 98                          ld      bc,(TargetPlanetX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD E8 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A 8A 98                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD 1F AD                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD 43 AB                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD 43 AB                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD 43 AB                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c, .NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c, .NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD 9A 9C     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A 95 98                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 256+ C2BC CD 81 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 98 A4                             ld		hl,name_expanded
 258+ C2C2 CD F3 A3                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 98 A4                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 98 A4                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD CF E1                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 5C 97                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD 9A 9C     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A 95 98     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 330+ C343 CD 81 F6                             call	GetDigramWorkingSeed
 331+ C346 21 98 A4     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD F3 A3                             call	CapitaliseString
 333+ C34C 21 98 A4     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD CF E1                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 9B 97                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD 48 93                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A 95 98                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 82 97                             ld      de,SystemSeed
 359+ C388 CD 6D 9C                             call    copy_seed
 360+ C38B 3A 83 97                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A A9 98     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A 85 97     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A A8 98                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A 83 97     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 A9 98                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A 85 97                             ld		a,(SystemSeed+3)
 390+ C3C5 21 A8 98                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A 87 97                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD 0F E8                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A 9B 97                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 9B 97                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C3FC
   2++C3FC                  MMUSelectLayer1
   2++C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C400 CD 80 E0     	call	l1_cls
   4++C403 3E 07        	ld		a,7
   5++C405 CD 9B E0     	call	l1_attr_cls_to_a
   6++C408                  MMUSelectLayer2
   6++C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C40C CD 08 E0     	call    asm_l2_double_buffer_off
   8++C40F CD C9 E0     	call	l2_cls	; Get some space
   9++C412              	MMUSelectSpriteBank
   9++C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C416 CD 34 E4     	call    sprite_cls_cursors
  11++C419
  12++C419
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 A2 97                             ld      (MenuIdMax),a
 420+ C41E 2A A8 98                             ld		hl,(PresentSystemX)
 421+ C421 22 AA 98                             ld		(TargetPlanetX),hl              ; bc = selected jump
 422+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 423+ C427 11 FD BE                             ld		de,$BEFD
 424+ C42A 3E C0                                ld		a,$C0
 425+ C42C                                      MMUSelectLayer2
 425+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 426+ C430 CD F6 E1                             call	l2_draw_box
 427+ C433 01 01 0A                             ld		bc,$0A01
 428+ C436 11 C0 FE                             ld		de,$FEC0
 429+ C439                                      MMUSelectLayer2
 429+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 430+ C43D CD 60 E2                             call	l2_draw_horz_line
 431+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 432+ C442 CD 13 A4                             call	expandTokenToString
 433+ C445 06 01                                ld		b,1
 434+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 435+ C44A CD C2 C0                             call	SRM_print_boiler_text
 436+ C44D CD 67 9C     SRCSetUpChart:          call	copy_galaxy_to_system
 437+ C450 CD 65 C3                             call	plot_local_stars
 438+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 439+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 440+ C459 C9                                   ret
 441+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 442+ C45A 3A A0 97     local_chart_cursors:    ld     a,(CursorKeysPressed)
 443+ C45D FE 00                                cp      0
 444+ C45F C8                                   ret     z
 445+ C460 17                                   rla
 446+ C461 DC 79 C4                             call   c,src_UpPressed
 447+ C464 17                                   rla
 448+ C465 DC 89 C4                             call   c,src_DownPressed
 449+ C468 17                                   rla
 450+ C469 DC 99 C4                             call   c,src_LeftPressed
 451+ C46C 17                                   rla
 452+ C46D DC A9 C4                             call   c,src_RightPressed
 453+ C470 17                                   rla
 454+ C471 DC B9 C4                             call   c,src_HomePressed
 455+ C474 17                                   rla
 456+ C475 DC C3 C4                             call   c,src_RecenterPressed
 457+ C478 C9                                   ret
 458+ C479              ;----------------------------------------------------------------------------------------------------------------------------------
 459+ C479 3A AB 98     src_UpPressed:          ld     a,(TargetPlanetY)
 460+ C47C                                      JumpIfAEqNusng 1,src_BoundsLimit
 460+ C47C FE 01       >                        cp     1
 460+ C47E CA DA C4    >                        jp      z,src_BoundsLimit
 461+ C481 3D                                   dec     a
 462+ C482 32 AB 98                             ld      (TargetPlanetY),a
 463+ C485 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 464+ C488 C9                                   ret
 465+ C489              ;----------------------------------------------------------------------------------------------------------------------------------
 466+ C489 3A AB 98     src_DownPressed:        ld     a,(TargetPlanetY)
 467+ C48C                                      JumpIfAEqNusng 255,src_BoundsLimit
 467+ C48C FE FF       >                        cp     255
 467+ C48E CA DA C4    >                        jp      z,src_BoundsLimit
 468+ C491 3C                                   inc    a
 469+ C492 32 AB 98                             ld      (TargetPlanetY),a
 470+ C495 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 471+ C498 C9                                   ret
 472+ C499              ;----------------------------------------------------------------------------------------------------------------------------------
 473+ C499 3A AA 98     src_LeftPressed:        ld     a,(TargetPlanetX)
 474+ C49C                                      JumpIfAEqNusng 2,src_BoundsLimit
 474+ C49C FE 02       >                        cp     2
 474+ C49E CA DA C4    >                        jp      z,src_BoundsLimit
 475+ C4A1 3D                                   dec    a
 476+ C4A2 32 AA 98                             ld      (TargetPlanetX),a
 477+ C4A5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 478+ C4A8 C9                                   ret
 479+ C4A9              ;----------------------------------------------------------------------------------------------------------------------------------
 480+ C4A9 3A AA 98     src_RightPressed:       ld     a,(TargetPlanetX)
 481+ C4AC                                      JumpIfAEqNusng 253,src_BoundsLimit
 481+ C4AC FE FD       >                        cp     253
 481+ C4AE CA DA C4    >                        jp      z,src_BoundsLimit
 482+ C4B1 3C                                   inc    a
 483+ C4B2 32 AA 98                             ld      (TargetPlanetX),a
 484+ C4B5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 485+ C4B8 C9                                   ret
 486+ C4B9              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ C4B9 2A A8 98     src_HomePressed:        ld      hl,(PresentSystemX)
 488+ C4BC 22 AA 98                             ld      (TargetPlanetX),hl
 489+ C4BF CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 490+ C4C2 C9                                   ret
 491+ C4C3              ;----------------------------------------------------------------------------------------------------------------------------------
 492+ C4C3 DD 01        src_RecenterPressed:    break
 493+ C4C5 3A 95 98                             ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 494+ C4C8                                      MMUSelectGalaxyA
 494+ C4C8 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 495+ C4CB ED 4B AA 98                          ld      bc,(TargetPlanetX)
 496+ C4CF CD 60 FB                             call    find_nearest_to_bc
 497+ C4D2 ED 43 AA 98                          ld      (TargetPlanetX),bc
 498+ C4D6 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 499+ C4D9 C9                                   ret
 500+ C4DA              ;----------------------------------------------------------------------------------------------------------------------------------
 501+ C4DA AF           src_BoundsLimit:        xor     a
 502+ C4DB C9                                   ret
 503+ C4DC
# file closed: ./Menus/short_range_chart_menu.asm
1077  C4DC              ; Bank 51
1078  C4DC
1079  C4DC                  SLOT    MenuGalChtAddr
1080  C4DC                  PAGE    BankMenuGalCht
1081  C4DC              	ORG     MenuGalChtAddr
1082  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 D2 A3  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
   8+ C018 61 6E 63 65
   8+ C01C 3A 20
   9+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  10+ C021 2E           galactic_chart_decimal      DB "."
  11+ C022 30           galactic_chart_fraction     DB "0"
  12+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  12+ C027 68 74 20 59
  12+ C02B 65 61 72 73
  12+ C02F 00
  13+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  13+ C034 30 00
  14+ C036
  15+ C036 00 00 00...  galactic_distance           DS  6
  16+ C03C
  17+ C03C              galactic_find_position      equ $B008
  18+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  18+ C040 3A 20 00
  19+ C043              galactic_find_text          equ $B038
  20+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  20+ C047 20 20 20 20
  20+ C04B 20 20 20 20
  20+ C04F 20 20 20 20
  20+ C053 20 20 20 20
  20+ C057 00
  21+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  21+ C05C 20 53 79 73
  21+ C060 74 65 6D 20
  21+ C064 4E 6F 74 20
  21+ C068 46 6F 75 6E
  21+ C06C 64 20 2D 2D
  21+ C070 2A 2A 00
  22+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  22+ C077 2D 2D 20 53
  22+ C07B 79 73 74 65
  22+ C07F 6D 20 46 6F
  22+ C083 75 6E 64 20
  22+ C087 2D 2D 2A 2A
  22+ C08B 20 20 00
  23+ C08E
  24+ C08E              GCM_print_boiler_text:
  25+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E              .BoilerTextLoop:
   4++C08E C5           	push		bc			; Save Message Count loop value
   5++C08F 4E           	ld			c,(hl)		; Get Row into b
   6++C090 23           	inc			hl
   7++C091 46           	ld			b,(hl)		; Get Col into b
   8++C092 23           	inc			hl
   9++C093 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C094 23           	inc			hl
  11++C095 56           	ld			d,(hl)		; Get text address Hi into E
  12++C096 23           	inc			hl
  13++C097 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C098 EB           	ex			de,hl		; now hl = address of text data
  15++C099 1E FF        	ld			e,txt_status_colour
  16++C09B C5           	push		bc
  17++C09C D1           	pop			de
  18++C09D                  MMUSelectLayer1
  18++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0A1 CD C8 E0     	call		l1_print_at
  20++C0A4 E1           	pop			hl
  21++C0A5 C1           	pop			bc
  22++C0A6 10 E6        	djnz		.BoilerTextLoop
  23++C0A8 C9           	ret
  24++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  26+ C0A9              GCM_draw_chart_circle_and_crosshair:
  27+ C0A9 ED 4B A8 98  	ld		bc,(PresentSystemX)				; bc = present system
  28+ C0AD              .OnGalacticChart:
  29+ C0AD CB 38        	srl		b								; but row is row / 2
  30+ C0AF C5           	push  	bc
  31+ C0B0              	MMUSelectSpriteBank
  31+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  32+ C0B4 CD 8C E0     	call	sprite_galactic_cursor
  33+ C0B7 C1           	pop		bc
  34+ C0B8 78           	ld		a,b
  35+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  36+ C0BB 47           	ld		b,a
  37+ C0BC 3A D4 9B     	ld		a,(Fuel)
  38+ C0BF CB 3F        	srl		a
  39+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  40+ C0C3 57           	ld		d,a
  41+ C0C4 1E FF        	ld		e,$FF
  42+ C0C6              	MMUSelectLayer2
  42+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0CA CD 56 E7     	call	l2_draw_circle
  44+ C0CD C9           	ret
  45+ C0CE              ; TODO MOVE CURSOR CODE
  46+ C0CE
  47+ C0CE              GCM_draw_hyperspace_cross_hair:
  48+ C0CE ED 4B AA 98  	ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0D2              .OnGalacticChart:
  50+ C0D2 CB 38        	srl		b								; but row is row / 2
  51+ C0D4              	MMUSelectSpriteBank
  51+ C0D4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  52+ C0D8 CD 98 E0     	call	sprite_galactic_hyper_cursor
  53+ C0DB C9           	ret
  54+ C0DC
  55+ C0DC
  56+ C0DC              plot_gc_stars:
  57+ C0DC AF           	xor		a
  58+ C0DD 32 9B 97     	ld		(XSAV),a
  59+ C0E0 DD 21 16 E0      ld      ix,galaxy_data
  60+ C0E4              .CounterLoop:
  61+ C0E4 3A 95 98         ld      a,(Galaxy)
  62+ C0E7                  MMUSelectGalaxyA
  62+ C0E7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  63+ C0EA DD E5            push    ix
  64+ C0EC E1               pop     hl
  65+ C0ED 11 82 97         ld      de,SystemSeed
  66+ C0F0 CD 6D 9C     	call    copy_seed
  67+ C0F3 3A 85 97     	ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  68+ C0F6 4F           	ld		c,a								; c = X Coord
  69+ C0F7 3A 83 97     	ld		a,(SystemSeed+1)
  70+ C0FA CB 3F        	srl		a								; Ycoord /2
  71+ C0FC C6 18        	add		a,galactic_chart_y_offset		; add offset to Y coord of star
  72+ C0FE 47           	ld		b,a								; b = row
  73+ C0FF C5           	push	bc
  74+ C100 3E D8        	ld		a,galactic_star_colour
  75+ C102                  MMUSelectLayer2
  75+ C102 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  76+ C106 CD FF E0     	call	l2_plot_pixel
  77+ C109 C1           	pop		bc
  78+ C10A 3A 86 97     	ld		a,(SystemSeed+4)
  79+ C10D F6 50        	or		$50								; minimum distance away
  80+ C10F FE 90        	cp		$90
  81+ C111 30 0A        	jr		nc,.NoSecondPixel
  82+ C113              .SecondPixel:
  83+ C113 0C           	inc		c
  84+ C114 3E 6C        	ld		a,galactic_star_colour2
  85+ C116                  MMUSelectLayer2
  85+ C116 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  86+ C11A CD FF E0     	call	l2_plot_pixel
  87+ C11D              .NoSecondPixel:
  88+ C11D DD E5            push    ix
  89+ C11F E1               pop     hl
  90+ C120 ED 34 08 00      add     hl,8
  91+ C124 E5               push    hl
  92+ C125 DD E1            pop     ix
  93+ C127 3A 9B 97     	ld		a,(XSAV)
  94+ C12A 3D           	dec		a
  95+ C12B FE 00        	cp		0
  96+ C12D C8           	ret		z
  97+ C12E 32 9B 97     	ld		(XSAV),a
  98+ C131 18 B1        	jr		.CounterLoop
  99+ C133
 100+ C133 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C137 2A 2A 2A 2A
 100+ C13B 2B 2B 2B 2B
 100+ C13F 2B 2B 2B 2B
 101+ C143              draw_galactic_chart_menu:
 102+ C143                  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C143
   2++C143                  MMUSelectLayer1
   2++C143 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C147 CD 80 E0     	call	l1_cls
   4++C14A 3E 07        	ld		a,7
   5++C14C CD 9B E0     	call	l1_attr_cls_to_a
   6++C14F                  MMUSelectLayer2
   6++C14F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C153 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C156 CD C9 E0     	call	l2_cls	; Get some space
   9++C159              	MMUSelectSpriteBank
   9++C159 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C15D CD 34 E4     	call    sprite_cls_cursors
  11++C160
  12++C160
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 103+ C160 DD 2E DC         ld      ixl,$DC
 104+ C163 3E 40            ld      a,$40
 105+ C165 32 A2 97         ld      (MenuIdMax),a
 106+ C168 2A A8 98         ld      hl,(PresentSystemX)
 107+ C16B 22 AA 98         ld      (TargetPlanetX),hl
 108+ C16E CD 54 C4         call    gc_present_system               ; Set up the seed for present system
 109+ C171              .Drawbox:
 110+ C171 01 01 01     	ld		bc,$0101
 111+ C174 11 FD BE     	ld		de,$BEFD
 112+ C177 3E C0        	ld		a,$C0
 113+ C179              	MMUSelectLayer2
 113+ C179 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 114+ C17D CD F6 E1     	call	l2_draw_box
 115+ C180 01 01 0A     	ld		bc,$0A01
 116+ C183 11 C0 FE     	ld		de,$FEC0
 117+ C186 CD 60 E2     	call	l2_draw_horz_line
 118+ C189              .StaticText:
 119+ C189 3E 0D        	ld		a,galactic_chart_header
 120+ C18B CD 13 A4     	call	expandTokenToString
 121+ C18E 06 01        	ld		b,1
 122+ C190 21 10 C0     	ld		hl,galactic_chart_boiler_text
 123+ C193 CD 8E C0     	call	GCM_print_boiler_text
 124+ C196              .CircleandCrosshair:
 125+ C196 CD A9 C0     	call	GCM_draw_chart_circle_and_crosshair
 126+ C199 CD CE C0     	call	GCM_draw_hyperspace_cross_hair
 127+ C19C CD DC C0     	call	plot_gc_stars
 128+ C19F 3A 95 98         ld      a,(Galaxy)
 129+ C1A2                  MMUSelectGalaxyA
 129+ C1A2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 130+ C1A5 ED 4B AA 98      ld      bc,(TargetPlanetX)
 131+ C1A9 ED 43 5B E8      ld      (GalaxyTargetSystem),bc
 132+ C1AD CD 55 FC         call    galaxy_system_under_cursor
 133+ C1B0 CD AC C3         call    gc_name_if_possible
 134+ C1B3 AF               xor     a
 135+ C1B4 32 B8 C1         ld      (gcFindInputMode),a
 136+ C1B7              ;IFDEF DOUBLEBUFFER
 137+ C1B7              ;    MMUSelectLayer2
 138+ C1B7              ;    call  l2_flip_buffers
 139+ C1B7              ;ENDIF
 140+ C1B7 C9           	ret
 141+ C1B8
 142+ C1B8              gcDelayVal        equ $0A
 143+ C1B8              gcBlinkVal        equ $10
 144+ C1B8
 145+ C1B8 00           gcFindInputMode   DB  0
 146+ C1B9 10           gcCursorBlink     DB  gcBlinkVal
 147+ C1BA 20           gcCursorChar      DB  " "
 148+ C1BB 00           gcEndOfString     DB  0
 149+ C1BC 00 00 00...  gcInputText       DS  31
 150+ C1DB 00 00 00...  gcInputDelay      DS  gcDelayVal
 151+ C1E5 00 00 00 00                    DB  0,0,0,0,0
 151+ C1E9 00
 152+ C1EA 00 00 00...  gcBlank           DS  32
 153+ C20A
 154+ C20A              ;----------------------------------------------------------------------------------------------------------------------------------
 155+ C20A              gc_display_find_text:
 156+ C20A 11 08 B0      	ld		de,galactic_find_position   ; Wipe input area on screen
 157+ C20D 21 3C C0         ld      hl,galactic_find_message
 158+ C210                  MMUSelectLayer1
 158+ C210 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 159+ C214 CD C8 E0     	call	l1_print_at
 160+ C217 C9               ret
 161+ C218              ;----------------------------------------------------------------------------------------------------------------------------------
 162+ C218              gc_display_find_string:
 163+ C218 11 BC C1         ld      de,gcInputText
 164+ C21B CD 3E 95         call    keyboard_copy_input_to_de
 165+ C21E 21 BA C1         ld      hl,gcCursorChar         ; Now just copy cursor char too
 166+ C221 ED A0            ldi                             ; Copy cursor to local
 167+ C223 3A 3B 95         ld      a,(InputCursor)
 168+ C226 3C               inc     a
 169+ C227 47               ld      b,a
 170+ C228 3E 14            ld      a,20
 171+ C22A 90               sub     b
 172+ C22B 47               ld      b,a
 173+ C22C 3E 20            ld      a," "
 174+ C22E              .SpacePad
 175+ C22E 12               ld      (de),a
 176+ C22F 13               inc     de
 177+ C230 10 FC            djnz    .SpacePad
 178+ C232 AF               xor     a
 179+ C233 12               ld      (de),a
 180+ C234 11 38 B0     	ld		de,galactic_find_text    ; Display text
 181+ C237 21 BC C1         ld      hl,gcInputText
 182+ C23A                  MMUSelectLayer1
 182+ C23A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 183+ C23E CD C8 E0     	call	l1_print_at
 184+ C241 C9               ret
 185+ C242
 186+ C242              blink_cursor:
 187+ C242 3A B9 C1         ld      a,(gcCursorBlink)
 188+ C245 3D               dec     a
 189+ C246 32 B9 C1         ld      (gcCursorBlink),a
 190+ C249 C0               ret     nz
 191+ C24A              .FlashCursor:
 192+ C24A 3E 10            ld      a,gcBlinkVal
 193+ C24C 32 B9 C1         ld      (gcCursorBlink),a
 194+ C24F 3A BA C1         ld      a,(gcCursorChar)
 195+ C252 FE 20            cp      " "
 196+ C254 28 06            jr      z,.ChangeToStar
 197+ C256 3E 20            ld      a," "
 198+ C258 32 BA C1         ld      (gcCursorChar),a
 199+ C25B C9               ret
 200+ C25C              .ChangeToStar:
 201+ C25C 3E 2A            ld      a,"*"
 202+ C25E 32 BA C1         ld      (gcCursorChar),a
 203+ C261 C9               ret
 204+ C262              ;----------------------------------------------------------------------------------------------------------------------------------
 205+ C262 3A B8 C1     loop_gc_menu:           ld      a,(gcFindInputMode)
 206+ C265 FE 00                                cp      0
 207+ C267 20 1C                                jr      nz,AlreadyInInputMode
 208+ C269 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 209+ C26B CD CE 94                             call    is_key_pressed
 210+ C26E C0                                   ret     nz
 211+ C26F CD 51 95                             call    initInputText                           ;Initialise find input
 212+ C272 3E FF                                ld      a,$FF
 213+ C274 32 B8 C1                             ld      (gcFindInputMode),a                     ; Set input mode to FF
 214+ C277 3E 10                                ld      a,gcBlinkVal
 215+ C279 32 B9 C1                             ld      (gcCursorBlink),a                       ; Set up Blink
 216+ C27C 3E 0A                                ld      a,gcDelayVal
 217+ C27E 32 DB C1                             ld     (gcInputDelay),a                         ; And keyboard rescan delay
 218+ C281 CD 0A C2     .DisplayInputbar:       call    gc_display_find_text
 219+ C284 C9                                   ret
 220+ C285              ;Already in input mode post pressing find
 221+ C285 3A DB C1     AlreadyInInputMode:     ld      a,(gcInputDelay)                    ; keyboard next press delay
 222+ C288 FE 00                                cp      0                                   ; can no read until its zero
 223+ C28A 20 17                                jr      nz,.blinkCursor                     ; so re just go to blink cursor routine if not permitted
 224+ C28C CD 65 95     .HasKeyBeenPressed:     call    InputName                           ; else we are ready to read input
 225+ C28F 3A 3D 95                             ld      a,(InputChanged)
 226+ C292 47                                   ld      b,a
 227+ C293 FE 00                                cp      0
 228+ C295 28 13                                jr      z,.blinkNoDelay                     ; when we go hear the input delay could be zero a flip over
 229+ C297 3E 0A                                ld      a,gcDelayVal
 230+ C299 32 DB C1                             ld     (gcInputDelay),a
 231+ C29C 3A 3C 95     .WasItEnter:            ld      a,(EnterPressed)
 232+ C29F FE 00                                cp      0
 233+ C2A1 20 1A                                jr      nz,.FindEnterPressed
 234+ C2A3 3A DB C1     .blinkCursor:           ld      a,(gcInputDelay)
 235+ C2A6 3D                                   dec     a
 236+ C2A7 32 DB C1                             ld     (gcInputDelay),a
 237+ C2AA CD 42 C2     .blinkNoDelay:          call    blink_cursor
 238+ C2AD 3A B9 C1                             ld      a,(gcCursorBlink)
 239+ C2B0 FE 10                                cp      gcBlinkVal
 240+ C2B2 CC 18 C2                             call    z,gc_display_find_string
 241+ C2B5 C9                                   ret
 242+ C2B6 78           .FindDone:              ld      a,b
 243+ C2B7 FE 00                                cp      0
 244+ C2B9 C4 18 C2                             call    nz,gc_display_find_string
 245+ C2BC C9                                   ret
 246+ C2BD AF           .FindEnterPressed:      xor     a
 247+ C2BE 32 3C 95                             ld      (EnterPressed),a                    ; reset enter
 248+ C2C1 32 B8 C1                             ld      (gcFindInputMode),a
 249+ C2C4 3A 95 98                             ld      a,(Galaxy)                          ; Fetch correct galaxy seed bank into memory
 250+ C2C7                                      MMUSelectGalaxyA
 250+ C2C7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C2CA 21 1C 95                             ld      hl,InputString
 252+ C2CD 11 5D E8                             ld      de,GalaxySearchString
 253+ C2D0 CD CF F6                             call    GalaxyCopyLoop
 254+ C2D3 CD 2C FB                             call    find_system_by_name
 255+ C2D6 FE FF                                cp      $FF                                 ; 0 denotes found FF, failure
 256+ C2D8 28 1D                                jr      z,.FindNoMatch
 257+ C2DA 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 258+ C2DD 4F                                   ld      c,a
 259+ C2DE 3A F8 E8                             ld      a,(GalaxyWorkingSeed+1)
 260+ C2E1 47                                   ld      b,a
 261+ C2E2 ED 43 AA 98                          ld      (TargetPlanetX),bc
 262+ C2E6 CD 8B C3                             call    UpdateGalacticCursor
 263+ C2E9 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 264+ C2EC 21 73 C0                             ld      hl,galactic_find_match
 265+ C2EF                                      MMUSelectLayer1
 265+ C2EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 266+ C2F3 CD C8 E0                             call	l1_print_at
 267+ C2F6 C9                                   ret
 268+ C2F7              .FindNoMatch:           ; if not found display "Not found"
 269+ C2F7                                      ; move curor if found
 270+ C2F7 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 271+ C2FA 21 58 C0                             ld      hl,galactic_find_no_match
 272+ C2FD                                      MMUSelectLayer1
 272+ C2FD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 273+ C301 CD C8 E0                             call	l1_print_at
 274+ C304 C9                                   ret; DOSTUFFHERE
 275+ C305              ;----------------------------------------------------------------------------------------------------------------------------------
 276+ C305 3A B8 C1     galctic_chart_cursors:  ld      a,(gcFindInputMode)
 277+ C308 FE 00                                cp      0
 278+ C30A C0                                   ret     nz
 279+ C30B 3A A0 97                             ld      a,(CursorKeysPressed)
 280+ C30E FE 00                                cp      0
 281+ C310 C8                                   ret     z
 282+ C311 17                                   rla
 283+ C312 DC 2A C3                             call   c,gc_UpPressed
 284+ C315 17                                   rla
 285+ C316 DC 3A C3                             call   c,gc_DownPressed
 286+ C319 17                                   rla
 287+ C31A DC 4A C3                             call   c,gc_LeftPressed
 288+ C31D 17                                   rla
 289+ C31E DC 5A C3                             call   c,gc_RightPressed
 290+ C321 17                                   rla
 291+ C322 DC 6A C3                             call   c,gc_HomePressed
 292+ C325 17                                   rla
 293+ C326 DC 74 C3                             call   c,gc_RecenterPressed
 294+ C329 C9                                   ret
 295+ C32A              ;----------------------------------------------------------------------------------------------------------------------------------
 296+ C32A 3A AB 98     gc_UpPressed:           ld     a,(TargetPlanetX+1)
 297+ C32D                                      JumpIfAEqNusng 1,gc_BoundsLimit
 297+ C32D FE 01       >                        cp     1
 297+ C32F CA 89 C3    >                        jp      z,gc_BoundsLimit
 298+ C332 3D                                   dec     a
 299+ C333 32 AB 98                             ld      (TargetPlanetX+1),a
 300+ C336 CD 8B C3                             call    UpdateGalacticCursor
 301+ C339 C9                                   ret
 302+ C33A              ;----------------------------------------------------------------------------------------------------------------------------------
 303+ C33A 3A AB 98     gc_DownPressed:         ld     a,(TargetPlanetX+1)
 304+ C33D                                      JumpIfAEqNusng 255,gc_BoundsLimit
 304+ C33D FE FF       >                        cp     255
 304+ C33F CA 89 C3    >                        jp      z,gc_BoundsLimit
 305+ C342 3C                                   inc    a
 306+ C343 32 AB 98                             ld      (TargetPlanetX+1),a
 307+ C346 CD 8B C3                             call    UpdateGalacticCursor
 308+ C349 C9                                   ret
 309+ C34A              ;----------------------------------------------------------------------------------------------------------------------------------
 310+ C34A 3A AA 98     gc_LeftPressed:         ld     a,(TargetPlanetX)
 311+ C34D                                      JumpIfAEqNusng 2,gc_BoundsLimit
 311+ C34D FE 02       >                        cp     2
 311+ C34F CA 89 C3    >                        jp      z,gc_BoundsLimit
 312+ C352 3D                                   dec    a
 313+ C353 32 AA 98                             ld      (TargetPlanetX),a
 314+ C356 CD 8B C3                             call    UpdateGalacticCursor
 315+ C359 C9                                   ret
 316+ C35A              ;----------------------------------------------------------------------------------------------------------------------------------
 317+ C35A 3A AA 98     gc_RightPressed:        ld     a,(TargetPlanetX)
 318+ C35D                                      JumpIfAEqNusng 253,gc_BoundsLimit
 318+ C35D FE FD       >                        cp     253
 318+ C35F CA 89 C3    >                        jp      z,gc_BoundsLimit
 319+ C362 3C                                   inc    a
 320+ C363 32 AA 98                             ld      (TargetPlanetX),a
 321+ C366 CD 8B C3                             call    UpdateGalacticCursor
 322+ C369 C9                                   ret
 323+ C36A              ;----------------------------------------------------------------------------------------------------------------------------------
 324+ C36A 2A A8 98     gc_HomePressed:         ld      hl,(PresentSystemX)
 325+ C36D 22 AA 98                             ld      (TargetPlanetX),hl
 326+ C370 CD 8B C3                             call    UpdateGalacticCursor
 327+ C373 C9                                   ret
 328+ C374              ;----------------------------------------------------------------------------------------------------------------------------------
 329+ C374 3A 95 98     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 330+ C377                                      MMUSelectGalaxyA
 330+ C377 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 331+ C37A ED 4B AA 98                          ld      bc,(TargetPlanetX)
 332+ C37E CD 60 FB                             call    find_nearest_to_bc
 333+ C381 ED 43 AA 98                          ld      (TargetPlanetX),bc
 334+ C385 CD 8B C3                             call    UpdateGalacticCursor
 335+ C388 C9                                   ret
 336+ C389              ;----------------------------------------------------------------------------------------------------------------------------------
 337+ C389 AF           gc_BoundsLimit          xor     a
 338+ C38A C9                                   ret
 339+ C38B
 340+ C38B              ;----------------------------------------------------------------------------------------------------------------------------------
 341+ C38B ED 4B AA 98  UpdateGalacticCursor:   ld		bc,(TargetPlanetX)              ; bc = selected jump
 342+ C38F CB 38        OnGalacticChart:        srl		b								; but row is row / 2
 343+ C391                                      MMUSelectSpriteBank
 343+ C391 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 344+ C395 CD A4 E0                             call	sprite_ghc_move
 345+ C398 3A 95 98                             ld      a,(Galaxy)
 346+ C39B                                      MMUSelectGalaxyA
 346+ C39B ED 92 57    >                     nextreg GalaxyDataMMU,       a
 347+ C39E ED 4B AA 98                          ld      bc,(TargetPlanetX)
 348+ C3A2 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 349+ C3A6 CD 55 FC                             call    galaxy_system_under_cursor
 350+ C3A9 FE 00                                cp      0
 351+ C3AB C8                                   ret     z
 352+ C3AC              ; just fall into gc_name_if_possible
 353+ C3AC CD 81 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 354+ C3AF CD DA C3                             call    gc_clear_name_area
 355+ C3B2 21 98 A4                             ld		hl,name_expanded
 356+ C3B5 CD F3 A3                             call	CapitaliseString
 357+ C3B8 21 98 A4                             ld		hl, name_expanded
 358+ C3BB 01 0A A0                             ld      bc,$A00A
 359+ C3BE 1E FF                                ld		e,$FF
 360+ C3C0                                      MMUSelectLayer2
 360+ C3C0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 361+ C3C4 CD CF E1                             call	l2_print_7at
 362+ C3C7 CD F4 C3                             call    gc_calc_distance
 363+ C3CA 21 14 C0                             ld      hl,galactic_chart_distance
 364+ C3CD 01 0A A8                             ld      bc,$A80A
 365+ C3D0 1E FF                                ld		e,$FF
 366+ C3D2                                      MMUSelectLayer2
 366+ C3D2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 367+ C3D6 CD CF E1                             call	l2_print_7at
 368+ C3D9 C9                                   ret
 369+ C3DA              ;----------------------------------------------------------------------------------------------------------------------------------
 370+ C3DA 26 08        gc_clear_name_area:     ld      h,8
 371+ C3DC 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 372+ C3DF 01 0A A0                             ld      bc,$A00A
 373+ C3E2 E5           .ClearLoop:             push    hl
 374+ C3E3 D5                                   push    de
 375+ C3E4 C5                                   push    bc
 376+ C3E5                                      MMUSelectLayer2
 376+ C3E5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ C3E9 CD 60 E2                             call	l2_draw_horz_line
 378+ C3EC C1                                   pop     bc
 379+ C3ED D1                                   pop     de
 380+ C3EE E1                                   pop     hl
 381+ C3EF 04                                   inc     b
 382+ C3F0 25                                   dec     h
 383+ C3F1 20 EF                                jr      nz,.ClearLoop
 384+ C3F3 C9                                   ret
 385+ C3F4              ;----------------------------------------------------------------------------------------------------------------------------------
 386+ C3F4 3A 95 98     gc_calc_distance:       ld      a,(Galaxy)
 387+ C3F7                                      MMUSelectGalaxyA
 387+ C3F7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 388+ C3FA 11 1E C0                             ld      de,galactic_chart_dist_amount
 389+ C3FD 21 30 C0                             ld      hl,galactic_default_dist
 390+ C400 ED A0                                ldi
 391+ C402 ED A0                                ldi
 392+ C404 ED A0                                ldi
 393+ C406 ED A0                                ldi
 394+ C408 ED A0                                ldi
 395+ C40A ED 4B A8 98                          ld      bc,(PresentSystemX)
 396+ C40E ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 397+ C412 ED 4B AA 98                          ld      bc,(TargetPlanetX)
 398+ C416 ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 399+ C41A CD E8 FB                             call    galaxy_find_distance            ; get distance into HL
 400+ C41D DD 2A 8A 98                          ld      ix,(Distance)
 401+ C421 11 00 00                             ld      de,0
 402+ C424 FD 21 36 C0                          ld      iy,galactic_distance
 403+ C428 CD 1F AD                             call    DispDEIXtoIY
 404+ C42B FD E5                                push    iy
 405+ C42D E1                                   pop     hl
 406+ C42E 11 36 C0                             ld      de,galactic_distance
 407+ C431 7E                                   ld		a,(hl)				;Push last digit to post decimal
 408+ C432 32 22 C0                             ld		(galactic_chart_fraction),a
 409+ C435 2B                                   dec     hl
 410+ C436 CD 43 AB                             call    compare16HLDE
 411+ C439 38 18                                jr      c,.done_number
 412+ C43B 7E                                   ld      a,(hl)
 413+ C43C 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 414+ C43F 2B                                   dec     hl
 415+ C440 CD 43 AB                             call    compare16HLDE
 416+ C443 38 0E                                jr      c,.done_number
 417+ C445 7E                                   ld      a,(hl)
 418+ C446 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 419+ C449 2B                                   dec     hl
 420+ C44A CD 43 AB                             call    compare16HLDE
 421+ C44D 38 04                                jr      c,.done_number
 422+ C44F 7E                                   ld      a,(hl)
 423+ C450 32 1E C0                             ld      (galactic_chart_dist_amount),a
 424+ C453 C9           .done_number:           ret
 425+ C454              ;----------------------------------------------------------------------------------------------------------------------------------
 426+ C454 AF           gc_present_system:      xor     a
 427+ C455 32 9B 97                             ld		(XSAV),a
 428+ C458 DD 21 16 E0                          ld      ix,galaxy_data
 429+ C45C 3A 95 98     GCCounterLoop:          ld      a,(Galaxy)
 430+ C45F                                      MMUSelectGalaxyA
 430+ C45F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 431+ C462 2A A8 98                             ld      hl,(PresentSystemX)
 432+ C465 DD E5                                push    ix
 433+ C467 7D                                   ld      a,l
 434+ C468 DD BE 03                             cp      (ix+3)                          ; seed x
 435+ C46B 20 14                                jr      nz,.ItsNotThisX
 436+ C46D 7C                                   ld      a,h
 437+ C46E DD BE 01                             cp      (ix+1)                          ; seed x
 438+ C471 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 439+ C473 DD E5                                push    ix
 440+ C475 E1                                   pop     hl
 441+ C476 11 9C 98                             ld      de,PresentSystemSeeds
 442+ C479 CD 6D 9C                             call    copy_seed
 443+ C47C 3E FF                                ld      a,$FF
 444+ C47E DD E1                                pop     ix
 445+ C480 C9                                   ret
 446+ C481 E1           .ItsNotThisX:           pop     hl
 447+ C482 ED 34 08 00                          add     hl,8
 448+ C486 E5                                   push    hl
 449+ C487 DD E1                                pop     ix
 450+ C489 3A 9B 97                             ld		a,(XSAV)
 451+ C48C 3D                                   dec		a
 452+ C48D 32 9B 97                             ld      (XSAV),a
 453+ C490 FE 00                                cp		0
 454+ C492 C8                                   ret		z
 455+ C493 18 C7                                jr		GCCounterLoop
 456+ C495
# file closed: ./Menus//galactic_chart_menu.asm
1083  C495              ; Bank 52
1084  C495
1085  C495                  SLOT    MenuInventAddr
1086  C495                  PAGE    BankMenuInvent
1087  C495              	ORG     MenuInventAddr
1088  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070              .BoilerTextLoop:
   4++C070 C5           	push		bc			; Save Message Count loop value
   5++C071 4E           	ld			c,(hl)		; Get Row into b
   6++C072 23           	inc			hl
   7++C073 46           	ld			b,(hl)		; Get Col into b
   8++C074 23           	inc			hl
   9++C075 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C076 23           	inc			hl
  11++C077 56           	ld			d,(hl)		; Get text address Hi into E
  12++C078 23           	inc			hl
  13++C079 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C07A EB           	ex			de,hl		; now hl = address of text data
  15++C07B 1E FF        	ld			e,txt_status_colour
  16++C07D C5           	push		bc
  17++C07E D1           	pop			de
  18++C07F                  MMUSelectLayer1
  18++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C083 CD C8 E0     	call		l1_print_at
  20++C086 E1           	pop			hl
  21++C087 C1           	pop			bc
  22++C088 10 E6        	djnz		.BoilerTextLoop
  23++C08A C9           	ret
  24++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A D4 9B     	ld		a,(Fuel)
   4++C136 11 63 B3     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 DB 9B                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD 4B 9F                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 76 A2                             ld		hl, WordIdx
 118+ C17A CD 4B 9F                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD C8 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD C8 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD 4B 9F                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 76 A2                             ld		hl,WordIdx
 148+ C1C1 CD 4B 9F                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD C8 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A D2 9B     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A D0 9B                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C1F5
   2++C1F5                  MMUSelectLayer1
   2++C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C1F9 CD 80 E0     	call	l1_cls
   4++C1FC 3E 07        	ld		a,7
   5++C1FE CD 9B E0     	call	l1_attr_cls_to_a
   6++C201                  MMUSelectLayer2
   6++C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C205 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C208 CD C9 E0     	call	l2_cls	; Get some space
   9++C20B              	MMUSelectSpriteBank
   9++C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C20F CD 34 E4     	call    sprite_cls_cursors
  11++C212
  12++C212
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 A2 97                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 34 E4                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD F6 E1                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 60 E2                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 63 B3                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 6F E1                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 6F E1                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
1089  C281
1090  C281              ; Bank 53
1091  C281
1092  C281                  SLOT    MenuSystemAddr
1093  C281                  PAGE    BankMenuSystem
1094  C281              	ORG     MenuSystemAddr
1095  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 D2 A3  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 98 A4  						DW $0280,name_expanded
   5+ C018 08 0B 02 A1  						DW $0B08,WordDistance
   6+ C01C 08 13 0B A1  						DW $1308,WordEconomy
   7+ C020 08 1B 13 A1  						DW $1B08,WordGovernment
   8+ C024 08 23 1E A1  						DW $2308,WordTechLevel
   9+ C028 08 2B 28 A1  						DW $2B08,WordPopulation
  10+ C02C 08 3B 43 A1  						DW $3B08,WordGross
  11+ C030 38 3B 49 A1  						DW $3B38,WordProductivity
  12+ C034 08 43 56 A1  						DW $4308,WordAverage
  13+ C038 48 43 5E A1  						DW $4348,WordRadius
  14+ C03C 60 0B D2 A3  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 D2 A3  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 09 E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7E E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 63 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 84 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A 95 98     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 107+ C2B1 ED 4B A8 98                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD E8 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5              .BoilerTextLoop:
   4++C2C5 C5           	push		bc			; Save Message Count loop value
   5++C2C6 4E           	ld			c,(hl)		; Get Row into b
   6++C2C7 23           	inc			hl
   7++C2C8 46           	ld			b,(hl)		; Get Col into b
   8++C2C9 23           	inc			hl
   9++C2CA 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C2CB 23           	inc			hl
  11++C2CC 56           	ld			d,(hl)		; Get text address Hi into E
  12++C2CD 23           	inc			hl
  13++C2CE E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C2CF EB           	ex			de,hl		; now hl = address of text data
  15++C2D0 1E FF        	ld			e,txt_status_colour
  16++C2D2 C5           	push		bc
  17++C2D3 D1           	pop			de
  18++C2D4                  MMUSelectLayer1
  18++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C2D8 CD C8 E0     	call		l1_print_at
  20++C2DB E1           	pop			hl
  21++C2DC C1           	pop			bc
  22++C2DD 10 E6        	djnz		.BoilerTextLoop
  23++C2DF C9           	ret
  24++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C2F0
   2++C2F0                  MMUSelectLayer1
   2++C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C2F4 CD 80 E0     	call	l1_cls
   4++C2F7 3E 07        	ld		a,7
   5++C2F9 CD 9B E0     	call	l1_attr_cls_to_a
   6++C2FC                  MMUSelectLayer2
   6++C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C300 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C303 CD C9 E0     	call	l2_cls	; Get some space
   9++C306              	MMUSelectSpriteBank
   9++C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C30A CD 34 E4     	call    sprite_cls_cursors
  11++C30D
  12++C30D
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 130+ C30D AF                                   xor     a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 A2 97                             ld		(MenuIdMax),a
 134+ C316 3A 95 98     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C31C ED 4B AA 98  .CheckCursorOrHome:     ld      bc,(TargetPlanetX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 55 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B A8 98  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 55 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B AA 98  .FoundASystem:          ld      bc,(TargetPlanetX)
 147+ C342 2A A8 98                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 96 98     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD FE F9                             call    galaxy_copy_seed
 159+ C35B CD C1 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD F6 E1                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 60 E2                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD 13 A4                             call	expandTokenToString
 170+ C37B 3A 95 98     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F7 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD FE F9                             call    galaxy_copy_seed
 178+ C38E CD 69 F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 98 A4                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 98 A4                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A 8A 98  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD 10 AD                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD C8 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD 13 A4                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD 13 A4                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD 05 A4                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD C8 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD C8 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD 10 AD                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD C8 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A 95 98     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C455 CD D8 F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD C8 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD 1F AD                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD C8 E0                             call	l1_print_at
 272+ C48F 3A 95 98     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 274+ C495 2A 0F E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD 1F AD                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD C8 E0                             call	l1_print_at
 289+ C4BC 3A 95 98     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 291+ C4C2 11 F7 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD FE F9                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6B F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD 15 E1                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
1096  C4F7
1097  C4F7              ; Bank 54
1098  C4F7
1099  C4F7                  SLOT    MenuMarketAddr
1100  C4F7                  PAGE    BankMenuMarket
1101  C4F7                  ORG     MenuMarketAddr
1102  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 D2 A3  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 98 A4  						DW $0220,name_expanded
   4+ C018 80 0B F2 9F  						DW $0B80,WordUnit
   5+ C01C B0 0B 3B A2  						DW $0BB0,WordQuantity
   6+ C020 08 13 19 A2  						DW $1308,WordProduct
   7+ C024 60 13 21 A2  						DW $1360,WordUoM
   8+ C028 80 13 25 A2  						DW $1380,WordPrice
   9+ C02C B0 13 49 A2  						DW $13B0,WordStock
  10+ C030 E0 13 45 A2  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213              .BoilerTextLoop:
   4++C213 C5           	push		bc			; Save Message Count loop value
   5++C214 4E           	ld			c,(hl)		; Get Row into b
   6++C215 23           	inc			hl
   7++C216 46           	ld			b,(hl)		; Get Col into b
   8++C217 23           	inc			hl
   9++C218 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C219 23           	inc			hl
  11++C21A 56           	ld			d,(hl)		; Get text address Hi into E
  12++C21B 23           	inc			hl
  13++C21C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C21D EB           	ex			de,hl		; now hl = address of text data
  15++C21E 1E FF        	ld			e,txt_status_colour
  16++C220 C5           	push		bc
  17++C221 D1           	pop			de
  18++C222                  MMUSelectLayer1
  18++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C226 CD C8 E0     	call		l1_print_at
  20++C229 E1           	pop			hl
  21++C22A C1           	pop			bc
  22++C22B 10 E6        	djnz		.BoilerTextLoop
  23++C22D C9           	ret
  24++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A D2 9B     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A D0 9B                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A DA 9B                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD C8 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD C8 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position  ; hl = base cursor position + row number * 8
 249+ C28F 57                                   ld      d,a                 ; .
 250+ C290 1E 08                                ld      e,8                 ; .
 251+ C292 ED 30                                mul                         ; .
 252+ C294 53                                   ld      d,e                 ; .
 253+ C295 1E 00                                ld      e,0                 ; .
 254+ C297 19                                   add     hl,de               ; .
 255+ C298 22 41 C0                             ld      (market_cursor),hl  ; save in market cursor and copy to de
 256+ C29B EB                                   ex      hl,de               ; .
 257+ C29C 21 43 C0                             ld      hl,market_blank_line; hl = blank line text
 258+ C29F                                      MMUSelectLayer1             ; print blank line (hl) and position DE
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD C8 E0                             call	l1_print_at         ; .
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 DB 9B                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 76 A2                             ld		hl,WordIdx
 273+ C2C5 CD 4B 9F                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD C8 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 76 A2                             ld		hl,WordIdx
 281+ C2DF CD 4B 9F                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD C8 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD C8 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD C8 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD C8 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C343
   2++C343                  MMUSelectLayer1
   2++C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C347 CD 80 E0     	call	l1_cls
   4++C34A 3E 07        	ld		a,7
   5++C34C CD 9B E0     	call	l1_attr_cls_to_a
   6++C34F                  MMUSelectLayer2
   6++C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C353 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C356 CD C9 E0     	call	l2_cls	; Get some space
   9++C359              	MMUSelectSpriteBank
   9++C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C35D CD 34 E4     	call    sprite_cls_cursors
  11++C360
  12++C360
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 A2 97                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD F6 E1                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD 60 E2                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD 60 E2                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD 60 E2                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD 60 E2                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD 60 E2                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD 60 E2                             call	l2_draw_horz_line
 340+ C3AA 3A 95 98     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,       a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD 13 A4                             call	expandTokenToString
 344+ C3B5 CD 79 F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0              ; Generate the market list on screen
 349+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 350+ C3C2 21 08 20                             ld		hl,market_position          ; set current cursor position on screen
 351+ C3C5 22 41 C0                             ld		(market_cursor),hl          ; .
 352+ C3C8 F5           MarketLoop:	            push	af
 353+ C3C9 CD 8B C2                             call	PrintMarketItem             ; display a single market item
 354+ C3CC F1                                   pop		af
 355+ C3CD 3C                                   inc		a
 356+ C3CE FE 11                                cp		17
 357+ C3D0 20 F6                                jr		nz,MarketLoop
 358+ C3D2 AF           .InitialHighlight:      xor     a
 359+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 360+ C3D6 CD B3 C0                             call    mkt_highlight_row
 361+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 362+ C3DC 11 10 A8                             ld      de,$A810
 363+ C3DF                                      MMUSelectLayer1
 363+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 364+ C3E3 CD C8 E0                             call	l1_print_at
 365+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 366+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 367+ C3EC 11 10 B0                             ld      de,$B010
 368+ C3EF                                      MMUSelectLayer1
 368+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 369+ C3F3 CD C8 E0                             call	l1_print_at
 370+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 371+ C3F9 C9                                   ret
 372+ C3FA
 373+ C3FA
 374+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 375+ C3FA              ; Handles all the input whilst in the market menu
 376+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 377+ C3FC CD CE 94                             call    is_key_pressed
 378+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 379+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 380+ C404 CD CE 94                             call    is_key_pressed
 381+ C407 CC 2C C4                             call    z,mkt_DownPressed
 382+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 383+ C40C CD CE 94                             call    is_key_pressed
 384+ C40F CC 3D C4                             call    z,mkt_LeftPressed
 385+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 386+ C414 CD CE 94                             call    is_key_pressed
 387+ C417 CC 80 C4                             call    z,mkt_RightPressed
 388+ C41A C9                                   ret
 389+ C41B
 390+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 392+ C41E FE 00                                cp      0
 393+ C420 C8                                   ret     z
 394+ C421 CD C3 C0                             call    mkt_lowlight_row
 395+ C424 21 74 C0                             ld      hl,mkt_selected_row
 396+ C427 35                                   dec     (hl)
 397+ C428 CD B3 C0                             call    mkt_highlight_row
 398+ C42B C9                                   ret
 399+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 400+ C42C 3A 74 C0     mkt_DownPressed:        ld      a,(mkt_selected_row)
 401+ C42F FE 10                                cp      16
 402+ C431 C8                                   ret     z
 403+ C432 CD C3 C0                             call    mkt_lowlight_row
 404+ C435 21 74 C0                             ld      hl,mkt_selected_row
 405+ C438 34                                   inc     (hl)
 406+ C439 CD B3 C0                             call    mkt_highlight_row
 407+ C43C C9                                   ret
 408+ C43D              ;----------------------------------------------------------------------------------------------------------------------------------
 409+ C43D 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 410+ C440 21 DB 9B                             ld      hl,CargoTonnes
 411+ C443 ED 31                                add     hl,a
 412+ C445 7E                                   ld      a,(hl)
 413+ C446 FE 00                                cp      0
 414+ C448 C8                                   ret     z
 415+ C449 35                                   dec     (hl)
 416+ C44A DD 21 00 E0                          ld      ix,StockFood
 417+ C44E 3A 74 C0                             ld      a,(mkt_selected_row)
 418+ C451 16 08                                ld      d,8
 419+ C453 5F                                   ld      e,a
 420+ C454 ED 30                                mul
 421+ C456 DD 19                                add     ix,de
 422+ C458                                      MMUSelectStockTable
 422+ C458 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 423+ C45C DD 34 01                             inc     (ix+1)
 424+ C45F DD 7E 07                             ld      a,(ix+7)
 425+ C462 FE 30                                cp      48
 426+ C464 20 04                                jr      nz,.UnderATonne
 427+ C466 21 DA 9B                             ld      hl,CargoRunningLoad
 428+ C469 35                                   dec     (hl)            ; We need to cosider UoM
 429+ C46A DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 430+ C46D 16 00                                ld      d,0
 431+ C46F 5F                                   ld      e,a
 432+ C470 CD D7 A5                             call    addDEtoCash
 433+ C473                                      ; DO ADD CASH
 434+ C473 3A 74 C0                             ld      a,(mkt_selected_row)
 435+ C476 CD 8B C2                             call    PrintMarketItem
 436+ C479 CD 69 C2                             call    MKT_DisplayCargo
 437+ C47C CD 7A C2                             call    MKT_DisplayCash
 438+ C47F C9                                   ret
 439+ C480              ;----------------------------------------------------------------------------------------------------------------------------------
 440+ C480              mkt_RightPressed:       MMUSelectStockTable
 440+ C480 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 441+ C484 DD 21 00 E0                          ld      ix,StockFood
 442+ C488 3A 74 C0                             ld      a,(mkt_selected_row)
 443+ C48B 16 08                                ld      d,8
 444+ C48D 5F                                   ld      e,a
 445+ C48E ED 30                                mul
 446+ C490 DD 19                                add     ix,de
 447+ C492 4F                                   ld      c,a
 448+ C493 DD 7E 01                             ld      a,(ix+1)
 449+ C496 FE 00                                cp      0
 450+ C498 C8                                   ret     z
 451+ C499 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 452+ C49C FE 30                                cp      48
 453+ C49E 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 454+ C4A0 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 455+ C4A3 21 DB 9B                             ld      hl,CargoTonnes
 456+ C4A6 ED 31                                add     hl,a
 457+ C4A8 7E                                   ld      a,(hl)
 458+ C4A9 FE C8                                cp      200
 459+ C4AB C8                                   ret     z                                   ; else its a 200 UoM limit
 460+ C4AC C3 B5 C4                             jp      .CheckCash
 461+ C4AF 2A D9 9B     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 462+ C4B2 7C                                   ld      a,h
 463+ C4B3 BD                                   cp      l
 464+ C4B4 C8                                   ret     z                                   ; return if we have already maxed out
 465+ C4B5 2A D2 9B     .CheckCash:             ld      hl,(Cash+2)
 466+ C4B8 7C                                   ld      a,h
 467+ C4B9 B5                                   or      l
 468+ C4BA 20 0F                                jr      nz,.MoreThanRequired
 469+ C4BC 2A D0 9B                             ld      hl,(Cash)
 470+ C4BF 7C                                   ld      a,h
 471+ C4C0 FE 00                                cp      0
 472+ C4C2 20 07                                jr      nz,.MoreThanRequired
 473+ C4C4 DD 7E 02                             ld      a,(ix+2)
 474+ C4C7 BD                                   cp      l
 475+ C4C8 30 01                                jr      nc,.MoreThanRequired
 476+ C4CA C9                                   ret                         ; Insufficient Funds
 477+ C4CB 19           .MoreThanRequired:      add     hl,de
 478+ C4CC 7C                                   ld      a,h
 479+ C4CD B3                                   or      e
 480+ C4CE                                      ; check cash can we buy, and cargo capacity
 481+ C4CE DD 35 01                             dec     (ix+1)
 482+ C4D1 3A 74 C0                             ld      a,(mkt_selected_row)
 483+ C4D4 21 DB 9B                             ld      hl,CargoTonnes
 484+ C4D7 ED 31                                add     hl,a
 485+ C4D9 34                                   inc     (hl)
 486+ C4DA DD 7E 07                             ld      a,(ix+7)
 487+ C4DD 47                                   ld      b,a
 488+ C4DE FE 30                                cp      48
 489+ C4E0 20 05                                jr      nz,.UnderOneTonne
 490+ C4E2 78                                   ld      a,b
 491+ C4E3 21 DA 9B                             ld      hl,CargoRunningLoad
 492+ C4E6 34                                   inc     (hl)
 493+ C4E7 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 494+ C4EA 16 00                                ld      d,0
 495+ C4EC 5F                                   ld      e,a
 496+ C4ED CD EA A5                             call    subDEfromCash
 497+ C4F0 3A 74 C0                             ld      a,(mkt_selected_row)
 498+ C4F3 CD 8B C2                             call    PrintMarketItem
 499+ C4F6 CD 69 C2                             call    MKT_DisplayCargo
 500+ C4F9 CD 7A C2                             call    MKT_DisplayCash
 501+ C4FC C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
1103  C4FD
1104  C4FD              ; Bank 66
1105  C4FD
1106  C4FD                  SLOT    DispMarketAddr
1107  C4FD                  PAGE    BankDispMarket
1108  C4FD                  ORG     DispMarketAddr
1109  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 D2 A3  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 98 A4  						DW $0220,name_expanded
   4+ C018 80 0B F2 9F  						DW $0B80,WordUnit
   5+ C01C B0 0B 3B A2  						DW $0BB0,WordQuantity
   6+ C020 08 13 19 A2  						DW $1308,WordProduct
   7+ C024 60 13 21 A2  						DW $1360,WordUoM
   8+ C028 80 13 25 A2  						DW $1380,WordPrice
   9+ C02C B0 13 49 A2  						DW $13B0,WordStock
  10+ C030 E0 13 45 A2  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3              .BoilerTextLoop:
   4++C1F3 C5           	push		bc			; Save Message Count loop value
   5++C1F4 4E           	ld			c,(hl)		; Get Row into b
   6++C1F5 23           	inc			hl
   7++C1F6 46           	ld			b,(hl)		; Get Col into b
   8++C1F7 23           	inc			hl
   9++C1F8 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C1F9 23           	inc			hl
  11++C1FA 56           	ld			d,(hl)		; Get text address Hi into E
  12++C1FB 23           	inc			hl
  13++C1FC E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C1FD EB           	ex			de,hl		; now hl = address of text data
  15++C1FE 1E FF        	ld			e,txt_status_colour
  16++C200 C5           	push		bc
  17++C201 D1           	pop			de
  18++C202                  MMUSelectLayer1
  18++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C206 CD C8 E0     	call		l1_print_at
  20++C209 E1           	pop			hl
  21++C20A C1           	pop			bc
  22++C20B 10 E6        	djnz		.BoilerTextLoop
  23++C20D C9           	ret
  24++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A D2 9B     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A D0 9B                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A DA 9B                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:   call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD C8 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD C8 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:       push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD C8 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 DB 9B                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 76 A2                             ld		hl,WordIdx
 256+ C2A5 CD 4B 9F                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD C8 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 76 A2                             ld		hl,WordIdx
 264+ C2BF CD 4B 9F                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD C8 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD C8 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD C8 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD C8 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C323
   2++C323                  MMUSelectLayer1
   2++C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C327 CD 80 E0     	call	l1_cls
   4++C32A 3E 07        	ld		a,7
   5++C32C CD 9B E0     	call	l1_attr_cls_to_a
   6++C32F                  MMUSelectLayer2
   6++C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C333 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C336 CD C9 E0     	call	l2_cls	; Get some space
   9++C339              	MMUSelectSpriteBank
   9++C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C33D CD 34 E4     	call    sprite_cls_cursors
  11++C340
  12++C340
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 A2 97                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD F6 E1                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD 60 E2                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD 60 E2                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD 60 E2                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD 60 E2                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD 60 E2                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD 60 E2                             call	l2_draw_horz_line
 323+ C38A 3A 95 98     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD 13 A4                             call	expandTokenToString
 327+ C395 CD 79 F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD C8 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD C8 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: ./Menus/market_prices_disp.asm
1110  C3D3
1111  C3D3              ; Bank 55
1112  C3D3
1113  C3D3                  SLOT    StockTableAddr
1114  C3D3                  PAGE    BankStockTable
1115  C3D3                  ORG     StockTableAddr
1116  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088
  63+ E088
  64+ E088
  65+ E088              AlienItemsIndex		    equ 16
  66+ E088              StockListLen		    equ	17
  67+ E088
  68+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  68+ E08C 10 E0
  69+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  69+ E092 28 E0
  70+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  70+ E098 40 E0
  71+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  71+ E09E 58 E0
  72+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  72+ E0A4 70 E0
  73+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  74+ E0AA
  75+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  76+ E0AC CD 67 9C                             call	copy_galaxy_to_system
  77+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  78+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  79+ E0B6 DD 19                                add		ix,de				; Move down a row
  80+ E0B8 04                                   inc		b
  81+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  82+ E0BC 3A 72 98                             ld		a,(RandomMarketSeed)
  83+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  84+ E0C2 81                                   add		a,c
  85+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  86+ E0C4 3A 83 98                             ld		a,(DisplayEcononmy)	; d= economy
  87+ E0C7 57                                   ld		d,a
  88+ E0C8 DD 7E 04                             ld		a,(ix+4)
  89+ E0CB 5F                                   ld		e,a					; e  = economy adjust
  90+ E0CC CB 7B                                bit		7,e
  91+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
  92+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
  93+ E0D0 7B                                   ld		a,e
  94+ E0D1 ED 44                                neg
  95+ E0D3 5F                                   ld		e,a
  96+ E0D4              .PosMul:
  97+ E0D4 7B                                   ld		a,e
  98+ E0D5 ED 44                                neg
  99+ E0D7 5F                                   ld		e,a
 100+ E0D8 ED 30                                mul
 101+ E0DA 79                                   ld		a,c
 102+ E0DB 83                                   add		a,e
 103+ E0DC CB 27                                sla		a
 104+ E0DE CB 27                                sla		a					; Multply price by 4
 105+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 106+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 107+ E0E6 3A 72 98                             ld		a,(RandomMarketSeed)
 108+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 109+ E0EC 81                                   add		a,c
 110+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 111+ E0EE 3A 83 98                             ld		a,(DisplayEcononmy)	; d= economy
 112+ E0F1 57                                   ld		d,a
 113+ E0F2 DD 7E 04                             ld		a,(ix+4)
 114+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 115+ E0F6 CB 7B                                bit		7,e
 116+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 117+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 118+ E0FB ED 44                                neg
 119+ E0FD 5F                                   ld		e,a
 120+ E0FE 7B           .PosQtyMul:             ld		a,e
 121+ E0FF ED 44                                neg
 122+ E101 5F                                   ld		e,a
 123+ E102 ED 30                                mul
 124+ E104 79                                   ld		a,c
 125+ E105 93                                   sub		e
 126+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 127+ E109 78                                   ld		a,b
 128+ E10A FE 10                                cp		AlienItemsIndex
 129+ E10C 20 A5                                jr		nz,.generate_stock_loop
 130+ E10E AF                                   xor		a
 131+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 132+ E112 C9                                   ret
 133+ E113
# file closed: ./Tables/stock_table.asm
1117  E113
1118  E113              ; Bank 57
1119  E113
1120  E113                  SLOT    LAYER2Addr
1121  E113                  PAGE    BankLAYER2
1122  E113                  ORG     LAYER2Addr
1123  E000
1124  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_BUFFER_MODE            DB 0
   4+ E002
   5+ E002 3E 08        asm_l2_double_buffer_on:    ld      a,8
   6+ E004 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
   7+ E007 C9                                       ret
   8+ E008
   9+ E008 AF           asm_l2_double_buffer_off:   xor     a
  10+ E009 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
  11+ E00C C9                                       ret
  12+ E00D
  13+ E00D
  14+ E00D              ; "asm_l2_bank_select"
  15+ E00D              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  16+ E00D 57           asm_l2_bank_select:         ld      d,a
  17+ E00E 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  18+ E011 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  19+ E013 B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  20+ E014 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  21+ E017 ED 79                                    out 	(c),a
  22+ E019 C9                                       ret
  23+ E01A              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  24+ E01A 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  25+ E01D FE 00                                    cp		0
  26+ E01F 20 04                                    jr 		nz,.nottopbank
  27+ E021 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  28+ E023 18 E8                                    jr		asm_l2_bank_select
  29+ E025 FE 01        .nottopbank:                cp		1
  30+ E027 20 04                                    jr 		nz,.notmiddlebank
  31+ E029 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  32+ E02B 18 E0                                    jr		asm_l2_bank_select
  33+ E02D 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  34+ E02F 18 DC                                    jr		asm_l2_bank_select
  35+ E031              		; Note no ret as its handled by above routines
  36+ E031
  37+ E031              ; "asm_l2_row_bank_select"
  38+ E031              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
  39+ E031              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
  40+ E031              ; "destroys BC call de is safe a = adjusted poke pixel row"
  41+ E031 FE 40        asm_l2_row_bank_select:     cp 		64			; row < 64?
  42+ E033 30 11                                    jr 		nc, .l2rowGTE64
  43+ E035 08           .l2rowLT64:                 ex		af,af'
  44+ E036                                          ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
  45+ E036 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  46+ E039 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  47+ E03B 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  48+ E03E ED 79                                    out 	(c),a
  49+ E040 AF                                       xor		a						; set a to 0
  50+ E041 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  51+ E044 08                                       ex		af,af'					; return pixel poke unharmed
  52+ E045 C9                                       ret
  53+ E046 FE 80        .l2rowGTE64:                cp 		128
  54+ E048 30 14                                    jr 		nc, .l2rowGTE128
  55+ E04A 08           .l2row64to127:              ex		af,af'
  56+ E04B                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
  57+ E04B 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  58+ E04E F6 43                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  59+ E050 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  60+ E053 ED 79                                    out 	(c),a
  61+ E055 3E 01                                    ld		a,1						; set a to 1
  62+ E057 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  63+ E05A 08                                       ex		af,af'
  64+ E05B D6 40                                    sub		64
  65+ E05D C9                                       ret
  66+ E05E 08           .l2rowGTE128:               ex		af,af'
  67+ E05F                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
  68+ E05F 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  69+ E062 F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  70+ E064
  71+ E064 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  72+ E067 ED 79                                    out 	(c),a
  73+ E069 3E 01                                    ld		a,1						; set a to 2
  74+ E06B 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  75+ E06E 08                                       ex		af,af'
  76+ E06F D6 80                                    sub		128
  77+ E071 C9                                       ret
  78+ E072
# file closed: ./Layer2Graphics/layer2_bank_select.asm
1125  E072                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E072
   2+ E072 00           l2_cls_byte	            DB 0
   3+ E073              ; ">DMA Command BLOCK"
   4+ E073
   5+ E073 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E077 7D
   6+ E078 72 E0        l2_fill_astrt           DW l2_cls_byte
   7+ E07A 00 40        l2_fill_length          DB $00,$40
   8+ E07C 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E07F 00 00        l2_fill_bstrt           DB $00,$00
  10+ E081 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E085              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E085
  13+ E085              l2_cls_dma_bank:
  14+ E085              ; ">l2_cls_dma_bank"
  15+ E085              ; ">sets a bank to"
  16+ E085 32 72 E0     .set_colour:            ld (l2_cls_byte),a
  17+ E088 21 73 E0     .write_dma:             ld hl, l2_fill
  18+ E08B 06 12                                ld b, l2_fill_cmd_len
  19+ E08D 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  20+ E08F ED B3                                otir
  21+ E091 C9                                   ret
  22+ E092
  23+ E092 3E 00        l2_set_color_upper2:    ld      a,0
  24+ E094 CD 31 E0                             call asm_l2_row_bank_select
  25+ E097 3A 72 E0                             ld      a,(l2_cls_byte)
  26+ E09A CD 85 E0                             call l2_cls_dma_bank
  27+ E09D 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  28+ E09F CD 31 E0                             call asm_l2_row_bank_select
  29+ E0A2 3A 72 E0                             ld      a,(l2_cls_byte)
  30+ E0A5 CD 85 E0                             call l2_cls_dma_bank
  31+ E0A8 C9                                   ret
  32+ E0A9
  33+ E0A9
  34+ E0A9 3E 00        l2_cls_upper_two_thirds:ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  35+ E0AB CD 31 E0                             call asm_l2_row_bank_select
  36+ E0AE 3E E3                                ld 	a,COLOUR_TRANSPARENT
  37+ E0B0 CD 85 E0                             call l2_cls_dma_bank
  38+ E0B3 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  39+ E0B5 CD 31 E0                             call asm_l2_row_bank_select
  40+ E0B8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  41+ E0BA CD 85 E0                             call l2_cls_dma_bank
  42+ E0BD C9                                   ret
  43+ E0BE
  44+ E0BE 3E 80        l2_cls_lower_third:     ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  45+ E0C0 CD 31 E0                             call asm_l2_row_bank_select
  46+ E0C3 3E E3                                ld 	a,COLOUR_TRANSPARENT
  47+ E0C5 CD 85 E0                             call l2_cls_dma_bank
  48+ E0C8 C9                                   ret
  49+ E0C9
  50+ E0C9 CD A9 E0     l2_cls:                 call l2_cls_upper_two_thirds
  51+ E0CC CD BE E0                             call l2_cls_lower_third
  52+ E0CF C9                                   ret
  53+ E0D0
# file closed: ./Layer2Graphics/layer2_cls.asm
1126  E0D0                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E0D0
   2+ E0D0 ED 91 12 08  l2_initialise:          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   3+ E0D4 ED 91 13 0B                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   4+ E0D8 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   5+ E0DC C9                                   ret
   6+ E0DD
# file closed: ./Layer2Graphics/layer2_initialise.asm
1127  E0DD                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E0DD              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E0DD C5          >            push bc
   1+ E0DE 01 3B 24    >                ld bc,$243B
   1+ E0E1 3E 12       >                    ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E0E3 ED 79       >                    out (c),a
   1+ E0E5 04          >                    inc b
   1+ E0E6 ED 78       >                in a,(c)
   1+ E0E8 C1          >            pop bc
   2+ E0E9 57                                   ld      d,a
   3+ E0EA                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E0EA C5          >            push bc
   3+ E0EB 01 3B 24    >                ld bc,$243B
   3+ E0EE 3E 13       >                    ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E0F0 ED 79       >                    out (c),a
   3+ E0F2 04          >                    inc b
   3+ E0F3 ED 78       >                in a,(c)
   3+ E0F5 C1          >            pop bc
   4+ E0F6 5F                                   ld      e,a
   5+ E0F7 ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E0FA 7A                                   ld      a,d
   7+ E0FB ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E0FE C9                                   ret
   9+ E0FF
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
1128  E0FF                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E0FF              l2_plot_pixel:
   2+ E0FF              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
   3+ E0FF F5           	push    af
   4+ E100 78               ld      a,b
   5+ E101              l2_pp_row_valid:
   6+ E101                  JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
   6+ E101 FE C0       >                        cp     ScreenHeight
   6+ E103 D2 11 E1    >                        jp		nc,l2_pp_dont_plot
   7+ E106 C5           	push    bc								; bank select destroys bc so need to save it
   8+ E107              ;	ld      a,b
   9+ E107 CD 31 E0     	call    asm_l2_row_bank_select
  10+ E10A C1           	pop     bc
  11+ E10B 47           	ld      b,a
  12+ E10C 60           	ld      h,b								; hl now holds ram address after bank select
  13+ E10D 69           	ld      l,c
  14+ E10E F1           	pop     af								; a = colour to plott
  15+ E10F 77           	ld      (hl),a
  16+ E110 C9           	ret
  17+ E111              l2_pp_dont_plot:
  18+ E111 F1               pop     af
  19+ E112 C9               ret
  20+ E113
  21+ E113              l2_plot_pixel_no_bank:
  22+ E113              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  23+ E113              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  24+ E113 E5           	push 	hl
  25+ E114 60           	ld 		h,b								; hl now holds ram address after bank select
  26+ E115 69           	ld 		l,c
  27+ E116 77           	ld 		(hl),a
  28+ E117 E1           	pop		hl
  29+ E118 C9           	ret
  30+ E119
  31+ E119              l2_plot_pixel_y_test:
  32+ E119 F5           	push	af
  33+ E11A 78           	ld		a,b
  34+ E11B FE C0        	cp		192
  35+ E11D 30 03        	jr		nc,.clearup
  36+ E11F F1           	pop		af
  37+ E120 18 DD        	jr		l2_plot_pixel
  38+ E122              .clearup:
  39+ E122 F1           	pop		af
  40+ E123 C9           	ret
  41+ E124
  42+ E124              l2_point_pixel_y_safe:	MACRO
  43+ E124 ~            						push	hl
  44+ E124 ~            						push	bc
  45+ E124 ~            						call	l2_plot_pixel
  46+ E124 ~            						pop		bc
  47+ E124 ~            						pop		hl
  48+ E124              						ENDM
  49+ E124
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
1129  E124                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E124
   2+ E124              l2_print_chr_at:
   3+ E124              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E124              ; "Need a version that also prints absence of character"
   5+ E124 7A           	ld		a,d
   6+ E125 FE 20        	cp		32
   7+ E127 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E129 FE 7F        	cp		127
   9+ E12B 30 3B        	jr		nc,.InvalidCharacter
  10+ E12D              .ValidCharater:
  11+ E12D 26 00        	ld		h,0
  12+ E12F 6A           	ld		l,d
  13+ E130 29           	add		hl,hl						; * 2
  14+ E131 29           	add		hl,hl						; * 4
  15+ E132 29           	add		hl,hl						; * 8 to get byte address
  16+ E133 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E137 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E138 23           	inc		hl							; skip first byte
  19+ E139 16 07        	ld		d,7
  20+ E13B              .PrintCharLoop:
  21+ E13B D5           	push	de
  22+ E13C 7E           	ld		a,(hl)
  23+ E13D FE 00        	cp		0
  24+ E13F 28 21        	jr		z,.NextRowNoBCPop
  25+ E141              .PrintARow:
  26+ E141 C5           	push	bc							; save row col
  27+ E142 16 07        	ld		d,7							; d is loop row number now
  28+ E144              .PrintPixelLoop:
  29+ E144 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E145              .PrintTheRow:
  31+ E145 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E147 F5           	push	af							; save character byte
  33+ E148 CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E14A 20 04        	jr		nz,.PixelToPrint
  35+ E14C              .NoPixelToPrint:
  36+ E14C 3E E3        	ld		a,$E3
  37+ E14E 18 01        	jr		.HaveSetPixelColour
  38+ E150              .PixelToPrint:
  39+ E150 7B           	ld		a,e							; Get Colour
  40+ E151              .HaveSetPixelColour
  41+ E151 E5           	push	hl
  42+ E152              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E152              .BankOnFirstOnly:
  44+ E152 F5           	push	af
  45+ E153 7A           	ld		a,d
  46+ E154 FE 07        	cp		7
  47+ E156 28 11        	jr		z,.PlotWithBank
  48+ E158              .PlotNoBank:
  49+ E158 F1           	pop		af
  50+ E159 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E15A 69           	ld 		l,c
  52+ E15B 77           	ld 		(hl),a
  53+ E15C              .IterateLoop:
  54+ E15C              ;	pop		bc
  55+ E15C E1           	pop		hl
  56+ E15D F1           	pop		af							; a= current byte shifted
  57+ E15E 15           	dec		d						 	; do dec after inc as we amy
  58+ E15F 20 E3        	jr		nz,.PrintPixelLoop
  59+ E161              .NextRow:
  60+ E161 C1           	pop		bc							; Current Col Row
  61+ E162              .NextRowNoBCPop:
  62+ E162 D1           	pop		de							; d= row loop
  63+ E163 04           	inc		b							; Down 1 row
  64+ E164 23           	inc		hl							; Next character byte
  65+ E165 15           	dec		d							; 1 done now
  66+ E166 20 D3        	jr		nz,.PrintCharLoop
  67+ E168              .InvalidCharacter:
  68+ E168 C9           	ret
  69+ E169              .PlotWithBank:
  70+ E169 F1           	pop		af
  71+ E16A CD FF E0     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E16D 18 ED        	jr		.IterateLoop
  73+ E16F
  74+ E16F              l2_print_at:
  75+ E16F              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E16F              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E16F 7E           	ld	a,(hl)							; Return if empty string
  78+ E170 FE 00        	cp	0
  79+ E172 C8           	ret	z
  80+ E173 E5           	push	hl
  81+ E174 D5           	push	de
  82+ E175 C5           	push	bc
  83+ E176 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E177 CD 24 E1     	call 	l2_print_chr_at
  85+ E17A C1           	pop		bc
  86+ E17B D1           	pop		de
  87+ E17C E1           	pop		hl
  88+ E17D              .Move8Pixlestoright:
  89+ E17D 08           	ex		af,af'
  90+ E17E 79           	ld		a,c
  91+ E17F C6 08        	add		8
  92+ E181 4F           	ld		c,a
  93+ E182 08           	ex		af,af'
  94+ E183 23           	inc		hl
  95+ E184 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E186
  97+ E186
  98+ E186              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E186              ; "Need a version that also prints absence of character"
 100+ E186              ; removed blank line optimisation as we need spaces printed
 101+ E186 7A           l2_print_7chr_at:       ld		a,d
 102+ E187 FE 1F                                cp		31
 103+ E189 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E18B FE 7F                                cp		127
 105+ E18D 30 39                                jr		nc,.InvalidCharacter
 106+ E18F 26 00        .ValidCharater:         ld		h,0
 107+ E191 6A                                   ld		l,d
 108+ E192 29                                   add		hl,hl						; * 2
 109+ E193 29                                   add		hl,hl						; * 4
 110+ E194 29                                   add		hl,hl						; * 8 to get byte address
 111+ E195 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E199 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E19A 23                                   inc		hl							; skip first byte
 114+ E19B 16 07                                ld		d,7
 115+ E19D D5           .PrintCharLoop:         push	de
 116+ E19E 7E                                   ld		a,(hl)
 117+ E19F                                      ;cp		0
 118+ E19F                                      ;jr		z,.NextRowNoBCPop
 119+ E19F C5           .PrintARow:             push	bc							; save row col
 120+ E1A0 16 06                                ld		d,6							; d is loop row number now
 121+ E1A2 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E1A3 28 1C                                jr		z,.NextRow
 123+ E1A5 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E1A7 F5                                   push	af							; save character byte
 125+ E1A8 CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E1AA 20 04                                jr		nz,.PixelToPrint
 127+ E1AC 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E1AE 18 01                                jr		.HaveSetPixelColour
 129+ E1B0 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E1B1 E5           .HaveSetPixelColour		push	hl
 131+ E1B2                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E1B2 F5           .BankOnFirstOnly:       push	af
 133+ E1B3 7A                                   ld		a,d
 134+ E1B4 FE 06                                cp		6
 135+ E1B6 28 11                                jr		z,.PlotWithBank
 136+ E1B8 F1           .PlotNoBank:            pop		af
 137+ E1B9 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E1BA 69                                   ld 		l,c
 139+ E1BB 77                                   ld 		(hl),a
 140+ E1BC              .IterateLoop:	        ;	pop		bc
 141+ E1BC E1                                   pop		hl
 142+ E1BD F1                                   pop		af							; a= current byte shifted
 143+ E1BE 15                                   dec		d						 	; do dec after inc as we amy
 144+ E1BF 20 E1                                jr		nz,.PrintPixelLoop
 145+ E1C1 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E1C2 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E1C3 04                                   inc		b							; Down 1 row
 148+ E1C4 23                                   inc		hl							; Next character byte
 149+ E1C5 15                                   dec		d							; 1 done now
 150+ E1C6 20 D5                                jr		nz,.PrintCharLoop
 151+ E1C8 C9           .InvalidCharacter:      ret
 152+ E1C9 F1           .PlotWithBank:          pop		af
 153+ E1CA CD FF E0                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E1CD 18 ED                                jr		.IterateLoop
 155+ E1CF
 156+ E1CF              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E1CF              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E1CF 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E1D0 FE 00                                cp	0
 160+ E1D2 C8                                   ret	z
 161+ E1D3 E5                                   push	hl
 162+ E1D4 D5                                   push	de
 163+ E1D5 C5                                   push	bc
 164+ E1D6 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E1D7 CD 86 E1                             call 	l2_print_7chr_at
 166+ E1DA C1                                   pop		bc
 167+ E1DB D1                                   pop		de
 168+ E1DC E1                                   pop		hl
 169+ E1DD 08           .Move7Pixlestoright:	ex		af,af'
 170+ E1DE 79                                   ld		a,c
 171+ E1DF C6 07                                add		7
 172+ E1E1 4F                                   ld		c,a
 173+ E1E2 08                                   ex		af,af'
 174+ E1E3 23                                   inc		hl
 175+ E1E4 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E1E6
 177+ E1E6
# file closed: ./Layer2Graphics/layer2_print_character.asm
1130  E1E6                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E1E6              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E1E6              ; TODO DMA Optimise
   3+ E1E6 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E1E9 53                                   ld      d,e
   5+ E1EA 5C                                   ld      e,h
   6+ E1EB CD 60 E2                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E1EE E1 D1 C1                             pop     bc,,de,,hl
   8+ E1F1 04                                   inc     b
   9+ E1F2 15                                   dec     d
  10+ E1F3 C8                                   ret     z
  11+ E1F4 18 F0                                jr      l2_draw_fill_box
  12+ E1F6
  13+ E1F6              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E1F6 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E1F9 53                                   ld		d,e
  16+ E1FA 5F                                   ld		e,a
  17+ E1FB 14                                   inc		d
  18+ E1FC CD 60 E2                             call	l2_draw_horz_line
  19+ E1FF F1 D1 C1                             pop		bc,,de,,af
  20+ E202 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E205 67                                   ld		h,a							;save color whilst b = row + height
  22+ E206 78                                   ld		a,b
  23+ E207 82                                   add		a,d
  24+ E208 47                                   ld		b,a
  25+ E209 53                                   ld		d,e							; d = width
  26+ E20A 14                                   inc		d							; Extra pixel for width
  27+ E20B 5C                                   ld		e,h							; e = colour
  28+ E20C CD 60 E2                             call	l2_draw_horz_line
  29+ E20F F1 D1 C1                             pop		bc,,de,,af
  30+ E212 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E215 04                                   inc		b							; save 2 pixles
  32+ E216 15                                   dec		d
  33+ E217 5F                                   ld		e,a							; e = color
  34+ E218 CD B1 E2                             call	l2_draw_vert_line
  35+ E21B F1 D1 C1                             pop		bc,,de,,af
  36+ E21E 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E21F 15                                   dec		d
  38+ E220 67                                   ld		h,a							;save color whilst c = col + width
  39+ E221 79                                   ld		a,c
  40+ E222 83                                   add		a,e
  41+ E223 4F                                   ld		c,a
  42+ E224 5C                                   ld		e,h							; e = color
  43+ E225 CD B1 E2                             call	l2_draw_vert_line
  44+ E228 C9                                   ret
  45+ E229
# file closed: ./Layer2Graphics/layer2_draw_box.asm
1131  E229                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E229
   2+ E229              ;; NOTE DMA is little endian
   3+ E229 00           l2_horz_pixel           DB 0
   4+ E22A
   5+ E22A 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E22E 7D
   6+ E22F 29 E2        l2_horz_colr            DW l2_horz_pixel
   7+ E231 00           l2_horz_lenlo           DB 0
   8+ E232 00           l2_horz_lenhi           DB 0
   9+ E233 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E236 00 00        l2_horz_target          DB $00, $00
  11+ E238 CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E23A              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E23A
  14+ E23A
  15+ E23A              ; "l2_draw_horz_dma"
  16+ E23A              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E23A 7B           l2_draw_horz_dma:       ld		a,e                                               ; T=4      ;
  18+ E23B 32 29 E2                             ld		(l2_horz_pixel),a                                 ; T=13     ;
  19+ E23E 5A                                   ld      e,d ; saved 3 t states ld		a,d                                               ; T=4      ; e=d   4
  20+ E23F 16 00                                ld      d,0; saved 3 t states ld 		(l2_horz_lenlo),a                                 ; T=13     ; d = 0  7
  21+ E241 ED 53 31 E2                          ld      (l2_horz_lenlo),de; saved 3 t states xor 	a                                                 ; T=4      ; t 20  31
  22+ E245                                      ; saved 3 t states ld ld 		(l2_horz_lenhi),a                                 ; T=13     ;
  23+ E245                                    ; saved 4 t states  ld		h,b                           ;          ;
  24+ E245                                    ; saved 4 t states  ld		l,c                           ;          ;
  25+ E245 ED 43 36 E2                          ld      (l2_horz_target),bc ; saved 4 t states  was , hl  ; T=20     ;
  26+ E249 21 2A E2     .write_dma:             ld 		hl, l2_horz_line                                  ;          ;
  27+ E24C 06 10                                ld 		b, l2_horz_cmd_len                                ;
  28+ E24E 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  29+ E250 ED B3                                otir                                                      ;
  30+ E252 C9                                   ret
  31+ E253
  32+ E253              ; "bc = left side row,col, d = length, e = color"
  33+ E253 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E254 C5                                   push 	bc							; save row col
  35+ E255 78                                   ld   	a,b
  36+ E256 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E259 C1                                   pop  	bc
  38+ E25A 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E25B D1                                   pop  	de							; get length back
  40+ E25C CD 3A E2                             call    l2_draw_horz_dma
  41+ E25F C9                                   ret
  42+ E260
  43+ E260              ; "l2_draw_horz_line"
  44+ E260              ; "bc = left side row,col, d = length, e = color"
  45+ E260              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E260 7A           l2_draw_horz_line:      ld		a,d
  47+ E261 FE 00                                cp 		0							; if its zero length then just return
  48+ E263 C8           .zerolengthexit:        ret		z
  49+ E264 FE 01        .isitlen1:              cp 		1
  50+ E266 CA 88 E2                             jp 		z,.l2_draw_horz_line_1
  51+ E269 FE 0A        .longenoughtfordma:     cp  10
  52+ E26B C3 53 E2                             jp  l2_draw_horz_dma_bank
  53+ E26E D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E270 78                                   ld   	a,b
  55+ E271 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E274 C1                                   pop  	bc
  57+ E275 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E276 69                                   ld   	l,c
  59+ E277 D1                                   pop  	de							; get length back
  60+ E278 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E279 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E27A 82                                   add  	a,d
  63+ E27B 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E27D 3E FF        .clipat255:             ld   	a,$FF
  65+ E27F 91                                   sub  	c							; a holds clipped length
  66+ E280 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E281 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E283 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E284 23                                   inc hl
  70+ E285 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E287 C9                                   ret
  72+ E288 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E289 C3 FF E0                             jp		l2_plot_pixel				; hijack return
  74+ E28C
  75+ E28C              ; "l2_draw_horz_line_to"
  76+ E28C              ; "bc = left side row,col, d right pixel, e = color"
  77+ E28C 7A           l2_draw_horz_line_to:   ld 		a,d
  78+ E28D B9                                   cp 		c
  79+ E28E 30 04                                jr		nc, .noswap
  80+ E290 28 07                                jr      z, .singlepixel
  81+ E292 51           .swap:                  ld		d,c
  82+ E293 4F                                   ld		c,a
  83+ E294 7A           .noswap:                ld		a,d
  84+ E295 91                                   sub		c
  85+ E296              ;                        dec		a							; so now its length not offset
  86+ E296 57                                   ld		d,a
  87+ E297 18 C7                                jr 		l2_draw_horz_line			; hijack routine and return statements
  88+ E299 7B           .singlepixel:           ld		a,e
  89+ E29A C3 FF E0                             jp		l2_plot_pixel				; hijack return
  90+ E29D
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
1132  E29D                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E29D              ; ">l2_draw_vert_segment"
   2+ E29D              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E29D              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E29D 7A           l2_draw_vert_segment:   ld		a,d
   5+ E29E FE 00        .emptylinecheck:	    cp 		0
   6+ E2A0 C8                                   ret		z
   7+ E2A1 FE 01        .justonepixel	        cp		1
   8+ E2A3 20 02                                jr		nz, .multiplepixelsLoop
   9+ E2A5 73                                   ld		(hl),e
  10+ E2A6 C9                                   ret
  11+ E2A7              .multiplepixelsLoop:
  12+ E2A7 7C           .endofbankcheck:        ld   	a,h
  13+ E2A8 FE 40                                cp   	64
  14+ E2AA D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E2AB 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E2AC 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E2AD 15                                   dec		d
  18+ E2AE C8                                   ret		z
  19+ E2AF 18 F6                                jr		.multiplepixelsLoop
  20+ E2B1
  21+ E2B1              ; ">l2_draw_vert_line"
  22+ E2B1              ; ">bc = row col d = length, e = color"
  23+ E2B1 78           l2_draw_vert_line:      ld 		a,b
  24+ E2B2 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E2B4 D0                                   ret 	nc							; can't start off the screen
  26+ E2B5 7A           .emptylinecheck:        ld		a,d
  27+ E2B6 FE 00                                cp		0
  28+ E2B8 C8                                   ret		z
  29+ E2B9 FE 01                                cp		1
  30+ E2BB 20 04                                jr		nz,.multiplepixels
  31+ E2BD CD FF E0     .itsonepixel:           call	l2_plot_pixel
  32+ E2C0 C9                                   ret
  33+ E2C1              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E2C1 7A           .clipto192:             ld		a,d							; get length
  35+ E2C2 80                                   add		a,b							; a= row + length
  36+ E2C3 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E2C5 FE C0                                cp		SCREEN_HEIGHT
  38+ E2C7 38 08                                jr		c, .noclipneeded
  39+ E2C9 78           .needtoclip             ld		a,b
  40+ E2CA 82                                   add		a,d
  41+ E2CB D6 C0                                sub		SCREEN_HEIGHT
  42+ E2CD 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E2CE 7A                                   ld		a,d
  44+ E2CF 94                                   sub		h
  45+ E2D0 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E2D1              ; so now BC = row col, d = length clipped, e = color
  47+ E2D1 78           .noclipneeded:          ld		a,b
  48+ E2D2 C5 D5                                push	bc,,de
  49+ E2D4 CD 31 E0                             call 	asm_l2_row_bank_select
  49+ E2D7               	 	; we now have poke address and a variable holding current bank number
  50+ E2D7 D1 C1                                pop		bc,,de
  51+ E2D9 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E2DA 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E2DB CD 9D E2                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E2DE 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E2DF FE 00                                cp		0
  56+ E2E1 28 27                                jr		z, .doneplotting
  57+ E2E3 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E2E6 3C                                   inc		a
  59+ E2E7 06 00                                ld		b,0
  60+ E2E9 C5 D5                                push	bc,,de
  61+ E2EB CD 1A E0                             call 	asm_l2_bank_n_select
  62+ E2EE D1 C1                                pop     bc,,de
  63+ E2F0 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E2F1 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E2F2 CD 9D E2                             call	l2_draw_vert_segment
  66+ E2F5 7A                                   ld		a,d
  67+ E2F6 FE 00                                cp		0
  68+ E2F8 28 10                                jr		z,.doneplotting
  69+ E2FA 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E2FD 3C                                   inc		a
  71+ E2FE 06 00                                ld		b,0
  72+ E300 C5 D5                                push	bc,,de
  73+ E302 CD 1A E0                             call 	asm_l2_bank_n_select
  74+ E305 D1                                   pop		de
  75+ E306 E1                                   pop		hl							; hl = bc
  76+ E307 CD 9D E2                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E30A C9           .doneplotting:	        ret
  78+ E30B
  79+ E30B              ; ">l2_draw_vert_line_to"
  80+ E30B              ; ">bc = row col d = to position, e = color"
  81+ E30B 78           l2_draw_vert_line_to:   ld		a,b
  82+ E30C BA                                   cp		d
  83+ E30D 38 02                                jr		c, .noyswap
  84+ E30F 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E310 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E311 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E312 90                                   sub		b
  88+ E313 3C                                   inc		a			; so now its length not offset
  89+ E314 57                                   ld		d,a
  90+ E315 18 9A                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E317                                      ; no return needed
  92+ E317
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
1133  E317                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E317
   2+ E317              l2_draw_box_to:
   3+ E317              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E317              ; ">NOT IMPLEMENTED YET"
   5+ E317 C9           	ret
   6+ E318
   7+ E318              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E318              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E318              l2decbstep	EQU $05
  10+ E318              l2incbstep	EQU	$04
  11+ E318              l2deccstep	EQU $0D
  12+ E318              l2inccstep	EQU	$0C
  13+ E318              		; l2 deltas are signed
  14+ E318 00 00        l2deltaY	DW	0
  15+ E31A 00 00        l2deltaX	DW	0
  16+ E31C 00           l2deltaYsq	db	0
  17+ E31D 00           l2deltaXsq	db	0
  18+ E31E 00           l2deltaYn	db	0
  19+ E31F 00           l2deltaXn	db	0
  20+ E320 00           l2deltaYsqn	db	0
  21+ E321 00           l2deltaXsqn	db	0
  22+ E322 00           l2linecolor	db	0
  23+ E323 00 00        l2fraction	dw	0
  24+ E325 00 00        l2e2		dw	0
  25+ E327 00           l2way		db	0
  26+ E328 00 00        l2targetPtr	dw	0
  27+ E32A              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  28+ E32A 00 00 00...  l2targetArray1 ds	256
  29+ E42A 00 00 00...  l2targetArray2 ds	256
  30+ E52A              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  31+ E52A              ;;plotLine(int x0, int y0, int x1, int y1)
  32+ E52A              ;;    dx =  abs(x1-x0);
  33+ E52A              ;;    sx = x0<x1 ? 1 : -1;
  34+ E52A              ;;    dy = -abs(y1-y0);
  35+ E52A              ;;    sy = y0<y1 ? 1 : -1;
  36+ E52A              ;;    err = dx+dy;  /* error value e_xy */
  37+ E52A              ;;    while (true)   /* loop */
  38+ E52A              ;;        plot(x0, y0);
  39+ E52A              ;;        if (x0==x1 && y0==y1) break;
  40+ E52A              ;;        e2 = 2*err;
  41+ E52A              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  42+ E52A              ;;            err += dy;
  43+ E52A              ;;            x0 += sx;
  44+ E52A              ;;        end if
  45+ E52A              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  46+ E52A              ;;            err += dx;
  47+ E52A              ;;            y0 += sy;
  48+ E52A              ;;        end if
  49+ E52A              ;;    end while
  50+ E52A              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  51+ E52A              ; ">hl will be either l2targetArray1 or 2"
  52+ E52A              ; NOTE IF WE INTERLEAVE THESE TWO TABLES WE COUDL READ BOTH X POS as a 16 bit read
  53+ E52A FE 01        l2_draw_diagonal_save:  cp		1
  54+ E52C 28 06                                jr		z,l2S_ItsArray1
  55+ E52E 21 2A E4                             ld		hl,l2targetArray2
  56+ E531 C3 37 E5                             jp		l2S_setTarget
  57+ E534 21 2A E3     l2S_ItsArray1:	        ld		hl,l2targetArray1
  58+ E537 22 28 E3     l2S_setTarget:	        ld		(l2targetPtr),hl
  59+ E53A              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  60+ E53A 32 22 E3                             ld		(l2linecolor),a					;save colour for later
  61+ E53D 21 00 00                             ld		hl,0                            ;
  62+ E540 22 1A E3                             ld		(l2deltaX),hl                   ;
  63+ E543 22 18 E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
  64+ E546 78           l2S_preSort:            ld		a,b								;
  65+ E547                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
  65+ E547 BA          >                        cp      d
  65+ E548 DA 50 E5    >                        jp		c, l2S_noYSort
  66+ E54B              l2S_SortBasedOnY:	    ldhlbc									;
  66+ E54B 60          >                        ld		h,b
  66+ E54C 69          >                        ld		l,c
  67+ E54D EB                                   ex		de,hl                           ;
  68+ E54E                                      ldbchl									; swap over bc and de using hl as an intermediate
  68+ E54E 44          >                        ld		b,h
  68+ E54F 4D          >                        ld		c,l
  69+ E550 DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
  70+ E552 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
  71+ E554 79           l2S_setXLen:            ld		a,c                             ;
  72+ E555                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
  72+ E555 BB          >                        cp      e
  72+ E556 DA 62 E5    >                        jp		c, l2S_PosXLen
  73+ E559 79           l2S_NegXLen:            ld		a,c                             ;
  74+ E55A 93                                   sub     e                               ;
  75+ E55B 32 1A E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
  76+ E55E 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
  77+ E560 18 07                                jr		l2S_XINCDEC
  78+ E562 7B           l2S_PosXLen:	        ld		a,e                             ;
  79+ E563 91                                   sub		c                               ;
  80+ E564 32 1A E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
  81+ E567 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
  82+ E569              l2S_XINCDEC:
  83+ E569 32 D5 E5     	ld		(l2S_adjustCol),a				;
  84+ E56C 32 05 E6     	ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
  85+ E56F              l2S_setYLen
  86+ E56F 7A           	ld		a,d							 	; presorted on Y so it is now always positive
  87+ E570 90           	sub		b
  88+ E571 32 18 E3     	ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
  89+ E574              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
  90+ E574              ldS_FracDYltDX:								;
  91+ E574 2A 18 E3     	ld		hl,(l2deltaY)					; Fraction = dY - dX
  92+ E577 ED 5B 1A E3  	ld		de,(l2deltaX)
  93+ E57B              	ClearCarryFlag
  93+ E57B B7          >                        or a
  94+ E57C ED 52        	sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
  95+ E57E EB           	ex		de,hl
  96+ E57F FD 62        	ld		iyh,d							; we will use IY reg for fractions
  97+ E581 FD 6B        	ld		iyl,e
  98+ E583 F2 A8 E5     	jp		p,l2S_fracIsPositive
  99+ E586              l2S_fracIsNegative:
 100+ E586              	NegIY
 100+ E586 AF          >                    xor a
 100+ E587 FD 95       >                    sub iyl
 100+ E589 FD 6F       >                    ld iyl,a
 100+ E58B 9F          >                    sbc a,a
 100+ E58C FD 94       >                    sub iyh
 100+ E58E FD 67       >                    ld iyh,a
 101+ E590              	ShiftIYRight1
 101+ E590 FD 7C       >			   ld 	a,iyh
 101+ E592 CB 3F       >			   srl 	a
 101+ E594 FD 67       >			   ld	iyh,a
 101+ E596 FD 7D       >			   ld 	a,iyl
 101+ E598 1F          >			   rra
 101+ E599 FD 6F       >			   ld	iyl,a
 102+ E59B              	NegIY
 102+ E59B AF          >                    xor a
 102+ E59C FD 95       >                    sub iyl
 102+ E59E FD 6F       >                    ld iyl,a
 102+ E5A0 9F          >                    sbc a,a
 102+ E5A1 FD 94       >                    sub iyh
 102+ E5A3 FD 67       >                    ld iyh,a
 103+ E5A5 C3 B3 E5     	jp		l2S_SkipCalcInc					; so we have a negative frac
 104+ E5A8              l2S_fracIsPositive:
 105+ E5A8              	ShiftIYRight1
 105+ E5A8 FD 7C       >			   ld 	a,iyh
 105+ E5AA CB 3F       >			   srl 	a
 105+ E5AC FD 67       >			   ld	iyh,a
 105+ E5AE FD 7D       >			   ld 	a,iyl
 105+ E5B0 1F          >			   rra
 105+ E5B1 FD 6F       >			   ld	iyl,a
 106+ E5B3              l2S_SkipCalcInc:
 107+ E5B3              l2S_Loop:									; As we loop, bc = to plot current XY
 108+ E5B3 2A 28 E3     	ld		hl,(l2targetPtr)				; Insert into respective array
 109+ E5B6 78           	ld		a,b
 110+ E5B7 ED 31        	add		hl,a
 111+ E5B9 71           	ld		(hl),c
 112+ E5BA              l2S_CheckIfEnd:
 113+ E5BA DD 7C        	ld		a,ixh
 114+ E5BC              	JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 114+ E5BC B8          >                        cp     b
 114+ E5BD D2 C3 E5    >                        jp		nc,l2S_CheckXPos
 115+ E5C0 C3 C7 E5     	jp		l2S_Continue
 116+ E5C3              l2S_CheckXPos:
 117+ E5C3 79           	ld		a,c
 118+ E5C4              	ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 118+ E5C4 DD BD       >                        cp    ixl
 118+ E5C6 D0          >                        ret	 nc
 119+ E5C7              l2S_Continue:
 120+ E5C7              l2S_HNegative:
 121+ E5C7 FD 7C        	ld		a,iyh
 122+ E5C9 CB 7F        	bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 123+ E5CB 28 0B        	jr		z,l2S_ErrNotNegative			;
 124+ E5CD              l2S_ErrNegative:								; if its a negative error update X
 125+ E5CD 3A 18 E3     	ld		a,(l2deltaY)
 126+ E5D0 16 00        	ld		d,0
 127+ E5D2 5F           	ld		e,a
 128+ E5D3 FD 19        	add		iy,de							; add deltaY(unsinged) to l2fraction
 129+ E5D5              l2S_adjustCol:
 130+ E5D5 00           	nop										; this is our inc/dec of X
 131+ E5D6 18 DB        	jr		l2S_Loop							; repeat loop
 132+ E5D8              l2S_ErrNotNegative:
 133+ E5D8 FD 7C        	ld		a,iyh
 134+ E5DA FD B5        	or		iyl
 135+ E5DC              	IfAIsZeroGoto l2S_ErrZero					; if there is no error then goto zeroerror
 135+ E5DC A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ E5DD CA F6 E5    >                        jp	z, l2S_ErrZero
 136+ E5E0              l2S_ErrPositive:								; if its a positive error then we update Y
 137+ E5E0              	lddeiy
 137+ E5E0 FD 54       >                        ld		d,iyh
 137+ E5E2 FD 5D       >                        ld		e,iyl
 138+ E5E4 EB           	ex		de,hl
 139+ E5E5 16 00        	ld		d,0
 140+ E5E7 3A 1A E3     	ld		a,(l2deltaX)
 141+ E5EA 5F           	ld		e,a
 142+ E5EB              	ClearCarryFlag
 142+ E5EB B7          >                        or a
 143+ E5EC ED 52        	sbc		hl,de
 144+ E5EE EB           	ex		de,hl
 145+ E5EF              	ldiyde
 145+ E5EF FD 62       >                        ld		iyh,d
 145+ E5F1 FD 6B       >                        ld		iyl,e
 146+ E5F3              l2S_adjustRow:									; move Y down by one
 147+ E5F3 04           	inc		b
 148+ E5F4 18 BD        	jr		l2S_Loop
 149+ E5F6              l2S_ErrZero:
 150+ E5F6 2A 1A E3     	ld		hl,(l2deltaX)
 151+ E5F9 EB           	ex		de,hl
 152+ E5FA 2A 18 E3     	ld		hl,(l2deltaY)
 153+ E5FD              	ClearCarryFlag
 153+ E5FD B7          >                        or a
 154+ E5FE ED 52        	sbc		hl,de
 155+ E600 EB           	ex		de,hl
 156+ E601              	ldiyde
 156+ E601 FD 62       >                        ld		iyh,d
 156+ E603 FD 6B       >                        ld		iyl,e
 157+ E605              l2S_adjustCol2:
 158+ E605 00           	nop										; update X and Y
 159+ E606 04           	inc		b
 160+ E607 18 AA        	jr		l2S_Loop
 161+ E609
 162+ E609              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 163+ E609 32 22 E3     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 164+ E60C 21 00 00                             ld		hl,0                            ;
 165+ E60F 22 1A E3                             ld		(l2deltaX),hl                   ;
 166+ E612 22 18 E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 167+ E615 78           l2D_preSort:            ld		a,b								;
 168+ E616                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
 168+ E616 BA          >                        cp      d
 168+ E617 DA 1F E6    >                        jp		c, l2D_noYSort
 169+ E61A              l2D_SortBasedOnY:	    ldhlbc									;
 169+ E61A 60          >                        ld		h,b
 169+ E61B 69          >                        ld		l,c
 170+ E61C EB                                   ex		de,hl                           ;
 171+ E61D                                      ldbchl									; swap over bc and de using hl as an intermediate
 171+ E61D 44          >                        ld		b,h
 171+ E61E 4D          >                        ld		c,l
 172+ E61F DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 173+ E621 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 174+ E623 79           l2D_setXLen:            ld		a,c                             ;
 175+ E624                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 175+ E624 BB          >                        cp      e
 175+ E625 DA 31 E6    >                        jp		c, l2D_PosXLen
 176+ E628 79           l2D_NegXLen:            ld		a,c                             ;
 177+ E629 93                                   sub     e                               ;
 178+ E62A 32 1A E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 179+ E62D 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 180+ E62F 18 07                                jr		l2D_XINCDEC
 181+ E631 7B           l2D_PosXLen:	        ld		a,e                             ;
 182+ E632 91                                   sub		c                               ;
 183+ E633 32 1A E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 184+ E636 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 185+ E638 32 A7 E6     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 186+ E63B 32 D7 E6                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 187+ E63E 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 188+ E63F 90                                   sub		b
 189+ E640 32 18 E3                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 190+ E643              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 191+ E643 2A 18 E3     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 192+ E646 ED 5B 1A E3                          ld		de,(l2deltaX)
 193+ E64A                                      ClearCarryFlag
 193+ E64A B7          >                        or a
 194+ E64B ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 195+ E64D EB                                   ex		de,hl
 196+ E64E FD 62                                ld		iyh,d							; we will use IY reg for fractions
 197+ E650 FD 6B                                ld		iyl,e
 198+ E652 F2 77 E6                             jp		p,l2D_fracIsPositive
 199+ E655              l2D_fracIsNegative:     NegIY
 199+ E655 AF          >                    xor a
 199+ E656 FD 95       >                    sub iyl
 199+ E658 FD 6F       >                    ld iyl,a
 199+ E65A 9F          >                    sbc a,a
 199+ E65B FD 94       >                    sub iyh
 199+ E65D FD 67       >                    ld iyh,a
 200+ E65F                                      ShiftIYRight1
 200+ E65F FD 7C       >			   ld 	a,iyh
 200+ E661 CB 3F       >			   srl 	a
 200+ E663 FD 67       >			   ld	iyh,a
 200+ E665 FD 7D       >			   ld 	a,iyl
 200+ E667 1F          >			   rra
 200+ E668 FD 6F       >			   ld	iyl,a
 201+ E66A                                      NegIY
 201+ E66A AF          >                    xor a
 201+ E66B FD 95       >                    sub iyl
 201+ E66D FD 6F       >                    ld iyl,a
 201+ E66F 9F          >                    sbc a,a
 201+ E670 FD 94       >                    sub iyh
 201+ E672 FD 67       >                    ld iyh,a
 202+ E674 C3 82 E6                             jp		l2D_SkipCalcInc					; so we have a negative frac
 203+ E677              l2D_fracIsPositive:     ShiftIYRight1
 203+ E677 FD 7C       >			   ld 	a,iyh
 203+ E679 CB 3F       >			   srl 	a
 203+ E67B FD 67       >			   ld	iyh,a
 203+ E67D FD 7D       >			   ld 	a,iyl
 203+ E67F 1F          >			   rra
 203+ E680 FD 6F       >			   ld	iyl,a
 204+ E682              l2D_SkipCalcInc:
 205+ E682 C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 206+ E684 3A 22 E3                             ld		a,(l2linecolor)     			;
 207+ E687 CD FF E0                             call	l2_plot_pixel       			; Plot Pixel
 208+ E68A D1 C1                                pop     bc,,de
 209+ E68C DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 210+ E68E                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 210+ E68E B8          >                        cp     b
 210+ E68F D2 95 E6    >                        jp		nc,l2D_CheckXPos
 211+ E692 C3 99 E6                             jp		l2D_Continue
 212+ E695 79           l2D_CheckXPos:          ld		a,c
 213+ E696                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 213+ E696 DD BD       >                        cp      ixl
 213+ E698 C8          >                        ret     z
 214+ E699              l2D_Continue:
 215+ E699 FD 7C        l2D_HNegative:			ld		a,iyh
 216+ E69B CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 217+ E69D 28 0B                                jr		z,l2D_ErrNotNegative			;
 218+ E69F 3A 18 E3     l2D_ErrNegative:		ld		a,(l2deltaY)
 219+ E6A2 16 00                                ld		d,0
 220+ E6A4 5F                                   ld		e,a
 221+ E6A5 FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 222+ E6A7 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 223+ E6A8 18 D8                                jr		l2D_Loop							; repeat loop
 224+ E6AA FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 225+ E6AC FD B5                                or		iyl
 226+ E6AE                                      IfAIsZeroGoto l2D_ErrZero					; if there is no error then goto zeroerror
 226+ E6AE A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 226+ E6AF CA C8 E6    >                        jp	z, l2D_ErrZero
 227+ E6B2              l2D_ErrPositive:		lddeiy
 227+ E6B2 FD 54       >                        ld		d,iyh
 227+ E6B4 FD 5D       >                        ld		e,iyl
 228+ E6B6 EB                                   ex		de,hl
 229+ E6B7 16 00                                ld		d,0
 230+ E6B9 3A 1A E3                             ld		a,(l2deltaX)
 231+ E6BC 5F                                   ld		e,a
 232+ E6BD                                      ClearCarryFlag
 232+ E6BD B7          >                        or a
 233+ E6BE ED 52                                sbc		hl,de
 234+ E6C0 EB                                   ex		de,hl
 235+ E6C1                                      ldiyde
 235+ E6C1 FD 62       >                        ld		iyh,d
 235+ E6C3 FD 6B       >                        ld		iyl,e
 236+ E6C5 04           l2D_adjustRow:			inc		b
 237+ E6C6 18 BA                                jr		l2D_Loop
 238+ E6C8 2A 1A E3     l2D_ErrZero:            ld		hl,(l2deltaX)
 239+ E6CB EB                                   ex		de,hl
 240+ E6CC 2A 18 E3                             ld		hl,(l2deltaY)
 241+ E6CF                                      ClearCarryFlag
 241+ E6CF B7          >                        or a
 242+ E6D0 ED 52                                sbc		hl,de
 243+ E6D2 EB                                   ex		de,hl
 244+ E6D3                                      ldiyde
 244+ E6D3 FD 62       >                        ld		iyh,d
 244+ E6D5 FD 6B       >                        ld		iyl,e
 245+ E6D7 00           l2D_adjustCol2:         nop										; update X and Y
 246+ E6D8 04                                   inc		b
 247+ E6D9 18 A7                                jr		l2D_Loop
 248+ E6DB              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ E6DB
 250+ E6DB
 251+ E6DB
 252+ E6DB
 253+ E6DB              ;Loin:				; BBC version of line draw
 254+ E6DB              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 255+ E6DB              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 256+ E6DB              ;	ld		ixh,0							; ixh = s
 257+ E6DB              ;	ld		iyh,0							; iyh = swap
 258+ E6DB              ;	ld		l,0								; l will hold delta sign flags
 259+ E6DB              ;LoinCalcDeltaX:
 260+ E6DB              ;	ld		a,e
 261+ E6DB              ;	sub		c								; a = deltaX
 262+ E6DB              ;	JumpIfPositive LoinPosDx
 263+ E6DB              ;LoinNegDx:
 264+ E6DB              ;	neg										; carry flag will indicate deltaX was negative
 265+ E6DB              ;	ld		l,$80							; set bit 7 of l for negative
 266+ E6DB              ;LoinPosDx:
 267+ E6DB              ;	ld		ixl,a							; ixl = varP = deltaX
 268+ E6DB              ;LoinCalcDeltaY:
 269+ E6DB              ;	ld		a,d
 270+ E6DB              ;	sub		b								; a= deltaY
 271+ E6DB              ;	JumpIfPositive LoinPosDy
 272+ E6DB              ;LoinNegDy:
 273+ E6DB              ;	neg
 274+ E6DB              ;	set		6,l								; set bit 6 of l for negative deltaY
 275+ E6DB              ;LoinPosDy:
 276+ E6DB              ;	ld		iyl,a							; iyl = varQ = deltaY
 277+ E6DB              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 278+ E6DB              ;LoinSTPx:									; step along X
 279+ E6DB              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 280+ E6DB              ;LoinSTPxSwapCoords:
 281+ E6DB              ;	dec		iyh								; swap flag now becomes FF
 282+ E6DB              ;	ld		a,l								; save l flags
 283+ E6DB              ;	ex		de,hl							; save de to hl
 284+ E6DB              ;	lddebc									; Point2 = point1
 285+ E6DB              ;	ldbchl									; Point1 = point2 that was saved
 286+ E6DB              ;	ld		l,a								; get back l flags
 287+ E6DB              ;LoinSTPxCorrectOrder:
 288+ E6DB              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 289+ E6DB              ;	ld		a,iyl							; get delta Y back
 290+ E6DB              ;	ld		iy1,$FE							; roll counter
 291+ E6DB              ;LionSTPxRollQ:
 292+ E6DB              ;	sla		a								; highest bit of delta-Y
 293+ E6DB              ;	jp		c,LoinSTPxSteep
 294+ E6DB              ;	cp		ixl								; compare with DeltaX
 295+ E6DB              ;	jp		cs,LoinSTPxShallow
 296+ E6DB              ;LoinSTPxSteep:								;; LI4
 297+ E6DB              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 298+ E6DB              ;	scf										; force carry flag set
 299+ E6DB              ;LoinSTPxShallow:							;; LI5
 300+ E6DB              ;	rl		iyl								; rotate iyl which started as FE
 301+ E6DB              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 302+ E6DB              ;	inc		ihl								; DeltaX += 1
 303+ E6DB              ;LoinSTPxYDirection:							; change this to self modifying code
 304+ E6DB              ;	ld		a,d
 305+ E6DB              ;	JumpIfAGTEn	b,LionDOWN:
 306+ E6DB              ;	ld		a,iyh							; swap flag
 307+ E6DB              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 308+ E6DB              ;LoinSTPxX1Dec:
 309+ E6DB              ;	dec		c								; move left 1 pixel as we sawped
 310+ E6DB              ;LoinSTPxXCounter:							;; LIL2
 311+ E6DB              ;	sub		b
 312+ E6DB              ;	if
 313+ E6DB              ;
 314+ E6DB              ;85 82                   STA &82	   \ R	\ mask byte
 315+ E6DB              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 316+ E6DB              ;A2 FE                   LDX #&FE	\ roll counter
 317+ E6DB              ;86 81                   STX &81		\ Q
 318+ E6DB              ;.LIL1	\ roll Q
 319+ E6DB              ;0A                      ASL A		\ highest bit of delta-Y
 320+ E6DB              ;B0 04                   BCS LI4		\ steep
 321+ E6DB              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 322+ E6DB              ;90 03                   BCC LI5		\ shallow
 323+ E6DB              ;.LI4	\ steep
 324+ E6DB              ;E5 1B                   SBC &1B		\ P
 325+ E6DB              ;38                      SEC
 326+ E6DB              ;.LI5	\ shallow
 327+ E6DB              ;26 81                   ROL &81	   \ Q	\ #&FE
 328+ E6DB              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 329+ E6DB              ;A6 1B                   LDX &1B		\ P
 330+ E6DB              ;E8                      INX 		\ Xreg is width
 331+ E6DB              ;A5 37                   LDA &37		\ Y2
 332+ E6DB              ;E5 35                   SBC &35		\ Y1
 333+ E6DB              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 334+ E6DB              ;A5 90                   LDA &90		\ SWAP
 335+ E6DB              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 336+ E6DB              ;CA                      DEX
 337+ E6DB              ;.LIL2	\ counter X width
 338+ E6DB              ;A5 82                   LDA &82	   \ R	\ mask byte
 339+ E6DB              ;51 07                   EOR (&07),Y	\ (SC),Y
 340+ E6DB              ;91 07                   STA (&07),Y	\ (SC),Y
 341+ E6DB              ;.LI6	\ Xreg correct
 342+ E6DB              ;46 82                   LSR &82	   \ R	\ mask byte
 343+ E6DB              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 344+ E6DB              ;66 82                   ROR &82		\ R
 345+ E6DB              ;A5 07                   LDA &07		\ SC
 346+ E6DB              ;69 08                   ADC #8		\ next column
 347+ E6DB              ;85 07                   STA &07		\ SC
 348+ E6DB              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 349+ E6DB              ;A5 83                   LDA &83		\ S
 350+ E6DB              ;65 81                   ADC &81	   \ Q	\ some low bits
 351+ E6DB              ;85 83                   STA &83		\ S
 352+ E6DB              ;90 07                   BCC LIC2	\ skip Y adjustment
 353+ E6DB              ;88                      DEY
 354+ E6DB              ;10 04                   BPL LIC2	\ skip Y adjustment
 355+ E6DB              ;C6 08                   DEC &08		\ SC+1
 356+ E6DB              ;A0 07                   LDY #7
 357+ E6DB              ;.LIC2	\ skip Y adjustment
 358+ E6DB              ;CA                      DEX
 359+ E6DB              ;D0 DC                   BNE LIL2	\ loop X width
 360+ E6DB              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 361+ E6DB              ;60                      RTS
 362+ E6DB              ;
 363+ E6DB              ;.DOWN	\ Line is going to the right and down
 364+ E6DB              ;A5 90                   LDA &90		\ SWAP
 365+ E6DB              ;F0 07                   BEQ LI9		\ no swap
 366+ E6DB              ;CA                      DEX
 367+ E6DB              ;.LIL3	\ counter X width
 368+ E6DB              ;A5 82                   LDA &82	    \ R \ mask byte
 369+ E6DB              ;51 07                   EOR (&07),Y	\ (SC),Y
 370+ E6DB              ;91 07                   STA (&07),Y	\ (SC),Y
 371+ E6DB              ;.LI9	\ no swap
 372+ E6DB              ;46 82                   LSR &82		\ R
 373+ E6DB              ;90 08                   BCC LI10	\ still in correct column, hop
 374+ E6DB              ;66 82                   ROR &82		\ R
 375+ E6DB              ;A5 07                   LDA &07		\ SC
 376+ E6DB              ;69 08                   ADC #8		\ next column
 377+ E6DB              ;85 07                   STA &07		\ SC
 378+ E6DB              ;.LI10	\ this is like an overflow monitor to update Y
 379+ E6DB              ;A5 83                   LDA &83		\ S
 380+ E6DB              ;65 81                   ADC &81		\ Q
 381+ E6DB              ;85 83                   STA &83		\ S
 382+ E6DB              ;90 09                   BCC LIC3	\ skip Y adjustment
 383+ E6DB              ;C8                      INY
 384+ E6DB              ;C0 08                   CPY #8
 385+ E6DB              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 386+ E6DB              ;E6 08                   INC &08		\ SC+1
 387+ E6DB              ;A0 00                   LDY #0
 388+ E6DB              ;.LIC3	\ skipped Y adjustment
 389+ E6DB              ;CA                      DEX
 390+ E6DB              ;D0 DA                   BNE LIL3	\ loop X width
 391+ E6DB              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 392+ E6DB              ;60                      RTS
 393+ E6DB              ;
 394+ E6DB              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 395+ E6DB              ;A4 35                   LDY &35		\ Y1
 396+ E6DB              ;98                      TYA
 397+ E6DB              ;A6 34                   LDX &34		\ X1
 398+ E6DB              ;C4 37                   CPY &37		\ Y2
 399+ E6DB              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 400+ E6DB              ;C6 90                   DEC &90		\ SWAP
 401+ E6DB              ;A5 36                   LDA &36		\ X2
 402+ E6DB              ;85 34                   STA &34		\ X1
 403+ E6DB              ;86 36                   STX &36		\ X2
 404+ E6DB              ;AA                      TAX
 405+ E6DB              ;A5 37                   LDA &37		\ Y2
 406+ E6DB              ;85 35                   STA &35		\ Y1
 407+ E6DB              ;84 37                   STY &37		\ Y2
 408+ E6DB              ;A8                      TAY
 409+ E6DB              ;.LI15	\ Y1 Y2 order is now correct
 410+ E6DB              ;4A                      LSR A
 411+ E6DB              ;4A                      LSR A
 412+ E6DB              ;4A                      LSR A
 413+ E6DB              ;09 60                   ORA #&60
 414+ E6DB              ;85 08                   STA &08	 \ SC+1	\ screen hi
 415+ E6DB              ;8A                      TXA 		\ X1
 416+ E6DB              ;29 F8                   AND #&F8
 417+ E6DB              ;85 07                   STA &07	  \ SC	\ screen lo
 418+ E6DB              ;8A                      TXA
 419+ E6DB              ;29 07                   AND #7		\ mask index
 420+ E6DB              ;AA                      TAX
 421+ E6DB              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 422+ E6DB              ;85 82                   STA &82	    \ R	\ mask
 423+ E6DB              ;A5 35                   LDA &35		\ Y1
 424+ E6DB              ;29 07                   AND #7
 425+ E6DB              ;A8                      TAY
 426+ E6DB              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 427+ E6DB              ;A2 01                   LDX #1		\ roll counter
 428+ E6DB              ;86 1B                   STX &1B	    	\ P
 429+ E6DB              ;.LIL4	\ roll P
 430+ E6DB              ;0A                      ASL A
 431+ E6DB              ;B0 04                   BCS LI13	\ do subtraction
 432+ E6DB              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 433+ E6DB              ;90 03                   BCC LI14	\ less than Q
 434+ E6DB              ;.LI13	\ do subtraction
 435+ E6DB              ;E5 81                   SBC &81		\ Q
 436+ E6DB              ;38                      SEC
 437+ E6DB              ;.LI14	\ less than Q
 438+ E6DB              ;26 1B                   ROL &1B		\ P
 439+ E6DB              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 440+ E6DB              ;A6 81                   LDX &81		\ Q
 441+ E6DB              ;E8                      INX 		\ adjust height
 442+ E6DB              ;A5 36                   LDA &36		\ X2
 443+ E6DB              ;E5 34                   SBC &34		\ X1
 444+ E6DB              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 445+ E6DB              ;18                      CLC
 446+ E6DB              ;A5 90                   LDA &90		\ SWAP
 447+ E6DB              ;F0 07                   BEQ LI17 	\ skip first point
 448+ E6DB              ;CA                      DEX
 449+ E6DB              ;.LIL5	\ skipped first point, counter X
 450+ E6DB              ;A5 82                   LDA &82	    \ R \ mask byte
 451+ E6DB              ;51 07                   EOR (&07),Y	\ (SC),Y
 452+ E6DB              ;91 07                   STA (&07),Y	\ (SC),Y
 453+ E6DB              ;.LI17	\ skipped first point
 454+ E6DB              ;88                      DEY
 455+ E6DB              ;10 04                   BPL LI16	\ skip hi adjust
 456+ E6DB              ;C6 08                   DEC &08		\ SC+1
 457+ E6DB              ;A0 07                   LDY #7		\ new char
 458+ E6DB              ;	.LI16	\ skipped hi adjust
 459+ E6DB              ;A5 83                   LDA &83		\ S
 460+ E6DB              ;65 1B                   ADC &1B		\ P
 461+ E6DB              ;85 83                   STA &83		\ S
 462+ E6DB              ;90 0C                   BCC LIC5	\ skip, still in same column
 463+ E6DB              ;46 82                   LSR &82	  \ R	\ mask
 464+ E6DB              ;90 08                   BCC LIC5  	\ no mask bit hop
 465+ E6DB              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 466+ E6DB              ;A5 07                   LDA &07	  \ SC  \ screen lo
 467+ E6DB              ;69 08                   ADC #8		\ next char below
 468+ E6DB              ;85 07                   STA &07		\ SC
 469+ E6DB              ;.LIC5	\ same column
 470+ E6DB              ;CA                      DEX
 471+ E6DB              ;D0 DC                   BNE LIL5	\ loop X height
 472+ E6DB              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 473+ E6DB              ;60                      RTS
 474+ E6DB              ;
 475+ E6DB              ;.LFT	\ going left
 476+ E6DB              ;A5 90                   LDA &90		\ SWAP
 477+ E6DB              ;F0 07                   BEQ LI18	\ skip first point
 478+ E6DB              ;CA                      DEX 		\ reduce height
 479+ E6DB              ;.LIL6	\ counter X height
 480+ E6DB              ;A5 82                   LDA &82	   \ R	\ mask byte
 481+ E6DB              ;51 07                   EOR (&07),Y	\ (SC),Y
 482+ E6DB              ;91 07                   STA (&07),Y	\ (SC),Y
 483+ E6DB              ;.LI18
 484+ E6DB              ;88                      DEY
 485+ E6DB              ;10 04                   BPL LI19	\ skip hi adjust
 486+ E6DB              ;C6 08                   DEC &08		\ SC+1
 487+ E6DB              ;A0 07                   LDY #7		\ rest char row
 488+ E6DB              ;.LI19	\ skipped hi adjust
 489+ E6DB              ;A5 83                   LDA &83		\ S
 490+ E6DB              ;65 1B                   ADC &1B	    \ P \ some low bits
 491+ E6DB              ;85 83                   STA &83		\ S
 492+ E6DB              ;90 0D                   BCC LIC6	\ no overflow
 493+ E6DB              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 494+ E6DB              ;90 09                   BCC LIC6	\ no overflow
 495+ E6DB              ;26 82                   ROL &82		\ R
 496+ E6DB              ;A5 07                   LDA &07		\ SC
 497+ E6DB              ;E9 07                   SBC #7		\ down 1 char
 498+ E6DB              ;85 07                   STA &07		\ SC
 499+ E6DB              ;18                      CLC
 500+ E6DB              ;.LIC6	\ no overflow
 501+ E6DB              ;CA                      DEX 		\ height
 502+ E6DB              ;D0 DB                   BNE LIL6	\ loop X
 503+ E6DB              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 504+ E6DB              ;.HL6
 505+ E6DB              ;60                      RTS 		\ end Line drawing
 506+ E6DB
 507+ E6DB
 508+ E6DB              ;;l2_draw_diagonalopt:
 509+ E6DB              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 510+ E6DB              ;;	push	af
 511+ E6DB              ;;	ld		a,b
 512+ E6DB              ;;	cp		d
 513+ E6DB              ;;	jr		z,.RegularDiagnonal
 514+ E6DB              ;;.CheckHorz:
 515+ E6DB              ;;	ld		a,c
 516+ E6DB              ;;	cp		e
 517+ E6DB              ;;	jr		z,.horizontalLine
 518+ E6DB              ;;.RegularDiagnonal:
 519+ E6DB              ;;	pop		af
 520+ E6DB              ;;	call diag
 521+ E6DB
 522+ E6DB
 523+ E6DB              ;;l2_signed_mul2a:
 524+ E6DB              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 525+ E6DB              ;;	TEST	$80
 526+ E6DB              ;;	jr		nz, .negativecalc
 527+ E6DB              ;;.positivecalc:
 528+ E6DB              ;;	ccf
 529+ E6DB              ;;	rla
 530+ E6DB              ;;	ret
 531+ E6DB              ;;.negativecalc:
 532+ E6DB              ;;	neg
 533+ E6DB              ;;	ccf
 534+ E6DB              ;;	rla
 535+ E6DB              ;;	neg
 536+ E6DB              ;;	ret
 537+ E6DB              ;;
 538+ E6DB              ;;l2_signed_mul2atohl:
 539+ E6DB              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 540+ E6DB              ;;	TEST	$80
 541+ E6DB              ;;	jr		nz, .negativecalc
 542+ E6DB              ;;.positivecalc:
 543+ E6DB              ;;	ld		hl,0
 544+ E6DB              ;;	ld		l,a
 545+ E6DB              ;;	add		hl,a
 546+ E6DB              ;;	ret
 547+ E6DB              ;;.negativecalc:
 548+ E6DB              ;;	neg
 549+ E6DB              ;;	ld		hl,0
 550+ E6DB              ;;	ld		l,a
 551+ E6DB              ;;	neghl
 552+ E6DB              ;;	ret
 553+ E6DB              ;;
 554+ E6DB              ;;l2_e2fractionby2:
 555+ E6DB              ;;	ld 		hl,(l2fraction)
 556+ E6DB              ;;	push	de
 557+ E6DB              ;;	ld		d,h
 558+ E6DB              ;;	ld		e,l
 559+ E6DB              ;;	add		hl,de
 560+ E6DB              ;;	pop		de
 561+ E6DB              ;;	ld		(l2e2),hl
 562+ E6DB              ;;	ret
 563+ E6DB
 564+ E6DB
 565+ E6DB
 566+ E6DB
 567+ E6DB
 568+ E6DB              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 569+ E6DB              ;;//.catchLoop:
 570+ E6DB              ;;//	jp .catchLoop
 571+ E6DB              ;;//.continue:
 572+ E6DB              ;;//    ld      A,D
 573+ E6DB              ;;//    sub     H
 574+ E6DB              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 575+ E6DB              ;;//.DXNegative:
 576+ E6DB              ;;//    neg
 577+ E6DB              ;;//.DXPositive:
 578+ E6DB              ;;//    ld      B,A              ;B <- |delta_x|
 579+ E6DB              ;;//    ld      A,E
 580+ E6DB              ;;//    sub     L
 581+ E6DB              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 582+ E6DB              ;;//.DYNegative:
 583+ E6DB              ;;//    neg
 584+ E6DB              ;;//.DYPositive:
 585+ E6DB              ;;//    sub     B               ;|delta_y|
 586+ E6DB              ;;//	push	af
 587+ E6DB              ;;//	jr		c,.DeltaX
 588+ E6DB              ;;//.DeltaY
 589+ E6DB              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 590+ E6DB              ;;//    ld      H,L             			;then values x and y are swapped
 591+ E6DB              ;;//    ld      L,A             			;so the loop will always be performed on the
 592+ E6DB              ;;//    ld      A,D             			;x value. A flag must be set to
 593+ E6DB              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 594+ E6DB              ;;//    ld      E,A             			;instead of (x,y)
 595+ E6DB              ;;//.DeltaX:
 596+ E6DB              ;;//	ld		a,d
 597+ E6DB              ;;//	sub		h
 598+ E6DB              ;;//	jr		nc,.TestDY					; x1 < x2
 599+ E6DB              ;;//.TestDX:
 600+ E6DB              ;;//	ex		de,hl
 601+ E6DB              ;;//.TestDY:
 602+ E6DB              ;;//	ld		a,e
 603+ E6DB              ;;//	sub		l
 604+ E6DB              ;;//    ld      A,$01
 605+ E6DB              ;;//    jr      NC,.StoreA
 606+ E6DB              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 607+ E6DB              ;;//.StoreA:
 608+ E6DB              ;;//        ld      (l2way),A
 609+ E6DB              ;;//.InitLine:
 610+ E6DB              ;;//        ld      B,H
 611+ E6DB              ;;//        ld      C,L
 612+ E6DB              ;;//        ld      A,E
 613+ E6DB              ;;//        sub     L
 614+ E6DB              ;;//        jr      NC,.EndInit
 615+ E6DB              ;;//        ld      A,L
 616+ E6DB              ;;//        ld      L,E
 617+ E6DB              ;;//        ld      E,A
 618+ E6DB              ;;//.EndInit:
 619+ E6DB              ;;//        ld      A,E
 620+ E6DB              ;;//        sub     L
 621+ E6DB              ;;//        rla
 622+ E6DB              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 623+ E6DB              ;;//        add     A,H
 624+ E6DB              ;;//        sub     D
 625+ E6DB              ;;//        ld      E,A             ;'d' variable is initialised
 626+ E6DB              ;;//        add     A,H
 627+ E6DB              ;;//        sub     D
 628+ E6DB              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 629+ E6DB              ;;//.Loop:
 630+ E6DB              ;;//        ld      A,B
 631+ E6DB              ;;//        sub     D
 632+ E6DB              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 633+ E6DB              ;;//        pop     AF
 634+ E6DB              ;;//        bit     7,A
 635+ E6DB              ;;//        push    AF
 636+ E6DB              ;;//        push    AF
 637+ E6DB              ;;//        push    BC
 638+ E6DB              ;;//        jr      Z,.DrawPoint
 639+ E6DB              ;;//        ld      A,B
 640+ E6DB              ;;//        ld      B,C
 641+ E6DB              ;;//        ld      C,A
 642+ E6DB              ;;//.DrawPoint:
 643+ E6DB              ;;//		push	hl
 644+ E6DB              ;;//		pushbcdeaf
 645+ E6DB              ;;//		ld		b,e
 646+ E6DB              ;;//		ld		c,d
 647+ E6DB              ;;//	ld 		a,(l2linecolor)
 648+ E6DB              ;;//	call	l2_plot_pixel
 649+ E6DB              ;;//		popafdebc
 650+ E6DB              ;;//		pop		hl
 651+ E6DB              ;;//        pop     BC
 652+ E6DB              ;;//        pop     AF
 653+ E6DB              ;;//.TestD:
 654+ E6DB              ;;//        bit     7,E
 655+ E6DB              ;;//        jr      NZ,.Case1
 656+ E6DB              ;;//.Case2:                          ;d >= 0
 657+ E6DB              ;;//        ld      A,E
 658+ E6DB              ;;//        add     A,H
 659+ E6DB              ;;//        ld      E,A
 660+ E6DB              ;;//        ld      A,(l2way)
 661+ E6DB              ;;//        add     A,C
 662+ E6DB              ;;//        ld      C,A
 663+ E6DB              ;;//        jr      .EndLoop
 664+ E6DB              ;;//.Case1:                          ;d < 0
 665+ E6DB              ;;//        ld      A,E
 666+ E6DB              ;;//        add     A,L
 667+ E6DB              ;;//        ld      E,A
 668+ E6DB              ;;//.EndLoop:
 669+ E6DB              ;;//        inc     B
 670+ E6DB              ;;//        jr      .Loop
 671+ E6DB              ;;//.EndLine:
 672+ E6DB              ;;//        pop     AF              ;MUST NOT BE REMOVED
 673+ E6DB              ;;//        pop     HL              ;can be removed
 674+ E6DB              ;;//        pop     DE              ;can be removed
 675+ E6DB              ;;//        ret
 676+ E6DB
 677+ E6DB              ;;	ld		(.l2yadjust),a
 678+ E6DB              ;;	call	calcdeltax:
 679+ E6DB              ;;	ld		(.l2xadjust),a
 680+ E6DB              ;;.calcfraction:							; err(or fraction) = dx+dy;
 681+ E6DB              ;;	push	hl
 682+ E6DB              ;;	push	de
 683+ E6DB              ;;	ld		hl,(l2deltaX)
 684+ E6DB              ;;	ld		de,(l2deltaY)
 685+ E6DB              ;;	add		hl,de
 686+ E6DB              ;;	ld		(l2fraction),hl
 687+ E6DB              ;;	pop		de
 688+ E6DB              ;;	pop		hl
 689+ E6DB              ;;.mainloop:
 690+ E6DB              ;;	push	bc
 691+ E6DB              ;;	push	de
 692+ E6DB              ;;	ld 		a,(l2linecolor)
 693+ E6DB              ;;	call	l2_plot_pixel
 694+ E6DB              ;;	pop		de
 695+ E6DB              ;;	pop		bc
 696+ E6DB              ;;.arewefinishedtest
 697+ E6DB              ;;	ld		a,b
 698+ E6DB              ;;	cp		d
 699+ E6DB              ;;	jr		nz,.notthereyet
 700+ E6DB              ;;	ld		a,c
 701+ E6DB              ;;	cp		e
 702+ E6DB              ;;	ret		z
 703+ E6DB              ;;.notthereyet:
 704+ E6DB              ;;	push	de
 705+ E6DB              ;;	call	l2_e2fractionby2			; e2 = 2*err;
 706+ E6DB              ;;	pop		de
 707+ E6DB              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
 708+ E6DB              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
 709+ E6DB              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
 710+ E6DB              ;;	or		a							;
 711+ E6DB              ;;	sbc		hl,de						;
 712+ E6DB              ;;	pop		de
 713+ E6DB              ;;	jr		z,  .dodycalc				; if equal then calc
 714+ E6DB              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
 715+ E6DB              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
 716+ E6DB              ;;.dodycalc:
 717+ E6DB              ;;	ld		hl,(l2fraction)
 718+ E6DB              ;;	push	de
 719+ E6DB              ;;	ld		de,(l2deltaY)
 720+ E6DB              ;;	add		hl,de
 721+ E6DB              ;;	ld		(l2fraction),de
 722+ E6DB              ;;	pop		de
 723+ E6DB              ;;.l2yadjust:
 724+ E6DB              ;;	nop
 725+ E6DB              ;;.skipdycalc:
 726+ E6DB              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
 727+ E6DB              ;;	ld		hl,(l2e2)
 728+ E6DB              ;;	push	de							;
 729+ E6DB              ;;	ld		de,(l2deltaX)				;
 730+ E6DB              ;;	or		a							; clear carry flag
 731+ E6DB              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
 732+ E6DB              ;;	pop		de
 733+ E6DB              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
 734+ E6DB              ;;	jp		m,.dodxcalc					; was sign bit set
 735+ E6DB              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
 736+ E6DB              ;;.dodxcalc:
 737+ E6DB              ;;	ld		hl,(l2fraction)
 738+ E6DB              ;;	push	de
 739+ E6DB              ;;	ld		de,(l2deltaX)
 740+ E6DB              ;;	add		hl,de
 741+ E6DB              ;;	ld		(l2fraction),de
 742+ E6DB              ;;	pop		de
 743+ E6DB              ;;.l2xadjust:
 744+ E6DB              ;;	nop
 745+ E6DB              ;;.skipdxcalc:
 746+ E6DB              ;;	jr 		.mainloop
 747+ E6DB
 748+ E6DB
 749+ E6DB              ;;/l2_draw_diagonalold:
 750+ E6DB              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 751+ E6DB              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 752+ E6DB              ;;/.sortycoords:
 753+ E6DB              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
 754+ E6DB              ;;/	cp		d
 755+ E6DB              ;;/	jr		nc, .nocoordswap
 756+ E6DB              ;;/.swapcoords:
 757+ E6DB              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
 758+ E6DB              ;;/	lddebc
 759+ E6DB              ;;/	ldbchl
 760+ E6DB              ;;/.nocoordswap:
 761+ E6DB              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
 762+ E6DB              ;;/	sub		b							; we have already sorted  so y1 > y0
 763+ E6DB              ;;/	ld		(l2deltaY),a
 764+ E6DB              ;;/	neg									; DEBUG
 765+ E6DB              ;;/	ld		(l2deltaYn),a				; DEBUG
 766+ E6DB              ;;/	neg									; DEBUG
 767+ E6DB              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
 768+ E6DB              ;;/    ld		a,c
 769+ E6DB              ;;/	cp		e
 770+ E6DB              ;;/	jr		c, .x1GTx0
 771+ E6DB              ;;/.x1LTx0
 772+ E6DB              ;;/	ld		a,c
 773+ E6DB              ;;/	sub		e
 774+ E6DB              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
 775+ E6DB              ;;/	neg									; DEBUG
 776+ E6DB              ;;/	ld		(l2deltaXn),a				; DEBUG
 777+ E6DB              ;;/	neg									; DEBUG
 778+ E6DB              ;;/	ld		a,l2incbstep
 779+ E6DB              ;;/	jr		.setlayershift0
 780+ E6DB              ;;/.x1GTx0:
 781+ E6DB              ;;/	ld		a,e
 782+ E6DB              ;;/	sub		c
 783+ E6DB              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
 784+ E6DB              ;;/	neg									; DEBUG
 785+ E6DB              ;;/	ld		(l2deltaXn),a				; DEBUG
 786+ E6DB              ;;/	neg									; DEBUG
 787+ E6DB              ;;/	ld		a,l2decbstep
 788+ E6DB              ;;/.setlayershift0:
 789+ E6DB              ;;/	ld		a,0
 790+ E6DB              ;;/	pushbcde
 791+ E6DB              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
 792+ E6DB              ;;/	popdebc
 793+ E6DB              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
 794+ E6DB              ;;/.dymuliplyby2:
 795+ E6DB              ;;/	ld		a, (l2deltaY)				; dy *= 2
 796+ E6DB              ;;/	call	l2_signed_mul2a
 797+ E6DB              ;;/	ld		(l2deltaYsq),a
 798+ E6DB              ;;/	neg									; DEBUG
 799+ E6DB              ;;/	ld		(l2deltaYsqn),a				; DEBUG
 800+ E6DB              ;;/	neg									; DEBUG
 801+ E6DB              ;;/.dxmuliplyby2:
 802+ E6DB              ;;/	ld		a, (l2deltaX)				; dx *= 2
 803+ E6DB              ;;/	call	l2_signed_mul2a
 804+ E6DB              ;;/	ld		(l2deltaXsq),a
 805+ E6DB              ;;/	neg									; DEBUG
 806+ E6DB              ;;/	ld		(l2deltaXsqn),a				; DEBUG
 807+ E6DB              ;;/	neg									; DEBUG
 808+ E6DB              ;;/.plotfirstpixel:
 809+ E6DB              ;;/	pushbcde
 810+ E6DB              ;;/	ld a,(l2linecolor)
 811+ E6DB              ;;/	call	l2_plot_pixel
 812+ E6DB              ;;/	popdebc
 813+ E6DB              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
 814+ E6DB              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
 815+ E6DB              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
 816+ E6DB              ;;/	cp		(hl)
 817+ E6DB              ;;/	jp		m,	.signset
 818+ E6DB              ;;/.signclear:
 819+ E6DB              ;;/	jp		pe,	.dxLTEdybranch
 820+ E6DB              ;;/	jr		.dxGTdybranch
 821+ E6DB              ;;/.signset:
 822+ E6DB              ;;/	jp		po,	.dxLTEdybranch
 823+ E6DB              ;;/.dxGTdybranch:
 824+ E6DB              ;;/	ld		a,(l2deltaYsq)
 825+ E6DB              ;;/	ld		hl,l2deltaX
 826+ E6DB              ;;/	sub		(hl)
 827+ E6DB              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
 828+ E6DB              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
 829+ E6DB              ;;/	ld		a,c
 830+ E6DB              ;;/	cp		e
 831+ E6DB              ;;/	ret		z							; if x0 = x1 then done
 832+ E6DB              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
 833+ E6DB              ;;/	ld		a,(l2fraction)
 834+ E6DB              ;;/	TEST	$80
 835+ E6DB              ;;/	jr		nz,.BranchAskipYstep
 836+ E6DB              ;;/	inc		b							; 		++l2_vy0;
 837+ E6DB              ;;/	ld		hl,l2deltaXsq
 838+ E6DB              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
 839+ E6DB              ;;/	ld		(l2fraction),a
 840+ E6DB              ;;/.BranchAskipYstep:
 841+ E6DB              ;;/.l2stepx1:
 842+ E6DB              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
 843+ E6DB              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
 844+ E6DB              ;;/	ld		hl,l2deltaYsq
 845+ E6DB              ;;/	add		a,(hl)
 846+ E6DB              ;;/	ld		(l2fraction),a
 847+ E6DB              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
 848+ E6DB              ;;/	pushbcde
 849+ E6DB              ;;/	ld a,(l2linecolor)
 850+ E6DB              ;;/	call	l2_plot_pixel
 851+ E6DB              ;;/	popdebc
 852+ E6DB              ;;/.BranchAloop:
 853+ E6DB              ;;/	jr		.BranchAwhile
 854+ E6DB              ;;/.dxLTEdybranch:
 855+ E6DB              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
 856+ E6DB              ;;/	ld		hl, l2deltaY
 857+ E6DB              ;;/	sub		(hl)
 858+ E6DB              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
 859+ E6DB              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
 860+ E6DB              ;;/	ld		a,b
 861+ E6DB              ;;/	cp		d
 862+ E6DB              ;;/	ret		z							; if x0 = x1 then done
 863+ E6DB              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
 864+ E6DB              ;;/	ld		a,(l2fraction)
 865+ E6DB              ;;/	TEST	$80
 866+ E6DB              ;;/	jr		nz,.BranchBskipYstep
 867+ E6DB              ;;/.l2stepx2
 868+ E6DB              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
 869+ E6DB              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
 870+ E6DB              ;;/	ld		hl,l2deltaYsq
 871+ E6DB              ;;/	sub		(hl)
 872+ E6DB              ;;/	ld		(l2fraction),a
 873+ E6DB              ;;/.BranchBskipYstep:
 874+ E6DB              ;;/	ld		hl, l2deltaYsq
 875+ E6DB              ;;/	add		a,(hl)
 876+ E6DB              ;;/	ld		(l2fraction),a
 877+ E6DB              ;;/	inc		b							; ++l2_vy0;
 878+ E6DB              ;;/.BranchBplotBCColA:
 879+ E6DB              ;;/	pushbcde
 880+ E6DB              ;;/	ld a,(l2linecolor)
 881+ E6DB              ;;/	call	l2_plot_pixel
 882+ E6DB              ;;/	popdebc
 883+ E6DB              ;;/.BranchBloop:
 884+ E6DB              ;;/	jr		.BranchBwhile
 885+ E6DB
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
1134  E6DB                  INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_triangle.asm
   1+ E6DB
   2+ E6DB
   3+ E6DB
   4+ E6DB 00 00        l2trianglebc	        DW 0
   5+ E6DD 00 00        l2trianglede	        DW 0
   6+ E6DF 00 00        l2trianglehl	        DW 0
   7+ E6E1
   8+ E6E1              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ E6E1 C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ E6E5 CD 09 E6                             call	l2_draw_diagonal		; BC to DE
  11+ E6E8 F1                                   pop		af
  12+ E6E9 D1                                   pop		de						; swap DE and HL
  13+ E6EA E1                                   pop		hl						; so BC to DE is really to HL
  14+ E6EB C1                                   pop		bc
  15+ E6EC D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ E6EE F5                                   push	af
  17+ E6EF CD 09 E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ E6F2 F1                                   pop		af
  19+ E6F3 C1                                   pop		bc						; Now bc = original de
  20+ E6F4 D1                                   pop		de						; de = original hl
  21+ E6F5 CD 09 E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ E6F8 C9                                   ret
  23+ E6F9
  24+ E6F9
  25+ E6F9
  26+ E6F9
  27+ E6F9
# file closed: ./Layer2Graphics/asm_l2_plot_triangle.asm
1135  E6F9                  INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_fill_triangle.asm
   1+ E6F9              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
   2+ E6F9              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
   3+ E6F9              ; "note line to   bc = left side row,col, d right pixel, e = color"
   4+ E6F9 DD 01        l2_fillBottomFlatTriangle:break
   5+ E6FB 7D                                   ld		a,l
   6+ E6FC 32 22 E3                             ld		(l2linecolor),a
   7+ E6FF 79                                   ld		a,c
   8+ E700 BB                                   cp		e
   9+ E701 30 08                                jr		nc, .x2gtex1
  10+ E703 DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x1
  11+ E706 DD 2E 02                             ld		ixl,2                           ; list 2 hols  x0 down to x2
  12+ E709 18 06                                jr		.storepoints
  13+ E70B DD 26 02     .x2gtex1:               ld		ixh,2
  14+ E70E DD 2E 01                             ld		ixl,1
  15+ E711 C5 D5 E5     .storepoints:           push	bc,,de,,hl
  16+ E714 DD 7C                                ld		a,ixh
  17+ E716 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
  18+ E717 54                                   ld		d,h
  19+ E718 CD 2A E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
  20+ E71B E1 D1 C1                             pop		bc,,de,,hl
  21+ E71E C5 E5                                push	bc,,hl
  22+ E720 54                                   ld		d,h                             ; now its bc -> he
  23+ E721 DD 7D                                ld		a,ixl
  24+ E723 CD 2A E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
  25+ E726 E1 C1                                pop		bc,,hl
  26+ E728 50           .SaveForLoop:           ld		d,b
  27+ E729 5C                                   ld		e,h								; save loop counters
  28+ E72A D5                                   push	de								; de = y0ycommon
  29+ E72B 21 2A E3     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
  30+ E72E 78                                   ld		a,b
  31+ E72F ED 31                                add		hl,a							; hl = l2targetArray1 row b
  32+ E731 7E                                   ld		a,(hl)							;
  33+ E732 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
  34+ E733 21 2A E4                             ld      hl,l2targetArray2
  35+ E736 78                                   ld      a,b
  36+ E737 ED 31                                add     hl,a
  37+ E739              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
  38+ E739 7E                                   ld		a,(hl)
  39+ E73A 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
  40+ E73B 3A 22 E3     .SetColour:             ld		a,(l2linecolor)
  41+ E73E 5F                                   ld		e,a								; de = to colour
  42+ E73F C5           .SavePoints:            push	bc								; bc = rowcol
  43+ E740 25                                   dec		h
  44+ E741 E5                                   push	hl								; hl = l2targetArray1[b]
  45+ E742 CD 8C E2     .DoLine:	            call	l2_draw_horz_line_to
  46+ E745 E1                                   pop		hl
  47+ E746 C1                                   pop		bc
  48+ E747 04                                   inc		b								; down a rowc
  49+ E748 D1                                   pop		de								; de = from to (and b also = current)
  50+ E749 14                                   inc		d
  51+ E74A 7B                                   ld		a,e								; while e >= d
  52+ E74B BA                                   cp		d
  53+ E74C 30 DA                                jr 		nc,.SaveForLoop					; Is this the right point??
  54+ E74E C9                                   ret
  55+ E74F
# file closed: ./Layer2Graphics/asm_l2_fill_triangle.asm
1136  E74F                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ E74F
   2+ E74F 00 00        l2_circle_pos		DW 0
   3+ E751 00           l2_circle_colour	DB 0
   4+ E752 00           l2_circle_radius	DB 0
   5+ E753 00           l2_circle_x			DB 0
   6+ E754 00           l2_circle_y			DB 0
   7+ E755 00           l2_circle_d			DB 0
   8+ E756
   9+ E756              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  10+ E756 7B           l2_draw_circle:     ld		a,e
  11+ E757 32 FD E7                         ld		(.PlotPixel+1),a
  12+ E75A 7A                               ld		a,d								; get radius
  13+ E75B A7                               and		a
  14+ E75C C8                               ret		z
  15+ E75D FE 01                            cp		1
  16+ E75F CA 08 E8                         jp		z,CircleSinglepixel
  17+ E762 ED 43 8C E7                      ld		(.Plot1+1),bc					; save origin into DE reg in code
  18+ E766 DD 67                            ld		ixh,a							; ixh = raidus
  19+ E768 DD 2E 00                         ld		ixl,0
  20+ E76B 26 00        .calcd:	            ld		h,0
  21+ E76D 6F                               ld		l,a
  22+ E76E 29                               add		hl,hl							; hl = r * 2
  23+ E76F EB                               ex		de,hl							; de = r * 2
  24+ E770 21 03 00                         ld		hl,3
  25+ E773 A7                               and		a
  26+ E774 ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
  27+ E776 44                               ld		b,h
  28+ E777 4D                               ld		c,l								; bc = 3 - (r * 2)
  29+ E778 21 01 00     .calcdelta:         ld		hl,1
  30+ E77B 16 00                            ld		d,0
  31+ E77D DD 5D                            ld		e,ixl
  32+ E77F A7                               and		a
  33+ E780 ED 52                            sbc		hl,de
  34+ E782 11 01 00     .Setde1:            ld		de,1
  35+ E785 DD 7C        .CircleLoop:        ld		a,ixh
  36+ E787 DD BD                            cp		ixl
  37+ E789 D8                               ret		c
  38+ E78A D9           .ProcessLoop:	    exx
  39+ E78B 11 00 00     .Plot1:             ld		de,0
  40+ E78E 7B                               ld		a,e
  41+ E78F DD 85                            add		a,ixl
  42+ E791 4F                               ld		c,a
  43+ E792 7A                               ld		a,d
  44+ E793 DD 84                            add		a,ixh
  45+ E795 47                               ld		b,a
  46+ E796 CD FC E7                         call	.PlotPixel			;CX+X,CY+Y
  47+ E799 7B           .Plot2:             ld 		a,e
  48+ E79A DD 95                            sub 	ixl
  49+ E79C 4F                               ld 		c,a
  50+ E79D 7A                               ld 		a,d
  51+ E79E DD 84                            add 	a,ixh
  52+ E7A0 47                               ld		b,a
  53+ E7A1 CD FC E7                         call	.PlotPixel			;CX-X,CY+Y
  54+ E7A4 7B           .Plot3:             ld 		a,e
  55+ E7A5 DD 85                            add		a,ixl
  56+ E7A7 4F                               ld 		c,a
  57+ E7A8 7A                               ld 		a,d
  58+ E7A9 DD 94                            sub 	ixh
  59+ E7AB 47                               ld 		b,a
  60+ E7AC CD FC E7                         call	.PlotPixel			;CX+X,CY-Y
  61+ E7AF 7B           .Plot4:             ld 		a,e
  62+ E7B0 DD 95                            sub 	ixl
  63+ E7B2 4F                               ld 		c,a
  64+ E7B3 7A                               ld 		a,d
  65+ E7B4 DD 94                            sub 	ixh
  66+ E7B6 47                               ld 		b,a
  67+ E7B7 CD FC E7                         call	.PlotPixel			;CY+X,CX-Y
  68+ E7BA 7A           .Plot5:	            ld 		a,d
  69+ E7BB DD 85                            add 	a,ixl
  70+ E7BD 47                               ld 		b,a
  71+ E7BE 7B                               ld 		a,e
  72+ E7BF DD 84                            add 	a,ixh
  73+ E7C1 4F                               ld 		c,a
  74+ E7C2 CD FC E7                         call	.PlotPixel			;CY+X,CX+Y
  75+ E7C5 7A           .Plot6:	            ld 		a,d
  76+ E7C6 DD 95                            sub 	ixl
  77+ E7C8 47                               ld 		b,a
  78+ E7C9 7B                               ld 		a,e
  79+ E7CA DD 84                            add 	a,ixh
  80+ E7CC 4F                               ld 		c,a
  81+ E7CD CD FC E7                         call	.PlotPixel			;CY-X,CX+Y
  82+ E7D0 7A           .Plot7:	            ld 		a,d
  83+ E7D1 DD 85                            add 	a,ixl
  84+ E7D3 47                               ld 		b,a
  85+ E7D4 7B                               ld 		a,e
  86+ E7D5 DD 94                            sub 	ixh
  87+ E7D7 4F                               ld 		c,a
  88+ E7D8 CD FC E7                         call	.PlotPixel			;CY+X,CX-Y
  89+ E7DB 7A           .Plot8:	            ld 		a,d
  90+ E7DC DD 95                            sub 	ixl
  91+ E7DE 47                               ld		b,a
  92+ E7DF 7B                               ld 		a,e
  93+ E7E0 DD 94                            sub 	ixh
  94+ E7E2 4F                               ld 		c,a
  95+ E7E3 CD FC E7                         call	.PlotPixel			;CX+X,CY-Y
  96+ E7E6 D9                               exx
  97+ E7E7 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
  98+ E7E9 28 03                            jr z,   .draw_circle_1
  99+ E7EB 19                               add hl,de			; Delta=Delta+D1
 100+ E7EC 18 05                            jr      .draw_circle_2		;
 101+ E7EE 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 102+ E7EF 03                               inc     bc
 103+ E7F0 03                               inc     bc				; D2=D2+2
 104+ E7F1 DD 25                            dec     ixh				; Y=Y-1
 105+ E7F3 03           .draw_circle_2:		inc bc				; D2=D2+2
 106+ E7F4 03                               inc bc
 107+ E7F5 13                               inc de				; D1=D1+2
 108+ E7F6 13                               inc de
 109+ E7F7 DD 2C                            inc ixl				; X=X+1
 110+ E7F9 C3 85 E7                         jp      .CircleLoop
 111+ E7FC 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 112+ E7FE D5 C5 E5                         push	de,,bc,,hl
 113+ E801 CD 19 E1                         call 	l2_plot_pixel_y_test
 114+ E804 E1 C1 D1                         pop		de,,bc,,hl
 115+ E807 C9                               ret
 116+ E808 7B           CircleSinglepixel:  ld		a,e
 117+ E809 CD 19 E1                         call	l2_plot_pixel_y_test
 118+ E80C C9                               ret
 119+ E80D
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
1137  E80D                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ E80D
   2+ E80D 00           l2_circle_dblx		DB 0
   3+ E80E 00           l2_circle_dbly		DB 0
   4+ E80F
   5+ E80F              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ E80F 7B           l2_draw_circle_fill:    ld		a,e
   7+ E810 32 A6 E8                             ld		(.LineColour+1),a
   8+ E813 7A                                   ld		a,d								; get radius
   9+ E814 A7                                   and		a
  10+ E815 C8                                   ret		z
  11+ E816 FE 01                                cp		1
  12+ E818 CA 08 E8                             jp		z,CircleSinglepixel
  13+ E81B ED 43 45 E8                          ld		(.Line1+1),bc					; save origin into DE reg in code
  14+ E81F DD 67                                ld		ixh,a							; ixh = raidus (x)
  15+ E821 DD 2E 00                             ld		ixl,0							; ihy = y
  16+ E824 26 00        .calcd:	                ld		h,0
  17+ E826 6F                                   ld		l,a
  18+ E827 29                                   add		hl,hl							; hl = r * 2
  19+ E828 EB                                   ex		de,hl							; de = r * 2
  20+ E829 21 03 00                             ld		hl,3
  21+ E82C A7                                   and		a
  22+ E82D ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  23+ E82F 44                                   ld		b,h
  24+ E830 4D                                   ld		c,l								; bc = 3 - (r * 2)
  25+ E831 21 01 00     .calcdelta              ld		hl,1
  26+ E834 16 00                                ld		d,0
  27+ E836 DD 5D                                ld		e,ixl
  28+ E838 A7                                   and		a
  29+ E839 ED 52                                sbc		hl,de
  30+ E83B 11 01 00     .Setde1	                ld		de,1
  31+ E83E DD 7C        .CircleLoop:            ld		a,ixh
  32+ E840 DD BD                                cp		ixl
  33+ E842 D8                                   ret		c
  34+ E843 D9           .ProcessLoop:	        exx
  35+ E844 11 00 00     .Line1:                 ld		de,0
  36+ E847 7B                                   ld 		a,e
  37+ E848 DD 95                                sub 	ixl
  38+ E84A 4F                                   ld 		c,a
  39+ E84B 7A                                   ld 		a,d
  40+ E84C DD 84                                add 	a,ixh
  41+ E84E 47                                   ld		b,a
  42+ E84F                                      ;; TODO ADD DOUBLE X CALC
  43+ E84F D5                                   push	de
  44+ E850 DD 55                                ld		d,ixl
  45+ E852 CB 22                                sla		d
  46+ E854 CD A1 E8                             call	.PlotLine			;CX-X,CY+Y
  47+ E857 D1                                   pop		de
  48+ E858 7B           .Line2:                 ld 		a,e
  49+ E859 DD 95                                sub		ixl
  50+ E85B 4F                                   ld 		c,a
  51+ E85C 7A                                   ld 		a,d
  52+ E85D DD 94                                sub 	ixh
  53+ E85F 47                                   ld 		b,a
  54+ E860                                      ;; TODO ADD DOUBLE X CALC
  55+ E860 D5                                   push	de
  56+ E861 DD 55                                ld		d,ixl
  57+ E863 CB 22                                sla		d
  58+ E865 CD A1 E8                             call	.PlotLine			;CX-X,CY-Y
  59+ E868 D1                                   pop		de
  60+ E869 7B           .Line3:	                ld 		a,e
  61+ E86A DD 94                                sub		ixh
  62+ E86C 4F                                   ld 		c,a
  63+ E86D 7A                                   ld 		a,d
  64+ E86E DD 85                                add 	a,ixl
  65+ E870 47                                   ld 		b,a
  66+ E871                                      ;; TODO ADD DOUBLE Y CALC
  67+ E871 D5                                   push	de
  68+ E872 DD 54                                ld		d,ixh
  69+ E874 CB 22                                sla		d
  70+ E876 CD A1 E8                             call	.PlotLine			;CX-Y,CY+x
  71+ E879 D1                                   pop		de
  72+ E87A 7B           .Line4:	                ld 		a,e
  73+ E87B DD 94                                sub		ixh
  74+ E87D 4F                                   ld 		c,a
  75+ E87E 7A                                   ld 		a,d
  76+ E87F DD 95                                sub 	ixl
  77+ E881 47                                   ld 		b,a
  78+ E882                                      ;; TODO ADD DOUBLE Y CALC
  79+ E882 D5                                   push	de
  80+ E883 DD 54                                ld		d,ixh
  81+ E885 CB 22                                sla		d
  82+ E887 CD A1 E8                             call	.PlotLine			;CX-Y,CY+x
  83+ E88A D1                                   pop		de
  84+ E88B D9                                   exx
  85+ E88C CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  86+ E88E 28 03                                jr z,.draw_circle_1
  87+ E890 19                                   add hl,de			; Delta=Delta+D1
  88+ E891 18 05                                jr .draw_circle_2		;
  89+ E893 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  90+ E894 03                                   inc bc
  91+ E895 03                                   inc bc				; D2=D2+2
  92+ E896 DD 25                                dec ixh				; Y=Y-1
  93+ E898 03           .draw_circle_2:		    inc bc				; D2=D2+2
  94+ E899 03                                   inc bc
  95+ E89A 13                                   inc de				; D1=D1+2
  96+ E89B 13                                   inc de
  97+ E89C DD 2C                                inc ixl				; X=X+1
  98+ E89E C3 3E E8                             jp .CircleLoop
  99+ E8A1 D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 100+ E8A5 3E 00        .LineColour:	        ld		a,0         ; circle colur
 101+ E8A7 5F                                   ld      e,a
 102+ E8A8 CD 60 E2                             call 	l2_draw_horz_line
 103+ E8AB F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 104+ E8AF C9                                   ret
 105+ E8B0
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
1138  E8B0                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ E8B0              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ E8B0 08           l2_draw_any_line:       ex		af,af'
   3+ E8B1 79                                   ld		a,c
   4+ E8B2 BB                                   cp		e
   5+ E8B3 28 08                                jr		z,.HorizontalLine
   6+ E8B5 78                                   ld		a,b
   7+ E8B6 BA                                   cp		d
   8+ E8B7 28 0A                                jr		z,.VerticalLine
   9+ E8B9              ; use jp and get a free ret instruction optimisation
  10+ E8B9 08           .DiagonalLine:		    ex		af,af'			; get colour back into a
  11+ E8BA C3 09 E6                             jp		l2_draw_diagonal
  12+ E8BD
  13+ E8BD 08           .HorizontalLine:        ex		af,af'
  14+ E8BE 53                                   ld		d,e				; set d as target right pixel
  15+ E8BF 5F                                   ld		e,a				; e holds colour on this call
  16+ E8C0 C3 8C E2                             jp		l2_draw_horz_line_to
  17+ E8C3 08           .VerticalLine:          ex		af,af'
  18+ E8C4 5F                                   ld		e,a				; e holds colour on this call
  19+ E8C5 C3 0B E3                             jp		l2_draw_vert_line_to
  20+ E8C8
  21+ E8C8
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
1139  E8C8                  INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
# file opened: ./Layer2Graphics/clearLines-LL155.asm
   1+ E8C8              ; ClearLines (LL155)
   2+ E8C8              ;   y = 0
   3+ E8C8              ; 	XX20 = UbnkEdgeHeapSize
   4+ E8C8              ;   exit if XX20 < 4
   5+ E8C8              ;   ++y
   6+ E8C8              ;   do
   7+ E8C8              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ E8C8              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ E8C8              ;		++y
  10+ E8C8              ;	until Y > XX20
  11+ E8C8
  12+ E8C8              clearLines:
  13+ E8C8              layer2_clearLines:
  14+ E8C8 3A F6 C2     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ E8CB 47                                   ld		b,a
  16+ E8CC 21 04 C2                             ld		hl,UbnkLineArray
  17+ E8CF C5           clearLinesLoop:         push	bc
  18+ E8D0 7E                                   ld		a,(hl)
  19+ E8D1 23                                   inc		hl
  20+ E8D2 4F                                   ld		c,a
  21+ E8D3 7E                                   ld		a,(hl)
  22+ E8D4 23                                   inc		hl
  23+ E8D5 47                                   ld		b,a
  24+ E8D6 7E                                   ld		a,(hl)
  25+ E8D7 23                                   inc		hl
  26+ E8D8 5F                                   ld		e,a
  27+ E8D9 7E                                   ld		a,(hl)
  28+ E8DA 23                                   inc		hl
  29+ E8DB 57                                   ld		d,a
  30+ E8DC 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ E8DE E5                                   push	hl
  32+ E8DF CD B0 E8                             call    l2_draw_any_line
  33+ E8E2 E1                                   pop		hl
  34+ E8E3 C1                                   pop		bc
  35+ E8E4 10 E9                                djnz	clearLinesLoop
  36+ E8E6 C9                                   ret
  37+ E8E7
# file closed: ./Layer2Graphics/clearLines-LL155.asm
1140  E8E7                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ E8E7              ; ******************************************************************************
   2+ E8E7              ;
   3+ E8E7              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ E8E7              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ E8E7              ;
   6+ E8E7              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ E8E7              ;
   8+ E8E7              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ E8E7              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ E8E7              ;	before using line drawing.
  11+ E8E7              ;
  12+ E8E7              ;	The routine checks the range of specified coordinates which is the
  13+ E8E7              ;	boundaries of the graphics area (256x64	pixels).
  14+ E8E7              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ E8E7              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ E8E7              ;	visible part will be drawn.
  17+ E8E7              ;
  18+ E8E7              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ E8E7              ;
  20+ E8E7              ;	The plot routine is	defined by an address pointer	in IX.
  21+ E8E7              ;
  22+ E8E7              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ E8E7              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ E8E7              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ E8E7              ;
  26+ E8E7              ;	OUT:	None.
  27+ E8E7              ;
  28+ E8E7              ;	Registers	used	by routine:
  29+ E8E7              ;		   N	:	B, loop counter
  30+ E8E7              ;		   i	:	line	balance variable
  31+ E8E7              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ E8E7              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ E8E7              ;	  (x0,y0)	:	(h,l)
  34+ E8E7              ;	  direc_x	:	d, horisontal step increment
  35+ E8E7              ;	  direc_y	:	e, vertical step increment
  36+ E8E7              ;		 ddx	:	b, horisontal step increment
  37+ E8E7              ;		 ddy	:	c, vertical step increment
  38+ E8E7              ;
  39+ E8E7              ;		DE, A work registers.
  40+ E8E7              ;
  41+ E8E7              ; The algorithm in pseudo-code:
  42+ E8E7              ;
  43+ E8E7              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ E8E7              ;	x = ABS x: y =	ABS y
  45+ E8E7              ;
  46+ E8E7              ;	if x	>= y
  47+ E8E7              ;		if x+y=0 then return
  48+ E8E7              ;		H = x
  49+ E8E7              ;		L = y
  50+ E8E7              ;		ddx = direc_x
  51+ E8E7              ;		ddy = 0
  52+ E8E7              ;	else
  53+ E8E7              ;		H = y
  54+ E8E7              ;		L = x
  55+ E8E7              ;		ddx = 0
  56+ E8E7              ;		ddy = direc_y
  57+ E8E7              ;	endif
  58+ E8E7              ;
  59+ E8E7              ;	B = H
  60+ E8E7              ;	i = INT(B/2)
  61+ E8E7              ;	FOR N=B TO 1 STEP -1
  62+ E8E7              ;		i = i + L
  63+ E8E7              ;		if i	< H
  64+ E8E7              ;			ix =	ddx
  65+ E8E7              ;			iy =	ddy
  66+ E8E7              ;		else
  67+ E8E7              ;			i = i - H
  68+ E8E7              ;			ix =	direc_x
  69+ E8E7              ;			iy =	direc_y
  70+ E8E7              ;		endif
  71+ E8E7              ;		x0 =	x0 +	ix
  72+ E8E7              ;		y0 =	y0 +	iy
  73+ E8E7              ;		plot	(x0,y0)
  74+ E8E7              ;	NEXT	N
  75+ E8E7              ;
  76+ E8E7              ;
  77+ E8E7              ;	Registers	changed after return:
  78+ E8E7              ;		..BCDEHL/IXIY/af......	same
  79+ E8E7              ;		AF....../..../..bcdehl	different
  80+ E8E7              ;
  81+ E8E7 DF           line_gfx_colour db $DF
  82+ E8E8 00 00        line_gfx_coords	dw 0
  83+ E8EA              LineHLtoDE:
  84+ E8EA 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ E8EB FE C0                                cp	192
  86+ E8ED 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ E8EF 7A                                   ld	a,d
  88+ E8F0 FE C0                                cp	192
  89+ E8F2 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ E8F4 22 E8 E8                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ E8F7 E5                                   push	hl
  92+ E8F8 D5                                   push	de
  93+ E8F9 6C                                   ld	l,h				; L = x0
  94+ E8FA 62                                   ld	h,d				; H = x1
  95+ E8FB 7C           distanceX:		        ld	a,h
  96+ E8FC 95                                   sub	l
  97+ E8FD 6F                                   ld	l,a
  98+ E8FE 26 00                                ld	h,0
  99+ E900 30 02                                jr	nc, distanceXDone
 100+ E902 26 FF                                ld	h,-1
 101+ E904 D1           distanceXDone:          pop	de
 102+ E905 E3                                   ex	(sp),hl			; L = y0
 103+ E906 63                                   ld	h,e				; H = y1
 104+ E907 7C           distanceY:		        ld	a,h
 105+ E908 95                                   sub	l
 106+ E909 6F                                   ld	l,a
 107+ E90A 26 00                                ld	h,0
 108+ E90C 30 02                                jr	nc, distanceYDone
 109+ E90E 26 FF                                ld	h,-1
 110+ E910 D1           distanceYDone:          pop	de
 111+ E911 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ E912 CD 16 E9                             call	DrawLineRelative			; draw line...
 113+ E915 C9           exit_line:              ret
 114+ E916
 115+ E916              ; ***************************************************************************
 116+ E916              ;
 117+ E916              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ E916              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ E916              ;
 120+ E916              ; OUT: h - l distance in	HL
 121+ E916              ;
 122+ E916
 123+ E916 D5           DrawLineRelative:       push	de
 124+ E917 E5                                   push	hl
 125+ E918 D9                                   exx
 126+ E919 E1                                   pop	hl					; get relative	horisontal movement
 127+ E91A CD 85 E9                             call	sgn
 128+ E91D 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ E91E CD 92 E9                             call	absValue
 130+ E921 45                                   ld	b,l					; x = ABS(x)
 131+ E922 E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ E923 CD 85 E9                             call	sgn
 133+ E926 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ E927 CD 92 E9                             call	absValue
 135+ E92A 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ E92B              ; so by here BC = dx dy HL in increment/decrement x y
 137+ E92B C5                                   push	bc
 138+ E92C D9                                   exx
 139+ E92D E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ E92E 7C                                   ld	a,h
 141+ E92F BD                                   cp	l
 142+ E930 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ E932 B4           areXandYZero:           or	h					;	if x+y = 0
 144+ E933 28 4F                                jr	z, exit_draw		;		return
 145+ E935 D9           y_lessorequal_x:        exx						;	else
 146+ E936 42                                   ld	b,d					;		ddx = direc_x
 147+ E937 0E 00                                ld	c,0					;		ddy = 0
 148+ E939 D9                                   exx
 149+ E93A 18 08                                jr	init_drawloop		; else
 150+ E93C 7C           x_smaller_y:	        ld	a,h
 151+ E93D 65                                   ld	h,l					;	H = y
 152+ E93E 6F                                   ld	l,a					;	L = x
 153+ E93F D9                                   exx
 154+ E940 06 00                                ld	b,0					;	ddx = 0
 155+ E942 4B                                   ld	c,e					;	ddy = direc_y
 156+ E943 D9                                   exx
 157+ E944 44           init_drawloop:	        ld	b,h
 158+ E945 4C                                   ld	c,h					; B = H
 159+ E946 CB 39                                srl	c					; i = INT(B/2)
 160+ E948              										; FOR N=B	TO 1	STEP	-1
 161+ E948 79           drawloop:		        ld	a,c
 162+ E949 85                                   add	a,l
 163+ E94A 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ E94C BC                                   cp	h
 165+ E94D 30 06                                jr	nc, i_greater		;	if i	< H
 166+ E94F 4F                                   ld	c,a					;		i = i + L
 167+ E950 D9                                   exx
 168+ E951 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ E952 D9                                   exx
 170+ E953 18 05                                jr	check_plot			;	else
 171+ E955 94           i_greater:		        sub	h					;		i = i - H
 172+ E956 4F                                   ld	c,a
 173+ E957 D9                                   exx
 174+ E958 D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ E959 D9                                   exx						;	endif
 176+ E95A E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ E95B EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ E95C 2A E8 E8                             ld	hl,(line_gfx_coords)
 179+ E95F 7D                                   ld	a,l
 180+ E960 83                                   add	a,e					;
 181+ E961 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ E962 7A                                   ld	a,d
 183+ E963 3C                                   inc	a
 184+ E964 84                                   add	a,h
 185+ E965 38 04                                jr	c, check_range		;	check out	of range
 186+ E967 28 1A                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ E969 18 02                                jr	plot_point
 188+ E96B 20 16        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ E96D
 190+ E96D 3D           plot_point:             dec	a
 191+ E96E C5                                   push	bc
 192+ E96F F5                                   push	af
 193+ E970 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ E971 4D                                   ld		c,l
 195+ E972 3A E7 E8                             ld		a,(line_gfx_colour)
 196+ E975 ED 43 E8 E8                          ld      (line_gfx_coords),bc
 197+ E979 CD FF E0                             call	l2_plot_pixel
 197+ E97C
 198+ E97C F1                                   pop		af
 199+ E97D C1                                   pop		bc
 200+ E97E E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ E97F 10 C7                                djnz	drawloop		; NEXT N
 202+ E981 18 01                                jr	exit_draw
 203+ E983
 204+ E983 E1           range_error:	        pop	hl					; remove H,L distances...
 205+ E984 C9           exit_draw:		        ret
 206+ E985
 207+ E985
 208+ E985              ; ******************************************************************************
 209+ E985              ;
 210+ E985              ;	SGN (Signum value) of 16	bit signed integer.
 211+ E985              ;
 212+ E985              ;	IN:		HL =	integer
 213+ E985              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ E985              ;
 215+ E985              ;	Registers	changed after return:
 216+ E985              ;	..BCDEHL/IXIY	same
 217+ E985              ;	AF....../....	different
 218+ E985              ;
 219+ E985 7C           sgn:				    ld	a,h
 220+ E986 B5                                   or	l
 221+ E987 C8                                   ret	z				; integer	is zero, return 0...
 222+ E988 CB 7C                                bit	7,h
 223+ E98A 20 03                                jr	nz, negative_int
 224+ E98C 3E 01                                ld	a,1
 225+ E98E C9                                   ret
 226+ E98F 3E FF        negative_int:		    ld	a,-1
 227+ E991 C9                                   ret
 228+ E992
 229+ E992
 230+ E992              ; ******************************************************************************
 231+ E992              ;
 232+ E992              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ E992              ;
 234+ E992              ;	IN:		HL =	integer
 235+ E992              ;	OUT:		HL =	converted	integer
 236+ E992              ;
 237+ E992              ;	Registers	changed after return:
 238+ E992              ;	A.BCDE../IXIY	same
 239+ E992              ;	.F....HL/....	different
 240+ E992              ;
 241+ E992 CB 7C        absValue:			    bit	7,h
 242+ E994 C8                                   ret	z				; integer	is positive...
 243+ E995 D5                                   push	de
 244+ E996 EB                                   ex	de,hl
 245+ E997 21 00 00                             ld	hl,0
 246+ E99A BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ E99B ED 52                                sbc	hl,de			; convert	negative integer
 248+ E99D D1                                   pop	de
 249+ E99E C9                                   ret
 250+ E99F
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
1141  E99F              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
1142  E99F                  SLOT    CMDRDATAAddr
1143  E99F                  PAGE    BankCmdrData
1144  E99F                  ORG     CMDRDATAAddr, BankCmdrData
1145  E000                  INCLUDE "./Commander/commanderData.asm"
# file opened: ./Commander/commanderData.asm
   1+ E000
   2+ E000 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E004 53 4F 4E 00
   3+ E008 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00;
   3+ E00C 03 1C 0E 00
   3+ E010 00 0A 00 11
   3+ E014 3A 07 09 08
   3+ E018 00
   4+ E019 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E01D 53 B7
   5+ E01F              defaultHomeX	        equ $14
   6+ E01F              defaultHomeY	        equ $AD
   7+ E01F
   8+ E01F               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
   9+ E01F 11 4F 98     defaultCommander:       ld		de,CommanderName				;set commander name
  10+ E022 21 00 E0                             ld		hl,defaultName
  11+ E025 01 08 00                             ld		bc,8
  12+ E028 ED B0                                ldir
  13+ E02A 11 A2 98                             ld		de,GalaxySeeds
  14+ E02D 21 19 E0                             ld		hl,defaultSeeds
  15+ E030 01 08 00                             ld		bc,8
  16+ E033 ED B0                                ldir
  17+ E035 3E 14                                ld		a,defaultHomeX
  18+ E037 32 A8 98                             ld		(PresentSystemX),a
  19+ E03A 32 AA 98                             ld		(TargetPlanetX),a
  20+ E03D 3E AD                                ld		a,defaultHomeY
  21+ E03F 32 A9 98                             ld		(PresentSystemY),a
  22+ E042 32 AB 98                             ld		(TargetPlanetY),a
  23+ E045              	; testing
  24+ E045 21 5C 97                             ld		hl,IndexedWork
  25+ E048 CD 67 9C                             call	copy_galaxy_to_system
  26+ E04B CD 27 9D                             call	find_present_system
  27+ E04E CD 8A 9C                             call	copy_working_to_galaxy
  28+ E051 01 60 EA                             ld      bc,60000
  29+ E054 ED 43 D0 9B                          ld      (Cash),bc
  30+ E058 01 00 00                             ld		bc,0
  31+ E05B ED 43 D2 9B                          ld		(Cash+2), bc                    ; cash no longer big endian
  32+ E05F 3E 46                                ld		a,MaxFuelLevel
  33+ E061 32 D4 9B                             ld		(Fuel),a
  34+ E064 3E 5B                                ld      a,BankGalaxyData0
  35+ E066 32 95 98                             ld		(Galaxy),a
  36+ E069 AF                                   xor		a
  37+ E06A 21 0F 9C                             ld      hl,EquipmentFitted
  38+ E06D 06 1A                                ld      b, EQ_ITEM_COUNT
  39+ E06F 77           .ClearFittedLooop:      ld      (hl),a
  40+ E070 23                                   inc     hl
  41+ E071 10 FC                                djnz    .ClearFittedLooop
  42+ E073 21 19 9C                             ld      hl,EquipmentFitted+EQ_FRONT_PULSE
  43+ E076 3E FF                                ld      a,$FF
  44+ E078 77                                   ld      (hl),a
  45+ E079 32 B8 98                             ld		(MissionData),a						;The Plan/Mission
  46+ E07C AF                                   xor     a
  47+ E07D 32 D6 9B                             ld		(LaserList+1),a
  48+ E080 32 D7 9B                             ld		(LaserList+2),a
  49+ E083 32 D8 9B                             ld		(LaserList+3),a
  50+ E086 3E 0A                                ld      a,EQ_FRONT_PULSE
  51+ E088 32 D5 9B                             ld		(LaserList),a
  52+ E08B AF                                   xor     a
  53+ E08C 32 12 9C                             ld		(ECMPresent),a
  54+ E08F 32 29 9C                             ld		(FuelScoopsBarrelStatus),a
  55+ E092 32 15 9C                             ld		(EnergyBomb),a
  56+ E095 32 16 9C                             ld		(ExtraEnergyUnit),a
  57+ E098 32 17 9C                             ld		(DockingComputer),a
  58+ E09B 32 18 9C                             ld		(GalacticHyperDrive),a
  59+ E09E 32 14 9C                             ld		(EscapePod),a
  60+ E0A1 32 60 98                             ld      (FugitiveInnocentStatus),a
  61+ E0A4 32 73 98                             ld		(KillTally),a
  62+ E0A7 32 9B 96                             ld      (OuterHyperCount),a
  63+ E0AA 32 9A 96                             ld      (InnerHyperCount),a
  64+ E0AD 3D                                   dec		a								; now a = 255
  65+ E0AE 32 77 98                             ld		(ForeShield),a
  66+ E0B1 32 78 98                             ld		(AftShield),a
  67+ E0B4 32 79 98                             ld		(PlayerEnergy),a
  68+ E0B7 3E 14                                ld		a,20
  69+ E0B9 32 D9 9B                             ld		(CargoBaySize),a
  70+ E0BC CD C0 E0                             call	ZeroCargo						; Clear out cargo
  71+ E0BF                                      ; more to DO
  72+ E0BF C9                                   ret
  73+ E0C0
# file closed: ./Commander/commanderData.asm
1146  E0C0                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E0C0              ZeroCargo:
   2+ E0C0 AF           		xor		a							;zero-out cargo, including gems.
   3+ E0C1 06 10        		ld		b,16						;all the way up to alien items
   4+ E0C3 21 DB 9B     		ld		hl,CargoTonnes   			; cargo levels
   5+ E0C6              .ZeroLoop:
   6+ E0C6 77                   ld      (hl),a
   7+ E0C7 23           		inc		hl
   8+ E0C8 10 FC        		djnz	.ZeroLoop
   9+ E0CA C9           		ret
  10+ E0CB
# file closed: ./Commander/zero_player_cargo.asm
1147  E0CB              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
1148  E0CB                  SLOT    LAYER1Addr
1149  E0CB                  PAGE    BankLAYER1
1150  E0CB                  ORG     LAYER1Addr, BankLAYER1
1151  E000
1152  E000                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD 48 93                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
1153  E047                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls_top:             xor     a
   2+ E048 21 00 40                             ld      hl, $4000
   3+ E04B 11 00 08                             ld      de, $0800
   4+ E04E CD 48 93                             call    memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_cls_mid:             xor     a
   8+ E053 21 00 48                             ld      hl, $4800
   9+ E056 11 00 08                             ld      de, $0800
  10+ E059 CD 48 93                             call    memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D AF           l1_cls_bottom:          xor     a
  14+ E05E 21 00 50                             ld      hl, $5000
  15+ E061 11 00 08                             ld      de, $0800
  16+ E064 CD 48 93                             call    memfill_dma
  17+ E067 C9                                   ret
  18+ E068
  19+ E068              ; Designed specifically to clear a whole character aligned line
  20+ E068 1E 00        l1_cls_line_d:          ld      e,0
  21+ E06A ED 94                                pixelad
  22+ E06C 11 00 01                             ld      de,32 * 8
  23+ E06F AF                                   xor     a
  24+ E070 CD 48 93                             call    memfill_dma
  25+ E073 C9                                   ret
  26+ E074
  27+ E074              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E074 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E076 ED 94                                pixelad
  30+ E078 11 00 02                             ld      de,32 * 16
  31+ E07B AF                                   xor     a
  32+ E07C CD 48 93                             call    memfill_dma
  33+ E07F C9                                   ret
  34+ E080
  35+ E080 AF           l1_cls:                 xor		a
  36+ E081 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E084 11 00 18                             ld		de, $1800
  38+ E087 CD 48 93                             call	memfill_dma
  39+ E08A C9                                   ret
  40+ E08B
  41+ E08B 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E08E 1E 20                                ld      e,32
  43+ E090 ED 30                                mul
  44+ E092 19                                   add     hl,de
  45+ E093 11 40 00                             ld		de, 32 * 2
  46+ E096 CD 48 93                             call	memfill_dma
  47+ E099 C9                                   ret
  48+ E09A
  49+ E09A
  50+ E09A AF           l1_attr_cls:            xor		a
  51+ E09B 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E09E 11 00 03                             ld		de, $0300
  53+ E0A1 CD 48 93                             call	memfill_dma
  54+ E0A4 C9                                   ret
  55+ E0A5
  56+ E0A5 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0A8 ED 79                                out		(c),a
  58+ E0AA C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
1154  E0AB                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E0AB              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E0AB D5 E5        l1_print_char:          push	de,,hl
   3+ E0AD ED 94                                pixelad								; hl = address of de
   4+ E0AF E5                                   push	hl							; save hl for loop
   5+ E0B0 26 00                                ld		h,0
   6+ E0B2 6F                                   ld		l,a
   7+ E0B3 29                                   add		hl,hl						; * 2
   8+ E0B4 29                                   add		hl,hl						; * 4
   9+ E0B5 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0B6 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0BA EB                                   ex		de,hl						; save address into de
  12+ E0BB E1                                   pop		hl							; get back hl for loop
  13+ E0BC 06 08                                ld		b,8							; do 8 rows
  14+ E0BE 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0BF 13                                   inc		de							; next byte
  16+ E0C0 77                                   ld		(hl),a						; poke to screen
  17+ E0C1 ED 93                                pixeldn								; Down 1 row
  18+ E0C3 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0C5 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0C7 C9                                   ret
  21+ E0C8
  22+ E0C8              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0C8              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0C8              l1_print_at:
  25+ E0C8 7E           .PrintLoop:             ld		a,(hl)
  26+ E0C9 FE 00                                cp		0
  27+ E0CB C8                                   ret		z
  28+ E0CC                                      CallIfAGTENusng " ", l1_print_char
  28+ E0CC FE 20       >                        cp      " "
  28+ E0CE D4 AB E0    >                        call	nc,l1_print_char
  29+ E0D1 23                                   inc		hl							; move 1 message character right
  30+ E0D2 7B                                   ld		a,e
  31+ E0D3 C6 08                                add		a,8
  32+ E0D5 5F                                   ld		e,a							; move 1 screen character right
  33+ E0D6 18 F0                                jr		.PrintLoop
  34+ E0D8              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E0D8 C9                                   ret
  36+ E0D9
  37+ E0D9              ;l1_print_at_wrap:
  38+ E0D9              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E0D9              ;	ld      iyh,e
  40+ E0D9              ;.PrintLoop:
  41+ E0D9              ;	ld		a,(hl)
  42+ E0D9              ;	cp		0
  43+ E0D9              ;	ret		z
  44+ E0D9              ;.CountWordCharLen
  45+ E0D9              ;; Need to change to word wrap, so it will loop through string as before
  46+ E0D9              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E0D9              ;; if that is > 238 then force a premature line wrap
  48+ E0D9              ;
  49+ E0D9              ;
  50+ E0D9              ;    push    iy
  51+ E0D9              ;    call	l1_print_char
  52+ E0D9              ;    pop     iy
  53+ E0D9              ;	inc		hl							; move 1 message character right
  54+ E0D9              ;	ld		a,e
  55+ E0D9              ;    cp      238
  56+ E0D9              ;    jr      nc,.NextLine
  57+ E0D9              ;	add		a,8
  58+ E0D9              ;	ld		e,a							; move 1 screen character right
  59+ E0D9              ;	jr		.PrintLoop
  60+ E0D9              ;.Clearstackandfinish:
  61+ E0D9              ;	pop		de
  62+ E0D9              ;	ret
  63+ E0D9              ;.NextLine:
  64+ E0D9              ;    ld      a,(hl)
  65+ E0D9              ;    cp      " "
  66+ E0D9              ;    ld      e,iyh
  67+ E0D9              ;    ld      a,d
  68+ E0D9              ;    add     a,8
  69+ E0D9              ;    ld      d,a
  70+ E0D9              ;    jr		.PrintLoop
  71+ E0D9
  72+ E0D9              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E0D9 E5           L1LenWordAtHL:          push    hl
  74+ E0DA D5                                   push    de
  75+ E0DB 7E           .CountLoop:             ld      a,(hl)
  76+ E0DC FE 00                                cp      0
  77+ E0DE 28 0F                                jr      z,.CountDone
  78+ E0E0 FE 20                                cp      32
  79+ E0E2 28 0B                                jr      z,.CountDone
  80+ E0E4 7B                                   ld      a,e
  81+ E0E5 C6 08                                add     a,8
  82+ E0E7 5F                                   ld      e,a
  83+ E0E8 FE EE                                cp      238
  84+ E0EA 30 07                                jr      nc,.TooLong
  85+ E0EC 23                                   inc     hl
  86+ E0ED 18 EC                                jr      .CountLoop
  87+ E0EF D1           .CountDone:             pop     de
  88+ E0F0 E1                                   pop     hl
  89+ E0F1 AF                                   xor     a
  90+ E0F2 C9                                   ret
  91+ E0F3 D1           .TooLong                pop     de
  92+ E0F4 E1                                   pop     hl
  93+ E0F5 3E FF                                ld      a,$FF
  94+ E0F7 C9                                   ret
  95+ E0F8
  96+ E0F8 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0F9 FE 00                                cp      0
  98+ E0FB C8                                   ret     z
  99+ E0FC FE 20                                cp      32
 100+ E0FE 28 0F                                jr      z,.ItsASpace
 101+ E100 FD E5                                push    iy
 102+ E102 CD AB E0                             call	l1_print_char
 103+ E105 FD E1                                pop     iy
 104+ E107 7B                                   ld      a,e
 105+ E108 C6 08                                add     a,8
 106+ E10A 5F                                   ld      e,a
 107+ E10B 23                                   inc     hl
 108+ E10C C3 F8 E0                             jp      L1PrintWordAtHL
 109+ E10F 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E110 7B                                   ld      a,e
 111+ E111 C6 08                                add     a,8
 112+ E113 5F                                   ld      e,a
 113+ E114 C9                                   ret
 114+ E115
 115+ E115
 116+ E115              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E115              ; Now has full word level wrapping
 118+ E115 FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E117 7E           .PrintLoop:             ld		a,(hl)
 120+ E118 FE 00                                cp		0
 121+ E11A C8                                   ret		z
 122+ E11B CD D9 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E11E FE FF                                cp      $FF
 124+ E120 28 06                                jr      z,.WrapNextLine
 125+ E122 CD F8 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E125              ; Need to change to word wrap, so it will loop through string as before
 127+ E125              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E125              ; if that is > 238 then force a premature line wrap
 129+ E125 18 F0                                jr		.PrintLoop
 130+ E127              .Clearstackandfinish:   ;op		de
 131+ E127 C9                                   ret
 132+ E128              .WrapNextLine:
 133+ E128 FD 5C        .NextLine:              ld      e,iyh
 134+ E12A 7A                                   ld      a,d
 135+ E12B C6 08                                add     a,8
 136+ E12D 57                                   ld      d,a
 137+ E12E 18 E7                                jr		.PrintLoop
 138+ E130
 139+ E130
# file closed: ./Layer1Graphics/layer1_print_at.asm
1155  E130              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
1156  E130              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
1157  E130              ; as the is aligned and data tables are after that
1158  E130              ; need to make the ship index tables same size in each to simplify further
1159  E130                  SLOT    ShipModelsAddr
1160  E130                  PAGE    BankShipModels1
1161  E130              	ORG     ShipModelsAddr, BankShipModels1
1162  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyEdgesToUniverse:   MACRO
  47+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  48+ E000 ~                                    ld          de,UBnkHullEdges
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(LineX4Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyNormsToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullNormals
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld          a,(FaceCtX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              ; Passes in ship nbr in A and bank is part of MACRO
  69+ E000              MCopyShipToUniverse:    MACRO       banklabel
  70+ E000 ~                                    ld          hl,UBnkShipModelBank
  71+ E000 ~                                    ld          (hl),banklabel
  72+ E000 ~                                    ld          (UBnkShipModelNbr),a
  73+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
  74+ E000 ~                                    add         hl,a
  75+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
  76+ E000 ~                                    ld          c,(hl)
  77+ E000 ~                                    inc         hl
  78+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
  79+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
  80+ E000 ~                                    add         hl,a
  81+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
  82+ E000 ~                                    ld          a,(hl)
  83+ E000 ~                                    inc         hl
  84+ E000 ~                                    ld          h,(hl)
  85+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
  86+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
  87+ E000 ~                                    ld          bc,ShipDataLength
  88+ E000 ~                                    ldir
  89+ E000 ~                                    call        CopyVertsToUniv
  90+ E000 ~                                    call        CopyEdgesToUniv
  91+ E000 ~                                    call        CopyNormsToUniv
  92+ E000 ~                                    ret
  93+ E000                                      ENDM
  94+ E000
  95+ E000              MCopyBodyToUniverse:    MACRO       copyRoutine
  96+ E000 ~                                    ld          a,13
  97+ E000 ~                                    call        copyRoutine
  98+ E000 ~                                    ret
  99+ E000                                      ENDM
 100+ E000
 101+ E000
 102+ E000              MCopyShipIdToUniverse:  MACRO
 103+ E000 ~                                    call        GetShipModelId
 104+ E000 ~                                    MMUSelectShipBankA
 105+ E000 ~                                    ld          a,b
 106+ E000 ~                                    jp          CopyShipToUniverse
 107+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
1163  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
1164  E00F              GetShipBankId:
1165  E00F              GetShipBank1Id:        MGetShipBankId ShipBankTable
1165  E00F 06 00       >                        ld      b,0
1165  E011 4F          >                        ld      c,a                                 ; c= original ship id
1165  E012 CB 3F       >.ShiftLoop:             srl     a
1165  E014 CB 3F       >                        srl     a
1165  E016 CB 3F       >                        srl     a
1165  E018 CB 3F       >                        srl     a                                   ; divide by 16
1165  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1165  E01B 79          >                        ld      a,c
1165  E01C 50          >                        ld      d,b
1165  E01D 1E 10       >                        ld      e,16
1165  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1165  E021 93          >                        sub     e                                   ; a= actual model id now
1165  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1165  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1165  E024 7A          >                        ld      a,d                                 ; a = bank number
1165  E025             >;.. Now b = bank and a = adjusted ship nbr
1165  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
1165  E028 ED 31       >                        add     hl,a
1165  E02A ED 31       >                        add     hl,a
1165  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1165  E02D             >                        ClearCarryFlag
1165  E02D B7          >                        or a
1165  E02E C9          >                        ret
1166  E02F              CopyVertsToUniv:
1167  E02F              CopyVertsToUniv1:       McopyVertsToUniverse
1167  E02F 2A 18 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1167  E032 11 1C C3    >                        ld          de,UBnkHullVerticies
1167  E035 06 00       >                        ld          b,0
1167  E037 3A 0C C3    >                        ld			a,(VertexCtX6Addr)
1167  E03A 4F          >                        ld          c,a
1167  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1167  E03C CD 6E 93    >                        call        memcopy_dma
1167  E03F C9          >                        ret
1168  E040              CopyEdgesToUniv:
1169  E040              CopyEdgesToUniv1:       McopyEdgesToUniverse
1169  E040 2A 07 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1169  E043 11 48 C4    >                        ld          de,UBnkHullEdges
1169  E046 06 00       >                        ld          b,0
1169  E048 3A 09 C3    >                        ld			a,(LineX4Addr)
1169  E04B 4F          >                        ld          c,a
1169  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1169  E04D CD 6E 93    >                        call        memcopy_dma
1169  E050 C9          >                        ret
1170  E051              CopyNormsToUniv:
1171  E051              CopyNormsToUniv1:       McopyNormsToUniverse
1171  E051 2A 14 C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1171  E054 11 F8 C8    >                        ld          de,UBnkHullNormals
1171  E057 06 00       >                        ld          b,0
1171  E059 3A 10 C3    >                        ld          a,(FaceCtX4Addr)
1171  E05C 4F          >                        ld          c,a
1171  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1171  E05E CD 6E 93    >                        call        memcopy_dma
1171  E061 C9          >                        ret
1172  E062              ShipBankTable:
1173  E062              ShipBankTable1:         MShipBankTable
1173  E062 3B 00       >                        DW      BankShipModels1
1173  E064 43 00       >                        DW      BankShipModels2
1173  E066 44 00       >                        DW      BankShipModels3
1173  E068 45 00       >                        DW      BankShipModels4
1174  E06A              CopyShipToUniverse:
1175  E06A              CopyShipToUniverse1     MCopyShipToUniverse     BankShipModels1
1175  E06A 21 02 C3    >                        ld          hl,UBnkShipModelBank
1175  E06D 36 3B       >                        ld          (hl),BankShipModels1
1175  E06F 32 03 C3    >                        ld          (UBnkShipModelNbr),a
1175  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1175  E075 ED 31       >                        add         hl,a
1175  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1175  E079 4E          >                        ld          c,(hl)
1175  E07A 23          >                        inc         hl
1175  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1175  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1175  E07F ED 31       >                        add         hl,a
1175  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1175  E083 7E          >                        ld          a,(hl)
1175  E084 23          >                        inc         hl
1175  E085 66          >                        ld          h,(hl)
1175  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1175  E087 11 04 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1175  E08A 01 18 00    >                        ld          bc,ShipDataLength
1175  E08D ED B0       >                        ldir
1175  E08F CD 2F E0    >                        call        CopyVertsToUniv
1175  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1175  E095 CD 51 E0    >                        call        CopyNormsToUniv
1175  E098 C9          >                        ret
1176  E099              CopyBodyToUniverse:
1177  E099              CopyBodyToUniverse1:    MCopyBodyToUniverse     CopyShipToUniverse1
1177  E099 3E 0D       >                        ld          a,13
1177  E09B CD 6A E0    >                        call        CopyShipToUniverse1
1177  E09E C9          >                        ret
1178  E09F                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E09F              ShipModelTable:
   2+ E09F 3F E1        ShipModelTable1:         DW Adder                                   ;00
   3+ E0A1 73 E2                                 DW Anaconda                                ;01
   4+ E0A3 79 E3                                 DW Asp_Mk_2                                ;02
   5+ E0A5 A3 E4                                 DW Boa                                     ;03
   6+ E0A7
   7+ E0A7 99 E5                                 DW CargoType5                              ;04
   8+ E0A9 45 E6                                 DW Boulder                                 ;05
   9+ E0AB EB E6                                 DW Asteroid                                ;06
  10+ E0AD
  11+ E0AD C5 E7                                 DW Bushmaster                              ;07
  12+ E0AF 95 E8                                 DW Chameleon                               ;08
  13+ E0B1 C1 E9                                 DW CobraMk3                                ;09
  14+ E0B3 4D EB                                 DW Cobra_Mk_1                              ;10
  15+ E0B5 17 EC                                 DW Cobra_Mk_3_P                            ;11
  16+ E0B7 A3 ED                                 DW Constrictor                             ;12
  17+ E0B9 A9 EE                                 DW Coriolis                                ;13
  18+ E0BB C9 EF                                 DW Cougar                                  ;14
  19+ E0BD CF F0                                 DW Dodo                                    ;15
  20+ E0BF              ShipVertexTable:
  21+ E0BF 57 E1        ShipVertexTable1:        DW AdderVertices
  22+ E0C1 8B E2                                 DW AnacondaVertices
  23+ E0C3 91 E3                                 DW Asp_Mk_2Vertices
  24+ E0C5 BB E4                                 DW BoaVertices
  25+ E0C7
  26+ E0C7 B1 E5                                 DW CargoType5Vertices
  27+ E0C9 5D E6                                 DW BoulderVertices
  28+ E0CB 03 E7                                 DW AsteroidVertices
  29+ E0CD
  30+ E0CD DD E7                                 DW BushmasterVertices
  31+ E0CF AD E8                                 DW ChameleonVertices
  32+ E0D1 D9 E9                                 DW CobraMk3Vertices
  33+ E0D3 65 EB                                 DW Cobra_Mk_1Vertices
  34+ E0D5 2F EC                                 DW Cobra_Mk_3_PVertices
  35+ E0D7 BB ED                                 DW ConstrictorVertices
  36+ E0D9 C1 EE                                 DW CoriolisVertices
  37+ E0DB E1 EF                                 DW CougarVertices
  38+ E0DD E7 F0                                 DW DodoVertices
  39+ E0DF              ShipEdgeTable:
  40+ E0DF C3 E1        ShipEdgeTable1:          DW AdderEdges
  41+ E0E1 E5 E2                                 DW AnacondaEdges
  42+ E0E3 03 E4                                 DW Asp_Mk_2Edges
  43+ E0E5 09 E5                                 DW BoaEdges
  44+ E0E7
  45+ E0E7 ED E5                                 DW CargoType5Edges
  46+ E0E9 87 E6                                 DW BoulderEdges
  47+ E0EB 39 E7                                 DW AsteroidEdges
  48+ E0ED
  49+ E0ED 25 E8                                 DW BushmasterEdges
  50+ E0EF 19 E9                                 DW ChameleonEdges
  51+ E0F1 81 EA                                 DW CobraMk3Edges
  52+ E0F3 A7 EB                                 DW Cobra_Mk_1Edges
  53+ E0F5 D7 EC                                 DW Cobra_Mk_3_PEdges
  54+ E0F7 21 EE                                 DW ConstrictorEdges
  55+ E0F9 21 EF                                 DW CoriolisEdges
  56+ E0FB 53 F0                                 DW CougarEdges
  57+ E0FD 77 F1                                 DW DodoEdges
  58+ E0FF              ShipNormalTable:
  59+ E0FF 37 E2        ShipNormalTable1:        DW AdderNormals
  60+ E101 49 E3                                 DW AnacondaNormals
  61+ E103 73 E4                                 DW Asp_Mk_2Normals
  62+ E105 69 E5                                 DW BoaNormals
  63+ E107
  64+ E107 29 E6                                 DW CargoType5Normals
  65+ E109 C3 E6                                 DW BoulderNormals
  66+ E10B 8D E7                                 DW AsteroidNormals
  67+ E10D
  68+ E10D 71 E8                                 DW BushmasterNormals
  69+ E10F 8D E9                                 DW ChameleonNormals
  70+ E111 19 EB                                 DW CobraMk3Normals
  71+ E113 EF EB                                 DW Cobra_Mk_1Normals
  72+ E115 6F ED                                 DW Cobra_Mk_3_PNormals
  73+ E117 81 EE                                 DW ConstrictorNormals
  74+ E119 91 EF                                 DW CoriolisNormals
  75+ E11B B7 F0                                 DW CougarNormals
  76+ E11D FF F1                                 DW DodoNormals
  77+ E11F              ShipModelSizeTable:
  78+ E11F 34 01        ShipModelSizeTable1:     DW AdderLen
  79+ E121 06 01                                 DW AnacondaLen
  80+ E123 2A 01                                 DW Asp_Mk_2Len
  81+ E125 F6 00                                 DW BoaLen
  82+ E127
  83+ E127 AC 00                                 DW CargoType5Len
  84+ E129 A6 00                                 DW BoulderLen
  85+ E12B DA 00                                 DW AsteroidLen
  86+ E12D
  87+ E12D D0 00                                 DW BushmasterLen
  88+ E12F 2C 01                                 DW ChameleonLen
  89+ E131 8C 01                                 DW CobraMk3Len
  90+ E133 CA 00                                 DW Cobra_Mk_1Len
  91+ E135 8C 01                                 DW Cobra_Mk_3_PLen
  92+ E137 06 01                                 DW ConstrictorLen
  93+ E139 20 01                                 DW CoriolisLen
  94+ E13B 06 01                                 DW CougarLen
  95+ E13D 60 01                                 DW DodoLen
  96+ E13F
  97+ E13F                                      include "Data/ships/Adder.asm"
# file opened: ./Data/ships/Adder.asm
   1++E13F 00 09 C4     Adder:	                DB $00, $09, $C4
   2++E142 C3 E1                                DW AdderEdges
   3++E144 74                                   DB AdderEdgesSize
   4++E145 00 16                                DB $00, $16
   5++E147 6C                                   DB AdderVertSize
   6++E148 1D                                   DB AdderEdgesCnt
   7++E149 00 28                                DB $00, $28
   8++E14B 3C                                   DB AdderNormalsSize
   9++E14C 17 48 18                             DB $17, $48, $18
  10++E14F 37 E2                                DW AdderNormals
  11++E151 02 21                                DB $02, $21
  12++E153 57 E1                                DW AdderVertices
  13++E155 00 00                                DB 0,0                      ; Type and Tactics
  14++E157 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC
  14++E15B 01 BC
  15++E15D 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23
  15++E161 01 23
  16++E163 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45
  16++E167 23 45
  17++E169 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66
  17++E16D 45 66
  18++E16F 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E
  18++E173 56 7E
  19++E175 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE
  19++E179 78 AE
  20++E17B 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA
  20++E17F 89 AA
  21++E181 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC
  21++E185 9A BC
  22++E187 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D
  22++E18B 78 9D
  23++E18D 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D
  23++E191 46 7D
  24++E193 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD
  24++E197 09 BD
  25++E199 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D
  25++E19D 02 4D
  26++E19F 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE
  26++E1A3 1A CE
  27++E1A5 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E
  27++E1A9 13 5E
  28++E1AB 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00
  28++E1AF 00 00
  29++E1B1 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00
  29++E1B5 00 00
  30++E1B7 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00
  30++E1BB 00 00
  31++E1BD 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00
  31++E1C1 00 00
  32++E1C3              AdderVertSize:          equ $ - AdderVertices
  33++E1C3 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04
  34++E1C7 07 23 04 08                          DB $07, $23, $04, $08
  35++E1CB 1F 45 08 0C                          DB $1F, $45, $08, $0C
  36++E1CF 1F 56 0C 10                          DB $1F, $56, $0C, $10
  37++E1D3 1F 7E 10 14                          DB $1F, $7E, $10, $14
  38++E1D7 1F 8A 14 18                          DB $1F, $8A, $14, $18
  39++E1DB 1F 9A 18 1C                          DB $1F, $9A, $18, $1C
  40++E1DF 07 BC 1C 00                          DB $07, $BC, $1C, $00
  41++E1E3 1F 46 0C 24                          DB $1F, $46, $0C, $24
  42++E1E7 1F 7D 24 20                          DB $1F, $7D, $24, $20
  43++E1EB 1F 89 20 18                          DB $1F, $89, $20, $18
  44++E1EF 1F 0B 00 28                          DB $1F, $0B, $00, $28
  45++E1F3 1F 9B 1C 28                          DB $1F, $9B, $1C, $28
  46++E1F7 1F 02 04 2C                          DB $1F, $02, $04, $2C
  47++E1FB 1F 24 08 2C                          DB $1F, $24, $08, $2C
  48++E1FF 1F 1C 00 30                          DB $1F, $1C, $00, $30
  49++E203 1F AC 1C 30                          DB $1F, $AC, $1C, $30
  50++E207 1F 13 04 34                          DB $1F, $13, $04, $34
  51++E20B 1F 35 08 34                          DB $1F, $35, $08, $34
  52++E20F 1F 0D 28 2C                          DB $1F, $0D, $28, $2C
  53++E213 1F 1E 30 34                          DB $1F, $1E, $30, $34
  54++E217 1F 9D 20 28                          DB $1F, $9D, $20, $28
  55++E21B 1F 4D 24 2C                          DB $1F, $4D, $24, $2C
  56++E21F 1F AE 14 30                          DB $1F, $AE, $14, $30
  57++E223 1F 5E 10 34                          DB $1F, $5E, $10, $34
  58++E227 05 00 38 3C                          DB $05, $00, $38, $3C
  59++E22B 03 00 3C 40                          DB $03, $00, $3C, $40
  60++E22F 04 00 40 44                          DB $04, $00, $40, $44
  61++E233 03 00 44 38                          DB $03, $00, $44, $38
  62++E237              AdderEdgesSize:         equ $ - AdderEdges
  63++E237              AdderEdgesCnt:          equ AdderEdgesSize/4
  64++E237 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A
  65++E23B 5F 00 27 0A                          DB $5F, $00, $27, $0A
  66++E23F 1F 45 32 0D                          DB $1F, $45, $32, $0D
  67++E243 5F 45 32 0D                          DB $5F, $45, $32, $0D
  68++E247 1F 1E 34 00                          DB $1F, $1E, $34, $00
  69++E24B 5F 1E 34 00                          DB $5F, $1E, $34, $00
  70++E24F 3F 00 00 A0                          DB $3F, $00, $00, $A0
  71++E253 3F 00 00 A0                          DB $3F, $00, $00, $A0
  72++E257 3F 00 00 A0                          DB $3F, $00, $00, $A0
  73++E25B 9F 1E 34 00                          DB $9F, $1E, $34, $00
  74++E25F DF 1E 34 00                          DB $DF, $1E, $34, $00
  75++E263 9F 45 32 0D                          DB $9F, $45, $32, $0D
  76++E267 DF 45 32 0D                          DB $DF, $45, $32, $0D
  77++E26B 1F 00 1C 00                          DB $1F, $00, $1C, $00
  78++E26F 5F 00 1C 00                          DB $5F, $00, $1C, $00
  79++E273
  80++E273              AdderNormalsSize:       equ $ - AdderNormals
  81++E273              AdderLen:                equ $ - Adder
  82++E273
# file closed: ./Data/ships/Adder.asm
  98+ E273                                      include "Data/ships/Anaconda.asm"
# file opened: ./Data/ships/Anaconda.asm
   1++E273 07 27 10     Anaconda:	            DB $07, $27, $10
   2++E276 E5 E2                                DW AnacondaEdges
   3++E278 64                                   DB AnacondaEdgesSize
   4++E279 30 2E                                DB $30, $2E
   5++E27B 5A                                   DB AnacondaVertSize
   6++E27C 19                                   DB AnacondaEdgesCnt
   7++E27D 00 00                                DB $00, $00
   8++E27F 30                                   DB AnacondaNormalsSize
   9++E280 24 FC 0E                             DB $24, $FC, $0E
  10++E283 49 E3                                DW AnacondaNormals
  11++E285 01 3F                                DB $01, $3F
  12++E287 8B E2                                DW AnacondaVertices
  13++E289 00 00                                DB 0,0                      ; Type and Tactics
  14++E28B 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55
  14++E28F 01 55
  15++E291 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22
  15++E295 01 22
  16++E297 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33
  16++E29B 02 33
  17++E29D 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44
  17++E2A1 03 44
  18++E2A3 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55
  18++E2A7 04 55
  19++E2A9 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66
  19++E2AD 15 66
  20++E2AF 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77
  20++E2B3 12 77
  21++E2B5 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88
  21++E2B9 23 88
  22++E2BB 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99
  22++E2BF 34 99
  23++E2C1 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA
  23++E2C5 45 AA
  24++E2C7 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF
  24++E2CB FF FF
  25++E2CD 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88
  25++E2D1 27 88
  26++E2D3 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF
  26++E2D7 FF FF
  27++E2D9 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA
  27++E2DD 49 AA
  28++E2DF 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF
  28++E2E3 FF FF
  29++E2E5              AnacondaVertSize:       equ $ - AnacondaVertices
  30++E2E5 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04
  31++E2E9 1E 02 04 08                          DB $1E, $02, $04, $08
  32++E2ED 1E 03 08 0C                          DB $1E, $03, $08, $0C
  33++E2F1 1E 04 0C 10                          DB $1E, $04, $0C, $10
  34++E2F5 1E 05 00 10                          DB $1E, $05, $00, $10
  35++E2F9 1D 15 00 14                          DB $1D, $15, $00, $14
  36++E2FD 1D 12 04 18                          DB $1D, $12, $04, $18
  37++E301 1D 23 08 1C                          DB $1D, $23, $08, $1C
  38++E305 1D 34 0C 20                          DB $1D, $34, $0C, $20
  39++E309 1D 45 10 24                          DB $1D, $45, $10, $24
  40++E30D 1E 16 14 28                          DB $1E, $16, $14, $28
  41++E311 1E 17 18 28                          DB $1E, $17, $18, $28
  42++E315 1E 27 18 2C                          DB $1E, $27, $18, $2C
  43++E319 1E 28 1C 2C                          DB $1E, $28, $1C, $2C
  44++E31D 1F 38 1C 30                          DB $1F, $38, $1C, $30
  45++E321 1F 39 20 30                          DB $1F, $39, $20, $30
  46++E325 1E 49 20 34                          DB $1E, $49, $20, $34
  47++E329 1E 4A 24 34                          DB $1E, $4A, $24, $34
  48++E32D 1E 5A 24 38                          DB $1E, $5A, $24, $38
  49++E331 1E 56 14 38                          DB $1E, $56, $14, $38
  50++E335 1E 6B 28 38                          DB $1E, $6B, $28, $38
  51++E339 1F 7B 28 30                          DB $1F, $7B, $28, $30
  52++E33D 1F 78 2C 30                          DB $1F, $78, $2C, $30
  53++E341 1F 9A 30 34                          DB $1F, $9A, $30, $34
  54++E345 1F AB 30 38                          DB $1F, $AB, $30, $38
  55++E349              AnacondaEdgesSize:      equ $ - AnacondaEdges
  56++E349              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  57++E349 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31
  58++E34D BE 33 12 57                          DB $BE, $33, $12, $57
  59++E351 FE 4D 39 13                          DB $FE, $4D, $39, $13
  60++E355 5F 00 5A 10                          DB $5F, $00, $5A, $10
  61++E359 7E 4D 39 13                          DB $7E, $4D, $39, $13
  62++E35D 3E 33 12 57                          DB $3E, $33, $12, $57
  63++E361 3E 00 6F 14                          DB $3E, $00, $6F, $14
  64++E365 9F 61 48 18                          DB $9F, $61, $48, $18
  65++E369 DF 6C 44 22                          DB $DF, $6C, $44, $22
  66++E36D 5F 6C 44 22                          DB $5F, $6C, $44, $22
  67++E371 1F 61 48 18                          DB $1F, $61, $48, $18
  68++E375 1F 00 5E 12                          DB $1F, $00, $5E, $12
  69++E379              AnacondaNormalsSize:    equ $ - AnacondaNormals
  70++E379              AnacondaLen:            equ $ - Anaconda
  71++E379
# file closed: ./Data/ships/Anaconda.asm
  99+ E379                                      include "Data/ships/Asp_Mk_2.asm"
# file opened: ./Data/ships/Asp_Mk_2.asm
   1++E379 00 0E 10     Asp_Mk_2:	           DB $00, $0E, $10
   2++E37C 03 E4                                DW Asp_Mk_2Edges
   3++E37E 70                                   DB Asp_Mk_2EdgesSize
   4++E37F 20 1A                                DB $20, $1A
   5++E381 72                                   DB Asp_Mk_2VertSize
   6++E382 1C                                   DB Asp_Mk_2EdgesCnt
   7++E383 00 C8                                DB $00, $C8
   8++E385 30                                   DB Asp_Mk_2NormalsSize
   9++E386 28 96 28                             DB $28, $96, $28
  10++E389 73 E4                                DW Asp_Mk_2Normals
  11++E38B 01 29                                DB $01, $29
  12++E38D 91 E3                                DW Asp_Mk_2Vertices
  13++E38F 00 00                                DB 0,0                      ; Type and Tactics
  14++E391 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22
  14++E395 01 22
  15++E397 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB
  15++E39B 12 BB
  16++E39D 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB
  16++E3A1 16 BB
  17++E3A3 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79
  17++E3A7 16 79
  18++E3A9 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77
  18++E3AD 01 77
  19++E3AF 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB
  19++E3B3 25 BB
  20++E3B5 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A
  20++E3B9 25 8A
  21++E3BB 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88
  21++E3BF 02 88
  22++E3C1 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79
  22++E3C5 04 79
  23++E3C7 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A
  23++E3CB 04 8A
  24++E3CD 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69
  24++E3D1 34 69
  25++E3D3 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A
  25++E3D7 34 5A
  26++E3D9 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B
  26++E3DD 35 6B
  27++E3DF 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB
  27++E3E3 BB BB
  28++E3E5 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB
  28++E3E9 BB BB
  29++E3EB 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB
  29++E3EF BB BB
  30++E3F1 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB
  30++E3F5 BB BB
  31++E3F7 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04
  31++E3FB 04 04
  32++E3FD 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04
  32++E401 04 04
  33++E403              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  34++E403 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04
  35++E407 16 01 00 10                          DB $16, $01, $00, $10
  36++E40B 16 02 00 1C                          DB $16, $02, $00, $1C
  37++E40F 1F 1B 04 08                          DB $1F, $1B, $04, $08
  38++E413 1F 16 08 0C                          DB $1F, $16, $08, $0C
  39++E417 10 79 0C 20                          DB $10, $79, $0C, $20
  40++E41B 1F 04 20 24                          DB $1F, $04, $20, $24
  41++E41F 10 8A 18 24                          DB $10, $8A, $18, $24
  42++E423 1F 25 14 18                          DB $1F, $25, $14, $18
  43++E427 1F 2B 04 14                          DB $1F, $2B, $04, $14
  44++E42B 1F 17 0C 10                          DB $1F, $17, $0C, $10
  45++E42F 1F 07 10 20                          DB $1F, $07, $10, $20
  46++E433 1F 28 18 1C                          DB $1F, $28, $18, $1C
  47++E437 1F 08 1C 24                          DB $1F, $08, $1C, $24
  48++E43B 1F 6B 08 30                          DB $1F, $6B, $08, $30
  49++E43F 1F 5B 14 30                          DB $1F, $5B, $14, $30
  50++E443 16 36 28 30                          DB $16, $36, $28, $30
  51++E447 16 35 2C 30                          DB $16, $35, $2C, $30
  52++E44B 16 34 28 2C                          DB $16, $34, $28, $2C
  53++E44F 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  54++E453 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  55++E457 1F 69 0C 28                          DB $1F, $69, $0C, $28
  56++E45B 1F 49 20 28                          DB $1F, $49, $20, $28
  57++E45F 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  58++E463 09 BB 3C 38                          DB $09, $BB, $3C, $38
  59++E467 08 BB 38 40                          DB $08, $BB, $38, $40
  60++E46B 08 BB 40 34                          DB $08, $BB, $40, $34
  61++E46F 0A 04 48 44                          DB $0A, $04, $48, $44
  62++E473              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  63++E473              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  64++E473 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05
  65++E477 7F 08 26 07                          DB $7F, $08, $26, $07
  66++E47B FF 08 26 07                          DB $FF, $08, $26, $07
  67++E47F 36 00 18 01                          DB $36, $00, $18, $01
  68++E483 1F 00 2B 13                          DB $1F, $00, $2B, $13
  69++E487 BF 06 1C 02                          DB $BF, $06, $1C, $02
  70++E48B 3F 06 1C 02                          DB $3F, $06, $1C, $02
  71++E48F 5F 3B 40 1F                          DB $5F, $3B, $40, $1F
  72++E493 DF 3B 40 1F                          DB $DF, $3B, $40, $1F
  73++E497 1F 50 2E 32                          DB $1F, $50, $2E, $32
  74++E49B 9F 50 2E 32                          DB $9F, $50, $2E, $32
  75++E49F 3F 00 00 5A                          DB $3F, $00, $00, $5A
  76++E4A3              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  77++E4A3              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  78++E4A3
# file closed: ./Data/ships/Asp_Mk_2.asm
 100+ E4A3                                      include "Data/ships/Boa.asm"
# file opened: ./Data/ships/Boa.asm
   1++E4A3 05 13 24     Boa:	                DB $05, $13, $24
   2++E4A6 09 E5                                DW BoaEdges
   3++E4A8 60                                   DB BoaEdgesSize
   4++E4A9 00 26                                DB $00, $26
   5++E4AB 4E                                   DB BoaVertSize
   6++E4AC 18                                   DB BoaEdgesCnt
   7++E4AD 00 00                                DB $00, $00
   8++E4AF 30                                   DB BoaNormalsSize
   9++E4B0 28 FA 18                             DB $28, $FA, $18
  10++E4B3 69 E5                                DW BoaNormals
  11++E4B5 00 1C                                DB $00, $1C
  12++E4B7 BB E4                                DW BoaVertices
  13++E4B9 00 00                                DB 0,0                      ; Type and Tactics
  14++E4BB 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF
  14++E4BF FF FF
  15++E4C1 00 28 57 38                          DB $00, $28, $57, $38, $02, $33
  15++E4C5 02 33
  16++E4C7 26 19 63 78                          DB $26, $19, $63, $78, $01, $44
  16++E4CB 01 44
  17++E4CD 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55
  17++E4D1 12 55
  18++E4D3 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69
  18++E4D7 23 69
  19++E4D9 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B
  19++E4DD 03 6B
  20++E4DF 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B
  20++E4E3 04 8B
  21++E4E5 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A
  21++E4E9 14 8A
  22++E4EB 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A
  22++E4EF 15 7A
  23++E4F1 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79
  23++E4F5 25 79
  24++E4F7 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA
  24++E4FB 02 AA
  25++E4FD 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA
  25++E501 01 AA
  26++E503 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC
  26++E507 12 CC
  27++E509              BoaVertSize:            equ $ - BoaVertices
  28++E509 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  29++E50D 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  30++E511 1F 79 00 24                          DB $1F, $79, $00, $24
  31++E515 1D 69 00 10                          DB $1D, $69, $00, $10
  32++E519 1D 8B 00 18                          DB $1D, $8B, $00, $18
  33++E51D 1D 7A 00 20                          DB $1D, $7A, $00, $20
  34++E521 1F 36 10 14                          DB $1F, $36, $10, $14
  35++E525 1F 0B 14 18                          DB $1F, $0B, $14, $18
  36++E529 1F 48 18 1C                          DB $1F, $48, $18, $1C
  37++E52D 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  38++E531 1F 57 20 24                          DB $1F, $57, $20, $24
  39++E535 1F 29 10 24                          DB $1F, $29, $10, $24
  40++E539 18 23 04 10                          DB $18, $23, $04, $10
  41++E53D 18 03 04 14                          DB $18, $03, $04, $14
  42++E541 18 25 0C 24                          DB $18, $25, $0C, $24
  43++E545 18 15 0C 20                          DB $18, $15, $0C, $20
  44++E549 18 04 08 18                          DB $18, $04, $08, $18
  45++E54D 18 14 08 1C                          DB $18, $14, $08, $1C
  46++E551 16 02 04 28                          DB $16, $02, $04, $28
  47++E555 16 01 08 2C                          DB $16, $01, $08, $2C
  48++E559 16 12 0C 30                          DB $16, $12, $0C, $30
  49++E55D 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  50++E561 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  51++E565 0E 2C 30 28                          DB $0E, $2C, $30, $28
  52++E569              BoaEdgesSize:           equ $ - BoaEdges
  53++E569              BoaEdgesCnt:            equ BoaEdgesSize/4
  54++E569 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  55++E56D 7F 00 2D 59                          DB $7F, $00, $2D, $59
  56++E571 BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  57++E575 1F 00 28 00                          DB $1F, $00, $28, $00
  58++E579 7F 3E 20 14                          DB $7F, $3E, $20, $14
  59++E57D FF 3E 20 14                          DB $FF, $3E, $20, $14
  60++E581 1F 00 17 06                          DB $1F, $00, $17, $06
  61++E585 DF 17 0F 09                          DB $DF, $17, $0F, $09
  62++E589 5F 17 0F 09                          DB $5F, $17, $0F, $09
  63++E58D 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  64++E591 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  65++E595 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  66++E599              BoaNormalsSize:         equ $ - BoaNormals
  67++E599              BoaLen:                 equ $ - Boa
  68++E599
# file closed: ./Data/ships/Boa.asm
 101+ E599
 102+ E599                                      include "Data/ships/CargoType5.asm"
# file opened: ./Data/ships/CargoType5.asm
   1++E599              ;	\ Transporter hull data header info 37 vertices  6*37  = &DE
   2++E599              ; Corrected pointers
   3++E599              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   4++E599              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   5++E599              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   6++E599              ;;;				 Example of cargo
   7++E599              ;;;
   8++E599              ;;;		Points (nodes, vetices)		6 bytes per vertex
   9++E599              ;;;     Byte 0 = X magnitide with origin at middle of ship
  10++E599              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  11++E599              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  12++E599              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  13++E599              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  14++E599              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  15++E599              ;;;		Edges
  16++E599              ;;;		Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  17++E599              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  18++E599              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  19++E599              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  20++E599              ;;;	  	Normals (Faces)
  21++E599              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
  22++E599              ;;;		Byte 1 = X Lo
  23++E599              ;;;		Byte 2 = Y Lo
  24++E599              ;;;		Byte 3 = Z Lo
  25++E599
  26++E599 00 90 01     CargoType5              DB $00, $90, $01
  27++E59C ED E5                                DW CargoType5Edges
  28++E59E 3C                                   DB CargoType5EdgesSize
  29++E59F 00 12                                DB $00,$12
  30++E5A1 3C                                   DB CargoType5VertSize
  31++E5A2 0F                                   DB CargoType5EdgesCnt
  32++E5A3 00 00                                DB $00,$00
  33++E5A5 1C                                   DB CargoType5NormalsSize
  34++E5A6 0C 11 0F                             DB $0C,$11,$0F
  35++E5A9 29 E6                                DW CargoType5Normals
  36++E5AB 02 00                                DB $02,$00
  37++E5AD B1 E5                                DW CargoType5Vertices
  38++E5AF 03 00                                DB ShipTypeJunk,0                      ; Type and Tactics
  39++E5B1              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  40++E5B1 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	; 60 bytes in total for data
  40++E5B5 10 55
  41++E5B7 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22
  41++E5BB 10 22
  42++E5BD 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33
  42++E5C1 20 33
  43++E5C3 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44
  43++E5C7 30 44
  44++E5C9 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55   ; end of left pentagon
  44++E5CD 40 55
  45++E5CF 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66   ; start of right pentagon
  45++E5D3 51 66
  46++E5D5 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66
  46++E5D9 21 66
  47++E5DB 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66
  47++E5DF 32 66
  48++E5E1 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66
  48++E5E5 43 66
  49++E5E7 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66
  49++E5EB 54 66
  50++E5ED              CargoType5VertSize      equ $  - CargoType5Vertices
  51++E5ED 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04,$1F,$20,$04,$08 	; 8 x 7 = 60 bytes
  51++E5F1 1F 20 04 08
  52++E5F5 1F 30 08 0C                          DB $1F,$30,$08,$0C,$1F,$40,$0C,$10
  52++E5F9 1F 40 0C 10
  53++E5FD 1F 50 00 10                          DB $1F,$50,$00,$10,$1F,$51,$00,$14
  53++E601 1F 51 00 14
  54++E605 1F 21 04 18                          DB $1F,$21,$04,$18,$1F,$32,$08,$1C
  54++E609 1F 32 08 1C
  55++E60D 1F 43 0C 20                          DB $1F,$43,$0C,$20,$1F,$54,$10,$24
  55++E611 1F 54 10 24
  56++E615 1F 61 14 18                          DB $1F,$61,$14,$18,$1F,$62,$18,$1C
  56++E619 1F 62 18 1C
  57++E61D 1F 63 1C 20                          DB $1F,$63,$1C,$20,$1F,$64,$20,$24
  57++E621 1F 64 20 24
  58++E625 1F 65 24 14                          DB $1F,$65,$24,$14
  59++E629              CargoType5EdgesSize     equ $  - CargoType5Edges
  60++E629              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  61++E629 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00
  62++E62D 1F 00 29 1E                          DB $1F,$00,$29,$1E,$5F,$00,$12,$30
  62++E631 5F 00 12 30
  63++E635 5F 00 33 00                          DB $5F,$00,$33,$00,$7F,$00,$12,$30
  63++E639 7F 00 12 30
  64++E63D 3F 00 29 1E                          DB $3F,$00,$29,$1E,$9F,$60,$00,$00   ; end Cargo cannister
  64++E641 9F 60 00 00
  65++E645              CargoType5NormalsSize   equ $  - CargoType5Normals
  66++E645              CargoType5Len           equ $  - CargoType5
# file closed: ./Data/ships/CargoType5.asm
 103+ E645                                      include "Data/ships/Boulder.asm"
# file opened: ./Data/ships/Boulder.asm
   1++E645 00 03 84     Boulder:	            DB $00, $03, $84
   2++E648 87 E6                                DW BoulderEdges
   3++E64A 3C                                   DB BoulderEdgesSize
   4++E64B 00 0E                                DB $00, $0E
   5++E64D 2A                                   DB BoulderVertSize
   6++E64E 0F                                   DB BoulderEdgesCnt
   7++E64F 00 01                                DB $00, $01
   8++E651 28                                   DB BoulderNormalsSize
   9++E652 14 14 1E                             DB $14, $14, $1E
  10++E655 C3 E6                                DW BoulderNormals
  11++E657 02 00                                DB $02, $00
  12++E659 5D E6                                DW BoulderVertices
  13++E65B 03 00                                DB ShipTypeJunk,0                      ; Type and Tactics  its only junk for spawing logic
  14++E65D 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  14++E661 01 59
  15++E663 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  15++E667 12 56
  16++E669 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  16++E66D 23 67
  17++E66F 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  17++E673 34 78
  18++E675 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  18++E679 04 89
  19++E67B 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  19++E67F FF FF
  20++E681 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  20++E685 FF FF
  21++E687              BoulderVertSize:        equ $ - BoulderVertices
  22++E687 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  23++E68B 1F 26 04 08                          DB $1F, $26, $04, $08
  24++E68F 1F 37 08 0C                          DB $1F, $37, $08, $0C
  25++E693 1F 48 0C 10                          DB $1F, $48, $0C, $10
  26++E697 1F 09 10 00                          DB $1F, $09, $10, $00
  27++E69B 1F 01 00 14                          DB $1F, $01, $00, $14
  28++E69F 1F 12 04 14                          DB $1F, $12, $04, $14
  29++E6A3 1F 23 08 14                          DB $1F, $23, $08, $14
  30++E6A7 1F 34 0C 14                          DB $1F, $34, $0C, $14
  31++E6AB 1F 04 10 14                          DB $1F, $04, $10, $14
  32++E6AF 1F 59 00 18                          DB $1F, $59, $00, $18
  33++E6B3 1F 56 04 18                          DB $1F, $56, $04, $18
  34++E6B7 1F 67 08 18                          DB $1F, $67, $08, $18
  35++E6BB 1F 78 0C 18                          DB $1F, $78, $0C, $18
  36++E6BF 1F 89 10 18                          DB $1F, $89, $10, $18
  37++E6C3              BoulderEdgesSize:       equ $ - BoulderEdges
  38++E6C3              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  39++E6C3 DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  40++E6C7 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  41++E6CB 5F 20 2F 18                          DB $5F, $20, $2F, $18
  42++E6CF FF 03 27 07                          DB $FF, $03, $27, $07
  43++E6D3 FF 05 04 01                          DB $FF, $05, $04, $01
  44++E6D7 1F 31 54 08                          DB $1F, $31, $54, $08
  45++E6DB 3F 70 15 15                          DB $3F, $70, $15, $15
  46++E6DF 7F 4C 23 52                          DB $7F, $4C, $23, $52
  47++E6E3 3F 16 38 89                          DB $3F, $16, $38, $89
  48++E6E7 3F 28 6E 26                          DB $3F, $28, $6E, $26
  49++E6EB              BoulderNormalsSize:     equ $ - BoulderNormals
  50++E6EB              BoulderLen:             equ $ - Boulder
  51++E6EB
# file closed: ./Data/ships/Boulder.asm
 104+ E6EB                                      include "Data/ships/Asteroid.asm"
# file opened: ./Data/ships/Asteroid.asm
   1++E6EB 00 19 00     Asteroid:	            DB $00, $19, $00
   2++E6EE 39 E7                                DW AsteroidEdges
   3++E6F0 54                                   DB AsteroidEdgesSize
   4++E6F1 00 22                                DB $00, $22
   5++E6F3 36                                   DB AsteroidVertSize
   6++E6F4 15                                   DB AsteroidEdgesCnt
   7++E6F5 00 05                                DB $00, $05
   8++E6F7 38                                   DB AsteroidNormalsSize
   9++E6F8 32 3C 1E                             DB $32, $3C, $1E
  10++E6FB 8D E7                                DW AsteroidNormals
  11++E6FD 01 00                                DB $01, $00
  12++E6FF 03 E7                                DW AsteroidVertices
  13++E701 03 00                                DB ShipTypeJunk,0                      ; Type and Tactics
  14++E703 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF
  14++E707 FF FF
  15++E709 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF
  15++E70D FF FF
  16++E70F 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  16++E713 FF FF
  17++E715 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF
  17++E719 FF FF
  18++E71B 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC
  18++E71F 65 DC
  19++E721 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF
  19++E725 FF FF
  20++E727 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32
  20++E72B 10 32
  21++E72D 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF
  21++E731 FF FF
  22++E733 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA
  22++E737 98 BA
  23++E739              AsteroidVertSize:       equ $ - AsteroidVertices
  24++E739 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04
  25++E73D 1F D6 00 10                          DB $1F, $D6, $00, $10
  26++E741 1F C5 0C 10                          DB $1F, $C5, $0C, $10
  27++E745 1F B4 08 0C                          DB $1F, $B4, $08, $0C
  28++E749 1F A3 04 08                          DB $1F, $A3, $04, $08
  29++E74D 1F 32 04 18                          DB $1F, $32, $04, $18
  30++E751 1F 31 08 18                          DB $1F, $31, $08, $18
  31++E755 1F 41 08 14                          DB $1F, $41, $08, $14
  32++E759 1F 10 14 18                          DB $1F, $10, $14, $18
  33++E75D 1F 60 00 14                          DB $1F, $60, $00, $14
  34++E761 1F 54 0C 14                          DB $1F, $54, $0C, $14
  35++E765 1F 20 00 18                          DB $1F, $20, $00, $18
  36++E769 1F 65 10 14                          DB $1F, $65, $10, $14
  37++E76D 1F A8 04 20                          DB $1F, $A8, $04, $20
  38++E771 1F 87 04 1C                          DB $1F, $87, $04, $1C
  39++E775 1F D7 00 1C                          DB $1F, $D7, $00, $1C
  40++E779 1F DC 10 1C                          DB $1F, $DC, $10, $1C
  41++E77D 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C
  42++E781 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  43++E785 1F BA 08 20                          DB $1F, $BA, $08, $20
  44++E789 1F 98 1C 20                          DB $1F, $98, $1C, $20
  45++E78D
  46++E78D              AsteroidEdgesSize:      equ $ - AsteroidEdges
  47++E78D              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  48++E78D 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51
  49++E791 5F 09 42 51                          DB $5F, $09, $42, $51
  50++E795 9F 48 40 1F                          DB $9F, $48, $40, $1F
  51++E799 DF 40 49 2F                          DB $DF, $40, $49, $2F
  52++E79D 5F 2D 4F 41                          DB $5F, $2D, $4F, $41
  53++E7A1 1F 87 0F 23                          DB $1F, $87, $0F, $23
  54++E7A5 1F 26 4C 46                          DB $1F, $26, $4C, $46
  55++E7A9 BF 42 3B 27                          DB $BF, $42, $3B, $27
  56++E7AD FF 43 0F 50                          DB $FF, $43, $0F, $50
  57++E7B1 7F 42 0E 4B                          DB $7F, $42, $0E, $4B
  58++E7B5 FF 46 50 28                          DB $FF, $46, $50, $28
  59++E7B9 7F 3A 66 33                          DB $7F, $3A, $66, $33
  60++E7BD 3F 51 09 43                          DB $3F, $51, $09, $43
  61++E7C1 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F
  62++E7C5              AsteroidNormalsSize:    equ $ - AsteroidNormals
  63++E7C5              AsteroidLen:            equ $ - Asteroid
  64++E7C5
# file closed: ./Data/ships/Asteroid.asm
 105+ E7C5
 106+ E7C5                                      include "Data/ships/Bushmaster.asm"
# file opened: ./Data/ships/Bushmaster.asm
   1++E7C5 00 10 9A     Bushmaster:	            DB $00, $10, $9A
   2++E7C8 25 E8                                DW BushmasterEdges
   3++E7CA 4C                                   DB BushmasterEdgesSize
   4++E7CB 00 1E                                DB $00, $1E
   5++E7CD 48                                   DB BushmasterVertSize
   6++E7CE 13                                   DB BushmasterEdgesCnt
   7++E7CF 00 96                                DB $00, $96
   8++E7D1 24                                   DB BushmasterNormalsSize
   9++E7D2 14 4A 23                             DB $14, $4A, $23
  10++E7D5 71 E8                                DW BushmasterNormals
  11++E7D7 02 21                                DB $02, $21
  12++E7D9 DD E7                                DW BushmasterVertices
  13++E7DB 00 00                                DB 0,0                      ; Type and Tactics
  14++E7DD 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01
  14++E7E1 23 01
  15++E7E3 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13
  15++E7E7 57 13
  16++E7E9 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02
  16++E7ED 46 02
  17++E7EF 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01
  17++E7F3 45 01
  18++E7F5 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  18++E7F9 FF FF
  19++E7FB 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45
  19++E7FF 88 45
  20++E801 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57
  20++E805 88 57
  21++E807 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46
  21++E80B 88 46
  22++E80D 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88
  22++E811 88 88
  23++E813 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88
  23++E817 88 88
  24++E819 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88
  24++E81D 88 88
  25++E81F 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88
  25++E823 88 88
  26++E825              BushmasterVertSize:     equ $ - BushmasterVertices
  27++E825 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04
  28++E829 1F 02 00 08                          DB $1F, $02, $00, $08
  29++E82D 1F 01 00 0C                          DB $1F, $01, $00, $0C
  30++E831 1F 23 00 10                          DB $1F, $23, $00, $10
  31++E835 1F 45 0C 14                          DB $1F, $45, $0C, $14
  32++E839 1F 04 08 0C                          DB $1F, $04, $08, $0C
  33++E83D 1F 15 04 0C                          DB $1F, $15, $04, $0C
  34++E841 1F 46 08 1C                          DB $1F, $46, $08, $1C
  35++E845 1F 57 04 18                          DB $1F, $57, $04, $18
  36++E849 1F 26 08 10                          DB $1F, $26, $08, $10
  37++E84D 1F 37 04 10                          DB $1F, $37, $04, $10
  38++E851 1F 48 14 1C                          DB $1F, $48, $14, $1C
  39++E855 1F 58 14 18                          DB $1F, $58, $14, $18
  40++E859 1F 68 10 1C                          DB $1F, $68, $10, $1C
  41++E85D 1F 78 10 18                          DB $1F, $78, $10, $18
  42++E861 0A 88 20 24                          DB $0A, $88, $20, $24
  43++E865 0A 88 24 28                          DB $0A, $88, $24, $28
  44++E869 0A 88 28 2C                          DB $0A, $88, $28, $2C
  45++E86D 0A 88 2C 20                          DB $0A, $88, $2C, $20
  46++E871              BushmasterEdgesSize:    equ $ - BushmasterEdges
  47++E871              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4
  48++E871 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D
  49++E875 1F 17 58 1D                          DB $1F, $17, $58, $1D
  50++E879 DF 0E 5D 12                          DB $DF, $0E, $5D, $12
  51++E87D 5F 0E 5D 12                          DB $5F, $0E, $5D, $12
  52++E881 BF 1F 59 0D                          DB $BF, $1F, $59, $0D
  53++E885 3F 1F 59 0D                          DB $3F, $1F, $59, $0D
  54++E889 FF 2A 55 07                          DB $FF, $2A, $55, $07
  55++E88D 7F 2A 55 07                          DB $7F, $2A, $55, $07
  56++E891 3F 00 00 60                          DB $3F, $00, $00, $60
  57++E895              BushmasterNormalsSize:  equ $ - BushmasterNormals
  58++E895              BushmasterLen:          equ $ - Bushmaster
  59++E895
# file closed: ./Data/ships/Bushmaster.asm
 107+ E895                                      include "Data/ships/Chameleon.asm"
# file opened: ./Data/ships/Chameleon.asm
   1++E895 03 0F A0     Chameleon:	            DB $03, $0F, $A0
   2++E898 19 E9                                DW ChameleonEdges
   3++E89A 74                                   DB ChameleonEdgesSize
   4++E89B 00 1A                                DB $00, $1A
   5++E89D 6C                                   DB ChameleonVertSize
   6++E89E 1D                                   DB ChameleonEdgesCnt
   7++E89F 00 C8                                DB $00, $C8
   8++E8A1 34                                   DB ChameleonNormalsSize
   9++E8A2 0A 64 1D                             DB $0A, $64, $1D
  10++E8A5 8D E9                                DW ChameleonNormals
  11++E8A7 01 23                                DB $01, $23
  12++E8A9 AD E8                                DW ChameleonVertices
  13++E8AB 00 00                                DB 0,0                      ; Type and Tactics
  14++E8AD 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  14++E8B1 25 01
  15++E8B3 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  15++E8B7 34 01
  16++E8B9 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  16++E8BD 8B 25
  17++E8BF 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  17++E8C3 68 22
  18++E8C5 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  18++E8C9 69 33
  19++E8CB 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  19++E8CF 9A 34
  20++E8D1 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  20++E8D5 7A 44
  21++E8D7 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  21++E8DB 7B 55
  22++E8DD 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  22++E8E1 36 02
  23++E8E3 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  23++E8E7 57 14
  24++E8E9 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  24++E8ED BC 88
  25++E8EF 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  25++E8F3 9C 68
  26++E8F5 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  26++E8F9 AC 99
  27++E8FB 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  27++E8FF BC 7A
  28++E901 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  28++E905 CC CC
  29++E907 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  29++E90B CC CC
  30++E90D 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  30++E911 CC CC
  31++E913 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  31++E917 CC CC
  32++E919              ChameleonVertSize:      equ $ - ChameleonVertices
  33++E919 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  34++E91D 1F 02 00 20                          DB $1F, $02, $00, $20
  35++E921 1F 15 00 24                          DB $1F, $15, $00, $24
  36++E925 1F 03 04 20                          DB $1F, $03, $04, $20
  37++E929 1F 14 04 24                          DB $1F, $14, $04, $24
  38++E92D 1F 34 04 14                          DB $1F, $34, $04, $14
  39++E931 1F 25 00 08                          DB $1F, $25, $00, $08
  40++E935 1F 26 0C 20                          DB $1F, $26, $0C, $20
  41++E939 1F 36 10 20                          DB $1F, $36, $10, $20
  42++E93D 1F 75 1C 24                          DB $1F, $75, $1C, $24
  43++E941 1F 74 18 24                          DB $1F, $74, $18, $24
  44++E945 1F 39 10 14                          DB $1F, $39, $10, $14
  45++E949 1F 4A 14 18                          DB $1F, $4A, $14, $18
  46++E94D 1F 28 08 0C                          DB $1F, $28, $08, $0C
  47++E951 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  48++E955 1F 8B 08 28                          DB $1F, $8B, $08, $28
  49++E959 1F 9A 14 30                          DB $1F, $9A, $14, $30
  50++E95D 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  51++E961 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  52++E965 1F 69 10 2C                          DB $1F, $69, $10, $2C
  53++E969 1F 7A 18 34                          DB $1F, $7A, $18, $34
  54++E96D 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  55++E971 1F BC 28 34                          DB $1F, $BC, $28, $34
  56++E975 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  57++E979 1F AC 30 34                          DB $1F, $AC, $30, $34
  58++E97D 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  59++E981 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  60++E985 0A CC 40 44                          DB $0A, $CC, $40, $44
  61++E989 0A CC 44 38                          DB $0A, $CC, $44, $38
  62++E98D              ChameleonEdgesSize:     equ $ - ChameleonEdges
  63++E98D              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  64++E98D 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  65++E991 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  66++E995 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  67++E999 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  68++E99D 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  69++E9A1 DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  70++E9A5 1F 00 60 00                          DB $1F, $00, $60, $00
  71++E9A9 5F 00 60 00                          DB $5F, $00, $60, $00
  72++E9AD BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  73++E9B1 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  74++E9B5 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  75++E9B9 FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  76++E9BD 3F 00 00 60                          DB $3F, $00, $00, $60
  77++E9C1              ChameleonNormalsSize:   equ $ - ChameleonNormals
  78++E9C1              ChameleonLen:           equ $ - Chameleon
  79++E9C1
# file closed: ./Data/ships/Chameleon.asm
 108+ E9C1                                      include "Data/ships/CobraMk3.asm"
# file opened: ./Data/ships/CobraMk3.asm
   1++E9C1              ; Corrected pointers
   2++E9C1              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++E9C1              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++E9C1              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++E9C1 03 41 23     CobraMk3    		    DB $03, $41, $23
   6++E9C4 81 EA                                DW CobraMk3Edges
   7++E9C6 98                                   DB CobraMkEdgesSize
   8++E9C7 54 2A                                DB $54,$2A
   9++E9C9 A8                                   DB CobraMkVertSize
  10++E9CA 26                                   DB CobraMkEdgesCnt
  11++E9CB 00 00                                DB $00,$00
  12++E9CD 34                                   DB CobraMk3NormalsSize
  13++E9CE 32 96 1C                             DB $32,$96,$1C
  14++E9D1 19 EB                                DW CobraMk3Normals
  15++E9D3 01 13                                DB $01,$13
  16++E9D5 D9 E9                                DW CobraMk3Vertices
  17++E9D7 00 00                                DB 0,0                      ; Type and Tactics
  18++E9D9                                  ; missiles = 3
  19++E9D9 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  19++E9DD FF FF
  20++E9DF 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  20++E9E3 FF FF
  21++E9E5 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  21++E9E9 FF FF
  22++E9EB 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  22++E9EF 73 AA
  23++E9F1 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  23++E9F5 84 CC
  24++E9F7 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  24++E9FB FF FF
  25++E9FD 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  25++EA01 FF FF
  26++EA03 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  26++EA07 98 CC
  27++EA09 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  27++EA0D 97 AA
  28++EA0F 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  28++EA13 65 99
  29++EA15 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  29++EA19 A9 BB
  30++EA1B 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  30++EA1F B9 CC
  31++EA21 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  31++EA25 99 99
  32++EA27 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  32++EA2B 99 99
  33++EA2D 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  33++EA31 99 99
  34++EA33 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  34++EA37 99 99
  35++EA39 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  35++EA3D 99 99
  36++EA3F 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  36++EA43 99 99
  37++EA45 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  37++EA49 99 99
  38++EA4B 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  38++EA4F 99 99
  39++EA51 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  39++EA55 B0 BB
  40++EA57 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  40++EA5B B0 BB
  41++EA5D 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  41++EA61 99 99
  42++EA63 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  42++EA67 99 99
  43++EA69 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  43++EA6D 99 99
  44++EA6F 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  44++EA73 99 99
  45++EA75 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  45++EA79 99 99
  46++EA7B 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  46++EA7F 99 99
  47++EA81              CobraMkVertSize         equ $  - CobraMk3Vertices
  48++EA81 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
  48++EA85 1F C4 00 10
  49++EA89 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
  49++EA8D 1F A7 0C 20
  50++EA91 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
  50++EA95 1F 98 18 1C
  51++EA99 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
  51++EA9D 1F 95 14 24
  52++EAA1 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
  52++EAA5 1F 51 08 14
  53++EAA9 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
  53++EAAD 1F 73 0C 14
  54++EAB1 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
  54++EAB5 1F 10 04 08
  55++EAB9 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
  55++EABD 1F A9 20 28
  56++EAC1 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
  56++EAC5 1F C9 1C 2C
  57++EAC9 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
  57++EACD 1F CB 00 2C
  58++EAD1 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
  58++EAD5 1D 42 00 18
  59++EAD9 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
  59++EADD 14 99 30 34
  60++EAE1 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
  60++EAE5 14 99 38 3C
  61++EAE9 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
  61++EAED 13 99 3C 40
  62++EAF1 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
  62++EAF5 13 99 34 48
  63++EAF9 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
  63++EAFD 1E 65 08 24
  64++EB01 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
  64++EB05 06 99 5C 60
  65++EB09 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
  65++EB0D 06 99 64 68
  66++EB11 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
  66++EB15 08 99 64 6C
  67++EB19              CobraMkEdgesSize        equ $  - CobraMk3Edges
  68++EB19              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
  69++EB19              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  70++EB19 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
  71++EB1D 9F 12 37 10                          DB $9F,$12,$37,$10
  72++EB21 1F 12 37 10                          DB $1F,$12,$37,$10
  73++EB25 9F 10 34 0E                          DB $9F,$10,$34,$0E
  74++EB29 1F 10 34 0E                          DB $1F,$10,$34,$0E
  75++EB2D 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
  76++EB31 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
  77++EB35 9F 3D 66 00                          DB $9F,$3D,$66,$00
  78++EB39 1F 3D 66 00                          DB $1F,$3D,$66,$00
  79++EB3D 3F 00 00 50                          DB $3F,$00,$00,$50
  80++EB41 DF 07 2A 09                          DB $DF,$07,$2A,$09
  81++EB45 5F 00 1E 06                          DB $5F,$00,$1E,$06
  82++EB49 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
  83++EB4D              CobraMk3NormalsSize     equ $  - CobraMk3Normals
  84++EB4D              CobraMk3Len             equ $  - CobraMk3
  85++EB4D
# file closed: ./Data/ships/CobraMk3.asm
 109+ EB4D                                      include "Data/ships/Cobra_Mk_1.asm"
# file opened: ./Data/ships/Cobra_Mk_1.asm
   1++EB4D 03 26 49     Cobra_Mk_1:	            DB $03, $26, $49
   2++EB50 A7 EB                                DW Cobra_Mk_1Edges
   3++EB52 48                                   DB Cobra_Mk_1EdgesSize
   4++EB53 28 1A                                DB $28, $1A
   5++EB55 42                                   DB Cobra_Mk_1VertSize
   6++EB56 12                                   DB Cobra_Mk_1EdgesCnt
   7++EB57 00 4B                                DB $00, $4B
   8++EB59 28                                   DB Cobra_Mk_1NormalsSize
   9++EB5A 13 51 1A                             DB $13, $51, $1A
  10++EB5D EF EB                                DW Cobra_Mk_1Normals
  11++EB5F 02 22                                DB $02, $22
  12++EB61 65 EB                                DW Cobra_Mk_1Vertices
  13++EB63 00 00                                DB 0,0                      ; Type and Tactics
  14++EB65 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  14++EB69 01 23
  15++EB6B 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  15++EB6F 01 45
  16++EB71 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  16++EB75 23 88
  17++EB77 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  17++EB7B 45 99
  18++EB7D 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  18++EB81 26 78
  19++EB83 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  19++EB87 46 79
  20++EB89 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  20++EB8D 13 78
  21++EB8F 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  21++EB93 15 79
  22++EB95 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  22++EB99 02 46
  23++EB9B 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  23++EB9F 01 11
  24++EBA1 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  24++EBA5 01 11
  25++EBA7              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  26++EBA7 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  27++EBAB 1F 23 00 08                          DB $1F, $23, $00, $08
  28++EBAF 1F 38 08 18                          DB $1F, $38, $08, $18
  29++EBB3 1F 17 18 1C                          DB $1F, $17, $18, $1C
  30++EBB7 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  31++EBBB 1F 45 0C 04                          DB $1F, $45, $0C, $04
  32++EBBF 1F 28 08 10                          DB $1F, $28, $08, $10
  33++EBC3 1F 67 10 14                          DB $1F, $67, $10, $14
  34++EBC7 1F 49 14 0C                          DB $1F, $49, $14, $0C
  35++EBCB 14 02 00 20                          DB $14, $02, $00, $20
  36++EBCF 14 04 20 04                          DB $14, $04, $20, $04
  37++EBD3 10 26 10 20                          DB $10, $26, $10, $20
  38++EBD7 10 46 20 14                          DB $10, $46, $20, $14
  39++EBDB 1F 78 10 18                          DB $1F, $78, $10, $18
  40++EBDF 1F 79 14 1C                          DB $1F, $79, $14, $1C
  41++EBE3 14 13 00 18                          DB $14, $13, $00, $18
  42++EBE7 14 15 04 1C                          DB $14, $15, $04, $1C
  43++EBEB 02 01 28 24                          DB $02, $01, $28, $24
  44++EBEF              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  45++EBEF              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  46++EBEF 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  47++EBF3 5F 00 1B 03                          DB $5F, $00, $1B, $03
  48++EBF7 9F 08 2E 08                          DB $9F, $08, $2E, $08
  49++EBFB DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  50++EBFF 1F 08 2E 08                          DB $1F, $08, $2E, $08
  51++EC03 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  52++EC07 1F 00 31 00                          DB $1F, $00, $31, $00
  53++EC0B 3F 00 00 9A                          DB $3F, $00, $00, $9A
  54++EC0F BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  55++EC13 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  56++EC17              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  57++EC17              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  58++EC17
# file closed: ./Data/ships/Cobra_Mk_1.asm
 110+ EC17                                      include "Data/ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/ships/Cobra_Mk_3_P.asm
   1++EC17 01 23 41     Cobra_Mk_3_P:	        DB $01, $23, $41
   2++EC1A D7 EC                                DW Cobra_Mk_3_PEdges
   3++EC1C 98                                   DB Cobra_Mk_3_PEdgesSize
   4++EC1D 54 2A                                DB $54, $2A
   5++EC1F A8                                   DB Cobra_Mk_3_PVertSize
   6++EC20 26                                   DB Cobra_Mk_3_PEdgesCnt
   7++EC21 00 AF                                DB $00, $AF
   8++EC23 34                                   DB Cobra_Mk_3_PNormalsSize
   9++EC24 32 96 1C                             DB $32, $96, $1C
  10++EC27 6F ED                                DW Cobra_Mk_3_PNormals
  11++EC29 01 12                                DB $01, $12
  12++EC2B 2F EC                                DW Cobra_Mk_3_PVertices
  13++EC2D 00 00                                DB 0,0                      ; Type and Tactics
  14++EC2F 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  14++EC33 FF FF
  15++EC35 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  15++EC39 FF FF
  16++EC3B 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  16++EC3F FF FF
  17++EC41 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  17++EC45 73 AA
  18++EC47 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  18++EC4B 84 CC
  19++EC4D 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  19++EC51 FF FF
  20++EC53 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  20++EC57 FF FF
  21++EC59 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  21++EC5D 98 CC
  22++EC5F 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  22++EC63 97 AA
  23++EC65 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  23++EC69 65 99
  24++EC6B 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  24++EC6F A9 BB
  25++EC71 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  25++EC75 B9 CC
  26++EC77 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  26++EC7B 99 99
  27++EC7D 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  27++EC81 99 99
  28++EC83 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  28++EC87 99 99
  29++EC89 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  29++EC8D 99 99
  30++EC8F 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  30++EC93 99 99
  31++EC95 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  31++EC99 99 99
  32++EC9B 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  32++EC9F 99 99
  33++ECA1 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  33++ECA5 99 99
  34++ECA7 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  34++ECAB B0 BB
  35++ECAD 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  35++ECB1 B0 BB
  36++ECB3 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  36++ECB7 99 99
  37++ECB9 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  37++ECBD 99 99
  38++ECBF 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  38++ECC3 99 99
  39++ECC5 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  39++ECC9 99 99
  40++ECCB 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  40++ECCF 99 99
  41++ECD1 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  41++ECD5 99 99
  42++ECD7              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  43++ECD7 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  44++ECDB 1F C4 00 10                          DB $1F, $C4, $00, $10
  45++ECDF 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  46++ECE3 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  47++ECE7 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  48++ECEB 1F 98 18 1C                          DB $1F, $98, $18, $1C
  49++ECEF 1F 96 18 24                          DB $1F, $96, $18, $24
  50++ECF3 1F 95 14 24                          DB $1F, $95, $14, $24
  51++ECF7 1F 97 14 20                          DB $1F, $97, $14, $20
  52++ECFB 1F 51 08 14                          DB $1F, $51, $08, $14
  53++ECFF 1F 62 08 18                          DB $1F, $62, $08, $18
  54++ED03 1F 73 0C 14                          DB $1F, $73, $0C, $14
  55++ED07 1F 84 10 18                          DB $1F, $84, $10, $18
  56++ED0B 1F 10 04 08                          DB $1F, $10, $04, $08
  57++ED0F 1F 20 00 08                          DB $1F, $20, $00, $08
  58++ED13 1F A9 20 28                          DB $1F, $A9, $20, $28
  59++ED17 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  60++ED1B 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  61++ED1F 1F BA 04 28                          DB $1F, $BA, $04, $28
  62++ED23 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  63++ED27 1D 31 04 14                          DB $1D, $31, $04, $14
  64++ED2B 1D 42 00 18                          DB $1D, $42, $00, $18
  65++ED2F 06 B0 50 54                          DB $06, $B0, $50, $54
  66++ED33 14 99 30 34                          DB $14, $99, $30, $34
  67++ED37 14 99 48 4C                          DB $14, $99, $48, $4C
  68++ED3B 14 99 38 3C                          DB $14, $99, $38, $3C
  69++ED3F 14 99 40 44                          DB $14, $99, $40, $44
  70++ED43 13 99 3C 40                          DB $13, $99, $3C, $40
  71++ED47 11 99 38 44                          DB $11, $99, $38, $44
  72++ED4B 13 99 34 48                          DB $13, $99, $34, $48
  73++ED4F 13 99 30 4C                          DB $13, $99, $30, $4C
  74++ED53 1E 65 08 24                          DB $1E, $65, $08, $24
  75++ED57 06 99 58 60                          DB $06, $99, $58, $60
  76++ED5B 06 99 5C 60                          DB $06, $99, $5C, $60
  77++ED5F 08 99 58 5C                          DB $08, $99, $58, $5C
  78++ED63 06 99 64 68                          DB $06, $99, $64, $68
  79++ED67 06 99 68 6C                          DB $06, $99, $68, $6C
  80++ED6B 08 99 64 6C                          DB $08, $99, $64, $6C
  81++ED6F              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  82++ED6F              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  83++ED6F 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  84++ED73 9F 12 37 10                          DB $9F, $12, $37, $10
  85++ED77 1F 12 37 10                          DB $1F, $12, $37, $10
  86++ED7B 9F 10 34 0E                          DB $9F, $10, $34, $0E
  87++ED7F 1F 10 34 0E                          DB $1F, $10, $34, $0E
  88++ED83 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
  89++ED87 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
  90++ED8B 9F 3D 66 00                          DB $9F, $3D, $66, $00
  91++ED8F 1F 3D 66 00                          DB $1F, $3D, $66, $00
  92++ED93 3F 00 00 50                          DB $3F, $00, $00, $50
  93++ED97 DF 07 2A 09                          DB $DF, $07, $2A, $09
  94++ED9B 5F 00 1E 06                          DB $5F, $00, $1E, $06
  95++ED9F 5F 07 2A 09                          DB $5F, $07, $2A, $09
  96++EDA3              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
  97++EDA3              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
  98++EDA3
# file closed: ./Data/ships/Cobra_Mk_3_P.asm
 111+ EDA3                                      include "Data/ships/Constrictor.asm"
# file opened: ./Data/ships/Constrictor.asm
   1++EDA3              ;                      0    1    2    3   4   5   6   7   8   9   10  11  12  13  14  15   16                    17                  18  19     20                     21
   2++EDA3              ;					   Scp  Missile   Edg Edg Lin Gun Exp Vtx Edg Bounty  Face             Edg                   Face                           Vertices
   3++EDA3              ;                      Deb  Lock      Lo  Hi  x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd  hi                    Hi                  Q   Laser  Lo                     hi
   4++EDA3 F3 49 26     Constrictor:    	    DB $F3, $49, $26
   5++EDA6 21 EE                                DW ConstrictorEdges
   6++EDA8 60                                   DB ConstrictorEdgesSize
   7++EDA9 00 2E                                DB $00,$2E
   8++EDAB 66                                   DB ConstrictorVertSize
   9++EDAC 18                                   DB ConstrictorEdgesCnt
  10++EDAD 18 00                                DB $18,$00
  11++EDAF 28                                   DB ConstrictorNormalsSize
  12++EDB0 2D C8 37                             DB $2D,$C8,$37
  13++EDB3 81 EE                                DW ConstrictorNormals
  14++EDB5 02 2F                                DB $02,$2F
  15++EDB7 BB ED                                DW ConstrictorVertices
  16++EDB9 00 00                                DB 0,0                      ; Type and Tactics
  17++EDBB                                  ; missiles = 3
  18++EDBB 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  18++EDBF 02 99
  19++EDC1 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  19++EDC5 01 99
  20++EDC7 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  20++EDCB 14 99
  21++EDCD 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  21++EDD1 45 89
  22++EDD3 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  22++EDD7 56 88
  23++EDD9 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  23++EDDD 67 88
  24++EDDF 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  24++EDE3 37 89
  25++EDE5 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  25++EDE9 23 99
  26++EDEB 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  26++EDEF FF FF
  27++EDF1 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  27++EDF5 FF FF
  28++EDF7 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  28++EDFB 99 99
  29++EDFD 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  29++EE01 99 99
  30++EE03 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  30++EE07 99 99
  31++EE09 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  31++EE0D 99 99
  32++EE0F 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  32++EE13 99 99
  33++EE15 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  33++EE19 99 99
  34++EE1B 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  34++EE1F 9F 01
  35++EE21              ConstrictorVertSize     equ $  - ConstrictorVertices
  36++EE21 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
  36++EE25 1F 19 04 08
  37++EE29 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
  37++EE2D 1F 02 00 20
  38++EE31 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
  38++EE35 1F 23 1C 20
  39++EE39 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
  39++EE3D 1F 49 08 0C
  40++EE41 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
  40++EE45 1F 37 18 20
  41++EE49 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
  41++EE4D 1F 56 10 24
  42++EE51 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
  42++EE55 1F 58 0C 10
  43++EE59 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
  43++EE5D 1F 78 14 18
  44++EE61 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
  44++EE65 1F 06 20 24
  45++EE69 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
  45++EE6D 05 99 30 38
  46++EE71 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
  46++EE75 0A 99 2C 3C
  47++EE79 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
  47++EE7D 12 99 2C 34
  48++EE81              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  49++EE81              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  50++EE81 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  50++EE85 9F 18 4B 14
  51++EE89 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  51++EE8D 1F 2C 4B 00
  52++EE91 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  52++EE95 9F 2C 4B 00
  53++EE99 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  53++EE9D 1F 2C 4B 00
  54++EEA1 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  54++EEA5 5F 00 1B 00
  55++EEA9              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  56++EEA9              ConstrictorLen          equ $  - Constrictor
  57++EEA9
# file closed: ./Data/ships/Constrictor.asm
 112+ EEA9                                      include "Data/ships/Coriolis.asm"
# file opened: ./Data/ships/Coriolis.asm
   1++EEA9 00 64 00     Coriolis:	            DB $00, $64, $00
   2++EEAC 21 EF                                DW CoriolisEdges
   3++EEAE 70                                   DB CoriolisEdgesSize
   4++EEAF 00 36                                DB $00, $36
   5++EEB1 60                                   DB CoriolisVertSize
   6++EEB2 1C                                   DB CoriolisEdgesCnt
   7++EEB3 00 00                                DB $00, $00
   8++EEB5 38                                   DB CoriolisNormalsSize
   9++EEB6 78 F0 00                             DB $78, $F0, $00
  10++EEB9 91 EF                                DW CoriolisNormals
  11++EEBB 00 06                                DB $00, $06
  12++EEBD C1 EE                                DW CoriolisVertices
  13++EEBF 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  14++EEC1 A0 00 A0 1F  CoriolisVertices:	    DB $A0, $00, $A0, $1F, $10, $62
  14++EEC5 10 62
  15++EEC7 00 A0 A0 1F                          DB $00, $A0, $A0, $1F, $20, $83
  15++EECB 20 83
  16++EECD A0 00 A0 9F                          DB $A0, $00, $A0, $9F, $30, $74
  16++EED1 30 74
  17++EED3 00 A0 A0 5F                          DB $00, $A0, $A0, $5F, $10, $54
  17++EED7 10 54
  18++EED9 A0 A0 00 5F                          DB $A0, $A0, $00, $5F, $51, $A6
  18++EEDD 51 A6
  19++EEDF A0 A0 00 1F                          DB $A0, $A0, $00, $1F, $62, $B8
  19++EEE3 62 B8
  20++EEE5 A0 A0 00 9F                          DB $A0, $A0, $00, $9F, $73, $C8
  20++EEE9 73 C8
  21++EEEB A0 A0 00 DF                          DB $A0, $A0, $00, $DF, $54, $97
  21++EEEF 54 97
  22++EEF1 A0 00 A0 3F                          DB $A0, $00, $A0, $3F, $A6, $DB
  22++EEF5 A6 DB
  23++EEF7 00 A0 A0 3F                          DB $00, $A0, $A0, $3F, $B8, $DC
  23++EEFB B8 DC
  24++EEFD A0 00 A0 BF                          DB $A0, $00, $A0, $BF, $97, $DC
  24++EF01 97 DC
  25++EF03 00 A0 A0 7F                          DB $00, $A0, $A0, $7F, $95, $DA
  25++EF07 95 DA
  26++EF09 0A 1E A0 5E                          DB $0A, $1E, $A0, $5E, $00, $00
  26++EF0D 00 00
  27++EF0F 0A 1E A0 1E                          DB $0A, $1E, $A0, $1E, $00, $00
  27++EF13 00 00
  28++EF15 0A 1E A0 9E                          DB $0A, $1E, $A0, $9E, $00, $00
  28++EF19 00 00
  29++EF1B 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00
  29++EF1F 00 00
  30++EF21              CoriolisVertSize:       equ $ - CoriolisVertices
  31++EF21 1F 10 00 0C  CoriolisEdges:	        DB $1F, $10, $00, $0C
  32++EF25 1F 20 00 04                          DB $1F, $20, $00, $04
  33++EF29 1F 30 04 08                          DB $1F, $30, $04, $08
  34++EF2D 1F 40 08 0C                          DB $1F, $40, $08, $0C
  35++EF31 1F 51 0C 10                          DB $1F, $51, $0C, $10
  36++EF35 1F 61 00 10                          DB $1F, $61, $00, $10
  37++EF39 1F 62 00 14                          DB $1F, $62, $00, $14
  38++EF3D 1F 82 14 04                          DB $1F, $82, $14, $04
  39++EF41 1F 83 04 18                          DB $1F, $83, $04, $18
  40++EF45 1F 73 08 18                          DB $1F, $73, $08, $18
  41++EF49 1F 74 08 1C                          DB $1F, $74, $08, $1C
  42++EF4D 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  43++EF51 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  44++EF55 1F DB 20 24                          DB $1F, $DB, $20, $24
  45++EF59 1F DC 24 28                          DB $1F, $DC, $24, $28
  46++EF5D 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  47++EF61 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  48++EF65 1F A6 10 20                          DB $1F, $A6, $10, $20
  49++EF69 1F B6 14 20                          DB $1F, $B6, $14, $20
  50++EF6D 1F B8 14 24                          DB $1F, $B8, $14, $24
  51++EF71 1F C8 18 24                          DB $1F, $C8, $18, $24
  52++EF75 1F C7 18 28                          DB $1F, $C7, $18, $28
  53++EF79 1F 97 1C 28                          DB $1F, $97, $1C, $28
  54++EF7D 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
  55++EF81 1E 00 30 34                          DB $1E, $00, $30, $34
  56++EF85 1E 00 34 38                          DB $1E, $00, $34, $38
  57++EF89 1E 00 38 3C                          DB $1E, $00, $38, $3C
  58++EF8D 1E 00 3C 30                          DB $1E, $00, $3C, $30
  59++EF91              CoriolisEdgesSize:      equ $ - CoriolisEdges
  60++EF91              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
  61++EF91 1F 00 00 A0  CoriolisNormals:	    DB $1F, $00, $00, $A0
  62++EF95 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
  63++EF99 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
  64++EF9D 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
  65++EFA1 DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
  66++EFA5 5F 00 A0 00                          DB $5F, $00, $A0, $00
  67++EFA9 1F A0 00 00                          DB $1F, $A0, $00, $00
  68++EFAD 9F A0 00 00                          DB $9F, $A0, $00, $00
  69++EFB1 1F 00 A0 00                          DB $1F, $00, $A0, $00
  70++EFB5 FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
  71++EFB9 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
  72++EFBD 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
  73++EFC1 BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
  74++EFC5 3F 00 00 A0                          DB $3F, $00, $00, $A0
  75++EFC9              CoriolisNormalsSize:    equ $ - CoriolisNormals
  76++EFC9              CoriolisLen:            equ $ - Coriolis
  77++EFC9
# file closed: ./Data/ships/Coriolis.asm
 113+ EFC9                                      include "Data/ships/Cougar.asm"
# file opened: ./Data/ships/Cougar.asm
   1++EFC9 03 13 24     Cougar:	                DB $03, $13, $24
   2++EFCC 53 F0                                DW CougarEdges
   3++EFCE 64                                   DB CougarEdgesSize
   4++EFCF 00 2A                                DB $00, $2A
   5++EFD1 72                                   DB CougarVertSize
   6++EFD2 19                                   DB CougarEdgesCnt
   7++EFD3 00 00                                DB $00, $00
   8++EFD5 18                                   DB CougarNormalsSize
   9++EFD6 22 FC 28                             DB $22, $FC, $28
  10++EFD9 B7 F0                                DW CougarNormals
  11++EFDB 02 34                                DB $02, $34
  12++EFDD E1 EF                                DW CougarVertices
  13++EFDF 00 00                                DB 0,0                      ; Type and Tactics
  14++EFE1 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  14++EFE5 02 44
  15++EFE7 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  15++EFEB 01 22
  16++EFED 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  16++EFF1 01 55
  17++EFF3 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  17++EFF7 04 55
  18++EFF9 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  18++EFFD 12 35
  19++EFFF 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  19++F003 23 44
  20++F005 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  20++F009 34 55
  21++F00B 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  21++F00F 01 11
  22++F011 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  22++F015 01 11
  23++F017 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  23++F01B 34 44
  24++F01D 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  24++F021 34 44
  25++F023 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  25++F027 00 44
  26++F029 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  26++F02D 00 44
  27++F02F 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  27++F033 00 00
  28++F035 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  28++F039 44 44
  29++F03B 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  29++F03F 55 55
  30++F041 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  30++F045 55 55
  31++F047 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  31++F04B 55 55
  32++F04D 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  32++F051 55 55
  33++F053              CougarVertSize:         equ $ - CougarVertices
  34++F053 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  35++F057 1F 01 04 1C                          DB $1F, $01, $04, $1C
  36++F05B 1F 01 1C 20                          DB $1F, $01, $1C, $20
  37++F05F 1F 01 20 08                          DB $1F, $01, $20, $08
  38++F063 1E 05 08 0C                          DB $1E, $05, $08, $0C
  39++F067 1E 45 0C 18                          DB $1E, $45, $0C, $18
  40++F06B 1E 15 08 10                          DB $1E, $15, $08, $10
  41++F06F 1E 35 10 18                          DB $1E, $35, $10, $18
  42++F073 1F 34 18 28                          DB $1F, $34, $18, $28
  43++F077 1F 34 28 24                          DB $1F, $34, $28, $24
  44++F07B 1F 34 24 14                          DB $1F, $34, $24, $14
  45++F07F 1F 24 14 00                          DB $1F, $24, $14, $00
  46++F083 1B 04 00 0C                          DB $1B, $04, $00, $0C
  47++F087 1B 12 04 10                          DB $1B, $12, $04, $10
  48++F08B 1B 23 14 10                          DB $1B, $23, $14, $10
  49++F08F 1A 01 04 08                          DB $1A, $01, $04, $08
  50++F093 1A 34 14 18                          DB $1A, $34, $14, $18
  51++F097 14 00 30 34                          DB $14, $00, $30, $34
  52++F09B 12 00 34 2C                          DB $12, $00, $34, $2C
  53++F09F 12 44 2C 38                          DB $12, $44, $2C, $38
  54++F0A3 14 44 38 30                          DB $14, $44, $38, $30
  55++F0A7 12 55 3C 40                          DB $12, $55, $3C, $40
  56++F0AB 14 55 40 48                          DB $14, $55, $40, $48
  57++F0AF 12 55 48 44                          DB $12, $55, $48, $44
  58++F0B3 14 55 44 3C                          DB $14, $55, $44, $3C
  59++F0B7              CougarEdgesSize:        equ $ - CougarEdges
  60++F0B7              CougarEdgesCnt:         equ CougarEdgesSize/4
  61++F0B7 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  62++F0BB DF 10 2E 04                          DB $DF, $10, $2E, $04
  63++F0BF 5F 00 1B 05                          DB $5F, $00, $1B, $05
  64++F0C3 5F 10 2E 04                          DB $5F, $10, $2E, $04
  65++F0C7 1F 10 2E 04                          DB $1F, $10, $2E, $04
  66++F0CB 3E 00 00 A0                          DB $3E, $00, $00, $A0
  67++F0CF              CougarNormalsSize:      equ $ - CougarNormals
  68++F0CF              CougarLen:              equ $ - Cougar
  69++F0CF
# file closed: ./Data/ships/Cougar.asm
 114+ F0CF                                      include "Data/ships/Dodo.asm"
# file opened: ./Data/ships/Dodo.asm
   1++F0CF 00 7E 90     Dodo:	                DB $00, $7E, $90
   2++F0D2 77 F1                                DW DodoEdges
   3++F0D4 88                                   DB DodoEdgesSize
   4++F0D5 00 36                                DB $00, $36
   5++F0D7 90                                   DB DodoVertSize
   6++F0D8 22                                   DB DodoEdgesCnt
   7++F0D9 00 00                                DB $00, $00
   8++F0DB 30                                   DB DodoNormalsSize
   9++F0DC 7D F0 00                             DB $7D, $F0, $00
  10++F0DF FF F1                                DW DodoNormals
  11++F0E1 00 00                                DB $00, $00
  12++F0E3 E7 F0                                DW DodoVertices
  13++F0E5 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  14++F0E7 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  14++F0EB 01 55
  15++F0ED 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  15++F0F1 01 22
  16++F0F3 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  16++F0F7 02 33
  17++F0F9 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  17++F0FD 03 44
  18++F0FF 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  18++F103 04 55
  19++F105 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  19++F109 15 66
  20++F10B E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  20++F10F 12 77
  21++F111 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  21++F115 23 88
  22++F117 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  22++F11B 34 99
  23++F11D E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  23++F121 45 AA
  24++F123 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  24++F127 16 77
  25++F129 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  25++F12D 27 88
  26++F12F 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  26++F133 38 99
  27++F135 E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  27++F139 49 AA
  28++F13B 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  28++F13F 56 AA
  29++F141 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  29++F145 67 BB
  30++F147 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  30++F14B 78 BB
  31++F14D 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  31++F151 89 BB
  32++F153 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  32++F157 9A BB
  33++F159 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  33++F15D 6A BB
  34++F15F 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  34++F163 00 00
  35++F165 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  35++F169 00 00
  36++F16B 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  36++F16F 00 00
  37++F171 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  37++F175 00 00
  38++F177              DodoVertSize:           equ $ - DodoVertices
  39++F177 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  40++F17B 1F 02 04 08                          DB $1F, $02, $04, $08
  41++F17F 1F 03 08 0C                          DB $1F, $03, $08, $0C
  42++F183 1F 04 0C 10                          DB $1F, $04, $0C, $10
  43++F187 1F 05 10 00                          DB $1F, $05, $10, $00
  44++F18B 1F 16 14 28                          DB $1F, $16, $14, $28
  45++F18F 1F 17 28 18                          DB $1F, $17, $28, $18
  46++F193 1F 27 18 2C                          DB $1F, $27, $18, $2C
  47++F197 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  48++F19B 1F 38 1C 30                          DB $1F, $38, $1C, $30
  49++F19F 1F 39 30 20                          DB $1F, $39, $30, $20
  50++F1A3 1F 49 20 34                          DB $1F, $49, $20, $34
  51++F1A7 1F 4A 34 24                          DB $1F, $4A, $34, $24
  52++F1AB 1F 5A 24 38                          DB $1F, $5A, $24, $38
  53++F1AF 1F 56 38 14                          DB $1F, $56, $38, $14
  54++F1B3 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  55++F1B7 1F 8B 40 44                          DB $1F, $8B, $40, $44
  56++F1BB 1F 9B 44 48                          DB $1F, $9B, $44, $48
  57++F1BF 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  58++F1C3 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  59++F1C7 1F 15 00 14                          DB $1F, $15, $00, $14
  60++F1CB 1F 12 04 18                          DB $1F, $12, $04, $18
  61++F1CF 1F 23 08 1C                          DB $1F, $23, $08, $1C
  62++F1D3 1F 34 0C 20                          DB $1F, $34, $0C, $20
  63++F1D7 1F 45 10 24                          DB $1F, $45, $10, $24
  64++F1DB 1F 67 28 3C                          DB $1F, $67, $28, $3C
  65++F1DF 1F 78 2C 40                          DB $1F, $78, $2C, $40
  66++F1E3 1F 89 30 44                          DB $1F, $89, $30, $44
  67++F1E7 1F 9A 34 48                          DB $1F, $9A, $34, $48
  68++F1EB 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  69++F1EF 1E 00 50 54                          DB $1E, $00, $50, $54
  70++F1F3 14 00 54 5C                          DB $14, $00, $54, $5C
  71++F1F7 17 00 5C 58                          DB $17, $00, $5C, $58
  72++F1FB 14 00 58 50                          DB $14, $00, $58, $50
  73++F1FF              DodoEdgesSize:          equ $ - DodoEdges
  74++F1FF              DodoEdgesCnt:           equ DodoEdgesSize/4
  75++F1FF 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  76++F203 1F 67 8E 58                          DB $1F, $67, $8E, $58
  77++F207 5F A9 37 59                          DB $5F, $A9, $37, $59
  78++F20B 5F 00 B0 58                          DB $5F, $00, $B0, $58
  79++F20F DF A9 37 59                          DB $DF, $A9, $37, $59
  80++F213 9F 67 8E 58                          DB $9F, $67, $8E, $58
  81++F217 3F 00 B0 58                          DB $3F, $00, $B0, $58
  82++F21B 3F A9 37 59                          DB $3F, $A9, $37, $59
  83++F21F 7F 67 8E 58                          DB $7F, $67, $8E, $58
  84++F223 FF 67 8E 58                          DB $FF, $67, $8E, $58
  85++F227 BF A9 37 59                          DB $BF, $A9, $37, $59
  86++F22B 3F 00 00 C4                          DB $3F, $00, $00, $C4
  87++F22F              DodoNormalsSize:        equ $ - DodoNormals
  88++F22F              DodoLen:                equ $ - Dodo
  89++F22F
# file closed: ./Data/ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
1179  F22F              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
1180  F22F                  SLOT    ShipModelsAddr
1181  F22F                  PAGE    BankShipModels2
1182  F22F              	ORG     ShipModelsAddr, BankShipModels2
1183  E000
1184  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
1185  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
1185  E00F 06 00       >                        ld      b,0
1185  E011 4F          >                        ld      c,a                                 ; c= original ship id
1185  E012 CB 3F       >.ShiftLoop:             srl     a
1185  E014 CB 3F       >                        srl     a
1185  E016 CB 3F       >                        srl     a
1185  E018 CB 3F       >                        srl     a                                   ; divide by 16
1185  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1185  E01B 79          >                        ld      a,c
1185  E01C 50          >                        ld      d,b
1185  E01D 1E 10       >                        ld      e,16
1185  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1185  E021 93          >                        sub     e                                   ; a= actual model id now
1185  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1185  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1185  E024 7A          >                        ld      a,d                                 ; a = bank number
1185  E025             >;.. Now b = bank and a = adjusted ship nbr
1185  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
1185  E028 ED 31       >                        add     hl,a
1185  E02A ED 31       >                        add     hl,a
1185  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1185  E02D             >                        ClearCarryFlag
1185  E02D B7          >                        or a
1185  E02E C9          >                        ret
1186  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
1186  E02F 2A 18 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1186  E032 11 1C C3    >                        ld          de,UBnkHullVerticies
1186  E035 06 00       >                        ld          b,0
1186  E037 3A 0C C3    >                        ld			a,(VertexCtX6Addr)
1186  E03A 4F          >                        ld          c,a
1186  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1186  E03C CD 6E 93    >                        call        memcopy_dma
1186  E03F C9          >                        ret
1187  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
1187  E040 2A 07 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1187  E043 11 48 C4    >                        ld          de,UBnkHullEdges
1187  E046 06 00       >                        ld          b,0
1187  E048 3A 09 C3    >                        ld			a,(LineX4Addr)
1187  E04B 4F          >                        ld          c,a
1187  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1187  E04D CD 6E 93    >                        call        memcopy_dma
1187  E050 C9          >                        ret
1188  E051              CopyNormsToUniv2:       McopyNormsToUniverse
1188  E051 2A 14 C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1188  E054 11 F8 C8    >                        ld          de,UBnkHullNormals
1188  E057 06 00       >                        ld          b,0
1188  E059 3A 10 C3    >                        ld          a,(FaceCtX4Addr)
1188  E05C 4F          >                        ld          c,a
1188  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1188  E05E CD 6E 93    >                        call        memcopy_dma
1188  E061 C9          >                        ret
1189  E062              ShipBankTable2:         MShipBankTable
1189  E062 3B 00       >                        DW      BankShipModels1
1189  E064 43 00       >                        DW      BankShipModels2
1189  E066 44 00       >                        DW      BankShipModels3
1189  E068 45 00       >                        DW      BankShipModels4
1190  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
1190  E06A 21 02 C3    >                        ld          hl,UBnkShipModelBank
1190  E06D 36 43       >                        ld          (hl),BankShipModels2
1190  E06F 32 03 C3    >                        ld          (UBnkShipModelNbr),a
1190  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1190  E075 ED 31       >                        add         hl,a
1190  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1190  E079 4E          >                        ld          c,(hl)
1190  E07A 23          >                        inc         hl
1190  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1190  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1190  E07F ED 31       >                        add         hl,a
1190  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1190  E083 7E          >                        ld          a,(hl)
1190  E084 23          >                        inc         hl
1190  E085 66          >                        ld          h,(hl)
1190  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1190  E087 11 04 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1190  E08A 01 18 00    >                        ld          bc,ShipDataLength
1190  E08D ED B0       >                        ldir
1190  E08F CD 2F E0    >                        call        CopyVertsToUniv
1190  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1190  E095 CD 51 E0    >                        call        CopyNormsToUniv
1190  E098 C9          >                        ret
1191  E099              CopyBodyToUniverse2:    MCopyBodyToUniverse     CopyShipToUniverse2
1191  E099 3E 0D       >                        ld          a,13
1191  E09B CD 6A E0    >                        call        CopyShipToUniverse2
1191  E09E C9          >                        ret
1192  E09F
1193  E09F                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E09F 3F E1        ShipModelTable2:         DW Dragon                                  ;16
   2+ E0A1 19 E2                                 DW Escape_Pod                              ;17
   3+ E0A3 71 E2                                 DW Fer_De_Lance                            ;18
   4+ E0A5 8F E3                                 DW Gecko                                   ;19
   5+ E0A7 57 E4                                 DW Ghavial                                 ;20
   6+ E0A9 3F E5                                 DW Iguana                                  ;21
   7+ E0AB 35 E6                                 DW Krait                                   ;22
   8+ E0AD 1F E7                                 DW Logo                                    ;23
   9+ E0AF DB E8                                 DW Mamba                                   ;24
  10+ E0B1 0D EA                                 DW Missile                                 ;25
  11+ E0B3 0F EB                                 DW Monitor                                 ;26
  12+ E0B5 15 EC                                 DW Moray                                   ;27
  13+ E0B7 F1 EC                                 DW Ophidian                                ;28
  14+ E0B9 29 EE                                 DW Plate                                   ;29
  15+ E0BB 67 EE                                 DW Python                                  ;30
  16+ E0BD 5D EF                                 DW Python_P                                ;31
  17+ E0BF 57 E1        ShipVertexTable2:        DW DragonVertices
  18+ E0C1 31 E2                                 DW Escape_PodVertices
  19+ E0C3 89 E2                                 DW Fer_De_LanceVertices
  20+ E0C5 A7 E3                                 DW GeckoVertices
  21+ E0C7 6F E4                                 DW GhavialVertices
  22+ E0C9 57 E5                                 DW IguanaVertices
  23+ E0CB 4D E6                                 DW KraitVertices
  24+ E0CD 37 E7                                 DW LogoVertices
  25+ E0CF F3 E8                                 DW MambaVertices
  26+ E0D1 25 EA                                 DW MissileVertices
  27+ E0D3 27 EB                                 DW MonitorVertices
  28+ E0D5 2D EC                                 DW MorayVertices
  29+ E0D7 09 ED                                 DW OphidianVertices
  30+ E0D9 41 EE                                 DW PlateVertices
  31+ E0DB 7F EE                                 DW PythonVertices
  32+ E0DD 75 EF                                 DW Python_PVertices
  33+ E0DF 8D E1        ShipEdgeTable2:          DW DragonEdges
  34+ E0E1 49 E2                                 DW Escape_PodEdges
  35+ E0E3 FB E2                                 DW Fer_De_LanceEdges
  36+ E0E5 EF E3                                 DW GeckoEdges
  37+ E0E7 B7 E4                                 DW GhavialEdges
  38+ E0E9 B1 E5                                 DW IguanaEdges
  39+ E0EB B3 E6                                 DW KraitEdges
  40+ E0ED 33 E8                                 DW LogoEdges
  41+ E0EF 89 E9                                 DW MambaEdges
  42+ E0F1 8B EA                                 DW MissileEdges
  43+ E0F3 8D EB                                 DW MonitorEdges
  44+ E0F5 81 EC                                 DW MorayEdges
  45+ E0F7 81 ED                                 DW OphidianEdges
  46+ E0F9 53 EE                                 DW PlateEdges
  47+ E0FB C1 EE                                 DW PythonEdges
  48+ E0FD B7 EF                                 DW Python_PEdges
  49+ E0FF E1 E1        ShipNormalTable2:        DW DragonNormals
  50+ E101 61 E2                                 DW Escape_PodNormals
  51+ E103 67 E3                                 DW Fer_De_LanceNormals
  52+ E105 33 E4                                 DW GeckoNormals
  53+ E107 0F E5                                 DW GhavialNormals
  54+ E109 0D E6                                 DW IguanaNormals
  55+ E10B 07 E7                                 DW KraitNormals
  56+ E10D C7 E8                                 DW LogoNormals
  57+ E10F F9 E9                                 DW MambaNormals
  58+ E111 EB EA                                 DW MissileNormals
  59+ E113 E9 EB                                 DW MonitorNormals
  60+ E115 CD EC                                 DW MorayNormals
  61+ E117 F9 ED                                 DW OphidianNormals
  62+ E119 63 EE                                 DW PlateNormals
  63+ E11B 29 EF                                 DW PythonNormals
  64+ E11D 1F F0                                 DW Python_PNormals
  65+ E11F DA 00        ShipModelSizeTable2:     DW DragonLen
  66+ E121 58 00                                 DW Escape_PodLen
  67+ E123 1E 01                                 DW Fer_De_LanceLen
  68+ E125 C8 00                                 DW GeckoLen
  69+ E127 E8 00                                 DW GhavialLen
  70+ E129 F6 00                                 DW IguanaLen
  71+ E12B EA 00                                 DW KraitLen
  72+ E12D BC 01                                 DW LogoLen
  73+ E12F 32 01                                 DW MambaLen
  74+ E131 02 01                                 DW MissileLen
  75+ E133 06 01                                 DW MonitorLen
  76+ E135 DC 00                                 DW MorayLen
  77+ E137 38 01                                 DW OphidianLen
  78+ E139 3E 00                                 DW PlateLen
  79+ E13B F6 00                                 DW PythonLen
  80+ E13D F6 00                                 DW Python_PLen
  81+ E13F
  82+ E13F                                      include "Data/ships/Dragon.asm"
# file opened: ./Data/ships/Dragon.asm
   1++E13F 00 66 50     Dragon:	                DB $00, $66, $50
   2++E142 8D E1                                DW DragonEdges
   3++E144 54                                   DB DragonEdgesSize
   4++E145 00 3C                                DB $00, $3C
   5++E147 36                                   DB DragonVertSize
   6++E148 15                                   DB DragonEdgesCnt
   7++E149 00 00                                DB $00, $00
   8++E14B 38                                   DB DragonNormalsSize
   9++E14C 20 F7 14                             DB $20, $F7, $14
  10++E14F E1 E1                                DW DragonNormals
  11++E151 00 47                                DB $00, $47
  12++E153 57 E1                                DW DragonVertices
  13++E155 00 00                                DB 0,0                      ; Type and Tactics
  14++E157 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  14++E15B 6B 05
  15++E15D D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  15++E161 67 01
  16++E163 D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  16++E167 78 12
  17++E169 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  17++E16D CD 23
  18++E16F 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  18++E173 CD 89
  19++E175 D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  19++E179 9A 34
  20++E17B D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  20++E17F AB 45
  21++E181 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  21++E185 FF FF
  22++E187 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  22++E18B FF FF
  23++E18D              DragonVertSize:         equ $ - DragonVertices
  24++E18D 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  25++E191 1F 12 08 1C                          DB $1F, $12, $08, $1C
  26++E195 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  27++E199 1F 34 14 1C                          DB $1F, $34, $14, $1C
  28++E19D 1F 45 18 1C                          DB $1F, $45, $18, $1C
  29++E1A1 1F 50 00 1C                          DB $1F, $50, $00, $1C
  30++E1A5 1F 67 04 20                          DB $1F, $67, $04, $20
  31++E1A9 1F 78 08 20                          DB $1F, $78, $08, $20
  32++E1AD 1F 89 10 20                          DB $1F, $89, $10, $20
  33++E1B1 1F 9A 14 20                          DB $1F, $9A, $14, $20
  34++E1B5 1F AB 18 20                          DB $1F, $AB, $18, $20
  35++E1B9 1F B6 00 20                          DB $1F, $B6, $00, $20
  36++E1BD 1F 06 00 04                          DB $1F, $06, $00, $04
  37++E1C1 1F 17 04 08                          DB $1F, $17, $04, $08
  38++E1C5 1F 4A 14 18                          DB $1F, $4A, $14, $18
  39++E1C9 1F 5B 00 18                          DB $1F, $5B, $00, $18
  40++E1CD 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  41++E1D1 1F 8C 08 10                          DB $1F, $8C, $08, $10
  42++E1D5 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  43++E1D9 1F 9D 10 14                          DB $1F, $9D, $10, $14
  44++E1DD 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  45++E1E1              DragonEdgesSize:        equ $ - DragonEdges
  46++E1E1              DragonEdgesCnt:         equ DragonEdgesSize/4
  47++E1E1 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  48++E1E5 1F 21 5A 00                          DB $1F, $21, $5A, $00
  49++E1E9 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  50++E1ED BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  51++E1F1 9F 21 5A 00                          DB $9F, $21, $5A, $00
  52++E1F5 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  53++E1F9 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  54++E1FD 5F 21 5A 00                          DB $5F, $21, $5A, $00
  55++E201 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  56++E205 FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  57++E209 DF 21 5A 00                          DB $DF, $21, $5A, $00
  58++E20D DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  59++E211 3F 30 00 52                          DB $3F, $30, $00, $52
  60++E215 BF 30 00 52                          DB $BF, $30, $00, $52
  61++E219              DragonNormalsSize:      equ $ - DragonNormals
  62++E219              DragonLen:              equ $ - Dragon
  63++E219
# file closed: ./Data/ships/Dragon.asm
  83+ E219                                      include "Data/ships/Escape_Pod.asm"
# file opened: ./Data/ships/Escape_Pod.asm
   1++E219 20 01 00     Escape_Pod:             DB $20, $01, $00
   2++E21C 49 E2                                DW Escape_PodEdges
   3++E21E 18                                   DB Escape_PodEdgesSize
   4++E21F 00 16                                DB $00, $16
   5++E221 18                                   DB Escape_PodVertSize
   6++E222 06                                   DB Escape_PodEdgesCnt
   7++E223 00 00                                DB $00, $00
   8++E225 10                                   DB Escape_PodNormalsSize
   9++E226 08 11 08                             DB $08, $11, $08
  10++E229 61 E2                                DW Escape_PodNormals
  11++E22B 04 00                                DB $04, $00
  12++E22D 31 E2                                DW Escape_PodVertices
  13++E22F 00 00                                DB 0,0                      ; Type and Tactics
  14++E231 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  14++E235 12 33
  15++E237 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  15++E23B 02 33
  16++E23D 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  16++E241 01 33
  17++E243 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  17++E247 01 22
  18++E249              Escape_PodVertSize:     equ $ - Escape_PodVertices
  19++E249 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  20++E24D 1F 03 04 08                          DB $1F, $03, $04, $08
  21++E251 1F 01 08 0C                          DB $1F, $01, $08, $0C
  22++E255 1F 12 0C 00                          DB $1F, $12, $0C, $00
  23++E259 1F 13 00 08                          DB $1F, $13, $00, $08
  24++E25D 1F 02 0C 04                          DB $1F, $02, $0C, $04
  25++E261              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  26++E261              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  27++E261 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  28++E265 1F 27 67 1E                          DB $1F, $27, $67, $1E
  29++E269 5F 27 67 1E                          DB $5F, $27, $67, $1E
  30++E26D 9F 70 00 00                          DB $9F, $70, $00, $00
  31++E271              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  32++E271              Escape_PodLen:          equ $ - Escape_Pod
  33++E271
# file closed: ./Data/ships/Escape_Pod.asm
  84+ E271                                      include "Data/ships/Fer_De_Lance.asm"
# file opened: ./Data/ships/Fer_De_Lance.asm
   1++E271 00 06 40     Fer_De_Lance:	        DB $00, $06, $40
   2++E274 FB E2                                DW Fer_De_LanceEdges
   3++E276 6C                                   DB Fer_De_LanceEdgesSize
   4++E277 00 1A                                DB $00, $1A
   5++E279 72                                   DB Fer_De_LanceVertSize
   6++E27A 1B                                   DB Fer_De_LanceEdgesCnt
   7++E27B 00 00                                DB $00, $00
   8++E27D 28                                   DB Fer_De_LanceNormalsSize
   9++E27E 28 A0 1E                             DB $28, $A0, $1E
  10++E281 67 E3                                DW Fer_De_LanceNormals
  11++E283 01 12                                DB $01, $12
  12++E285 89 E2                                DW Fer_De_LanceVertices
  13++E287 00 00                                DB 0,0                      ; Type and Tactics
  14++E289 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  14++E28D 01 59
  15++E28F 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  15++E293 12 99
  16++E295 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  16++E299 23 99
  17++E29B 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  17++E29F 34 99
  18++E2A1 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  18++E2A5 45 99
  19++E2A7 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  19++E2AB 01 26
  20++E2AD 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  20++E2B1 23 67
  21++E2B3 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  21++E2B7 34 78
  22++E2B9 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  22++E2BD 04 58
  23++E2BF 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  23++E2C3 06 78
  24++E2C5 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  24++E2C9 00 00
  25++E2CB 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  25++E2CF 00 00
  26++E2D1 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  26++E2D5 00 00
  27++E2D7 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  27++E2DB 00 00
  28++E2DD 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  28++E2E1 00 00
  29++E2E3 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  29++E2E7 00 00
  30++E2E9 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  30++E2ED 99 99
  31++E2EF 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  31++E2F3 99 99
  32++E2F5 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  32++E2F9 99 99
  33++E2FB              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  34++E2FB 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  35++E2FF 1F 29 04 08                          DB $1F, $29, $04, $08
  36++E303 1F 39 08 0C                          DB $1F, $39, $08, $0C
  37++E307 1F 49 0C 10                          DB $1F, $49, $0C, $10
  38++E30B 1F 59 00 10                          DB $1F, $59, $00, $10
  39++E30F 1C 01 00 14                          DB $1C, $01, $00, $14
  40++E313 1C 26 14 18                          DB $1C, $26, $14, $18
  41++E317 1C 37 18 1C                          DB $1C, $37, $18, $1C
  42++E31B 1C 48 1C 20                          DB $1C, $48, $1C, $20
  43++E31F 1C 05 00 20                          DB $1C, $05, $00, $20
  44++E323 0F 06 14 24                          DB $0F, $06, $14, $24
  45++E327 0B 67 18 24                          DB $0B, $67, $18, $24
  46++E32B 0B 78 1C 24                          DB $0B, $78, $1C, $24
  47++E32F 0F 08 20 24                          DB $0F, $08, $20, $24
  48++E333 0E 12 04 14                          DB $0E, $12, $04, $14
  49++E337 0E 23 08 18                          DB $0E, $23, $08, $18
  50++E33B 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  51++E33F 0E 45 10 20                          DB $0E, $45, $10, $20
  52++E343 08 00 28 2C                          DB $08, $00, $28, $2C
  53++E347 09 00 2C 30                          DB $09, $00, $2C, $30
  54++E34B 0B 00 28 30                          DB $0B, $00, $28, $30
  55++E34F 08 00 34 38                          DB $08, $00, $34, $38
  56++E353 09 00 38 3C                          DB $09, $00, $38, $3C
  57++E357 0B 00 34 3C                          DB $0B, $00, $34, $3C
  58++E35B 0C 99 40 44                          DB $0C, $99, $40, $44
  59++E35F 0C 99 40 48                          DB $0C, $99, $40, $48
  60++E363 08 99 44 48                          DB $08, $99, $44, $48
  61++E367              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  62++E367              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  63++E367 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  64++E36B 9F 44 00 18                          DB $9F, $44, $00, $18
  65++E36F BF 3F 00 25                          DB $BF, $3F, $00, $25
  66++E373 3F 00 00 68                          DB $3F, $00, $00, $68
  67++E377 3F 3F 00 25                          DB $3F, $3F, $00, $25
  68++E37B 1F 44 00 18                          DB $1F, $44, $00, $18
  69++E37F BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  70++E383 3C 00 2D 16                          DB $3C, $00, $2D, $16
  71++E387 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  72++E38B 5F 00 1C 00                          DB $5F, $00, $1C, $00
  73++E38F              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  74++E38F              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  75++E38F
# file closed: ./Data/ships/Fer_De_Lance.asm
  85+ E38F                                      include "Data/ships/Gecko.asm"
# file opened: ./Data/ships/Gecko.asm
   1++E38F 00 26 49     Gecko:	                DB $00, $26, $49
   2++E392 EF E3                                DW GeckoEdges
   3++E394 44                                   DB GeckoEdgesSize
   4++E395 00 1A                                DB $00, $1A
   5++E397 48                                   DB GeckoVertSize
   6++E398 11                                   DB GeckoEdgesCnt
   7++E399 00 37                                DB $00, $37
   8++E39B 24                                   DB GeckoNormalsSize
   9++E39C 12 46 1E                             DB $12, $46, $1E
  10++E39F 33 E4                                DW GeckoNormals
  11++E3A1 03 10                                DB $03, $10
  12++E3A3 A7 E3                                DW GeckoVertices
  13++E3A5 00 00                                DB 0,0                      ; Type and Tactics
  14++E3A7 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  14++E3AB 03 45
  15++E3AD 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  15++E3B1 01 23
  16++E3B3 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  16++E3B7 05 67
  17++E3B9 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  17++E3BD 01 78
  18++E3BF 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  18++E3C3 45 66
  19++E3C5 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  19++E3C9 12 88
  20++E3CB 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  20++E3CF 34 67
  21++E3D1 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  21++E3D5 23 78
  22++E3D7 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  22++E3DB 33 33
  23++E3DD 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  23++E3E1 33 33
  24++E3E3 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  24++E3E7 33 33
  25++E3E9 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  25++E3ED 33 33
  26++E3EF              GeckoVertSize:          equ $ - GeckoVertices
  27++E3EF 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  28++E3F3 1F 12 04 14                          DB $1F, $12, $04, $14
  29++E3F7 1F 18 14 0C                          DB $1F, $18, $14, $0C
  30++E3FB 1F 07 0C 08                          DB $1F, $07, $0C, $08
  31++E3FF 1F 56 08 10                          DB $1F, $56, $08, $10
  32++E403 1F 45 10 00                          DB $1F, $45, $10, $00
  33++E407 1F 28 14 1C                          DB $1F, $28, $14, $1C
  34++E40B 1F 37 1C 18                          DB $1F, $37, $1C, $18
  35++E40F 1F 46 18 10                          DB $1F, $46, $18, $10
  36++E413 1D 05 00 08                          DB $1D, $05, $00, $08
  37++E417 1E 01 04 0C                          DB $1E, $01, $04, $0C
  38++E41B 1D 34 00 18                          DB $1D, $34, $00, $18
  39++E41F 1E 23 04 1C                          DB $1E, $23, $04, $1C
  40++E423 14 67 08 18                          DB $14, $67, $08, $18
  41++E427 14 78 0C 1C                          DB $14, $78, $0C, $1C
  42++E42B 10 33 20 28                          DB $10, $33, $20, $28
  43++E42F 11 33 24 2C                          DB $11, $33, $24, $2C
  44++E433              GeckoEdgesSize:             equ $ - GeckoEdges
  45++E433              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  46++E433 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  47++E437 1F 04 2D 08                          DB $1F, $04, $2D, $08
  48++E43B 5F 19 6C 13                          DB $5F, $19, $6C, $13
  49++E43F 5F 00 54 0C                          DB $5F, $00, $54, $0C
  50++E443 DF 19 6C 13                          DB $DF, $19, $6C, $13
  51++E447 9F 04 2D 08                          DB $9F, $04, $2D, $08
  52++E44B BF 58 10 D6                          DB $BF, $58, $10, $D6
  53++E44F 3F 00 00 BB                          DB $3F, $00, $00, $BB
  54++E453 3F 58 10 D6                          DB $3F, $58, $10, $D6
  55++E457              GeckoNormalsSize:       equ $ - GeckoNormals
  56++E457              GeckoLen:               equ $ - Gecko
  57++E457
# file closed: ./Data/ships/Gecko.asm
  86+ E457                                      include "Data/ships/Ghavial.asm"
# file opened: ./Data/ships/Ghavial.asm
   1++E457 03 26 00     Ghavial:	DB $03, $26, $00
   2++E45A B7 E4        	DW GhavialEdges
   3++E45C 58           	DB GhavialEdgesSize
   4++E45D 00 22        	DB $00, $22
   5++E45F 48           	DB GhavialVertSize
   6++E460 16           	DB GhavialEdgesCnt
   7++E461 00 64        	DB $00, $64
   8++E463 30           	DB GhavialNormalsSize
   9++E464 0A 72 10     	DB $0A, $72, $10
  10++E467 0F E5        	DW GhavialNormals
  11++E469 00 27        	DB $00, $27
  12++E46B 6F E4        	DW GhavialVertices
  13++E46D 00 00                                DB 0,0                      ; Type and Tactics
  14++E46F
  15++E46F 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  15++E473 67 01
  16++E475 1E 00 64 9F  	DB $1E, $00, $64, $9F, $6B, $05
  16++E479 6B 05
  17++E47B 28 1E 1A 3F  	DB $28, $1E, $1A, $3F, $23, $01
  17++E47F 23 01
  18++E481 28 1E 1A BF  	DB $28, $1E, $1A, $BF, $45, $03
  18++E485 45 03
  19++E487 3C 00 14 3F  	DB $3C, $00, $14, $3F, $78, $12
  19++E48B 78 12
  20++E48D 28 00 3C 3F  	DB $28, $00, $3C, $3F, $89, $23
  20++E491 89 23
  21++E493 3C 00 14 BF  	DB $3C, $00, $14, $BF, $AB, $45
  21++E497 AB 45
  22++E499 28 00 3C BF  	DB $28, $00, $3C, $BF, $9A, $34
  22++E49D 9A 34
  23++E49F 00 1E 14 7F  	DB $00, $1E, $14, $7F, $FF, $FF
  23++E4A3 FF FF
  24++E4A5 0A 18 00 09  	DB $0A, $18, $00, $09, $00, $00
  24++E4A9 00 00
  25++E4AB 0A 18 00 89  	DB $0A, $18, $00, $89, $00, $00
  25++E4AF 00 00
  26++E4B1 00 16 0A 09  	DB $00, $16, $0A, $09, $00, $00
  26++E4B5 00 00
  27++E4B7
  28++E4B7              GhavialVertSize: equ $ - GhavialVertices
  29++E4B7
  30++E4B7
  31++E4B7 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  32++E4BB 1F 12 10 08  	DB $1F, $12, $10, $08
  33++E4BF 1F 23 14 08  	DB $1F, $23, $14, $08
  34++E4C3 1F 30 0C 08  	DB $1F, $30, $0C, $08
  35++E4C7 1F 34 1C 0C  	DB $1F, $34, $1C, $0C
  36++E4CB 1F 45 18 0C  	DB $1F, $45, $18, $0C
  37++E4CF 1F 50 0C 04  	DB $1F, $50, $0C, $04
  38++E4D3 1F 67 00 20  	DB $1F, $67, $00, $20
  39++E4D7 1F 78 10 20  	DB $1F, $78, $10, $20
  40++E4DB 1F 89 14 20  	DB $1F, $89, $14, $20
  41++E4DF 1F 9A 1C 20  	DB $1F, $9A, $1C, $20
  42++E4E3 1F AB 18 20  	DB $1F, $AB, $18, $20
  43++E4E7 1F B6 04 20  	DB $1F, $B6, $04, $20
  44++E4EB 1F 06 04 00  	DB $1F, $06, $04, $00
  45++E4EF 1F 17 00 10  	DB $1F, $17, $00, $10
  46++E4F3 1F 28 10 14  	DB $1F, $28, $10, $14
  47++E4F7 1F 39 14 1C  	DB $1F, $39, $14, $1C
  48++E4FB 1F 4A 1C 18  	DB $1F, $4A, $1C, $18
  49++E4FF 1F 5B 18 04  	DB $1F, $5B, $18, $04
  50++E503 09 00 24 28  	DB $09, $00, $24, $28
  51++E507 09 00 28 2C  	DB $09, $00, $28, $2C
  52++E50B 09 00 2C 24  	DB $09, $00, $2C, $24
  53++E50F
  54++E50F              GhavialEdgesSize: equ $ - GhavialEdges
  55++E50F
  56++E50F
  57++E50F              GhavialEdgesCnt: equ GhavialEdgesSize/4
  58++E50F
  59++E50F
  60++E50F 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  61++E513 1F 33 24 0C  	DB $1F, $33, $24, $0C
  62++E517 3F 33 1C 19  	DB $3F, $33, $1C, $19
  63++E51B 3F 00 30 2A  	DB $3F, $00, $30, $2A
  64++E51F BF 33 1C 19  	DB $BF, $33, $1C, $19
  65++E523 9F 33 24 0C  	DB $9F, $33, $24, $0C
  66++E527 5F 00 3E 0F  	DB $5F, $00, $3E, $0F
  67++E52B 5F 1C 38 07  	DB $5F, $1C, $38, $07
  68++E52F 7F 1B 37 0D  	DB $7F, $1B, $37, $0D
  69++E533 7F 00 33 26  	DB $7F, $00, $33, $26
  70++E537 FF 1B 37 0D  	DB $FF, $1B, $37, $0D
  71++E53B DF 1C 38 07  	DB $DF, $1C, $38, $07
  72++E53F
  73++E53F              GhavialNormalsSize: equ $ - GhavialNormals
  74++E53F              GhavialLen: equ $ - Ghavial
  75++E53F
# file closed: ./Data/ships/Ghavial.asm
  87+ E53F                                      include "Data/ships/Iguana.asm"
# file opened: ./Data/ships/Iguana.asm
   1++E53F 01 0D AC     Iguana:	DB $01, $0D, $AC
   2++E542 B1 E5        	DW IguanaEdges
   3++E544 5C           	DB IguanaEdgesSize
   4++E545 00 1A        	DB $00, $1A
   5++E547 5A           	DB IguanaVertSize
   6++E548 17           	DB IguanaEdgesCnt
   7++E549 00 96        	DB $00, $96
   8++E54B 28           	DB IguanaNormalsSize
   9++E54C 0A 5A 21     	DB $0A, $5A, $21
  10++E54F 0D E6        	DW IguanaNormals
  11++E551 01 23        	DB $01, $23
  12++E553 57 E5        	DW IguanaVertices
  13++E555 00 00                                DB 0,0                      ; Type and Tactics
  14++E557
  15++E557
  16++E557 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  16++E55B 23 01
  17++E55D 00 14 1E 1F  	DB $00, $14, $1E, $1F, $46, $02
  17++E561 46 02
  18++E563 28 00 0A 9F  	DB $28, $00, $0A, $9F, $45, $01
  18++E567 45 01
  19++E569 00 14 1E 5F  	DB $00, $14, $1E, $5F, $57, $13
  19++E56D 57 13
  20++E56F 28 00 0A 1F  	DB $28, $00, $0A, $1F, $67, $23
  20++E573 67 23
  21++E575 00 14 28 3F  	DB $00, $14, $28, $3F, $89, $46
  21++E579 89 46
  22++E57B 28 00 1E BF  	DB $28, $00, $1E, $BF, $88, $45
  22++E57F 88 45
  23++E581 00 14 28 7F  	DB $00, $14, $28, $7F, $89, $57
  23++E585 89 57
  24++E587 28 00 1E 3F  	DB $28, $00, $1E, $3F, $99, $67
  24++E58B 99 67
  25++E58D 28 00 28 9E  	DB $28, $00, $28, $9E, $11, $00
  25++E591 11 00
  26++E593 28 00 28 1E  	DB $28, $00, $28, $1E, $33, $22
  26++E597 33 22
  27++E599 00 08 28 2A  	DB $00, $08, $28, $2A, $99, $88
  27++E59D 99 88
  28++E59F 10 00 24 AA  	DB $10, $00, $24, $AA, $88, $88
  28++E5A3 88 88
  29++E5A5 00 08 28 6A  	DB $00, $08, $28, $6A, $99, $88
  29++E5A9 99 88
  30++E5AB 10 00 24 2A  	DB $10, $00, $24, $2A, $99, $99
  30++E5AF 99 99
  31++E5B1
  32++E5B1              IguanaVertSize: equ $ - IguanaVertices
  33++E5B1
  34++E5B1
  35++E5B1
  36++E5B1 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  37++E5B5 1F 01 00 08  	DB $1F, $01, $00, $08
  38++E5B9 1F 13 00 0C  	DB $1F, $13, $00, $0C
  39++E5BD 1F 23 00 10  	DB $1F, $23, $00, $10
  40++E5C1 1F 46 04 14  	DB $1F, $46, $04, $14
  41++E5C5 1F 45 08 18  	DB $1F, $45, $08, $18
  42++E5C9 1F 57 0C 1C  	DB $1F, $57, $0C, $1C
  43++E5CD 1F 67 10 20  	DB $1F, $67, $10, $20
  44++E5D1 1F 48 14 18  	DB $1F, $48, $14, $18
  45++E5D5 1F 58 18 1C  	DB $1F, $58, $18, $1C
  46++E5D9 1F 69 14 20  	DB $1F, $69, $14, $20
  47++E5DD 1F 79 1C 20  	DB $1F, $79, $1C, $20
  48++E5E1 1F 04 04 08  	DB $1F, $04, $04, $08
  49++E5E5 1F 15 08 0C  	DB $1F, $15, $08, $0C
  50++E5E9 1F 26 04 10  	DB $1F, $26, $04, $10
  51++E5ED 1F 37 0C 10  	DB $1F, $37, $0C, $10
  52++E5F1 1F 89 14 1C  	DB $1F, $89, $14, $1C
  53++E5F5 1E 01 08 24  	DB $1E, $01, $08, $24
  54++E5F9 1E 23 10 28  	DB $1E, $23, $10, $28
  55++E5FD 0A 88 2C 30  	DB $0A, $88, $2C, $30
  56++E601 0A 88 34 30  	DB $0A, $88, $34, $30
  57++E605 0A 99 2C 38  	DB $0A, $99, $2C, $38
  58++E609 0A 99 34 38  	DB $0A, $99, $34, $38
  59++E60D
  60++E60D              IguanaEdgesSize: equ $ - IguanaEdges
  61++E60D
  62++E60D
  63++E60D              IguanaEdgesCnt: equ IguanaEdgesSize/4
  64++E60D
  65++E60D
  66++E60D 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  67++E611 DF 33 4D 19  	DB $DF, $33, $4D, $19
  68++E615 1F 33 4D 19  	DB $1F, $33, $4D, $19
  69++E619 5F 33 4D 19  	DB $5F, $33, $4D, $19
  70++E61D 9F 2A 55 00  	DB $9F, $2A, $55, $00
  71++E621 DF 2A 55 00  	DB $DF, $2A, $55, $00
  72++E625 1F 2A 55 00  	DB $1F, $2A, $55, $00
  73++E629 5F 2A 55 00  	DB $5F, $2A, $55, $00
  74++E62D BF 17 00 5D  	DB $BF, $17, $00, $5D
  75++E631 3F 17 00 5D  	DB $3F, $17, $00, $5D
  76++E635
  77++E635
  78++E635              IguanaNormalsSize: equ $ - IguanaNormals
  79++E635              IguanaLen: equ $ - Iguana
  80++E635
# file closed: ./Data/ships/Iguana.asm
  88+ E635                                      include "Data/ships/Krait.asm"
# file opened: ./Data/ships/Krait.asm
   1++E635
   2++E635 01 10 0E     Krait:                  DB $01, $10, $0E
   3++E638 B3 E6                                DW KraitEdges
   4++E63A 54                                   DB KraitEdgesSize
   5++E63B 00 12                                DB $00, $12
   6++E63D 66                                   DB KraitVertSize
   7++E63E 15                                   DB KraitEdgesCnt
   8++E63F 64 00                                DB $64,$00
   9++E641 18                                   DB KraitNormalsSize
  10++E642 14 50 1E                             DB $14, $50, $1E
  11++E645 07 E7                                DW KraitNormals
  12++E647 02 10                                DB $02, $10
  13++E649 4D E6                                DW KraitVertices
  14++E64B 00 00                                DB 0,0                      ; Type and Tactics
  15++E64D 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  15++E651 01 23
  16++E653 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  16++E657 03 45
  17++E659 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  17++E65D 12 45
  18++E65F 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  18++E663 01 44
  19++E665 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  19++E669 23 55
  20++E66B 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  20++E66F 01 11
  21++E671 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  21++E675 23 33
  22++E677 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  22++E67B 00 33
  23++E67D 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  23++E681 00 33
  24++E683 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  24++E687 33 33
  25++E689 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  25++E68D 00 00
  26++E68F 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  26++E693 44 44
  27++E695 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  27++E699 44 44
  28++E69B 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  28++E69F 44 44
  29++E6A1 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  29++E6A5 55 55
  30++E6A7 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  30++E6AB 55 55
  31++E6AD 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  31++E6B1 55 55
  32++E6B3              KraitVertSize           equ $  - KraitVertices
  33++E6B3 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  33++E6B7 1F 12 00 08
  34++E6BB 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  34++E6BF 1F 23 00 10
  35++E6C3 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  35++E6C7 1F 25 10 08
  36++E6CB 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  36++E6CF 1F 04 0C 04
  37++E6D3 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  37++E6D7 1C 23 10 18
  38++E6DB 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  38++E6DF 09 00 1C 28
  39++E6E3 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  39++E6E7 09 33 1C 24
  40++E6EB 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  40++E6EF 08 44 2C 34
  41++E6F3 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  41++E6F7 07 44 30 2C
  42++E6FB 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  42++E6FF 08 55 3C 40
  43++E703 08 55 40 38                          DB $08, $55, $40, $38
  44++E707              KraitEdgesSize          equ $  - KraitEdges
  45++E707              KraitEdgesCnt           equ KraitEdgesSize/4
  46++E707 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  47++E70B 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  47++E70F DF 07 30 06
  48++E713 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  48++E717 3F 4D 00 9A
  49++E71B BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  50++E71F              KraitNormalsSize        equ $  - KraitNormals
  51++E71F              KraitLen                equ $  - Krait
  52++E71F
# file closed: ./Data/ships/Krait.asm
  89+ E71F                                      include "Data/ships/Logo.asm"
# file opened: ./Data/ships/Logo.asm
   1++E71F 00 26 49     Logo:	DB $00, $26, $49
   2++E722 33 E8        	DW LogoEdges
   3++E724 94           	DB LogoEdgesSize
   4++E725 00 36        	DB $00, $36
   5++E727 FC           	DB LogoVertSize
   6++E728 25           	DB LogoEdgesCnt
   7++E729 00 00        	DB $00, $00
   8++E72B 14           	DB LogoNormalsSize
   9++E72C 63 FC 24     	DB $63, $FC, $24
  10++E72F C7 E8        	DW LogoNormals
  11++E731 01 00        	DB $01, $00
  12++E733 37 E7        	DW LogoVertices
  13++E735 00 00                                DB 0,0                      ; Type and Tactics
  14++E737
  15++E737 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  15++E73B 00 00
  16++E73D 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  16++E741 00 00
  17++E743 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  17++E747 00 00
  18++E749 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  18++E74D 00 00
  19++E74F 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  19++E753 00 00
  20++E755 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  20++E759 00 00
  21++E75B 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  21++E75F 00 00
  22++E761 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  22++E765 00 00
  23++E767 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  23++E76B 00 00
  24++E76D 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  24++E771 00 00
  25++E773 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  25++E777 00 00
  26++E779 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  26++E77D 00 00
  27++E77F 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  27++E783 02 33
  28++E785 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  28++E789 02 44
  29++E78B 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  29++E78F 01 33
  30++E791 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  30++E795 02 33
  31++E797 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  31++E79B 02 44
  32++E79D 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  32++E7A1 01 44
  33++E7A3 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  33++E7A7 00 00
  34++E7A9 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  34++E7AD 00 00
  35++E7AF 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  35++E7B3 00 00
  36++E7B5 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  36++E7B9 00 00
  37++E7BB 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  37++E7BF 00 00
  38++E7C1 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  38++E7C5 00 00
  39++E7C7 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  39++E7CB 00 00
  40++E7CD 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  40++E7D1 00 00
  41++E7D3 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  41++E7D7 00 00
  42++E7D9 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  42++E7DD 00 00
  43++E7DF 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  43++E7E3 00 00
  44++E7E5 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  44++E7E9 00 00
  45++E7EB 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  45++E7EF 00 00
  46++E7F1 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  46++E7F5 00 00
  47++E7F7 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  47++E7FB 00 00
  48++E7FD 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  48++E801 00 00
  49++E803 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  49++E807 00 00
  50++E809 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  50++E80D 00 00
  51++E80F 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  51++E813 00 00
  52++E815 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  52++E819 00 00
  53++E81B 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  53++E81F 00 00
  54++E821 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  54++E825 00 00
  55++E827 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  55++E82B 00 00
  56++E82D 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  56++E831 00 00
  57++E833
  58++E833              LogoVertSize: equ $ - LogoVertices
  59++E833
  60++E833
  61++E833
  62++E833 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  63++E837 1F 00 04 08  	DB $1F, $00, $04, $08
  64++E83B 1F 00 08 0C  	DB $1F, $00, $08, $0C
  65++E83F 1F 00 0C 10  	DB $1F, $00, $0C, $10
  66++E843 1F 00 10 14  	DB $1F, $00, $10, $14
  67++E847 1F 00 14 18  	DB $1F, $00, $14, $18
  68++E84B 1F 00 18 1C  	DB $1F, $00, $18, $1C
  69++E84F 1F 00 1C 20  	DB $1F, $00, $1C, $20
  70++E853 1F 00 20 24  	DB $1F, $00, $20, $24
  71++E857 1F 00 24 28  	DB $1F, $00, $24, $28
  72++E85B 1F 00 28 2C  	DB $1F, $00, $28, $2C
  73++E85F 1F 00 2C 00  	DB $1F, $00, $2C, $00
  74++E863 1E 03 38 3C  	DB $1E, $03, $38, $3C
  75++E867 1E 01 3C 40  	DB $1E, $01, $3C, $40
  76++E86B 1E 04 40 44  	DB $1E, $04, $40, $44
  77++E86F 1E 01 44 38  	DB $1E, $01, $44, $38
  78++E873 1E 03 10 30  	DB $1E, $03, $10, $30
  79++E877 1E 22 30 34  	DB $1E, $22, $30, $34
  80++E87B 1E 04 34 20  	DB $1E, $04, $34, $20
  81++E87F 1E 11 20 10  	DB $1E, $11, $20, $10
  82++E883 1E 13 10 38  	DB $1E, $13, $10, $38
  83++E887 1E 13 30 3C  	DB $1E, $13, $30, $3C
  84++E88B 1E 24 34 40  	DB $1E, $24, $34, $40
  85++E88F 1E 14 20 44  	DB $1E, $14, $20, $44
  86++E893 1E 00 54 58  	DB $1E, $00, $54, $58
  87++E897 1E 00 58 60  	DB $1E, $00, $58, $60
  88++E89B 1E 00 60 64  	DB $1E, $00, $60, $64
  89++E89F 1E 00 5C 68  	DB $1E, $00, $5C, $68
  90++E8A3 1E 00 6C 70  	DB $1E, $00, $6C, $70
  91++E8A7 1E 00 70 74  	DB $1E, $00, $70, $74
  92++E8AB 1E 00 78 7C  	DB $1E, $00, $78, $7C
  93++E8AF 1E 00 80 84  	DB $1E, $00, $80, $84
  94++E8B3 1E 00 88 8C  	DB $1E, $00, $88, $8C
  95++E8B7 1E 00 90 94  	DB $1E, $00, $90, $94
  96++E8BB 1E 00 94 9C  	DB $1E, $00, $94, $9C
  97++E8BF 1E 00 9C A0  	DB $1E, $00, $9C, $A0
  98++E8C3 1E 00 A4 98  	DB $1E, $00, $A4, $98
  99++E8C7
 100++E8C7              LogoEdgesSize: equ $ - LogoEdges
 101++E8C7
 102++E8C7
 103++E8C7              LogoEdgesCnt: equ LogoEdgesSize/4
 104++E8C7
 105++E8C7
 106++E8C7 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 107++E8CB 1F 00 04 0F  	DB $1F, $00, $04, $0F
 108++E8CF 3F 00 0D 34  	DB $3F, $00, $0D, $34
 109++E8D3 9F 51 51 00  	DB $9F, $51, $51, $00
 110++E8D7 1F 51 51 00  	DB $1F, $51, $51, $00
 111++E8DB
 112++E8DB
 113++E8DB              LogoNormalsSize: equ $ - LogoNormals
 114++E8DB              LogoLen: equ $ - Logo
 115++E8DB
# file closed: ./Data/ships/Logo.asm
  90+ E8DB                                      include "Data/ships/Mamba.asm"
# file opened: ./Data/ships/Mamba.asm
   1++E8DB 01 13 24     Mamba:	DB $01, $13, $24
   2++E8DE 89 E9        	DW MambaEdges
   3++E8E0 70           	DB MambaEdgesSize
   4++E8E1 00 22        	DB $00, $22
   5++E8E3 96           	DB MambaVertSize
   6++E8E4 1C           	DB MambaEdgesCnt
   7++E8E5 00 96        	DB $00, $96
   8++E8E7 14           	DB MambaNormalsSize
   9++E8E8 19 5A 1E     	DB $19, $5A, $1E
  10++E8EB F9 E9        	DW MambaNormals
  11++E8ED 02 12        	DB $02, $12
  12++E8EF F3 E8        	DW MambaVertices
  13++E8F1 00 00                                DB 0,0                      ; Type and Tactics
  14++E8F3
  15++E8F3 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  15++E8F7 10 32
  16++E8F9 40 08 20 FF  	DB $40, $08, $20, $FF, $20, $44
  16++E8FD 20 44
  17++E8FF 20 08 20 BE  	DB $20, $08, $20, $BE, $21, $44
  17++E903 21 44
  18++E905 20 08 20 3E  	DB $20, $08, $20, $3E, $31, $44
  18++E909 31 44
  19++E90B 40 08 20 7F  	DB $40, $08, $20, $7F, $30, $44
  19++E90F 30 44
  20++E911 04 04 10 8E  	DB $04, $04, $10, $8E, $11, $11
  20++E915 11 11
  21++E917 04 04 10 0E  	DB $04, $04, $10, $0E, $11, $11
  21++E91B 11 11
  22++E91D 08 03 1C 0D  	DB $08, $03, $1C, $0D, $11, $11
  22++E921 11 11
  23++E923 08 03 1C 8D  	DB $08, $03, $1C, $8D, $11, $11
  23++E927 11 11
  24++E929 14 04 10 D4  	DB $14, $04, $10, $D4, $00, $00
  24++E92D 00 00
  25++E92F 14 04 10 54  	DB $14, $04, $10, $54, $00, $00
  25++E933 00 00
  26++E935 18 07 14 F4  	DB $18, $07, $14, $F4, $00, $00
  26++E939 00 00
  27++E93B 10 07 14 F0  	DB $10, $07, $14, $F0, $00, $00
  27++E93F 00 00
  28++E941 10 07 14 70  	DB $10, $07, $14, $70, $00, $00
  28++E945 00 00
  29++E947 18 07 14 74  	DB $18, $07, $14, $74, $00, $00
  29++E94B 00 00
  30++E94D 08 04 20 AD  	DB $08, $04, $20, $AD, $44, $44
  30++E951 44 44
  31++E953 08 04 20 2D  	DB $08, $04, $20, $2D, $44, $44
  31++E957 44 44
  32++E959 08 04 20 6E  	DB $08, $04, $20, $6E, $44, $44
  32++E95D 44 44
  33++E95F 08 04 20 EE  	DB $08, $04, $20, $EE, $44, $44
  33++E963 44 44
  34++E965 20 04 20 A7  	DB $20, $04, $20, $A7, $44, $44
  34++E969 44 44
  35++E96B 20 04 20 27  	DB $20, $04, $20, $27, $44, $44
  35++E96F 44 44
  36++E971 24 04 20 67  	DB $24, $04, $20, $67, $44, $44
  36++E975 44 44
  37++E977 24 04 20 E7  	DB $24, $04, $20, $E7, $44, $44
  37++E97B 44 44
  38++E97D 26 00 20 A5  	DB $26, $00, $20, $A5, $44, $44
  38++E981 44 44
  39++E983 26 00 20 25  	DB $26, $00, $20, $25, $44, $44
  39++E987 44 44
  40++E989
  41++E989              MambaVertSize: equ $ - MambaVertices
  42++E989
  43++E989
  44++E989
  45++E989 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  46++E98D 1F 30 00 10  	DB $1F, $30, $00, $10
  47++E991 1F 40 04 10  	DB $1F, $40, $04, $10
  48++E995 1E 42 04 08  	DB $1E, $42, $04, $08
  49++E999 1E 41 08 0C  	DB $1E, $41, $08, $0C
  50++E99D 1E 43 0C 10  	DB $1E, $43, $0C, $10
  51++E9A1 0E 11 14 18  	DB $0E, $11, $14, $18
  52++E9A5 0C 11 18 1C  	DB $0C, $11, $18, $1C
  53++E9A9 0D 11 1C 20  	DB $0D, $11, $1C, $20
  54++E9AD 0C 11 14 20  	DB $0C, $11, $14, $20
  55++E9B1 14 00 24 2C  	DB $14, $00, $24, $2C
  56++E9B5 10 00 24 30  	DB $10, $00, $24, $30
  57++E9B9 10 00 28 34  	DB $10, $00, $28, $34
  58++E9BD 14 00 28 38  	DB $14, $00, $28, $38
  59++E9C1 0E 00 34 38  	DB $0E, $00, $34, $38
  60++E9C5 0E 00 2C 30  	DB $0E, $00, $2C, $30
  61++E9C9 0D 44 3C 40  	DB $0D, $44, $3C, $40
  62++E9CD 0E 44 44 48  	DB $0E, $44, $44, $48
  63++E9D1 0C 44 3C 48  	DB $0C, $44, $3C, $48
  64++E9D5 0C 44 40 44  	DB $0C, $44, $40, $44
  65++E9D9 07 44 50 54  	DB $07, $44, $50, $54
  66++E9DD 05 44 50 60  	DB $05, $44, $50, $60
  67++E9E1 05 44 54 60  	DB $05, $44, $54, $60
  68++E9E5 07 44 4C 58  	DB $07, $44, $4C, $58
  69++E9E9 05 44 4C 5C  	DB $05, $44, $4C, $5C
  70++E9ED 05 44 58 5C  	DB $05, $44, $58, $5C
  71++E9F1 1E 21 00 08  	DB $1E, $21, $00, $08
  72++E9F5 1E 31 00 0C  	DB $1E, $31, $00, $0C
  73++E9F9
  74++E9F9              MambaEdgesSize: equ $ - MambaEdges
  75++E9F9
  76++E9F9
  77++E9F9              MambaEdgesCnt: equ MambaEdgesSize/4
  78++E9F9
  79++E9F9
  80++E9F9 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  81++E9FD 1E 00 18 02  	DB $1E, $00, $18, $02
  82++EA01 9E 20 40 10  	DB $9E, $20, $40, $10
  83++EA05 1E 20 40 10  	DB $1E, $20, $40, $10
  84++EA09 3E 00 00 7F  	DB $3E, $00, $00, $7F
  85++EA0D
  86++EA0D              MambaNormalsSize: equ $ - MambaNormals
  87++EA0D              MambaLen: equ $ - Mamba
  88++EA0D
# file closed: ./Data/ships/Mamba.asm
  91+ EA0D                                      include "Data/ships/Missile.asm"
# file opened: ./Data/ships/Missile.asm
   1++EA0D 00 06 40     Missile:	DB $00, $06, $40
   2++EA10 8B EA        	DW MissileEdges
   3++EA12 60           	DB MissileEdgesSize
   4++EA13 00 0A        	DB $00, $0A
   5++EA15 66           	DB MissileVertSize
   6++EA16 18           	DB MissileEdgesCnt
   7++EA17 00 00        	DB $00, $00
   8++EA19 24           	DB MissileNormalsSize
   9++EA1A 0E 02 2C     	DB $0E, $02, $2C
  10++EA1D EB EA        	DW MissileNormals
  11++EA1F 02 00        	DB $02, $00
  12++EA21 25 EA        	DW MissileVertices
  13++EA23 01 00            DB ShipTypeMissile,0                      ; Type and Tactics
  14++EA25
  15++EA25 00 00 44 1F  MissileVertices:	DB $00, $00, $44, $1F, $10, $32
  15++EA29 10 32
  16++EA2B 08 08 24 5F  	DB $08, $08, $24, $5F, $21, $54
  16++EA2F 21 54
  17++EA31 08 08 24 1F  	DB $08, $08, $24, $1F, $32, $74
  17++EA35 32 74
  18++EA37 08 08 24 9F  	DB $08, $08, $24, $9F, $30, $76
  18++EA3B 30 76
  19++EA3D 08 08 24 DF  	DB $08, $08, $24, $DF, $10, $65
  19++EA41 10 65
  20++EA43 08 08 2C 3F  	DB $08, $08, $2C, $3F, $74, $88
  20++EA47 74 88
  21++EA49 08 08 2C 7F  	DB $08, $08, $2C, $7F, $54, $88
  21++EA4D 54 88
  22++EA4F 08 08 2C FF  	DB $08, $08, $2C, $FF, $65, $88
  22++EA53 65 88
  23++EA55 08 08 2C BF  	DB $08, $08, $2C, $BF, $76, $88
  23++EA59 76 88
  24++EA5B 0C 0C 2C 28  	DB $0C, $0C, $2C, $28, $74, $88
  24++EA5F 74 88
  25++EA61 0C 0C 2C 68  	DB $0C, $0C, $2C, $68, $54, $88
  25++EA65 54 88
  26++EA67 0C 0C 2C E8  	DB $0C, $0C, $2C, $E8, $65, $88
  26++EA6B 65 88
  27++EA6D 0C 0C 2C A8  	DB $0C, $0C, $2C, $A8, $76, $88
  27++EA71 76 88
  28++EA73 08 08 0C A8  	DB $08, $08, $0C, $A8, $76, $77
  28++EA77 76 77
  29++EA79 08 08 0C E8  	DB $08, $08, $0C, $E8, $65, $66
  29++EA7D 65 66
  30++EA7F 08 08 0C 28  	DB $08, $08, $0C, $28, $74, $77
  30++EA83 74 77
  31++EA85 08 08 0C 68  	DB $08, $08, $0C, $68, $54, $55
  31++EA89 54 55
  32++EA8B
  33++EA8B              MissileVertSize: equ $ - MissileVertices
  34++EA8B
  35++EA8B
  36++EA8B
  37++EA8B 1F 21 00 04  MissileEdges:	DB $1F, $21, $00, $04
  38++EA8F 1F 32 00 08  	DB $1F, $32, $00, $08
  39++EA93 1F 30 00 0C  	DB $1F, $30, $00, $0C
  40++EA97 1F 10 00 10  	DB $1F, $10, $00, $10
  41++EA9B 1F 24 04 08  	DB $1F, $24, $04, $08
  42++EA9F 1F 51 04 10  	DB $1F, $51, $04, $10
  43++EAA3 1F 60 0C 10  	DB $1F, $60, $0C, $10
  44++EAA7 1F 73 08 0C  	DB $1F, $73, $08, $0C
  45++EAAB 1F 74 08 14  	DB $1F, $74, $08, $14
  46++EAAF 1F 54 04 18  	DB $1F, $54, $04, $18
  47++EAB3 1F 65 10 1C  	DB $1F, $65, $10, $1C
  48++EAB7 1F 76 0C 20  	DB $1F, $76, $0C, $20
  49++EABB 1F 86 1C 20  	DB $1F, $86, $1C, $20
  50++EABF 1F 87 14 20  	DB $1F, $87, $14, $20
  51++EAC3 1F 84 14 18  	DB $1F, $84, $14, $18
  52++EAC7 1F 85 18 1C  	DB $1F, $85, $18, $1C
  53++EACB 08 85 18 28  	DB $08, $85, $18, $28
  54++EACF 08 87 14 24  	DB $08, $87, $14, $24
  55++EAD3 08 87 20 30  	DB $08, $87, $20, $30
  56++EAD7 08 85 1C 2C  	DB $08, $85, $1C, $2C
  57++EADB 08 74 24 3C  	DB $08, $74, $24, $3C
  58++EADF 08 54 28 40  	DB $08, $54, $28, $40
  59++EAE3 08 76 30 34  	DB $08, $76, $30, $34
  60++EAE7 08 65 2C 38  	DB $08, $65, $2C, $38
  61++EAEB
  62++EAEB              MissileEdgesSize: equ $ - MissileEdges
  63++EAEB
  64++EAEB
  65++EAEB              MissileEdgesCnt: equ MissileEdgesSize/4
  66++EAEB
  67++EAEB
  68++EAEB 9F 40 00 10  MissileNormals:	DB $9F, $40, $00, $10
  69++EAEF 5F 00 40 10  	DB $5F, $00, $40, $10
  70++EAF3 1F 40 00 10  	DB $1F, $40, $00, $10
  71++EAF7 1F 00 40 10  	DB $1F, $00, $40, $10
  72++EAFB 1F 20 00 00  	DB $1F, $20, $00, $00
  73++EAFF 5F 00 20 00  	DB $5F, $00, $20, $00
  74++EB03 9F 20 00 00  	DB $9F, $20, $00, $00
  75++EB07 1F 00 20 00  	DB $1F, $00, $20, $00
  76++EB0B 3F 00 00 B0  	DB $3F, $00, $00, $B0
  77++EB0F
  78++EB0F
  79++EB0F              MissileNormalsSize: equ $ - MissileNormals
  80++EB0F              MissileLen: equ $ - Missile
  81++EB0F
# file closed: ./Data/ships/Missile.asm
  92+ EB0F                                      include "Data/ships/Monitor.asm"
# file opened: ./Data/ships/Monitor.asm
   1++EB0F 04 36 00     Monitor:	            DB $04, $36, $00
   2++EB12 8D EB                                DW MonitorEdges
   3++EB14 5C                                   DB MonitorEdgesSize
   4++EB15 00 2A                                DB $00, $2A
   5++EB17 66                                   DB MonitorVertSize
   6++EB18 17                                   DB MonitorEdgesCnt
   7++EB19 01 90                                DB $01, $90
   8++EB1B 2C                                   DB MonitorNormalsSize
   9++EB1C 28 84 10                             DB $28, $84, $10
  10++EB1F E9 EB                                DW MonitorNormals
  11++EB21 00 37                                DB $00, $37
  12++EB23 27 EB                                DW MonitorVertices
  13++EB25 00 00                                DB 0,0                      ; Type and Tactics
  14++EB27
  15++EB27 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  15++EB2B FF FF
  16++EB2D 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  16++EB31 23 01
  17++EB33 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  17++EB37 50 34
  18++EB39 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  18++EB3D 78 12
  19++EB3F 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  19++EB43 96 45
  20++EB45 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  20++EB49 AA 28
  21++EB4B 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  21++EB4F AA 49
  22++EB51 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  22++EB55 AA 23
  23++EB57 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  23++EB5B AA 34
  24++EB5D 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  24++EB61 AA 89
  25++EB63 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  25++EB67 89 67
  26++EB69 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  26++EB6D 00 00
  27++EB6F 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  27++EB73 00 00
  28++EB75 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  28++EB79 77 77
  29++EB7B 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  29++EB7F 77 77
  30++EB81 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  30++EB85 66 66
  31++EB87 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  31++EB8B 66 66
  32++EB8D              MonitorVertSize:        equ $ - MonitorVertices
  33++EB8D 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  34++EB91 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  35++EB95 1F 23 04 1C                          DB $1F, $23, $04, $1C
  36++EB99 1F 34 08 20                          DB $1F, $34, $08, $20
  37++EB9D 1F 45 08 10                          DB $1F, $45, $08, $10
  38++EBA1 1F 50 00 08                          DB $1F, $50, $00, $08
  39++EBA5 1F 03 04 08                          DB $1F, $03, $04, $08
  40++EBA9 1F 67 00 28                          DB $1F, $67, $00, $28
  41++EBAD 1F 78 0C 28                          DB $1F, $78, $0C, $28
  42++EBB1 1F 89 24 28                          DB $1F, $89, $24, $28
  43++EBB5 1F 96 10 28                          DB $1F, $96, $10, $28
  44++EBB9 1F 17 00 0C                          DB $1F, $17, $00, $0C
  45++EBBD 1F 28 0C 14                          DB $1F, $28, $0C, $14
  46++EBC1 1F 49 18 10                          DB $1F, $49, $18, $10
  47++EBC5 1F 56 10 00                          DB $1F, $56, $10, $00
  48++EBC9 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  49++EBCD 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  50++EBD1 1F 4A 20 18                          DB $1F, $4A, $20, $18
  51++EBD5 1F 8A 14 24                          DB $1F, $8A, $14, $24
  52++EBD9 1F 9A 18 24                          DB $1F, $9A, $18, $24
  53++EBDD 0A 00 2C 30                          DB $0A, $00, $2C, $30
  54++EBE1 0A 77 34 38                          DB $0A, $77, $34, $38
  55++EBE5 0A 66 3C 40                          DB $0A, $66, $3C, $40
  56++EBE9              MonitorEdgesSize:       equ $ - MonitorEdges
  57++EBE9              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  58++EBE9 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  59++EBED 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  60++EBF1 3F 36 1C 10                          DB $3F, $36, $1C, $10
  61++EBF5 3F 00 39 1C                          DB $3F, $00, $39, $1C
  62++EBF9 BF 36 1C 10                          DB $BF, $36, $1C, $10
  63++EBFD 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  64++EC01 DF 26 2F 12                          DB $DF, $26, $2F, $12
  65++EC05 5F 26 2F 12                          DB $5F, $26, $2F, $12
  66++EC09 7F 27 30 0D                          DB $7F, $27, $30, $0D
  67++EC0D FF 27 30 0D                          DB $FF, $27, $30, $0D
  68++EC11 3F 00 00 40                          DB $3F, $00, $00, $40
  69++EC15              MonitorNormalsSize:     equ $ - MonitorNormals
  70++EC15              MonitorLen:             equ $ - Monitor
  71++EC15
# file closed: ./Data/ships/Monitor.asm
  93+ EC15                                      include "Data/ships/Moray.asm"
# file opened: ./Data/ships/Moray.asm
   1++EC15 01 03 84     Moray:	                DB $01, $03, $84
   2++EC18 81 EC                                DW MorayEdges
   3++EC1A 4C                                   DB MorayEdgesSize
   4++EC1B 00 1A                                DB $00, $1A
   5++EC1D 54                                   DB MorayVertSize
   6++EC1E 13                                   DB MorayEdgesCnt
   7++EC1F 00 32                                DB $00, $32
   8++EC21 24                                   DB MorayNormalsSize
   9++EC22 28 59 19                             DB $28, $59, $19
  10++EC25 CD EC                                DW MorayNormals
  11++EC27 02 2A                                DB $02, $2A
  12++EC29 2D EC                                DW MorayVertices
  13++EC2B 00 00                                DB 0,0                      ; Type and Tactics
  14++EC2D
  15++EC2D 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  15++EC31 02 78
  16++EC33 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  16++EC37 01 67
  17++EC39 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  17++EC3D FF FF
  18++EC3F 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  18++EC43 13 66
  19++EC45 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  19++EC49 25 88
  20++EC4B 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  20++EC4F 45 78
  21++EC51 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  21++EC55 34 67
  22++EC57 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  22++EC5B 44 44
  23++EC5D 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  23++EC61 44 44
  24++EC63 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  24++EC67 44 44
  25++EC69 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  25++EC6D 00 00
  26++EC6F 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  26++EC73 00 00
  27++EC75 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  27++EC79 00 00
  28++EC7B 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  28++EC7F 00 00
  29++EC81              MorayVertSize:          equ $ - MorayVertices
  30++EC81 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  31++EC85 1F 16 04 0C                          DB $1F, $16, $04, $0C
  32++EC89 18 36 0C 18                          DB $18, $36, $0C, $18
  33++EC8D 18 47 14 18                          DB $18, $47, $14, $18
  34++EC91 18 58 10 14                          DB $18, $58, $10, $14
  35++EC95 1F 28 00 10                          DB $1F, $28, $00, $10
  36++EC99 0F 67 04 18                          DB $0F, $67, $04, $18
  37++EC9D 0F 78 00 14                          DB $0F, $78, $00, $14
  38++ECA1 0F 02 00 08                          DB $0F, $02, $00, $08
  39++ECA5 0F 01 04 08                          DB $0F, $01, $04, $08
  40++ECA9 11 13 08 0C                          DB $11, $13, $08, $0C
  41++ECAD 11 25 08 10                          DB $11, $25, $08, $10
  42++ECB1 0D 45 08 14                          DB $0D, $45, $08, $14
  43++ECB5 0D 34 08 18                          DB $0D, $34, $08, $18
  44++ECB9 05 44 1C 20                          DB $05, $44, $1C, $20
  45++ECBD 07 44 1C 24                          DB $07, $44, $1C, $24
  46++ECC1 07 44 20 24                          DB $07, $44, $20, $24
  47++ECC5 05 00 28 2C                          DB $05, $00, $28, $2C
  48++ECC9 05 00 30 34                          DB $05, $00, $30, $34
  49++ECCD              MorayEdgesSize:         equ $ - MorayEdges
  50++ECCD              MorayEdgesCnt:          equ MorayEdgesSize/4
  51++ECCD 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  52++ECD1 9F 0A 31 07                          DB $9F, $0A, $31, $07
  53++ECD5 1F 0A 31 07                          DB $1F, $0A, $31, $07
  54++ECD9 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  55++ECDD 78 00 34 4E                          DB $78, $00, $34, $4E
  56++ECE1 78 3B 1C 65                          DB $78, $3B, $1C, $65
  57++ECE5 DF 48 63 32                          DB $DF, $48, $63, $32
  58++ECE9 5F 00 53 1E                          DB $5F, $00, $53, $1E
  59++ECED 5F 48 63 32                          DB $5F, $48, $63, $32
  60++ECF1
  61++ECF1              MorayNormalsSize:       equ $ - MorayNormals
  62++ECF1              MorayLen:               equ $ - Moray
  63++ECF1
# file closed: ./Data/ships/Moray.asm
  94+ ECF1                                      include "Data/ships/Ophidian.asm"
# file opened: ./Data/ships/Ophidian.asm
   1++ECF1 02 0E 88     Ophidian:	            DB $02, $0E, $88
   2++ECF4 81 ED                                DW OphidianEdges
   3++ECF6 78                                   DB OphidianEdgesSize
   4++ECF7 00 3C                                DB $00, $3C
   5++ECF9 78                                   DB OphidianVertSize
   6++ECFA 1E                                   DB OphidianEdgesCnt
   7++ECFB 00 32                                DB $00, $32
   8++ECFD 30                                   DB OphidianNormalsSize
   9++ECFE 14 40 22                             DB $14, $40, $22
  10++ED01 F9 ED                                DW OphidianNormals
  11++ED03 01 1A                                DB $01, $1A
  12++ED05 09 ED                                DW OphidianVertices
  13++ED07 00 00                                DB 0,0                      ; Type and Tactics
  14++ED09
  15++ED09 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02
  15++ED0D 68 02
  16++ED0F 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01
  16++ED13 67 01
  17++ED15 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01
  17++ED19 22 01
  18++ED1B 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24
  18++ED1F 8A 24
  19++ED21 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13
  19++ED25 79 13
  20++ED27 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF
  20++ED2B FF FF
  21++ED2D 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35
  21++ED31 9B 35
  22++ED33 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45
  22++ED37 AB 45
  23++ED39 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A
  23++ED3D BB 4A
  24++ED3F 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF
  24++ED43 FF FF
  25++ED45 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF
  25++ED49 FF FF
  26++ED4B 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39
  26++ED4F BB 39
  27++ED51 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF
  27++ED55 FF FF
  28++ED57 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF
  28++ED5B FF FF
  29++ED5D 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A
  29++ED61 BB 9A
  30++ED63 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF
  30++ED67 FF FF
  31++ED69 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB
  31++ED6D BB BB
  32++ED6F 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB
  32++ED73 BB BB
  33++ED75 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB
  33++ED79 BB BB
  34++ED7B 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB
  34++ED7F BB BB
  35++ED81
  36++ED81              OphidianVertSize:       equ $ - OphidianVertices
  37++ED81 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  38++ED85 1F 01 04 08                          DB $1F, $01, $04, $08
  39++ED89 1F 02 00 08                          DB $1F, $02, $00, $08
  40++ED8D 1F 12 08 14                          DB $1F, $12, $08, $14
  41++ED91 1F 13 10 14                          DB $1F, $13, $10, $14
  42++ED95 1F 24 0C 14                          DB $1F, $24, $0C, $14
  43++ED99 1F 35 14 18                          DB $1F, $35, $14, $18
  44++ED9D 1F 45 14 1C                          DB $1F, $45, $14, $1C
  45++EDA1 1F 28 00 0C                          DB $1F, $28, $00, $0C
  46++EDA5 1F 17 04 10                          DB $1F, $17, $04, $10
  47++EDA9 1F 39 10 2C                          DB $1F, $39, $10, $2C
  48++EDAD 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  49++EDB1 1F 67 04 3C                          DB $1F, $67, $04, $3C
  50++EDB5 1F 68 00 3C                          DB $1F, $68, $00, $3C
  51++EDB9 1F 79 10 3C                          DB $1F, $79, $10, $3C
  52++EDBD 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  53++EDC1 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  54++EDC5 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  55++EDC9 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  56++EDCD 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  57++EDD1 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  58++EDD5 1F AB 20 38                          DB $1F, $AB, $20, $38
  59++EDD9 10 BB 40 44                          DB $10, $BB, $40, $44
  60++EDDD 10 BB 44 48                          DB $10, $BB, $44, $48
  61++EDE1 10 BB 48 4C                          DB $10, $BB, $48, $4C
  62++EDE5 10 BB 4C 40                          DB $10, $BB, $4C, $40
  63++EDE9 10 39 30 34                          DB $10, $39, $30, $34
  64++EDED 10 39 2C 30                          DB $10, $39, $2C, $30
  65++EDF1 10 4A 28 24                          DB $10, $4A, $28, $24
  66++EDF5 10 4A 24 20                          DB $10, $4A, $24, $20
  67++EDF9              OphidianEdgesSize:      equ $ - OphidianEdges
  68++EDF9              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  69++EDF9
  70++EDF9 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  71++EDFD 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  72++EE01 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  73++EE05 1F 10 22 02                          DB $1F, $10, $22, $02
  74++EE09 9F 10 22 02                          DB $9F, $10, $22, $02
  75++EE0D 3F 00 25 03                          DB $3F, $00, $25, $03
  76++EE11 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  77++EE15 5F 0A 14 02                          DB $5F, $0A, $14, $02
  78++EE19 DF 0A 14 02                          DB $DF, $0A, $14, $02
  79++EE1D 7F 12 20 02                          DB $7F, $12, $20, $02
  80++EE21 FF 12 20 02                          DB $FF, $12, $20, $02
  81++EE25 3F 00 00 25                          DB $3F, $00, $00, $25
  82++EE29
  83++EE29              OphidianNormalsSize:    equ $ - OphidianNormals
  84++EE29              OphidianLen:            equ $ - Ophidian
  85++EE29
# file closed: ./Data/ships/Ophidian.asm
  95+ EE29                                      include "Data/ships/Plate.asm"
# file opened: ./Data/ships/Plate.asm
   1++EE29 80 00 64     Plate:	DB $80, $00, $64
   2++EE2C 53 EE        	DW PlateEdges
   3++EE2E 10           	DB PlateEdgesSize
   4++EE2F 00 0A        	DB $00, $0A
   5++EE31 12           	DB PlateVertSize
   6++EE32 04           	DB PlateEdgesCnt
   7++EE33 00 00        	DB $00, $00
   8++EE35 04           	DB PlateNormalsSize
   9++EE36 05 10 10     	DB $05, $10, $10
  10++EE39 63 EE        	DW PlateNormals
  11++EE3B 03 00        	DB $03, $00
  12++EE3D 41 EE        	DW PlateVertices
  13++EE3F 00 00                                DB 0,0                      ; Type and Tactics
  14++EE41
  15++EE41
  16++EE41 0F 16 09 FF  PlateVertices:	DB $0F, $16, $09, $FF, $FF, $FF
  16++EE45 FF FF
  17++EE47 0F 26 09 BF  	DB $0F, $26, $09, $BF, $FF, $FF
  17++EE4B FF FF
  18++EE4D 13 20 0B 14  	DB $13, $20, $0B, $14, $FF, $FF
  18++EE51 FF FF
  19++EE53
  20++EE53              PlateVertSize: equ $ - PlateVertices
  21++EE53
  22++EE53
  23++EE53
  24++EE53 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  25++EE57 10 FF 04 08  	DB $10, $FF, $04, $08
  26++EE5B 14 FF 08 0C  	DB $14, $FF, $08, $0C
  27++EE5F 10 FF 0C 00  	DB $10, $FF, $0C, $00
  28++EE63
  29++EE63              PlateEdgesSize: equ $ - PlateEdges
  30++EE63
  31++EE63
  32++EE63              PlateEdgesCnt: equ PlateEdgesSize/4
  33++EE63
  34++EE63
  35++EE63 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  36++EE67
  37++EE67
  38++EE67              PlateNormalsSize: equ $ - PlateNormals
  39++EE67              PlateLen: equ $ - Plate
  40++EE67
# file closed: ./Data/ships/Plate.asm
  96+ EE67                                      include "Data/ships/Python.asm"
# file opened: ./Data/ships/Python.asm
   1++EE67              ;\ -> &5BA1 \ Python = Type 12
   2++EE67 05 00 19     Python:                 DB $05, $00, $19
   3++EE6A C1 EE                                DW PythonEdges
   4++EE6C 68                                   DB PythonEdgesSize
   5++EE6D 00 2A                                DB $00,$2A
   6++EE6F 42                                   DB PythonVertSize
   7++EE70 1A                                   DB PythonEdgesCnt
   8++EE71 00 00                                DB $00,$00
   9++EE73 34                                   DB PythonNormalsSize
  10++EE74 28 FA 14                             DB $28,$FA,$14
  11++EE77 29 EF                                DW PythonNormals
  12++EE79 00 1B                                DB $00, $1B
  13++EE7B 7F EE                                DW PythonVertices
  14++EE7D 00 00                                DB 0,0                      ; Type and Tactics
  15++EE7F
  16++EE7F 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  16++EE83 10 32
  17++EE85 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  17++EE89 10 54
  18++EE8B 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  18++EE8F FF FF
  19++EE91 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  19++EE95 FF FF
  20++EE97 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  20++EE9B 54 98
  21++EE9D 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  21++EEA1 89 CC
  22++EEA3 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  22++EEA7 B8 CC
  23++EEA9 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  23++EEAD A9 CC
  24++EEAF 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  24++EEB3 32 76
  25++EEB5 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  25++EEB9 76 BA
  26++EEBB 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  26++EEBF BA CC
  27++EEC1              PythonVertSize          equ $  - PythonVertices
  28++EEC1 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  28++EEC5 1F 20 00 0C
  29++EEC9 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  29++EECD 1E 10 00 04
  30++EED1 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  30++EED5 1D 51 04 08
  31++EED9 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  31++EEDD 1D 40 04 0C
  32++EEE1 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  32++EEE5 1D A7 08 24
  33++EEE9 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  33++EEED 1D B6 0C 24
  34++EEF1 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  34++EEF5 05 BB 0C 28
  35++EEF9 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  35++EEFD 05 AA 08 28
  36++EF01 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  36++EF05 1F B8 0C 18
  37++EF09 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  37++EF0D 1F C9 14 1C
  38++EF11 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  38++EF15 1D CB 18 28
  39++EF19 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  39++EF1D 1D BA 24 28
  40++EF21 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  40++EF25 1D 76 20 24
  41++EF29              PythonEdgesSize         equ $  - PythonEdges
  42++EF29              PythonEdgesCnt          equ PythonEdgesSize/4
  43++EF29 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  43++EF2D 1E 1B 28 0B
  44++EF31 DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  44++EF35 5E 1B 28 0B
  45++EF39 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  45++EF3D 1E 13 26 00
  46++EF41 DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  46++EF45 5E 13 26 00
  47++EF49 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  47++EF4D 3E 19 25 0B
  48++EF51 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  48++EF55 FE 19 25 0B
  49++EF59 3E 00 00 70                          DB $3E, $00, $00, $70
  50++EF5D              PythonNormalsSize       equ $  - PythonNormals
  51++EF5D              PythonLen               equ $  - Python
  52++EF5D
# file closed: ./Data/ships/Python.asm
  97+ EF5D                                      include "Data/ships/Python_P.asm"
# file opened: ./Data/ships/Python_P.asm
   1++EF5D 02 19 00     Python_P:	DB $02, $19, $00
   2++EF60 B7 EF        	DW Python_PEdges
   3++EF62 68           	DB Python_PEdgesSize
   4++EF63 00 2A        	DB $00, $2A
   5++EF65 42           	DB Python_PVertSize
   6++EF66 1A           	DB Python_PEdgesCnt
   7++EF67 00 C8        	DB $00, $C8
   8++EF69 34           	DB Python_PNormalsSize
   9++EF6A 28 FA 14     	DB $28, $FA, $14
  10++EF6D 1F F0        	DW Python_PNormals
  11++EF6F 00 1B        	DB $00, $1B
  12++EF71 75 EF        	DW Python_PVertices
  13++EF73 00 00                                DB 0,0                      ; Type and Tactics
  14++EF75
  15++EF75 00 00 E0 1F  Python_PVertices:	DB $00, $00, $E0, $1F, $10, $32
  15++EF79 10 32
  16++EF7B 00 30 30 1F  	DB $00, $30, $30, $1F, $10, $54
  16++EF7F 10 54
  17++EF81 60 00 10 3F  	DB $60, $00, $10, $3F, $FF, $FF
  17++EF85 FF FF
  18++EF87 60 00 10 BF  	DB $60, $00, $10, $BF, $FF, $FF
  18++EF8B FF FF
  19++EF8D 00 30 20 3F  	DB $00, $30, $20, $3F, $54, $98
  19++EF91 54 98
  20++EF93 00 18 70 3F  	DB $00, $18, $70, $3F, $89, $CC
  20++EF97 89 CC
  21++EF99 30 00 70 BF  	DB $30, $00, $70, $BF, $B8, $CC
  21++EF9D B8 CC
  22++EF9F 30 00 70 3F  	DB $30, $00, $70, $3F, $A9, $CC
  22++EFA3 A9 CC
  23++EFA5 00 30 30 5F  	DB $00, $30, $30, $5F, $32, $76
  23++EFA9 32 76
  24++EFAB 00 30 20 7F  	DB $00, $30, $20, $7F, $76, $BA
  24++EFAF 76 BA
  25++EFB1 00 18 70 7F  	DB $00, $18, $70, $7F, $BA, $CC
  25++EFB5 BA CC
  26++EFB7
  27++EFB7              Python_PVertSize: equ $ - Python_PVertices
  28++EFB7
  29++EFB7
  30++EFB7
  31++EFB7 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  32++EFBB 1F 20 00 0C  	DB $1F, $20, $00, $0C
  33++EFBF 1F 31 00 08  	DB $1F, $31, $00, $08
  34++EFC3 1F 10 00 04  	DB $1F, $10, $00, $04
  35++EFC7 1F 59 08 10  	DB $1F, $59, $08, $10
  36++EFCB 1F 51 04 08  	DB $1F, $51, $04, $08
  37++EFCF 1F 37 08 20  	DB $1F, $37, $08, $20
  38++EFD3 1F 40 04 0C  	DB $1F, $40, $04, $0C
  39++EFD7 1F 62 0C 20  	DB $1F, $62, $0C, $20
  40++EFDB 1F A7 08 24  	DB $1F, $A7, $08, $24
  41++EFDF 1F 84 0C 10  	DB $1F, $84, $0C, $10
  42++EFE3 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  43++EFE7 07 88 0C 14  	DB $07, $88, $0C, $14
  44++EFEB 07 BB 0C 28  	DB $07, $BB, $0C, $28
  45++EFEF 07 99 08 14  	DB $07, $99, $08, $14
  46++EFF3 07 AA 08 28  	DB $07, $AA, $08, $28
  47++EFF7 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  48++EFFB 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  49++EFFF 1F C8 14 18  	DB $1F, $C8, $14, $18
  50++F003 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  51++F007 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  52++F00B 1F CB 18 28  	DB $1F, $CB, $18, $28
  53++F00F 1F 98 10 14  	DB $1F, $98, $10, $14
  54++F013 1F BA 24 28  	DB $1F, $BA, $24, $28
  55++F017 1F 54 04 10  	DB $1F, $54, $04, $10
  56++F01B 1F 76 20 24  	DB $1F, $76, $20, $24
  57++F01F
  58++F01F              Python_PEdgesSize: equ $ - Python_PEdges
  59++F01F
  60++F01F
  61++F01F              Python_PEdgesCnt: equ Python_PEdgesSize/4
  62++F01F
  63++F01F
  64++F01F 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  65++F023 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  66++F027 DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  67++F02B 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  68++F02F 9F 13 26 00  	DB $9F, $13, $26, $00
  69++F033 1F 13 26 00  	DB $1F, $13, $26, $00
  70++F037 DF 13 26 00  	DB $DF, $13, $26, $00
  71++F03B 5F 13 26 00  	DB $5F, $13, $26, $00
  72++F03F BF 19 25 0B  	DB $BF, $19, $25, $0B
  73++F043 3F 19 25 0B  	DB $3F, $19, $25, $0B
  74++F047 7F 19 25 0B  	DB $7F, $19, $25, $0B
  75++F04B FF 19 25 0B  	DB $FF, $19, $25, $0B
  76++F04F 3F 00 00 70  	DB $3F, $00, $00, $70
  77++F053
  78++F053
  79++F053              Python_PNormalsSize: equ $ - Python_PNormals
  80++F053              Python_PLen: equ $ - Python_P
  81++F053
# file closed: ./Data/ships/Python_P.asm
  98+ F053
# file closed: ./Data/ShipModelMetaData2.asm
1194  F053              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
1195  F053                  SLOT    ShipModelsAddr
1196  F053                  PAGE    BankShipModels3
1197  F053              	ORG     ShipModelsAddr, BankShipModels3
1198  E000
1199  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
1200  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
1200  E00F 06 00       >                        ld      b,0
1200  E011 4F          >                        ld      c,a                                 ; c= original ship id
1200  E012 CB 3F       >.ShiftLoop:             srl     a
1200  E014 CB 3F       >                        srl     a
1200  E016 CB 3F       >                        srl     a
1200  E018 CB 3F       >                        srl     a                                   ; divide by 16
1200  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1200  E01B 79          >                        ld      a,c
1200  E01C 50          >                        ld      d,b
1200  E01D 1E 10       >                        ld      e,16
1200  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1200  E021 93          >                        sub     e                                   ; a= actual model id now
1200  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1200  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1200  E024 7A          >                        ld      a,d                                 ; a = bank number
1200  E025             >;.. Now b = bank and a = adjusted ship nbr
1200  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
1200  E028 ED 31       >                        add     hl,a
1200  E02A ED 31       >                        add     hl,a
1200  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1200  E02D             >                        ClearCarryFlag
1200  E02D B7          >                        or a
1200  E02E C9          >                        ret
1201  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
1201  E02F 2A 18 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1201  E032 11 1C C3    >                        ld          de,UBnkHullVerticies
1201  E035 06 00       >                        ld          b,0
1201  E037 3A 0C C3    >                        ld			a,(VertexCtX6Addr)
1201  E03A 4F          >                        ld          c,a
1201  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1201  E03C CD 6E 93    >                        call        memcopy_dma
1201  E03F C9          >                        ret
1202  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
1202  E040 2A 07 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1202  E043 11 48 C4    >                        ld          de,UBnkHullEdges
1202  E046 06 00       >                        ld          b,0
1202  E048 3A 09 C3    >                        ld			a,(LineX4Addr)
1202  E04B 4F          >                        ld          c,a
1202  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1202  E04D CD 6E 93    >                        call        memcopy_dma
1202  E050 C9          >                        ret
1203  E051              CopyNormsToUniv3:       McopyNormsToUniverse
1203  E051 2A 14 C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1203  E054 11 F8 C8    >                        ld          de,UBnkHullNormals
1203  E057 06 00       >                        ld          b,0
1203  E059 3A 10 C3    >                        ld          a,(FaceCtX4Addr)
1203  E05C 4F          >                        ld          c,a
1203  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1203  E05E CD 6E 93    >                        call        memcopy_dma
1203  E061 C9          >                        ret
1204  E062              ShipBankTable3:         MShipBankTable
1204  E062 3B 00       >                        DW      BankShipModels1
1204  E064 43 00       >                        DW      BankShipModels2
1204  E066 44 00       >                        DW      BankShipModels3
1204  E068 45 00       >                        DW      BankShipModels4
1205  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
1205  E06A 21 02 C3    >                        ld          hl,UBnkShipModelBank
1205  E06D 36 44       >                        ld          (hl),BankShipModels3
1205  E06F 32 03 C3    >                        ld          (UBnkShipModelNbr),a
1205  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1205  E075 ED 31       >                        add         hl,a
1205  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1205  E079 4E          >                        ld          c,(hl)
1205  E07A 23          >                        inc         hl
1205  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1205  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1205  E07F ED 31       >                        add         hl,a
1205  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1205  E083 7E          >                        ld          a,(hl)
1205  E084 23          >                        inc         hl
1205  E085 66          >                        ld          h,(hl)
1205  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1205  E087 11 04 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1205  E08A 01 18 00    >                        ld          bc,ShipDataLength
1205  E08D ED B0       >                        ldir
1205  E08F CD 2F E0    >                        call        CopyVertsToUniv
1205  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1205  E095 CD 51 E0    >                        call        CopyNormsToUniv
1205  E098 C9          >                        ret
1206  E099              CopyBodyToUniverse3:    MCopyBodyToUniverse     CopyShipToUniverse3
1206  E099 3E 0D       >                        ld          a,13
1206  E09B CD 6A E0    >                        call        CopyShipToUniverse3
1206  E09E C9          >                        ret
1207  E09F                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E09F 1F E1        ShipModelTable3:         DW Rock_Hermit                             ;32
   2+ E0A1 F9 E1                                 DW ShuttleType9                            ;33
   3+ E0A3 2F E3                                 DW Shuttle_Mk_2                            ;34
   4+ E0A5 51 E4                                 DW Sidewinder                              ;35
   5+ E0A7 FD E4                                 DW Splinter                                ;36
   6+ E0A9 55 E5                                 DW TestVector                              ;37
   7+ E0AB B7 E5                                 DW Thargoid                                ;38
   8+ E0AD D7 E6                                 DW Thargon                                 ;39
   9+ E0AF 83 E7                                 DW TransportType10                         ;40
  10+ E0B1 69 E9                                 DW Viper                                   ;41
  11+ E0B3 47 EA                                 DW Worm                                    ;42
  12+ E0B5 FB EA                                 DW Rattler                                 ;43
  13+ E0B7 00 00                                 DW 0                                       ;44
  14+ E0B9 00 00                                 DW 0                                       ;45
  15+ E0BB 00 00                                 DW 0                                       ;46
  16+ E0BD 00 00                                 DW 0                                       ;47
  17+ E0BF 37 E1        ShipVertexTable3:        DW Rock_HermitVertices
  18+ E0C1 11 E2                                 DW ShuttleType9Vertices
  19+ E0C3 47 E3                                 DW Shuttle_Mk_2Vertices
  20+ E0C5 69 E4                                 DW SidewinderVertices
  21+ E0C7 15 E5                                 DW SplinterVertices
  22+ E0C9 6D E5                                 DW TestVectorVertices
  23+ E0CB CF E5                                 DW ThargoidVertices
  24+ E0CD EF E6                                 DW ThargonVertices
  25+ E0CF 9B E7                                 DW TransportType10Vertices
  26+ E0D1 81 E9                                 DW ViperVertices
  27+ E0D3 5F EA                                 DW WormVertices
  28+ E0D5 13 EB                                 DW RattlerVertices
  29+ E0D7 6D E1        ShipEdgeTable3:          DW Rock_HermitEdges
  30+ E0D9 83 E2                                 DW ShuttleType9Edges
  31+ E0DB AD E3                                 DW Shuttle_Mk_2Edges
  32+ E0DD A5 E4                                 DW SidewinderEdges
  33+ E0DF 2D E5                                 DW SplinterEdges
  34+ E0E1 97 E5                                 DW TestVectorEdges
  35+ E0E3 47 E6                                 DW ThargoidEdges
  36+ E0E5 2B E7                                 DW ThargonEdges
  37+ E0E7 79 E8                                 DW TransportType10Edges
  38+ E0E9 DB E9                                 DW ViperEdges
  39+ E0EB 9B EA                                 DW WormEdges
  40+ E0ED 6D EB                                 DW RattlerEdges
  41+ E0EF C1 E1        ShipNormalTable3:        DW Rock_HermitNormals
  42+ E0F1 FB E2                                 DW ShuttleType9Normals
  43+ E0F3 1D E4                                 DW Shuttle_Mk_2Normals
  44+ E0F5 E1 E4                                 DW SidewinderNormals
  45+ E0F7 45 E5                                 DW SplinterNormals
  46+ E0F9 A7 E5                                 DW TestVectorNormals
  47+ E0FB AF E6                                 DW ThargoidNormals
  48+ E0FD 67 E7                                 DW ThargonNormals
  49+ E0FF 31 E9                                 DW TransportType10Normals
  50+ E101 2B EA                                 DW ViperNormals
  51+ E103 DB EA                                 DW WormNormals
  52+ E105 6D EB                                 DW RattlerEdges
  53+ E107 DA 00        ShipModelSizeTable3:     DW Rock_HermitLen
  54+ E109 36 01                                 DW ShuttleType9Len
  55+ E10B 22 01                                 DW Shuttle_Mk_2Len
  56+ E10D AC 00                                 DW SidewinderLen
  57+ E10F 58 00                                 DW SplinterLen
  58+ E111 62 00                                 DW TestVectorLen
  59+ E113 20 01                                 DW ThargoidLen
  60+ E115 AC 00                                 DW ThargonLen
  61+ E117 E6 01                                 DW TransportType10Len
  62+ E119 DE 00                                 DW ViperLen
  63+ E11B B4 00                                 DW WormLen
  64+ E11D 0E 01                                 DW RattlerLen
  65+ E11F
  66+ E11F                                      include "Data/ships/Rock_Hermit.asm"
# file opened: ./Data/ships/Rock_Hermit.asm
   1++E11F 07 19 00     Rock_Hermit:	DB $07, $19, $00
   2++E122 6D E1        	DW Rock_HermitEdges
   3++E124 54           	DB Rock_HermitEdgesSize
   4++E125 00 32        	DB $00, $32
   5++E127 36           	DB Rock_HermitVertSize
   6++E128 15           	DB Rock_HermitEdgesCnt
   7++E129 00 00        	DB $00, $00
   8++E12B 38           	DB Rock_HermitNormalsSize
   9++E12C 32 B4 1E     	DB $32, $B4, $1E
  10++E12F C1 E1        	DW Rock_HermitNormals
  11++E131 01 02        	DB $01, $02
  12++E133 37 E1        	DW Rock_HermitVertices
  13++E135 00 00                                DB 0,0                      ; Type and Tactics
  14++E137
  15++E137
  16++E137 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  16++E13B FF FF
  17++E13D 50 0A 00 DF  	DB $50, $0A, $00, $DF, $FF, $FF
  17++E141 FF FF
  18++E143 00 50 00 5F  	DB $00, $50, $00, $5F, $FF, $FF
  18++E147 FF FF
  19++E149 46 28 00 5F  	DB $46, $28, $00, $5F, $FF, $FF
  19++E14D FF FF
  20++E14F 3C 32 00 1F  	DB $3C, $32, $00, $1F, $65, $DC
  20++E153 65 DC
  21++E155 32 00 3C 1F  	DB $32, $00, $3C, $1F, $FF, $FF
  21++E159 FF FF
  22++E15B 28 00 46 9F  	DB $28, $00, $46, $9F, $10, $32
  22++E15F 10 32
  23++E161 00 1E 4B 3F  	DB $00, $1E, $4B, $3F, $FF, $FF
  23++E165 FF FF
  24++E167 00 32 3C 7F  	DB $00, $32, $3C, $7F, $98, $BA
  24++E16B 98 BA
  25++E16D
  26++E16D
  27++E16D              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  28++E16D
  29++E16D
  30++E16D
  31++E16D 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  32++E171 1F D6 00 10  	DB $1F, $D6, $00, $10
  33++E175 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  34++E179 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  35++E17D 1F A3 04 08  	DB $1F, $A3, $04, $08
  36++E181 1F 32 04 18  	DB $1F, $32, $04, $18
  37++E185 1F 31 08 18  	DB $1F, $31, $08, $18
  38++E189 1F 41 08 14  	DB $1F, $41, $08, $14
  39++E18D 1F 10 14 18  	DB $1F, $10, $14, $18
  40++E191 1F 60 00 14  	DB $1F, $60, $00, $14
  41++E195 1F 54 0C 14  	DB $1F, $54, $0C, $14
  42++E199 1F 20 00 18  	DB $1F, $20, $00, $18
  43++E19D 1F 65 10 14  	DB $1F, $65, $10, $14
  44++E1A1 1F A8 04 20  	DB $1F, $A8, $04, $20
  45++E1A5 1F 87 04 1C  	DB $1F, $87, $04, $1C
  46++E1A9 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  47++E1AD 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  48++E1B1 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  49++E1B5 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  50++E1B9 1F BA 08 20  	DB $1F, $BA, $08, $20
  51++E1BD 1F 98 1C 20  	DB $1F, $98, $1C, $20
  52++E1C1
  53++E1C1              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  54++E1C1
  55++E1C1
  56++E1C1              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  57++E1C1
  58++E1C1
  59++E1C1 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  60++E1C5 5F 09 42 51  	DB $5F, $09, $42, $51
  61++E1C9 9F 48 40 1F  	DB $9F, $48, $40, $1F
  62++E1CD DF 40 49 2F  	DB $DF, $40, $49, $2F
  63++E1D1 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  64++E1D5 1F 87 0F 23  	DB $1F, $87, $0F, $23
  65++E1D9 1F 26 4C 46  	DB $1F, $26, $4C, $46
  66++E1DD BF 42 3B 27  	DB $BF, $42, $3B, $27
  67++E1E1 FF 43 0F 50  	DB $FF, $43, $0F, $50
  68++E1E5 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  69++E1E9 FF 46 50 28  	DB $FF, $46, $50, $28
  70++E1ED 7F 3A 66 33  	DB $7F, $3A, $66, $33
  71++E1F1 3F 51 09 43  	DB $3F, $51, $09, $43
  72++E1F5 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  73++E1F9
  74++E1F9
  75++E1F9              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  76++E1F9              Rock_HermitLen: equ $ - Rock_Hermit
  77++E1F9
# file closed: ./Data/ships/Rock_Hermit.asm
  67+ E1F9                                      include "Data/ships/ShuttleType9.asm"
# file opened: ./Data/ships/ShuttleType9.asm
   1++E1F9 0F 09 C4     ShuttleType9:	DB $0F, $09, $C4
   2++E1FC 83 E2        	DW ShuttleType9Edges
   3++E1FE 78           	DB ShuttleType9EdgesSize
   4++E1FF 00 26        	DB $00, $26
   5++E201 72           	DB ShuttleType9VertSize
   6++E202 1E           	DB ShuttleType9EdgesCnt
   7++E203 00 00        	DB $00, $00
   8++E205 34           	DB ShuttleType9NormalsSize
   9++E206 16 20 08     	DB $16, $20, $08
  10++E209 FB E2        	DW ShuttleType9Normals
  11++E20B 02 00        	DB $02, $00
  12++E20D 11 E2        	DW ShuttleType9Vertices
  13++E20F 00 00        	                        DB 0,0                      ; Type and Tactics
  14++E211
  15++E211
  16++E211 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF
  16++E215 FF FF
  17++E217 11 00 17 9F  	DB $11, $00, $17, $9F, $FF, $FF
  17++E21B FF FF
  18++E21D 00 12 17 1F  	DB $00, $12, $17, $1F, $FF, $FF
  18++E221 FF FF
  19++E223 12 00 17 1F  	DB $12, $00, $17, $1F, $FF, $FF
  19++E227 FF FF
  20++E229 14 14 1B FF  	DB $14, $14, $1B, $FF, $12, $39
  20++E22D 12 39
  21++E22F 14 14 1B BF  	DB $14, $14, $1B, $BF, $34, $59
  21++E233 34 59
  22++E235 14 14 1B 3F  	DB $14, $14, $1B, $3F, $56, $79
  22++E239 56 79
  23++E23B 14 14 1B 7F  	DB $14, $14, $1B, $7F, $17, $89
  23++E23F 17 89
  24++E241 05 00 1B 30  	DB $05, $00, $1B, $30, $99, $99
  24++E245 99 99
  25++E247 00 02 1B 70  	DB $00, $02, $1B, $70, $99, $99
  25++E24B 99 99
  26++E24D 05 00 1B A9  	DB $05, $00, $1B, $A9, $99, $99
  26++E251 99 99
  27++E253 00 03 1B 29  	DB $00, $03, $1B, $29, $99, $99
  27++E257 99 99
  28++E259 00 09 23 50  	DB $00, $09, $23, $50, $0A, $BC
  28++E25D 0A BC
  29++E25F 03 01 1F 47  	DB $03, $01, $1F, $47, $FF, $02
  29++E263 FF 02
  30++E265 04 0B 19 08  	DB $04, $0B, $19, $08, $01, $F4
  30++E269 01 F4
  31++E26B 0B 04 19 08  	DB $0B, $04, $19, $08, $A1, $3F
  31++E26F A1 3F
  32++E271 03 01 1F C7  	DB $03, $01, $1F, $C7, $6B, $23
  32++E275 6B 23
  33++E277 03 0B 19 88  	DB $03, $0B, $19, $88, $F8, $C0
  33++E27B F8 C0
  34++E27D 0A 04 19 88  	DB $0A, $04, $19, $88, $4F, $18
  34++E281 4F 18
  35++E283
  36++E283              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  37++E283
  38++E283
  39++E283
  40++E283 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  41++E287 1F 4A 04 08  	DB $1F, $4A, $04, $08
  42++E28B 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  43++E28F 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  44++E293 1F 18 00 1C  	DB $1F, $18, $00, $1C
  45++E297 18 12 00 10  	DB $18, $12, $00, $10
  46++E29B 1F 23 04 10  	DB $1F, $23, $04, $10
  47++E29F 18 34 04 14  	DB $18, $34, $04, $14
  48++E2A3 1F 45 08 14  	DB $1F, $45, $08, $14
  49++E2A7 0C 56 08 18  	DB $0C, $56, $08, $18
  50++E2AB 1F 67 0C 18  	DB $1F, $67, $0C, $18
  51++E2AF 18 78 0C 1C  	DB $18, $78, $0C, $1C
  52++E2B3 1F 39 10 14  	DB $1F, $39, $10, $14
  53++E2B7 1F 59 14 18  	DB $1F, $59, $14, $18
  54++E2BB 1F 79 18 1C  	DB $1F, $79, $18, $1C
  55++E2BF 1F 19 10 1C  	DB $1F, $19, $10, $1C
  56++E2C3 10 0C 00 30  	DB $10, $0C, $00, $30
  57++E2C7 10 0A 04 30  	DB $10, $0A, $04, $30
  58++E2CB 10 AB 08 30  	DB $10, $AB, $08, $30
  59++E2CF 10 BC 0C 30  	DB $10, $BC, $0C, $30
  60++E2D3 10 99 20 24  	DB $10, $99, $20, $24
  61++E2D7 07 99 24 28  	DB $07, $99, $24, $28
  62++E2DB 09 99 28 2C  	DB $09, $99, $28, $2C
  63++E2DF 07 99 20 2C  	DB $07, $99, $20, $2C
  64++E2E3 05 BB 34 38  	DB $05, $BB, $34, $38
  65++E2E7 08 BB 38 3C  	DB $08, $BB, $38, $3C
  66++E2EB 07 BB 34 3C  	DB $07, $BB, $34, $3C
  67++E2EF 05 AA 40 44  	DB $05, $AA, $40, $44
  68++E2F3 08 AA 44 48  	DB $08, $AA, $44, $48
  69++E2F7 07 AA 40 48  	DB $07, $AA, $40, $48
  70++E2FB              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  71++E2FB              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  72++E2FB
  73++E2FB DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  74++E2FF 5F 00 4A 04  	DB $5F, $00, $4A, $04
  75++E303 DF 33 33 17  	DB $DF, $33, $33, $17
  76++E307 9F 4A 00 04  	DB $9F, $4A, $00, $04
  77++E30B 9F 33 33 17  	DB $9F, $33, $33, $17
  78++E30F 1F 00 4A 04  	DB $1F, $00, $4A, $04
  79++E313 1F 33 33 17  	DB $1F, $33, $33, $17
  80++E317 1F 4A 00 04  	DB $1F, $4A, $00, $04
  81++E31B 5F 33 33 17  	DB $5F, $33, $33, $17
  82++E31F 3F 00 00 6B  	DB $3F, $00, $00, $6B
  83++E323 9F 29 29 5A  	DB $9F, $29, $29, $5A
  84++E327 1F 29 29 5A  	DB $1F, $29, $29, $5A
  85++E32B 5F 37 37 28  	DB $5F, $37, $37, $28
  86++E32F
  87++E32F
  88++E32F              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
  89++E32F              ShuttleType9Len: equ $ - ShuttleType9
  90++E32F
# file closed: ./Data/ships/ShuttleType9.asm
  68+ E32F                                      include "Data/ships/Shuttle_Mk_2.asm"
# file opened: ./Data/ships/Shuttle_Mk_2.asm
   1++E32F 0F 09 C4     Shuttle_Mk_2:	DB $0F, $09, $C4
   2++E332 AD E3        	DW Shuttle_Mk_2Edges
   3++E334 70           	DB Shuttle_Mk_2EdgesSize
   4++E335 00 26        	DB $00, $26
   5++E337 66           	DB Shuttle_Mk_2VertSize
   6++E338 1C           	DB Shuttle_Mk_2EdgesCnt
   7++E339 00 00        	DB $00, $00
   8++E33B 34           	DB Shuttle_Mk_2NormalsSize
   9++E33C 0A 20 09     	DB $0A, $20, $09
  10++E33F 1D E4        	DW Shuttle_Mk_2Normals
  11++E341 02 00        	DB $02, $00
  12++E343 47 E3        	DW Shuttle_Mk_2Vertices
  13++E345 00 00                                DB 0,0                      ; Type and Tactics
  14++E347
  15++E347
  16++E347 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  16++E34B 23 01
  17++E34D 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  17++E351 34 00
  18++E353 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  18++E357 15 00
  19++E359 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  19++E35D 26 11
  20++E35F 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  20++E363 37 22
  21++E365 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  21++E369 58 04
  22++E36B 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  22++E36F 69 15
  23++E371 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  23++E375 7A 26
  24++E377 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  24++E37B 7B 34
  25++E37D 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  25++E381 BC 48
  26++E383 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  26++E387 9C 58
  27++E389 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  27++E38D AC 69
  28++E38F 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  28++E393 BC 7A
  29++E395 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  29++E399 CC CC
  30++E39B 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  30++E39F CC CC
  31++E3A1 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  31++E3A5 CC CC
  32++E3A7 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  32++E3AB CC CC
  33++E3AD
  34++E3AD              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  35++E3AD
  36++E3AD
  37++E3AD
  38++E3AD 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  39++E3B1 1F 12 00 0C  	DB $1F, $12, $00, $0C
  40++E3B5 1F 23 00 10  	DB $1F, $23, $00, $10
  41++E3B9 1F 30 00 04  	DB $1F, $30, $00, $04
  42++E3BD 1F 04 04 14  	DB $1F, $04, $04, $14
  43++E3C1 1F 05 08 14  	DB $1F, $05, $08, $14
  44++E3C5 1F 15 08 18  	DB $1F, $15, $08, $18
  45++E3C9 1F 16 0C 18  	DB $1F, $16, $0C, $18
  46++E3CD 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  47++E3D1 1F 27 10 1C  	DB $1F, $27, $10, $1C
  48++E3D5 1F 37 10 20  	DB $1F, $37, $10, $20
  49++E3D9 1F 34 04 20  	DB $1F, $34, $04, $20
  50++E3DD 1F 48 14 24  	DB $1F, $48, $14, $24
  51++E3E1 1F 58 14 28  	DB $1F, $58, $14, $28
  52++E3E5 1F 59 18 28  	DB $1F, $59, $18, $28
  53++E3E9 1F 69 18 2C  	DB $1F, $69, $18, $2C
  54++E3ED 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  55++E3F1 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  56++E3F5 1F 7B 20 30  	DB $1F, $7B, $20, $30
  57++E3F9 1F 4B 20 24  	DB $1F, $4B, $20, $24
  58++E3FD 1F 8C 24 28  	DB $1F, $8C, $24, $28
  59++E401 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  60++E405 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  61++E409 1F BC 30 24  	DB $1F, $BC, $30, $24
  62++E40D 0A CC 34 38  	DB $0A, $CC, $34, $38
  63++E411 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  64++E415 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  65++E419 0A CC 40 34  	DB $0A, $CC, $40, $34
  66++E41D
  67++E41D              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  68++E41D
  69++E41D
  70++E41D              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  71++E41D
  72++E41D
  73++E41D 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  74++E421 DF 27 27 4E  	DB $DF, $27, $27, $4E
  75++E425 5F 27 27 4E  	DB $5F, $27, $27, $4E
  76++E429 1F 27 27 4E  	DB $1F, $27, $27, $4E
  77++E42D 1F 00 60 00  	DB $1F, $00, $60, $00
  78++E431 9F 60 00 00  	DB $9F, $60, $00, $00
  79++E435 5F 00 60 00  	DB $5F, $00, $60, $00
  80++E439 1F 60 00 00  	DB $1F, $60, $00, $00
  81++E43D BF 42 42 16  	DB $BF, $42, $42, $16
  82++E441 FF 42 42 16  	DB $FF, $42, $42, $16
  83++E445 7F 42 42 16  	DB $7F, $42, $42, $16
  84++E449 3F 42 42 16  	DB $3F, $42, $42, $16
  85++E44D 3F 00 00 60  	DB $3F, $00, $00, $60
  86++E451
  87++E451
  88++E451              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
  89++E451              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
  90++E451
# file closed: ./Data/ships/Shuttle_Mk_2.asm
  69+ E451                                      include "Data/ships/Sidewinder.asm"
# file opened: ./Data/ships/Sidewinder.asm
   1++E451 00 10 81     Sidewinder:	DB $00, $10, $81
   2++E454 A5 E4        	DW SidewinderEdges
   3++E456 3C           	DB SidewinderEdgesSize
   4++E457 00 1E        	DB $00, $1E
   5++E459 3C           	DB SidewinderVertSize
   6++E45A 0F           	DB SidewinderEdgesCnt
   7++E45B 00 32        	DB $00, $32
   8++E45D 1C           	DB SidewinderNormalsSize
   9++E45E 14 46 25     	DB $14, $46, $25
  10++E461 E1 E4        	DW SidewinderNormals
  11++E463 02 10        	DB $02, $10
  12++E465 69 E4        	DW SidewinderVertices
  13++E467 00 00                                DB 0,0                      ; Type and Tactics
  14++E469
  15++E469 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  15++E46D 10 54
  16++E46F 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  16++E473 20 65
  17++E475 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  17++E479 32 66
  18++E47B 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  18++E47F 31 44
  19++E481 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  19++E485 10 32
  20++E487 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  20++E48B 43 65
  21++E48D 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  21++E491 33 33
  22++E493 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  22++E497 33 33
  23++E499 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  23++E49D 33 33
  24++E49F 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  24++E4A3 33 33
  25++E4A5
  26++E4A5
  27++E4A5              SidewinderVertSize: equ $ - SidewinderVertices
  28++E4A5
  29++E4A5
  30++E4A5
  31++E4A5 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  32++E4A9 1F 62 04 08  	DB $1F, $62, $04, $08
  33++E4AD 1F 20 04 10  	DB $1F, $20, $04, $10
  34++E4B1 1F 10 00 10  	DB $1F, $10, $00, $10
  35++E4B5 1F 41 00 0C  	DB $1F, $41, $00, $0C
  36++E4B9 1F 31 0C 10  	DB $1F, $31, $0C, $10
  37++E4BD 1F 32 08 10  	DB $1F, $32, $08, $10
  38++E4C1 1F 43 0C 14  	DB $1F, $43, $0C, $14
  39++E4C5 1F 63 08 14  	DB $1F, $63, $08, $14
  40++E4C9 1F 65 04 14  	DB $1F, $65, $04, $14
  41++E4CD 1F 54 00 14  	DB $1F, $54, $00, $14
  42++E4D1 0F 33 18 1C  	DB $0F, $33, $18, $1C
  43++E4D5 0C 33 1C 20  	DB $0C, $33, $1C, $20
  44++E4D9 0C 33 18 24  	DB $0C, $33, $18, $24
  45++E4DD 0C 33 20 24  	DB $0C, $33, $20, $24
  46++E4E1
  47++E4E1              SidewinderEdgesSize: equ $ - SidewinderEdges
  48++E4E1
  49++E4E1
  50++E4E1              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  51++E4E1
  52++E4E1
  53++E4E1 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  54++E4E5 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  55++E4E9 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  56++E4ED 3F 00 00 70  	DB $3F, $00, $00, $70
  57++E4F1 DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  58++E4F5 5F 00 20 08  	DB $5F, $00, $20, $08
  59++E4F9 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  60++E4FD
  61++E4FD
  62++E4FD              SidewinderNormalsSize: equ $ - SidewinderNormals
  63++E4FD              SidewinderLen: equ $ - Sidewinder
  64++E4FD
# file closed: ./Data/ships/Sidewinder.asm
  70+ E4FD                                      include "Data/ships/Splinter.asm"
# file opened: ./Data/ships/Splinter.asm
   1++E4FD B0 01 00     Splinter:	            DB $B0, $01, $00
   2++E500 2D E5                                DW SplinterEdges
   3++E502 18                                   DB SplinterEdgesSize
   4++E503 00 16                                DB $00, $16
   5++E505 18                                   DB SplinterVertSize
   6++E506 06                                   DB SplinterEdgesCnt
   7++E507 00 00                                DB $00, $00
   8++E509 10                                   DB SplinterNormalsSize
   9++E50A 08 14 0A                             DB $08, $14, $0A
  10++E50D 45 E5                                DW SplinterNormals
  11++E50F 05 00                                DB $05, $00
  12++E511 15 E5                                DW SplinterVertices
  13++E513 00 00                                DB 0,0                      ; Type and Tactics
  14++E515
  15++E515 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  15++E519 12 33
  16++E51B 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  16++E51F 02 33
  17++E521 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  17++E525 01 33
  18++E527 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  18++E52B 01 22
  19++E52D              SplinterVertSize:       equ $ - SplinterVertices
  20++E52D 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  21++E531 1F 03 04 08                          DB $1F, $03, $04, $08
  22++E535 1F 01 08 0C                          DB $1F, $01, $08, $0C
  23++E539 1F 12 0C 00                          DB $1F, $12, $0C, $00
  24++E53D 1F 13 00 08                          DB $1F, $13, $00, $08
  25++E541 1F 02 0C 04                          DB $1F, $02, $0C, $04
  26++E545              SplinterEdgesSize:      equ $ - SplinterEdges
  27++E545              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  28++E545 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  29++E549 1F 03 04 08                          DB $1F, $03, $04, $08
  30++E54D 1F 01 08 0C                          DB $1F, $01, $08, $0C
  31++E551 1F 12 0C 00                          DB $1F, $12, $0C, $00
  32++E555              SplinterNormalsSize:    equ $ - SplinterNormals
  33++E555              SplinterLen:            equ $ - Splinter
  34++E555
# file closed: ./Data/ships/Splinter.asm
  71+ E555                                      include "Data/ships/TestVector.asm"
# file opened: ./Data/ships/TestVector.asm
   1++E555 03 41 23     TestVector:             DB $03, $41, $23
   2++E558 97 E5                                DW TestVectorEdges
   3++E55A 10                                   DB TestVectorEdgesSize
   4++E55B 54 2A                                DB $54,$2A
   5++E55D 2A                                   DB TestVectorVertSize
   6++E55E 04                                   DB TestVectorEdgesCnt
   7++E55F 00 00                                DB $00,$00
   8++E561 10                                   DB TestVectorNormalsSize
   9++E562 32 96 1C                             DB $32,$96,$1C
  10++E565 A7 E5                                DW TestVectorNormals
  11++E567 04 01                                DB $04,$01
  12++E569 6D E5                                DW TestVectorVertices
  13++E56B 00 00                                DB 0,0                      ; Type and Tactics
  14++E56D
  15++E56D 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  15++E571 00 00
  16++E573 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  16++E577 00 00
  17++E579 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  17++E57D 01 01
  18++E57F 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  18++E583 01 01
  19++E585 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  19++E589 02 02
  20++E58B 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  20++E58F 02 02
  21++E591 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  21++E595 03 03
  22++E597              TestVectorVertSize      equ $  - TestVectorVertices
  23++E597 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  24++E59B 1F 00 08 0C                          DB $1F,$00,$08,$0C
  25++E59F 1F 00 10 14                          DB $1F,$00,$10,$14
  26++E5A3 1F 00 18 18                          DB $1F,$00,$18,$18
  27++E5A7              TestVectorEdgesSize     equ $  - TestVectorEdges
  28++E5A7              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  29++E5A7              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  30++E5A7 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  31++E5AB 1F 10 00 00                          DB $1F,$10,$00,$00
  32++E5AF 1F 00 00 10                          DB $1F,$00,$00,$10
  33++E5B3 1F 00 00 10                          DB $1F,$00,$00,$10
  34++E5B7              TestVectorNormalsSize   equ $  - TestVectorNormals
  35++E5B7              TestVectorLen           equ $  - TestVector
  36++E5B7
# file closed: ./Data/ships/TestVector.asm
  72+ E5B7                                      include "Data/ships/Thargoid.asm"
# file opened: ./Data/ships/Thargoid.asm
   1++E5B7 00 26 49     Thargoid:	DB $00, $26, $49
   2++E5BA 47 E6                    DW ThargoidEdges
   3++E5BC 68                       DB ThargoidEdgesSize
   4++E5BD 3C 26                    DB $3C, $26
   5++E5BF 78                       DB ThargoidVertSize
   6++E5C0 1A                       DB ThargoidEdgesCnt
   7++E5C1 01 F4                    DB $01, $F4
   8++E5C3 28                       DB ThargoidNormalsSize
   9++E5C4 37 F0 27                 DB $37, $F0, $27
  10++E5C7 AF E6                    DW ThargoidNormals
  11++E5C9 02 16                    DB $02, $16
  12++E5CB CF E5                    DW ThargoidVertices
  13++E5CD 00 00                    DB 0,0                      ; Type and Tactics
  14++E5CF
  15++E5CF 20 30 30 5F  ThargoidVertices:	DB $20, $30, $30, $5F, $40, $88
  15++E5D3 40 88
  16++E5D5 20 44 00 5F                      DB $20, $44, $00, $5F, $10, $44
  16++E5D9 10 44
  17++E5DB 20 30 30 7F                      DB $20, $30, $30, $7F, $21, $44
  17++E5DF 21 44
  18++E5E1 20 00 44 3F                      DB $20, $00, $44, $3F, $32, $44
  18++E5E5 32 44
  19++E5E7 20 30 30 3F                      DB $20, $30, $30, $3F, $43, $55
  19++E5EB 43 55
  20++E5ED 20 44 00 1F                      DB $20, $44, $00, $1F, $54, $66
  20++E5F1 54 66
  21++E5F3 20 30 30 1F                      DB $20, $30, $30, $1F, $64, $77
  21++E5F7 64 77
  22++E5F9 20 00 44 1F                      DB $20, $00, $44, $1F, $74, $88
  22++E5FD 74 88
  23++E5FF 18 74 74 DF                      DB $18, $74, $74, $DF, $80, $99
  23++E603 80 99
  24++E605 18 A4 00 DF                      DB $18, $A4, $00, $DF, $10, $99
  24++E609 10 99
  25++E60B 18 74 74 FF                      DB $18, $74, $74, $FF, $21, $99
  25++E60F 21 99
  26++E611 18 00 A4 BF                      DB $18, $00, $A4, $BF, $32, $99
  26++E615 32 99
  27++E617 18 74 74 BF                      DB $18, $74, $74, $BF, $53, $99
  27++E61B 53 99
  28++E61D 18 A4 00 9F                      DB $18, $A4, $00, $9F, $65, $99
  28++E621 65 99
  29++E623 18 74 74 9F                      DB $18, $74, $74, $9F, $76, $99
  29++E627 76 99
  30++E629 18 00 A4 9F                      DB $18, $00, $A4, $9F, $87, $99
  30++E62D 87 99
  31++E62F 18 40 50 9E                      DB $18, $40, $50, $9E, $99, $99
  31++E633 99 99
  32++E635 18 40 50 BE                      DB $18, $40, $50, $BE, $99, $99
  32++E639 99 99
  33++E63B 18 40 50 FE                      DB $18, $40, $50, $FE, $99, $99
  33++E63F 99 99
  34++E641 18 40 50 DE                      DB $18, $40, $50, $DE, $99, $99
  34++E645 99 99
  35++E647
  36++E647              ThargoidVertSize: equ $ - ThargoidVertices
  37++E647
  38++E647
  39++E647
  40++E647 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C
  41++E64B 1F 40 00 04  	DB $1F, $40, $00, $04
  42++E64F 1F 41 04 08  	DB $1F, $41, $04, $08
  43++E653 1F 42 08 0C  	DB $1F, $42, $08, $0C
  44++E657 1F 43 0C 10  	DB $1F, $43, $0C, $10
  45++E65B 1F 54 10 14  	DB $1F, $54, $10, $14
  46++E65F 1F 64 14 18  	DB $1F, $64, $14, $18
  47++E663 1F 74 18 1C  	DB $1F, $74, $18, $1C
  48++E667 1F 80 00 20  	DB $1F, $80, $00, $20
  49++E66B 1F 10 04 24  	DB $1F, $10, $04, $24
  50++E66F 1F 21 08 28  	DB $1F, $21, $08, $28
  51++E673 1F 32 0C 2C  	DB $1F, $32, $0C, $2C
  52++E677 1F 53 10 30  	DB $1F, $53, $10, $30
  53++E67B 1F 65 14 34  	DB $1F, $65, $14, $34
  54++E67F 1F 76 18 38  	DB $1F, $76, $18, $38
  55++E683 1F 87 1C 3C  	DB $1F, $87, $1C, $3C
  56++E687 1F 98 20 3C  	DB $1F, $98, $20, $3C
  57++E68B 1F 90 20 24  	DB $1F, $90, $20, $24
  58++E68F 1F 91 24 28  	DB $1F, $91, $24, $28
  59++E693 1F 92 28 2C  	DB $1F, $92, $28, $2C
  60++E697 1F 93 2C 30  	DB $1F, $93, $2C, $30
  61++E69B 1F 95 30 34  	DB $1F, $95, $30, $34
  62++E69F 1F 96 34 38  	DB $1F, $96, $34, $38
  63++E6A3 1F 97 38 3C  	DB $1F, $97, $38, $3C
  64++E6A7 1E 99 40 44  	DB $1E, $99, $40, $44
  65++E6AB 1E 99 48 4C  	DB $1E, $99, $48, $4C
  66++E6AF
  67++E6AF              ThargoidEdgesSize: equ $ - ThargoidEdges
  68++E6AF
  69++E6AF              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  70++E6AF
  71++E6AF 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  72++E6B3 7F 67 3C 19  	DB $7F, $67, $3C, $19
  73++E6B7 7F 67 19 3C  	DB $7F, $67, $19, $3C
  74++E6BB 3F 67 19 3C  	DB $3F, $67, $19, $3C
  75++E6BF 1F 40 00 00  	DB $1F, $40, $00, $00
  76++E6C3 3F 67 3C 19  	DB $3F, $67, $3C, $19
  77++E6C7 1F 67 3C 19  	DB $1F, $67, $3C, $19
  78++E6CB 1F 67 19 3C  	DB $1F, $67, $19, $3C
  79++E6CF 5F 67 19 3C  	DB $5F, $67, $19, $3C
  80++E6D3 9F 30 00 00  	DB $9F, $30, $00, $00
  81++E6D7
  82++E6D7
  83++E6D7              ThargoidNormalsSize: equ $ - ThargoidNormals
  84++E6D7              ThargoidLen: equ $ - Thargoid
  85++E6D7
# file closed: ./Data/ships/Thargoid.asm
  73+ E6D7                                      include "Data/ships/Thargon.asm"
# file opened: ./Data/ships/Thargon.asm
   1++E6D7 F0 06 40     Thargon:	DB $F0, $06, $40
   2++E6DA 2B E7        	DW ThargonEdges
   3++E6DC 3C           	DB ThargonEdgesSize
   4++E6DD 00 12        	DB $00, $12
   5++E6DF 3C           	DB ThargonVertSize
   6++E6E0 0F           	DB ThargonEdgesCnt
   7++E6E1 00 32        	DB $00, $32
   8++E6E3 1C           	DB ThargonNormalsSize
   9++E6E4 14 14 1E     	DB $14, $14, $1E
  10++E6E7 67 E7        	DW ThargonNormals
  11++E6E9 02 10        	DB $02, $10
  12++E6EB EF E6        	DW ThargonVertices
  13++E6ED 00 00                                DB 0,0                      ; Type and Tactics
  14++E6EF
  15++E6EF
  16++E6EF 09 00 28 9F  ThargonVertices:	DB $09, $00, $28, $9F, $01, $55
  16++E6F3 01 55
  17++E6F5 09 26 0C DF  	DB $09, $26, $0C, $DF, $01, $22
  17++E6F9 01 22
  18++E6FB 09 18 20 FF  	DB $09, $18, $20, $FF, $02, $33
  18++E6FF 02 33
  19++E701 09 18 20 BF  	DB $09, $18, $20, $BF, $03, $44
  19++E705 03 44
  20++E707 09 26 0C 9F  	DB $09, $26, $0C, $9F, $04, $55
  20++E70B 04 55
  21++E70D 09 00 08 3F  	DB $09, $00, $08, $3F, $15, $66
  21++E711 15 66
  22++E713 09 0A 0F 7F  	DB $09, $0A, $0F, $7F, $12, $66
  22++E717 12 66
  23++E719 09 06 1A 7F  	DB $09, $06, $1A, $7F, $23, $66
  23++E71D 23 66
  24++E71F 09 06 1A 3F  	DB $09, $06, $1A, $3F, $34, $66
  24++E723 34 66
  25++E725 09 0A 0F 3F  	DB $09, $0A, $0F, $3F, $45, $66
  25++E729 45 66
  26++E72B
  27++E72B              ThargonVertSize: equ $ - ThargonVertices
  28++E72B
  29++E72B
  30++E72B 1F 10 00 04  ThargonEdges:	DB $1F, $10, $00, $04
  31++E72F 1F 20 04 08  	DB $1F, $20, $04, $08
  32++E733 1F 30 08 0C  	DB $1F, $30, $08, $0C
  33++E737 1F 40 0C 10  	DB $1F, $40, $0C, $10
  34++E73B 1F 50 00 10  	DB $1F, $50, $00, $10
  35++E73F 1F 51 00 14  	DB $1F, $51, $00, $14
  36++E743 1F 21 04 18  	DB $1F, $21, $04, $18
  37++E747 1F 32 08 1C  	DB $1F, $32, $08, $1C
  38++E74B 1F 43 0C 20  	DB $1F, $43, $0C, $20
  39++E74F 1F 54 10 24  	DB $1F, $54, $10, $24
  40++E753 1F 61 14 18  	DB $1F, $61, $14, $18
  41++E757 1F 62 18 1C  	DB $1F, $62, $18, $1C
  42++E75B 1F 63 1C 20  	DB $1F, $63, $1C, $20
  43++E75F 1F 64 20 24  	DB $1F, $64, $20, $24
  44++E763 1F 65 24 14  	DB $1F, $65, $24, $14
  45++E767
  46++E767              ThargonEdgesSize: equ $ - ThargonEdges
  47++E767
  48++E767
  49++E767              ThargonEdgesCnt: equ ThargonEdgesSize/4
  50++E767
  51++E767
  52++E767 9F 24 00 00  ThargonNormals:	DB $9F, $24, $00, $00
  53++E76B 5F 14 05 07  	DB $5F, $14, $05, $07
  54++E76F 7F 2E 2A 0E  	DB $7F, $2E, $2A, $0E
  55++E773 3F 24 00 68  	DB $3F, $24, $00, $68
  56++E777 3F 2E 2A 0E  	DB $3F, $2E, $2A, $0E
  57++E77B 1F 14 05 07  	DB $1F, $14, $05, $07
  58++E77F 1F 24 00 00  	DB $1F, $24, $00, $00
  59++E783
  60++E783
  61++E783              ThargonNormalsSize: equ $ - ThargonNormals
  62++E783              ThargonLen: equ $ - Thargon
  63++E783
# file closed: ./Data/ships/Thargon.asm
  74+ E783                                      include "Data/ships/TransportType10.asm"
# file opened: ./Data/ships/TransportType10.asm
   1++E783 00 09 C4     TransportType10:	DB $00, $09, $C4
   2++E786 79 E8        	DW TransportType10Edges
   3++E788 B8           	DB TransportType10EdgesSize
   4++E789 30 1A        	DB $30, $1A
   5++E78B DE           	DB TransportType10VertSize
   6++E78C 2E           	DB TransportType10EdgesCnt
   7++E78D 00 00        	DB $00, $00
   8++E78F 38           	DB TransportType10NormalsSize
   9++E790 10 20 0A     	DB $10, $20, $0A
  10++E793 31 E9        	DW TransportType10Normals
  11++E795 02 00        	DB $02, $00
  12++E797 9B E7        	DW TransportType10Vertices
  13++E799 00 00                                DB 0,0                      ; Type and Tactics
  14++E79B
  15++E79B 00 0A 1A 3F  TransportType10Vertices:	DB $00, $0A, $1A, $3F, $06, $77
  15++E79F 06 77
  16++E7A1 19 04 1A BF  	DB $19, $04, $1A, $BF, $01, $77
  16++E7A5 01 77
  17++E7A7 1C 03 1A FF  	DB $1C, $03, $1A, $FF, $01, $22
  17++E7AB 01 22
  18++E7AD 19 08 1A FF  	DB $19, $08, $1A, $FF, $02, $33
  18++E7B1 02 33
  19++E7B3 1A 08 1A 7F  	DB $1A, $08, $1A, $7F, $03, $44
  19++E7B7 03 44
  20++E7B9 1D 03 1A 7F  	DB $1D, $03, $1A, $7F, $04, $55
  20++E7BD 04 55
  21++E7BF 1A 04 1A 3F  	DB $1A, $04, $1A, $3F, $05, $66
  21++E7C3 05 66
  22++E7C5 00 06 0C 13  	DB $00, $06, $0C, $13, $FF, $FF
  22++E7C9 FF FF
  23++E7CB 1E 01 0C DF  	DB $1E, $01, $0C, $DF, $17, $89
  23++E7CF 17 89
  24++E7D1 21 08 0C DF  	DB $21, $08, $0C, $DF, $12, $39
  24++E7D5 12 39
  25++E7D7 21 08 0C 5F  	DB $21, $08, $0C, $5F, $34, $5A
  25++E7DB 34 5A
  26++E7DD 1E 01 0C 5F  	DB $1E, $01, $0C, $5F, $56, $AB
  26++E7E1 56 AB
  27++E7E3 0B 02 1E DF  	DB $0B, $02, $1E, $DF, $89, $CD
  27++E7E7 89 CD
  28++E7E9 0D 08 1E DF  	DB $0D, $08, $1E, $DF, $39, $DD
  28++E7ED 39 DD
  29++E7EF 0E 08 1E 5F  	DB $0E, $08, $1E, $5F, $3A, $DD
  29++E7F3 3A DD
  30++E7F5 0B 02 1E 5F  	DB $0B, $02, $1E, $5F, $AB, $CD
  30++E7F9 AB CD
  31++E7FB 05 06 02 87  	DB $05, $06, $02, $87, $77, $77
  31++E7FF 77 77
  32++E801 12 03 02 87  	DB $12, $03, $02, $87, $77, $77
  32++E805 77 77
  33++E807 05 07 07 A7  	DB $05, $07, $07, $A7, $77, $77
  33++E80B 77 77
  34++E80D 12 04 07 A7  	DB $12, $04, $07, $A7, $77, $77
  34++E811 77 77
  35++E813 0B 06 0E A7  	DB $0B, $06, $0E, $A7, $77, $77
  35++E817 77 77
  36++E819 0B 05 07 A7  	DB $0B, $05, $07, $A7, $77, $77
  36++E81D 77 77
  37++E81F 05 07 0E 27  	DB $05, $07, $0E, $27, $66, $66
  37++E823 66 66
  38++E825 12 04 0E 27  	DB $12, $04, $0E, $27, $66, $66
  38++E829 66 66
  39++E82B 0B 05 07 27  	DB $0B, $05, $07, $27, $66, $66
  39++E82F 66 66
  40++E831 05 06 03 27  	DB $05, $06, $03, $27, $66, $66
  40++E835 66 66
  41++E837 12 03 03 27  	DB $12, $03, $03, $27, $66, $66
  41++E83B 66 66
  42++E83D 0B 04 08 07  	DB $0B, $04, $08, $07, $66, $66
  42++E841 66 66
  43++E843 0B 05 03 27  	DB $0B, $05, $03, $27, $66, $66
  43++E847 66 66
  44++E849 10 08 0D E6  	DB $10, $08, $0D, $E6, $33, $33
  44++E84D 33 33
  45++E84F 10 08 10 C6  	DB $10, $08, $10, $C6, $33, $33
  45++E853 33 33
  46++E855 11 08 0D 66  	DB $11, $08, $0D, $66, $33, $33
  46++E859 33 33
  47++E85B 11 08 10 46  	DB $11, $08, $10, $46, $33, $33
  47++E85F 33 33
  48++E861 0D 03 1A E8  	DB $0D, $03, $1A, $E8, $00, $00
  48++E865 00 00
  49++E867 0D 03 1A 68  	DB $0D, $03, $1A, $68, $00, $00
  49++E86B 00 00
  50++E86D 09 03 1A 25  	DB $09, $03, $1A, $25, $00, $00
  50++E871 00 00
  51++E873 08 03 1A A5  	DB $08, $03, $1A, $A5, $00, $00
  51++E877 00 00
  52++E879
  53++E879              TransportType10VertSize: equ $ - TransportType10Vertices
  54++E879
  55++E879
  56++E879
  57++E879 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04
  58++E87D 1F 01 04 08  	DB $1F, $01, $04, $08
  59++E881 1F 02 08 0C  	DB $1F, $02, $08, $0C
  60++E885 1F 03 0C 10  	DB $1F, $03, $0C, $10
  61++E889 1F 04 10 14  	DB $1F, $04, $10, $14
  62++E88D 1F 05 14 18  	DB $1F, $05, $14, $18
  63++E891 1F 06 00 18  	DB $1F, $06, $00, $18
  64++E895 10 67 00 1C  	DB $10, $67, $00, $1C
  65++E899 1F 17 04 20  	DB $1F, $17, $04, $20
  66++E89D 0B 12 08 24  	DB $0B, $12, $08, $24
  67++E8A1 1F 23 0C 24  	DB $1F, $23, $0C, $24
  68++E8A5 1F 34 10 28  	DB $1F, $34, $10, $28
  69++E8A9 0B 45 14 28  	DB $0B, $45, $14, $28
  70++E8AD 1F 56 18 2C  	DB $1F, $56, $18, $2C
  71++E8B1 11 78 1C 20  	DB $11, $78, $1C, $20
  72++E8B5 11 19 20 24  	DB $11, $19, $20, $24
  73++E8B9 11 5A 28 2C  	DB $11, $5A, $28, $2C
  74++E8BD 11 6B 1C 2C  	DB $11, $6B, $1C, $2C
  75++E8C1 13 BC 1C 3C  	DB $13, $BC, $1C, $3C
  76++E8C5 13 8C 1C 30  	DB $13, $8C, $1C, $30
  77++E8C9 10 89 20 30  	DB $10, $89, $20, $30
  78++E8CD 1F 39 24 34  	DB $1F, $39, $24, $34
  79++E8D1 1F 3A 28 38  	DB $1F, $3A, $28, $38
  80++E8D5 10 AB 2C 3C  	DB $10, $AB, $2C, $3C
  81++E8D9 1F 9D 30 34  	DB $1F, $9D, $30, $34
  82++E8DD 1F 3D 34 38  	DB $1F, $3D, $34, $38
  83++E8E1 1F AD 38 3C  	DB $1F, $AD, $38, $3C
  84++E8E5 1F CD 30 3C  	DB $1F, $CD, $30, $3C
  85++E8E9 07 77 40 44  	DB $07, $77, $40, $44
  86++E8ED 07 77 48 4C  	DB $07, $77, $48, $4C
  87++E8F1 07 77 4C 50  	DB $07, $77, $4C, $50
  88++E8F5 07 77 48 50  	DB $07, $77, $48, $50
  89++E8F9 07 77 50 54  	DB $07, $77, $50, $54
  90++E8FD 07 66 58 5C  	DB $07, $66, $58, $5C
  91++E901 07 66 5C 60  	DB $07, $66, $5C, $60
  92++E905 07 66 60 58  	DB $07, $66, $60, $58
  93++E909 07 66 64 68  	DB $07, $66, $64, $68
  94++E90D 07 66 68 6C  	DB $07, $66, $68, $6C
  95++E911 07 66 64 6C  	DB $07, $66, $64, $6C
  96++E915 07 66 6C 70  	DB $07, $66, $6C, $70
  97++E919 06 33 74 78  	DB $06, $33, $74, $78
  98++E91D 06 33 7C 80  	DB $06, $33, $7C, $80
  99++E921 08 00 84 88  	DB $08, $00, $84, $88
 100++E925 05 00 88 8C  	DB $05, $00, $88, $8C
 101++E929 05 00 8C 90  	DB $05, $00, $8C, $90
 102++E92D 05 00 90 84  	DB $05, $00, $90, $84
 103++E931
 104++E931              TransportType10EdgesSize: equ $ - TransportType10Edges
 105++E931
 106++E931
 107++E931              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 108++E931
 109++E931
 110++E931 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67
 111++E935 BF 6F 30 07  	DB $BF, $6F, $30, $07
 112++E939 FF 69 3F 15  	DB $FF, $69, $3F, $15
 113++E93D 5F 00 22 00  	DB $5F, $00, $22, $00
 114++E941 7F 69 3F 15  	DB $7F, $69, $3F, $15
 115++E945 3F 6F 30 07  	DB $3F, $6F, $30, $07
 116++E949 1F 08 20 03  	DB $1F, $08, $20, $03
 117++E94D 9F 08 20 03  	DB $9F, $08, $20, $03
 118++E951 93 08 22 0B  	DB $93, $08, $22, $0B
 119++E955 9F 4B 20 4F  	DB $9F, $4B, $20, $4F
 120++E959 1F 4B 20 4F  	DB $1F, $4B, $20, $4F
 121++E95D 13 08 22 0B  	DB $13, $08, $22, $0B
 122++E961 1F 00 26 11  	DB $1F, $00, $26, $11
 123++E965 1F 00 00 79  	DB $1F, $00, $00, $79
 124++E969
 125++E969
 126++E969              TransportType10NormalsSize: equ $ - TransportType10Normals
 127++E969              TransportType10Len: equ $ - TransportType10
 128++E969
# file closed: ./Data/ships/TransportType10.asm
  75+ E969                                      include "Data/ships/Viper.asm"
# file opened: ./Data/ships/Viper.asm
   1++E969              ; Mapping Orginal to new
   2++E969              ; 0    => 0
   3++E969              ; 1-2  => 1-2
   4++E969              ; 3    => EQU Edges
   5++E969              ; 4    => EQU Normals
   6++E969              ; 5    => EQU EdgesCnt
   7++E969              ; 6    => 6
   8++E969              ; 7    => 7
   9++E969              ; 8    => EQU VertSize
  10++E969              ; 9    => EQU EdgesCnt
  11++E969              ; 10-11=> 10-11
  12++E969              ; 12   => EQU  NormalsSize
  13++E969              ; 13   => 13
  14++E969              ; 14   => 14
  15++E969              ; 15   => 15
  16++E969              ; 16   => EQU Edges
  17++E969              ; 17   => EQU Normals
  18++E969              ; 18   => 18
  19++E969              ; 19   => 19
  20++E969              ;\ -> &5C93  \ Viper = Type 16
  21++E969 00 F9 15     Viper:                  DB $00, $F9, $15
  22++E96C DB E9                                DW ViperEdges
  23++E96E 50                                   DB ViperEdgesSize
  24++E96F 00 2A                                DB $00,$2A
  25++E971 5A                                   DB ViperVertSize
  26++E972 14                                   DB ViperEdgesCnt
  27++E973 00 00                                DB $00,$00
  28++E975 1C                                   DB ViperNormalsSize
  29++E976 17 64 20                             DB $17, $64, $20
  30++E979 2B EA                                DW ViperNormals
  31++E97B 01 11                                DB $01, $11
  32++E97D 81 E9                                DW ViperVertices
  33++E97F 00 00                                DB 0,0                      ; Type and Tactics
  34++E981
  35++E981 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  35++E985 21 43
  36++E987 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  36++E98B 10 22
  37++E98D 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  37++E991 43 55
  38++E993 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  38++E997 42 66
  39++E999 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  39++E99D 31 66
  40++E99F 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  40++E9A3 54 66
  41++E9A5 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  41++E9A9 35 66
  42++E9AB 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  42++E9AF 20 66
  43++E9B1 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  43++E9B5 10 66
  44++E9B7 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  44++E9BB 66 66
  45++E9BD 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  45++E9C1 66 66
  46++E9C3 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  46++E9C7 66 66
  47++E9C9 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  47++E9CD 66 66
  48++E9CF 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  48++E9D3 66 66
  49++E9D5 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  49++E9D9 66 66
  50++E9DB              ViperVertSize           equ $  - ViperVertices
  51++E9DB 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  51++E9DF 1E 21 00 04
  52++E9E3 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  52++E9E7 1F 31 00 10
  53++E9EB 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  53++E9EF 1E 10 04 20
  54++E9F3 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  54++E9F7 1E 53 08 18
  55++E9FB 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  55++E9FF 1E 65 14 18
  56++EA03 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  56++EA07 1E 63 10 18
  57++EA0B 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  57++EA0F 1E 46 0C 14
  58++EA13 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  58++EA17 12 66 24 34
  59++EA1B 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  59++EA1F 12 66 28 38
  60++EA23 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  60++EA27 10 66 30 34
  61++EA2B              ViperEdgesSize          equ $  - ViperEdges
  62++EA2B              ViperEdgesCnt           equ ViperEdgesSize/4
  63++EA2B 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  63++EA2F 9F 16 21 0B
  64++EA33 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  64++EA37 DF 16 21 0B
  65++EA3B 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  65++EA3F 5F 00 20 00
  66++EA43 3F 00 00 30                          DB $3F, $00, $00, $30
  67++EA47              ViperNormalsSize        equ $  - ViperNormals
  68++EA47              ViperLen                equ $  - Viper
  69++EA47
# file closed: ./Data/ships/Viper.asm
  76+ EA47                                      include "Data/ships/Worm.asm"
# file opened: ./Data/ships/Worm.asm
   1++EA47 00 26 49     Worm:	                DB $00, $26, $49
   2++EA4A 9B EA                                DW WormEdges
   3++EA4C 40                                   DB WormEdgesSize
   4++EA4D 00 12                                DB $00, $12
   5++EA4F 3C                                   DB WormVertSize
   6++EA50 10                                   DB WormEdgesCnt
   7++EA51 00 00                                DB $00, $00
   8++EA53 20                                   DB WormNormalsSize
   9++EA54 13 1E 17                             DB $13, $1E, $17
  10++EA57 DB EA                                DW WormNormals
  11++EA59 03 08                                DB $03, $08
  12++EA5B 5F EA                                DW WormVertices
  13++EA5D 00 00                                DB 0,0                      ; Type and Tactics
  14++EA5F 0A 0A 23 5F  WormVertices:	DB $0A, $0A, $23, $5F, $02, $77
  14++EA63 02 77
  15++EA65 0A 0A 23 DF  	DB $0A, $0A, $23, $DF, $03, $77
  15++EA69 03 77
  16++EA6B 05 06 0F 1F  	DB $05, $06, $0F, $1F, $01, $24
  16++EA6F 01 24
  17++EA71 05 06 0F 9F  	DB $05, $06, $0F, $9F, $01, $35
  17++EA75 01 35
  18++EA77 0F 0A 19 5F  	DB $0F, $0A, $19, $5F, $24, $77
  18++EA7B 24 77
  19++EA7D 0F 0A 19 DF  	DB $0F, $0A, $19, $DF, $35, $77
  19++EA81 35 77
  20++EA83 1A 0A 19 7F  	DB $1A, $0A, $19, $7F, $46, $77
  20++EA87 46 77
  21++EA89 1A 0A 19 FF  	DB $1A, $0A, $19, $FF, $56, $77
  21++EA8D 56 77
  22++EA8F 08 0E 19 3F  	DB $08, $0E, $19, $3F, $14, $66
  22++EA93 14 66
  23++EA95 08 0E 19 BF  	DB $08, $0E, $19, $BF, $15, $66
  23++EA99 15 66
  24++EA9B
  25++EA9B              WormVertSize: equ $ - WormVertices
  26++EA9B
  27++EA9B
  28++EA9B 1F 07 00 04  WormEdges:	DB $1F, $07, $00, $04
  29++EA9F 1F 37 04 14  	DB $1F, $37, $04, $14
  30++EAA3 1F 57 14 1C  	DB $1F, $57, $14, $1C
  31++EAA7 1F 67 1C 18  	DB $1F, $67, $1C, $18
  32++EAAB 1F 47 18 10  	DB $1F, $47, $18, $10
  33++EAAF 1F 27 10 00  	DB $1F, $27, $10, $00
  34++EAB3 1F 02 00 08  	DB $1F, $02, $00, $08
  35++EAB7 1F 03 04 0C  	DB $1F, $03, $04, $0C
  36++EABB 1F 24 10 08  	DB $1F, $24, $10, $08
  37++EABF 1F 35 14 0C  	DB $1F, $35, $14, $0C
  38++EAC3 1F 14 08 20  	DB $1F, $14, $08, $20
  39++EAC7 1F 46 20 18  	DB $1F, $46, $20, $18
  40++EACB 1F 15 0C 24  	DB $1F, $15, $0C, $24
  41++EACF 1F 56 24 1C  	DB $1F, $56, $24, $1C
  42++EAD3 1F 01 08 0C  	DB $1F, $01, $08, $0C
  43++EAD7 1F 16 20 24  	DB $1F, $16, $20, $24
  44++EADB
  45++EADB              WormEdgesSize: equ $ - WormEdges
  46++EADB
  47++EADB
  48++EADB              WormEdgesCnt: equ WormEdgesSize/4
  49++EADB
  50++EADB
  51++EADB 1F 00 58 46  WormNormals:	DB $1F, $00, $58, $46
  52++EADF 1F 00 45 0E  	DB $1F, $00, $45, $0E
  53++EAE3 1F 46 42 23  	DB $1F, $46, $42, $23
  54++EAE7 9F 46 42 23  	DB $9F, $46, $42, $23
  55++EAEB 1F 40 31 0E  	DB $1F, $40, $31, $0E
  56++EAEF 9F 40 31 0E  	DB $9F, $40, $31, $0E
  57++EAF3 3F 00 00 C8  	DB $3F, $00, $00, $C8
  58++EAF7 5F 00 50 00  	DB $5F, $00, $50, $00
  59++EAFB
  60++EAFB
  61++EAFB              WormNormalsSize: equ $ - WormNormals
  62++EAFB              WormLen: equ $ - Worm
  63++EAFB
# file closed: ./Data/ships/Worm.asm
  77+ EAFB                                      include "Data/ships/Rattler.asm"
# file opened: ./Data/ships/Rattler.asm
   1++EAFB 02 17 70     Rattler:	DB $02, $17, $70
   2++EAFE 6D EB                    DW RattlerEdges
   3++EB00 68                       DB RattlerEdgesSize
   4++EB01 00 2A                    DB $00, $2A
   5++EB03 5A                       DB RattlerVertSize
   6++EB04 1A                       DB RattlerEdgesCnt
   7++EB05 00 96                    DB $00, $96
   8++EB07 34                       DB RattlerNormalsSize
   9++EB08 0A 71 1F                 DB $0A, $71, $1F
  10++EB0B D5 EB                    DW RattlerNormals
  11++EB0D 01 22                    DB $01, $22
  12++EB0F 13 EB                    DW RattlerVertices
  13++EB11 00 00                                DB 0,0                      ; Type and Tactics
  14++EB13
  15++EB13
  16++EB13 00 00 3C 1F  RattlerVertices:	DB $00, $00, $3C, $1F, $89, $23
  16++EB17 89 23
  17++EB19 28 00 28 1F  	DB $28, $00, $28, $1F, $9A, $34
  17++EB1D 9A 34
  18++EB1F 28 00 28 9F  	DB $28, $00, $28, $9F, $78, $12
  18++EB23 78 12
  19++EB25 3C 00 00 1F  	DB $3C, $00, $00, $1F, $AB, $45
  19++EB29 AB 45
  20++EB2B 3C 00 00 9F  	DB $3C, $00, $00, $9F, $67, $01
  20++EB2F 67 01
  21++EB31 46 00 28 3F  	DB $46, $00, $28, $3F, $CC, $5B
  21++EB35 CC 5B
  22++EB37 46 00 28 BF  	DB $46, $00, $28, $BF, $CC, $06
  22++EB3B CC 06
  23++EB3D 00 14 28 3F  	DB $00, $14, $28, $3F, $FF, $FF
  23++EB41 FF FF
  24++EB43 00 14 28 7F  	DB $00, $14, $28, $7F, $FF, $FF
  24++EB47 FF FF
  25++EB49 0A 06 28 AA  	DB $0A, $06, $28, $AA, $CC, $CC
  25++EB4D CC CC
  26++EB4F 0A 06 28 EA  	DB $0A, $06, $28, $EA, $CC, $CC
  26++EB53 CC CC
  27++EB55 14 00 28 AA  	DB $14, $00, $28, $AA, $CC, $CC
  27++EB59 CC CC
  28++EB5B 0A 06 28 2A  	DB $0A, $06, $28, $2A, $CC, $CC
  28++EB5F CC CC
  29++EB61 0A 06 28 6A  	DB $0A, $06, $28, $6A, $CC, $CC
  29++EB65 CC CC
  30++EB67 14 00 28 2A  	DB $14, $00, $28, $2A, $CC, $CC
  30++EB6B CC CC
  31++EB6D
  32++EB6D              RattlerVertSize: equ $ - RattlerVertices
  33++EB6D
  34++EB6D
  35++EB6D 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  36++EB71 1F 17 08 10  	DB $1F, $17, $08, $10
  37++EB75 1F 28 00 08  	DB $1F, $28, $00, $08
  38++EB79 1F 39 00 04  	DB $1F, $39, $00, $04
  39++EB7D 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  40++EB81 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  41++EB85 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  42++EB89 1F 6C 18 20  	DB $1F, $6C, $18, $20
  43++EB8D 1F 01 10 1C  	DB $1F, $01, $10, $1C
  44++EB91 1F 67 10 20  	DB $1F, $67, $10, $20
  45++EB95 1F 12 08 1C  	DB $1F, $12, $08, $1C
  46++EB99 1F 78 08 20  	DB $1F, $78, $08, $20
  47++EB9D 1F 23 00 1C  	DB $1F, $23, $00, $1C
  48++EBA1 1F 89 00 20  	DB $1F, $89, $00, $20
  49++EBA5 1F 34 04 1C  	DB $1F, $34, $04, $1C
  50++EBA9 1F 9A 04 20  	DB $1F, $9A, $04, $20
  51++EBAD 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  52++EBB1 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  53++EBB5 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  54++EBB9 1F BC 14 20  	DB $1F, $BC, $14, $20
  55++EBBD 0A CC 24 28  	DB $0A, $CC, $24, $28
  56++EBC1 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  57++EBC5 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  58++EBC9 0A CC 30 34  	DB $0A, $CC, $30, $34
  59++EBCD 0A CC 34 38  	DB $0A, $CC, $34, $38
  60++EBD1 0A CC 38 30  	DB $0A, $CC, $38, $30
  61++EBD5
  62++EBD5              RattlerEdgesSize: equ $ - RattlerEdges
  63++EBD5
  64++EBD5
  65++EBD5              RattlerEdgesCnt: equ RattlerEdgesSize/4
  66++EBD5
  67++EBD5
  68++EBD5 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  69++EBD9 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  70++EBDD 9F 09 5D 12  	DB $9F, $09, $5D, $12
  71++EBE1 1F 09 5D 12  	DB $1F, $09, $5D, $12
  72++EBE5 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  73++EBE9 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  74++EBED DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  75++EBF1 DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  76++EBF5 DF 09 5D 12  	DB $DF, $09, $5D, $12
  77++EBF9 5F 09 5D 12  	DB $5F, $09, $5D, $12
  78++EBFD 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  79++EC01 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  80++EC05 3F 00 00 60  	DB $3F, $00, $00, $60
  81++EC09
  82++EC09              RattlerNormalsSize: equ $ - RattlerNormals
  83++EC09              RattlerLen: equ $ - Rattler
  84++EC09
# file closed: ./Data/ships/Rattler.asm
  78+ EC09
# file closed: ./Data/ShipModelMetaData3.asm
1208  EC09              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
1209  EC09              ;;Privisioned for more models     SLOT    ShipModelsAddr
1210  EC09              ;;Privisioned for more models     PAGE    BankShipModels4
1211  EC09              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
1212  EC09
1213  EC09              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
1214  EC09                  SLOT    SpritemembankAddr
1215  EC09                  PAGE    BankSPRITE
1216  EC09              	ORG     SpritemembankAddr, BankSPRITE
1217  E000                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2
   5+ E000
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1
   7+ E000              galactic_hyper_sprite1				equ galactic_hyper_sprite+1
   8+ E000              galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite2+1
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2
  17+ E000
  18+ E000              reticlule_sprite1                   equ	local_hyper_sprite2+1
  19+ E000              reticlule_sprite2                   equ	reticlule_sprite1+1
  20+ E000              reticlule_sprite3                   equ	reticlule_sprite2+1
  21+ E000              reticlule_sprite4                   equ reticlule_sprite3+1
  22+ E000
  23+ E000              laser_sprite1                       equ	reticlule_sprite4+1
  24+ E000              laser_sprite2                       equ	laser_sprite1    +1
  25+ E000              laser_sprite3                       equ	laser_sprite2    +1
  26+ E000              laser_sprite4                       equ laser_sprite3    +1
  27+ E000              laser_sprite5                       equ	laser_sprite4    +1
  28+ E000              laser_sprite6                       equ	laser_sprite5    +1
  29+ E000              laser_sprite7                       equ	laser_sprite6    +1
  30+ E000              laser_sprite8                       equ laser_sprite7    +1
  31+ E000              laser_sprite9                       equ	laser_sprite8    +1
  32+ E000              laser_sprite10                      equ	laser_sprite9    +1
  33+ E000              laser_sprite11                      equ	laser_sprite10   +1
  34+ E000              laser_sprite12                      equ laser_sprite11   +1
  35+ E000              laser_sprite13                      equ	laser_sprite12   +1
  36+ E000              laser_sprite14                      equ	laser_sprite13   +1
  37+ E000              laser_sprite15                      equ	laser_sprite14   +1
  38+ E000              laser_sprite16                      equ laser_sprite15   +1
  39+ E000
  40+ E000              compass_sun                         equ laser_sprite16   +1
  41+ E000              compass_station                     equ compass_sun      +1
  42+ E000
  43+ E000              glactic_pattern_1					equ 0
  44+ E000              glactic_hyper_pattern_1             equ 2
  45+ E000              local_pattern_1                     equ 4
  46+ E000              local_hyper_pattern_1               equ 6
  47+ E000              reticule_pattern_1                  equ 12
  48+ E000              reticule_pattern_2                  equ 13
  49+ E000              laser_pattern_1                     equ 14
  50+ E000              laser_pattern_2                     equ 15
  51+ E000              laser_pattern_3                     equ 16
  52+ E000              laser_pattern_4                     equ 17
  53+ E000              laser_pattern_5                     equ 18
  54+ E000
  55+ E000              compass_sun_infront                 equ 22
  56+ E000              compass_sun_behind                  equ 23
  57+ E000              compass_station_infront             equ 24
  58+ E000              compass_station_behind              equ 25
  59+ E000              spritecursoroffset					equ 17
  60+ E000
  61+ E000
  62+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  63+ E000              sprite_big:
  64+ E000              .SetAnchor:
  65+ E000 7A           	ld		a,d                                 ; a = sprite nbr, bug fix?
  66+ E001 F5           	push	af									; save id for next few
  67+ E002 D5           	push	de
  68+ E003 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  69+ E006              ; write out X position bits 1 to 8
  70+ E006 79           	ld		a,c
  71+ E007 21 11 00         ld      hl,spritecursoroffset
  72+ E00A ED 31        	add		hl,a                                ; hl = full x position
  73+ E00C 7D           	ld		a,l
  74+ E00D ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  75+ E010              ; write out Y position bits 1 to 8
  76+ E010 EB           	ex		de,hl								; de = full x position
  77+ E011 78           	ld		a,b
  78+ E012 21 11 00         ld      hl,spritecursoroffset
  79+ E015 ED 31        	add		hl,a
  80+ E017 7D           	ld		a,l                                 ; hl = full y position
  81+ E018 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  82+ E01B              ; write out MSB of X as its an anchor
  83+ E01B 7A           	ld		a,d									; de = MSB of X (hl bit 0)
  84+ E01C ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
  85+ E01F              ; write out sprite pattern
  86+ E01F D1           	pop		de                                  ; de = pattern and sprite nbr
  87+ E020 7B           	ld		a,e
  88+ E021 F6 C0        	or		%11000000							;
  89+ E023 ED 92 38     	nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
  90+ E026              ; write out msb of y in h must be bit 0 only
  91+ E026 3E 00        	ld		a,%00000000							; big unified composite
  92+ E028 B4           	or		h									; MSB Y
  93+ E029 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  94+ E02C              .BigSprite1:
  95+ E02C F1           	pop		af
  96+ E02D 3C           	inc		a
  97+ E02E F5           	push	af
  98+ E02F ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
  99+ E032 3E 10        	ld		a,16
 100+ E034 ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 101+ E037 AF           	xor 	a
 102+ E038 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 103+ E03B ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 104+ E03E 3E C1        	ld		a,%11000001							; relative and 4 bytes of data, pattern 1
 105+ E040 ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 106+ E043 3E 41        	ld		a,%01000001							; big unified composite
 107+ E045 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 108+ E048              .BigSprite2:
 109+ E048 F1           	pop		af
 110+ E049 3C           	inc		a
 111+ E04A ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
 112+ E04D AF           	xor		a
 113+ E04E ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 114+ E051 3E 10        	ld		a,16
 115+ E053 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 116+ E056 AF           	xor		a
 117+ E057 ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 118+ E05A 3E C2        	ld		a,%11000010							; relative and 4 bytes of data, pattern 2
 119+ E05C ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 120+ E05F 3E 41        	ld		a,%01000001							; big unified composite
 121+ E061 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 122+ E064 C9           	ret
 123+ E065
 124+ E065
 125+ E065 7A           single_sprite:          ld		a,d                                 ; a = sprite nbr, bug fix?
 126+ E066 F5                                   push	af									; save id for next few
 127+ E067 D5                                   push	de
 128+ E068 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 129+ E06B              ; write out X position bits 1 to 8
 130+ E06B 79                                   ld		a,c
 131+ E06C 21 11 00                             ld      hl,spritecursoroffset
 132+ E06F ED 31                                add		hl,a                                ; hl = full x position
 133+ E071 7D                                   ld		a,l
 134+ E072 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 135+ E075              ; write out Y position bits 1 to 8
 136+ E075 EB                                   ex		de,hl								; de = full x position
 137+ E076 78                                   ld		a,b
 138+ E077 21 11 00                             ld      hl,spritecursoroffset
 139+ E07A ED 31                                add		hl,a
 140+ E07C 7D                                   ld		a,l                                 ; hl = full y position
 141+ E07D ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 142+ E080              ; write out MSB of X as its an anchor
 143+ E080 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 144+ E081 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 145+ E084              ; write out sprite pattern
 146+ E084 D1                                   pop		de                                  ; de = pattern and sprite nbr
 147+ E085 7B                                   ld		a,e
 148+ E086 F6 80                                or		%10000000							;
 149+ E088 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 150+ E08B C9                                   ret
 151+ E08C
 152+ E08C              sprite_galactic_cursor:
 153+ E08C              ; ">sprite_galactic_cursor BC = rowcol"
 154+ E08C 16 00        	ld		d,galactic_cursor_sprite
 155+ E08E 1E 00        	ld		e,0
 156+ E090 78           	ld		a,b
 157+ E091 C6 18        	add		a,galactic_chart_y_offset
 158+ E093 47           	ld		b,a
 159+ E094 CD 00 E0     	call	sprite_big
 159+ E097
 160+ E097 C9           	ret
 161+ E098
 162+ E098              sprite_galactic_hyper_cursor:
 163+ E098              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 164+ E098 78           	ld		a,b
 165+ E099 C6 18        	add		a,galactic_chart_y_offset
 166+ E09B 47           	ld		b,a
 167+ E09C 16 04        	ld		d,galactic_hyper_sprite
 168+ E09E 1E 03        	ld		e,3
 169+ E0A0 CD 00 E0     	call	sprite_big
 169+ E0A3
 170+ E0A3 C9           	ret
 171+ E0A4
 172+ E0A4              sprite_ghc_move:
 173+ E0A4 3E 04        	ld		a,galactic_hyper_sprite
 174+ E0A6 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 175+ E0A9              ; write out X position bits 1 to 8
 176+ E0A9 79           	ld		a,c
 177+ E0AA 21 11 00         ld      hl,spritecursoroffset
 178+ E0AD ED 31        	add		hl,a                                ; hl = full x position
 179+ E0AF 7D           	ld		a,l
 180+ E0B0 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 181+ E0B3              ; write out Y position bits 1 to 8
 182+ E0B3 EB           	ex		de,hl								; de = full x position
 183+ E0B4 78               ld      a,b
 184+ E0B5 C6 18        	add		a,galactic_chart_y_offset
 185+ E0B7 47           	ld		b,a
 186+ E0B8 78           	ld		a,b
 187+ E0B9 21 11 00         ld      hl,spritecursoroffset
 188+ E0BC ED 31        	add		hl,a
 189+ E0BE 7D           	ld		a,l                                 ; hl = full y position
 190+ E0BF ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 191+ E0C2              ; write out MSB of X as its an anchor
 192+ E0C2 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 193+ E0C3 ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 194+ E0C6              ; write out msb of y in h must be bit 0 only
 195+ E0C6 3E 00        	ld		a,%00000000							; big unified composite
 196+ E0C8 B2           	or		d									; MSB Y
 197+ E0C9 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 198+ E0CC C9               ret
 199+ E0CD
 200+ E0CD
 201+ E0CD              sprite_lhc_move:
 202+ E0CD 3E 0A        	ld		a,local_hyper_sprite
 203+ E0CF ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 204+ E0D2              ; write out X position bits 1 to 8
 205+ E0D2 79           	ld		a,c
 206+ E0D3 21 11 00         ld      hl,spritecursoroffset
 207+ E0D6 ED 31        	add		hl,a                                ; hl = full x position
 208+ E0D8 7D           	ld		a,l
 209+ E0D9 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 210+ E0DC              ; write out Y position bits 1 to 8
 211+ E0DC EB           	ex		de,hl								; de = full x position
 212+ E0DD 78           	ld		a,b
 213+ E0DE 21 11 00         ld      hl,spritecursoroffset
 214+ E0E1 ED 31        	add		hl,a
 215+ E0E3 7D           	ld		a,l                                 ; hl = full y position
 216+ E0E4 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 217+ E0E7              ; write out MSB of X as its an anchor
 218+ E0E7 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 219+ E0E8 ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 220+ E0EB              ; write out msb of y in h must be bit 0 only
 221+ E0EB 3E 00        	ld		a,%00000000							; big unified composite
 222+ E0ED B2           	or		d									; MSB Y
 223+ E0EE ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 224+ E0F1 C9               ret
 225+ E0F2
 226+ E0F2              ; "sprite_local_cursor BC = rowcol"
 227+ E0F2 16 07        sprite_local_cursor:        ld		d,local_cursor_sprite
 228+ E0F4 1E 06                                    ld		e,6
 229+ E0F6 CD 00 E0                                 call	sprite_big
 230+ E0F9 C9                                       ret
 231+ E0FA
 232+ E0FA              ; "sprite_local_hyper_cursor BC = rowcol"
 233+ E0FA 16 0A        sprite_local_hyper_cursor:  ld		d,local_hyper_sprite
 234+ E0FC 1E 09                                    ld		e,9
 235+ E0FE CD 00 E0                                 call	sprite_big
 236+ E101 C9                                       ret
 237+ E102
 238+ E102              compass_offset          equ 2
 239+ E102              ScannerX                equ 128
 240+ E102              ScannerY                equ 171
 241+ E102              SunScanCenterX          equ 92
 242+ E102              SunScanCenterY          equ 171
 243+ E102
 244+ E102 3E 22        compass_sun_move:       ld		a,compass_sun
 245+ E104 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 246+ E107              ; write out X position bits 1 to 8
 247+ E107 3E 5A                                ld      a, SunScanCenterX-compass_offset
 248+ E109 81                                   add     a,c
 249+ E10A ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 250+ E10D              ; write out Y position bits 1 to 8
 251+ E10D 3E A9                                ld      a, SunScanCenterY-compass_offset
 252+ E10F 80                                   add     a,b
 253+ E110 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 254+ E113 C9                                   ret
 255+ E114
 256+ E114 3E 23        compass_station_move:   ld		a,compass_station
 257+ E116 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 258+ E119              ; write out X position bits 1 to 8
 259+ E119 79                                   ld		a,c
 260+ E11A 21 02 00                             ld      hl,compass_offset
 261+ E11D ED 31                                add		hl,a                                ; hl = full x position
 262+ E11F 7D                                   ld		a,l
 263+ E120 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 264+ E123              ; write out Y position bits 1 to 8
 265+ E123 EB                                   ex		de,hl								; de = full x position
 266+ E124 78                                   ld		a,b
 267+ E125 21 02 00                             ld      hl,compass_offset
 268+ E128 ED 31                                add		hl,a
 269+ E12A 7D                                   ld		a,l                                 ; hl = full y position
 270+ E12B ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 271+ E12E              ; write out MSB of X as its an anchor
 272+ E12E 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 273+ E12F ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 274+ E132 C9                                   ret
 275+ E133
 276+ E133              ReticuleCentreX      EQU (256/2)+32 -1
 277+ E133              ReticuleCentreY      EQU (192/2)+32 -1
 278+ E133              ReticuleOffset       EQU 8
 279+ E133
 280+ E133 3E 0E        sprite_reticule:    ld      a,reticlule_sprite1                 ; LEFT ARM
 281+ E135 ED 92 34                         nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 282+ E138 3E 87                            ld      a,ReticuleCentreX -16 - ReticuleOffset
 283+ E13A ED 92 35                         nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 284+ E13D 3E 7F                            ld		a,ReticuleCentreY
 285+ E13F ED 92 36                         nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 286+ E142 AF                               xor     a
 287+ E143 ED 92 37                         nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 288+ E146 3E 8D                            ld      a,reticule_pattern_2 | %10000000
 289+ E148 ED 92 38                         nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 290+ E14B 3E 0F        .rightReticule      ld      a,reticlule_sprite2                 ; RIGHT ARM
 291+ E14D ED 92 34                         nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 292+ E150 3E A7                            ld      a,ReticuleCentreX + ReticuleOffset
 293+ E152 ED 92 35                         nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 294+ E155 3E 7F                            ld		a,ReticuleCentreY
 295+ E157 ED 92 36                         nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 296+ E15A 3E 08                            ld      a,%00001000
 297+ E15C ED 92 37                         nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 298+ E15F 3E 8D                            ld      a,reticule_pattern_2 | %10000000
 299+ E161 ED 92 38                         nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 300+ E164 3E 10        .topReticule        ld      a,reticlule_sprite3
 301+ E166 ED 92 34                         nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 302+ E169 3E 9F                            ld      a,ReticuleCentreX
 303+ E16B ED 92 35                         nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 304+ E16E 3E 67                            ld		a,ReticuleCentreY-16 - ReticuleOffset
 305+ E170 ED 92 36                         nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 306+ E173 AF                               xor     a
 307+ E174 ED 92 37                         nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 308+ E177 3E 8C                            ld      a,reticule_pattern_1 | %10000000
 309+ E179 ED 92 38                         nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 310+ E17C 3E 11        .bottomReticule     ld      a,reticlule_sprite4
 311+ E17E ED 92 34                         nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 312+ E181 3E 9F                            ld      a,ReticuleCentreX
 313+ E183 ED 92 35                         nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 314+ E186 3E 87                            ld		a,ReticuleCentreY + ReticuleOffset
 315+ E188 ED 92 36                         nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 316+ E18B 3E 04                            ld      a,%00000100
 317+ E18D ED 92 37                         nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring vertical
 318+ E190 3E 8C                            ld      a,reticule_pattern_1 | %10000000
 319+ E192 ED 92 38                         nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 320+ E195 C9                               ret
 321+ E196
 322+ E196              laserbasex          equ 6
 323+ E196              laserbasey          equ 14
 324+ E196
 325+ E196              ShowSprite          MACRO   spritenbr, patternnbr
 326+ E196 ~                                ld      a, spritenbr
 327+ E196 ~                                nextreg SPRITE_PORT_INDEX_REGISTER,a
 328+ E196 ~                                ld      a,patternnbr | %10000000
 329+ E196 ~                                nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 330+ E196                                  ENDM
 331+ E196
 332+ E196              LeftLaser:          MACRO   xoffset, yoffset, spriteL, patternL
 333+ E196 ~                                ld      a, spriteL
 334+ E196 ~                                nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 335+ E196 ~                                ld      a,((laserbasex + xoffset) *8) + 32
 336+ E196 ~                                nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 337+ E196 ~                                ld		a,((laserbasey -yoffset) * 8) + 32 -1
 338+ E196 ~                                nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 339+ E196 ~                                xor     a
 340+ E196 ~                                nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 341+ E196 ~                                ld      a, patternL | %00000000             ; hidden by default
 342+ E196 ~                                nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 343+ E196                                  ENDM
 344+ E196
 345+ E196              RightLaser:         MACRO   xoffset, yoffset, spriteL, patternL
 346+ E196 ~                                ld      a, spriteL
 347+ E196 ~                                nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 348+ E196 ~                                ld      a,(((30-laserbasex) - xoffset) *8) + 32 -2
 349+ E196 ~                                nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 350+ E196 ~                                ld		a,((laserbasey -yoffset) * 8) + 32 -1
 351+ E196 ~                                nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 352+ E196 ~                                ld      a,%00001000
 353+ E196 ~                                nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 354+ E196 ~                                ld      a, patternL | %00000000             ; hidden by default
 355+ E196 ~                                nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 356+ E196                                  ENDM
 357+ E196
 358+ E196
 359+ E196              show_compass_sun_infront:ShowSprite  compass_sun, compass_sun_infront
 359+ E196 3E 22       >                    ld      a, compass_sun
 359+ E198 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 359+ E19B 3E 96       >                    ld      a,compass_sun_infront | %10000000
 359+ E19D ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 360+ E1A0 C9                                    ret
 361+ E1A1
 362+ E1A1              show_compass_sun_behind: ShowSprite  compass_sun, compass_sun_behind
 362+ E1A1 3E 22       >                    ld      a, compass_sun
 362+ E1A3 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 362+ E1A6 3E 97       >                    ld      a,compass_sun_behind | %10000000
 362+ E1A8 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 363+ E1AB C9                                    ret
 364+ E1AC
 365+ E1AC              show_compass_station_infront: ShowSprite  compass_station, compass_station_infront
 365+ E1AC 3E 23       >                    ld      a, compass_station
 365+ E1AE ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 365+ E1B1 3E 98       >                    ld      a,compass_station_infront | %10000000
 365+ E1B3 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 366+ E1B6 C9                                    ret
 367+ E1B7
 368+ E1B7              show_compass_statin_behind:   ShowSprite  compass_station, compass_station_behind
 368+ E1B7 3E 23       >                    ld      a, compass_station
 368+ E1B9 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 368+ E1BC 3E 99       >                    ld      a,compass_station_behind | %10000000
 368+ E1BE ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 369+ E1C1 C9                                    ret
 370+ E1C2
 371+ E1C2
 372+ E1C2              sprite_laser:       LeftLaser  0,0,laser_sprite1 ,laser_pattern_1
 372+ E1C2 3E 12       >                    ld      a, laser_sprite1
 372+ E1C4 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 372+ E1C7 3E 50       >                    ld      a,((laserbasex + 0) *8) + 32
 372+ E1C9 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 372+ E1CC 3E 8F       >                    ld		a,((laserbasey -0) * 8) + 32 -1
 372+ E1CE ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 372+ E1D1 AF          >                    xor     a
 372+ E1D2 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 372+ E1D5 3E 0E       >                    ld      a, laser_pattern_1 | %00000000             ; hidden by default
 372+ E1D7 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 373+ E1DA                                  LeftLaser  2,0,laser_sprite2 ,laser_pattern_2
 373+ E1DA 3E 13       >                    ld      a, laser_sprite2
 373+ E1DC ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 373+ E1DF 3E 60       >                    ld      a,((laserbasex + 2) *8) + 32
 373+ E1E1 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 373+ E1E4 3E 8F       >                    ld		a,((laserbasey -0) * 8) + 32 -1
 373+ E1E6 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 373+ E1E9 AF          >                    xor     a
 373+ E1EA ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 373+ E1ED 3E 0F       >                    ld      a, laser_pattern_2 | %00000000             ; hidden by default
 373+ E1EF ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 374+ E1F2                                  LeftLaser  4,1,laser_sprite3 ,laser_pattern_3
 374+ E1F2 3E 14       >                    ld      a, laser_sprite3
 374+ E1F4 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 374+ E1F7 3E 70       >                    ld      a,((laserbasex + 4) *8) + 32
 374+ E1F9 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 374+ E1FC 3E 87       >                    ld		a,((laserbasey -1) * 8) + 32 -1
 374+ E1FE ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 374+ E201 AF          >                    xor     a
 374+ E202 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 374+ E205 3E 10       >                    ld      a, laser_pattern_3 | %00000000             ; hidden by default
 374+ E207 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 375+ E20A                                  LeftLaser  6,2,laser_sprite4 ,laser_pattern_4
 375+ E20A 3E 15       >                    ld      a, laser_sprite4
 375+ E20C ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 375+ E20F 3E 80       >                    ld      a,((laserbasex + 6) *8) + 32
 375+ E211 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 375+ E214 3E 7F       >                    ld		a,((laserbasey -2) * 8) + 32 -1
 375+ E216 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 375+ E219 AF          >                    xor     a
 375+ E21A ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 375+ E21D 3E 11       >                    ld      a, laser_pattern_4 | %00000000             ; hidden by default
 375+ E21F ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 376+ E222                                  LeftLaser  8,2,laser_sprite5 ,laser_pattern_5
 376+ E222 3E 16       >                    ld      a, laser_sprite5
 376+ E224 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 376+ E227 3E 90       >                    ld      a,((laserbasex + 8) *8) + 32
 376+ E229 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 376+ E22C 3E 7F       >                    ld		a,((laserbasey -2) * 8) + 32 -1
 376+ E22E ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 376+ E231 AF          >                    xor     a
 376+ E232 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 376+ E235 3E 12       >                    ld      a, laser_pattern_5 | %00000000             ; hidden by default
 376+ E237 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 377+ E23A                                  RightLaser 0,0,laser_sprite9 ,laser_pattern_1
 377+ E23A 3E 1A       >                    ld      a, laser_sprite9
 377+ E23C ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 377+ E23F 3E DE       >                    ld      a,(((30-laserbasex) - 0) *8) + 32 -2
 377+ E241 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 377+ E244 3E 8F       >                    ld		a,((laserbasey -0) * 8) + 32 -1
 377+ E246 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 377+ E249 3E 08       >                    ld      a,%00001000
 377+ E24B ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 377+ E24E 3E 0E       >                    ld      a, laser_pattern_1 | %00000000             ; hidden by default
 377+ E250 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 378+ E253                                  RightLaser 2,0,laser_sprite10,laser_pattern_2
 378+ E253 3E 1B       >                    ld      a, laser_sprite10
 378+ E255 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 378+ E258 3E CE       >                    ld      a,(((30-laserbasex) - 2) *8) + 32 -2
 378+ E25A ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 378+ E25D 3E 8F       >                    ld		a,((laserbasey -0) * 8) + 32 -1
 378+ E25F ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 378+ E262 3E 08       >                    ld      a,%00001000
 378+ E264 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 378+ E267 3E 0F       >                    ld      a, laser_pattern_2 | %00000000             ; hidden by default
 378+ E269 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 379+ E26C                                  RightLaser 4,1,laser_sprite11,laser_pattern_3
 379+ E26C 3E 1C       >                    ld      a, laser_sprite11
 379+ E26E ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 379+ E271 3E BE       >                    ld      a,(((30-laserbasex) - 4) *8) + 32 -2
 379+ E273 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 379+ E276 3E 87       >                    ld		a,((laserbasey -1) * 8) + 32 -1
 379+ E278 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 379+ E27B 3E 08       >                    ld      a,%00001000
 379+ E27D ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 379+ E280 3E 10       >                    ld      a, laser_pattern_3 | %00000000             ; hidden by default
 379+ E282 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 380+ E285                                  RightLaser 6,2,laser_sprite12,laser_pattern_4
 380+ E285 3E 1D       >                    ld      a, laser_sprite12
 380+ E287 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 380+ E28A 3E AE       >                    ld      a,(((30-laserbasex) - 6) *8) + 32 -2
 380+ E28C ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 380+ E28F 3E 7F       >                    ld		a,((laserbasey -2) * 8) + 32 -1
 380+ E291 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 380+ E294 3E 08       >                    ld      a,%00001000
 380+ E296 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 380+ E299 3E 11       >                    ld      a, laser_pattern_4 | %00000000             ; hidden by default
 380+ E29B ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 381+ E29E                                  RightLaser 8,2,laser_sprite13,laser_pattern_5
 381+ E29E 3E 1E       >                    ld      a, laser_sprite13
 381+ E2A0 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 381+ E2A3 3E 9E       >                    ld      a,(((30-laserbasex) - 8) *8) + 32 -2
 381+ E2A5 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 381+ E2A8 3E 7F       >                    ld		a,((laserbasey -2) * 8) + 32 -1
 381+ E2AA ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 381+ E2AD 3E 08       >                    ld      a,%00001000
 381+ E2AF ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 381+ E2B2 3E 12       >                    ld      a, laser_pattern_5 | %00000000             ; hidden by default
 381+ E2B4 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 382+ E2B7
 383+ E2B7
 384+ E2B7 C9                               ret
 385+ E2B8                                  ; Need simple show updates just to update the show attribute
 386+ E2B8
 387+ E2B8              sprite_laser_show: ShowSprite laser_sprite1 ,laser_pattern_1
 387+ E2B8 3E 12       >                    ld      a, laser_sprite1
 387+ E2BA ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 387+ E2BD 3E 8E       >                    ld      a,laser_pattern_1 | %10000000
 387+ E2BF ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 388+ E2C2                                 ShowSprite laser_sprite2 ,laser_pattern_2
 388+ E2C2 3E 13       >                    ld      a, laser_sprite2
 388+ E2C4 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 388+ E2C7 3E 8F       >                    ld      a,laser_pattern_2 | %10000000
 388+ E2C9 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 389+ E2CC                                 ShowSprite laser_sprite3 ,laser_pattern_3
 389+ E2CC 3E 14       >                    ld      a, laser_sprite3
 389+ E2CE ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 389+ E2D1 3E 90       >                    ld      a,laser_pattern_3 | %10000000
 389+ E2D3 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 390+ E2D6                                 ShowSprite laser_sprite4 ,laser_pattern_4
 390+ E2D6 3E 15       >                    ld      a, laser_sprite4
 390+ E2D8 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 390+ E2DB 3E 91       >                    ld      a,laser_pattern_4 | %10000000
 390+ E2DD ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 391+ E2E0                                 ShowSprite laser_sprite5 ,laser_pattern_5
 391+ E2E0 3E 16       >                    ld      a, laser_sprite5
 391+ E2E2 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 391+ E2E5 3E 92       >                    ld      a,laser_pattern_5 | %10000000
 391+ E2E7 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 392+ E2EA
 393+ E2EA
 394+ E2EA                                 ShowSprite laser_sprite9 ,laser_pattern_1
 394+ E2EA 3E 1A       >                    ld      a, laser_sprite9
 394+ E2EC ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 394+ E2EF 3E 8E       >                    ld      a,laser_pattern_1 | %10000000
 394+ E2F1 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 395+ E2F4                                 ShowSprite laser_sprite10,laser_pattern_2
 395+ E2F4 3E 1B       >                    ld      a, laser_sprite10
 395+ E2F6 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 395+ E2F9 3E 8F       >                    ld      a,laser_pattern_2 | %10000000
 395+ E2FB ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 396+ E2FE                                 ShowSprite laser_sprite11,laser_pattern_3
 396+ E2FE 3E 1C       >                    ld      a, laser_sprite11
 396+ E300 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 396+ E303 3E 90       >                    ld      a,laser_pattern_3 | %10000000
 396+ E305 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 397+ E308                                 ShowSprite laser_sprite12,laser_pattern_4
 397+ E308 3E 1D       >                    ld      a, laser_sprite12
 397+ E30A ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 397+ E30D 3E 91       >                    ld      a,laser_pattern_4 | %10000000
 397+ E30F ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 398+ E312                                 ShowSprite laser_sprite13,laser_pattern_5
 398+ E312 3E 1E       >                    ld      a, laser_sprite13
 398+ E314 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 398+ E317 3E 92       >                    ld      a,laser_pattern_5 | %10000000
 398+ E319 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 399+ E31C
 400+ E31C
 401+ E31C C9                              ret
 402+ E31D
 403+ E31D              sprite_galactic_hide:
 404+ E31D ED 91 34 00  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 405+ E321 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 406+ E325 ED 91 34 01  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 407+ E329 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 408+ E32D ED 91 34 03  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 409+ E331 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 410+ E335 C9           	ret
 411+ E336
 412+ E336              sprite_galactic_hyper_hide:
 413+ E336 ED 91 34 04  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 414+ E33A ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 415+ E33E ED 91 34 05  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 416+ E342 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 417+ E346 ED 91 34 06  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 418+ E34A ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 419+ E34E C9           	ret
 420+ E34F
 421+ E34F              sprite_local_hide:
 422+ E34F ED 91 34 07  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 423+ E353 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 424+ E357 ED 91 34 08  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 425+ E35B ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 426+ E35F ED 91 34 09  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 427+ E363 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 428+ E367 C9           	ret
 429+ E368
 430+ E368              sprite_local_hyper_hide:
 431+ E368 ED 91 34 0A  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 432+ E36C ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 433+ E370 ED 91 34 0B  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 434+ E374 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 435+ E378 ED 91 34 0D  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 436+ E37C ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 437+ E380 C9           	ret
 438+ E381
 439+ E381
 440+ E381              sprite_reticule_hide:
 441+ E381 ED 91 34 0E  	nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite1
 442+ E385 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 443+ E389 ED 91 34 0F  	nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite2
 444+ E38D ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 445+ E391 ED 91 34 10  	nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite3
 446+ E395 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 447+ E399 ED 91 34 11  	nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite4
 448+ E39D ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 449+ E3A1 C9           	ret
 450+ E3A2
 451+ E3A2              sprite_laser_hide:
 452+ E3A2 ED 91 34 12  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite1
 453+ E3A6 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 454+ E3AA ED 91 34 13  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite2
 455+ E3AE ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 456+ E3B2 ED 91 34 14  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite3
 457+ E3B6 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 458+ E3BA ED 91 34 15  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite4
 459+ E3BE ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 460+ E3C2 ED 91 34 16  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite5
 461+ E3C6 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$0
 462+ E3CA ED 91 34 17  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite6
 463+ E3CE ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 464+ E3D2 ED 91 34 18  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite7
 465+ E3D6 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 466+ E3DA ED 91 34 19  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite8
 467+ E3DE ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 468+ E3E2 ED 91 34 1A      nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite9
 469+ E3E6 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 470+ E3EA ED 91 34 1B  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite10
 471+ E3EE ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 472+ E3F2 ED 91 34 1C  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite11
 473+ E3F6 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 474+ E3FA ED 91 34 1D  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite12
 475+ E3FE ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 476+ E402 ED 91 34 1E      nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite13
 477+ E406 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 478+ E40A ED 91 34 1F  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite14
 479+ E40E ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 480+ E412 ED 91 34 20  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite15
 481+ E416 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 482+ E41A ED 91 34 21  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite16
 483+ E41E ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 484+ E422 C9               ret
 485+ E423
 486+ E423              sprite_compass_hide:
 487+ E423 ED 91 34 22  	nextreg		SPRITE_PORT_INDEX_REGISTER,compass_sun
 488+ E427 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 489+ E42B ED 91 34 23  	nextreg		SPRITE_PORT_INDEX_REGISTER,compass_station
 490+ E42F ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 491+ E433 C9               ret
 492+ E434
 493+ E434              sprite_cls_cursors:
 494+ E434 CD 1D E3     	call	sprite_galactic_hide
 495+ E437 CD 36 E3     	call	sprite_galactic_hyper_hide
 496+ E43A CD 4F E3     	call	sprite_local_hide
 497+ E43D CD 68 E3     	call	sprite_local_hyper_hide
 498+ E440 CD 81 E3         call    sprite_reticule_hide
 499+ E443                  ;call    sprite_laser_hide
 500+ E443                  ;call    sprite_compass_hide
 501+ E443 C9           	ret
 502+ E444
 503+ E444              init_sprites:
 504+ E444 CD 34 E4     	call		sprite_cls_cursors
 505+ E447 ED 91 15 63  	nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,$63
 506+ E44B C9           	ret
 507+ E44C
# file closed: ./Layer3Sprites/sprite_routines.asm
1218  E44C                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E44C 01 3B 30     sprite_load_sprite_data:ld			bc, $303B; SPRITE_SLOT_PORT
   2+ E44F AF                                   xor			a
   3+ E450 ED 79                                out			(c),a							; Prime slot upload
   4+ E452 11 00 1A                             ld			de,26	* 256						; nbr of sprites to upload
   5+ E455 21 63 E4                             ld			hl,Sprite1						; sprites are stored contiguous
   6+ E458 01 5B 00     SpriteLoadLoop:	        ld			bc, $5b; SPRITE_PATTERN_UPLOAD_PORT
   7+ E45B ED 90                                outinb											; do final 256th sprite
   8+ E45D 1B                                   dec			de
   9+ E45E 7A                                   ld			a,d
  10+ E45F B3                                   or			e
  11+ E460 20 F6                                jr			nz,SpriteLoadLoop				; keep on rolling through sprites
  12+ E462 C9                                   ret
  13+ E463
# file closed: ./Layer3Sprites/sprite_load.asm
1219  E463                  INCLUDE "./Layer3Sprites/SpriteSheet.asm"
# file opened: ./Layer3Sprites/SpriteSheet.asm
   1+ E463              Sprite1:
   2+ E463 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   2+ E467 E3 E3 E3 E3
   2+ E46B E3 E3 E3 E3
   2+ E46F E3 E3 E3 E3
   3+ E473 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   3+ E477 E3 E3 E3 E3
   3+ E47B E3 E3 E3 E3
   3+ E47F E3 E3 E3 E3
   4+ E483 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   4+ E487 E3 E3 E3 E3
   4+ E48B E3 E3 E3 E3
   4+ E48F E3 E3 E3 E3
   5+ E493 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   5+ E497 E3 E3 E3 E3
   5+ E49B E3 E3 E3 E3
   5+ E49F E3 E3 E3 E3
   6+ E4A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   6+ E4A7 E3 E3 E3 E3
   6+ E4AB E3 E3 E3 E3
   6+ E4AF E3 E3 E3 E3
   7+ E4B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   7+ E4B7 E3 E3 E3 E3
   7+ E4BB E3 E3 E3 E3
   7+ E4BF E3 E3 E3 E3
   8+ E4C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   8+ E4C7 E3 E3 E3 E3
   8+ E4CB E3 E3 E3 E3
   8+ E4CF E3 E3 E3 E3
   9+ E4D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   9+ E4D7 E3 E3 E3 E3
   9+ E4DB E3 E3 E3 E3
   9+ E4DF E3 E3 E3 E3
  10+ E4E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  10+ E4E7 E3 E3 E3 E3
  10+ E4EB E3 E3 E3 E3
  10+ E4EF E3 E3 E3 90
  11+ E4F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  11+ E4F7 E3 E3 E3 E3
  11+ E4FB E3 E3 E3 E3
  11+ E4FF E3 E3 E3 B4
  12+ E503 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  12+ E507 E3 E3 E3 E3
  12+ E50B E3 E3 E3 E3
  12+ E50F E3 E3 E3 B4
  13+ E513 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  13+ E517 E3 E3 E3 E3
  13+ E51B E3 E3 E3 E3
  13+ E51F E3 E3 E3 D8
  14+ E523 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  14+ E527 E3 E3 E3 E3
  14+ E52B E3 E3 E3 E3
  14+ E52F E3 E3 E3 D8
  15+ E533 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  15+ E537 E3 E3 E3 E3
  15+ E53B E3 E3 E3 E3
  15+ E53F E3 E3 E3 FC
  16+ E543 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  16+ E547 E3 E3 E3 E3
  16+ E54B E3 E3 E3 E3
  16+ E54F E3 E3 E3 FC
  17+ E553 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90, $B4, $B4, $D8, $D8, $FC, $FC, $E3;
  17+ E557 E3 E3 E3 E3
  17+ E55B 90 B4 B4 D8
  17+ E55F D8 FC FC E3
  18+ E563
  19+ E563
  20+ E563
  21+ E563              Sprite2:
  22+ E563 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  22+ E567 E3 E3 E3 E3
  22+ E56B E3 E3 E3 E3
  22+ E56F E3 E3 E3 E3
  23+ E573 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  23+ E577 E3 E3 E3 E3
  23+ E57B E3 E3 E3 E3
  23+ E57F E3 E3 E3 E3
  24+ E583 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  24+ E587 E3 E3 E3 E3
  24+ E58B E3 E3 E3 E3
  24+ E58F E3 E3 E3 E3
  25+ E593 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  25+ E597 E3 E3 E3 E3
  25+ E59B E3 E3 E3 E3
  25+ E59F E3 E3 E3 E3
  26+ E5A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  26+ E5A7 E3 E3 E3 E3
  26+ E5AB E3 E3 E3 E3
  26+ E5AF E3 E3 E3 E3
  27+ E5B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  27+ E5B7 E3 E3 E3 E3
  27+ E5BB E3 E3 E3 E3
  27+ E5BF E3 E3 E3 E3
  28+ E5C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  28+ E5C7 E3 E3 E3 E3
  28+ E5CB E3 E3 E3 E3
  28+ E5CF E3 E3 E3 E3
  29+ E5D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  29+ E5D7 E3 E3 E3 E3
  29+ E5DB E3 E3 E3 E3
  29+ E5DF E3 E3 E3 E3
  30+ E5E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  30+ E5E7 E3 E3 E3 E3
  30+ E5EB E3 E3 E3 E3
  30+ E5EF E3 E3 E3 E3
  31+ E5F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  31+ E5F7 E3 E3 E3 E3
  31+ E5FB E3 E3 E3 E3
  31+ E5FF E3 E3 E3 E3
  32+ E603 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  32+ E607 E3 E3 E3 E3
  32+ E60B E3 E3 E3 E3
  32+ E60F E3 E3 E3 E3
  33+ E613 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  33+ E617 E3 E3 E3 E3
  33+ E61B E3 E3 E3 E3
  33+ E61F E3 E3 E3 E3
  34+ E623 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  34+ E627 E3 E3 E3 E3
  34+ E62B E3 E3 E3 E3
  34+ E62F E3 E3 E3 E3
  35+ E633 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  35+ E637 E3 E3 E3 E3
  35+ E63B E3 E3 E3 E3
  35+ E63F E3 E3 E3 E3
  36+ E643 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  36+ E647 E3 E3 E3 E3
  36+ E64B E3 E3 E3 E3
  36+ E64F E3 E3 E3 E3
  37+ E653 FC FC D8 D8  	db  $FC, $FC, $D8, $D8, $B4, $B4, $90, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  37+ E657 B4 B4 90 E3
  37+ E65B E3 E3 E3 E3
  37+ E65F E3 E3 E3 E3
  38+ E663
  39+ E663
  40+ E663
  41+ E663              Sprite3:
  42+ E663 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  42+ E667 E3 E3 E3 E3
  42+ E66B E3 E3 E3 E3
  42+ E66F E3 E3 E3 FC
  43+ E673 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  43+ E677 E3 E3 E3 E3
  43+ E67B E3 E3 E3 E3
  43+ E67F E3 E3 E3 FC
  44+ E683 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  44+ E687 E3 E3 E3 E3
  44+ E68B E3 E3 E3 E3
  44+ E68F E3 E3 E3 D8
  45+ E693 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  45+ E697 E3 E3 E3 E3
  45+ E69B E3 E3 E3 E3
  45+ E69F E3 E3 E3 D8
  46+ E6A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  46+ E6A7 E3 E3 E3 E3
  46+ E6AB E3 E3 E3 E3
  46+ E6AF E3 E3 E3 B4
  47+ E6B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  47+ E6B7 E3 E3 E3 E3
  47+ E6BB E3 E3 E3 E3
  47+ E6BF E3 E3 E3 B4
  48+ E6C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  48+ E6C7 E3 E3 E3 E3
  48+ E6CB E3 E3 E3 E3
  48+ E6CF E3 E3 E3 90
  49+ E6D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  49+ E6D7 E3 E3 E3 E3
  49+ E6DB E3 E3 E3 E3
  49+ E6DF E3 E3 E3 E3
  50+ E6E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  50+ E6E7 E3 E3 E3 E3
  50+ E6EB E3 E3 E3 E3
  50+ E6EF E3 E3 E3 E3
  51+ E6F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  51+ E6F7 E3 E3 E3 E3
  51+ E6FB E3 E3 E3 E3
  51+ E6FF E3 E3 E3 E3
  52+ E703 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  52+ E707 E3 E3 E3 E3
  52+ E70B E3 E3 E3 E3
  52+ E70F E3 E3 E3 E3
  53+ E713 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  53+ E717 E3 E3 E3 E3
  53+ E71B E3 E3 E3 E3
  53+ E71F E3 E3 E3 E3
  54+ E723 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  54+ E727 E3 E3 E3 E3
  54+ E72B E3 E3 E3 E3
  54+ E72F E3 E3 E3 E3
  55+ E733 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  55+ E737 E3 E3 E3 E3
  55+ E73B E3 E3 E3 E3
  55+ E73F E3 E3 E3 E3
  56+ E743 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  56+ E747 E3 E3 E3 E3
  56+ E74B E3 E3 E3 E3
  56+ E74F E3 E3 E3 E3
  57+ E753 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  57+ E757 E3 E3 E3 E3
  57+ E75B E3 E3 E3 E3
  57+ E75F E3 E3 E3 E3
  58+ E763
  59+ E763
  60+ E763
  61+ E763              Sprite4:
  62+ E763 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  62+ E767 E3 E3 E3 E3
  62+ E76B E3 E3 E3 E3
  62+ E76F E3 E3 E3 E3
  63+ E773 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  63+ E777 E3 E3 E3 E3
  63+ E77B E3 E3 E3 E3
  63+ E77F E3 E3 E3 E3
  64+ E783 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  64+ E787 E3 E3 E3 E3
  64+ E78B E3 E3 E3 E3
  64+ E78F E3 E3 E3 E3
  65+ E793 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  65+ E797 E3 E3 E3 E3
  65+ E79B E3 E3 E3 E3
  65+ E79F E3 E3 E3 E3
  66+ E7A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  66+ E7A7 E3 E3 E3 E3
  66+ E7AB E3 E3 E3 E3
  66+ E7AF E3 E3 E3 E3
  67+ E7B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  67+ E7B7 E3 E3 E3 E3
  67+ E7BB E3 E3 E3 E3
  67+ E7BF E3 E3 E3 E3
  68+ E7C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  68+ E7C7 E3 E3 E3 E3
  68+ E7CB E3 E3 E3 E3
  68+ E7CF E3 E3 E3 E3
  69+ E7D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  69+ E7D7 E3 E3 E3 E3
  69+ E7DB E3 E3 E3 E3
  69+ E7DF E3 E3 E3 E3
  70+ E7E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  70+ E7E7 E3 E3 E3 E3
  70+ E7EB E3 E3 E3 E3
  70+ E7EF E3 E3 E3 E3
  71+ E7F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  71+ E7F7 E3 E3 E3 E3
  71+ E7FB E3 E3 E3 E3
  71+ E7FF E3 E3 E3 E3
  72+ E803 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  72+ E807 E3 E3 E3 E3
  72+ E80B E3 E3 E3 E3
  72+ E80F E3 E3 E3 E3
  73+ E813 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
  73+ E817 E3 E3 E3 E3
  73+ E81B E3 E3 E3 E3
  73+ E81F E3 E3 E3 12
  74+ E823 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
  74+ E827 E3 E3 E3 E3
  74+ E82B E3 E3 E3 E3
  74+ E82F E3 E3 E3 16
  75+ E833 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
  75+ E837 E3 E3 E3 E3
  75+ E83B E3 E3 E3 E3
  75+ E83F E3 E3 E3 1A
  76+ E843 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
  76+ E847 E3 E3 E3 E3
  76+ E84B E3 E3 E3 E3
  76+ E84F E3 E3 E3 1F
  77+ E853 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12, $16, $1A, $1F, $E3;
  77+ E857 E3 E3 E3 E3
  77+ E85B E3 E3 E3 12
  77+ E85F 16 1A 1F E3
  78+ E863
  79+ E863
  80+ E863
  81+ E863              Sprite5:
  82+ E863 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  82+ E867 E3 E3 E3 E3
  82+ E86B E3 E3 E3 E3
  82+ E86F E3 E3 E3 E3
  83+ E873 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  83+ E877 E3 E3 E3 E3
  83+ E87B E3 E3 E3 E3
  83+ E87F E3 E3 E3 E3
  84+ E883 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  84+ E887 E3 E3 E3 E3
  84+ E88B E3 E3 E3 E3
  84+ E88F E3 E3 E3 E3
  85+ E893 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  85+ E897 E3 E3 E3 E3
  85+ E89B E3 E3 E3 E3
  85+ E89F E3 E3 E3 E3
  86+ E8A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  86+ E8A7 E3 E3 E3 E3
  86+ E8AB E3 E3 E3 E3
  86+ E8AF E3 E3 E3 E3
  87+ E8B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  87+ E8B7 E3 E3 E3 E3
  87+ E8BB E3 E3 E3 E3
  87+ E8BF E3 E3 E3 E3
  88+ E8C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  88+ E8C7 E3 E3 E3 E3
  88+ E8CB E3 E3 E3 E3
  88+ E8CF E3 E3 E3 E3
  89+ E8D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  89+ E8D7 E3 E3 E3 E3
  89+ E8DB E3 E3 E3 E3
  89+ E8DF E3 E3 E3 E3
  90+ E8E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  90+ E8E7 E3 E3 E3 E3
  90+ E8EB E3 E3 E3 E3
  90+ E8EF E3 E3 E3 E3
  91+ E8F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  91+ E8F7 E3 E3 E3 E3
  91+ E8FB E3 E3 E3 E3
  91+ E8FF E3 E3 E3 E3
  92+ E903 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  92+ E907 E3 E3 E3 E3
  92+ E90B E3 E3 E3 E3
  92+ E90F E3 E3 E3 E3
  93+ E913 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  93+ E917 E3 E3 E3 E3
  93+ E91B E3 E3 E3 E3
  93+ E91F E3 E3 E3 E3
  94+ E923 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  94+ E927 E3 E3 E3 E3
  94+ E92B E3 E3 E3 E3
  94+ E92F E3 E3 E3 E3
  95+ E933 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  95+ E937 E3 E3 E3 E3
  95+ E93B E3 E3 E3 E3
  95+ E93F E3 E3 E3 E3
  96+ E943 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  96+ E947 E3 E3 E3 E3
  96+ E94B E3 E3 E3 E3
  96+ E94F E3 E3 E3 E3
  97+ E953 1F 1A 16 12  	db  $1F, $1A, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  97+ E957 E3 E3 E3 E3
  97+ E95B E3 E3 E3 E3
  97+ E95F E3 E3 E3 E3
  98+ E963
  99+ E963
 100+ E963
 101+ E963              Sprite6:
 102+ E963 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
 102+ E967 E3 E3 E3 E3
 102+ E96B E3 E3 E3 E3
 102+ E96F E3 E3 E3 1F
 103+ E973 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
 103+ E977 E3 E3 E3 E3
 103+ E97B E3 E3 E3 E3
 103+ E97F E3 E3 E3 1A
 104+ E983 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
 104+ E987 E3 E3 E3 E3
 104+ E98B E3 E3 E3 E3
 104+ E98F E3 E3 E3 16
 105+ E993 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
 105+ E997 E3 E3 E3 E3
 105+ E99B E3 E3 E3 E3
 105+ E99F E3 E3 E3 12
 106+ E9A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 106+ E9A7 E3 E3 E3 E3
 106+ E9AB E3 E3 E3 E3
 106+ E9AF E3 E3 E3 E3
 107+ E9B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 107+ E9B7 E3 E3 E3 E3
 107+ E9BB E3 E3 E3 E3
 107+ E9BF E3 E3 E3 E3
 108+ E9C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 108+ E9C7 E3 E3 E3 E3
 108+ E9CB E3 E3 E3 E3
 108+ E9CF E3 E3 E3 E3
 109+ E9D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 109+ E9D7 E3 E3 E3 E3
 109+ E9DB E3 E3 E3 E3
 109+ E9DF E3 E3 E3 E3
 110+ E9E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 110+ E9E7 E3 E3 E3 E3
 110+ E9EB E3 E3 E3 E3
 110+ E9EF E3 E3 E3 E3
 111+ E9F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 111+ E9F7 E3 E3 E3 E3
 111+ E9FB E3 E3 E3 E3
 111+ E9FF E3 E3 E3 E3
 112+ EA03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 112+ EA07 E3 E3 E3 E3
 112+ EA0B E3 E3 E3 E3
 112+ EA0F E3 E3 E3 E3
 113+ EA13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 113+ EA17 E3 E3 E3 E3
 113+ EA1B E3 E3 E3 E3
 113+ EA1F E3 E3 E3 E3
 114+ EA23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 114+ EA27 E3 E3 E3 E3
 114+ EA2B E3 E3 E3 E3
 114+ EA2F E3 E3 E3 E3
 115+ EA33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 115+ EA37 E3 E3 E3 E3
 115+ EA3B E3 E3 E3 E3
 115+ EA3F E3 E3 E3 E3
 116+ EA43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 116+ EA47 E3 E3 E3 E3
 116+ EA4B E3 E3 E3 E3
 116+ EA4F E3 E3 E3 E3
 117+ EA53 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 117+ EA57 E3 E3 E3 E3
 117+ EA5B E3 E3 E3 E3
 117+ EA5F E3 E3 E3 E3
 118+ EA63
 119+ EA63
 120+ EA63
 121+ EA63              Sprite7:
 122+ EA63 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 122+ EA67 E3 E3 E3 E3
 122+ EA6B E3 E3 E3 E3
 122+ EA6F E3 E3 E3 E3
 123+ EA73 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 123+ EA77 E3 E3 E3 E3
 123+ EA7B E3 E3 E3 E3
 123+ EA7F E3 E3 E3 09
 124+ EA83 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 124+ EA87 E3 E3 E3 E3
 124+ EA8B E3 E3 E3 E3
 124+ EA8F E3 E3 E3 09
 125+ EA93 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 125+ EA97 E3 E3 E3 E3
 125+ EA9B E3 E3 E3 E3
 125+ EA9F E3 E3 E3 2C
 126+ EAA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 126+ EAA7 E3 E3 E3 E3
 126+ EAAB E3 E3 E3 E3
 126+ EAAF E3 E3 E3 2C
 127+ EAB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 127+ EAB7 E3 E3 E3 E3
 127+ EABB E3 E3 E3 E3
 127+ EABF E3 E3 E3 50
 128+ EAC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 128+ EAC7 E3 E3 E3 E3
 128+ EACB E3 E3 E3 E3
 128+ EACF E3 E3 E3 50
 129+ EAD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 129+ EAD7 E3 E3 E3 E3
 129+ EADB E3 E3 E3 E3
 129+ EADF E3 E3 E3 50
 130+ EAE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 130+ EAE7 E3 E3 E3 E3
 130+ EAEB E3 E3 E3 E3
 130+ EAEF E3 E3 E3 15
 131+ EAF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 131+ EAF7 E3 E3 E3 E3
 131+ EAFB E3 E3 E3 E3
 131+ EAFF E3 E3 E3 15
 132+ EB03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 132+ EB07 E3 E3 E3 E3
 132+ EB0B E3 E3 E3 E3
 132+ EB0F E3 E3 E3 15
 133+ EB13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 133+ EB17 E3 E3 E3 E3
 133+ EB1B E3 E3 E3 E3
 133+ EB1F E3 E3 E3 7C
 134+ EB23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 134+ EB27 E3 E3 E3 E3
 134+ EB2B E3 E3 E3 E3
 134+ EB2F E3 E3 E3 7C
 135+ EB33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 135+ EB37 E3 E3 E3 E3
 135+ EB3B E3 E3 E3 E3
 135+ EB3F E3 E3 E3 7C
 136+ EB43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 136+ EB47 E3 E3 E3 E3
 136+ EB4B E3 E3 E3 E3
 136+ EB4F E3 E3 E3 7C
 137+ EB53 E3 09 09 2C  	db  $E3, $09, $09, $2C, $2C, $50, $50, $50, $15, $15, $15, $7C, $7C, $7C, $7C, $E3;
 137+ EB57 2C 50 50 50
 137+ EB5B 15 15 15 7C
 137+ EB5F 7C 7C 7C E3
 138+ EB63
 139+ EB63
 140+ EB63
 141+ EB63              Sprite8:
 142+ EB63 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 142+ EB67 E3 E3 E3 E3
 142+ EB6B E3 E3 E3 E3
 142+ EB6F E3 E3 E3 E3
 143+ EB73 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 143+ EB77 E3 E3 E3 E3
 143+ EB7B E3 E3 E3 E3
 143+ EB7F E3 E3 E3 E3
 144+ EB83 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 144+ EB87 E3 E3 E3 E3
 144+ EB8B E3 E3 E3 E3
 144+ EB8F E3 E3 E3 E3
 145+ EB93 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 145+ EB97 E3 E3 E3 E3
 145+ EB9B E3 E3 E3 E3
 145+ EB9F E3 E3 E3 E3
 146+ EBA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 146+ EBA7 E3 E3 E3 E3
 146+ EBAB E3 E3 E3 E3
 146+ EBAF E3 E3 E3 E3
 147+ EBB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 147+ EBB7 E3 E3 E3 E3
 147+ EBBB E3 E3 E3 E3
 147+ EBBF E3 E3 E3 E3
 148+ EBC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 148+ EBC7 E3 E3 E3 E3
 148+ EBCB E3 E3 E3 E3
 148+ EBCF E3 E3 E3 E3
 149+ EBD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 149+ EBD7 E3 E3 E3 E3
 149+ EBDB E3 E3 E3 E3
 149+ EBDF E3 E3 E3 E3
 150+ EBE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 150+ EBE7 E3 E3 E3 E3
 150+ EBEB E3 E3 E3 E3
 150+ EBEF E3 E3 E3 E3
 151+ EBF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 151+ EBF7 E3 E3 E3 E3
 151+ EBFB E3 E3 E3 E3
 151+ EBFF E3 E3 E3 E3
 152+ EC03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 152+ EC07 E3 E3 E3 E3
 152+ EC0B E3 E3 E3 E3
 152+ EC0F E3 E3 E3 E3
 153+ EC13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 153+ EC17 E3 E3 E3 E3
 153+ EC1B E3 E3 E3 E3
 153+ EC1F E3 E3 E3 E3
 154+ EC23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 154+ EC27 E3 E3 E3 E3
 154+ EC2B E3 E3 E3 E3
 154+ EC2F E3 E3 E3 E3
 155+ EC33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 155+ EC37 E3 E3 E3 E3
 155+ EC3B E3 E3 E3 E3
 155+ EC3F E3 E3 E3 E3
 156+ EC43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 156+ EC47 E3 E3 E3 E3
 156+ EC4B E3 E3 E3 E3
 156+ EC4F E3 E3 E3 E3
 157+ EC53 7C 7C 7C 7C  	db  $7C, $7C, $7C, $7C, $15, $15, $15, $50, $50, $50, $2C, $2C, $09, $09, $E3, $E3;
 157+ EC57 15 15 15 50
 157+ EC5B 50 50 2C 2C
 157+ EC5F 09 09 E3 E3
 158+ EC63
 159+ EC63
 160+ EC63
 161+ EC63              Sprite9:
 162+ EC63 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 162+ EC67 E3 E3 E3 E3
 162+ EC6B E3 E3 E3 E3
 162+ EC6F E3 E3 E3 7C
 163+ EC73 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 163+ EC77 E3 E3 E3 E3
 163+ EC7B E3 E3 E3 E3
 163+ EC7F E3 E3 E3 7C
 164+ EC83 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 164+ EC87 E3 E3 E3 E3
 164+ EC8B E3 E3 E3 E3
 164+ EC8F E3 E3 E3 7C
 165+ EC93 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 165+ EC97 E3 E3 E3 E3
 165+ EC9B E3 E3 E3 E3
 165+ EC9F E3 E3 E3 7C
 166+ ECA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 166+ ECA7 E3 E3 E3 E3
 166+ ECAB E3 E3 E3 E3
 166+ ECAF E3 E3 E3 15
 167+ ECB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 167+ ECB7 E3 E3 E3 E3
 167+ ECBB E3 E3 E3 E3
 167+ ECBF E3 E3 E3 15
 168+ ECC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 168+ ECC7 E3 E3 E3 E3
 168+ ECCB E3 E3 E3 E3
 168+ ECCF E3 E3 E3 15
 169+ ECD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 169+ ECD7 E3 E3 E3 E3
 169+ ECDB E3 E3 E3 E3
 169+ ECDF E3 E3 E3 50
 170+ ECE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 170+ ECE7 E3 E3 E3 E3
 170+ ECEB E3 E3 E3 E3
 170+ ECEF E3 E3 E3 50
 171+ ECF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 171+ ECF7 E3 E3 E3 E3
 171+ ECFB E3 E3 E3 E3
 171+ ECFF E3 E3 E3 50
 172+ ED03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 172+ ED07 E3 E3 E3 E3
 172+ ED0B E3 E3 E3 E3
 172+ ED0F E3 E3 E3 2C
 173+ ED13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 173+ ED17 E3 E3 E3 E3
 173+ ED1B E3 E3 E3 E3
 173+ ED1F E3 E3 E3 2C
 174+ ED23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 174+ ED27 E3 E3 E3 E3
 174+ ED2B E3 E3 E3 E3
 174+ ED2F E3 E3 E3 09
 175+ ED33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 175+ ED37 E3 E3 E3 E3
 175+ ED3B E3 E3 E3 E3
 175+ ED3F E3 E3 E3 09
 176+ ED43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 176+ ED47 E3 E3 E3 E3
 176+ ED4B E3 E3 E3 E3
 176+ ED4F E3 E3 E3 E3
 177+ ED53 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 177+ ED57 E3 E3 E3 E3
 177+ ED5B E3 E3 E3 E3
 177+ ED5F E3 E3 E3 E3
 178+ ED63
 179+ ED63
 180+ ED63
 181+ ED63              Sprite10:
 182+ ED63 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 182+ ED67 E3 E3 E3 E3
 182+ ED6B E3 E3 E3 E3
 182+ ED6F E3 E3 E3 E3
 183+ ED73 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 183+ ED77 E3 E3 E3 E3
 183+ ED7B E3 E3 E3 E3
 183+ ED7F E3 E3 E3 44
 184+ ED83 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 184+ ED87 E3 E3 E3 E3
 184+ ED8B E3 E3 E3 E3
 184+ ED8F E3 E3 E3 64
 185+ ED93 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 185+ ED97 E3 E3 E3 E3
 185+ ED9B E3 E3 E3 E3
 185+ ED9F E3 E3 E3 64
 186+ EDA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 186+ EDA7 E3 E3 E3 E3
 186+ EDAB E3 E3 E3 E3
 186+ EDAF E3 E3 E3 64
 187+ EDB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 187+ EDB7 E3 E3 E3 E3
 187+ EDBB E3 E3 E3 E3
 187+ EDBF E3 E3 E3 A8
 188+ EDC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 188+ EDC7 E3 E3 E3 E3
 188+ EDCB E3 E3 E3 E3
 188+ EDCF E3 E3 E3 A8
 189+ EDD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 189+ EDD7 E3 E3 E3 E3
 189+ EDDB E3 E3 E3 E3
 189+ EDDF E3 E3 E3 A8
 190+ EDE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 190+ EDE7 E3 E3 E3 E3
 190+ EDEB E3 E3 E3 E3
 190+ EDEF E3 E3 E3 CC
 191+ EDF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 191+ EDF7 E3 E3 E3 E3
 191+ EDFB E3 E3 E3 E3
 191+ EDFF E3 E3 E3 CC
 192+ EE03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 192+ EE07 E3 E3 E3 E3
 192+ EE0B E3 E3 E3 E3
 192+ EE0F E3 E3 E3 CC
 193+ EE13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 193+ EE17 E3 E3 E3 E3
 193+ EE1B E3 E3 E3 E3
 193+ EE1F E3 E3 E3 EC
 194+ EE23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 194+ EE27 E3 E3 E3 E3
 194+ EE2B E3 E3 E3 E3
 194+ EE2F E3 E3 E3 EC
 195+ EE33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 195+ EE37 E3 E3 E3 E3
 195+ EE3B E3 E3 E3 E3
 195+ EE3F E3 E3 E3 EC
 196+ EE43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 196+ EE47 E3 E3 E3 E3
 196+ EE4B E3 E3 E3 E3
 196+ EE4F E3 E3 E3 EC
 197+ EE53 E3 44 64 64  	db  $E3, $44, $64, $64, $64, $A8, $A8, $A8, $CC, $CC, $CC, $EC, $EC, $EC, $EC, $E3;
 197+ EE57 64 A8 A8 A8
 197+ EE5B CC CC CC EC
 197+ EE5F EC EC EC E3
 198+ EE63
 199+ EE63
 200+ EE63
 201+ EE63              Sprite11:
 202+ EE63 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 202+ EE67 E3 E3 E3 E3
 202+ EE6B E3 E3 E3 E3
 202+ EE6F E3 E3 E3 E3
 203+ EE73 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 203+ EE77 E3 E3 E3 E3
 203+ EE7B E3 E3 E3 E3
 203+ EE7F E3 E3 E3 E3
 204+ EE83 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 204+ EE87 E3 E3 E3 E3
 204+ EE8B E3 E3 E3 E3
 204+ EE8F E3 E3 E3 E3
 205+ EE93 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 205+ EE97 E3 E3 E3 E3
 205+ EE9B E3 E3 E3 E3
 205+ EE9F E3 E3 E3 E3
 206+ EEA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 206+ EEA7 E3 E3 E3 E3
 206+ EEAB E3 E3 E3 E3
 206+ EEAF E3 E3 E3 E3
 207+ EEB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 207+ EEB7 E3 E3 E3 E3
 207+ EEBB E3 E3 E3 E3
 207+ EEBF E3 E3 E3 E3
 208+ EEC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 208+ EEC7 E3 E3 E3 E3
 208+ EECB E3 E3 E3 E3
 208+ EECF E3 E3 E3 E3
 209+ EED3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 209+ EED7 E3 E3 E3 E3
 209+ EEDB E3 E3 E3 E3
 209+ EEDF E3 E3 E3 E3
 210+ EEE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 210+ EEE7 E3 E3 E3 E3
 210+ EEEB E3 E3 E3 E3
 210+ EEEF E3 E3 E3 E3
 211+ EEF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 211+ EEF7 E3 E3 E3 E3
 211+ EEFB E3 E3 E3 E3
 211+ EEFF E3 E3 E3 E3
 212+ EF03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 212+ EF07 E3 E3 E3 E3
 212+ EF0B E3 E3 E3 E3
 212+ EF0F E3 E3 E3 E3
 213+ EF13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 213+ EF17 E3 E3 E3 E3
 213+ EF1B E3 E3 E3 E3
 213+ EF1F E3 E3 E3 E3
 214+ EF23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 214+ EF27 E3 E3 E3 E3
 214+ EF2B E3 E3 E3 E3
 214+ EF2F E3 E3 E3 E3
 215+ EF33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 215+ EF37 E3 E3 E3 E3
 215+ EF3B E3 E3 E3 E3
 215+ EF3F E3 E3 E3 E3
 216+ EF43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 216+ EF47 E3 E3 E3 E3
 216+ EF4B E3 E3 E3 E3
 216+ EF4F E3 E3 E3 E3
 217+ EF53 EC EC EC EC  	db  $EC, $EC, $EC, $EC, $CC, $CC, $CC, $A8, $A8, $A8, $64, $64, $64, $44, $E3, $E3;
 217+ EF57 CC CC CC A8
 217+ EF5B A8 A8 64 64
 217+ EF5F 64 44 E3 E3
 218+ EF63
 219+ EF63
 220+ EF63
 221+ EF63              Sprite12:
 222+ EF63 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 222+ EF67 E3 E3 E3 E3
 222+ EF6B E3 E3 E3 E3
 222+ EF6F E3 E3 E3 EC
 223+ EF73 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 223+ EF77 E3 E3 E3 E3
 223+ EF7B E3 E3 E3 E3
 223+ EF7F E3 E3 E3 EC
 224+ EF83 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 224+ EF87 E3 E3 E3 E3
 224+ EF8B E3 E3 E3 E3
 224+ EF8F E3 E3 E3 EC
 225+ EF93 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 225+ EF97 E3 E3 E3 E3
 225+ EF9B E3 E3 E3 E3
 225+ EF9F E3 E3 E3 EC
 226+ EFA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 226+ EFA7 E3 E3 E3 E3
 226+ EFAB E3 E3 E3 E3
 226+ EFAF E3 E3 E3 CC
 227+ EFB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 227+ EFB7 E3 E3 E3 E3
 227+ EFBB E3 E3 E3 E3
 227+ EFBF E3 E3 E3 CC
 228+ EFC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 228+ EFC7 E3 E3 E3 E3
 228+ EFCB E3 E3 E3 E3
 228+ EFCF E3 E3 E3 CC
 229+ EFD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 229+ EFD7 E3 E3 E3 E3
 229+ EFDB E3 E3 E3 E3
 229+ EFDF E3 E3 E3 A8
 230+ EFE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 230+ EFE7 E3 E3 E3 E3
 230+ EFEB E3 E3 E3 E3
 230+ EFEF E3 E3 E3 A8
 231+ EFF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 231+ EFF7 E3 E3 E3 E3
 231+ EFFB E3 E3 E3 E3
 231+ EFFF E3 E3 E3 A8
 232+ F003 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 232+ F007 E3 E3 E3 E3
 232+ F00B E3 E3 E3 E3
 232+ F00F E3 E3 E3 64
 233+ F013 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 233+ F017 E3 E3 E3 E3
 233+ F01B E3 E3 E3 E3
 233+ F01F E3 E3 E3 64
 234+ F023 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 234+ F027 E3 E3 E3 E3
 234+ F02B E3 E3 E3 E3
 234+ F02F E3 E3 E3 64
 235+ F033 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 235+ F037 E3 E3 E3 E3
 235+ F03B E3 E3 E3 E3
 235+ F03F E3 E3 E3 44
 236+ F043 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 236+ F047 E3 E3 E3 E3
 236+ F04B E3 E3 E3 E3
 236+ F04F E3 E3 E3 E3
 237+ F053 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 237+ F057 E3 E3 E3 E3
 237+ F05B E3 E3 E3 E3
 237+ F05F E3 E3 E3 E3
 238+ F063
 239+ F063
 240+ F063
 241+ F063              Sprite13:
 242+ F063 92 E3 E3 E3  	db  $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 242+ F067 E3 E3 E3 E3
 242+ F06B E3 E3 E3 E3
 242+ F06F E3 E3 E3 E3
 243+ F073 92 E3 E3 E3  	db  $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 243+ F077 E3 E3 E3 E3
 243+ F07B E3 E3 E3 E3
 243+ F07F E3 E3 E3 E3
 244+ F083 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 244+ F087 E3 E3 E3 E3
 244+ F08B E3 E3 E3 E3
 244+ F08F E3 E3 E3 E3
 245+ F093 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 245+ F097 E3 E3 E3 E3
 245+ F09B E3 E3 E3 E3
 245+ F09F E3 E3 E3 E3
 246+ F0A3 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 246+ F0A7 E3 E3 E3 E3
 246+ F0AB E3 E3 E3 E3
 246+ F0AF E3 E3 E3 E3
 247+ F0B3 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 247+ F0B7 E3 E3 E3 E3
 247+ F0BB E3 E3 E3 E3
 247+ F0BF E3 E3 E3 E3
 248+ F0C3 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 248+ F0C7 E3 E3 E3 E3
 248+ F0CB E3 E3 E3 E3
 248+ F0CF E3 E3 E3 E3
 249+ F0D3 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 249+ F0D7 E3 E3 E3 E3
 249+ F0DB E3 E3 E3 E3
 249+ F0DF E3 E3 E3 E3
 250+ F0E3 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 250+ F0E7 E3 E3 E3 E3
 250+ F0EB E3 E3 E3 E3
 250+ F0EF E3 E3 E3 E3
 251+ F0F3 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 251+ F0F7 E3 E3 E3 E3
 251+ F0FB E3 E3 E3 E3
 251+ F0FF E3 E3 E3 E3
 252+ F103 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 252+ F107 E3 E3 E3 E3
 252+ F10B E3 E3 E3 E3
 252+ F10F E3 E3 E3 E3
 253+ F113 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 253+ F117 E3 E3 E3 E3
 253+ F11B E3 E3 E3 E3
 253+ F11F E3 E3 E3 E3
 254+ F123 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 254+ F127 E3 E3 E3 E3
 254+ F12B E3 E3 E3 E3
 254+ F12F E3 E3 E3 E3
 255+ F133 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 255+ F137 E3 E3 E3 E3
 255+ F13B E3 E3 E3 E3
 255+ F13F E3 E3 E3 E3
 256+ F143 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 256+ F147 E3 E3 E3 E3
 256+ F14B E3 E3 E3 E3
 256+ F14F E3 E3 E3 E3
 257+ F153 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 257+ F157 E3 E3 E3 E3
 257+ F15B E3 E3 E3 E3
 257+ F15F E3 E3 E3 E3
 258+ F163
 259+ F163
 260+ F163
 261+ F163              Sprite14:
 262+ F163 92 92 FF FF  	db  $92, $92, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF;
 262+ F167 FF FF FF FF
 262+ F16B FF FF FF FF
 262+ F16F FF FF FF FF
 263+ F173 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 263+ F177 E3 E3 E3 E3
 263+ F17B E3 E3 E3 E3
 263+ F17F E3 E3 E3 E3
 264+ F183 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 264+ F187 E3 E3 E3 E3
 264+ F18B E3 E3 E3 E3
 264+ F18F E3 E3 E3 E3
 265+ F193 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 265+ F197 E3 E3 E3 E3
 265+ F19B E3 E3 E3 E3
 265+ F19F E3 E3 E3 E3
 266+ F1A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 266+ F1A7 E3 E3 E3 E3
 266+ F1AB E3 E3 E3 E3
 266+ F1AF E3 E3 E3 E3
 267+ F1B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 267+ F1B7 E3 E3 E3 E3
 267+ F1BB E3 E3 E3 E3
 267+ F1BF E3 E3 E3 E3
 268+ F1C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 268+ F1C7 E3 E3 E3 E3
 268+ F1CB E3 E3 E3 E3
 268+ F1CF E3 E3 E3 E3
 269+ F1D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 269+ F1D7 E3 E3 E3 E3
 269+ F1DB E3 E3 E3 E3
 269+ F1DF E3 E3 E3 E3
 270+ F1E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 270+ F1E7 E3 E3 E3 E3
 270+ F1EB E3 E3 E3 E3
 270+ F1EF E3 E3 E3 E3
 271+ F1F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 271+ F1F7 E3 E3 E3 E3
 271+ F1FB E3 E3 E3 E3
 271+ F1FF E3 E3 E3 E3
 272+ F203 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 272+ F207 E3 E3 E3 E3
 272+ F20B E3 E3 E3 E3
 272+ F20F E3 E3 E3 E3
 273+ F213 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 273+ F217 E3 E3 E3 E3
 273+ F21B E3 E3 E3 E3
 273+ F21F E3 E3 E3 E3
 274+ F223 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 274+ F227 E3 E3 E3 E3
 274+ F22B E3 E3 E3 E3
 274+ F22F E3 E3 E3 E3
 275+ F233 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 275+ F237 E3 E3 E3 E3
 275+ F23B E3 E3 E3 E3
 275+ F23F E3 E3 E3 E3
 276+ F243 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 276+ F247 E3 E3 E3 E3
 276+ F24B E3 E3 E3 E3
 276+ F24F E3 E3 E3 E3
 277+ F253 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 277+ F257 E3 E3 E3 E3
 277+ F25B E3 E3 E3 E3
 277+ F25F E3 E3 E3 E3
 278+ F263
 279+ F263
 280+ F263
 281+ F263              Sprite15:
 282+ F263 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 282+ F267 E3 E3 E3 E3
 282+ F26B E3 E3 E3 E3
 282+ F26F E3 E3 E3 E3
 283+ F273 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 283+ F277 E3 E3 E3 E3
 283+ F27B E3 E3 E3 E3
 283+ F27F E3 E3 E3 E3
 284+ F283 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 284+ F287 E3 E3 E3 E3
 284+ F28B E3 E3 E3 E3
 284+ F28F E3 E3 E3 E3
 285+ F293 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 285+ F297 E3 E3 E3 E3
 285+ F29B E3 E3 E3 E3
 285+ F29F E3 E3 E3 E3
 286+ F2A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 286+ F2A7 E3 E3 E3 E3
 286+ F2AB E3 E3 E3 E3
 286+ F2AF E3 E3 E3 E3
 287+ F2B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 287+ F2B7 E3 E3 E3 E3
 287+ F2BB E3 E3 E3 E3
 287+ F2BF E3 E3 E3 E3
 288+ F2C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 288+ F2C7 E3 E3 E3 E3
 288+ F2CB E3 E3 E3 E3
 288+ F2CF E3 E3 E3 E3
 289+ F2D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 289+ F2D7 E3 E3 E3 E3
 289+ F2DB E3 E3 E3 E3
 289+ F2DF E3 E3 E3 E3
 290+ F2E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 290+ F2E7 E3 E3 E3 E3
 290+ F2EB E3 E3 E3 E3
 290+ F2EF E3 E3 E3 E3
 291+ F2F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 291+ F2F7 E3 E3 E3 E3
 291+ F2FB E3 E3 E3 E3
 291+ F2FF E3 E3 E3 E3
 292+ F303 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18;
 292+ F307 E3 E3 E3 E3
 292+ F30B E3 E3 E3 E3
 292+ F30F E3 E3 E3 18
 293+ F313 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C;
 293+ F317 E3 E3 E3 E3
 293+ F31B E3 E3 E3 E3
 293+ F31F 18 18 18 1C
 294+ F323 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C;
 294+ F327 E3 E3 E3 E3
 294+ F32B E3 E3 18 18
 294+ F32F 18 1C 1C 1C
 295+ F333 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C;
 295+ F337 E3 E3 E3 18
 295+ F33B 18 18 1C 1C
 295+ F33F 1C 1C 1C 1C
 296+ F343 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C;
 296+ F347 18 18 18 18
 296+ F34B 1C 1C 1C 1C
 296+ F34F 1C 1C 1C 1C
 297+ F353 E3 E3 18 18  	db  $E3, $E3, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $18;
 297+ F357 1C 1C 1C 1C
 297+ F35B 1C 1C 1C 1C
 297+ F35F 1C 1C 1C 18
 298+ F363
 299+ F363
 300+ F363
 301+ F363              Sprite16:
 302+ F363 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 302+ F367 E3 E3 E3 E3
 302+ F36B E3 E3 E3 E3
 302+ F36F E3 E3 E3 E3
 303+ F373 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 303+ F377 E3 E3 E3 E3
 303+ F37B E3 E3 E3 E3
 303+ F37F E3 E3 E3 E3
 304+ F383 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 304+ F387 E3 E3 E3 E3
 304+ F38B E3 E3 E3 E3
 304+ F38F E3 E3 E3 E3
 305+ F393 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18;
 305+ F397 E3 E3 E3 E3
 305+ F39B E3 E3 E3 E3
 305+ F39F E3 E3 E3 18
 306+ F3A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18;
 306+ F3A7 E3 E3 E3 E3
 306+ F3AB E3 E3 E3 E3
 306+ F3AF E3 18 18 18
 307+ F3B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $18, $1C;
 307+ F3B7 E3 E3 E3 E3
 307+ F3BB E3 E3 E3 18
 307+ F3BF 18 18 18 1C
 308+ F3C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $18, $18, $1C, $1C, $18;
 308+ F3C7 E3 E3 E3 E3
 308+ F3CB 18 18 18 18
 308+ F3CF 18 1C 1C 18
 309+ F3D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $18, $18, $1C, $1C, $1C, $18, $18;
 309+ F3D7 E3 E3 18 18
 309+ F3DB 18 18 18 1C
 309+ F3DF 1C 1C 18 18
 310+ F3E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $18, $18, $E3;
 310+ F3E7 18 18 18 18
 310+ F3EB 1C 1C 1C 1C
 310+ F3EF 1C 18 18 E3
 311+ F3F3 E3 E3 18 18  	db  $E3, $E3, $18, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3;
 311+ F3F7 18 18 1C 1C
 311+ F3FB 1C 1C 1C 18
 311+ F3FF 18 E3 E3 E3
 312+ F403 18 18 18 18  	db  $18, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3;
 312+ F407 1C 1C 1C 1C
 312+ F40B 1C 18 18 18
 312+ F40F E3 E3 E3 E3
 313+ F413 18 18 1C 1C  	db  $18, $18, $1C, $1C, $1C, $18, $18, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 313+ F417 1C 18 18 18
 313+ F41B 18 18 E3 E3
 313+ F41F E3 E3 E3 E3
 314+ F423 1C 1C 1C 18  	db  $1C, $1C, $1C, $18, $18, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 314+ F427 18 18 18 18
 314+ F42B E3 E3 E3 E3
 314+ F42F E3 E3 E3 E3
 315+ F433 1C 1C 18 18  	db  $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 315+ F437 18 E3 E3 E3
 315+ F43B E3 E3 E3 E3
 315+ F43F E3 E3 E3 E3
 316+ F443 18 18 18 E3  	db  $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 316+ F447 E3 E3 E3 E3
 316+ F44B E3 E3 E3 E3
 316+ F44F E3 E3 E3 E3
 317+ F453 18 E3 E3 E3  	db  $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 317+ F457 E3 E3 E3 E3
 317+ F45B E3 E3 E3 E3
 317+ F45F E3 E3 E3 E3
 318+ F463
 319+ F463
 320+ F463
 321+ F463              Sprite17:
 322+ F463 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 322+ F467 E3 E3 E3 E3
 322+ F46B E3 E3 E3 E3
 322+ F46F E3 E3 E3 E3
 323+ F473 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 323+ F477 E3 E3 E3 E3
 323+ F47B E3 E3 E3 E3
 323+ F47F E3 E3 E3 E3
 324+ F483 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 324+ F487 E3 E3 E3 E3
 324+ F48B E3 E3 E3 E3
 324+ F48F E3 E3 E3 E3
 325+ F493 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 325+ F497 E3 E3 E3 E3
 325+ F49B E3 E3 E3 E3
 325+ F49F E3 E3 E3 E3
 326+ F4A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 326+ F4A7 E3 E3 E3 E3
 326+ F4AB E3 E3 E3 E3
 326+ F4AF E3 E3 E3 E3
 327+ F4B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18;
 327+ F4B7 E3 E3 E3 E3
 327+ F4BB E3 E3 E3 E3
 327+ F4BF E3 18 18 18
 328+ F4C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $18;
 328+ F4C7 E3 E3 E3 E3
 328+ F4CB E3 E3 E3 18
 328+ F4CF 18 18 1C 18
 329+ F4D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $18, $18;
 329+ F4D7 E3 E3 E3 E3
 329+ F4DB E3 18 18 18
 329+ F4DF 1C 1C 18 18
 330+ F4E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $18, $1C, $1C, $18, $18, $18, $E3;
 330+ F4E7 E3 E3 18 18
 330+ F4EB 18 18 1C 1C
 330+ F4EF 18 18 18 E3
 331+ F4F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3;
 331+ F4F7 18 18 18 1C
 331+ F4FB 1C 1C 1C 18
 331+ F4FF 18 E3 E3 E3
 332+ F503 E3 E3 18 18  	db  $E3, $E3, $18, $18, $18, $1C, $1C, $18, $18, $18, $18, $E3, $E3, $E3, $E3, $E3;
 332+ F507 18 1C 1C 18
 332+ F50B 18 18 18 E3
 332+ F50F E3 E3 E3 E3
 333+ F513 18 18 1C 18  	db  $18, $18, $1C, $18, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 333+ F517 1C 1C 18 18
 333+ F51B 18 E3 E3 E3
 333+ F51F E3 E3 E3 E3
 334+ F523 18 1C 1C 1C  	db  $18, $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 334+ F527 18 18 18 E3
 334+ F52B E3 E3 E3 E3
 334+ F52F E3 E3 E3 E3
 335+ F533 1C 18 18 18  	db  $1C, $18, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 335+ F537 18 E3 E3 E3
 335+ F53B E3 E3 E3 E3
 335+ F53F E3 E3 E3 E3
 336+ F543 18 18 18 E3  	db  $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 336+ F547 E3 E3 E3 E3
 336+ F54B E3 E3 E3 E3
 336+ F54F E3 E3 E3 E3
 337+ F553 18 E3 E3 E3  	db  $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 337+ F557 E3 E3 E3 E3
 337+ F55B E3 E3 E3 E3
 337+ F55F E3 E3 E3 E3
 338+ F563
 339+ F563
 340+ F563
 341+ F563              Sprite18:
 342+ F563 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 342+ F567 E3 E3 E3 E3
 342+ F56B E3 E3 E3 E3
 342+ F56F E3 E3 E3 E3
 343+ F573 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 343+ F577 E3 E3 E3 E3
 343+ F57B E3 E3 E3 E3
 343+ F57F E3 E3 E3 E3
 344+ F583 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 344+ F587 E3 E3 E3 E3
 344+ F58B E3 E3 E3 E3
 344+ F58F E3 E3 E3 E3
 345+ F593 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 345+ F597 E3 E3 E3 E3
 345+ F59B E3 E3 E3 E3
 345+ F59F E3 E3 E3 E3
 346+ F5A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 346+ F5A7 E3 E3 E3 E3
 346+ F5AB E3 E3 E3 E3
 346+ F5AF E3 E3 E3 E3
 347+ F5B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 347+ F5B7 E3 E3 E3 E3
 347+ F5BB E3 E3 E3 E3
 347+ F5BF E3 E3 E3 E3
 348+ F5C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18;
 348+ F5C7 E3 E3 E3 E3
 348+ F5CB E3 E3 E3 E3
 348+ F5CF E3 E3 E3 18
 349+ F5D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C;
 349+ F5D7 E3 E3 E3 E3
 349+ F5DB E3 E3 E3 E3
 349+ F5DF E3 18 18 1C
 350+ F5E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $18;
 350+ F5E7 E3 E3 E3 E3
 350+ F5EB E3 E3 E3 18
 350+ F5EF 18 1C 1C 18
 351+ F5F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $18, $E3, $E3;
 351+ F5F7 E3 E3 E3 E3
 351+ F5FB 18 18 18 1C
 351+ F5FF 1C 18 E3 E3
 352+ F603 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $18, $E3, $E3, $E3, $E3;
 352+ F607 E3 18 18 18
 352+ F60B 1C 1C 1C 18
 352+ F60F E3 E3 E3 E3
 353+ F613 E3 E3 E3 18  	db  $E3, $E3, $E3, $18, $18, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 353+ F617 18 1C 1C 1C
 353+ F61B 18 18 E3 E3
 353+ F61F E3 E3 E3 E3
 354+ F623 18 18 18 1C  	db  $18, $18, $18, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 354+ F627 1C 1C 18 18
 354+ F62B E3 E3 E3 E3
 354+ F62F E3 E3 E3 E3
 355+ F633 1C 1C 1C 18  	db  $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 355+ F637 18 18 E3 E3
 355+ F63B E3 E3 E3 E3
 355+ F63F E3 E3 E3 E3
 356+ F643 1C 1C 18 E3  	db  $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 356+ F647 E3 E3 E3 E3
 356+ F64B E3 E3 E3 E3
 356+ F64F E3 E3 E3 E3
 357+ F653 18 18 E3 E3  	db  $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 357+ F657 E3 E3 E3 E3
 357+ F65B E3 E3 E3 E3
 357+ F65F E3 E3 E3 E3
 358+ F663
 359+ F663
 360+ F663
 361+ F663              Sprite19:
 362+ F663 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1C;
 362+ F667 E3 E3 E3 E3
 362+ F66B E3 E3 E3 E3
 362+ F66F E3 E3 E3 1C
 363+ F673 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1C, $1C, $1C, $E3;
 363+ F677 E3 E3 E3 E3
 363+ F67B E3 E3 E3 E3
 363+ F67F 1C 1C 1C E3
 364+ F683 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $E3, $E3, $E3;
 364+ F687 E3 E3 E3 E3
 364+ F68B E3 E3 18 18
 364+ F68F 1C E3 E3 E3
 365+ F693 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $18, $E3, $E3, $E3, $E3, $E3;
 365+ F697 E3 E3 E3 18
 365+ F69B 18 18 18 E3
 365+ F69F E3 E3 E3 E3
 366+ F6A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 366+ F6A7 E3 18 18 18
 366+ F6AB 18 E3 E3 E3
 366+ F6AF E3 E3 E3 E3
 367+ F6B3 E3 E3 18 18  	db  $E3, $E3, $18, $18, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 367+ F6B7 18 18 18 E3
 367+ F6BB E3 E3 E3 E3
 367+ F6BF E3 E3 E3 E3
 368+ F6C3 18 18 18 18  	db  $18, $18, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 368+ F6C7 18 E3 E3 E3
 368+ F6CB E3 E3 E3 E3
 368+ F6CF E3 E3 E3 E3
 369+ F6D3 18 18 18 E3  	db  $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 369+ F6D7 E3 E3 E3 E3
 369+ F6DB E3 E3 E3 E3
 369+ F6DF E3 E3 E3 E3
 370+ F6E3 18 E3 E3 E3  	db  $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 370+ F6E7 E3 E3 E3 E3
 370+ F6EB E3 E3 E3 E3
 370+ F6EF E3 E3 E3 E3
 371+ F6F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 371+ F6F7 E3 E3 E3 E3
 371+ F6FB E3 E3 E3 E3
 371+ F6FF E3 E3 E3 E3
 372+ F703 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 372+ F707 E3 E3 E3 E3
 372+ F70B E3 E3 E3 E3
 372+ F70F E3 E3 E3 E3
 373+ F713 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 373+ F717 E3 E3 E3 E3
 373+ F71B E3 E3 E3 E3
 373+ F71F E3 E3 E3 E3
 374+ F723 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 374+ F727 E3 E3 E3 E3
 374+ F72B E3 E3 E3 E3
 374+ F72F E3 E3 E3 E3
 375+ F733 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 375+ F737 E3 E3 E3 E3
 375+ F73B E3 E3 E3 E3
 375+ F73F E3 E3 E3 E3
 376+ F743 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 376+ F747 E3 E3 E3 E3
 376+ F74B E3 E3 E3 E3
 376+ F74F E3 E3 E3 E3
 377+ F753 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 377+ F757 E3 E3 E3 E3
 377+ F75B E3 E3 E3 E3
 377+ F75F E3 E3 E3 E3
 378+ F763
 379+ F763
 380+ F763
 381+ F763              Sprite20:
 382+ F763 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 382+ F767 E3 E3 E3 E3
 382+ F76B E3 E3 E3 E3
 382+ F76F E3 E3 E3 E3
 383+ F773 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 383+ F777 E3 E3 E3 E3
 383+ F77B E3 E3 E3 E3
 383+ F77F E3 E3 E3 E3
 384+ F783 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 384+ F787 E3 E3 E3 E3
 384+ F78B E3 E3 E3 E3
 384+ F78F E3 E3 E3 E3
 385+ F793 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 385+ F797 E3 E3 E3 E3
 385+ F79B E3 E3 E3 E3
 385+ F79F E3 E3 E3 E3
 386+ F7A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 386+ F7A7 E3 E3 E3 E3
 386+ F7AB E3 E3 E3 E3
 386+ F7AF E3 E3 E3 E3
 387+ F7B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 387+ F7B7 E3 E3 E3 E3
 387+ F7BB E3 E3 E3 E3
 387+ F7BF E3 E3 E3 E3
 388+ F7C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 388+ F7C7 E3 E3 E3 E3
 388+ F7CB E3 E3 E3 E3
 388+ F7CF E3 E3 E3 E3
 389+ F7D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 389+ F7D7 E3 E3 E3 E3
 389+ F7DB E3 E3 E3 E3
 389+ F7DF E3 E3 E3 E3
 390+ F7E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 390+ F7E7 E3 E3 E3 E3
 390+ F7EB E3 E3 E3 E3
 390+ F7EF E3 E3 E3 E3
 391+ F7F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 391+ F7F7 E3 E3 E3 E3
 391+ F7FB E3 E3 E3 E3
 391+ F7FF E3 E3 E3 E3
 392+ F803 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 392+ F807 E3 E3 E3 E3
 392+ F80B E3 E3 E3 E3
 392+ F80F E3 E3 E3 E3
 393+ F813 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 393+ F817 E3 E3 E3 E3
 393+ F81B E3 E3 E3 E3
 393+ F81F E3 E3 E3 E3
 394+ F823 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 394+ F827 E3 E3 E3 E3
 394+ F82B E3 E3 E3 E3
 394+ F82F E3 E3 E3 E3
 395+ F833 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 395+ F837 E3 E3 E3 E3
 395+ F83B E3 E3 E3 E3
 395+ F83F E3 E3 E3 E3
 396+ F843 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 396+ F847 E3 E3 E3 E3
 396+ F84B E3 E3 E3 E3
 396+ F84F E3 E3 E3 E3
 397+ F853 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 397+ F857 E3 E3 E3 E3
 397+ F85B E3 E3 E3 E3
 397+ F85F E3 E3 E3 E3
 398+ F863
 399+ F863
 400+ F863
 401+ F863              Sprite21:
 402+ F863 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 402+ F867 E3 E3 E3 E3
 402+ F86B E3 E3 E3 E3
 402+ F86F E3 E3 E3 E3
 403+ F873 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 403+ F877 E3 E3 E3 E3
 403+ F87B E3 E3 E3 E3
 403+ F87F E3 E3 E3 E3
 404+ F883 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 404+ F887 E3 E3 E3 E3
 404+ F88B E3 E3 E3 E3
 404+ F88F E3 E3 E3 E3
 405+ F893 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 405+ F897 E3 E3 E3 E3
 405+ F89B E3 E3 E3 E3
 405+ F89F E3 E3 E3 E3
 406+ F8A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 406+ F8A7 E3 E3 E3 E3
 406+ F8AB E3 E3 E3 E3
 406+ F8AF E3 E3 E3 E3
 407+ F8B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 407+ F8B7 E3 E3 E3 E3
 407+ F8BB E3 E3 E3 E3
 407+ F8BF E3 E3 E3 E3
 408+ F8C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 408+ F8C7 E3 E3 E3 E3
 408+ F8CB E3 E3 E3 E3
 408+ F8CF E3 E3 E3 E3
 409+ F8D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 409+ F8D7 E3 E3 E3 E3
 409+ F8DB E3 E3 E3 E3
 409+ F8DF E3 E3 E3 E3
 410+ F8E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 410+ F8E7 E3 E3 E3 E3
 410+ F8EB E3 E3 E3 E3
 410+ F8EF E3 E3 E3 E3
 411+ F8F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 411+ F8F7 E3 E3 E3 E3
 411+ F8FB E3 E3 E3 E3
 411+ F8FF E3 E3 E3 E3
 412+ F903 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 412+ F907 E3 E3 E3 E3
 412+ F90B E3 E3 E3 E3
 412+ F90F E3 E3 E3 E3
 413+ F913 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 413+ F917 E3 E3 E3 E3
 413+ F91B E3 E3 E3 E3
 413+ F91F E3 E3 E3 E3
 414+ F923 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 414+ F927 E3 E3 E3 E3
 414+ F92B E3 E3 E3 E3
 414+ F92F E3 E3 E3 E3
 415+ F933 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 415+ F937 E3 E3 E3 E3
 415+ F93B E3 E3 E3 E3
 415+ F93F E3 E3 E3 E3
 416+ F943 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 416+ F947 E3 E3 E3 E3
 416+ F94B E3 E3 E3 E3
 416+ F94F E3 E3 E3 E3
 417+ F953 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 417+ F957 E3 E3 E3 E3
 417+ F95B E3 E3 E3 E3
 417+ F95F E3 E3 E3 E3
 418+ F963
 419+ F963
 420+ F963
 421+ F963              Sprite22:
 422+ F963 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 422+ F967 E3 E3 E3 E3
 422+ F96B E3 E3 E3 E3
 422+ F96F E3 E3 E3 E3
 423+ F973 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 423+ F977 E3 E3 E3 E3
 423+ F97B E3 E3 E3 E3
 423+ F97F E3 E3 E3 E3
 424+ F983 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 424+ F987 E3 E3 E3 E3
 424+ F98B E3 E3 E3 E3
 424+ F98F E3 E3 E3 E3
 425+ F993 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 425+ F997 E3 E3 E3 E3
 425+ F99B E3 E3 E3 E3
 425+ F99F E3 E3 E3 E3
 426+ F9A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 426+ F9A7 E3 E3 E3 E3
 426+ F9AB E3 E3 E3 E3
 426+ F9AF E3 E3 E3 E3
 427+ F9B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 427+ F9B7 E3 E3 E3 E3
 427+ F9BB E3 E3 E3 E3
 427+ F9BF E3 E3 E3 E3
 428+ F9C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 428+ F9C7 E3 E3 E3 E3
 428+ F9CB E3 E3 E3 E3
 428+ F9CF E3 E3 E3 E3
 429+ F9D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 429+ F9D7 E3 E3 E3 E3
 429+ F9DB E3 E3 E3 E3
 429+ F9DF E3 E3 E3 E3
 430+ F9E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 430+ F9E7 E3 E3 E3 E3
 430+ F9EB E3 E3 E3 E3
 430+ F9EF E3 E3 E3 E3
 431+ F9F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 431+ F9F7 E3 E3 E3 E3
 431+ F9FB E3 E3 E3 E3
 431+ F9FF E3 E3 E3 E3
 432+ FA03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 432+ FA07 E3 E3 E3 E3
 432+ FA0B E3 E3 E3 E3
 432+ FA0F E3 E3 E3 E3
 433+ FA13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 433+ FA17 E3 E3 E3 E3
 433+ FA1B E3 E3 E3 E3
 433+ FA1F E3 E3 E3 E3
 434+ FA23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 434+ FA27 E3 E3 E3 E3
 434+ FA2B E3 E3 E3 E3
 434+ FA2F E3 E3 E3 E3
 435+ FA33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 435+ FA37 E3 E3 E3 E3
 435+ FA3B E3 E3 E3 E3
 435+ FA3F E3 E3 E3 E3
 436+ FA43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 436+ FA47 E3 E3 E3 E3
 436+ FA4B E3 E3 E3 E3
 436+ FA4F E3 E3 E3 E3
 437+ FA53 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 437+ FA57 E3 E3 E3 E3
 437+ FA5B E3 E3 E3 E3
 437+ FA5F E3 E3 E3 E3
 438+ FA63
 439+ FA63
 440+ FA63
 441+ FA63              Sprite23:
 442+ FA63 E3 D8 B4 E3  	db  $E3, $D8, $B4, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 442+ FA67 E3 E3 E3 E3
 442+ FA6B E3 E3 E3 E3
 442+ FA6F E3 E3 E3 E3
 443+ FA73 B4 FF FC D8  	db  $B4, $FF, $FC, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 443+ FA77 E3 E3 E3 E3
 443+ FA7B E3 E3 E3 E3
 443+ FA7F E3 E3 E3 E3
 444+ FA83 D8 FC B4 D8  	db  $D8, $FC, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 444+ FA87 E3 E3 E3 E3
 444+ FA8B E3 E3 E3 E3
 444+ FA8F E3 E3 E3 E3
 445+ FA93 E3 B4 D8 E3  	db  $E3, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 445+ FA97 E3 E3 E3 E3
 445+ FA9B E3 E3 E3 E3
 445+ FA9F E3 E3 E3 E3
 446+ FAA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 446+ FAA7 E3 E3 E3 E3
 446+ FAAB E3 E3 E3 E3
 446+ FAAF E3 E3 E3 E3
 447+ FAB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 447+ FAB7 E3 E3 E3 E3
 447+ FABB E3 E3 E3 E3
 447+ FABF E3 E3 E3 E3
 448+ FAC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 448+ FAC7 E3 E3 E3 E3
 448+ FACB E3 E3 E3 E3
 448+ FACF E3 E3 E3 E3
 449+ FAD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 449+ FAD7 E3 E3 E3 E3
 449+ FADB E3 E3 E3 E3
 449+ FADF E3 E3 E3 E3
 450+ FAE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 450+ FAE7 E3 E3 E3 E3
 450+ FAEB E3 E3 E3 E3
 450+ FAEF E3 E3 E3 E3
 451+ FAF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 451+ FAF7 E3 E3 E3 E3
 451+ FAFB E3 E3 E3 E3
 451+ FAFF E3 E3 E3 E3
 452+ FB03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 452+ FB07 E3 E3 E3 E3
 452+ FB0B E3 E3 E3 E3
 452+ FB0F E3 E3 E3 E3
 453+ FB13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 453+ FB17 E3 E3 E3 E3
 453+ FB1B E3 E3 E3 E3
 453+ FB1F E3 E3 E3 E3
 454+ FB23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 454+ FB27 E3 E3 E3 E3
 454+ FB2B E3 E3 E3 E3
 454+ FB2F E3 E3 E3 E3
 455+ FB33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 455+ FB37 E3 E3 E3 E3
 455+ FB3B E3 E3 E3 E3
 455+ FB3F E3 E3 E3 E3
 456+ FB43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 456+ FB47 E3 E3 E3 E3
 456+ FB4B E3 E3 E3 E3
 456+ FB4F E3 E3 E3 E3
 457+ FB53 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 457+ FB57 E3 E3 E3 E3
 457+ FB5B E3 E3 E3 E3
 457+ FB5F E3 E3 E3 E3
 458+ FB63
 459+ FB63
 460+ FB63
 461+ FB63              Sprite24:
 462+ FB63 E3 D8 B4 E3  	db  $E3, $D8, $B4, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 462+ FB67 E3 E3 E3 E3
 462+ FB6B E3 E3 E3 E3
 462+ FB6F E3 E3 E3 E3
 463+ FB73 B4 E3 E3 D8  	db  $B4, $E3, $E3, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 463+ FB77 E3 E3 E3 E3
 463+ FB7B E3 E3 E3 E3
 463+ FB7F E3 E3 E3 E3
 464+ FB83 D8 E3 E3 D8  	db  $D8, $E3, $E3, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 464+ FB87 E3 E3 E3 E3
 464+ FB8B E3 E3 E3 E3
 464+ FB8F E3 E3 E3 E3
 465+ FB93 E3 B4 D8 E3  	db  $E3, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 465+ FB97 E3 E3 E3 E3
 465+ FB9B E3 E3 E3 E3
 465+ FB9F E3 E3 E3 E3
 466+ FBA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 466+ FBA7 E3 E3 E3 E3
 466+ FBAB E3 E3 E3 E3
 466+ FBAF E3 E3 E3 E3
 467+ FBB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 467+ FBB7 E3 E3 E3 E3
 467+ FBBB E3 E3 E3 E3
 467+ FBBF E3 E3 E3 E3
 468+ FBC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 468+ FBC7 E3 E3 E3 E3
 468+ FBCB E3 E3 E3 E3
 468+ FBCF E3 E3 E3 E3
 469+ FBD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 469+ FBD7 E3 E3 E3 E3
 469+ FBDB E3 E3 E3 E3
 469+ FBDF E3 E3 E3 E3
 470+ FBE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 470+ FBE7 E3 E3 E3 E3
 470+ FBEB E3 E3 E3 E3
 470+ FBEF E3 E3 E3 E3
 471+ FBF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 471+ FBF7 E3 E3 E3 E3
 471+ FBFB E3 E3 E3 E3
 471+ FBFF E3 E3 E3 E3
 472+ FC03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 472+ FC07 E3 E3 E3 E3
 472+ FC0B E3 E3 E3 E3
 472+ FC0F E3 E3 E3 E3
 473+ FC13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 473+ FC17 E3 E3 E3 E3
 473+ FC1B E3 E3 E3 E3
 473+ FC1F E3 E3 E3 E3
 474+ FC23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 474+ FC27 E3 E3 E3 E3
 474+ FC2B E3 E3 E3 E3
 474+ FC2F E3 E3 E3 E3
 475+ FC33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 475+ FC37 E3 E3 E3 E3
 475+ FC3B E3 E3 E3 E3
 475+ FC3F E3 E3 E3 E3
 476+ FC43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 476+ FC47 E3 E3 E3 E3
 476+ FC4B E3 E3 E3 E3
 476+ FC4F E3 E3 E3 E3
 477+ FC53 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 477+ FC57 E3 E3 E3 E3
 477+ FC5B E3 E3 E3 E3
 477+ FC5F E3 E3 E3 E3
 478+ FC63
 479+ FC63
 480+ FC63
 481+ FC63              Sprite25:
 482+ FC63 E3 16 12 E3  	db  $E3, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 482+ FC67 E3 E3 E3 E3
 482+ FC6B E3 E3 E3 E3
 482+ FC6F E3 E3 E3 E3
 483+ FC73 12 1A 1F 16  	db  $12, $1A, $1F, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 483+ FC77 E3 E3 E3 E3
 483+ FC7B E3 E3 E3 E3
 483+ FC7F E3 E3 E3 E3
 484+ FC83 16 1F 1A 12  	db  $16, $1F, $1A, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 484+ FC87 E3 E3 E3 E3
 484+ FC8B E3 E3 E3 E3
 484+ FC8F E3 E3 E3 E3
 485+ FC93 E3 12 16 E3  	db  $E3, $12, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 485+ FC97 E3 E3 E3 E3
 485+ FC9B E3 E3 E3 E3
 485+ FC9F E3 E3 E3 E3
 486+ FCA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 486+ FCA7 E3 E3 E3 E3
 486+ FCAB E3 E3 E3 E3
 486+ FCAF E3 E3 E3 E3
 487+ FCB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 487+ FCB7 E3 E3 E3 E3
 487+ FCBB E3 E3 E3 E3
 487+ FCBF E3 E3 E3 E3
 488+ FCC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 488+ FCC7 E3 E3 E3 E3
 488+ FCCB E3 E3 E3 E3
 488+ FCCF E3 E3 E3 E3
 489+ FCD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 489+ FCD7 E3 E3 E3 E3
 489+ FCDB E3 E3 E3 E3
 489+ FCDF E3 E3 E3 E3
 490+ FCE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 490+ FCE7 E3 E3 E3 E3
 490+ FCEB E3 E3 E3 E3
 490+ FCEF E3 E3 E3 E3
 491+ FCF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 491+ FCF7 E3 E3 E3 E3
 491+ FCFB E3 E3 E3 E3
 491+ FCFF E3 E3 E3 E3
 492+ FD03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 492+ FD07 E3 E3 E3 E3
 492+ FD0B E3 E3 E3 E3
 492+ FD0F E3 E3 E3 E3
 493+ FD13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 493+ FD17 E3 E3 E3 E3
 493+ FD1B E3 E3 E3 E3
 493+ FD1F E3 E3 E3 E3
 494+ FD23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 494+ FD27 E3 E3 E3 E3
 494+ FD2B E3 E3 E3 E3
 494+ FD2F E3 E3 E3 E3
 495+ FD33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 495+ FD37 E3 E3 E3 E3
 495+ FD3B E3 E3 E3 E3
 495+ FD3F E3 E3 E3 E3
 496+ FD43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 496+ FD47 E3 E3 E3 E3
 496+ FD4B E3 E3 E3 E3
 496+ FD4F E3 E3 E3 E3
 497+ FD53 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 497+ FD57 E3 E3 E3 E3
 497+ FD5B E3 E3 E3 E3
 497+ FD5F E3 E3 E3 E3
 498+ FD63
 499+ FD63
 500+ FD63
 501+ FD63              Sprite26:
 502+ FD63 E3 16 12 E3  	db  $E3, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 502+ FD67 E3 E3 E3 E3
 502+ FD6B E3 E3 E3 E3
 502+ FD6F E3 E3 E3 E3
 503+ FD73 12 E3 E3 16  	db  $12, $E3, $E3, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 503+ FD77 E3 E3 E3 E3
 503+ FD7B E3 E3 E3 E3
 503+ FD7F E3 E3 E3 E3
 504+ FD83 16 E3 E3 12  	db  $16, $E3, $E3, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 504+ FD87 E3 E3 E3 E3
 504+ FD8B E3 E3 E3 E3
 504+ FD8F E3 E3 E3 E3
 505+ FD93 E3 12 16 E3  	db  $E3, $12, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 505+ FD97 E3 E3 E3 E3
 505+ FD9B E3 E3 E3 E3
 505+ FD9F E3 E3 E3 E3
 506+ FDA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 506+ FDA7 E3 E3 E3 E3
 506+ FDAB E3 E3 E3 E3
 506+ FDAF E3 E3 E3 E3
 507+ FDB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 507+ FDB7 E3 E3 E3 E3
 507+ FDBB E3 E3 E3 E3
 507+ FDBF E3 E3 E3 E3
 508+ FDC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 508+ FDC7 E3 E3 E3 E3
 508+ FDCB E3 E3 E3 E3
 508+ FDCF E3 E3 E3 E3
 509+ FDD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 509+ FDD7 E3 E3 E3 E3
 509+ FDDB E3 E3 E3 E3
 509+ FDDF E3 E3 E3 E3
 510+ FDE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 510+ FDE7 E3 E3 E3 E3
 510+ FDEB E3 E3 E3 E3
 510+ FDEF E3 E3 E3 E3
 511+ FDF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 511+ FDF7 E3 E3 E3 E3
 511+ FDFB E3 E3 E3 E3
 511+ FDFF E3 E3 E3 E3
 512+ FE03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 512+ FE07 E3 E3 E3 E3
 512+ FE0B E3 E3 E3 E3
 512+ FE0F E3 E3 E3 E3
 513+ FE13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 513+ FE17 E3 E3 E3 E3
 513+ FE1B E3 E3 E3 E3
 513+ FE1F E3 E3 E3 E3
 514+ FE23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 514+ FE27 E3 E3 E3 E3
 514+ FE2B E3 E3 E3 E3
 514+ FE2F E3 E3 E3 E3
 515+ FE33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 515+ FE37 E3 E3 E3 E3
 515+ FE3B E3 E3 E3 E3
 515+ FE3F E3 E3 E3 E3
 516+ FE43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 516+ FE47 E3 E3 E3 E3
 516+ FE4B E3 E3 E3 E3
 516+ FE4F E3 E3 E3 E3
 517+ FE53 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 517+ FE57 E3 E3 E3 E3
 517+ FE5B E3 E3 E3 E3
 517+ FE5F E3 E3 E3 E3
 518+ FE63
 519+ FE63
 520+ FE63
 521+ FE63              Sprite27:
 522+ FE63 E3 03 03 E3  	db  $E3, $03, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 522+ FE67 E3 E3 E3 E3
 522+ FE6B E3 E3 E3 E3
 522+ FE6F E3 E3 E3 E3
 523+ FE73 03 1F 1F 03  	db  $03, $1F, $1F, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 523+ FE77 E3 E3 E3 E3
 523+ FE7B E3 E3 E3 E3
 523+ FE7F E3 E3 E3 E3
 524+ FE83 03 1F 1F 03  	db  $03, $1F, $1F, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 524+ FE87 E3 E3 E3 E3
 524+ FE8B E3 E3 E3 E3
 524+ FE8F E3 E3 E3 E3
 525+ FE93 E3 03 03 E3  	db  $E3, $03, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 525+ FE97 E3 E3 E3 E3
 525+ FE9B E3 E3 E3 E3
 525+ FE9F E3 E3 E3 E3
 526+ FEA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 526+ FEA7 E3 E3 E3 E3
 526+ FEAB E3 E3 E3 E3
 526+ FEAF E3 E3 E3 E3
 527+ FEB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 527+ FEB7 E3 E3 E3 E3
 527+ FEBB E3 E3 E3 E3
 527+ FEBF E3 E3 E3 E3
 528+ FEC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 528+ FEC7 E3 E3 E3 E3
 528+ FECB E3 E3 E3 E3
 528+ FECF E3 E3 E3 E3
 529+ FED3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 529+ FED7 E3 E3 E3 E3
 529+ FEDB E3 E3 E3 E3
 529+ FEDF E3 E3 E3 E3
 530+ FEE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 530+ FEE7 E3 E3 E3 E3
 530+ FEEB E3 E3 E3 E3
 530+ FEEF E3 E3 E3 E3
 531+ FEF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 531+ FEF7 E3 E3 E3 E3
 531+ FEFB E3 E3 E3 E3
 531+ FEFF E3 E3 E3 E3
 532+ FF03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 532+ FF07 E3 E3 E3 E3
 532+ FF0B E3 E3 E3 E3
 532+ FF0F E3 E3 E3 E3
 533+ FF13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 533+ FF17 E3 E3 E3 E3
 533+ FF1B E3 E3 E3 E3
 533+ FF1F E3 E3 E3 E3
 534+ FF23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 534+ FF27 E3 E3 E3 E3
 534+ FF2B E3 E3 E3 E3
 534+ FF2F E3 E3 E3 E3
 535+ FF33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 535+ FF37 E3 E3 E3 E3
 535+ FF3B E3 E3 E3 E3
 535+ FF3F E3 E3 E3 E3
 536+ FF43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 536+ FF47 E3 E3 E3 E3
 536+ FF4B E3 E3 E3 E3
 536+ FF4F E3 E3 E3 E3
 537+ FF53 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 537+ FF57 E3 E3 E3 E3
 537+ FF5B E3 E3 E3 E3
 537+ FF5F E3 E3 E3 E3
 538+ FF63
# file closed: ./Layer3Sprites/SpriteSheet.asm
1220  FF63              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
1221  FF63                  SLOT    ConsoleImageAddr
1222  FF63                  PAGE    BankConsole
1223  FF63              	ORG     ConsoleImageAddr, BankConsole
1224  E000
1225  E000                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF ; row 1
   2+ E004 FF FF 00 7F
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 40 08
   3+ E028 01 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 10 08
   4+ E048 04 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$01,$C9,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01 ; row 2
  10+ E104 00 01 01 C9
  10+ E108 C0 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 40 08
  11+ E128 01 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 18 00
  12+ E148 0C 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$06,$08,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79 ; row 3
  18+ E204 00 01 06 08
  18+ E208 38 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 55 55
  19+ E228 55 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$0C,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 0C 08
  20+ E248 18 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$0E,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65 ; row 4
  26+ E304 00 01 0E 08
  26+ E308 18 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 40 08
  27+ E328 01 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$03,$00,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 03 00
  28+ E348 60 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$08,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65 ; row 5
  34+ E404 00 01 18 08
  34+ E408 0C 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 40 08
  35+ E428 01 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 FF
  36+ E448 80 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$30,$08,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D ; row 6
  42+ E504 00 03 30 08
  42+ E508 06 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 40 00
  43+ E528 01 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$20,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61 ; row 7
  50+ E604 24 93 20 08
  50+ E608 02 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$60,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 60 08
  51+ E628 02 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$60,$08,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61 ; row 8
  58+ E704 FF FF 60 08
  58+ E708 03 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$20,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 20 00
  59+ E728 02 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 FF FF 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 45 45
  67+ E808 45 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$05,$45,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 05 45
  68+ E828 05 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 45 45
  69+ E848 45 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
  76+ E900
# file closed: ./Images/ConsoleImageData.asm
1226  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
1227  E900                  SLOT    ViewFrontAddr
1228  E900                  PAGE    BankFrontView
1229  E900                  ORG     ViewFrontAddr
1230  C000                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   1+ C004 74 56 69 65
   1+ C008 77 20 20 20
   1+ C00C 50 47 36 32
   2+ C010
   3+ C010 47           draw_front_calc_alpha:  ld      b,a
   4+ C011 E6 80                                and     $80
   5+ C013 32 A4 96                             ld      (ALP2),a                            ; set sign
   6+ C016 4F                                   ld      c,a                                 ; save sign
   7+ C017 EE 80                                xor     $80
   8+ C019 32 A5 96                             ld      (ALP2FLIP),a                        ; and oppsite sign
   9+ C01C 3A A0 96                             ld      a,(JSTX)
  10+ C01F ED 27 80                             test    $80
  11+ C022 28 02                                jr      z,  .PositiveRoll
  12+ C024 ED 44        .NegativeRoll:          neg
  13+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  14+ C028 CB 3F                                srl     a
  15+ C02A FE 08                                cp      8
  16+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  17+ C02E CB 3F        .IncreasedDamp          srl     a
  18+ C030 32 A3 96     .NotIncreasedDamp:      ld      (ALP1),a
  19+ C033 B1                                   or      c
  20+ C034 32 A2 96                             ld      (ALPHA),a                           ; a = signed bit alph1
  21+ C037 21 73 C2     .RestartDampenRoll:     ld      hl,dampenRcounter
  22+ C03A 36 04                                ld      (hl),dampenRate
  23+ C03C C9                                   ret
  24+ C03D
  25+ C03D              ; Do the same for pitch
  26+ C03D 47           draw_front_calc_beta:   ld      b,a
  27+ C03E E6 80                                and     $80
  28+ C040 32 94 96                             ld      (BET2),a                            ; set sign
  29+ C043 4F                                   ld      c,a                                 ; save sign
  30+ C044 EE 80                                xor     $80
  31+ C046 32 95 96                             ld      (BET2FLIP),a                        ; and oppsite sign
  32+ C049 3A 92 96                             ld      a,(JSTY)
  33+ C04C ED 27 80                             test    $80
  34+ C04F 28 02                                jr      z,  .PositivePitch
  35+ C051 ED 44        .NegativePitch:         neg
  36+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  37+ C055 CB 3F                                srl     a
  38+ C057 FE 08                                cp      8
  39+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  40+ C05B CB 3F        .IncreasedDamp          srl     a
  41+ C05D 32 93 96     .NotIncreasedDamp:      ld      (BET1),a
  42+ C060 B1                                   or      c
  43+ C061 32 91 96                             ld      (BETA),a                            ; a = signed bit bet1
  44+ C064 21 74 C2     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  45+ C067 36 04                                ld      (hl),dampenRate
  46+ C069 C9                                   ret
  47+ C06A
  48+ C06A              draw_front_view:        MMUSelectLayer1
  48+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  49+ C06E CD 80 E0                             call    l1_cls
  50+ C071 CD 9A E0                             call    l1_attr_cls
  51+ C074                                      MMUSelectLayer2
  51+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  52+ C078 CD 02 E0                             call     asm_l2_double_buffer_on
  53+ C07B                                      MMUSelectSpriteBank
  53+ C07B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C07F CD 34 E4                             call    sprite_cls_cursors
  55+ C082 CD 33 E1                             call    sprite_reticule
  56+ C085 CD C2 E1                             call    sprite_laser
  57+ C088 CD B8 E2                             call    sprite_laser_show
  58+ C08B                                      MMUSelectConsoleBank
  58+ C08B ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  59+ C08F 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  60+ C092 11 00 E0                             ld          de,ConsoleImageData
  61+ C095 01 00 08                             ld          bc, ScreenL1BottomLen
  62+ C098 CD 6E 93                             call        memcopy_dma
  63+ C09B 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  64+ C09E 11 00 E8                             ld          de,ConsoleAttributes
  65+ C0A1 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  66+ C0A4 CD 6E 93                             call        memcopy_dma
  67+ C0A7 CD 29 91                             call        InitialiseStars
  68+ C0AA AF                                   xor         a
  69+ C0AB 32 A6 97                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  70+ C0AE C9                                   ret
  71+ C0AF
  72+ C0AF
  73+ C0AF
  74+ C0AF
  75+ C0AF                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
  76+ C0AF                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
  77+ C0AF 80 40 60 28  LightningLines:         db 128, 064, 096, 040, 255, 097, 042, 076, 035, 031, 082, 039, 079, 020, 026, 079, 026, 058, 018, 022, 064, 021, 032, 026, 018, 038, 025, 030, 009, 026, 035, 020, 005, 016, 018, 037, 021, 000, 000, 018
  77+ C0B3 FF 61 2A 4C
  77+ C0B7 23 1F 52 27
  77+ C0BB 4F 14 1A 4F
  77+ C0BF 1A 3A 12 16
  77+ C0C3 40 15 20 1A
  77+ C0C7 12 26 19 1E
  77+ C0CB 09 1A 23 14
  77+ C0CF 05 10 12 25
  77+ C0D3 15 00 00 12
  78+ C0D7 80 40 8B 28                          db 128, 064, 139, 040, 255, 137, 045, 160, 035, 031, 150, 040, 157, 056, 026, 160, 036, 175, 010, 022, 156, 037, 196, 040, 018, 197, 041, 223, 033, 026, 223, 033, 245, 030, 018, 223, 032, 254, 047, 018
  78+ C0DB FF 89 2D A0
  78+ C0DF 23 1F 96 28
  78+ C0E3 9D 38 1A A0
  78+ C0E7 24 AF 0A 16
  78+ C0EB 9C 25 C4 28
  78+ C0EF 12 C5 29 DF
  78+ C0F3 21 1A DF 21
  78+ C0F7 F5 1E 12 DF
  78+ C0FB 20 FE 2F 12
  79+ C0FF 80 40 5A 59                          db 128, 064, 090, 089, 255, 089, 089, 064, 098, 031, 079, 092, 064, 072, 025, 065, 075, 030, 070, 022, 035, 071, 038, 064, 018, 067, 095, 021, 099, 026, 031, 097, 000, 080, 018, 031, 097, 021, 110, 018
  79+ C103 FF 59 59 40
  79+ C107 62 1F 4F 5C
  79+ C10B 40 48 19 41
  79+ C10F 4B 1E 46 16
  79+ C113 23 47 26 40
  79+ C117 12 43 5F 15
  79+ C11B 63 1A 1F 61
  79+ C11F 00 50 12 1F
  79+ C123 61 15 6E 12
  80+ C127 80 40 61 71                          db 128, 064, 097, 113, 255, 098, 110, 064, 115, 031, 070, 115, 073, 127, 025, 071, 114, 060, 112, 022, 030, 120, 020, 126, 018, 070, 114, 050, 120, 026, 050, 120, 027, 119, 018, 020, 125, 010, 120, 018
  80+ C12B FF 62 6E 40
  80+ C12F 73 1F 46 73
  80+ C133 49 7F 19 47
  80+ C137 72 3C 70 16
  80+ C13B 1E 78 14 7E
  80+ C13F 12 46 72 32
  80+ C143 78 1A 32 78
  80+ C147 1B 77 12 14
  80+ C14B 7D 0A 78 12
  81+ C14F 80 40 84 59                          db 128, 064, 132, 089, 255, 131, 081, 145, 098, 031, 145, 097, 133, 103, 025, 145, 098, 150, 110, 022, 150, 109, 154, 105, 018, 150, 110, 146, 120, 026, 145, 120, 140, 126, 018, 147, 120, 159, 126, 018
  81+ C153 FF 83 51 91
  81+ C157 62 1F 91 61
  81+ C15B 85 67 19 91
  81+ C15F 62 96 6E 16
  81+ C163 96 6D 9A 69
  81+ C167 12 96 6E 92
  81+ C16B 78 1A 91 78
  81+ C16F 8C 7E 12 93
  81+ C173 78 9F 7E 12
  82+ C177 80 40 9F 67                          db 128, 064, 159, 103, 255, 161, 102, 171, 108, 031, 160, 102, 175, 127, 025, 175, 124, 200, 122, 022, 200, 121, 223, 120, 018, 224, 120, 225, 127, 026, 224, 119, 245, 116, 018, 246, 117, 254, 123, 018
  82+ C17B FF A1 66 AB
  82+ C17F 6C 1F A0 66
  82+ C183 AF 7F 19 AF
  82+ C187 7C C8 7A 16
  82+ C18B C8 79 DF 78
  82+ C18F 12 E0 78 E1
  82+ C193 7F 1A E0 77
  82+ C197 F5 74 12 F6
  82+ C19B 75 FE 7B 12
  83+ C19F 80 40 91 4A                          db 128, 064, 145, 074, 255, 145, 073, 158, 072, 031, 159, 072, 179, 064, 025, 159, 073, 185, 085, 022, 182, 084, 197, 076, 018, 195, 075, 207, 079, 026, 206, 079, 245, 063, 018, 206, 080, 245, 105, 018
  83+ C1A3 FF 91 49 9E
  83+ C1A7 48 1F 9F 48
  83+ C1AB B3 40 19 9F
  83+ C1AF 49 B9 55 16
  83+ C1B3 B6 54 C5 4C
  83+ C1B7 12 C3 4B CF
  83+ C1BB 4F 1A CE 4F
  83+ C1BF F5 3F 12 CE
  83+ C1C3 50 F5 69 12
  84+ C1C7
  85+ C1C7              ; Draw line at hl for b lines
  86+ C1C7 E5 C5        DrawLighningLine:       push    hl,,bc
  87+ C1C9 4E                                   ld      c,(hl)
  88+ C1CA 23                                   inc     hl
  89+ C1CB 46                                   ld      b,(hl)
  90+ C1CC 23                                   inc     hl
  91+ C1CD 5E                                   ld      e,(hl)
  92+ C1CE 23                                   inc     hl
  93+ C1CF 56                                   ld      d,(hl)
  94+ C1D0 23                                   inc     hl
  95+ C1D1 7E                                   ld      a,(hl)          ; colour
  96+ C1D2 CD 09 E6                             call    l2_draw_diagonal
  97+ C1D5 C1 E1                                pop     hl,,bc
  98+ C1D7 3E 05                                ld      a,5
  99+ C1D9 ED 31                                add     hl,a
 100+ C1DB 10 EA                                djnz    DrawLighningLine
 101+ C1DD C9                                   ret
 102+ C1DE
 103+ C1DE              ;Loop though all lines
 104+ C1DE              ;   60$% chance of drawing a line, call draw line
 105+ C1DE              ;   go to next line
 106+ C1DE              ;repeat
 107+ C1DE 06 07        hyperspace_Lightning:   ld      b, 7                    ; total number of lightning bolts
 108+ C1E0 21 AF C0                             ld      hl,LightningLines
 109+ C1E3                                      MMUSelectLayer2
 109+ C1E3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 110+ C1E7                                      ;break
 111+ C1E7              ; above here select which lines table we will use
 112+ C1E7 C5 E5        .LineLoop:              push    bc,,hl
 113+ C1E9 CD 2B 9C                             call    doRandom
 114+ C1EC FE 1E                                cp      30
 115+ C1EE 30 0C                                jr      nc,.NextLine
 116+ C1F0 CD 2B 9C                             call    doRandom
 117+ C1F3 E6 07                                and     $07
 118+ C1F5 3C                                   inc     a
 119+ C1F6 47                                   ld      b,a
 120+ C1F7 E1                                   pop     hl
 121+ C1F8 E5                                   push    hl
 122+ C1F9 CD C7 C1                             call    DrawLighningLine
 123+ C1FC E1 C1        .NextLine:              pop     bc,,hl
 124+ C1FE 16 08                                ld      d,8
 125+ C200 1E 05                                ld      e,5
 126+ C202 ED 30                                mul
 127+ C204 19                                   add     hl,de
 128+ C205 10 E0                                djnz    .LineLoop
 129+ C207 3A 9C 96                             ld      a,(HyperCircle)
 130+ C20A 57                                   ld      d,a
 131+ C20B 01 80 40                             ld      bc, $4080
 132+ C20E                                      ;break
 133+ C20E 1E 00                                ld      e,$00
 134+ C210 CD 0F E8                             call    l2_draw_circle_fill; ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
 135+ C213 01 80 40                             ld      bc, $4080
 136+ C216 3A 9C 96                             ld      a,(HyperCircle)
 137+ C219 3C                                   inc     a
 138+ C21A 57                                   ld      d,a
 139+ C21B 1E FF                                ld      e,$FF
 140+ C21D CD 56 E7                             call    l2_draw_circle
 141+ C220 3A 9C 96                             ld      a,(HyperCircle)
 142+ C223 3C                                   inc     a
 143+ C224 3C                                   inc     a
 144+ C225 FE 40                                cp      64
 145+ C227 D0                                   ret     nc
 146+ C228 32 9C 96                             ld      (HyperCircle),a
 147+ C22B                                      SetCarryFlag
 147+ C22B 37          >                        scf
 148+ C22C C9                                   ret
 149+ C22D
 150+ C22D
 151+ C22D              draw_hyperspace:        MMUSelectLayer1
 151+ C22D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C231 CD 80 E0                             call    l1_cls
 153+ C234 CD 9A E0                             call    l1_attr_cls
 154+ C237                                      MMUSelectLayer2
 154+ C237 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 155+ C23B CD 02 E0                             call     asm_l2_double_buffer_on
 156+ C23E                                      MMUSelectSpriteBank
 156+ C23E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 157+ C242 CD 34 E4                             call    sprite_cls_cursors
 158+ C245                                      MMUSelectConsoleBank
 158+ C245 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 159+ C249 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
 160+ C24C 11 00 E0                             ld          de,ConsoleImageData
 161+ C24F 01 00 08                             ld          bc, ScreenL1BottomLen
 162+ C252 CD 6E 93                             call        memcopy_dma
 163+ C255 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 164+ C258 11 00 E8                             ld          de,ConsoleAttributes
 165+ C25B 01 00 01                             ld          bc, ScreenL1AttrBtmLen
 166+ C25E CD 6E 93                             call        memcopy_dma
 167+ C261 CD 38 91                             call        InitialiseHyperStars
 168+ C264 AF                                   xor         a
 169+ C265 32 A6 97                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
 170+ C268 3E 02                                ld          a,2
 171+ C26A 32 9C 96                             ld          (HyperCircle),a
 172+ C26D 3E FC                                ld          a,$FC
 173+ C26F 32 A6 97                             ld          (DockedFlag),a
 174+ C272 C9                                   ret
 175+ C273
 176+ C273
 177+ C273              loop_hyperspace
 178+ C273
 179+ C273              dampenRate:             equ     $04
 180+ C273 04           dampenRcounter:         DB      dampenRate
 181+ C274 04           dampenPcounter:         DB      dampenRate
 182+ C275 AF           input_front_view:       xor         a
 183+ C276 2A D3 93                             ld      hl,(addr_Pressed_Accellerate)
 184+ C279 7E                                   ld      a,(hl)
 185+ C27A                                      IfAIsZeroGoto     TestDecellerate
 185+ C27A A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 185+ C27B CA 97 C2    >                        jp	z, TestDecellerate
 186+ C27E 3A 91 97                             ld      a,(SHIPMAXSPEED)
 187+ C281 57                                   ld      d,a
 188+ C282 3A 92 97                             ld      a,(DELTA)
 189+ C285                                      JumpIfAGTENusng d,TestDecellerate
 189+ C285 BA          >                        cp     d
 189+ C286 D2 97 C2    >                        jp		nc,TestDecellerate
 190+ C289 3C                                   inc     a
 191+ C28A 32 92 97                             ld      (DELTA),a
 192+ C28D 2A 93 97                             ld      hl,(DELT4Lo)
 193+ C290 ED 34 04 00                          add     hl,4
 194+ C294 22 93 97                             ld      (DELT4Lo),hl
 195+ C297 2A D5 93     TestDecellerate:        ld      hl,(addr_Pressed_Decellerate)
 196+ C29A 7E                                   ld      a,(hl)
 197+ C29B                                      IfAIsZeroGoto   TestLeftPressed
 197+ C29B A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 197+ C29C CA B4 C2    >                        jp	z, TestLeftPressed
 198+ C29F 3A 92 97                             ld      a,(DELTA)
 199+ C2A2                                      IfAIsZeroGoto   TestLeftPressed
 199+ C2A2 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 199+ C2A3 CA B4 C2    >                        jp	z, TestLeftPressed
 200+ C2A6 3D                                   dec     a
 201+ C2A7 32 92 97                             ld      (DELTA),a
 202+ C2AA 2A 93 97                             ld      hl,(DELT4Lo)
 203+ C2AD 2B                                   dec     hl
 204+ C2AE 2B                                   dec     hl
 205+ C2AF 2B                                   dec     hl
 206+ C2B0 2B                                   dec     hl
 207+ C2B1 22 93 97                             ld      (DELT4Lo),hl
 208+ C2B4 2A CB 93     TestLeftPressed:        ld      hl,(addr_Pressed_RollLeft)
 209+ C2B7 7E                                   ld      a,(hl)
 210+ C2B8                                      IfAIsZeroGoto   TestRightPressed
 210+ C2B8 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 210+ C2B9 CA CF C2    >                        jp	z, TestRightPressed
 211+ C2BC 3A A0 96                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 212+ C2BF 21 A7 96                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 213+ C2C2 BE                                   cp      (hl)
 214+ C2C3 28 0A                                jr      z,TestRightPressed
 215+ C2C5                                      ;break
 216+ C2C5 3D                                   dec     a                                   ; increase joystick roll
 217+ C2C6 32 A0 96                             ld      (JSTX),a
 218+ C2C9 CD 10 C0                             call    draw_front_calc_alpha
 219+ C2CC C3 04 C3                             jp      TestDivePressed                    ; when pressing ignore damper
 220+ C2CF 2A CD 93     TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 221+ C2D2 7E                                   ld      a,(hl)
 222+ C2D3                                      IfAIsZeroGoto   .DampenRoll
 222+ C2D3 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 222+ C2D4 CA EA C2    >                        jp	z, .DampenRoll
 223+ C2D7 3A A0 96                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 224+ C2DA 21 A6 96                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 225+ C2DD BE                                   cp      (hl)
 226+ C2DE 28 24                                jr      z,TestDivePressed                   ; if its held then we don't dampen
 227+ C2E0                                      ;break
 228+ C2E0 3C                                   inc     a                                   ; increase joystick roll
 229+ C2E1 32 A0 96     .UpdateAlphRoll:        ld      (JSTX),a
 230+ C2E4 CD 10 C0                             call    draw_front_calc_alpha
 231+ C2E7 C3 04 C3                             jp      TestDivePressed                    ; when pressing ignore damper
 232+ C2EA 21 73 C2     .DampenRoll:            ld      hl,dampenRcounter
 233+ C2ED 35                                   dec     (hl)
 234+ C2EE 20 14                                jr      nz,TestDivePressed
 235+ C2F0 3E 04                                ld      a,dampenRate
 236+ C2F2 77                                   ld      (hl),a
 237+ C2F3 3A A0 96                             ld      a,(JSTX)
 238+ C2F6 FE 00                                cp      0
 239+ C2F8 28 0A                                jr      z, TestDivePressed
 240+ C2FA CB 7F                                bit     7,a
 241+ C2FC 28 03                                jr      z,.PosRollDampen
 242+ C2FE 3C           .NegRollDampen:         inc     a
 243+ C2FF 18 01                                jr      .ApplyRollDampen
 244+ C301 3D           .PosRollDampen:         dec     a
 245+ C302 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 246+ C304              ; Dive and Climb input
 247+ C304 2A CF 93     TestDivePressed:        ld      hl,(addr_Pressed_Dive)
 248+ C307 7E                                   ld      a,(hl)
 249+ C308                                      IfAIsZeroGoto   TestClimbPressed
 249+ C308 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 249+ C309 CA 1F C3    >                        jp	z, TestClimbPressed
 250+ C30C 3A 92 96                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 251+ C30F 21 97 96                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 252+ C312 BE                                   cp      (hl)
 253+ C313 28 0A                                jr      z,TestClimbPressed
 254+ C315                                      ;break
 255+ C315 3D                                   dec     a                                   ; increase joystick roll
 256+ C316 32 92 96                             ld      (JSTY),a
 257+ C319 CD 3D C0                             call    draw_front_calc_beta
 258+ C31C C3 54 C3                             jp      ForwardCursorKeysDone
 259+ C31F 2A D1 93     TestClimbPressed:       ld      hl,(addr_Pressed_Climb)
 260+ C322 7E                                   ld      a,(hl)
 261+ C323                                      IfAIsZeroGoto   .DampenPitch
 261+ C323 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 261+ C324 CA 3A C3    >                        jp	z, .DampenPitch
 262+ C327 3A 92 96                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 263+ C32A 21 96 96                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 264+ C32D BE                                   cp      (hl)
 265+ C32E 28 24                                jr      z,ForwardCursorKeysDone
 266+ C330 3C                                   inc     a                                   ; increase joystick roll
 267+ C331 32 92 96     .UpdateBetaPitch:       ld      (JSTY),a
 268+ C334 CD 3D C0                             call    draw_front_calc_beta
 269+ C337 C3 54 C3                             jp      ForwardCursorKeysDone
 270+ C33A 21 74 C2     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 271+ C33D 35                                   dec     (hl)
 272+ C33E 20 14                                jr      nz,ForwardCursorKeysDone
 273+ C340 3E 04                                ld      a,dampenRate
 274+ C342 77                                   ld      (hl),a
 275+ C343 3A 92 96                             ld      a,(JSTY)
 276+ C346 FE 00                                cp      0
 277+ C348 28 0A                                jr      z,ForwardCursorKeysDone
 278+ C34A CB 7F                                bit     7,a
 279+ C34C 28 03                                jr      z,.PosPitchDampen
 280+ C34E 3C           .NegPitchDampen:        inc     a
 281+ C34F 18 01                                jr      .ApplyPitchDampen
 282+ C351 3D           .PosPitchDampen:        dec     a
 283+ C352 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 284+ C354              ; Now test hyperpsace. We can't be docked as this is a view routine piece of logic but for say local charts we may
 285+ C354              ; be in flight and they have to force a forward view when hyperspace is pressed
 286+ C354              ; We won't do galatic here, but for other views force to forward view
 287+ C354 3E 24        ForwardCursorKeysDone:  ld      a,c_Pressed_Hyperspace
 288+ C356 CD CE 94                             call    is_key_pressed
 289+ C359 20 48                                jr      nz,.NotHyperspace
 290+ C35B              ; If we are in hyperspace countdown then test for hyperspace
 291+ C35B 2A 9A 96                             ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 292+ C35E 7C                                   ld      a,h                                 ; hyperspace
 293+ C35F B5                                   or      l                                   ; .
 294+ C360 20 41                                jr      nz,.CancelHyperspace                ; .
 295+ C362              ; check selected target if we finf one then after gettting galaxy at bc a=0 if not found
 296+ C362 ED 5B A8 98                          ld      de,(PresentSystemX)
 297+ C366 2A AA 98                             ld      hl,(TargetPlanetX)
 298+ C369 CD 43 AB                             call    compare16HLDE
 299+ C36C 28 35                                jr      z,.NoTargetSelected                 ; can't jump to current system
 300+ C36E 3A 95 98                             ld      a,(Galaxy)
 301+ C371                                      MMUSelectGalaxyA
 301+ C371 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 302+ C374 ED 4B AA 98                          ld      bc,(TargetPlanetX)
 303+ C378 CD B7 FA                             call    galaxy_name_at_bc
 304+ C37B FE 00                                cp      0
 305+ C37D 28 24                                jr      z,.NotHyperspace
 306+ C37F              ; check fuel is sufficient
 307+ C37F ED 4B A8 98                          ld      bc,(PresentSystemX)
 308+ C383 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 309+ C387 ED 4B AA 98                          ld      bc,(TargetPlanetX)
 310+ C38B ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 311+ C38F CD E8 FB                             call    galaxy_find_distance            ; get distance into HL
 312+ C392 7C                                   ld      a,h
 313+ C393 A7                                   and     a
 314+ C394 20 0D                                jr      nz,.InsufficientFuel            ; max jump capacity is 25 ly for any ship
 315+ C396 3A D4 9B                             ld      a,(Fuel)
 316+ C399                                      JumpIfALTNusng    l, .InsufficientFuel
 316+ C399 BD          >                        cp      l
 316+ C39A DA A3 C3    >                        jp		c, .InsufficientFuel
 317+ C39D              ; set up timer countdown
 318+ C39D 21 0B 0B                             ld      hl,HyperSpaceTimers                 ; set both timers to 15
 319+ C3A0 22 9A 96                             ld      (InnerHyperCount),hl                ; .
 320+ C3A3              .CancelHyperspace
 321+ C3A3              .NoTargetSelected
 322+ C3A3              .InsufficientFuel
 323+ C3A3              .NotHyperspace:
 324+ C3A3 C9                                   ret
 325+ C3A4
 326+ C3A4
 327+ C3A4
 328+ C3A4
 329+ C3A4
 330+ C3A4
 331+ C3A4
# file closed: ./Views/Front_View.asm
1231  C3A4              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
1232  C3A4                  SLOT    MenuStatusAddr
1233  C3A4                  PAGE    BankMenuStatus
1234  C3A4                  ORG     MenuStatusAddr
1235  C000                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 40 02 D8 B2  status_boiler_text		DW $0240,txt_commander
   4+ C014 90 02 4F 98  						DW $0290,CommanderName
   5+ C018 08 0B EC B2  						DW $0B08,txt_present_system
   6+ C01C 08 13 FF B2  						DW $1308,txt_hyperspace_system
   7+ C020 08 1B 12 B3  						DW $1B08,txt_condition
   8+ C024 08 23 20 B3  						DW $2308,txt_fuel
   9+ C028 08 2B 2E B3  						DW $2B08,txt_cash
  10+ C02C 08 33 3C B3  						DW $3308,txt_legal_status
  11+ C030 08 3B 4A B3  						DW $3B08,txt_rating
  12+ C034 08 4B 58 B3  						DW $4B08,txt_equipment
  13+ C038
  14+ C038 00 00        equipment_cursor		DW  $0000
  15+ C03A              present_position		equ	$0B98
  16+ C03A              hyperspace_position		equ	$1398
  17+ C03A              condition_position		equ	$1B70
  18+ C03A              fuel_position			equ	$2370
  19+ C03A              cash_position			equ	$2B70
  20+ C03A              legal_status_position	equ $3370
  21+ C03A              rank_position			equ $3B70
  22+ C03A              equipment_position		equ $5340
  23+ C03A              equipment_position2		equ $5378
  24+ C03A              equipmax_row			equ $FF
  25+ C03A
  26+ C03A 00           STAT_selected_row       DB 0
  27+ C03B 00           STAT_current_topItem    DB 0
  28+ C03C 00           STAT_current_end        DB 0
  29+ C03D              STAT_buffer_rows         EQU     128
  30+ C03D              STAT_buffer_row_len      EQU     24
  31+ C03D              STAT_eqip_window_len    EQU 10
  32+ C03D              STAT_display_buff_len    EQU     STAT_buffer_rows *   STAT_buffer_row_len
  33+ C03D 00 00 00...  STAT_display_buffer:     DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  34+ CC3D              STAT_position			equ $5840
  35+ CC3D 00 00 00...  STAT_cash_amount    	DS 10
  36+ CC47 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  37+ CC4B
  38+ CC4B 00 00 00...  stat_present_name       DS  30
  39+ CC69 00                                   DB  0
  40+ CC6A 00 00 00...  stat_target_name        DS  30
  41+ CC88 00                                   DB  0
  42+ CC89
  43+ CC89              stat_copy_to_name:
  44+ CC89 21 7E E8         ld      hl,GalaxyExpandedName
  45+ CC8C 01 1E 00         ld      bc,30
  46+ CC8F ED B0            ldir
  47+ CC91 C9               ret
  48+ CC92
  49+ CC92              STAT_print_boiler_text: INCLUDE "Menus/l2print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/l2print_boiler_text_inlineInclude.asm
   1++CC92
   2++CC92              ;">print_boilder_text hl = text structure, b = message count"
   3++CC92              .BoilerTextLoop:
   4++CC92 C5           	push		bc			; Save Message Count loop value
   5++CC93 4E           	ld			c,(hl)		; Get Row into b
   6++CC94 23           	inc			hl
   7++CC95 46           	ld			b,(hl)		; Get Col into b
   8++CC96 23           	inc			hl
   9++CC97 5E           	ld			e,(hl)		; Get text address Lo into E
  10++CC98 23           	inc			hl
  11++CC99 56           	ld			d,(hl)		; Get text address Hi into E
  12++CC9A 23           	inc			hl
  13++CC9B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++CC9C EB           	ex			de,hl		; now hl = address of text data
  15++CC9D                  MMUSelectLayer2
  15++CC9D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16++CCA1 1E FF            ld      e,txt_status_colour
  17++CCA3 CD 6F E1         call    l2_print_at
  18++CCA6 E1           	pop			hl
  19++CCA7 C1           	pop			bc
  20++CCA8 10 E8        	djnz		.BoilerTextLoop
  21++CCAA C9           	ret
  22++CCAB
# file closed: ./Menus/l2print_boiler_text_inlineInclude.asm
  50+ CCAB
  51+ CCAB              ;----------------------------------------------------------------------------------------------------------------------------------
  52+ CCAB DD 22 4F CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  53+ CCAF ED 53 51 CD                          ld (.STATclcn32zIX),de
  54+ CCB3 DD 21 4B CD                          ld ix,.STATclcn32t+36
  55+ CCB7 06 09                                ld b,9
  56+ CCB9 0E 00                                ld c,0
  57+ CCBB 3E 30        .STATclcn321:           ld a,'0'
  58+ CCBD B7                                   or a
  59+ CCBE DD 5E 00     .STATclcn322:           ld e,(ix+0)
  60+ CCC1 DD 56 01                             ld d,(ix+1)
  61+ CCC4 2A 4F CD                             ld hl,(.STATclcn32z)
  62+ CCC7 ED 52                                sbc hl,de
  63+ CCC9 22 4F CD                             ld (.STATclcn32z),hl
  64+ CCCC DD 5E 02                             ld e,(ix+2)
  65+ CCCF DD 56 03                             ld d,(ix+3)
  66+ CCD2 2A 51 CD                             ld hl,(.STATclcn32zIX)
  67+ CCD5 ED 52                                sbc hl,de
  68+ CCD7 22 51 CD                             ld (.STATclcn32zIX),hl
  69+ CCDA 38 04                                jr c,.STATclcn325
  70+ CCDC 0C                                   inc c
  71+ CCDD 3C                                   inc a
  72+ CCDE 18 DE                                jr .STATclcn322
  73+ CCE0 DD 5E 00     .STATclcn325:           ld e,(ix+0)
  74+ CCE3 DD 56 01                             ld d,(ix+1)
  75+ CCE6 2A 4F CD                             ld hl,(.STATclcn32z)
  76+ CCE9 19                                   add hl,de
  77+ CCEA 22 4F CD                             ld (.STATclcn32z),hl
  78+ CCED DD 5E 02                             ld e,(ix+2)
  79+ CCF0 DD 56 03                             ld d,(ix+3)
  80+ CCF3 2A 51 CD                             ld hl,(.STATclcn32zIX)
  81+ CCF6 ED 5A                                adc hl,de
  82+ CCF8 22 51 CD                             ld (.STATclcn32zIX),hl
  83+ CCFB 11 FC FF                             ld de,-4
  84+ CCFE DD 19                                add ix,de
  85+ CD00 0C                                   inc c
  86+ CD01 0D                                   dec c
  87+ CD02 28 05                                jr z,.STATclcn323
  88+ CD04 FD 77 00                             ld (iy+0),a
  89+ CD07 FD 23                                inc iy
  90+ CD09 10 B0        .STATclcn323:           djnz .STATclcn321
  91+ CD0B 3A 4F CD                             ld a,(.STATclcn32z)
  92+ CD0E C6 30                                add A,'0'
  93+ CD10 FD 77 00                             ld (iy+0),a
  94+ CD13 FD 36 02 00                          ld (iy+2),0
  95+ CD17 FD 7E 00                             ld      a,(IY+0)
  96+ CD1A FD 77 01                             ld      (IY+1),a
  97+ CD1D 3E 2E                                ld      a,"."
  98+ CD1F FD 77 00                             ld      (IY+0),a
  99+ CD22 FD 23                                inc     IY
 100+ CD24 FD 23                                inc     IY
 101+ CD26 C9                                   ret
 102+ CD27 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 102+ CD2B 0A 00 00 00
 102+ CD2F 64 00 00 00
 102+ CD33 E8 03 00 00
 102+ CD37 10 27 00 00
 103+ CD3B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 103+ CD3F 40 42 0F 00
 103+ CD43 80 96 98 00
 103+ CD47 00 E1 F5 05
 103+ CD4B 00 CA 9A 3B
 104+ CD4F 00 00        .STATclcn32z            ds 2
 105+ CD51 00 00        .STATclcn32zIX          ds 2
 106+ CD53              ;----------------------------------------------------------------------------------------------------------------------------------
 107+ CD53 2A D2 9B     STAT_GetCash:           ld		hl,(Cash+2)
 108+ CD56 EB                                   ex      de,hl
 109+ CD57 DD 2A D0 9B                          ld      ix,(Cash)
 110+ CD5B FD 21 3D CC                          ld		iy,STAT_cash_amount
 111+ CD5F CD AB CC                             call 	STAT_DispDEIXtoIY
 112+ CD62 FD E5                                push    iy
 113+ CD64 D1                                   pop     de
 114+ CD65 21 47 CC                             ld      hl,STAT_cash_UoM
 115+ CD68 01 04 00                             ld      bc,4
 116+ CD6B ED B0                                ldir
 117+ CD6D C9                                   ret
 118+ CD6E              ;----------------------------------------------------------------------------------------------------------------------------------
 119+ CD6E 7E           STAT_expand_word:       ld      a,(hl)
 120+ CD6F FE 00                                cp      0
 121+ CD71 C8                                   ret     z
 122+ CD72 12                                   ld      (de),a
 123+ CD73 23                                   inc     hl
 124+ CD74 13                                   inc     de
 125+ CD75 18 F7                                jr      STAT_expand_word
 126+ CD77
 127+ CD77              ; hl = list of words
 128+ CD77              ; de = adress to expand to
 129+ CD77 7E           STAT_expand_name:       ld      a,(hl)
 130+ CD78 47                                   ld      b,a
 131+ CD79 23                                   inc     hl
 132+ CD7A 7E                                   ld      a,(hl)              ; its a 16 bit
 133+ CD7B 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 134+ CD7C B0                                   or      b
 135+ CD7D 20 01                                jr      nz,.MoreToDo
 136+ CD7F              ;                        ld      (de),a we dont want the null marker now
 137+ CD7F C9                                   ret
 138+ CD80 E5 D5        .MoreToDo:              push    hl,,de
 139+ CD82 7E                                   ld      a,(hl)              ; bodge for now no optimise
 140+ CD83 5F                                   ld      e,a
 141+ CD84 23                                   inc     hl
 142+ CD85 7E                                   ld      a,(hl)
 143+ CD86 57                                   ld      d,a
 144+ CD87 EB                                   ex      hl,de               ; hl is now Word... address
 145+ CD88 D1                                   pop     de                  ; de back to pointer to buffer
 146+ CD89 CD 6E CD     .ProcessWord:           call    STAT_expand_word
 147+ CD8C 3E 20                                ld      a," "               ; speculative space
 148+ CD8E 12                                   ld      (de),a
 149+ CD8F 13                                   inc     de
 150+ CD90 E1                                   pop     hl                  ; get string pointer back
 151+ CD91 23                                   inc     hl
 152+ CD92 23                                   inc     hl                  ; on to next word
 153+ CD93 18 E2                                jr      STAT_expand_name
 154+ CD95
 155+ CD95              STAT_First_Item         EQU     EQ_CARGO_BAY
 156+ CD95 3A 95 98     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 157+ CD98                                      MMUSelectGalaxyA
 157+ CD98 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 158+ CD9B 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 159+ CD9E 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 160+ CDA0 11 00 0C                             ld      de, STAT_display_buff_len
 161+ CDA3 CD 48 93                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 162+ CDA6 21 54 C0                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 163+ CDA9 11 18 00                             ld      de,STAT_buffer_row_len
 164+ CDAC 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY
 165+ CDAE AF                                   xor     a
 166+ CDAF 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 167+ CDB0 19                                   add     hl,de
 168+ CDB1 10 FC                                djnz    .EoLLoop
 169+ CDB3 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; CurrentGameMaxEquipment but minus fuel and missiles
 170+ CDB5 DD 21 11 9C                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 171+ CDB9 FD 21 3D C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 172+ CDBD 0E 00                                ld      c,0                                         ; Current Row
 173+ CDBF 1E 02                                ld      e,STAT_First_Item
 174+ CDC1 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 175+ CDC4 FE 00                                cp      0
 176+ CDC6 28 21                                jr      z,.DoneFittedCheck
 177+ CDC8 D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 177+ CDCC E5 C5
 178+ CDCE 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 179+ CDD1 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 180+ CDD3 ED 30                                mul
 181+ CDD5 19                                   add     hl,de                                       ; hl = dword list of work pointers
 182+ CDD6 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 183+ CDDA CD 77 CD                             call    STAT_expand_name                           ; expand name
 184+ CDDD C1 DD E1 FD                          pop     iy,,ix,,bc
 184+ CDE1 E1
 185+ CDE2 11 18 00                             ld      de,STAT_buffer_row_len
 186+ CDE5 FD 19                                add     iy,de                                       ; now iy = start of next column
 187+ CDE7 D1                                   pop     de
 188+ CDE8 0C                                   inc     c
 189+ CDE9 DD 23        .DoneFittedCheck:       inc     ix
 190+ CDEB 1C                                   inc     e
 191+ CDEC 10 D3                                djnz    .ProcessRow
 192+ CDEE 79           .DoneProcess:           ld      a,c
 193+ CDEF 32 3C C0                             ld      (STAT_current_end),a
 194+ CDF2 C9                                   ret
 195+ CDF3              ;----------------------------------------------------------------------------------------------------------------------------------
 196+ CDF3 06 0A        draw_STAT_maintext:    	ld		b,10
 197+ CDF5 21 10 C0                             ld		hl,status_boiler_text
 198+ CDF8 CD 92 CC                             call	STAT_print_boiler_text
 199+ CDFB 3A 95 98     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 200+ CDFE                                      MMUSelectGalaxyA
 200+ CDFE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 201+ CE01 ED 4B A8 98                          ld      bc, (PresentSystemX)
 202+ CE05 CD B7 FA                             call    galaxy_name_at_bc
 203+ CE08 11 4B CC                             ld      de,stat_present_name
 204+ CE0B CD 89 CC                             call    stat_copy_to_name
 204+ CE0E
 205+ CE0E 01 98 0B                             ld      bc,present_position
 206+ CE11 21 4B CC                             ld      hl,stat_present_name
 207+ CE14                                      MMUSelectLayer2
 207+ CE14 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 208+ CE18 1E FF                                ld      e,txt_status_colour
 209+ CE1A CD 6F E1                             call    l2_print_at
 210+ CE1D 3A 95 98     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 211+ CE20                                      MMUSelectGalaxyA
 211+ CE20 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 212+ CE23 ED 4B AA 98                          ld      bc, (TargetPlanetX)
 213+ CE27 CD B7 FA                             call    galaxy_name_at_bc
 214+ CE2A 11 6A CC                             ld      de,stat_target_name
 215+ CE2D CD 89 CC                             call    stat_copy_to_name
 215+ CE30
 216+ CE30 01 98 13                             ld      bc,hyperspace_position
 217+ CE33 21 6A CC                             ld      hl,stat_target_name
 218+ CE36                                      MMUSelectLayer2
 218+ CE36 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 219+ CE3A 1E FF                                ld      e,txt_status_colour
 220+ CE3C CD 6F E1                             call    l2_print_at
 221+ CE3F CD F8 CE     .StatusText:	        call	get_cmdr_condition
 222+ CE42 21 49 9E                             ld		hl, ConditionNameIdx
 223+ CE45 CD 4B 9F                             call	getTableText
 224+ CE48 01 70 1B                             ld		bc,condition_position
 225+ CE4B                                      MMUSelectLayer2
 225+ CE4B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ CE4F 1E FF                                ld      e,txt_status_colour
 227+ CE51 CD 6F E1                             call    l2_print_at
 228+ CE54 CD B5 B3     .DisplayFuel:           call	GetFuelLevel
 229+ CE57 21 63 B3                             ld		hl, txt_fuel_level
 230+ CE5A 7E                                   ld		a,(hl)
 231+ CE5B FE 30                                cp		'0'
 232+ CE5D 20 01                                jr		nz,.PrintFuel
 233+ CE5F 23           .SkipLeadingZero:	    inc		hl
 234+ CE60 01 70 23     .PrintFuel:             ld		bc,fuel_position
 235+ CE63                                      MMUSelectLayer2
 235+ CE63 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 236+ CE67 1E FF                                ld      e,txt_status_colour
 237+ CE69 CD 6F E1                             call    l2_print_at
 238+ CE6C CD 53 CD     .DisplayCash:           call	STAT_GetCash
 239+ CE6F 01 70 2B                             ld		bc,cash_position
 240+ CE72 21 3D CC                             ld		hl,STAT_cash_amount
 241+ CE75                                      MMUSelectLayer2
 241+ CE75 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 242+ CE79 1E FF                                ld      e,txt_status_colour
 243+ CE7B CD 6F E1                             call    l2_print_at
 244+ CE7E 3A 60 98     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 245+ CE81 FE 00                                cp		0
 246+ CE83 20 05                                jr		nz,.Naughty
 247+ CE85 21 2A A0                             ld		hl,WordClean
 248+ CE88 18 0C                                jr		.DisplayLegalStatus
 249+ CE8A FE 32        .Naughty:               cp		50
 250+ CE8C 38 05                                jr		c,.JustOffender
 251+ CE8E 21 39 A0     .VeryNaughty:           ld		hl,WordFugitive
 252+ CE91 18 03                                jr		.DisplayLegalStatus
 253+ CE93 21 30 A0     .JustOffender:          ld		hl,WordOffender
 254+ CE96 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 255+ CE99                                      MMUSelectLayer2
 255+ CE99 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ CE9D 1E FF                                ld      e,txt_status_colour
 257+ CE9F CD 6F E1                             call    l2_print_at
 258+ CEA2 ED 5B 73 98  .DisplayRating:         ld		de,(KillTally)
 259+ CEA6 CD 56 9F                             call	getRankIndex
 260+ CEA9 21 35 9F                             ld		hl, RankingNameIdx
 261+ CEAC CD 4B 9F                             call	getTableText
 262+ CEAF 01 70 3B                             ld		bc,rank_position
 263+ CEB2                                      MMUSelectLayer2
 263+ CEB2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 264+ CEB6 1E FF                                ld      e,txt_status_colour
 265+ CEB8 CD 6F E1                             call    l2_print_at
 266+ CEBB C9                                   ret
 267+ CEBC
 268+ CEBC
 269+ CEBC              draw_STAT_items:        MMUSelectLayer1
 269+ CEBC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 270+ CEC0 CD 80 E0                             call    l1_cls
 271+ CEC3                                      ; add in all the status stuff later
 272+ CEC3 3A 3B C0                             ld      a,(STAT_current_topItem)
 273+ CEC6 16 18                                ld      d,STAT_buffer_row_len
 274+ CEC8 5F                                   ld      e,a
 275+ CEC9 ED 30                                mul
 276+ CECB 21 3D C0                             ld      hl,STAT_display_buffer
 277+ CECE 19                                   add     hl,de
 278+ CECF 3A 3B C0                             ld      a,(STAT_current_topItem)
 279+ CED2 47                                   ld      b,a
 280+ CED3 3A 3C C0                             ld      a,(STAT_current_end)
 281+ CED6 90                                   sub     b
 282+ CED7                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen
 282+ CED7 FE 0A       >                        cp      STAT_eqip_window_len
 282+ CED9 DA E0 CE    >                        jp		c, .FillScreen
 283+ CEDC 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len
 284+ CEDE 18 01                                jr      .ReadyToPrint
 285+ CEE0 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 286+ CEE1 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 287+ CEE4 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 288+ CEE7 CD C8 E0                             call    l1_print_at
 288+ CEEA
 289+ CEEA C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 290+ CEEC 11 18 00                             ld      de,STAT_buffer_row_len
 291+ CEEF 19                                   add     hl,de
 292+ CEF0 D1                                   pop     de                          ; get output row back
 293+ CEF1 3E 08                                ld      a,8
 294+ CEF3 82                                   add     a,d
 295+ CEF4 57                                   ld      d,a
 296+ CEF5 10 ED                                djnz    .DrawARow
 297+ CEF7 C9                                   ret
 298+ CEF8
 299+ CEF8              ;----------------------------------------------------------------------------------------------------------------------------------
 300+ CEF8
 301+ CEF8 3A A6 97     get_cmdr_condition:     ld			a,(DockedFlag)
 302+ CEFB FE FF                                cp			PlayerDocked
 303+ CEFD 28 2B                                jr			z,.PlayerIsDocked
 304+ CEFF 3A 90 96     .PlayerNotDocked:	    ld          a,(SpaceStationSafeZone)
 305+ CF02 FE 00                                cp          0
 306+ CF04 C8                                   ret         z
 307+ CF05 21 0A 98                             ld          hl,UniverseSlotCount
 308+ CF08 0E 01                                ld          c,1
 309+ CF0A 06 0C        .CheckForShipsLoop:     ld          b,UniverseListSize
 310+ CF0C 7E                                   ld          a,(hl)
 311+ CF0D FE 00                                cp          0
 312+ CF0F 20 17                                jr          nz,.PlayerColour        ; TODO Need to refine to remove cargo, exploding ships and hull plate
 313+ CF11 23                                   inc         hl
 314+ CF12 10 F6                                djnz        .CheckForShipsLoop
 315+ CF14 86           .countShipsLoop:	    add			a,(hl)
 316+ CF15 23                                   inc			hl
 317+ CF16 10 FC                                djnz		.countShipsLoop
 318+ CF18 FE 00                                cp			0
 319+ CF1A 0E 01                                ld          c,1
 320+ CF1C 28 0A                                jr			z,.PlayerColour
 321+ CF1E 3A 79 98     .NoShipsAround:         ld			a,(PlayerEnergy)
 322+ CF21 FE 80                                cp			$80
 323+ CF23 3E 01                                ld          a,1
 324+ CF25 CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 325+ CF27 C9                                   ret
 326+ CF28 79           .PlayerColour:          ld          a,c
 327+ CF29 C9                                   ret
 328+ CF2A AF           .PlayerIsDocked:        xor			a
 329+ CF2B C9                                   ret
 330+ CF2C
 331+ CF2C              ;;;PrintEquipment:         ld		a,(hl)
 332+ CF2C              ;;;                        cp		0
 333+ CF2C              ;;;                        ret		z
 334+ CF2C              ;;;                        ld		a,b
 335+ CF2C              ;;;PrintEquipmentDirect:	call	expandTokenToString
 336+ CF2C              ;;;                        ld		hl,TextBuffer
 337+ CF2C              ;;;                        ld		de,(equipment_cursor)
 338+ CF2C              ;;;                        call	l1_print_at
 339+ CF2C              ;;;                        ld		bc,(equipment_cursor)
 340+ CF2C              ;;;                        ld		a,b
 341+ CF2C              ;;;                        add		a,8
 342+ CF2C              ;;;                        ld		b,a
 343+ CF2C              ;;;                        ld		(equipment_cursor),bc
 344+ CF2C              ;;;                        cp		equipmax_row
 345+ CF2C              ;;;                        jr		c,.SkipColUpdate
 346+ CF2C              ;;;.ColUpdate:             ld		hl,equipment_position2
 347+ CF2C              ;;;                        ld		(equipment_cursor),hl
 348+ CF2C              ;;;                        ret
 349+ CF2C              ;;;.SkipColUpdate:	        ld		a,b
 350+ CF2C              ;;;                        ld		(equipment_cursor+1), a
 351+ CF2C              ;;;                        ret
 352+ CF2C
 353+ CF2C              draw_status_menu:       INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++CF2C
   2++CF2C                  MMUSelectLayer1
   2++CF2C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++CF30 CD 80 E0     	call	l1_cls
   4++CF33 3E 07        	ld		a,7
   5++CF35 CD 9B E0     	call	l1_attr_cls_to_a
   6++CF38                  MMUSelectLayer2
   6++CF38 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++CF3C CD 08 E0     	call    asm_l2_double_buffer_off
   8++CF3F CD C9 E0     	call	l2_cls	; Get some space
   9++CF42              	MMUSelectSpriteBank
   9++CF42 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++CF46 CD 34 E4     	call    sprite_cls_cursors
  11++CF49
  12++CF49
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 354+ CF49 3E 08                                ld		a,8
 355+ CF4B 32 A2 97                             ld		(MenuIdMax),a
 356+ CF4E 01 01 01     .Drawbox:               ld		bc,$0101
 357+ CF51 11 FD BE                             ld		de,$BEFD
 358+ CF54 3E C0                                ld		a,$C0
 359+ CF56                                      MMUSelectLayer2
 359+ CF56 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 360+ CF5A CD F6 E1                             call	l2_draw_box
 361+ CF5D 01 01 0A                             ld		bc,$0A01
 362+ CF60 11 C0 FE                             ld		de,$FEC0
 363+ CF63 CD 60 E2                             call	l2_draw_horz_line
 364+ CF66 CD 95 CD     .equipment              call    STAT_buffer_list
 365+ CF69 CD BC CE                             call    draw_STAT_items
 366+ CF6C CD F3 CD                             call    draw_STAT_maintext
 367+ CF6F C9                                   ret
 368+ CF70
 369+ CF70              ;----------------------------------------------------------------------------------------------------------------------------------
 370+ CF70              ; Handles all the input whilst in the market menu
 371+ CF70 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 372+ CF72 CD CE 94                             call    is_key_pressed
 373+ CF75 CC 81 CF                             call    z,STAT_UpPressed
 374+ CF78 3E 4C                                ld      a,c_Pressed_CursorDown
 375+ CF7A CD CE 94                             call    is_key_pressed
 376+ CF7D CC 93 CF                             call    z,STAT_DownPressed
 377+ CF80 C9                                   ret
 378+ CF81
 379+ CF81              ;----------------------------------------------------------------------------------------------------------------------------------
 380+ CF81 AF           STAT_UpPressed:         xor     a
 381+ CF82 32 3A C0                             ld      (STAT_selected_row),a
 382+ CF85 3A 3B C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 383+ CF88 FE 00                                cp      0
 384+ CF8A C8                                   ret     z
 385+ CF8B 3D                                   dec     a           ; chjange later to buffering step back 1
 386+ CF8C 32 3B C0                             ld      (STAT_current_topItem),a
 387+ CF8F CD BC CE                             call    draw_STAT_items
 388+ CF92 C9                                   ret
 389+ CF93              ;----------------------------------------------------------------------------------------------------------------------------------
 390+ CF93 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 391+ CF95 32 3A C0                             ld      (STAT_selected_row),a
 392+ CF98 3A 3C C0                             ld      a,(STAT_current_end)
 393+ CF9B 47                                   ld      b,a                             ; This check is if the current list is < one screen
 394+ CF9C 05                                   dec     b
 395+ CF9D 3A 3A C0                             ld      a,(STAT_selected_row)
 396+ CFA0 B8                                   cp      b
 397+ CFA1 C8                                   ret     z
 398+ CFA2 FE 09                                cp      STAT_eqip_window_len-1
 399+ CFA4 28 05                                jr      z, .check_scroll_down
 400+ CFA6 21 3A C0                             ld      hl,STAT_selected_row
 401+ CFA9 34                                   inc     (hl)
 402+ CFAA C9                                   ret
 403+ CFAB 47           .check_scroll_down:     ld      b,a
 404+ CFAC 3A 3B C0                             ld      a,(STAT_current_topItem)
 405+ CFAF 80                                   add     b
 406+ CFB0 3C                                   inc     a
 407+ CFB1 21 3C C0                             ld      hl,STAT_current_end
 408+ CFB4                                      ReturnIfAGTEusng      (hl)
 408+ CFB4 BE          >                        cp    (hl)
 408+ CFB5 D0          >                        ret	 nc
 409+ CFB6 21 3B C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 410+ CFB9 34                                   inc     (hl)
 411+ CFBA CD BC CE                             call    draw_STAT_items
 412+ CFBD C9                                   ret
 413+ CFBE
# file closed: ./Menus/status_menu.asm
1236  CFBE
1237  CFBE              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
1238  CFBE
1239  CFBE                  SLOT    MenuEquipSAddr
1240  CFBE                  PAGE    BankMenuEquipS
1241  CFBE                  ORG     MenuEquipSAddr
1242  C000                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 98 A4  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E              .BoilerTextLoop:
   4++D26E C5           	push		bc			; Save Message Count loop value
   5++D26F 4E           	ld			c,(hl)		; Get Row into b
   6++D270 23           	inc			hl
   7++D271 46           	ld			b,(hl)		; Get Col into b
   8++D272 23           	inc			hl
   9++D273 5E           	ld			e,(hl)		; Get text address Lo into E
  10++D274 23           	inc			hl
  11++D275 56           	ld			d,(hl)		; Get text address Hi into E
  12++D276 23           	inc			hl
  13++D277 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++D278 EB           	ex			de,hl		; now hl = address of text data
  15++D279 1E FF        	ld			e,txt_status_colour
  16++D27B C5           	push		bc
  17++D27C D1           	pop			de
  18++D27D                  MMUSelectLayer1
  18++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++D281 CD C8 E0     	call		l1_print_at
  20++D284 E1           	pop			hl
  21++D285 C1           	pop			bc
  22++D286 10 E6        	djnz		.BoilerTextLoop
  23++D288 C9           	ret
  24++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A D2 9B     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A D0 9B                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD C8 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD 48 93                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D5 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 80 E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD C8 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++D3EA
   2++D3EA                  MMUSelectLayer1
   2++D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++D3EE CD 80 E0     	call	l1_cls
   4++D3F1 3E 07        	ld		a,7
   5++D3F3 CD 9B E0     	call	l1_attr_cls_to_a
   6++D3F6                  MMUSelectLayer2
   6++D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++D3FA CD 08 E0     	call    asm_l2_double_buffer_off
   8++D3FD CD C9 E0     	call	l2_cls	; Get some space
   9++D400              	MMUSelectSpriteBank
   9++D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++D404 CD 34 E4     	call    sprite_cls_cursors
  11++D407
  12++D407
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 A2 97                             ld      (MenuIdMax),a
 380+ D40C 3A 95 98     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 382+ D412 CD 69 F9                             call    galaxy_planet_data
 383+ D415 CD F1 F8                             call    galaxy_equip_market
 384+ D418 ED 4B A8 98                          ld      bc,(PresentSystemX)
 385+ D41C CD B7 FA                             call    galaxy_name_at_bc
 386+ D41F CD 69 F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD F6 E1                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD 60 E2                             call	l2_draw_horz_line
 398+ D441 3A 95 98     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD 13 A4                             call	expandTokenToString
 402+ D44C CD 79 F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD CE 94                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD CE 94                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD CE 94                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD CE 94                             call    is_key_pressed
 443+ D4A3 CC 64 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >                        cp    (hl)
 481+ D4EA D0          >                        ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A 95 98     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 489+ D4F9 DD 21 D5 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2B                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD D7 A5                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 0F 9C                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),0              ; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 09                             ld      a,(ix+9)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 D5 9B     .ItsALaser              ld      hl,LaserList
 523+ D541 ED 31                                add     hl,a
 524+ D543 36 00                                ld      (hl),$00
 525+ D545 C9                                   ret
 526+ D546 DD 5E 04     .RefundMissle           ld      e,(ix+4)
 527+ D549 DD 56 05                             ld      d,(ix+5)
 528+ D54C E5 C5                                push    hl,,bc
 529+ D54E CD D7 A5                             call    addDEtoCash         ; refund laser value
 530+ D551 C1 E1                                pop     hl,,bc
 531+ D553 DD 7E 07                             ld      a,(ix+7)
 532+ D556 3D                                   dec     a
 533+ D557 FE 30                                cp      "0"
 534+ D559 20 02                                jr      nz,.NotAllSold
 535+ D55B 3E 2D        .AllSold:               ld      a,"-"
 536+ D55D DD 77 07     .NotAllSold:            ld      (ix+7),a
 537+ D560 CD 5D D4                             call    eqip_refesh_buffer
 538+ D563 C9                                   ret
 539+ D564              ;----------------------------------------------------------------------------------------------------------------------------------
 540+ D564 3A 95 98     eqshp_RightPressed:     ld      a,(Galaxy)
 541+ D567                                      MMUSelectGalaxyA
 541+ D567 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 542+ D56A DD 21 D5 F4                          ld      ix,ShipEquipmentList
 543+ D56E 3A 90 C0                             ld      a,(eqshp_current_topItem)
 544+ D571 47                                   ld      b,a
 545+ D572 3A 8F C0                             ld      a,(eqshp_selected_row)
 546+ D575 80                                   add     a,b
 547+ D576 FE 01                                cp      EQ_MISSILE
 548+ D578 20 0A                                jr      nz,.NotAMissileBuy
 549+ D57A 08           .ItsAMissile:           ex      af,af'
 550+ D57B 3E 34                                ld      a,"4"
 551+ D57D 32 96 D5                             ld      (.CompareCheck+1),a
 552+ D580 08                                   ex      af,af'
 553+ D581 C3 8B D5                             jp      .FindInTable
 554+ D584 08           .NotAMissileBuy:        ex      af,af'
 555+ D585 3E 2A                                ld      a,"*"
 556+ D587 32 96 D5                             ld      (.CompareCheck+1),a
 557+ D58A 08                                   ex      af,af'
 558+ D58B 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 559+ D58D 5F                                   ld      e,a
 560+ D58E ED 30                                mul
 561+ D590 DD 19                                add     ix,de
 562+ D592 DD 7E 07                             ld      a,(ix+7)
 563+ D595 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 564+ D597 C8                                   ret     z
 565+ D598 47           .Purchasable:           ld      b,a
 566+ D599 DD 7E 06                             ld      a,(ix+6)
 567+ D59C FE 01                                cp      EQ_MISSILE
 568+ D59E 20 06                                jr      nz,.NotMissleMax
 569+ D5A0 21 5F 98     .MissleQuanity:         ld      hl,NbrMissiles
 570+ D5A3 78                                   ld      a,b
 571+ D5A4 BE                                   cp      (hl)
 572+ D5A5 C8                                   ret     z
 573+ D5A6 4F           .NotMissleMax:          ld      c,a
 574+ D5A7 DD 7E 01                             ld      a,(ix+1)
 575+ D5AA FE FF                                cp      $FF
 576+ D5AC C8                                   ret     z
 577+ D5AD 2A D2 9B     .CheckCash:             ld      hl,(Cash+2)
 578+ D5B0 7C                                   ld      a,h
 579+ D5B1 B5                                   or      l
 580+ D5B2 20 0F                                jr      nz,.MoreThanRequired
 581+ D5B4 2A D0 9B                             ld      hl,(Cash)
 582+ D5B7 7C                                   ld      a,h
 583+ D5B8 FE 00                                cp      0
 584+ D5BA 20 07                                jr      nz,.MoreThanRequired
 585+ D5BC DD 7E 02                             ld      a,(ix+2)
 586+ D5BF BD                                   cp      l
 587+ D5C0 30 01                                jr      nc,.MoreThanRequired
 588+ D5C2 C9                                   ret                         ; Insufficient Funds
 589+ D5C3 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 590+ D5C6 FE 00                                cp      0
 591+ D5C8 28 15                                jr      z,.MaxFuelOut
 592+ D5CA FE 01                                cp      1
 593+ D5CC 28 1B                                jr      z,.AddMissle
 594+ D5CE                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 594+ D5CE FE 0A       >                        cp     EQ_FRONT_PULSE
 594+ D5D0 D2 F3 D5    >                        jp		nc,.AddLaser
 595+ D5D3 21 0F 9C     .AddNormalItem:         ld      hl,EquipmentFitted
 596+ D5D6 ED 31                                add     hl,a
 597+ D5D8 36 FF                                ld      (hl),$FF
 598+ D5DA 3E 2A                                ld      a,"*"
 599+ D5DC C3 41 D6                             jp      .AddedItem
 600+ D5DF              .MaxFuelOut:            MaxFuelMacro
 600+ D5DF 3E 46       >						ld		a,MaxFuelLevel
 600+ D5E1 32 D4 9B    >						ld		(Fuel),a
 601+ D5E4 3E 2A                                ld      a,"*"
 602+ D5E6 C3 41 D6                             jp      .AddedItem
 603+ D5E9 21 5F 98     .AddMissle:             ld      hl,NbrMissiles
 604+ D5EC 34                                   inc     (hl)
 605+ D5ED 7E                                   ld      a,(hl)
 606+ D5EE C6 30                                add     "0"
 607+ D5F0 C3 41 D6                             jp      .AddedItem
 608+ D5F3 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get facing
 609+ D5F6 21 D5 9B                             ld      hl,LaserList
 610+ D5F9 ED 31                                add     hl,a
 611+ D5FB 7E                                   ld      a,(hl)              ; get laser list quick ref value
 612+ D5FC FE 00                                cp      0
 613+ D5FE 28 29                                jr      z,.BuyLaser
 614+ D600              .LargeCargoBay: ;TODO
 615+ D600 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 616+ D601 21 D5 F4                             ld      hl,ShipEquipmentList
 617+ D604 16 10                                ld      d,ShipEquipTableRowLen
 618+ D606 5F                                   ld      e,a
 619+ D607 ED 30                                mul
 620+ D609 19                                   add     hl,de               ; now we have the row for the current laser
 621+ D60A 3E 04                                ld      a,4
 622+ D60C ED 31                                add     hl,a
 623+ D60E 7E                                   ld      a,(hl)
 624+ D60F 5F                                   ld      e,a
 625+ D610 23                                   inc     hl
 626+ D611 7E                                   ld      a,(hl)
 627+ D612 57                                   ld      d,a
 628+ D613 E5 C5                                push    hl,,bc
 629+ D615 CD D7 A5                             call    addDEtoCash         ; refund laser value
 630+ D618 C1 E1                                pop     hl,,bc
 631+ D61A 3E 02                                ld      a,2
 632+ D61C ED 31                                add     hl,a
 633+ D61E 3E 2D                                ld      a,"-"
 634+ D620 77                                   ld      (hl),a              ; clear on ship equipment
 635+ D621 21 0F 9C                             ld      hl,EquipmentFitted
 636+ D624 79                                   ld      a,c                 ; get back current laser ref
 637+ D625 ED 31                                add     hl,a
 638+ D627 36 00                                ld      (hl),0              ; remove laser from equipment
 639+ D629 21 0F 9C     .BuyLaser:              ld      hl,EquipmentFitted
 640+ D62C DD 7E 06                             ld      a,(ix+6)
 641+ D62F ED 31                                add     hl,a
 642+ D631 36 FF                                ld      (hl),$FF
 643+ D633 DD 7E 08                             ld      a,(ix+8)
 644+ D636 21 D5 9B                             ld      hl,LaserList
 645+ D639 ED 31                                add     hl,a
 646+ D63B DD 7E 06                             ld      a,(ix+6)
 647+ D63E 77                                   ld      (hl),a              ; mark laser list with type
 648+ D63F 3E 2A                                ld      a,"*"
 649+ D641 DD 77 07     .AddedItem              ld      (ix+7),a
 650+ D644 DD 5E 04                             ld      e,(ix+4)
 651+ D647 DD 56 05                             ld      d,(ix+5)
 652+ D64A CD EA A5                             call    subDEfromCash
 653+ D64D CD 5D D4                             call    eqip_refesh_buffer
 654+ D650 C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
1243  D651
1244  D651
1245  D651                  SLOT    LaunchShipAddr
1246  D651                  PAGE    BankLaunchShip
1247  D651                  ORG     LaunchShipAddr
1248  C000                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD 53 E2                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD 53 E2                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD 09 E6                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD 09 E6                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD 6E 93                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD 6E 93                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 80 E0                             call    l1_cls
 129+ C180 CD 9A E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD 34 E4                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 02 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 72 E0                             ld      (l2_cls_byte),a
 136+ C196 CD 92 E0                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 72 E0                             ld      (l2_cls_byte),a
 139+ C19E CD BE E0                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD DD E0                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 72 E0                             ld      (l2_cls_byte),a
 146+ C1B3 CD 92 E0                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 72 E0                             ld      (l2_cls_byte),a
 149+ C1BB CD BE E0                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A 91 97    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 92 97    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 93 97 >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 92 97    >                        ld      (DELTA),a
 160+ C1E9 32 93 97    >                        ld      (DELT4Lo),a
 160+ C1EC 32 94 97    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,$FE
 163+ C1F1 32 A6 97                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5              draw_docking_ship:      MMUSelectLayer1
 167+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 168+ C1F9 CD 80 E0                             call    l1_cls
 169+ C1FC CD 9A E0                             call    l1_attr_cls
 170+ C1FF                                      MMUSelectSpriteBank
 170+ C1FF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 171+ C203 CD 34 E4                             call    sprite_cls_cursors
 172+ C206                                      MMUSelectLayer2
 172+ C206 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173+ C20A CD 02 E0                             call    asm_l2_double_buffer_on
 174+ C20D 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 175+ C20F 32 72 E0                             ld      (l2_cls_byte),a
 176+ C212 CD 92 E0                             call    l2_set_color_upper2
 177+ C215 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 178+ C217 32 72 E0                             ld      (l2_cls_byte),a
 179+ C21A CD BE E0                             call    l2_cls_lower_third
 180+ C21D CD 07 C1                             call    LaunchTubeEdges
 181+ C220 CD 5C C1                             call    LaunchConsole
 182+ C223              .NextBuffer:            MMUSelectLayer2
 182+ C223 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183+ C227 CD DD E0                             call    l2_flip_buffers
 184+ C22A 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 185+ C22C 32 72 E0                             ld      (l2_cls_byte),a
 186+ C22F CD 92 E0                             call    l2_set_color_upper2
 187+ C232 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 188+ C234 32 72 E0                             ld      (l2_cls_byte),a
 189+ C237 CD BE E0                             call    l2_cls_lower_third
 190+ C23A CD 07 C1                             call    LaunchTubeEdges
 191+ C23D CD 5C C1                             call    LaunchConsole
 192+ C240 3E FF        .SetUpTimers:           ld      a,init_countdown
 193+ C242 32 00 C1                             ld      (launch_countdown),a
 194+ C245 21 87 C0                             ld      hl,dockingdraw_table
 195+ C248 22 03 C1                             ld      (docking_table_idx),hl
 196+ C24B AF                                   xor     a
 197+ C24C 32 05 C1                             ld      (current_offsetX),a
 198+ C24F 32 06 C1                             ld      (current_offsetY),a
 199+ C252 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 200+ C253                                      ZeroThrottle
 200+ C253 AF          >                        xor     a
 200+ C254 32 92 97    >                        ld      (DELTA),a
 200+ C257 32 93 97    >                        ld      (DELT4Lo),a
 200+ C25A 32 94 97    >                        ld      (DELT4Lo+1),a
 201+ C25D 3E FF                                ld      a,$FF
 202+ C25F 32 A6 97                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 203+ C262 C9                                   ret
 204+ C263
 205+ C263 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 206+ C266 3E FF                                ld      a,init_countdown
 207+ C268 32 00 C1                             ld      (launch_countdown),a
 208+ C26B 2A 01 C1                             ld      hl,(launch_table_idx)
 209+ C26E 4E                                   ld      c,(hl)
 210+ C26F 79                                   ld      a,c
 211+ C270 FE FF                                cp      $FF
 212+ C272 28 1E                                jr      z,.FinishedLaunch
 213+ C274 23                                   inc     hl
 214+ C275 46                                   ld      b,(hl)                 ; bc = top left
 215+ C276 23                                   inc     hl
 216+ C277 5E                                   ld      e,(hl)
 217+ C278 23                                   inc     hl
 218+ C279 56                                   ld      d,(hl)                 ;de = width and height
 219+ C27A 23                                   inc     hl
 220+ C27B 7E                                   ld      a,(hl)                 ; a = colour
 221+ C27C 23                                   inc     hl
 222+ C27D 22 01 C1                             ld      (launch_table_idx),hl
 223+ C280 67                                   ld      h,a
 224+ C281 C5 D5                                push    bc,,de
 225+ C283                                      MMUSelectLayer2
 225+ C283 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ C287 CD E6 E1                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 227+ C28A D1 C1                                pop     bc,,de
 228+ C28C 3E 80                                ld      a,$80
 229+ C28E CD F6 E1                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 230+ C291 C9                                   ret
 231+ C292 3E FD        .FinishedLaunch:        ld      a,$FD                   ; now seed that we need a universe rebuild post launch
 232+ C294 32 A6 97                             ld      (DockedFlag),a
 233+ C297 C9                                   ret
 234+ C298
 235+ C298 CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 236+ C29B 3E FF                                ld      a,init_countdown
 237+ C29D 32 00 C1                             ld      (launch_countdown),a
 238+ C2A0 2A 03 C1                             ld      hl,(docking_table_idx)
 239+ C2A3 4E                                   ld      c,(hl)
 240+ C2A4 79                                   ld      a,c
 241+ C2A5 FE FF                                cp      $FF
 242+ C2A7 28 1E                                jr      z,.FinishedDocking
 243+ C2A9 23                                   inc     hl
 244+ C2AA 46                                   ld      b,(hl)                 ; bc = top left
 245+ C2AB 23                                   inc     hl
 246+ C2AC 5E                                   ld      e,(hl)
 247+ C2AD 23                                   inc     hl
 248+ C2AE 56                                   ld      d,(hl)                 ;de = width and height
 249+ C2AF 23                                   inc     hl
 250+ C2B0 7E                                   ld      a,(hl)
 251+ C2B1 23                                   inc     hl
 252+ C2B2 22 03 C1                             ld      (docking_table_idx),hl
 253+ C2B5 67                                   ld      h,a
 254+ C2B6 C5 D5                                push    bc,,de
 255+ C2B8                                      MMUSelectLayer2
 255+ C2B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ C2BC CD E6 E1                             call    l2_draw_fill_box
 257+ C2BF D1 C1                                pop     bc,,de
 258+ C2C1 3E 80                                ld      a,$80
 259+ C2C3 CD F6 E1                             call    l2_draw_box
 260+ C2C6 C9                                   ret
 261+ C2C7              .FinishedDocking        ForceTransition ScreenStatus              ; Force move to status screen
 261+ C2C7 3E 04       >                        ld      a,ScreenStatus
 261+ C2C9 32 8C 86    >                        ld      (ScreenTransitionForced), a
 262+ C2CC C9                                   ret
 263+ C2CD
 264+ C2CD
 265+ C2CD
# file closed: ./Transitions/launch_ship.asm
1249  C2CD
1250  C2CD              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
1251  C2CD                  SLOT    UniverseBankAddr
1252  C2CD                  PAGE    BankUNIVDATA0
1253  C2CD              	ORG	    UniverseBankAddr,BankUNIVDATA0
1254  C000                  INCLUDE "./Universe/Ships/univ_ship_data.asm"
# file opened: ./Universe/Ships/univ_ship_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; There can be upto &12 objects in flight.
   4+ C000              ; To avoid hassle of memory heap managment, the free list
   5+ C000              ; will correspond to a memory bank offset so data will be held in
   6+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
   9+ C000              ; This means each gets its own line list, inwork etc
  10+ C000
  11+ C000              ; "Runtime Ship Data paged into in Bank 7"
  12+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  12+ C004 65 72 73 65
  12+ C008 20 50 47
  13+ C00B 58           StartOfUnivN:       DB "X"
  14+ C00C              ; NOTE we can cheat and pre allocate segs just using a DS for now
  15+ C00C
  16+ C00C              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  17+ C00C              ; Universe map substibute for INWK
  18+ C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  19+ C00C                                      INCLUDE "./Universe/Ships/ShipPosVars.asm"
# file opened: ././Universe/Ships/ShipPosVars.asm
   1++C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C00C 00           UBnKxlo                     DB  0                       ; INWK+0
   3++C00D 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C00E 00           UBnKxsgn                    DB  0                       ; INWK+2
   5++C00F 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C010 00           UBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C011 00           UBnKysgn                    DB  0                       ; INWK +5
   8++C012 00           UBnKzlo                     DB  0                       ; INWK +6
   9++C013 00           UBnKzhi                     DB  0                       ; INWK +7
  10++C014 00           UBnKzsgn                    DB  0                       ; INWK +8
  11++C015
  12++C015              ;; REDUDANT INWKxlo                     equ UBnKxlo
  13++C015              ;; REDUDANT INWKxhi                     equ UBnKxhi                 ; there are hi medium low as some times these are 24 bit
  14++C015              ;; REDUDANT INWKxsgn                    equ UBnKzsgn                ; INWK+2
  15++C015              ;; REDUDANT INWKyLo                     equ UBnKylo                 ; INWK+3 \ ylo
  16++C015              ;; REDUDANT INWKyhi                     equ UbnKyhi                 ; Y Hi???
  17++C015              ;; REDUDANT INWKysgn                    equ UBnKysgn                ; INWK +5
  18++C015              ;; REDUDANT INWKzlo                     equ UBnKzlo                 ; INWK +6
  19++C015              ;; REDUDANT INWKzhi                     equ UBnKzhi                 ; INWK +7
  20++C015              ;; REDUDANT INWKzsgn                    equ UBnKzsgn                ; INWK +8
# file closed: ././Universe/Ships/ShipPosVars.asm
  20+ C015                                      INCLUDE "./Universe/Ships/RotationMatrixVars.asm"
# file opened: ././Universe/Ships/RotationMatrixVars.asm
   1++C015              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C015              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C015 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
   4++C017              UBnkrotmatSidev             equ UBnkrotmatSidevX
   5++C017 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
   6++C019 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
   7++C01B 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
   8++C01D              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
   9++C01D 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  10++C01F 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  11++C021 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  12++C023              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  13++C023 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  14++C025 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  15++C027
# file closed: ././Universe/Ships/RotationMatrixVars.asm
  21+ C027                                      INCLUDE "./Universe/Ships/AIRuntimeData.asm"
# file opened: ././Universe/Ships/AIRuntimeData.asm
   1++C027              ; -- Ship AI data
   2++C027 00           UBnKShipType                DB  0
   3++C028 00           UBnKspeed                   DB  0                       ; INWK +27
   4++C029 00           UBnKAccel                   DB  0                       ; INWK +28
   5++C02A 00           UBnKRotXCounter             DB  0                       ; INWK +29
   6++C02B 00           UBnKRotZCounter             DB  0                       ; INWK +30
   7++C02C 00           UBnKexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
   8++C02D              ; Flags work as follows:
   9++C02D              ; 7 - Flag ship to be killed with debris
  10++C02D              ; 6 - Invisible/Erase (also mentions Laser Firing?)
  11++C02D              ; 5 - Ship is exploding if set
  12++C02D              ; 4 -
  13++C02D              ; 3 - Display state - Plot as a Dot
  14++C02D              ; 2 - Nbr of Missiles bit 2
  15++C02D              ; 1 - Nbr of Missiles bit 1
  16++C02D              ; 0 - Nbr of Missiles bit 0
  17++C02D 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  18++C02E 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  19++C02F 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  20++C030 00           UbnKEnergy                  DB  0                       ; INWK +35
  21++C031              ; Flags work as follows:
  22++C031              ;Bit	Description
  23++C031              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  24++C031              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  25++C031              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  26++C031              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
  27++C031              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
  28++C031              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
  29++C031              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
  30++C031              ;                       Hostile ships will attack us on sight; there are quite a few of them
  31++C031              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
  32++C031              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
  33++C031              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
  34++C031              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
  35++C031              ;#4	Docking flag        * 0 = not docking * 1 = docking
  36++C031              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
  37++C031              ;                       This flag is randomly set for traders when they are spawned
  38++C031              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  39++C031              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
  40++C031              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
  41++C031              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
  42++C031              ;#6	Cop flag            * 0 = not a cop * 1 = cop
  43++C031              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
  44++C031              ;                       Ships that are cops: Viper, Transporter
  45++C031              ;#7	Scooped, docked, escape pod flag
  46++C031              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
  47++C031              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
  48++C031              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
  49++C031
# file closed: ././Universe/Ships/AIRuntimeData.asm
  22+ C031
  23+ C031              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  24+ C031              ;                    [roofv x y z ] roof vector (up)
  25+ C031              ;                    [sidev x y z ] side vector (right)
  26+ C031              ;;rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  27+ C031              ;;rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  28+ C031 00           univRAT      DB  0               ; 99
  29+ C032 00           univRAT2     DB  0               ; 9A
  30+ C033 00           univRAT2Val  DB  0               ; 9A
  31+ C034
  32+ C034                                      INCLUDE "./Universe/Ships/XX16Vars.asm"
# file opened: ././Universe/Ships/XX16Vars.asm
   1++C034              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C034 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C036              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C036 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C038 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C03A 00 00        UBnkTransmatRoofvX          DW 0
   7++C03C              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C03C 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03E 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C040 00 00        UBnkTransmatNosevX          DW 0
  11++C042              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C042 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C044 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C046 00 00        UbnkTransmatTransX          DW 0
  15++C048 00 00        UbnkTransmatTransY          DW 0
  16++C04A 00 00        UbnkTransmatTransZ          DW 0
  17++C04C              XX16                        equ UBnkTransmatSidev
  18++C04C              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04C 00 00        UbnkTransInvRow0x0          DW 0
  20++C04E 00 00        UbnkTransInvRow0x1          DW 0
  21++C050 00 00        UbnkTransInvRow0x2          DW 0
  22++C052 00 00        UbnkTransInvRow0x3          DW 0
  23++C054 00 00        UbnkTransInvRow1y0          DW 0
  24++C056 00 00        UbnkTransInvRow1y1          DW 0
  25++C058 00 00        UbnkTransInvRow1y2          DW 0
  26++C05A 00 00        UbnkTransInvRow1y3          DW 0
  27++C05C 00 00        UbnkTransInvRow2z0          DW 0
  28++C05E 00 00        UbnkTransInvRow2z1          DW 0
  29++C060 00 00        UbnkTransInvRow2z2          DW 0
  30++C062 00 00        UbnkTransInvRow2z3          DW 0
  31++C064
  32++C064              XX16Inv             equ UbnkTransInvRow0x0
  33++C064
# file closed: ././Universe/Ships/XX16Vars.asm
  33+ C064                                      INCLUDE "./Universe/Ships/XX25Vars.asm"
# file opened: ././Universe/Ships/XX25Vars.asm
   1++C064              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C064 00           UbnkProjxLo                 DB  0
   3++C065 00           UbnkProjxHi                 DB  0
   4++C066 00           UbnkProjxSgn                DB  0
   5++C067              UbnkProjx                   EQU UbnkProjxLo
   6++C067 00           UbnkProjyLo                 DB  0
   7++C068 00           UbnkProjyHi                 DB  0
   8++C069 00           UbnkProjySgn                DB  0
   9++C06A              UbnkProjy                   EQU UbnkProjyLo
  10++C06A 00           UbnkProjzLo                 DB  0
  11++C06B 00           UbnkProjzHi                 DB  0
  12++C06C 00           UbnkProjzSgn                DB  0
  13++C06D              UbnkProjz                   EQU UbnkProjzLo
  14++C06D              XX25                        EQU UbnkProjxLo
  15++C06D
# file closed: ././Universe/Ships/XX25Vars.asm
  34+ C06D                                      INCLUDE "./Universe/Ships/XX18Vars.asm"
# file opened: ././Universe/Ships/XX18Vars.asm
   1++C06D              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06D 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C06E 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C06F 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C070              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C070 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C071 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C072 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C073              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C073 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C074 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C075 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C076              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C076              XX18                        equ UBnkDrawCam0xLo
  15++C076
# file closed: ././Universe/Ships/XX18Vars.asm
  35+ C076
  36+ C076              ; Used to make 16 bit reads a little cleaner in source code
  37+ C076 00 00 00     UbnkZPoint                  DS  3
  38+ C079              UbnkZPointLo                equ UbnkZPoint
  39+ C079              UbnkZPointHi                equ UbnkZPoint+1
  40+ C079              UbnkZPointSign              equ UbnkZPoint+2
  41+ C079                                      INCLUDE "./Universe/Ships/XX15Vars.asm"
# file opened: ././Universe/Ships/XX15Vars.asm
   1++C079              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C079 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C07A 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C07B 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C07C 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C07D 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C07E 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C07F
   9++C07F              XX15                        equ UBnkXScaled
  10++C07F              XX15VecX                    equ XX15
  11++C07F              XX15VecY                    equ XX15+1
  12++C07F              XX15VecZ                    equ XX15+2
  13++C07F              UbnkXPoint                  equ XX15
  14++C07F              UbnkXPointLo                equ XX15+0
  15++C07F              UbnkXPointHi                equ XX15+1
  16++C07F              UbnkXPointSign              equ XX15+2
  17++C07F              UbnkYPoint                  equ XX15+3
  18++C07F              UbnkYPointLo                equ XX15+3
  19++C07F              UbnkYPointHi                equ XX15+4
  20++C07F              UbnkYPointSign              equ XX15+5
  21++C07F              ; Repurposed XX15 pre clip plines
  22++C07F              UbnkPreClipX1               equ XX15+0
  23++C07F              UbnkPreClipY1               equ XX15+2
  24++C07F              UbnkPreClipX2               equ XX15+4
  25++C07F              UbnkPreClipY2               equ XX15+6
  26++C07F              ; Repurposed XX15 post clip lines
  27++C07F              UBnkNewX1                   equ XX15+0
  28++C07F              UBnkNewY1                   equ XX15+1
  29++C07F              UBnkNewX2                   equ XX15+2
  30++C07F              UBnkNewY2                   equ XX15+3
  31++C07F              ; Repurposed XX15
  32++C07F              regXX15fx                   equ UBnkXScaled
  33++C07F              regXX15fxSgn                equ UBnkXScaledSign
  34++C07F              regXX15fy                   equ UBnkYScaled
  35++C07F              regXX15fySgn                equ UBnkYScaledSign
  36++C07F              regXX15fz                   equ UBnkZScaled
  37++C07F              regXX15fzSgn                equ UBnkZScaledSign
  38++C07F              ; Repurposed XX15
  39++C07F              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C07F              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C07F              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C07F              ; After clipping the coords are two 8 bit pairs
  43++C07F              UBnkPoint1Clipped           equ UBnkXScaled
  44++C07F              UBnkPoint2Clipped           equ UBnkYScaled
  45++C07F              ; Repurposed XX15 when plotting lines
  46++C07F              ; Repurposed XX15 before calling clip routine
  47++C07F              UBnkX1                      equ XX15
  48++C07F              UBnKx1Lo                    equ XX15
  49++C07F              UBnKx1Hi                    equ XX15+1
  50++C07F              UBnkY1                      equ XX15+2
  51++C07F              UbnKy1Lo                    equ XX15+2
  52++C07F              UBnkY1Hi                    equ XX15+3
  53++C07F              UBnkX2                      equ XX15+4
  54++C07F              UBnkX2Lo                    equ XX15+4
  55++C07F              UBnkX2Hi                    equ XX15+5
  56++C07F
# file closed: ././Universe/Ships/XX15Vars.asm
  42+ C07F                                      INCLUDE "./Universe/Ships/XX12Vars.asm"
# file opened: ././Universe/Ships/XX12Vars.asm
   1++C07F              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07F              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07F 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C080 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C081 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C082 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C083 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C084 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C085 00 00 00...  XX12Save                    DS  6
  10++C08B 00 00 00...  XX12Save2                   DS  6
  11++C091              XX12                        equ UBnkXX12xLo
  12++C091              varXX12                     equ UBnkXX12xLo
  13++C091              ; Repurposed XX12 when plotting lines
  14++C091              UBnkY2                      equ XX12+0
  15++C091              UbnKy2Lo                    equ XX12+0
  16++C091              UBnkY2Hi                    equ XX12+1
  17++C091              UBnkDeltaXLo                equ XX12+2
  18++C091              UBnkDeltaXHi                equ XX12+3
  19++C091              UBnkDeltaYLo                equ XX12+4
  20++C091              UBnkDeltaYHi                equ XX12+5
  21++C091              UbnkGradient                equ XX12+2
  22++C091              UBnkTemp1                   equ XX12+2
  23++C091              UBnkTemp1Lo                 equ XX12+2
  24++C091              UBnkTemp1Hi                 equ XX12+3
  25++C091              UBnkTemp2                   equ XX12+3
  26++C091              UBnkTemp2Lo                 equ XX12+3
  27++C091              UBnkTemp2Hi                 equ XX12+4
  28++C091
# file closed: ././Universe/Ships/XX12Vars.asm
  43+ C091
  44+ C091
  45+ C091              ; Post clipping the results are now 8 bit
  46+ C091 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  47+ C092 00           UBnKDrawAsDot               DB  0               ; if 0 then OK, if 1 then just draw dot of line heap
  48+ C093 00           UBnkProjectedY              DB  0
  49+ C094 00           UBnkProjectedX              DB  0
  50+ C095              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  51+ C095 00 00 00...  XX15Save                    DS  8
  52+ C09D 00 00 00...  XX15Save2                   DS  8
  53+ C0A5 00           VarBackface                 DB 0
  54+ C0A6              ; Heap (or array) information for lines and normals
  55+ C0A6              ; Coords are stored XY,XY,XY,XY
  56+ C0A6              ; Normals
  57+ C0A6              ; This needs re-oprganising now.
  58+ C0A6              ; Runtime Calculation Store
  59+ C0A6
  60+ C0A6              FaceArraySize               equ 30
  61+ C0A6              EdgeHeapSize                equ 40
  62+ C0A6              NodeArraySize               equ 40
  63+ C0A6              LineArraySize               equ 50
  64+ C0A6              ; Storage arrays for data
  65+ C0A6              ; Structure of arrays
  66+ C0A6              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  67+ C0A6              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  68+ C0A6              ; NodeArray         -  4 bytes per element      0           1            2          3
  69+ C0A6              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  70+ C0A6              ; Line Array        -  4 bytes per eleement     0           1            2          3
  71+ C0A6              ;                                               X1          Y1           X2         Y2
  72+ C0A6 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  73+ C0C4 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  74+ C164 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  75+ C204 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
  76+ C2CC              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  77+ C2CC 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  78+ C2F4              ; Array current Lengths
  79+ C2F4 00           UbnkFaceVisArrayLen         DS 1
  80+ C2F5 00           UBnkNodeArrayLen            DS 1
  81+ C2F6 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  82+ C2F7 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  83+ C2F8              XX20                        equ UbnkLineArrayLen
  84+ C2F8              varXX20                     equ UbnkLineArrayLen
  85+ C2F8
  86+ C2F8
  87+ C2F8 00           UbnkEdgeHeapSize            DS 1
  88+ C2F9 00           UbnkEdgeHeapBytes           DS 1
  89+ C2FA 00           UBnkLinesHeapLen            DS 1
  90+ C2FB 00           UbnKEdgeHeapCounter         DS 1
  91+ C2FC 00           UbnKEdgeRadius              DS 1
  92+ C2FD 00           UbnKEdgeShipType            DS 1
  93+ C2FE 00           UbnKEdgeExplosionType       DS 1
  94+ C2FF
  95+ C2FF              ; Node heap is used to write out transformed Vertexs
  96+ C2FF
  97+ C2FF              ; Lines
  98+ C2FF 00 00 00     UBnkXX19                    DS  3
  99+ C302
 100+ C302
 101+ C302 00           UBnkShipModelBank           DB  0
 102+ C303 00           UBnkShipModelNbr            DB  0
 103+ C304 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 104+ C31C              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 105+ C31C              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 106+ C31C              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 107+ C31C              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 108+ C31C              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 109+ C31C              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 110+ C31C              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 111+ C31C              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 112+ C31C              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 113+ C31C              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 114+ C31C              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 115+ C31C              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 116+ C31C              DotAddr                     equ UBnkHullCopy + DotOffset
 117+ C31C              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 118+ C31C              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 119+ C31C              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 120+ C31C              QAddr                       equ UBnkHullCopy + QOffset
 121+ C31C              LaserAddr                   equ UBnkHullCopy + LaserOffset
 122+ C31C              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 123+ C31C              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 124+ C31C              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 125+ C31C              ; Static Ship Data. This is copied in when creating the universe object
 126+ C31C              XX0                         equ UBnkHullCopy        ; general hull index pointer
 127+ C31C 00 00 00...  UBnkHullVerticies           DS  300                 ; can only be 255
 128+ C448 00 00 00...  UBnkHullEdges               DS  1200                ; can be 255 * 4
 129+ C8F8 00 00 00...  UBnkHullNormals             DS  300                 ; can only be 255
 130+ CA24 0C           OrthagCountdown             DB  12
 131+ CA25
 132+ CA25              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 133+ CA25              UBnk_Data_len               EQU $ - StartOfUniv
 134+ CA25
 135+ CA25              ZeroUnivPitchAndRoll:   MACRO
 136+ CA25 ~                                    xor     a
 137+ CA25 ~                                    ld      (UBnKRotXCounter),a
 138+ CA25 ~                                    ld      (UBnKRotZCounter),a
 139+ CA25                                      ENDM
 140+ CA25
 141+ CA25              MaxUnivPitchAndRoll:    MACRO
 142+ CA25 ~                                    ld      a,127
 143+ CA25 ~                                    ld      (UBnKRotXCounter),a
 144+ CA25 ~                                    ld      (UBnKRotZCounter),a
 145+ CA25                                      ENDM
 146+ CA25
 147+ CA25              RandomUnivPitchAndRoll: MACRO
 148+ CA25 ~                                    call    doRandom
 149+ CA25 ~                                    or      %01101111
 150+ CA25 ~                                    ld      (UBnKRotXCounter),a
 151+ CA25 ~                                    call    doRandom
 152+ CA25 ~                                    or      %01101111
 153+ CA25 ~                                    ld      (UBnKRotZCounter),a
 154+ CA25                                      ENDM
 155+ CA25
 156+ CA25              RandomUnivSpeed:        MACRO
 157+ CA25 ~                                    call    doRandom
 158+ CA25 ~                                    and     31
 159+ CA25 ~                                    ld      (UBnKspeed),a
 160+ CA25                                      ENDM
 161+ CA25
 162+ CA25              ZeroUnivAccelleration:  MACRO
 163+ CA25 ~                                    xor     a
 164+ CA25 ~                                    ld      (UBnKAccel),a
 165+ CA25                                      ENDM
 166+ CA25
 167+ CA25              ; --------------------------------------------------------------
 168+ CA25 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 169+ CA28 11 25 0A                             ld      de,UBnk_Data_len
 170+ CA2B AF                                   xor     a
 171+ CA2C CD 48 93                             call    memfill_dma
 172+ CA2F C9                                   ret
 173+ CA30              ; --------------------------------------------------------------
 174+ CA30 21 0C C0     ResetUbnkPosition:      ld      hl,UBnKxlo
 175+ CA33 06 09                                ld      b, 3*3
 176+ CA35 AF                                   xor     a
 177+ CA36 77           .zeroLoop:              ld      (hl),a
 178+ CA37 23                                   inc     hl
 179+ CA38 10 FC                                djnz    .zeroLoop
 180+ CA3A C9                                   ret
 181+ CA3B
 182+ CA3B              ; --------------------------------------------------------------
 183+ CA3B              ; This sets the position of the current ship randomly, called after spawing
 184+ CA3B              UnivSetSpawnPosition:   RandomUnivPitchAndRoll
 184+ CA3B CD 2B 9C    >                        call    doRandom
 184+ CA3E F6 6F       >                        or      %01101111
 184+ CA40 32 2A C0    >                        ld      (UBnKRotXCounter),a
 184+ CA43 CD 2B 9C    >                        call    doRandom
 184+ CA46 F6 6F       >                        or      %01101111
 184+ CA48 32 2B C0    >                        ld      (UBnKRotZCounter),a
 185+ CA4B CD 2B 9C                             call    doRandom                        ; set x lo and y lo to random
 186+ CA4E 32 0C C0     .setXlo:                ld      (UBnKxlo),a
 187+ CA51 32 0F C0     .setYlo:                ld      (UBnKylo),a
 188+ CA54 0F           .setXsign:              rrca                                    ; rotate by 1 bit right
 189+ CA55 47                                   ld      b,a
 190+ CA56 E6 80                                and     SignOnly8Bit
 191+ CA58 32 0E C0                             ld      (UBnKxsgn),a
 192+ CA5B 78           .setYSign:              ld      a,b                             ; get random back again
 193+ CA5C 0F                                   rrca                                    ; rotate by 1 bit right
 194+ CA5D 47                                   ld      b,a
 195+ CA5E E6 80                                and     SignOnly8Bit                    ; and set y sign
 196+ CA60 32 11 C0                             ld      (UBnKysgn),a
 197+ CA63 CB 08        .setYHigh:              rrc     b                               ; as value is in b rotate again
 198+ CA65 78                                   ld      a,b                             ;
 199+ CA66 E6 1F                                and     31                              ; set y hi to random 0 to 31
 200+ CA68 32 10 C0                             ld      (UBnKyhi),a                     ;
 201+ CA6B CB 08        .setXHigh:              rrc     b                               ; as value is in b rotate again
 202+ CA6D 78                                   ld      a,b
 203+ CA6E E6 1F                                and     31                              ; set x hi to random 0 to 31
 204+ CA70 4F                                   ld      c,a                             ; save shifted into c as well
 205+ CA71 32 0D C0                             ld      (UBnKxhi),a
 206+ CA74 3E 50        .setZHigh:              ld      a,80                            ; set z hi to 80 - xhi - yhi - carry
 207+ CA76 98                                   sbc     b
 208+ CA77 99                                   sbc     c
 209+ CA78 32 13 C0                             ld      (UBnKzhi),a
 210+ CA7B              .CheckIfBodyOrJunk:     ReturnIfMemEquN ShipTypeAddr, ShipTypeJunk
 210+ CA7B 3A 1A C3    >                        ld   a,(ShipTypeAddr)
 210+ CA7E FE 03       >                        cp     ShipTypeJunk
 210+ CA80 C8          >                        ret    z
 211+ CA81 78                                   ld      a,b                             ; its not junk to set z sign
 212+ CA82 0F                                   rrca                                    ; as it can jump in
 213+ CA83 E6 80                                and     SignOnly8Bit
 214+ CA85 32 14 C0                             ld      (UBnKzsgn),a
 215+ CA88 C9                                   ret
 216+ CA89
 217+ CA89              ; --------------------------------------------------------------
 218+ CA89              ; This sets current univrse object to space station
 219+ CA89 3E 81        ResetStationLaunch:     ld  a,%10000001
 220+ CA8B 32 2D C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 221+ CA8E AF                                   xor a
 222+ CA8F 32 2B C0                             ld      (UBnKRotZCounter),a             ; no pitch
 223+ CA92 32 1B C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 224+ CA95 3E FF                                ld      a,$FF
 225+ CA97 32 2A C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 226+ CA9A 21 00 00     .SetPosBehindUs:        ld      hl,$0000
 227+ CA9D 22 0C C0                             ld      (UBnKxlo),hl
 228+ CAA0 21 00 00                             ld      hl,$0000
 229+ CAA3 22 0F C0                             ld      (UBnKylo),hl
 230+ CAA6 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 231+ CAA9 22 12 C0                             ld      (UBnKzlo),hl
 232+ CAAC AF                                   xor     a
 233+ CAAD 32 0E C0                             ld      (UBnKxsgn),a
 234+ CAB0 32 11 C0                             ld      (UBnKysgn),a
 235+ CAB3 3E 80                                ld      a,$80
 236+ CAB5 32 14 C0                             ld      (UBnKzsgn),a
 237+ CAB8 CD 30 CC     .SetOrientation:        call    LaunchedOrientation             ; set initial facing
 238+ CABB                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 239+ CABB              ;Output: BC = Quotient, HL = Remainder
 240+ CABB
 241+ CABB 7C           ADDHLDESignedv3:        ld      a,h
 242+ CABC E6 80                                and     SignOnly8Bit
 243+ CABE 47                                   ld      b,a                         ;save sign bit in b
 244+ CABF AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 245+ CAC0                                      JumpIfNegative ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 245+ CAC0 FA D8 CA    >                        jp		m, ADDHLDEOppSGN
 246+ CAC3 78           ADDHLDESameSigns:       ld      a,b
 247+ CAC4 B2                                   or      d
 248+ CAC5                                      JumpIfNegative ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 248+ CAC5 FA CA CA    >                        jp		m, ADDHLDESameNeg
 249+ CAC8 19                                   add     hl,de
 250+ CAC9 C9                                   ret
 251+ CACA 7C           ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 252+ CACB E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 253+ CACD 67                                   ld      h,a
 254+ CACE 7A                                   ld      a,d
 255+ CACF E6 7F                                and     SignMask8Bit
 256+ CAD1 57                                   ld      d,a
 257+ CAD2 19                                   add     hl,de
 258+ CAD3 3E 80                                ld      a,SignOnly8Bit
 259+ CAD5 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 260+ CAD6 67                                   ld      h,a
 261+ CAD7 C9                                   ret
 262+ CAD8 7C           ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 263+ CAD9 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 264+ CADB 67                                   ld      h,a
 265+ CADC 7A                                   ld      a,d
 266+ CADD E6 7F                                and     SignMask8Bit
 267+ CADF 57                                   ld      d,a
 268+ CAE0 B7                                   or      a
 269+ CAE1 ED 52                                sbc     hl,de
 270+ CAE3 38 04                                jr      c,ADDHLDEOppInvert
 271+ CAE5 78           ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 272+ CAE6 B4                                   or      h
 273+ CAE7 67                                   ld      h,a                         ; set the previou sign value
 274+ CAE8 C9                                   ret
 275+ CAE9              ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 275+ CAE9 AF          >                    xor a
 275+ CAEA 95          >                    sub l
 275+ CAEB 6F          >                    ld l,a
 275+ CAEC 9F          >                    sbc a,a
 275+ CAED 94          >                    sub h
 275+ CAEE 67          >                    ld h,a
 276+ CAEF 78                                   ld      a,b
 277+ CAF0 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 278+ CAF2 B4                                   or      h
 279+ CAF3 67                                   ld      h,a                         ; recover sign
 280+ CAF4 C9                                   ret
 281+ CAF5
 282+ CAF5              ; we could cheat, flip the sign of DE and just add but its not very optimised
 283+ CAF5 7C           SUBHLDESignedv3:        ld      a,h
 284+ CAF6 E6 80                                and     SignOnly8Bit
 285+ CAF8 47                                   ld      b,a                         ;save sign bit in b
 286+ CAF9 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 287+ CAFA                                      JumpIfNegative SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 287+ CAFA FA 28 CB    >                        jp		m, SUBHLDEOppSGN
 288+ CAFD 78           SUBHLDESameSigns:       ld      a,b
 289+ CAFE B2                                   or      d
 290+ CAFF                                      JumpIfNegative SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 290+ CAFF FA 09 CB    >                        jp		m, SUBHLDESameNeg
 291+ CB02 B7                                   or      a
 292+ CB03 ED 52                                sbc     hl,de
 293+ CB05                                      JumpIfNegative SUBHLDESameOvrFlw
 293+ CB05 FA 1C CB    >                        jp		m, SUBHLDESameOvrFlw
 294+ CB08 C9                                   ret
 295+ CB09 7C           SUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 296+ CB0A E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 297+ CB0C 67                                   ld      h,a
 298+ CB0D 7A                                   ld      a,d
 299+ CB0E E6 7F                                and     SignMask8Bit
 300+ CB10 57                                   ld      d,a
 301+ CB11 B7                                   or      a
 302+ CB12 ED 52                                sbc     hl,de
 303+ CB14                                      JumpIfNegative SUBHLDESameOvrFlw
 303+ CB14 FA 1C CB    >                        jp		m, SUBHLDESameOvrFlw
 304+ CB17 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 305+ CB18 F6 80                                or      SignOnly8Bit
 306+ CB1A 67                                   ld      h,a
 307+ CB1B C9                                   ret
 308+ CB1C              SUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 308+ CB1C AF          >                    xor a
 308+ CB1D 95          >                    sub l
 308+ CB1E 6F          >                    ld l,a
 308+ CB1F 9F          >                    sbc a,a
 308+ CB20 94          >                    sub h
 308+ CB21 67          >                    ld h,a
 309+ CB22 78                                   ld      a,b
 310+ CB23 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 311+ CB25 B4                                   or      h
 312+ CB26 67                                   ld      h,a                         ; recover sign
 313+ CB27 C9                                   ret
 314+ CB28 B7           SUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 315+ CB29 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 316+ CB2A E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 317+ CB2C 67                                   ld      h,a
 318+ CB2D 7A                                   ld      a,d
 319+ CB2E E6 7F                                and     SignMask8Bit
 320+ CB30 57                                   ld      d,a
 321+ CB31 19                                   add     hl,de
 322+ CB32 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 323+ CB33 B4                                   or      h
 324+ CB34 67                                   ld      h,a                         ; set the previou sign value
 325+ CB35 C9                                   ret
 326+ CB36
 327+ CB36
 328+ CB36              SBCHLDESigned:          JumpOnBitSet h,7,SBCHLDEhlNeg
 328+ CB36 CB 7C       >                        bit 	7,h
 328+ CB38 C2 49 CB    >                        jp      nz,SBCHLDEhlNeg
 329+ CB3B              SBCHLDEhlPos:           JumpOnBitSet h,7,SBCHLDEhlNeg
 329+ CB3B CB 7C       >                        bit 	7,h
 329+ CB3D C2 49 CB    >                        jp      nz,SBCHLDEhlNeg
 330+ CB40 ED 52        SBCHLDEhlPosDePos:      sbc     hl,de                           ; ignore overflow for now will sort later TODO
 331+ CB42 C9                                   ret
 332+ CB43 CB BA        SBCHLDEhlPosDeNeg:      res     7,d
 333+ CB45 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 334+ CB46 CB FA                                set     7,d
 335+ CB48 C9                                   ret
 336+ CB49 CB BC        SBCHLDEhlNeg:           res     7,h
 337+ CB4B                                      JumpOnBitSet d,7,SBCHLDEhlNegdeNeg
 337+ CB4B CB 7A       >                        bit 	7,d
 337+ CB4D C2 55 CB    >                        jp      nz,SBCHLDEhlNegdeNeg
 338+ CB50 ED 52        SBCHLDEhlNegdePos:      sbc     hl,de                       ; ignore overflow for now will sort later TODO
 339+ CB52 CB FC                                set     7,h
 340+ CB54 C9                                   ret
 341+ CB55 CB BA        SBCHLDEhlNegdeNeg:      res     7,d
 342+ CB57 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 343+ CB58 CB FA                                set     7,d
 344+ CB5A CB FC                                set     7,h
 345+ CB5C C9                                   ret
 346+ CB5D
 347+ CB5D              ; Roate around axis
 348+ CB5D              ; varAxis1 and varAxis2 point to the address of the axis to rotate
 349+ CB5D              ; so the axis x1 points to roofv  x , y or z
 350+ CB5D              ;             x2           nosev or sidev  x, y or z
 351+ CB5D              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 352+ CB5D              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 353+ CB5D              ; var RAT2 gives direction
 354+ CB5D              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
 355+ CB5D              ;-Set up S R -----------------------------------------
 356+ CB5D              ; optimised we don't deal with sign here just the value of roof axis / 512
 357+ CB5D 2A 6E 96     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
 358+ CB60 5E                                   ld      e,(hl)
 359+ CB61 23                                   inc     hl
 360+ CB62 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
 361+ CB63 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 362+ CB64 7C                                   ld      a,h
 363+ CB65 E6 80                                and     SignOnly8Bit
 364+ CB67 FD 67                                ld      iyh,a           ; iyh = sign Axis1
 365+ CB69 7C                                   ld      a,h
 366+ CB6A E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 367+ CB6C CB 3F                                srl     a               ; a = Axis1/2
 368+ CB6E 5F                                   ld      e,a             ;
 369+ CB6F FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 370+ CB71 57                                   ld      d,a             ; de = signed Axis1 / 512
 371+ CB72 B7                                   or      a               ; clear carry
 372+ CB73 CD F5 CA                             call    SUBHLDESignedv3 ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 373+ CB76              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 374+ CB76 E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 375+ CB77 7D                                   ld      a,l
 376+ CB78 32 97 97                             ld      (varR),a
 377+ CB7B 7C                                   ld      a,h
 378+ CB7C 32 98 97                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 379+ CB7F              ;-calculate roofv latter half of calc
 380+ CB7F 2A 70 96                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 381+ CB82 5E                                   ld      e,(hl)
 382+ CB83 23                                   inc     hl
 383+ CB84 56                                   ld      d,(hl)          ; de = value of roof axis
 384+ CB85 7A                                   ld      a,d
 385+ CB86 E6 80                                and     SignOnly8Bit
 386+ CB88 FD 67                                ld      iyh,a           ; save sign
 387+ CB8A 7A                                   ld      a,d
 388+ CB8B E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 389+ CB8D 57                                   ld      d,a             ; de = abs (nosev)
 390+ CB8E                                      ShiftDERight1
 390+ CB8E CB 3A       >			   srl d
 390+ CB90 CB 1B       >			   rr  e
 391+ CB92                                      ShiftDERight1
 391+ CB92 CB 3A       >			   srl d
 391+ CB94 CB 1B       >			   rr  e
 392+ CB96                                      ShiftDERight1
 392+ CB96 CB 3A       >			   srl d
 392+ CB98 CB 1B       >			   rr  e
 393+ CB9A                                      ShiftDERight1           ; de = nosev /16 unsigned
 393+ CB9A CB 3A       >			   srl d
 393+ CB9C CB 1B       >			   rr  e
 394+ CB9E 3A 32 C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 395+ CBA1 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 396+ CBA3 E6 80                                and     SignOnly8Bit
 397+ CBA5 B2                                   or      d
 398+ CBA6 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 399+ CBA7              ;;; ld      a,e
 400+ CBA7              ;;;     or      iyh
 401+ CBA7              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 402+ CBA7              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 403+ CBA7 E1                                   pop     hl              ; get back RS POP ID 1
 404+ CBA8                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 405+ CBA8              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 406+ CBA8 CD BB CA                             call    ADDHLDESignedv3 ; do add using hl and de
 407+ CBAB E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 408+ CBAC              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 409+ CBAC              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 410+ CBAC 2A 70 96                         ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 411+ CBAF 5E                               ld      e,(hl)
 412+ CBB0 23                               inc     hl
 413+ CBB1 56                               ld      d,(hl)
 414+ CBB2 EB                               ex      de,hl
 415+ CBB3 7C                               ld      a,h
 416+ CBB4 E6 80                            and     $80
 417+ CBB6 FD 67                            ld      iyh,a
 418+ CBB8 7C                               ld      a,h
 419+ CBB9 E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 420+ CBBB CB 3F                            srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 421+ CBBD 5F                               ld      e,a
 422+ CBBE FD 7C                            ld      a,iyh
 423+ CBC0 57                               ld      d,a
 424+ CBC1 B7                               or      a               ; clear carry
 425+ CBC2 CD F5 CA                         call    SUBHLDESignedv3
 426+ CBC5              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 427+ CBC5 E5                               push    hl              ; save hl on stack  PUSH ID 3
 428+ CBC6 7D                               ld      a,l
 429+ CBC7 32 85 96                         ld      (varP),a        ; p = low of resuilt
 430+ CBCA 7C                               ld      a,h
 431+ CBCB E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 432+ CBCD 32 B3 97                         ld      (varT),a        ; t = high of result
 433+ CBD0              ;-- Set up TQ
 434+ CBD0 2A 6E 96                         ld      hl,(varAxis1)   ; now work on roofv axis / 16
 435+ CBD3              ;   ld      hl,(varAxis2)   ; work on nosev again
 436+ CBD3 5E                               ld      e,(hl)
 437+ CBD4 23                               inc     hl
 438+ CBD5 56                               ld      d,(hl)
 439+ CBD6 7A                               ld      a,d
 440+ CBD7 E6 80                            and     $80
 441+ CBD9 FD 67                            ld      iyh,a           ; save sign
 442+ CBDB 7A                               ld      a,d
 443+ CBDC E6 7F                            and     SignMask8Bit    ; a = nosev hi axis  unsigned
 444+ CBDE 57                               ld      d,a             ; de = abs (nosev)
 445+ CBDF                                  ShiftDERight1
 445+ CBDF CB 3A       >			   srl d
 445+ CBE1 CB 1B       >			   rr  e
 446+ CBE3                                  ShiftDERight1
 446+ CBE3 CB 3A       >			   srl d
 446+ CBE5 CB 1B       >			   rr  e
 447+ CBE7                                  ShiftDERight1
 447+ CBE7 CB 3A       >			   srl d
 447+ CBE9 CB 1B       >			   rr  e
 448+ CBEB                                  ShiftDERight1           ; de = nosev /16 unsigned
 448+ CBEB CB 3A       >			   srl d
 448+ CBED CB 1B       >			   rr  e
 449+ CBEF 3A 32 C0                         ld      a,(univRAT2)
 450+ CBF2 FD AC                            xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 451+ CBF4 E6 80                            and     $80
 452+ CBF6 B2                               or      d
 453+ CBF7 57                               ld      d,a
 454+ CBF8              ;;; ld      a,e
 455+ CBF8              ;;;     or      iyh
 456+ CBF8              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 457+ CBF8 E1                               pop     hl              ; get back RS   POP ID 3
 458+ CBF9              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 459+ CBF9 CD F5 CA                         call    SUBHLDESignedv3 ; do add using hl and de
 460+ CBFC              ;-- Update nosev ---------------------------------------
 461+ CBFC EB                               ex      de,hl           ; save hl to de
 462+ CBFD 2A 70 96                         ld      hl,(varAxis2)
 463+ CC00 73                               ld      (hl),e
 464+ CC01 23                               inc     hl
 465+ CC02 72                               ld      (hl),d          ; copy result into nosev
 466+ CC03              ;-- Update roofv ---------------------------------------
 467+ CC03 D1                               pop     de              ; get calc saved on stack POP ID 2
 468+ CC04 2A 6E 96                         ld      hl,(varAxis1)
 469+ CC07 73                               ld      (hl),e
 470+ CC08 23                               inc     hl
 471+ CC09 72                               ld      (hl),d          ; copy result into nosev
 472+ CC0A C9                               ret
 473+ CC0B
 474+ CC0B                                  include "Universe/Ships/InitialiseOrientation.asm"
# file opened: ./Universe/Ships/InitialiseOrientation.asm
   1++CC0B              InitialiseOrientation:
   2++CC0B              ZI1:
   3++CC0B              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   4++CC0B              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   5++CC0B              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   6++CC0B 21 00 00         ld      hl, 0
   7++CC0E 22 17 C0         ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   8++CC11 22 19 C0         ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   9++CC14 22 1B C0         ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
  10++CC17 22 1F C0         ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  11++CC1A 22 21 C0         ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  12++CC1D 22 23 C0         ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  13++CC20 21 00 60         ld      hl, $6000					; 96 in hi byte
  14++CC23                  ;ld      hl,1
  15++CC23 22 15 C0         ld      (UBnkrotmatSidevX),hl
  16++CC26 22 1D C0         ld      (UBnkrotmatRoofvY),hl
  17++CC29 21 00 E0         ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  18++CC2C 22 25 C0         ld      (UBnkrotmatNosevZ),hl
  19++CC2F C9               ret
  20++CC30
  21++CC30              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  22++CC30              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  23++CC30              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  24++CC30
  25++CC30              LaunchedOrientation:
  26++CC30 CD 0B CC         call    InitialiseOrientation
  27++CC33                  FlipMemSign UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  27++CC33 3A 22 C0    >                        ld  a,(UBnkrotmatNosevX+1)
  27++CC36 EE 80       >                        xor SignOnly8Bit
  27++CC38 32 22 C0    >                        ld  (UBnkrotmatNosevX+1),a
  28++CC3B                  FlipMemSign UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  28++CC3B 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)
  28++CC3E EE 80       >                        xor SignOnly8Bit
  28++CC40 32 24 C0    >                        ld  (UBnkrotmatNosevY+1),a
  29++CC43                  FlipMemSign UBnkrotmatNosevZ+1
  29++CC43 3A 26 C0    >                        ld  a,(UBnkrotmatNosevZ+1)
  29++CC46 EE 80       >                        xor SignOnly8Bit
  29++CC48 32 26 C0    >                        ld  (UBnkrotmatNosevZ+1),a
  30++CC4B C9               ret
  31++CC4C
# file closed: ./Universe/Ships/InitialiseOrientation.asm
 475+ CC4C              ;----------------------------------------------------------------------------------------------------------------------------------
 476+ CC4C              OrientateVertex:
 477+ CC4C
 478+ CC4C              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 479+ CC4C              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 480+ CC4C              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 481+ CC4C              ;
 482+ CC4C
 483+ CC4C              ;----------------------------------------------------------------------------------------------------------------------------------
 484+ CC4C              TransposeVertex:
 485+ CC4C              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 486+ CC4C              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 487+ CC4C              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 488+ CC4C              VectorToVertex:
 489+ CC4C              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 490+ CC4C              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 491+ CC4C              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 492+ CC4C
 493+ CC4C              Project:
 494+ CC4C 2A 0C C0     PROJ:                   ld      hl,(UBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 495+ CC4F 22 85 96                             ld      (varP),hl
 496+ CC52 3A 0E C0                             ld      a,(UBnKxsgn)
 497+ CC55 CD 5A A7                             call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 498+ CC58 D8                                   ret     c                               ; carry means don't print
 499+ CC59 2A AA 97                             ld      hl,(varK)                       ; hl = k (0 1)
 500+ CC5C                                      ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 501+ CC5C 3E 80                                ld      a,ViewCenterX
 502+ CC5E ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 503+ CC60 22 BD 97                             ld      (varK3),hl                      ; K3 = X position on screen
 504+ CC63 2A 0F C0     ProjectY:               ld      hl,(UBnKylo)
 505+ CC66 22 85 96                             ld      (varP),hl
 506+ CC69 3A 11 C0                             ld      a,(UBnKysgn)
 507+ CC6C CD 5A A7                             call    PLS6
 508+ CC6F D8                                   ret     c
 509+ CC70 2A AA 97                             ld      hl,(varK)                       ; hl = k (0 1)
 510+ CC73 3E 40                                ld      a,ViewCenterY
 511+ CC75 ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 512+ CC77 22 C3 97                             ld      (varK4),hl                      ; K3 = X position on screen
 513+ CC7A C9                                   ret
 514+ CC7B              ;--------------------------------------------------------------------------------------------------------
 515+ CC7B                                      include "./ModelRender/EraseOldLines-EE51.asm"
# file opened: ././ModelRender/EraseOldLines-EE51.asm
   1++CC7B              ;
   2++CC7B              ; EraseOldLines:
   3++CC7B              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++CC7B              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++CC7B              ;	 	loop + 4
   6++CC7B              ; Return
   7++CC7B
   8++CC7B              EraseOldLines:
   9++CC7B              EE51:										; if bit3 set draw lines in XX19 heap
  10++CC7B              	ReturnOnMemBitClear UBnKexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++CC7B 3A 2C C0    >                        ld     a,(UBnKexplDsp)
  10++CC7E CB 5F       >                        bit 	3,a
  10++CC80 C8          >                        ret		z
  11++CC81 CB DF        	set		3,a
  12++CC83 32 2C C0     	ld		(UBnKexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++CC86 C3 C8 E8     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++CC89              ; We use the ret from the clearLines so not needed here
  15++CC89
# file closed: ././ModelRender/EraseOldLines-EE51.asm
 516+ CC89                                      include "./ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ././ModelRender/TrimToScreenGrad-LL118.asm
   1++CC89              ;TrimToScreenGrad:
   2++CC89              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++CC89              ;ret
   4++CC89              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++CC89              ;TODO        bit     7,a
   6++CC89              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++CC89              ;TODO        ld      a,h
   8++CC89              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++CC89              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++CC89              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++CC89
  12++CC89              ;18                      CLC
  13++CC89              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++CC89              ;85 36                   STA &36			 \ XX15+2
  15++CC89              ;98                      TYA 			 \ step Y1 hi
  16++CC89              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++CC89              ;85 37                   STA &37			 \ XX15+3
  18++CC89              ;A9 00                   LDA #0			 \ xleft min
  19++CC89              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++CC89              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++CC89              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++CC89              ;	.LL119	\ x1 hi +ve from LL118
  23++CC89              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++CC89              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++CC89              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++CC89              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++CC89              ;8A                      TXA 			 \ step Y1 lo
  28++CC89              ;18                      CLC
  29++CC89              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++CC89              ;85 36                   STA &36			 \ XX15+2
  31++CC89              ;98                      TYA 			 \ step Y1 hi
  32++CC89              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++CC89              ;85 37                   STA &37			 \ XX15+3
  34++CC89              ;A2 FF                   LDX #&FF		 \ xright max
  35++CC89              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++CC89              ;E8                      INX 			 \ X = 0
  37++CC89              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++CC89              ;	.LL134	\ Ytrim
  39++CC89              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++CC89              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++CC89              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++CC89              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++CC89              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++CC89              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++CC89              ;8A                      TXA 			 \ step X1 lo
  46++CC89              ;18                      CLC
  47++CC89              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++CC89              ;85 34                   STA &34			 \ XX15+0
  49++CC89              ;98                      TYA 			 \ step X1 hi
  50++CC89              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++CC89              ;85 35                   STA &35			 \ XX15+1
  52++CC89              ;A9 00                   LDA #0			 \ Y bottom min
  53++CC89              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++CC89              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++CC89              ;	.LL135	\ y1 hi +ve from LL134
  56++CC89              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++CC89              ;38                      SEC
  58++CC89              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++CC89              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++CC89              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++CC89              ;E9 00                   SBC #0			 \ any hi
  62++CC89              ;85 83                   STA &83			 \ S
  63++CC89              ;90 16                   BCC LL136		 \ failed, rts
  64++CC89              ;	.LL139
  65++CC89              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++CC89              ;8A                      TXA 			 \ step X1 lo
  67++CC89              ;18                      CLC
  68++CC89              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++CC89              ;85 34                   STA &34			 \ XX15+0
  70++CC89              ;98                      TYA 			 \ step X1 hi
  71++CC89              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++CC89              ;85 35                   STA &35			 \ XX15+1
  73++CC89              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++CC89              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++CC89              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++CC89              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++CC89              ;	.LL136	\ rts
  78++CC89              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++CC89              ;
  80++CC89
# file closed: ././ModelRender/TrimToScreenGrad-LL118.asm
 517+ CC89                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++CC89              ;--------------------------------------------------------------------------------------------------------------------
   2++CC89
   3++CC89 00           clipDx                  DB      0           ; also XX12+2
   4++CC8A 00           clipDxHigh              DB      0           ; also XX12+3
   5++CC8B 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++CC8C 00           clipDy                  DB      0           ; also XX12+4
   7++CC8D 00           clipDyHigh              DB      0           ; also XX12+5
   8++CC8E 00           clipGradient            DB      0
   9++CC8F 00           clipDxySign             DB      0
  10++CC90              varX12p3                equ     clipDxySign
  11++CC90 00           clipXGTY                DB      0
  12++CC91 00           clipFlags               DB      0
  13++CC92 00           SWAP                    DB      0
  14++CC93 00 00        varYX                   DW      0
  15++CC95              ;varRegX                 DB      0
  16++CC95              ;varXX12p2               DB      0
  17++CC95 00           clipXX13                 DB      0
  18++CC96
  19++CC96
  20++CC96              ; bounds check and the start to avoid dxy calcs if off screen, eliminating off screens first saves a lot of uncessary mul/div
  21++CC96              ;ClipXX15XX12Line:
  22++CC96 ED 4B 7B C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3)
  23++CC9A DD 2A 7F C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1)
  24++CC9E 2A 79 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1)
  25++CCA1 ED 5B 7D C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5)
  26++CCA5 AF                                   xor     a
  27++CCA6 32 92 CC                             ld      (SWAP),a                    ; SWAP = 0
  28++CCA9 7A                                   ld      a,d                         ; A = X2Hi
  29++CCAA FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX
  30++CCAD                                      ;       push    af
  31++CCAD                                      ;       ld      a,iyh
  32++CCAD                                      ;       ld      (regX),a
  33++CCAD                                      ;       pop     af
  34++CCAD DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  35++CCAF 20 0A                                jr      nz, .LL107
  36++CCB1 DD 7D                                ld      a,ixl
  37++CCB3 ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  38++CCB6 20 03                                jr      nz,.LL107
  39++CCB8 FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  40++CCBB                                      ;        push    af
  41++CCBB                                      ;        ld      a,iyh
  42++CCBB                                      ;        ld      (regX),a
  43++CCBB                                      ;        pop     af
  44++CCBB              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  45++CCBB              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  46++CCBB FD 7C        .LL107                  ld      a,iyh
  47++CCBD 32 95 CC                             ld      (clipXX13),a                ; debug copy iyh to xx13
  48++CCC0 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  49++CCC1 B0                                   or      b                           ;
  50++CCC2 20 27                                jr      nz,.LL83                    ;
  51++CCC4 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  52++CCC5 ED 27 80                             test    $80                         ; i.e  screen height < y1)
  53++CCC8 20 21                                jr      nz,.LL83
  54++CCCA              ; If we get here, (x1, y1) is on-screen
  55++CCCA FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  56++CCCC FE 00                                cp      0
  57++CCCE 20 15                                jr      nz, .LL108
  58++CCD0              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  59++CCD0 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  60++CCD1 32 7A C0                             ld      (UBnkNewY1),a
  61++CCD4 DD 7D                                ld      a,ixl
  62++CCD6 32 7C C0                             ld      (UBnkNewY2),a
  63++CCD9 7D                                   ld      a,l
  64++CCDA 32 79 C0                             ld      (UBnkNewX1),a
  65++CCDD 7B                                   ld      a,e
  66++CCDE 32 7B C0                             ld      (UBnkNewX2),a
  67++CCE1                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  67++CCE1 B7          >                        or a
  68++CCE2 C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  69++CCE3              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  70++CCE3 37           .PointsOutofBounds:     scf                                 ; LL109 (ClipFailed) carry flag set as not visible
  71++CCE4 C9                                   ret
  72++CCE5 FD 7C        .LL108:                 ld      a,iyh
  73++CCE7 B7                                   or      a
  74++CCE8 1F                                   rra
  75++CCE9 FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  76++CCEB                                      ;        push    af                  ;OPTIMISATION 6/11/21 commented out
  77++CCEB                                      ;        ld      a,iyh               ;OPTIMISATION 6/11/21 commented out
  78++CCEB                                      ;        ld      (regX),a            ;OPTIMISATION 6/11/21 commented out
  79++CCEB                                      ;        pop     af                  ;OPTIMISATION 6/11/21 commented out
  80++CCEB FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  81++CCED ED 27 80                             test    $80                         ;
  82++CCF0 28 28                                jr      z, .LL115                   ;
  83++CCF2 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  84++CCF3 A2                                   and     d
  85++CCF4                                      JumpIfNegative  .PointsOutofBounds
  85++CCF4 FA E3 CC    >                        jp		m, .PointsOutofBounds
  86++CCF7 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  87++CCF8 DD A4                                and     ixh
  88++CCFA                                      JumpIfNegative  .PointsOutofBounds
  88++CCFA FA E3 CC    >                        jp		m, .PointsOutofBounds
  89++CCFD 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  90++CCFE 3D                                   dec     a
  91++CCFF FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  92++CD01                                      ;        push    af                 ;OPTIMISATION 6/11/21 commented out
  93++CD01                                      ;        ld      a,iyl              ;OPTIMISATION 6/11/21 commented out
  94++CD01                                      ;        ld      (varXX12p2),a      ;OPTIMISATION 6/11/21 commented out
  95++CD01                                      ;        pop     af                 ;OPTIMISATION 6/11/21 commented out
  96++CD01 7A                                   ld      a,d                         ; a = x2 hi
  97++CD02 3D                                   dec     a
  98++CD03 FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  99++CD05                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  99++CD05 F2 E3 CC    >                        jp		p, .PointsOutofBounds
 100++CD08              ;by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
 101++CD08 DD 7C                                ld      a,ixh
 102++CD0A 3D                                   dec     a
 103++CD0B FD 6F                                ld      iyl,a
 104++CD0D 78                                   ld      a,b
 105++CD0E 3D                                   dec     a
 106++CD0F FD B5                                or      iyl
 107++CD11                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
 107++CD11 F2 E3 CC    >                        jp		p, .PointsOutofBounds
 108++CD14 79                                   ld      a,c
 109++CD15 DD A5                                and     ixl
 110++CD17                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
 110++CD17 FA E3 CC    >                        jp		m, .PointsOutofBounds
 111++CD1A              ; Clip line: calulate the line's gradient
 112++CD1A              ; here as an optimisation we make sure X1 is always < X2  later on
 113++CD1A              .LL115:                 ClearCarryFlag
 113++CD1A B7          >                        or a
 114++CD1B E5 D5        .CalcDX:                push    hl,,de
 115++CD1D EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 116++CD1E ED 52                                sbc     hl,de
 117++CD20                                     ; pop     de                          ; we need de back
 118++CD20 22 89 CC                             ld      (clipDx),hl
 119++CD23 7C                                   ld      a,h
 120++CD24 32 8B CC                             ld      (clipDxHighNonABS),a
 121++CD27                                     ; ld      a,e                         ;a = x2 lo
 122++CD27                                     ; sbc     a,l                         ;a= a - x1
 123++CD27                                     ; ld      (clipDx),a
 124++CD27                                     ; ld      a,d
 125++CD27                                     ; sbc     a,h
 126++CD27                                     ; ld      (clipDxHigh),a                ; later we will just move to sub hl,de
 127++CD27                                     ; ld      (clipDxHighNonABS),a          ; it looks liek we need this later post scale loop
 128++CD27              .CalcDy:                ClearCarryFlag
 128++CD27 B7          >                        or a
 129++CD28 DD E5 E1                             ld      hl,ix
 130++CD2B ED 42                                sbc     hl,bc
 131++CD2D 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 132++CD2F 22 8C CC                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 133++CD32 7C           .CalcQuadrant:          ld      a,h
 134++CD33                                     ; ld      a,ixl
 135++CD33                                     ; sbc     c
 136++CD33                                     ; ld      (clipDy),a
 137++CD33                                     ; ld      a,ixh
 138++CD33                                     ; sbc     a,b
 139++CD33                                     ; ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 140++CD33                                     ; pop     hl
 141++CD33
 142++CD33              ;So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 143++CD33                                    ;  push    hl                          ; Set S = the sign of delta_x * the sign of delta_y, so if bit 7 of S is set, the deltas have different signs
 144++CD33 21 8A CC                             ld      hl,clipDxHigh
 145++CD36 AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 146++CD37 32 98 97                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 147++CD3A 32 8F CC                             ld      (clipDxySign),a
 148++CD3D 3A 8D CC     .AbsDy:                 ld      a,(clipDyHigh)
 149++CD40 ED 27 80                             test    $80
 150++CD43 28 0C                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 151++CD45 2A 8C CC                             ld      hl,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 152++CD48                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 152++CD48 AF          >					xor 	a
 152++CD49 93          >                    sub 	e
 152++CD4A 5F          >                    ld 		e,a
 152++CD4B 9F          >                    sbc 	a,a
 152++CD4C 92          >                    sub 	d
 152++CD4D 57          >                    ld 		d,a
 153++CD4E 22 8C CC                             ld      (clipDy),hl                 ;OPTIMISATION 6/11/21 commented out
 154++CD51 2A 89 CC     .LL110:                 ld      hl,(clipDx)
 155++CD54 3A 8A CC                             ld      a,(clipDxHigh)
 156++CD57 ED 27 80                             test    $80                         ; is it a negative X
 157++CD5A 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 158++CD5C                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 159++CD5C                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 159++CD5C AF          >					xor 	a
 159++CD5D 95          >					sub 	l
 159++CD5E 6F          >					ld 		l,a
 159++CD5F 9F          >					sbc 	a,a
 159++CD60 94          >					sub 	h
 159++CD61 67          >					ld 		h,a
 160++CD62                                     ; ld      (clipDx),hl                 ;OPTIMISATION 6/11/21 commented out; we still retain the old sign in NonABS version
 161++CD62              .LL111:               ;  push    de
 162++CD62                                     ; ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 163++CD62                                     ; ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 164++CD62 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 165++CD63 B2                                   or      d
 166++CD64 28 0A                                jr      z,.CalculateDelta
 166++CD66
 167++CD66                                      ShiftDERight1
 167++CD66 CB 3A       >			   srl d
 167++CD68 CB 1B       >			   rr  e
 168++CD6A                                      ShiftHLRight1
 168++CD6A CB 3C       >			   srl h
 168++CD6C CB 1D       >			   rr  l
 169++CD6E 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 170++CD70              .CalculateDelta:        ;ld      (clipDx),hl                ;OPTIMISATION 6/11/21 commented out
 171++CD70                                      ;ld      (clipDy),de                ;OPTIMISATION 6/11/21 commented out
 172++CD70              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 173++CD70 AF           .LL113:                 xor     a
 174++CD71 32 B3 97                             ld      (varT),a                    ; t = 0
 175++CD74 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 176++CD75                                      JumpIfALTNusng  e, .LL114           ;
 176++CD75 BB          >                        cp      e
 176++CD76 DA 86 CD    >                        jp		c, .LL114
 177++CD79              ; Here Dx >= Dy sp calculate Delta Y / delta X
 178++CD79 32 96 97     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 179++CD7C 57                                   ld      d,a                         ; d = also Q for calc
 180++CD7D 7B                                   ld      a,e                         ; Set A = delta_y_lo
 181++CD7E CD EA B1                             call    LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 182++CD81 32 97 97                             ld      (varR),a                    ;
 183++CD84 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 184++CD86              ; Here Delta Y > Delta X so calulate delta X / delta Y
 185++CD86 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 186++CD87 57                                   ld      d,a
 187++CD88 32 96 97                             ld      (varQ),a
 188++CD8B 7D                                   ld      a,l                         ; Set A = delta_x_lo
 189++CD8C CD EA B1                             call    LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 190++CD8F 32 97 97                             ld      (varR),a                    ;
 191++CD92 21 B3 97                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 192++CD95 35                                   dec     (hl)
 193++CD96 D1           .LL116:                 pop     de                          ; get back X2
 194++CD97 E1                                   pop     hl                          ; get back X1 into hl,
 195++CD98 3A 97 97                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 196++CD9B 32 8E CC                             ld      (clipGradient),a
 197++CD9E FD 6F                                ld      iyl,a
 198++CDA0                                      ;       push    af                   ;OPTIMISATION 6/11/21 commented out
 199++CDA0                                      ;       ld      a,iyl                ;OPTIMISATION 6/11/21 commented out
 200++CDA0                                      ;       ld      (varXX12p2),a        ;OPTIMISATION 6/11/21 commented out
 201++CDA0                                      ;       pop     af                   ;OPTIMISATION 6/11/21 commented out
 202++CDA0 3A 98 97                             ld      a,(varS)
 203++CDA3 32 8F CC                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 204++CDA6                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 205++CDA6 FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 206++CDA8 FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 207++CDAA 28 05                                jr      z,.LL138                    ;
 208++CDAC ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 209++CDAF 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 210++CDB1              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 211++CDB1 CD D8 CD     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 212++CDB4 FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 213++CDB6 ED 27 80                             test    $80
 214++CDB9 28 1A                                jr      z,.LL124
 215++CDBB              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 216++CDBB 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 217++CDBC B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 218++CDBD C2 E3 CC                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 219++CDC0 B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 220++CDC1 FA E3 CC                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 221++CDC4              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 222++CDC4              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 223++CDC4 EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 224++CDC5 DD E5                                push    ix                          ;  swap Y1 and Y2
 225++CDC7 C5                                   push    bc
 226++CDC8 DD E1                                pop     ix
 227++CDCA C1                                   pop     bc
 228++CDCB CD D8 CD                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 229++CDCE 3A 92 CC                             ld      a,(SWAP)
 230++CDD1 3D                                   dec     a
 231++CDD2 32 92 CC                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 232++CDD5 C3 D0 CC     .LL124:                 jp      .ClipDone                    ; now put points in place
 233++CDD8
 234++CDD8              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 235++CDD8              ; iyh still holds XX13 iyl still holds gradient
 236++CDD8 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 237++CDD9 ED 27 80                             test    $80
 238++CDDC 28 17                                jr      z,.LL119
 239++CDDE 32 98 97     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 240++CDE1 E5 D5 C5                             push    hl,,de,,bc
 241++CDE4 CD 5A CE                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 242++CDE7                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 243++CDE7                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 244++CDE7 C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 245++CDEA 2A 93 CC                             ld      hl,(varYX)
 246++CDED              ;                        ex      hl,de
 247++CDED                                  ;    ld      hl,bc
 248++CDED 09                                   add     hl,bc                       ; y1 = y1 + varYX
 249++CDEE 44 4D                                ld      bc,hl
 250++CDF0 21 00 00                             ld      hl,0                        ; Set x1 = 0
 251++CDF3               ;                       pop     de
 252++CDF3 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 253++CDF5 FE 00        .LL119:                 cp      0
 254++CDF7 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 255++CDF9 3D                                   dec     a
 256++CDFA 32 98 97                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 257++CDFD E5 D5 C5                             push    hl,,de,,bc
 258++CE00 CD 5A CE                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 259++CE03                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 260++CE03                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 261++CE03 C1 D1 E1                             pop     hl,,de,,bc
 262++CE06                                    ;  push    de                          ; Set y1 = y1 + (Y X)
 263++CE06 2A 93 CC                             ld      hl,(varYX)
 264++CE09                                    ; ex      de,hl                       ;OPTIMISATION 6/11/21 commented out
 265++CE09 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 266++CE0A 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 267++CE0C                                    ; ex      hl,de                       ;OPTIMISATION 6/11/21 commented out
 268++CE0C                                    ; ld      hl,bc                       ;OPTIMISATION 6/11/21 commented out
 269++CE0C                                    ; add     hl,de                       ; y1 = y1 + varYX
 270++CE0C 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 271++CE0F                                    ;  pop     de
 272++CE0F              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 273++CE0F 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 274++CE10 ED 27 80                             test    $80                         ;
 275++CE13 28 1A                                jr      z,.LL135                    ;
 276++CE15 32 98 97                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 277++CE18 79                                   ld      a,c                         ; Set R = y1_lo
 278++CE19 32 97 97                             ld      (varR),a                    ;
 279++CE1C E5 D5 C5                             push    hl,,de,,bc
 280++CE1F CD 81 CE                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 281++CE22                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 282++CE22                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 283++CE22 C1 D1 E1                             pop     hl,,de,,bc
 284++CE25 D5                                   push    de
 285++CE26 EB                                   ex      hl,de                       ; de = x1
 286++CE27 2A 93 CC                             ld      hl,(varYX)                  ; hl = varYX
 287++CE2A 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 288++CE2B D1                                   pop     de                          ; de = x2 again
 289++CE2C 01 00 00                             ld      bc,0                        ; Set y1 = 0
 290++CE2F 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 291++CE30 E6 80                                and     $80
 292++CE32 B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 293++CE33 C8                                   ret     z
 294++CE34 E5                                   push    hl
 295++CE35 60 69                                ld      hl,bc
 296++CE37 01 80 00                             ld      bc,128
 297++CE3A B7                                   or      a
 298++CE3B ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 299++CE3D 22 97 97                             ld      (varRS), hl                 ; and now RS (or SR)
 300++CE40 7C                                   ld      a,h
 301++CE41 E1                                   pop     hl
 302++CE42 ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 303++CE45 C0                                   ret     nz
 304++CE46              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 305++CE46 E5 D5 C5     .LL139:                 push    hl,,de,,bc
 306++CE49 CD 81 CE                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 307++CE4C                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 308++CE4C                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 309++CE4C C1 D1 E1                             pop     hl,,de,,bc
 310++CE4F D5                                   push    de
 311++CE50 EB                                   ex      hl,de
 312++CE51 2A 93 CC                             ld      hl,(varYX)
 313++CE54 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 314++CE55 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 315++CE58 D1                                   pop     de
 316++CE59 C9           .LL136:                 ret                                 ;  Return from the subroutine
 317++CE5A
 318++CE5A
 319++CE5A              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 320++CE5A              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 321++CE5A              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 322++CE5A              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 323++CE5A 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 324++CE5B 32 97 97                             ld      (varR),a
 325++CE5E CD C9 CE                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 326++CE61 F5                                   push    af                           ;  Store A on the stack so we can use it later
 327++CE62 C5                                   push    bc
 328++CE63 47                                   ld      b,a
 329++CE64 3A B3 97                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 330++CE67 FE 00                                cp      0
 331++CE69 78                                   ld      a,b
 332++CE6A C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 333++CE6B 20 23                                jr      nz, LL121
 334++CE6D              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 335++CE6D 3A 8E CC     LL122:                  ld      a,(clipGradient)
 336++CE70 32 96 97                             ld      (varQ),a; optimise
 337++CE73 CD 7D A7                             call    HLequSRmulQdiv256
 338++CE76 22 93 CC                             ld      (varYX),hl
 339++CE79 F1                                   pop     af
 340++CE7A ED 27 80                             test    $80
 341++CE7D CA BC CE                             jp      z,LL133
 342++CE80 C9                                   ret
 343++CE81              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 344++CE81              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 345++CE81              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 346++CE81              ;
 347++CE81              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 348++CE81              ;                          LL133                Negate (Y X) and return from the subroutine
 349++CE81              ;                          LL128                Contains an RTS
 350++CE81 CD C9 CE     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 351++CE84 F5                                   push    af                          ; Store A on the stack so we can use it later
 352++CE85 C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 353++CE86 47                                   ld      b,a
 354++CE87 3A B3 97                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 355++CE8A FE 00                                cp      0
 356++CE8C 78                                   ld      a,b
 357++CE8D C1                                   pop     bc
 358++CE8E 20 DD                                jr      nz, LL122
 359++CE90              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 360++CE90 11 FE FF     LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 361++CE93 2A 97 97                             ld      hl,(varRS)                  ; hl = RS
 362++CE96 3A 96 97                             ld      a,(varQ)
 363++CE99 47                                   ld      b,a                         ; b = q
 364++CE9A              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 364++CE9A CB 25       >			   sla l
 364++CE9C CB 14       >			   rl  h
 365++CE9E 7C                                   ld      a,h
 366++CE9F 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 367++CEA1                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 367++CEA1 B8          >                        cp      b
 367++CEA2 DA AD CE    >                        jp		c, .LL132
 368++CEA5 3F           .LL131:                 ccf                                 ; compliment carry
 369++CEA6 98                                   sbc     a,b                         ; q
 370++CEA7 67                                   ld      h,a                         ; h (s)
 371++CEA8 7D                                   ld      a,l                         ; r
 372++CEA9 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 373++CEAB 37                                   scf                                 ; set carry for next rolls
 374++CEAC 3F                                   ccf
 375++CEAD              .LL132:                 RollDELeft1                         ; Rotate de bits left
 375++CEAD CB 13       >               rl  e
 375++CEAF CB 12       >               rl  d
 376++CEB1 38 E7                                jr      c,.LL130                    ;
 377++CEB3 ED 53 93 CC                          ld      (varYX),de
 378++CEB7 F1                                   pop     af              ; get back sign
 379++CEB8 ED 27 80                             test    $80
 380++CEBB C8                                   ret     z               ; if negative then return with value as is reversed sign
 381++CEBC 2A 93 CC     LL133:                  ld      hl,(varYX)      ; may not actually need this?
 382++CEBF                                      NegHL
 382++CEBF AF          >                    xor a
 382++CEC0 95          >                    sub l
 382++CEC1 6F          >                    ld l,a
 382++CEC2 9F          >                    sbc a,a
 382++CEC3 94          >                    sub h
 382++CEC4 67          >                    ld h,a
 383++CEC5 22 93 CC                             ld      (varYX),hl
 384++CEC8 C9           LL128:                  ret
 385++CEC9              ; Do the following, in this order:  Q = XX12+2
 386++CEC9              ;                                   A = S EOR XX12+3
 387++CEC9              ;                                   (S R) = |S R|
 388++CEC9              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 389++CEC9 3A 8E CC     LL129:                  ld      a,(clipGradient)
 390++CECC 32 96 97                             ld      (varQ),a                    ;Set Q = XX12+2
 391++CECF 3A 98 97                             ld      a,(varS)                    ; If S is positive, jump to LL127
 392++CED2 E5 F5                                push    hl,,af
 393++CED4 ED 27 80                             test    $80
 394++CED7 28 0C                                jr      z,.LL127
 395++CED9 2A 97 97                             ld      hl,(varRS)                  ; else SR = | SR|
 396++CEDC                                      NegHL
 396++CEDC AF          >                    xor a
 396++CEDD 95          >                    sub l
 396++CEDE 6F          >                    ld l,a
 396++CEDF 9F          >                    sbc a,a
 396++CEE0 94          >                    sub h
 396++CEE1 67          >                    ld h,a
 397++CEE2 22 97 97                             ld      (varRS),hl
 398++CEE5 21 8F CC     .LL127:                 ld      hl,clipDxySign
 399++CEE8 F1                                   pop     af
 400++CEE9 AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 401++CEEA E1                                   pop     hl
 402++CEEB C9                                   ret
 403++CEEC
# file closed: ././ModelRender/CLIP-LL145.asm
 518+ CEEC              ;--------------------------------------------------------------------------------------------------------
 519+ CEEC                                      include "./Universe/Ships/CopyRotmatToTransMat.asm"
# file opened: ././Universe/Ships/CopyRotmatToTransMat.asm
   1++CEEC              ; Set TransMatTo
   2++CEEC              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CEEC              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CEEC              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CEEC              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CEEC              CopyRotmatToTransMat:                       ; Tested
   7++CEEC              LL15_CopyRotMat:                            ; unrolled loop
   8++CEEC 21 15 C0             ld      hl,UBnkrotmatSidevX
   9++CEEF 11 34 C0             ld      de,UBnkTransmatSidevX
  10++CEF2                      SixLDIInstrunctions
  10++CEF2 ED A0       >                        ldi
  10++CEF4 ED A0       >                        ldi
  10++CEF6 ED A0       >                        ldi
  10++CEF8 ED A0       >                        ldi
  10++CEFA ED A0       >                        ldi
  10++CEFC ED A0       >                        ldi
  11++CEFE 21 1B C0             ld      hl,UBnkrotmatRoofvX
  12++CF01 11 3A C0             ld      de, UBnkTransmatRoofvX
  13++CF04                      SixLDIInstrunctions
  13++CF04 ED A0       >                        ldi
  13++CF06 ED A0       >                        ldi
  13++CF08 ED A0       >                        ldi
  13++CF0A ED A0       >                        ldi
  13++CF0C ED A0       >                        ldi
  13++CF0E ED A0       >                        ldi
  14++CF10 21 21 C0             ld      hl,UBnkrotmatNosevX
  15++CF13 11 40 C0             ld      de, UBnkTransmatNosevX
  16++CF16                      SixLDIInstrunctions
  16++CF16 ED A0       >                        ldi
  16++CF18 ED A0       >                        ldi
  16++CF1A ED A0       >                        ldi
  16++CF1C ED A0       >                        ldi
  16++CF1E ED A0       >                        ldi
  16++CF20 ED A0       >                        ldi
  17++CF22 C9                   ret
  18++CF23
# file closed: ././Universe/Ships/CopyRotmatToTransMat.asm
 520+ CF23                                      include "./Universe/Ships/TransposeXX12ByShipToXX15.asm"
# file opened: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
   1++CF23              TransposeXX12ByShipToXX15:
   2++CF23 2A 7F C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++CF26 7C           		ld		a,h			                        ; get XX12 Sign
   4++CF27 E6 80        		and		$80									; check sign bit on high byte
   5++CF29 47           		ld		b,a									; and put it in of 12xlo in b
   6++CF2A                      ;110921 debugld      h,0
   7++CF2A 7C                   ld      a,h
   8++CF2B E6 7F                and     $7F
   9++CF2D 67                   ld      h,a
  10++CF2E                      ;110921 debugld      h,0
  11++CF2E ED 5B 0C C0  		ld		de,(UBnKxlo)						;
  12++CF32 3A 0E C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++CF35 E6 80        		and		$80									; make sure we only have bit 7
  14++CF37 4F           		ld		c,a									; and put sign of unkxsgn c
  15++CF38 CD 8C AD     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++CF3B B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++CF3C 67           		ld		h,a
  18++CF3D 22 79 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++CF40              ; ..................................
  20++CF40 2A 81 C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++CF43 7C           		ld		a,h
  22++CF44 E6 80        		and		$80
  23++CF46 47           		ld		b,a
  24++CF47                      ;110921 debugld      h,0
  25++CF47 7C                   ld      a,h
  26++CF48 E6 7F                and     $7F
  27++CF4A 67                   ld      h,a
  28++CF4B                      ;110921 debugld      h,0
  29++CF4B ED 5B 0F C0  		ld		de,(UBnKylo)
  30++CF4F 3A 11 C0     		ld		a,(UBnKysgn)
  31++CF52 E6 80        		and		$80									; make sure we only have bit 7
  32++CF54 4F           		ld		c,a
  33++CF55 CD 8C AD     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++CF58 B4           		or		h									; combine sign in A with H
  35++CF59 67           		ld		h,a
  36++CF5A 22 7B C0     		ld		(UBnkYScaled),hl
  37++CF5D              ; ..................................
  38++CF5D 2A 83 C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++CF60 7C           		ld		a,h
  40++CF61 E6 80        		and		$80
  41++CF63 47           		ld		b,a
  42++CF64                      ;110921 debugld      h,0
  43++CF64 7C                   ld      a,h
  44++CF65 E6 7F                and     $7F
  45++CF67 67                   ld      h,a
  46++CF68                      ;110921 debugld      h,0
  47++CF68 ED 5B 12 C0  		ld		de,(UBnKzlo)
  48++CF6C 3A 14 C0     		ld		a,(UBnKzsgn)
  49++CF6F E6 80        		and		$80									; make sure we only have bit 7
  50++CF71 4F           		ld		c,a
  51++CF72 CD 8C AD     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++CF75 B4           		or		h									; combine sign in A with H
  53++CF76 67           		ld		h,a
  54++CF77 CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++CF79 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++CF7B E6 7F                and     $7F                                 ; a = value unsigned
  57++CF7D 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++CF7F 7D                   ld      a,l                                 ; get low byte now
  59++CF80              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++CF80 FE 04       >                        cp      4
  59++CF82 DA 91 CF    >                        jp		c, ClampZto4
  60++CF85              NoClampZto4:
  61++CF85 22 7D C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++CF88 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++CF89 32 B3 97             ld      (varT),a
  64++CF8C 7C           		ld		a,h
  65++CF8D 32 95 97             ld      (varU),a
  66++CF90 C9           		ret
  67++CF91              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++CF91 21 04 00     		ld		hl,4
  69++CF94 22 7D C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++CF97 7D           		ld		a,l
  71++CF98 32 B3 97             ld      (varT),a                            ;                                                                           ;;;
  72++CF9B 7C           		ld		a,h
  73++CF9C 32 95 97             ld      (varU),a 						; compatibility for now
  74++CF9F C9           		ret
  75++CFA0
# file closed: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
 521+ CFA0                                      include "./Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ././Maths/Utilities/ScaleNodeTo8Bit.asm
   1++CFA0              ScaleNodeTo8Bit:								; TODO make signed
   2++CFA0 ED 4B 7D C0  	ld			bc,(UBnkZScaled)
   3++CFA4 2A 79 C0     	ld			hl,(UBnkXScaled)
   4++CFA7 ED 5B 7B C0  	ld			de,(UBnkYScaled)
   5++CFAB              SetABSbc:
   6++CFAB 78           	ld			a,b
   7++CFAC DD 67        	ld			ixh,a
   8++CFAE E6 7F        	and			SignMask8Bit
   9++CFB0 47           	ld			b,a									; bc = ABS bc
  10++CFB1              SetABShl:
  11++CFB1 7C           	ld			a,h
  12++CFB2 DD 6F        	ld			ixl,a
  13++CFB4 E6 7F        	and			SignMask8Bit
  14++CFB6 67           	ld			h,a									; hl = ABS hl
  15++CFB7              SetABSde:
  16++CFB7 7A           	ld			a,d
  17++CFB8 FD 67        	ld			iyh,a
  18++CFBA E6 7F        	and			SignMask8Bit
  19++CFBC 57           	ld			d,a									; de = ABS de
  20++CFBD              ScaleNodeTo8BitLoop:
  21++CFBD 78               ld          a,b		                            ; U	\ z hi
  22++CFBE B4           	or			h                                   ; XX15+1	\ x hi
  23++CFBF B2           	or			d                                   ; XX15+4	\ y hi
  24++CFC0 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++CFC2                  ShiftHLRight1
  25++CFC2 CB 3C       >			   srl h
  25++CFC4 CB 1D       >			   rr  l
  26++CFC6                  ShiftDERight1
  26++CFC6 CB 3A       >			   srl d
  26++CFC8 CB 1B       >			   rr  e
  27++CFCA              	ShiftBCRight1
  27++CFCA CB 38       >			   srl b
  27++CFCC CB 19       >			   rr  c
  28++CFCE C3 BD CF         jp          ScaleNodeTo8BitLoop
  29++CFD1              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++CFD1 DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++CFD3 E6 80        	and			SignOnly8Bit
  32++CFD5 B0           	or			b
  33++CFD6 47           	ld			b,a
  34++CFD7              SignforHL:
  35++CFD7 DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++CFD9 E6 80        	and			SignOnly8Bit
  37++CFDB B4           	or			h
  38++CFDC 67           	ld			h,a
  39++CFDD              SignforDE:
  40++CFDD FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++CFDF E6 80        	and			SignOnly8Bit
  42++CFE1 B2           	or			d
  43++CFE2 57           	ld			d,a
  44++CFE3              SignsDoneSaveResult:
  45++CFE3 ED 43 7D C0  	ld			(UBnkZScaled),bc
  46++CFE7 22 79 C0     	ld			(UBnkXScaled),hl
  47++CFEA ED 53 7B C0  	ld			(UBnkYScaled),de
  48++CFEE 78           	ld			a,b
  49++CFEF 32 95 97     	ld			(varU),a
  50++CFF2 79           	ld			a,c
  51++CFF3 32 B3 97     	ld			(varT),a
  52++CFF6 C9           	ret
  53++CFF7
# file closed: ././Maths/Utilities/ScaleNodeTo8Bit.asm
 522+ CFF7
 523+ CFF7              ;--------------------------------------------------------------------------------------------------------
 524+ CFF7 21 A6 C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 525+ CFFA ED 31                                add     hl,a
 526+ CFFC 3E FF                                ld      a,$FF
 527+ CFFE 77                                   ld      (hl),a
 528+ CFFF C9                                   ret
 529+ D000              ;--------------------------------------------------------------------------------------------------------
 530+ D000 21 A6 C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 531+ D003 ED 31                                add     hl,a
 532+ D005 AF                                   xor     a
 533+ D006 77                                   ld      (hl),a
 534+ D007 C9                                   ret
 535+ D008              ;--------------------------------------------------------------------------------------------------------
 536+ D008 3A 10 C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 537+ D00B CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 538+ D00D CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 539+ D00F 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 540+ D010 21 A6 C0                             ld      hl,UbnkFaceVisArray
 541+ D013 3E FF                                ld      a,$FF
 542+ D015              SetAllFacesVisibleLoop:
 543+ D015 77           EE30:                   ld      (hl),a
 544+ D016 23                                   inc     hl
 545+ D017 10 FC                                djnz    SetAllFacesVisibleLoop
 546+ D019 C9                                   ret
 547+ D01A              ;--------------------------------------------------------------------------------------------------------
 548+ D01A 3A 10 C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 549+ D01D CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 550+ D01F CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 551+ D021 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 552+ D022 06 10                                ld      b,16
 553+ D024 21 A6 C0                             ld      hl,UbnkFaceVisArray
 554+ D027 3E 00                                ld      a,$00
 555+ D029 77           SetAllFacesHiddenLoop:  ld      (hl),a
 556+ D02A 23                                   inc     hl
 557+ D02B 10 FC                                djnz    SetAllFacesHiddenLoop
 558+ D02D C9                                   ret
 559+ D02E
 560+ D02E              ;;;;X = normal scale
 561+ D02E              ;;;;ZtempHi = zhi
 562+ D02E              ;;;;......................................................
 563+ D02E              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 564+ D02E              ;;;;  Loop                                              ::LL90
 565+ D02E              ;;;;     inc X
 566+ D02E              ;;;;     divide X, Y & ZtempHiLo by 2
 567+ D02E              ;;;;  Until ZtempHi = 0
 568+ D02E              ;;;;......................................................
 569+ D02E              ;-LL21---------------------------------------------------------------------------------------------------
 570+ D02E                                      include "Universe/Ships/NormaliseTransMat.asm"
# file opened: ./Universe/Ships/NormaliseTransMat.asm
   1++D02E              ;divdide by 16 using undocumented instrunctions
   2++D02E              Norm256mulAdivQ:
   3++D02E 47               ld      b,a
   4++D02F 0E 00            ld      c,0
   5++D031 16 00            ld      d,0
   6++D033 3A 96 97         ld      a,(varQ)
   7++D036 5F               ld      e,a
   8++D037              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++D037              ;Output: BC = Quotient, HL = Remainder
  10++D037              NormDIV16UNDOC:
  11++D037 21 00 00         ld      hl,0
  12++D03A 78               ld      a,b
  13++D03B 06 10            ld      b,16
  14++D03D              NormDIV16UNDOCLOOP:
  15++D03D CB 31        	sll	    c		; unroll 16 times
  16++D03F 17           	rla	    		; ...
  17++D040 ED 6A        	adc	    hl,hl		; ...
  18++D042 ED 52        	sbc	    hl,de		; ...
  19++D044 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++D046 19           	add	    hl,de		; ...
  21++D047 0D           	dec	    c		; ...
  22++D048              NormDIV16UNDOCSKIP:
  23++D048 10 F3            djnz    NormDIV16UNDOCLOOP
  24++D04A 79               ld      a,c
  25++D04B 32 97 97         ld      (varR),a
  26++D04E C9               ret
  27++D04F
  28++D04F              ; Tested OK
  29++D04F              NormaliseTransMat:
  30++D04F              ;LL21
  31++D04F 21 45 C0             ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  32++D052 0E C5                ld      c,ConstNorm                 ; c = Q = norm = 197
  33++D054 79                   ld      a,c
  34++D055 32 96 97             ld      (varQ),a                    ; set up varQ
  35++D058 06 09                ld      b,9                         ; total of 9 elements to transform
  36++D05A              LL21Loop:
  37++D05A 56                   ld      d,(hl)
  38++D05B 2B                   dec     hl
  39++D05C 5E                   ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  40++D05D                      ShiftDELeft1                        ; De = DE * 2
  40++D05D CB 23       >			   sla e
  40++D05F CB 12       >			   rl  d
  41++D061 7A                   ld      a,d                         ; a = hi byte after shifting
  42++D062 E5           		push	hl
  43++D063 C5           		push	bc
  44++D064 CD 2E D0             call    Norm256mulAdivQ
  45++D067              		;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  46++D067 79                   ld      a,c                         ; BFRDIV returns R also in l reg
  47++D068 C1           		pop		bc
  48++D069 E1           		pop		hl							; bc gets wrecked by BFRDIV
  49++D06A 77                   ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  50++D06B 2B                   dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  51++D06C 10 EC                djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  52++D06E C9                   ret
  53++D06F
# file closed: ./Universe/Ships/NormaliseTransMat.asm
 571+ D06F              ;-LL91---------------------------------------------------------------------------------------------------
 572+ D06F
 573+ D06F              ; Now we have
 574+ D06F              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 575+ D06F              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 576+ D06F              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 577+ D06F              ;
 578+ D06F              ;--------------------------------------------------------------------------------------------------------
 579+ D06F                                      include "Universe/Ships/InverseXX16.asm"
# file opened: ./Universe/Ships/InverseXX16.asm
   1++D06F              ; TESTEDOK
   2++D06F
   3++D06F              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++D06F              ;        ld      a,(XX17)
   5++D06F              ;        ld      ixl,a
   6++D06F              ;        ld      ixh,9
   7++D06F              ;        ld      hl,UBnkTransInv0x
   8++D06F              ;        ld      a,(hl)
   9++D06F              ;ScaleNode:
  10++D06F              ;        ld      b,ixl
  11++D06F              ;ScaleNodeLoop:
  12++D06F              ;        sla      a
  13++D06F              ;        djnz    ScaleNodeLoop
  14++D06F              ;        ld      (hl),a
  15++D06F              ;        inc     hl
  16++D06F              ;        inc     hl
  17++D06F              ;        dec     ixh
  18++D06F              ;        jr      nz,ScaleNode
  19++D06F              ;        ret
  20++D06F
  21++D06F
  22++D06F              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++D06F              ; we coudl combine this with move to transmat later as an optimisation
  24++D06F              ; INPUT - All Scaled
  25++D06F              ;  They transmat has already been put into side, roof nose order
  26++D06F              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++D06F              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++D06F              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++D06F              ; OUTPUT
  30++D06F              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++D06F              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++D06F              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++D06F              ; First all side values become compoment 0 of each vector
  34++D06F 2A 34 C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++D072 ED 5B 3A C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++D076 ED 4B 40 C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++D07A 22 4C C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++D07D ED 53 4E C0          ld      (UbnkTransInvRow0x1),de     ;
  39++D081 ED 43 50 C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++D085 2A 36 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++D088 ED 5B 3C C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++D08C ED 4B 42 C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++D090 22 54 C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++D093 ED 53 56 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++D097 ED 43 58 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++D09B 2A 38 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++D09E ED 5B 3E C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++D0A2 ED 4B 44 C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++D0A6 22 5C C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++D0A9 ED 53 5E C0          ld      (UbnkTransInvRow2z1),de     ;
  51++D0AD ED 43 60 C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++D0B1 C9                   ret
  53++D0B2
  54++D0B2
# file closed: ./Universe/Ships/InverseXX16.asm
 580+ D0B2              ;--------------------------------------------------------------------------------------------------------
 581+ D0B2              ;--------------------------------------------------------------------------------------------------------
 582+ D0B2              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 583+ D0B2              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 584+ D0B2              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 585+ D0B2              ; Returns
 586+ D0B2              ;
 587+ D0B2              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 588+ D0B2              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 589+ D0B2              ;
 590+ D0B2              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 591+ D0B2              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 592+ D0B2              ;
 593+ D0B2              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 594+ D0B2              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 595+ D0B2              XXCURRENTN0equN1byN2div256: MACRO param1, param2, param3
 596+ D0B2 ~                                    ld      c,0
 597+ D0B2 ~                                    ld      a,param3                      ;
 598+ D0B2 ~                                    bit     7,a
 599+ D0B2 ~                                    jr      z,.val2Pos
 600+ D0B2 ~            ;HandleSignebits
 601+ D0B2 ~                                    neg
 602+ D0B2 ~                                    ld      c,$80
 603+ D0B2 ~            .val2Pos:               ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 604+ D0B2 ~                                    ld      a,param2                        ; A = XX16 element
 605+ D0B2 ~                                    bit     7,a
 606+ D0B2 ~                                    jr      z,.val1Pos
 607+ D0B2 ~            ;HandleSignebits
 608+ D0B2 ~                                    neg
 609+ D0B2 ~                                    ld      b,a
 610+ D0B2 ~                                    ld      a,c
 611+ D0B2 ~                                    xor     $80
 612+ D0B2 ~                                    ld      c,a
 613+ D0B2 ~                                    ld      a,b
 614+ D0B2 ~            .val1Pos:               ld      d,a
 615+ D0B2 ~            ;AequAmulQdiv256:
 616+ D0B2 ~                                    mul
 617+ D0B2 ~                                    ld      a,c
 618+ D0B2 ~                                    bit     7,a
 619+ D0B2 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 620+ D0B2 ~                                    jr      z,.resultPos
 621+ D0B2 ~                                    neg
 622+ D0B2 ~            .resultPos:             ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 623+ D0B2                                      ENDM
 624+ D0B2
 625+ D0B2              AequN1xorN2:            MACRO  param1,param2
 626+ D0B2 ~                                    ld      a,(param1)
 627+ D0B2 ~                                    xor     param2
 628+ D0B2                                      ENDM
 629+ D0B2
 630+ D0B2              N0equN1byN2div256:      MACRO param1,param2,param3
 631+ D0B2 ~                                    ld      a,param3                        ;
 632+ D0B2 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 633+ D0B2 ~                                    ld      a,param2                        ; A = XX16 element
 634+ D0B2 ~                                    ld      d,a
 635+ D0B2 ~                                    mul
 636+ D0B2 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 637+ D0B2 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 638+ D0B2                                      ENDM
 639+ D0B2
 640+ D0B2               ; TESTEDOK
 641+ D0B2              XX12DotOneRow:
 642+ D0B2              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 642+ D0B2 3A 79 C0    >                        ld      a,(UBnkXScaled)                        ;
 642+ D0B5 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 642+ D0B6 7E          >                        ld      a,(hl)                        ; A = XX16 element
 642+ D0B7 57          >                        ld      d,a
 642+ D0B8 ED 30       >                        mul
 642+ D0BA 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 642+ D0BB 32 B3 97    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 643+ D0BE 23                                   inc     hl                                  ; move to sign byte
 644+ D0BF              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 644+ D0BF 3A 7A C0    >                        ld      a,(UBnkXScaledSign)
 644+ D0C2 AE          >                        xor     (hl)
 645+ D0C3 32 98 97                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 646+ D0C6 23                                   inc     hl
 647+ D0C7              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 647+ D0C7 3A 7B C0    >                        ld      a,(UBnkYScaled)                        ;
 647+ D0CA 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 647+ D0CB 7E          >                        ld      a,(hl)                        ; A = XX16 element
 647+ D0CC 57          >                        ld      d,a
 647+ D0CD ED 30       >                        mul
 647+ D0CF 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 647+ D0D0 32 96 97    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 648+ D0D3                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 648+ D0D3 3A B3 97    >                        ld       a,(varT)
 648+ D0D6 32 97 97    >                        ld       (varR),a
 649+ D0D9 23                                   inc     hl
 650+ D0DA                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 650+ D0DA 3A 7C C0    >                        ld      a,(UBnkYScaledSign)
 650+ D0DD AE          >                        xor     (hl)
 651+ D0DE              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 652+ D0DE E5           STequSRplusAQ           push    hl
 653+ D0DF CD AA AE                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 654+ D0E2 E1                                   pop     hl
 655+ D0E3 32 B3 97                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 656+ D0E6 23                                   inc     hl
 657+ D0E7              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 657+ D0E7 3A 7D C0    >                        ld      a,(UBnkZScaled)                        ;
 657+ D0EA 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 657+ D0EB 7E          >                        ld      a,(hl)                        ; A = XX16 element
 657+ D0EC 57          >                        ld      d,a
 657+ D0ED ED 30       >                        mul
 657+ D0EF 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 657+ D0F0 32 96 97    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 658+ D0F3                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 658+ D0F3 3A B3 97    >                        ld       a,(varT)
 658+ D0F6 32 97 97    >                        ld       (varR),a
 659+ D0F9 23                                   inc     hl
 660+ D0FA                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 660+ D0FA 3A 7E C0    >                        ld      a,(UBnkZScaledSign)
 660+ D0FD AE          >                        xor     (hl)
 661+ D0FE              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 662+ D0FE CD AA AE                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 663+ D101              ; Now we exit with A = result S = Sign
 664+ D101 C9                                   ret
 665+ D102
 666+ D102
 667+ D102              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 668+ D102              ;TESTED OK
 669+ D102              XX12EquXX15DotProductXX16:
 670+ D102              XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 671+ D102 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 672+ D105 21 34 C0                             ld      hl,UBnkTransmatSidevX
 673+ D108 CD B2 D0                             call    XX12DotOneRow
 674+ D10B 32 7F C0                             ld      (UBnkXX12xLo),a
 675+ D10E 3A 98 97                             ld      a,(varS)
 676+ D111 32 80 C0                             ld      (UBnkXX12xSign),a
 677+ D114 21 3A C0                             ld      hl,UBnkTransmatRoofvX
 678+ D117 CD B2 D0                             call    XX12DotOneRow
 679+ D11A 32 81 C0                             ld      (UBnkXX12yLo),a
 680+ D11D 3A 98 97                             ld      a,(varS)
 681+ D120 32 82 C0                             ld      (UBnkXX12ySign),a
 682+ D123 21 40 C0                             ld      hl,UBnkTransmatNosevX
 683+ D126 CD B2 D0                             call    XX12DotOneRow
 684+ D129 32 83 C0                             ld      (UBnkXX12zLo),a
 685+ D12C 3A 98 97                             ld      a,(varS)
 686+ D12F 32 84 C0                             ld      (UBnkXX12zSign),a
 687+ D132 C9                                   ret
 688+ D133              ;--------------------------------------------------------------------------------------------------------
 689+ D133                                      include "./Universe/Ships/CopyXX12ScaledToXX18.asm"
# file opened: ././Universe/Ships/CopyXX12ScaledToXX18.asm
   1++D133              CopyXX12ScaledToXX18:
   2++D133              CopyResultToDrawCam:
   3++D133                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++D133 3A 7F C0    >                        ld       a,(XX12)
   3++D136 32 6D C0    >                        ld       (XX18),a
   4++D139                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++D139 3A 80 C0    >                        ld       a,(XX12+1)
   4++D13C 32 6F C0    >                        ld       (XX18+2),a
   5++D13F                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++D13F 3A 81 C0    >                        ld       a,(XX12+2)
   5++D142 32 70 C0    >                        ld       (XX18+3),a
   6++D145                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++D145 3A 82 C0    >                        ld       a,(XX12+3)
   6++D148 32 72 C0    >                        ld       (XX18+5),a
   7++D14B                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++D14B 3A 83 C0    >                        ld       a,(XX12+4)
   7++D14E 32 73 C0    >                        ld       (XX18+6),a
   8++D151                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++D151 3A 84 C0    >                        ld       a,(XX12+5)
   8++D154 32 75 C0    >                        ld       (XX18+8),a
   9++D157 C9                   ret
  10++D158
# file closed: ././Universe/Ships/CopyXX12ScaledToXX18.asm
 690+ D158                                      include "./Universe/Ships/CopyXX12toXX15.asm"
# file opened: ././Universe/Ships/CopyXX12toXX15.asm
   1++D158              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++D158 3A 7F C0    >                        ld       a,(UBnkXX12xLo)
   1++D15B 32 79 C0    >                        ld       (UBnkXScaled),a
   2++D15E                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++D15E 3A 80 C0    >                        ld       a,(UBnkXX12xSign)
   2++D161 32 7A C0    >                        ld       (UBnkXScaledSign),a
   3++D164                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++D164 3A 81 C0    >                        ld       a,(UBnkXX12yLo)
   3++D167 32 7B C0    >                        ld       (UBnkYScaled),a
   4++D16A                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++D16A 3A 82 C0    >                        ld       a,(UBnkXX12ySign)
   4++D16D 32 7C C0    >                        ld       (UBnkYScaledSign),a
   5++D170                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++D170 3A 83 C0    >                        ld       a,(UBnkXX12zLo)
   5++D173 32 7D C0    >                        ld       (UBnkZScaled),a
   6++D176                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++D176 3A 84 C0    >                        ld       a,(UBnkXX12zSign)
   6++D179 32 7E C0    >                        ld       (UBnkZScaledSign),a
   7++D17C C9                                   ret
   8++D17D
# file closed: ././Universe/Ships/CopyXX12toXX15.asm
 691+ D17D                                      include "./Universe/Ships/CopyXX18toXX15.asm"
# file opened: ././Universe/Ships/CopyXX18toXX15.asm
   1++D17D              CopyXX18toXX15:
   2++D17D              CopyDrawCamToScaled:
   3++D17D                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++D17D 3A 6D C0    >                        ld       a,(UBnkDrawCam0xLo)
   3++D180 32 79 C0    >                        ld       (UBnkXScaled),a
   4++D183                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++D183 3A 6F C0    >                        ld       a,(UBnkDrawCam0xSgn)
   4++D186 32 7A C0    >                        ld       (UBnkXScaledSign),a
   5++D189                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++D189 3A 70 C0    >                        ld       a,(UBnkDrawCam0yLo)
   5++D18C 32 7B C0    >                        ld       (UBnkYScaled),a
   6++D18F                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++D18F 3A 72 C0    >                        ld       a,(UBnkDrawCam0ySgn)
   6++D192 32 7C C0    >                        ld       (UBnkYScaledSign),a
   7++D195                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++D195 3A 73 C0    >                        ld       a,(UBnkDrawCam0zLo)
   7++D198 32 7D C0    >                        ld       (UBnkZScaled),a
   8++D19B                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++D19B 3A 75 C0    >                        ld       a,(UBnkDrawCam0zSgn)
   8++D19E 32 7E C0    >                        ld       (UBnkZScaledSign),a
   9++D1A1 C9                   ret
  10++D1A2
# file closed: ././Universe/Ships/CopyXX18toXX15.asm
 692+ D1A2                                      include "./Universe/Ships/CopyXX18ScaledToXX15.asm"
# file opened: ././Universe/Ships/CopyXX18ScaledToXX15.asm
   1++D1A2 21 0C C0     LoadCraftToCamera:      ld      hl,UBnKxlo
   2++D1A5 11 6D C0                             ld      de,UBnkDrawCam0xLo
   3++D1A8                                      NineLDIInstrunctions                ; transfer 9 bytes
   3++D1A8 ED A0       >		                ldi
   3++D1AA ED A0       >		                ldi
   3++D1AC ED A0       >		                ldi
   3++D1AE ED A0       >		                ldi
   3++D1B0 ED A0       >		                ldi
   3++D1B2 ED A0       >		                ldi
   3++D1B4 ED A0       >		                ldi
   3++D1B6 ED A0       >		                ldi
   3++D1B8 ED A0       >		                ldi
   4++D1BA C9                                   ret
   5++D1BB
   6++D1BB              CopyCameraToXX15Signed:
   7++D1BB 2A 6D C0             ld  hl,(UBnkDrawCam0xLo)
   8++D1BE 3A 6F C0             ld  a,(UBnkDrawCam0xSgn)
   9++D1C1 B4                   or  h
  10++D1C2 67                   ld  h,a
  11++D1C3 22 79 C0             ld  (UBnkXScaled),hl
  12++D1C6 2A 70 C0             ld  hl,(UBnkDrawCam0yLo)
  13++D1C9 3A 72 C0             ld  a,(UBnkDrawCam0ySgn)
  14++D1CC B4                   or  h
  15++D1CD 67                   ld  h,a
  16++D1CE 22 7B C0             ld  (UBnkYScaled),hl
  17++D1D1 2A 73 C0             ld  hl,(UBnkDrawCam0zLo)
  18++D1D4 3A 75 C0             ld  a,(UBnkDrawCam0zSgn)
  19++D1D7 B4                   or  h
  20++D1D8 67                   ld  h,a
  21++D1D9 22 7D C0             ld  (UBnkZScaled),hl
  22++D1DC C9                   ret
  23++D1DD
  24++D1DD              CopyXX18ScaledToXX15:
  25++D1DD              CopyDrawCamToScaledMatrix:
  26++D1DD                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  26++D1DD 3A 75 C0    >                        ld       a,(UBnkDrawCam0zSgn)
  26++D1E0 32 7E C0    >                        ld       (UBnkZScaledSign),a
  27++D1E3                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  27++D1E3 3A 6D C0    >                        ld       a,(UBnkDrawCam0xLo)
  27++D1E6 32 79 C0    >                        ld       (UBnkXScaled),a
  28++D1E9                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  28++D1E9 3A 6F C0    >                        ld       a,(UBnkDrawCam0xSgn)
  28++D1EC 32 7A C0    >                        ld       (UBnkXScaledSign),a
  29++D1EF                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  29++D1EF 3A 70 C0    >                        ld       a,(UBnkDrawCam0yLo)
  29++D1F2 32 7B C0    >                        ld       (UBnkYScaled),a
  30++D1F5                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  30++D1F5 3A 72 C0    >                        ld       a,(UBnkDrawCam0ySgn)
  30++D1F8 32 7C C0    >                        ld       (UBnkYScaledSign),a
  31++D1FB                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  31++D1FB 3A 73 C0    >                        ld       a,(UBnkDrawCam0zLo)
  31++D1FE 32 7D C0    >                        ld       (UBnkZScaled),a
  32++D201 C9                   ret
  33++D202
  34++D202              CopyXX15ToXX18Scaled:
  35++D202              CopyScaledMatrixToDrawCam:
  36++D202                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  36++D202 3A 7E C0    >                        ld       a,(UBnkZScaledSign)
  36++D205 32 75 C0    >                        ld       (UBnkDrawCam0zSgn),a
  37++D208                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  37++D208 3A 79 C0    >                        ld       a,(UBnkXScaled)
  37++D20B 32 6D C0    >                        ld       (UBnkDrawCam0xLo),a
  38++D20E                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  38++D20E 3A 7A C0    >                        ld       a,(UBnkXScaledSign)
  38++D211 32 6F C0    >                        ld       (UBnkDrawCam0xSgn),a
  39++D214                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  39++D214 3A 7B C0    >                        ld       a,(UBnkYScaled)
  39++D217 32 70 C0    >                        ld       (UBnkDrawCam0yLo),a
  40++D21A                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  40++D21A 3A 7C C0    >                        ld       a,(UBnkYScaledSign)
  40++D21D 32 72 C0    >                        ld       (UBnkDrawCam0ySgn),a
  41++D220                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  41++D220 3A 7D C0    >                        ld       a,(UBnkZScaled)
  41++D223 32 73 C0    >                        ld       (UBnkDrawCam0zLo),a
  42++D226 C9                   ret
  43++D227
  44++D227
  45++D227              XX15EquXX15AddXX18:
  46++D227              LL94Z:
  47++D227 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  48++D229 16 00                ld      d,0                                                     ;
  49++D22B 3A 7D C0             ld      a,(UBnkZScaled)                                         ;
  50++D22E 6F                   ld      l,a                                                     ;
  51++D22F 3A 7E C0             ld      a,(UBnkZScaledSign)                                     ;
  52++D232 47                   ld      b,a                                                     ;
  53++D233 3A 73 C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  54++D236 5F                   ld      e,a                                                     ;
  55++D237 3A 75 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  56++D23A 4F                   ld      c,a                                                     ;
  57++D23B CD 8C AD             call    ADDHLDESignBC                                           ;
  58++D23E 47                   ld      b,a                                                     ;
  59++D23F 7C                   ld      a,h                                                     ;
  60++D240 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  61++D241 32 7E C0             ld      (UBnkZScaledSign),a                                     ;
  62++D244 7D                   ld      a,l                                                     ;
  63++D245 32 7D C0             ld      (UBnkZScaled),a                                         ;           endif
  64++D248              LL94X:
  65++D248 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  66++D24A 16 00                ld      d,0                                                     ;
  67++D24C 3A 79 C0             ld      a,(UBnkXScaled)                                         ;
  68++D24F 6F                   ld      l,a                                                     ;
  69++D250 3A 7A C0             ld      a,(UBnkXScaledSign)                                     ;
  70++D253 47                   ld      b,a                                                     ;
  71++D254 3A 6D C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  72++D257 5F                   ld      e,a                                                     ;
  73++D258 3A 6F C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  74++D25B 4F                   ld      c,a                                                     ;
  75++D25C CD 8C AD             call    ADDHLDESignBC                                           ;
  76++D25F 47                   ld      b,a                                                     ;
  77++D260 7C                   ld      a,h                                                     ;
  78++D261 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  79++D262 32 7A C0             ld      (UBnkXScaledSign),a                                     ;
  80++D265 7D                   ld      a,l                                                     ;
  81++D266 32 79 C0             ld      (UBnkXScaled),a                                         ;           endif
  82++D269              LL94Y:
  83++D269 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  84++D26B 16 00                ld      d,0                                                     ;
  85++D26D 3A 7B C0             ld      a,(UBnkYScaled)                                         ;
  86++D270 6F                   ld      l,a                                                     ;
  87++D271 3A 7C C0             ld      a,(UBnkYScaledSign)                                     ;
  88++D274 47                   ld      b,a                                                     ;
  89++D275 3A 70 C0             ld      a,(UBnkDrawCam0yLo)                                     ;
  90++D278 5F                   ld      e,a                                                     ;
  91++D279 3A 72 C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
  92++D27C 4F                   ld      c,a                                                     ;
  93++D27D CD 8C AD             call    ADDHLDESignBC                                           ;
  94++D280 47                   ld      b,a                                                     ;
  95++D281 7C                   ld      a,h                                                     ;
  96++D282 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  97++D283 32 7C C0             ld      (UBnkYScaledSign),a                                     ;
  98++D286 7D                   ld      a,l                                                     ;
  99++D287 32 7B C0             ld      (UBnkYScaled),a                                         ;
 100++D28A C9                   ret
 101++D28B
# file closed: ././Universe/Ships/CopyXX18ScaledToXX15.asm
 693+ D28B                                      include "./Universe/Ships/CopyXX12ToScaled.asm"
# file opened: ././Universe/Ships/CopyXX12ToScaled.asm
   1++D28B              CopyXX12ToScaled:
   2++D28B              CopyResultToScaled:
   3++D28B                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++D28B 3A 7F C0    >                        ld       a,(XX12+0)
   3++D28E 32 79 C0    >                        ld       (UBnkXScaled),a
   4++D291                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++D291 3A 81 C0    >                        ld       a,(XX12+2)
   4++D294 32 7B C0    >                        ld       (UBnkYScaled),a
   5++D297                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++D297 3A 83 C0    >                        ld       a,(XX12+4)
   5++D29A 32 7D C0    >                        ld       (UBnkZScaled),a
   6++D29D C9                   ret
   7++D29E
# file closed: ././Universe/Ships/CopyXX12ToScaled.asm
 694+ D29E              ;--------------------------------------------------------------------------------------------------------
 695+ D29E                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++D29E              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++D29E              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++D29E              ;;; S = XX12 XSign Xor XX15 XSign
   4++D29E              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++D29E              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++D29E              ;;; R = T
   7++D29E              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++D29E              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++D29E              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++D29E              ;;; Q = A * Q /256 usigned (zdot)
  11++D29E              ;;; R = T
  12++D29E              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++D29E
  14++D29E
  15++D29E
  16++D29E
  17++D29E
  18++D29E              MacroAequDxEdiv256usgn:	MACRO
  19++D29E ~            						mul
  20++D29E ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++D29E              						ENDM
  22++D29E              DotProductXX12XX15:
  23++D29E 3A 7F C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++D2A1                      IfAIsZeroGoto dotxskipzero
  24++D2A1 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++D2A2 CA BF D2    >                        jp	z, dotxskipzero
  25++D2A5 5F                   ld          e,a
  26++D2A6 3A 79 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++D2A9 57                   ld          d,a                     ; de = xx12 x signed
  28++D2AA                      IfAIsZeroGoto dotxskipzero
  28++D2AA A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++D2AB CA BF D2    >                        jp	z, dotxskipzero
  29++D2AE ED 30        		mul
  30++D2B0 42                   ld          b,d                     ; b = result
  31++D2B1 3A 80 C0             ld          a,(UBnkXX12xSign)
  32++D2B4 21 7A C0             ld          hl,UBnkXScaledSign
  33++D2B7 AE                   xor         (hl)
  34++D2B8 E6 80                and         $80                     ; so sign bit only
  35++D2BA FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++D2BC C3 C3 D2             jp          dotmuly
  37++D2BF              dotxskipzero:
  38++D2BF AF                   xor         a
  39++D2C0 47                   ld          b,a
  40++D2C1 FD 67                ld          iyh,a
  41++D2C3              dotmuly:
  42++D2C3              ; now we have b = XX12 x &d  norm x signed
  43++D2C3 3A 81 C0             ld          a,(UBnkXX12yLo)
  44++D2C6                      IfAIsZeroGoto dotyskipzero
  44++D2C6 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++D2C7 CA E6 D2    >                        jp	z, dotyskipzero
  45++D2CA 5F                   ld          e,a
  46++D2CB 3A 7B C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++D2CE                      IfAIsZeroGoto dotyskipzero
  47++D2CE A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++D2CF CA E6 D2    >                        jp	z, dotyskipzero
  48++D2D2 57                   ld          d,a                     ; de = xx12 x signed
  49++D2D3 ED 30                mul
  50++D2D5 4A                   ld          c,d                     ; c = result
  51++D2D6 DD 69                ld          ixl,c
  52++D2D8 3A 82 C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++D2DB 21 7C C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++D2DE AE                   xor         (hl)                    ; XX15+3
  55++D2DF E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++D2E1 DD 67                ld          ixh,a
  57++D2E3 C3 EA D2             jp          dotaddxy
  58++D2E6              dotyskipzero:
  59++D2E6 AF                   xor         a
  60++D2E7 4F                   ld          c,a
  61++D2E8 DD 67                ld          ixh,a
  62++D2EA              dotaddxy:
  63++D2EA              ; Optimise later as this is 16 bit
  64++D2EA 26 00                ld          h,0                     ;
  65++D2EC 68                   ld          l,b                     ; hl = xlo + x scaled
  66++D2ED 16 00                ld          d,0                     ;
  67++D2EF 59                   ld          e,c                     ; de = ylo + yscaled
  68++D2F0 FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++D2F2 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++D2F3 CD 8C AD             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D2F6 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D2F7 3A 83 C0             ld          a,(UBnkXX12zLo)         ;
  73++D2FA                      IfAIsZeroGoto dotzskipzero
  73++D2FA A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++D2FB CA 20 D3    >                        jp	z, dotzskipzero
  74++D2FE 5F                   ld          e,a                     ;
  75++D2FF 3A 7D C0             ld          a,(UBnkZScaled)         ;
  76++D302                      IfAIsZeroGoto dotzskipzero
  76++D302 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++D303 CA 20 D3    >                        jp	z, dotzskipzero
  77++D306 57                   ld          d,a
  78++D307 ED 30                mul
  79++D309 E5                   push        hl                      ; save prev result
  80++D30A 3A 7E C0             ld          a,(UBnkZScaledSign)
  81++D30D 21 84 C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D310 AE                   xor         (hl)                    ; hi sign
  83++D311 E6 80                and         $80                     ; a = sign of multiply
  84++D313 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D314 E1                   pop         hl
  86++D315 5A                   ld          e,d
  87++D316 16 00                ld          d,0
  88++D318 CD 8C AD             call ADDHLDESignBC
  89++D31B 32 98 97             ld          (varS),a
  90++D31E 7D                   ld          a,l
  91++D31F C9                   ret                                 ; returns with A = value, varS = sign
  92++D320              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D320 78                   ld          a,b
  94++D321 32 98 97             ld          (varS),a
  95++D324 7D                   ld          a,l
  96++D325 C9                   ret
  97++D326              ;;;;       DotProductXX12XX15:
  98++D326              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D326              ;;;;       ld          e,a
 100++D326              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D326              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D326              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D326              ;;;;		mul
 104++D326              ;;;;       ld          b,d                     ; b as var T
 105++D326              ;;;;       ld          a,(UBnkXX12xSign)
 106++D326              ;;;;       ld          hl,UBnkXScaledSign
 107++D326              ;;;;       xor         (hl)
 108++D326              ;;;;       and         $80                     ; so sign bit only
 109++D326              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D326              ;;;; now we have b = XX12 x & norm x signed
 111++D326              ;;;; by here B = xlo & xscaled C = result sign
 112++D326              ;;;;       ld          a,(UBnkXX12yLo)
 113++D326              ;;;;       ld          e,a
 114++D326              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D326              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D326              ;;;;       mul
 117++D326              ;;;;       ld          a,d
 118++D326              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D326              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D326              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D326              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D326              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D326              ;;;;       xor         (hl)                    ; XX15+3
 124++D326              ;;;;       and         $80
 125++D326              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D326              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D326              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D326              ;;;;       ld          e,a                     ; use e as var Q
 129++D326              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D326              ;;;;       ld          d,a
 131++D326              ;;;;       mul
 132++D326              ;;;;       ld          a,d
 133++D326              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D326              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D326              ;;;;       ld          a,(UBnkZScaledSign)
 136++D326              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D326              ;;;;       xor         (hl)                    ; hi sign
 138++D326              ;;;;       and         $80
 139++D326              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D326              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D326
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 696+ D326              ;--------------------------------------------------------------------------------------------------------
 697+ D326              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 698+ D326                                      include "Universe/Ships/ScaleNormal.asm"
# file opened: ./Universe/Ships/ScaleNormal.asm
   1++D326              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
   2++D326              ; returns with XX15 scaled by Q but also z scaled in a register
   3++D326              ScaleNormal:
   4++D326              LL93:
   5++D326 3A 9D 97             ld      a,(XX17)                    ; scale--
   6++D329 DD 6F        		ld		ixl,a
   7++D32B 3A 7D C0     		ld		a,(UBnkZScaled)				; needs to be in a just in case we abort early
   8++D32E DD 2D        		dec		ixl
   9++D330 F8           		ret		m							; return if q was 0, i.e. no scaling
  10++D331              ScaleLoop:
  11++D331              LL933:
  12++D331 21 79 C0             ld      hl,XX15
  13++D334 CB 3E                srl     (hl)                        ; XX15	\ xnormal lo/2 \ LL93+3 \ counter X
  14++D336 23                   inc     hl							; looking at XX15 x sign now
  15++D337 23                   inc     hl							; looking at XX15 y Lo now
  16++D338 CB 3E                srl     (hl)                        ; XX15+2	\ ynormal lo/2
  17++D33A 23           		inc		hl							; looking at XX15 y sign now
  18++D33B 23           		inc		hl							; looking at XX15 z Lo now
  19++D33C CB 3E        		srl		(hl)
  20++D33E 7E           		ld		a,(hl)						; znormal lo/2 also into a it came in at the end of LL92
  21++D33F DD 2D                dec     ixl                         ; reduce scale
  22++D341 F2 31 D3             jp      p,ScaleLoop                 ; LL93-3 loop to lsr xx15
  23++D344 C9                   ret
  24++D345
# file closed: ./Universe/Ships/ScaleNormal.asm
 699+ D345              ;--------------------------------------------------------------------------------------------------------
 700+ D345                                      include "./Universe/Ships/ScaleObjectDistance.asm"
# file opened: ././Universe/Ships/ScaleObjectDistance.asm
   1++D345              ScaleObjectDistance:
   2++D345              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D345 3A 16 C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D348 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D349              LL90:                                       ; scaling object distance
   6++D349 3A 74 C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D34C 47                   ld      b,a                         ; z_hi (yReg)
   8++D34D                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D34D A7          >                        and a
   8++D34E C8          >                        ret    z
   9++D34F              LL90Loop:
  10++D34F              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D34F 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D350                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D350 2A 70 C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D353 CB 3C       >                    srl   h
  12++D355 CB 1D       >                    rr    l
  12++D357 22 70 C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D35A                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D35A 2A 6D C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D35D CB 3C       >                    srl   h
  13++D35F CB 1D       >                    rr    l
  13++D361 22 6D C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D364                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D364 2A 73 C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D367 CB 3C       >                    srl   h
  14++D369 CB 1D       >                    rr    l
  14++D36B 22 73 C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D36E 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D36F                      IfANotZeroGoto LL90Loop             ; loop until z hi = 0 this gives scalinging in c
  16++D36F FE 00       >                        cp	0
  16++D371 C2 4F D3    >                        jp	nz,LL90Loop
  17++D374 C9                   ret
  18++D375
# file closed: ././Universe/Ships/ScaleObjectDistance.asm
 701+ D375              ;--------------------------------------------------------------------------------------------------------
 702+ D375
 703+ D375              ; Backface cull
 704+ D375              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 705+ D375              ; normal vector = cross product of ship ccordinates
 706+ D375              ;
 707+ D375
 708+ D375                                      include "./Universe/Ships/CopyFaceToXX15.asm"
# file opened: ././Universe/Ships/CopyFaceToXX15.asm
   1++D375 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D376 47                                   ld      b,a                                                    ;;;
   3++D377 E6 80                                and     $80
   4++D379 32 7A C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D37C 78                                   ld      a,b
   6++D37D CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D37F 47                                   ld      b,a
   8++D380 E6 80                                and     $80
   9++D382 32 7C C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D385 78                                   ld      a,b
  11++D386 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D388 E6 80                                and     $80
  13++D38A 32 7E C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D38D 23                                   inc     hl                          ; move to X ccord
  15++D38E 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D38F 32 79 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D392 23                                   inc     hl                                                                                                                 ;;;
  18++D393 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D394 32 7B C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D397 23                                   inc     hl                                                                                                                 ;;;
  21++D398 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D399 32 7D C0                             ld      (UBnkZScaled),a
  23++D39C C9                                   ret
  24++D39D
# file closed: ././Universe/Ships/CopyFaceToXX15.asm
 709+ D39D                                      include "./Universe/Ships/CopyFaceToXX12.asm"
# file opened: ././Universe/Ships/CopyFaceToXX12.asm
   1++D39D 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D39E 47                                   ld      b,a                         ; save sign bits to b
   3++D39F E6 80                                and     $80
   4++D3A1 32 80 C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D3A4 78                                   ld      a,b
   6++D3A5 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D3A7 47                                   ld      b,a
   8++D3A8 E6 80                                and     $80
   9++D3AA 32 82 C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D3AD 78                                   ld      a,b
  11++D3AE CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D3B0 E6 80                                and     $80
  13++D3B2 32 84 C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D3B5 23                                   inc     hl                          ; move to X ccord
  15++D3B6 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D3B7 32 7F C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D3BA 23                                   inc     hl                                                                                                                 ;;;
  18++D3BB 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D3BC 32 81 C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D3BF 23                                   inc     hl                                                                                                                 ;;;
  21++D3C0 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D3C1 32 83 C0                             ld      (UBnkXX12zLo),a
  23++D3C4 C9                                   ret
  24++D3C5
# file closed: ././Universe/Ships/CopyFaceToXX12.asm
 710+ D3C5              ;--------------------------------------------------------------
 711+ D3C5              ; Original loginc in EE29 (LL9 4 of 12)
 712+ D3C5              ; Enters with XX4 = z distnace scaled to 1 .. 31
 713+ D3C5              ; get number of faces * 4      FaceCntX4
 714+ D3C5              ; return if no faces
 715+ D3C5              ; get Face Normal scale factor FaceScale (XX17)
 716+ D3C5              ; get ship pos z hi     (XX18)
 717+ D3C5              ; While Z hi <> 0
 718+ D3C5              ;    FaceScale = FaceScale + 1           (XX17)
 719+ D3C5              ;    Ship pos y = ship pos y / 2         (XX18)
 720+ D3C5              ;    ship pos x = ship pos x / 2         (XX18)
 721+ D3C5              ;    ship pos z = ship pos z / 2         (XX18)
 722+ D3C5              ; Loop
 723+ D3C5              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 724+ D3C5              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 725+ D3C5              ; Copy XX12 into XX18
 726+ D3C5              ; For each face
 727+ D3C5              ;     Get Face sign and visibility distance byte
 728+ D3C5              ;     if normal visibility range  < XX4
 729+ D3C5              ;        Get Face data into XX12
 730+ D3C5              ;        if FaceScale (XX17) >= 4
 731+ D3C5              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 732+ D3C5              ;        else
 733+ D3C5              ;           Copy FaceScale scaled to X  (XX17)
 734+ D3C5              ;LabelOverflowLoop:
 735+ D3C5              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 736+ D3C5              ;           While X >= 0
 737+ D3C5              ;              X--                                                                                                  ::LL93
 738+ D3C5              ;              if  x >= 0
 739+ D3C5              ;                  XX15x = XX15x / 2
 740+ D3C5              ;                  XX15y = XX15y / 2
 741+ D3C5              ;                  XX15y = XX15y / 2
 742+ D3C5              ;           loop
 743+ D3C5              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 744+ D3C5              ;           if A > 256 (i.e. was overflow)
 745+ D3C5              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 746+ D3C5              ;               X = 1
 747+ D3C5              ;               Goto LabelOverflowLoop
 748+ D3C5              ;           else
 749+ D3C5              ;              Scaled (XX15) Z = AddZ
 750+ D3C5              ;           endif
 751+ D3C5              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
 752+ D3C5              ;           if A > 256 (i.e. was overflow)
 753+ D3C5              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 754+ D3C5              ;               X = 1
 755+ D3C5              ;               Goto LabelOverflowLoop
 756+ D3C5              ;           else
 757+ D3C5              ;              Scaled (XX15) X = AddX
 758+ D3C5              ;           endif
 759+ D3C5              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
 760+ D3C5              ;           if A > 256 (i.e. was overflow)
 761+ D3C5              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 762+ D3C5              ;               X = 1
 763+ D3C5              ;               Goto LabelOverflowLoop
 764+ D3C5              ;           else
 765+ D3C5              ;              Scaled (XX15) Y = AddY
 766+ D3C5              ;           endif
 767+ D3C5              ;        endif
 768+ D3C5              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
 769+ D3C5              ;        if dot product < 0
 770+ D3C5              ;           set face visible
 771+ D3C5              ;        else
 772+ D3C5              ;           set face invisible
 773+ D3C5              ;        end if
 774+ D3C5              ;     else
 775+ D3C5              ;       Set FaceVisibility to true
 776+ D3C5              ;     end if
 777+ D3C5              ; Next Face
 778+ D3C5
 779+ D3C5 DD 25        ScaleDownXX15byIXH:     dec     ixh
 780+ D3C7 F8                                   ret     m
 781+ D3C8 21 79 C0                             ld      hl,UBnkXScaled
 782+ D3CB CB 3E                                srl     (hl)                        ; XX15  \ xnormal lo/2 \ LL93+3 \ counter X
 783+ D3CD 23                                   inc     hl                          ; looking at XX15 x sign now
 784+ D3CE 23                                   inc     hl                          ; looking at XX15 y Lo now
 785+ D3CF CB 3E                                srl     (hl)                        ; XX15+2    \ ynormal lo/2
 786+ D3D1 23                                   inc     hl                          ; looking at XX15 y sign now
 787+ D3D2 23                                   inc     hl                          ; looking at XX15 z Lo now
 788+ D3D3 CB 3E                                srl     (hl)
 789+ D3D5 C3 C5 D3                             jp      ScaleDownXX15byIXH
 790+ D3D8 C9                                   ret
 791+ D3D9
 792+ D3D9 21 6D C0     DivideXX18By2:          ld      hl,UBnkDrawCam0xLo
 793+ D3DC CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 794+ D3DE 23                                   inc     hl                          ; looking at XX18 x sign now
 795+ D3DF 23                                   inc     hl                          ; looking at XX18 y Lo now
 796+ D3E0 CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 797+ D3E2 23                                   inc     hl                          ; looking at XX18 y sign now
 798+ D3E3 23                                   inc     hl                          ; looking at XX18 z Lo now
 799+ D3E4 CB 3E                                srl     (hl)
 800+ D3E6 C9                                   ret
 801+ D3E7
 802+ D3E7              ;line of sight vector = [x y z] + face normal vector
 803+ D3E7
 804+ D3E7              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
 805+ D3E7              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
 806+ D3E7              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
 807+ D3E7              ;
 808+ D3E7              ;--------------------------------------------------------------
 809+ D3E7              ; line of sight (eye outwards dot face normal vector < 0
 810+ D3E7              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
 811+ D3E7              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
 812+ D3E7              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
 813+ D3E7
 814+ D3E7              RotateXX15ByTransMatXX16:
 815+ D3E7 21 34 C0                             ld      hl,UBnkTransmatSidevX               ; process orientation matrix row 0
 816+ D3EA CD 70 8E                             call    XX12ProcessOneRow
 817+ D3ED 47                                   ld      b,a                                 ; get
 818+ D3EE 7D                                   ld      a,l
 819+ D3EF B0                                   or      b
 820+ D3F0 32 80 C0                             ld      (UBnkXX12xSign),a                   ; a = result with sign in bit 7
 821+ D3F3 7D                                   ld      a,l
 822+ D3F4 32 7F C0                             ld      (UBnkXX12xLo),a                     ; that is result done for
 823+ D3F7
 824+ D3F7 21 3A C0                             ld      hl,UBnkTransmatRoofvX               ; process orientation matrix row 0
 825+ D3FA CD 70 8E                             call    XX12ProcessOneRow
 826+ D3FD 47                                   ld      b,a                                 ; get
 827+ D3FE 7D                                   ld      a,l
 828+ D3FF B0                                   or      b
 829+ D400 32 82 C0                             ld      (UBnkXX12ySign),a                   ; a = result with sign in bit 7
 830+ D403 7D                                   ld      a,l
 831+ D404 32 81 C0                             ld      (UBnkXX12yLo),a                     ; that is result done for
 832+ D407
 833+ D407 21 40 C0                             ld      hl,UBnkTransmatNosevX               ; process orientation matrix row 0
 834+ D40A CD 70 8E                             call    XX12ProcessOneRow
 835+ D40D 47                                   ld      b,a                                 ; get
 836+ D40E 7D                                   ld      a,l
 837+ D40F B0                                   or      b
 838+ D410 32 84 C0                             ld      (UBnkXX12zSign),a                   ; a = result with sign in bit 7
 839+ D413 7D                                   ld      a,l
 840+ D414 32 83 C0                             ld      (UBnkXX12zLo),a                     ; that is result done for
 841+ D417 C9                                   ret
 842+ D418
 843+ D418                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D418 00           CurrentNormIdx  DB 0
   2++D419              ; SomeFacesVisible:
   3++D419              ; EE29:
   4++D419
   5++D419              ;   Backface cull logic  line of sight vector . face normal vector
   6++D419              ;       line of sight vector . face normal vector
   7++D419              ;       => line of sight vector = [x y z] + face normal vector
   8++D419              ;       Where [x y z] =
   9++D419              ;                                               [ [x y z] . sidev ]
  10++D419              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  11++D419              ;                                               [ [x y z] . nosev ]
  12++D419              ;
  13++D419              ;   so project the [x y z] vector into the face's normal space
  14++D419              ;  line of sight vector = projected [x y z] vector + face normal vector
  15++D419              ;                         [ [x y z] . sidev ]   [ normal_x ]
  16++D419              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  17++D419              ;                         [ [x y z] . nosev ]   [ normal_z ]
  18++D419              ;
  19++D419              ;                         [ [x y z] . sidev + normal_x ]
  20++D419              ;                       = [ [x y z] . roofv + normal_y ]
  21++D419              ;                         [ [x y z] . nosev + normal_z ]
  22++D419              ;
  23++D419              ; so
  24++D419              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  25++D419              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  26++D419              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  27++D419              ;
  28++D419              ; where face is visible if visibility < 0
  29++D419              ;
  30++D419              ;   so we set XX15 to [x y z] . sidev
  31++D419              ;                     [x y z] . roofv
  32++D419              ;                     [x y z] . nosev
  33++D419              ;
  34++D419
  35++D419
  36++D419
  37++D419 3A 74 C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  38++D41C                                      IfAIsZeroGoto .ScaleDone            ;
  38++D41C A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  38++D41D CA 4A D4    >                        jp	z, .ScaleDone
  39++D420 2A 6D C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  40++D423 ED 5B 70 C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  41++D427 ED 4B 73 C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  42++D42B FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  43++D42D                                      ShiftHLRight1                       ; divide cam position by 2
  43++D42D CB 3C       >			   srl h
  43++D42F CB 1D       >			   rr  l
  44++D431                                      ShiftDERight1                       ;
  44++D431 CB 3A       >			   srl d
  44++D433 CB 1B       >			   rr  e
  45++D435                                      ShiftBCRight1                       ;
  45++D435 CB 38       >			   srl b
  45++D437 CB 19       >			   rr  c
  46++D439 78                                   ld      a,b                         ; loop if not scaled down
  47++D43A                                      IfANotZeroGoto .ScaleNormalLoop     ;
  47++D43A FE 00       >                        cp	0
  47++D43C C2 2B D4    >                        jp	nz,.ScaleNormalLoop
  48++D43F 22 6D C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  49++D442 ED 53 70 C0                          ld      (UBnkDrawCam0yLo),de        ;
  50++D446 ED 43 73 C0                          ld      (UBnkDrawCam0zLo),bc        ;
  51++D44A FD 7D        .ScaleDone:             ld      a,iyl
  52++D44C 32 9D 97                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  53++D44F C9                                   ret
  54++D450
  55++D450              ;;--BackFaceCull:
  56++D450              ;;--;debug:jp debug
  57++D450              ;;--; DEBUG  force for now
  58++D450              ;;--;                        ld     a,MaxVisibility                 ; max visibility                                               ;;;; default max visibility
  59++D450              ;;--;                        ld     (LastNormalVisible),a           ; XX4                                                          ;;;;
  60++D450              ;;--;
  61++D450              ;;--; DEBUG
  62++D450              ;;--                         ReturnIfMemisZero FaceCtX4Addr      ; get number of faces * 4      FaceCntX4 &  return if no faces
  63++D450              ;;--                       ; break
  64++D450              ;;--                        call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
  65++D450              ;;--                        call    ScaleXX16Matrix197               ;#02; Normalise XX16
  66++D450              ;;--                        call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
  67++D450              ;;--                        call    InverseXX16                      ;#11; Invert rotation matrix
  68++D450              ;;--
  69++D450              ;;--.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
  70++D450              ;;--                        ld      iyl,a                       ; iyl = scale factor
  71++D450              ;;--; By this point XX18 = scaled draw cam and iyl = scale factor
  72++D450              ;;--                        call    ScaleDrawcam
  73++D450              ;;--                        call    CopyDrawCamToScaled
  74++D450              ;;--.LL91:                  call    XX12EquNodeDotOrientation  ; xx12 = xx15 . XX16
  75++D450              ;;--                        call    CopyXX12ScaledToXX18        ; now xx18 = xx15.xx16
  76++D450              ;;--.PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
  77++D450              ;;--                        ld      (varV),hl
  78++D450              ;;--                        ld      a,(FaceCtX4Addr)                                        ; For each face
  79++D450              ;;--                        srl     a                                                       ;
  80++D450              ;;--                        srl     a                                                       ;
  81++D450              ;;--                        ld      b,a                                                     ;
  82++D450              ;;--                        xor     a
  83++D450              ;;--                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
  84++D450              ;;--ProcessNormalsLoop:     push    hl
  85++D450              ;;--                        push    bc
  86++D450              ;;--                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
  87++D450              ;;--                        and     $1F                                                     ;     if normal visibility range  < XX4
  88++D450              ;;--                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
  89++D450              ;;--.LL86:                  jp  .LL87 ; force testing of normals
  90++D450              ;;--                        jp      .FaceVisible
  91++D450              ;;--; This bit needs to be added to force face visible
  92++D450              ;;--.LL87:                  call    CopyFaceToXX12
  93++D450              ;;--                        ld      a,(XX17)
  94++D450              ;;--                        JumpIfALTNusng 4,.LL92
  95++D450              ;;--.LL143:                 call    CopyXX18toXX15
  96++D450              ;;--                        jp      .LL89
  97++D450              ;;--.Ovflw:                 ld      a,(XX18)
  98++D450              ;;--                        srl     a
  99++D450              ;;--                        ld      (XX18),a
 100++D450              ;;--                        ld      a,(XX18+6)
 101++D450              ;;--                        srl     a
 102++D450              ;;--                        ld      (XX18+6),a
 103++D450              ;;--                        ld      a,(XX18+3)
 104++D450              ;;--                        srl     a
 105++D450              ;;--                        ld      (XX18+3),a
 106++D450              ;;--                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 107++D450              ;;--.LL92:                   ld      b,a
 108++D450              ;;--                        ldCopyByte  XX12,   UBnkXScaled
 109++D450              ;;--                        ldCopyByte  XX12+2, UBnkYScaled
 110++D450              ;;--                        ldCopyByte  XX12+4, UBnkZScaled
 111++D450              ;;--.LL93                   dec     b
 112++D450              ;;--                        jp      m, .LL94
 113++D450              ;;--.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 114++D450              ;;--                        ShiftMem8Right1 UBnkYScaled
 115++D450              ;;--                        ShiftMem8Right1 UBnkZScaled
 116++D450              ;;--                        dec     b
 117++D450              ;;--                        jp      p,.LL93Loop
 118++D450              ;;--; Add normal to XX15
 119++D450              ;;--.LL94:                  ldCopyByte  UBnkZScaled,     varR
 120++D450              ;;--                        ldCopyByte  UBnkYScaled,     varS
 121++D450              ;;--                        ldCopyByte  UBnkDrawCam0zLo, varQ
 122++D450              ;;--                        ld      a,(XX18+8)
 123++D450              ;;--                        call    SAEquSRPlusAQ
 124++D450              ;;--                        jp      c,.Ovflw
 125++D450              ;;--                        ld      (UBnkZScaled),a
 126++D450              ;;--                        ldCopyByte  varS,            UBnkZScaledSign
 127++D450              ;;--                        ldCopyByte  UBnkXScaled,     varR
 128++D450              ;;--                        ldCopyByte  UBnkXScaledSign, varS
 129++D450              ;;--                        ldCopyByte  UBnkDrawCam0xLo, varQ
 130++D450              ;;--                        ld      a,(UBnkDrawCam0xSgn)
 131++D450              ;;--                        call    SAEquSRPlusAQ
 132++D450              ;;--                        jp      c,.Ovflw
 133++D450              ;;--                        ld      (UBnkXScaled),a
 134++D450              ;;--                        ldCopyByte  varS,            UBnkXScaledSign
 135++D450              ;;--                        ldCopyByte  UBnkYScaled,     varR
 136++D450              ;;--                        ldCopyByte  UBnkYScaledSign, varS
 137++D450              ;;--                        ld      a,(UBnkDrawCam0ySgn)
 138++D450              ;;--                        call    SAEquSRPlusAQ
 139++D450              ;;--                        jp      c,.Ovflw
 140++D450              ;;--                        ld      (UBnkYScaled),a
 141++D450              ;;--                        ldCopyByte   varS, UBnkYScaledSign
 142++D450              ;;--; calculate dot product:
 143++D450              ;;--.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 144++D450              ;;--                        ld      a,(UBnkXScaled)
 145++D450              ;;--                        call    AequAmulQdiv256
 146++D450              ;;--                        ld      (varT),a
 147++D450              ;;--                        ld      a,(UBnkXX12xSign)
 148++D450              ;;--                        ld      hl,UBnkXScaledSign
 149++D450              ;;--                        xor     (hl)
 150++D450              ;;--                        ld      (varS),a
 151++D450              ;;--                        ldCopyByte  UBnkXX12yLo, varQ
 152++D450              ;;--                        ld      a,(UBnkYScaled)
 153++D450              ;;--                        call    AequAmulQdiv256
 154++D450              ;;--                        ld      (varQ),a
 155++D450              ;;--                        ldCopyByte  varT,varR
 156++D450              ;;--                        ld      a,  (UBnkXX12ySign)
 157++D450              ;;--                        ld      hl, UBnkYScaledSign
 158++D450              ;;--                        xor     (hl)
 159++D450              ;;--                        call    SAEquSRPlusAQ
 160++D450              ;;--                        ld      (varT),a
 161++D450              ;;--                        ldCopyByte  UBnkXX12zLo, varQ
 162++D450              ;;--                        ld      a,  (UBnkZScaled)
 163++D450              ;;--                        call    AequAmulQdiv256
 164++D450              ;;--                        ld      (varQ),a
 165++D450              ;;--                        ldCopyByte  varT, varR
 166++D450              ;;--                        ld      a,  (UBnkZScaledSign)
 167++D450              ;;--                        ld      hl, UBnkXX12zSign
 168++D450              ;;--                        xor     (hl)
 169++D450              ;;--                        call    SAEquSRPlusAQ           ; now A = dot product
 170++D450              ;;--                        test    $80
 171++D450              ;;--                        jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 172++D450              ;;--.FaceNotVisible:         ld          a,(CurrentNormIdx)
 173++D450              ;;--                        call        SetFaceAHidden                                      ;           set face invisible
 174++D450              ;;--                        jp          ProcessNormalLoopEnd                                ;        end if
 175++D450              ;;--.FaceVisible:            ld          a,(CurrentNormIdx)
 176++D450              ;;--                        call        SetFaceAVisible
 177++D450              ;;--ProcessNormalLoopEnd:   ld          hl, CurrentNormIdx
 178++D450              ;;--                        inc         (hl)                    ; move index pointer up by one
 179++D450              ;;--                        pop         bc
 180++D450              ;;--                        pop         hl                      ; get normal data pointer back
 181++D450              ;;--                        ld          a,4
 182++D450              ;;--                        add         hl,a                    ; move to next normal entry
 183++D450              ;;--                        ld          (varV),hl               ; save as we need it again
 184++D450              ;;--                        dec         b
 185++D450              ;;--                        jp          nz,ProcessNormalsLoop
 186++D450              ;;--                        ret
 187++D450
 188++D450
 189++D450
 190++D450
 191++D450              ;;;;;                        call    CopyFaceToXX15                                          ;        Get Face data into XX12
 192++D450              ;;;;;                        ld      a,(UBnkXScaledSign)
 193++D450              ;;;;;                        call    XX12EquNodeDotOrientation
 194++D450              ;;;;;                        ld      a,(UBnkXX12zSign)
 195++D450              ;;;;;                        test    $80
 196++D450              ;;;;;                        jp      nz, FaceVisible
 197++D450              ;;;;;.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
 198++D450              ;;;;;                        ld      iyl,a                       ; iyl = scale factor
 199++D450              ;;;;;.ScaleNormal:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
 200++D450              ;;;;;                        IfAIsZeroGoto .ScaleDone            ;
 201++D450              ;;;;;                        ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
 202++D450              ;;;;;                        ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
 203++D450              ;;;;;                        ld      bc,(UBnkDrawCam0zLo)        ;
 204++D450              ;;;;;.ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
 205++D450              ;;;;;                        ShiftHLRight1                       ; divide cam position by 2
 206++D450              ;;;;;                        ShiftDERight1                       ;
 207++D450              ;;;;;                        ShiftBCRight1                       ;
 208++D450              ;;;;;                        ld      a,b                         ; loop if not scaled down
 209++D450              ;;;;;                        IfANotZeroGoto .ScaleNormalLoop     ;
 210++D450              ;;;;;                        ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
 211++D450              ;;;;;                        ld      (UBnkDrawCam0yLo),de        ;
 212++D450              ;;;;;                        ld      (UBnkDrawCam0zLo),bc        ;
 213++D450              ;;;;;; By this point XX18 = scaled draw cam and iyl = scale factor
 214++D450              ;;;;;.ScaleDone:             ld      a,iyl
 215++D450              ;;;;;                        ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
 216++D450              ;;;;;    call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
 217++D450              ;;;;;    call    ScaleXX16Matrix197               ;#02; Normalise XX16
 218++D450              ;;;;;;    call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
 219++D450              ;;;;;    call    InverseXX16                      ;#11; Invert rotation matrix
 220++D450              ;;;;;
 221++D450              ;;;;;
 222++D450              ;;;;;
 223++D450              ;;;;;                        call    CopyXX18toXX15              ; copy DrawCam to Xx15
 224++D450              ;;;;;                        call    XX12EquNodeDotOrientation   ; Xx12 = XX15 (face normal) dot rotation matrix
 225++D450              ;;;;;                        call    CopyXX12ScaledToXX18              ; now XX18 = dot product
 226++D450              ;;;;;.ProcessNormals:        ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 227++D450              ;;;;;                        ld      (varV),hl
 228++D450              ;;;;;                        ld      a,(FaceCtX4Addr)                                        ; For each face
 229++D450              ;;;;;                        srl     a                                                       ;
 230++D450              ;;;;;                        srl     a                                                       ;
 231++D450              ;;;;;                        ld      b,a                                                     ;
 232++D450              ;;;;;                        xor     a
 233++D450              ;;;;;                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 234++D450              ;;;;;.ProcessNormalsLoop:    push    hl
 235++D450              ;;;;;                        push    bc
 236++D450              ;;;;;                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
 237++D450              ;;;;;                        and     $1F                                                     ;     if normal visibility range  < XX4
 238++D450              ;;;;;                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
 239++D450              ;;;;;.CheckFaceVisibility:   call    CopyFaceToXX12              ; Get Face data into XX12
 240++D450              ;;;;;                        ld      a,(varXX17)                  ; if scale factor < 4 then skip next bit
 241++D450              ;;;;;                        JumpIfALTNusng 4,.LL92
 242++D450              ;;;;;.LargeScaleFactor:      call    CopyXX18toXX15
 243++D450              ;;;;;                        jp      .LL89
 244++D450              ;;;;;.Ovflw:                 ld      a,(XX18)
 245++D450              ;;;;;                        srl     a
 246++D450              ;;;;;                        ld      (XX18),a
 247++D450              ;;;;;                        ld      a,(XX18+6)
 248++D450              ;;;;;                        srl     a
 249++D450              ;;;;;                        ld      (XX18+6),a
 250++D450              ;;;;;                        ld      a,(XX18+3)
 251++D450              ;;;;;                        srl     a
 252++D450              ;;;;;                        ld      (XX18+3),a
 253++D450              ;;;;;                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 254++D450              ;;;;;.LL92:                  ld      b,a
 255++D450              ;;;;;                        ldCopyByte  XX12,   UBnkXScaled
 256++D450              ;;;;;                        ldCopyByte  XX12+2, UBnkYScaled
 257++D450              ;;;;;                        ldCopyByte  XX12+4, UBnkZScaled
 258++D450              ;;;;;.LL93                   dec     b
 259++D450              ;;;;;                        jp      m, .LL94
 260++D450              ;;;;;.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 261++D450              ;;;;;                        ShiftMem8Right1 UBnkYScaled
 262++D450              ;;;;;                        ShiftMem8Right1 UBnkZScaled
 263++D450              ;;;;;                        dec     b
 264++D450              ;;;;;                        jp      p,.LL93Loop
 265++D450              ;;;;;.LL94:                  ldCopyByte  UBnkZScaled,     varR
 266++D450              ;;;;;                        ldCopyByte  UBnkYScaled,     varS
 267++D450              ;;;;;                        ldCopyByte  UBnkDrawCam0zLo, varQ
 268++D450              ;;;;;                        ld      a,(XX18+8)
 269++D450              ;;;;;                        call    SAEquSRPlusAQ
 270++D450              ;;;;;                        jp      c,.Ovflw
 271++D450              ;;;;;                        ld      (UBnkZScaled),a
 272++D450              ;;;;;                        ldCopyByte  varS,            UBnkZScaledSign
 273++D450              ;;;;;                        ldCopyByte  UBnkXScaled,     varR
 274++D450              ;;;;;                        ldCopyByte  UBnkXScaledSign, varS
 275++D450              ;;;;;                        ldCopyByte  UBnkDrawCam0xLo, varQ
 276++D450              ;;;;;                        ld      a,(UBnkDrawCam0xSgn)
 277++D450              ;;;;;                        call    SAEquSRPlusAQ
 278++D450              ;;;;;                        jp      c,.Ovflw
 279++D450              ;;;;;                        ld      (UBnkXScaled),a
 280++D450              ;;;;;                        ldCopyByte  varS,            UBnkXScaledSign
 281++D450              ;;;;;                        ldCopyByte  UBnkYScaled,     varR
 282++D450              ;;;;;                        ldCopyByte  UBnkYScaledSign, varS
 283++D450              ;;;;;                        ld      a,(UBnkDrawCam0ySgn)
 284++D450              ;;;;;                        call    SAEquSRPlusAQ
 285++D450              ;;;;;                        jp      c,.Ovflw
 286++D450              ;;;;;                        ld      (UBnkYScaled),a
 287++D450              ;;;;;                        ldCopyByte   varS, UBnkYScaledSign
 288++D450              ;;;;;.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 289++D450              ;;;;;                        ld      a,(UBnkXScaled)
 290++D450              ;;;;;                        call    AequAmulQdiv256
 291++D450              ;;;;;                        ld      (varT),a
 292++D450              ;;;;;                        ld      a,(UBnkXX12xSign)
 293++D450              ;;;;;                        ld      hl,UBnkXScaledSign
 294++D450              ;;;;;                        xor     (hl)
 295++D450              ;;;;;                        ld      (varS),a
 296++D450              ;;;;;                        ldCopyByte  UBnkXX12yLo, varQ
 297++D450              ;;;;;                        ld      a,(UBnkYScaled)
 298++D450              ;;;;;                        call    AequAmulQdiv256
 299++D450              ;;;;;                        ld      (varQ),a
 300++D450              ;;;;;                        ldCopyByte  varT,varR
 301++D450              ;;;;;                        ld      a,  (UBnkXX12ySign)
 302++D450              ;;;;;                        ld      hl, UBnkYScaledSign
 303++D450              ;;;;;                        xor     (hl)
 304++D450              ;;;;;                        call    SAEquSRPlusAQ
 305++D450              ;;;;;                        ld      (varT),a
 306++D450              ;;;;;                        ldCopyByte  UBnkXX12zLo, varQ
 307++D450              ;;;;;                        ld      a,  (UBnkZScaled)
 308++D450              ;;;;;                        call    AequAmulQdiv256
 309++D450              ;;;;;                        ld      (varQ),a
 310++D450              ;;;;;                        ldCopyByte  varT, varR
 311++D450              ;;;;;                        ld      a,  (UBnkZScaledSign)
 312++D450              ;;;;;                        ld      hl, UBnkXX12zSign
 313++D450              ;;;;;                        xor     (hl)
 314++D450              ;;;;;                        call    SAEquSRPlusAQ           ; now A = dot product
 315++D450              ;;;;;                        test    $80
 316++D450              ;;;;;                        jr      nz,.FaceVisible
 317++D450              ;;;;;.FaceNotVisible:        ld      a,(CurrentNormIdx)
 318++D450              ;;;;;                        call    SetFaceAHidden                                      ;           set face invisible
 319++D450              ;;;;;                        jp      .ProcessNormalLoopEnd                                ;        end if
 320++D450              ;;;;;.FaceVisible:           ld      a,(CurrentNormIdx)
 321++D450              ;;;;;                        call    SetFaceAVisible
 322++D450              ;;;;;.ProcessNormalLoopEnd:   ld      hl, CurrentNormIdx
 323++D450              ;;;;;                        inc         (hl)                    ; move index pointer up by one
 324++D450              ;;;;;                        pop         bc
 325++D450              ;;;;;                        pop         hl                      ; get normal data pointer back
 326++D450              ;;;;;                        ld          a,4
 327++D450              ;;;;;                        add         hl,a                    ; move to next normal entry
 328++D450              ;;;;;                        ld          (varV),hl               ; save as we need it again
 329++D450              ;;;;;                        dec         b
 330++D450              ;;;;;                        jp          nz,.ProcessNormalsLoop
 331++D450              ;;;;;                        ret                                 ; If Y >= XX20 all normals' visibilities set, onto Transpose. return
 332++D450              ;;;;;
 333++D450 00           XX4Distance             DB      0
 334++D451
 335++D451
 336++D451
 337++D451 3A 14 C0     CheckDistance:          ld      a,(UBnKzsgn)                 ; Is the ship behind us
 338++D454 E6 80        .CheckBehind:           and     SignOnly8Bit                 ; .
 339++D456 20 3E                                jr      nz,.ShipNoDraw               ; .
 340++D458 2A 12 C0     .CheckViewPort:         ld      hl,(UBnKzlo)
 341++D45B 7C                                   ld      a,h
 342++D45C                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
 342++D45C FE C0       >                        cp     ShipMaxDistance
 342++D45E D2 96 D4    >                        jp		nc,.ShipNoDraw
 343++D461 ED 5B 0C C0  .CheckXAxis:            ld      de,(UBnKxlo)
 344++D465 CD 43 AB                             call    compare16HLDE
 345++D468 38 2C                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 346++D46A ED 5B 0F C0  .CheckYAxis:            ld      de,(UBnKylo)
 347++D46E CD 43 AB                             call    compare16HLDE
 348++D471 38 23                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 349++D473              .CalculateXX4:           ShiftHLRight1                       ; hl = z pos / 8
 349++D473 CB 3C       >			   srl h
 349++D475 CB 1D       >			   rr  l
 350++D477                                      ShiftHLRight1                       ; .
 350++D477 CB 3C       >			   srl h
 350++D479 CB 1D       >			   rr  l
 351++D47B                                      ShiftHLRight1                       ; .
 351++D47B CB 3C       >			   srl h
 351++D47D CB 1D       >			   rr  l
 352++D47F 7C                                   ld      a,h
 353++D480 CB 3F                                srl     a                           ; if a / 16 <> 0 then ship is a dot
 354++D482 CA 98 D4     .DrawAsDotCheck:        jp      z,.ShipIsADot
 355++D485                                      ; Check visbility distance
 356++D485 7D           .SetXX4Dist:            ld      a,l
 357++D486 1F                                   rra                                 ; l may have had bit 0 of h carried in
 358++D487 CB 3F                                srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
 359++D489 CB 3F                                srl     a
 360++D48B CB 3F                                srl     a
 361++D48D 32 50 D4                             ld      (XX4Distance),a             ; XX4 = "all faces" distance
 362++D490 AF                                   xor     a
 363++D491 32 92 C0                             ld      (UBnKDrawAsDot),a           ; set draw as dot to 0, i.e. false
 364++D494                                      ClearCarryFlag
 364++D494 B7          >                        or a
 365++D495 C9                                   ret
 366++D496              .ShipNoDraw:            SetCarryFlag                        ; ship is behind so do not draw, so we don't care abour draw as dot
 366++D496 37          >                        scf
 367++D497 C9                                   ret
 368++D498 CD 11 DC     .ShipIsADot:            call    ProcessDot                  ; use the same logic as process nodes to do 1 point
 369++D49B AF                                   xor     a
 370++D49C 32 92 C0                             ld      (UBnKDrawAsDot),a           ; set draw as dot to 0, i.e. false
 371++D49F                                      ClearCarryFlag
 371++D49F B7          >                        or a
 372++D4A0 C9                                   ret
 373++D4A1
 374++D4A1
 375++D4A1              ; TODO remove all teh processing of rotmat to load craft to camera as its already been done
 376++D4A1              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 376++D4A1 3A 10 C3    >                        ld   a,(FaceCtX4Addr)
 376++D4A4 A7          >                        and a
 376++D4A5 C8          >                        ret    z
 377++D4A6                                     ; break
 378++D4A6 CD EC CE                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 379++D4A9 CD 04 90                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 380++D4AC CD A2 D1                             call    LoadCraftToCamera           ; XX18 = camera
 381++D4AF                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 382++D4AF 3A 16 C3     .BackfaceLoop:          ld      a,(QAddr)                   ;
 383++D4B2 FD 6F                                ld      iyl,a                       ; iyl = scale factor
 384++D4B4              ; By this point XX18 = scaled draw cam and iyl = scale factor
 385++D4B4 CD 19 D4                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 386++D4B7 CD BB D1                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 387++D4BA CD 5B 8F     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 388++D4BD CD 33 D1                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 389++D4C0 21 F8 C8     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 390++D4C3 22 8A 96                             ld      (varV),hl
 391++D4C6 3A 10 C3                             ld      a,(FaceCtX4Addr)                                        ; For each face
 392++D4C9 CB 3F                                srl     a                                                       ;
 393++D4CB CB 3F                                srl     a                                                       ;
 394++D4CD 47                                   ld      b,a                                                     ;
 395++D4CE AF                                   xor     a
 396++D4CF 32 18 D4                             ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 397++D4D2 E5           .ProcessNormalsLoop:    push    hl
 398++D4D3 C5                                   push    bc
 399++D4D4 7E           .LL86:                  ld      a,(hl)                                                  ; Get Face sign and visibility distance byte
 400++D4D5 E6 1F                                and     $1F                                                     ; if normal visibility range  < XX4
 401++D4D7 E5                                   push    hl
 402++D4D8 21 50 D4                             ld      hl,XX4Distance
 403++D4DB BE                                   cp      (hl)
 404++D4DC E1                                   pop     hl
 405++D4DD DA 22 D6                             jp      c,.FaceVisible                       ; then we always draw
 406++D4E0              ; This bit needs to be added to force face visible
 407++D4E0 CD 9D D3     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 408++D4E3 3A 9D 97                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 409++D4E6 47                                   ld      b,a
 410++D4E7                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 410++D4E7 FE 04       >                        cp      4
 410++D4E9 DA 24 D5    >                        jp		c, .ScaleNormByXX17
 411++D4EC CD 7D D1     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 412++D4EF C3 B3 D5                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 413++D4F2 3A 6D C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 414++D4F5 CB 3F                                srl     a                           ; which is held in XX18
 415++D4F7 32 6D C0                             ld      (UBnkDrawCam0xLo),a         ; .
 416++D4FA 3A 73 C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 417++D4FD CB 3F                                srl     a                           ; .
 418++D4FF 32 73 C0                             ld      (UBnkDrawCam0zLo),a         ; .
 419++D502 3A 70 C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 420++D505 CB 3F                                srl     a                           ; .
 421++D507 32 70 C0                             ld      (UBnkDrawCam0yLo),a        ; .
 422++D50A 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 423++D50C                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 423++D50C 3A 79 C0    >                    ld      a,(UBnkXScaled)
 423++D50F CB 3F       >                    srl     a
 423++D511 32 79 C0    >                    ld      (UBnkXScaled),a
 424++D514                                      ShiftMem8Right1 UBnkYScaled         ;
 424++D514 3A 7B C0    >                    ld      a,(UBnkYScaled)
 424++D517 CB 3F       >                    srl     a
 424++D519 32 7B C0    >                    ld      (UBnkYScaled),a
 425++D51C                                      ShiftMem8Right1 UBnkZScaled         ;
 425++D51C 3A 7D C0    >                    ld      a,(UBnkZScaled)
 425++D51F CB 3F       >                    srl     a
 425++D521 32 7D C0    >                    ld      (UBnkZScaled),a
 426++D524              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 427++D524              .ScaleNormByXX17:       ;ld      b,a
 428++D524 CD 58 D1                             call    CopyXX12toXX15
 429++D527 05           .LL93                   dec     b
 430++D528 FA 47 D5                             jp      m, .ScaledNorm
 431++D52B              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 431++D52B 3A 79 C0    >                    ld      a,(UBnkXScaled)
 431++D52E CB 3F       >                    srl     a
 431++D530 32 79 C0    >                    ld      (UBnkXScaled),a
 432++D533                                      ShiftMem8Right1 UBnkYScaled        ;
 432++D533 3A 7B C0    >                    ld      a,(UBnkYScaled)
 432++D536 CB 3F       >                    srl     a
 432++D538 32 7B C0    >                    ld      (UBnkYScaled),a
 433++D53B                                      ShiftMem8Right1 UBnkZScaled        ;
 433++D53B 3A 7D C0    >                    ld      a,(UBnkZScaled)
 433++D53E CB 3F       >                    srl     a
 433++D540 32 7D C0    >                    ld      (UBnkZScaled),a
 434++D543 05                                   dec     b                          ;
 435++D544 F2 2B D5                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 436++D547              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 437++D547              ; Add normal to XX15
 438++D547              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 439++D547              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 440++D547              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 441++D547              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 442++D547              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 442++D547 3A 7D C0    >                        ld       a,(UBnkZScaled)
 442++D54A 32 97 97    >                        ld       (varR),a
 443++D54D                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 443++D54D 3A 84 C0    >                        ld       a,(UBnkXX12zSign)
 443++D550 32 98 97    >                        ld       (varS),a
 444++D553                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 444++D553 3A 73 C0    >                        ld       a,(UBnkDrawCam0zLo)
 444++D556 32 96 97    >                        ld       (varQ),a
 445++D559 3A 75 C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 446++D55C CD AA AE                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 447++D55F DA F2 D4                             jp      c,.Ovflw
 448++D562 32 7D C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 449++D565                                      ldCopyByte  varS, UBnkZScaledSign   ;
 449++D565 3A 98 97    >                        ld       a,(varS)
 449++D568 32 7E C0    >                        ld       (UBnkZScaledSign),a
 450++D56B                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 450++D56B 3A 79 C0    >                        ld       a,(UBnkXScaled)
 450++D56E 32 97 97    >                        ld       (varR),a
 451++D571                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 451++D571 3A 80 C0    >                        ld       a,(UBnkXX12xSign)
 451++D574 32 98 97    >                        ld       (varS),a
 452++D577                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 452++D577 3A 6D C0    >                        ld       a,(UBnkDrawCam0xLo)
 452++D57A 32 96 97    >                        ld       (varQ),a
 453++D57D 3A 6F C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 454++D580 CD AA AE                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 455++D583 DA F2 D4                             jp      c,.Ovflw
 456++D586 32 79 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 457++D589                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 457++D589 3A 98 97    >                        ld       a,(varS)
 457++D58C 32 7A C0    >                        ld       (UBnkXScaledSign),a
 458++D58F                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 458++D58F 3A 7B C0    >                        ld       a,(UBnkYScaled)
 458++D592 32 97 97    >                        ld       (varR),a
 459++D595                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 459++D595 3A 82 C0    >                        ld       a,(UBnkXX12ySign)
 459++D598 32 98 97    >                        ld       (varS),a
 460++D59B                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 460++D59B 3A 70 C0    >                        ld       a,(UBnkDrawCam0yLo)
 460++D59E 32 96 97    >                        ld       (varQ),a
 461++D5A1 3A 72 C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 462++D5A4 CD AA AE                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 463++D5A7 DA F2 D4                             jp      c,.Ovflw                    ; .
 464++D5AA 32 7B C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 465++D5AD                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 465++D5AD 3A 98 97    >                        ld       a,(varS)
 465++D5B0 32 7C C0    >                        ld       (UBnkYScaledSign),a
 466++D5B3              ; calculate dot product LL89
 467++D5B3              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 467++D5B3 3A 7F C0    >                        ld       a,(UBnkXX12xLo)
 467++D5B6 32 96 97    >                        ld       (varQ),a
 468++D5B9 3A 79 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 469++D5BC CD 16 AE                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 470++D5BF 32 B3 97                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 471++D5C2 3A 80 C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 472++D5C5 21 7A C0                             ld      hl,UBnkXScaledSign          ; .
 473++D5C8 AE                                   xor     (hl)                        ; .
 474++D5C9 32 98 97                             ld      (varS),a                    ; .
 475++D5CC                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 475++D5CC 3A 81 C0    >                        ld       a,(UBnkXX12yLo)
 475++D5CF 32 96 97    >                        ld       (varQ),a
 476++D5D2 3A 7B C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 477++D5D5 CD 16 AE                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 478++D5D8 32 96 97                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 479++D5DB                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 479++D5DB 3A B3 97    >                        ld       a,(varT)
 479++D5DE 32 97 97    >                        ld       (varR),a
 480++D5E1 3A 82 C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 481++D5E4 21 7C C0                             ld      hl, UBnkYScaledSign         ; .
 482++D5E7 AE                                   xor     (hl)                        ; .
 483++D5E8 CD AA AE                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 484++D5EB 32 B3 97                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 485++D5EE                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 485++D5EE 3A 83 C0    >                        ld       a,(UBnkXX12zLo)
 485++D5F1 32 96 97    >                        ld       (varQ),a
 486++D5F4 3A 7D C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 487++D5F7 CD 16 AE                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 488++D5FA 32 96 97                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 489++D5FD                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 489++D5FD 3A B3 97    >                        ld       a,(varT)
 489++D600 32 97 97    >                        ld       (varR),a
 490++D603 3A 7E C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 491++D606 21 84 C0                             ld      hl, UBnkXX12zSign           ; .
 492++D609 AE                                   xor     (hl)                        ; .
 493++D60A CD AA AE                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 494++D60D FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 495++D60F 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 496++D611 3A 98 97                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 497++D614 ED 27 80                             test    $80                         ; this should test S not A
 498++D617 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 499++D619 3A 18 D4     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 500++D61C CD 00 D0                             call        SetFaceAHidden                                      ;           set face invisible
 501++D61F C3 28 D6                             jp          .ProcessNormalLoopEnd                                ;        end if
 502++D622 3A 18 D4     .FaceVisible:            ld          a,(CurrentNormIdx)
 503++D625 CD F7 CF                             call        SetFaceAVisible
 504++D628 21 18 D4     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 505++D62B 34                                   inc         (hl)                    ; move index pointer up by one
 506++D62C C1                                   pop         bc
 507++D62D E1                                   pop         hl                      ; get normal data pointer back
 508++D62E 3E 04                                ld          a,4
 509++D630 ED 31                                add         hl,a                    ; move to next normal entry
 510++D632 22 8A 96                             ld          (varV),hl               ; save as we need it again
 511++D635 05                                   dec         b
 512++D636 C2 D2 D4                             jp          nz,.ProcessNormalsLoop
 513++D639 C9                                   ret
 514++D63A
# file closed: ././ModelRender/BackfaceCull.asm
 844+ D63A              ;--------------------------------------------------------------------------------------------------------
 845+ D63A              ; Process edges
 846+ D63A              ; .....................................................
 847+ D63A              TransposeNodeVal:   MACRO arg0?
 848+ D63A ~                    ldCopyByte  UBnK\0sgn,Ubnk\1PointSign           ; UBnkXSgn => XX15+2 x sign
 849+ D63A ~                    ld          bc,(UBnkXX12\0Lo)                   ; c = lo, b = sign   XX12XLoSign
 850+ D63A ~                    xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 851+ D63A ~                    jp          m,NodeNegative\1                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 852+ D63A ~            ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 853+ D63A ~            NodeXPositive\1
 853+ D63A ~
 854+ D63A ~                    ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 855+ D63A ~                    ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 856+ D63A ~                    ld          hl,(UBnK\0lo)                       ; hl = XX1 UBNKxLo
 857+ D63A ~                    ld          h,0                                 ; but we don;t want the sign
 858+ D63A ~                    add         hl,bc                               ; its a 16 bit add
 859+ D63A ~                    ld          (Ubnk\1Point),hl                    ; And written to XX15 0,1
 860+ D63A ~                    xor         a                                   ; we want to write 0 as sign bit (not in original code)
 861+ D63A ~                    ld          (UbnkXPointSign),a
 862+ D63A ~                    jp          FinishedThisNode\1
 863+ D63A ~            ; If we get here then _sign and vertv_ have different signs so do subtract
 864+ D63A ~            NodeNegative\1
 864+ D63A ~
 865+ D63A ~            LL52\1
 865+ D63A ~                                                              ;
 866+ D63A ~                    ld          hl,(UBnK\0lo)                       ; Coord
 867+ D63A ~                    ld          bc,(UBnkXX12\0Lo)                   ; XX12
 868+ D63A ~                    ld          b,0                                 ; XX12 lo byte only
 869+ D63A ~                    sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 870+ D63A ~                    jp          p,SetAndMop\1                       ; if result is positive skip to write back
 871+ D63A ~            NodeXNegSignChange\1
 871+ D63A ~
 872+ D63A ~            ; If we get here the result is 2'c compliment so we reverse it and flip sign
 873+ D63A ~                    call        negate16hl                          ; Convert back to positive and flip sign
 874+ D63A ~                    ld          a,(Ubnk\1PointSign)                 ; XX15+2
 875+ D63A ~                    xor         $80                                 ; Flip bit 7
 876+ D63A ~                    ld          (Ubnk\1PointSign),a                 ; XX15+2
 877+ D63A ~            SetAndMop\1
 877+ D63A ~
 878+ D63A ~                    ld          (UBnK\0lo),hl                       ; XX15+0
 879+ D63A ~            FinishedThisNode\1
 880+ D63A                                  ENDM
 881+ D63A
 882+ D63A              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
 883+ D63A
 884+ D63A              TransposeXX12NodeToXX15:
 885+ D63A                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
 885+ D63A 3A 0E C0    >                        ld       a,(UBnKxsgn)
 885+ D63D 32 7B C0    >                        ld       (UbnkXPointSign),a
 886+ D640 ED 4B 7F C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 887+ D644 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 888+ D645 FA 5B D6             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 889+ D648              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 890+ D648              NodeXPositiveX:
 891+ D648 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 892+ D649 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 893+ D64B 2A 0C C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
 894+ D64E 26 00                ld          h,0                                 ; but we don;t want the sign
 895+ D650 09                   add         hl,bc                               ; its a 16 bit add
 896+ D651 22 79 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
 897+ D654 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 898+ D655 32 7B C0             ld          (UbnkXPointSign),a
 899+ D658 C3 77 D6             jp          FinishedThisNodeX
 900+ D65B              ; If we get here then _sign and vertv_ have different signs so do subtract
 901+ D65B              NodeNegativeX:
 902+ D65B              LL52X:                                                 ;
 903+ D65B 2A 0C C0             ld          hl,(UBnKxlo)                       ; Coord
 904+ D65E ED 4B 7F C0          ld          bc,(UBnkXX12xLo)                   ; XX12
 905+ D662 06 00                ld          b,0                                 ; XX12 lo byte only
 906+ D664 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 907+ D666 F2 74 D6             jp          p,SetAndMopX                       ; if result is positive skip to write back
 908+ D669              NodeXNegSignChangeX:
 909+ D669              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 910+ D669 CD 59 AB             call        negate16hl                          ; Convert back to positive and flip sign
 911+ D66C 3A 7B C0             ld          a,(UbnkXPointSign)                 ; XX15+2
 912+ D66F EE 80                xor         $80                                 ; Flip bit 7
 913+ D671 32 7B C0             ld          (UbnkXPointSign),a                 ; XX15+2
 914+ D674              SetAndMopX:
 915+ D674 22 0C C0             ld          (UBnKxlo),hl                       ; XX15+0
 916+ D677              FinishedThisNodeX:
 917+ D677
 918+ D677              LL53:
 919+ D677
 920+ D677                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
 920+ D677 3A 11 C0    >                        ld       a,(UBnKysgn)
 920+ D67A 32 7E C0    >                        ld       (UbnkYPointSign),a
 921+ D67D ED 4B 81 C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
 922+ D681 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 923+ D682 FA 98 D6             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 924+ D685              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 925+ D685              NodeXPositiveY:
 926+ D685 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 927+ D686 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 928+ D688 2A 0F C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
 929+ D68B 26 00                ld          h,0                                 ; but we don;t want the sign
 930+ D68D 09                   add         hl,bc                               ; its a 16 bit add
 931+ D68E 22 7C C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
 932+ D691 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 933+ D692 32 7B C0             ld          (UbnkXPointSign),a
 934+ D695 C3 B4 D6             jp          FinishedThisNodeY
 935+ D698              ; If we get here then _sign and vertv_ have different signs so do subtract
 936+ D698              NodeNegativeY:
 937+ D698              LL52Y:                                                 ;
 938+ D698 2A 0F C0             ld          hl,(UBnKylo)                       ; Coord
 939+ D69B ED 4B 81 C0          ld          bc,(UBnkXX12yLo)                   ; XX12
 940+ D69F 06 00                ld          b,0                                 ; XX12 lo byte only
 941+ D6A1 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 942+ D6A3 F2 B1 D6             jp          p,SetAndMopY                       ; if result is positive skip to write back
 943+ D6A6              NodeXNegSignChangeY:
 944+ D6A6              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 945+ D6A6 CD 59 AB             call        negate16hl                          ; Convert back to positive and flip sign
 946+ D6A9 3A 7E C0             ld          a,(UbnkYPointSign)                 ; XX15+2
 947+ D6AC EE 80                xor         $80                                 ; Flip bit 7
 948+ D6AE 32 7E C0             ld          (UbnkYPointSign),a                 ; XX15+2
 949+ D6B1              SetAndMopY:
 950+ D6B1 22 0F C0             ld          (UBnKylo),hl                       ; XX15+0
 951+ D6B4              FinishedThisNodeY:
 952+ D6B4
 953+ D6B4
 954+ D6B4              TransposeZ:
 955+ D6B4              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
 956+ D6B4 3A 84 C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
 957+ D6B7                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
 957+ D6B7 CB 7F       >                        bit 	7,a
 957+ D6B9 C2 CD D6    >                        jp      nz,NegativeNodeZ
 958+ D6BC 3A 83 C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
 959+ D6BF 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
 960+ D6C2 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
 961+ D6C4 7D                   ld          a,l
 962+ D6C5 32 B3 97             ld          (varT),a                            ;                                                                           ;;;
 963+ D6C8 7C                   ld          a,h
 964+ D6C9 32 95 97             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
 965+ D6CC C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
 966+ D6CD              ; Doing additions and scalings for each visible node around here                                                                    ;;;
 967+ D6CD              NegativeNodeZ:
 968+ D6CD              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
 969+ D6CD 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
 970+ D6D0 ED 4B 83 C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
 971+ D6D4 06 00                ld          b,0                                 ; upper byte will be garbage
 972+ D6D6                      ClearCarryFlag
 972+ D6D6 B7          >                        or a
 973+ D6D7 ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
 974+ D6D9 7D                   ld          a,l
 975+ D6DA 32 B3 97             ld          (varT),a                            ; t = result low
 976+ D6DD 7C                   ld          a,h
 977+ D6DE 32 95 97             ld          (varU),a                            ; u = result high
 978+ D6E1 E2 EE D6             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
 979+ D6E4              LL56Overflow:
 980+ D6E4 FE 00                cp          0                                   ; is varU 0?
 981+ D6E6 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
 982+ D6E8 3A B3 97             ld          a,(varT)                            ; T \ restore z lo
 983+ D6EB                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
 983+ D6EB FE 04       >                        cp    4
 983+ D6ED D0          >                        ret	 nc
 984+ D6EE              MakeNodeClose:
 985+ D6EE              LL140:                                                  ; else make node close
 986+ D6EE AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
 987+ D6EF 32 95 97             ld          (varU),a                            ; U
 988+ D6F2 3E 04                ld          a,4                                 ; lo
 989+ D6F4 32 B3 97             ld          (varT),a                            ; T
 990+ D6F7 C9                   ret
 991+ D6F8              ;--LL49-------------------------------------------------------------------------------------------------------------------------
 992+ D6F8              ProcessVisibleNode:
 993+ D6F8              RotateNode:                                                                                                                         ;;;
 994+ D6F8 CD 02 D1             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
 995+ D6FB              LL52LL53LL54LL55
 996+ D6FB              TransposeNode:
 997+ D6FB CD 3A D6             call        TransposeXX12NodeToXX15
 998+ D6FE
 999+ D6FE              ; ......................................................                                                         ;;;
1000+ D6FE              NodeAdditionsDone:
1001+ D6FE              Scale16BitTo8Bit:
1002+ D6FE              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
1003+ D6FE 3A 95 97             ld          a,(varU)                            ; U \ z hi
1004+ D701 21 7A C0             ld          hl,UbnkXPointHi
1005+ D704 B6                   or          (hl)                                ; XX15+1    \ x hi
1006+ D705 21 7D C0             ld          hl,UbnkYPointHi
1007+ D708 B6                   or          (hl)                                ; XX15+4    \ y hi
1008+ D709              AreXYZHiAllZero:
1009+ D709 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
1010+ D70B              DivideXYZBy2:
1011+ D70B                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
1011+ D70B 2A 79 C0    >                    ld    hl,(UbnkXPoint)
1011+ D70E CB 3C       >                    srl   h
1011+ D710 CB 1D       >                    rr    l
1011+ D712 22 79 C0    >                    ld    (UbnkXPoint),hl
1012+ D715                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
1012+ D715 2A 7C C0    >                    ld    hl,(UbnkYPoint)
1012+ D718 CB 3C       >                    srl   h
1012+ D71A CB 1D       >                    rr    l
1012+ D71C 22 7C C0    >                    ld    (UbnkYPoint),hl
1013+ D71F 3A 95 97             ld          a,(varU)                            ; U \ z hi
1014+ D722 67                   ld          h,a
1015+ D723 3A B3 97             ld          a,(varT)                            ; T \ z lo
1016+ D726 6F                   ld          l,a
1017+ D727                      ShiftHLRight1
1017+ D727 CB 3C       >			   srl h
1017+ D729 CB 1D       >			   rr  l
1018+ D72B 7C                   ld          a,h
1019+ D72C 32 95 97             ld          (varU),a
1020+ D72F 7D                   ld          a,l
1021+ D730 32 B3 97             ld          (varT),a                            ; T \ z lo
1022+ D733 C3 FE D6             jp          Scale16BitTo8Bit                    ; loop U
1023+ D736              NodeScalingDone:
1024+ D736              LL60:                                                   ; hi U rolled to 0, exited loop above.
1025+ D736              ProjectNodeToScreen:
1026+ D736                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
1026+ D736 3A B3 97    >                        ld       a,(varT)
1026+ D739 32 96 97    >                        ld       (varQ),a
1027+ D73C 3A 79 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
1028+ D73F 21 96 97             ld          hl,varQ
1029+ D742 BE                   cp          (hl)                                ; Q
1030+ D743                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
1030+ D743 DA 4C D7    >                        jp		c,DoSmallAngle
1031+ D746 CD B1 AF             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
1032+ D749 C3 54 D7             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
1033+ D74C              DoSmallAngle:                                           ; small x angle
1034+ D74C              LL69:
1035+ D74C              ; TODO check if we need to retain BC as this trashes it
1036+ D74C              ;Input: BC = Dividend, DE = Divisor, HL = 0
1037+ D74C              ;Output: BC = Quotient, HL = Remainder
1038+ D74C 47                   ld      b,a
1039+ D74D CD A2 A9             call    DIV16UNDOC
1040+ D750 79                   ld      a,c
1041+ D751 32 97 97             ld      (varR),a
1042+ D754               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1043+ D754              SkipSmallAngle:
1044+ D754              ScaleX:
1045+ D754              LL65:                                                   ; both continue for scaling based on z
1046+ D754 3A 7B C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
1047+ D757                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1047+ D757 CB 7F       >                        bit 	7,a
1047+ D759 C2 6C D7    >                        jp      nz,NegativeXPoint
1048+ D75C              ; ......................................................
1049+ D75C              PositiveXPoint:
1050+ D75C 3A 97 97             ld          a,(varR)
1051+ D75F 6F                   ld          l,a
1052+ D760 3A 95 97             ld          a,(varU)
1053+ D763 67                   ld          h,a
1054+ D764 3E 80                ld          a,ScreenCenterX
1055+ D766 ED 31                add         hl,a
1056+ D768 EB                   ex          de,hl
1057+ D769 C3 7C D7             jp          StoreXPoint
1058+ D76C              NegativeXPoint:
1059+ D76C              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1060+ D76C 3A 97 97             ld          a,(varR)
1061+ D76F 6F                   ld          l,a
1062+ D770 3A 95 97             ld          a,(varU)
1063+ D773 67                   ld          h,a
1064+ D774 0E 80                ld          c,ScreenCenterX
1065+ D776 06 00                ld          b,0
1066+ D778                      ClearCarryFlag
1066+ D778 B7          >                        or a
1067+ D779 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1068+ D77B EB                   ex          de,hl
1069+ D77C              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1070+ D77C FD 73 00             ld          (iy+0),e                            ; Update X Point
1071+ D77F FD 72 01             ld          (iy+1),d                            ; Update X Point
1072+ D782 FD 23                inc         iy
1073+ D784 FD 23                inc         iy
1074+ D786              ; ......................................................
1075+ D786              LL66:
1076+ D786              ProcessYPoint:
1077+ D786 AF                   xor         a                                   ; y hi = 0
1078+ D787 32 95 97             ld          (varU),a                            ; U
1079+ D78A                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1079+ D78A 3A B3 97    >                        ld       a,(varT)
1079+ D78D 32 96 97    >                        ld       (varQ),a
1080+ D790 3A 7C C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1081+ D793 21 96 97             ld          hl,varQ
1082+ D796 BE                   cp          (hl)                                ; Q
1083+ D797                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1083+ D797 DA A0 D7    >                        jp		c,SmallYHop
1084+ D79A              SmallYPoint:
1085+ D79A CD B1 AF             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1086+ D79D C3 A3 D7             jp          SkipYScale                          ; LL68 hop over small y yangle
1087+ D7A0              SmallYHop:
1088+ D7A0              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1089+ D7A0 CD 8E AF             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1090+ D7A3              SkipYScale:
1091+ D7A3              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1092+ D7A3 3A 7E C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1093+ D7A6 CB 7F                bit         7,a
1094+ D7A8 C2 BB D7             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1095+ D7AB              PositiveYPoint:
1096+ D7AB 3A 97 97             ld          a,(varR)
1097+ D7AE 6F                   ld          l,a
1098+ D7AF 3A 95 97             ld          a,(varU)
1099+ D7B2 67                   ld          h,a
1100+ D7B3 3E 60                ld          a,ScreenHeightHalf
1101+ D7B5 ED 31                add         hl,a
1102+ D7B7 EB                   ex          de,hl
1103+ D7B8 C3 CB D7             jp          LL50
1104+ D7BB              NegativeYPoint:
1105+ D7BB              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1106+ D7BB 3A 97 97             ld          a,(varR)
1107+ D7BE 6F                   ld          l,a
1108+ D7BF 3A 95 97             ld          a,(varU)
1109+ D7C2 67                   ld          h,a
1110+ D7C3 0E 60                ld          c,ScreenHeightHalf
1111+ D7C5 06 00                ld          b,0
1112+ D7C7                      ClearCarryFlag
1112+ D7C7 B7          >                        or a
1113+ D7C8 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1114+ D7CA EB                   ex          de,hl
1115+ D7CB              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1116+ D7CB FD 73 00             ld          (iy+0),e                            ; Update X Point
1117+ D7CE FD 72 01             ld          (iy+1),d                            ; Update X Point
1118+ D7D1 FD 23                inc         iy
1119+ D7D3 FD 23                inc         iy
1120+ D7D5 C9                   ret
1121+ D7D6              ;--------------------------------------------------------------------------------------------------------
1122+ D7D6              ;;;     Byte 0 = X magnitide with origin at middle of ship
1123+ D7D6              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1124+ D7D6              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1125+ D7D6              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1126+ D7D6              CopyNodeToXX15:
1127+ D7D6                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1127+ D7D6 7E          >                        ld       a,(hl)
1127+ D7D7 32 79 C0    >                        ld       (UBnkXScaled),a
1128+ D7DA 23                   inc         hl
1129+ D7DB                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1129+ D7DB 7E          >                        ld       a,(hl)
1129+ D7DC 32 7B C0    >                        ld       (UBnkYScaled),a
1130+ D7DF 23                   inc         hl
1131+ D7E0                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1131+ D7E0 7E          >                        ld       a,(hl)
1131+ D7E1 32 7D C0    >                        ld       (UBnkZScaled),a
1132+ D7E4 23                   inc         hl
1133+ D7E5              PopulateXX15SignBits:
1134+ D7E5              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1135+ D7E5 7E                   ld          a,(hl)
1136+ D7E6 4F                   ld          c,a                                 ; copy sign and visibility to c
1137+ D7E7 47                   ld          b,a
1138+ D7E8 E6 80                and         $80                                 ; keep high 3 bits
1139+ D7EA 32 7A C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1140+ D7ED 78                   ld          a,b
1141+ D7EE E6 40                and         $40
1142+ D7F0 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1143+ D7F2 32 7C C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1144+ D7F5 78                   ld          a,b
1145+ D7F6 E6 20                and         $20
1146+ D7F8 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1147+ D7FA CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1148+ D7FC 32 7E C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1149+ D7FF 79                   ld          a,c                                 ; returns a with visibility sign byte
1150+ D800 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1151+ D802 32 B3 97             ld          (varT),a                            ; and store in varT as its needed later
1152+ D805 C9                   ret
1153+ D806
1154+ D806              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1155+ D806              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1156+ D806              ;..............................................................................................................................
1157+ D806              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1158+ D806              LL48GetScale:
1159+ D806 3A 7A 96             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1160+ D809 5F                   ld          e,a
1161+ D80A CD D6 D7             call        CopyNodeToXX15
1162+ D80D              LL48GetVertices:
1163+ D80D              LL48GetVertSignAndVisDist:
1164+ D80D                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1164+ D80D BB          >                        cp      e
1164+ D80E DA 4F D8    >                        jp		c, NodeIsNotVisible
1165+ D811              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1166+ D811                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1166+ D811 23          >                    inc         hl                                  ; vertex byte#1
1166+ D812 7E          >                    ld          a,(hl)                              ;
1166+ D813 32 85 96    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1167+ D816 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1168+ D817 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1169+ D819 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1170+ D81A                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1170+ D81A 21 A6 C0    >                    ld          hl,UbnkFaceVisArray
1170+ D81D ED 31       >                    add         hl,a
1170+ D81F 7E          >                    ld          a,(hl)
1171+ D820 E1                   pop         hl                                  ;                                                                           ;;;
1172+ D821                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1172+ D821 FE 00       >                        cp	0
1172+ D823 C2 55 D8    >                        jp	nz,NodeIsVisible
1173+ D826              CheckFace2:                                                                                                                         ;;;
1174+ D826 7A                   ld          a,d                                                                                                             ;;;
1175+ D827 ED 23                swapnib                                                                                                                     ;;;
1176+ D829 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1177+ D82B                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1177+ D82B FE 00       >                        cp	0
1177+ D82D C2 55 D8    >                        jp	nz,NodeIsVisible
1178+ D830              CheckFace3:                                                                                                                         ;;;
1179+ D830                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1179+ D830 23          >                    inc         hl                                  ; vertex byte#1
1179+ D831 7E          >                    ld          a,(hl)                              ;
1179+ D832 32 85 96    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1180+ D835 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1181+ D836 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1182+ D838 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1183+ D839                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1183+ D839 21 A6 C0    >                    ld          hl,UbnkFaceVisArray
1183+ D83C ED 31       >                    add         hl,a
1183+ D83E 7E          >                    ld          a,(hl)
1184+ D83F E1                   pop         hl                                  ;                                                                           ;;;
1185+ D840                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1185+ D840 FE 00       >                        cp	0
1185+ D842 C2 55 D8    >                        jp	nz,NodeIsVisible
1186+ D845              CheckFace4:                                                                                                                         ;;;
1187+ D845 7A                   ld          a,d                                                                                                             ;;;
1188+ D846 ED 23                swapnib                                                                                                                     ;;;
1189+ D848 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1190+ D84A                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1190+ D84A FE 00       >                        cp	0
1190+ D84C C2 55 D8    >                        jp	nz,NodeIsVisible
1191+ D84F              NodeIsNotVisible:                                                                                                                   ;;;
1192+ D84F 01 04 00             ld          bc,4
1193+ D852 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1194+ D854                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1195+ D854 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1196+ D855              NodeIsVisible:
1197+ D855              LL49:
1198+ D855 CD F8 D6             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1199+ D858 C9                   ret
1200+ D859
1201+ D859
1202+ D859              ProjectNodeToEye:
1203+ D859 ED 4B 7D C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1204+ D85D 79           	ld			a,c                                 ;  so no need for a negative check
1205+ D85E 32 96 97     	ld			(varQ),a		                    ; VarQ = z
1206+ D861 3A 79 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1207+ D864 CD 8B A9     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1208+ D867 3A 7A C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1209+ D86A                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1209+ D86A CB 7F       >                        bit 	7,a
1209+ D86C C2 77 D8    >                        jp      nz,EyeNegativeXPoint
1210+ D86F              EyePositiveXPoint:									; x was positive result
1211+ D86F 2E 80            ld          l,ScreenCenterX						;
1212+ D871 26 00            ld          h,0
1213+ D873 09               add         hl,bc								; hl = Screen Centre + X
1214+ D874 C3 7E D8         jp          EyeStoreXPoint
1215+ D877              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1216+ D877 2E 80            ld          l,ScreenCenterX
1217+ D879 26 00            ld          h,0
1218+ D87B                  ClearCarryFlag
1218+ D87B B7          >                        or a
1219+ D87C ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1220+ D87E              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1221+ D87E EB               ex          de,hl
1222+ D87F FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1223+ D882 FD 72 01         ld          (iy+1),d                            ; Update X Point
1224+ D885              EyeProcessYPoint:
1225+ D885 ED 4B 7D C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1226+ D889 79           	ld			a,c
1227+ D88A 32 96 97     	ld			(varQ),a
1228+ D88D 3A 7B C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1229+ D890 CD 8B A9     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1230+ D893 3A 7C C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1231+ D896                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1231+ D896 CB 7F       >                        bit 	7,a
1231+ D898 C2 A3 D8    >                        jp      nz,EyeNegativeYPoint
1232+ D89B              EyePositiveYPoint:									; Y is positive so above the centre line
1233+ D89B 2E 60            ld          l,ScreenCenterY
1234+ D89D                  ClearCarryFlag
1234+ D89D B7          >                        or a
1235+ D89E ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1236+ D8A0 C3 A8 D8         jp          EyeStoreYPoint
1237+ D8A3              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1238+ D8A3 2E 60            ld          l,ScreenCenterY
1239+ D8A5 26 00            ld          h,0
1240+ D8A7 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1241+ D8A8              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1242+ D8A8 EB               ex          de,hl
1243+ D8A9 FD 73 02         ld          (iy+2),e                            ; Update Y Point
1244+ D8AC FD 72 03         ld          (iy+3),d                            ; Update Y Point
1245+ D8AF C9               ret
1246+ D8B0
1247+ D8B0
1248+ D8B0
1249+ D8B0              ; Pitch and roll are 2 phases
1250+ D8B0              ; 1 - we apply our pitch and roll to the ship position
1251+ D8B0              ;       x -> x + alpha * (y - alpha * x)
1252+ D8B0              ;       y -> y - alpha * x - beta * z
1253+ D8B0              ;       z -> z + beta * (y - alpha * x - beta * z)
1254+ D8B0              ; which can be simplified as:
1255+ D8B0              ;       1. K2 = y - alpha * x
1256+ D8B0              ;       2. z = z + beta * K2
1257+ D8B0              ;       3. y = K2 - beta * z
1258+ D8B0              ;       4. x = x + alpha * y
1259+ D8B0              ; 2 - we apply our patch and roll to the ship orientation
1260+ D8B0              ;      Roll calculations:
1261+ D8B0              ;
1262+ D8B0              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1263+ D8B0              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1264+ D8B0              ;      Pitch calculations:
1265+ D8B0              ;
1266+ D8B0              ;        nosev_y = nosev_y - beta * nosev_z_hi
1267+ D8B0              ;        nosev_z = nosev_z + beta * nosev_y_hi
1268+ D8B0
1269+ D8B0
1270+ D8B0              ; ---------------------------------------------------------------------------------------------------------------------------------
1271+ D8B0                          INCLUDE "./Universe/Ships/ApplyMyRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyMyRollAndPitch.asm
   1++D8B0
   2++D8B0              ; Full version
   3++D8B0              ; 1. K2 = y - alpha * x
   4++D8B0              ; 2. z = z + beta * K2
   5++D8B0              ; 3. y = K2 - beta * z
   6++D8B0              ; 4. x = x + alpha * y
   7++D8B0
   8++D8B0
   9++D8B0              ApplyMyRollToNosev:     ApplyMyRollToVector ALPHA, UBnkrotmatNosevX, UBnkrotmatNosevY
   9++D8B0             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
   9++D8B0 3A A2 96    >                        ld       a,(ALPHA)
   9++D8B3 32 96 97    >                        ld       (varQ),a
   9++D8B6             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
   9++D8B6 2A 23 C0    >                        ld       hl,(UBnkrotmatNosevY)
   9++D8B9 22 97 97    >                        ld       (varR),hl
   9++D8BC             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
   9++D8BC 3A 21 C0    >                        ld       a,(UBnkrotmatNosevX)
   9++D8BF 32 85 96    >                        ld       (varP),a
   9++D8C2 3A 22 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
   9++D8C5 EE 80       >                        xor $80                             ;
   9++D8C7 CD A2 A7    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
   9++D8CA ED 53 23 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
   9++D8CE             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
   9++D8CE 2A 21 C0    >                        ld       hl,(UBnkrotmatNosevX)
   9++D8D1 22 97 97    >                        ld       (varR),hl
   9++D8D4 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
   9++D8D7 CD A2 A7    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
   9++D8DA ED 53 21 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  10++D8DE C9                                   ret
  11++D8DF              ApplyMyRollToSidev:     ApplyMyRollToVector ALPHA, UBnkrotmatSidevX, UBnkrotmatSidevY
  11++D8DF             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  11++D8DF 3A A2 96    >                        ld       a,(ALPHA)
  11++D8E2 32 96 97    >                        ld       (varQ),a
  11++D8E5             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  11++D8E5 2A 17 C0    >                        ld       hl,(UBnkrotmatSidevY)
  11++D8E8 22 97 97    >                        ld       (varR),hl
  11++D8EB             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
  11++D8EB 3A 15 C0    >                        ld       a,(UBnkrotmatSidevX)
  11++D8EE 32 85 96    >                        ld       (varP),a
  11++D8F1 3A 16 C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
  11++D8F4 EE 80       >                        xor $80                             ;
  11++D8F6 CD A2 A7    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  11++D8F9 ED 53 17 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  11++D8FD             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
  11++D8FD 2A 15 C0    >                        ld       hl,(UBnkrotmatSidevX)
  11++D900 22 97 97    >                        ld       (varR),hl
  11++D903 3A 18 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  11++D906 CD A2 A7    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  11++D909 ED 53 15 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  12++D90D C9                                   ret
  13++D90E              ApplyMyRollToRoofv:     ApplyMyRollToVector ALPHA, UBnkrotmatRoofvX, UBnkrotmatRoofvY
  13++D90E             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  13++D90E 3A A2 96    >                        ld       a,(ALPHA)
  13++D911 32 96 97    >                        ld       (varQ),a
  13++D914             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  13++D914 2A 1D C0    >                        ld       hl,(UBnkrotmatRoofvY)
  13++D917 22 97 97    >                        ld       (varR),hl
  13++D91A             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
  13++D91A 3A 1B C0    >                        ld       a,(UBnkrotmatRoofvX)
  13++D91D 32 85 96    >                        ld       (varP),a
  13++D920 3A 1C C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
  13++D923 EE 80       >                        xor $80                             ;
  13++D925 CD A2 A7    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  13++D928 ED 53 1D C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  13++D92C             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
  13++D92C 2A 1B C0    >                        ld       hl,(UBnkrotmatRoofvX)
  13++D92F 22 97 97    >                        ld       (varR),hl
  13++D932 3A 1E C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  13++D935 CD A2 A7    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  13++D938 ED 53 1B C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  14++D93C C9                                   ret
  15++D93D
  16++D93D              ApplyMyPitchToNosev:    ApplyMyRollToVector BETA, UBnkrotmatNosevZ, UBnkrotmatNosevY
  16++D93D             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  16++D93D 3A 91 96    >                        ld       a,(BETA)
  16++D940 32 96 97    >                        ld       (varQ),a
  16++D943             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
  16++D943 2A 23 C0    >                        ld       hl,(UBnkrotmatNosevY)
  16++D946 22 97 97    >                        ld       (varR),hl
  16++D949             >                        ldCopyByte  UBnkrotmatNosevZ, varP           ; set P to nosevX lo (may be redundant)
  16++D949 3A 25 C0    >                        ld       a,(UBnkrotmatNosevZ)
  16++D94C 32 85 96    >                        ld       (varP),a
  16++D94F 3A 26 C0    >                        ld a,(UBnkrotmatNosevZ+1)                    ; Set A = -nosev_x_hi
  16++D952 EE 80       >                        xor $80                             ;
  16++D954 CD A2 A7    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  16++D957 ED 53 23 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  16++D95B             >                        ldCopy2Byte UBnkrotmatNosevZ, varR           ; Set (S R) = nosev_x
  16++D95B 2A 25 C0    >                        ld       hl,(UBnkrotmatNosevZ)
  16++D95E 22 97 97    >                        ld       (varR),hl
  16++D961 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
  16++D964 CD A2 A7    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  16++D967 ED 53 25 C0 >                        ld  (UBnkrotmatNosevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  17++D96B C9                                   ret
  18++D96C              ApplyMyPitchToSidev:    ApplyMyRollToVector BETA, UBnkrotmatSidevZ, UBnkrotmatSidevY
  18++D96C             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  18++D96C 3A 91 96    >                        ld       a,(BETA)
  18++D96F 32 96 97    >                        ld       (varQ),a
  18++D972             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  18++D972 2A 17 C0    >                        ld       hl,(UBnkrotmatSidevY)
  18++D975 22 97 97    >                        ld       (varR),hl
  18++D978             >                        ldCopyByte  UBnkrotmatSidevZ, varP           ; set P to nosevX lo (may be redundant)
  18++D978 3A 19 C0    >                        ld       a,(UBnkrotmatSidevZ)
  18++D97B 32 85 96    >                        ld       (varP),a
  18++D97E 3A 1A C0    >                        ld a,(UBnkrotmatSidevZ+1)                    ; Set A = -nosev_x_hi
  18++D981 EE 80       >                        xor $80                             ;
  18++D983 CD A2 A7    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  18++D986 ED 53 17 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  18++D98A             >                        ldCopy2Byte UBnkrotmatSidevZ, varR           ; Set (S R) = nosev_x
  18++D98A 2A 19 C0    >                        ld       hl,(UBnkrotmatSidevZ)
  18++D98D 22 97 97    >                        ld       (varR),hl
  18++D990 3A 18 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  18++D993 CD A2 A7    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  18++D996 ED 53 19 C0 >                        ld  (UBnkrotmatSidevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  19++D99A C9                                   ret
  20++D99B              ApplyMyPitchToRoofv:    ApplyMyRollToVector BETA, UBnkrotmatRoofvZ, UBnkrotmatRoofvY
  20++D99B             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  20++D99B 3A 91 96    >                        ld       a,(BETA)
  20++D99E 32 96 97    >                        ld       (varQ),a
  20++D9A1             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  20++D9A1 2A 1D C0    >                        ld       hl,(UBnkrotmatRoofvY)
  20++D9A4 22 97 97    >                        ld       (varR),hl
  20++D9A7             >                        ldCopyByte  UBnkrotmatRoofvZ, varP           ; set P to nosevX lo (may be redundant)
  20++D9A7 3A 1F C0    >                        ld       a,(UBnkrotmatRoofvZ)
  20++D9AA 32 85 96    >                        ld       (varP),a
  20++D9AD 3A 20 C0    >                        ld a,(UBnkrotmatRoofvZ+1)                    ; Set A = -nosev_x_hi
  20++D9B0 EE 80       >                        xor $80                             ;
  20++D9B2 CD A2 A7    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  20++D9B5 ED 53 1D C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  20++D9B9             >                        ldCopy2Byte UBnkrotmatRoofvZ, varR           ; Set (S R) = nosev_x
  20++D9B9 2A 1F C0    >                        ld       hl,(UBnkrotmatRoofvZ)
  20++D9BC 22 97 97    >                        ld       (varR),hl
  20++D9BF 3A 1E C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  20++D9C2 CD A2 A7    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  20++D9C5 ED 53 1F C0 >                        ld  (UBnkrotmatRoofvZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  21++D9C9 C9                                   ret
  22++D9CA
  23++D9CA
  24++D9CA              APPequPosPlusAPP:       MACRO    Position, PositionSign
  25++D9CA ~                                    push    bc
  26++D9CA ~                                    ld      c,a                         ; save original value of a into c
  27++D9CA ~                                    ld      a,(PositionSign)
  28++D9CA ~                                    ld      b,a
  29++D9CA ~                                    ld      a,c
  30++D9CA ~                                    xor     b                           ; a = a xor x postition sign
  31++D9CA ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  32++D9CA ~            ; Signs are the same to we just add and take which ever sign
  33++D9CA ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  34++D9CA ~                                    ld      hl,(Position)
  35++D9CA ~                                    add     hl,de
  36++D9CA ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  37++D9CA ~                                    ld      a,c                         ; and a = original sign as they were both the same
  38++D9CA ~                                    pop     bc
  39++D9CA ~                                    ret
  40++D9CA ~            ; Signs are opposite so we subtract
  41++D9CA ~            .MV50:                  ld      de,(varPp1)
  42++D9CA ~                                    ld      hl,(Position)
  43++D9CA ~                                    or      a
  44++D9CA ~                                    sbc     hl,de
  45++D9CA ~                                    jr      c,.MV51                     ; if the result was negative then negate result
  46++D9CA ~                                    ld      a,c                         ; get back the original sign
  47++D9CA ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
  48++D9CA ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  49++D9CA ~                                    pop     bc
  50++D9CA ~                                    ret
  51++D9CA ~            .MV51:                  NegHL
  52++D9CA ~                                    ld      (varPp1),hl
  53++D9CA ~                                    ld      a,c                         ; the original sign will still be good
  54++D9CA ~                                    pop     bc
  55++D9CA ~                                    ret
  56++D9CA                                      ENDM
  57++D9CA
  58++D9CA
  59++D9CA              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
  59++D9CA C5          >                        push    bc
  59++D9CB 4F          >                        ld      c,a                         ; save original value of a into c
  59++D9CC 3A 0E C0    >                        ld      a,(UBnKxsgn)
  59++D9CF 47          >                        ld      b,a
  59++D9D0 79          >                        ld      a,c
  59++D9D1 A8          >                        xor     b                           ; a = a xor x postition sign
  59++D9D2 FA E3 D9    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  59++D9D5             >; Signs are the same to we just add and take which ever sign
  59++D9D5 ED 5B 86 96 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  59++D9D9 2A 0C C0    >                        ld      hl,(UBnKxlo)
  59++D9DC 19          >                        add     hl,de
  59++D9DD 22 86 96    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  59++D9E0 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  59++D9E1 C1          >                        pop     bc
  59++D9E2 C9          >                        ret
  59++D9E3             >; Signs are opposite so we subtract
  59++D9E3 ED 5B 86 96 >.MV50:                  ld      de,(varPp1)
  59++D9E7 2A 0C C0    >                        ld      hl,(UBnKxlo)
  59++D9EA B7          >                        or      a
  59++D9EB ED 52       >                        sbc     hl,de
  59++D9ED 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  59++D9EF 79          >                        ld      a,c                         ; get back the original sign
  59++D9F0 22 86 96    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  59++D9F3 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  59++D9F5 C1          >                        pop     bc
  59++D9F6 C9          >                        ret
  59++D9F7             >.MV51:                  NegHL
  59++D9F7 AF          >                    xor a
  59++D9F8 95          >                    sub l
  59++D9F9 6F          >                    ld l,a
  59++D9FA 9F          >                    sbc a,a
  59++D9FB 94          >                    sub h
  59++D9FC 67          >                    ld h,a
  59++D9FD 22 86 96    >                        ld      (varPp1),hl
  59++DA00 79          >                        ld      a,c                         ; the original sign will still be good
  59++DA01 C1          >                        pop     bc
  59++DA02 C9          >                        ret
  60++DA03
  61++DA03              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
  61++DA03 C5          >                        push    bc
  61++DA04 4F          >                        ld      c,a                         ; save original value of a into c
  61++DA05 3A 11 C0    >                        ld      a,(UBnKysgn)
  61++DA08 47          >                        ld      b,a
  61++DA09 79          >                        ld      a,c
  61++DA0A A8          >                        xor     b                           ; a = a xor x postition sign
  61++DA0B FA 1C DA    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  61++DA0E             >; Signs are the same to we just add and take which ever sign
  61++DA0E ED 5B 86 96 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  61++DA12 2A 0F C0    >                        ld      hl,(UBnKylo)
  61++DA15 19          >                        add     hl,de
  61++DA16 22 86 96    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  61++DA19 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  61++DA1A C1          >                        pop     bc
  61++DA1B C9          >                        ret
  61++DA1C             >; Signs are opposite so we subtract
  61++DA1C ED 5B 86 96 >.MV50:                  ld      de,(varPp1)
  61++DA20 2A 0F C0    >                        ld      hl,(UBnKylo)
  61++DA23 B7          >                        or      a
  61++DA24 ED 52       >                        sbc     hl,de
  61++DA26 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  61++DA28 79          >                        ld      a,c                         ; get back the original sign
  61++DA29 22 86 96    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  61++DA2C EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  61++DA2E C1          >                        pop     bc
  61++DA2F C9          >                        ret
  61++DA30             >.MV51:                  NegHL
  61++DA30 AF          >                    xor a
  61++DA31 95          >                    sub l
  61++DA32 6F          >                    ld l,a
  61++DA33 9F          >                    sbc a,a
  61++DA34 94          >                    sub h
  61++DA35 67          >                    ld h,a
  61++DA36 22 86 96    >                        ld      (varPp1),hl
  61++DA39 79          >                        ld      a,c                         ; the original sign will still be good
  61++DA3A C1          >                        pop     bc
  61++DA3B C9          >                        ret
  62++DA3C
  63++DA3C              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
  63++DA3C C5          >                        push    bc
  63++DA3D 4F          >                        ld      c,a                         ; save original value of a into c
  63++DA3E 3A 14 C0    >                        ld      a,(UBnKzsgn)
  63++DA41 47          >                        ld      b,a
  63++DA42 79          >                        ld      a,c
  63++DA43 A8          >                        xor     b                           ; a = a xor x postition sign
  63++DA44 FA 55 DA    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  63++DA47             >; Signs are the same to we just add and take which ever sign
  63++DA47 ED 5B 86 96 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  63++DA4B 2A 12 C0    >                        ld      hl,(UBnKzlo)
  63++DA4E 19          >                        add     hl,de
  63++DA4F 22 86 96    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  63++DA52 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  63++DA53 C1          >                        pop     bc
  63++DA54 C9          >                        ret
  63++DA55             >; Signs are opposite so we subtract
  63++DA55 ED 5B 86 96 >.MV50:                  ld      de,(varPp1)
  63++DA59 2A 12 C0    >                        ld      hl,(UBnKzlo)
  63++DA5C B7          >                        or      a
  63++DA5D ED 52       >                        sbc     hl,de
  63++DA5F 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  63++DA61 79          >                        ld      a,c                         ; get back the original sign
  63++DA62 22 86 96    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  63++DA65 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  63++DA67 C1          >                        pop     bc
  63++DA68 C9          >                        ret
  63++DA69             >.MV51:                  NegHL
  63++DA69 AF          >                    xor a
  63++DA6A 95          >                    sub l
  63++DA6B 6F          >                    ld l,a
  63++DA6C 9F          >                    sbc a,a
  63++DA6D 94          >                    sub h
  63++DA6E 67          >                    ld h,a
  63++DA6F 22 86 96    >                        ld      (varPp1),hl
  63++DA72 79          >                        ld      a,c                         ; the original sign will still be good
  63++DA73 C1          >                        pop     bc
  63++DA74 C9          >                        ret
  64++DA75
  65++DA75              ; rollWork holds Alpha intermidate results
  66++DA75 00 00 00     rollWork      DS 3
  67++DA78              rollWorkp1    equ rollWork
  68++DA78              rollWorkp2    equ rollWork+1
  69++DA78              rollWorkp3    equ rollWork+2
  70++DA78
  71++DA78              ;----------------------------------------------------------------------------------------------------------------------------------
  72++DA78              ; based on MVEIT part 4 of 9
  73++DA78 3A A3 96     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
  74++DA7B 21 93 96                             ld      hl,BET1                     ; and pitch
  75++DA7E B6                                   or      (hl)
  76++DA7F CA 39 DB                             jp      z,.NoRotation               ; if both zero then don't compute
  77++DA82                                      ;break
  78++DA82              ; P[210] = x * alph (we use P[2]P[1] later as result/256
  79++DA82 5F                                   ld      e,a                         ; e = roll magnitude
  80++DA83 2A 0C C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
  81++DA86 CD FE A7                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
  82++DA89 32 87 96                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
  83++DA8C 22 85 96                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
  84++DA8F              ; A = Flip sign
  85++DA8F 3A A5 96                             ld      a,(ALP2FLIP)                ; flip the current roll angle alpha and xor with x sign
  86++DA92 21 0E C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
  87++DA95 AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
  88++DA96              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
  89++DA96 CD 03 DA                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
  90++DA99              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
  91++DA99 32 77 DA                             ld      (rollWorkp3),a               ; k2+3 = sign of result
  92++DA9C 22 75 DA                             ld      (rollWorkp1),hl             ; k2+1,2 = result
  93++DA9F              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
  94++DA9F 3A 93 96                             ld      a,(BET1)                    ; a = magnitude of pitch
  95++DAA2 5F                                   ld      e,a
  96++DAA3 CD FE A7                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
  97++DAA6 32 87 96                             ld      (varPp2),a                   ; save highest byte in P2
  98++DAA9 22 85 96                             ld      (varP),hl
  99++DAAC              ; Fetch sign of previosu cal and xor with BETA inverted
 100++DAAC 3A 77 DA                             ld      a,(rollWorkp3)
 101++DAAF 5F                                   ld      e,a
 102++DAB0 3A 94 96                             ld      a,(BET2)
 103++DAB3 AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
 104++DAB4              ; Z = P[210] =Z + APP
 105++DAB4 CD 3C DA                             call    APPequZPosPlusAPP           ; MVT6
 106++DAB7 32 14 C0                             ld      (UBnKzsgn),a                ; save result back into z
 107++DABA 22 12 C0                             ld      (UBnKzlo),hl
 108++DABD              ; A[P1]P[0] = z * Beta
 109++DABD 3A 93 96                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
 110++DAC0 5F                                   ld      e,a
 111++DAC1 CD FE A7                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
 112++DAC4 32 87 96                             ld      (varPp2),a                  ; P2 = high byte of result
 113++DAC7 22 85 96                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
 114++DACA              ; A xor BET2,Zsign
 115++DACA 3A 77 DA                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 116++DACD 32 11 C0                             ld      (UBnKysgn),a                ; save result back into y
 117++DAD0 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 118++DAD1 3A 94 96                             ld      a,(BET2)                    ;
 119++DAD4 AB                                   xor     e                           ;
 120++DAD5 5F                                   ld      e,a                         ; now xor it with z sign too
 121++DAD6 3A 14 C0                             ld      a,(UBnKzsgn)                ;
 122++DAD9 AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 123++DADA F2 E9 DA                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 124++DADD 2A 86 96                             ld      hl,(varPp1)
 125++DAE0 ED 5B 75 DA                          ld      de,(rollWorkp1)
 126++DAE4 B7                                   or      a
 127++DAE5 19                                   add     hl,de
 128++DAE6 C3 03 DB                             jp      .MV44
 129++DAE9 2A 75 DA     .MV43:                  ld      hl,(rollWorkp1)
 130++DAEC ED 5B 86 96                          ld      de,(varPp1)
 131++DAF0 B7                                   or      a
 132++DAF1 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 133++DAF3 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 134++DAF5                                      NegHL
 134++DAF5 AF          >                    xor a
 134++DAF6 95          >                    sub l
 134++DAF7 6F          >                    ld l,a
 134++DAF8 9F          >                    sbc a,a
 134++DAF9 94          >                    sub h
 134++DAFA 67          >                    ld h,a
 135++DAFB 3A 11 C0                             ld      a,(UBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and suns are sign + 23 bit xpos
 136++DAFE EE 80                                xor     SignOnly8Bit
 137++DB00 32 11 C0                             ld      (UBnKysgn),a
 138++DB03              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 139++DB03 22 0F C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 140++DB06 3A A3 96                             ld      a,(ALP1)                    ; get roll magnitude
 141++DB09 5F                                   ld      e,a
 142++DB0A 2A 0F C0                             ld      hl,(UBnKylo)
 143++DB0D CD FE A7                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 144++DB10 32 87 96                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 145++DB13 22 85 96                             ld      (varP),hl
 146++DB16 3A A4 96                             ld      a,(ALP2)
 147++DB19 5F                                   ld      e,a
 148++DB1A 3A 11 C0                             ld      a,(UBnKysgn)
 149++DB1D AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 150++DB1E CD CA D9                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 151++DB21 32 0E C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
 152++DB24 22 0C C0                             ld      (UBnKxlo),hl
 153++DB27                                      ;break
 154++DB27                                      ; if its not a sun then apply to local orientation
 155++DB27
 156++DB27 CD B0 D8                             call    ApplyMyRollToNosev
 157++DB2A CD DF D8                             call    ApplyMyRollToSidev
 158++DB2D CD 0E D9                             call    ApplyMyRollToRoofv
 159++DB30 CD 3D D9                             call    ApplyMyPitchToNosev
 160++DB33 CD 6C D9                             call    ApplyMyPitchToSidev
 161++DB36 CD 9B D9                             call    ApplyMyPitchToRoofv
 162++DB39 3A 92 97     .NoRotation:            ld      a,(DELTA)                   ; get speed
 163++DB3C 16 00                                ld      d,0
 164++DB3E 5F                                   ld      e,a                         ; de = speed in low byte
 165++DB3F 2A 12 C0                             ld      hl,(UBnKzlo)                ; hl = z position
 166++DB42 3A 14 C0                             ld      a,(UBnKzsgn)                ; b = z sign
 167++DB45 47                                   ld      b,a                         ;
 168++DB46 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 169++DB48 CD 8C AD                             call    ADDHLDESignBC               ; update speed
 170++DB4B 22 12 C0                             ld      (UBnKzlo),hl                ; write back to zpos
 171++DB4E 32 14 C0                             ld      (UBnKzsgn),a                ;
 172++DB51 C9                                   ret
# file closed: ././Universe/Ships/ApplyMyRollAndPitch.asm
1272+ DB52                          INCLUDE "./Universe/Ships/ApplyShipRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyShipRollAndPitch.asm
   1++DB52              ;----------------------------------------------------------------------------------------------------------------------------------
   2++DB52              ; based on MVEIT part 4 of 9
   3++DB52 3A 2B C0     ApplyShipRollAndPitch:  ld      a,(UBnKRotZCounter)             ; get roll magnitudeShip Pitch counter
   4++DB55 47                                   ld      b,a
   5++DB56 E6 80                                and     SignOnly8Bit
   6++DB58 4F                                   ld      c,a
   7++DB59 32 32 C0                             ld      (univRAT2),a                ; get sign of pitch
   8++DB5C 78                                   ld      a,b
   9++DB5D E6 7F                                and     SignMask8Bit                ; and magnitude
  10++DB5F 28 3A                                jr      z,.ProcessRoll
  11++DB61 FE 7F        .CheckPitchDamping:     cp      SignMask8Bit
  12++DB63 28 01                                jr      z,.NoPitchDamping
  13++DB65 3D           .ApplyPitchDamping:     dec     a                           ; pitch = pitch-1
  14++DB66 32 33 C0     .NoPitchDamping         ld      (univRAT2Val),a
  15++DB69 47                                   ld      b,a
  16++DB6A B1                                   or      c                           ; bring sign back in
  17++DB6B 32 2B C0                             ld      (UBnKRotZCounter),a             ; rotZCounter = updated value
  18++DB6E 21 1B C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  19++DB71 22 6E 96                             ld	    (varAxis1),hl
  20++DB74 21 21 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  21++DB77 22 70 96                             ld	    (varAxis2),hl
  22++DB7A CD 5D CB                             call    MVS5RotateAxis
  23++DB7D 21 1D C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  24++DB80 22 6E 96                             ld	    (varAxis1),hl
  25++DB83 21 23 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  26++DB86 22 70 96                             ld	    (varAxis2),hl
  27++DB89 CD 5D CB                             call    MVS5RotateAxis
  28++DB8C 21 1F C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  29++DB8F 22 6E 96                             ld	    (varAxis1),hl
  30++DB92 21 25 C0                             ld	    hl,UBnkrotmatNosevZ
  31++DB95 22 70 96                             ld	    (varAxis2),hl
  32++DB98 CD 5D CB                             call    MVS5RotateAxis
  33++DB9B 3A 2A C0     .ProcessRoll:           ld      a,(UBnKRotXCounter)
  34++DB9E 47                                   ld      b,a
  35++DB9F E6 80                                and     SignOnly8Bit
  36++DBA1 4F                                   ld      c,a
  37++DBA2 32 32 C0                             ld      (univRAT2),a                ; get sign of pitch
  38++DBA5 78                                   ld      a,b
  39++DBA6 E6 7F                                and     SignMask8Bit                ; and magnitude
  40++DBA8 C8                                   ret     z                           ; if no work to do then exit
  41++DBA9 FE 7F        .CheckRollDamping:      cp      SignMask8Bit
  42++DBAB 28 01                                jr      z,.NoRollDamping
  43++DBAD 3D           .ApplyRollDamping:      dec      a                     ; pitch = pitch-1
  44++DBAE 32 33 C0     .NoRollDamping          ld      (univRAT2Val),a
  45++DBB1 47                                   ld      b,a
  46++DBB2 B1                                   or      c                           ; bring sign back in
  47++DBB3 32 2A C0                             ld      (UBnKRotXCounter),a             ; rotZCounter = updated value
  48++DBB6 21 1B C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  49++DBB9 22 6E 96                             ld	    (varAxis1),hl
  50++DBBC 21 15 C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  51++DBBF 22 70 96                             ld	    (varAxis2),hl
  52++DBC2 CD 5D CB                             call    MVS5RotateAxis
  53++DBC5 21 1D C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  54++DBC8 22 6E 96                             ld	    (varAxis1),hl
  55++DBCB 21 17 C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  56++DBCE 22 70 96                             ld	    (varAxis2),hl
  57++DBD1 CD 5D CB                             call    MVS5RotateAxis
  58++DBD4 21 1F C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  59++DBD7 22 6E 96                             ld	    (varAxis1),hl
  60++DBDA 21 19 C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  61++DBDD 22 70 96                             ld	    (varAxis2),hl
  62++DBE0 CD 5D CB                             call    MVS5RotateAxis
  63++DBE3 C9                                   ret
  64++DBE4
# file closed: ././Universe/Ships/ApplyShipRollAndPitch.asm
1273+ DBE4                          INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++DBE4
   2++DBE4              ; ---------------------------------------------------------------------------------------------------------------------------------
   3++DBE4 00           DrawLinesCounter		db	0
   4++DBE5              ; Initial tests look OK
   5++DBE5              LL155:;
   6++DBE5              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   7++DBE5                    ;break                                                                             ; ObjectInFront:
   8++DBE5 3E 65        DrawLines:              ld	a,$65 ; DEBUG
   9++DBE7 FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
  10++DBE9 3A F6 C2                             ld		a,(UbnkLineArrayLen)			; get number of lines
  11++DBEC                                      ReturnIfAIsZero   						; No lines then bail out.
  11++DBEC A7          >                        and a
  11++DBED C8          >                        ret    z
  12++DBEE FD 67                                ld		iyh,a			                ; number of lines still to draw
  13++DBF0 21 04 C2                             ld		hl,UbnkLineArray
  14++DBF3              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  15++DBF3 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  16++DBF4 23                                   inc     hl
  17++DBF5 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  18++DBF6 23                                   inc     hl
  19++DBF7              ;;DEBUGTEST        push bc
  20++DBF7              ;;DEBUGTEST        push hl
  21++DBF7              ;;DEBUGTEST        push de
  22++DBF7              ;;DEBUGTEST        ld  a,$3F
  23++DBF7              ;;DEBUGTEST        MMUSelectLayer2
  24++DBF7              ;;DEBUGTEST        call    l2_plot_pixel
  25++DBF7              ;;DEBUGTEST        pop de
  26++DBF7              ;;DEBUGTEST        pop hl
  27++DBF7              ;;DEBUGTEST        pop bc
  28++DBF7 5E                                   ld      e,(hl)                          ; c = varX1
  29++DBF8 23                                   inc     hl
  30++DBF9 56                                   ld      d,(hl)                          ; de = point2 Y,X
  31++DBFA              ;;DEBUGTEST       push bc
  32++DBFA              ;;DEBUGTEST       push hl
  33++DBFA              ;;DEBUGTEST       push de
  34++DBFA              ;;DEBUGTEST       push de
  35++DBFA              ;;DEBUGTEST       pop  bc
  36++DBFA              ;;DEBUGTEST       ld  a,$3F
  37++DBFA              ;;DEBUGTEST       MMUSelectLayer2
  38++DBFA              ;;DEBUGTEST       call    l2_plot_pixel
  39++DBFA              ;;DEBUGTEST       pop de
  40++DBFA              ;;DEBUGTEST       pop hl
  41++DBFA              ;;DEBUGTEST       pop bc
  42++DBFA 23                                   inc     hl
  43++DBFB E5                                   push	hl
  44++DBFC FD E5                                push    iy
  45++DBFE 60                                   ld      h,b
  46++DBFF 69                                   ld      l,c
  47++DC00                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  48++DC00 FD 7D                                ld		a,iyl							; get colour back before calling line draw
  49++DC02                                      MMUSelectLayer2
  49++DC02 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  50++DC06 CD EA E8                             call    LineHLtoDE
  51++DC09 FD E1                                pop     iy
  52++DC0B E1                                   pop	    hl
  53++DC0C FD 25                                dec     iyh
  54++DC0E 20 E3                                jr		nz,DrawXX19ClippedLines
  55++DC10 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  56++DC11
# file closed: ././ModelRender/DrawLines.asm
1274+ DC11              ; ---------------------------------------------------------------------------------------------------------------------------------
1275+ DC11
1276+ DC11
1277+ DC11 CD EC CE     ProcessDot:                 call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1278+ DC14 CD 04 90                                 call    ScaleXX16Matrix197               ;#02; Normalise XX16
1279+ DC17 CD A2 D1                                 call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1280+ DC1A CD 6F D0                                 call    InverseXX16                      ;#11; Invert rotation matrix
1281+ DC1D 21 00 00                                 ld      hl,0
1282+ DC20 32 79 C0                                 ld      (UBnkXScaled),a
1283+ DC23 32 7B C0                                 ld      (UBnkYScaled),a
1284+ DC26 32 7D C0                                 ld      (UBnkZScaled),a
1285+ DC29 AF                                       xor     a
1286+ DC2A CD 2A 8F                                 call    XX12EquNodeDotOrientation
1287+ DC2D CD 23 CF                                 call    TransposeXX12ByShipToXX15
1288+ DC30 CD A0 CF                                 call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1289+ DC33 FD 21 C4 C0                              ld      iy,UBnkNodeArray
1290+ DC37 CD 59 D8                                 call    ProjectNodeToEye
1291+ DC3A C9                                       ret
1292+ DC3B
1293+ DC3B              ; .....................................................
1294+ DC3B              ; Process Nodes does the following:
1295+ DC3B              ; for each node:
1296+ DC3B              ;     see if node >
1297+ DC3B 00           PNXX20DIV6          DB      0
1298+ DC3C 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1299+ DC3E 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1300+ DC40 00           PNLASTNORM          DB      0
1301+ DC41 AF           ProcessNodes:           xor     a
1302+ DC42 32 F6 C2                             ld      (UbnkLineArrayLen),a
1303+ DC45 CD EC CE                             call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1304+ DC48 CD 04 90                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1305+ DC4B CD A2 D1                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1306+ DC4E CD 6F D0                             call    InverseXX16                      ;#11; Invert rotation matrix
1307+ DC51 21 1C C3                             ld      hl,UBnkHullVerticies
1308+ DC54 3A 0C C3                             ld      a,(VertexCtX6Addr)               ; get Hull byte#8 = number of vertices *6                                   ;;;
1309+ DC57 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1310+ DC58 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1311+ DC59 16 06                                ld      d,6
1312+ DC5B CD BB A9                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1313+ DC5E 41                                   ld      b,c                              ; c = number of vertices
1314+ DC5F FD 21 C4 C0                          ld      iy,UBnkNodeArray
1315+ DC63              LL48:
1316+ DC63 C5           PointLoop:	            push	bc                                  ; save counters
1317+ DC64 E5                                   push	hl                                  ; save verticies list pointer
1318+ DC65 FD E5                                push	iy                                  ; save Screen plot array pointer
1319+ DC67 78                                   ld      a,b
1320+ DC68                                      ;break
1321+ DC68 CD D6 D7                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
1322+ DC6B 3A 7A C0                             ld		a,(UBnkXScaledSign)
1323+ DC6E CD 2A 8F                             call    XX12EquNodeDotOrientation
1324+ DC71 CD 23 CF                             call    TransposeXX12ByShipToXX15
1325+ DC74 CD A0 CF                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1326+ DC77 FD E1                                pop		iy                                  ; get back screen plot array pointer
1327+ DC79 CD 59 D8                             call    ProjectNodeToEye                     ; set up screen plot list entry
1328+ DC7C                 ; ld      hl,UbnkLineArrayLen
1329+ DC7C                ;  inc     (hl)                                ; another node done
1330+ DC7C FD E5        ReadyForNextPoint:      push	iy                                  ; copy screen plot pointer to hl
1331+ DC7E E1                                   pop		hl
1332+ DC7F 3E 04                                ld		a,4
1333+ DC81 ED 31                                add		hl,a
1334+ DC83 E5                                   push	hl                                  ; write it back at iy + 4
1335+ DC84 FD E1                                pop		iy								    ; and put it in iy again
1336+ DC86 E1                                   pop		hl                                  ; get hl back as vertex list
1337+ DC87 3E 06                                ld		a,6
1338+ DC89 ED 31                                add 	hl,a                                ; and move to next vertex
1339+ DC8B C1                                   pop		bc                                  ; get counter back
1340+ DC8C 10 D5                                djnz	PointLoop
1341+ DC8E              ; ......................................................
1342+ DC8E                                      ClearCarryFlag
1342+ DC8E B7          >                        or a
1343+ DC8F C9                                   ret
1344+ DC90
1345+ DC90              ; ......................................................
1346+ DC90 CD 51 D4     ProcessShip:            call    CheckDistance
1347+ DC93 D8                                   ret     c
1348+ DC94 3A 92 C0     .IsItADot:              ld      a,(UBnKDrawAsDot)
1349+ DC97 A7                                   and     a
1350+ DC98 28 0F                                jr      z,.CarryOnWithDraw
1351+ DC9A ED 4B C4 C0  .itsJustADot:           ld      bc,(UBnkNodeArray)          ; if its at dot range
1352+ DC9E 3E FF                                ld      a,$FF                       ; just draw a pixel
1353+ DCA0                                      MMUSelectLayer2                     ; then go to update radar
1353+ DCA0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1354+ DCA4 CD FF E0                             call    l2_plot_pixel               ;
1355+ DCA7                                      ClearCarryFlag
1355+ DCA7 B7          >                        or a
1356+ DCA8 C9                                   ret
1357+ DCA9 CD 41 DC     .CarryOnWithDraw:       call    ProcessNodes
1358+ DCAC CD A1 D4                             call    CullV2
1359+ DCAF CD 3B DD                             call    PrepLines
1360+ DCB2 CD E5 DB                             call    DrawLines
1361+ DCB5                                      ClearCarryFlag
1361+ DCB5 B7          >                        or a
1362+ DCB6 C9                                   ret
1363+ DCB7              ; ......................................................
1364+ DCB7
1365+ DCB7              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1366+ DCB7              ;  Entering Here we have the following:
1367+ DCB7              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1368+ DCB7              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1369+ DCB7              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1370+ DCB7              ;
1371+ DCB7              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1372+ DCB7              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1373+ DCB7              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1374+ DCB7              ;--------------------------------------------------------------------------------------------------------
1375+ DCB7              AddLaserBeamLine:
1376+ DCB7              ; this code is a bag of shit and needs re-writing
1377+ DCB7              GetGunVertexNode:
1378+ DCB7 3A 0A C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1379+ DCBA 21 C4 C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1380+ DCBD ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1381+ DCBF FD 2E 00             ld          iyl,0
1382+ DCC2              MoveX1PointToXX15:
1383+ DCC2 4E                   ld          c,(hl)                              ;
1384+ DCC3 23                   inc         hl
1385+ DCC4 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1386+ DCC5 23                   inc         hl
1387+ DCC6 ED 43 79 C0          ld          (UBnkX1),bc
1388+ DCCA 0C                   inc         c
1389+ DCCB C8                   ret         z                                   ; was c 255?
1390+ DCCC 04                   inc         b
1391+ DCCD C8                   ret         z                                   ; was c 255?
1392+ DCCE              MoveY1PointToXX15:
1393+ DCCE 4E                   ld          c,(hl)                              ;
1394+ DCCF 23                   inc         hl
1395+ DCD0 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1396+ DCD1 23                   inc         hl
1397+ DCD2 ED 43 7B C0          ld          (UBnkY1),bc
1398+ DCD6              SetX2PointToXX15:
1399+ DCD6 01 00 00             ld          bc,0                                ; set X2 to 0
1400+ DCD9 ED 43 7D C0          ld          (UBnkX2),bc
1401+ DCDD 3A 12 C0             ld          a,(UBnKzlo)
1402+ DCE0 4F                   ld          c,a
1403+ DCE1              SetY2PointToXX15:
1404+ DCE1 ED 43 7F C0          ld          (UBnkY2),bc                         ; set Y2to 0
1405+ DCE5 3A 0E C0             ld          a,(UBnKxsgn)
1406+ DCE8                      JumpOnBitClear a,7,LL74SkipDec
1406+ DCE8 CB 7F       >                        bit 	7,a
1406+ DCEA CA F2 DC    >                        jp      z,LL74SkipDec
1407+ DCED              LL74DecX2:
1408+ DCED 3E FF                ld          a,$FF
1409+ DCEF 32 7D C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1410+ DCF2              LL74SkipDec:
1411+ DCF2 CD 96 CC             call        ClipLine                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1412+ DCF5 38 71                jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1413+ DCF7              ; Here we are usign hl to replace VarU as index
1414+ DCF7 2A 99 97             ld          hl,(varU16)
1415+ DCFA 3A 79 C0             ld          a,(UBnKx1Lo)
1416+ DCFD 77                   ld          (hl),a
1417+ DCFE 23                   inc         hl
1418+ DCFF 3A 7B C0             ld          a,(UbnKy1Lo)
1419+ DD02 77                   ld          (hl),a
1420+ DD03 23                   inc         hl
1421+ DD04 3A 7D C0             ld          a,(UBnkX2Lo)
1422+ DD07 77                   ld          (hl),a
1423+ DD08 23                   inc         hl
1424+ DD09 3A 7F C0             ld          a,(UbnKy2Lo)
1425+ DD0C 77                   ld          (hl),a
1426+ DD0D FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1427+ DD0F 23                   inc         hl
1428+ DD10 FD 2C                inc         iyl                                 ; ready for next byte
1429+ DD12 22 99 97             ld          (varU16),hl
1430+ DD15 C9                   ret
1431+ DD16
1432+ DD16                  INCLUDE "Universe/Ships/PrepLines.asm"
# file opened: ./Universe/Ships/PrepLines.asm
   1++DD16              ;--------------------------------------------------------------------------------------------------------
   2++DD16                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DD16              ;--------------------------------------------------------------------------------------------------------
   2++DD16              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DD16 21 C4 C0     getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DD19 ED 31                                add         hl,a                                ; hl = address of Node
   5++DD1B 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DD1C 11 79 C0                             ld          de,UBnkX1
   7++DD1F ED A0                                ldi                                             ; x1 lo
   8++DD21 ED A0                                ldi                                             ; x1 hi
   9++DD23 ED A0                                ldi                                             ; y1 lo
  10++DD25 ED A0                                ldi                                             ; y1 hi
  11++DD27 C9                                   ret
  12++DD28
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   3++DD28                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DD28              ;--------------------------------------------------------------------------------------------------------
   2++DD28              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DD28 21 C4 C0     getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DD2B ED 31                                add         hl,a                                ; hl = address of Node
   5++DD2D 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DD2E 11 7D C0                             ld          de,UBnkX2
   7++DD31 ED A0                                ldi                                             ; x1 lo
   8++DD33 ED A0                                ldi                                             ; x1 hi
   9++DD35 ED A0                                ldi                                             ; y1 lo
  10++DD37 ED A0                                ldi                                             ; y1 hi
  11++DD39 C9                                   ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   4++DD3A                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DD3A              ;--------------------------------------------------------------------------------------------------------
   2++DD3A              GetFaceAtA:         MACRO
   3++DD3A ~                                ld          hl,UbnkFaceVisArray
   4++DD3A ~                                add         hl,a
   5++DD3A ~                                ld          a,(hl)                              ; get face visibility
   6++DD3A                                  ENDM
   7++DD3A
# file closed: ././ModelRender/GetFaceAtA.asm
   5++DD3A              ;--------------------------------------------------------------------------------------------------------
   6++DD3A              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
   7++DD3A               ;   DEFINE NOBACKFACECULL 1
   8++DD3A 00           PLEDGECTR           DB          0
   9++DD3B
  10++DD3B              PrepLines:
  11++DD3B              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  12++DD3B
  13++DD3B              ; TODO add in onced DOEXP is finished
  14++DD3B              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  15++DD3B              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  16++DD3B              ;        or          8
  17++DD3B              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  18++DD3B              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  19++DD3B              ;EE31:                                                   ; no explosion
  20++DD3B              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  21++DD3B              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  22++DD3B              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  23++DD3B              ;
  24++DD3B              ;--------------------------------------------------------------------------------------------------------
  25++DD3B              InitialiseLineRead:
  26++DD3B                      ;break
  27++DD3B                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  27++DD3B AF          >                        xor      a
  27++DD3C 32 F6 C2    >                        ld       (UbnkLineArrayLen),a
  28++DD3F                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  28++DD3F AF          >                        xor      a
  28++DD40 32 F7 C2    >                        ld       (UbnkLineArrayBytes),a
  29++DD43                      ldWriteZero PLEDGECTR
  29++DD43 AF          >                        xor      a
  29++DD44 32 3A DD    >                        ld       (PLEDGECTR),a
  30++DD47 3A 0D C3             ld          a,(EdgeCountAddr)
  31++DD4A DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  32++DD4C FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  33++DD4F 21 04 C2             ld          hl,UbnkLineArray                    ; head of array
  34++DD52 22 99 97             ld          (varU16),hl                         ; store current line array pointer un varU16
  35++DD55                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  35++DD55 3A 0D C3    >                        ld       a,(EdgeCountAddr)
  35++DD58 32 9D 97    >                        ld       (XX17),a
  36++DD5B 3A 2C C0             ld          a,(UBnKexplDsp)                     ; get explosion status
  37++DD5E                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  37++DD5E CB 77       >                        bit 	6,a
  37++DD60 CA 68 DD    >                        jp      z,CalculateNewLines
  38++DD63 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  39++DD65 32 2C C0             ld          (UBnKexplDsp),a                     ; INWK+31
  40++DD68              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  41++DD68              ; NOw we can calculate hull after including laser line
  42++DD68              CalculateNewLines:
  43++DD68              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  44++DD68              CheckEdgesForVisibility:
  45++DD68 21 48 C4             ld          hl,UBnkHullEdges
  46++DD6B                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  47++DD6B 22 8A 96             ld          (varV),hl                           ; V \ is pointer to where edges data start
  48++DD6E 3A 09 C3             ld          a,(LineX4Addr)
  49++DD71 47                   ld          b,a                                 ; nbr of bytes of edge data
  50++DD72              LL75Loop:                                               ; count Visible edges
  51++DD72              IsEdgeInVisibilityRange:
  52++DD72 2A 8A 96             ld          hl,(varV)
  53++DD75 E5                   push        hl
  54++DD76 FD E1                pop         iy
  55++DD78                      IFDEF NOBACKFACECULL
  56++DD78 ~                        jp          VisibileEdge; DEBUGTODO
  57++DD78                      ENDIF
  58++DD78 3A 7A 96             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  59++DD7B 57                   ld          d,a                                 ; d holds copy of XX4
  60++DD7C              ; Get Edge Byte 0
  61++DD7C FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  62++DD7F                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  62++DD7F BA          >                        cp      d
  62++DD80 DA D3 DD    >                        jp		c, LL78EdgeNotVisible
  63++DD83              EdgeMayBeVisibile:
  64++DD83              ; Get Edge Byte 1
  65++DD83              IsFace1Visibile:                                        ; edges have 2 faces to test
  66++DD83 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  67++DD86 4F                   ld          c,a                                 ;  c = a copy of byte 1
  68++DD87 E6 0F                and         $0F                                 ;
  69++DD89                      GetFaceAtA
  69++DD89 21 A6 C0    >                    ld          hl,UbnkFaceVisArray
  69++DD8C ED 31       >                    add         hl,a
  69++DD8E 7E          >                    ld          a,(hl)                              ; get face visibility
  70++DD8F              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  71++DD8F                      IfANotZeroGoto VisibileEdge                     ; LL70 visible edge
  71++DD8F FE 00       >                        cp	0
  71++DD91 C2 A5 DD    >                        jp	nz,VisibileEdge
  72++DD94              IsFace2Visibile:
  73++DD94 79                   ld          a,c                                 ; restore byte 1 from c register
  74++DD95 ED 23                swapnib                                         ;
  75++DD97 E6 0F                and         $0F                                 ; swap high byte into low byte
  76++DD99 E5                   push        hl
  77++DD9A                      GetFaceAtA
  77++DD9A 21 A6 C0    >                    ld          hl,UbnkFaceVisArray
  77++DD9D ED 31       >                    add         hl,a
  77++DD9F 7E          >                    ld          a,(hl)                              ; get face visibility
  78++DDA0 E1                   pop         hl
  79++DDA1                      IfAIsZeroGoto LL78EdgeNotVisible                ; edge not visible
  79++DDA1 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  79++DDA2 CA D3 DD    >                        jp	z, LL78EdgeNotVisible
  80++DDA5              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  81++DDA5              ;LL79--Visible edge--------------------------------------
  82++DDA5              ; Get Edge Byte 2
  83++DDA5 FD 7E 02             ld          a,(IY+2)                            ; get Node id
  84++DDA8 CD 16 DD             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  85++DDAB FD 7E 03             ld          a,(IY+3)
  86++DDAE CD 28 DD             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
  87++DDB1 CD 96 CC             call        ClipLine
  88++DDB4 38 1D                jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
  89++DDB6              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
  90++DDB6 ED 5B 99 97          ld          de,(varU16)                         ; clipped edges heap address
  91++DDBA 21 79 C0             ld          hl,UBnkNewX1
  92++DDBD                      FourLDIInstrunctions
  92++DDBD ED A0       >                        ldi
  92++DDBF ED A0       >                        ldi
  92++DDC1 ED A0       >                        ldi
  92++DDC3 ED A0       >                        ldi
  93++DDC5 ED 53 99 97          ld          (varU16),de                         ; update U16 with current address
  94++DDC9 21 F6 C2             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
  95++DDCC 34                   inc         (hl)
  96++DDCD 7E                   ld          a,(hl)
  97++DDCE                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
  97++DDCE FE 32       >                        cp     LineArraySize
  97++DDD0 D2 E9 DD    >                        jp		nc,CompletedLineGeneration
  98++DDD3              ; If we hit here we skip the write of line arryay u16
  99++DDD3              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 100++DDD3              LL78:
 101++DDD3 2A 8A 96             ld          hl,(varV)                           ; varV is current edge address
 102++DDD6 3E 04                ld          a,4
 103++DDD8 ED 31                add         hl,a
 104++DDDA 22 8A 96             ld          (varV),hl
 105++DDDD 21 3A DD             ld          hl,PLEDGECTR                        ;
 106++DDE0 34                   inc         (hl)                                ;
 107++DDE1 7E                   ld          a,(hl)                              ; current edge index ++
 108++DDE2                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 108++DDE2 21 9D 97    >                        ld    hl,XX17
 108++DDE5 BE          >                        cp    (hl)
 108++DDE6 C2 72 DD    >                        jp      nz,LL75Loop
 109++DDE9              CompletedLineGeneration:
 110++DDE9              LL81:
 111++DDE9              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 112++DDE9 3A F6 C2             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 113++DDEC CB 27                sla         a
 114++DDEE CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 115++DDF0 32 F7 C2             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 116++DDF3              ExitEdgeDataLoop:
 117++DDF3 C9                   ret
 118++DDF4
# file closed: ./Universe/Ships/PrepLines.asm
1433+ DDF4
1434+ DDF4              UnivBankSize  EQU $ - StartOfUniv
1435+ DDF4
# file closed: ./Universe/Ships/univ_ship_data.asm
1255  DDF4
1256  DDF4                  SLOT    UniverseBankAddr
1257  DDF4                  PAGE    BankUNIVDATA1
1258  DDF4              	ORG	UniverseBankAddr,BankUNIVDATA1
1259  C000 FF           UNIVDATABlock1      DB $FF
1260  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1261  E000
1262  E000                  SLOT    UniverseBankAddr
1263  E000                  PAGE    BankUNIVDATA2
1264  E000              	ORG	UniverseBankAddr,BankUNIVDATA2
1265  C000 FF           UNIVDATABlock2      DB $FF
1266  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1267  E000
1268  E000                  SLOT    UniverseBankAddr
1269  E000                  PAGE    BankUNIVDATA3
1270  E000              	ORG	UniverseBankAddr,BankUNIVDATA3
1271  C000 FF           UNIVDATABlock3      DB $FF
1272  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1273  E000
1274  E000                  SLOT    UniverseBankAddr
1275  E000                  PAGE    BankUNIVDATA4
1276  E000              	ORG	UniverseBankAddr,BankUNIVDATA4
1277  C000 FF           UNIVDATABlock4      DB $FF
1278  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1279  E000
1280  E000                  SLOT    UniverseBankAddr
1281  E000                  PAGE    BankUNIVDATA5
1282  E000              	ORG	UniverseBankAddr,BankUNIVDATA5
1283  C000 FF           UNIVDATABlock5      DB $FF
1284  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1285  E000
1286  E000                  SLOT    UniverseBankAddr
1287  E000                  PAGE    BankUNIVDATA6
1288  E000              	ORG	UniverseBankAddr,BankUNIVDATA6
1289  C000 FF           UNIVDATABlock6      DB $FF
1290  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1291  E000
1292  E000                  SLOT    UniverseBankAddr
1293  E000                  PAGE    BankUNIVDATA7
1294  E000              	ORG	UniverseBankAddr,BankUNIVDATA7
1295  C000 FF           UNIVDATABlock7      DB $FF
1296  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1297  E000
1298  E000                  SLOT    UniverseBankAddr
1299  E000                  PAGE    BankUNIVDATA8
1300  E000              	ORG	UniverseBankAddr,BankUNIVDATA8
1301  C000 FF           UNIVDATABlock8      DB $FF
1302  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1303  E000
1304  E000                  SLOT    UniverseBankAddr
1305  E000                  PAGE    BankUNIVDATA8
1306  E000              	ORG	UniverseBankAddr,BankUNIVDATA9
1307  C000 FF           UNIVDATABlock9      DB $FF
1308  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1309  E000
1310  E000                  SLOT    UniverseBankAddr
1311  E000                  PAGE    BankUNIVDATA10
1312  E000              	ORG	UniverseBankAddr,BankUNIVDATA10
1313  C000 FF           UNIVDATABlock10     DB $FF
1314  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1315  E000
1316  E000                  SLOT    UniverseBankAddr
1317  E000                  PAGE    BankUNIVDATA11
1318  E000              	ORG	UniverseBankAddr,BankUNIVDATA11
1319  C000 FF           UNIVDATABlock11     DB $FF
1320  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1321  E000
1322  E000                  SLOT    UniverseBankAddr
1323  E000                  PAGE    BankUNIVDATA12
1324  E000              	ORG	UniverseBankAddr,BankUNIVDATA12
1325  C000 FF           UNIVDATABlock12     DB $FF
1326  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1327  E000
1328  E000                  SLOT    GalaxyDataAddr
1329  E000                  PAGE    BankGalaxyData0
1330  E000              	ORG GalaxyDataAddr, BankGalaxyData0
1331  E000                  INCLUDE "./Universe/Galaxy/galaxy_data.asm"
# file opened: ./Universe/Galaxy/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00 00 00...  GalaxySearchString:      DS 32
  11+ E87D 00                                    DB 0
  12+ E87E 00 00 00...  GalaxyExpandedName:      DS 32
  13+ E89E 00                                    DB 0
  14+ E89F 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  14+ E8A3 53 45 49 54
  14+ E8A7 49 4C 45 54
  14+ E8AB 53 54 4F 4E
  14+ E8AF 4C 4F 4E 55
  14+ E8B3 54 48 4E 4F
  14+ E8B7 41 4C 4C 45
  14+ E8BB 58 45 47 45
  14+ E8BF 5A 41 43 45
  14+ E8C3 42 49 53 4F
  14+ E8C7 55 53 45 53
  14+ E8CB 41 52 4D 41
  14+ E8CF 49 4E 44 49
  14+ E8D3 52 45 41 3F
  14+ E8D7 45 52 41 54
  14+ E8DB 45 4E 42 45
  14+ E8DF 52 41 4C 41
  14+ E8E3 56 45 54 49
  14+ E8E7 45 44 4F 52
  14+ E8EB 51 55 41 4E
  14+ E8EF 54 45 49 53
  14+ E8F3 52 49 4F 4E
  15+ E8F7 00 00 00...  GalaxyWorkingSeed        DS 6
  16+ E8FD 00 00 00...  GalaxyNamingSeed         DS 6
  17+ E903 00 00 00...  GalaxySavedRandomSeed    DS 6
  18+ E909
  19+ E909 00           GalaxyDisplayGovernment         DB 0
  20+ E90A 00           GalaxyDisplayEconomy            DB 0
  21+ E90B 00           GalaxyDisplayTekLevel           DB 0
  22+ E90C 00           GalaxyDisplayPopulation         DB 0
  23+ E90D 00 00        GalaxyDisplayProductivity       DW 0
  24+ E90F 00 00        GalaxyDisplayRadius             DW 0
  25+ E911
  26+ E911 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  26+ E915 65 64 00
  27+ E918 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  27+ E91C 62 6C 65 00
  28+ E920 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  28+ E924 20 6B 6E 6F
  28+ E928 77 6E 00
  29+ E92B 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  29+ E92F 75 73 00
  30+ E932 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  30+ E936 64 00
  31+ E938 76 65 72 79  GalaxyDescList02A       DB "very",0
  31+ E93C 00
  32+ E93D 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  32+ E941 6C 79 00
  33+ E944 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  33+ E948 00
  34+ E949 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  34+ E94D 6F 6E 61 62
  34+ E951 6C 79 00
  35+ E954 00           GalaxyDescList02E       DB 0
  36+ E955 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  36+ E959 65 6E 74 00
  37+ E95D 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  37+ E961 00
  38+ E962 67 72 65 61  GalaxyDescList03C       DB "great",0
  38+ E966 74 00
  39+ E968 76 61 73 74  GalaxyDescList03D       DB "vast",0
  39+ E96C 00
  40+ E96D 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  40+ E971 00
  41+ E972 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  41+ E976 20 3C 32 38
  41+ E97A 3E 20 70 6C
  41+ E97E 61 6E 74 61
  41+ E982 74 69 6F 6E
  41+ E986 73 00
  42+ E988 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  42+ E98C 74 61 69 6E
  42+ E990 73 00
  43+ E992 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  43+ E996 00
  44+ E997 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  44+ E99B 20 66 6F 72
  44+ E99F 65 73 74 73
  44+ E9A3 00
  45+ E9A4 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  45+ E9A8 6E 73 00
  46+ E9AB 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  46+ E9AF 65 73 73 00
  47+ E9B3 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  47+ E9B7 69 6E 65 73
  47+ E9BB 73 00
  48+ E9BD 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  48+ E9C1 6E 67 20 74
  48+ E9C5 72 61 64 69
  48+ E9C9 74 69 6F 6E
  48+ E9CD 73 00
  49+ E9CF 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  49+ E9D3 68 69 6E 67
  49+ E9D7 20 6F 66 20
  49+ E9DB 3C 35 3E 00
  50+ E9DF 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  50+ E9E3 20 66 6F 72
  50+ E9E7 20 3C 35 3E
  50+ E9EB 00
  51+ E9EC 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  51+ E9F0 20 62 6C 65
  51+ E9F4 6E 64 65 72
  51+ E9F8 73 00
  52+ E9FA 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  52+ E9FE 69 73 74 73
  52+ EA02 00
  53+ EA03 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  53+ EA07 72 79 00
  54+ EA0A 64 69 73 63  GalaxyDescList06D       DB "discos",0
  54+ EA0E 6F 73 00
  55+ EA11 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  55+ EA15 00
  56+ EA16 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  56+ EA1A 69 6E 67 20
  56+ EA1E 74 72 65 65
  56+ EA22 00
  57+ EA23 63 72 61 62  GalaxyDescList07B       DB "crab",0
  57+ EA27 00
  58+ EA28 62 61 74 00  GalaxyDescList07C       DB "bat",0
  59+ EA2C 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  59+ EA30 74 00
  60+ EA32 25 52 00     GalaxyDescList07E       DB "%R",0
  61+ EA35 62 65 73 65  GalaxyDescList08A       DB "beset",0
  61+ EA39 74 00
  62+ EA3B 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  62+ EA3F 75 65 64 00
  63+ EA43 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  63+ EA47 67 65 64 00
  64+ EA4B 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  64+ EA4F 65 64 00
  65+ EA52 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  65+ EA56 72 67 65 64
  65+ EA5A 00
  66+ EA5B 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  66+ EA5F 20 63 69 76
  66+ EA63 69 6C 20 77
  66+ EA67 61 72 00
  67+ EA6A 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  67+ EA6E 20 3C 32 33
  67+ EA72 3E 20 3C 32
  67+ EA76 34 3E 73 00
  68+ EA7A 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  68+ EA7E 36 3E 20 64
  68+ EA82 69 73 65 61
  68+ EA86 73 65 00
  69+ EA89 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  69+ EA8D 20 65 61 72
  69+ EA91 74 68 71 75
  69+ EA95 61 6B 65 73
  69+ EA99 00
  70+ EA9A 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  70+ EA9E 20 73 6F 6C
  70+ EAA2 61 72 20 61
  70+ EAA6 63 74 69 76
  70+ EAAA 69 74 79 00
  71+ EAAE 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  71+ EAB2 3C 32 3E 20
  71+ EAB6 3C 33 3E 00
  72+ EABA 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  72+ EABE 25 49 20 3C
  72+ EAC2 32 33 3E 20
  72+ EAC6 3C 32 34 3E
  72+ EACA 00
  73+ EACB 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  73+ EACF 69 6E 68 61
  73+ EAD3 62 69 74 61
  73+ EAD7 6E 74 73 27
  73+ EADB 20 3C 32 35
  73+ EADF 3E 20 3C 34
  73+ EAE3 3E 00
  74+ EAE5 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  74+ EAE9 00
  75+ EAEA 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  75+ EAEE 3C 31 32 3E
  75+ EAF2 20 3C 31 33
  75+ EAF6 3E 00
  76+ EAF8 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  76+ EAFC 65 00
  77+ EAFE 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  77+ EB02 64 79 00
  78+ EB05 77 61 74 65  GalaxyDescList11C       DB "water",0
  78+ EB09 72 00
  79+ EB0B 62 72 65 77  GalaxyDescList11D       DB "brew",0
  79+ EB0F 00
  80+ EB10 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  80+ EB14 6C 65 20 62
  80+ EB18 6C 61 73 74
  80+ EB1C 65 72 73 00
  81+ EB20 25 52 00     GalaxyDescList12A       DB "%R",0
  82+ EB23 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  82+ EB27 32 34 3E 00
  83+ EB2B 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  83+ EB2F 52 00
  84+ EB31 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  84+ EB35 32 36 3E 00
  85+ EB39 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  85+ EB3D 20 25 52 00
  86+ EB41 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  86+ EB45 6C 6F 75 73
  86+ EB49 00
  87+ EB4A 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  87+ EB4E 69 63 00
  88+ EB51 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  88+ EB55 79 00
  89+ EB57 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  89+ EB5B 75 61 6C 00
  90+ EB5F 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  90+ EB63 74 69 6E 67
  90+ EB67 00
  91+ EB68 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  91+ EB6C 69 6E 65 00
  92+ EB70 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  92+ EB74 74 20 6C 69
  92+ EB78 66 65 00
  93+ EB7B 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  93+ EB7F 6E 6F 73 00
  94+ EB83 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  94+ EB87 63 6F 6D 73
  94+ EB8B 00
  95+ EB8C 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  95+ EB90 3E 20 00
  96+ EB93 25 48 00     GalaxyDescList15A       DB "%H",0
  97+ EB96 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  97+ EB9A 70 6C 61 6E
  97+ EB9E 65 74 20 25
  97+ EBA2 48 00
  98+ EBA4 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  98+ EBA8 77 6F 72 6C
  98+ EBAC 64 20 25 48
  98+ EBB0 00
  99+ EBB1 54 68 69 73  GalaxyDescList15D       DB "This planet",0
  99+ EBB5 20 70 6C 61
  99+ EBB9 6E 65 74 00
 100+ EBBD 54 68 69 73  GalaxyDescList15E       DB "This world",0
 100+ EBC1 20 77 6F 72
 100+ EBC5 6C 64 00
 101+ EBC8 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 101+ EBCC 72 65 6D 61
 101+ EBD0 72 6B 61 62
 101+ EBD4 6C 65 00
 102+ EBD7 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 102+ EBDB 69 6E 67 00
 103+ EBDF 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 103+ EBE3 6C 00
 104+ EBE5 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 104+ EBE9 69 6F 75 73
 104+ EBED 00
 105+ EBEE 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 105+ EBF2 6F 6C 74 69
 105+ EBF6 6E 67 00
 106+ EBF9 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 106+ EBFD 65 74 00
 107+ EC00 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 107+ EC04 64 00
 108+ EC06 70 6C 61 63  GalaxyDescList17C       DB "place",0
 108+ EC0A 65 00
 109+ EC0C 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 109+ EC10 6C 65 20 70
 109+ EC14 6C 61 6E 65
 109+ EC18 74 00
 110+ EC1A 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 110+ EC1E 00
 111+ EC1F 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 111+ EC23 00
 112+ EC24 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 112+ EC28 00
 113+ EC29 67 72 75 62  GalaxyDescList18C       DB "grub",0
 113+ EC2D 00
 114+ EC2E 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 115+ EC32 25 52 00     GalaxyDescList18E       DB "%R",0
 116+ EC35 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 116+ EC39 00
 117+ EC3A 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 117+ EC3E 20 67 72 61
 117+ EC42 64 75 61 74
 117+ EC46 65 00
 118+ EC48 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 119+ EC4C 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 119+ EC50 6C 00
 120+ EC52 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 120+ EC56 00
 121+ EC57 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 121+ EC5B 69 63 61 6C
 121+ EC5F 00
 122+ EC60 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 122+ EC64 65 00
 123+ EC66 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 123+ EC6A 00
 124+ EC6B 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 124+ EC6F 6E 65 74 72
 124+ EC73 61 62 6C 65
 124+ EC77 00
 125+ EC78 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 125+ EC7C 65 72 61 6E
 125+ EC80 74 00
 126+ EC82 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 126+ EC86 79 00
 127+ EC88 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 127+ EC8C 64 00
 128+ EC8E 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 128+ EC92 75 61 6C 00
 129+ EC96 73 74 72 61  GalaxyDescList21D       DB "strange",0
 129+ EC9A 6E 67 65 00
 130+ EC9E 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 130+ ECA2 6C 69 61 72
 130+ ECA6 00
 131+ ECA7 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 131+ ECAB 75 65 6E 74
 131+ ECAF 00
 132+ ECB0 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 132+ ECB4 73 69 6F 6E
 132+ ECB8 61 6C 00
 133+ ECBB 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 133+ ECBF 65 64 69 63
 133+ ECC3 74 61 62 6C
 133+ ECC7 65 00
 134+ ECC9 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 134+ ECCD 64 66 75 6C
 134+ ECD1 00
 135+ ECD2 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 135+ ECD6 6C 79 00
 136+ ECD9 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 136+ ECDD 3C 30 3E 20
 136+ ECE1 66 6F 72 20
 136+ ECE5 3C 39 3E 00
 137+ ECE9 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 137+ ECED 3C 30 3E 20
 137+ ECF1 66 6F 72 20
 137+ ECF5 3C 39 3E 20
 137+ ECF9 61 6E 64 20
 137+ ECFD 3C 39 3E 00
 138+ ED01 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 138+ ED05 62 79 20 3C
 138+ ED09 38 3E 00
 139+ ED0C 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 139+ ED10 3C 30 3E 20
 139+ ED14 66 6F 72 20
 139+ ED18 3C 39 3E 20
 139+ ED1C 62 75 74 20
 139+ ED20 3C 37 3E 20
 139+ ED24 62 79 20 3C
 139+ ED28 38 3E 00
 140+ ED2B 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 140+ ED2F 3E 20 3C 31
 140+ ED33 36 3E 00
 141+ ED36 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 141+ ED3A 00
 142+ ED3B 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 142+ ED3F 74 61 69 6E
 142+ ED43 00
 143+ ED44 65 64 69 62  GalaxyDescList24C       DB "edible",0
 143+ ED48 6C 65 00
 144+ ED4B 74 72 65 65  GalaxyDescList24D       DB "tree",0
 144+ ED4F 00
 145+ ED50 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 145+ ED54 74 65 64 00
 146+ ED58 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 146+ ED5C 00
 147+ ED5D 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 147+ ED61 00
 148+ ED62 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 148+ ED66 69 64 00
 149+ ED69 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 149+ ED6D 00
 150+ ED6E 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 150+ ED72 00
 151+ ED73 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 151+ ED77 65 6E 74 00
 152+ ED7B 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 152+ ED7F 70 74 69 6F
 152+ ED83 6E 61 6C 00
 153+ ED87 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 153+ ED8B 6E 74 72 69
 153+ ED8F 63 00
 154+ ED91 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 154+ ED95 61 69 6E 65
 154+ ED99 64 00
 155+ ED9B 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 155+ ED9F 00
 156+ EDA0 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 156+ EDA4 65 72 00
 157+ EDA7 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 157+ EDAB 6C 79 00
 158+ EDAE 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 158+ EDB2 00
 159+ EDB3 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 159+ EDB7 61 6C 00
 160+ EDBA 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 160+ EDBE 6F 75 73 00
 161+ EDC2 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 161+ EDC6 69 6E 67 20
 161+ EDCA 6D 65 74 65
 161+ EDCE 72 73 00
 162+ EDD1 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 162+ EDD5 20 63 6C 6F
 162+ EDD9 75 64 73 00
 163+ EDDD 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 163+ EDE1 62 65 72 67
 163+ EDE5 73 00
 164+ EDE7 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 164+ EDEB 20 66 6F 72
 164+ EDEF 6D 61 74 69
 164+ EDF3 6F 6E 73 00
 165+ EDF7 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 165+ EDFB 61 6E 6F 65
 165+ EDFF 73 00
 166+ EE01 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 166+ EE05 74 00
 167+ EE07 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 167+ EE0B 70 00
 168+ EE0D 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 168+ EE11 6E 61 00
 169+ EE14 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 169+ EE18 00
 170+ EE19 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 170+ EE1D 65 64 00
 171+ EE20 25 52 00     GalaxyDescList30A       DB "%R",0
 172+ EE23 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 172+ EE27 52 00
 173+ EE29 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 173+ EE2D 32 36 3E 00
 174+ EE31 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 174+ EE35 62 69 74 61
 174+ EE39 6E 74 00
 175+ EE3C 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 175+ EE40 52 00
 176+ EE42 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 176+ EE46 77 00
 177+ EE48 62 65 61 73  GalaxyDescList31B       DB "beast",0
 177+ EE4C 74 00
 178+ EE4E 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 178+ EE52 6E 00
 179+ EE54 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 179+ EE58 65 00
 180+ EE5A 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 180+ EE5E 00
 181+ EE5F 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 181+ EE63 61 72 64 00
 182+ EE67 63 61 74 00  GalaxyDescList32B       DB "cat",0
 183+ EE6B 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 183+ EE6F 65 79 00
 184+ EE72 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 184+ EE76 00
 185+ EE77 66 69 73 68  GalaxyDescList32E       DB "fish",0
 185+ EE7B 00
 186+ EE7C 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 186+ EE80 20 3C 31 30
 186+ EE84 3E 00
 187+ EE86 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 187+ EE8A 33 30 3E 20
 187+ EE8E 3C 33 33 3E
 187+ EE92 00
 188+ EE93 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 188+ EE97 3C 31 32 3E
 188+ EE9B 20 3C 33 31
 188+ EE9F 3E 20 3C 33
 188+ EEA3 33 3E 00
 189+ EEA6 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 189+ EEAA 20 3C 33 35
 189+ EEAE 3E 00
 190+ EEB0 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 190+ EEB4 20 3C 31 30
 190+ EEB8 3E 00
 191+ EEBA 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 191+ EEBE 00
 192+ EEBF 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 192+ EEC3 65 74 00
 193+ EEC6 73 74 65 61  GalaxyDescList34C       DB "steak",0
 193+ EECA 6B 00
 194+ EECC 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 194+ EED0 65 72 73 00
 195+ EED4 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 195+ EED8 00
 196+ EED9 69 63 65 00  GalaxyDescList35A       DB "ice",0
 197+ EEDD 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 198+ EEE1 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 198+ EEE5 2D 47 00
 199+ EEE8 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 199+ EEEC 75 6D 00
 200+ EEEF 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 200+ EEF3 6C 74 72 61
 200+ EEF7 00
 201+ EEF8 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 201+ EEFC 65 79 00
 202+ EEFF 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 202+ EF03 6B 65 74 00
 203+ EF07 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 203+ EF0B 74 65 00
 204+ EF0E 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 204+ EF12 00
 205+ EF13 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 205+ EF17 69 73 00
 206+ EF1A
 207+ EF1A 11 E9 18 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 207+ EF1E 20 E9 2B E9
 207+ EF22 32 E9
 208+ EF24 38 E9 3D E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 208+ EF28 44 E9 49 E9
 208+ EF2C 54 E9
 209+ EF2E 55 E9 5D E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 209+ EF32 62 E9 68 E9
 209+ EF36 6D E9
 210+ EF38 72 E9 88 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 210+ EF3C 92 E9 97 E9
 210+ EF40 A4 E9
 211+ EF42 AB E9 B3 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 211+ EF46 BD E9 CF E9
 211+ EF4A DF E9
 212+ EF4C EC E9 FA E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 212+ EF50 03 EA 0A EA
 212+ EF54 11 EA
 213+ EF56 16 EA 23 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 213+ EF5A 28 EA 2C EA
 213+ EF5E 32 EA
 214+ EF60 35 EA 3B EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 214+ EF64 43 EA 4B EA
 214+ EF68 52 EA
 215+ EF6A 5B EA 6A EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 215+ EF6E 7A EA 89 EA
 215+ EF72 9A EA
 216+ EF74 AE EA BA EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 216+ EF78 CB EA E5 EA
 216+ EF7C EA EA
 217+ EF7E F8 EA FE EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 217+ EF82 05 EB 0B EB
 217+ EF86 10 EB
 218+ EF88 20 EB 23 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 218+ EF8C 2B EB 31 EB
 218+ EF90 39 EB
 219+ EF92 41 EB 4A EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 219+ EF96 51 EB 57 EB
 219+ EF9A 5F EB
 220+ EF9C 68 EB 70 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 220+ EFA0 7B EB 83 EB
 220+ EFA4 8C EB
 221+ EFA6 93 EB 96 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 221+ EFAA A4 EB B1 EB
 221+ EFAE BD EB
 222+ EFB0 C8 EB D7 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 222+ EFB4 DF EB E5 EB
 222+ EFB8 EE EB
 223+ EFBA F9 EB 00 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 223+ EFBE 06 EC 0C EC
 223+ EFC2 1A EC
 224+ EFC4 1F EC 24 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 224+ EFC8 29 EC 2E EC
 224+ EFCC 32 EC
 225+ EFCE 35 EC 3A EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 225+ EFD2 48 EC 4C EC
 225+ EFD6 52 EC
 226+ EFD8 57 EC 60 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 226+ EFDC 66 EC 6B EC
 226+ EFE0 78 EC
 227+ EFE2 82 EC 88 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 227+ EFE6 8E EC 96 EC
 227+ EFEA 9E EC
 228+ EFEC A7 EC B0 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 228+ EFF0 BB EC C9 EC
 228+ EFF4 D2 EC
 229+ EFF6 D9 EC E9 EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 229+ EFFA 01 ED 0C ED
 229+ EFFE 2B ED
 230+ F000 36 ED 3B ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 230+ F004 44 ED 4B ED
 230+ F008 50 ED
 231+ F00A 58 ED 5D ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 231+ F00E 62 ED 69 ED
 231+ F012 6E ED
 232+ F014 73 ED 7B ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 232+ F018 87 ED 91 ED
 232+ F01C 9B ED
 233+ F01E A0 ED A7 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 233+ F022 AE ED B3 ED
 233+ F026 BA ED
 234+ F028 C2 ED D1 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 234+ F02C DD ED E7 ED
 234+ F030 F7 ED
 235+ F032 01 EE 07 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 235+ F036 0D EE 14 EE
 235+ F03A 19 EE
 236+ F03C 20 EE 23 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 236+ F040 29 EE 31 EE
 236+ F044 3C EE
 237+ F046 42 EE 48 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 237+ F04A 4E EE 54 EE
 237+ F04E 5A EE
 238+ F050 5F EE 67 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 238+ F054 6B EE 72 EE
 238+ F058 77 EE
 239+ F05A 7C EE 86 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 239+ F05E 93 EE A6 EE
 239+ F062 B0 EE
 240+ F064 BA EE BF EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 240+ F068 C6 EE CC EE
 240+ F06C D4 EE
 241+ F06E D9 EE DD EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 241+ F072 E1 EE E8 EE
 241+ F076 EF EE
 242+ F078 F8 EE FF EE                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 242+ F07C 07 EF 0E EF
 242+ F080 13 EF
 243+ F082
 244+ F082 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 244+ F086 65 20 00
 245+ F089 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 245+ F08D 63 65 20 00
 246+ F091 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 246+ F095 6C 20 00
 247+ F098 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 247+ F09C 6E 20 00
 248+ F09F 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 248+ F0A3 00
 249+ F0A4 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 249+ F0A8 6F 77 20 00
 250+ F0AC 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 250+ F0B0 20 00
 251+ F0B2 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 251+ F0B6 6B 20 00
 252+ F0B9 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 252+ F0BD 6C 65 73 73
 252+ F0C1 20 00
 253+ F0C3 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 253+ F0C7 79 20 00
 254+ F0CA 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 254+ F0CE 45 79 65 64
 254+ F0D2 20 00
 255+ F0D4 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 255+ F0D8 65 64 20 00
 256+ F0DC 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 256+ F0E0 20 00
 257+ F0E2 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 257+ F0E6 00
 258+ F0E7 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 258+ F0EB 79 20 00
 259+ F0EE 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 259+ F0F2 6E 74 00
 260+ F0F5 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 260+ F0F9 00
 261+ F0FA 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 261+ F0FE 72 64 00
 262+ F101 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 262+ F105 74 65 72 00
 263+ F109 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 263+ F10D 00
 264+ F10E 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 264+ F112 6E 6F 69 64
 264+ F116 00
 265+ F117 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 265+ F11B 6E 65 00
 266+ F11E 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 266+ F122 63 74 00
 267+ F125 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 267+ F129 6E 20 43 6F
 267+ F12D 6C 6F 6E 61
 267+ F131 6C 00
 268+ F133
 269+ F133 82 F0 89 F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 269+ F137 91 F0
 270+ F139 98 F0 9F F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 270+ F13D A4 F0 AC F0
 270+ F141 B2 F0 B9 F0
 271+ F145 C3 F0 CA F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 271+ F149 D4 F0 DC F0
 271+ F14D E2 F0 E7 F0
 272+ F151 EE F0 F5 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 272+ F155 FA F0 01 F1
 272+ F159 09 F1 0E F1
 272+ F15D 17 F1 1E F1
 273+ F161 25 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 274+ F163 00 00 00...  GalaxySpecies           DS 32
 275+ F183 00                                   DB 0
 276+ F184 00 00 00...  GalaxyPlanetDescription DS 300
 277+ F2B0 00                                   DB 0
 278+ F2B1 00 00 00...  GalaxyPlanetSource      DS 300,0
 279+ F3DD 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 279+ F3E1 20 69 73 20
 279+ F3E5 3C 32 32 3E
 279+ F3E9 00
 280+ F3EA
 281+ F3EA
 282+ F3EA D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 283+ F3EB 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 284+ F3EC 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 285+ F3ED 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 286+ F3EE FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 287+ F3EF 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 288+ F3F0 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 289+ F3F1 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 290+ F3F2 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 291+ F3F3 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 292+ F3F4 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 293+ F3F5 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 294+ F3F6 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 295+ F3F7 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 296+ F3F8 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 297+ F3F9 A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 298+ F3FA 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 299+ F3FB 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 300+ F3FC 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 301+ F3FD C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 302+ F3FE B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 303+ F3FF 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 304+ F400 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 305+ F401 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 306+ F402 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 307+ F403 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 308+ F404 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 309+ F405
 310+ F405                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F405
   2++F405              EQ_FUEL                 EQU 0
   3++F405              EQ_MISSILE              EQU 1
   4++F405              EQ_CARGO_BAY            EQU 2
   5++F405              EQ_ECM                  EQU 3
   6++F405              EQ_FUEL_SCOOPS          EQU 4
   7++F405              EQ_ESCAPE_POD           EQU 5
   8++F405              EQ_ENERGY_BOMB          EQU 6
   9++F405              EQ_ENERGY_UNIT          EQU 7
  10++F405              EQ_DOCK_COMP            EQU 8
  11++F405              EQ_GAL_DRIVE            EQU 9
  12++F405              EQ_FRONT_PULSE          EQU 10
  13++F405              EQ_REAR_PULSE           EQU 11
  14++F405              EQ_LEFT_PULSE           EQU 12
  15++F405              EQ_RIGHT_PULSE          EQU 13
  16++F405              EQ_FRONT_BEAM           EQU 14
  17++F405              EQ_REAR_BEAM            EQU 15
  18++F405              EQ_LEFT_BEAM            EQU 16
  19++F405              EQ_RIGHT_BEAM           EQU 17
  20++F405              EQ_FRONT_MINING         EQU 18
  21++F405              EQ_REAR_MINING          EQU 19
  22++F405              EQ_LEFT_MINING          EQU 20
  23++F405              EQ_RIGHT_MINING         EQU 21
  24++F405              EQ_FRONT_MILITARY       EQU 22
  25++F405              EQ_REAR_MILITARY        EQU 23
  26++F405              EQ_LEFT_MILITARY        EQU 24
  27++F405              EQ_RIGHT_MILITARY       EQU 25
  28++F405
  29++F405              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F405
# file closed: ././Data/EquipmentEquates.asm
 311+ F405
 312+ F405              EquipNameTableRowLen    EQU 8
 313+ F405 A5 9F 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 313+ F409 00 00 00 00
 314+ F40D 5A A2 00 00                          DW  WordMissile,    0,              0,          0
 314+ F411 00 00 00 00
 315+ F415 8A 9F 9B 9F                          DW  WordLarge,      WordCargo,      WordBay,    0
 315+ F419 A1 9F 00 00
 316+ F41D B1 9F B8 9F                          DW  WordECM,        WordSystem,     0,          0
 316+ F421 00 00 00 00
 317+ F425 A5 9F AA 9F                          DW  WordFuel,       WordScoops,     0,          0
 317+ F429 00 00 00 00
 318+ F42D 90 9F 97 9F                          DW  WordEscape,     WordPod,        0,          0
 318+ F431 00 00 00 00
 319+ F435 BF 9F C6 9F                          DW  WordEnergy,     WordBomb,       0,          0
 319+ F439 00 00 00 00
 320+ F43D 24 A0 BF 9F                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 320+ F441 F2 9F 00 00
 321+ F445 FE 9F 06 A0                          DW  WordDocking,    WordComputers,  0,          0
 321+ F449 00 00 00 00
 322+ F44D 1B A0 62 A2                          DW  WordGalactic,   WordHyperdrive, 0,          0
 322+ F451 00 00 00 00
 323+ F455 74 9F D1 9F                          DW  WordFront,      WordPulse,      WordLaser,  0
 323+ F459 CB 9F 00 00
 324+ F45D 85 9F D1 9F                          DW  WordRear,       WordPulse,      WordLaser,  0
 324+ F461 CB 9F 00 00
 325+ F465 80 9F D1 9F                          DW  WordLeft,       WordPulse,      WordLaser,  0
 325+ F469 CB 9F 00 00
 326+ F46D 7A 9F D1 9F                          DW  WordRight,      WordPulse,      WordLaser,  0
 326+ F471 CB 9F 00 00
 327+ F475 74 9F D7 9F                          DW  WordFront,      WordBeam,       WordLaser,  0
 327+ F479 CB 9F 00 00
 328+ F47D 85 9F D7 9F                          DW  WordRear,       WordBeam,       WordLaser,  0
 328+ F481 CB 9F 00 00
 329+ F485 80 9F D7 9F                          DW  WordLeft,       WordBeam,       WordLaser,  0
 329+ F489 CB 9F 00 00
 330+ F48D 7A 9F D7 9F                          DW  WordRight,      WordBeam,       WordLaser,  0
 330+ F491 CB 9F 00 00
 331+ F495 74 9F E4 9F                          DW  WordFront,      WordMining,     WordLaser,  0
 331+ F499 CB 9F 00 00
 332+ F49D 85 9F E4 9F                          DW  WordRear,       WordMining,     WordLaser,  0
 332+ F4A1 CB 9F 00 00
 333+ F4A5 80 9F E4 9F                          DW  WordLeft,       WordMining,     WordLaser,  0
 333+ F4A9 CB 9F 00 00
 334+ F4AD 7A 9F E4 9F                          DW  WordRight,      WordMining,     WordLaser,  0
 334+ F4B1 CB 9F 00 00
 335+ F4B5 74 9F 6D A2                          DW  WordFront,      WordMilitary,   WordLaser,  0
 335+ F4B9 CB 9F 00 00
 336+ F4BD 85 9F 6D A2                          DW  WordRear,       WordMilitary,   WordLaser,  0
 336+ F4C1 CB 9F 00 00
 337+ F4C5 80 9F 6D A2                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 337+ F4C9 CB 9F 00 00
 338+ F4CD 7A 9F 6D A2                          DW  WordRight,      WordMilitary,   WordLaser,  0
 338+ F4D1 CB 9F 00 00
 339+ F4D5
 340+ F4D5              ;Each row is 7 bytes
 341+ F4D5              ;                                                               12345  6  789012345678901
 342+ F4D5              ;	canbuy;
 343+ F4D5              ;	y;
 344+ F4D5              ;	show;
 345+ F4D5              ;	level;
 346+ F4D5              ;	price 2 bytes;
 347+ F4D5              ;	type;
 348+ F4D5              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 349+ F4D5              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 350+ F4D5              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 351+ F4D5              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 352+ F4D5              ;                           c  y  s  t
 353+ F4D5              ;                           a  p  h  e                                            fi     P
 354+ F4D5              ;                           n  o  o  c                                            tt     o
 355+ F4D5              ;                           B  s  w  h  price                  type               ed     s
 356+ F4D5 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 356+ F4D9 02 00 00 00
 356+ F4DD FF 00 00 00
 356+ F4E1 00 00 00 00
 357+ F4E5 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4E9 2C 01 01 00
 357+ F4ED FF 00 00 00
 357+ F4F1 00 00 00 00
 358+ F4F5 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4F9 A0 0F 02 00
 358+ F4FD FF 00 00 00
 358+ F501 00 00 00 00
 359+ F505 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F509 70 17 03 00
 359+ F50D FF 00 00 00
 359+ F511 00 00 00 00
 360+ F515 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F519 82 14 04 00
 360+ F51D FF 00 00 00
 360+ F521 00 00 00 00
 361+ F525 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F529 10 27 05 00
 361+ F52D FF 00 00 00
 361+ F531 00 00 00 00
 362+ F535 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F539 28 23 06 00
 362+ F53D FF 00 00 00
 362+ F541 00 00 00 00
 363+ F545 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F549 98 3A 07 00
 363+ F54D FF 00 00 00
 363+ F551 00 00 00 00
 364+ F555 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F559 98 3A 08 00
 364+ F55D FF 00 00 00
 364+ F561 00 00 00 00
 365+ F565 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F569 50 C3 09 00
 365+ F56D FF 00 00 00
 365+ F571 00 00 00 00
 366+ F575 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F579 A0 0F 0A 00
 366+ F57D 00 00 00 00
 366+ F581 00 00 00 00
 367+ F585 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F589 A0 0F 0B 00
 367+ F58D 01 00 00 00
 367+ F591 00 00 00 00
 368+ F595 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F599 A0 0F 0C 00
 368+ F59D 02 00 00 00
 368+ F5A1 00 00 00 00
 369+ F5A5 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F5A9 A0 0F 0D 00
 369+ F5AD 03 00 00 00
 369+ F5B1 00 00 00 00
 370+ F5B5 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5B9 10 27 0E 00
 370+ F5BD 00 00 00 00
 370+ F5C1 00 00 00 00
 371+ F5C5 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5C9 10 27 0F 00
 371+ F5CD 01 00 00 00
 371+ F5D1 00 00 00 00
 372+ F5D5 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5D9 10 27 10 00
 372+ F5DD 02 00 00 00
 372+ F5E1 00 00 00 00
 373+ F5E5 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5E9 10 27 11 00
 373+ F5ED 03 00 00 00
 373+ F5F1 00 00 00 00
 374+ F5F5 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5F9 40 1F 12 00
 374+ F5FD 00 00 00 00
 374+ F601 00 00 00 00
 375+ F605 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F609 40 1F 13 00
 375+ F60D 01 00 00 00
 375+ F611 00 00 00 00
 376+ F615 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F619 40 1F 14 00
 376+ F61D 02 00 00 00
 376+ F621 00 00 00 00
 377+ F625 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F629 40 1F 15 00
 377+ F62D 03 00 00 00
 377+ F631 00 00 00 00
 378+ F635 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F639 60 EA 16 00
 378+ F63D 00 00 00 00
 378+ F641 00 00 00 00
 379+ F645 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F649 60 EA 17 00
 379+ F64D 01 00 00 00
 379+ F651 00 00 00 00
 380+ F655 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F659 60 EA 18 00
 380+ F65D 02 00 00 00
 380+ F661 00 00 00 00
 381+ F665 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F669 60 EA 19 00
 381+ F66D 03 00 00 00
 381+ F671 00 00 00 00
 382+ F675              ShipEquipTableRowLen    EQU 16
 383+ F675              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 384+ F675
 385+ F675              ;------------------------------------------------------------------------------------------------------------------------------------
 386+ F675 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 387+ F676 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 388+ F677 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 389+ F678 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 390+ F679              GalaxySeedRandom:
 391+ F679              ;------------------------------------------------------------------------------------------------------------------------------------
 392+ F679 CD 82 9C     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 393+ F67C 18 03                                jr		GetDigramWorkingSeed
 394+ F67E CD 9A 9C     GetDigramSystemSeed:    call	copy_system_to_working
 395+ F681 11 98 A4     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 396+ F684 06 03                                ld		b,3
 397+ F686 3A 96 98                             ld		a,(WorkingSeeds)
 398+ F689 E6 40                                and		$40
 399+ F68B 28 03                                jr		z,.SmallSizeName
 400+ F68D CD B9 A4     .LargeSizeName:         call	NamingLoop
 401+ F690 CD B9 A4     .SmallSizeName:         call	NamingLoop
 402+ F693 CD B9 A4                             call	NamingLoop
 403+ F696 CD B9 A4                             call	NamingLoop
 404+ F699 EB           .DoneName:              ex		de,hl
 405+ F69A 36 00                                ld		(hl),0
 406+ F69C EB                                   ex		de,hl
 407+ F69D C9                                   ret
 408+ F69E
 409+ F69E 11 75 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 410+ F6A1              ; Uses registers a,b and hl
 411+ F6A1 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 412+ F6A2 3A 75 F6                             ld      a,(GalaxyRandSeed)
 413+ F6A5 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 414+ F6A7 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 415+ F6A8 21 77 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 416+ F6AB 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 417+ F6AC 32 75 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 418+ F6AF 78                                   ld      a,b
 419+ F6B0 32 77 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 420+ F6B3 3A 76 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 421+ F6B6 47                                   ld      b,a                                             ; b = r1
 422+ F6B7 21 78 F6                             ld      hl,GalaxyRandSeed3
 423+ F6BA 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 424+ F6BB 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 425+ F6BE 4F                                   ld      c,a
 426+ F6BF 78                                   ld      a,b
 427+ F6C0 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 428+ F6C3 79                                   ld      a,c
 429+ F6C4 C9                                   ret
 430+ F6C5
 431+ F6C5              ;------------------------------------------------------------------------------------------------------------------------------------
 432+ F6C5 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 433+ F6C7 ED 31                                add     hl,a
 434+ F6C9 7E                                   ld      a,(hl)              ;  Fetch low byte
 435+ F6CA 47                                   ld      b,a
 436+ F6CB 23                                   inc     hl
 437+ F6CC 7E                                   ld      a,(hl)              ;  Fetch high byte
 438+ F6CD 68                                   ld      l,b
 439+ F6CE 67                                   ld      h,a
 440+ F6CF 7E           GalaxyCopyLoop:         ld      a,(hl)
 441+ F6D0 FE 00                                cp      0
 442+ F6D2 C8                                   ret     z
 443+ F6D3 12                                   ld      (de),a
 444+ F6D4 23                                   inc     hl
 445+ F6D5 13                                   inc     de
 446+ F6D6 18 F7                                jr      GalaxyCopyLoop
 447+ F6D8              ;------------------------------------------------------------------------------------------------------------------------------------
 448+ F6D8 11 63 F1     galaxy_get_species:     ld      de,GalaxySpecies
 449+ F6DB 3E 28                                ld      a,"("
 450+ F6DD 12                                   ld      (de),a
 451+ F6DE 13                                   inc     de
 452+ F6DF 3A FB E8                             ld      a,(GalaxyWorkingSeed+4)
 453+ F6E2 CB 7F                                bit     7,a
 454+ F6E4 20 0A                                jr      nz,.NonHuman
 455+ F6E6 21 61 F1                             ld      hl,GalaxyInhabitantHumanIx
 456+ F6E9 AF                                   xor     a
 457+ F6EA CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 458+ F6ED C3 4B F7                             jp      .galaxy_species_exit
 459+ F6F0 3A FC E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 460+ F6F3 CB 3F                                srl     a
 461+ F6F5 CB 3F                                srl     a
 462+ F6F7 E6 07                                and     $07
 463+ F6F9 FE 03                                cp      3
 464+ F6FB 30 0A                                jr      nc,.NotDesc1
 465+ F6FD 21 33 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 466+ F700 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 467+ F703 3E 20                                ld      a," "
 468+ F705 12                                   ld      (de),a
 469+ F706 13                                   inc     de
 470+ F707 3A FC E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 471+ F70A CB 3F                                srl     a
 472+ F70C CB 3F                                srl     a
 473+ F70E CB 3F                                srl     a
 474+ F710 CB 3F                                srl     a
 475+ F712 CB 3F                                srl     a
 476+ F714 FE 06                                cp      6
 477+ F716 30 0A                                jr      nc,.NotDesc2
 478+ F718 21 39 F1                             ld      hl,GalaxyInhabitantDesc2Ix
 479+ F71B CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 480+ F71E 3E 20                                ld      a," "
 481+ F720 12                                   ld      (de),a
 482+ F721 13                                   inc     de
 483+ F722 3A F8 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 484+ F725 47                                   ld      b,a
 485+ F726 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 486+ F729 A8                                   xor     b
 487+ F72A E6 07                                and     $07
 488+ F72C F5                                   push    af
 489+ F72D FE 06                                cp      6
 490+ F72F 30 0A                                jr      nc,.NotDesc3
 491+ F731 21 45 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 492+ F734 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 493+ F737 3E 20                                ld      a," "
 494+ F739 12                                   ld      (de),a
 495+ F73A 13                                   inc     de
 496+ F73B F1           .NotDesc3:              pop     af
 497+ F73C 47                                   ld      b,a
 498+ F73D 3A FC E8                             ld      a,(GalaxyWorkingSeed+5)
 499+ F740 E6 03                                and     $03
 500+ F742 80                                   add     a,b
 501+ F743 E6 07                                and     $07
 502+ F745 21 51 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 503+ F748 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 504+ F74B 3E 73        .galaxy_species_exit:   ld      a,"s"
 505+ F74D 12                                   ld      (de),a
 506+ F74E 13                                   inc     de
 507+ F74F 3E 29                                ld      a,")"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 AF                                   xor     a
 511+ F754 12                                   ld      (de),a
 512+ F755 C9                                   ret
 513+ F756
 514+ F756
 515+ F756              ; To copy seed, loops from 3 to 0
 516+ F756              ; copy seed X + 2 to target X
 517+ F756              ; x = x -1
 518+ F756
 519+ F756              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 520+ F756
 521+ F756              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 522+ F756 23                                   inc		hl
 523+ F757 7E                                   ld		a,(hl)
 524+ F758 FE 00                                cp		0
 525+ F75A C8                                   ret		z
 526+ F75B FE 5B                                cp		'Z'+1
 527+ F75D 30 F7                                jr		nc,GalaxyCapitaliseString
 528+ F75F FE 41                                cp		'A'
 529+ F761 38 F3                                jr		c,GalaxyCapitaliseString
 530+ F763 C6 20        .LowerCase:             add		a,'a'-'A'
 531+ F765 77                                   ld		(hl),a
 532+ F766 18 EE                                jr		GalaxyCapitaliseString
 533+ F768
 534+ F768
 535+ F768              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 536+ F768                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 537+ F768                                      ;cp      $FF
 538+ F768                                      ;jr      z,.NoSystemFound
 539+ F768 3A 98 98     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 540+ F76B 32 75 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 541+ F76E 3A 99 98                             ld      a,(WorkingSeeds+3)                              ;
 542+ F771 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 543+ F774 3A 9A 98                             ld      a,(WorkingSeeds+4)                              ;
 544+ F777 32 77 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 545+ F77A 3A 9B 98                             ld      a,(WorkingSeeds+5)                              ;
 546+ F77D 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 547+ F780 C9                                   ret
 548+ F781              ; For later......
 549+ F781 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 550+ F783 F5           .GalaxyExpandDesc:      push    af
 551+ F784 47                                   ld      b,a                                             ; b = 6502 X reg
 552+ F785 C5                                   push    bc                                              ; save Y reg
 553+ F786
 554+ F786              ;------------------------------------------------------------------------------------------------------------------------------------
 555+ F786              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 556+ F786              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 557+ F786 ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 558+ F78A CD 55 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 559+ F78D                                      ;cp      $FF
 560+ F78D                                      ;jr      z,.NoSystemFound
 561+ F78D              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 562+ F78D
 563+ F78D
 564+ F78D
 565+ F78D              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 566+ F78D
 567+ F78D 00 00 00...  GalaxyNameCopy          DS      30
 568+ F7AB
 569+ F7AB 1E 00        ExpandAtHLToE:          ld      e,0
 570+ F7AD 7E           .ExpandTokenLoop:       ld      a,(hl)
 571+ F7AE FE 3E                                cp      ">"
 572+ F7B0 C8                                   ret     z
 573+ F7B1 23                                   inc     hl
 574+ F7B2 16 0A                                ld      d,10
 575+ F7B4 ED 30                                mul
 576+ F7B6 D6 30                                sub     "0"
 577+ F7B8 83                                   add     a,e
 578+ F7B9 5F                                   ld      e,a
 579+ F7BA 18 F1                                jr      .ExpandTokenLoop
 580+ F7BC
 581+ F7BC E5           SelectTokenToHL:        push    hl                                          ;+1
 582+ F7BD C5                                   push    bc                                          ;+2
 583+ F7BE CD A1 F6                             call    GalaxyDoRandom
 584+ F7C1 C1                                   pop     bc                                          ;+1
 585+ F7C2 E1                                   pop     hl                                          ;+0
 586+ F7C3 16 00        .CalcOptionAToD:        ld      d,0
 587+ F7C5 FE 33                                cp      $33
 588+ F7C7 DA CB F7                             jp      c,.Check66
 589+ F7CA 14           .IsGTE33:               inc     d
 590+ F7CB FE 66        .Check66:               cp      $66
 591+ F7CD DA D1 F7                             jp      c,.Check99
 592+ F7D0 14           .IsGTE66:               inc     d
 593+ F7D1 FE 99        .Check99:               cp      $99
 594+ F7D3 DA D7 F7     .IsGTE99:               jp      c,.CheckCC
 595+ F7D6 14                                   inc     d
 596+ F7D7 FE CC        .CheckCC:               cp      $CC
 597+ F7D9 38 01                                jr      c,.TokenIdToAddress
 598+ F7DB 14           .ItGETCC:               inc     d
 599+ F7DC 21 1A EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 600+ F7DF 7B                                   ld      a,e
 601+ F7E0 CB 27                                sla     a                                               ; x 2
 602+ F7E2 ED 31                                add     hl,a                                            ; hl + a * 2
 603+ F7E4 ED 31                                add     hl,a                                            ; hl + a * 4
 604+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 6
 605+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 8
 606+ F7EA ED 31                                add     hl,a                                            ; hl + a * 10
 607+ F7EC 7A                                   ld      a,d
 608+ F7ED ED 31                                add     hl,a
 609+ F7EF ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 610+ F7F1 7E           .LookUpDataFromTable:   ld      a,(hl)
 611+ F7F2 DD 6F                                ld      ixl,a
 612+ F7F4 23                                   inc     hl
 613+ F7F5 7E                                   ld      a,(hl)
 614+ F7F6 DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 615+ F7F8 DD E5                                push    ix                                              ;+2
 616+ F7FA E1                                   pop     hl                                              ;+1
 617+ F7FB C9                                   ret
 618+ F7FC              ;------------------------------------------------------------------------------------------------------------------------------------
 619+ F7FC E5           ProcessHSymbol:         push    hl                                              ;+1
 620+ F7FD D5                                   push    de                                              ;+2
 621+ F7FE C5                                   push    bc                                              ;+3
 622+ F7FF 21 8D F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 623+ F802 FD 54                                ld      d,iyh
 624+ F804 FD 5D                                ld      e,iyl
 625+ F806 CD CF F6                             call    GalaxyCopyLoop
 626+ F809 FD 62                                ld      iyh,d
 627+ F80B FD 6B                                ld      iyl,e
 628+ F80D C1                                   pop     bc                                              ;+2
 629+ F80E D1                                   pop     de                                              ;+1
 630+ F80F E1                                   pop     hl
 631+ F810 C9                                   ret
 632+ F811              ;------------------------------------------------------------------------------------------------------------------------------------
 633+ F811 E5           ProcessISymbol:         push    hl                                              ;+1
 634+ F812 D5                                   push    de                                              ;+2
 635+ F813 C5                                   push    bc                                              ;+3
 636+ F814 21 8D F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 637+ F817 FD 54                                ld      d,iyh
 638+ F819 FD 5D                                ld      e,iyl
 639+ F81B CD CF F6                             call    GalaxyCopyLoop
 640+ F81E FD 62                                ld      iyh,d
 641+ F820 FD 6B                                ld      iyl,e
 642+ F822 3E 69                                ld      a,"i"
 643+ F824 EB                                   ex      de,hl
 644+ F825 77                                   ld      (hl),a
 645+ F826 23                                   inc     hl
 646+ F827 3E 61                                ld      a,"a"
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 6E                                ld      a,"n"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F E5                                   push    hl
 653+ F830 FD E1                                pop     iy
 654+ F832 C1                                   pop     bc                                              ;+2
 655+ F833 D1                                   pop     de                                              ;+1
 656+ F834 E1                                   pop     hl                                              ;+0
 657+ F835 C9                                   ret
 658+ F836              ;------------------------------------------------------------------------------------------------------------------------------------
 659+ F836 E5           ProcessRSymbol:         push    hl                                              ;+1
 660+ F837 D5                                   push    de                                              ;+2
 661+ F838 CD A1 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 662+ F83B E6 03                                and     $03
 663+ F83D 47                                   ld      b,a
 664+ F83E 04                                   inc     b
 665+ F83F AF                                   xor     a
 666+ F840 4F                                   ld      c,a
 667+ F841 C5           .RLoop:                 push    bc                                              ;+3
 668+ F842 CD A1 F6                             call    GalaxyDoRandom
 669+ F845 C1                                   pop     bc                                              ;+2
 670+ F846 E6 3E                                and     $3E
 671+ F848 21 9F E8                             ld      hl,GalaxyName_digrams
 672+ F84B ED 31                                add     hl,a
 673+ F84D 7E                                   ld      a,(hl)
 674+ F84E FE 41                                cp      "A"
 675+ F850 38 01                                jr      c,.NotLowercase
 676+ F852 81                                   add     a,c
 677+ F853 FD 77 00     .NotLowercase:          ld      (iy+0),a
 678+ F856 23                                   inc     hl
 679+ F857 FD 23                                inc     iy
 680+ F859 0E 20                                ld      c,$20               ; fixed force to lower case
 681+ F85B 7E                                   ld      a,(hl)
 682+ F85C FE 41                                cp      "A"
 683+ F85E 38 01                                jr      c,.NotLowercase2
 684+ F860 81                                   add     a,c
 685+ F861 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 686+ F864 FD 23                                inc     iy
 687+ F866 10 D9                                djnz    .RLoop
 688+ F868 D1                                   pop     de                                              ;+1
 689+ F869 E1                                   pop     hl                                              ;+0
 690+ F86A C9                                   ret
 691+ F86B              ;------------------------------------------------------------------------------------------------------------------------------------
 692+ F86B ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 693+ F86F CD 55 FC                             call    galaxy_system_under_cursor
 694+ F872 CD BB FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 695+ F875 21 7E E8                             ld      hl,GalaxyExpandedName
 696+ F878 11 8D F7                             ld      de,GalaxyNameCopy
 697+ F87B CD CF F6                             call    GalaxyCopyLoop
 698+ F87E 21 8D F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 699+ F881 CD 56 F7                             call    GalaxyCapitaliseString
 700+ F884                                      ; we will also capitalise the local copy here later
 701+ F884 21 DD F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 702+ F887 11 B1 F2                             ld      de,GalaxyPlanetSource
 703+ F88A CD CF F6                             call    GalaxyCopyLoop
 704+ F88D AF           .ClearOutDescription:   xor     a
 705+ F88E 21 84 F1                             ld      hl,GalaxyPlanetDescription
 706+ F891 77                                   ld      (hl),a
 707+ F892 11 85 F1                             ld      de,GalaxyPlanetDescription+1
 708+ F895 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 709+ F898 ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 710+ F89A CD 68 F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 711+ F89D 21 B1 F2                             ld      hl,GalaxyPlanetSource
 712+ F8A0 FD 21 84 F1                          ld      iy,GalaxyPlanetDescription
 713+ F8A4              ; At this point we are now prepped ready to expand the string to a full description
 714+ F8A4              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 715+ F8A4 7E           .ExpRecursive:          ld      a,(hl)
 716+ F8A5 FE 00                                cp      0
 717+ F8A7 CA EC F8                             jp      z,.ExpansionComplete
 718+ F8AA FE 3C                                cp      "<"
 719+ F8AC C2 BF F8                             jp      nz,.NotToken
 720+ F8AF 23           .ItIsAToken:            inc     hl
 721+ F8B0 CD AB F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 722+ F8B3 23                                   inc     hl
 723+ F8B4 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 724+ F8B5 CD BC F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 725+ F8B8 CD A4 F8                             call    .ExpRecursive
 726+ F8BB E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 727+ F8BC C3 A4 F8     .TokenNextIteration:    jp      .ExpRecursive
 728+ F8BF              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 729+ F8BF FE 25        .NotToken:              cp      "%"
 730+ F8C1 C2 E3 F8                             jp      nz,.RegularCharacter
 731+ F8C4 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 732+ F8C5 7E                                   ld      a,(hl)
 733+ F8C6 FE 48                                cp      "H"
 734+ F8C8 20 07                                jr      nz,.IsItI
 735+ F8CA 23           .ItIsAnH:               inc     hl
 736+ F8CB CD FC F7                             call    ProcessHSymbol
 737+ F8CE C3 A4 F8                             jp      .ExpRecursive
 738+ F8D1 FE 49        .IsItI:                 cp      "I"
 739+ F8D3 20 07                                jr      nz,.ItIsR
 740+ F8D5 23           .ItIsAnI:               inc     hl
 741+ F8D6 CD 11 F8                             call    ProcessISymbol
 742+ F8D9 C3 A4 F8                             jp      .ExpRecursive
 743+ F8DC CD 36 F8     .ItIsR:                 call    ProcessRSymbol
 744+ F8DF 23                                   inc     hl
 745+ F8E0 C3 A4 F8     .SystemNextIteration:   jp      .ExpRecursive
 746+ F8E3 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 747+ F8E6 FD 23                                inc     iy
 748+ F8E8 23                                   inc     hl
 749+ F8E9 C3 A4 F8     .RegularNextIteration:  jp      .ExpRecursive
 750+ F8EC AF           .ExpansionComplete:     xor     a
 751+ F8ED FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 752+ F8F0 C9                                   ret
 753+ F8F1              ;----------------------------------------------------------------------------------------------------------------------------------
 754+ F8F1 3A 0B E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 755+ F8F4 3C                                   inc     a
 756+ F8F5 67                                   ld      h,a
 757+ F8F6 0E 00                                ld      c,0
 758+ F8F8 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 759+ F8FA 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 760+ F8FD DD 21 D5 F4                          ld      ix,ShipEquipmentList
 761+ F901 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 762+ F904 FE 00                                cp      0
 763+ F906                                      ; Check Cash TODO
 764+ F906 28 00                                jr      z,.CheckTechLevel
 765+ F908 DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 766+ F90B BC                                   cp      h
 767+ F90C                                      ;jr      nc,.DoNotShowItem
 768+ F90C DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 769+ F90F FE 00                                cp      0
 770+ F911                                    ;  jr      z,.DoNotShowItem
 771+ F911 79           .ShowItem:              ld      a,c
 772+ F912 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 773+ F915 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 774+ F918 FE 00                                cp      EQ_FUEL
 775+ F91A 28 18                                jr      z,.FuelLevel
 776+ F91C FE 01                                cp      EQ_MISSILE
 777+ F91E 28 25                                jr      z,.CountMissiles
 778+ F920 21 0F 9C     .IsFitted:              ld      hl,EquipmentFitted
 779+ F923 ED 31                                add     hl,a
 780+ F925 7E                                   ld      a,(hl)
 781+ F926 FE 00                                cp      0
 782+ F928 28 05                                jr      z,.NotFittedItem
 783+ F92A 3E 2A        .FittedItem:            ld      a,"*"
 784+ F92C C3 56 F9                             jp      .MoreToDoCheck
 785+ F92F 3E 2D        .NotFittedItem:         ld      a,"-"
 786+ F931 C3 56 F9                             jp      .MoreToDoCheck
 787+ F934 3A D4 9B     .FuelLevel:             ld      a,(Fuel)
 788+ F937 FE 46                                cp      MaxFuelLevel
 789+ F939 28 05                                jr      z,.FullFuel
 790+ F93B 3E 2D        .NotFullFuel:           ld      a,"-"
 791+ F93D C3 56 F9                             jp      .MoreToDoCheck
 792+ F940 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 793+ F942 C3 56 F9                             jp      .MoreToDoCheck
 794+ F945 3A 5F 98     .CountMissiles:         ld      a,(NbrMissiles)
 795+ F948 FE 00                                cp      0
 796+ F94A 28 05                                jr      z,.NoMissiles
 797+ F94C C6 30                                add     "0"
 798+ F94E C3 56 F9                             jp      .MoreToDoCheck
 799+ F951 3E 2D        .NoMissiles:            ld      a,"-"
 800+ F953 C3 56 F9                             jp      .MoreToDoCheck
 801+ F956 DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 802+ F959 0C                                   inc     c
 803+ F95A DD 19                                add     ix,de
 804+ F95C 10 A3                                djnz    .ItemCheckLoop
 805+ F95E C9                                   ret
 806+ F95F 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 807+ F961 DD 77 01                             ld      (ix+1),a
 808+ F964 DD 19                                add     ix,de
 809+ F966 10 99                                djnz    .ItemCheckLoop
 810+ F968 C9                                   ret
 811+ F969              ;----------------------------------------------------------------------------------------------------------------------------------
 812+ F969 3A F9 E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 813+ F96C B7           .GenerateGovernment:    or      a
 814+ F96D CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 815+ F96F CB 3F                                srl	    a
 816+ F971 CB 3F                                srl	    a                                                   ;
 817+ F973 E6 07                                and     $07                                             ;
 818+ F975 32 09 E9                             ld      (GalaxyDisplayGovernment),a                     ;
 819+ F978 3A F8 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 820+ F97B E6 07                                and     $07
 821+ F97D 47                                   ld      b,a
 822+ F97E 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 823+ F981                                      JumpIfAGTENusng 1, .GreaterThan1
 823+ F981 FE 01       >                        cp     1
 823+ F983 D2 8F F9    >                        jp		nc,.GreaterThan1
 824+ F986 78           .OneOrZero:             ld      a,b
 825+ F987 F6 02                                or      2
 826+ F989 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 827+ F98C C3 93 F9                             jp      .GenerateTechLevel
 828+ F98F 78           .GreaterThan1:          ld      a,b
 829+ F990 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 830+ F993 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 831+ F995 47                                   ld      b,a
 832+ F996 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 833+ F999 E6 03                                and     $03
 834+ F99B 80                                   add     b
 835+ F99C 47                                   ld      b,a
 836+ F99D 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 837+ F9A0 4F                                   ld      c,a
 838+ F9A1 CB 2F                                sra     a
 839+ F9A3 80                                   add     b
 840+ F9A4 47                                   ld      b,a
 841+ F9A5 79                                   ld      a,c
 842+ F9A6 E6 01                                and     $1
 843+ F9A8 80                                   add     b
 844+ F9A9 32 0B E9                             ld      (GalaxyDisplayTekLevel),a
 845+ F9AC CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 846+ F9AE CB 27                                sla     a
 847+ F9B0 21 09 E9                             ld      hl,GalaxyDisplayGovernment
 848+ F9B3 86                                   add     a,(hl)
 849+ F9B4 47                                   ld      b,a
 850+ F9B5 3A 0A E9                             ld      a,(GalaxyDisplayEconomy)
 851+ F9B8 80                                   add     a,b
 852+ F9B9 3C                                   inc     a
 853+ F9BA 32 0C E9                             ld      (GalaxyDisplayPopulation),a
 854+ F9BD 3A 0A E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 855+ F9C0 EE 07                                xor     7
 856+ F9C2 C6 03                                add     3
 857+ F9C4 57                                   ld      d,a
 858+ F9C5 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 859+ F9C8 C6 04                                add     4
 860+ F9CA 5F                                   ld      e,a
 861+ F9CB ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 862+ F9CD 3A 0C E9                             ld      a,(GalaxyDisplayPopulation)
 863+ F9D0 26 00                                ld      h,0
 864+ F9D2 6F                                   ld      l,a
 865+ F9D3 CD 2D A8                             call    mulDEbyHL
 866+ F9D6 EB                                   ex      de,hl
 867+ F9D7                                      ShiftDELeft1
 867+ F9D7 CB 23       >			   sla e
 867+ F9D9 CB 12       >			   rl  d
 868+ F9DB                                      ShiftDELeft1
 868+ F9DB CB 23       >			   sla e
 868+ F9DD CB 12       >			   rl  d
 869+ F9DF                                      ShiftDELeft1
 869+ F9DF CB 23       >			   sla e
 869+ F9E1 CB 12       >			   rl  d
 870+ F9E3 ED 53 0D E9                          ld      (GalaxyDisplayProductivity),de
 871+ F9E7 3A FC E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 872+ F9EA E6 0F                                and		$0F
 873+ F9EC C6 0B                                add     11
 874+ F9EE 47                                   ld      b,a
 875+ F9EF 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 876+ F9F2 4F                                   ld      c,a
 877+ F9F3 ED 43 0F E9                          ld      (GalaxyDisplayRadius),bc
 878+ F9F7 C9                                   ret
 879+ F9F8
 880+ F9F8              galaxy_master_seed_to_system:
 881+ F9F8 21 10 E0     		ld		hl,galaxy_master_seed
 882+ F9FB 11 82 97     		ld		de,SystemSeed
 883+ F9FE              galaxy_copy_seed:
 884+ F9FE ED A0        		ldi
 885+ FA00 ED A0        		ldi
 886+ FA02 ED A0        		ldi
 887+ FA04 ED A0        		ldi
 888+ FA06 ED A0        		ldi
 889+ FA08 ED A0        		ldi
 890+ FA0A C9           		ret
 891+ FA0B
 892+ FA0B              galaxy_master_to_galaxy_working:
 893+ FA0B 21 10 E0     		ld		hl,galaxy_master_seed
 894+ FA0E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 895+ FA11 18 EB        		jr		galaxy_copy_seed
 896+ FA13
 897+ FA13              galaxy_master_to_galaxy_naming:
 898+ FA13 21 10 E0     		ld		hl,galaxy_master_seed
 899+ FA16 11 FD E8     		ld		de,GalaxyNamingSeed
 900+ FA19 18 E3        		jr		galaxy_copy_seed
 901+ FA1B
 902+ FA1B              working_seed_to_galaxy_working:
 903+ FA1B 21 96 98             ld      hl,WorkingSeeds
 904+ FA1E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 905+ FA21 18 DB        		jr		galaxy_copy_seed
 906+ FA23
 907+ FA23              working_seed_to_galaxy_naming:
 908+ FA23 21 96 98             ld      hl,WorkingSeeds
 909+ FA26 11 FD E8     		ld		de,GalaxyNamingSeed
 910+ FA29 18 D3        		jr		galaxy_copy_seed
 911+ FA2B
 912+ FA2B              galaxy_ix_seed_to_galaxy_naming:
 913+ FA2B DD E5                push    ix
 914+ FA2D E1                   pop     hl
 915+ FA2E 11 FD E8     		ld		de,GalaxyNamingSeed
 916+ FA31 18 CB        		jr		galaxy_copy_seed
 917+ FA33
 918+ FA33
 919+ FA33              galaxy_working_seed_to_galaxy_naming:
 920+ FA33 21 F7 E8             ld      hl,GalaxyWorkingSeed
 921+ FA36 11 FD E8     		ld		de,GalaxyNamingSeed
 922+ FA39 18 C3        		jr		galaxy_copy_seed
 923+ FA3B
 924+ FA3B              galaxy_working_seed_to_system:
 925+ FA3B 21 F7 E8     		ld		hl,GalaxyWorkingSeed
 926+ FA3E 11 82 97     		ld		de,SystemSeed
 927+ FA41 18 BB        		jr		galaxy_copy_seed
 928+ FA43
 929+ FA43              system_seed_to_galaxy_working:
 930+ FA43 21 82 97     		ld		hl,SystemSeed
 931+ FA46 11 F7 E8     		ld		de,GalaxyWorkingSeed
 932+ FA49 18 B3        		jr		galaxy_copy_seed
 933+ FA4B
 934+ FA4B
 935+ FA4B              system_seed_to_galaxy_naming:
 936+ FA4B 21 82 97     		ld		hl,SystemSeed
 937+ FA4E 11 FD E8     		ld		de,GalaxyNamingSeed
 938+ FA51 18 AB        		jr		galaxy_copy_seed
 939+ FA53
 940+ FA53              ix_seed_to_galaxy_working:
 941+ FA53 DD E5                push    ix
 942+ FA55 E1                   pop     hl
 943+ FA56 11 F7 E8     		ld		de,GalaxyWorkingSeed
 944+ FA59 18 A3        		jr		galaxy_copy_seed
 945+ FA5B
 946+ FA5B              ; Here we twist just once rather than the usual4 for a system
 947+ FA5B 3A FD E8     NextGalaxyNamingSeed:   ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 948+ FA5E B7                                   or		a							; clear carry flag
 949+ FA5F 21 FF E8                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 950+ FA62 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 951+ FA63 47                                   ld		b,a							; partial sum lo [x]
 952+ FA64              ; y = b + d	+ carry
 953+ FA64 3A FE E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 954+ FA67 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 955+ FA6A 8E                                   adc		a,(hl)						; note add with carry
 956+ FA6B 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 957+ FA6C 3A FF E8                             ld		a,(GalaxyNamingSeed+2)
 958+ FA6F 32 FD E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 959+ FA72 3A 00 E9                             ld		a,(GalaxyNamingSeed+3)
 960+ FA75 32 FE E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 961+ FA78 3A 02 E9                             ld		a,(GalaxyNamingSeed+5)
 962+ FA7B 32 00 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 963+ FA7E 3A 01 E9                             ld		a,(GalaxyNamingSeed+4)
 964+ FA81 32 FF E8                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 965+ FA84 B7                                   or		a
 966+ FA85 78                                   ld		a,b
 967+ FA86 21 FF E8                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 968+ FA89 86                                   add	    a,(hl)
 969+ FA8A 32 01 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 970+ FA8D 79                                   ld		a,c
 971+ FA8E 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 972+ FA91 8E                                   adc		a,(hl)
 973+ FA92 32 02 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 974+ FA95 C9                                   ret
 975+ FA96
 976+ FA96
 977+ FA96 3A 02 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 978+ FA99 E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 979+ FA9B FE 00                                cp		0					            ; 0 = skip 2 chars
 980+ FA9D 28 12                                jr		z,.SkipPhrase
 981+ FA9F C6 0C                                add		a,12
 982+ FAA1 CB 27                                sla		a					            ; phrase = (a+12)*2
 983+ FAA3 21 9F E8                             ld		hl,GalaxyName_digrams
 984+ FAA6 ED 31                                add		hl,a
 985+ FAA8 ED A0                                ldi
 986+ FAAA 7E                                   ld		a,(hl)
 987+ FAAB FE 3F                                cp		'?'
 988+ FAAD 28 02                                jr		z,.SkipPhrase
 989+ FAAF ED A0        .AddExtra:              ldi
 990+ FAB1 D5           .SkipPhrase:            push	de
 991+ FAB2 CD 5B FA                             call	NextGalaxyNamingSeed
 992+ FAB5 D1                                   pop		de
 993+ FAB6 C9                                   ret
 994+ FAB7
 995+ FAB7              ; takes location in BC, finds seed and expands the name
 996+ FAB7 ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
 997+ FABB CD 55 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
 998+ FABE FE 00                                cp      0
 999+ FAC0 C8                                   ret     z
1000+ FAC1
1001+ FAC1 CD 23 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1002+ FAC4 C3 DC FA                             jp      GalaxyDigramNamingSeed
1003+ FAC7
1004+ FAC7 CD 13 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1005+ FACA C3 DC FA                             jp      GalaxyDigramNamingSeed
1006+ FACD
1007+ FACD CD 33 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1008+ FAD0 C3 DC FA                             jp      GalaxyDigramNamingSeed
1009+ FAD3
1010+ FAD3 CD 2B FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1011+ FAD6 C3 DC FA                             jp      GalaxyDigramNamingSeed
1012+ FAD9
1013+ FAD9 CD 4B FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1014+ FADC
1015+ FADC 11 7E E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1016+ FADF 06 03        GalaxyDigramToDE:       ld		b,3
1017+ FAE1 3A FD E8                             ld		a,(GalaxyNamingSeed)
1018+ FAE4 E6 40                                and		$40
1019+ FAE6 28 03                                jr		z,.SmallSizeName
1020+ FAE8 CD 96 FA     .LargeSizeName:         call	GalaxyNamingLoop
1021+ FAEB CD 96 FA     .SmallSizeName:         call	GalaxyNamingLoop
1022+ FAEE CD 96 FA                             call	GalaxyNamingLoop
1023+ FAF1 CD 96 FA                             call	GalaxyNamingLoop
1024+ FAF4 EB           .DoneName:              ex		de,hl
1025+ FAF5 36 00                                ld		(hl),0
1026+ FAF7 EB                                   ex		de,hl
1027+ FAF8 AF                                   xor     a
1028+ FAF9 3D                                   dec     a
1029+ FAFA C9                                   ret
1030+ FAFB              ;reorte X 13 Y 97
1031+ FAFB
1032+ FAFB              set_names_lowercase:
1033+ FAFB                  ;- to do, for case insensitive match
1034+ FAFB C9               ret
1035+ FAFC              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFC              is_system_found:        ; search string does not have /0
1037+ FAFC              ; search for riinus then ra you get seardh of rainus
1038+ FAFC 21 5D E8                             ld      hl,GalaxySearchString
1039+ FAFF 11 7E E8                             ld      de,GalaxyExpandedName
1040+ FB02 0E 00        .getsearchlen:          ld      c,0
1041+ FB04 7E           .getsearchlenloop:      ld      a,(hl)
1042+ FB05 FE 00                                cp      0
1043+ FB07 28 07                                jr      z,.readyToSearch
1044+ FB09 23                                   inc     hl
1045+ FB0A 0C                                   inc     c
1046+ FB0B C3 04 FB                             jp      .getsearchlenloop
1047+ FB0E 06 20                                ld      b,32
1048+ FB10 21 5D E8     .readyToSearch:         ld      hl,GalaxySearchString
1049+ FB13 1A           .searchLoop:            ld      a,(de)
1050+ FB14 FE 00                                cp      0
1051+ FB16 28 0D                                jr      z,.EndOfMatch
1052+ FB18 0D                                   dec     c
1053+ FB19 C5                                   push    bc
1054+ FB1A ED A1                                cpi
1055+ FB1C C1                                   pop     bc
1056+ FB1D 20 03                                jr      nz,.noMatch
1057+ FB1F 13                                   inc     de
1058+ FB20
1059+ FB20 10 F1                                djnz    .searchLoop
1060+ FB22 3E FF        .noMatch:               ld      a,$FF
1061+ FB24 C9                                   ret
1062+ FB25 79           .EndOfMatch:            ld      a,c
1063+ FB26 FE 00                                cp      0
1064+ FB28 C8                                   ret     z
1065+ FB29 3E FF                                ld      a,$FF
1066+ FB2B C9                                   ret
1067+ FB2C
1068+ FB2C AF           find_system_by_name:    xor     a
1069+ FB2D 32 9B 97                             ld      (XSAV),a
1070+ FB30 DD 21 16 E0                          ld      ix,galaxy_data
1071+ FB34 CD 53 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1072+ FB37 CD CD FA                             call    GalaxyDigramWorkingSeed
1073+ FB3A CD FC FA                             call    is_system_found
1074+ FB3D FE 00                                cp      0
1075+ FB3F 28 19                                jr      z,.FoundAtIX
1076+ FB41 3A 9B 97                             ld      a,(XSAV)
1077+ FB44 3D                                   dec     a
1078+ FB45 28 10                                jr      z,.NoMoreSystems
1079+ FB47 32 9B 97                             ld      (XSAV),a
1080+ FB4A DD E5                                push    ix
1081+ FB4C E1                                   pop     hl
1082+ FB4D ED 34 08 00                          add     hl,8
1083+ FB51 E5                                   push    hl
1084+ FB52 DD E1                                pop     ix
1085+ FB54 C3 34 FB                             jp      .nextSystem
1086+ FB57 3E FF        .NoMoreSystems:         ld      a,$FF
1087+ FB59 C9                                   ret
1088+ FB5A CD 53 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1089+ FB5D C9                                   ret
1090+ FB5E              ;----------------------------------------------------------------------------------------------------------------------------------
1091+ FB5E 00 00        nearestfound:           DW 0
1092+ FB60              ; In here de carries current nearest and loads into nearest found
1093+ FB60              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1094+ FB60 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1095+ FB64 FD 26 00                             ld      iyh,0
1096+ FB67 FD 2E 78                             ld      iyl,120
1097+ FB6A ED 43 5E FB                          ld      (nearestfound),bc
1098+ FB6E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1099+ FB71 5F                                   ld      e,a                             ; e= current seed x
1100+ FB72                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1100+ FB72 B9          >                        cp      c
1100+ FB73 DA 84 FB    >                        jp		c, nearestXPosLT
1101+ FB76 D5           nearestXPosGTE:         push    de                              ;
1102+ FB77 26 00                                ld      h,0                             ;
1103+ FB79 6F                                   ld      l,a                             ; hl = seed x
1104+ FB7A 16 00                                ld      d,0                             ;
1105+ FB7C 59                                   ld      e,c                             ; de = nearest x
1106+ FB7D B7                                   or      a                               ;
1107+ FB7E ED 52                                sbc     hl,de                           ; hl = distance between the two
1108+ FB80 D1                                   pop     de
1109+ FB81 C3 8E FB                             jp      nearestDistXPos
1110+ FB84 D5           nearestXPosLT:          push    de                              ;
1111+ FB85 26 00                                ld      h,0                             ;
1112+ FB87 69                                   ld      l,c                             ; hl = nearest x
1113+ FB88 16 00                                ld      d,0                             ;
1114+ FB8A B7                                   or      a                               ; de = seed x
1115+ FB8B ED 52                                sbc     hl,de                           ;
1116+ FB8D D1                                   pop     de                              ; hl = distance between the two
1117+ FB8E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1118+ FB8F FD BD                                cp      iyl                             ; under initial threshold?
1119+ FB91 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1120+ FB93               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1121+ FB93 DD 7E 01                             ld      a,(ix+1)                        ;
1122+ FB96 57                                   ld      d,a                             ; d = seed y
1123+ FB97                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1123+ FB97 B8          >                        cp      b
1123+ FB98 DA AC FB    >                        jp		c, nearestYPosLT
1124+ FB9B E5           nearestYPosGTE:         push    hl                              ; save current x distance
1125+ FB9C D5                                   push    de                              ;
1126+ FB9D 26 00                                ld      h,0                             ;
1127+ FB9F 6F                                   ld      l,a                             ; hl = seed y
1128+ FBA0 16 00                                ld      d,0                             ;
1129+ FBA2 58                                   ld      e,b                             ; de = nearest y
1130+ FBA3 B7                                   or      a                               ;
1131+ FBA4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1132+ FBA6 7D                                   ld      a,l
1133+ FBA7 D1                                   pop     de
1134+ FBA8 E1                                   pop     hl
1135+ FBA9 C3 BA FB                             jp      nearestDistYPos
1136+ FBAC E5           nearestYPosLT:          push    hl                              ; save current x distance
1137+ FBAD D5                                   push    de                              ;
1138+ FBAE 26 00                                ld      h,0                             ;
1139+ FBB0 68                                   ld      l,b                             ; hl = nearest y
1140+ FBB1 5A                                   ld      e,d                             ;
1141+ FBB2 16 00                                ld      d,0                             ; de = seed y
1142+ FBB4 B7                                   or      a                               ;
1143+ FBB5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1144+ FBB7 7D                                   ld      a,l
1145+ FBB8 D1                                   pop     de
1146+ FBB9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1147+ FBBA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1148+ FBBC 30 12                                jr      nc, find_nearest_miss
1149+ FBBE 26 00                                ld      h,0                             ; hl = distance for x
1150+ FBC0 ED 31                                add     hl,a                            ; adding distance y
1151+ FBC2 7D                                   ld      a,l                             ; and copy it to l
1152+ FBC3 FD BD                                cp      iyl                             ; is the pair under distance
1153+ FBC5 30 09                                jr      nc, find_nearest_miss           ;
1154+ FBC7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1155+ FBC9 ED 53 5E FB                          ld      (nearestfound),de               ;
1156+ FBCD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1156+ FBCD FE 02       >                        cp    2
1156+ FBCF D8          >                        ret	 c
1157+ FBD0 DD E5        find_nearest_miss:      push     ix
1158+ FBD2 E1                                   pop      hl
1159+ FBD3 ED 34 08 00                          add      hl,8
1160+ FBD7 E5                                   push     hl
1161+ FBD8 DD E1                                pop      ix
1162+ FBDA FD 25                                dec     iyh
1163+ FBDC FD 7C                                ld      a,iyh
1164+ FBDE                                      IfANotZeroGoto find_nearest_loop
1164+ FBDE FE 00       >                        cp	0
1164+ FBE0 C2 6E FB    >                        jp	nz,find_nearest_loop
1165+ FBE3 ED 4B 5E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1166+ FBE7 C9                                   ret
1167+ FBE8              ;----------------------------------------------------------------------------------------------------------------------------------
1168+ FBE8              ; Does a sqare root distance
1169+ FBE8 16 00        galaxy_find_distance:   ld      d,0
1170+ FBEA 26 00                                ld      h,0
1171+ FBEC 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1172+ FBEF 47                                   ld      b,a
1173+ FBF0 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1174+ FBF3 B8                                   cp      b
1175+ FBF4 20 0E                                jr      nz,.NotSame
1176+ FBF6 C5           .XSame:                 push    bc
1177+ FBF7 F5                                   push    af
1178+ FBF8 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1179+ FBFB 47                                   ld      b,a
1180+ FBFC 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1181+ FBFF B8                                   cp      b
1182+ FC00 C1                                   pop     bc
1183+ FC01 F1                                   pop     af
1184+ FC02 28 49                                jr      z,.ZeroDistance
1185+ FC04 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1186+ FC06 68           .DestinationLTPresentX: ld      l,b
1187+ FC07 5F                                   ld      e,a
1188+ FC08 B7                                   or      a
1189+ FC09 ED 52                                sbc     hl,de
1190+ FC0B C3 13 FC                             jp      .SquareXDist
1191+ FC0E 6F           .DestinationGTEPresentX:ld      l,a
1192+ FC0F 58                                   ld      e,b
1193+ FC10 B7                                   or      a
1194+ FC11 ED 52                                sbc     hl,de
1195+ FC13 55           .SquareXDist:           ld      d,l
1196+ FC14 5D                                   ld      e,l
1197+ FC15 ED 30                                mul
1198+ FC17 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1199+ FC1A 47                                   ld      b,a
1200+ FC1B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1201+ FC1E B8                                   cp      b
1202+ FC1F 30 0B                                jr      nc,.DestinationGTEPresentY
1203+ FC21 4F           .DestinationLTPresentY: ld      c,a
1204+ FC22 68                                   ld      l,b
1205+ FC23 06 00                                ld      b,0
1206+ FC25 26 00                                ld      h,0
1207+ FC27 ED 42                                sbc     hl,bc
1208+ FC29 C3 34 FC                             jp      .DestinationYDone
1209+ FC2C 48           .DestinationGTEPresentY:ld      c,b
1210+ FC2D 6F                                   ld      l,a
1211+ FC2E 06 00                                ld      b,0
1212+ FC30 26 00                                ld      h,0
1213+ FC32 ED 42                                sbc     hl,bc
1214+ FC34 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1215+ FC36 7D                                   ld      a,l
1216+ FC37 EB                                   ex      de,hl
1217+ FC38 57                                   ld      d,a
1218+ FC39 5F                                   ld      e,a
1219+ FC3A ED 30        .SquareYDist:           mul
1220+ FC3C 19                                   add     hl,de
1221+ FC3D EB                                   ex      de,hl
1222+ FC3E CD CC A8                             call    asm_sqrt            ; distance via pythagoras in hl
1223+ FC41                                      ShiftHLLeft1
1223+ FC41 CB 25       >			   sla l
1223+ FC43 CB 14       >			   rl  h
1224+ FC45                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1224+ FC45 CB 25       >			   sla l
1224+ FC47 CB 14       >			   rl  h
1225+ FC49 22 8A 98                             ld      (Distance),hl       ; Distance is now caulated distance
1226+ FC4C C9                                   ret
1227+ FC4D AF           .ZeroDistance:          xor     a
1228+ FC4E 32 8A 98                             ld      (Distance),a
1229+ FC51 32 8B 98                             ld      (Distance+1),a
1230+ FC54 C9                                   ret
1231+ FC55              ;----------------------------------------------------------------------------------------------------------------------------------
1232+ FC55              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds
1233+ FC55              ; this needs to chagne to galaxyresultseed or galayxworkingseed
1234+ FC55 AF           galaxy_system_under_cursor:xor     a
1235+ FC56 32 9B 97                             ld		(XSAV),a
1236+ FC59 DD 21 16 E0                          ld      ix,galaxy_data
1237+ FC5D 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1238+ FC60 DD E5                                push    ix
1239+ FC62 7D                                   ld      a,l
1240+ FC63 DD BE 03                             cp      (ix+3)                          ; seed x
1241+ FC66 20 14                                jr      nz,.ItsNotThisX
1242+ FC68 7C                                   ld      a,h
1243+ FC69 DD BE 01                             cp      (ix+1)                          ; seed x
1244+ FC6C 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1245+ FC6E DD E5                                push    ix
1246+ FC70 E1                                   pop     hl
1247+ FC71 11 96 98                             ld      de,WorkingSeeds                 ;' copy to wkring Seeds
1248+ FC74 CD 6D 9C                             call    copy_seed
1249+ FC77 3E FF                                ld      a,$FF
1250+ FC79 DD E1                                pop     ix
1251+ FC7B C9                                   ret
1252+ FC7C E1           .ItsNotThisX:           pop     hl
1253+ FC7D ED 34 08 00                          add     hl,8
1254+ FC81 E5                                   push    hl
1255+ FC82 DD E1                                pop     ix
1256+ FC84 3A 9B 97                             ld		a,(XSAV)
1257+ FC87 3D                                   dec		a
1258+ FC88 32 9B 97                             ld      (XSAV),a
1259+ FC8B FE 00                                cp		0
1260+ FC8D C8                                   ret		z
1261+ FC8E 18 CD                                jr		.GCCounterLoop
1262+ FC90              ;----------------------------------------------------------------------------------------------------------------------------------
1263+ FC90 21 82 97     SeedGalaxy:             ld      hl,SystemSeed                   ; First copy system seed to galaxy master
1264+ FC93 11 10 E0                             ld      de,galaxy_master_seed           ; .
1265+ FC96 ED A0                                ldi                                     ; .
1266+ FC98 ED A0                                ldi                                     ; .
1267+ FC9A ED A0                                ldi                                     ; .
1268+ FC9C ED A0                                ldi                                     ; .
1269+ FC9E ED A0                                ldi                                     ; .
1270+ FCA0 ED A0                                ldi                                     ; .
1271+ FCA2 DD 21 16 E0                          ld      ix,galaxy_data                  ; Generate system seed data for each planet
1272+ FCA6 AF                                   xor		a                               ; .
1273+ FCA7 32 9B 97                             ld		(XSAV),a                        ; .
1274+ FCAA DD E5        SeedGalaxyLoop:         push    ix                              ; .
1275+ FCAC D1                                   pop     de                              ; .
1276+ FCAD 21 82 97                             ld      hl,SystemSeed                   ; .
1277+ FCB0 CD 6D 9C                             call    copy_seed                       ; .
1278+ FCB3 DD E5                                push    ix                              ; .
1279+ FCB5 E1                                   pop     hl                              ; .
1280+ FCB6 ED 34 08 00                          add     hl,8                            ; .
1281+ FCBA E5                                   push    hl                              ; .
1282+ FCBB DD E1                                pop     ix                              ; .
1283+ FCBD CD A2 9C                             call    next_system_seed                ; .
1284+ FCC0 3A 9B 97                             ld		a,(XSAV)                        ; .
1285+ FCC3 3D                                   dec		a                               ; .
1286+ FCC4 FE 00                                cp		0                               ; .
1287+ FCC6 C8                                   ret		z                               ; .
1288+ FCC7 32 9B 97                             ld		(XSAV),a                        ; .
1289+ FCCA 18 DE                                jr      SeedGalaxyLoop                  ; .
1290+ FCCC C9                                   ret
1291+ FCCD
1292+ FCCD              GalaxyBankSize   EQU $ - galaxy_page_marker
1293+ FCCD
# file closed: ./Universe/Galaxy/galaxy_data.asm
1332  FCCD
1333  FCCD                  DISPLAY "Galaxy Data - Bytes free ",/D, $2000 - ($- GalaxyDataAddr)
1334  FCCD
1335  FCCD              ; Bank 83  ------------------------------------------------------------------------------------------------------------------------
1336  FCCD                  SLOT    SunBankAddr
1337  FCCD                  PAGE    BankSunData
1338  FCCD              	ORG	    SunBankAddr,BankSunData
1339  C000                  INCLUDE "./Universe/Sun/sun_data.asm"
# file opened: ./Universe/Sun/sun_data.asm
   1+ C000              fdraw; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000 53 75 6E 20  StartOfSun:        DB "Sun and Planet X"
  13+ C004 61 6E 64 20
  13+ C008 50 6C 61 6E
  13+ C00C 65 74 20 58
  14+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  15+ C010              CheckRowHLOnScreen:     MACRO   failtarget
  16+ C010 ~                                    ld      a,h                             ; is greater than 128
  17+ C010 ~                                    and     a                               ; or negative
  18+ C010 ~                                    jr      nz,failtarget                   ; h <> 0 so fails (covers <0 and > 255
  19+ C010 ~                                    ld      a,l                             ; l bit 7 0?
  20+ C010 ~                                    bit     7,a                             ;  covers l > 127
  21+ C010 ~                                    jr      nz,failtarget                   ;
  22+ C010                                      ENDM
  23+ C010
  24+ C010              IYEquRowN:              MACRO   rowValue                        ; set up iy as target address
  25+ C010 ~                                    ld      a,rowValue
  26+ C010 ~                                    ld      hl,SBnKLineArray
  27+ C010 ~                                    add     hl,a
  28+ C010 ~                                    add     hl,a
  29+ C010 ~                                    push    hl
  30+ C010 ~                                    pop     iy
  31+ C010                                      ENDM
  32+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  33+ C010              ; Universe map substibute for INWK
  34+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  35+ C010                                      INCLUDE "./Universe/Sun/SunPosVars.asm"
# file opened: ././Universe/Sun/SunPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           SBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           SBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           SBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           SBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           SBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           SBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           SBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           SBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           SBnKzsgn                    DB  0                       ; INWK +8
  11++C019
# file closed: ././Universe/Sun/SunPosVars.asm
  36+ C019                                      INCLUDE "./Universe/Sun/SunRotationMatrixVars.asm"
# file opened: ././Universe/Sun/SunRotationMatrixVars.asm
   1++C019              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C019              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C019 00 00        SBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01B              SBnKrotmatSidev             equ SBnKrotmatSidevX
   5++C01B 00 00        SBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C01D 00 00        SBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C01F 00 00        SBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C021              SBnKrotmatRoofv             equ SBnKrotmatRoofvX
   9++C021 00 00        SBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C023 00 00        SBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C025 00 00        SBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C027              SBnKrotmatNosev             EQU SBnKrotmatNosevX
  13++C027 00 00        SBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C029 00 00        SBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02B
# file closed: ././Universe/Sun/SunRotationMatrixVars.asm
  37+ C02B                                      INCLUDE "./Universe/Sun/SunAIRuntimeData.asm"
# file opened: ././Universe/Sun/SunAIRuntimeData.asm
   1++C02B              ; -- Ship AI data
   2++C02B 00           SBnKRotXCounter             DB  0                       ; INWK +29
   3++C02C 00           SBnKRotZCounter             DB  0                       ; INWK +30
   4++C02D 00           SBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C02E 00           SBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C02F
# file closed: ././Universe/Sun/SunAIRuntimeData.asm
  38+ C02F
  39+ C02F
  40+ C02F                                      INCLUDE "./Universe/Sun/SunXX16Vars.asm"
# file opened: ././Universe/Sun/SunXX16Vars.asm
   1++C02F              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C02F 00 00        SBnkTransmatSidevX          DW  0               ; XX16+0
   3++C031              SBnkTransmatSidev           EQU SBnkTransmatSidevX
   4++C031 00 00        SBnkTransmatSidevY          DW 0                ; XX16+2
   5++C033 00 00        SBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C035 00 00        SBnkTransmatRoofvX          DW 0
   7++C037              SBnkTransmatRoofv           EQU SBnkTransmatRoofvX
   8++C037 00 00        SBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C039 00 00        SBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03B 00 00        SBnkTransmatNosevX          DW 0
  11++C03D              SBnkTransmatNosev           EQU SBnkTransmatNosevX
  12++C03D 00 00        SBnkTransmatNosevY          DW 0                ; XX16+2
  13++C03F 00 00        SBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C041 00 00        SBnkTransmatTransX          DW 0
  15++C043 00 00        SBnkTransmatTransY          DW 0
  16++C045 00 00        SBnkTransmatTransZ          DW 0
  17++C047              SunXX16                      equ SBnkTransmatSidev
  18++C047              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C047 00 00        SBnkTransInvRow0x0          DW 0
  20++C049 00 00        SBnkTransInvRow0x1          DW 0
  21++C04B 00 00        SBnkTransInvRow0x2          DW 0
  22++C04D 00 00        SBnkTransInvRow0x3          DW 0
  23++C04F 00 00        SBnkTransInvRow1y0          DW 0
  24++C051 00 00        SBnkTransInvRow1y1          DW 0
  25++C053 00 00        SBnkTransInvRow1y2          DW 0
  26++C055 00 00        SBnkTransInvRow1y3          DW 0
  27++C057 00 00        SBnkTransInvRow2z0          DW 0
  28++C059 00 00        SBnkTransInvRow2z1          DW 0
  29++C05B 00 00        SBnkTransInvRow2z2          DW 0
  30++C05D 00 00        SBnkTransInvRow2z3          DW 0
  31++C05F
  32++C05F              SunXX16Inv             equ SBnkTransInvRow0x0
  33++C05F
# file closed: ././Universe/Sun/SunXX16Vars.asm
  41+ C05F                                      INCLUDE "./Universe/Sun/SunXX25Vars.asm"
# file opened: ././Universe/Sun/SunXX25Vars.asm
   1++C05F              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C05F 00           SBnKProjxLo                 DB  0
   3++C060 00           SBnKProjxHi                 DB  0
   4++C061 00           SBnKProjxSgn                DB  0
   5++C062              SBnKProjx                   EQU SBnKProjxLo
   6++C062 00           SBnKProjyLo                 DB  0
   7++C063 00           SBnKProjyHi                 DB  0
   8++C064 00           SBnKProjySgn                DB  0
   9++C065              SBnKProjy                   EQU SBnKProjyLo
  10++C065 00           SBnKProjzLo                 DB  0
  11++C066 00           SBnKProjzHi                 DB  0
  12++C067 00           SBnKProjzSgn                DB  0
  13++C068              SBnKProjz                   EQU SBnKProjzLo
  14++C068              SXX25                       EQU SBnKProjxLo
  15++C068
# file closed: ././Universe/Sun/SunXX25Vars.asm
  42+ C068                                      INCLUDE "./Universe/Sun/SunXX18Vars.asm"
# file opened: ././Universe/Sun/SunXX18Vars.asm
   1++C068              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C068 00           SBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C069 00           SBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06A 00           SBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C06B              SBnKDrawCam0x               equ SBnKDrawCam0xLo
   6++C06B 00           SBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C06C 00           SBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C06D 00           SBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C06E              SBnKDrawCam0y               equ SBnKDrawCam0yLo
  10++C06E 00           SBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C06F 00           SBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C070 00           SBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C071              SBnKDrawCam0z               equ SBnKDrawCam0zLo
  14++C071              SXX18                       equ SBnKDrawCam0xLo
  15++C071
# file closed: ././Universe/Sun/SunXX18Vars.asm
  43+ C071
  44+ C071              ; Used to make 16 bit reads a little cleaner in source code
  45+ C071 00 00 00     SBnKzPoint                  DS  3
  46+ C074              SBnKzPointLo                equ SBnKzPoint
  47+ C074              SBnKzPointHi                equ SBnKzPoint+1
  48+ C074              SBnKzPointSign              equ SBnKzPoint+2
  49+ C074                                      INCLUDE "./Universe/Sun/SunXX15Vars.asm"
# file opened: ././Universe/Sun/SunXX15Vars.asm
   1++C074              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C074 00           SBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C075 00           SBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C076 00           SBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C077 00           SBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C078 00           SBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C079 00           SBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07A
   9++C07A              SXX15                       equ SBnKXScaled
  10++C07A              SXX15VecX                   equ SXX15
  11++C07A              SXX15VecY                   equ SXX15+1
  12++C07A              SXX15VecZ                   equ SXX15+2
  13++C07A              SBnKXPoint                  equ SXX15
  14++C07A              SBnKXPointLo                equ SXX15+0
  15++C07A              SBnKXPointHi                equ SXX15+1
  16++C07A              SBnKXPointSign              equ SXX15+2
  17++C07A              SBnKYPoint                  equ SXX15+3
  18++C07A              SBnKYPointLo                equ SXX15+3
  19++C07A              SBnKYPointHi                equ SXX15+4
  20++C07A              SBnKYPointSign              equ SXX15+5
  21++C07A
# file closed: ././Universe/Sun/SunXX15Vars.asm
  50+ C07A                                      INCLUDE "./Universe/Sun/SunXX12Vars.asm"
# file opened: ././Universe/Sun/SunXX12Vars.asm
   1++C07A              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07A              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07A 00           SBnKXX12xLo                 DB  0               ; XX12+0
   4++C07B 00           SBnKXX12xSign               DB  0               ; XX12+1
   5++C07C 00           SBnKXX12yLo                 DB  0               ; XX12+2
   6++C07D 00           SBnKXX12ySign               DB  0               ; XX12+3
   7++C07E 00           SBnKXX12zLo                 DB  0               ; XX12+4
   8++C07F 00           SBnKXX12zSign               DB  0               ; XX12+5
   9++C080 00 00 00...  SXX12Save                   DS  6
  10++C086 00 00 00...  SXX12Save2                  DS  6
  11++C08C              SXX12                       equ SBnKXX12xLo
  12++C08C              varSXX12                    equ SBnKXX12xLo
  13++C08C              ; Repurposed XX12 when plotting lines
  14++C08C              SBnkY2                      equ SXX12+0
  15++C08C              SbnKy2Lo                    equ SXX12+0
  16++C08C              SBnkY2Hi                    equ SXX12+1
  17++C08C              SBnkDeltaXLo                equ SXX12+2
  18++C08C              SBnkDeltaXHi                equ SXX12+3
  19++C08C              SBnkDeltaYLo                equ SXX12+4
  20++C08C              SBnkDeltaYHi                equ SXX12+5
  21++C08C              SbnkGradient                equ SXX12+2
  22++C08C              SBnkTemp1                   equ SXX12+2
  23++C08C              SBnkTemp1Lo                 equ SXX12+2
  24++C08C              SBnkTemp1Hi                 equ SXX12+3
  25++C08C              SBnkTemp2                   equ SXX12+3
  26++C08C              SBnkTemp2Lo                 equ SXX12+3
  27++C08C              SBnkTemp2Hi                 equ SXX12+4
  28++C08C
# file closed: ././Universe/Sun/SunXX12Vars.asm
  51+ C08C
  52+ C08C
  53+ C08C              ; Post clipping the results are now 8 bit
  54+ C08C 00           SBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  55+ C08D 00           SBnKProjectedY              DB  0
  56+ C08E 00           SBnKProjectedX              DB  0
  57+ C08F              SBnKProjected               equ SBnKProjectedY  ; resultant projected position
  58+ C08F 00 00 00...  SunXX15Save                 DS  8
  59+ C097 00 00 00...  SunXX15Save2                DS  8
  60+ C09F              ; Heap (or array) information for lines and normals
  61+ C09F              ; Coords are stored XY,XY,XY,XY
  62+ C09F              ; Normals
  63+ C09F              ; This needs re-oprganising now.
  64+ C09F              ; Runtime Calculation Store
  65+ C09F
  66+ C09F              SunLineArraySize            equ 128 * 2
  67+ C09F              ; Storage arrays for data
  68+ C09F
  69+ C09F 00 00 00...  SBnKLineArray               DS SunLineArraySize ; XX19 Holds the clipped line details
  70+ C19F              SBnKLinesHeapMax            EQU $ - SBnKLineArray
  71+ C19F
  72+ C19F 00 00        LineArrayPtr                DW  0
  73+ C1A1
  74+ C1A1              SBnK_Data_len               EQU $ - StartOfUniv
  75+ C1A1
  76+ C1A1              ; --------------------------------------------------------------
  77+ C1A1 21 00 C0     ResetSBnKData:          ld      hl,StartOfUniv
  78+ C1A4 11 A1 01                             ld      de,SBnK_Data_len
  79+ C1A7 AF                                   xor     a
  80+ C1A8 CD 48 93                             call    memfill_dma
  81+ C1AB C9                                   ret
  82+ C1AC              ; --------------------------------------------------------------
  83+ C1AC 21 10 C0     ResetSBnKPosition:      ld      hl,SBnKxlo
  84+ C1AF 06 09                                ld      b, 3*3
  85+ C1B1 AF                                   xor     a
  86+ C1B2 77           .zeroLoop:              ld      (hl),a
  87+ C1B3 23                                   inc     hl
  88+ C1B4 10 FC                                djnz    .zeroLoop
  89+ C1B6 C9                                   ret
  90+ C1B7              ; This uses UBNKNodeArray as the list
  91+ C1B7              ; the array is 256 * 2 bytes
  92+ C1B7              ; counter is current row y pos
  93+ C1B7              ; byte 1 is start x pos
  94+ C1B7              ; byte 2 is end x pos
  95+ C1B7              ; if they are both 0 then skip
  96+ C1B7              ; its always horizontal, yellow
  97+ C1B7
  98+ C1B7              ; PLANET
  99+ C1B7
 100+ C1B7
 101+ C1B7              .SunNoDraw:             SetCarryFlag                    ; ship is behind so do not draw, so we don't care abour draw as dot
 101+ C1B7 37          >                        scf
 102+ C1B8 C9                                   ret
 103+ C1B9
 104+ C1B9
 105+ C1B9
 106+ C1B9              SunBankDraw:            MACRO
 107+ C1B9 ~            .drawLoop               ld      a,(hl)
 108+ C1B9 ~                                    ld      c,a                     ; c = left column
 109+ C1B9 ~                                    inc     hl
 110+ C1B9 ~                                    ld      d,(hl)                  ; d = right col
 111+ C1B9 ~                                    inc     hl                      ; now ready for next linel
 112+ C1B9 ~                                    push    hl,,bc
 113+ C1B9 ~                                    cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 114+ C1B9 ~                                    IfResultZeroGoto .NoLineDraw
 115+ C1B9 ~                                    ld      a,d                     ; get right col back
 116+ C1B9 ~                                    sub     c                       ; subtract left so a = length
 117+ C1B9 ~                                    inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 118+ C1B9 ~                                    call    z, .FixWidth
 119+ C1B9 ~                                    ld      d,a                     ; de = length (e - d)
 120+ C1B9 ~                                    ld      e,216                   ; yellow
 121+ C1B9 ~                                    call    l2_draw_horz_dma        ; draw without bank switch
 122+ C1B9 ~            .NoLineDraw:            pop     hl,,bc
 123+ C1B9 ~                                    inc     b
 124+ C1B9 ~                                    dec     iyh
 125+ C1B9 ~                                    IfResultNotZeroGoto  .drawLoop
 126+ C1B9                                      ENDM
 127+ C1B9
 128+ C1B9
 129+ C1B9
 130+ C1B9              SunDraw:                MMUSelectLayer2
 130+ C1B9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 131+ C1BD 3A 58 C5     .OptimiseStartPos:      ld      a,(MinYOffset)
 132+ C1C0                                      IfAIsZeroGoto .OffsetIsZero     ; if offset is 0 then just initate as normal
 132+ C1C0 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 132+ C1C1 CA D1 C1    >                        jp	z, .OffsetIsZero
 133+ C1C4                                      JumpIfALTNusng 64, .OffsetLT64  ; if offset >=64 then we adjust and mve to bank 0
 133+ C1C4 FE 40       >                        cp      64
 133+ C1C6 DA DE C1    >                        jp		c, .OffsetLT64
 134+ C1C9 D6 40        .OffsetGTE64:           sub     64
 135+ C1CB 32 58 C5                             ld      (MinYOffset),a          ; adjust offset for bank 2
 136+ C1CE C3 16 C2                             jp      .StartBank2
 137+ C1D1 06 00        .OffsetIsZero:          ld      b,0                     ; row
 138+ C1D3 FD 26 40                             ld      iyh,64                  ; counter
 139+ C1D6 21 9F C0                             ld      hl,SBnKLineArray        ; set hl to start of array
 140+ C1D9 C3 F0 C1                             jp      .StartBank1
 141+ C1DC              ;-- Snuck routine in here so that the macro will be happier
 142+ C1DC 3D           .FixWidth:              dec     a                       ; if carry resulted in a value of zero then correct
 143+ C1DD C9                                   ret
 144+ C1DE 21 9F C0     .OffsetLT64:            ld      hl,SBnKLineArray        ; adjust hl for line array offset
 145+ C1E1 ED 31                                add     hl,a                    ; .
 146+ C1E3 ED 31                                add     hl,a                    ; .
 147+ C1E5 47                                   ld      b,a                     ; set b row to the actual offset
 148+ C1E6 4F                                   ld      c,a                     ; iyh = 64 - Y offset
 149+ C1E7 3E 40                                ld      a,64                    ; .
 150+ C1E9 91                                   sub     c                       ; .
 151+ C1EA FD 67                                ld      iyh,a
 152+ C1EC AF                                   xor     a                       ; Ready bank 2 with no offset
 153+ C1ED 32 58 C5                             ld      (MinYOffset),a          ; .
 154+ C1F0 D9           .StartBank1:            exx
 155+ C1F1 3E 00                                ld      a,LAYER2_SHIFTED_SCREEN_TOP
 156+ C1F3 CD 0D E0                             call    asm_l2_bank_select      ; get in the first bank, we will only then bank select when needed
 157+ C1F6 D9                                   exx
 158+ C1F7                                      SunBankDraw
 158+ C1F7 7E          >.drawLoop               ld      a,(hl)
 158+ C1F8 4F          >                        ld      c,a                     ; c = left column
 158+ C1F9 23          >                        inc     hl
 158+ C1FA 56          >                        ld      d,(hl)                  ; d = right col
 158+ C1FB 23          >                        inc     hl                      ; now ready for next linel
 158+ C1FC E5 C5       >                        push    hl,,bc
 158+ C1FE BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 158+ C1FF             >                        IfResultZeroGoto .NoLineDraw
 158+ C1FF CA 0E C2    >                        jp	z,.NoLineDraw
 158+ C202 7A          >                        ld      a,d                     ; get right col back
 158+ C203 91          >                        sub     c                       ; subtract left so a = length
 158+ C204 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 158+ C205 CC DC C1    >                        call    z, .FixWidth
 158+ C208 57          >                        ld      d,a                     ; de = length (e - d)
 158+ C209 1E D8       >                        ld      e,216                   ; yellow
 158+ C20B CD 3A E2    >                        call    l2_draw_horz_dma        ; draw without bank switch
 158+ C20E C1 E1       >.NoLineDraw:            pop     hl,,bc
 158+ C210 04          >                        inc     b
 158+ C211 FD 25       >                        dec     iyh
 158+ C213             >                        IfResultNotZeroGoto  .drawLoop
 158+ C213 C2 F7 C1    >                        jp	nz,.drawLoop
 159+ C216 3A 58 C5     .StartBank2:            ld      a,(MinYOffset)
 160+ C219                                      IfAIsZeroGoto .OffsetBank2IsZero; if offset is 0 then we just continue, offset can never be >127 else there would be no draw
 160+ C219 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 160+ C21A CA 2E C2    >                        jp	z, .OffsetBank2IsZero
 161+ C21D 21 1F C1     .NotZeroOffset:         ld      hl,SBnKLineArray + (64 * 2); adjust to correct offset
 162+ C220 ED 31                                add     hl,a
 163+ C222 ED 31                                add     hl,a
 164+ C224 4F                                   ld      c,a                     ; iyh = 64 - offset
 165+ C225 3E 40                                ld      a,64                    ; .
 166+ C227 91                                   sub     c                       ; .
 167+ C228 FD 67                                ld      iyh,a                   ; .
 168+ C22A 41                                   ld      b,c                     ; b = offset row
 169+ C22B C3 36 C2                             jp      .drawLineBank2
 170+ C22E 21 1F C1     .OffsetBank2IsZero:     ld      hl,SBnKLineArray + (64 * 2); start with offset adjusted
 171+ C231 06 00                                ld      b,0
 172+ C233 FD 26 40                             ld      iyh,64
 173+ C236 D9           .drawLineBank2:         exx
 174+ C237 3E 40                                ld      a,LAYER2_SHIFTED_SCREEN_MIDDLE
 175+ C239 CD 0D E0                             call    asm_l2_bank_select      ; now do the lower bank
 176+ C23C D9                                   exx
 177+ C23D              ; Could make this a sub routine but unwrapping saves a call
 178+ C23D                                      SunBankDraw
 178+ C23D 7E          >.drawLoop               ld      a,(hl)
 178+ C23E 4F          >                        ld      c,a                     ; c = left column
 178+ C23F 23          >                        inc     hl
 178+ C240 56          >                        ld      d,(hl)                  ; d = right col
 178+ C241 23          >                        inc     hl                      ; now ready for next linel
 178+ C242 E5 C5       >                        push    hl,,bc
 178+ C244 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 178+ C245             >                        IfResultZeroGoto .NoLineDraw
 178+ C245 CA 54 C2    >                        jp	z,.NoLineDraw
 178+ C248 7A          >                        ld      a,d                     ; get right col back
 178+ C249 91          >                        sub     c                       ; subtract left so a = length
 178+ C24A 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 178+ C24B CC DC C1    >                        call    z, .FixWidth
 178+ C24E 57          >                        ld      d,a                     ; de = length (e - d)
 178+ C24F 1E D8       >                        ld      e,216                   ; yellow
 178+ C251 CD 3A E2    >                        call    l2_draw_horz_dma        ; draw without bank switch
 178+ C254 C1 E1       >.NoLineDraw:            pop     hl,,bc
 178+ C256 04          >                        inc     b
 178+ C257 FD 25       >                        dec     iyh
 178+ C259             >                        IfResultNotZeroGoto  .drawLoop
 178+ C259 C2 3D C2    >                        jp	nz,.drawLoop
 179+ C25C C9                                   ret
 180+ C25D
 181+ C25D              ; --------------------------------------------------------------
 182+ C25D              ; This sets current universe object to a star / sun, they use sign + 23 bit positions
 183+ C25D              CreateSun:              ;break
 184+ C25D CD A1 C1                             call    ResetSBnKData
 185+ C260 3A 99 98                             ld      a,(WorkingSeeds+3)
 186+ C263 E6 07                                and     %00000111
 187+ C265 E6 01                                and     %00000001;DEBUG TO DO
 188+ C267
 189+ C267 F6 81                                or      %10000001 ;so working seed byte 3, take lower 3 bits, make sure 0 is set for negative z
 190+ C269 32 18 C0                             ld      (SBnKzsgn),a
 191+ C26C 3A 9B 98                             ld      a,(WorkingSeeds+5)
 192+ C26F E6 03                                and     %00000011
 193+ C271 32 12 C0                             ld      (SBnKxsgn),a
 194+ C274 32 15 C0                             ld      (SBnKysgn),a
 195+ C277                                   ; DEBUG   ld      hl, $0000
 196+ C277                                   ; DEBUG   ld      (SBnKzhi),hl
 197+ C277                                   ; DEBUG   ld      a, $E3
 198+ C277                                   ; DEBUG   ld      (SBnKzlo),a
 199+ C277 C9                                   ret
 200+ C278              ; --------------------------------------------------------------
 201+ C278              ; This sets current universe object to a planet,they use sign + 23 bit positions
 202+ C278              ;;TODOCreatePlanet:           call    ResetSBnKData
 203+ C278              ;;TODO                        ld      a,(DisplayTekLevel)
 204+ C278              ;;TODO                        and     $00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 205+ C278              ;;TODO                        or      $10000000
 206+ C278              ;;TODO                        ld      (SBnKShipType),a
 207+ C278              ;;TODO                        xor     a
 208+ C278              ;;TODO                        ld      (SBnKaiatkecm),a
 209+ C278              ;;TODO                        MaxUnivPitchAndRoll
 210+ C278              ;;TODO                        ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 211+ C278              ;;TODO                        and     %00000011               ; .
 212+ C278              ;;TODO                        adc     3                       ; .
 213+ C278              ;;TODO                        ld      (SBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
 214+ C278              ;;TODO                        rr      a
 215+ C278              ;;TODO                        ld      (PlanetXsgn),a
 216+ C278              ;;TODO                        ld      (PlanetYsgn),a
 217+ C278              ;;TODO                        ret
 218+ C278
 219+ C278
 220+ C278                                 ;     include "./Maths/ADDHLDESignBC.asm"
 221+ C278
 222+ C278 7C           SunADDHLDESignedv3:     ld      a,h
 223+ C279 E6 80                                and     SignOnly8Bit
 224+ C27B 47                                   ld      b,a                         ;save sign bit in b
 225+ C27C AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 226+ C27D                                      JumpIfNegative .SunADDHLDEOppSGN    ;Signs are opposite there fore we can subtract to get difference
 226+ C27D FA 98 C2    >                        jp		m, .SunADDHLDEOppSGN
 227+ C280 78           .SunADDHLDESameSigns:   ld      a,b
 228+ C281 B2                                   or      d
 229+ C282                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 229+ C282 FA 8A C2    >                        jp		m, .SunADDHLDESameNeg
 230+ C285                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 230+ C285 FA 8A C2    >                        jp		m, .SunADDHLDESameNeg
 231+ C288 19                                   add     hl,de
 232+ C289 C9                                   ret
 233+ C28A 7C           .SunADDHLDESameNeg:     ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 234+ C28B E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 235+ C28D 67                                   ld      h,a
 236+ C28E 7A                                   ld      a,d
 237+ C28F E6 7F                                and     SignMask8Bit
 238+ C291 57                                   ld      d,a
 239+ C292 19                                   add     hl,de
 240+ C293 3E 80                                ld      a,SignOnly8Bit
 241+ C295 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 242+ C296 67                                   ld      h,a
 243+ C297 C9                                   ret
 244+ C298 7C           .SunADDHLDEOppSGN:      ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 245+ C299 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 246+ C29B 67                                   ld      h,a
 247+ C29C 7A                                   ld      a,d
 248+ C29D E6 7F                                and     SignMask8Bit
 249+ C29F 57                                   ld      d,a
 250+ C2A0 B7                                   or      a
 251+ C2A1 ED 52                                sbc     hl,de
 252+ C2A3 38 04                                jr      c,.SunADDHLDEOppInvert
 253+ C2A5 78           .SunADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 254+ C2A6 B4                                   or      h
 255+ C2A7 67                                   ld      h,a                         ; set the previou sign value
 256+ C2A8 C9                                   ret
 257+ C2A9              .SunADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 257+ C2A9 AF          >                    xor a
 257+ C2AA 95          >                    sub l
 257+ C2AB 6F          >                    ld l,a
 257+ C2AC 9F          >                    sbc a,a
 257+ C2AD 94          >                    sub h
 257+ C2AE 67          >                    ld h,a
 258+ C2AF 78                                   ld      a,b
 259+ C2B0 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 260+ C2B2 B4                                   or      h
 261+ C2B3 67                                   ld      h,a                         ; recover sign
 262+ C2B4 C9                                   ret
 263+ C2B5
 264+ C2B5              ; we could cheat, flip the sign of DE and just add but its not very optimised
 265+ C2B5 7C           .SunSUBHLDESignedv3:        ld      a,h
 266+ C2B6 E6 80                                and     SignOnly8Bit
 267+ C2B8 47                                   ld      b,a                         ;save sign bit in b
 268+ C2B9 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 269+ C2BA                                      JumpIfNegative .SunSUBHLDEOppSGN        ;Signs are opposite therefore we can add
 269+ C2BA FA E8 C2    >                        jp		m, .SunSUBHLDEOppSGN
 270+ C2BD 78           .SunSUBHLDESameSigns:       ld      a,b
 271+ C2BE B2                                   or      d
 272+ C2BF                                      JumpIfNegative .SunSUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 272+ C2BF FA C9 C2    >                        jp		m, .SunSUBHLDESameNeg
 273+ C2C2 B7                                   or      a
 274+ C2C3 ED 52                                sbc     hl,de
 275+ C2C5                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 275+ C2C5 FA DC C2    >                        jp		m, .SunSUBHLDESameOvrFlw
 276+ C2C8 C9                                   ret
 277+ C2C9 7C           .SunSUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 278+ C2CA E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 279+ C2CC 67                                   ld      h,a
 280+ C2CD 7A                                   ld      a,d
 281+ C2CE E6 7F                                and     SignMask8Bit
 282+ C2D0 57                                   ld      d,a
 283+ C2D1 B7                                   or      a
 284+ C2D2 ED 52                                sbc     hl,de
 285+ C2D4                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 285+ C2D4 FA DC C2    >                        jp		m, .SunSUBHLDESameOvrFlw
 286+ C2D7 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 287+ C2D8 F6 80                                or      SignOnly8Bit
 288+ C2DA 67                                   ld      h,a
 289+ C2DB C9                                   ret
 290+ C2DC              .SunSUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 290+ C2DC AF          >                    xor a
 290+ C2DD 95          >                    sub l
 290+ C2DE 6F          >                    ld l,a
 290+ C2DF 9F          >                    sbc a,a
 290+ C2E0 94          >                    sub h
 290+ C2E1 67          >                    ld h,a
 291+ C2E2 78                                   ld      a,b
 292+ C2E3 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 293+ C2E5 B4                                   or      h
 294+ C2E6 67                                   ld      h,a                         ; recover sign
 295+ C2E7 C9                                   ret
 296+ C2E8 B7           .SunSUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 297+ C2E9 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 298+ C2EA E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 299+ C2EC 67                                   ld      h,a
 300+ C2ED 7A                                   ld      a,d
 301+ C2EE E6 7F                                and     SignMask8Bit
 302+ C2F0 57                                   ld      d,a
 303+ C2F1 19                                   add     hl,de
 304+ C2F2 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 305+ C2F3 B4                                   or      h
 306+ C2F4 67                                   ld      h,a                         ; set the previou sign value
 307+ C2F5 C9                                   ret
 308+ C2F6
 309+ C2F6
 310+ C2F6              .SunSBCHLDESigned:      JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 310+ C2F6 CB 7C       >                        bit 	7,h
 310+ C2F8 C2 09 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 311+ C2FB              .SunSBCHLDEhlPos:       JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 311+ C2FB CB 7C       >                        bit 	7,h
 311+ C2FD C2 09 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 312+ C300 ED 52        .SunSBCHLDEhlPosDePos:  sbc     hl,de                           ; ignore overflow for now will sort later TODO
 313+ C302 C9                                   ret
 314+ C303 CB BA        .SunSBCHLDEhlPosDeNeg:  res     7,d
 315+ C305 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 316+ C306 CB FA                                set     7,d
 317+ C308 C9                                   ret
 318+ C309 CB BC        .SunSBCHLDEhlNeg:       res     7,h
 319+ C30B                                      JumpOnBitSet d,7,.SunSBCHLDEhlNegdeNeg
 319+ C30B CB 7A       >                        bit 	7,d
 319+ C30D C2 15 C3    >                        jp      nz,.SunSBCHLDEhlNegdeNeg
 320+ C310 ED 52        .SunSBCHLDEhlNegdePos:  sbc     hl,de                       ; ignore overflow for now will sort later TODO
 321+ C312 CB FC                                set     7,h
 322+ C314 C9                                   ret
 323+ C315 CB BA        .SunSBCHLDEhlNegdeNeg:      res     7,d
 324+ C317 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 325+ C318 CB FA                                set     7,d
 326+ C31A CB FC                                set     7,h
 327+ C31C C9                                   ret
 328+ C31D
 329+ C31D
 330+ C31D
 331+ C31D              ;                    include "Universe/InitialiseOrientation.asm"
 332+ C31D              ;----------------------------------------------------------------------------------------------------------------------------------
 333+ C31D              ;;;
 334+ C31D              ;;;Project:
 335+ C31D              ;;;PROJ:                   ld      hl,(SBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 336+ C31D              ;;;                        ld      (varP),hl
 337+ C31D              ;;;                        ld      a,(SBnKxsgn)
 338+ C31D              ;;;                        call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 339+ C31D              ;;;                        ret     c                               ; carry means don't print
 340+ C31D              ;;;                        ld      hl,(varK)                       ; hl = k (0 1)
 341+ C31D              ;;;                        ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 342+ C31D              ;;;                        ld      a,ViewCenterX
 343+ C31D              ;;;                        add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 344+ C31D              ;;;                        ld      (varK3),hl                      ; K3 = X position on screen
 345+ C31D              ;;;ProjectY:               ld      hl,(SBnKylo)
 346+ C31D              ;;;                        ld      (varP),hl
 347+ C31D              ;;;                        ld      a,(SBnKysgn)
 348+ C31D              ;;;                        call    PLS6
 349+ C31D              ;;;                        ret     c
 350+ C31D              ;;;                        ld      hl,(varK)                       ; hl = k (0 1)
 351+ C31D              ;;;                        ld      a,ViewCenterY
 352+ C31D              ;;;                        add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 353+ C31D              ;;;                        ld      (varK4),hl                      ; K3 = X position on screen
 354+ C31D              ;;;                        ret
 355+ C31D              ;--------------------------------------------------------------------------------------------------------
 356+ C31D              ;                        include "./ModelRender/EraseOldLines-EE51.asm"
 357+ C31D              ;                        include "./ModelRender/TrimToScreenGrad-LL118.asm"
 358+ C31D              ;                        include "./ModelRender/CLIP-LL145.asm"
 359+ C31D              ;--------------------------------------------------------------------------------------------------------
 360+ C31D              ;                        include "./Variables/CopyRotmatToTransMat.asm"
 361+ C31D                                      include "./Universe/Sun/TransposeSunXX12BySunToSunXX15.asm"
# file opened: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
   1++C31D              TransposeSXX12BySunToSXX15:
   2++C31D 2A 7A C0                             ld		hl,(SBnKXX12xLo)					; get X into HL
   3++C320 7C                                   ld		a,h			                        ; get XX12 Sign
   4++C321 E6 80                                and		$80									; check sign bit on high byte
   5++C323 47                                   ld		b,a									; and put it in of 12xlo in b
   6++C324                                      ;110921 debugld      h,0
   7++C324 7C                                   ld      a,h
   8++C325 E6 7F                                and     $7F
   9++C327 67                                   ld      h,a
  10++C328                                      ;110921 debugld      h,0
  11++C328 ED 5B 10 C0                          ld		de,(SBnKxlo)						;
  12++C32C 3A 12 C0                             ld		a,(SBnKxsgn)						; get Ship Pos (low,high,sign)
  13++C32F E6 80                                and		$80									; make sure we only have bit 7
  14++C331 4F                                   ld		c,a									; and put sign of unkxsgn c
  15++C332 CD 8C AD                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++C335 B4                                   or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++C336 67                                   ld		h,a
  18++C337 22 74 C0                             ld		(SBnKXScaled),hl					; now write it out to XX15 X pos
  19++C33A              ; ..................................
  20++C33A 2A 7C C0                             ld		hl,(SBnKXX12yLo)					; Repeat above for Y coordinate
  21++C33D 7C                                   ld		a,h
  22++C33E E6 80                                and		$80
  23++C340 47                                   ld		b,a
  24++C341                                      ;110921 debugld      h,0
  25++C341 7C                                   ld      a,h
  26++C342 E6 7F                                and     $7F
  27++C344 67                                   ld      h,a
  28++C345                                      ;110921 debugld      h,0
  29++C345 ED 5B 13 C0                          ld		de,(SBnKylo)
  30++C349 3A 15 C0                             ld		a,(SBnKysgn)
  31++C34C E6 80                                and		$80									; make sure we only have bit 7
  32++C34E 4F                                   ld		c,a
  33++C34F CD 8C AD                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++C352 B4                                   or		h									; combine sign in A with H
  35++C353 67                                   ld		h,a
  36++C354 22 76 C0                             ld		(SBnKYScaled),hl
  37++C357              ; ..................................
  38++C357 2A 7E C0                             ld		hl,(SBnKXX12zLo)					; and now repeat for Z cooord
  39++C35A 7C                                   ld		a,h
  40++C35B E6 80                                and		$80
  41++C35D 47                                   ld		b,a
  42++C35E                                      ;110921 debugld      h,0
  43++C35E 7C                                   ld      a,h
  44++C35F E6 7F                                and     $7F
  45++C361 67                                   ld      h,a
  46++C362                                      ;110921 debugld      h,0
  47++C362 ED 5B 16 C0                          ld		de,(SBnKzlo)
  48++C366 3A 18 C0                             ld		a,(SBnKzsgn)
  49++C369 E6 80                                and		$80									; make sure we only have bit 7
  50++C36B 4F                                   ld		c,a
  51++C36C CD 8C AD                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++C36F B4                                   or		h									; combine sign in A with H
  53++C370 67                                   ld		h,a
  54++C371 CB 7C                                bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++C373 20 16                                jr		nz,.ClampZto4                        ; result was negative so we need to clamp to 4
  56++C375 E6 7F                                and     $7F                                 ; a = value unsigned
  57++C377 20 06                                jr      nz,.NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++C379 7D                                   ld      a,l                                 ; get low byte now
  59++C37A                                      JumpIfALTNusng 4,.ClampZto4					; if its < 4 then fix at 4
  59++C37A FE 04       >                        cp      4
  59++C37C DA 8B C3    >                        jp		c, .ClampZto4
  60++C37F 22 78 C0     .NoClampZto4:           ld		(SBnKZScaled),hl					; hl = signed calculation and > 4
  61++C382 7D                                   ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  62++C383 32 B3 97                             ld      (varT),a
  63++C386 7C                                   ld		a,h
  64++C387 32 95 97                             ld      (varU),a
  65++C38A C9                                   ret
  66++C38B              ; This is where we limit 4 to a minimum of 4
  67++C38B 21 04 00     .ClampZto4:             ld		hl,4
  68++C38E 22 78 C0                             ld		(SBnKZScaled),hl; BODGE FOR NOW
  69++C391 7D                                   ld		a,l
  70++C392 32 B3 97                             ld      (varT),a                            ;                                                                           ;;;
  71++C395 7C                                   ld		a,h
  72++C396 32 95 97                             ld      (varU),a 						; compatibility for now
  73++C399 C9                                   ret
  74++C39A
# file closed: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
 362+ C39A
 363+ C39A
 364+ C39A ED 4B 78 C0  ScaleSunTo8Bit:			ld			bc,(SBnKZScaled)
 365+ C39E 2A 74 C0                             ld			hl,(SBnKXScaled)
 366+ C3A1 ED 5B 76 C0                          ld			de,(SBnKYScaled)
 367+ C3A5 78           .SetABSbc:              ld			a,b
 368+ C3A6 DD 67                                ld			ixh,a
 369+ C3A8 E6 7F                                and			SignMask8Bit
 370+ C3AA 47                                   ld			b,a									; bc = ABS bc
 371+ C3AB 7C           .SetABShl:              ld			a,h
 372+ C3AC DD 6F                                ld			ixl,a
 373+ C3AE E6 7F                                and			SignMask8Bit
 374+ C3B0 67                                   ld			h,a									; hl = ABS hl
 375+ C3B1 7A           .SetABSde:              ld			a,d
 376+ C3B2 FD 67                                ld			iyh,a
 377+ C3B4 E6 7F                                and			SignMask8Bit
 378+ C3B6 57                                   ld			d,a									; de = ABS de
 379+ C3B7 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 380+ C3B8 B4                                   or			h                                   ; XX15+1	\ x hi
 381+ C3B9 B2                                   or			d                                   ; XX15+4	\ y hi
 382+ C3BA 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 383+ C3BC                                      ShiftHLRight1
 383+ C3BC CB 3C       >			   srl h
 383+ C3BE CB 1D       >			   rr  l
 384+ C3C0                                      ShiftDERight1
 384+ C3C0 CB 3A       >			   srl d
 384+ C3C2 CB 1B       >			   rr  e
 385+ C3C4                                      ShiftBCRight1
 385+ C3C4 CB 38       >			   srl b
 385+ C3C6 CB 19       >			   rr  c
 386+ C3C8 C3 B7 C3                             jp          .ScaleNodeTo8BitLoop
 387+ C3CB              ; now we have scaled values we have to deal with sign
 388+ C3CB DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 389+ C3CD E6 80                                and			SignOnly8Bit
 390+ C3CF B0                                   or			b
 391+ C3D0 47                                   ld			b,a
 392+ C3D1 DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 393+ C3D3 E6 80                                and			SignOnly8Bit
 394+ C3D5 B4                                   or			h
 395+ C3D6 67                                   ld			h,a
 396+ C3D7 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 397+ C3D9 E6 80                                and			SignOnly8Bit
 398+ C3DB B2                                   or			d
 399+ C3DC 57                                   ld			d,a
 400+ C3DD ED 43 78 C0  .SignsDoneSaveResult:	ld			(SBnKZScaled),bc
 401+ C3E1 22 74 C0                             ld			(SBnKXScaled),hl
 402+ C3E4 ED 53 76 C0                          ld			(SBnKYScaled),de
 403+ C3E8 78                                   ld			a,b
 404+ C3E9 32 95 97                             ld			(varU),a
 405+ C3EC 79                                   ld			a,c
 406+ C3ED 32 B3 97                             ld			(varT),a
 407+ C3F0 C9                                   ret
 408+ C3F1
 409+ C3F1              ;--------------------------------------------------------------------------------------------------------
 410+ C3F1              ;;;;X = normal scale
 411+ C3F1              ;;;;ZtempHi = zhi
 412+ C3F1              ;;;;......................................................
 413+ C3F1              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 414+ C3F1              ;;;;  Loop                                              ::LL90
 415+ C3F1              ;;;;     inc X
 416+ C3F1              ;;;;     divide X, Y & ZtempHiLo by 2
 417+ C3F1              ;;;;  Until ZtempHi = 0
 418+ C3F1              ;;;;......................................................
 419+ C3F1              ;-LL21---------------------------------------------------------------------------------------------------
 420+ C3F1              ;                        include "./Universe/NormaliseTransMat.asm"
 421+ C3F1              ;-LL91---------------------------------------------------------------------------------------------------
 422+ C3F1
 423+ C3F1              ; Now we have
 424+ C3F1              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 425+ C3F1              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 426+ C3F1              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 427+ C3F1              ;
 428+ C3F1              ;--------------------------------------------------------------------------------------------------------
 429+ C3F1              ;--------------------------------------------------------------------------------------------------------
 430+ C3F1              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 431+ C3F1              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 432+ C3F1              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 433+ C3F1              ; Returns
 434+ C3F1              ;
 435+ C3F1              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 436+ C3F1              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 437+ C3F1              ;
 438+ C3F1              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 439+ C3F1              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 440+ C3F1              ;
 441+ C3F1              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 442+ C3F1              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 443+ C3F1
 444+ C3F1
 445+ C3F1               ; TESTEDOK
 446+ C3F1              SXX12DotOneRow:
 447+ C3F1              SXX12CalcX:              N0equN1byN2div256 varT, (hl), (SBnKXScaled)       ; T = (hl) * regSunXX15fx /256
 447+ C3F1 3A 74 C0    >                        ld      a,(SBnKXScaled)                        ;
 447+ C3F4 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 447+ C3F5 7E          >                        ld      a,(hl)                        ; A = XX16 element
 447+ C3F6 57          >                        ld      d,a
 447+ C3F7 ED 30       >                        mul
 447+ C3F9 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 447+ C3FA 32 B3 97    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 448+ C3FD 23                                   inc     hl                                  ; move to sign byte
 449+ C3FE              SXX12CalcXSign:          AequN1xorN2 SBnKXScaledSign,(hl)             ;
 449+ C3FE 3A 75 C0    >                        ld      a,(SBnKXScaledSign)
 449+ C401 AE          >                        xor     (hl)
 450+ C402 32 98 97                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 451+ C405 23                                   inc     hl
 452+ C406              SXX12CalcY:              N0equN1byN2div256 varQ, (hl),(SBnKYScaled)       ; Q = XX16 * SunXX15 /256 using varQ to hold regSunXX15fx
 452+ C406 3A 76 C0    >                        ld      a,(SBnKYScaled)                        ;
 452+ C409 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 452+ C40A 7E          >                        ld      a,(hl)                        ; A = XX16 element
 452+ C40B 57          >                        ld      d,a
 452+ C40C ED 30       >                        mul
 452+ C40E 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 452+ C40F 32 96 97    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 453+ C412                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 453+ C412 3A B3 97    >                        ld       a,(varT)
 453+ C415 32 97 97    >                        ld       (varR),a
 454+ C418 23                                   inc     hl
 455+ C419                                      AequN1xorN2 SBnKYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 455+ C419 3A 77 C0    >                        ld      a,(SBnKYScaledSign)
 455+ C41C AE          >                        xor     (hl)
 456+ C41D              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 457+ C41D E5           SSTequSRplusAQ           push    hl
 458+ C41E CD AA AE                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 459+ C421 E1                                   pop     hl
 460+ C422 32 B3 97                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 461+ C425 23                                   inc     hl
 462+ C426              SXX12CalcZ:              N0equN1byN2div256 varQ,(hl),(SBnKZScaled)       ; Q = |sidev_z| * z_lo / 256
 462+ C426 3A 78 C0    >                        ld      a,(SBnKZScaled)                        ;
 462+ C429 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 462+ C42A 7E          >                        ld      a,(hl)                        ; A = XX16 element
 462+ C42B 57          >                        ld      d,a
 462+ C42C ED 30       >                        mul
 462+ C42E 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 462+ C42F 32 96 97    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 463+ C432                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 463+ C432 3A B3 97    >                        ld       a,(varT)
 463+ C435 32 97 97    >                        ld       (varR),a
 464+ C438 23                                   inc     hl
 465+ C439                                      AequN1xorN2 SBnKZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 465+ C439 3A 79 C0    >                        ld      a,(SBnKZScaledSign)
 465+ C43C AE          >                        xor     (hl)
 466+ C43D              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 467+ C43D CD AA AE                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 468+ C440              ; Now we exit with A = result S = Sign
 469+ C440 C9                                   ret
 470+ C441
 471+ C441
 472+ C441
 473+ C441              ;--------------------------------------------------------------------------------------------------------
 474+ C441                                      include "./Universe/Sun/CopySunXX12ScaledToSunXX18.asm"
# file opened: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
   1++C441              CopySXX12ScaledToSXX18:
   2++C441              CopyResultToSDrawCam:
   3++C441                      ldCopyByte SXX12         ,SXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C441 3A 7A C0    >                        ld       a,(SXX12)
   3++C444 32 68 C0    >                        ld       (SXX18),a
   4++C447                      ldCopyByte SXX12+1       ,SXX18+2           ; XX12+1 => XX18+2
   4++C447 3A 7B C0    >                        ld       a,(SXX12+1)
   4++C44A 32 6A C0    >                        ld       (SXX18+2),a
   5++C44D                      ldCopyByte SXX12+2       ,SXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C44D 3A 7C C0    >                        ld       a,(SXX12+2)
   5++C450 32 6B C0    >                        ld       (SXX18+3),a
   6++C453                      ldCopyByte SXX12+3       ,SXX18+5           ; XX12+3 => XX18+5
   6++C453 3A 7D C0    >                        ld       a,(SXX12+3)
   6++C456 32 6D C0    >                        ld       (SXX18+5),a
   7++C459                      ldCopyByte SXX12+4       ,SXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C459 3A 7E C0    >                        ld       a,(SXX12+4)
   7++C45C 32 6E C0    >                        ld       (SXX18+6),a
   8++C45F                      ldCopyByte SXX12+5       ,SXX18+8           ; XX12+5 => XX18+8
   8++C45F 3A 7F C0    >                        ld       a,(SXX12+5)
   8++C462 32 70 C0    >                        ld       (SXX18+8),a
   9++C465 C9                   ret
  10++C466
# file closed: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
 475+ C466              ;                        include "./Variables/CopySunXX12toSunXX15.asm"
 476+ C466              ;                       include "./Variables/CopySunXX18toSunXX15.asm"
 477+ C466              ;                       include "./Variables/CopySunXX18ScaledToSunXX15.asm"
 478+ C466              ;                       include "./Variables/CopySunXX12ToScaled.asm"
 479+ C466              ;--------------------------------------------------------------------------------------------------------
 480+ C466              ;                        include "./Maths/Utilities/DotProductXX12SunXX15.asm"
 481+ C466              ;--------------------------------------------------------------------------------------------------------
 482+ C466
 483+ C466 DD 25        ScaleDownSXX15byIXH:    dec     ixh
 484+ C468 F8                                   ret     m
 485+ C469 21 74 C0                             ld      hl,SBnKXScaled
 486+ C46C CB 3E                                srl     (hl)                        ; SunXX15  \ xnormal lo/2 \ LL93+3 \ counter X
 487+ C46E 23                                   inc     hl                          ; looking at SunXX15 x sign now
 488+ C46F 23                                   inc     hl                          ; looking at SunXX15 y Lo now
 489+ C470 CB 3E                                srl     (hl)                        ; SunXX15+2    \ ynormal lo/2
 490+ C472 23                                   inc     hl                          ; looking at SunXX15 y sign now
 491+ C473 23                                   inc     hl                          ; looking at SunXX15 z Lo now
 492+ C474 CB 3E                                srl     (hl)
 493+ C476 C3 66 C4                             jp      ScaleDownSXX15byIXH
 494+ C479 C9                                   ret
 495+ C47A
 496+ C47A 21 68 C0     DivideSXX18By2:         ld      hl,SBnKDrawCam0xLo
 497+ C47D CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 498+ C47F 23                                   inc     hl                          ; looking at XX18 x sign now
 499+ C480 23                                   inc     hl                          ; looking at XX18 y Lo now
 500+ C481 CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 501+ C483 23                                   inc     hl                          ; looking at XX18 y sign now
 502+ C484 23                                   inc     hl                          ; looking at XX18 z Lo now
 503+ C485 CB 3E                                srl     (hl)
 504+ C487 C9                                   ret
 505+ C488
 506+ C488              ; ......................................................                                                         ;;;
 507+ C488
 508+ C488
 509+ C488
 510+ C488
 511+ C488              ; Pitch and roll are 2 phases
 512+ C488              ; 1 - we apply our pitch and roll to the ship position
 513+ C488              ;       x -> x + alpha * (y - alpha * x)
 514+ C488              ;       y -> y - alpha * x - beta * z
 515+ C488              ;       z -> z + beta * (y - alpha * x - beta * z)
 516+ C488              ; which can be simplified as:
 517+ C488              ;       1. K2 = y - alpha * x
 518+ C488              ;       2. z = z + beta * K2
 519+ C488              ;       3. y = K2 - beta * z
 520+ C488              ;       4. x = x + alpha * y
 521+ C488              ; 2 - we apply our patch and roll to the ship orientation
 522+ C488              ;      Roll calculations:
 523+ C488              ;
 524+ C488              ;        nosev_y = nosev_y - alpha * nosev_x_hi
 525+ C488              ;        nosev_x = nosev_x + alpha * nosev_y_hi
 526+ C488              ;      Pitch calculations:
 527+ C488              ;
 528+ C488              ;        nosev_y = nosev_y - beta * nosev_z_hi
 529+ C488              ;        nosev_z = nosev_z + beta * nosev_y_hi
 530+ C488
 531+ C488
 532+ C488                          INCLUDE "./Universe/Sun/SunApplyMyRollAndPitch.asm"
# file opened: ././Universe/Sun/SunApplyMyRollAndPitch.asm
   1++C488
   2++C488              ; Full version
   3++C488              ; 1. K2 = y - alpha * x
   4++C488              ; 2. z = z + beta * K2
   5++C488              ; 3. y = K2 - beta * z
   6++C488              ; 4. x = x + alpha * y
   7++C488
   8++C488
   9++C488
  10++C488              ; SunrollWork holds Alpha intermidate results
  11++C488 00 00 00     SunRollResult:          DS 3                    ; equivalent of K
  12++C48B              SunRollResultp1         equ SunRollResult
  13++C48B              SunRollResultp2         equ SunRollResult+1
  14++C48B              SunRollResultp3         equ SunRollResult+2
  15++C48B 00           SunRollResultp4         DB 0
  16++C48C              ;SunRollResult2:         DS 3                    ; do we need this? TODO
  17++C48C 00 00 00     SunZResult:             DS 3
  18++C48F              ;  1. K2 = y - alpha * x
  19++C48F              ;  2. z = z + beta * K2
  20++C48F              ;  3. y = K2 - beta * z
  21++C48F              ;  4. x = x + alpha * y
  22++C48F              ;.... or
  23++C48F              ;  2. z = z + (beta * (y - alpha * x))
  24++C48F              ;  3. y = (y - alpha * x) - (beta * z)
  25++C48F              ;  4. x = x + (alpha * y)
  26++C48F
  27++C48F
  28++C48F              ;----------------------------------------------------------------------------------------------------------------------------------
  29++C48F              ; based on MV40
  30++C48F 3A A2 96     SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  31++C492 21 91 96                             ld      hl,BETA
  32++C495 B6                                   or      (hl)
  33++C496 E6 7F                                and     SignMask8Bit
  34++C498 CA 34 C5                             jp      z,.NoRotation
  35++C49B              .CalcZ:                 ;break
  36++C49B 3A A2 96                             ld      a,(ALPHA)                   ; get roll magnitude
  37++C49E FE 00                                cp      0
  38++C4A0 20 0B                                jr      nz,.ApplyAlpha
  39++C4A2 ED 5B 14 C0  .NoAlpha:               ld      de,(SBnKyhi)                ; its going to be just Y if alpha is 0
  40++C4A6 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  41++C4A9 6F                                   ld      l,a                         ; .
  42++C4AA C3 C9 C4                             jp      .SaveResult1                ; .
  43++C4AD EE 80        .ApplyAlpha:            xor     SignOnly8Bit                ; get Q = -alpha
  44++C4AF 57                                   ld      d,a                         ; d reg represents Q (abount to roll)
  45++C4B0 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  46++C4B3 5F                                   ld      e,a                         ;
  47++C4B4 2A 11 C0                             ld      hl,(SBnKxhi)                ;
  48++C4B7 CD 44 A8                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256
  49++C4BA 7A           .SkipAlphaMultiply:     ld      a,d
  50++C4BB 32 8B C4                             ld      (SunRollResultp4),a         ; save D (I guess we need the sign?)
  51++C4BE 3A 13 C0     .CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo
  52++C4C1 67                                   ld      h,a
  53++C4C2 ED 4B 14 C0                          ld      bc,(SBnKyhi)
  54++C4C6 CD 14 A5                             call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256) (which is K2)
  55++C4C9 7A           .SaveResult1:           ld      a,d                         ; SunPitchWork = AHL = DEL
  56++C4CA 63                                   ld      h,e                         ;
  57++C4CB 32 8A C4     .CopyResultTo2:         ld      (SunRollResult+2),a         ; .
  58++C4CE 22 88 C4                             ld      (SunRollResult) ,hl         ; .
  59++C4D1 5D           .CalcY:                 ld      e,l                         ; HLE = result (K2)
  60++C4D2 6C                                   ld      l,h                         ; .
  61++C4D3 67                                   ld      h,a                         ; .
  62++C4D4 3A 91 96                             ld      a,(BETA)                    ; get pitch
  63++C4D7 57                                   ld      d,a                         ; now D = BETA
  64++C4D8 CD 44 A8                             call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta or K2 * beta
  65++C4DB ED 4B 17 C0                          ld      bc,(SBnKzhi)                ; BCH = z
  66++C4DF 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
  67++C4E2 67                                   ld      h,a                         ; .
  68++C4E3 CD 14 A5                             call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
  69++C4E6 ED 53 8D C4  .SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
  70++C4EA ED 53 17 C0                          ld      (SBnKzhi),de                ; .
  71++C4EE 7D                                   ld      a,l                         ; .
  72++C4EF 32 8C C4                             ld      (SunZResult),a              ; .
  73++C4F2 32 16 C0                             ld      (SBnKzlo),a                 ; .
  74++C4F5 EB           .CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
  75++C4F6                                      ; not needed bugld      e,l                         ; .
  76++C4F6 3A 91 96                             ld      a,(BETA)                    ; d = - BETA
  77++C4F9 EE 80                                xor     SignOnly8Bit                ; .
  78++C4FB 57                                   ld      d,a                         ; .
  79++C4FC CD 44 A8                             call    mulHLEbyDSigned             ; DELC = z * - BETA
  80++C4FF ED 4B 89 C4                          ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
  81++C503 3A 88 C4                             ld      a,(SunRollResult)           ; .
  82++C506 67                                   ld      h,a                         ; .
  83++C507 CD 14 A5                             call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA) (K2+ (Z * -BETA)
  84++C50A ED 53 14 C0                          ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
  85++C50E 7D                                   ld      a,l                         ; .
  86++C50F 32 13 C0                             ld      (SBnKylo),a                 ; .
  87++C512 EB           .CalcX:                 ex      de,hl                       ; HLE = DEL = Y
  88++C513 5D                                   ld      e,l                         ; .
  89++C514 3A A2 96                             ld      a,(ALPHA)                   ; D = alpha
  90++C517 FE 00                                cp      0                           ; if alpha is 0 then don't update x
  91++C519 CA 34 C5                             jp      z,.NoRotation
  92++C51C 57                                   ld      d,a                         ; .
  93++C51D CD 44 A8                             call    mulHLEbyDSigned             ; DELC = Y * alpha
  94++C520 ED 4B 11 C0                          ld      bc,(SBnKxhi)                ; BCH = x
  95++C524 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
  96++C527 67                                   ld      h,a                         ; .
  97++C528 CD 14 A5                             call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
  98++C52B ED 53 11 C0                          ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
  99++C52F 7C                                   ld      a,h                         ; .
 100++C530 32 10 C0                             ld      (SBnKxlo),a                 ; .
 101++C533 C9                                   ret
 102++C534 3A 92 97     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 103++C537 FE 00                                cp      0
 104++C539 C8                                   ret     z
 105++C53A 0E 00                                ld      c,0                         ;
 106++C53C 67                                   ld      h,a                         ;
 107++C53D 06 80                                ld      b,$80                       ;
 108++C53F ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 109++C543 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 110++C546 6F                                   ld      l,a                         ; .
 111++C547 CD 14 A5                             call    AddBCHtoDELsigned           ; update speed
 112++C54A ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 113++C54E 7D                                   ld      a,l
 114++C54F 32 16 C0                             ld      (SBnKzlo),a                ;
 115++C552 C9                                   ret
 116++C553
 117++C553              ;
 118++C553              ;SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
 119++C553              ;                        ld      hl,BETA
 120++C553              ;                        or      (hl)
 121++C553              ;                        and     SignMask8Bit
 122++C553              ;                        ret     z
 123++C553              ;.CalcZ:                 ;break
 124++C553              ;                        ld      a,(ALPHA)                   ; get roll magnitude
 125++C553              ;                        xor     SignOnly8Bit                ; get Q = -alpha
 126++C553              ;                        ld      d,a                         ; d reg represents Q (abount to roll)
 127++C553              ;                        ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
 128++C553              ;                        ld      e,a                         ;
 129++C553              ;                        ld      hl,(SBnKxhi)                ;
 130++C553              ;                        call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256
 131++C553              ;                        ld      a,d
 132++C553              ;                        ld      (SunRollResultp4),a         ; save D (I guess we need the sign?)
 133++C553              ;.CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo
 134++C553              ;                        ld      h,a
 135++C553              ;                        ld      bc,(SBnKyhi)
 136++C553              ;                        call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256)
 137++C553              ;.SaveResult1:           ld      a,l                         ; SunPitchWork = DEL
 138++C553              ;                        ;ld      (SunRollResult), a          ; SunPitchWork + 0 = L
 139++C553              ;                        ex      de,hl                       ; SunPitchWork + 1 = E
 140++C553              ;.CopyResultTo2:         ld      (SunRollResult+1),a         ; SunPitchWork + 2 = D
 141++C553              ;                        ld      (SunRollResult+1) ,hl       ; Copy K to K2 (y - alpha * x)
 142++C553              ;                        ;ld      (SunRollResult2+1),hl       ; also HLA = result
 143++C553              ;                        ld      a,(SunRollResult)           ; .
 144++C553              ;                        ;ld      (SunRollResult2),a          ; .
 145++C553              ;.CalcY:                 ld      e,a                         ; so now HLE = result
 146++C553              ;                        ld      a,(BETA)                    ; get pitch
 147++C553              ;                        ld      d,a                         ; now D = BETA
 148++C553              ;                        call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta
 149++C553              ;                        ld      bc,(SBnKzhi)                ; BCH = z
 150++C553              ;                        ld      a,(SBnKzlo)                 ;
 151++C553              ;                        ld      h,a                         ;
 152++C553              ;                        call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
 153++C553              ;.SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
 154++C553              ;                        ld      (SBnKzhi),de                ; .
 155++C553              ;                        ld      a,l                         ; .
 156++C553              ;                        ld      (SunZResult),a              ; .
 157++C553              ;                        ld      (SBnKzlo),a                 ; .
 158++C553              ;.CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
 159++C553              ;                        ld      e,l                         ;
 160++C553              ;                        ld      a,(BETA)                    ; d = - BETA
 161++C553              ;                        ld      d,a                         ;
 162++C553              ;                        xor     SignOnly8Bit                ;
 163++C553              ;                        call    mulHLEbyDSigned             ; DELC = z * - BETA
 164++C553              ;                        ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
 165++C553              ;                        ld      a,(SunRollResult)           ;
 166++C553              ;                        ld      h,a                         ;
 167++C553              ;                        call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA)
 168++C553              ;                        ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
 169++C553              ;                        ld      a,l                         ;
 170++C553              ;                        ld      (SBnKylo),a                 ;
 171++C553              ;.CalcX:                 ex      de,hl                       ; HLE = DEL = Y
 172++C553              ;                        ld      e,l                         ;
 173++C553              ;                        ld      a,(ALPHA)
 174++C553              ;                        ld      d,a                         ; D = alpha
 175++C553              ;                        call    mulHLEbyDSigned             ; DELC = Y * alpha
 176++C553              ;                        ld      bc,(SBnKxhi)                ; BCH = x
 177++C553              ;                        ld      a,(SBnKxlo)                 ;
 178++C553              ;                        ld      h,a                         ;
 179++C553              ;                        call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
 180++C553              ;                        ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
 181++C553              ;                        ld      a,h                         ;
 182++C553              ;                        ld      (SBnKxlo),a                 ;
 183++C553              ;                        ret
 184++C553              ;
# file closed: ././Universe/Sun/SunApplyMyRollAndPitch.asm
 533+ C553              ;            INCLUDE "./Universe/SunApplyShipRollAndPitch.asm"
 534+ C553
 535+ C553 00           SunOnScreen             DB 0
 536+ C554 00 00        cLineArrayPtr            DW 0
 537+ C556 00           LineCount               DB 0
 538+ C557 00           RaggedSize              DB 0
 539+ C558 00           MinYOffset              DB 0
 540+ C559 00           MaxYOffSet              DB 0
 541+ C55A 00 00        XCentre                 DW  0       ; signed
 542+ C55C 00 00        YCentre                 DW  0       ; signed
 543+ C55E 00           SunRadius               DB  0       ; unsigned
 544+ C55F              ; draw circle
 545+ C55F
 546+ C55F
 547+ C55F CD 8F C4     SunUpdateAndRender:     call    SunApplyMyRollAndPitch
 548+ C562 3A 18 C0     .CheckDrawable:         ld      a,(SBnKzsgn)
 549+ C565 E6 80                                and     SignOnly8Bit
 550+ C567 C0                                   ret     nz
 551+ C568              .CheckDist48:           ReturnIfAGTENusng 48                ; at a distance over 48 its too far away
 551+ C568 FE 30       >                        cp    48
 551+ C56A D0          >                        ret	 nc
 552+ C56B 2A 17 C0                             ld      hl,(SBnKzhi)                ; if the two high bytes are zero then its too close
 553+ C56E B6                                   or      (hl)
 554+ C56F                                      ReturnIfAIsZero
 554+ C56F A7          >                        and a
 554+ C570 C8          >                        ret    z
 555+ C571 ED 5B 16 C0  .SunProjectToEye:       ld      de,(SBnKzlo)                ; X Pos = X / Z
 556+ C575 3A 18 C0                             ld      a,(SBnKzsgn)                ; CDE = z
 557+ C578 4F                                   ld      c,a                         ;
 558+ C579 2A 10 C0                             ld      hl,(SBnKxlo)                ; AHL = x
 559+ C57C 3A 12 C0                             ld      a,(SBnKxsgn)                ;
 560+ C57F CD 54 A6                             call    Div24by24LeadSign           ; could do 16 bit in reality
 561+ C582 79           .CheckPosOnScreenX:     ld      a,c                         ;
 562+ C583 E6 7F                                and     SignMask8Bit                ; a= abs highest byte
 563+ C585 C0                                   ret     nz                          ; off screen
 564+ C586 7A                                   ld      a,d                         ; if high byte >=4 then off screen (we can do this as ABS
 565+ C587 FE 04                                cp      4                           ;
 566+ C589 D0                                   ret     nc                          ; off screen
 567+ C58A 6B                                   ld      l,e
 568+ C58B 7A                                   ld      a,d
 569+ C58C B1                                   or      c                           ; we know that C can only hold a sign bit if its on screen
 570+ C58D 65                                   ld      h,l
 571+ C58E 3E 80                                ld      a,ScreenCenterX
 572+ C590 CD F3 A4                             call    AddAusngToHLsng             ; correct to center of screen
 573+ C593 22 5A C5                             ld      (XCentre),hl                ; save projected X Position
 574+ C596 ED 5B 16 C0  .caclYProj:             ld      de,(SBnKzlo)                ; calc center y
 575+ C59A 3A 18 C0                             ld      a,(SBnKzsgn)                ; cde = z
 576+ C59D 4F                                   ld      c,a                         ;
 577+ C59E 2A 13 C0                             ld      hl,(SBnKylo)                ; ahl = y
 578+ C5A1 3A 15 C0                             ld      a,(SBnKysgn)                ;
 579+ C5A4 CD 54 A6                             call    Div24by24LeadSign           ;
 580+ C5A7 79           .CheckPosOnScreenY:     ld      a,c
 581+ C5A8 E6 7F                                and     SignMask8Bit                ; a= abs highest byte
 582+ C5AA C0                                   ret     nz                          ; off screen
 583+ C5AB 7A                                   ld      a,d                         ; if high byte >=4 then off screen (we can do this as ABS
 584+ C5AC FE 04                                cp      4                           ;
 585+ C5AE D0                                   ret     nc                          ; off screen
 586+ C5AF 6B                                   ld      l,e
 587+ C5B0 7A                                   ld      a,d
 588+ C5B1 B1                                   or      c                           ; we know that C can only hold a sign bit if its on screen
 589+ C5B2 65                                   ld      h,l
 590+ C5B3 3E 60                                ld      a,ScreenCenterY
 591+ C5B5 CD 01 A5                             call    HLEequAusngMinusHLsng
 592+ C5B8 22 5C C5                             ld      (YCentre),hl                  ; save projected T Position
 593+ C5BB 21 9F C0     .ClearLineArray:        ld      hl,SBnKLineArray            ; we load start and end as 0
 594+ C5BE 11 00 01                             ld		de, SunLineArraySize        ; just if we get a 0,0 genuine we will not plot it
 595+ C5C1 3E 00                                ld		a,0
 596+ C5C3 CD 48 93                             call	memfill_dma
 597+ C5C6                                      ;break
 598+ C5C6 ED 5B 16 C0  .CalculateRadius:       ld      de,(SBnKzlo)
 599+ C5CA 3A 18 C0                             ld      a,(SBnKzsgn)
 600+ C5CD 4F                                   ld      c,a
 601+ C5CE 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 602+ C5D1 AF                                   xor     a
 603+ C5D2 CD 54 A6                             call    Div24by24LeadSign           ; radius = AHL/CDE = 24576 / distance z
 604+ C5D5 7A                                   ld      a,d
 605+ C5D6 FE 00                                cp      0
 606+ C5D8 28 02                                jr      z,.SkipSetK
 607+ C5DA 1E F8                                ld      e,248                       ;set radius to 248 as maxed out
 608+ C5DC 21 9F C0     .SkipSetK:              ld      hl,SBnKLineArray
 609+ C5DF 22 9F C1                             ld      (LineArrayPtr),hl
 610+ C5E2 AF                                   xor     a
 611+ C5E3 32 56 C5                             ld      (LineCount),a
 612+ C5E6 16 00                                ld      d,0
 613+ C5E8 7B           .SetRaggedEdgeMax:      ld      a,e
 614+ C5E9 1E 00                                ld      e,0
 615+ C5EB 32 5E C5                             ld      (SunRadius),a
 616+ C5EE FE 60                                cp      96
 617+ C5F0                                      FlipCarryFlag
 617+ C5F0 3F          >                        ccf
 618+ C5F1 CB 13                                rl      e
 619+ C5F3 FE 28                                cp      40
 620+ C5F5                                      FlipCarryFlag
 620+ C5F5 3F          >                        ccf
 621+ C5F6 CB 13                                rl      e
 622+ C5F8 FE 10                                cp      16
 623+ C5FA                                      FlipCarryFlag
 623+ C5FA 3F          >                        ccf
 624+ C5FB CB 13                                rl     e
 625+ C5FD 7B                                   ld      a,e
 626+ C5FE                                      ; DEBUGGING DIAG for FUZZING CODE, LOOKS OK THOUGH ld      a,%00000001; DEBUG RAGGED
 627+ C5FE 32 57 C5                             ld      (RaggedSize),a
 628+ C601 2A 5C C5     .GetMinY:               ld      hl,(YCentre)
 629+ C604 7C                                   ld      a,h
 630+ C605 E6 80                                and     SignOnly8Bit
 631+ C607 20 17                                jr      nz,.NegativeY               ; if its neative then we start with 0 as it can only go up screen after radius
 632+ C609 3A 5E C5                             ld      a,(SunRadius)               ; raged does not affect Y axis
 633+ C60C 5F                                   ld      e,a
 634+ C60D 16 00                                ld      d,0
 635+ C60F                                      ClearCarryFlag
 635+ C60F B7          >                        or a
 636+ C610 ED 52                                sbc     hl,de                       ; hl now is a 2's c value if its negative else still +ve
 637+ C612 FA 20 C6                             jp      m, .NegativeY
 638+ C615 7C                                   ld      a,h
 639+ C616 E6 7F                                and     SignMask8Bit
 640+ C618 C0                                   ret     nz                          ; if its off screen then its not to be processed
 641+ C619 7D                                   ld      a,l
 642+ C61A                                      ReturnIfAGTENusng 128                ; if min is off screen then not to be processed
 642+ C61A FE 80       >                        cp    128
 642+ C61C D0          >                        ret	 nc
 643+ C61D C3 21 C6                             jp      .SetMinY
 644+ C620 AF           .NegativeY:             xor     a
 645+ C621 32 58 C5     .SetMinY:               ld      (MinYOffset),a              ; so now we have Y top of screen
 646+ C624 2A 5C C5     .GetMaxY:               ld      hl,(YCentre)
 647+ C627 7C                                   ld      a,h
 648+ C628 E6 7F                                and     SignMask8Bit
 649+ C62A 20 2B                                jr      nz,.MaxPosY                 ; if its neative then we start with 0 as it can only go up screen after radius
 650+ C62C 3A 5E C5                             ld      a,(SunRadius)
 651+ C62F ED 31                                add     hl,a
 652+ C631 7D                                   ld      a,l
 653+ C632                                      JumpIfAGTENusng 128, .MaxPosY
 653+ C632 FE 80       >                        cp     128
 653+ C634 D2 57 C6    >                        jp		nc,.MaxPosY
 654+ C637 7B                                   ld      a,e
 655+ C638 85                                   add     a,l
 656+ C639                                      JumpIfAGTENusng 128, .MaxPosY
 656+ C639 FE 80       >                        cp     128
 656+ C63B D2 57 C6    >                        jp		nc,.MaxPosY
 657+ C63E                                      JumpIfOverflow     .MaxPosY
 657+ C63E E2 57 C6    >                        jp		po, .MaxPosY
 658+ C641 7B                                   ld      a,e
 659+ C642 CD F3 A4                             call    AddAusngToHLsng
 660+ C645 7C                                   ld      a,h
 661+ C646 E6 80                                and     SignOnly8Bit
 662+ C648 C0                                   ret     nz                ; if max is negative then its off screen too
 663+ C649 7C                                   ld      a,h
 664+ C64A E6 7F                                and     SignMask8Bit                ; if h had a value then its max Y as well
 665+ C64C 7D                                   ld      a,l
 666+ C64D                                      JumpIfAGTENusng 128, .MaxPosY         ; if l > 127 then max Y as well
 666+ C64D FE 80       >                        cp     128
 666+ C64F D2 57 C6    >                        jp		nc,.MaxPosY
 667+ C652 20 03                                jr      nz, .MaxPosY
 668+ C654 C3 21 C6                             jp      .SetMinY
 669+ C657 3E 7F        .MaxPosY:               ld      a,127
 670+ C659 32 59 C5     .SetMaxY                ld      (MaxYOffSet),a              ; so now we have min and max Y coordinates and proj holds center
 671+ C65C                                      ;break
 672+ C65C CD 63 C6                             call    SunDrawCircle
 673+ C65F CD B9 C1                             call    SunDraw
 674+ C662 C9                                   ret
 675+ C663              ;.. Now we caluclate the circle of the star
 676+ C663              ;.. its from MinY down the screen to MaxY center ProjX,ProjY.
 677+ C663              ;.. We can use the circle draw logic gtom Bressenham's algorithm
 678+ C663              ; so now there are the following conditions to consider
 679+ C663              ; y min = 0   y center is negative radius <= ABS (Y center)             => Don't draw
 680+ C663              ; y min = 0   y center is negative radius > ABS (Y center)+1            => Draw bottom half only
 681+ C663              ; y max = 127 y center is > 127    radius <= y center - 127             => Don't draw
 682+ C663              ; y max = 127 y center is > 127    radius > y center - 127              => Draw top half only
 683+ C663              ; y min >= 0  y center > y min     we don't need to worry about radius  => Draw both halves
 684+ C663              ; x center + radius < 0                                                 => Don't draw
 685+ C663              ; x center - radius > 255                                               => Don't draw
 686+ C663              ; we won't consider x more here as the driver is the y coordinate but we will check if x is vaiable
 687+ C663              ; x point = max (x point, 0)   on left
 688+ C663              ; x point = min (x point, 255) on right
 689+ C663
 690+ C663              SetIYPlusOffset:        MACRO   reg
 691+ C663 ~                                    push    hl,,iy                          ; save hl, then hl = iy
 692+ C663 ~                                    pop     hl                              ;
 693+ C663 ~                                    ld      a,reg
 694+ C663 ~                                    add     hl,a
 695+ C663 ~                                    add     hl,a
 696+ C663 ~                                    push    hl
 697+ C663 ~                                    pop     iy
 698+ C663 ~                                    pop     hl
 699+ C663                                      ENDM
 700+ C663
 701+ C663              SetIYMinusOffset:       MACRO   reg
 702+ C663 ~                                    push    de,,hl,,iy                      ; save hl, then hl = iy
 703+ C663 ~                                    pop     hl                              ;
 704+ C663 ~                                    ld      a,reg
 705+ C663 ~                                    add     a,a
 706+ C663 ~                                    ld      e,a
 707+ C663 ~                                    ld      d,0
 708+ C663 ~                                    ClearCarryFlag
 709+ C663 ~                                    sbc     hl,de
 710+ C663 ~                                    push    hl
 711+ C663 ~                                    pop     iy
 712+ C663 ~                                    pop     de,,hl
 713+ C663                                      ENDM
 714+ C663
 715+ C663
 716+ C663              SunDrawCircle:
 717+ C663 3A 5E C5     .CheckRadius:           ld      a,(SunRadius)                   ;we could do this early
 718+ C666 A7                                   and     a
 719+ C667 C8                                   ret     z
 720+ C668 FE 01                                cp      1
 721+ C66A CA 93 C7                             jp      z,SunCircleSinglePixel
 722+ C66D              .MakeCentreX2C:         MemSignedTo2C XCentre
 722+ C66D 2A 5A C5    >                        ld      hl,(XCentre)
 722+ C670 CB 7C       >                        bit     7,h
 722+ C672 28 04       >                        jr      z,.Done2c
 722+ C674 7C          >                        ld      a,h
 722+ C675 E6 7F       >                        and     SignMask8Bit
 722+ C677 67          >                        ld      h,a
 722+ C678 22 5A C5    >.Done2c:                ld      (XCentre),hl
 723+ C67B              .MakeCentreY2C:         MemSignedTo2C YCentre
 723+ C67B 2A 5C C5    >                        ld      hl,(YCentre)
 723+ C67E CB 7C       >                        bit     7,h
 723+ C680 28 04       >                        jr      z,.Done2c
 723+ C682 7C          >                        ld      a,h
 723+ C683 E6 7F       >                        and     SignMask8Bit
 723+ C685 67          >                        ld      h,a
 723+ C686 22 5C C5    >.Done2c:                ld      (YCentre),hl
 724+ C689 DD 2E 00     .PrepCircleData:        ld      ixl,0
 725+ C68C ED 43 B6 C6                          ld		(.Plot1+1),bc			        ; save origin into DE reg in code
 726+ C690 DD 67                                ld		ixh,a							; ixh = radius
 727+ C692 DD 2E 00                             ld		ixl,0						    ; ixl = delta
 728+ C695 26 00        .calcd:	                ld		h,0                             ; de = radius * 2
 729+ C697 6F                                   ld		l,a                             ; .
 730+ C698 29                                   add		hl,hl							; .
 731+ C699 EB                                   ex		de,hl							; .
 732+ C69A 21 03 00                             ld		hl,3                            ; hl = 3
 733+ C69D A7                                   and		a                               ; hl = 3 - (r * 2)
 734+ C69E ED 52                                sbc		hl,de							; .
 735+ C6A0 44                                   ld		b,h                             ; bc = 3 - (r * 2) : d = 3 - 2r
 736+ C6A1 4D                                   ld		c,l								; .
 737+ C6A2 21 01 00     .calcdelta:             ld		hl,1                            ; set hl to 1
 738+ C6A5 16 00                                ld		d,0                             ; de = ixl
 739+ C6A7 DD 5D                                ld		e,ixl                           ;
 740+ C6A9 A7                                   and		a                               ;
 741+ C6AA ED 52                                sbc		hl,de                           ; hl = 1 - ixl
 742+ C6AC 11 01 00     .Setde1:                ld		de,1                            ; del = 1
 743+ C6AF DD 7C        .CircleLoop:            ld		a,ixh                           ; if x = y then exit
 744+ C6B1 DD BD                                cp		ixl                             ;
 745+ C6B3 D8                                   ret		c                               ;
 746+ C6B4 D9           .ProcessLoop:	        exx                                     ; save out registers
 747+ C6B5              ; Process CY+Y CX+X & CY+Y CX-X..................................
 748+ C6B5 2A 5C C5     .Plot1:                 ld      hl, (YCentre)
 749+ C6B8 DD 7C        .Get1YRow:              ld      a,ixh
 750+ C6BA ED 31                                add     hl,a                            ; Check to see if CY+Y
 751+ C6BC              .Check1YRowOnScreen:    CheckRowHLOnScreen .NoTopPixelPair
 751+ C6BC 7C          >                        ld      a,h                             ; is greater than 128
 751+ C6BD A7          >                        and     a                               ; or negative
 751+ C6BE 20 23       >                        jr      nz,.NoTopPixelPair                   ; h <> 0 so fails (covers <0 and > 255
 751+ C6C0 7D          >                        ld      a,l                             ; l bit 7 0?
 751+ C6C1 CB 7F       >                        bit     7,a                             ;  covers l > 127
 751+ C6C3 20 1E       >                        jr      nz,.NoTopPixelPair                   ;
 752+ C6C5              .Write1YCoord:          SetIYPlusOffset ixh
 752+ C6C5 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
 752+ C6C8 E1          >                        pop     hl                              ;
 752+ C6C9 DD 7C       >                        ld      a,ixh
 752+ C6CB ED 31       >                        add     hl,a
 752+ C6CD ED 31       >                        add     hl,a
 752+ C6CF E5          >                        push    hl
 752+ C6D0 FD E1       >                        pop     iy
 752+ C6D2 E1          >                        pop     hl
 753+ C6D3                                      IYEquRowN l                             ; set up iy as target address
 753+ C6D3 7D          >                        ld      a,l
 753+ C6D4 21 9F C0    >                        ld      hl,SBnKLineArray
 753+ C6D7 ED 31       >                        add     hl,a
 753+ C6D9 ED 31       >                        add     hl,a
 753+ C6DB E5          >                        push    hl
 753+ C6DC FD E1       >                        pop     iy
 754+ C6DE DD 7D                                ld      a,ixl
 755+ C6E0 CD AA C7                             call    ProcessXRowA
 756+ C6E3              .NoTopPixelPair:
 757+ C6E3              ; Process CY-Y CX+X & CY-Y CX-X..................................
 758+ C6E3 2A 5C C5     .Plot2:                 ld      hl, (YCentre)
 759+ C6E6 16 00        .Get2YRow:              ld      d,0
 760+ C6E8 DD 5C                                ld      e,ixh
 761+ C6EA                                      ClearCarryFlag
 761+ C6EA B7          >                        or a
 762+ C6EB ED 52                                sbc     hl,de
 763+ C6ED              .Check2YRowOnScreen:    CheckRowHLOnScreen .NoBottomPixelPair
 763+ C6ED 7C          >                        ld      a,h                             ; is greater than 128
 763+ C6EE A7          >                        and     a                               ; or negative
 763+ C6EF 20 28       >                        jr      nz,.NoBottomPixelPair                   ; h <> 0 so fails (covers <0 and > 255
 763+ C6F1 7D          >                        ld      a,l                             ; l bit 7 0?
 763+ C6F2 CB 7F       >                        bit     7,a                             ;  covers l > 127
 763+ C6F4 20 23       >                        jr      nz,.NoBottomPixelPair                   ;
 764+ C6F6                                      SetIYMinusOffset ixh
 764+ C6F6 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
 764+ C6FA E1          >                        pop     hl                              ;
 764+ C6FB DD 7C       >                        ld      a,ixh
 764+ C6FD 87          >                        add     a,a
 764+ C6FE 5F          >                        ld      e,a
 764+ C6FF 16 00       >                        ld      d,0
 764+ C701             >                        ClearCarryFlag
 764+ C701 B7          >                        or a
 764+ C702 ED 52       >                        sbc     hl,de
 764+ C704 E5          >                        push    hl
 764+ C705 FD E1       >                        pop     iy
 764+ C707 E1 D1       >                        pop     de,,hl
 765+ C709              .Write2YCoord:          IYEquRowN l                             ; set up iy as target address
 765+ C709 7D          >                        ld      a,l
 765+ C70A 21 9F C0    >                        ld      hl,SBnKLineArray
 765+ C70D ED 31       >                        add     hl,a
 765+ C70F ED 31       >                        add     hl,a
 765+ C711 E5          >                        push    hl
 765+ C712 FD E1       >                        pop     iy
 766+ C714 DD 7D                                ld      a,ixl
 767+ C716 CD AA C7                             call    ProcessXRowA
 768+ C719              .NoBottomPixelPair:
 769+ C719              ; Process CY+X CX+Y & CY+X CX-Y..................................
 770+ C719 2A 5C C5     .Plot3:                 ld      hl, (YCentre)
 771+ C71C DD 7D        .Get3YRow:              ld      a,ixl
 772+ C71E ED 31                                add     hl,a                            ; Check to see if CY+Y
 773+ C720              .Check3YRowOnScreen:    CheckRowHLOnScreen .NoTop3PixelPair
 773+ C720 7C          >                        ld      a,h                             ; is greater than 128
 773+ C721 A7          >                        and     a                               ; or negative
 773+ C722 20 23       >                        jr      nz,.NoTop3PixelPair                   ; h <> 0 so fails (covers <0 and > 255
 773+ C724 7D          >                        ld      a,l                             ; l bit 7 0?
 773+ C725 CB 7F       >                        bit     7,a                             ;  covers l > 127
 773+ C727 20 1E       >                        jr      nz,.NoTop3PixelPair                   ;
 774+ C729                                      SetIYPlusOffset ixl
 774+ C729 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
 774+ C72C E1          >                        pop     hl                              ;
 774+ C72D DD 7D       >                        ld      a,ixl
 774+ C72F ED 31       >                        add     hl,a
 774+ C731 ED 31       >                        add     hl,a
 774+ C733 E5          >                        push    hl
 774+ C734 FD E1       >                        pop     iy
 774+ C736 E1          >                        pop     hl
 775+ C737              .Write3YCoord:          IYEquRowN l                             ; set up iy as target address
 775+ C737 7D          >                        ld      a,l
 775+ C738 21 9F C0    >                        ld      hl,SBnKLineArray
 775+ C73B ED 31       >                        add     hl,a
 775+ C73D ED 31       >                        add     hl,a
 775+ C73F E5          >                        push    hl
 775+ C740 FD E1       >                        pop     iy
 776+ C742 DD 7C                                ld      a,ixh
 777+ C744 CD AA C7                             call    ProcessXRowA
 778+ C747              .NoTop3PixelPair:
 779+ C747              ; Process CY-X CX+Y & CY-X CX-Y..................................
 780+ C747 2A 5C C5     .Plot4:                 ld      hl, (YCentre)
 781+ C74A 16 00        .Get4YRow:              ld      d,0
 782+ C74C DD 5D                                ld      e,ixl
 783+ C74E                                      ClearCarryFlag
 783+ C74E B7          >                        or a
 784+ C74F ED 52                                sbc     hl,de
 785+ C751              .Check4YRowOnScreen:    CheckRowHLOnScreen .NoBottom4PixelPair
 785+ C751 7C          >                        ld      a,h                             ; is greater than 128
 785+ C752 A7          >                        and     a                               ; or negative
 785+ C753 20 28       >                        jr      nz,.NoBottom4PixelPair                   ; h <> 0 so fails (covers <0 and > 255
 785+ C755 7D          >                        ld      a,l                             ; l bit 7 0?
 785+ C756 CB 7F       >                        bit     7,a                             ;  covers l > 127
 785+ C758 20 23       >                        jr      nz,.NoBottom4PixelPair                   ;
 786+ C75A                                      SetIYMinusOffset ixl
 786+ C75A D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
 786+ C75E E1          >                        pop     hl                              ;
 786+ C75F DD 7D       >                        ld      a,ixl
 786+ C761 87          >                        add     a,a
 786+ C762 5F          >                        ld      e,a
 786+ C763 16 00       >                        ld      d,0
 786+ C765             >                        ClearCarryFlag
 786+ C765 B7          >                        or a
 786+ C766 ED 52       >                        sbc     hl,de
 786+ C768 E5          >                        push    hl
 786+ C769 FD E1       >                        pop     iy
 786+ C76B E1 D1       >                        pop     de,,hl
 787+ C76D              .Write4YCoord:          IYEquRowN l                             ; set up iy as target address
 787+ C76D 7D          >                        ld      a,l
 787+ C76E 21 9F C0    >                        ld      hl,SBnKLineArray
 787+ C771 ED 31       >                        add     hl,a
 787+ C773 ED 31       >                        add     hl,a
 787+ C775 E5          >                        push    hl
 787+ C776 FD E1       >                        pop     iy
 788+ C778 DD 7C                                ld      a,ixh
 789+ C77A CD AA C7                             call    ProcessXRowA
 790+ C77D              .NoBottom4PixelPair:
 791+ C77D              ; Completed one iteration........................................
 792+ C77D D9                                   exx
 793+ C77E CB 7C        .IncrementCircle:	    bit     7,h				; Check for Hl<=0
 794+ C780 28 03                                jr z,   .draw_circle_1
 795+ C782 19                                   add hl,de			; Delta=Delta+D1
 796+ C783 18 05                                jr      .draw_circle_2		;
 797+ C785 09           .draw_circle_1:		    add     hl,bc			; Delta=Delta+D2
 798+ C786 03                                   inc     bc
 799+ C787 03                                   inc     bc				; D2=D2+2
 800+ C788 DD 25                                dec     ixh				; Y=Y-1
 801+ C78A 03           .draw_circle_2:		    inc bc				; D2=D2+2
 802+ C78B 03                                   inc bc
 803+ C78C 13                                   inc de				; D1=D1+2
 804+ C78D 13                                   inc de
 805+ C78E DD 2C                                inc ixl				; X=X+1
 806+ C790 C3 AF C6                             jp      .CircleLoop
 807+ C793 2A 5A C5     SunCircleSinglePixel:     ld      hl,(XCentre)
 808+ C796 7C                                   ld      a,h
 809+ C797 A7                                   and     a
 810+ C798 C0                                   ret     nz                  ; if the high byte is set then no pixel
 811+ C799 4D                                   ld      c,l
 812+ C79A 2A 5C C5                             ld      hl,(YCentre)
 813+ C79D 7C                                   ld      a,h
 814+ C79E A7                                   and     a
 815+ C79F C0                                   ret     nz                  ; if the high byte is set then no pixel
 816+ C7A0 7D                                   ld      a,l
 817+ C7A1 CB 7F                                bit     7,a
 818+ C7A3 C0                                   ret     nz                  ; if l > 127 then no pixel
 819+ C7A4 47                                   ld      b,a
 820+ C7A5 7B                                   ld		a,e
 821+ C7A6 CD 19 E1                             call	l2_plot_pixel_y_test
 822+ C7A9 C9                                   ret
 823+ C7AA
 824+ C7AA              ProcessXRowA:           ;break
 825+ C7AA 2A 5A C5                             ld      hl,(XCentre)                    ; get X Center
 826+ C7AD F5                                   push    af                              ; save A (curent offset +/- value
 827+ C7AE ED 31                                add     hl,a                            ; Hl = HL + offset
 828+ C7B0 7C                                   ld      a,h                             ; is HL negative?, if so then set C to 0
 829+ C7B1 CB 7F                                bit     7,a                             ;
 830+ C7B3 20 14                                jr      nz,.XCoordNegative              ; We can have this for non X + Radius i.e. the equater
 831+ C7B5 A7                                   and     a                               ; if H <> 0? (why by here must be +ve), set c to $FF
 832+ C7B6 20 16                                jr      nz,.XCoordMaxed                 ; .
 833+ C7B8 4D                                   ld      c,l                             ; else set c to l and do the -ve offset
 834+ C7B9 C5           .AddFuzz:               push    bc
 835+ C7BA CD 2B 9C                             call    doRandom                        ; c = c - random AND ragged Size
 836+ C7BD C1                                   pop     bc
 837+ C7BE 21 57 C5                             ld      hl,RaggedSize                   ;
 838+ C7C1 A6                                   and     (hl)                            ;
 839+ C7C2 81                                   add     c                               ;
 840+ C7C3 4F                                   ld      c,a                             ;
 841+ C7C4 38 08                                jr      c,.XCoordMaxed                  ; has fuzz caused a carry, if so > 255 to make 255
 842+ C7C6 C3 D0 C7                             jp      .ProcessSubtract                ;
 843+ C7C9 0E 00        .XCoordNegative:        ld      c,0                             ; if it was negative then 0
 844+ C7CB C3 D0 C7                             jp      .ProcessSubtract
 845+ C7CE 0E FF        .XCoordMaxed:           ld      c,255                           ; if it was +ve then 255
 846+ C7D0 F1           .ProcessSubtract:       pop     af                              ; get offset back
 847+ C7D1 5F                                   ld      e,a                             ; but goes into DE as its a subtract
 848+ C7D2 16 00                                ld      d,0
 849+ C7D4 2A 5A C5                             ld      hl,(XCentre)                    ; so do subtract
 850+ C7D7                                      ClearCarryFlag                          ; .
 850+ C7D7 B7          >                        or a
 851+ C7D8 ED 52                                sbc     hl,de                           ; .
 852+ C7DA FA F7 C7                             jp      m,.XCoordLeftNegative           ; again test for min max
 853+ C7DD E5 C5        .AddFuzzSubtract:       push    hl,,bc
 854+ C7DF CD 2B 9C                             call    doRandom                        ; c = c - random AND ragged Size
 855+ C7E2 C1                                   pop     bc
 856+ C7E3 21 57 C5                             ld      hl,RaggedSize                   ;
 857+ C7E6 A6                                   and     (hl)                            ;
 858+ C7E7 5F                                   ld      e,a
 859+ C7E8 E1                                   pop     hl
 860+ C7E9 ED 52                                sbc     hl,de
 861+ C7EB FA F7 C7                             jp      m,.XCoordLeftNegative           ; again test for min max
 862+ C7EE 7C                                   ld      a,h
 863+ C7EF A7                                   and     a
 864+ C7F0 C2 FC C7                             jp      nz,.XCordLeftMaxed
 865+ C7F3 45                                   ld      b,l
 866+ C7F4 C3 FE C7                             jp      .CompletedXCoords
 867+ C7F7 06 00        .XCoordLeftNegative:    ld      b,0
 868+ C7F9 C3 FE C7                             jp      .CompletedXCoords
 869+ C7FC 06 FF        .XCordLeftMaxed:        ld      b,255
 870+ C7FE 78           .CompletedXCoords:      ld      a,b
 871+ C7FF FD 77 00     .RowSaveIY1             ld      (iy+0),a                        ; iy holds current line array index
 872+ C802 79                                   ld      a,c
 873+ C803 FD 77 01     .RowSaveIY3             ld      (iy+1),a
 874+ C806 C9                                   ret
 875+ C807
 876+ C807              ; .....................................................
 877+ C807              ; if the universe object is a planet or sun then do that instead
 878+ C807              ;;TODOProcessPlanet:          cp      129
 879+ C807              ;;TODO                        jr      nz, .ItsAPlanet
 880+ C807              ;;TODO.ItsAStar:              ld      a,(SBnKzsgn)
 881+ C807              ;;TODO                        cp      48                               ; if z > 48 (it must be positive to enter this routine)
 882+ C807
 883+ C807
 884+ C807              ; Square Root using tables
 885+ C807              ; DE = number to find
 886+ C807 21 27 CA     SunLookupSqrtDE:        ld      hl,SunSquareRootTable
 887+ C80A 7A           .LookupCorseJump:       ld      a,d
 888+ C80B ED 31                                add     hl,a
 889+ C80D ED 31                                add     hl,a
 890+ C80F 7E                                   ld      a,(hl)
 891+ C810 23                                   inc     hl
 892+ C811 66                                   ld      h,(hl)
 893+ C812 6F                                   ld      l,a
 894+ C813 7E           .FineSearchLoop:        ld      a,(hl)
 895+ C814                                      JumpIfAEqNusng  e, .FoundByte
 895+ C814 BB          >                        cp     e
 895+ C815 CA 21 C8    >                        jp      z,.FoundByte
 896+ C818                                      JumpIfAGTENusng e, .PreviousByte
 896+ C818 BB          >                        cp     e
 896+ C819 D2 24 C8    >                        jp		nc,.PreviousByte
 897+ C81C 23           .NotFound:              inc     hl
 898+ C81D 23                                   inc     hl
 899+ C81E C3 13 C8                             jp      .FineSearchLoop
 900+ C821 23           .FoundByte:             inc     hl
 901+ C822 7E                                   ld      a,(hl)
 902+ C823 C9                                   ret
 903+ C824 2B           .PreviousByte:          dec     hl
 904+ C825 7E                                   ld      a,(hl)
 905+ C826 C9                                   ret
 906+ C827
 907+ C827 27 CA 39 CA  SunRootHighIndex:       DW SunSqr00,SunSqr01,SunSqr02,SunSqr03,SunSqr04,SunSqr05,SunSqr06,SunSqr07,SunSqr08,SunSqr09,SunSqr0A,SunSqr0B,SunSqr0C,SunSqr0D,SunSqr0E,SunSqr0F
 907+ C82B 47 CA 53 CA
 907+ C82F 5D CA 65 CA
 907+ C833 6D CA 75 CA
 907+ C837 7D CA 83 CA
 907+ C83B 8B CA 91 CA
 907+ C83F 95 CA 9B CA
 907+ C843 A1 CA A7 CA
 908+ C847 AD CA B3 CA                          DW SunSqr10,SunSqr11,SunSqr12,SunSqr13,SunSqr14,SunSqr15,SunSqr16,SunSqr17,SunSqr18,SunSqr19,SunSqr1A,SunSqr1B,SunSqr1C,SunSqr1D,SunSqr1E,SunSqr1F
 908+ C84B B9 CA BF CA
 908+ C84F C5 CA C9 CA
 908+ C853 CD CA CF CA
 908+ C857 D3 CA D7 CA
 908+ C85B DB CA DF CA
 908+ C85F E3 CA E7 CA
 908+ C863 E9 CA ED CA
 909+ C867 EF CA F3 CA                          DW SunSqr20,SunSqr21,SunSqr22,SunSqr23,SunSqr24,SunSqr25,SunSqr26,SunSqr27,SunSqr28,SunSqr29,SunSqr2A,SunSqr2B,SunSqr2C,SunSqr2D,SunSqr2E,SunSqr2F
 909+ C86B F7 CA F9 CA
 909+ C86F FB CA FF CA
 909+ C873 01 CB 03 CB
 909+ C877 07 CB 09 CB
 909+ C87B 0B CB 0D CB
 909+ C87F 11 CB 13 CB
 909+ C883 15 CB 19 CB
 910+ C887 1D CB 21 CB                          DW SunSqr30,SunSqr31,SunSqr32,SunSqr33,SunSqr34,SunSqr35,SunSqr36,SunSqr37,SunSqr38,SunSqr39,SunSqr3A,SunSqr3B,SunSqr3C,SunSqr3D,SunSqr3E,SunSqr3F
 910+ C88B 25 CB 29 CB
 910+ C88F 2B CB 2F CB
 910+ C893 33 CB 37 CB
 910+ C897 39 CB 3D CB
 910+ C89B 41 CB 45 CB
 910+ C89F 49 CB 4D CB
 910+ C8A3 51 CB 55 CB
 911+ C8A7 59 CB 5D CB                          DW SunSqr40,SunSqr41,SunSqr42,SunSqr43,SunSqr44,SunSqr45,SunSqr46,SunSqr47,SunSqr48,SunSqr49,SunSqr4A,SunSqr4B,SunSqr4C,SunSqr4D,SunSqr4E,SunSqr4F
 911+ C8AB 61 CB 65 CB
 911+ C8AF 69 CB 6D CB
 911+ C8B3 71 CB 75 CB
 911+ C8B7 79 CB 7D CB
 911+ C8BB 81 CB 85 CB
 911+ C8BF 89 CB 8D CB
 911+ C8C3 91 CB 95 CB
 912+ C8C7 99 CB 9B CB                          DW SunSqr50,SunSqr51,SunSqr52,SunSqr53,SunSqr54,SunSqr55,SunSqr56,SunSqr57,SunSqr58,SunSqr59,SunSqr5A,SunSqr5B,SunSqr5C,SunSqr5D,SunSqr5E,SunSqr5F
 912+ C8CB 9F CB A3 CB
 912+ C8CF A7 CB AB CB
 912+ C8D3 AF CB B3 CB
 912+ C8D7 B7 CB B9 CB
 912+ C8DB BD CB C1 CB
 912+ C8DF C5 CB C9 CB
 912+ C8E3 CD CB CF CB
 913+ C8E7 D3 CB D7 CB                          DW SunSqr60,SunSqr61,SunSqr62,SunSqr63,SunSqr64,SunSqr65,SunSqr66,SunSqr67,SunSqr68,SunSqr69,SunSqr6A,SunSqr6B,SunSqr6C,SunSqr6D,SunSqr6E,SunSqr6F
 913+ C8EB DB CB DF CB
 913+ C8EF E1 CB E5 CB
 913+ C8F3 E9 CB ED CB
 913+ C8F7 F1 CB F3 CB
 913+ C8FB F7 CB FB CB
 913+ C8FF FF CB 01 CC
 913+ C903 03 CC 07 CC
 914+ C907 0B CC 0F CC                          DW SunSqr70,SunSqr71,SunSqr72,SunSqr73,SunSqr74,SunSqr75,SunSqr76,SunSqr77,SunSqr78,SunSqr79,SunSqr7A,SunSqr7B,SunSqr7C,SunSqr7D,SunSqr7E,SunSqr7F
 914+ C90B 13 CC 17 CC
 914+ C90F 1B CC 1F CC
 914+ C913 21 CC 25 CC
 914+ C917 29 CC 2B CC
 914+ C91B 2F CC 33 CC
 914+ C91F 37 CC 39 CC
 914+ C923 3D CC 41 CC
 915+ C927 45 CC 47 CC                          DW SunSqr80,SunSqr81,SunSqr82,SunSqr83,SunSqr84,SunSqr85,SunSqr86,SunSqr87,SunSqr88,SunSqr89,SunSqr8A,SunSqr8B,SunSqr8C,SunSqr8D,SunSqr8E,SunSqr8F
 915+ C92B 4B CC 4D CC
 915+ C92F 51 CC 55 CC
 915+ C933 59 CC 5B CC
 915+ C937 5F CC 63 CC
 915+ C93B 65 CC 69 CC
 915+ C93F 6D CC 6F CC
 915+ C943 73 CC 77 CC
 916+ C947 79 CC 7D CC                          DW SunSqr90,SunSqr91,SunSqr92,SunSqr93,SunSqr94,SunSqr95,SunSqr96,SunSqr97,SunSqr98,SunSqr99,SunSqr9A,SunSqr9B,SunSqr9C,SunSqr9D,SunSqr9E,SunSqr9F
 916+ C94B 81 CC 83 CC
 916+ C94F 87 CC 8B CC
 916+ C953 8D CC 91 CC
 916+ C957 95 CC 97 CC
 916+ C95B 9B CC 9F CC
 916+ C95F A1 CC A5 CC
 916+ C963 A9 CC AB CC
 917+ C967 AF CC B3 CC                          DW SunSqrA0,SunSqrA1,SunSqrA2,SunSqrA3,SunSqrA4,SunSqrA5,SunSqrA6,SunSqrA7,SunSqrA8,SunSqrA9,SunSqrAA,SunSqrAB,SunSqrAC,SunSqrAD,SunSqrAE,SunSqrAF
 917+ C96B B5 CC B9 CC
 917+ C96F BB CC BF CC
 917+ C973 C3 CC C5 CC
 917+ C977 C9 CC CB CC
 917+ C97B CF CC D3 CC
 917+ C97F D5 CC D9 CC
 917+ C983 DD CC DF CC
 918+ C987 E1 CC E3 CC                          DW SunSqrB0,SunSqrB1,SunSqrB2,SunSqrB3,SunSqrB4,SunSqrB5,SunSqrB6,SunSqrB7,SunSqrB8,SunSqrB9,SunSqrBA,SunSqrBB,SunSqrBC,SunSqrBD,SunSqrBE,SunSqrBF
 918+ C98B E7 CC EB CC
 918+ C98F ED CC F1 CC
 918+ C993 F3 CC F7 CC
 918+ C997 FB CC FF CC
 918+ C99B 01 CD 03 CD
 918+ C99F 07 CD 09 CD
 918+ C9A3 0D CD 11 CD
 919+ C9A7 13 CD 17 CD                          DW SunSqrC0,SunSqrC1,SunSqrC2,SunSqrC3,SunSqrC4,SunSqrC5,SunSqrC6,SunSqrC7,SunSqrC8,SunSqrC9,SunSqrCA,SunSqrCB,SunSqrCC,SunSqrCD,SunSqrCE,SunSqrCF
 919+ C9AB 19 CD 1D CD
 919+ C9AF 1F CD 23 CD
 919+ C9B3 27 CD 29 CD
 919+ C9B7 2B CD 2D CD
 919+ C9BB 31 CD 33 CD
 919+ C9BF 37 CD 3B CD
 919+ C9C3 3D CD 41 CD
 920+ C9C7 43 CD 47 CD                          DW SunSqrD0,SunSqrD1,SunSqrD2,SunSqrD3,SunSqrD4,SunSqrD5,SunSqrD6,SunSqrD7,SunSqrD8,SunSqrD9,SunSqrDA,SunSqrDB,SunSqrDC,SunSqrDD,SunSqrDE,SunSqrDF
 920+ C9CB 49 CD 4D CD
 920+ C9CF 4F CD 53 CD
 920+ C9D3 57 CD 59 CD
 920+ C9D7 5D CD 5F CD
 920+ C9DB 63 CD 65 CD
 920+ C9DF 69 CD 6B CD
 920+ C9E3 6D CD 6F CD
 921+ C9E7 73 CD 77 CD                          DW SunSqrE0,SunSqrE1,SunSqrE2,SunSqrE3,SunSqrE4,SunSqrE5,SunSqrE6,SunSqrE7,SunSqrE8,SunSqrE9,SunSqrEA,SunSqrEB,SunSqrEC,SunSqrED,SunSqrEE,SunSqrEF
 921+ C9EB 7B CD 7F CD
 921+ C9EF 83 CD 87 CD
 921+ C9F3 89 CD 8D CD
 921+ C9F7 91 CD 95 CD
 921+ C9FB 97 CD 9B CD
 921+ C9FF 9D CD 9F CD
 921+ CA03 A1 CD A5 CD
 922+ CA07 A7 CD A9 CD                          DW SunSqrF0,SunSqrF1,SunSqrF2,SunSqrF3,SunSqrF4,SunSqrF5,SunSqrF6,SunSqrF7,SunSqrF8,SunSqrF9,SunSqrFA,SunSqrFB,SunSqrFC,SunSqrFD,SunSqrFE,SunSqrFF
 922+ CA0B AB CD AF CD
 922+ CA0F B1 CD B5 CD
 922+ CA13 B7 CD BB CD
 922+ CA17 BD CD C1 CD
 922+ CA1B C3 CD C7 CD
 922+ CA1F C9 CD CD CD
 922+ CA23 CF CD D1 CD
 923+ CA27
 924+ CA27              SunSquareRootTable:
 925+ CA27 00 00        SunSqr00:               DB $00,   0
 926+ CA29 04 02                                DB $04,   2
 927+ CA2B 10 04                                DB $10,   4
 928+ CA2D 24 06                                DB $24,   6
 929+ CA2F 40 08                                DB $40,   8
 930+ CA31 64 0A                                DB $64,  10
 931+ CA33 90 0C                                DB $90,  12
 932+ CA35 C4 0E                                DB $C4,  14
 933+ CA37 FF 0F                                DB $FF,  15
 934+ CA39 00 10        SunSqr01:               DB $00,  16
 935+ CA3B 21 11                                DB $21,  17
 936+ CA3D 44 12                                DB $44,  18
 937+ CA3F 69 13                                DB $69,  19
 938+ CA41 90 14                                DB $90,  20
 939+ CA43 B9 15                                DB $B9,  21
 940+ CA45 FF 16                                DB $FF,  22
 941+ CA47 11 17        SunSqr02:               DB $11,  23
 942+ CA49 40 18                                DB $40,  24
 943+ CA4B 71 19                                DB $71,  25
 944+ CA4D A4 1A                                DB $A4,  26
 945+ CA4F D9 1B                                DB $D9,  27
 946+ CA51 FF 1B                                DB $FF,  27
 947+ CA53 10 1C        SunSqr03:               DB $10,  28
 948+ CA55 49 1D                                DB $49,  29
 949+ CA57 84 1E                                DB $84,  30
 950+ CA59 C1 1F                                DB $C1,  31
 951+ CA5B FF 1F                                DB $FF,  31
 952+ CA5D 00 20        SunSqr04:               DB $00,  32
 953+ CA5F 41 21                                DB $41,  33
 954+ CA61 84 22                                DB $84,  34
 955+ CA63 FF 23                                DB $FF,  35
 956+ CA65 10 24        SunSqr05:               DB $10,  36
 957+ CA67 59 25                                DB $59,  37
 958+ CA69 A4 26                                DB $A4,  38
 959+ CA6B FF 27                                DB $FF,  39
 960+ CA6D 40 28        SunSqr06:               DB $40,  40
 961+ CA6F 91 29                                DB $91,  41
 962+ CA71 E4 2A                                DB $E4,  42
 963+ CA73 FF 2A                                DB $FF,  42
 964+ CA75 39 2B        SunSqr07:               DB $39,  43
 965+ CA77 90 2C                                DB $90,  44
 966+ CA79 E9 2D                                DB $E9,  45
 967+ CA7B FF 2D                                DB $FF,  45
 968+ CA7D 44 2E        SunSqr08:               DB $44,  46
 969+ CA7F A1 2F                                DB $A1,  47
 970+ CA81 FF 2F                                DB $FF,  47
 971+ CA83 00 30        SunSqr09:               DB $00,  48
 972+ CA85 61 31                                DB $61,  49
 973+ CA87 C4 32                                DB $C4,  50
 974+ CA89 FF 32                                DB $FF,  50
 975+ CA8B 29 33        SunSqr0A:               DB $29,  51
 976+ CA8D 90 34                                DB $90,  52
 977+ CA8F FF 35                                DB $FF,  53
 978+ CA91 64 36        SunSqr0B:               DB $64,  54
 979+ CA93 FF 37                                DB $FF,  55
 980+ CA95 40 38        SunSqr0C:               DB $40,  56
 981+ CA97 B1 39                                DB $B1,  57
 982+ CA99 FF 39                                DB $FF,  57
 983+ CA9B 24 3A        SunSqr0D:               DB $24,  58
 984+ CA9D 99 3B                                DB $99,  59
 985+ CA9F FF 3B                                DB $FF,  59
 986+ CAA1 10 3C        SunSqr0E:               DB $10,  60
 987+ CAA3 89 3D                                DB $89,  61
 988+ CAA5 FF 3D                                DB $FF,  61
 989+ CAA7 04 3E        SunSqr0F:               DB $04,  62
 990+ CAA9 81 3F                                DB $81,  63
 991+ CAAB FF 3F                                DB $FF,  63
 992+ CAAD 00 40        SunSqr10:               DB $00,  64
 993+ CAAF 81 41                                DB $81,  65
 994+ CAB1 FF 41                                DB $FF,  65
 995+ CAB3 04 42        SunSqr11:               DB $04,  66
 996+ CAB5 89 43                                DB $89,  67
 997+ CAB7 FF 43                                DB $FF,  67
 998+ CAB9 10 44        SunSqr12:               DB $10,  68
 999+ CABB 99 45                                DB $99,  69
1000+ CABD FF 45                                DB $FF,  69
1001+ CABF 24 46        SunSqr13:               DB $24,  70
1002+ CAC1 B1 47                                DB $B1,  71
1003+ CAC3 FF 47                                DB $FF,  71
1004+ CAC5 40 48        SunSqr14:               DB $40,  72
1005+ CAC7 FF 49                                DB $FF,  73
1006+ CAC9 64 4A        SunSqr15:               DB $64,  74
1007+ CACB FF 4B                                DB $FF,  75
1008+ CACD FF 4C        SunSqr16:               DB $FF,  76
1009+ CACF C4 4D        SunSqr17:               DB $C4,  77
1010+ CAD1 FF 4E                                DB $FF,  78
1011+ CAD3 61 4F        SunSqr18:               DB $61,  79
1012+ CAD5 FF 4F                                DB $FF,  79
1013+ CAD7 00 50        SunSqr19:               DB $00,  80
1014+ CAD9 FF 51                                DB $FF,  81
1015+ CADB 44 52        SunSqr1A:               DB $44,  82
1016+ CADD FF 53                                DB $FF,  83
1017+ CADF 90 54        SunSqr1B:               DB $90,  84
1018+ CAE1 FF 54                                DB $FF,  84
1019+ CAE3 39 55        SunSqr1C:               DB $39,  85
1020+ CAE5 FF 56                                DB $FF,  86
1021+ CAE7 FF 57        SunSqr1D:               DB $FF,  87
1022+ CAE9 40 58        SunSqr1E:               DB $40,  88
1023+ CAEB FF 59                                DB $FF,  89
1024+ CAED FF 5A        SunSqr1F:               DB $FF,  90
1025+ CAEF 59 5B        SunSqr20:               DB $59,  91
1026+ CAF1 FF 5B                                DB $FF,  91
1027+ CAF3 10 5C        SunSqr21:               DB $10,  92
1028+ CAF5 FF 5D                                DB $FF,  93
1029+ CAF7 FF 5E        SunSqr22:               DB $FF,  94
1030+ CAF9 FF 5F        SunSqr23:               DB $FF,  95
1031+ CAFB 00 60        SunSqr24:               DB $00,  96
1032+ CAFD FF 61                                DB $FF,  97
1033+ CAFF 84 62        SunSqr25:               DB $84,  98
1034+ CB01 49 63        SunSqr26:               DB $49,  99
1035+ CB03 10 64        SunSqr27:               DB $10, 100
1036+ CB05 FF 65                                DB $FF, 101
1037+ CB07 FF 66        SunSqr28:               DB $FF, 102
1038+ CB09 FF 67        SunSqr29:               DB $FF, 103
1039+ CB0B FF 68        SunSqr2A:               DB $FF, 104
1040+ CB0D 11 69        SunSqr2B:               DB $11, 105
1041+ CB0F FF 6A                                DB $FF, 106
1042+ CB11 FF 6B        SunSqr2C:               DB $FF, 107
1043+ CB13 FF 6C        SunSqr2D:               DB $FF, 108
1044+ CB15 69 6D        SunSqr2E:               DB $69, 109
1045+ CB17 FF 6E                                DB $FF, 110
1046+ CB19 44 6E        SunSqr2F:               DB $44, 110
1047+ CB1B FF 6F                                DB $FF, 111
1048+ CB1D 21 6F        SunSqr30:               DB $21, 111
1049+ CB1F FF 70                                DB $FF, 112
1050+ CB21 00 70        SunSqr31:               DB $00, 112
1051+ CB23 FF 71                                DB $FF, 113
1052+ CB25 C4 72        SunSqr32:               DB $C4, 114
1053+ CB27 FF 72                                DB $FF, 114
1054+ CB29 FF 73        SunSqr33:               DB $FF, 115
1055+ CB2B 90 74        SunSqr34:               DB $90, 116
1056+ CB2D FF 75                                DB $FF, 117
1057+ CB2F 79 75        SunSqr35:               DB $79, 117
1058+ CB31 FF 76                                DB $FF, 118
1059+ CB33 64 76        SunSqr36:               DB $64, 118
1060+ CB35 64 77                                DB $64, 119
1061+ CB37 51 77        SunSqr37:               DB $51, 119
1062+ CB39 40 78        SunSqr38:               DB $40, 120
1063+ CB3B FF 79                                DB $FF, 121
1064+ CB3D 31 79        SunSqr39:               DB $31, 121
1065+ CB3F FF 7A                                DB $FF, 122
1066+ CB41 24 7A        SunSqr3A:               DB $24, 122
1067+ CB43 FF 7B                                DB $FF, 123
1068+ CB45 19 7B        SunSqr3B:               DB $19, 123
1069+ CB47 FF 7C                                DB $FF, 124
1070+ CB49 10 7C        SunSqr3C:               DB $10, 124
1071+ CB4B FF 7D                                DB $FF, 125
1072+ CB4D 09 7D        SunSqr3D:               DB $09, 125
1073+ CB4F FF 7D                                DB $FF, 125
1074+ CB51 04 7E        SunSqr3E:               DB $04, 126
1075+ CB53 FF 7E                                DB $FF, 126
1076+ CB55 01 7F        SunSqr3F:               DB $01, 127
1077+ CB57 FF 7F                                DB $FF, 127
1078+ CB59 00 80        SunSqr40:               DB $00, 128
1079+ CB5B FF 80                                DB $FF, 128
1080+ CB5D 01 81        SunSqr41:               DB $01, 129
1081+ CB5F FF 82                                DB $FF, 130
1082+ CB61 04 82        SunSqr42:               DB $04, 130
1083+ CB63 FF 83                                DB $FF, 131
1084+ CB65 09 83        SunSqr43:               DB $09, 131
1085+ CB67 FF 84                                DB $FF, 132
1086+ CB69 10 84        SunSqr44:               DB $10, 132
1087+ CB6B FF 85                                DB $FF, 133
1088+ CB6D 19 85        SunSqr45:               DB $19, 133
1089+ CB6F FF 86                                DB $FF, 134
1090+ CB71 24 86        SunSqr46:               DB $24, 134
1091+ CB73 FF 87                                DB $FF, 135
1092+ CB75 31 87        SunSqr47:               DB $31, 135
1093+ CB77 FF 88                                DB $FF, 136
1094+ CB79 40 88        SunSqr48:               DB $40, 136
1095+ CB7B FF 89                                DB $FF, 137
1096+ CB7D 51 89        SunSqr49:               DB $51, 137
1097+ CB7F FF 8A                                DB $FF, 138
1098+ CB81 64 8A        SunSqr4A:               DB $64, 138
1099+ CB83 FF 8A                                DB $FF, 138
1100+ CB85 79 8B        SunSqr4B:               DB $79, 139
1101+ CB87 FF 8B                                DB $FF, 139
1102+ CB89 90 8C        SunSqr4C:               DB $90, 140
1103+ CB8B FF 8C                                DB $FF, 140
1104+ CB8D A9 8D        SunSqr4D:               DB $A9, 141
1105+ CB8F FF 8D                                DB $FF, 141
1106+ CB91 C4 8E        SunSqr4E:               DB $C4, 142
1107+ CB93 FF 8E                                DB $FF, 142
1108+ CB95 E1 8F        SunSqr4F:               DB $E1, 143
1109+ CB97 FF 8F                                DB $FF, 143
1110+ CB99 FF 8F        SunSqr50:               DB $FF, 143
1111+ CB9B 00 90        SunSqr51:               DB $00, 144
1112+ CB9D FF 90                                DB $FF, 144
1113+ CB9F 21 91        SunSqr52:               DB $21, 145
1114+ CBA1 FF 91                                DB $FF, 145
1115+ CBA3 44 92        SunSqr53:               DB $44, 146
1116+ CBA5 FF 92                                DB $FF, 146
1117+ CBA7 69 93        SunSqr54:               DB $69, 147
1118+ CBA9 FF 93                                DB $FF, 147
1119+ CBAB 90 94        SunSqr55:               DB $90, 148
1120+ CBAD FF 94                                DB $FF, 148
1121+ CBAF B9 95        SunSqr56:               DB $B9, 149
1122+ CBB1 FF 95                                DB $FF, 149
1123+ CBB3 E4 96        SunSqr57:               DB $E4, 150
1124+ CBB5 FF 96                                DB $FF, 150
1125+ CBB7 FF 96        SunSqr58:               DB $FF, 150
1126+ CBB9 11 97        SunSqr59:               DB $11, 151
1127+ CBBB FF 97                                DB $FF, 151
1128+ CBBD 40 98        SunSqr5A:               DB $40, 152
1129+ CBBF FF 98                                DB $FF, 152
1130+ CBC1 71 99        SunSqr5B:               DB $71, 153
1131+ CBC3 FF 99                                DB $FF, 153
1132+ CBC5 A4 9A        SunSqr5C:               DB $A4, 154
1133+ CBC7 FF 9A                                DB $FF, 154
1134+ CBC9 D9 9B        SunSqr5D:               DB $D9, 155
1135+ CBCB FF 9B                                DB $FF, 155
1136+ CBCD FF 9B        SunSqr5E:               DB $FF, 155
1137+ CBCF 10 9C        SunSqr5F:               DB $10, 156
1138+ CBD1 FF 9C                                DB $FF, 156
1139+ CBD3 49 9D        SunSqr60:               DB $49, 157
1140+ CBD5 FF 9D                                DB $FF, 157
1141+ CBD7 84 9E        SunSqr61:               DB $84, 158
1142+ CBD9 FF 9E                                DB $FF, 158
1143+ CBDB C1 9F        SunSqr62:               DB $C1, 159
1144+ CBDD FF 9F                                DB $FF, 159
1145+ CBDF FF 9F        SunSqr63:               DB $FF, 159
1146+ CBE1 00 A0        SunSqr64:               DB $00, 160
1147+ CBE3 FF A0                                DB $FF, 160
1148+ CBE5 41 A1        SunSqr65:               DB $41, 161
1149+ CBE7 FF A1                                DB $FF, 161
1150+ CBE9 84 A2        SunSqr66:               DB $84, 162
1151+ CBEB FF A2                                DB $FF, 162
1152+ CBED C9 A3        SunSqr67:               DB $C9, 163
1153+ CBEF FF A3                                DB $FF, 163
1154+ CBF1 FF A3        SunSqr68:               DB $FF, 163
1155+ CBF3 10 A4        SunSqr69:               DB $10, 164
1156+ CBF5 FF A4                                DB $FF, 164
1157+ CBF7 59 A5        SunSqr6A:               DB $59, 165
1158+ CBF9 FF A5                                DB $FF, 165
1159+ CBFB A4 A6        SunSqr6B:               DB $A4, 166
1160+ CBFD FF A6                                DB $FF, 166
1161+ CBFF FF A7        SunSqr6C:               DB $FF, 167
1162+ CC01 FF A7        SunSqr6D:               DB $FF, 167
1163+ CC03 40 A8        SunSqr6E:               DB $40, 168
1164+ CC05 FF A8                                DB $FF, 168
1165+ CC07 91 A9        SunSqr6F:               DB $91, 169
1166+ CC09 FF A9                                DB $FF, 169
1167+ CC0B E4 AA        SunSqr70:               DB $E4, 170
1168+ CC0D FF AA                                DB $FF, 170
1169+ CC0F 00 AA        SunSqr71:               DB $00, 170
1170+ CC11 FF AA                                DB $FF, 170
1171+ CC13 39 AB        SunSqr72:               DB $39, 171
1172+ CC15 FF AB                                DB $FF, 171
1173+ CC17 90 AC        SunSqr73:               DB $90, 172
1174+ CC19 FF AC                                DB $FF, 172
1175+ CC1B E9 AD        SunSqr74:               DB $E9, 173
1176+ CC1D FF AD                                DB $FF, 173
1177+ CC1F FF AD        SunSqr75:               DB $FF, 173
1178+ CC21 44 AE        SunSqr76:               DB $44, 174
1179+ CC23 FF AE                                DB $FF, 174
1180+ CC25 A1 AF        SunSqr77:               DB $A1, 175
1181+ CC27 FF AF                                DB $FF, 175
1182+ CC29 FF AF        SunSqr78:               DB $FF, 175
1183+ CC2B 00 B0        SunSqr79:               DB $00, 176
1184+ CC2D FF B0                                DB $FF, 176
1185+ CC2F 61 B1        SunSqr7A:               DB $61, 177
1186+ CC31 FF B1                                DB $FF, 177
1187+ CC33 C4 B2        SunSqr7B:               DB $C4, 178
1188+ CC35 FF B2                                DB $FF, 178
1189+ CC37 FF B2        SunSqr7C:               DB $FF, 178
1190+ CC39 29 B3        SunSqr7D:               DB $29, 179
1191+ CC3B FF B3                                DB $FF, 179
1192+ CC3D 90 B4        SunSqr7E:               DB $90, 180
1193+ CC3F FF B4                                DB $FF, 180
1194+ CC41 F9 B5        SunSqr7F:               DB $F9, 181
1195+ CC43 FF B5                                DB $FF, 181
1196+ CC45 FF B5        SunSqr80:               DB $FF, 181
1197+ CC47 64 B6        SunSqr81:               DB $64, 182
1198+ CC49 FF B6                                DB $FF, 182
1199+ CC4B D1 B7        SunSqr82:               DB $D1, 183
1200+ CC4D FF B7        SunSqr83:               DB $FF, 183
1201+ CC4F FF B7                                DB $FF, 183
1202+ CC51 40 B8        SunSqr84:               DB $40, 184
1203+ CC53 FF B8                                DB $FF, 184
1204+ CC55 B1 B9        SunSqr85:               DB $B1, 185
1205+ CC57 FF B9                                DB $FF, 185
1206+ CC59 FF B9        SunSqr86:               DB $FF, 185
1207+ CC5B 24 BA        SunSqr87:               DB $24, 186
1208+ CC5D FF BA                                DB $FF, 186
1209+ CC5F 99 BB        SunSqr88:               DB $99, 187
1210+ CC61 FF BB                                DB $FF, 187
1211+ CC63 FF BB        SunSqr89:               DB $FF, 187
1212+ CC65 10 BC        SunSqr8A:               DB $10, 188
1213+ CC67 FF BC                                DB $FF, 188
1214+ CC69 89 BD        SunSqr8B:               DB $89, 189
1215+ CC6B FF BD                                DB $FF, 189
1216+ CC6D FF BD        SunSqr8C:               DB $FF, 189
1217+ CC6F 04 BE        SunSqr8D:               DB $04, 190
1218+ CC71 FF BE                                DB $FF, 190
1219+ CC73 81 BF        SunSqr8E:               DB $81, 191
1220+ CC75 FF BF                                DB $FF, 191
1221+ CC77 FF BF        SunSqr8F:               DB $FF, 191
1222+ CC79 00 C0        SunSqr90:               DB $00, 192
1223+ CC7B FF C0                                DB $FF, 192
1224+ CC7D 81 C1        SunSqr91:               DB $81, 193
1225+ CC7F FF C1                                DB $FF, 193
1226+ CC81 FF C1        SunSqr92:               DB $FF, 193
1227+ CC83 04 C2        SunSqr93:               DB $04, 194
1228+ CC85 FF C2                                DB $FF, 194
1229+ CC87 89 C3        SunSqr94:               DB $89, 195
1230+ CC89 FF C3                                DB $FF, 195
1231+ CC8B FF C3        SunSqr95:               DB $FF, 195
1232+ CC8D 10 C4        SunSqr96:               DB $10, 196
1233+ CC8F FF C4                                DB $FF, 196
1234+ CC91 99 C5        SunSqr97:               DB $99, 197
1235+ CC93 FF C5                                DB $FF, 197
1236+ CC95 FF C5        SunSqr98:               DB $FF, 197
1237+ CC97 24 C6        SunSqr99:               DB $24, 198
1238+ CC99 FF C6                                DB $FF, 198
1239+ CC9B B1 C7        SunSqr9A:               DB $B1, 199
1240+ CC9D FF C7                                DB $FF, 199
1241+ CC9F FF C7        SunSqr9B:               DB $FF, 199
1242+ CCA1 40 C8        SunSqr9C:               DB $40, 200
1243+ CCA3 FF C8                                DB $FF, 200
1244+ CCA5 D1 C9        SunSqr9D:               DB $D1, 201
1245+ CCA7 FF C9                                DB $FF, 201
1246+ CCA9 FF C9        SunSqr9E:               DB $FF, 201
1247+ CCAB 64 CA        SunSqr9F:               DB $64, 202
1248+ CCAD FF CA                                DB $FF, 202
1249+ CCAF F9 CB        SunSqrA0:               DB $F9, 203
1250+ CCB1 FF CB                                DB $FF, 203
1251+ CCB3 FF CB        SunSqrA1:               DB $FF, 203
1252+ CCB5 90 CC        SunSqrA2:               DB $90, 204
1253+ CCB7 FF CC                                DB $FF, 204
1254+ CCB9 FF CC        SunSqrA3:               DB $FF, 204
1255+ CCBB 29 CD        SunSqrA4:               DB $29, 205
1256+ CCBD FF CD                                DB $FF, 205
1257+ CCBF C4 CE        SunSqrA5:               DB $C4, 206
1258+ CCC1 FF CE                                DB $FF, 206
1259+ CCC3 FF CE        SunSqrA6:               DB $FF, 206
1260+ CCC5 61 CF        SunSqrA7:               DB $61, 207
1261+ CCC7 FF CF                                DB $FF, 207
1262+ CCC9 FF CF        SunSqrA8:               DB $FF, 207
1263+ CCCB 00 D0        SunSqrA9:               DB $00, 208
1264+ CCCD FF D0                                DB $FF, 208
1265+ CCCF A1 D1        SunSqrAA:               DB $A1, 209
1266+ CCD1 FF D1                                DB $FF, 209
1267+ CCD3 FF D1        SunSqrAB:               DB $FF, 209
1268+ CCD5 44 D2        SunSqrAC:               DB $44, 210
1269+ CCD7 FF D2                                DB $FF, 210
1270+ CCD9 E9 D3        SunSqrAD:               DB $E9, 211
1271+ CCDB FF D3                                DB $FF, 211
1272+ CCDD FF D3        SunSqrAE:               DB $FF, 211
1273+ CCDF 90 D4        SunSqrAF:               DB $90, 212
1274+ CCE1 FF D4        SunSqrB0:               DB $FF, 212
1275+ CCE3 39 D5        SunSqrB1:               DB $39, 213
1276+ CCE5 FF D5                                DB $FF, 213
1277+ CCE7 E4 D6        SunSqrB2:               DB $E4, 214
1278+ CCE9 FF D6                                DB $FF, 214
1279+ CCEB FF D6        SunSqrB3:               DB $FF, 214
1280+ CCED 91 D7        SunSqrB4:               DB $91, 215
1281+ CCEF FF D7                                DB $FF, 215
1282+ CCF1 FF D7        SunSqrB5:               DB $FF, 215
1283+ CCF3 40 D8        SunSqrB6:               DB $40, 216
1284+ CCF5 FF D8                                DB $FF, 216
1285+ CCF7 F1 D9        SunSqrB7:               DB $F1, 217
1286+ CCF9 FF D9                                DB $FF, 217
1287+ CCFB FF D9        SunSqrB8:               DB $FF, 217
1288+ CCFD FF D9                                DB $FF, 217
1289+ CCFF A4 DA        SunSqrB9:               DB $A4, 218
1290+ CD01 FF DA        SunSqrBA:               DB $FF, 218 ; we can reuse SunSeqrBA as  $FF for B9 terminator as well as they have the same target
1291+ CD03 59 DB        SunSqrBB:               DB $59, 219
1292+ CD05 FF DB                                DB $FF, 219
1293+ CD07 FF DB        SunSqrBC:               DB $FF, 219
1294+ CD09 10 DC        SunSqrBD:               DB $10, 220
1295+ CD0B FF DC                                DB $FF, 220
1296+ CD0D C9 DD        SunSqrBE:               DB $C9, 221
1297+ CD0F FF DD                                DB $FF, 221
1298+ CD11 FF DD        SunSqrBF:               DB $FF, 221
1299+ CD13 84 DE        SunSqrC0:               DB $84, 222
1300+ CD15 FF DE                                DB $FF, 222
1301+ CD17 FF DE        SunSqrC1:               DB $FF, 222
1302+ CD19 41 DF        SunSqrC2:               DB $41, 223
1303+ CD1B FF DF                                DB $FF, 223
1304+ CD1D FF DF        SunSqrC3:               DB $FF, 223
1305+ CD1F 00 E0        SunSqrC4:               DB $00, 224
1306+ CD21 FF E0                                DB $FF, 224
1307+ CD23 C1 E1        SunSqrC5:               DB $C1, 225
1308+ CD25 FF E1                                DB $FF, 225
1309+ CD27 FF E1        SunSqrC6:               DB $FF, 225
1310+ CD29 84 E2        SunSqrC7:               DB $84, 226
1311+ CD2B FF E2        SunSqrC8:               DB $FF, 226
1312+ CD2D 49 E3        SunSqrC9:               DB $49, 227
1313+ CD2F FF E3                                DB $FF, 227
1314+ CD31 FF E4        SunSqrCA:               DB $FF, 228
1315+ CD33 10 E4        SunSqrCB:               DB $10, 228
1316+ CD35 FF E4                                DB $FF, 228
1317+ CD37 D9 E5        SunSqrCC:               DB $D9, 229
1318+ CD39 FF E5                                DB $FF, 229
1319+ CD3B FF E5        SunSqrCD:               DB $FF, 229
1320+ CD3D A4 E6        SunSqrCE:               DB $A4, 230
1321+ CD3F FF E6                                DB $FF, 230
1322+ CD41 FF E6        SunSqrCF:               DB $FF, 230
1323+ CD43 71 E7        SunSqrD0:               DB $71, 231
1324+ CD45 FF E7                                DB $FF, 231
1325+ CD47 FF E7        SunSqrD1:               DB $FF, 231
1326+ CD49 40 E8        SunSqrD2:               DB $40, 232
1327+ CD4B FF E8                                DB $FF, 232
1328+ CD4D FF E8        SunSqrD3:               DB $FF, 232
1329+ CD4F 11 E9        SunSqrD4:               DB $11, 233
1330+ CD51 FF E9                                DB $FF, 233
1331+ CD53 E4 EA        SunSqrD5:               DB $E4, 234
1332+ CD55 FF EA                                DB $FF, 234
1333+ CD57 FF EA        SunSqrD6:               DB $FF, 234
1334+ CD59 B9 EB        SunSqrD7:               DB $B9, 235
1335+ CD5B FF EB                                DB $FF, 235
1336+ CD5D FF EB        SunSqrD8:               DB $FF, 235
1337+ CD5F 90 EC        SunSqrD9:               DB $90, 236
1338+ CD61 FF EC                                DB $FF, 236
1339+ CD63 FF EC        SunSqrDA:               DB $FF, 236
1340+ CD65 69 ED        SunSqrDB:               DB $69, 237
1341+ CD67 FF ED                                DB $FF, 237
1342+ CD69 FF ED        SunSqrDC:               DB $FF, 237
1343+ CD6B 44 EE        SunSqrDD:               DB $44, 238
1344+ CD6D FF EE        SunSqrDE:               DB $FF, 238
1345+ CD6F 21 EF        SunSqrDF:               DB $21, 239
1346+ CD71 FF EF                                DB $FF, 239
1347+ CD73 00 F0        SunSqrE0:               DB $00, 240
1348+ CD75 FF F0                                DB $FF, 240
1349+ CD77 00 F0        SunSqrE1:               DB $00, 240
1350+ CD79 FF F0                                DB $FF, 240
1351+ CD7B E1 F1        SunSqrE2:               DB $E1, 241
1352+ CD7D FF F1                                DB $FF, 241
1353+ CD7F E1 F1        SunSqrE3:               DB $E1, 241
1354+ CD81 FF F1                                DB $FF, 241
1355+ CD83 C4 F2        SunSqrE4:               DB $C4, 242
1356+ CD85 FF F2                                DB $FF, 242
1357+ CD87 FF F2        SunSqrE5:               DB $FF, 242
1358+ CD89 A9 F3        SunSqrE6:               DB $A9, 243
1359+ CD8B FF F3                                DB $FF, 243
1360+ CD8D FF F3        SunSqrE7:               DB $FF, 243
1361+ CD8F FF F3                                DB $FF, 243
1362+ CD91 90 F3        SunSqrE8:               DB $90, 243
1363+ CD93 FF F4                                DB $FF, 244
1364+ CD95 FF F4        SunSqrE9:               DB $FF, 244
1365+ CD97 79 F5        SunSqrEA:               DB $79, 245
1366+ CD99 FF F5                                DB $FF, 245
1367+ CD9B FF F5        SunSqrEB:               DB $FF, 245
1368+ CD9D 64 F6        SunSqrEC:               DB $64, 246
1369+ CD9F FF F6        SunSqrED:               DB $FF, 246
1370+ CDA1 51 F7        SunSqrEE:               DB $51, 247
1371+ CDA3 FF F7                                DB $FF, 247
1372+ CDA5 FF F7        SunSqrEF:               DB $FF, 247
1373+ CDA7 40 F8        SunSqrF0:               DB $40, 248
1374+ CDA9 FF F8        SunSqrF1:               DB $FF, 248
1375+ CDAB 31 F9        SunSqrF2:               DB $31, 249
1376+ CDAD FF F9                                DB $FF, 249
1377+ CDAF FF F9        SunSqrF3:               DB $FF, 249
1378+ CDB1 24 FA        SunSqrF4:               DB $24, 250
1379+ CDB3 FF FA                                DB $FF, 250
1380+ CDB5 FF FA        SunSqrF5:               DB $FF, 250
1381+ CDB7 19 FB        SunSqrF6:               DB $19, 251
1382+ CDB9 FF FB                                DB $FF, 251
1383+ CDBB FF FB        SunSqrF7:               DB $FF, 251
1384+ CDBD 10 FC        SunSqrF8:               DB $10, 252
1385+ CDBF FF FC                                DB $FF, 252
1386+ CDC1 FF FC        SunSqrF9:               DB $FF, 252
1387+ CDC3 09 FD        SunSqrFA:               DB $09, 253
1388+ CDC5 FF FD                                DB $FF, 253
1389+ CDC7 FF FD        SunSqrFB:               DB $FF, 253
1390+ CDC9 04 FE        SunSqrFC:               DB $04, 254
1391+ CDCB FF FE                                DB $FF, 254
1392+ CDCD FF FE        SunSqrFD:               DB $FF, 254
1393+ CDCF 01 FF        SunSqrFE:               DB $01, 255
1394+ CDD1 FF FF        SunSqrFF:               DB $FF, 255
1395+ CDD3
1396+ CDD3
1397+ CDD3
1398+ CDD3              SunBankSize  EQU $ - StartOfSun
1399+ CDD3
1400+ CDD3
# file closed: ./Universe/Sun/sun_data.asm
1340  CDD3
1341  CDD3              ; Bank 84  ------------------------------------------------------------------------------------------------------------------------
1342  CDD3                  SLOT    PlanetBankAddr
1343  CDD3                  PAGE    BankPlanetData
1344  CDD3              	ORG	    PlanetBankAddr,BankPlanetData
1345  C000                  ;TODO INCLUDE "./Universe/planet_data.asm"
1346  C000
1347  C000                  SLOT    GalaxyDataAddr
1348  C000                  PAGE    BankGalaxyData1
1349  C000              	ORG GalaxyDataAddr, BankGalaxyData1
1350  E000 FF           GALAXYDATABlock1         DB $FF
1351  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1352  0000
1353  0000                  SLOT    GalaxyDataAddr
1354  0000                  PAGE    BankGalaxyData2
1355  0000              	ORG GalaxyDataAddr, BankGalaxyData2
1356  E000 FF           GALAXYDATABlock2         DB $FF
1357  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1358  0000                  SLOT    GalaxyDataAddr
1359  0000                  PAGE    BankGalaxyData3
1360  0000              	ORG GalaxyDataAddr, BankGalaxyData3
1361  E000 FF           GALAXYDATABlock3         DB $FF
1362  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1363  0000                  SLOT    GalaxyDataAddr
1364  0000                  PAGE    BankGalaxyData4
1365  0000              	ORG GalaxyDataAddr, BankGalaxyData4
1366  E000 FF           GALAXYDATABlock4         DB $FF
1367  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1368  0000                  SLOT    GalaxyDataAddr
1369  0000                  PAGE    BankGalaxyData5
1370  0000              	ORG GalaxyDataAddr,BankGalaxyData5
1371  E000 FF           GALAXYDATABlock5         DB $FF
1372  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1373  0000                  SLOT    GalaxyDataAddr
1374  0000                  PAGE    BankGalaxyData6
1375  0000              	ORG GalaxyDataAddr,BankGalaxyData6
1376  E000 FF           GALAXYDATABlock6         DB $FF
1377  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1378  0000                  SLOT    GalaxyDataAddr
1379  0000                  PAGE    BankGalaxyData7
1380  0000              	ORG GalaxyDataAddr,BankGalaxyData7
1381  E000 FF           GALAXYDATABlock7         DB $FF
1382  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1383  0000
1384  0000
1385  0000
1386  0000
1387  0000                  SAVENEX OPEN "EliteN.nex", $8000 , $7F00
1388  0000                  SAVENEX CFG  0,0,0,1
1389  0000                  SAVENEX AUTO
1390  0000                  SAVENEX CLOSE
1391  0000
# file closed: eliteNext.asm
