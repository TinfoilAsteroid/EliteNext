# file opened: eliteNext.asm
   1  0000               DEVICE ZXSPECTRUMNEXT
   2  0000               DEFINE  DOUBLEBUFFER 1
   3  0000               ;DEFINE  LOGMATHS     1
   4  0000               ;DEFINE  DIAGSPRITES 1
   5  0000               DEFINE   SKIPATTRACT 1
   6  0000               DEFINE DEBUGMISSILETEST 1
   7  0000               CSPECTMAP eliteN.map
   8  0000               OPT --zxnext=cspect --syntax=a --reversepop
   9  0000
  10  0000              DEBUGSEGSIZE   equ 1
  11  0000              DEBUGLOGSUMMARY equ 1
  12  0000              ;DEBUGLOGDETAIL equ 1
  13  0000
  14  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  15  0000              ; Game Defines
  16  0000              ScreenLocal      EQU 0
  17  0000              ScreenGalactic   EQU ScreenLocal + 1
  18  0000              ScreenMarket     EQU ScreenGalactic + 1
  19  0000              ScreenMarketDsp  EQU ScreenMarket + 1
  20  0000              ScreenStatus     EQU ScreenMarketDsp + 1
  21  0000              ScreenInvent     EQU ScreenStatus + 1
  22  0000              ScreenPlanet     EQU ScreenInvent + 1
  23  0000              ScreenEquip      EQU ScreenPlanet + 1
  24  0000              ScreenLaunch     EQU ScreenEquip + 1
  25  0000              ScreenFront      EQU ScreenLaunch + 1
  26  0000              ScreenAft        EQU ScreenFront+1
  27  0000              ScreenLeft       EQU ScreenAft+1
  28  0000              ScreenRight      EQU ScreenLeft+1
  29  0000              ScreenDocking    EQU ScreenRight+1
  30  0000              ScreenHyperspace EQU ScreenDocking+1
  31  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  32  0000              ; Colour Defines
  33  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
   3+ 0000              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
   4+ 0000              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
   5+ 0000              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
   6+ 0000              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
   7+ 0000              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
   8+ 0000              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
   9+ 0000              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
  10+ 0000              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
  11+ 0000              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
  12+ 0000              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
  13+ 0000              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
  14+ 0000              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
  15+ 0000              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
  16+ 0000              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
  17+ 0000              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
  18+ 0000              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
  19+ 0000              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
  20+ 0000              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
  21+ 0000              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
  22+ 0000              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
  23+ 0000              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
  24+ 0000              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
  25+ 0000
  26+ 0000
  27+ 0000              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
  28+ 0000              L2ColourWHITE_2         EQU 146
  29+ 0000              L2ColourGREY_1		    EQU L2ColourWHITE_2
  30+ 0000              L2ColourGREY_2		    EQU 109
  31+ 0000              L2ColourGREY_3		    EQU  73
  32+ 0000              L2ColourGREY_4		    EQU  37
  33+ 0000
  34+ 0000              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
  35+ 0000              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
  36+ 0000              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
  37+ 0000              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
  38+ 0000              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
  39+ 0000
  40+ 0000              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
  41+ 0000              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
  42+ 0000              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
  43+ 0000              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
  44+ 0000              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
  45+ 0000              L2ColourORANGE_1        EQU 236                 ; RGB
  46+ 0000              L2ColourORANGE_2        EQU 168                 ; RGB
  47+ 0000              L2ColourORANGE_3        EQU  68                 ; RGB
  48+ 0000              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
  49+ 0000              L2ColourCYAN_2          EQU  18                 ; RGB
  50+ 0000              L2ColourCYAN_3          EQU   9                 ; RGB
  51+ 0000              L2ColourPURPLE_1        EQU 109                 ; RGB
  52+ 0000              L2ColourPURPLE_2        EQU  66                 ; RGB
  53+ 0000              L2ColourPURPLE_3        EQU  33                 ; RGB
  54+ 0000              L2ColourPINK_1		    EQU 231                 ; RGB
  55+ 0000              L2ColourPINK_2		    EQU 226                 ; RGB
  56+ 0000              L2ColourPINK_3		    EQU 225                 ; RGB
  57+ 0000              L2ColourPINK_4		    EQU 224                 ; RGB
  58+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  34  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  35  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  36  0000              ; Total screen list
  37  0000              ; Local Chart
  38  0000              ; Galactic Chart
  39  0000              ; Market Prices
  40  0000              ; Inventory
  41  0000              ; Comander status
  42  0000              ; System Data
  43  0000              ; Mission Briefing
  44  0000              ; missio completion
  45  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  46  0000              ; Pause Menu (only place you can load from )
  47  0000              ; byint and selling equipment
  48  0000              ; bying and selling stock
  49  0000
  50  0000                                      INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              IO_LAYER2_PORT                          EQU $123B
   2+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
   3+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
   4+ 0000              REGISTER_NUMBER_PORT					EQU $243B
   5+ 0000              REGISTER_VALUE_PORT						EQU $253B
   6+ 0000              SPRITE_SLOT_PORT						EQU $303B ; port for sprite and pattern index
   7+ 0000              SPRITE_INFO_PORT                        EQU $0057
   8+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
   9+ 0000
  10+ 0000              MACHINE_ID_REGISTER						EQU 0
  11+ 0000              VERSION_REGISTER						EQU 1
  12+ 0000              RESET_REGISTER		    				EQU 2
  13+ 0000              MACHINE_TYPE_REGISTER					EQU 3
  14+ 0000              PAGE_RAM_REGISTER						EQU 4
  15+ 0000              PERIPHERAL_1_REGISTER					EQU 5
  16+ 0000              PERIPHERAL_2_REGISTER					EQU 6
  17+ 0000              TURBO_MODE_REGISTER						EQU 7
  18+ 0000              PERIPHERAL_3_REGISTER					EQU 8
  19+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 10
  20+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
  21+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
  22+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
  23+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
  24+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
  25+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
  26+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
  27+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
  28+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
  29+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
  30+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
  31+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
  32+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
  33+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
  34+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
  35+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
  36+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
  37+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
  38+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
  39+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
  40+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
  41+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
  42+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
  43+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
  44+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
  45+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
  46+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
  47+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
  48+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
  49+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
  50+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
  51+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
  52+ 0000              PALETTE_INDEX_REGISTER					EQU 64
  53+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
  54+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
  55+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
  56+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
  57+ 0000              MMU_SLOT_0_REGISTER						EQU 80
  58+ 0000              MMU_SLOT_1_REGISTER						EQU 81
  59+ 0000              MMU_SLOT_2_REGISTER						EQU 82
  60+ 0000              MMU_SLOT_3_REGISTER						EQU 83
  61+ 0000              MMU_SLOT_4_REGISTER						EQU 84
  62+ 0000              MMU_SLOT_5_REGISTER						EQU 85
  63+ 0000              MMU_SLOT_6_REGISTER						EQU 86
  64+ 0000              MMU_SLOT_7_REGISTER						EQU 87
  65+ 0000              COPPER_DATA_REGISTER					EQU 96
  66+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
  67+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
  68+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
  69+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
  70+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
  71+ 0000              DEBUG_LEDS_REGISTER						EQU 255
  72+ 0000
  73+ 0000
  74+ 0000              GetNextReg:	MACRO register
  75+ 0000 ~                        push bc
  76+ 0000 ~                            ld bc,$243B
  77+ 0000 ~                                ld a,register
  78+ 0000 ~                                out (c),a
  79+ 0000 ~                                inc b
  80+ 0000 ~                            in a,(c)
  81+ 0000 ~                        pop bc
  82+ 0000                          ENDM
  83+ 0000
# file closed: ./Hardware/register_defines.asm
  51  0000                                      INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000              IO_DATAGEAR_DMA_PORT 		 equ 107
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_READ_ENABLE_MASK 	equ %00000100
  21+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ %00000001
  22+ 0000              LAYER2_READ_WRITE_MASK      equ %00000101
  23+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  24+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  25+ 0000
  26+ 0000              LAYER2_DISABLE_MEM_WRITE    equ %11111110
  27+ 0000              LAYER2_DISABLE_MEM_READ     equ %11111011
  28+ 0000              LAYER2_DISABLE_MEM_ACCESS   equ %11111010
  29+ 0000
  30+ 0000              LAYER2_SCREEN_BANK1          equ 8
  31+ 0000              LAYER2_SCREEN_BANK2          equ 9
  32+ 0000              LAYER2_SCREEN_BANK3          equ 10
  33+ 0000              LAYER2_SHADOW_BANK1          equ 11
  34+ 0000              LAYER2_SHADOW_BANK2          equ 12
  35+ 0000              LAYER2_SHADOW_BANK3          equ 13
  36+ 0000
  37+ 0000              SCREEN_HEIGHT 				 equ 192
  38+ 0000              SCREEN_RAM_BASE				 equ $0000
  39+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  40+ 0000
  41+ 0000              SPRITES_VISIBLE_MASK         equ $01
  42+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  43+ 0000              LAYER_PRIORITIES_MASK        equ $07
  44+ 0000              LORES_MODE_MASK              equ $80
  45+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  46+ 0000
  47+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  48+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  49+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  50+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  51+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  52+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  53+ 0000
  54+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  55+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  56+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  57+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  58+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  59+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  60+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  61+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  62+ 0000              DMA_WR4_CONT_MODE            equ $AD
  63+ 0000              DMA_RESET                    equ $c3
  64+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  65+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  66+ 0000              DMA_LOAD                     equ $cf
  67+ 0000              DMA_CONTINUE                 equ $d3
  68+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  69+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  70+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  71+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  72+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  73+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  74+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  75+ 0000              DMA_FORCE_READY              equ $b3
  76+ 0000              DMA_STOP_AT_END			     equ $82
  77+ 0000              DMA_DISABLE                  equ $83
  78+ 0000              DMA_ENABLE                   equ $87
  79+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  80+ 0000              DMA_BURST                    equ $cd
  81+ 0000              DMA_CONTINUOUS               equ $ad
  82+ 0000              ZXN_DMA_PORT                 equ $6b
  83+ 0000
  84+ 0000
  85+ 0000              COLOUR_TRANSPARENT			 equ $E3
  86+ 0000
  87+ 0000
  88+ 0000
  89+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  52  0000                                      INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              MathsTablesAddr         equ $0000
   9+ 0000              membank1 			    equ $2000
  10+ 0000              membank2 			    equ $4000
  11+ 0000              membank3 			    equ $6000
  12+ 0000              membank4 			    equ $8000
  13+ 0000              membank5 			    equ $a000
  14+ 0000              membank6 			    equ $c000
  15+ 0000              ScreenBank              equ $c000
  16+ 0000              MenuGalChtAddr          equ $c000
  17+ 0000              MenuEquipSAddr          equ $c000
  18+ 0000              MenuInventAddr          equ $c000
  19+ 0000              MenuMarketAddr          equ $c000
  20+ 0000              DispMarketAddr          equ $c000
  21+ 0000              MenuShrChtAddr          equ $c000
  22+ 0000              MenuStatusAddr          equ $c000
  23+ 0000              MenuSystemAddr          equ $c000
  24+ 0000              ViewFrontAddr           equ $c000
  25+ 0000              SunBankAddr             equ $c000
  26+ 0000              PlanetBankAddr          equ $c000
  27+ 0000              UniverseBankAddr	    equ $c000
  28+ 0000              LaunchShipAddr          equ $c000
  29+ 0000              membank7 			    equ $e000
  30+ 0000              L1membankAddr   	    equ $e000
  31+ 0000              L2membankAddr   	    equ $e000
  32+ 0000              ShipModelsAddr	        equ $e000
  33+ 0000              SpritemembankAddr       equ $e000
  34+ 0000              ResetUniverseAddr       equ $e000
  35+ 0000              StockTableAddr	        equ $e000
  36+ 0000              CommanderAddr           equ $e000
  37+ 0000              LAYER2Addr              equ $e000
  38+ 0000              LAYER1Addr              equ $e000
  39+ 0000              SPRITEAddr              equ $e000
  40+ 0000              ConsoleImageAddr        equ $e000
  41+ 0000              GalaxyDataAddr          equ $e000
  42+ 0000
  43+ 0000              EXSDOSMMU0              equ MMU_SLOT_0_REGISTER
  44+ 0000              MathsTablesMMU          equ MMU_SLOT_0_REGISTER
  45+ 0000              ShipReadMMU             equ MMU_SLOT_0_REGISTER
  46+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  47+ 0000              EXSDOSMMU1              equ MMU_SLOT_1_REGISTER
  48+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  49+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  50+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  51+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  52+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  53+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  54+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  55+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  56+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  57+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  58+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  59+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  60+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  61+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  62+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  63+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  64+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  65+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  66+ 0000              CommanderMMU	        equ MMU_SLOT_7_REGISTER
  67+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  68+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  69+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  70+ 0000
  71+ 0000              BankResetUniv           equ 49
  72+ 0000              BankMenuShrCht          equ 50
  73+ 0000              BankMenuGalCht          equ 51
  74+ 0000              BankMenuInvent          equ 52
  75+ 0000              BankMenuSystem          equ 53
  76+ 0000              BankMenuMarket          equ 54
  77+ 0000              BankStockTable          equ 55
  78+ 0000              BankCommander           equ 56
  79+ 0000              BankLAYER2              equ 57
  80+ 0000              BankLAYER1              equ 58
  81+ 0000              BankShipModels1         equ 59
  82+ 0000              BankSPRITE              equ 60
  83+ 0000              BankConsole             equ 61
  84+ 0000              BankFrontView           equ 62
  85+ 0000              BankMenuStatus          equ 63
  86+ 0000              BankMenuEquipS          equ 64
  87+ 0000              BankLaunchShip          equ 65
  88+ 0000              BankDispMarket          equ 66
  89+ 0000              BankShipModels2         equ 67
  90+ 0000              BankShipModels3         equ 68
  91+ 0000              BankShipModels4         equ 69
  92+ 0000
  93+ 0000              BankUNIVDATA0           equ 70
  94+ 0000              BankUNIVDATA1           equ 71
  95+ 0000              BankUNIVDATA2           equ 72
  96+ 0000              BankUNIVDATA3           equ 73
  97+ 0000              BankUNIVDATA4           equ 74
  98+ 0000              BankUNIVDATA5           equ 75
  99+ 0000              BankUNIVDATA6           equ 76
 100+ 0000              BankUNIVDATA7           equ 77
 101+ 0000              BankUNIVDATA8           equ 78
 102+ 0000              BankUNIVDATA9           equ 79
 103+ 0000              BankUNIVDATA10          equ 80
 104+ 0000              BankUNIVDATA11          equ 81
 105+ 0000              BankUNIVDATA12          equ 82
 106+ 0000              BankSunData             equ 83
 107+ 0000              BankPlanetData          equ 84
 108+ 0000
 109+ 0000              BankGalaxyData0         equ 91
 110+ 0000              BankGalaxyData1         equ 92
 111+ 0000              BankGalaxyData2         equ 93
 112+ 0000              BankGalaxyData3         equ 94
 113+ 0000              BankGalaxyData4         equ 95
 114+ 0000              BankGalaxyData5         equ 96
 115+ 0000              BankGalaxyData6         equ 97
 116+ 0000              BankGalaxyData7         equ 98
 117+ 0000
 118+ 0000              BankMathsTables         equ 99
 119+ 0000
 120+ 0000              BankROM                 equ 255
 121+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  53  0000                                      INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: ./Hardware/screen_equates.asm
  54  0000                                      INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	        equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	        equ 1
   3+ 0000              MissileLockHiOffset	        equ 2
   4+ 0000              EdgeAddyOffset		        equ 3
   5+ 0000              LineX4Offset		        equ 5
   6+ 0000              GunVertexOffset		        equ 6
   7+ 0000              ExplosionCtOffset	        equ 7
   8+ 0000              VertexCountOffset           equ 8
   9+ 0000              VertexCtX6Offset	        equ 9
  10+ 0000              EdgeCountOffset		        equ 10
  11+ 0000              BountyLoOffset		        equ 11
  12+ 0000              BountyHiOffset		        equ 12
  13+ 0000              FaceCtX4Offset		        equ 13
  14+ 0000              DotOffset			        equ 14
  15+ 0000              EnergyOffset		        equ 15
  16+ 0000              SpeedOffset			        equ 16
  17+ 0000              FaceAddyOffset		        equ 17
  18+ 0000              QOffset				        equ 19
  19+ 0000              LaserOffset			        equ 20
  20+ 0000              VerticiesAddyOffset         equ 21
  21+ 0000              ShipTypeOffset              equ 23
  22+ 0000              ShipNewBitsOffset           equ 24
  23+ 0000              ShipAIFlagsOffset           equ 25
  24+ 0000              ShipECMFittedChanceOffset   equ 26
  25+ 0000              ShipDataLength              equ ShipECMFittedChanceOffset+1
  26+ 0000
  27+ 0000              CobraTablePointer           equ 43
  28+ 0000              ;29 faulty
  29+ 0000              BankThreshold               equ 16
  30+ 0000
  31+ 0000              ShipTableALast              equ 23
  32+ 0000              ShipTableBLast              equ 39
  33+ 0000              ShipTableCLast              equ 55
  34+ 0000
# file closed: ./Data/ShipModelEquates.asm
  55  0000                                      INCLUDE "./Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1+ 0000              InitNoDoubleBuffer:         MACRO
   2+ 0000 ~                                        MMUSelectLayer1
   3+ 0000 ~                                        call	l1_cls
   4+ 0000 ~                                        ld		a,7
   5+ 0000 ~                                        call	l1_attr_cls_to_a
   6+ 0000 ~                                        MMUSelectLayer2
   7+ 0000 ~                                        call    asm_l2_double_buffer_off
   8+ 0000 ~                                        call	l2_cls	; Get some space
   9+ 0000 ~                                        MMUSelectSpriteBank
  10+ 0000 ~                                        call    sprite_cls_cursors
  11+ 0000                                          ENDM
  12+ 0000
  13+ 0000
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
  56  0000                                      INCLUDE "./Macros/graphicsMacros.asm"
# file opened: ./Macros/graphicsMacros.asm
   1+ 0000              ; General Graphics macros
   2+ 0000              DoubleBufferIfPossible: MACRO
   3+ 0000 ~                                    IFDEF DOUBLEBUFFER
   4+ 0000 ~                                        MMUSelectLayer2
   5+ 0000 ~                                        call  l2_cls
   6+ 0000 ~                                        call  l2_flip_buffers
   7+ 0000 ~                                    ENDIF
   8+ 0000                                      ENDM
# file closed: ./Macros/graphicsMacros.asm
  57  0000                                      INCLUDE "./Macros/callMacros.asm"
# file opened: ./Macros/callMacros.asm
   1+ 0000
   2+ 0000              CallIfAEqNusng:         MACRO   reg,target
   3+ 0000 ~                                    cp      reg
   4+ 0000 ~                                    call	z,target
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              CallIfAGTENusng:        MACRO   reg,target
   8+ 0000 ~                                    cp      reg
   9+ 0000 ~                                    call	nc,target
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              CallIfAGTEMemusng:      MACRO   reg,target
  13+ 0000 ~                                    ld      hl,reg
  14+ 0000 ~                                    cp      (hl)
  15+ 0000 ~                                    call	nc,target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              CallIfALTNusng:         MACRO   reg,target
  19+ 0000 ~                                    cp      reg
  20+ 0000 ~                                    call	c,target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  24+ 0000 ~                                    ld      a,(mem)
  25+ 0000 ~                                    ld      hl,address
  26+ 0000 ~                                    cp      (hl)
  27+ 0000 ~                                    call    z,target
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              CallIfMemEqNusng:       MACRO mem, value, target
  31+ 0000 ~                                    ld      a,(mem)
  32+ 0000 ~                                    cp      value
  33+ 0000 ~                                    call    z,target
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000
  37+ 0000              CallIfMemGTENusng:      MACRO mem, value, target
  38+ 0000 ~                                    ld      a,(mem)
  39+ 0000 ~                                    cp      value
  40+ 0000 ~                                    call    nc,target
  41+ 0000                                      ENDM
  42+ 0000
  43+ 0000              CallIfMemTrue:          MACRO mem, target
  44+ 0000 ~                                    ld      a,(mem)
  45+ 0000 ~                                    and     a
  46+ 0000 ~                                    call    z, target
  47+ 0000                                      ENDM
  48+ 0000
  49+ 0000              CallIfMemFalse:         MACRO mem, target
  50+ 0000 ~                                    ld      a,(mem)
  51+ 0000 ~                                    and     a
  52+ 0000 ~                                    call    nz, target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              CallIfMemZero:          MACRO mem, target
  56+ 0000 ~                                    ld      a,(mem)
  57+ 0000 ~                                    and     a
  58+ 0000 ~                                    call    z, target
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              CallIfMemNotZero:       MACRO mem, target
  62+ 0000 ~                                    ld      a,(mem)
  63+ 0000 ~                                    and     a
  64+ 0000 ~                                    call    nz, target
  65+ 0000                                      ENDM
  66+ 0000              CallIfATrue:            MACRO target
  67+ 0000 ~                                    and     a
  68+ 0000 ~                                    call    z, target
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              CallIfAFalse:           MACRO target
  72+ 0000 ~                                    and     a
  73+ 0000 ~                                    call    nz, target
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              CallIfAZero:            MACRO target
  77+ 0000 ~                                    and     a
  78+ 0000 ~                                    call    z, target
  79+ 0000                                      ENDM
  80+ 0000
  81+ 0000              CallIfANotZero:         MACRO target
  82+ 0000 ~                                    and     a
  83+ 0000 ~                                    call    nz, target
  84+ 0000                                      ENDM
# file closed: ./Macros/callMacros.asm
  58  0000                                      INCLUDE "./Macros/carryFlagMacros.asm"
# file opened: ./Macros/carryFlagMacros.asm
   1+ 0000
   2+ 0000              SetCarryFlag:           MACRO
   3+ 0000 ~                                    scf
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearCarryFlag:	        MACRO
   7+ 0000 ~                                    or a
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              FlipCarryFlag:          MACRO
  11+ 0000 ~                                    ccf
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ./Macros/carryFlagMacros.asm
  59  0000                                      INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ./Macros/CopyByteMacros.asm
  60  0000                                      INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		            MACRO
   2+ 0000 ~                                    xor a
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              SetATrue:               MACRO
   6+ 0000 ~                                    xor     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              SetAFalse:              MACRO
  10+ 0000 ~                                    ld      a,$FF
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              SetMemFalse             MACRO   mem
  14+ 0000 ~                                    ld      a,$FF
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetMemTrue              MACRO   mem
  19+ 0000 ~                                    xor     a
  20+ 0000 ~                                    ld      (mem),a
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              SetMemToN:              MACRO   mem,value
  24+ 0000 ~                                    ld      a,value
  25+ 0000 ~                                    ld      (mem),a
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              ldCopyStringLen:        MACRO   source, target, strlen
  29+ 0000 ~                                    ld      hl,source
  30+ 0000 ~                                    ld      de, target
  31+ 0000 ~                                    ld      bc, strlen
  32+ 0000 ~                                    ldir
  33+ 0000                                      ENDM
  34+ 0000
  35+ 0000              ldCopyTextAtHLtoDE:     MACRO
  36+ 0000 ~            .CopyLoop:              ld      a,(hl)
  37+ 0000 ~                                    ld      (de),a
  38+ 0000 ~                                    cp      0
  39+ 0000 ~                                    jp      z,.DoneCopy
  40+ 0000 ~                                    inc     hl
  41+ 0000 ~                                    inc     de
  42+ 0000 ~                                    jr      .CopyLoop
  43+ 0000 ~            .DoneCopy:
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ldClearTextLoop:        MACRO   TextSize
  47+ 0000 ~                                    ld      b,a
  48+ 0000 ~                                    ld      a,TextSize
  49+ 0000 ~            .ClearLoop:             ld      (hl),a
  50+ 0000 ~                                    inc     hl
  51+ 0000 ~                                    djnz    .ClearLoop
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              ldCopyByte:             MACRO memfrom, memto
  55+ 0000 ~                                    ld       a,(memfrom)
  56+ 0000 ~                                    ld       (memto),a
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000
  60+ 0000              ldCopyByteABS:          MACRO memfrom, memto
  61+ 0000 ~                                    ld       a,(memfrom)
  62+ 0000 ~                                    and		$7F
  63+ 0000 ~                                    ld       (memto),a
  64+ 0000                                      ENDM
  65+ 0000
  66+ 0000              ldAtHLtoMem:            MACRO   memto
  67+ 0000 ~                                    ld      a,(hl)
  68+ 0000 ~                                    ld      (memto),a
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              ldCopy2Byte             MACRO  memfrom, memto
  72+ 0000 ~                                    ld       hl,(memfrom)
  73+ 0000 ~                                    ld       (memto),hl
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              ldWriteConst            MACRO  memfrom, memto
  77+ 0000 ~                                    ld       a,memfrom
  78+ 0000 ~                                    ld       (memto),a
  79+ 0000                                      ENDM
  80+ 0000
  81+ 0000              ldWriteZero             MACRO  memto
  82+ 0000 ~                                    xor      a
  83+ 0000 ~                                    ld       (memto),a
  84+ 0000                                      ENDM
  85+ 0000
  86+ 0000              ldIXLaFromN:	        MACRO memfrom
  87+ 0000 ~                                    ld		a,(memfrom)
  88+ 0000 ~                                    ld		ixl,a
  89+ 0000                                      ENDM
  90+ 0000
  91+ 0000              ldIXHaFromN:	        MACRO memfrom
  92+ 0000 ~                                    ld		a,(memfrom)
  93+ 0000 ~                                    ld		ixh,a
  94+ 0000                                      ENDM
  95+ 0000
  96+ 0000              ldIYLaFromN:	        MACRO memfrom
  97+ 0000 ~                                    ld		a,(memfrom)
  98+ 0000 ~                                    ld		iyl,a
  99+ 0000                                      ENDM
 100+ 0000
 101+ 0000              ldIYHaFromN:	        MACRO memfrom
 102+ 0000 ~                                    ld		a,(memfrom)
 103+ 0000 ~                                    ld		iyh,a
 104+ 0000                                      ENDM
 105+ 0000
 106+ 0000              ; Read a 32 bit value from address HL into BCDE
 107+ 0000              ldBCDEatHL:             MACRO
 108+ 0000 ~                                    ld      e,(hl)
 109+ 0000 ~                                    inc     hl
 110+ 0000 ~                                    ld      d,(hl)
 111+ 0000 ~                                    inc     hl
 112+ 0000 ~                                    ld      c,(hl)
 113+ 0000 ~                                    inc     hl
 114+ 0000 ~                                    ld      b,(hl)
 115+ 0000 ~                                    inc     hl
 116+ 0000                                      ENDM
 117+ 0000
 118+ 0000              ldBCatHL:               MACRO
 119+ 0000 ~                                    ld      c,(hl)
 120+ 0000 ~                                    inc     hl
 121+ 0000 ~                                    ld      b,(hl)
 122+ 0000 ~                                    inc     hl
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              ldhlde:			        MACRO
 126+ 0000 ~                                    ld		h,d
 127+ 0000 ~                                    ld		l,e
 128+ 0000                                      ENDM
 129+ 0000
 130+ 0000              ldhlbc:			        MACRO
 131+ 0000 ~                                    ld		h,b
 132+ 0000 ~                                    ld		l,c
 133+ 0000                                      ENDM
 134+ 0000
 135+ 0000              ldbcde:			        MACRO
 136+ 0000 ~                                    ld		b,d
 137+ 0000 ~                                    ld		c,e
 138+ 0000                                      ENDM
 139+ 0000
 140+ 0000              lddebc:			        MACRO
 141+ 0000 ~                                    ld		d,b
 142+ 0000 ~                                    ld		e,c
 143+ 0000                                      ENDM
 144+ 0000
 145+ 0000              ldbchl:			        MACRO
 146+ 0000 ~                                    ld		b,h
 147+ 0000 ~                                    ld		c,l
 148+ 0000                                      ENDM
 149+ 0000
 150+ 0000              lddeiy:			        MACRO
 151+ 0000 ~                                    ld		d,iyh
 152+ 0000 ~                                    ld		e,iyl
 153+ 0000                                      ENDM
 154+ 0000
 155+ 0000              ldiyde:			        MACRO
 156+ 0000 ~                                    ld		iyh,d
 157+ 0000 ~                                    ld		iyl,e
 158+ 0000                                      ENDM
 159+ 0000
 160+ 0000
 161+ 0000              FourLDIInstrunctions:   MACRO
 162+ 0000 ~                                    ldi
 163+ 0000 ~                                    ldi
 164+ 0000 ~                                    ldi
 165+ 0000 ~                                    ldi
 166+ 0000                                      ENDM
 167+ 0000
 168+ 0000              FiveLDIInstrunctions:   MACRO
 169+ 0000 ~                                    ldi
 170+ 0000 ~                                    ldi
 171+ 0000 ~                                    ldi
 172+ 0000 ~                                    ldi
 173+ 0000 ~                                    ldi
 174+ 0000                                      ENDM
 175+ 0000
 176+ 0000              SixLDIInstrunctions:    MACRO
 177+ 0000 ~                                    ldi
 178+ 0000 ~                                    ldi
 179+ 0000 ~                                    ldi
 180+ 0000 ~                                    ldi
 181+ 0000 ~                                    ldi
 182+ 0000 ~                                    ldi
 183+ 0000                                      ENDM
 184+ 0000
 185+ 0000              EightLDIInstrunctions:  MACRO
 186+ 0000 ~            		                ldi
 187+ 0000 ~            		                ldi
 188+ 0000 ~            		                ldi
 189+ 0000 ~            		                ldi
 190+ 0000 ~            		                ldi
 191+ 0000 ~            		                ldi
 192+ 0000 ~            		                ldi
 193+ 0000 ~            		                ldi
 194+ 0000                                      ENDM
 195+ 0000
 196+ 0000              NineLDIInstrunctions:  MACRO
 197+ 0000 ~            		                ldi
 198+ 0000 ~            		                ldi
 199+ 0000 ~            		                ldi
 200+ 0000 ~            		                ldi
 201+ 0000 ~            		                ldi
 202+ 0000 ~            		                ldi
 203+ 0000 ~            		                ldi
 204+ 0000 ~            		                ldi
 205+ 0000 ~            		                ldi
 206+ 0000                                      ENDM
# file closed: ./Macros/ldCopyMacros.asm
  61  0000                                      INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              GetByteAInTable:    MACRO table
   2+ 0000 ~                                ld          hl,table
   3+ 0000 ~                                add         hl,a
   4+ 0000 ~                                ld          a,(hl)
   5+ 0000                                  ENDM
   6+ 0000
   7+ 0000              HLWordAInTable:     MACRO table
   8+ 0000 ~                                ld          hl,table
   9+ 0000 ~                                sla         a
  10+ 0000 ~                                add         hl,a
  11+ 0000 ~                                ld          a,(hl)
  12+ 0000 ~                                inc         hl
  13+ 0000 ~                                ld          h,(hl)
  14+ 0000 ~                                ld          l,a
  15+ 0000                                  ENDM
  16+ 0000
  17+ 0000
  18+ 0000              ldAToHLixl:			MACRO value
  19+ 0000 ~            					ld          hl,value
  20+ 0000 ~            					ex          af,af'
  21+ 0000 ~            					ld          a,ixl
  22+ 0000 ~            					add         hl,a
  23+ 0000 ~            					ex          af,af'
  24+ 0000 ~            					ld          (hl),a
  25+ 0000              					ENDM
  26+ 0000
  27+ 0000              ldAToHLiyl:			MACRO value
  28+ 0000 ~            					ld          hl,value
  29+ 0000 ~            					ex          af,af'
  30+ 0000 ~            					ld          a,iyl
  31+ 0000 ~            					add         hl,a
  32+ 0000 ~            					ex          af,af'
  33+ 0000 ~            					ld          (hl),a
  34+ 0000              					ENDM
  35+ 0000
  36+ 0000
  37+ 0000              ldHLixlToA:         MACRO value
  38+ 0000 ~                                ld          hl,value
  39+ 0000 ~                                ex          af,af'
  40+ 0000 ~                                ld          a,ixl
  41+ 0000 ~                                add         hl,a
  42+ 0000 ~                                ld          a,(hl)
  43+ 0000                                  ENDM
  44+ 0000
  45+ 0000              ldHLiylToA:         MACRO value
  46+ 0000 ~                                ld          hl,value
  47+ 0000 ~                                ex          af,af'
  48+ 0000 ~                                ld          a,iyl
  49+ 0000 ~                                add         hl,a
  50+ 0000 ~                                ld          a,(hl)
  51+ 0000                                  ENDM
  52+ 0000
  53+ 0000              ldHLIdxAToA:        MACRO value
  54+ 0000 ~                                ld          hl,value
  55+ 0000 ~                                add         hl,a
  56+ 0000 ~                                ld          a,(hl)
  57+ 0000                                  ENDM
  58+ 0000
  59+ 0000              HLEquAddrAtHLPlusA: MACRO
  60+ 0000 ~                                sla         a
  61+ 0000 ~                                add         hl,a
  62+ 0000 ~                                ld          a,(hl)
  63+ 0000 ~                                inc         hl
  64+ 0000 ~                                ld          h,(hl)
  65+ 0000 ~                                ld          l,a
  66+ 0000                                  ENDM
# file closed: ./Macros/ldIndexedMacros.asm
  62  0000                                      INCLUDE "./Macros/jumpMacros.asm"
# file opened: ./Macros/jumpMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p, target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m, target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000
  10+ 0000              JumpIfUnderflow:	    MACRO target
  11+ 0000 ~                                    jp		po, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000              JumpIfOverflow:	        MACRO target
  15+ 0000 ~                                    jp		po, target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000
  19+ 0000              JumpIfNotZero:	        MACRO target
  20+ 0000 ~                                    jp	nz,target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              JumpIfZero:	            MACRO target
  24+ 0000 ~                                    jp	z,target
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              ;.. Bit routines
  28+ 0000              JumpOnLeadSignSet:      MACRO   reg, target
  29+ 0000 ~                                    ld      a,reg
  30+ 0000 ~                                    and     SignOnly8Bit
  31+ 0000 ~                                    jp      nz,target
  32+ 0000                                      ENDM
  33+ 0000
  34+ 0000              JumpOnLeadSignClear:    MACRO   reg, target
  35+ 0000 ~                                    ld      a,reg
  36+ 0000 ~                                    and     SignOnly8Bit
  37+ 0000 ~                                    jp      z,target
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              JumpOnLeadSignSetA:     MACRO   target
  41+ 0000 ~                                    and     SignOnly8Bit
  42+ 0000 ~                                    jp      nz,target
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              JumpOnLeadSignClearA:   MACRO   target
  46+ 0000 ~                                    and     SignOnly8Bit
  47+ 0000 ~                                    jp      z,target
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  51+ 0000 ~                                    ld      a,(mem)
  52+ 0000 ~                                    bit 	bitnbr,a
  53+ 0000 ~                                    jp      nz,target
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  57+ 0000 ~                                    ld      a,(mem)
  58+ 0000 ~                                    bit 	bitnbr,a
  59+ 0000 ~                                    jp      z,target
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000
  63+ 0000              JumpOnABitSet:          MACRO   bitnbr, target
  64+ 0000 ~                                    bit 	bitnbr, a
  65+ 0000 ~                                    jp      nz,target
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              JumpOnABitClear:        MACRO   bitnbr, target
  69+ 0000 ~                                    bit 	bitnbr, a
  70+ 0000 ~                                    jp      z,target
  71+ 0000                                      ENDM
  72+ 0000
  73+ 0000              JumpOnABit5Set:         MACRO   target
  74+ 0000 ~                                    and     Bit5Only
  75+ 0000 ~                                    jp      nz,target
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              JumpOnABit5Clear:       MACRO   target
  79+ 0000 ~                                    and     Bit5Only
  80+ 0000 ~                                    jp      z,target
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000              JumpOnBitMaskSet:       MACRO   bitmask, target
  84+ 0000 ~                                    and     bitmask
  85+ 0000 ~                                    jp      nz,target
  86+ 0000                                      ENDM
  87+ 0000
  88+ 0000              JumpOnBitMaskClear:     MACRO   bitmask, target
  89+ 0000 ~                                    and     bitmask
  90+ 0000 ~                                    jp      z,target
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              JumpOnMemBitMaskSet:    MACRO   mem, bitmask, target
  94+ 0000 ~                                    ld      a,(mem)
  95+ 0000 ~                                    and     bitmask
  96+ 0000 ~                                    jp      nz,target
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000              JumpOnMemBitMaskClear:  MACRO   mem, bitmask, target
 100+ 0000 ~                                    ld      a,(mem)
 101+ 0000 ~                                    and     bitmask
 102+ 0000 ~                                    jp      z,target
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
 106+ 0000 ~                                    bit 	bitnbr,reg
 107+ 0000 ~                                    jp      nz,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
 111+ 0000 ~                                    bit 	bitnbr,reg
 112+ 0000 ~                                    jp      z,target
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              ; Comparison Routines
 116+ 0000              JumpIfAGTEusng:         MACRO
 117+ 0000 ~                                    jp		nc,target
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              JumpIfAGTENusng:        MACRO reg,target
 121+ 0000 ~                                    cp     reg
 122+ 0000 ~                                    jp		nc,target
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
 126+ 0000 ~                                    ld      hl,mem
 127+ 0000 ~                                    cp      (hl)
 128+ 0000 ~                                    jp		nc,target
 129+ 0000                                      ENDM
 130+ 0000
 131+ 0000              JumpIfALTMemusng:       MACRO mem,target
 132+ 0000 ~                                    ld      hl,mem
 133+ 0000 ~                                    cp      (hl)
 134+ 0000 ~                                    jp		c,target
 135+ 0000                                      ENDM
 136+ 0000
 137+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
 138+ 0000 ~                                    ld     a,(mem)
 139+ 0000 ~                                    cp     value
 140+ 0000 ~                                    jp	  nc,target
 141+ 0000                                      ENDM
 142+ 0000
 143+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
 144+ 0000 ~                                    ld   a,(mem)
 145+ 0000 ~                                    ld   hl,address
 146+ 0000 ~                                    cp   (hl)
 147+ 0000 ~                                    jp	  nc,target
 148+ 0000                                      ENDM
 149+ 0000
 150+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 151+ 0000 ~                                    ld   a,(mem)
 152+ 0000 ~                                    ld   hl,address
 153+ 0000 ~                                    cp   (hl)
 154+ 0000 ~                                    jp	  z,target
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              JumpIfMemNeMemusng:     MACRO mem, address, target
 158+ 0000 ~                                    ld   a,(mem)
 159+ 0000 ~                                    ld   hl,address
 160+ 0000 ~                                    cp   (hl)
 161+ 0000 ~                                    jp	  nz,target
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              JumpIfMemTrue:          MACRO mem, target
 165+ 0000 ~                                    ld      a,(mem)
 166+ 0000 ~                                    and     a
 167+ 0000 ~                                    jp      z, target
 168+ 0000                                      ENDM
 169+ 0000
 170+ 0000              JumpIfMemFalse:         MACRO mem, target
 171+ 0000 ~                                    ld      a,(mem)
 172+ 0000 ~                                    and     a
 173+ 0000 ~                                    jp      nz, target
 174+ 0000                                      ENDM
 175+ 0000
 176+ 0000              JumpIfATrue:            MACRO target
 177+ 0000 ~                                    and     a
 178+ 0000 ~                                    jp      z, target
 179+ 0000                                      ENDM
 180+ 0000
 181+ 0000              JumpIfAFalse:           MACRO target
 182+ 0000 ~                                    and     a
 183+ 0000 ~                                    jp      nz, target
 184+ 0000                                      ENDM
 185+ 0000
 186+ 0000              JumpIfANotFalse:        MACRO target
 187+ 0000 ~                                    cp      $FF
 188+ 0000 ~                                    jp      nz, target
 189+ 0000                                      ENDM
 190+ 0000
 191+ 0000              JumpIfALTusng:          MACRO target
 192+ 0000 ~                                    jp		c,target
 193+ 0000                                      ENDM
 194+ 0000
 195+ 0000              JumpIfALTNusng:         MACRO value, target
 196+ 0000 ~                                    cp      value
 197+ 0000 ~                                    jp		c, target
 198+ 0000                                      ENDM
 199+ 0000
 200+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 201+ 0000 ~                                    ld      a,(mem)
 202+ 0000 ~                                    cp      value
 203+ 0000 ~                                    jp	  c,target
 204+ 0000                                      ENDM
 205+ 0000
 206+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 207+ 0000 ~                                    ld    a,(mem)
 208+ 0000 ~                                    ld    hl,value
 209+ 0000 ~                                    cp    (hl)
 210+ 0000 ~                                    jp	  c,target
 211+ 0000                                      ENDM
 212+ 0000
 213+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 214+ 0000 ~                                    ld  a,(mem)
 215+ 0000 ~                                    cp  value
 216+ 0000 ~                                    jp  z,target
 217+ 0000                                      ENDM
 218+ 0000
 219+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 220+ 0000 ~                                    ld  a,(mem)
 221+ 0000 ~                                    cp  value
 222+ 0000 ~                                    jp  nz,target
 223+ 0000                                      ENDM
 224+ 0000
 225+ 0000              JumpIfMemZero:          MACRO mem,target
 226+ 0000 ~                                    ld  a,(mem)
 227+ 0000 ~                                    and a
 228+ 0000 ~                                    jp  z,target
 229+ 0000                                      ENDM
 230+ 0000
 231+ 0000              JumpIfMemNotZero:       MACRO mem,target
 232+ 0000 ~                                    ld  a,(mem)
 233+ 0000 ~                                    and a
 234+ 0000 ~                                    jp  nz,target
 235+ 0000                                      ENDM
 236+ 0000
 237+ 0000              JumpIfALTMemHLusng:     MACRO target
 238+ 0000 ~                                    cp    (hl)
 239+ 0000 ~                                    jp	  c,target
 240+ 0000                                      ENDM
 241+ 0000
 242+ 0000              JumpIfANENusng:         MACRO value, target
 243+ 0000 ~                                    cp     value
 244+ 0000 ~                                    jp      nz,target
 245+ 0000                                      ENDM
 246+ 0000
 247+ 0000              JumpIfANEquNusng:       MACRO value, target
 248+ 0000 ~                                    cp     value
 249+ 0000 ~                                    jp     z,target
 250+ 0000                                      ENDM
 251+ 0000
 252+ 0000              JumpIfANEMemusng:       MACRO  value, target
 253+ 0000 ~                                    ld    hl,value
 254+ 0000 ~                                    cp    (hl)
 255+ 0000 ~                                    jp      nz,target
 256+ 0000                                      ENDM
 257+ 0000
 258+ 0000              JumpIfAEqNusng:         MACRO value, target
 259+ 0000 ~                                    cp     value
 260+ 0000 ~                                    jp      z,target
 261+ 0000                                      ENDM
 262+ 0000
 263+ 0000              JumpIfAIsZero:	        MACRO target
 264+ 0000 ~                                    and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 265+ 0000 ~                                    jp	    z, target
 266+ 0000                                      ENDM
 267+ 0000
 268+ 0000              JumpIfRegIsNotZero:     MACRO   reg, target
 269+ 0000 ~                                    ld      a,reg
 270+ 0000 ~                                    and     a
 271+ 0000 ~                                    jp	    nz,target
 272+ 0000                                      ENDM
 273+ 0000
 274+ 0000              JumpIfAIsNotZero:       MACRO target
 275+ 0000 ~                                    and     a
 276+ 0000 ~                                    jp	    nz,target
 277+ 0000                                      ENDM
 278+ 0000
 279+ 0000              JumpIfMemIsNotZero:     MACRO value, target
 280+ 0000 ~                                    ld      a,(value)
 281+ 0000 ~                                    and     a
 282+ 0000 ~                                    jp	    nz,target
 283+ 0000                                      ENDM
 284+ 0000              IfResultZeroGoto:	    MACRO target
 285+ 0000 ~                                    jp	z,target
 286+ 0000                                      ENDM
 287+ 0000
 288+ 0000              IfResultNotZeroGoto:    MACRO target
 289+ 0000 ~                                    jp	nz,target
 290+ 0000                                      ENDM
 291+ 0000
# file closed: ./Macros/jumpMacros.asm
  63  0000                                      INCLUDE "./Macros/MathsMacros.asm"
# file opened: ./Macros/MathsMacros.asm
   1+ 0000
   2+ 0000              ABSa2c:                 MACRO
   3+ 0000 ~                                    bit     7,a
   4+ 0000 ~                                    jp      z,.DoneABSa
   5+ 0000 ~                                    neg
   6+ 0000 ~            .DoneABSa:
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              DEEquSquareA:           MACRO
  10+ 0000 ~                                    ld  d,a
  11+ 0000 ~                                    ld  e,a
  12+ 0000 ~                                    mul de
  13+ 0000                                      ENDM
  14+ 0000
  15+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
  16+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  17+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
  18+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
  19+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
  20+ 0000 ~                                    xor $80                             ;
  21+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  22+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  23+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  24+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  25+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  26+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              SignedHLTo2C:           MACRO
  30+ 0000 ~                                    bit     7,h
  31+ 0000 ~                                    jr      z,.Done2c
  32+ 0000 ~                                    ld      a,h
  33+ 0000 ~                                    and     SignMask8Bit
  34+ 0000 ~                                    ld      h,a
  35+ 0000 ~                                    NegHL
  36+ 0000 ~            .Done2c:
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              MemSignedTo2C:          MACRO   memfrom
  40+ 0000 ~                                    ld      hl,(memfrom)
  41+ 0000 ~                                    bit     7,h
  42+ 0000 ~                                    jr      z,.Done2c
  43+ 0000 ~                                    ld      a,h
  44+ 0000 ~                                    and     SignMask8Bit
  45+ 0000 ~                                    ld      h,a
  46+ 0000 ~            .Done2c:                ld      (memfrom),hl
  47+ 0000                                      ENDM
  48+ 0000
  49+ 0000
  50+ 0000                  ;returns result in H
  51+ 0000              EDiv10Inline:           MACRO
  52+ 0000 ~                                    ld      d,0
  53+ 0000 ~                                    ld      hl,de
  54+ 0000 ~                                    add     hl,hl
  55+ 0000 ~                                    add     hl,de
  56+ 0000 ~                                    add     hl,hl
  57+ 0000 ~                                    add     hl,hl
  58+ 0000 ~                                    add     hl,de
  59+ 0000 ~                                    add     hl,hl
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              cpHLDE:                 MACRO
  63+ 0000 ~                                    push    hl
  64+ 0000 ~                                    and     a
  65+ 0000 ~                                    sbc     hl,de
  66+ 0000 ~                                    pop     hl
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              ;Unsigned
  70+ 0000              ;If HL == DE, then Z flag is set.
  71+ 0000              ;If HL != DE, then Z flag is reset.
  72+ 0000              ;If HL <  DE, then C flag is set.
  73+ 0000              ;If HL >= DE, then C flag is reset.
  74+ 0000              ;
  75+ 0000              ;Signed
  76+ 0000              ;If HL == DE, then Z flag is set.
  77+ 0000              ;If HL != DE, then Z flag is reset.
  78+ 0000              ;If HL <  DE, then S and P/V are different.
  79+ 0000              ;If HL >= DE, then S and P/V are the same.
  80+ 0000
  81+ 0000
  82+ 0000              N0equN1byN2div256:      MACRO param1,param2,param3
  83+ 0000 ~                                    ld      a,param3                        ;
  84+ 0000 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
  85+ 0000 ~                                    ld      a,param2                        ; A = XX16 element
  86+ 0000 ~                                    ld      d,a
  87+ 0000 ~                                    mul
  88+ 0000 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
  89+ 0000 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
  90+ 0000                                      ENDM
  91+ 0000
  92+ 0000              AequN1xorN2:            MACRO  param1,param2
  93+ 0000 ~                                    ld      a,(param1)
  94+ 0000 ~                                    xor     param2
  95+ 0000                                      ENDM
  96+ 0000
  97+ 0000              SpeedMulAxis:           MACRO   speedreg, axis
  98+ 0000 ~                                    ld      e,speedreg
  99+ 0000 ~                                    ld      hl,(axis)
 100+ 0000 ~                                    ld      a,h
 101+ 0000 ~                                    ClearSignBitA
 102+ 0000 ~                                    ld      d,a
 103+ 0000 ~                                    mul     de
 104+ 0000 ~                                    ld      a,h
 105+ 0000 ~                                    SignBitOnlyA
 106+ 0000 ~                                    ld      b,a;ld      c,a
 107+ 0000 ~                                    ld      h,d;ld      e,d
 108+ 0000 ~                                    ld      c,0;ld      d,0
 109+ 0000                                      ENDM
 110+ 0000
 111+ 0000
 112+ 0000              AddSpeedToVert:         MACRO   vertex
 113+ 0000 ~                                    ld      de,(vertex+1)
 114+ 0000 ~                                    ld      a,(vertex)
 115+ 0000 ~                                    ld      l,a
 116+ 0000 ~                                    call    AddBCHtoDELsigned               ; DEL = DEL + BCH
 117+ 0000 ~                                    ld      a,l
 118+ 0000 ~                                    ld      (vertex),a
 119+ 0000 ~                                    ld      (vertex+1),de
 120+ 0000                                      ENDM
# file closed: ./Macros/MathsMacros.asm
  64  0000                                      INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectROM0:       MACRO
   2+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   3+ 0000                                   ENDM
   4+ 0000
   5+ 0000              MMUSelectROMS:       MACRO
   6+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   7+ 0000 ~                                 nextreg EXSDOSMMU1,        BankROM
   8+ 0000                                   ENDM
   9+ 0000
  10+ 0000              MMUSelectMathsTables:MACRO
  11+ 0000 ~                                 nextreg MathsTablesMMU,    BankMathsTables
  12+ 0000                                   ENDM
  13+ 0000
  14+ 0000              MMUSelectSpriteBank: MACRO
  15+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
  16+ 0000              					 ENDM
  17+ 0000
  18+ 0000              MMUSelectConsoleBank: MACRO
  19+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
  20+ 0000              					 ENDM
  21+ 0000
  22+ 0000              MMUSelectLayer1: 	 MACRO
  23+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  24+ 0000              					 ENDM
  25+ 0000
  26+ 0000              MMUSelectLayer2: 	 MACRO
  27+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  28+ 0000              					 ENDM
  29+ 0000
  30+ 0000              MMUSelectResetUniv:  MACRO
  31+ 0000 ~                                 nextreg ResetUniverseMMU, BankResetUniv
  32+ 0000                                   ENDM
  33+ 0000
  34+ 0000              MMUSelectShipARead:  MACRO
  35+ 0000 ~                                 add    a,BankUNIVDATA0
  36+ 0000 ~                                 nextreg ShipReadMMU,       a
  37+ 0000                                   ENDM
  38+ 0000
  39+ 0000              MMUSelectShipBank1:  MACRO
  40+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  41+ 0000              					 ENDM
  42+ 0000              MMUSelectShipBank2:  MACRO
  43+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  44+ 0000              					 ENDM
  45+ 0000              MMUSelectShipBank3:  MACRO
  46+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  47+ 0000              					 ENDM
  48+ 0000              MMUSelectShipBank4:  MACRO
  49+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  50+ 0000              					 ENDM
  51+ 0000
  52+ 0000              MMUSelectShipBankA   MACRO
  53+ 0000 ~            					 nextreg ShipModelMMU,	    a
  54+ 0000              					 ENDM
  55+ 0000
  56+ 0000              MMUSelectShipBankN:  MACRO value
  57+ 0000 ~            					 nextreg ShipModelMMU,	    value
  58+ 0000              					 ENDM
  59+ 0000
  60+ 0000              MMUSelectCommander:	 MACRO
  61+ 0000 ~                                 nextreg CommanderMMU,       BankCommander
  62+ 0000              					 ENDM
  63+ 0000
  64+ 0000              MMUSelectStockTable: MACRO
  65+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  66+ 0000              					 ENDM
  67+ 0000
  68+ 0000              MMUSelectCpySrcA:    MACRO
  69+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  70+ 0000              					 ENDM
  71+ 0000
  72+ 0000              MMUSelectCpySrcN:    MACRO value
  73+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  74+ 0000              					 ENDM
  75+ 0000
  76+ 0000              MMUSelectSun:        MACRO
  77+ 0000 ~                                 nextreg SunMMU,            BankSunData
  78+ 0000                                   ENDM
  79+ 0000
  80+ 0000              MMUSelectPlanet:     MACRO
  81+ 0000 ~                                 nextreg PlanetMMU,         BankPlanetData
  82+ 0000                                   ENDM
  83+ 0000
  84+ 0000              MMUSelectUniverseA:  MACRO
  85+ 0000 ~                                 add    a,BankUNIVDATA0
  86+ 0000 ~                                 nextreg UniverseMMU,       a
  87+ 0000                                   ENDM
  88+ 0000              ;Version that assumes a pre calulated A, used whn optimising many switches
  89+ 0000              MMUSelectUnivBankA:  MACRO
  90+ 0000 ~                                 nextreg UniverseMMU,       a
  91+ 0000                                   ENDM
  92+ 0000
  93+ 0000              MMUSelectUniverseN:  MACRO value
  94+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  95+ 0000                                   ENDM
  96+ 0000
  97+ 0000              MMUSelectGalaxyA:    MACRO
  98+ 0000 ~                                 nextreg GalaxyDataMMU,     a
  99+ 0000                                   ENDM
 100+ 0000
 101+ 0000              MMUSelectGalaxyN:    MACRO value
 102+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
 103+ 0000                                   ENDM
 104+ 0000              MMUSelectGalaxyACopy:MACRO
 105+ 0000 ~                                 nextreg UniverseMMU,       a
 106+ 0000                                   ENDM
 107+ 0000
 108+ 0000              MMUSelectUniverseAbs:MACRO value
 109+ 0000 ~                                 nextreg UniverseMMU,       value
 110+ 0000                                   ENDM
 111+ 0000
 112+ 0000              MMUSelectMenuGalCht: MACRO
 113+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
 114+ 0000              					 ENDM
 115+ 0000
 116+ 0000              MMUSelectMenuShrCht: MACRO
 117+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
 118+ 0000              					 ENDM
 119+ 0000
 120+ 0000              MMUSelectMenuInvent: MACRO
 121+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 122+ 0000              					 ENDM
 123+ 0000
 124+ 0000              MMUSelectMenuSystem: MACRO
 125+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 126+ 0000              					 ENDM
 127+ 0000
 128+ 0000              MMUSelectMenuMarket: MACRO
 129+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 130+ 0000              					 ENDM
 131+ 0000
 132+ 0000              MMUSelectMenuStatus: MACRO
 133+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 134+ 0000              					 ENDM
 135+ 0000
 136+ 0000              MMUSelectViewFront:  MACRO
 137+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 138+ 0000              					 ENDM
 139+ 0000
 140+ 0000              MMUSelectScreenA:    MACRO
 141+ 0000 ~                                 nextreg ScreenBankMMU,		a
 142+ 0000              					 ENDM
 143+ 0000
# file closed: ./Macros/MMUMacros.asm
  65  0000                                      INCLUDE "./Macros/NegateMacros.asm"
# file opened: ./Macros/NegateMacros.asm
   1+ 0000
   2+ 0000              NegIY:			    MACRO
   3+ 0000 ~                                xor a
   4+ 0000 ~                                sub iyl
   5+ 0000 ~                                ld iyl,a
   6+ 0000 ~                                sbc a,a
   7+ 0000 ~                                sub iyh
   8+ 0000 ~                                ld iyh,a
   9+ 0000                                  ENDM
  10+ 0000
  11+ 0000              NegHL:			    MACRO
  12+ 0000 ~                                xor a
  13+ 0000 ~                                sub l
  14+ 0000 ~                                ld l,a
  15+ 0000 ~                                sbc a,a
  16+ 0000 ~                                sub h
  17+ 0000 ~                                ld h,a
  18+ 0000                                  ENDM
  19+ 0000
  20+ 0000              NegDE:			    MACRO
  21+ 0000 ~                                xor a
  22+ 0000 ~                                sub e
  23+ 0000 ~                                ld e,a
  24+ 0000 ~                                sbc a,a
  25+ 0000 ~                                sub d
  26+ 0000 ~                                ld d,a
  27+ 0000                                  ENDM
  28+ 0000
  29+ 0000              NegBC:			    MACRO
  30+ 0000 ~                                xor a
  31+ 0000 ~                                sub c
  32+ 0000 ~                                ld c,a
  33+ 0000 ~                                sbc a,a
  34+ 0000 ~                                sub  b
  35+ 0000 ~                                ld b,a
  36+ 0000                                  ENDM
  37+ 0000
  38+ 0000              NegH                MACRO
  39+ 0000 ~                                ld      a,h
  40+ 0000 ~                                neg
  41+ 0000 ~                                ld      h,a
  42+ 0000                                  ENDM
  43+ 0000
  44+ 0000              NegD                MACRO
  45+ 0000 ~                                ld      a,d
  46+ 0000 ~                                neg
  47+ 0000 ~                                ld      d,a
  48+ 0000                                  ENDM
  49+ 0000
  50+ 0000              NegB                MACRO
  51+ 0000 ~                                ld      a,b
  52+ 0000 ~                                neg
  53+ 0000 ~                                ld      b,a
  54+ 0000                                  ENDM
  55+ 0000
# file closed: ./Macros/NegateMacros.asm
  66  0000                                      INCLUDE "./Macros/returnMacros.asm"
# file opened: ./Macros/returnMacros.asm
   1+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr
   2+ 0000 ~                                    bit 	bitnbr,reg
   3+ 0000 ~                                    ret     nz
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
   7+ 0000 ~                                    ld   a,(mem)
   8+ 0000 ~                                    bit 	bitnbr,a
   9+ 0000 ~                                    ret     nz
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  13+ 0000 ~                                    bit 	bitnbr,reg
  14+ 0000 ~                                    ret		z
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  18+ 0000 ~                                    ld     a,(mem)
  19+ 0000 ~                                    bit 	bitnbr,a
  20+ 0000 ~                                    ret		z
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              ReturnIfMemFalse:       MACRO   mem
  24+ 0000 ~                                    ld      a,(mem)
  25+ 0000 ~                                    and     a
  26+ 0000 ~                                    ret     nz
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              ReturnIfMemTrue:        MACRO   mem
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    and     a
  32+ 0000 ~                                    ret     z
  33+ 0000                                      ENDM
  34+ 0000
  35+ 0000              ReturnIfAIsZero:        MACRO
  36+ 0000 ~                                    and     a
  37+ 0000 ~                                    ret     z
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ReturnIfMemisZero:      MACRO mem
  41+ 0000 ~                                    ld   a,(mem)
  42+ 0000 ~                                    and a
  43+ 0000 ~                                    ret    z
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ReturnIfMemIsNegative:  MACRO mem
  47+ 0000 ~                                    ld      a,(mem)
  48+ 0000 ~                                    and     $80
  49+ 0000 ~                                    ret     nz
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              ReturnIfBitMaskClear    MACRO   bitmask
  53+ 0000 ~                                    and     bitmask
  54+ 0000 ~                                    ret     z
  55+ 0000                                      ENDM
  56+ 0000
  57+ 0000              ReturnIfBitMaskSet      MACRO   bitmask
  58+ 0000 ~                                    and     bitmask
  59+ 0000 ~                                    ret     nz
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              ReturnIfMemEquN:        MACRO mem, value
  63+ 0000 ~                                    ld     a,(mem)
  64+ 0000 ~                                    cp     value
  65+ 0000 ~                                    ret    nz
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              ReturnIfMemNeNusng:     MACRO mem, value
  69+ 0000 ~                                    ld   a,(mem)
  70+ 0000 ~                                    cp     value
  71+ 0000 ~                                    ret    z
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              ReturnIfRegNotZero:     MACRO reg
  75+ 0000 ~                                    ld      a, reg
  76+ 0000 ~                                    and     a
  77+ 0000 ~                                    ret     nz
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              ReturnIfANotZero:       MACRO
  81+ 0000 ~                                    and     a
  82+ 0000 ~                                    ret     nz
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ReturnIfNotZero:        MACRO
  86+ 0000 ~                                    ret     nz
  87+ 0000                                      ENDM
  88+ 0000
  89+ 0000
  90+ 0000              ReturnIfNegative:       MACRO
  91+ 0000 ~                                    ret     m
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000
  95+ 0000              ReturnIfMemNotZero:     MACRO mem
  96+ 0000 ~                                    ld     a,(mem)
  97+ 0000 ~                                    and     a
  98+ 0000 ~                                    ret    nz
  99+ 0000                                      ENDM
 100+ 0000
 101+ 0000              ReturnIfAGTEusng:       MACRO value
 102+ 0000 ~                                    cp    value
 103+ 0000 ~                                    ret	 nc
 104+ 0000                                      ENDM
 105+ 0000
 106+ 0000              ReturnIfRegLTNusng:     MACRO reg, value
 107+ 0000 ~                                    ld      a,reg
 108+ 0000 ~                                    cp      value
 109+ 0000 ~                                    ret	    c
 110+ 0000                                      ENDM
 111+ 0000
 112+ 0000              ReturnIfALTNusng:       MACRO value
 113+ 0000 ~                                    cp    value
 114+ 0000 ~                                    ret	 c
 115+ 0000                                      ENDM
 116+ 0000
 117+ 0000              ReturnIfAGTENusng:      MACRO value
 118+ 0000 ~                                    cp    value
 119+ 0000 ~                                    ret	 nc
 120+ 0000                                      ENDM
 121+ 0000
 122+ 0000              ReturnIfAGTEMemusng:    MACRO value
 123+ 0000 ~                                    ld      hl,value
 124+ 0000 ~                                    cp      (hl)
 125+ 0000 ~                                    ret	    nc
 126+ 0000                                      ENDM
 127+ 0000
 128+ 0000              ReturnIfANENusng:       MACRO value
 129+ 0000 ~                                    cp      value
 130+ 0000 ~                                    ret     nz
 131+ 0000                                      ENDM
 132+ 0000
 133+ 0000              ReturnIfAEqNusng:       MACRO value
 134+ 0000 ~                                    cp      value
 135+ 0000 ~                                    ret     z
 136+ 0000                                      ENDM
 137+ 0000
# file closed: ./Macros/returnMacros.asm
  67  0000                                      INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000
  47+ 0000              RollDELeft1:   MACRO
  48+ 0000 ~                           rl  e
  49+ 0000 ~                           rl  d
  50+ 0000                             ENDM
  51+ 0000
  52+ 0000              ShiftBCLeft1:  MACRO
  53+ 0000 ~            			   sla c
  54+ 0000 ~            			   rl  b
  55+ 0000              			   ENDM
  56+ 0000
  57+ 0000              ShiftMem16Right1:   MACRO memaddr
  58+ 0000 ~                                ld    hl,(memaddr)
  59+ 0000 ~                                srl   h
  60+ 0000 ~                                rr    l
  61+ 0000 ~                                ld    (memaddr),hl
  62+ 0000                                  ENDM
  63+ 0000
  64+ 0000              ShiftMem8Right1:    MACRO memaddr
  65+ 0000 ~                                ld      a,(memaddr)
  66+ 0000 ~                                srl     a
  67+ 0000 ~                                ld      (memaddr),a
  68+ 0000                                  ENDM
  69+ 0000
  70+ 0000
  71+ 0000              ShiftMem8Left1A:    MACRO memaddr
  72+ 0000 ~                                ld      a,(memaddr)
  73+ 0000 ~                                sla     a
  74+ 0000 ~                                ld      (memaddr),a
  75+ 0000                                  ENDM
  76+ 0000
# file closed: ./Macros/ShiftMacros.asm
  68  0000                                      INCLUDE "./Macros/signBitMacros.asm"
# file opened: ./Macros/signBitMacros.asm
   1+ 0000              SetMemBitN              MACRO mem,bitnbr
   2+ 0000 ~                                    ld      hl,mem
   3+ 0000 ~                                    set     bitnbr,(hl)
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearMemBitN            MACRO mem,bitnbr
   7+ 0000 ~                                    ld      hl,mem
   8+ 0000 ~                                    res     bitnbr,(hl)
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000
  12+ 0000              ClearSignBitMem:        MACRO mem
  13+ 0000 ~                                    ld      a,(mem)
  14+ 0000 ~                                    and     SignMask8Bit
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetSignBitMem:          MACRO   mem
  19+ 0000 ~                                    ld      a,(mem)
  20+ 0000 ~                                    or      SignOnly8Bit
  21+ 0000 ~                                    ld      (mem),a
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              FlipSignMem:            MACRO mem
  25+ 0000 ~                                    ld  a,(mem)
  26+ 0000 ~                                    xor SignOnly8Bit
  27+ 0000 ~                                    ld  (mem),a
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              SignBitOnlyMem:         MACRO mem
  31+ 0000 ~                                    ld      a, (mem)
  32+ 0000 ~                                    and     SignOnly8Bit
  33+ 0000 ~                                    ld      (mem),a
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ClearSignBit:           MACRO reg
  37+ 0000 ~                                    ld      a,reg
  38+ 0000 ~                                    and     SignMask8Bit
  39+ 0000 ~                                    ld      reg,a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              SetSignBit:             MACRO   reg
  43+ 0000 ~                                    ld      a,reg
  44+ 0000 ~                                    or      SignOnly8Bit
  45+ 0000 ~                                    ld      reg,a
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              FlipSignBit:            MACRO   reg
  49+ 0000 ~                                    ld      a, reg
  50+ 0000 ~                                    xor     SignOnly8Bit
  51+ 0000 ~                                    ld      reg,a
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              SignBitOnly:            MACRO   reg
  55+ 0000 ~                                    ld      a, reg
  56+ 0000 ~                                    and     SignOnly8Bit
  57+ 0000 ~                                    ld      reg,a
  58+ 0000                                      ENDM
  59+ 0000
  60+ 0000              ClearSignBitA:          MACRO
  61+ 0000 ~                                    and     SignMask8Bit
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              SetSignBitA:            MACRO
  65+ 0000 ~                                    or      SignOnly8Bit
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              FlipSignBitA:           MACRO
  69+ 0000 ~                                    xor     SignOnly8Bit
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              SignBitOnlyA:           MACRO
  73+ 0000 ~                                    and     SignOnly8Bit
  74+ 0000                                      ENDM
# file closed: ./Macros/signBitMacros.asm
  69  0000                                      INCLUDE "./Tables/message_queue_macros.asm"
# file opened: ./Tables/message_queue_macros.asm
   1+ 0000
   2+ 0000              AnyMessagesMacro:       MACRO   NoMessageTarget
   3+ 0000 ~                                    ld      a, (MessageCount)
   4+ 0000 ~                                    and     a
   5+ 0000 ~                                    jr      z, NoMessageTarget
   6+ 0000                                      ENDM
   7+ 0000
   8+ 0000              AnyHyperSpaceMacro:     MACRO   NoMessageText
   9+ 0000 ~                                    ld      hl,(InnerHyperCount)
  10+ 0000 ~                                    ld      a,h
  11+ 0000 ~                                    or      l
  12+ 0000 ~                                    jr      z, NoMessageText
  13+ 0000                                      ENDM
  14+ 0000
# file closed: ./Tables/message_queue_macros.asm
  70  0000                                      INCLUDE "./Variables/general_variables_macros.asm"
# file opened: ./Variables/general_variables_macros.asm
   1+ 0000              ; limited to 255 character length
   2+ 0000              CountLengthHL:          MACRO   Limiter
   3+ 0000 ~                                    ld      de,hl
   4+ 0000 ~                                    ld      bc,Limiter
   5+ 0000 ~                                    xor     a
   6+ 0000 ~                                    cpir
   7+ 0000 ~                                    ClearCarryFlag
   8+ 0000 ~                                    sbc     hl,de
   9+ 0000 ~                                    ld      a,l
  10+ 0000 ~                                    ret
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              IncMemMaxN:             MACRO   mem, maxvalue
  14+ 0000 ~                                    ld      a,(mem)
  15+ 0000 ~                                    cp      maxvalue
  16+ 0000 ~                                    jr      c,.IncMaxed
  17+ 0000 ~                                    inc     a
  18+ 0000 ~                                    ld      (mem),a
  19+ 0000 ~            .IncMaxed:
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              IncMemMaxNCycle:        MACRO   mem, cyclevalue
  23+ 0000 ~                                    ld      a,(mem)
  24+ 0000 ~                                    inc     a
  25+ 0000 ~                                    cp      cyclevalue
  26+ 0000 ~                                    jr      c,.IncMaxed
  27+ 0000 ~                                    xor     a
  28+ 0000 ~            .IncMaxed:              ld      (mem),a
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000
  32+ 0000              HalfLengthHL:           MACRO
  33+ 0000 ~                                    ld      b,0
  34+ 0000 ~            .CountLenLoop:          ld      a,(hl)
  35+ 0000 ~                                    cp      0
  36+ 0000 ~                                    jr      z,.DoneCount
  37+ 0000 ~                                    inc     b
  38+ 0000 ~                                    inc     hl
  39+ 0000 ~                                    jr      .CountLenLoop
  40+ 0000 ~            .DoneCount:             ld      a,32
  41+ 0000 ~                                    sub     b
  42+ 0000 ~                                    sra     a
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              MakeInnocentMacro:		MACRO
  46+ 0000 ~            						xor		a
  47+ 0000 ~            						ld		(FugitiveInnocentStatus),a
  48+ 0000              						ENDM
  49+ 0000
  50+ 0000              NoEscapePodMacro:		MACRO
  51+ 0000 ~            						xor		a
  52+ 0000 ~            						ld		(EscapePod),a
  53+ 0000              						ENDM
  54+ 0000
  55+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  56+ 0000              MaxFuelMacro:			MACRO
  57+ 0000 ~            						ld		a,MaxFuelLevel
  58+ 0000 ~            						ld		(Fuel),a
  59+ 0000              						ENDM
  60+ 0000
  61+ 0000              MaxThrottle:            MACRO
  62+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  63+ 0000 ~                                    ld      (DELTA),a
  64+ 0000 ~                                    ld      d,a
  65+ 0000 ~                                    ld      e,4
  66+ 0000 ~                                    mul
  67+ 0000 ~                                    ld      (DELT4Lo),de
  68+ 0000                                      ENDM
  69+ 0000
  70+ 0000              ZeroThrottle:           MACRO
  71+ 0000 ~                                    xor     a
  72+ 0000 ~                                    ld      (DELTA),a
  73+ 0000 ~                                    ld      (DELT4Lo),a
  74+ 0000 ~                                    ld      (DELT4Lo+1),a
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              ZeroPitch:              MACRO
  78+ 0000 ~                                    xor     a
  79+ 0000 ~                                    ld      (BET2),a
  80+ 0000 ~                                    ld      (BET2FLIP),a
  81+ 0000 ~                                    ld      (JSTY),a
  82+ 0000 ~                                    ld      (BETA),a
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ZeroRoll:               MACRO
  86+ 0000 ~                                    xor     a                              ; zero roll and climb
  87+ 0000 ~                                    ld      (ALP2),a
  88+ 0000 ~                                    ld      (ALP2FLIP),a
  89+ 0000 ~                                    ld      (JSTX),a
  90+ 0000 ~                                    ld      (ALPHA),a
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              CorrectPostJumpFuel:    MACRO
  94+ 0000 ~                                    ld      a,(Fuel)
  95+ 0000 ~                                    ld      hl,Distance
  96+ 0000 ~                                    sub     a,(hl)
  97+ 0000 ~                                    ld      (Fuel),a
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              AnyMissilesLeft:        MACRO
 101+ 0000 ~                                    ld      a,(NbrMissiles)
 102+ 0000 ~                                    and     a
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              SetMissileTargetA:      MACRO
 106+ 0000 ~                                    ld      (MissileTargettingFlag),a   ; Set to slot number clearing bit 7
 107+ 0000                                      ENDM
 108+ 0000
 109+ 0000              IsMissileLaunchFlagged: MACRO
 110+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 111+ 0000 ~                                    and     $80
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              SetMissileTargetting:   MACRO
 115+ 0000 ~                                    ld      a,StageMissileTargeting
 116+ 0000 ~                                    ld      (MissileTargettingFlag),a
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              ClearMissileTargetting: MACRO
 120+ 0000 ~                                    ld      a,StageMissileNotTargeting
 121+ 0000 ~                                    ld      (MissileTargettingFlag),a
 122+ 0000                                      ENDM
 123+ 0000
 124+ 0000
 125+ 0000              ; Clear targetting bits which signals launch if lower nibble has selected target
 126+ 0000              SetMissileLaunch:       MACRO
 127+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 128+ 0000 ~                                    and     $0F
 129+ 0000 ~                                    ld      (MissileTargettingFlag),a
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              LockMissileToA:         MACRO
 133+ 0000 ~                                    or      $80
 134+ 0000 ~                                    ld      (MissileTargettingFlag),a
 135+ 0000                                      ENDM
 136+ 0000
 137+ 0000              ClearECM:               MACRO
 138+ 0000 ~                                    xor     a
 139+ 0000 ~                                    ld      (ECMCountDown),a
 140+ 0000                                      ENDM
 141+ 0000
 142+ 0000
 143+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 144+ 0000              ;                                    if hit is set then hostile hence z is not set
 145+ 0000              IsShipHostile:          MACRO
 146+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 147+ 0000 ~                                    and     ShipIsHostile
 148+ 0000                                      ENDM
 149+ 0000
 150+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 151+ 0000              ;                                    if hit is set then hostile hence z is not set
 152+ 0000              IsShipFriendly:         MACRO
 153+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 154+ 0000 ~                                    and     ShipNotHostile                  ; mask so we only have hostile bit
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              ; Will check to see if bit 5 is set, if clear, then not exploding z clear
 158+ 0000              ;                                    if set    then exploding     z set
 159+ 0000              IsShipExploding:        MACRO
 160+ 0000 ~                                    ld      a,(UBnkaiatkecm)
 161+ 0000 ~                                    and     ShipExploding
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              UpdateLaserOnCounter:   MACRO
 165+ 0000 ~                                    ld      a,(CurrLaserPulseOnCount)
 166+ 0000 ~                                    and     a
 167+ 0000 ~                                    jr      z,.LaserOnIsDone
 168+ 0000 ~                                    dec     a
 169+ 0000 ~                                    ld      (CurrLaserPulseOnCount),a
 170+ 0000 ~                                    jr      z,.LaserOnIsDone
 171+ 0000 ~                                    ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
 172+ 0000 ~            .LaserOnIsDone:
 173+ 0000                                      ENDM
 174+ 0000
 175+ 0000              UpdateLaserOffCounter:  MACRO
 176+ 0000 ~                                    ld      a,(CurrLaserPulseOffTime)
 177+ 0000 ~                                    and     a
 178+ 0000 ~                                    jr      z,.LaserOffIsDone
 179+ 0000 ~                                    dec     a
 180+ 0000 ~                                    ld      (CurrLaserPulseOffTime),a
 181+ 0000 ~                                    jr      z,.LaserOffIsDone
 182+ 0000 ~                                    ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
 183+ 0000 ~            .LaserOffIsDone:
 184+ 0000                                      ENDM
 185+ 0000
 186+ 0000              UpdateLaserRestCounter: MACRO
 187+ 0000 ~                                    ld      a,(CurrLaserPulseRestCount)
 188+ 0000 ~                                    and     a
 189+ 0000 ~                                    jr      z,.LaserRestIsDone
 190+ 0000 ~                                    dec     a
 191+ 0000 ~                                    ld      (CurrLaserPulseRestCount),a
 192+ 0000 ~                                    jr      z,.LaserRestIsDone
 193+ 0000 ~                                    ZeroA                                                                           ;    then pulse rate count = 0
 194+ 0000 ~                                    ld      (CurrLaserPulseRateCount),a                                             ;    .
 195+ 0000 ~            .LaserRestIsDone
 196+ 0000                                      ENDM
 197+ 0000
 198+ 0000              ChargeEnergyAndShields: MACRO
 199+ 0000 ~                                    ld      a,$FF
 200+ 0000 ~                                    ld      (PlayerEnergy),a
 201+ 0000 ~                                    ld      (ForeShield),a
 202+ 0000 ~                                    ld      (AftShield),a
 203+ 0000                                      ENDM
 204+ 0000
 205+ 0000              CopyPresentSystemToTarget: MACRO
 206+ 0000 ~                                    ld      hl,(PresentSystemX)
 207+ 0000 ~                                    ld      (TargetSystemX),hl
 208+ 0000                                      ENDM
 209+ 0000
 210+ 0000              CopyTargetSystemToPresent: MACRO
 211+ 0000 ~                                    ld      hl,(TargetSystemX)
 212+ 0000 ~                                    ld      (PresentSystemX),hl
 213+ 0000                                      ENDM
 214+ 0000
 215+ 0000              HalveFugitiveStatus:    MACRO
 216+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
 217+ 0000 ~                                    srl     (hl)
 218+ 0000                                      ENDM
 219+ 0000
 220+ 0000              ClearForceTransition    MACRO
 221+ 0000 ~                                    ld      a,$FF
 222+ 0000 ~                                    ld      (ScreenTransitionForced),a
 223+ 0000                                      ENDM
 224+ 0000
 225+ 0000              ForceTransition:        MACRO newScreen
 226+ 0000 ~                                    ld      a,newScreen
 227+ 0000 ~                                    ld      (ScreenTransitionForced), a
 228+ 0000                                      ENDM
 229+ 0000
 230+ 0000              IsSpaceStationPresent:  MACRO
 231+ 0000 ~                                    ld      a,(SpaceStationSafeZone)
 232+ 0000 ~                                    and     a
 233+ 0000                                      ENDM
 234+ 0000
 235+ 0000              SetSafeZone:            MACRO
 236+ 0000 ~                                    xor     a
 237+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 238+ 0000                                      ENDM
 239+ 0000
 240+ 0000              ClearSafeZone:          MACRO
 241+ 0000 ~                                    ld      a,$FF
 242+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 243+ 0000                                      ENDM
 244+ 0000
 245+ 0000              ClearTemperatures:      MACRO
 246+ 0000 ~                                    xor     a
 247+ 0000 ~                                    ld      (CabinTemperature),a
 248+ 0000 ~                                    ld      (GunTemperature),a
 249+ 0000                                      ENDM
 250+ 0000
 251+ 0000              CoolCabin:              MACRO
 252+ 0000 ~                                    ld      a,(CabinTemperature)
 253+ 0000 ~                                    and     a
 254+ 0000 ~                                    jr      z,.AlreadyCool
 255+ 0000 ~                                    dec     a
 256+ 0000 ~                                    ld      (CabinTemperature),a
 257+ 0000 ~            .AlreadyCool:
 258+ 0000                                      ENDM
 259+ 0000
 260+ 0000              CoolLasers:             MACRO
 261+ 0000 ~                                    ld      a,(GunTemperature)
 262+ 0000 ~                                    and     a
 263+ 0000 ~                                    jr      z,.AlreadyCool
 264+ 0000 ~                                    dec     a
 265+ 0000 ~                                    ld      (GunTemperature),a
 266+ 0000 ~            .AlreadyCool:
 267+ 0000                                      ENDM
 268+ 0000
 269+ 0000              ; type 255 is "not fitted"
 270+ 0000
 271+ 0000
 272+ 0000              InitEventCounter:       MACRO
 273+ 0000 ~                                    xor     a
 274+ 0000 ~                                    ld      (EventCounter),a
 275+ 0000                                      ENDM
 276+ 0000
 277+ 0000              ClearMissJump:          MACRO
 278+ 0000 ~                                    ld      a,$FF
 279+ 0000 ~                                    ld      (MissJumpFlag),a
 280+ 0000                                      ENDM
 281+ 0000
 282+ 0000
 283+ 0000              DrainSystem:            MACRO   SystemMem, DrainMem
 284+ 0000 ~                                    ld      a,(DrainMem)
 285+ 0000 ~                                    ld      b,a
 286+ 0000 ~                                    ld      a,(SystemMem)
 287+ 0000 ~                                    sub     a,b
 288+ 0000 ~                                    ld      (SystemMem),a
 289+ 0000 ~                                    jr      c,.ZeroSystem
 290+ 0000 ~                                    jp      .ExitPoint
 291+ 0000 ~            .ZeroSystem:            ZeroA
 292+ 0000 ~                                    ld      (SystemMem),a
 293+ 0000 ~            .ExitPoint
 294+ 0000                                      ENDM
 295+ 0000
 296+ 0000              BoostSystem:            MACRO   SystemMem, BoostMem
 297+ 0000 ~                                    ld      a,(BoostMem)
 298+ 0000 ~                                    ld      b,a
 299+ 0000 ~                                    ld      a,(SystemMem)
 300+ 0000 ~                                    add     b
 301+ 0000 ~                                    ld      (SystemMem),a
 302+ 0000 ~                                    jr      c, .MaxSystem
 303+ 0000 ~                                    jp      .ExitPoint
 304+ 0000 ~            .MaxSystem:             ld      a,255
 305+ 0000 ~                                    ld      (SystemMem),a
 306+ 0000 ~            .ExitPoint
 307+ 0000                                      ENDM
 308+ 0000
# file closed: ./Variables/general_variables_macros.asm
  71  0000                                      INCLUDE "./Variables/UniverseSlot_macros.asm"
# file opened: ./Variables/UniverseSlot_macros.asm
   1+ 0000
   2+ 0000              AddJunkCount:           MACRO
   3+ 0000 ~                                    ld      hl,JunkCount
   4+ 0000 ~                                    inc     (hl)
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SubJunkCount:           MACRO
   8+ 0000 ~                                    ld      hl,JunkCount
   9+ 0000 ~                                    dec     (hl)
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              AddCop:                 MACRO
  13+ 0000 ~                                    ld      hl,CopCount
  14+ 0000 ~                                    inc     (hl)
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              SubCop:                 MACRO
  18+ 0000 ~                                    ld      hl,CopCount
  19+ 0000 ~                                    dec     (hl)
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              AddPirateCount:         MACRO
  23+ 0000 ~                                    ld      hl,PirateCount
  24+ 0000 ~                                    inc     (hl)
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              SubPirateCount:         MACRO
  28+ 0000 ~                                    ld      hl,PirateCount
  29+ 0000 ~                                    inc     (hl)
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              AreCopsPresent:         MACRO
  33+ 0000 ~                                    ld      a,(CopCount)
  34+ 0000 ~                                    and     a
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              ; Class == shiptype
  38+ 0000              SetSlotAToUnivClass:    MACRO
  39+ 0000 ~                                    ex      af,af'
  40+ 0000 ~                                    ld      a,(ShipTypeAddr)
  41+ 0000 ~                                    ld      b,a
  42+ 0000 ~                                    ex      af,af'
  43+ 0000 ~                                    call    SetSlotAToClassB
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              TestRoomForJunk:        MACRO   Target
  47+ 0000 ~                                    ld      a,3
  48+ 0000 ~                                    JumpIfALTMemusng    JunkCount, Target
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              JumpIfSpaceStation:     MACRO   Target
  52+ 0000 ~                                    ld      hl,UniverseSlotType
  53+ 0000 ~                                    ld      a,(hl)
  54+ 0000 ~                                    cp      ShipTypeStation
  55+ 0000                                      ENDM
  56+ 0000
  57+ 0000              ClearSlotMem:           MACRO   mem
  58+ 0000 ~                                    ld      a,(mem)
  59+ 0000 ~                                    call    ClearSlotA
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              IsSlotEmpty:            MACRO
  63+ 0000 ~                                    ld      hl,UniverseSlotList
  64+ 0000 ~                                    add     hl,a
  65+ 0000 ~                                    ld      a,(hl)
  66+ 0000 ~                                    cp      0
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              IsSlotMissile:          MACRO
  70+ 0000 ~                                    ld      hl,UniverseSlotType
  71+ 0000 ~                                    add     hl,a
  72+ 0000 ~                                    ld      a,(hl)
  73+ 0000 ~                                    cp      ShipTypeMissile
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000
  77+ 0000              ; Checks if slot is empty else A = ship type
  78+ 0000              ReturnIfSlotAEmpty:     MACRO
  79+ 0000 ~                                    ld      hl,UniverseSlotList
  80+ 0000 ~                                    add     hl,a
  81+ 0000 ~                                    ld      a,(hl)
  82+ 0000 ~                                    inc     a
  83+ 0000 ~                                    ret     z           ; if slot was ff inc would make it 0
  84+ 0000 ~                                    dec     a           ; get original value back for later
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000              JumpIfSlotAEmpty:       MACRO   Target
  88+ 0000 ~                                    ld      hl,UniverseSlotList
  89+ 0000 ~                                    add     hl,a
  90+ 0000 ~                                    ld      a,(hl)
  91+ 0000 ~                                    inc     a
  92+ 0000 ~                                    jp      z,Target    ; if slot was ff inc would make it 0
  93+ 0000 ~                                    dec     a           ; get original value back for later
  94+ 0000                                      ENDM
  95+ 0000
  96+ 0000              JumpIfSlotHLEmpty:      MACRO   Target
  97+ 0000 ~                                    ld      a,(hl)
  98+ 0000 ~                                    and     a
  99+ 0000 ~                                    jr      nz,Target
 100+ 0000                                      ENDM
# file closed: ./Variables/UniverseSlot_macros.asm
  72  0000
  73  0000                                      INCLUDE "./Data/ShipIdEquates.asm"
# file opened: ./Data/ShipIdEquates.asm
   1+ 0000
   2+ 0000
   3+ 0000
   4+ 0000              ShipID_Adder            EQU 00
   5+ 0000              ShipID_Anaconda         EQU 01
   6+ 0000              ShipID_Asp_Mk_2         EQU 02
   7+ 0000              ShipID_Boa              EQU 03
   8+ 0000              ShipID_CargoType5       EQU 04
   9+ 0000              ShipID_Boulder          EQU 05
  10+ 0000              ShipID_Asteroid         EQU 06
  11+ 0000              ShipID_Bushmaster       EQU 07
  12+ 0000              ShipID_Chameleon        EQU 08
  13+ 0000              ShipID_CobraMk3         EQU 09
  14+ 0000              ShipID_Cobra_Mk_1       EQU 10
  15+ 0000              ShipID_Cobra_Mk_3_P     EQU 11
  16+ 0000              ShipID_Constrictor      EQU 12
  17+ 0000              ShipID_Coriolis         EQU 13
  18+ 0000              ShipID_Cougar           EQU 14
  19+ 0000              ShipID_Dodo             EQU 15
  20+ 0000              ShipID_Dragon           EQU 16
  21+ 0000              ShipID_Escape_Pod       EQU 17
  22+ 0000              ShipID_Fer_De_Lance     EQU 18
  23+ 0000              ShipID_Gecko            EQU 19
  24+ 0000              ShipID_Ghavial          EQU 20
  25+ 0000              ShipID_Iguana           EQU 21
  26+ 0000              ShipID_Krait            EQU 22
  27+ 0000              ShipID_Logo             EQU 23
  28+ 0000              ShipID_Mamba            EQU 24
  29+ 0000              ShipID_Missile          EQU 25
  30+ 0000              ShipID_Monitor          EQU 26
  31+ 0000              ShipID_Moray            EQU 27
  32+ 0000              ShipID_Ophidian         EQU 28
  33+ 0000              ShipID_Plate            EQU 29
  34+ 0000              ShipID_Python           EQU 30
  35+ 0000              ShipID_Python_P         EQU 31
  36+ 0000              ShipID_Rock_Hermit      EQU 32
  37+ 0000              ShipID_ShuttleType9     EQU 33
  38+ 0000              ShipID_Shuttle_Mk_2     EQU 34
  39+ 0000              ShipID_Sidewinder       EQU 35
  40+ 0000              ShipID_Splinter         EQU 36
  41+ 0000              ShipID_TestVector       EQU 37
  42+ 0000              ShipID_Thargoid         EQU 38
  43+ 0000              ShipID_Thargon          EQU 39
  44+ 0000              ShipID_TransportType10  EQU 40
  45+ 0000              ShipID_Viper            EQU 41
  46+ 0000              ShipID_Worm             EQU 42
  47+ 0000              ShipID_Rattler          EQU 43
  48+ 0000
# file closed: ./Data/ShipIdEquates.asm
  74  0000
  75  0000
  76  0000
  77  0000              UpdateLaserCountersold: MACRO
  78  0000 ~                                    JumpIfMemZero CurrLaserPulseOnCount,   .SkipPulseOn     ; if beam on count > 0 then beam on count --
  79  0000 ~                                    dec     a                                               ; .
  80  0000 ~                                    ld      (CurrLaserPulseOnCount),a                       ; .
  81  0000 ~            .SkipPulseOn:           JumpIfAIsNotZero  .SkipRestCounter                      ;    if beam on = 0 then
  82  0000 ~                                    ld      a,(CurrLaserPulseOffCount)                      ;       if beam off > 0 then  beam off --
  83  0000 ~                                    JumpIfMemZero CurrLaserPulseOffCount, .SkipPulseOff     ;       .
  84  0000 ~                                    dec     a                                               ;       .
  85  0000 ~                                    ld      (CurrLaserPulseOffCount),a                      ;       .
  86  0000 ~            .SkipPulseOff:          JumpIfAIsNotZero  .SkipRestCounter                      ;       if beam off = 0
  87  0000 ~                                    JumpIfMemZero CurrLaserPulseRestCount, .ZeroRateCounter ;
  88  0000 ~                                    dec     a
  89  0000 ~                                    ld      (CurrLaserPulseRestCount),a
  90  0000 ~                                    jr      nz,.SkipRestCounter
  91  0000 ~            .ZeroRateCounter:       ld      (CurrLaserPulseRateCount),a
  92  0000 ~            .SkipRestCounter:
  93  0000                                      ENDM
  94  0000
  95  0000              MessageAt:              MACRO   x,y,message
  96  0000 ~                                    MMUSelectLayer1
  97  0000 ~                                    ld      d,y
  98  0000 ~                                    ld      e,x
  99  0000 ~                                    ld      hl,message
 100  0000 ~                                    call    l1_print_at_wrap
 101  0000                                      ENDM
 102  0000
 103  0000              SetBorder:              MACRO   value
 104  0000 ~                                    MMUSelectLayer1
 105  0000 ~                                    ld          a,value
 106  0000 ~                                    call        l1_set_border
 107  0000                                      ENDM
 108  0000
 109  0000              charactersetaddr		equ 15360
 110  0000              STEPDEBUG               equ 1
 111  0000
 112  0000              TopOfStack              equ $6100
 113  0000
 114  0000                                      ORG         $6200
 115  6200 F3           EliteNextStartup:       di
 116  6201 CD 75 AD     .InitiliseFileIO:       call        GetDefaultDrive
 117  6204              .InitialiseLayerOrder:
 118  6204                                      DISPLAY "Starting Assembly At ", EliteNextStartup
 119  6204                                      ; "STARTUP"
 120  6204                                      ; Make sure  rom is in page 0 during load
 121  6204                                      MMUSelectSpriteBank
 121  6204 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 122  6208 CD 94 E5                             call		init_sprites
 123  620B                                      MMUSelectLayer2
 123  620B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 124  620F CD 0E E0                             call        asm_disable_l2_readwrite
 125  6212                                      MMUSelectROMS
 125  6212 ED 91 50 FF >                     nextreg EXSDOSMMU0,        BankROM
 125  6216 ED 91 51 FF >                     nextreg EXSDOSMMU1,        BankROM
 126  621A              .GenerateDefaultCmdr:   MMUSelectCommander
 126  621A ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 127  621E CD 4A E2                             call		defaultCommander
 128  6221 CD 18 E2                             call        saveCommander
 129  6224                                      MMUSelectLayer1
 129  6224 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 130  6228 CD 80 E0                             call		l1_cls
 131  622B 3E 07                                ld			a,7
 132  622D CD 9B E0                             call		l1_attr_cls_to_a
 133  6230                                      SetBorder   $FF
 133  6230             >                        MMUSelectLayer1
 133  6230 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 133  6234 3E FF       >                        ld          a,$FF
 133  6236 CD A5 E0    >                        call        l1_set_border
 134  6239              .InitialiseL2:          MMUSelectLayer2
 134  6239 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 135  623D CD 06 E1                             call 		l2_initialise
 136  6240 CD FF E0                             call		l2_cls
 137  6243              .InitialisingMessage:   MessageAt   0,0,InitialiseMessage
 137  6243             >                        MMUSelectLayer1
 137  6243 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 137  6247 16 00       >                        ld      d,0
 137  6249 1E 00       >                        ld      e,0
 137  624B 21 58 69    >                        ld      hl,InitialiseMessage
 137  624E CD 15 E1    >                        call    l1_print_at_wrap
 138  6251                                      SetBorder   $01
 138  6251             >                        MMUSelectLayer1
 138  6251 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 138  6255 3E 01       >                        ld          a,$01
 138  6257 CD A5 E0    >                        call        l1_set_border
 139  625A                                      MessageAt   0,8,LoadingSpritesMessage
 139  625A             >                        MMUSelectLayer1
 139  625A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139  625E 16 08       >                        ld      d,8
 139  6260 1E 00       >                        ld      e,0
 139  6262 21 64 69    >                        ld      hl,LoadingSpritesMessage
 139  6265 CD 15 E1    >                        call    l1_print_at_wrap
 140  6268                                      ZeroA
 140  6268 AF          >                        xor a
 141  6269 32 88 69                             ld          (LoadCounter),a
 142  626C              .StreamSpriteData:      MMUSelectSpriteBank
 142  626C ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 143  6270 CD 20 E6                             call        load_pattern_files; load_sprite_patterns
 144  6273              ;                        call        stream_open_sprite_file
 145  6273              ;                        ld          e,0
 146  6273              ;                        ld          d,29
 147  6273              ;.LoadLoop:              push        de
 148  6273              ;                        push        af
 149  6273              ;                        SetBorder   $02
 150  6273              ;                        ld          a,e
 151  6273              ;                        MMUSelectSpriteBank
 152  6273              ;                        call        stream_select_sprite_a
 153  6273              ;                        pop         af
 154  6273              ;                        MMUSelectSpriteBank
 155  6273              ;                        call        stream_load_sprite
 156  6273              ;                        pop         de
 157  6273              ;                        inc         e
 158  6273              ;                        dec         d
 159  6273              ;                        push        af,,de,,hl,,ix,,iy
 160  6273              ;                        ld          a,(LoadCounter)
 161  6273              ;                        ld          d,16
 162  6273              ;                        ld          e,a
 163  6273              ;                        add         8
 164  6273              ;                        ld          (LoadCounter),a
 165  6273              ;                        ld          hl,SpriteProgress
 166  6273              ;                        MMUSelectLayer1
 167  6273              ;                        call        l1_print_at_wrap
 168  6273              ;                        SetBorder   $03
 169  6273              ;                        pop         af,,de,,hl,,ix,,iy
 170  6273              ;                        jr          nz,.LoadLoop
 171  6273              ;                        SetBorder   $04
 172  6273              ;                        MMUSelectSpriteBank
 173  6273              ;                        call        stream_close_spr_file_a
 174  6273 CD 2C 80                             call        init_keyboard
 175  6276              .PostDiag:                          ClearForceTransition
 175  6276 3E FF       >                        ld      a,$FF
 175  6278 32 40 6C    >                        ld      (ScreenTransitionForced),a
 176  627B                                      SetBorder   $04
 176  627B             >                        MMUSelectLayer1
 176  627B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 176  627F 3E 04       >                        ld          a,$04
 176  6281 CD A5 E0    >                        call        l1_set_border
 177  6284                                      MMUSelectSpriteBank
 177  6284 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 178  6288 CD AF E5                             call        sprite_diagnostic
 179  628B                                      SetBorder   $05
 179  628B             >                        MMUSelectLayer1
 179  628B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 179  628F 3E 05       >                        ld          a,$05
 179  6291 CD A5 E0    >                        call        l1_set_border
 180  6294 CD E8 80     .PostDiag2:             call        WaitForAnyKey
 181  6297                                      MMUSelectSpriteBank
 181  6297 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 182  629B CD 9F E5                             call        sprite_diagnostic_clear
 183  629E 3E 10        TidyDEBUG:              ld          a,16
 184  62A0 32 FC 6A                             ld          (TidyCounter),a
 185  62A3 AF           TestText:               xor			a
 186  62A4 32 B0 82                             ld      (JSTX),a
 187  62A7              DEBUGCODE:              ClearSafeZone ; just set in open space so compas treacks su n
 187  62A7 3E FF       >                        ld      a,$FF
 187  62A9 32 8D 84    >                        ld      (SpaceStationSafeZone),a
 188  62AC                                      SetBorder   $06
 188  62AC             >                        MMUSelectLayer1
 188  62AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 188  62B0 3E 06       >                        ld          a,$06
 188  62B2 CD A5 E0    >                        call        l1_set_border
 189  62B5
 190  62B5
 191  62B5              .ClearLayer2Buffers:    DoubleBufferIfPossible
 191  62B5             >                        IFDEF DOUBLEBUFFER
 191  62B5             >                            MMUSelectLayer2
 191  62B5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 191  62B9 CD FF E0    >                            call  l2_cls
 191  62BC CD 13 E1    >                            call  l2_flip_buffers
 191  62BF             >                        ENDIF
 192  62BF                                      DoubleBufferIfPossible
 192  62BF             >                        IFDEF DOUBLEBUFFER
 192  62BF             >                            MMUSelectLayer2
 192  62BF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 192  62C3 CD FF E0    >                            call  l2_cls
 192  62C6 CD 13 E1    >                            call  l2_flip_buffers
 192  62C9             >                        ENDIF
 193  62C9              ; Set up all 8 galaxies, 7later this will be pre built and loaded into memory from files
 194  62C9                                      SetBorder   $07
 194  62C9             >                        MMUSelectLayer1
 194  62C9 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 194  62CD 3E 07       >                        ld          a,$07
 194  62CF CD A5 E0    >                        call        l1_set_border
 195  62D2              InitialiseGalaxies:     MessageAt   0,24,InitialisingGalaxies
 195  62D2             >                        MMUSelectLayer1
 195  62D2 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 195  62D6 16 18       >                        ld      d,24
 195  62D8 1E 00       >                        ld      e,0
 195  62DA 21 73 69    >                        ld      hl,InitialisingGalaxies
 195  62DD CD 15 E1    >                        call    l1_print_at_wrap
 196  62E0 CD 41 6C                             call		ResetUniv                       ; Reset ship data
 197  62E3 CD 69 6C                             call        ResetGalaxy                     ; Reset each galaxy copying in code
 198  62E6 CD 92 6C                             call        SeedAllGalaxies
 199  62E9                                      MMUSelectSpriteBank
 199  62E9 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 200  62ED CD 8A E5                             call        sprite_cls_all
 201  62F0                                      MMUSelectLayer1
 201  62F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 202  62F4 CD 80 E0                             call		l1_cls
 203  62F7                                      SetBorder   $00
 203  62F7             >                        MMUSelectLayer1
 203  62F7 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203  62FB 3E 00       >                        ld          a,$00
 203  62FD CD A5 E0    >                        call        l1_set_border
 204  6300                                      IFDEF SKIPATTRACT
 205  6300 C3 0A 63                                 jp DefaultCommander
 206  6303                                      ENDIF
 207  6303 CD E6 79     StartAttractMode:       call        AttractMode
 208  6306                                      JumpIfAIsZero  SkipDefaultCommander
 208  6306 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 208  6307 CA 14 63    >                        jp	    z, SkipDefaultCommander
 209  630A              DefaultCommander:       MMUSelectCommander
 209  630A ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 210  630E CD 4A E2                             call		defaultCommander
 211  6311 C3 14 63                             jp          InitialiseMainLoop
 211  6314
 212  6314              SkipDefaultCommander:
 213  6314              ;                        call    FindNextFreeSlotInA
 214  6314              ;                        ld      b,a
 215  6314              ;                        ld      a,13 ;Coriolis station
 216  6314              ;                        call    InitialiseShipAUnivB
 217  6314              ;                        xor     a
 218  6314 CD D6 87     InitialiseMainLoop:     call    InitMainLoop
 219  6317              ;..MAIN GAME LOOP..................................................................................................................
 220  6317              ; MACRO BLOCKS.....................................................................................................................
 221  6317              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 222  6317
 223  6317
 224  6317
 225  6317              ; if beam on count > 0
 226  6317              ;    then beam on count --
 227  6317              ;         if beam on count = 0
 228  6317              ;            then beam off count = beam off
 229  6317              ; if beam off > 0
 230  6317              ;    then beam off --
 231  6317              ;         if beam off = 0 and pulse rate count = max count
 232  6317              ;            then pulse rest count = pulse rest
 233  6317              ; if pulse rest > 0 then pulse rest --
 234  6317              ;    if pulse rest = 0
 235  6317              ;       then pulse rate count = 0
 236  6317
 237  6317
 238  6317              ; counter logic
 239  6317              ;    if beam on count > 0 then beam on count --
 240  6317              ;    if beam on = 0 then
 241  6317              ;       if beam off count >0 then beam off count --
 242  6317              ;       if beam off count = 0 them
 243  6317              ;          if pulse rest count > 0 then pulse rest count --
 244  6317              ;             if reset count = 0 then pulse rate count = 0
 245  6317              ; shoting logic
 246  6317              ;    if pulse on count is 0 and pulse off count is 0 and rest count is 0
 247  6317              ;       then  if fire pressed is OK
 248  6317              ;                if not beam type
 249  6317              ;                   then pulse rate count ++
 250  6317              ;                        if pulse rate count < pulse max count
 251  6317              ;                           then pulse on count = pulse on time
 252  6317              ;                                pulse off count = pulse off time
 253  6317              ;                                pulse rest count = pulse rest time
 254  6317              ;                           else pulse rest count = pulse rest time
 255  6317              ;                                pulse rate count, pulse on count, pulse off count = 0
 256  6317              ;                   else pulse on count = $FF
 257  6317              ;                        pulse off time , rest time = 0
 258  6317
 259  6317              ;..................................................................................................................................
 260  6317                                      INCLUDE "./GameEngine/MainLoop.asm"
# file opened: ./GameEngine/MainLoop.asm
   1+ 6317                  DEFINE  MAINLOOP_UPDATE_LASERS
   2+ 6317                  DEFINE  MAINLOOP_COOL_LASERS
   3+ 6317                  DEFINE  MAINLOOP_ECM
   4+ 6317                  DEFINE  MAINLOOP_KEYBOARDSCAN
   5+ 6317              ;    DEFINE  MAINLOOP_DEMOSHIPS
   6+ 6317                  DEFINE  MAINLOOP_INPUTHANDLER
   7+ 6317                  DEFINE  MAINLOOP_EVENTHANDLER
   8+ 6317                  DEFINE  MAINLOOP_RECHARGE
   9+ 6317                  DEFINE  MAINLOOP_LAUNCHMISSILE
  10+ 6317                  DEFINE  MAINLOOP_UPDATEUNIVERSE
  11+ 6317 CD 41 89     MainLoop:	            call    doRandom                                                ; redo the seeds every frame
  12+ 631A                                  IFDEF MAINLOOP_UPDATE_LASERS
  13+ 631A                                      UpdateLaserOnCounter
  13+ 631A 3A BE 86    >                        ld      a,(CurrLaserPulseOnCount)
  13+ 631D A7          >                        and     a
  13+ 631E 28 0C       >                        jr      z,.LaserOnIsDone
  13+ 6320 3D          >                        dec     a
  13+ 6321 32 BE 86    >                        ld      (CurrLaserPulseOnCount),a
  13+ 6324 28 06       >                        jr      z,.LaserOnIsDone
  13+ 6326             >                        ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
  13+ 6326 3A B5 86    >                        ld       a,(CurrLaserPulseOffTime)
  13+ 6329 32 BF 86    >                        ld       (CurrLaserPulseOffCount),a
  13+ 632C             >.LaserOnIsDone:
  14+ 632C                                      UpdateLaserOffCounter
  14+ 632C 3A B5 86    >                        ld      a,(CurrLaserPulseOffTime)
  14+ 632F A7          >                        and     a
  14+ 6330 28 0C       >                        jr      z,.LaserOffIsDone
  14+ 6332 3D          >                        dec     a
  14+ 6333 32 B5 86    >                        ld      (CurrLaserPulseOffTime),a
  14+ 6336 28 06       >                        jr      z,.LaserOffIsDone
  14+ 6338             >                        ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
  14+ 6338 3A B6 86    >                        ld       a,(CurrLaserPulseRest)
  14+ 633B 32 C0 86    >                        ld       (CurrLaserPulseRestCount),a
  14+ 633E             >.LaserOffIsDone:
  15+ 633E                                      UpdateLaserRestCounter
  15+ 633E 3A C0 86    >                        ld      a,(CurrLaserPulseRestCount)
  15+ 6341 A7          >                        and     a
  15+ 6342 28 0A       >                        jr      z,.LaserRestIsDone
  15+ 6344 3D          >                        dec     a
  15+ 6345 32 C0 86    >                        ld      (CurrLaserPulseRestCount),a
  15+ 6348 28 04       >                        jr      z,.LaserRestIsDone
  15+ 634A             >                        ZeroA                                                                           ;    then pulse rate count = 0
  15+ 634A AF          >                        xor a
  15+ 634B 32 C1 86    >                        ld      (CurrLaserPulseRateCount),a                                             ;    .
  15+ 634E             >.LaserRestIsDone
  16+ 634E                                  ENDIF
  17+ 634E                                  IFDEF MAINLOOP_COOL_LASERS
  18+ 634E                                      CoolLasers
  18+ 634E 3A 95 86    >                        ld      a,(GunTemperature)
  18+ 6351 A7          >                        and     a
  18+ 6352 28 04       >                        jr      z,.AlreadyCool
  18+ 6354 3D          >                        dec     a
  18+ 6355 32 95 86    >                        ld      (GunTemperature),a
  18+ 6358             >.AlreadyCool:
  19+ 6358                                  ENDIF
  20+ 6358                                  IFDEF MAINLOOP_ECM
  21+ 6358                                      INCLUDE "./GameEngine/MainLoop_ECM.asm"
# file opened: ././GameEngine/MainLoop_ECM.asm
   1++6358 3A 0B 84     .ReducePlayerECM:       ld      a,(PlayerECMActiveCount)
   2++635B A7                                   and     a
   3++635C CA 6E 63                             jp      z, .DonePlayerECM
   4++635F 3D                                   dec     a
   5++6360 32 0B 84                             ld      (PlayerECMActiveCount),a
   6++6363 3A 9C 86                             ld      a,(PlayerEnergy)
   7++6366 A7                                   and     a
   8++6367 CA 6E 63                             jp      z, .DonePlayerECM
   9++636A 3D                                   dec     a
  10++636B 32 9C 86                             ld      (PlayerEnergy),a
  11++636E              .DonePlayerECM:
  12++636E 3A AE 82     .ReduceCommonECM:       ld      a,(ECMCountDown)
  13++6371 A7                                   and     a
  14++6372 CA 79 63                             jp      z, .DoneCommonECM
  15++6375 3D                                   dec     a
  16++6376 32 AE 82                             ld      (ECMCountDown),a
  17++6379              .DoneCommonECM:
  18++6379
# file closed: ././GameEngine/MainLoop_ECM.asm
  22+ 6379                                  ENDIF
  23+ 6379                                  IFDEF MAINLOOP_KEYBOARDSCAN
  24+ 6379 CD 38 80                             call    scan_keyboard                                           ; perform the physical input scan
  25+ 637C                                  ENDIF
  26+ 637C              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
  27+ 637C                                  IFDEF MAINLOOP_DEMOSHIPS
  28+ 637C ~            DemoOfShipsDEBUG:       call    TestForNextShip
  29+ 637C                                  ENDIF
  30+ 637C              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
  31+ 637C 3E 00        InputBlockerCheck:      ld      a,$0
  32+ 637E                                  IFDEF MAINLOOP_INPUTHANDLER
  33+ 637E                                      JumpIfAEqNusng $01, SkipInputHandlers                           ; as we are in a transition the whole update AI is skipped
  33+ 637E FE 01       >                        cp     $01
  33+ 6380 CA AA 63    >                        jp      z,SkipInputHandlers
  34+ 6383                                      JumpIfMemTrue TextInputMode, SkipInputHandlers                  ; in input mode all keys are processed by input
  34+ 6383 3A 8A 84    >                        ld      a,(TextInputMode)
  34+ 6386 A7          >                        and     a
  34+ 6387 CA AA 63    >                        jp      z, SkipInputHandlers
  35+ 638A CD B0 6D                             call    ViewKeyTest
  36+ 638D CD 6B 6A                             call    TestPauseMode
  37+ 6390 3A AE 83                             ld      a,(GamePaused)
  38+ 6393 FE 00                                cp      0
  39+ 6395 C2 17 63                             jp      nz,MainLoop
  40+ 6398 CD E9 81                             call    MovementKeyTest
  41+ 639B              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
  42+ 639B                                  ENDIF
  43+ 639B 3A A9 63     HandleMovement:         ld      a,(CallCursorRoutine+2)
  44+ 639E                                      JumpIfAIsZero     TestAreWeDocked
  44+ 639E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  44+ 639F CA AA 63    >                        jp	    z, TestAreWeDocked
  45+ 63A2              ;.. Handle displaying correct screen ..............................................................................................
  46+ 63A2 3E 00        HandleBankSelect:       ld      a,$00
  47+ 63A4                                      MMUSelectScreenA
  47+ 63A4 ED 92 56    >                     nextreg ScreenBankMMU,		a
  48+ 63A7 CD 00 00     CallCursorRoutine:      call    $0000
  49+ 63AA              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
  50+ 63AA              ;.. Also end up here if we have the screen input blocker set
  51+ 63AA              SkipInputHandlers:
  52+ 63AA              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
  53+ 63AA              TestAreWeDocked:        JumpIfMemNeNusng DockedFlag, StateNormal, UpdateLoop            ; if if we are in free space do universe updateelse we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
  53+ 63AA 3A AD 83    >                        ld  a,(DockedFlag)
  53+ 63AD FE 00       >                        cp  StateNormal
  53+ 63AF C2 6F 64    >                        jp  nz,UpdateLoop
  54+ 63B2                                  IFDEF MAINLOOP_EVENTHANDLER
  55+ 63B2 21 67 84     .UpdateEventCounter:    ld      hl,EventCounter                                         ; evnery 256 cycles we do a trigger test
  56+ 63B5 35                                   dec     (hl)
  57+ 63B6                                  ENDIF
  58+ 63B6                                  IFNDEF DEBUGMISSILETEST
  59+ 63B6 ~            .ProcessEvent:          call    z,LoopEventTriggered
  60+ 63B6                                  ENDIF
  61+ 63B6                                  IFDEF MAINLOOP_RECHARGE
  62+ 63B6 3A 67 84     .ProcessRecharge:       ld      a,(EventCounter)
  63+ 63B9 E6 07                                and     7
  64+ 63BB CC 24 88                             call    z, RechargeShip
  65+ 63BE                                  ENDIF
  66+ 63BE                                  IFDEF MAINLOOP_LAUNCHMISSILE
  67+ 63BE              .PlayerMissileLaunch:   AnyMissilesLeft
  67+ 63BE 3A 0A 84    >                        ld      a,(NbrMissiles)
  67+ 63C1 A7          >                        and     a
  68+ 63C2 28 08                                jr      z,.NoMissiles                                           ; just in case last one gets destroyed
  69+ 63C4                                      IsMissileLaunchFlagged
  69+ 63C4 3A 9F 86    >                        ld      a,(MissileTargettingFlag)
  69+ 63C7 E6 80       >                        and     $80
  70+ 63C9 CC 3A 66                             call    z,  LaunchPlayerMissile
  71+ 63CC              .NoMissiles
  72+ 63CC                                  ENDIF
  73+ 63CC              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
  74+ 63CC              ;.. we do one universe slot each loop update ......................................................................................
  75+ 63CC              ;.. First update Sun...............................................................................................................
  76+ 63CC 3E 00        UpdateShipsControl:     ld      a,0
  77+ 63CE A7                                   and     a
  78+ 63CF                                  IFDEF MAINLOOP_UPDATEUNIVERSE
  79+ 63CF CC DB 66     .UpdateShips:           call    z, UpdateUniverseObjects
  80+ 63D2                                  ENDIF
  81+ 63D2                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange  ; if we docked then a transition would have been forced
  81+ 63D2 3A 40 6C    >                        ld  a,(ScreenTransitionForced)
  81+ 63D5 FE FF       >                        cp  $FF
  81+ 63D7 C2 C0 66    >                        jp  nz,BruteForceChange
  82+ 63DA 3E 00        CheckIfViewUpdate:      ld      a,$00                                                   ; if this is set to a view number then we process a view
  83+ 63DC                                      JumpIfAIsZero  UpdateLoop                                       ; This will change as more screens are added TODO
  83+ 63DC A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  83+ 63DD CA 6F 64    >                        jp	    z, UpdateLoop
  84+ 63E0              ;..Processing a view...............................................................................................................
  85+ 63E0              ;..Display any message ............................................................................................................
  86+ 63E0              .CheckHyperspaceMessage:AnyHyperSpaceMacro .HandleMessages
  86+ 63E0 2A 65 84    >                        ld      hl,(InnerHyperCount)
  86+ 63E3 7C          >                        ld      a,h
  86+ 63E4 B5          >                        or      l
  86+ 63E5 28 03       >                        jr      z, .HandleMessages
  87+ 63E7 CD 35 78                             call    HyperSpaceMessage
  88+ 63EA              .HandleMessages:        AnyMessagesMacro  .NoMessages
  88+ 63EA 3A B8 82    >                        ld      a, (MessageCount)
  88+ 63ED A7          >                        and     a
  88+ 63EE 28 06       >                        jr      z, .NoMessages
  89+ 63F0 CD 17 78                             call    DisplayCurrentMessage
  90+ 63F3 CD F6 77                             call    UpdateMessageTimer
  91+ 63F6
  92+ 63F6              .NoMessages:            MMUSelectLayer2
  92+ 63F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  93+ 63FA 21 88 84     CheckConsoleReDraw:     ld      hl,ConsoleRefreshCounter
  94+ 63FD 35                                   dec     (hl)
  95+ 63FE CA 0E 64                             jp      z,.ConsoleDrawBuffer1                                   ; when it hits 0 then frame 1 of console is drawm
  96+ 6401 FA 0C 64                             jp      m,.ConsoleDrawBuffer2                                   ; need top also do next frame for double buffering
  97+ 6404              .ConsoleNotDraw:        SetMemFalse ConsoleRedrawFlag
  97+ 6404 3E FF       >                        ld      a,$FF
  97+ 6406 32 89 84    >                        ld      (ConsoleRedrawFlag),a
  98+ 6409 C3 18 64                             jp      .JustViewPortCLS
  99+ 640C 36 05        .ConsoleDrawBuffer2:    ld      (hl),ConsoleRefreshInterval
 100+ 640E              .ConsoleDrawBuffer1:    SetMemTrue ConsoleRedrawFlag
 100+ 640E AF          >                        xor     a
 100+ 640F 32 89 84    >                        ld      (ConsoleRedrawFlag),a
 101+ 6412 CD FF E0                             call    l2_cls                                                  ; Clear layer 2 for graphics
 102+ 6415 C3 1B 64                             jp      .ViewPortCLSDone
 103+ 6418 CD DF E0     .JustViewPortCLS:       call   l2_cls_upper_two_thirds
 104+ 641B              .ViewPortCLSDone:
 105+ 641B                                      MMUSelectLayer1
 105+ 641B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 106+ 641F              .UpdateSun:             MMUSelectSun
 106+ 641F ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 107+ 6423              .DEBUGFORCE:
 108+ 6423                                     ;ld          hl,$0081
 109+ 6423                                     ;ld          (SBnKxlo),hl
 110+ 6423                                     ;ld          hl,$0001
 111+ 6423                                     ;ld          (SBnKylo),hl
 112+ 6423                                     ; ld          hl,$0160
 113+ 6423                                     ; ld          (SBnKzlo),hl
 114+ 6423                                      ;ld          a,$80
 115+ 6423                                      ;ld          (SBnKxsgn),a
 116+ 6423                                      ;ld          (SBnKysgn),a
 117+ 6423                                     ; ZeroA
 118+ 6423                                    ;  ld          (SBnKzsgn),a
 119+ 6423 CD 33 C7                             call    SunUpdateAndRender
 120+ 6426              .UpdatePlanet:          MMUSelectPlanet
 120+ 6426 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 121+ 642A CD 40 C3                             call    PlanetUpdateAndRender
 122+ 642D              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
 123+ 642D 3E DF        DrawDustForwards:       ld     a,$DF
 124+ 642F 32 CB EA                             ld     (line_gfx_colour),a
 125+ 6432              DustUpdateBank:         MMUSelectViewFront                                              ; This needs to be self modifying
 125+ 6432 ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 126+ 6436 CD 39 7D     DustUpdateRoutine:      call   DustForward                                              ; This needs to be self modifying
 127+ 6439              ;ProcessSun:             call    DrawForwardSun
 128+ 6439 3A B3 86     ProcessLaser:           ld      a,(CurrLaserPulseRate)
 129+ 643C                                      JumpIfAIsNotZero .CheckForPulse
 129+ 643C A7          >                        and     a
 129+ 643D C2 4A 64    >                        jp	    nz,.CheckForPulse
 130+ 6440                                      JumpIfMemFalse FireLaserPressed, .NoLaser
 130+ 6440 3A 8C 84    >                        ld      a,(FireLaserPressed)
 130+ 6443 A7          >                        and     a
 130+ 6444 C2 5E 64    >                        jp      nz, .NoLaser
 131+ 6447 C3 51 64                             jp      .FireLaser
 132+ 644A              .CheckForPulse:         JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 132+ 644A 3A BE 86    >                        ld  a,(CurrLaserPulseOnCount)
 132+ 644D A7          >                        and a
 132+ 644E CA 5E 64    >                        jp  z,.NoLaser
 133+ 6451              .FireLaser:             MMUSelectSpriteBank
 133+ 6451 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 134+ 6455 CD 3E E3                             call    sprite_laser_show
 135+ 6458 CD 14 87                             call    LaserDrainSystems
 136+ 645B C3 65 64                             jp      ProcessPlanet
 137+ 645E              .NoLaser:               MMUSelectSpriteBank
 137+ 645E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 138+ 6462 CD DC E4                             call    sprite_laser_hide
 139+ 6465              ProcessPlanet:
 140+ 6465 CD CE 68     ProcessShipModels:      call   DrawForwardShips                                     ; Draw all ships (this may need to be self modifying)
 141+ 6468                                      ; add in loop so we only update every 4 frames, need to change CLS logic too,
 142+ 6468                                      ; every 4 frames needs to do 2 updates so updates both copies of buffer
 143+ 6468                                      ; now will CLS bottom thrid
 144+ 6468                                      CallIfMemTrue ConsoleRedrawFlag, UpdateConsole
 144+ 6468 3A 89 84    >                        ld      a,(ConsoleRedrawFlag)
 144+ 646B A7          >                        and     a
 144+ 646C CC 12 70    >                        call    z, UpdateConsole
 145+ 646F              ;..If we were not in views then we were in display screens/menus...................................................................
 146+ 646F              UpdateLoop:             JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 146+ 646F 3A 7C 64    >                        ld  a,(ScreenLoopJP+1)
 146+ 6472 A7          >                        and a
 146+ 6473 CA 7E 64    >                        jp  z,LoopRepeatPoint
 147+ 6476              ;..This is the screen update routine for menus.....................................................................................
 148+ 6476              ;.. Also used by transition routines
 149+ 6476 3E 00        ScreenLoopBank:         ld      a,$0
 150+ 6478                                      MMUSelectScreenA
 150+ 6478 ED 92 56    >                     nextreg ScreenBankMMU,		a
 151+ 647B CD 00 00     ScreenLoopJP:           call    $0000
 152+ 647E 3A AD 83     LoopRepeatPoint:        ld      a,(DockedFlag)
 153+ 6481              HandleLaunched:         JumpIfAEqNusng  StateCompletedLaunch,   WeHaveCompletedLaunch
 153+ 6481 FE FD       >                        cp     StateCompletedLaunch
 153+ 6483 CA 9D 64    >                        jp      z,WeHaveCompletedLaunch
 154+ 6486                                      JumpIfAEqNusng  StateInTransition,      WeAreInTransition
 154+ 6486 FE FE       >                        cp     StateInTransition
 154+ 6488 CA A5 66    >                        jp      z,WeAreInTransition
 155+ 648B                                      JumpIfAEqNusng  StateHJumping,          WeAreHJumping
 155+ 648B FE FC       >                        cp     StateHJumping
 155+ 648D CA A3 64    >                        jp      z,WeAreHJumping
 156+ 6490                                      JumpIfAEqNusng  StateHEntering,         WeAreHEntering
 156+ 6490 FE FB       >                        cp     StateHEntering
 156+ 6492 CA B1 64    >                        jp      z,WeAreHEntering
 157+ 6495                                      JumpIfAEqNusng  StateCompletedHJump,    WeHaveCompletedHJump
 157+ 6495 FE FA       >                        cp     StateCompletedHJump
 157+ 6497 CA B9 64    >                        jp      z,WeHaveCompletedHJump
 158+ 649A
 159+ 649A C3 A5 66                             jp  DoubleBufferCheck
 160+ 649D CD A3 6C     WeHaveCompletedLaunch:  call    LaunchedFromStation
 161+ 64A0 C3 A5 66                             jp      DoubleBufferCheck
 162+ 64A3 CD 4D C2     WeAreHJumping:          call    hyperspace_Lightning
 163+ 64A6 DA A5 66                             jp      c,DoubleBufferCheck
 164+ 64A9 3E FB                                ld      a,StateHEntering
 165+ 64AB 32 AD 83                             ld      (DockedFlag),a
 166+ 64AE C3 A5 66                             jp      DoubleBufferCheck
 167+ 64B1 3E FA        WeAreHEntering:         ld      a,StateCompletedHJump
 168+ 64B3 32 AD 83                             ld      (DockedFlag),a
 169+ 64B6 C3 A5 66                             jp      DoubleBufferCheck
 170+ 64B9
 171+ 64B9
 172+ 64B9              ; to create planet position
 173+ 64B9              ;       take seed 2 AND %00000011 + 3 + carry and store in z sign
 174+ 64B9              ;       take result and divide by 2 then store in x and y sign
 175+ 64B9              ;
 176+ 64B9              ;       take seed 4 AND %00000111 OR %10000001 and store in z sign
 177+ 64B9              ;       take seed 6 AND %00000011 and store in x sign and y sign
 178+ 64B9              ;       set pitch and roll to 0
 179+ 64B9              ;
 180+ 64B9              ;
 181+ 64B9              ;
 182+ 64B9              ; --- At the end of a hyperspace jump we have to reset compass, market universe sun and planets etc
 183+ 64B9 3A 94 84     WeHaveCompletedHJump:   ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 184+ 64BC                                      MMUSelectGalaxyA
 184+ 64BC ED 92 57    >                     nextreg GalaxyDataMMU,     a
 185+ 64BF 2A A9 84                             ld      hl,(TargetSystemX)
 186+ 64C2 22 A7 84                             ld      (PresentSystemX),hl
 187+ 64C5 44                                   ld      b,h
 188+ 64C6 4D                                   ld      c,l
 189+ 64C7                                      CorrectPostJumpFuel
 189+ 64C7 3A 0A 89    >                        ld      a,(Fuel)
 189+ 64CA 21 30 84    >                        ld      hl,Distance
 189+ 64CD 96          >                        sub     a,(hl)
 189+ 64CE 32 0A 89    >                        ld      (Fuel),a
 190+ 64D1                                      ForceTransition ScreenFront            ; This will also trigger stars
 190+ 64D1 3E 09       >                        ld      a,ScreenFront
 190+ 64D3 32 40 6C    >                        ld      (ScreenTransitionForced), a
 191+ 64D6 3E 00                                ld      a,$00
 192+ 64D8 32 8E 84                             ld      (ExtraVesselsCounter),a
 193+ 64DB 32 AD 83                             ld      (DockedFlag),a
 194+ 64DE CD 6F F8                             call    GalaxyGenerateDesc             ; bc  holds new system to generate system
 195+ 64E1 CD BF 89                             call    copy_working_to_system         ; and propogate copies of seeds
 196+ 64E4 CD B7 89                             call    copy_working_to_galaxy         ; .
 197+ 64E7 CD A5 8A                             call    get_planet_data_working_seed   ; sort out system data
 198+ 64EA                                      ;call    GetDigramGalaxySeed           ; .
 199+ 64EA                                      MMUSelectStockTable                    ; .
 199+ 64EA ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 200+ 64EE CD AA E0                             call    generate_stock_market          ; generate new prices
 201+ 64F1 CD 7A 88                             call    ClearUnivSlotList              ; clear out any ships
 202+ 64F4 CD 3E 87                             call    ResetPlayerShip
 203+ 64F7                                      HalveFugitiveStatus                    ; halves status and brings bit into carry
 203+ 64F7 21 0C 84    >                        ld      hl,FugitiveInnocentStatus
 203+ 64FA CB 3E       >                        srl     (hl)
 204+ 64FC                                      MMUSelectSun
 204+ 64FC ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 205+ 6500 CD 61 C2                             call    CreateSun                      ; create the local sun and set position based on seed
 206+ 6503                                      MMUSelectPlanet
 206+ 6503 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 207+ 6507 CD BA C0                             call    CreatePlanet
 208+ 650A              ;TODO                        call    generateSunAndPlanetPos        ; uses current carry state too
 209+ 650A              ;TODO.CreateSun:             call    SetSunSlot
 210+ 650A              ; PROBABLY NOT NEEDED NOW                      MMUSelectShipBank1
 211+ 650A              ; PROBABLY NOT NEEDED NOW                      call    GetShipBankId
 212+ 650A              ;;SELECT CORRECT BANK                        MMUSelectUniverseN 0
 213+ 650A              ;;TODO                        call    CopyBodyToUniverse
 214+ 650A              ;;TODO                        call    CreateSun
 215+ 650A              ;;TODOCreatePlanet:          call    SetPlanetSlot
 216+ 650A              ;;TODO                       MMUSelectShipBank1
 217+ 650A              ;;TODO                       call    GetShipBankId
 218+ 650A              ;;TODO                       MMUSelectUniverseBankN 1
 219+ 650A              ;;TODO                       call    CopyBodyToUniverse
 220+ 650A                                      SetMemFalse DockedFlag
 220+ 650A 3E FF       >                        ld      a,$FF
 220+ 650C 32 AD 83    >                        ld      (DockedFlag),a
 221+ 650F C3 A5 66                             jp  DoubleBufferCheck
 222+ 6512
 223+ 6512 CD E8 88     LoopEventTriggered:     call    FindNextFreeSlotInC                 ; c= slot number, if we cant find a slot
 224+ 6515 D8                                   ret     c                                   ; then may as well just skip routine
 225+ 6516              .DEBUGTEST:             SetMemFalse SpaceStationSafeZone
 225+ 6516 3E FF       >                        ld      a,$FF
 225+ 6518 32 8D 84    >                        ld      (SpaceStationSafeZone),a
 226+ 651B FD 61        .SpawnIsPossible:       ld      iyh,c                               ; save slot free in iyh
 227+ 651D              .AreWeInWhichSpace:     JumpIfMemTrue MissJumpFlag, .WitchSpaceEvent
 227+ 651D 3A 69 84    >                        ld      a,(MissJumpFlag)
 227+ 6520 A7          >                        and     a
 227+ 6521 CA F8 65    >                        jp      z, .WitchSpaceEvent
 228+ 6524 CD 41 89     .JunkOrNot:             call    doRandom                            ; if random > 35 then its not junk
 229+ 6527                                      JumpIfAGTENusng 35, .NotJunk                ; .
 229+ 6527 FE 23       >                        cp     35
 229+ 6529 D2 5B 65    >                        jp		nc,.NotJunk
 230+ 652C              .JunkLimitHitTest:      TestRoomForJunk .NotJunk                    ; can we fit in any junk
 230+ 652C 3E 03       >                        ld      a,3
 230+ 652E             >                        JumpIfALTMemusng    JunkCount, .NotJunk
 230+ 652E 21 8F 84    >                        ld      hl,JunkCount
 230+ 6531 BE          >                        cp      (hl)
 230+ 6532 DA 5B 65    >                        jp		c,.NotJunk
 231+ 6535 CD 41 89     .CouldBeTraderInstead:  call    doRandom                            ; so its now a 50/50 change of being a trader
 232+ 6538 E6 01                                and     1
 233+ 653A CA A6 65                             jp      z,.SpawnTrader
 234+ 653D              ;... Handle spawning of junk if possible
 235+ 653D CD 41 89     .SpawnJunk:             call    doRandom
 236+ 6540 FE 0A                                cp      10                                  ; will set carry if a < 10
 237+ 6542                                      FlipCarryFlag                               ; so now carry is set if a > 10
 237+ 6542 3F          >                        ccf
 238+ 6543 E6 01                                and     1                                   ; so only have carry flag
 239+ 6545 CE 04                                adc     ShipID_CargoType5                   ; so now a = 4 + random + poss carry
 240+ 6547 47                                   ld      b,a                                 ; save ship type
 241+ 6548                                      ; if in space station zone then we can't do asteroids
 242+ 6548              .CanWeSpawnAsteroid:    JumpIfMemFalse  SpaceStationSafeZone, .NotInSafeZone
 242+ 6548 3A 8D 84    >                        ld      a,(SpaceStationSafeZone)
 242+ 654B A7          >                        and     a
 242+ 654C C2 53 65    >                        jp      nz, .NotInSafeZone
 243+ 654F 78                                   ld      a,b
 244+ 6550              .FailIfAsteroidInSafe:  ReturnIfAEqNusng   ShipID_Asteroid          ; we can't spawn asteroids near a space station
 244+ 6550 FE 06       >                        cp      ShipID_Asteroid
 244+ 6552 C8          >                        ret     z
 245+ 6553              .NotInSafeZone:         AddJunkCount                                ; so its an increase in junk
 245+ 6553 21 8F 84    >                        ld      hl,JunkCount
 245+ 6556 34          >                        inc     (hl)
 246+ 6557 78                                   ld      a,b                                 ; get ship type back
 247+ 6558 C3 63 66                             jp      SpawnShipTypeA
 248+ 655B                                      ;.......implicit ret
 249+ 655B              ;... Handle spawing of non junk type object
 250+ 655B              .NotJunk:               JumpIfMemTrue SpaceStationSafeZone, .SpawnTrader ; changed so that it can spawn friendly ships around a space station
 250+ 655B 3A 8D 84    >                        ld      a,(SpaceStationSafeZone)
 250+ 655E A7          >                        and     a
 250+ 655F CA A6 65    >                        jp      z, .SpawnTrader
 251+ 6562              .PossibleCop:           MMUSelectCommander                          ; get cargo rating
 251+ 6562 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 252+ 6566 CD 4A E3     .AreWeABadPerson:       call    calculateBadness                    ; a = badness
 253+ 6569 CB 27                                sla     a                                   ; double badness for scans
 254+ 656B                                      JumpIfMemZero CopCount,.NoCopsInSystem      ; are there any cops already
 254+ 656B 3A 92 84    >                        ld  a,(CopCount)
 254+ 656E A7          >                        and a
 254+ 656F CA 76 65    >                        jp  z,.NoCopsInSystem
 255+ 6572 21 0C 84     .CopsAlreadyPresent:    ld      hl,FugitiveInnocentStatus           ; or a with FIST status
 256+ 6575 B6                                   or      (hl)
 257+ 6576 32 B0 86     .NoCopsInSystem:        ld      (BadnessStatus),a                   ; if badness level triggers a cop
 258+ 6579 CD 41 89                             call    doRandom                            ; then its hostile
 259+ 657C                                      CallIfAGTEMemusng BadnessStatus, .SpawnHostileCop  ;
 259+ 657C 21 B0 86    >                        ld      hl,BadnessStatus
 259+ 657F BE          >                        cp      (hl)
 259+ 6580 D4 A6 65    >                        call	nc,.SpawnHostileCop
 260+ 6583                                      ReturnIfMemNotZero CopCount                 ; if here are police then we are done
 260+ 6583 3A 92 84    >                        ld     a,(CopCount)
 260+ 6586 A7          >                        and     a
 260+ 6587 C0          >                        ret    nz
 261+ 6588 21 8E 84                             ld      hl, ExtraVesselsCounter             ; count down extra vessels counter
 262+ 658B 35                                   dec     (hl)                                ; to prevent mass spawing
 263+ 658C F0                                   ret     p                                   ;
 264+ 658D 34           .ExtraVesselHit0:       inc     (hl)                                ; set counter to 0
 265+ 658E                        ;TODO              JumpIfMemNotZero MissionData,.DoMissionPlans; call special mission spawn logic routine
 266+ 658E                         ;TODO             ret     c                                   ; return if carry was set (i.e. it did something)
 267+ 658E 3A 94 84                             ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 268+ 6591                                      MMUSelectGalaxyA
 268+ 6591 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 269+ 6594 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 270+ 6597                                      JumpIfAIsNotZero .NotAnarchySystem
 270+ 6597 A7          >                        and     a
 270+ 6598 C2 CE 65    >                        jp	    nz,.NotAnarchySystem
 271+ 659B 47                                   ld      b,a
 272+ 659C CD 41 89                             call    doRandom                            ; if random > 120 then don't spawn
 273+ 659F                                      ReturnIfAGTENusng 120                       ;
 273+ 659F FE 78       >                        cp    120
 273+ 65A1 D0          >                        ret	 nc
 274+ 65A2 E6 07                                and     7                                   ; if random 0 ..7 < gov rating
 275+ 65A4                                      ReturnIfALTNusng b                          ; then return
 275+ 65A4 B8          >                        cp    b
 275+ 65A5 D8          >                        ret	 c
 276+ 65A6              .SpawnTrader:       ; TODO
 277+ 65A6              ; ... Spawn a cop at hostile status
 278+ 65A6 3E 29        .SpawnHostileCop:       ld      a,ShipID_Viper
 279+ 65A8 CD 63 66                             call    SpawnShipTypeA                      ; call rather than jump
 280+ 65AB CD 52 C5                             call    SetShipHostile                      ; as we have correct universe banked in now
 281+ 65AE C9                                   ret
 282+ 65AF              ; ... Spawb a hostile ship or cluster
 283+ 65AF CD 41 89     .SpawnHostile:          call    doRandom
 284+ 65B2                                      JumpIfAGTENusng 100,.SpawnPirates           ; 100 in 255 change of one or more pirates
 284+ 65B2 FE 64       >                        cp     100
 284+ 65B4 D2 CF 65    >                        jp		nc,.SpawnPirates
 285+ 65B7 21 8E 84     .SpawnAHostileHunter:   ld      hl, ExtraVesselsCounter             ; prevent the next spawning
 286+ 65BA 34                                   inc     (hl)                                ;
 287+ 65BB E6 03                                and     3                                   ; a = random 0..3
 288+ 65BD                                      MMUSelectShipBank1
 288+ 65BD ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 289+ 65C1                                      GetByteAInTable ShipHunterTable             ; get hunter ship type
 289+ 65C1 21 79 79    >                    ld          hl,ShipHunterTable
 289+ 65C4 ED 31       >                    add         hl,a
 289+ 65C6 7E          >                    ld          a,(hl)
 290+ 65C7 CD 63 66                             call    SpawnShipTypeA
 291+ 65CA CD 52 C5                             call    SetShipHostile
 292+ 65CD C9                                   ret
 293+ 65CE C9           .NotAnarchySystem:      ret
 294+ 65CF CD 41 89     .SpawnPirates:          call    doRandom                           ; a = random 0..3
 295+ 65D2 E6 03                                and     3
 296+ 65D4 32 8E 84                             ld      (ExtraVesselsCounter),a
 297+ 65D7 CD 41 89     .PirateLoop:            call    doRandom
 298+ 65DA 4F                                   ld      c,a                                 ; random and random and 7
 299+ 65DB CD 41 89                             call    doRandom
 300+ 65DE A1                                   and     c
 301+ 65DF E6 07                                and     7
 302+ 65E1                                      GetByteAInTable ShipPackList
 302+ 65E1 21 71 79    >                    ld          hl,ShipPackList
 302+ 65E4 ED 31       >                    add         hl,a
 302+ 65E6 7E          >                    ld          a,(hl)
 303+ 65E7 CD 63 66                             call    SpawnShipTypeA
 304+ 65EA CD 52 C5                             call    SetShipHostile                      ; make sure its hostile
 305+ 65ED                                      AddPirateCount                              ; another pirate has been spawned
 305+ 65ED 21 93 84    >                        ld      hl,PirateCount
 305+ 65F0 34          >                        inc     (hl)
 306+ 65F1 21 8E 84                             ld      hl,ExtraVesselsCounter
 307+ 65F4 35                                   dec     (hl)
 308+ 65F5 20 E0                                jr      nz,.PirateLoop
 309+ 65F7 C9                                   ret
 310+ 65F8 C9           .WitchSpaceEvent:       ret; TODO for now
 311+ 65F9
 312+ 65F9
 313+ 65F9 00           EnemyShipBank:          DS 1
 314+ 65FA 00 00 00...  EnemyMissileLaunchPos:  DS 3 * 3
 315+ 6603 00 00 00...  EnemyMissileLaunchMat:  DS 2 * 3
 316+ 6609
 317+ 6609
 318+ 6609 DD 01        LaunchEnemyMissile:     break
 319+ 660B 3A 40 C0                             ld      a,(UbnKShipUnivBankNbr)             ; save current bank number
 320+ 660E 32 F9 65                             ld      (EnemyShipBank),a                   ;
 321+ 6611 3E 05                                ld      a,5
 322+ 6613 CD E5 A7                             call    CalcLaunchOffset
 323+ 6616 3E 00                                ld      a,0                                 ; TODO For now only 1 missile type
 324+ 6618                                      GetByteAInTable ShipMissileTable            ; swap in missile data
 324+ 6618 21 7D 79    >                    ld          hl,ShipMissileTable
 324+ 661B ED 31       >                    add         hl,a
 324+ 661D 7E          >                    ld          a,(hl)
 325+ 661E CD 63 66                             call    SpawnShipTypeA                      ; spawn the ship
 326+ 6621 D8                                   ret     c                                   ; return if failed
 327+ 6622 CD CD C5                             call    UnivSetEnemyMissile                 ; as per player but sets as angry
 328+ 6625 3E FF                                ld      a,$FF
 329+ 6627 32 45 C0                             ld      (UBnKMissileTarget),a               ; set as definte player as target
 330+ 662A 3A F9 65                             ld      a,(EnemyShipBank)                   ; Direct restore current bank
 331+ 662D                                      MMUSelectUnivBankA                          ;
 331+ 662D ED 92 56    >                     nextreg UniverseMMU,       a
 332+ 6630 21 5C C0                             ld      hl, UBnKMissilesLeft                ; reduce enemy missile count
 333+ 6633 35                                   dec     (hl)
 334+ 6634 C9                                   ret
 335+ 6635
 336+ 6635 3E 0A        LaunchEnemyFighter:     ld      a,10
 337+ 6637 DD 01                                break;call    CopyUBnKtoLaunchParameters
 338+ 6639                                      ;copymatrix,rot and speed
 339+ 6639 C9                                   ret
 340+ 663A
 341+ 663A              LaunchPlayerMissile:   ; break
 342+ 663A CD E8 88                             call    FindNextFreeSlotInC                 ; Check if we have a slot free
 343+ 663D 38 1E                                jr      c,.MissileMissFire                  ; give a miss fire indicator as we have no slots
 344+ 663F 3E 00        .LaunchGood:            ld      a,0                                 ; TODO For now only 1 missile type
 345+ 6641                                      GetByteAInTable ShipMissileTable            ; swap in missile data
 345+ 6641 21 7D 79    >                    ld          hl,ShipMissileTable
 345+ 6644 ED 31       >                    add         hl,a
 345+ 6646 7E          >                    ld          a,(hl)
 346+ 6647 CD 63 66                             call    SpawnShipTypeA                      ; spawn the ship
 347+ 664A 3A 9F 86                             ld      a,(MissileTargettingFlag)           ; Get target from computer
 348+ 664D 32 45 C0                             ld      (UBnKMissileTarget),a               ; load target Data
 349+ 6650 CD 07 C6                             call    UnivSetPlayerMissile                ; .
 350+ 6653                                      ClearMissileTargetting                      ; reset targetting
 350+ 6653 3E FF       >                        ld      a,StageMissileNotTargeting
 350+ 6655 32 9F 86    >                        ld      (MissileTargettingFlag),a
 351+ 6658 21 0A 84                             ld      hl, NbrMissiles
 352+ 665B 35                                   dec     (hl)
 353+ 665C                                      ; TODO handle removal of missile from inventory and console
 354+ 665C C9                                   ret
 355+ 665D              .MissileMissFire:       ClearMissileTargetting
 355+ 665D 3E FF       >                        ld      a,StageMissileNotTargeting
 355+ 665F 32 9F 86    >                        ld      (MissileTargettingFlag),a
 356+ 6662 C9                                   ret ; TODO bing bong noise misfire message
 357+ 6663
 358+ 6663                                      include "./SpawnShipTypeA.asm"
# file opened: ./GameEngine/./SpawnShipTypeA.asm
   1++6663              ;.. SpawnShipTypeA
   2++6663              ; IN
   3++6663              ;  a = ship type to create (equates to the ship model)
   4++6663              ; OUT
   5++6663              ;  b = ship class
   6++6663              ;  a = iyh = slot number
   7++6663              SpawnShipTypeA:         ;break
   8++6663 FD 6F                                ld      iyl,a                               ; save ship type in iyh
   9++6665 CD E8 88                             call    FindNextFreeSlotInC                 ; c = slot number to use
  10++6668 D8                                   ret     c                                   ; if carry flag was set then no spare slots
  11++6669 FD 61                                ld      iyh,c                               ; preserve slot number for now
  12++666B                                      MMUSelectShipBank1                          ; select bank 1
  12++666B ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
  13++666F FD 7C                                ld      a,iyh                               ; A = slot number
  14++6671 FD 45                                ld      b,iyl                               ; b = ship type
  15++6673 CD 91 88                             call    SetSlotAToTypeB                     ; Allocate slot as used
  16++6676                                      MMUSelectUniverseA                          ; .
  16++6676 C6 46       >                     add    a,BankUNIVDATA0
  16++6678 ED 92 56    >                     nextreg UniverseMMU,       a
  17++667B FD 7C        .MarkUnivDiags:         ld      a,iyh                               ; mark diagnostics for bank number in memory
  18++667D C6 41                                add     "A"                                 ; so fix Universe PB<x> to correct letter
  19++667F 32 0B C0                             ld      (StartOfUnivN),a                    ; to help debugging
  20++6682 FD 7D                                ld      a,iyl                               ; get ship model type
  21++6684 32 0E C0                             ld      (StartOfUnivM),a                    ; set debugging for model
  22++6687 CD 0F E0     .CopyOverShipData:      call    GetShipBankId                       ; find actual memory location of ship model data
  23++668A                                      MMUSelectShipBankA                          ; by paging in bank a then looking up computed bank for model a
  23++668A ED 92 57    >					 nextreg ShipModelMMU,	    a
  24++668D 78                                   ld      a,b                                 ; b = computed ship id for bank
  25++668E CD 6A E0                             call    CopyShipToUniverse                  ; copy all the ship data in to the paged in bank
  26++6691 CD A4 C6                             call    UnivSetSpawnPosition                ; set initial spawn position
  27++6694 CD 5D C7                             call    UnivInitRuntime                     ; Clear runtime data before startup, iy h and l are already set up
  28++6697 3A 45 C3                             ld      a,(ShipTypeAddr)                    ; get ship type
  29++669A 32 0F C0                             ld      (StartOfUnivT),a                    ; to help debugging we store type too
  30++669D 47                                   ld      b,a                                 ; and set the type into slot table
  31++669E FD 7C                                ld      a,iyh                               ;
  32++66A0 CD 98 88                             call    SetSlotAToClassB                    ;
  33++66A3                                      ClearCarryFlag                              ; no carry on success
  33++66A3 B7          >                        or a
  34++66A4 C9                                   ret
  35++66A5
# file closed: ./GameEngine/./SpawnShipTypeA.asm
 359+ 66A5
 360+ 66A5                                      ; reset main loop counters
 361+ 66A5                                      ; from BBC TT18 jump code
 362+ 66A5                                      ; need to set system corrodinates, flush out univere ships etc
 363+ 66A5                                      ; set up new star system and landing location in system
 364+ 66A5                                      ; reset ship speed etc (RES2)
 365+ 66A5                                      ; update legal status, missle indicatrions, planet data block, sun data block (SOLAR)
 366+ 66A5                                      ;   put planet into data blokc 1 of FRIN
 367+ 66A5                                      ;   put sun inot data block (NWWSHIP)
 368+ 66A5                                      ; need to look at in system warp code (WARP) - note we need to -reorg all to code for teh station as that will never be in slot 0
 369+ 66A5
 370+ 66A5              WeAreInTransition:
 371+ 66A5 3E 00        DoubleBufferCheck:      ld      a,00
 372+ 66A7                                      IFDEF DOUBLEBUFFER
 373+ 66A7 FE 00                                    cp      0
 374+ 66A9 CA B8 66                                 jp      z,TestTransition
 375+ 66AC                                          MMUSelectLayer2
 375+ 66AC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 376+ 66B0 3A 01 E0                                 ld     a,(varL2_BUFFER_MODE)
 377+ 66B3 FE 00                                    cp     0
 378+ 66B5 C4 13 E1                                 call   nz,l2_flip_buffers
 379+ 66B8                                      ENDIF
 380+ 66B8 3A 40 6C     TestTransition:         ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 381+ 66BB FE FF                                cp      $FF
 382+ 66BD CA 17 63                             jp      z,MainLoop
 383+ 66C0 CD 36 6D     BruteForceChange:       call    SetScreenA
 384+ 66C3 C3 17 63                             jp MainLoop
 385+ 66C6
# file closed: ./GameEngine/MainLoop.asm
 261  66C6              ;..................................................................................................................................
 262  66C6              ;..Process A ship..................................................................................................................
 263  66C6              ; Apply Damage b to ship based on shield value of a
 264  66C6              ; returns a with new shield value
 265  66C6                                      INCLUDE "./GameEngine/DamagePlayer.asm"
# file opened: ./GameEngine/DamagePlayer.asm
   1+ 66C6              ;..Process A ship..................................................................................................................
   2+ 66C6              ; Apply Damage b to ship based on shield value of a
   3+ 66C6              ; returns a with new shield value
   4+ 66C6              ApplyDamage:            ClearCarryFlag
   4+ 66C6 B7          >                        or a
   5+ 66C7 98                                   sbc     b
   6+ 66C8 D0                                   ret     nc                  ; no carry so was not negative
   7+ 66C9
   8+ 66C9 ED 44        .KilledShield:          neg                         ; over hit shield
   9+ 66CB 4F                                   ld      c,a                 ; save overhit in c
  10+ 66CC 3A 9C 86                             ld      a,(PlayerEnergy)    ; and apply it to player energy
  11+ 66CF                                      ClearCarryFlag
  11+ 66CF B7          >                        or a
  12+ 66D0 99                                   sbc     c
  13+ 66D1 F2 D5 66                             jp      p,.DoneDamage       ; if result was 0 or more then completed damage
  14+ 66D4 AF           .KilledPlayer:          xor     a
  15+ 66D5 32 9C 86     .DoneDamage:            ld      (PlayerEnergy),a
  16+ 66D8 AF                                   xor     a                   ; shield is gone
  17+ 66D9 C9                                   ret
  18+ 66DA
# file closed: ./GameEngine/DamagePlayer.asm
 266  66DA              ;..Update Universe Objects.........................................................................................................
 267  66DA                                      INCLUDE "./GameEngine/UpdateUniverseObjects.asm"
# file opened: ./GameEngine/UpdateUniverseObjects.asm
   1+ 66DA              ;..................................................................................................................................
   2+ 66DA              ;                           DEFINE ROTATIONDEBUG 1
   3+ 66DA 00           CurrentShipUniv:        DB      0
   4+ 66DB              ;..................................................................................................................................
   5+ 66DB              ; if ship is destroyed or exploding then z flag is clear, else z flag is set
   6+ 66DB              IsShipDestroyedOrExploding: MACRO
   7+ 66DB ~                                        ld      a,(UBnKexplDsp)                                 ; is it destroyed
   8+ 66DB ~                                        and     %10100000                                       ; or exploding
   9+ 66DB                                          ENDM
  10+ 66DB
  11+ 66DB              JumpIfShipNotClose:         MACRO   NotCloseTarget
  12+ 66DB ~            .CheckIfClose:              ld      hl,(UBnKxlo)                                    ; chigh byte check or just too far away
  13+ 66DB ~                                        ld      de,(UBnKylo)                                    ; .
  14+ 66DB ~                                        ld      bc,(UBnKzlo)                                    ; .
  15+ 66DB ~                                        or      h                                               ; .
  16+ 66DB ~                                        or      d                                               ; .
  17+ 66DB ~                                        or      b                                               ; .
  18+ 66DB ~                                        jp      nz,NotCloseTarget                               ; .
  19+ 66DB ~            .CheckLowBit7Close:         or      l                                               ; if bit 7 of low is set then still too far
  20+ 66DB ~                                        or      e                                               ; .
  21+ 66DB ~                                        or      c                                               ; .
  22+ 66DB ~                                        ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
  23+ 66DB ~                                        and     $80                                             ; .
  24+ 66DB ~                                        jp      nz,NotCloseTarget                              ; .
  25+ 66DB                                          ENDM
  26+ 66DB
  27+ 66DB              VeryCloseCheck:             MACRO
  28+ 66DB ~                                        ld      a,iyh                                           ; bit 6 is still too far
  29+ 66DB ~                                        and     %11000000
  30+ 66DB                                          ENDM
  31+ 66DB
  32+ 66DB              JumpIfNotDockingCheck:      MACRO   NotDocking
  33+ 66DB ~            .CheckIfDockable:           ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
  34+ 66DB ~                                        JumpIfANENusng  ShipTypeStation, NotDocking             ; if its not a station so we don't test docking
  35+ 66DB ~            .IsDockableHostoleCheck:    JumpOnMemBitSet ShipNewBitsAddr, ShipHostileNewBitNbr, NotDocking ; if it is angry then we dont test docking
  36+ 66DB ~            .CheckHighNoseZ:            JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, NotDocking  ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
  37+ 66DB ~            .GetStationVector:          call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
  38+ 66DB ~                                        JumpIfALTNusng  89, NotDocking                          ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
  39+ 66DB ~            .CheckAbsRoofXHi:           ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
  40+ 66DB ~                                        and     SignMask8Bit                                    ; .
  41+ 66DB ~                                        JumpIfALTNusng 80, NotDocking                           ; note 80 decimal for 36.6 degrees horizontal
  42+ 66DB                                          ENDM
  43+ 66DB
  44+ 66DB              ;..................................................................................................................................
  45+ 66DB AF           UpdateUniverseObjects:  xor     a
  46+ 66DC 32 62 84                             ld      (SelectedUniverseSlot),a
  47+ 66DF 57           .UpdateUniverseLoop:    ld      d,a                                             ; d is unaffected by GetTypeInSlotA
  48+ 66E0              ;.. If the slot is empty (FF) then skip this slot..................................................................................
  49+ 66E0 CD DC 88                             call    GetTypeAtSlotA
  50+ 66E3 FE FF                                cp      $FF                                             ; we don't process empty slots
  51+ 66E5 CA 30 68                             jp      z,.UniverseSlotIsEmpty                          ; .
  52+ 66E8 FD 6F                                ld      iyl,a                                           ; save type into iyl for later
  53+ 66EA 7A           .UniverseObjectFound:   ld      a,d                                             ; Get back Universe slot as we want it
  54+ 66EB                                      MMUSelectUniverseA                                      ; and we apply roll and pitch
  54+ 66EB C6 46       >                     add    a,BankUNIVDATA0
  54+ 66ED ED 92 56    >                     nextreg UniverseMMU,       a
  55+ 66F0 CD C4 D5                             call    ApplyMyRollAndPitch                             ; todo , make all 4 of these 1 call
  56+ 66F3 CD 9E D6                             call    ApplyShipRollAndPitch
  57+ 66F6 CD DF D7                             call    ApplyShipSpeed
  58+ 66F9 CD AA C5                             call    UpdateSpeedAndPitch                             ; update based on rates of speed roll and pitch accelleration/decelleration
  59+ 66FC              ;.. apply ships movement
  60+ 66FC              ;.. If its a space station then see if we are ready to dock........................................................................
  61+ 66FC              .CheckExploding:        IsShipDestroyedOrExploding                              ; fi its destroyed or exploding z flag will be clear
  61+ 66FC 3A 51 C0    >                            ld      a,(UBnKexplDsp)                                 ; is it destroyed
  61+ 66FF E6 A0       >                            and     %10100000                                       ; or exploding
  62+ 6701 C2 18 68                             jp      nz,.ProcessedUniverseSlot                       ; then no action
  63+ 6704              ;.. we can't collide with missiles, they collide with us as part of tactics
  64+ 6704              .CheckIfMissile:        JumpIfMemEqNusng ShipTypeAddr, ShipTypeMissile, .CollisionDone ; Missiles don't have ECM and do collision checks on their tactics phase
  64+ 6704 3A 45 C3    >                        ld  a,(ShipTypeAddr)
  64+ 6707 FE 01       >                        cp  ShipTypeMissile
  64+ 6709 CA DD 67    >                        jp  z,.CollisionDone
  65+ 670C CD 98 C5     .ProcessECM:            call    UpdateECM                                       ; Update ECM Counters
  66+ 670F              .CheckIfClose:          JumpIfShipNotClose .PostCollisionTest
  66+ 670F 2A 20 C0    >.CheckIfClose:              ld      hl,(UBnKxlo)                                    ; chigh byte check or just too far away
  66+ 6712 ED 5B 23 C0 >                            ld      de,(UBnKylo)                                    ; .
  66+ 6716 ED 4B 26 C0 >                            ld      bc,(UBnKzlo)                                    ; .
  66+ 671A B4          >                            or      h                                               ; .
  66+ 671B B2          >                            or      d                                               ; .
  66+ 671C B0          >                            or      b                                               ; .
  66+ 671D C2 DD 67    >                            jp      nz,.PostCollisionTest                               ; .
  66+ 6720 B5          >.CheckLowBit7Close:         or      l                                               ; if bit 7 of low is set then still too far
  66+ 6721 B3          >                            or      e                                               ; .
  66+ 6722 B1          >                            or      c                                               ; .
  66+ 6723 FD 67       >                            ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
  66+ 6725 E6 80       >                            and     $80                                             ; .
  66+ 6727 C2 DD 67    >                            jp      nz,.PostCollisionTest                              ; .
  67+ 672A              .CheckIfDockable:       JumpIfNotDockingCheck .CollisionCheck                   ; check if we are docking or colliding
  67+ 672A 3A 45 C3    >.CheckIfDockable:           ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
  67+ 672D             >                            JumpIfANENusng  ShipTypeStation, .CollisionCheck             ; if its not a station so we don't test docking
  67+ 672D FE 02       >                        cp     ShipTypeStation
  67+ 672F C2 63 67    >                        jp      nz,.CollisionCheck
  67+ 6732             >.IsDockableHostoleCheck:    JumpOnMemBitSet ShipNewBitsAddr, ShipHostileNewBitNbr, .CollisionCheck ; if it is angry then we dont test docking
  67+ 6732 3A 46 C3    >                        ld      a,(ShipNewBitsAddr)
  67+ 6735 CB 57       >                        bit 	ShipHostileNewBitNbr,a
  67+ 6737 C2 63 67    >                        jp      nz,.CollisionCheck
  67+ 673A             >.CheckHighNoseZ:            JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, .CollisionCheck  ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
  67+ 673A 3A 3A C0    >                        ld      a,(UBnkrotmatNosevZ+1)
  67+ 673D FE D6       >                        cp      214
  67+ 673F DA 63 67    >                        jp	  c,.CollisionCheck
  67+ 6742 CD 96 6A    >.GetStationVector:          call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
  67+ 6745             >                            JumpIfALTNusng  89, .CollisionCheck                          ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
  67+ 6745 FE 59       >                        cp      89
  67+ 6747 DA 63 67    >                        jp		c, .CollisionCheck
  67+ 674A 3A 30 C0    >.CheckAbsRoofXHi:           ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
  67+ 674D E6 7F       >                            and     SignMask8Bit                                    ; .
  67+ 674F             >                            JumpIfALTNusng 80, .CollisionCheck                           ; note 80 decimal for 36.6 degrees horizontal
  67+ 674F FE 50       >                        cp      80
  67+ 6751 DA 63 67    >                        jp		c, .CollisionCheck
  68+ 6754              ;.. Its passed all validation and we are docking...................................................................................
  69+ 6754              .WeAreDocking:          MMUSelectLayer1
  69+ 6754 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  70+ 6758 3E 06                                ld        a,$6
  71+ 675A CD A5 E0                             call      l1_set_border
  72+ 675D              .EnterDockingBay:       ForceTransition ScreenDocking                           ;  Force transition
  72+ 675D 3E 0D       >                        ld      a,ScreenDocking
  72+ 675F 32 40 6C    >                        ld      (ScreenTransitionForced), a
  73+ 6762 C9                                   ret                                                     ;  don't bother with other objects
  74+ 6763                                      ; So it is a candiate to test docking. Now we do the position and angle checks
  75+ 6763              ;.. else we are just colliding and have to handle that
  76+ 6763 FD 7D        .CollisionCheck:        ld      a,iyl
  77+ 6765                                      JumpIfAEqNusng ShipTypeStation, .HaveCollided           ; stations dont check bit 6
  77+ 6765 FE 02       >                        cp     ShipTypeStation
  77+ 6767 CA A0 67    >                        jp      z,.HaveCollided
  78+ 676A                                      JumpIfAEqNusng ShipTypeMissile, .PostCollisionTest      ; Missile collisions are done in the tactics code
  78+ 676A FE 01       >                        cp     ShipTypeMissile
  78+ 676C CA DD 67    >                        jp      z,.PostCollisionTest
  79+ 676F              .VeryCloseCheck:        VeryCloseCheck                                          ; bit 6 is still too far
  79+ 676F FD 7C       >                            ld      a,iyh                                           ; bit 6 is still too far
  79+ 6771 E6 C0       >                            and     %11000000
  80+ 6773 20 68                                jr      nz,.PostCollisionTest                            ; .
  81+ 6775 FD 7D        .ScoopableCheck:        ld      a,iyl                                           ; so if its not scoopable
  82+ 6777                                      JumpIfANENusng  ShipTypeScoopable, .HaveCollided        ; then its a collision
  82+ 6777 FE 04       >                        cp     ShipTypeScoopable
  82+ 6779 C2 A0 67    >                        jp      nz,.HaveCollided
  83+ 677C 3A 29 89     .ScoopsEquiped:         ld      a,(FuelScoop)                                   ; if there is no scoop then impact
  84+ 677F                                      JumpIfANENusng  EquipmentItemFitted, .HaveCollided      ; .
  84+ 677F FE FF       >                        cp     EquipmentItemFitted
  84+ 6781 C2 A0 67    >                        jp      nz,.HaveCollided
  85+ 6784 3A 25 C0     .ScoopRegion:           ld      a,(UBnKysgn)                                    ; if the y axis is negative then we are OK
  86+ 6787                                      JumpIfAIsZero   .HaveCollided                           ; else its a collision
  86+ 6787 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  86+ 6788 CA A0 67    >                        jp	    z, .HaveCollided
  87+ 678B CD F8 C6     .CollectedCargo:        call    ShipCargoType
  88+ 678E 57           .DoWeHaveCapacity:      ld      d,a                                             ; save cargotype
  89+ 678F CD 91 87                             call    CanWeScoopCargoD
  90+ 6792 38 03                                jr      c, .NoRoom
  91+ 6794 CD 89 87     .CanScoop:              call    AddCargoTypeD
  92+ 6797              .NoRoom:                ClearSlotMem    SelectedUniverseSlot                    ; we only need to clear slot list as univ ship is now junk
  92+ 6797 3A 62 84    >                        ld      a,(SelectedUniverseSlot)
  92+ 679A CD B3 88    >                        call    ClearSlotA
  93+ 679D C3 DD 67                             jp      .PostCollisionTest
  94+ 67A0              ; ... Generic collision
  95+ 67A0              .HaveCollided:          JumpIfMemLTNusng DELTA, 5, .SmallBump
  95+ 67A0 3A 98 83    >                        ld      a,(DELTA)
  95+ 67A3 FE 05       >                        cp      5
  95+ 67A5 DA B4 67    >                        jp	  c,.SmallBump
  96+ 67A8 3A 58 C0     .BigBump:               ld      a,(UBnKEnergy)                                  ; get energy level which gives us an approximate to size and health
  97+ 67AB                                      SetCarryFlag
  97+ 67AB 37          >                        scf
  98+ 67AC 17                                   rla                                                     ; divide by 2 but also bring in carry so its 128 + energy / 2
  99+ 67AD 47                                   ld      b,a
 100+ 67AE CD 4D DA                             call    KillShip                                        ; mark ship as dead (if possible)
 101+ 67B1 C3 BE 67                             jp      .ApplyDamage
 102+ 67B4 3A 98 83     .SmallBump:             ld      a,(DELTA)                                       ; if out ship speed < 5 then set damage to
 103+ 67B7 47                                   ld      b,a
 104+ 67B8 CD 6F DA                             call    DamageShip                                      ; dent target too  TODO make damge totally proportional to speed
 105+ 67BB C3 BE 67                             jp      .ApplyDamage
 106+ 67BE CD 19 88     .ApplyDamage:           call    SetSpeedZero
 107+ 67C1 3A 28 C0                             ld      a,(UBnKzsgn)                                    ; front or back
 108+ 67C4 E6 80                                and     $80
 109+ 67C6 20 0C                                jr      nz,.HitRear
 110+ 67C8 3A 9A 86                             ld      a,(ForeShield)
 111+ 67CB CD C6 66                             call    ApplyDamage
 112+ 67CE 32 9A 86                             ld      (ForeShield),a
 113+ 67D1 C3 DD 67                             jp      .CollisionDone
 114+ 67D4 3A 9B 86     .HitRear:               ld      a,(AftShield)
 115+ 67D7 CD C6 66                             call    ApplyDamage
 116+ 67DA 32 9B 86                             ld      (AftShield),a
 117+ 67DD              .CollisionDone:
 118+ 67DD              ;.. Now check laser to see if the ship is being shot in sights
 119+ 67DD CD 47 6E     .PostCollisionTest:     call    ShipInSights
 120+ 67E0 30 36                                jr      nc,.ProcessedUniverseSlot                        ; for laser and missile we can check once
 121+ 67E2 3A B3 86                             ld      a,(CurrLaserPulseRate)
 122+ 67E5                                      JumpIfAIsNotZero .CheckForPulse
 122+ 67E5 A7          >                        and     a
 122+ 67E6 C2 F3 67    >                        jp	    nz,.CheckForPulse
 123+ 67E9                                      JumpIfMemFalse FireLaserPressed,     .NoLaser
 123+ 67E9 3A 8C 84    >                        ld      a,(FireLaserPressed)
 123+ 67EC A7          >                        and     a
 123+ 67ED C2 08 68    >                        jp      nz, .NoLaser
 124+ 67F0 C3 FA 67                             jp      .LaserDamage
 125+ 67F3              .CheckForPulse:         JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 125+ 67F3 3A BE 86    >                        ld  a,(CurrLaserPulseOnCount)
 125+ 67F6 A7          >                        and a
 125+ 67F7 CA 08 68    >                        jp  z,.NoLaser
 126+ 67FA 3A B9 86     .LaserDamage:           ld      a,(CurrLaserDamageOutput)
 127+ 67FD CD 6F DA                             call    DamageShip
 128+ 6800 3A 51 C0                             ld      a,(UBnKexplDsp)                                 ; is it destroyed
 129+ 6803 E6 A0                                and     %10100000
 130+ 6805 C2 18 68                             jp      nz,.ProcessedUniverseSlot                       ; can't lock on debris
 131+ 6808              .NoLaser:
 132+ 6808              ; Now check missile lock
 133+ 6808              .PlayerMissileLock:     JumpIfMemNeNusng MissileTargettingFlag, StageMissileTargeting, .ProcessedUniverseSlot
 133+ 6808 3A 9F 86    >                        ld  a,(MissileTargettingFlag)
 133+ 680B FE FE       >                        cp  StageMissileTargeting
 133+ 680D C2 18 68    >                        jp  nz,.ProcessedUniverseSlot
 134+ 6810 3A 62 84     .LockPlayerMissile:     ld      a,(SelectedUniverseSlot)                        ; set to locked and nto launchedd
 135+ 6813                                      LockMissileToA                                          ; .
 135+ 6813 F6 80       >                        or      $80
 135+ 6815 32 9F 86    >                        ld      (MissileTargettingFlag),a
 136+ 6818              .ProcessedUniverseSlot:
 137+ 6818              ;...Tactics Section................................................................................................................
 138+ 6818 3A 62 84     .AreWeReadyForAI:       ld      a,(SelectedUniverseSlot)                        ; get back current slot number
 139+ 681B                                      IsSlotMissile                                           ; Missiles update every iteration
 139+ 681B 21 7C 84    >                        ld      hl,UniverseSlotType
 139+ 681E ED 31       >                        add     hl,a
 139+ 6820 7E          >                        ld      a,(hl)
 139+ 6821 FE 01       >                        cp      ShipTypeMissile
 140+ 6823 CA 63 68                             jp      z,.UpdateMissile                                ; so we bypass the logic check
 141+ 6826              .CheckIfSlotAITurn:     CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 141+ 6826 3A 62 84    >                        ld      a,(SelectedUniverseSlot)
 141+ 6829 21 61 84    >                        ld      hl,CurrentUniverseAI
 141+ 682C BE          >                        cp      (hl)
 141+ 682D CC F1 A2    >                        call    z,UpdateShip
 142+ 6830              .UniverseSlotIsEmpty:
 143+ 6830 3A 62 84     .DoneAICheck:           ld      a,(SelectedUniverseSlot)                        ; Move to next ship in loop
 144+ 6833 3C                                   inc     a                                               ; .
 145+ 6834                                      JumpIfAGTENusng   UniverseSlotListSize, .UpdateAICounter; if we are beyond the loop then update the mast AI counter and we are done
 145+ 6834 FE 0C       >                        cp     UniverseSlotListSize
 145+ 6836 D2 3F 68    >                        jp		nc,.UpdateAICounter
 146+ 6839 32 62 84                             ld      (SelectedUniverseSlot),a                        ; else update loop pointer
 147+ 683C C3 DF 66                             jp      .UpdateUniverseLoop                             ; if there are more to go we continue
 148+ 683F              .UpdateAICounter:       IncMemMaxNCycle CurrentUniverseAI , UniverseSlotListSize
 148+ 683F 3A 61 84    >                        ld      a,(CurrentUniverseAI)
 148+ 6842 3C          >                        inc     a
 148+ 6843 FE 0C       >                        cp      UniverseSlotListSize
 148+ 6845 38 01       >                        jr      c,.IncMaxed
 148+ 6847 AF          >                        xor     a
 148+ 6848 32 61 84    >.IncMaxed:              ld      (CurrentUniverseAI),a
 149+ 684B              .CheckIfStationHostile: ReturnIfMemFalse  SetStationHostileFlag                ; we coudl move this to pre loop so its only done once
 149+ 684B 3A 63 84    >                        ld      a,(SetStationHostileFlag)
 149+ 684E A7          >                        and     a
 149+ 684F C0          >                        ret     nz
 150+ 6850              .CheckSetStationHostile:ReturnIfMemNeNusng UniverseSlotList, ShipTypeStation
 150+ 6850 3A 70 84    >                        ld   a,(UniverseSlotList)
 150+ 6853 FE 02       >                        cp     ShipTypeStation
 150+ 6855 C8          >                        ret    z
 151+ 6856                                      MMUSelectUniverseN 0
 151+ 6856 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 152+ 685A CD 52 C5                             call    SetShipHostile
 153+ 685D                                      SetMemFalse    SetStationHostileFlag
 153+ 685D 3E FF       >                        ld      a,$FF
 153+ 685F 32 63 84    >                        ld      (SetStationHostileFlag),a
 154+ 6862 C9                                   ret
 155+ 6863              .UpdateMissile:         ;break
 156+ 6863 CD F1 A2                             call    UpdateShip                                      ; we do it this way top avoid double calling
 157+ 6866 C3 30 68                             jp      .DoneAICheck                                    ; ai if the ai slot to process = missile type
 158+ 6869              ;..................................................................................................................................
 159+ 6869
 160+ 6869 00 00 00...  SaveUBNK:               DS 3*3
 161+ 6872
 162+ 6872 E5 D5 C5 F5  SavePosition:           push    hl,,de,,bc,,af
 163+ 6876 3A DA 66                             ld      a,(CurrentShipUniv)
 164+ 6879 FE 02                                cp      2
 165+ 687B 20 31                                jr      nz,.DoneSave
 166+ 687D                                      ;break
 167+ 687D 21 20 C0                             ld      hl, UBnKxlo
 168+ 6880 11 69 68                             ld      de, SaveUBNK
 169+ 6883 01 09 00                             ld      bc, 3*3
 170+ 6886 ED B0                                ldir
 171+ 6888 3E 00                                ld      a,0
 172+ 688A 32 24 C0                             ld      (UBnKyhi)  ,a
 173+ 688D 32 21 C0                             ld      (UBnKxhi)  ,a
 174+ 6890 32 27 C0                             ld      (UBnKzhi)  ,a
 175+ 6893 32 22 C0                             ld      (UBnKxsgn) ,a
 176+ 6896 32 25 C0                             ld      (UBnKysgn) ,a
 177+ 6899 32 27 C0                             ld      (UBnKzhi)  ,a
 178+ 689C 32 28 C0                             ld      (UBnKzsgn) ,a
 179+ 689F 3E 05                                ld      a, $5
 180+ 68A1 32 23 C0                             ld      (UBnKylo)  ,a
 181+ 68A4 3E 05                                ld      a, $5
 182+ 68A6 32 20 C0                             ld      (UBnKxlo)  ,a
 183+ 68A9 3E 6E                                ld      a, $6E
 184+ 68AB 32 26 C0                             ld      (UBnKzlo)  ,a
 185+ 68AE F1 C1 D1 E1  .DoneSave:              pop     hl,,de,,bc,,af
 186+ 68B2 C9                                   ret
 187+ 68B3
 188+ 68B3 E5 D5 C5 F5  RestorePosition:        push    hl,,de,,bc,,af
 189+ 68B7 3A DA 66                             ld      a,(CurrentShipUniv)
 190+ 68BA FE 02                                cp      2
 191+ 68BC 20 0B                                jr      nz,.DoneSave
 192+ 68BE                                      ;break
 193+ 68BE 21 69 68                             ld      hl, SaveUBNK
 194+ 68C1 11 20 C0                             ld      de, UBnKxlo
 195+ 68C4 01 09 00                             ld      bc, 3*3
 196+ 68C7 ED B0                                ldir
 197+ 68C9 F1 C1 D1 E1  .DoneSave:              pop     hl,,de,,bc,,af
 198+ 68CD C9                                   ret
 199+ 68CE
 200+ 68CE
 201+ 68CE AF           DrawForwardShips:       xor     a
 202+ 68CF 32 DA 66     .DrawShipLoop:          ld      (CurrentShipUniv),a
 203+ 68D2 CD DC 88                             call    GetTypeAtSlotA
 204+ 68D5 FE FF                                cp      $FF
 205+ 68D7 28 12                                jr      z,.ProcessedDrawShip
 206+ 68D9                                      ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 207+ 68D9 3A DA 66     .SelectShipToDraw:       ld      a,(CurrentShipUniv)
 208+ 68DC                                      MMUSelectUniverseA
 208+ 68DC C6 46       >                     add    a,BankUNIVDATA0
 208+ 68DE ED 92 56    >                     nextreg UniverseMMU,       a
 209+ 68E1                                      IFDEF ROTATIONDEBUG
 210+ 68E1 ~                                        call    SavePosition
 211+ 68E1                                      ENDIF
 212+ 68E1 CD 06 D9     .ProcessUnivShip:       call    ProcessShip          ; The whole explosion logic is now encapsulated in process ship ;TODO TUNE THIS   ;; call    ProcessUnivShip
 213+ 68E4              ; Debris still appears on radar
 214+ 68E4                                      IFDEF ROTATIONDEBUG
 215+ 68E4 ~                                        call    RestorePosition
 216+ 68E4                                      ENDIF
 217+ 68E4              .UpdateRadar:
 218+ 68E4              ;;;Does nothing                       ld      a,BankFrontView
 219+ 68E4              ;;;Does nothing                       MMUSelectScreenA
 220+ 68E4              ;;;Does nothing         ld      a,(CurrentShipUniv)
 221+ 68E4              ;;;Does nothing         MMUSelectUniverseA
 222+ 68E4
 223+ 68E4                                      CallIfMemTrue ConsoleRedrawFlag,UpdateScannerShip ; Always update ship positions
 223+ 68E4 3A 89 84    >                        ld      a,(ConsoleRedrawFlag)
 223+ 68E7 A7          >                        and     a
 223+ 68E8 CC CF 76    >                        call    z, UpdateScannerShip
 224+ 68EB 3A DA 66     .ProcessedDrawShip:     ld      a,(CurrentShipUniv)
 225+ 68EE 3C                                   inc     a
 226+ 68EF                                      JumpIfALTNusng   UniverseSlotListSize, .DrawShipLoop
 226+ 68EF FE 0C       >                        cp      UniverseSlotListSize
 226+ 68F1 DA CF 68    >                        jp		c, .DrawShipLoop
 227+ 68F4              .DrawSunCompass:        MMUSelectSun
 227+ 68F4 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 228+ 68F8 CD EA 72                             call    UpdateCompassSun                ; Always update the sun position
 229+ 68FB CD 4D 75                             call    UpdateScannerSun                ; Always attempt to put the sun on the scanner
 230+ 68FE              .CheckPlanetCompass:    JumpIfMemFalse SpaceStationSafeZone, .DrawStationCompass
 230+ 68FE 3A 8D 84    >                        ld      a,(SpaceStationSafeZone)
 230+ 6901 A7          >                        and     a
 230+ 6902 C2 10 69    >                        jp      nz, .DrawStationCompass
 231+ 6905              .DrawPlanetCompass:     MMUSelectPlanet
 231+ 6905 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 232+ 6909 CD 6A 73                             call    UpdateCompassPlanet
 233+ 690C CD 0E 76                             call    UpdateScannerPlanet
 234+ 690F C9                                   ret
 235+ 6910              .DrawStationCompass:
 236+ 6910
 237+ 6910 C9                                   ret
 238+ 6911
 239+ 6911
 240+ 6911              ;..................................................................................................................................
 241+ 6911
 242+ 6911 3E 46        TestForNextShip:        ld      a,c_Pressed_Quit
 243+ 6913 CD 93 80                             call    is_key_pressed
 244+ 6916 C0                                   ret     nz
 245+ 6917 3A 95 6A                             ld      a,(currentDemoShip)
 246+ 691A 3C                                   inc     a
 247+ 691B FE 2C                                cp      44
 248+ 691D 20 01                                jr      nz,.TestOK
 249+ 691F AF                                   xor     a
 250+ 6920 32 95 6A     .TestOK:                ld      (currentDemoShip),a
 251+ 6923 CD 7A 88                             call    ClearUnivSlotList
 252+ 6926 3A 95 6A                             ld      a,(currentDemoShip)
 253+ 6929 47                                   ld      b,a
 254+ 692A AF                                   xor     a
 255+ 692B CD 91 88                             call    SetSlotAToTypeB
 256+ 692E F5                                   push    af
 257+ 692F                                      MMUSelectUniverseN 2
 257+ 692F ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 258+ 6933                                      SetSlotAToUnivClass
 258+ 6933 08          >                        ex      af,af'
 258+ 6934 3A 45 C3    >                        ld      a,(ShipTypeAddr)
 258+ 6937 47          >                        ld      b,a
 258+ 6938 08          >                        ex      af,af'
 258+ 6939 CD 98 88    >                        call    SetSlotAToClassB
 259+ 693C F1                                   pop     af
 260+ 693D CD 64 C5                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 261+ 6940 3A 95 6A                             ld      a,(currentDemoShip)
 262+ 6943                                      MMUSelectShipBank1
 262+ 6943 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 263+ 6947 CD 0F E0                             call    GetShipBankId
 264+ 694A                                      MMUSelectShipBankA
 264+ 694A ED 92 57    >					 nextreg ShipModelMMU,	    a
 265+ 694D 78                                   ld      a,b
 266+ 694E CD 6A E0                             call    CopyShipToUniverse
 267+ 6951 CD 1C 6E                             call    SetInitialShipPosition
 268+ 6954 CD FD 6A                             call    DEBUGSETNODES
 269+ 6957 C9                                   ret
 270+ 6958
# file closed: ./GameEngine/UpdateUniverseObjects.asm
 268  6958              ;..................................................................................................................................
 269  6958              ;; TODODrawForwardSun:         MMUSelectSun
 270  6958              ;; TODO                        ld      a,(SunKShipType)
 271  6958              ;; TODO.ProcessBody:           cp      129
 272  6958              ;; TODO                        jr      nz,.ProcessPlanet
 273  6958              ;; TODO.ProcessSun:            call    ProcessSun
 274  6958              ;; TODO
 275  6958              ;; TODOProcessSun:             call    CheckSunDistance
 276  6958              ;; TODO
 277  6958              ;; TODO                        ret
 278  6958              ;; TODO.ProcessPlanet:         call    ProcessPlanet
 279  6958              ;; TODO                        ret
 280  6958              ;..................................................................................................................................
 281  6958
 282  6958
 283  6958              ;;;ProcessUnivShip:        call    CheckVisible               ; Will check for negative Z and skip (how do we deal with read and side views? perhaps minsky transformation handles that?)
 284  6958              ;;;                        ret     c
 285  6958              ;;;                        ld      a,(UbnkDrawAsDot)
 286  6958              ;;;                        and     a
 287  6958              ;;;                        jr      z,.CarryOnWithDraw
 288  6958              ;;;.itsJustADot:           ld      bc,(UBnkNodeArray)          ; if its at dot range
 289  6958              ;;;                        ld      a,$FF                       ; just draw a pixel
 290  6958              ;;;                        MMUSelectLayer2                     ; then go to update radar
 291  6958              ;;;                        call    l2_plot_pixel               ;
 292  6958              ;;;                        ClearCarryFlag
 293  6958              ;;;                        ret
 294  6958              ;;;.ProcessShipNodes:      call    ProcessShip
 295  6958              ;;;
 296  6958              ;;;call    ProcessNodes ; it hink here we need the star and planet special cases
 297  6958              ;;;.DrawShip:              call    CullV2				        ; culling but over aggressive backface assumes all 0 up front TOFIX
 298  6958              ;;;                        call    PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 299  6958              ;;;                        ld      a,(CurrentShipUniv)
 300  6958              ;;;                        MMUSelectUniverseA
 301  6958              ;;;                        call   DrawLines
 302  6958              ;;;                        ClearCarryFlag
 303  6958              ;;;                        ret
 304  6958
 305  6958
 306  6958              ;----------------------------------------------------------------------------------------------------------------------------------
 307  6958 49 6E 74 69  InitialiseMessage       DB "Intialising",0
 307  695C 61 6C 69 73
 307  6960 69 6E 67 00
 308  6964 4C 6F 61 64  LoadingSpritesMessage   DB "LoadingSprites",0
 308  6968 69 6E 67 53
 308  696C 70 72 69 74
 308  6970 65 73 00
 309  6973 49 6E 74 69  InitialisingGalaxies    DB "IntiailisingGalaxies",0
 309  6977 61 69 6C 69
 309  697B 73 69 6E 67
 309  697F 47 61 6C 61
 309  6983 78 69 65 73
 309  6987 00
 310  6988 00           LoadCounter             DB 0
 311  6989 2A 00        SpriteProgress          DB "*",0
 312  698B              ;----------------------------------------------------------------------------------------------------------------------------------
 313  698B
 314  698B              NeedAMessageQueue:
 315  698B
 316  698B              ;..................................................................................................................................
 317  698B                                      INCLUDE "./GameEngine/HyperSpaceTimers.asm"
# file opened: ./GameEngine/HyperSpaceTimers.asm
   1+ 698B              ;----------------------------------------------------------------------------------------------------------------------------------
   2+ 698B 3A 66 84     UpdateCountdownNumber:  ld		a,(OuterHyperCount)
   3+ 698E 11 E5 69                             ld		de,Hyp_counter
   4+ 6991 0E 9C                                ld	c, -100
   5+ 6993 CD 9D 69                             call	.Num1
   6+ 6996 0E F6                                ld	c,-10
   7+ 6998 CD 9D 69                             call	.Num1
   8+ 699B 0E FF                                ld	c,-1
   9+ 699D 06 2F        .Num1:	                ld	b,'0'-1
  10+ 699F 04           .Num2:	                inc		b
  11+ 69A0 81                                   add		a,c
  12+ 69A1 38 FC                                jr		c,.Num2
  13+ 69A3 91                                   sub 	c
  14+ 69A4 C5                                   push	bc
  15+ 69A5 F5                                   push	af
  16+ 69A6 79                                   ld		a,c
  17+ 69A7 FE FF                                cp		-1
  18+ 69A9 78                                   ld		a,b
  19+ 69AA 12                                   ld		(de),a
  20+ 69AB 13                                   inc		de
  21+ 69AC F1                                   pop		af
  22+ 69AD C1                                   pop		bc
  23+ 69AE C9                                   ret
  24+ 69AF
  25+ 69AF              ;----------------------------------------------------------------------------------------------------------------------------------
  26+ 69AF 54 6F 3A     Hyp_message             DB "To:"
  27+ 69B2 00 00 00...  Hyp_to                  DS 32
  28+ 69D2 20           Hyp_space1              DB " "
  29+ 69D3 30 2E 30     Hyp_dist_amount         DB "0.0"
  30+ 69D6 2E           Hyp_decimal             DB "."
  31+ 69D7 30           Hyp_fraction            DB "0"
  32+ 69D8 20 4C 59 00  Hyp_dis_ly              DB " LY",0
  33+ 69DC 43 68 61 72  Hyp_charging            DB "Charging:"
  33+ 69E0 67 69 6E 67
  33+ 69E4 3A
  34+ 69E5 30 30 30 00  Hyp_counter             DB "000",0
  35+ 69E9 00 00 00...  Hyp_centeredTarget      DS 32
  36+ 6A09 00           Hyp_centeredEol         DB 0
  37+ 6A0A 00 00 00...  Hyp_bufferpadding       DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  38+ 6A2A 00 00 00...  Hyp_centeredCharging    DS 32
  39+ 6A4A 00           Hyp_centeredEol2        DB 0
  40+ 6A4B 00 00 00...  Hyp_bufferpadding2      DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  41+ 6A6B
  42+ 6A6B
# file closed: ./GameEngine/HyperSpaceTimers.asm
 318  6A6B
 319  6A6B
 320  6A6B
 321  6A6B              ;DisplayTargetAndRange
 322  6A6B              ;DisplayCountDownNumber
 323  6A6B              ;----------------------------------------------------------------------------------------------------------------------------------
 324  6A6B 3A AE 83     TestPauseMode:          ld      a,(GamePaused)
 325  6A6E FE 00                                cp      0
 326  6A70 20 12                                jr      nz,.TestForResume
 327  6A72 3A A5 83     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 328  6A75                                      ReturnIfAGTENusng       ScreenFront
 328  6A75 FE 09       >                        cp    ScreenFront
 328  6A77 D0          >                        ret	 nc
 329  6A78 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 330  6A7A CD 93 80                             call    is_key_pressed
 331  6A7D C0                                   ret     nz
 332  6A7E              .PausePressed:          SetAFalse                                  ; doesn't really matter if we were in pause already as resume is a different key
 332  6A7E 3E FF       >                        ld      a,$FF
 333  6A80 32 AE 83                             ld      (GamePaused),a
 334  6A83 C9                                   ret
 335  6A84 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 336  6A86 CD 93 80                             call    is_key_pressed
 337  6A89 C0                                   ret     nz
 338  6A8A AF           .ResumePressed:         xor     a
 339  6A8B 32 AE 83                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 340  6A8E C9                                   ret
 341  6A8F
 342  6A8F 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 343  6A91 CD 93 80                             call    is_key_pressed
 344  6A94 C9                                   ret
 345  6A95 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 346  6A96
 347  6A96
 348  6A96 21 20 C0     GetStationVectorToWork: ld      hl,UBnKxlo
 349  6A99 11 BC 83                             ld      de,varVector9ByteWork
 350  6A9C ED A0                                ldi
 351  6A9E ED A0                                ldi
 352  6AA0 ED A0                                ldi
 353  6AA2 ED A0                                ldi
 354  6AA4 ED A0                                ldi
 355  6AA6 ED A0                                ldi
 356  6AA8 ED A0                                ldi
 357  6AAA ED A0                                ldi
 358  6AAC ED A0                                ldi
 359  6AAE 2A BC 83     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 360  6AB1 ED 5B BF 83                          ld      de, (varVector9ByteWork+3); Y
 361  6AB5 ED 4B C2 83                          ld      bc, (varVector9ByteWork+6); Z
 362  6AB9 7D                                   ld      a,l
 363  6ABA B3                                   or      e
 364  6ABB B1                                   or      c
 365  6ABC F6 01                                or      1
 366  6ABE DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 367  6AC0 7C                                   ld      a,h
 368  6AC1 B2                                   or      d
 369  6AC2 B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 370  6AC3 C5           .MulBy2Loop:            push    bc
 371  6AC4 DD 45                                ld      b,ixl
 372  6AC6 CB 20                                sla     b                       ; Shift ixl left
 373  6AC8 DD 68                                ld      ixl,b
 374  6ACA C1                                   pop     bc
 375  6ACB CB 17                                rl      a                       ; roll into a
 376  6ACD 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 377  6ACF                                      ShiftHLLeft1                    ; Shift Left X
 377  6ACF CB 25       >			   sla l
 377  6AD1 CB 14       >			   rl  h
 378  6AD3                                      ShiftDELeft1                    ; Shift Left Y
 378  6AD3 CB 23       >			   sla e
 378  6AD5 CB 12       >			   rl  d
 379  6AD7                                      ShiftBCLeft1                    ; Shift Left Z
 379  6AD7 CB 21       >			   sla c
 379  6AD9 CB 10       >			   rl  b
 380  6ADB 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 381  6ADD 3A BE 83     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 382  6AE0 CB 3C                                srl     h
 383  6AE2 B4                                   or      h
 384  6AE3 32 A6 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 385  6AE6 3A C1 83                             ld      a,(varVector9ByteWork+5); y sign
 386  6AE9 CB 3A                                srl     d
 387  6AEB B2                                   or      d
 388  6AEC 32 A7 C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 389  6AEF 3A C4 83                             ld      a,(varVector9ByteWork+8); y sign
 390  6AF2 CB 38                                srl     b
 391  6AF4 B0                                   or      b
 392  6AF5 32 A8 C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 393  6AF8 CD D1 9A                             call    normaliseXX1596S7
 394  6AFB C9                                   ret                          ; will return with a holding Vector Z
 395  6AFC
 396  6AFC 00           TidyCounter             DB  0
 397  6AFD
 398  6AFD                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 6AFD
   2+ 6AFD
   3+ 6AFD 21 20 6B     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 6B00 11 20 C0                             ld      de,UBnKxlo
   5+ 6B03 01 09 00                             ld      bc,9
   6+ 6B06 ED B0                                ldir
   7+ 6B08 21 29 6B                             ld      hl,DEBUGROTMATDATA
   8+ 6B0B 11 29 C0                             ld      de,UBnkrotmatSidevX
   9+ 6B0E 01 12 00                             ld      bc,6*3
  10+ 6B11 ED B0                                ldir
  11+ 6B13 C9                                   ret
  12+ 6B14
  13+ 6B14 21 20 6B     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 6B17 11 20 C0                             ld      de,UBnKxlo
  15+ 6B1A 01 06 00                             ld      bc,9 - 3
  16+ 6B1D ED B0                                ldir
  17+ 6B1F C9                                   ret
  18+ 6B20
  19+ 6B20              ; culltest
  20+ 6B20              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 6B20 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 6B24 00 00 5C 07
  21+ 6B28 00
  22+ 6B29 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 6B2D 00 00
  23+ 6B2F 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 6B33 00 00
  24+ 6B35 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 6B39 00 E0
  25+ 6B3B
  26+ 6B3B              ; FAILS due to sharp angle, OK now
  27+ 6B3B              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 6B3B              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 6B3B              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 6B3B              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 6B3B              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 6B3B              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 6B3B              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 6B3B              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 6B3B              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 6B3B              ; Looks OK
  37+ 6B3B              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 6B3B              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 6B3B              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 6B3B              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 6B3B              ;
  42+ 6B3B              ; Massive horizontal line
  43+ 6B3B              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 6B3B              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 6B3B              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 6B3B              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 6B3B              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 6B3B              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 6B3B              ; Line lost in clipping
  50+ 6B3B              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 6B3B              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 6B3B              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 6B3B              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 6B3B              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 6B3B              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 6B3B              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 6B3B              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 6B3B              ;
  59+ 6B3B              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 6B3B              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 6B3B              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 6B3B              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 6B3B              ; top left off right issue
  64+ 6B3B              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 6B3B              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 6B3B              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 6B3B              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 6B3B              ; test middle of screen
  69+ 6B3B              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 6B3B              ;
  71+ 6B3B              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 6B3B              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 6B3B              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 6B3B              ; test middle of screen futher away
  75+ 6B3B              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 6B3B              ;
  77+ 6B3B              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 6B3B              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 6B3B              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 6B3B
  81+ 6B3B              ; Test left center clip still warping
  82+ 6B3B              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 6B3B              ;
  84+ 6B3B              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 6B3B              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 6B3B              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 6B3B              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 6B3B              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 6B3B              ;
  90+ 6B3B              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 6B3B              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 6B3B              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 6B3B              ; Test top center clip test 1 - good test many ships fail
  94+ 6B3B              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 6B3B              ;
  96+ 6B3B              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 6B3B              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 6B3B              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 6B3B              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 6B3B              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 6B3B              ;
 102+ 6B3B              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 6B3B              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 6B3B              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 6B3B              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 6B3B              ; looks better now may have some clipping issues maybe ship data
 107+ 6B3B              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 6B3B              ;
 109+ 6B3B              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 6B3B              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 6B3B E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 6B3F B0 55
 112+ 6B41              ; Test left top center clip
 113+ 6B41
 114+ 6B41              ; Test right top center clip
 115+ 6B41              ; Test left bottom center clip
 116+ 6B41              ; Test right bottom center clip
 117+ 6B41
 118+ 6B41              ; Tests with no clip
 119+ 6B41              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 6B41              ;
 121+ 6B41              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 6B41              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 6B41              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 6B41              ;
 125+ 6B41              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 6B41              ;
 127+ 6B41              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 6B41              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 6B41
# file closed: ./debugMatrices.asm
 399  6B41
 400  6B41
 401  6B41              ;TODO Optimisation
 402  6B41              ; Need this table to handle differnet events
 403  6B41              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 404  6B41              ; cursor key, joystick press
 405  6B41              ; cursor key, joystick press
 406  6B41              ; non cursor keys presses
 407  6B41              ;
 408  6B41                                      INCLUDE "./Tables/ScreenControlTable.asm"
# file opened: ./Tables/ScreenControlTable.asm
   1+ 6B41              ; First byte is now docked flag
   2+ 6B41              ;
   3+ 6B41              ; Padded to 8 bytes to allow a * 8 for addressing
   4+ 6B41              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
   5+ 6B41              ; Byte 1   - Screen Id
   6+ 6B41              ; Byte 2,3 - address of keypress table
   7+ 6B41              ; Byte 4   - Bank with Display code
   8+ 6B41              ; Byte 5,6 - Function for display
   9+ 6B41              ; Byte 7,8 - Main loop update routine
  10+ 6B41              ; Byte 9   - Draw stars Y/N ; also are we in an external view that can have guns?
  11+ 6B41              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
  12+ 6B41              ; byte 11  - Double Buffering 0 = no, 1 = yes
  13+ 6B41              ; byte 12,13  - cursor key input routine
  14+ 6B41              ; byte 14  - HyperspaceBlock - can not select this screen if in hyperpace - 00 can , 01 can not
  15+ 6B41              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
  16+ 6B41              ; byte 16  - block update ship
  17+ 6B41              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15  16
  18+ 6B41 00 00 E4 7F  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $01,$00,$00;low loop_local_chart_menu,   high loop_local_chart_menu
  18+ 6B45 32 FC C3 00
  18+ 6B49 00 00 00 00
  18+ 6B4D 5A C4 01 00
  18+ 6B51 00
  19+ 6B52 00 01 E2 7F  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $01,$00,$00
  19+ 6B56 33 48 C1 78
  19+ 6B5A C2 00 00 00
  19+ 6B5E 00 C3 01 00
  19+ 6B62 00
  20+ 6B63 01 02 E6 7F                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $01,$00,$00
  20+ 6B67 36 43 C3 FA
  20+ 6B6B C3 00 00 00
  20+ 6B6F 00 00 01 00
  20+ 6B73 00
  21+ 6B74 02 03 E6 7F                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00
  21+ 6B78 36 43 C3 00
  21+ 6B7C 00 00 00 00
  21+ 6B80 00 00 01 00
  21+ 6B84 00
  22+ 6B85 00 04 E8 7F  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $01,$00,$00
  22+ 6B89 3F 2D CF 76
  22+ 6B8D CF 00 00 00
  22+ 6B91 00 00 01 00
  22+ 6B95 00
  23+ 6B96 00 05 EA 7F                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00
  23+ 6B9A 34 F5 C1 00
  23+ 6B9E 00 00 00 00
  23+ 6BA2 00 00 01 00
  23+ 6BA6 00
  24+ 6BA7 00 06 F8 7F                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00
  24+ 6BAB 35 F0 C2 00
  24+ 6BAF 00 00 00 00
  24+ 6BB3 00 00 01 00
  24+ 6BB7 00
  25+ 6BB8 01 07 E0 7F                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $01,$00,$00
  25+ 6BBC 40 EA D3 86
  25+ 6BC0 D4 00 00 00
  25+ 6BC4 00 00 01 00
  25+ 6BC8 00
  26+ 6BC9 01 08 DA 7F                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00,$FF
  26+ 6BCD 41 79 C1 63
  26+ 6BD1 C2 00 01 01
  26+ 6BD5 00 00 01 00
  26+ 6BD9 FF
  27+ 6BDA 02 09 B0 7F  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          low update_front_view,high update_front_view, $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00,$00
  27+ 6BDE 3E 6A C0 D2
  27+ 6BE2 C0 01 00 01
  27+ 6BE6 E4 C2 00 00
  27+ 6BEA 00
  28+ 6BEB 02 0A B0 7F                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00,$00
  28+ 6BEF 3E 6A C0 00
  28+ 6BF3 00 01 00 01
  28+ 6BF7 E4 C2 00 00
  28+ 6BFB 00
  29+ 6BFC 02 0B B0 7F                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00,$00
  29+ 6C00 3E 6A C0 00
  29+ 6C04 00 01 00 01
  29+ 6C08 E4 C2 00 00
  29+ 6C0C 00
  30+ 6C0D 02 0C B0 7F                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00,$00
  30+ 6C11 3E 6A C0 00
  30+ 6C15 00 01 00 01
  30+ 6C19 E4 C2 00 00
  30+ 6C1D 00
  31+ 6C1E 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $01,$00,$FF
  31+ 6C22 41 F5 C1 98
  31+ 6C26 C2 00 01 01
  31+ 6C2A 00 00 01 00
  31+ 6C2E FF
  32+ 6C2F 01 0E FF FF                          DB 1,   ScreenHyperspace, $FF,                           $FF,                            BankFrontView,       low draw_hyperspace,         high draw_hyperspace,          low loop_hyperspace,  high loop_hyperspace,   $00,$01,$01,$00,                        $00,                        $01,$00,$FF
  32+ 6C33 3E 9C C2 E2
  32+ 6C37 C2 00 01 01
  32+ 6C3B 00 00 01 00
  32+ 6C3F FF
  33+ 6C40
  34+ 6C40              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  35+ 6C40              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  36+ 6C40              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  37+ 6C40              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
  38+ 6C40              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
  39+ 6C40              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
  40+ 6C40              ScreenCount         EQU 15
  41+ 6C40
# file closed: ./Tables/ScreenControlTable.asm
 409  6C40
 410  6C40 FF           ScreenTransitionForced  DB $FF
 411  6C41                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 6C41              ; Use bank 0 as source and bank 7 as write target
   2+ 6C41              ResetUniv:              MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   2+ 6C41 ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   3+ 6C45 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
   4+ 6C47 06 0C                                ld		b,12
   5+ 6C49 C5 F5        .ResetCopyLoop:         push	bc,,af
   6+ 6C4B                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
   6+ 6C4B C6 46       >                     add    a,BankUNIVDATA0
   6+ 6C4D ED 92 56    >                     nextreg UniverseMMU,       a
   7+ 6C50 21 00 C0                             ld		hl,UniverseBankAddr
   8+ 6C53 11 00 00                             ld		de,dmaCopySrcAddr
   9+ 6C56 01 C2 1B                             ld		bc,UnivBankSize
  10+ 6C59 CD 54 7F                             call	memcopy_dma
  11+ 6C5C F1 C1                                pop		bc,,af
  12+ 6C5E 57                                   ld      d,a
  13+ 6C5F C6 41                                add     "A"
  14+ 6C61 32 0B C0                             ld      (StartOfUnivN),a
  15+ 6C64 7A                                   ld      a,d
  16+ 6C65 3C                                   inc		a
  17+ 6C66 10 E1                                djnz	.ResetCopyLoop
  18+ 6C68 C9                                   ret
  19+ 6C69
  20+ 6C69              ; Use bank 0 as source and bank 7 as write target
  21+ 6C69              ResetGalaxy:            MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0 we can read bank 0 as if it was rom
  21+ 6C69 ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  22+ 6C6D 3E 5C                                ld		a,BankGalaxyData1 			   	 ; and write to real location for galaxy data
  23+ 6C6F 06 07                                ld		b,7                              ; 8 galaxies but we start with galaxy 0
  24+ 6C71 0E 01                                ld      c,1                              ;
  25+ 6C73 F5           .ResetCopyLoop:         push	af                               ;
  26+ 6C74 C5                                   push	bc                               ;
  27+ 6C75                                      MMUSelectGalaxyA    	                 ; copy from bank 0 to galaxy 1 to 7
  27+ 6C75 ED 92 57    >                     nextreg GalaxyDataMMU,     a
  28+ 6C78 21 00 E0                             ld		hl,GalaxyDataAddr                ; using dma transfer
  29+ 6C7B 11 00 00                             ld		de,dmaCopySrcAddr                ; .
  30+ 6C7E 01 DC 1C                             ld		bc,GalaxyBankSize                ; .
  31+ 6C81 CD 54 7F                             call	memcopy_dma                      ; .
  32+ 6C84 C1                                   pop		bc                               ; .
  33+ 6C85 21 0F E0                             ld      hl, galaxy_pg_cnt                ; write out the galaxy page nbr to the page so we can diagnose page swapping
  34+ 6C88 79                                   ld      a,c                              ;
  35+ 6C89 C6 30                                add     a, $30                           ; add $30 (48) to get ascii of galaxy nbr
  36+ 6C8B 77                                   ld      (hl),a                           ; .
  37+ 6C8C 0C                                   inc     c                                ; Do next bank
  38+ 6C8D F1                                   pop     af                               ; .
  39+ 6C8E 3C                                   inc		a                                ; .
  40+ 6C8F 10 E2                                djnz	.ResetCopyLoop                    ; .
  41+ 6C91 C9                                   ret
  42+ 6C92
  43+ 6C92 06 08        SeedAllGalaxies:        ld          b,8
  44+ 6C94 0E 5B                                ld          c,BankGalaxyData0
  45+ 6C96 C5           .SeedAllGalaxiesLoop:   push        bc
  46+ 6C97 79                                   ld          a,c
  47+ 6C98                                      MMUSelectGalaxyA
  47+ 6C98 ED 92 57    >                     nextreg GalaxyDataMMU,     a
  48+ 6C9B CD 9F FC                             call        SeedGalaxy
  49+ 6C9E C1                                   pop         bc
  50+ 6C9F 0C                                   inc         c
  51+ 6CA0 10 F4                                djnz        .SeedAllGalaxiesLoop
  52+ 6CA2 C9                                   ret
# file closed: ./GameEngine/resetUniverse.asm
 412  6CA3
 413  6CA3
 414  6CA3              ;----------------------------------------------------------------------------------------------------------------------------------
 415  6CA3              LaunchedFromStation:    MMUSelectSun
 415  6CA3 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 416  6CA7 CD 85 C2                             call    CreateSunLaunched                   ; create the local sun and set position based on seed
 417  6CAA                                      MMUSelectPlanet
 417  6CAA ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 418  6CAE CD E2 C0                             call    CreatePlanetLaunched
 419  6CB1 CD 7A 88                             call    ClearUnivSlotList
 420  6CB4 CD 86 88                             call    SetSlot0ToSpaceStation              ; set slot 1 to space station
 421  6CB7                                      MMUSelectUniverseN 0                        ; Prep Target universe
 421  6CB7 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 422  6CBB                                      MMUSelectShipBank1                          ; Bank in the ship model code
 422  6CBB ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 423  6CBF FD 26 00                             ld      iyh,0                               ; Zero ship runtime data
 424  6CC2 FD 2E 02                             ld      iyl,ShipTypeStation                 ; and mark as spece station
 425  6CC5 CD 5D C7                             call    UnivInitRuntime                     ; its always slot 0
 426  6CC8 3E 0D                                ld      a,CoriloisStation
 427  6CCA CD 0F E0                             call    GetShipBankId
 428  6CCD                                      MMUSelectShipBankA                          ; Select the correct bank found
 428  6CCD ED 92 57    >					 nextreg ShipModelMMU,	    a
 429  6CD0 78                                   ld      a,b                                 ; Select the correct ship
 430  6CD1 CD 6A E0                             call    CopyShipToUniverse
 431  6CD4 CD 26 C7     .BuiltStation:          call    ResetStationLaunch
 432  6CD7                                      IFDEF DEBUGMISSILETEST
 433  6CD7 3E 00                                    ld      a,0
 434  6CD9 32 48 C0                                 ld      (UBnKRotXCounter),a             ; kill station roll
 435  6CDC
 436  6CDC 3E 29        .TestMissileTarget:         ld      a,ShipID_Viper
 437  6CDE CD 63 66                                 call    SpawnShipTypeA                      ; call rather than jump, returns with a = slot number
 438  6CE1                                          ZeroA
 438  6CE1 AF          >                        xor a
 439  6CE2 32 46 C0                                 ld      (UBnKSpeed),a
 440  6CE5 3E 80                                    ld      a,$80
 441  6CE7 32 22 C0                                 ld      (UBnKxsgn),a
 442  6CEA                                          ;ld      a,$80
 443  6CEA                                          ZeroA
 443  6CEA AF          >                        xor a
 444  6CEB 32 25 C0                                 ld      (UBnKysgn),a
 445  6CEE 3E 80                                    ld      a,$80
 446  6CF0                                         ZeroA
 446  6CF0 AF          >                        xor a
 447  6CF1 32 28 C0                                 ld      (UBnKzsgn),a
 448  6CF4 3E 60                                    ld      a,$60
 449  6CF6                                          ZeroA
 449  6CF6 AF          >                        xor a
 450  6CF7 32 20 C0                                 ld      (UBnKxlo),a
 451  6CFA 3E 10                                    ld      a,$10
 452  6CFC                                          ;ZeroA
 453  6CFC 32 21 C0                                 ld      (UBnKxhi),a
 454  6CFF 3E 60                                    ld      a,$60
 455  6D01                                          ;ZeroA
 456  6D01 32 23 C0                                 ld      (UBnKylo),a
 457  6D04 3E 1B                                    ld      a,$1B
 458  6D06                                          ;ZeroA
 459  6D06 32 24 C0                                 ld      (UBnKyhi),a
 460  6D09                                          ZeroA
 460  6D09 AF          >                        xor a
 461  6D0A 32 26 C0                                 ld      (UBnKzlo),a
 462  6D0D 3E 2B                                    ld      a,$2B
 463  6D0F 32 27 C0                                 ld      (UBnKzhi),a
 464  6D12                                      ENDIF
 465  6D12 3E 00        .NowInFlight:           ld      a,StateNormal
 466  6D14 32 AD 83                             ld      (DockedFlag),a
 467  6D17                                      ForceTransition ScreenFront
 467  6D17 3E 09       >                        ld      a,ScreenFront
 467  6D19 32 40 6C    >                        ld      (ScreenTransitionForced), a
 468  6D1C CD 3E 87                             call    ResetPlayerShip
 469  6D1F                                      IFDEF DEBUGMISSILETEST
 470  6D1F 3E 01                                    ld  a,1
 471  6D21                                          LockMissileToA
 471  6D21 F6 80       >                        or      $80
 471  6D23 32 9F 86    >                        ld      (MissileTargettingFlag),a
 472  6D26                                      ENDIF
 473  6D26 C9                                   ret
 474  6D27
 475  6D27 3A 86 6B     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 476  6D2A C3 36 6D                             jp      SetScreenA
 477  6D2D
 478  6D2D 3A DB 6B     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 479  6D30 C3 36 6D                             jp      SetScreenA
 480  6D33              ; false ret here as we get it free from jp
 481  6D33              ;----------------------------------------------------------------------------------------------------------------------------------
 482  6D33                                      INCLUDE "./GameEngine/SetScreenA.asm"
# file opened: ./GameEngine/SetScreenA.asm
   1+ 6D33              ; SetScreenA.asm
   2+ 6D33              ;----------------------------------------------------------------------------------------------------------------------------------
   3+ 6D33 C3 33 6D     InvalidScreenBlock:     jp     InvalidScreenBlock
   4+ 6D36              SetScreenA:             JumpIfAGTENusng ScreenCount, InvalidScreenBlock
   4+ 6D36 FE 0F       >                        cp     ScreenCount
   4+ 6D38 D2 33 6D    >                        jp		nc,InvalidScreenBlock
   5+ 6D3B 32 A5 83     .SetUpIndex:            ld      (ScreenIndex),a                 ; Set screen index to a
   6+ 6D3E 57           .SetUpIX:               ld      d,a
   7+ 6D3F 1E 11                                ld      e,ScreenMapRow
   8+ 6D41 ED 30                                mul
   9+ 6D43 DD 21 41 6B                          ld      ix,ScreenKeyMap
  10+ 6D47 DD 19                                add     ix,de
  11+ 6D49 DD 22 A6 83                          ld      (ScreenIndexTablePointer),ix    ; optimises later fetches
  12+ 6D4D                                      ClearForceTransition                    ; In case it was called by a brute force change in an update loop
  12+ 6D4D 3E FF       >                        ld      a,$FF
  12+ 6D4F 32 40 6C    >                        ld      (ScreenTransitionForced),a
  13+ 6D52 32 A4 83                             ld      (ScreenChanged),a               ; Set screen changed to FF
  14+ 6D55 DD 7E 09     .IsItAViewPort:         ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N and also guns present
  15+ 6D58 32 DB 63                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
  16+ 6D5B                                      JumpIfAIsZero .NotViewPort              ;
  16+ 6D5B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  16+ 6D5C CA 6B 6D    >                        jp	    z, .NotViewPort
  17+ 6D5F DD 7E 01                             ld      a,(ix+1)                        ; get screen view number
  18+ 6D62 D6 09                                sub     ScreenFront                     ; Now a = screen number 0 = front, 1 = aft, 2 = left 3 = right
  19+ 6D64                                      MMUSelectCommander                      ; Load view laser to current
  19+ 6D64 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  20+ 6D68 CD FE E2                             call    LoadLaserToCurrent              ;
  21+ 6D6B DD 7E 04     .NotViewPort:           ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
  22+ 6D6E 32 77 64                             ld      (ScreenLoopBank+1),a            ; setup loop
  23+ 6D71 32 A3 63                             ld      (HandleBankSelect+1),a          ; setup cursor keys
  24+ 6D74                                      MMUSelectScreenA
  24+ 6D74 ED 92 56    >                     nextreg ScreenBankMMU,		a
  25+ 6D77 DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 & 6 - Function for display initialisation
  26+ 6D7A 32 AE 6D                             ld      (ScreenUpdateAddr+1),a          ; .
  27+ 6D7D DD 7E 06                             ld      a,(ix+6)                        ; .
  28+ 6D80 32 AF 6D                             ld      (ScreenUpdateAddr+2),a          ; .
  29+ 6D83 DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 & 8 - Main loop update routine
  30+ 6D86 32 7C 64                             ld      (ScreenLoopJP+1),a              ; .
  31+ 6D89 DD 7E 08                             ld      a,(ix+8)                        ; .
  32+ 6D8C 32 7D 64                             ld      (ScreenLoopJP+2),a              ; .
  33+ 6D8F DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
  34+ 6D92 32 7D 63                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
  35+ 6D95 DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
  36+ 6D98 32 A6 66                             ld      (DoubleBufferCheck+1),a
  37+ 6D9B DD 7E 0C                             ld      a,(ix+12)
  38+ 6D9E 32 A8 63                             ld      (CallCursorRoutine+1),a
  39+ 6DA1 DD 7E 0D                             ld      a,(ix+13)
  40+ 6DA4 32 A9 63                             ld      (CallCursorRoutine+2),a
  41+ 6DA7 DD 7E 10                             ld      a,(ix+16)
  42+ 6DAA 32 CD 63                             ld      (UpdateShipsControl+1),a       ; determin if we call update universe objects in this screen
  43+ 6DAD C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
  44+ 6DB0
# file closed: ./GameEngine/SetScreenA.asm
 483  6DB0                                      INCLUDE "./GameEngine/ViewKeyTest.asm"
# file opened: ./GameEngine/ViewKeyTest.asm
   1+ 6DB0 3A A5 83     ViewKeyTest:            ld      a,(ScreenIndex)
   2+ 6DB3 4F                                   ld      c,a
   3+ 6DB4 06 0F                                ld      b,ScreenMapLen                  ; For now until add screens are added
   4+ 6DB6 DD 21 41 6B                          ld      ix,ScreenKeyMap                 ; IX = table head for scanning
   5+ 6DBA 2A 65 84                             ld      hl,(InnerHyperCount)
   6+ 6DBD 7C                                   ld      a,h
   7+ 6DBE B5                                   or      l
   8+ 6DBF FD 67                                ld      iyh,a
   9+ 6DC1 FD 7C        ViewScanLoop:           ld      a,iyh
  10+ 6DC3 A7           .HyperspaceCountdown:   and     a
  11+ 6DC4 28 08                                jr      z,.CheckDockedFlag
  12+ 6DC6 DD 7E 0E                             ld      a,(ix+14)
  13+ 6DC9 FE 01                                cp      1
  14+ 6DCB CA 14 6E                             jp      z,NotReadNextKey
  15+ 6DCE DD 7E 00     .CheckDockedFlag:       ld      a,(ix+0)                        ; Screen Map Byte 0 Docked keyboard read flag
  16+ 6DD1              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
  17+ 6DD1                                      JumpIfAEqNusng 3, NotReadNextKey        ; No keypress allowed at all (e.g. in hyperspace)
  17+ 6DD1 FE 03       >                        cp     3
  17+ 6DD3 CA 14 6E    >                        jp      z,NotReadNextKey
  18+ 6DD6                                      JumpIfAIsZero    .CanReadKey            ; if its the skip check for docking status
  18+ 6DD6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  18+ 6DD7 CA F1 6D    >                        jp	    z, .CanReadKey
  19+ 6DDA 57           .DocCheck:              ld      d,a                             ; save ix+0 value
  20+ 6DDB                                      JumpIfMemEqNusng DockedFlag, StateNormal, .NotDockedCheck ; if we are not in a docked state the we ar egood
  20+ 6DDB 3A AD 83    >                        ld  a,(DockedFlag)
  20+ 6DDE FE 00       >                        cp  StateNormal
  20+ 6DE0 CA EB 6D    >                        jp  z,.NotDockedCheck
  21+ 6DE3 7A           .DockedCheck:           ld      a,d                             ; we are docked so only ix+0 value of 1 is allowed
  22+ 6DE4                                      JumpIfANENusng 1, NotReadNextKey        ; if we are docked and its not 1 then don't read
  22+ 6DE4 FE 01       >                        cp     1
  22+ 6DE6 C2 14 6E    >                        jp      nz,NotReadNextKey
  23+ 6DE9 18 06                                jr      .CanReadKey                     ; we can now scan as normal  as its 2 and docked
  24+ 6DEB 7A           .NotDockedCheck:        ld      a,d                             ; if we are not docked then code 2 is not keyscan allowed
  25+ 6DEC                                      JumpIfANENusng 2,NotReadNextKey
  25+ 6DEC FE 02       >                        cp     2
  25+ 6DEE C2 14 6E    >                        jp      nz,NotReadNextKey
  26+ 6DF1 DD 7E 01     .CanReadKey:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
  27+ 6DF4 B9                                   cp      c                               ; is the index the current screen, if so skip the scan
  28+ 6DF5 5F                                   ld      e,a
  29+ 6DF6 28 1C                                jr      z,NotReadNextKey                ; we cant transition to current screen
  30+ 6DF8 DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
  31+ 6DFB FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
  32+ 6DFD 28 15                                jr      z,NotReadNextKey
  33+ 6DFF 32 0A 6E                             ld      (ReadKeyAddr+2),a               ; Poke address into the ld hl,(....) below
  34+ 6E02 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
  35+ 6E05 32 09 6E                             ld      (ReadKeyAddr+1),a
  36+ 6E08 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
  37+ 6E0B 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
  38+ 6E0C                                      JumpIfAIsZero NotReadNextKey
  38+ 6E0C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38+ 6E0D CA 14 6E    >                        jp	    z, NotReadNextKey
  39+ 6E10 7B           .ValidScreenChange:     ld      a,e                             ; entering here e= current screen search number
  40+ 6E11 C3 36 6D                             jp      SetScreenA
  41+ 6E14              ;--- CODE WILL NOT FALL TO HERE ---
  42+ 6E14 11 11 00     NotReadNextKey:         ld      de,ScreenMapRow
  43+ 6E17 DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
  44+ 6E19 10 A6                                djnz    ViewScanLoop
  45+ 6E1B C9                                   ret
  46+ 6E1C
# file closed: ./GameEngine/ViewKeyTest.asm
 484  6E1C              ;----------------------------------------------------------------------------------------------------------------------------------
 485  6E1C 21 00 00     SetInitialShipPosition: ld      hl,$0000
 486  6E1F 22 20 C0                             ld      (UBnKxlo),hl
 487  6E22 21 00 00                             ld      hl,$0000
 488  6E25 22 23 C0                             ld      (UBnKylo),hl
 489  6E28 21 B4 03                             ld      hl,$03B4
 490  6E2B 22 26 C0                             ld      (UBnKzlo),hl
 491  6E2E AF                                   xor     a
 492  6E2F 32 22 C0                             ld      (UBnKxsgn),a
 493  6E32 32 25 C0                             ld      (UBnKysgn),a
 494  6E35 32 28 C0                             ld      (UBnKzsgn),a
 495  6E38              ;    call    Reset TODO
 496  6E38 CD DB C7                             call	InitialiseOrientation            ;#00;
 497  6E3B 3E 01                                ld      a,1
 498  6E3D 32 98 83                             ld      (DELTA),a
 499  6E40 21 04 00                             ld      hl,4
 500  6E43 22 99 83                             ld      (DELTA4),hl
 501  6E46 C9                                   ret
 502  6E47
 503  6E47              ; Checks to see if current ship swapped in is in our sights
 504  6E47              ; we don;t need to deal with planets or sun as they have their own memory bank
 505  6E47              ShipInSights:           ClearCarryFlag                          ; Carry clear no hit
 505  6E47 B7          >                        or a
 506  6E48                                      ReturnIfMemIsNegative UBnKzsgn
 506  6E48 3A 28 C0    >                        ld      a,(UBnKzsgn)
 506  6E4B E6 80       >                        and     $80
 506  6E4D C0          >                        ret     nz
 507  6E4E 3A 51 C0                             ld      a,(UBnKexplDsp)                 ; get exploding flag and or with x and y high
 508  6E51 2A 20 C0                             ld      hl,(UBnKxlo)                    ; do 16 bit fetch as we will often need both bytes
 509  6E54 ED 4B 23 C0                          ld      bc,(UBnKylo)                    ; .
 510  6E58 B4                                   or      h
 511  6E59 B0                                   or      b
 512  6E5A C0                                   ret     nz                              ; if exploding or x hi or y hi are set then its nto targetable
 513  6E5B 7D                                   ld      a,l                             ; hl =xlo ^ 2
 514  6E5C                                      DEEquSquareA                            ; .
 514  6E5C 57          >                        ld  d,a
 514  6E5D 5F          >                        ld  e,a
 514  6E5E ED 30       >                        mul de
 515  6E60 62 6B                                ld      hl,de                           ; .
 516  6E62 79                                   ld      a,c                             ; de = de = ylo ^ 2
 517  6E63                                      DEEquSquareA                            ; .
 517  6E63 57          >                        ld  d,a
 517  6E64 5F          >                        ld  e,a
 517  6E65 ED 30       >                        mul de
 518  6E67 19                                   add     hl,de                           ; hl = xlo ^ 2 + ylo ^ 2
 519  6E68 D8                                   ret     c                               ; if there was a carry then out of line of sight
 520  6E69 ED 5B 2F C3                          ld      de,(MissileLockLoAddr)          ; get targettable area ^ 2 from blueprint copy
 521  6E6D                                      cpHLDE                                  ; now compare x^2 + y^2 to target area
 521  6E6D E5          >                        push    hl
 521  6E6E A7          >                        and     a
 521  6E6F ED 52       >                        sbc     hl,de
 521  6E71 E1          >                        pop     hl
 522  6E72 28 01                                jr      z,.EdgeHit                      ; if its an edge hit then we need to set carry
 523  6E74 C9                                   ret                                     ; if its < area then its a hit and carry is set, we will not work on =
 524  6E75              .EdgeHit:               SetCarryFlag                            ; its an edge hit then we need to set carry
 524  6E75 37          >                        scf
 525  6E76 C9                                   ret
 526  6E77
 527  6E77
 528  6E77                          INCLUDE "./Views/ConsoleDrawing.asm"
# file opened: ./Views/ConsoleDrawing.asm
   1+ 6E77              ; bc = start position, d = length, e = colour
   2+ 6E77              ;                        DEFINE MISSILEDIAGNOSTICS 1
   3+ 6E77 1E 10        Draw3LineBar:           ld      e,16
   4+ 6E79 C5 D5                                push    bc,,de
   5+ 6E7B                                      MMUSelectLayer2
   5+ 6E7B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   6+ 6E7F CD B3 E2                             call    l2_draw_horz_line
   7+ 6E82 D1 C1                                pop     bc,,de
   8+ 6E84 05                                   dec     b
   9+ 6E85 C5 D5                                push    bc,,de
  10+ 6E87 1E 14                                ld      e,20
  11+ 6E89                                      MMUSelectLayer2
  11+ 6E89 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  12+ 6E8D CD B3 E2                             call    l2_draw_horz_line
  13+ 6E90 D1 C1                                pop     bc,,de
  14+ 6E92 05                                   dec     b
  15+ 6E93                                      MMUSelectLayer2
  15+ 6E93 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16+ 6E97 CD B3 E2                             call    l2_draw_horz_line
  17+ 6E9A C9                                   ret
  18+ 6E9B
  19+ 6E9B 1E 7C        DrawColourCodedBar:     ld      e,124
  20+ 6E9D FE 28                                cp      40
  21+ 6E9F 30 18                                jr      nc,DrawColourEBar
  22+ 6EA1 1E 54                                ld      e,84
  23+ 6EA3 FE 1E                                cp      30
  24+ 6EA5 30 12                                jr      nc,DrawColourEBar
  25+ 6EA7 1E D8                                ld      e,216
  26+ 6EA9 FE 14                                cp      20
  27+ 6EAB 1E EC                                ld      e,236
  28+ 6EAD FE 0A                                cp      10
  29+ 6EAF 30 08                                jr      nc,DrawColourEBar
  30+ 6EB1 1E E1                                ld      e,225
  31+ 6EB3 FE 05                                cp      5
  32+ 6EB5 30 02                                jr      nc,DrawColourEBar
  33+ 6EB7 1E E0                                ld      e,224
  34+ 6EB9 C5 D5        DrawColourEBar:         push    bc,,de
  35+ 6EBB                                      MMUSelectLayer2
  35+ 6EBB ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  36+ 6EBF CD B3 E2                             call    l2_draw_horz_line
  37+ 6EC2 D1 C1                                pop     bc,,de
  38+ 6EC4 05                                   dec     b
  39+ 6EC5 C5 D5                                push    bc,,de
  40+ 6EC7                                      MMUSelectLayer2
  40+ 6EC7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  41+ 6ECB CD B3 E2                             call    l2_draw_horz_line
  42+ 6ECE D1 C1                                pop     bc,,de
  43+ 6ED0 05                                   dec     b
  44+ 6ED1                                      MMUSelectLayer2
  44+ 6ED1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  45+ 6ED5 CD B3 E2                             call    l2_draw_horz_line
  46+ 6ED8 C9                                   ret
  47+ 6ED9
  48+ 6ED9                                      ; no ret needed as jp handles it
  49+ 6ED9
  50+ 6ED9 16 50        MissileDiagPositive:    ld      d,"P"
  51+ 6EDB CD 77 E1                             call    l2_print_chr_at
  52+ 6EDE C9                                   ret
  53+ 6EDF
  54+ 6EDF 16 4E        MissileDiagNegative:    ld      d,"N"
  55+ 6EE1 CD 77 E1                             call    l2_print_chr_at
  56+ 6EE4 C9                                   ret
  57+ 6EE5
  58+ 6EE5 16 5A        MissileDiagZero:        ld      d,"Z"
  59+ 6EE7 CD 77 E1                             call    l2_print_chr_at
  60+ 6EEA C9                                   ret
  61+ 6EEB
  62+ 6EEB 1E FF        MissileValue:           ld      e,$FF
  63+ 6EED FE 00                                cp      0
  64+ 6EEF F5                                   push    af
  65+ 6EF0 CC E5 6E                             call    z,MissileDiagZero
  66+ 6EF3 F1                                   pop     af
  67+ 6EF4 C8                                   ret     z
  68+ 6EF5 CB 7F                                bit     7,a
  69+ 6EF7 F5                                   push    af
  70+ 6EF8 CC DF 6E                             call    z,MissileDiagNegative
  71+ 6EFB F1                                   pop     af
  72+ 6EFC C8                                   ret     z
  73+ 6EFD C4 D9 6E                             call    nz,MissileDiagPositive
  74+ 6F00 C9                                   ret
  75+ 6F01
  76+ 6F01 30 31 32 33  Hex2Char:       DB "0123456789ABCDEF"
  76+ 6F05 34 35 36 37
  76+ 6F09 38 39 41 42
  76+ 6F0D 43 44 45 46
  77+ 6F11
  78+ 6F11 F5 E5 C5 D5  MissileHexDigit:        push    af,,hl,,bc,,de
  79+ 6F15 E6 0F                                and     $0F
  80+ 6F17 21 01 6F                             ld      hl, Hex2Char
  81+ 6F1A ED 31                                add     hl,a
  82+ 6F1C 56                                   ld      d,(hl)
  83+ 6F1D CD 77 E1                             call    l2_print_chr_at
  84+ 6F20 D1 C1 E1 F1                          pop     af,,hl,,bc,,de
  85+ 6F24 C9                                   ret
  86+ 6F25
  87+ 6F25 ED 23        MissileHexToChar:       swapnib
  88+ 6F27 E6 0F                                and     $0F
  89+ 6F29 1E FF                                ld      e,$FF
  90+ 6F2B                                      JumpIfALTNusng 8,.SkipNeg
  90+ 6F2B FE 08       >                        cp      8
  90+ 6F2D DA 34 6F    >                        jp		c, .SkipNeg
  91+ 6F30 1E 68                                ld      e,$68
  92+ 6F32 D6 08                                sub     8
  93+ 6F34 CD 11 6F     .SkipNeg:               call    MissileHexDigit
  94+ 6F37 ED 23                                swapnib
  95+ 6F39 F5                                   push    af
  96+ 6F3A 79                                   ld      a,c
  97+ 6F3B C6 08                                add     8
  98+ 6F3D 4F                                   ld      c,a
  99+ 6F3E F1                                   pop     af
 100+ 6F3F E6 0F                                and     $0F
 101+ 6F41 CD 11 6F                             call    MissileHexDigit
 102+ 6F44 C9                                   ret
 103+ 6F45
 104+ 6F45 1E FF        MissileValue2Byte:      ld      e,$FF
 105+ 6F47 7E                                   ld      a,(hl)
 106+ 6F48 23                                   inc     hl
 107+ 6F49 B6                                   or      (hl)
 108+ 6F4A FE 00                                cp      0
 109+ 6F4C F5                                   push    af
 110+ 6F4D CC E5 6E                             call    z,MissileDiagZero
 111+ 6F50 F1                                   pop     af
 112+ 6F51 C8                                   ret     z
 113+ 6F52 7E                                   ld      a,(hl)
 114+ 6F53 CB 7F                                bit     7,a
 115+ 6F55 F5                                   push    af
 116+ 6F56 CC DF 6E                             call    z,MissileDiagNegative
 117+ 6F59 F1                                   pop     af
 118+ 6F5A C8                                   ret     z
 119+ 6F5B C4 D9 6E                             call    nz,MissileDiagPositive
 120+ 6F5E C9                                   ret
 121+ 6F5F
 122+ 6F5F 16 78        MissileDiagPrintBoiler: ld      d,"x"
 123+ 6F61 1E 30                                ld      e, $30
 124+ 6F63 01 88 80                             ld      bc,$8088
 125+ 6F66 CD 77 E1                             call    l2_print_chr_at
 126+ 6F69 01 88 88                             ld      bc,$8888
 127+ 6F6C 16 7A                                ld      d,"z"
 128+ 6F6E 1E 30                                ld      e, $30
 129+ 6F70 CD 77 E1                             call    l2_print_chr_at
 130+ 6F73 01 88 90                             ld      bc,$9088
 131+ 6F76 16 73                                ld      d,"s"
 132+ 6F78 1E 30                                ld      e, $30
 133+ 6F7A CD 77 E1                             call    l2_print_chr_at
 134+ 6F7D 01 48 90                             ld      bc,$9048
 135+ 6F80 16 6E                                ld      d,"n"
 136+ 6F82 1E 30                                ld      e, $30
 137+ 6F84 CD 77 E1                             call    l2_print_chr_at
 138+ 6F87 01 48 80                             ld      bc,$8048
 139+ 6F8A 16 73                                ld      d,"s"
 140+ 6F8C 1E 30                                ld      e, $30
 141+ 6F8E CD 77 E1                             call    l2_print_chr_at
 142+ 6F91 01 48 88                             ld      bc,$8848
 143+ 6F94 16 72                                ld      d,"r"
 144+ 6F96 1E 30                                ld      e, $30
 145+ 6F98 CD 77 E1                             call    l2_print_chr_at
 146+ 6F9B C9                                   ret
 147+ 6F9C
 148+ 6F9C              MissileDiagnotics:      MMUSelectLayer2
 148+ 6F9C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 149+ 6FA0 CD 5F 6F                             call    MissileDiagPrintBoiler
 150+ 6FA3 1E FF                                ld      e,$FF
 151+ 6FA5 01 90 80                             ld      bc,$8090
 152+ 6FA8 3A 12 A5                             ld      a,(TacticsRotX)
 153+ 6FAB CD 25 6F                             call    MissileHexToChar; MissileValue
 154+ 6FAE 01 90 88                             ld      bc,$8890
 155+ 6FB1 3A 14 A5                             ld      a,(TacticsRotZ)
 156+ 6FB4 CD 25 6F                             call    MissileHexToChar; MissileValue
 157+ 6FB7 01 90 90                             ld      bc,$9090
 158+ 6FBA 3A 16 A5                             ld      a,(TacticsSpeed)
 159+ 6FBD CD 25 6F                             call    MissileHexToChar; MissileValue
 160+ 6FC0 01 50 80     .VectorSideX:           ld      bc,$8050
 161+ 6FC3 3A E2 A4                             ld      a,(TacticsSideX+1)
 162+ 6FC6 CD 25 6F                             call    MissileHexToChar;issileValue2Byte
 163+ 6FC9 01 62 80                             ld      bc,$8062
 164+ 6FCC 3A E6 A4                             ld      a,(TacticsSideY+1)
 165+ 6FCF CD 25 6F                             call    MissileHexToChar
 166+ 6FD2 01 74 80                             ld      bc,$8074
 167+ 6FD5 3A EA A4                             ld      a,(TacticsSideZ+1)
 168+ 6FD8 CD 25 6F                             call    MissileHexToChar
 169+ 6FDB 01 50 88     .VectorRoofX:           ld      bc,$8850
 170+ 6FDE 3A F2 A4                             ld      a,(TacticsRoofX+1)
 171+ 6FE1 CD 25 6F                             call    MissileHexToChar
 172+ 6FE4 01 62 88                             ld      bc,$8862
 173+ 6FE7 3A F6 A4                             ld      a,(TacticsRoofY+1)
 174+ 6FEA CD 25 6F                             call    MissileHexToChar
 175+ 6FED 01 74 88                             ld      bc,$8874
 176+ 6FF0 3A FA A4                             ld      a,(TacticsRoofZ+1)
 177+ 6FF3 CD 25 6F                             call    MissileHexToChar
 178+ 6FF6 01 50 90     .VectorNoseX:           ld      bc,$9050
 179+ 6FF9 3A 02 A5                             ld      a,(TacticsNoseX+1)
 180+ 6FFC CD 25 6F                             call    MissileHexToChar
 181+ 6FFF 01 62 90                             ld      bc,$9062
 182+ 7002 3A 06 A5                             ld      a,(TacticsNoseY+1)
 183+ 7005 CD 25 6F                             call    MissileHexToChar
 184+ 7008 01 74 90                             ld      bc,$9074
 185+ 700B 3A FA A4                             ld      a,(TacticsRoofZ+1)
 186+ 700E CD 25 6F                             call    MissileHexToChar
 187+ 7011 C9                                   ret
 188+ 7012
 189+ 7012              UpdateConsole:          IFDEF   MISSILEDIAGNOSTICS
 190+ 7012 ~                                            call    MissileDiagnotics
 191+ 7012                                      ENDIF
 192+ 7012 3A 98 83                             ld      a,(DELTA)
 193+ 7015 FE 00                                cp      0                           ; don't draw if there is nothing to draw
 194+ 7017 28 0C                                jr      z,.UpdateRoll
 195+ 7019 01 D1 84                             ld      bc,SpeedoStart
 196+ 701C 21 EB 86                             ld      hl,SpeedoMapping
 197+ 701F ED 31                                add     hl,a
 198+ 7021 56                                   ld      d,(hl)
 199+ 7022 CD 77 6E                             call    Draw3LineBar
 200+ 7025 3A B3 82     .UpdateRoll:            ld      a,(ALP1)
 201+ 7028 FE 00                                cp      0
 202+ 702A CA 5E 70                             jp      z,.UpdatePitch
 203+ 702D 21 E0 8C                             ld      hl,RollMiddle
 204+ 7030 3A B4 82                             ld      a,(ALP2)
 205+ 7033 FE 00                                cp      0
 206+ 7035 CA 50 70                             jp     z,.PosRoll
 207+ 7038 16 00        .NegRoll:               ld      d,0
 208+ 703A 3A B3 82                             ld      a,(ALP1)
 209+ 703D CB 27                                sla     a
 210+ 703F 5F                                   ld      e,a
 211+ 7040 B7                                   or      a
 212+ 7041 ED 52                                sbc     hl,de
 213+ 7043 44 4D                                ld      bc,hl
 214+ 7045 3E E1                                ld      a,DialMiddleXPos
 215+ 7047 91                                   sub     c
 216+ 7048 57                                   ld      d,a
 217+ 7049 1E FF                                ld      e,$FF
 218+ 704B CD 77 6E                             call    Draw3LineBar
 219+ 704E 18 0E                                jr      .UpdatePitch
 220+ 7050 01 E0 8C     .PosRoll:               ld      bc,RollMiddle
 221+ 7053 3A B3 82                             ld      a,(ALP1)
 222+ 7056 CB 27                                sla     a
 223+ 7058 57                                   ld      d,a
 224+ 7059 1E FF                                ld      e,$FF
 225+ 705B CD 77 6E                             call    Draw3LineBar
 226+ 705E 3A A7 82     .UpdatePitch:           ld      a,(BET1)
 227+ 7061 FE 00                                cp      0
 228+ 7063 CA 98 70                             jp      z,.Fuel
 229+ 7066 21 E0 94                             ld      hl,PitchMiddle
 230+ 7069 3A A8 82                             ld      a,(BET2)
 231+ 706C FE 00                                cp      0
 232+ 706E CA 8A 70                             jp      z,.PosPitch
 233+ 7071 16 00        .NegPitch:              ld      d,0
 234+ 7073 3A A7 82                             ld      a,(BET1)
 235+ 7076 CB 27                                sla     a
 236+ 7078 5F                                   ld      e,a
 237+ 7079 B7                                   or      a
 238+ 707A ED 52                                sbc     hl,de
 239+ 707C 44 4D                                ld      bc,hl
 240+ 707E 3E E1                                ld      a,DialMiddleXPos
 241+ 7080 91                                   sub     c
 242+ 7081 57                                   ld      d,a
 243+ 7082 1E FF                                ld      e,$FF
 244+ 7084 CD 77 6E                             call    Draw3LineBar
 245+ 7087 C3 98 70                             jp      .Fuel
 246+ 708A 01 E0 94     .PosPitch:              ld      bc,PitchMiddle
 247+ 708D 3A A7 82                             ld      a,(BET1)
 248+ 7090 CB 27                                sla     a
 249+ 7092 57                                   ld      d,a
 250+ 7093 1E FF                                ld      e,$FF
 251+ 7095 CD 77 6E                             call    Draw3LineBar
 252+ 7098 3A 0A 89     .Fuel:                  ld      a,(Fuel)
 253+ 709B CB 3F                                srl     a               ; divide by 4 to get range on screen
 254+ 709D 21 C6 86                             ld      hl,FuelMapping
 255+ 70A0 ED 31                                add     hl,a
 256+ 70A2 7E                                   ld      a,(hl)
 257+ 70A3 01 10 94                             ld      bc,FuelStart
 258+ 70A6 57                                   ld      d,a
 259+ 70A7 CD 9B 6E                             call    DrawColourCodedBar
 260+ 70AA 3A 9A 86     .FrontShield:           ld      a,(ForeShield)
 261+ 70AD CB 3F                                srl     a
 262+ 70AF CB 3F                                srl     a
 263+ 70B1 CB 3F                                srl     a
 264+ 70B3 01 10 84                             ld      bc,FShieldStart
 265+ 70B6 57                                   ld      d,a
 266+ 70B7 CD 9B 6E                             call    DrawColourCodedBar
 267+ 70BA 3A 9B 86     .AftShield:             ld      a,(AftShield)
 268+ 70BD CB 3F                                srl     a
 269+ 70BF CB 3F                                srl     a
 270+ 70C1 CB 3F                                srl     a
 271+ 70C3 01 10 8D                             ld      bc,AShieldStart
 272+ 70C6 57                                   ld      d,a
 273+ 70C7 CD 9B 6E                             call    DrawColourCodedBar
 274+ 70CA              .SpriteDraw:            MMUSelectSpriteBank
 274+ 70CA ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 275+ 70CE 3A AE 82     .DrawECM:               ld      a,(ECMCountDown)
 276+ 70D1                                      JumpIfAIsZero   .HideECM
 276+ 70D1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 276+ 70D2 CA DB 70    >                        jp	    z, .HideECM
 277+ 70D5 CD CF E1     .ShowECM:               call    show_ecm_sprite
 278+ 70D8 C3 DE 70                             jp      .ProcessedECM
 279+ 70DB CD 18 E4     .HideECM:               call    sprite_ecm_hide
 280+ 70DE              .ProcessedECM:
 281+ 70DE 3A 0A 84     .DrawMissiles:          ld      a,(NbrMissiles)
 282+ 70E1 FD 6F                                ld      iyl,a
 283+ 70E3                                      JumpIfAIsZero   .HideAllMissiles                    ; First off do we have any missiles
 283+ 70E3 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 283+ 70E4 CA 22 71    >                        jp	    z, .HideAllMissiles
 284+ 70E7 3A 9F 86     .DrawMissile_1:         ld      a,(MissileTargettingFlag)                   ; have we the targetting flag
 285+ 70EA                                      JumpIfAEqNusng  StageMissileNotTargeting,.MissileReady
 285+ 70EA FE FF       >                        cp     StageMissileNotTargeting
 285+ 70EC CA FA 70    >                        jp      z,.MissileReady
 286+ 70EF                                      JumpIfAEqNusng  StageMissileTargeting,   .MissileArmed
 286+ 70EF FE FE       >                        cp     StageMissileTargeting
 286+ 70F1 CA 00 71    >                        jp      z,.MissileArmed
 287+ 70F4 CD 11 E2     .Missile1Locked:        call    show_missile_1_locked
 288+ 70F7 C3 03 71                             jp      .DrawMissile_2
 289+ 70FA CD DA E1     .MissileReady:          call    show_missile_1_ready
 290+ 70FD C3 03 71                             jp      .DrawMissile_2
 291+ 7100 CD 06 E2     .MissileArmed:          call    show_missile_1_armed
 292+ 7103 FD 7D        .DrawMissile_2:         ld      a,iyl
 293+ 7105                                      JumpIfALTNusng 2, .Only1Missile
 293+ 7105 FE 02       >                        cp      2
 293+ 7107 DA 25 71    >                        jp		c, .Only1Missile
 294+ 710A CD E5 E1                             call    show_missile_2_ready
 295+ 710D FD 7D        .DrawMissile_3:         ld      a,iyl
 296+ 710F                                      JumpIfALTNusng 3, .Only2Missiles
 296+ 710F FE 03       >                        cp      3
 296+ 7111 DA 28 71    >                        jp		c, .Only2Missiles
 297+ 7114 CD F0 E1                             call    show_missile_3_ready
 298+ 7117 FD 7D        .DrawMissile_4:         ld      a,iyl
 299+ 7119                                      JumpIfALTNusng 4, .Only2Missiles
 299+ 7119 FE 04       >                        cp      4
 299+ 711B DA 28 71    >                        jp		c, .Only2Missiles
 300+ 711E CD FB E1                             call    show_missile_4_ready
 301+ 7121 C9                                   ret
 302+ 7122 CD 21 E4     .HideAllMissiles:       call    sprite_missile_1_hide
 303+ 7125 CD 2A E4     .Only1Missile:          call    sprite_missile_2_hide
 304+ 7128 CD 33 E4     .Only2Missiles:         call    sprite_missile_3_hide
 305+ 712B CD 3C E4     .Only3Missiles:         call    sprite_missile_4_hide
 306+ 712E              ;PlayerEnergy
 307+ 712E              ; BNEED LASER temp
 308+ 712E              ; NEED CABIN TEMP
 309+ 712E              ;NEED ALTITUDE
 310+ 712E              ; Draw compas - if in range draw station, else do planet
 311+ 712E 3A 9C 86     .EnergyBars:            ld      a,(PlayerEnergy)
 312+ 7131 CB 3F                                srl     a                   ; energy = energy / 2 so 31 per bar
 313+ 7133                                      JumpIfALTNusng  31 + 1,     Draw1EnergyBar
 313+ 7133 FE 20       >                        cp      31 + 1
 313+ 7135 DA 45 71    >                        jp		c, Draw1EnergyBar
 314+ 7138                                      JumpIfALTNusng  (31*2) + 1, Draw2EnergyBars
 314+ 7138 FE 3F       >                        cp      (31*2) + 1
 314+ 713A DA 4F 71    >                        jp		c, Draw2EnergyBars
 315+ 713D                                      JumpIfALTNusng  (31*3) + 1, Draw3EnergyBars
 315+ 713D FE 5E       >                        cp      (31*3) + 1
 315+ 713F DA 65 71    >                        jp		c, Draw3EnergyBars
 316+ 7142 C3 87 71                             jp      Draw4EnergyBars
 317+ 7145
 318+ 7145 1E E0        Draw1EnergyBar:         ld      e,224
 319+ 7147 57                                   ld      d,a
 320+ 7148 01 D5 BD                             ld      bc,EnergyBar1Start
 321+ 714B CD B9 6E                             call    DrawColourEBar
 322+ 714E C9                                   ret
 323+ 714F 1E D8        Draw2EnergyBars:        ld      e,216
 324+ 7151 D6 1F                                sub     31
 325+ 7153 57                                   ld      d,a
 326+ 7154 01 D5 B5                             ld      bc,EnergyBar2Start
 327+ 7157 CD B9 6E                             call    DrawColourEBar
 328+ 715A 16 1F                                ld      d,31
 329+ 715C 1E D8                                ld      e,216
 330+ 715E 01 D5 BD                             ld      bc,EnergyBar1Start
 331+ 7161 CD B9 6E                             call    DrawColourEBar
 332+ 7164 C9                                   ret
 333+ 7165 1E 14        Draw3EnergyBars:        ld      e,20
 334+ 7167 D6 3E                                sub     31*2
 335+ 7169 57                                   ld      d,a
 336+ 716A 1E 14                                ld      e,20
 337+ 716C 01 D5 AD                             ld      bc,EnergyBar3Start
 338+ 716F CD B9 6E                             call    DrawColourEBar
 339+ 7172 16 1F                                ld      d,31
 340+ 7174 1E 14                                ld      e,20
 341+ 7176 01 D5 B5                             ld      bc,EnergyBar2Start
 342+ 7179 CD B9 6E                             call    DrawColourEBar
 343+ 717C 16 1F                                ld      d,31
 344+ 717E 1E 14                                ld      e,20
 345+ 7180 01 D5 BD                             ld      bc,EnergyBar1Start
 346+ 7183 CD B9 6E                             call    DrawColourEBar
 347+ 7186 C9                                   ret
 348+ 7187 1E 18        Draw4EnergyBars:        ld      e,24
 349+ 7189 D6 5D                                sub     31*3
 350+ 718B                                      JumpIfALTNusng 31,.NoMax
 350+ 718B FE 1F       >                        cp      31
 350+ 718D DA 92 71    >                        jp		c, .NoMax
 351+ 7190 3E 1F        .Max                    ld      a,31
 352+ 7192 57           .NoMax:                 ld      d,a
 353+ 7193 01 D5 A5                             ld      bc,EnergyBar4Start
 354+ 7196 CD B9 6E                             call    DrawColourEBar
 355+ 7199 16 1F                                ld      d,31
 356+ 719B 1E 18                                ld      e,24
 357+ 719D 01 D5 AD                             ld      bc,EnergyBar3Start
 358+ 71A0 CD B9 6E                             call    DrawColourEBar
 359+ 71A3 16 1F                                ld      d,31
 360+ 71A5 1E 18                                ld      e,24
 361+ 71A7 01 D5 B5                             ld      bc,EnergyBar2Start
 362+ 71AA CD B9 6E                             call    DrawColourEBar
 363+ 71AD 16 1F                                ld      d,31
 364+ 71AF 1E 18                                ld      e,24
 365+ 71B1 01 D5 BD                             ld      bc,EnergyBar1Start
 366+ 71B4 CD B9 6E                             call    DrawColourEBar
 367+ 71B7 C9                                   ret
 368+ 71B8
 369+ 71B8              ScannerBottom           equ 190
 370+ 71B8              ScannerTypeMissle       equ 2
 371+ 71B8              ScannerXRangeOffset     equ $35
 372+ 71B8              ScannerCenter           equ 127
 373+ 71B8
 374+ 71B8              ScannerDefault          equ 0
 375+ 71B8              ScannerMissile          equ 2
 376+ 71B8              ScannerStation          equ 4
 377+ 71B8              ScannerEnemy            equ 6
 378+ 71B8
 379+ 71B8
 380+ 71B8 00           SunXScaled              DB  0
 381+ 71B9 00           SunYScaled              DB  0
 382+ 71BA 00           SunZScaled              DB  0
 383+ 71BB
 384+ 71BB                                      ;   ShipTypeNormal
 385+ 71BB 18 1C 90 FC  ScannerColourTable:       DB  L2ColourGREEN_2,    L2ColourGREEN_1, L2ColourYELLOW_4,  L2ColourYELLOW_1,   L2ColourCYAN_2, L2ColourCYAN_1, L2ColourRED_4,  L2ColourPINK_4
 385+ 71BF 12 1F 80 E0
 386+ 71C3 C0 E0 C0 E0  ScannerColourTableHostile:DB  L2ColourRED_2,      L2ColourRED_1,   L2ColourRED_2,     L2ColourRED_1,      L2ColourRED_2,  L2ColourRED_1,  L2ColourRED_2,  L2ColourRED_1; just a place holder for now
 386+ 71C7 C0 E0 C0 E0
 387+ 71CB
 388+ 71CB              GetShipColor:           MACRO
 389+ 71CB ~                                    ld      hl,ScannerColourTable
 390+ 71CB ~                                    ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
 391+ 71CB ~                                    cp      1                        ; for now to bypass hostile missile
 392+ 71CB ~                                    jr      z,.UsingColourTable    ; for now to bypass hostile missile
 393+ 71CB ~                                    ld      a,(ShipNewBitsAddr)
 394+ 71CB ~                                    and     ShipIsHostile
 395+ 71CB ~                                    jr      z,.UsingColourTable
 396+ 71CB ~            .UsingHostileColour:    ld      hl,ScannerColourTableHostile
 397+ 71CB ~            .UsingColourTable:      ld      a,(ShipTypeAddr)
 398+ 71CB ~                                    sla     a                            ; as its byte pairs * 2
 399+ 71CB ~                                    add     hl,a
 400+ 71CB ~                                    ld      a,(hl)
 401+ 71CB                                      ENDM
 402+ 71CB              GetShipColorBright:     MACRO
 403+ 71CB ~                                    ld      hl,ScannerColourTable
 404+ 71CB ~                                    ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
 405+ 71CB ~                                    cp      1                        ; for now to bypass hostile missile
 406+ 71CB ~                                    jr      z,.UsingColourTable    ; for now to bypass hostile missile
 407+ 71CB ~                                    ld      a,(ShipNewBitsAddr)
 408+ 71CB ~                                    and     ShipIsHostile
 409+ 71CB ~                                    jr      z,.UsingColourTable
 410+ 71CB ~            .UsingHostileColour:    ld      hl,ScannerColourTableHostile
 411+ 71CB ~            .UsingColourTable:      ld      a,(ShipTypeAddr)
 412+ 71CB ~                                    sla     a                            ; as its byte pairs * 2
 413+ 71CB ~                                    inc     a
 414+ 71CB ~                                    add     hl,a
 415+ 71CB ~                                    ld      a,(hl)
 416+ 71CB                                      ENDM
 417+ 71CB
 418+ 71CB              Shift24BitScan:         MACRO   regHi, reglo
 419+ 71CB ~                                    ld      hl,(regHi)
 420+ 71CB ~                                    ld      b,h
 421+ 71CB ~                                    ld      a,h
 422+ 71CB ~                                    and     SignMask8Bit
 423+ 71CB ~                                    ld      h,a
 424+ 71CB ~                                    ld      a,(reglo)
 425+ 71CB ~                                    sla     a
 426+ 71CB ~                                    rl      l
 427+ 71CB ~                                    rl      h
 428+ 71CB ~                                    sla     a
 429+ 71CB ~                                    rl      l
 430+ 71CB ~                                    rl      h
 431+ 71CB ~                                    sla     a
 432+ 71CB ~                                    rl      l
 433+ 71CB ~                                    rl      h
 434+ 71CB ~                                    sla     a
 435+ 71CB ~                                    rl      l
 436+ 71CB ~                                    rl      h
 437+ 71CB ~                                    sla     a
 438+ 71CB ~                                    rl      l
 439+ 71CB ~                                    rl      h
 440+ 71CB ~                                    sla     a
 441+ 71CB ~                                    rl      l
 442+ 71CB ~                                    rl      h
 443+ 71CB                                      ENDM
 444+ 71CB
 445+ 71CB              SunShiftRight           MACRO   reglo, reghi, regsgn
 446+ 71CB ~                                    ld      a,regsgn
 447+ 71CB ~                                    srl     a
 448+ 71CB ~                                    rr      reghi
 449+ 71CB ~                                    rr      reglo
 450+ 71CB ~                                    ld      regsgn,a
 451+ 71CB                                      ENDM
 452+ 71CB
 453+ 71CB              ;SunShiftPosTo15Bit:     ld      de,(SBnKzlo)
 454+ 71CB              ;                        ld      a,(SBnKzsgn)
 455+ 71CB              ;                        push    af
 456+ 71CB              ;                        and     SignMask8Bit
 457+ 71CB              ;                        ld      iyl,a
 458+ 71CB              ;                        ld      hl,(SBnKxlo)
 459+ 71CB              ;                        ld      a,(SBnKxsgn)
 460+ 71CB              ;                        push    af
 461+ 71CB              ;                        and     SignMask8Bit
 462+ 71CB              ;                        ld      ixl,a
 463+ 71CB              ;                        ld      bc,(SBnKylo)
 464+ 71CB              ;                        ld      a,(SBnKysgn)
 465+ 71CB              ;                        and     SignMask8Bit
 466+ 71CB              ;                        push    af
 467+ 71CB              ;                        ld      iyh,a
 468+ 71CB              ;.ShiftLoop:             ld      a,iyh
 469+ 71CB              ;                        or      iyl
 470+ 71CB              ;                        or      ixl
 471+ 71CB              ;                        jr      z,.ShiftBit15
 472+ 71CB              ;.ShiftZ:                SunShiftRight iyl, d, e
 473+ 71CB              ;.ShiftX:                SunShiftRight ixl, h, l
 474+ 71CB              ;.ShiftY:                SunShiftRight ixh, b, c
 475+ 71CB              ;                        jr      .ShipLoop
 476+ 71CB              ;.ShiftBit15:            ld      a,iyh
 477+ 71CB              ;                        or      iyl
 478+ 71CB              ;                        or      ixl
 479+ 71CB              ;                        jr      z,.CompletedShift
 480+ 71CB              ;.ShiftZ:                SunShiftRight iyl, d, e
 481+ 71CB              ;.ShiftX:                SunShiftRight ixl, h, l
 482+ 71CB              ;.ShiftY:                SunShiftRight ixh, b, c             ; finally shift to 15 bits so we can get the sign back
 483+ 71CB              ;.CompletedShift:        pop     af                          ; get ysgn
 484+ 71CB              ;                        and     SignOnly8Bit
 485+ 71CB              ;                        or      b
 486+ 71CB              ;                        ld      b,a
 487+ 71CB              ;                        pop     af                          ; get xsgn
 488+ 71CB              ;                        and     SignOnly8Bit
 489+ 71CB              ;                        or      h
 490+ 71CB              ;                        ld      h,a
 491+ 71CB              ;                        pop     af                          ; get zsgn
 492+ 71CB              ;                        and     SignOnly8Bit
 493+ 71CB              ;                        or      d
 494+ 71CB              ;                        ld      d,a
 495+ 71CB              ;                        ret
 496+ 71CB              ;
 497+ 71CB ED 5B 17 C0  ScalePlanetPos:         ld      de,(PBnKzhi)                ; de = abs z & save sign on stack
 498+ 71CF 7A                                   ld      a,d                         ; .
 499+ 71D0 F5                                   push    af                          ; .
 500+ 71D1 E6 7F                                and     SignMask8Bit                ; .
 501+ 71D3 57                                   ld      d,a                         ; .
 502+ 71D4 2A 11 C0                             ld      hl,(PBnKxhi)                ; hl = abs x & save sign on stack
 503+ 71D7 7C                                   ld      a,h                         ; .
 504+ 71D8 F5                                   push    af                          ; .
 505+ 71D9 E6 7F                                and     SignMask8Bit                ; .
 506+ 71DB 67                                   ld      h,a                         ; .
 507+ 71DC ED 4B 14 C0                          ld      bc,(PBnKyhi)                ; bc = abs y & save sign on stack
 508+ 71E0 78                                   ld      a,b                         ; .
 509+ 71E1 F5                                   push    af                          ; .
 510+ 71E2 E6 7F                                and     SignMask8Bit                ; .
 511+ 71E4 47                                   ld      b,a                         ; .
 512+ 71E5 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 513+ 71E6 B2                                   or      d                           ; .
 514+ 71E7 B4                                   or      h                           ; .
 515+ 71E8 28 0E                                jr      z,.Shifted                  ; .
 516+ 71EA                                      ShiftBCRight1                       ; .
 516+ 71EA CB 38       >			   srl b
 516+ 71EC CB 19       >			   rr  c
 517+ 71EE                                      ShiftHLRight1                       ; .
 517+ 71EE CB 3C       >			   srl h
 517+ 71F0 CB 1D       >			   rr  l
 518+ 71F2                                      ShiftDERight1                       ; .
 518+ 71F2 CB 3A       >			   srl d
 518+ 71F4 CB 1B       >			   rr  e
 519+ 71F6 18 ED                                jr      .ShiftLoop
 520+ 71F8 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 521+ 71F9 B5                                   or      l                           ;
 522+ 71FA B3                                   or      e                           ;
 523+ 71FB E6 80                                and     $80                         ;
 524+ 71FD 28 0C                                jr      z,.NoAdditionalShift        ;
 525+ 71FF                                      ShiftBCRight1                       ; we want 7 bit
 525+ 71FF CB 38       >			   srl b
 525+ 7201 CB 19       >			   rr  c
 526+ 7203                                      ShiftHLRight1                       ; to acommodate the sign
 526+ 7203 CB 3C       >			   srl h
 526+ 7205 CB 1D       >			   rr  l
 527+ 7207                                      ShiftDERight1                       ; .
 527+ 7207 CB 3A       >			   srl d
 527+ 7209 CB 1B       >			   rr  e
 528+ 720B F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 529+ 720C E6 80                                and     SignOnly8Bit                ;
 530+ 720E 47                                   ld      b,a                         ; bc = shifted signed Y
 531+ 720F F1                                   pop     af                          ; get xsgn
 532+ 7210 E6 80                                and     SignOnly8Bit                ;
 533+ 7212 67                                   ld      h,a                         ; hl = shifted signed X
 534+ 7213 F1                                   pop     af                          ; get zsgn
 535+ 7214 E6 80                                and     SignOnly8Bit                ;
 536+ 7216 57                                   ld      d,a                         ; de = shifted signed Z
 537+ 7217 C9                                   ret
 538+ 7218
 539+ 7218 ED 5B 17 C0  ScaleSunPos:            ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 540+ 721C 7A                                   ld      a,d                         ; .
 541+ 721D F5                                   push    af                          ; .
 542+ 721E E6 7F                                and     SignMask8Bit                ; .
 543+ 7220 57                                   ld      d,a                         ; .
 544+ 7221 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 545+ 7224 7C                                   ld      a,h                         ; .
 546+ 7225 F5                                   push    af                          ; .
 547+ 7226 E6 7F                                and     SignMask8Bit                ; .
 548+ 7228 67                                   ld      h,a                         ; .
 549+ 7229 ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 550+ 722D 78                                   ld      a,b                         ; .
 551+ 722E F5                                   push    af                          ; .
 552+ 722F E6 7F                                and     SignMask8Bit                ; .
 553+ 7231 47                                   ld      b,a                         ; .
 554+ 7232 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 555+ 7233 B2                                   or      d                           ; .
 556+ 7234 B4                                   or      h                           ; .
 557+ 7235 28 0E                                jr      z,.Shifted                  ; .
 558+ 7237                                      ShiftBCRight1                       ; .
 558+ 7237 CB 38       >			   srl b
 558+ 7239 CB 19       >			   rr  c
 559+ 723B                                      ShiftHLRight1                       ; .
 559+ 723B CB 3C       >			   srl h
 559+ 723D CB 1D       >			   rr  l
 560+ 723F                                      ShiftDERight1                       ; .
 560+ 723F CB 3A       >			   srl d
 560+ 7241 CB 1B       >			   rr  e
 561+ 7243 18 ED                                jr      .ShiftLoop
 562+ 7245 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 563+ 7246 B5                                   or      l                           ;
 564+ 7247 B3                                   or      e                           ;
 565+ 7248 E6 80                                and     $80                         ;
 566+ 724A 28 0C                                jr      z,.NoAdditionalShift        ;
 567+ 724C                                      ShiftBCRight1                       ; we want 7 bit
 567+ 724C CB 38       >			   srl b
 567+ 724E CB 19       >			   rr  c
 568+ 7250                                      ShiftHLRight1                       ; to acommodate the sign
 568+ 7250 CB 3C       >			   srl h
 568+ 7252 CB 1D       >			   rr  l
 569+ 7254                                      ShiftDERight1                       ; .
 569+ 7254 CB 3A       >			   srl d
 569+ 7256 CB 1B       >			   rr  e
 570+ 7258 F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 571+ 7259 E6 80                                and     SignOnly8Bit                ;
 572+ 725B 47                                   ld      b,a                         ; bc = shifted signed Y
 573+ 725C F1                                   pop     af                          ; get xsgn
 574+ 725D E6 80                                and     SignOnly8Bit                ;
 575+ 725F 67                                   ld      h,a                         ; hl = shifted signed X
 576+ 7260 F1                                   pop     af                          ; get zsgn
 577+ 7261 E6 80                                and     SignOnly8Bit                ;
 578+ 7263 57                                   ld      d,a                         ; de = shifted signed Z
 579+ 7264 C9                                   ret
 580+ 7265
 581+ 7265              ;compass sun
 582+ 7265              ;            if value is still 24 bit
 583+ 7265              ;                copy xhi/xsgn y and z to xxx15 ([2 1 0 ] [ 5 4 3] [ 8 7 6 ]
 584+ 7265              ;                normalise vector (note this assumes sun is just sign byte+ 2 bytes)
 585+ 7265              ;                tempk39 = OR 3 low bytes
 586+ 7265              ;                tempkA = OR 3 high bytes
 587+ 7265              ;                 TAL2:    repeat
 588+ 7265              ;                             asl tempka tempk39
 589+ 7265              ;                             exit if carry set
 590+ 7265              ;                             x coord << 1
 591+ 7265              ;                             y corrd << 1
 592+ 7265              ;                             z coord << 1
 593+ 7265              ;                          until carry clear
 594+ 7265              ;                 TA2:     shift x y and z right one and put sign bit in from sign bytes
 595+ 7265              ;                          now XX15 holds sign + 7 bit bytes maximused for coords
 596+ 7265              ;                          RQ = AP = X ^ 2
 597+ 7265              ;                          TP = AP = Y ^ 2
 598+ 7265              ;                          RQ = RQ + TP
 599+ 7265              ;                          TP = AP = Z ^ 2
 600+ 7265              ;                          RQ = RQ + TP
 601+ 7265              ;                          Q = SQRT (RQ)
 602+ 7265              ;                          for each coord - A = A/Q * 3/ 8
 603+ 7265              ;
 604+ 7265              ;
 605+ 7265
 606+ 7265 ED 5B 17 C0  UpscaleSunPosition:     ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 607+ 7269 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 608+ 726C ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 609+ 7270 7A                                   ld      a,d
 610+ 7271 E6 80                                and     SignOnly8Bit
 611+ 7273 CB 3F                                srl     a
 612+ 7275 FD 6F                                ld      iyl,a
 613+ 7277 7C                                   ld      a,h
 614+ 7278 E6 80                                and     SignOnly8Bit
 615+ 727A FD B5                                or      iyl
 616+ 727C CB 3F                                srl     a
 617+ 727E 78                                   ld      a,b
 618+ 727F E6 80                                and     SignOnly8Bit
 619+ 7281 FD B5                                or      iyl
 620+ 7283 FD 6F                                ld      iyl,a                       ; IYL now equals YXH00000 where letters = sign bits
 621+ 7285                                      ClearSignBit d
 621+ 7285 7A          >                        ld      a,d
 621+ 7286 E6 7F       >                        and     SignMask8Bit
 621+ 7288 57          >                        ld      d,a
 622+ 7289                                      ClearSignBit h
 622+ 7289 7C          >                        ld      a,h
 622+ 728A E6 7F       >                        and     SignMask8Bit
 622+ 728C 67          >                        ld      h,a
 623+ 728D                                      ClearSignBit b
 623+ 728D 78          >                        ld      a,b
 623+ 728E E6 7F       >                        and     SignMask8Bit
 623+ 7290 47          >                        ld      b,a
 624+ 7291 78                                   ld      a,b
 625+ 7292 B3                                   or      e
 626+ 7293 B4                                   or      h
 627+ 7294 B5                                   or      l
 628+ 7295 B0                                   or      b
 629+ 7296 B1                                   or      c
 630+ 7297 28 41                                jr      z, .Setto1                 ; to prevent and infinite loop in upscale if all zero
 631+ 7299 7A                                   ld      a,d
 632+ 729A B3                                   or      e
 633+ 729B B4                                   or      h
 634+ 729C CB 27                                sla     a
 635+ 729E 38 15                                jr      c,.DoneCalc
 636+ 72A0 28 13                                jr      z,.DoneCalc
 637+ 72A2              .UpscaleLoop:           ShiftDELeft1
 637+ 72A2 CB 23       >			   sla e
 637+ 72A4 CB 12       >			   rl  d
 638+ 72A6                                      ShiftHLLeft1
 638+ 72A6 CB 25       >			   sla l
 638+ 72A8 CB 14       >			   rl  h
 639+ 72AA                                      ShiftBCLeft1
 639+ 72AA CB 21       >			   sla c
 639+ 72AC CB 10       >			   rl  b
 640+ 72AE CB 27                                sla     a
 641+ 72B0 38 03                                jr      c,.DoneCalc
 642+ 72B2 C3 A2 72                             jp      .UpscaleLoop
 643+ 72B5              .DoneCalc               ShiftDERight1
 643+ 72B5 CB 3A       >			   srl d
 643+ 72B7 CB 1B       >			   rr  e
 644+ 72B9                                      ShiftHLRight1
 644+ 72B9 CB 3C       >			   srl h
 644+ 72BB CB 1D       >			   rr  l
 645+ 72BD                                      ShiftBCRight1
 645+ 72BD CB 38       >			   srl b
 645+ 72BF CB 19       >			   rr  c
 646+ 72C1 5A           .NowSetResultInLowByte: ld      e,d
 647+ 72C2 6C                                   ld      l,h
 648+ 72C3 48                                   ld      c,b
 649+ 72C4 FD 7D                                ld      a,iyl
 650+ 72C6 E6 80                                and     SignOnly8Bit
 651+ 72C8 47                                   ld      b,a
 652+ 72C9 FD 7D                                ld      a,iyl
 653+ 72CB CB 27                                sla     a
 654+ 72CD FD 6F                                ld      iyl,a
 655+ 72CF E6 80                                and     SignOnly8Bit
 656+ 72D1 67                                   ld      h,a
 657+ 72D2 FD 7D                                ld      a,iyl
 658+ 72D4 CB 27                                sla     a
 659+ 72D6 E6 80                                and     SignOnly8Bit
 660+ 72D8 57                                   ld      d,a
 661+ 72D9 C9                                   ret
 662+ 72DA 3E 01        .Setto1:                ld      a,1
 663+ 72DC 4F                                   ld      c,a
 664+ 72DD 5F                                   ld      e,a
 665+ 72DE 6F                                   ld      l,a
 666+ 72DF FD 7D                                ld      a,iyl
 667+ 72E1 CB 27                                sla     a
 668+ 72E3 CB 27                                sla     a
 669+ 72E5 E6 80                                and     SignOnly8Bit
 670+ 72E7 B3                                   or      e
 671+ 72E8 5F                                   ld      e,a
 672+ 72E9 C9                                   ret
 673+ 72EA
 674+ 72EA
 675+ 72EA              UpdateCompassSun:       MMUSelectSun
 675+ 72EA ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 676+ 72EE CD 18 72                             call    ScaleSunPos                 ; get as 7 bit signed
 677+ 72F1 C5 E5 D5                             push    bc,,hl,,de                  ; +3 save to stack Y, X and Z scaled and signed hihg = sign, low = 7 bit value
 678+ 72F4 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 679+ 72F5 59                                   ld      e,c                         ; .
 680+ 72F6 ED 30                                mul                                 ; .
 681+ 72F8 42 4B                                ld      bc,de                       ; .
 682+ 72FA 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 683+ 72FB 5D                                   ld      e,l                         ; .
 684+ 72FC ED 30                                mul                                 ; .
 685+ 72FE EB                                   ex      de,hl                       ; .
 686+ 72FF D1           .normaliseZSqr:         pop     de                          ; +2 get Z saved from stack so now stack contains Y Z X
 687+ 7300 53                                   ld      d,e                         ; de = z ^
 688+ 7301 ED 30                                mul                                 ; .
 689+ 7303 19           .normaliseSqrt:         add     hl,de                       ; de = x^2 + y^2 + z^2
 690+ 7304 09                                   add     hl,bc                       ; .
 691+ 7305 EB                                   ex      de,hl                       ; .
 692+ 7306 CD 75 97                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 693+ 7309                                      ; if h <> 0 then more difficult
 694+ 7309 55                                   ld      d,l                         ; iyl = q
 695+ 730A FD 6A                                ld      iyl,d                       ; .
 696+ 730C E1           .NormaliseX:            pop     hl                          ; +1 get back hl x scaled
 697+ 730D 7C                                   ld      a,h                         ; c = sign
 698+ 730E E6 80                                and     SignOnly8Bit                ; .
 699+ 7310 4F                                   ld      c,a                         ; .
 700+ 7311 C5                                   push    bc                          ; +2 save bc temporarily as it will get altered
 701+ 7312 7D                                   ld      a,l                         ; a = 8 bit abs z
 702+ 7313 CD 5F 9C                             call    AequAdivQmul96ABS           ; e = a /q * 96 (d was already loaded with q)
 703+ 7316 5F                                   ld      e,a                         ; .
 704+ 7317                                      EDiv10Inline                        ; a = e / 10
 704+ 7317 16 00       >                        ld      d,0
 704+ 7319 62 6B       >                        ld      hl,de
 704+ 731B 29          >                        add     hl,hl
 704+ 731C 19          >                        add     hl,de
 704+ 731D 29          >                        add     hl,hl
 704+ 731E 29          >                        add     hl,hl
 704+ 731F 19          >                        add     hl,de
 704+ 7320 29          >                        add     hl,hl
 705+ 7321 7C                                   ld      a,h                         ; .
 706+ 7322 C1                                   pop     bc                          ; +1 retrieve bc
 707+ 7323 FE 00                                cp      0                           ; if result in h was 0 then done
 708+ 7325 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 709+ 7327 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 710+ 7329 28 02                                jr      z,.DoneNormX
 711+ 732B ED 44                                neg
 712+ 732D DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 713+ 732F FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 714+ 7331 E1                                   pop     hl                          ; +0 hl y scaled
 715+ 7332 7C                                   ld      a,h                         ; c = sign
 716+ 7333 E6 80                                and     SignOnly8Bit                ; .
 717+ 7335 4F                                   ld      c,a                         ; .
 718+ 7336 C5                                   push    bc                          ; +1 save sign to stack
 719+ 7337 7D                                   ld      a,l                         ; a = 8 bit signed z
 720+ 7338 CD 5F 9C                             call    AequAdivQmul96ABS           ; .
 721+ 733B 5F                                   ld      e,a                         ; a = e / 10
 722+ 733C                                      EDiv10Inline                        ; .
 722+ 733C 16 00       >                        ld      d,0
 722+ 733E 62 6B       >                        ld      hl,de
 722+ 7340 29          >                        add     hl,hl
 722+ 7341 19          >                        add     hl,de
 722+ 7342 29          >                        add     hl,hl
 722+ 7343 29          >                        add     hl,hl
 722+ 7344 19          >                        add     hl,de
 722+ 7345 29          >                        add     hl,hl
 723+ 7346 7C                                   ld      a,h                         ; retrieve sign
 724+ 7347 C1                                   pop     bc                          ; +1 retrieve sign
 725+ 7348 FE 00                                cp      0
 726+ 734A 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 727+ 734C CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 728+ 734E 28 02                                jr      z,.DoneNormY
 729+ 7350 ED 44                                neg                                 ;
 730+ 7352 47           .DoneNormY:             ld      b,a                         ; result from Y
 731+ 7353 DD 4C                                ld      c,ixh                       ; x = saved X
 732+ 7355              .SetSprite:             MMUSelectSpriteBank
 732+ 7355 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 733+ 7359 CD 05 E1                             call    compass_sun_move
 734+ 735C DD 7D                                ld      a,ixl
 735+ 735E CB 7F                                bit     7,a
 736+ 7360 20 04                                jr      nz,.SunBehind
 737+ 7362 CD 1C E2     .SunInfront:            call    show_compass_sun_infront
 738+ 7365 C9                                   ret
 739+ 7366 CD 27 E2     .SunBehind:             call    show_compass_sun_behind
 740+ 7369 C9                                   ret
 741+ 736A
 742+ 736A
 743+ 736A              UpdateCompassPlanet:    MMUSelectPlanet
 743+ 736A ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 744+ 736E CD CB 71                             call    ScalePlanetPos              ; get as 7 bit signed
 745+ 7371 C5 E5 D5                             push    bc,,hl,,de                  ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 746+ 7374 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 747+ 7375 59                                   ld      e,c                         ; .
 748+ 7376 ED 30                                mul                                 ; .
 749+ 7378 42 4B                                ld      bc,de                       ; .
 750+ 737A 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 751+ 737B 5D                                   ld      e,l                         ; .
 752+ 737C ED 30                                mul                                 ; .
 753+ 737E EB                                   ex      de,hl                       ; .
 754+ 737F D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 755+ 7380 53                                   ld      d,e                         ; de = z ^
 756+ 7381 ED 30                                mul                                 ; .
 757+ 7383 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + z^2
 758+ 7384 09                                   add     hl,bc
 759+ 7385 EB                                   ex      de,hl
 760+ 7386 CD 75 97                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 761+ 7389                                      ; if h <> 0 then more difficult
 762+ 7389 55                                   ld      d,l                         ; iyl = q
 763+ 738A FD 6A                                ld      iyl,d                       ; .
 764+ 738C E1           .NormaliseX:            pop     hl                          ; hl x scaled
 765+ 738D 7C                                   ld      a,h                         ; c = sign
 766+ 738E E6 80                                and     SignOnly8Bit                ; .
 767+ 7390 4F                                   ld      c,a                         ; .
 768+ 7391 C5                                   push    bc                          ; save sign to stack
 769+ 7392 7D                                   ld      a,l                         ; a = 8 bit abs z
 770+ 7393 CD 5F 9C                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 771+ 7396 5F                                   ld      e,a                         ; .
 772+ 7397                                      EDiv10Inline                        ; a = e / 10
 772+ 7397 16 00       >                        ld      d,0
 772+ 7399 62 6B       >                        ld      hl,de
 772+ 739B 29          >                        add     hl,hl
 772+ 739C 19          >                        add     hl,de
 772+ 739D 29          >                        add     hl,hl
 772+ 739E 29          >                        add     hl,hl
 772+ 739F 19          >                        add     hl,de
 772+ 73A0 29          >                        add     hl,hl
 773+ 73A1 7C                                   ld      a,h                         ; .
 774+ 73A2 C1                                   pop     bc                          ; retrieve sign
 775+ 73A3 FE 00                                cp      0
 776+ 73A5 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 777+ 73A7 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 778+ 73A9 28 02                                jr      z,.DoneNormX
 779+ 73AB ED 44                                neg
 780+ 73AD DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 781+ 73AF FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 782+ 73B1 E1                                   pop     hl                          ; hl y scaled
 783+ 73B2 7C                                   ld      a,h                         ; c = sign
 784+ 73B3 E6 80                                and     SignOnly8Bit                ; .
 785+ 73B5 4F                                   ld      c,a                         ; .
 786+ 73B6 C5                                   push    bc                          ; save sign to stack
 787+ 73B7 7D                                   ld      a,l                         ; a = 8 bit signed z
 788+ 73B8 CD 5F 9C                             call    AequAdivQmul96ABS           ; .
 789+ 73BB 5F                                   ld      e,a                         ; a = e / 10
 790+ 73BC                                      EDiv10Inline                        ; .
 790+ 73BC 16 00       >                        ld      d,0
 790+ 73BE 62 6B       >                        ld      hl,de
 790+ 73C0 29          >                        add     hl,hl
 790+ 73C1 19          >                        add     hl,de
 790+ 73C2 29          >                        add     hl,hl
 790+ 73C3 29          >                        add     hl,hl
 790+ 73C4 19          >                        add     hl,de
 790+ 73C5 29          >                        add     hl,hl
 791+ 73C6 7C                                   ld      a,h                         ; retrieve sign
 792+ 73C7 C1                                   pop     bc                          ; retrieve sign
 793+ 73C8 FE 00                                cp      0
 794+ 73CA 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 795+ 73CC CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 796+ 73CE 28 02                                jr      z,.DoneNormY
 797+ 73D0 ED 44                                neg                                 ;
 798+ 73D2 47           .DoneNormY:             ld      b,a                         ; result from Y
 799+ 73D3 DD 4C                                ld      c,ixh                       ; x = saved X
 800+ 73D5              .SetSprite:             MMUSelectSpriteBank
 800+ 73D5 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 801+ 73D9 CD 17 E1                             call    compass_station_move
 802+ 73DC DD 7D                                ld      a,ixl
 803+ 73DE CB 7F                                bit     7,a
 804+ 73E0 20 04                                jr      nz,.PlanetBehind
 805+ 73E2 CD 32 E2     .PlanetInfront:         call    show_compass_station_infront
 806+ 73E5 C9                                   ret
 807+ 73E6 CD 3D E2     .PlanetBehind:          call    show_compass_station_behind
 808+ 73E9 C9                                   ret
 809+ 73EA
 810+ 73EA              UpdatePlanetSun:        MMUSelectPlanet
 810+ 73EA ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 811+ 73EE                                      Shift24BitScan  PBnKyhi, PBnKylo
 811+ 73EE 2A 14 C0    >                        ld      hl,(PBnKyhi)
 811+ 73F1 44          >                        ld      b,h
 811+ 73F2 7C          >                        ld      a,h
 811+ 73F3 E6 7F       >                        and     SignMask8Bit
 811+ 73F5 67          >                        ld      h,a
 811+ 73F6 3A 13 C0    >                        ld      a,(PBnKylo)
 811+ 73F9 CB 27       >                        sla     a
 811+ 73FB CB 15       >                        rl      l
 811+ 73FD CB 14       >                        rl      h
 811+ 73FF CB 27       >                        sla     a
 811+ 7401 CB 15       >                        rl      l
 811+ 7403 CB 14       >                        rl      h
 811+ 7405 CB 27       >                        sla     a
 811+ 7407 CB 15       >                        rl      l
 811+ 7409 CB 14       >                        rl      h
 811+ 740B CB 27       >                        sla     a
 811+ 740D CB 15       >                        rl      l
 811+ 740F CB 14       >                        rl      h
 811+ 7411 CB 27       >                        sla     a
 811+ 7413 CB 15       >                        rl      l
 811+ 7415 CB 14       >                        rl      h
 811+ 7417 CB 27       >                        sla     a
 811+ 7419 CB 15       >                        rl      l
 811+ 741B CB 14       >                        rl      h
 812+ 741D 3A 12 C0     .IsItInRange:           ld      a,(PBnKxsgn)                ; if the high byte is not
 813+ 7420 21 15 C0                             ld      hl,PBnKysgn                 ; a sign only
 814+ 7423 B6                                   or      (hl)                        ; then its too far away
 815+ 7424 21 18 C0                             ld      hl,PBnKzsgn                 ; for the scanner to draw
 816+ 7427 B6                                   or      (hl)                        ; so rely on the compass
 817+ 7428 E6 7F                                and     SignMask8Bit                ;
 818+ 742A C0                                   ret     nz                          ;
 819+ 742B 2A 16 C0     .ItsInRange:            ld      hl,(PBnKzlo)                ; we will get unsigned values
 820+ 742E ED 5B 10 C0                          ld      de,(PBnKxlo)
 821+ 7432 ED 4B 13 C0                          ld      bc,(PBnKylo)
 822+ 7436 7C                                   ld      a,h
 823+ 7437 B2                                   or      d
 824+ 7438 B0                                   or      b
 825+ 7439 E6 C0                                and     %11000000
 826+ 743B C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 827+ 743C 3A 12 C0     .MakeX2Compliment:      ld      a,(PBnKxsgn)
 828+ 743F CB 7F                                bit     7,a
 829+ 7441 28 04                                jr      z,.absXHi
 830+ 7443                                      NegD
 830+ 7443 7A          >                    ld      a,d
 830+ 7444 ED 44       >                    neg
 830+ 7446 57          >                    ld      d,a
 831+ 7447 7A           .absXHi:                ld      a,d
 832+ 7448 C6 80                                add     ScannerX
 833+ 744A DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 834+ 744C CB 3C        .ProcessZCoord:         srl     h
 835+ 744E CB 3C                                srl     h
 836+ 7450 3A 18 C0     .MakeZ2Compliment:      ld      a,(PBnKzsgn)
 837+ 7453 CB 7F                                bit     7,a
 838+ 7455 28 04                                jr      z,.absZHi
 839+ 7457                                      NegH
 839+ 7457 7C          >                    ld      a,h
 839+ 7458 ED 44       >                    neg
 839+ 745A 67          >                    ld      h,a
 840+ 745B 3E AB        .absZHi:                ld      a,ScannerY
 841+ 745D 94                                   sub     h
 842+ 745E FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 843+ 7460 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 844+ 7462 20 0B                                jr      nz,.StickHasLength
 845+ 7464 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 846+ 7466 FD 6F                                ld      iyl,a
 847+ 7468                                      MMUSelectLayer2
 847+ 7468 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 848+ 746C C3 97 74                             jp      .NoStick
 849+ 746F 3A 15 C0     .StickHasLength:        ld      a,(PBnKysgn)                ; if b  =  0 then no line
 850+ 7472 CB 7F                                bit     7,a
 851+ 7474 28 04                                jr      z,.absYHi
 852+ 7476                                      NegB
 852+ 7476 78          >                    ld      a,b
 852+ 7477 ED 44       >                    neg
 852+ 7479 47          >                    ld      b,a
 853+ 747A FD 7C        .absYHi:                ld      a,iyh
 854+ 747C 90           .SetStickPos:           sub     b
 855+ 747D                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 855+ 747D FE BE       >                        cp      ScannerBottom
 855+ 747F DA 84 74    >                        jp		c, .StickOnScreen
 856+ 7482 3E BE                                ld      a,ScannerBottom
 857+ 7484 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 858+ 7486 DD 6F                                ld      ixl,a
 859+ 7488 FD 44                                ld      b,iyh                       ; from row
 860+ 748A DD 4C                                ld      c,ixh                       ; from col
 861+ 748C FD 55                                ld      d,iyl                       ; to row
 862+ 748E 1E B4                                ld      e,L2SunScanner
 863+ 7490                                      MMUSelectLayer2
 863+ 7490 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 864+ 7494 CD 5E E3                             call    l2_draw_vert_line_to
 865+ 7497 FD 45        .NoStick:               ld      b,iyl                       ; row
 866+ 7499 DD 4C                                ld      c,ixh                       ; col
 867+ 749B 3E FC                                ld      a,L2SunScannerBright
 868+ 749D CD 35 E1                             call    l2_plot_pixel
 869+ 74A0 FD 45                                ld      b,iyl
 870+ 74A2 DD 4C                                ld      c,ixh
 871+ 74A4 0C                                   inc     c
 872+ 74A5 3E FC                                ld      a,L2SunScannerBright
 873+ 74A7 CD 35 E1                             call    l2_plot_pixel
 874+ 74AA C9                                   ret
 875+ 74AB
 876+ 74AB              UpdateCompassStation:   MMUSelectShipBankN 0
 876+ 74AB ED 91 57 00 >					 nextreg ShipModelMMU,	    0
 877+ 74AF
 878+ 74AF CD 18 72                             call    ScaleSunPos                 ; get as 7 bit signed
 879+ 74B2 C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 880+ 74B6 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 881+ 74B7 59                                   ld      e,c                         ; .
 882+ 74B8 ED 30                                mul                                 ; .
 883+ 74BA 42 4B                                ld      bc,de                       ; .
 884+ 74BC 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 885+ 74BD 5D                                   ld      e,l                         ; .
 886+ 74BE ED 30                                mul                                 ; .
 887+ 74C0 EB                                   ex      de,hl                       ; .
 888+ 74C1 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 889+ 74C2 53                                   ld      d,e                         ; de = z ^
 890+ 74C3 ED 30                                mul                                 ; .
 891+ 74C5 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 892+ 74C6 09                                   add     hl,bc
 893+ 74C7 EB                                   ex      de,hl
 894+ 74C8 CD 75 97                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 895+ 74CB                                      ; if h <> 0 then more difficult
 896+ 74CB 55                                   ld      d,l                         ; iyl = q
 897+ 74CC FD 6A                                ld      iyl,d                       ; .
 898+ 74CE E1           .NormaliseX:            pop     hl                          ; hl x scaled
 899+ 74CF 7C                                   ld      a,h                         ; c = sign
 900+ 74D0 E6 80                                and     SignOnly8Bit                ; .
 901+ 74D2 4F                                   ld      c,a                         ; .
 902+ 74D3 C5                                   push    bc                          ; save sign to stack
 903+ 74D4 7D                                   ld      a,l                         ; a = 8 bit abs z
 904+ 74D5 CD 5F 9C                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 905+ 74D8 5F                                   ld      e,a                         ; .
 906+ 74D9                                      EDiv10Inline                        ; a = e / 10
 906+ 74D9 16 00       >                        ld      d,0
 906+ 74DB 62 6B       >                        ld      hl,de
 906+ 74DD 29          >                        add     hl,hl
 906+ 74DE 19          >                        add     hl,de
 906+ 74DF 29          >                        add     hl,hl
 906+ 74E0 29          >                        add     hl,hl
 906+ 74E1 19          >                        add     hl,de
 906+ 74E2 29          >                        add     hl,hl
 907+ 74E3 7C                                   ld      a,h                         ; .
 908+ 74E4 C1                                   pop     bc                          ; retrieve sign
 909+ 74E5 FE 00                                cp      0
 910+ 74E7 28 06                                jr      z,.DoneNormX                 ; in case we end up with - 0
 911+ 74E9 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 912+ 74EB 28 02                                jr      z,.DoneNormX
 913+ 74ED ED 44                                neg
 914+ 74EF DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 915+ 74F1 FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 916+ 74F3 E1                                   pop     hl                          ; hl z scaled
 917+ 74F4 7C                                   ld      a,h                         ; c = sign
 918+ 74F5 E6 80                                and     SignOnly8Bit                ; .
 919+ 74F7 4F                                   ld      c,a                         ; .
 920+ 74F8 C5                                   push    bc                          ; save sign to stack
 921+ 74F9 7D                                   ld      a,l                         ; e = a /q * 96
 922+ 74FA CD 5F 9C                             call    AequAdivQmul96ABS              ; .
 923+ 74FD 5F                                   ld      e,a                         ; a = e / 10
 924+ 74FE                                      EDiv10Inline                        ; .
 924+ 74FE 16 00       >                        ld      d,0
 924+ 7500 62 6B       >                        ld      hl,de
 924+ 7502 29          >                        add     hl,hl
 924+ 7503 19          >                        add     hl,de
 924+ 7504 29          >                        add     hl,hl
 924+ 7505 29          >                        add     hl,hl
 924+ 7506 19          >                        add     hl,de
 924+ 7507 29          >                        add     hl,hl
 925+ 7508 7C                                   ld      a,h                         ; retrieve sign
 926+ 7509 C1                                   pop     bc                          ; retrieve sign
 927+ 750A CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 928+ 750C 28 02                                jr      z,.DoneNormZ
 929+ 750E ED 44                                neg
 930+ 7510 DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 931+ 7512 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 932+ 7514 E1                                   pop     hl                          ; hl y scaled
 933+ 7515 7C                                   ld      a,h                         ; c = sign
 934+ 7516 E6 80                                and     SignOnly8Bit                ; .
 935+ 7518 4F                                   ld      c,a                         ; .
 936+ 7519 C5                                   push    bc                          ; save sign to stack
 937+ 751A 7D                                   ld      a,l                         ; a = 8 bit signed z
 938+ 751B CD 5F 9C                             call    AequAdivQmul96ABS              ; .
 939+ 751E 5F                                   ld      e,a                         ; a = e / 10
 940+ 751F                                      EDiv10Inline                        ; .
 940+ 751F 16 00       >                        ld      d,0
 940+ 7521 62 6B       >                        ld      hl,de
 940+ 7523 29          >                        add     hl,hl
 940+ 7524 19          >                        add     hl,de
 940+ 7525 29          >                        add     hl,hl
 940+ 7526 29          >                        add     hl,hl
 940+ 7527 19          >                        add     hl,de
 940+ 7528 29          >                        add     hl,hl
 941+ 7529 7C                                   ld      a,h                         ; retrieve sign
 942+ 752A C1                                   pop     bc                          ; retrieve sign
 943+ 752B FE 00                                cp      0
 944+ 752D 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 945+ 752F CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 946+ 7531 28 02                                jr      z,.DoneNormY
 947+ 7533 ED 44                                neg
 948+ 7535 47           .DoneNormY:             ld      b,a                         ; .
 949+ 7536 DD 4C                                ld      c,ixh
 950+ 7538              .SetSprite:             MMUSelectSpriteBank
 950+ 7538 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 951+ 753C CD 05 E1                             call    compass_sun_move
 952+ 753F DD 7D                                ld      a,ixl
 953+ 7541 CB 7F                                bit     7,a
 954+ 7543 20 04                                jr      nz,.SunBehind
 955+ 7545 CD 1C E2     .SunInfront:            call    show_compass_sun_infront
 956+ 7548 C9                                   ret
 957+ 7549 CD 27 E2     .SunBehind:             call    show_compass_sun_behind
 958+ 754C C9                                   ret
 959+ 754D
 960+ 754D
 961+ 754D              UpdateScannerSun:       MMUSelectSun
 961+ 754D ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 962+ 7551                                      Shift24BitScan  SBnKyhi, SBnKylo
 962+ 7551 2A 14 C0    >                        ld      hl,(SBnKyhi)
 962+ 7554 44          >                        ld      b,h
 962+ 7555 7C          >                        ld      a,h
 962+ 7556 E6 7F       >                        and     SignMask8Bit
 962+ 7558 67          >                        ld      h,a
 962+ 7559 3A 13 C0    >                        ld      a,(SBnKylo)
 962+ 755C CB 27       >                        sla     a
 962+ 755E CB 15       >                        rl      l
 962+ 7560 CB 14       >                        rl      h
 962+ 7562 CB 27       >                        sla     a
 962+ 7564 CB 15       >                        rl      l
 962+ 7566 CB 14       >                        rl      h
 962+ 7568 CB 27       >                        sla     a
 962+ 756A CB 15       >                        rl      l
 962+ 756C CB 14       >                        rl      h
 962+ 756E CB 27       >                        sla     a
 962+ 7570 CB 15       >                        rl      l
 962+ 7572 CB 14       >                        rl      h
 962+ 7574 CB 27       >                        sla     a
 962+ 7576 CB 15       >                        rl      l
 962+ 7578 CB 14       >                        rl      h
 962+ 757A CB 27       >                        sla     a
 962+ 757C CB 15       >                        rl      l
 962+ 757E CB 14       >                        rl      h
 963+ 7580 3A 12 C0     .IsItInRange:           ld      a,(SBnKxsgn)                ; if the high byte is not
 964+ 7583 21 15 C0                             ld      hl,SBnKysgn                 ; a sign only
 965+ 7586 B6                                   or      (hl)                        ; then its too far away
 966+ 7587 21 18 C0                             ld      hl,SBnKzsgn                 ; for the scanner to draw
 967+ 758A B6                                   or      (hl)                        ; so rely on the compass
 968+ 758B E6 7F                                and     SignMask8Bit                ;
 969+ 758D C0                                   ret     nz                          ;
 970+ 758E 2A 16 C0     .ItsInRange:            ld      hl,(SBnKzlo)                ; we will get unsigned values
 971+ 7591 ED 5B 10 C0                          ld      de,(SBnKxlo)
 972+ 7595 ED 4B 13 C0                          ld      bc,(SBnKylo)
 973+ 7599 7C                                   ld      a,h
 974+ 759A B2                                   or      d
 975+ 759B B0                                   or      b
 976+ 759C E6 C0                                and     %11000000
 977+ 759E C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 978+ 759F 3A 12 C0     .MakeX2Compliment:      ld      a,(SBnKxsgn)
 979+ 75A2 CB 7F                                bit     7,a
 980+ 75A4 28 04                                jr      z,.absXHi
 981+ 75A6                                      NegD
 981+ 75A6 7A          >                    ld      a,d
 981+ 75A7 ED 44       >                    neg
 981+ 75A9 57          >                    ld      d,a
 982+ 75AA 7A           .absXHi:                ld      a,d
 983+ 75AB C6 80                                add     ScannerX
 984+ 75AD DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 985+ 75AF CB 3C        .ProcessZCoord:         srl     h
 986+ 75B1 CB 3C                                srl     h
 987+ 75B3 3A 18 C0     .MakeZ2Compliment:      ld      a,(SBnKzsgn)
 988+ 75B6 CB 7F                                bit     7,a
 989+ 75B8 28 04                                jr      z,.absZHi
 990+ 75BA                                      NegH
 990+ 75BA 7C          >                    ld      a,h
 990+ 75BB ED 44       >                    neg
 990+ 75BD 67          >                    ld      h,a
 991+ 75BE 3E AB        .absZHi:                ld      a,ScannerY
 992+ 75C0 94                                   sub     h
 993+ 75C1 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 994+ 75C3 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 995+ 75C5 20 0B                                jr      nz,.StickHasLength
 996+ 75C7 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 997+ 75C9 FD 6F                                ld      iyl,a
 998+ 75CB                                      MMUSelectLayer2
 998+ 75CB ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 999+ 75CF C3 FA 75                             jp      .NoStick
1000+ 75D2 3A 15 C0     .StickHasLength:        ld      a,(SBnKysgn)                ; if b  =  0 then no line
1001+ 75D5 CB 7F                                bit     7,a
1002+ 75D7 28 04                                jr      z,.absYHi
1003+ 75D9                                      NegB
1003+ 75D9 78          >                    ld      a,b
1003+ 75DA ED 44       >                    neg
1003+ 75DC 47          >                    ld      b,a
1004+ 75DD FD 7C        .absYHi:                ld      a,iyh
1005+ 75DF 90           .SetStickPos:           sub     b
1006+ 75E0                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1006+ 75E0 FE BE       >                        cp      ScannerBottom
1006+ 75E2 DA E7 75    >                        jp		c, .StickOnScreen
1007+ 75E5 3E BE                                ld      a,ScannerBottom
1008+ 75E7 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1009+ 75E9 DD 6F                                ld      ixl,a
1010+ 75EB FD 44                                ld      b,iyh                       ; from row
1011+ 75ED DD 4C                                ld      c,ixh                       ; from col
1012+ 75EF FD 55                                ld      d,iyl                       ; to row
1013+ 75F1 1E B4                                ld      e,L2SunScanner
1014+ 75F3                                      MMUSelectLayer2
1014+ 75F3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1015+ 75F7 CD 5E E3                             call    l2_draw_vert_line_to
1016+ 75FA FD 45        .NoStick:               ld      b,iyl                       ; row
1017+ 75FC DD 4C                                ld      c,ixh                       ; col
1018+ 75FE 3E FC                                ld      a,L2SunScannerBright
1019+ 7600 CD 35 E1                             call    l2_plot_pixel
1020+ 7603 FD 45                                ld      b,iyl
1021+ 7605 DD 4C                                ld      c,ixh
1022+ 7607 0C                                   inc     c
1023+ 7608 3E FC                                ld      a,L2SunScannerBright
1024+ 760A CD 35 E1                             call    l2_plot_pixel
1025+ 760D C9                                   ret
1026+ 760E
1027+ 760E              ; This will do a planet update if we are not in space station range
1028+ 760E              UpdateScannerPlanet:    MMUSelectPlanet
1028+ 760E ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
1029+ 7612                                      Shift24BitScan  PBnKyhi, PBnKylo
1029+ 7612 2A 14 C0    >                        ld      hl,(PBnKyhi)
1029+ 7615 44          >                        ld      b,h
1029+ 7616 7C          >                        ld      a,h
1029+ 7617 E6 7F       >                        and     SignMask8Bit
1029+ 7619 67          >                        ld      h,a
1029+ 761A 3A 13 C0    >                        ld      a,(PBnKylo)
1029+ 761D CB 27       >                        sla     a
1029+ 761F CB 15       >                        rl      l
1029+ 7621 CB 14       >                        rl      h
1029+ 7623 CB 27       >                        sla     a
1029+ 7625 CB 15       >                        rl      l
1029+ 7627 CB 14       >                        rl      h
1029+ 7629 CB 27       >                        sla     a
1029+ 762B CB 15       >                        rl      l
1029+ 762D CB 14       >                        rl      h
1029+ 762F CB 27       >                        sla     a
1029+ 7631 CB 15       >                        rl      l
1029+ 7633 CB 14       >                        rl      h
1029+ 7635 CB 27       >                        sla     a
1029+ 7637 CB 15       >                        rl      l
1029+ 7639 CB 14       >                        rl      h
1029+ 763B CB 27       >                        sla     a
1029+ 763D CB 15       >                        rl      l
1029+ 763F CB 14       >                        rl      h
1030+ 7641 3A 12 C0     .IsItInRange:           ld      a,(PBnKxsgn)                ; if the high byte is not
1031+ 7644 21 15 C0                             ld      hl,PBnKysgn                 ; a sign only
1032+ 7647 B6                                   or      (hl)                        ; then its too far away
1033+ 7648 21 18 C0                             ld      hl,PBnKzsgn                 ; for the scanner to draw
1034+ 764B B6                                   or      (hl)                        ; so rely on the compass
1035+ 764C E6 7F                                and     SignMask8Bit                ;
1036+ 764E C0                                   ret     nz                          ;
1037+ 764F 2A 16 C0     .ItsInRange:            ld      hl,(PBnKzlo)                ; we will get unsigned values
1038+ 7652 ED 5B 10 C0                          ld      de,(PBnKxlo)
1039+ 7656 ED 4B 13 C0                          ld      bc,(PBnKylo)
1040+ 765A 7C                                   ld      a,h
1041+ 765B B2                                   or      d
1042+ 765C B0                                   or      b
1043+ 765D E6 C0                                and     %11000000
1044+ 765F C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
1045+ 7660 3A 12 C0     .MakeX2Compliment:      ld      a,(PBnKxsgn)
1046+ 7663 CB 7F                                bit     7,a
1047+ 7665 28 04                                jr      z,.absXHi
1048+ 7667                                      NegD
1048+ 7667 7A          >                    ld      a,d
1048+ 7668 ED 44       >                    neg
1048+ 766A 57          >                    ld      d,a
1049+ 766B 7A           .absXHi:                ld      a,d
1050+ 766C C6 80                                add     ScannerX
1051+ 766E DD 67                                ld      ixh,a                       ; store adjusted X in ixh
1052+ 7670 CB 3C        .ProcessZCoord:         srl     h
1053+ 7672 CB 3C                                srl     h
1054+ 7674 3A 18 C0     .MakeZ2Compliment:      ld      a,(PBnKzsgn)
1055+ 7677 CB 7F                                bit     7,a
1056+ 7679 28 04                                jr      z,.absZHi
1057+ 767B                                      NegH
1057+ 767B 7C          >                    ld      a,h
1057+ 767C ED 44       >                    neg
1057+ 767E 67          >                    ld      h,a
1058+ 767F 3E AB        .absZHi:                ld      a,ScannerY
1059+ 7681 94                                   sub     h
1060+ 7682 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
1061+ 7684 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
1062+ 7686 20 0B                                jr      nz,.StickHasLength
1063+ 7688 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
1064+ 768A FD 6F                                ld      iyl,a
1065+ 768C                                      MMUSelectLayer2
1065+ 768C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1066+ 7690 C3 BB 76                             jp      .NoStick
1067+ 7693 3A 15 C0     .StickHasLength:        ld      a,(PBnKysgn)                ; if b  =  0 then no line
1068+ 7696 CB 7F                                bit     7,a
1069+ 7698 28 04                                jr      z,.absYHi
1070+ 769A                                      NegB
1070+ 769A 78          >                    ld      a,b
1070+ 769B ED 44       >                    neg
1070+ 769D 47          >                    ld      b,a
1071+ 769E FD 7C        .absYHi:                ld      a,iyh
1072+ 76A0 90           .SetStickPos:           sub     b
1073+ 76A1                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1073+ 76A1 FE BE       >                        cp      ScannerBottom
1073+ 76A3 DA A8 76    >                        jp		c, .StickOnScreen
1074+ 76A6 3E BE                                ld      a,ScannerBottom
1075+ 76A8 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1076+ 76AA DD 6F                                ld      ixl,a
1077+ 76AC FD 44                                ld      b,iyh                       ; from row
1078+ 76AE DD 4C                                ld      c,ixh                       ; from col
1079+ 76B0 FD 55                                ld      d,iyl                       ; to row
1080+ 76B2 1E B4                                ld      e,L2SunScanner
1081+ 76B4                                      MMUSelectLayer2
1081+ 76B4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1082+ 76B8 CD 5E E3                             call    l2_draw_vert_line_to
1083+ 76BB FD 45        .NoStick:               ld      b,iyl                       ; row
1084+ 76BD DD 4C                                ld      c,ixh                       ; col
1085+ 76BF 3E FC                                ld      a,L2SunScannerBright
1086+ 76C1 CD 35 E1                             call    l2_plot_pixel
1087+ 76C4 FD 45                                ld      b,iyl
1088+ 76C6 DD 4C                                ld      c,ixh
1089+ 76C8 0C                                   inc     c
1090+ 76C9 3E FC                                ld      a,L2SunScannerBright
1091+ 76CB CD 35 E1                             call    l2_plot_pixel
1092+ 76CE C9                                   ret
1093+ 76CF
1094+ 76CF
1095+ 76CF              ; As the space station is always ship 0 then we can just use the scanner
1096+ 76CF
1097+ 76CF              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
1098+ 76CF 3A 51 C0     UpdateScannerShip:      ld      a,(UBnKexplDsp)             ; if bit 4 is clear then ship should not be drawn
1099+ 76D2 CB 67                                bit     4,a                         ; .
1100+ 76D4                                      ;DEBUG ret     z                           ; .
1101+ 76D4 3A 45 C3                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
1102+ 76D7 CB 7F                                bit     7,a
1103+ 76D9 C0                                   ret     nz
1104+ 76DA              ; DEBUG Add in station types later
1105+ 76DA 2A 26 C0     .NotMissile:            ld      hl,(UBnKzlo)
1106+ 76DD ED 5B 20 C0                          ld      de,(UBnKxlo)
1107+ 76E1 ED 4B 23 C0                          ld      bc,(UBnKylo)
1108+ 76E5 7C                                   ld      a,h
1109+ 76E6 B2                                   or      d
1110+ 76E7 B0                                   or      b
1111+ 76E8 E6 C0                                and     %11000000
1112+ 76EA C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
1113+ 76EB 3A 22 C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
1114+ 76EE CB 7F                                bit     7,a
1115+ 76F0 28 04                                jr      z,.absXHi
1116+ 76F2                                      NegD
1116+ 76F2 7A          >                    ld      a,d
1116+ 76F3 ED 44       >                    neg
1116+ 76F5 57          >                    ld      d,a
1117+ 76F6 7A           .absXHi:                ld      a,d
1118+ 76F7 C6 80                                add     ScannerX
1119+ 76F9 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
1120+ 76FB CB 3C        .ProcessZCoord:         srl     h
1121+ 76FD CB 3C                                srl     h
1122+ 76FF 3A 28 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
1123+ 7702 CB 7F                                bit     7,a
1124+ 7704 28 04                                jr      z,.absZHi
1125+ 7706                                      NegH
1125+ 7706 7C          >                    ld      a,h
1125+ 7707 ED 44       >                    neg
1125+ 7709 67          >                    ld      h,a
1126+ 770A 3E AB        .absZHi:                ld      a,ScannerY
1127+ 770C 94                                   sub     h
1128+ 770D FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
1129+ 770F CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
1130+ 7711 20 2A                                jr      nz,.StickHasLength
1131+ 7713 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
1132+ 7715 FD 6F                                ld      iyl,a
1133+ 7717 DD 7D                                ld      a,ixl
1134+ 7719                                      GetShipColorBright
1134+ 7719 21 BB 71    >                        ld      hl,ScannerColourTable
1134+ 771C 3A 45 C3    >                        ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
1134+ 771F FE 01       >                        cp      1                        ; for now to bypass hostile missile
1134+ 7721 28 0A       >                        jr      z,.UsingColourTable    ; for now to bypass hostile missile
1134+ 7723 3A 46 C3    >                        ld      a,(ShipNewBitsAddr)
1134+ 7726 E6 04       >                        and     ShipIsHostile
1134+ 7728 28 03       >                        jr      z,.UsingColourTable
1134+ 772A 21 C3 71    >.UsingHostileColour:    ld      hl,ScannerColourTableHostile
1134+ 772D 3A 45 C3    >.UsingColourTable:      ld      a,(ShipTypeAddr)
1134+ 7730 CB 27       >                        sla     a                            ; as its byte pairs * 2
1134+ 7732 3C          >                        inc     a
1134+ 7733 ED 31       >                        add     hl,a
1134+ 7735 7E          >                        ld      a,(hl)
1135+ 7736                                      MMUSelectLayer2
1135+ 7736 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1136+ 773A C3 85 77                             jp      .NoStick
1137+ 773D 3A 25 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
1138+ 7740 CB 7F                                bit     7,a
1139+ 7742 28 04                                jr      z,.absYHi
1140+ 7744                                      NegB
1140+ 7744 78          >                    ld      a,b
1140+ 7745 ED 44       >                    neg
1140+ 7747 47          >                    ld      b,a
1141+ 7748 FD 7C        .absYHi:                ld      a,iyh
1142+ 774A 90           .SetStickPos:           sub     b
1143+ 774B                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1143+ 774B FE BE       >                        cp      ScannerBottom
1143+ 774D DA 52 77    >                        jp		c, .StickOnScreen
1144+ 7750 3E BE                                ld      a,ScannerBottom
1145+ 7752 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1146+ 7754                                      GetShipColor
1146+ 7754 21 BB 71    >                        ld      hl,ScannerColourTable
1146+ 7757 3A 45 C3    >                        ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
1146+ 775A FE 01       >                        cp      1                        ; for now to bypass hostile missile
1146+ 775C 28 0A       >                        jr      z,.UsingColourTable    ; for now to bypass hostile missile
1146+ 775E 3A 46 C3    >                        ld      a,(ShipNewBitsAddr)
1146+ 7761 E6 04       >                        and     ShipIsHostile
1146+ 7763 28 03       >                        jr      z,.UsingColourTable
1146+ 7765 21 C3 71    >.UsingHostileColour:    ld      hl,ScannerColourTableHostile
1146+ 7768 3A 45 C3    >.UsingColourTable:      ld      a,(ShipTypeAddr)
1146+ 776B CB 27       >                        sla     a                            ; as its byte pairs * 2
1146+ 776D ED 31       >                        add     hl,a
1146+ 776F 7E          >                        ld      a,(hl)
1147+ 7770 DD 6F                                ld      ixl,a
1148+ 7772 FD 44                                ld      b,iyh                       ; from row
1149+ 7774 DD 4C                                ld      c,ixh                       ; from col
1150+ 7776 FD 55                                ld      d,iyl                       ; to row
1151+ 7778 DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
1152+ 777A E5                                   push    hl
1153+ 777B                                      MMUSelectLayer2
1153+ 777B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1154+ 777F CD 5E E3                             call    l2_draw_vert_line_to
1155+ 7782 E1                                   pop     hl
1156+ 7783 23                                   inc     hl
1157+ 7784 7E                                   ld      a,(hl)
1158+ 7785 FD 45        .NoStick:               ld      b,iyl                       ; row
1159+ 7787 DD 4C                                ld      c,ixh                       ; col
1160+ 7789 F5                                   push    af
1161+ 778A CD 35 E1                             call    l2_plot_pixel
1162+ 778D F1                                   pop     af
1163+ 778E FD 45                                ld      b,iyl
1164+ 7790 DD 4C                                ld      c,ixh
1165+ 7792 0C                                   inc     c
1166+ 7793 CD 35 E1                             call    l2_plot_pixel
1167+ 7796 C9                                   ret
1168+ 7797
1169+ 7797
# file closed: ./Views/ConsoleDrawing.asm
 529  7797                          INCLUDE "./Tables/message_queue.asm"
# file opened: ./Tables/message_queue.asm
   1+ 7797
   2+ 7797
   3+ 7797              ResetMessageQueue:      ZeroA
   3+ 7797 AF          >                        xor a
   4+ 7798 32 B8 82                             ld      (MessageCount),a
   5+ 779B 32 B9 82                             ld      (MessageCurrent),a
   6+ 779E 21 BC 82                             ld      hl,MessageQueue
   7+ 77A1 11 BA 82                             ld      de,MessageIndex
   8+ 77A4 06 05                                ld      b,5
   9+ 77A6 7D           .ClearMessageIndexs:    ld      a,l                                 ; Wipe out the indexes to all the data
  10+ 77A7 12                                   ld      (de),a                              ;
  11+ 77A8 13                                   inc     de                                  ;
  12+ 77A9 7C                                   ld      a,h                                 ;
  13+ 77AA 12                                   ld      (de),a                              ;
  14+ 77AB 13                                   inc     de                                  ;
  15+ 77AC 3E 21                                ld      a,MESSAGESIZE                       ;
  16+ 77AE ED 31                                add     hl,a                                ;
  17+ 77B0 10 F4                                djnz    .ClearMessageIndexs                 ;
  18+ 77B2 21 BC 82     .ClearText:             ld      hl,MessageQueue
  19+ 77B5 11 AA 00                             ld      de,(MAXMESSAGES * MESSAGESIZE) + MAXMESSAGES    ; MessageQueue + MessageTimeout
  20+ 77B8 3E 00                                ld      a,0
  21+ 77BA CD 2E 7F                             call	memfill_dma
  22+ 77BD C9                                   ret
  23+ 77BE
  24+ 77BE              ; Message to enqeue is a string held at DE that must be terminated in \0
  25+ 77BE              ;                                       IYH = timer for message
  26+ 77BE 3A B8 82     EnqueMessage:           ld      a,(MessageCount)                    ; Maximum message count check
  27+ 77C1                                      ReturnIfAGTENusng    MAXMESSAGES            ; we do not enque if queue is full
  27+ 77C1 FE 05       >                        cp    MAXMESSAGES
  27+ 77C3 D0          >                        ret	 nc
  28+ 77C4 3C                                   inc     a
  29+ 77C5 32 B8 82                             ld      (MessageCount),a                    ; get ready for next message
  30+ 77C8 4F           .AddMessage:            ld      c,a
  31+ 77C9 3A B9 82                             ld      a,(MessageCurrent)                  ; a = current message id + count + 1
  32+ 77CC 81                                   add     c                                   ;
  33+ 77CD                                      JumpIfALTNusng MAXMESSAGES, .ReadyToAdd     ; a = a modulus 5 (note we can only hit 5 messages
  33+ 77CD FE 05       >                        cp      MAXMESSAGES
  33+ 77CF DA D4 77    >                        jp		c, .ReadyToAdd
  34+ 77D2 D6 05        .CircularQueue:         sub     MAXMESSAGES                         ; so only need 1 cycle of modulus
  35+ 77D4 21 61 83     .ReadyToAdd:            ld      hl,MessageTimeout                   ; write out message display time
  36+ 77D7 ED 31                                add     hl,a                                ; as some may be brief messages
  37+ 77D9 4F                                   ld      c,a                                 ;
  38+ 77DA FD 7C                                ld      a,iyh                               ;
  39+ 77DC 77                                   ld      (hl),a                              ;
  40+ 77DD 79                                   ld      a,c                                 ; get back index
  41+ 77DE 21 BA 82                             ld      hl,MessageIndex
  42+ 77E1                                      HLEquAddrAtHLPlusA                          ; hl = target location for message
  42+ 77E1 CB 27       >                    sla         a
  42+ 77E3 ED 31       >                    add         hl,a
  42+ 77E5 7E          >                    ld          a,(hl)
  42+ 77E6 23          >                    inc         hl
  42+ 77E7 66          >                    ld          h,(hl)
  42+ 77E8 6F          >                    ld          l,a
  43+ 77E9 EB                                   ex      de,hl                               ; de = destination, hl = message
  44+ 77EA                                      ldCopyTextAtHLtoDE                          ; copy over text as we have done the rest
  44+ 77EA 7E          >.CopyLoop:              ld      a,(hl)
  44+ 77EB 12          >                        ld      (de),a
  44+ 77EC FE 00       >                        cp      0
  44+ 77EE CA F5 77    >                        jp      z,.DoneCopy
  44+ 77F1 23          >                        inc     hl
  44+ 77F2 13          >                        inc     de
  44+ 77F3 18 F5       >                        jr      .CopyLoop
  44+ 77F5             >.DoneCopy:
  45+ 77F5 C9                                   ret
  46+ 77F6
  47+ 77F6 3A B9 82     UpdateMessageTimer:     ld      a,(MessageCurrent)
  48+ 77F9 21 61 83                             ld      hl,MessageTimeout
  49+ 77FC ED 31                                add     hl,a
  50+ 77FE 7E                                   ld      a,(hl)
  51+ 77FF 3D                                   dec     a
  52+ 7800 28 02                                jr      z,.UpdateQueue
  53+ 7802 77           .UpdateTimer            ld      (hl),a
  54+ 7803 C9                                   ret
  55+ 7804 77           .UpdateQueue:           ld      (hl),a
  56+ 7805 21 B8 82                             ld      hl,MessageCount
  57+ 7808 35                                   dec     (hl)
  58+ 7809 3A B9 82                             ld      a,(MessageCurrent)
  59+ 780C 23                                   inc     hl
  60+ 780D                                      JumpIfALTNusng MAXMESSAGES, .ReadyToUpdate
  60+ 780D FE 05       >                        cp      MAXMESSAGES
  60+ 780F DA 13 78    >                        jp		c, .ReadyToUpdate
  61+ 7812              .CircularQueue:         ZeroA
  61+ 7812 AF          >                        xor a
  62+ 7813 32 B9 82     .ReadyToUpdate          ld      (MessageCurrent),a
  63+ 7816 C9                                   ret
  64+ 7817
  65+ 7817 3A B8 82     DisplayCurrentMessage:  ld      a,(MessageCount)
  66+ 781A                                      ReturnIfAIsZero
  66+ 781A A7          >                        and     a
  66+ 781B C8          >                        ret     z
  67+ 781C 3A B9 82                             ld      a,(MessageCurrent)
  68+ 781F 21 BA 82                             ld      hl,MessageIndex
  69+ 7822                                      HLEquAddrAtHLPlusA
  69+ 7822 CB 27       >                    sla         a
  69+ 7824 ED 31       >                    add         hl,a
  69+ 7826 7E          >                    ld          a,(hl)
  69+ 7827 23          >                    inc         hl
  69+ 7828 66          >                    ld          h,(hl)
  69+ 7829 6F          >                    ld          l,a
  70+ 782A                                      MMUSelectLayer1
  70+ 782A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  71+ 782E 11 01 00                             ld      de,MESSAGELINE
  72+ 7831 CD 15 E1                             call    l1_print_at_wrap
  73+ 7834 C9                                   ret
  74+ 7835
  75+ 7835              HyperSpaceMessage:      MMUSelectLayer1
  75+ 7835 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  76+ 7839 11 B2 69     .DisplayHyperCountDown: ld      de,Hyp_to
  77+ 783C 21 9D 93                             ld      hl,name_expanded
  78+ 783F                                      ldCopyTextAtHLtoDE
  78+ 783F 7E          >.CopyLoop:              ld      a,(hl)
  78+ 7840 12          >                        ld      (de),a
  78+ 7841 FE 00       >                        cp      0
  78+ 7843 CA 4A 78    >                        jp      z,.DoneCopy
  78+ 7846 23          >                        inc     hl
  78+ 7847 13          >                        inc     de
  78+ 7848 18 F5       >                        jr      .CopyLoop
  78+ 784A             >.DoneCopy:
  79+ 784A AF           .DoneName:              xor     a
  80+ 784B 12                                   ld      (de),a
  81+ 784C 32 CE 69                             ld      (Hyp_message+31),a      ; max out at 32 characters
  82+ 784F 21 AF 69     .CentreJustify:         ld      hl,Hyp_message
  83+ 7852                                      HalfLengthHL
  83+ 7852 06 00       >                        ld      b,0
  83+ 7854 7E          >.CountLenLoop:          ld      a,(hl)
  83+ 7855 FE 00       >                        cp      0
  83+ 7857 28 04       >                        jr      z,.DoneCount
  83+ 7859 04          >                        inc     b
  83+ 785A 23          >                        inc     hl
  83+ 785B 18 F7       >                        jr      .CountLenLoop
  83+ 785D 3E 20       >.DoneCount:             ld      a,32
  83+ 785F 90          >                        sub     b
  83+ 7860 CB 2F       >                        sra     a
  84+ 7862 21 E9 69                             ld      hl,Hyp_centeredTarget
  85+ 7865                                      ldClearTextLoop 32
  85+ 7865 47          >                        ld      b,a
  85+ 7866 3E 20       >                        ld      a,32
  85+ 7868 77          >.ClearLoop:             ld      (hl),a
  85+ 7869 23          >                        inc     hl
  85+ 786A 10 FC       >                        djnz    .ClearLoop
  86+ 786C EB                                   ex      de,hl
  87+ 786D 21 AF 69                             ld      hl,Hyp_message
  88+ 7870                                      ldCopyTextAtHLtoDE
  88+ 7870 7E          >.CopyLoop:              ld      a,(hl)
  88+ 7871 12          >                        ld      (de),a
  88+ 7872 FE 00       >                        cp      0
  88+ 7874 CA 7B 78    >                        jp      z,.DoneCopy
  88+ 7877 23          >                        inc     hl
  88+ 7878 13          >                        inc     de
  88+ 7879 18 F5       >                        jr      .CopyLoop
  88+ 787B             >.DoneCopy:
  89+ 787B                                      ZeroA
  89+ 787B AF          >                        xor a
  90+ 787C 32 09 6A                             ld      (Hyp_centeredEol),a
  91+ 787F 21 E5 69                             ld      hl,Hyp_counter           ; clear counter digits
  92+ 7882 3E 20                                ld      a,32                     ; clear counter digits
  93+ 7884 77                                   ld      (hl),a                   ; clear counter digits
  94+ 7885 23                                   inc     hl                       ; clear counter digits
  95+ 7886 77                                   ld      (hl),a                   ; clear counter digits
  96+ 7887 23                                   inc     hl                       ; clear counter digits
  97+ 7888 77                                   ld      (hl),a                   ; clear counter digits
  98+ 7889 CD 8B 69                             call    UpdateCountdownNumber
  99+ 788C 21 DC 69                             ld      hl,Hyp_charging
 100+ 788F                                      HalfLengthHL
 100+ 788F 06 00       >                        ld      b,0
 100+ 7891 7E          >.CountLenLoop:          ld      a,(hl)
 100+ 7892 FE 00       >                        cp      0
 100+ 7894 28 04       >                        jr      z,.DoneCount
 100+ 7896 04          >                        inc     b
 100+ 7897 23          >                        inc     hl
 100+ 7898 18 F7       >                        jr      .CountLenLoop
 100+ 789A 3E 20       >.DoneCount:             ld      a,32
 100+ 789C 90          >                        sub     b
 100+ 789D CB 2F       >                        sra     a
 101+ 789F 21 2A 6A                             ld      hl,Hyp_centeredCharging
 102+ 78A2                                      ldClearTextLoop 32
 102+ 78A2 47          >                        ld      b,a
 102+ 78A3 3E 20       >                        ld      a,32
 102+ 78A5 77          >.ClearLoop:             ld      (hl),a
 102+ 78A6 23          >                        inc     hl
 102+ 78A7 10 FC       >                        djnz    .ClearLoop
 103+ 78A9 EB                                   ex      de,hl
 104+ 78AA 21 DC 69                             ld      hl,Hyp_charging
 105+ 78AD                                      ldCopyTextAtHLtoDE
 105+ 78AD 7E          >.CopyLoop:              ld      a,(hl)
 105+ 78AE 12          >                        ld      (de),a
 105+ 78AF FE 00       >                        cp      0
 105+ 78B1 CA B8 78    >                        jp      z,.DoneCopy
 105+ 78B4 23          >                        inc     hl
 105+ 78B5 13          >                        inc     de
 105+ 78B6 18 F5       >                        jr      .CopyLoop
 105+ 78B8             >.DoneCopy:
 106+ 78B8 AF                                   xor     a
 107+ 78B9 32 4A 6A                             ld      (Hyp_centeredEol2),a
 108+ 78BC 2A 65 84     .UpdateHyperCountdown:  ld      hl,(InnerHyperCount)
 109+ 78BF 2D                                   dec     l
 110+ 78C0 20 26                                jr      nz,.decHyperInnerOnly
 111+ 78C2 25                                   dec     h
 112+ 78C3 FA EC 78                             jp      m,.HyperCountDone
 113+ 78C6 2E 0B        .resetHyperInner:       ld      l,$0B
 114+ 78C8 E5                                   push    hl
 115+ 78C9 16 0C                                ld      d,12
 116+ 78CB 3E 06                                ld      a,L1ColourPaperBlack | L1ColourInkYellow
 117+ 78CD CD 8B E0                             call    l1_attr_cls_2DlinesA
 118+ 78D0 16 60                                ld      d,12 * 8
 119+ 78D2 CD 74 E0                             call    l1_cls_2_lines_d
 120+ 78D5 11 00 60                             ld      de,$6000
 121+ 78D8 21 E9 69                             ld      hl,Hyp_centeredTarget
 122+ 78DB CD C8 E0                             call    l1_print_at
 123+ 78DE 11 00 68                             ld      de,$6800
 124+ 78E1 21 2A 6A                             ld      hl,Hyp_centeredCharging
 125+ 78E4 CD C8 E0                             call    l1_print_at
 126+ 78E7 E1                                   pop     hl
 127+ 78E8 22 65 84     .decHyperInnerOnly:     ld      (InnerHyperCount),hl
 128+ 78EB C9                                   ret
 129+ 78EC 21 00 00     .HyperCountDone:        ld      hl,0
 130+ 78EF 22 65 84                             ld      (InnerHyperCount),hl
 131+ 78F2 16 0C                                ld      d,12
 132+ 78F4 3E 00                                ld      a,L1ColourPaperBlack | L1ColourInkBlack
 133+ 78F6 CD 8B E0                             call    l1_attr_cls_2DlinesA
 134+ 78F9 16 60                                ld      d,12 * 8
 135+ 78FB CD 74 E0                             call    l1_cls_2_lines_d
 136+ 78FE                                      ForceTransition ScreenHyperspace                            ; transition to hyperspace
 136+ 78FE 3E 0E       >                        ld      a,ScreenHyperspace
 136+ 7900 32 40 6C    >                        ld      (ScreenTransitionForced), a
 137+ 7903 C9                                   ret
 138+ 7904
# file closed: ./Tables/message_queue.asm
 530  7904                          INCLUDE "./Tables/LaserStatsTable.asm"
# file opened: ./Tables/LaserStatsTable.asm
   1+ 7904              ; LaserTypeTable
   2+ 7904              ; laser type = id of laser
   3+ 7904              ; laser pulse pause = time before next pulse
   4+ 7904              ; laser pulse duration = time laser is on per shot
   5+ 7904              ; laser damage output
   6+ 7904              ;
   7+ 7904              ; LaserType
   8+ 7904              ; LaserPulseRate                          ; how many pulses can be fired before long pause
   9+ 7904              ; LaserPulseOnTime                        ; cycles laser is on for
  10+ 7904              ; LaserPulseOffTime                       ; cycles laser is off for
  11+ 7904              ; LaserPulseRest                          ; time before pulse count resets to 0 (i.e cooldown)
  12+ 7904              ; LaserDamageOutput                       ; amount of damage for a laser hit
  13+ 7904              ; LaserEnergyDrain                        ; amount of energy drained by cycle
  14+ 7904              ; LaserHeat                               ; amount of heat generated
  15+ 7904              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
  16+ 7904              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
  17+ 7904              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
  18+ 7904              ; LaserTechLevel                          ; minimum tech level system to buy from
  19+ 7904              ;
  20+ 7904              LaserStatsTableWidth    EQU 12
  21+ 7904              ;                           0    1    2    3    4    5    6    7    8    9   10   11
  22+ 7904              ;                          Typ  Rate On   Off  Rst  Dam  Drn  Het  Dur  DAt  Mrk  Tek
  23+ 7904 00 02 05 20  LaserStatsTable:        DB $00, $02, $05, $20, $40, $03, $10, $02, $20 ,$10 ,$00, $00; basic laser
  23+ 7908 40 03 10 02
  23+ 790C 20 10 00 00
  24+ 7910 01 01 08 08                          DB $01, $01, $08, $08, $20, $03, $10, $08, $20 ,$10 ,$00, $01; pulse laser
  24+ 7914 20 03 10 08
  24+ 7918 20 10 00 01
  25+ 791C 02 06 08 03                          DB $02, $06, $08, $03, $3A, $03, $10, $02, $20 ,$10 ,$00, $02; burst laser TODO THIS ONE IS ODD
  25+ 7920 3A 03 10 02
  25+ 7924 20 10 00 02
  26+ 7928 03 11 06 04                          DB $03, $11, $06, $04, $50, $02, $10, $05, $30 ,$10 ,$00, $03; Gatling laser
  26+ 792C 50 02 10 05
  26+ 7930 30 10 00 03
  27+ 7934 04 00 01 00                          DB $04, $00, $01, $00, $03, $03, $03, $10, $20 ,$10 ,$00, $04; beam ; DOES NOT WORK
  27+ 7938 03 03 03 10
  27+ 793C 20 10 00 04
  28+ 7940 05 01 20 30                          DB $05, $01, $20, $30, $60, $03, $02, $02, $20 ,$10 ,$00, $05; mining
  28+ 7944 60 03 02 02
  28+ 7948 20 10 00 05
  29+ 794C 06 00 01 00                          DB $06, $00, $01, $00, $06, $05, $05, $05, $10 ,$10 ,$00, $08; military beam DOES NOT WORK
  29+ 7950 06 05 05 05
  29+ 7954 10 10 00 08
  30+ 7958 07 01 01 02                          DB $07, $01, $01, $02, $20, $22, $01, $30, $30 ,$11 ,$01, $10; thargoid
  30+ 795C 20 22 01 30
  30+ 7960 30 11 01 10
  31+ 7964 08 01 05 10                          DB $08, $01, $05, $10, $80, $70, $02, $03, $60 ,$11 ,$01, $10; Starkiller
  31+ 7968 80 70 02 03
  31+ 796C 60 11 01 10
  32+ 7970
  33+ 7970
  34+ 7970
  35+ 7970
  36+ 7970
  37+ 7970
  38+ 7970
# file closed: ./Tables/LaserStatsTable.asm
 531  7970                          INCLUDE "./Tables/ShipClassTable.asm"
# file opened: ./Tables/ShipClassTable.asm
   1+ 7970 00           ShipBodiesTable:        DB  $ - ShipBodiesTable
   2+ 7971 23 18 16 00  ShipPackList:           DB  ShipID_Sidewinder, ShipID_Mamba, ShipID_Krait, ShipID_Adder, ShipID_Gecko, ShipID_Cobra_Mk_1, ShipID_Worm, ShipID_Cobra_Mk_3_P
   2+ 7975 13 0A 2A 0B
   3+ 7979              ShipPackTableSize       EQU $ - ShipPackList
   4+ 7979 0B 02 1F 12  ShipHunterTable         DB  ShipID_Cobra_Mk_3_P, ShipID_Asp_Mk_2, ShipID_Python_P, ShipID_Fer_De_Lance
   5+ 797D              ShipHunterTableSize     EQU $ - ShipHunterTable
   6+ 797D 19           ShipMissileTable        DB  ShipID_Missile
   7+ 797E              ShipMissileTableSize    EQU $ - ShipMissileTable
# file closed: ./Tables/ShipClassTable.asm
 532  797E
 533  797E AF           SeedGalaxy0:            xor     a
 534  797F                                      MMUSelectGalaxyA
 534  797F ED 92 57    >                     nextreg GalaxyDataMMU,     a
 535  7982 DD 21 16 E0                          ld      ix,galaxy_data
 536  7986 AF                                   xor		a
 537  7987 32 A1 83                             ld		(XSAV),a
 538  798A CD 94 89                             call    copy_galaxy_to_system
 539  798D DD E5        SeedGalaxy0Loop:        push    ix
 540  798F D1                                   pop     de
 541  7990 21 88 83                             ld      hl,SystemSeed
 542  7993 CD 9A 89                             call    copy_seed
 543  7996 DD E5                                push    ix
 544  7998 E1                                   pop     hl
 545  7999 ED 34 08 00                          add     hl,8
 546  799D E5                                   push    hl
 547  799E DD E1                                pop     ix
 548  79A0 CD CF 89                             call    next_system_seed
 549  79A3 3A A1 83                             ld		a,(XSAV)
 550  79A6 3D                                   dec		a
 551  79A7 FE 00                                cp		0
 552  79A9 C8                                   ret		z
 553  79AA 32 A1 83                             ld		(XSAV),a
 554  79AD 20 DE                                jr      nz,SeedGalaxy0Loop
 555  79AF C9                                   ret
 556  79B0
 557  79B0
 558  79B0
 559  79B0
 560  79B0                  ;include "./ModelRender/testdrawing.asm"
 561  79B0                  include "./Menus/AttractMode.asm"
# file opened: ./Menus/AttractMode.asm
   1+ 79B0              AttractDuration             EQU $00F0
   2+ 79B0              AttractCounterStart         EQU $80
   3+ 79B0 F0 00        AttractTimer:              DW      AttractDuration
   4+ 79B2 80           AttractCounter:            DB      AttractCounterStart
   5+ 79B3
   6+ 79B3 3D 08        Attract_boiler_text		DW $083D
   7+ 79B5
   8+ 79B5
   9+ 79B5 4C 6F 61 64  ATTR_LoadCommander      DB "Load Commander (Y/N)",0
   9+ 79B9 20 43 6F 6D
   9+ 79BD 6D 61 6E 64
   9+ 79C1 65 72 20 28
   9+ 79C5 59 2F 4E 29
   9+ 79C9 00
  10+ 79CA
  11+ 79CA FF           LocalXCounter           DB $FF
  12+ 79CB FF           LocalZCounter           DB $FF
  13+ 79CC
  14+ 79CC CD 41 89     RandomXCounter:         call    doRandom
  15+ 79CF C0                                   ret     nz
  16+ 79D0 3A CA 79                             ld      a,(LocalXCounter)
  17+ 79D3 EE 80                                xor     $80
  18+ 79D5 32 CA 79                             ld      (LocalXCounter),a
  19+ 79D8 C9                                   ret
  20+ 79D9
  21+ 79D9 CD 41 89     RandomYCounter:         call    doRandom
  22+ 79DC C0                                   ret     nz
  23+ 79DD                                      ;ReturnIfALTNusng 254
  24+ 79DD 3A CB 79                             ld      a,(LocalZCounter)
  25+ 79E0 EE 80                                xor     $80
  26+ 79E2 32 CB 79                             ld      (LocalZCounter),a
  27+ 79E5 C9                                   ret
  28+ 79E6
  29+ 79E6
  30+ 79E6              AttractMode:            MMUSelectLayer1
  30+ 79E6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  31+ 79EA CD 80 E0                             call	l1_cls
  32+ 79ED 3E 07                                ld		a,7
  33+ 79EF CD 9B E0                             call	l1_attr_cls_to_a
  34+ 79F2 1E FF                                ld      e,$FF
  35+ 79F4 ED 5B B3 79                          ld      de,(Attract_boiler_text)
  36+ 79F8 21 B5 79                             ld      hl,ATTR_LoadCommander
  37+ 79FB CD C8 E0                             call    l1_print_at
  38+ 79FE                                      MMUSelectSpriteBank
  38+ 79FE ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  39+ 7A02 CD 6E E5                             call        sprite_cls_cursors
  40+ 7A05 CD F4 E0                             call    l2_cls_lower_third
  41+ 7A08                                      MMUSelectConsoleBank
  41+ 7A08 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  42+ 7A0C 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  43+ 7A0F 11 00 E0                             ld          de,ConsoleImageData
  44+ 7A12 01 00 08                             ld          bc, ScreenL1BottomLen
  45+ 7A15 CD 54 7F                             call        memcopy_dma
  46+ 7A18 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  47+ 7A1B 11 00 E8                             ld          de,ConsoleAttributes
  48+ 7A1E 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  49+ 7A21 CD 54 7F                             call        memcopy_dma
  50+ 7A24                                      MMUSelectLayer2
  50+ 7A24 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  51+ 7A28 CD 03 E0                             call    asm_l2_double_buffer_on
  52+ 7A2B CD A9 7A     .StartShip:             call    SelectARandomShip
  53+ 7A2E CD 38 80     .DrawLoop:              call    scan_keyboard
  54+ 7A31 3E 50                                ld      a,c_Pressed_Yes
  55+ 7A33 CD 86 80                             call    is_key_up_state
  56+ 7A36 20 69                                jr      nz,.YPressed
  57+ 7A38 3E 52                                ld      a,c_Pressed_No
  58+ 7A3A CD 86 80                             call    is_key_up_state
  59+ 7A3D 20 65                                jr      nz,.NPressed
  60+ 7A3F                                      MMUSelectUniverseN  1
  60+ 7A3F ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
  61+ 7A43                                      ;call    TidyUbnK
  62+ 7A43 CD 9E D6                             call    ApplyShipRollAndPitch
  63+ 7A46 CD CC 79                             call    RandomXCounter
  64+ 7A49 CD D9 79                             call    RandomYCounter
  65+ 7A4C 3A CA 79                             ld      a,(LocalXCounter)
  66+ 7A4F 32 48 C0                             ld      (UBnKRotXCounter),a
  67+ 7A52 3A CB 79                             ld      a,(LocalZCounter)
  68+ 7A55 32 49 C0                             ld      (UBnKRotZCounter),a
  69+ 7A58              .ProcessUnivShip:       MMUSelectLayer2
  69+ 7A58 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ 7A5C CD DF E0                             call   l2_cls_upper_two_thirds
  71+ 7A5F CD 06 D9                             call    ProcessShip
  72+ 7A62 01 01 01     .Drawbox:               ld		bc,$0101
  73+ 7A65 11 FD 7F                             ld		de,$7FFD
  74+ 7A68 3E C0                                ld		a,$C0
  75+ 7A6A                                      MMUSelectLayer2
  75+ 7A6A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  76+ 7A6E CD 49 E2                             call	l2_draw_box
  77+ 7A71 CD 13 E1     .DoubleBuffer:          call    l2_flip_buffers
  78+ 7A74 3A B2 79                             ld      a,(AttractCounter)
  79+ 7A77                                      JumpIfAIsZero .SameShipPosition
  79+ 7A77 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  79+ 7A78 CA 8D 7A    >                        jp	    z, .SameShipPosition
  80+ 7A7B 3D                                   dec     a
  81+ 7A7C 32 B2 79                             ld      (AttractCounter),a
  82+ 7A7F 2A 26 C0                             ld      hl, (UBnKzlo)
  83+ 7A82 11 08 00     .UpdatePos:             ld      de, $0008
  84+ 7A85 ED 52                                sbc     hl,de
  85+ 7A87 22 26 C0                             ld      (UBnKzlo),hl
  86+ 7A8A CD 41 89                             call    doRandom
  87+ 7A8D 2A B0 79     .SameShipPosition:      ld      hl,(AttractTimer)
  88+ 7A90 2B                                   dec     hl
  89+ 7A91 22 B0 79                             ld      (AttractTimer),hl
  90+ 7A94 7C                                   ld      a,h
  91+ 7A95 B5                                   or      l
  92+ 7A96 20 96                                jr      nz,.DrawLoop
  93+ 7A98 21 F0 00     .NewShip:               ld      hl,AttractDuration
  94+ 7A9B 22 B0 79                             ld      (AttractTimer),hl
  95+ 7A9E C3 2B 7A                             jp      .StartShip
  96+ 7AA1 3E 00        .YPressed:              ld      a,0
  97+ 7AA3 C9                                   ret
  98+ 7AA4 3E FF        .NPressed:              ld      a,$FF
  99+ 7AA6 C9                                   ret
 100+ 7AA7 DD 01        .ExitAttractMode:       break
 101+ 7AA9
 102+ 7AA9 06 01        SelectARandomShip:      ld      b,1                             ; Demo screen uses slot 1
 103+ 7AAB                                      MMUSelectUniverseN  1
 103+ 7AAB ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 104+ 7AAF                                      MMUSelectShipBank1
 104+ 7AAF ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 105+ 7AB3 FD 26 01                             ld      iyh, 1
 106+ 7AB6 CD 41 89     .SelectRandom:          call    doRandom
 107+ 7AB9                                      JumpIfAGTENusng ShipID_Rattler+1, .SelectRandom
 107+ 7AB9 FE 2C       >                        cp     ShipID_Rattler+1
 107+ 7ABB D2 B6 7A    >                        jp		nc,.SelectRandom
 108+ 7ABE FD 6F                                ld      iyl,a
 109+ 7AC0 CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
 110+ 7AC3                                      MMUSelectShipBankA
 110+ 7AC3 ED 92 57    >					 nextreg ShipModelMMU,	    a
 111+ 7AC6 78                                   ld      a,b
 112+ 7AC7 CD 6A E0                             call    CopyShipToUniverse
 113+ 7ACA 3A 45 C3                             ld      a,(ShipTypeAddr)
 114+ 7ACD CB 7F                                bit     7,a                                 ; is it a type we don't want in attract mode
 115+ 7ACF 20 E5                                jr      nz,.SelectRandom
 116+ 7AD1 3E 01                                ld      a,1                                 ; slot 1, iyh and iyl already set
 117+ 7AD3 CD 5D C7                             call    UnivInitRuntime
 118+ 7AD6 CD 6B C6                             call    UnivSetDemoPostion
 119+ 7AD9 21 F0 00                             ld      hl,AttractDuration
 120+ 7ADC 22 B0 79                             ld      (AttractTimer),hl
 121+ 7ADF 3E 80                                ld      a, AttractCounterStart
 122+ 7AE1 32 B2 79                             ld      (AttractCounter),a
 123+ 7AE4 C9                                   ret
 124+ 7AE5
 125+ 7AE5
 126+ 7AE5
# file closed: ./Menus/AttractMode.asm
 562  7AE5
 563  7AE5                  include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 7AE5              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 7AE5              ; so xx12 = XX15 * XX16 row
   3+ 7AE5              XX12ProcessOneRow:
   4+ 7AE5              XX12CalcXCell:
   5+ 7AE5 ED 4B A6 C0          ld		bc,(UBnkXScaled)
   6+ 7AE9 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 7AEA 23           		inc		hl
   8+ 7AEB 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 7AEC 7A           		ld		a,d
  10+ 7AED A8                   xor     b
  11+ 7AEE E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 7AF0 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 7AF2 78           		ld		a,b                                     ; now make bc abs bc
  14+ 7AF3 E6 7F        		and		SignMask8Bit
  15+ 7AF5 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 7AF6 E5           		push	hl
  17+ 7AF7 16 00                ld      d,0                                     ; d = value
  18+ 7AF9 60           		ld		h,b
  19+ 7AFA 69           		ld		l,c
  20+ 7AFB CD A2 96     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 7AFE 22 6F 7F     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 7B01 DD 7C        		ld		a,ixh
  23+ 7B03 32 76 7F     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 7B06 E1           		pop		hl
  25+ 7B07              XX12CalcYCell:
  26+ 7B07 ED 4B A8 C0          ld		bc,(UBnkYScaled)
  27+ 7B0B 23           		inc		hl
  28+ 7B0C 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 7B0D 23           		inc		hl
  30+ 7B0E 56           		ld		d,(hl)
  31+ 7B0F 7A           		ld		a,d
  32+ 7B10 A8                   xor     b
  33+ 7B11 E6 80        		and		SignOnly8Bit
  34+ 7B13 DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 7B15 78           		ld		a,b                                     ; now make bc abs bc
  36+ 7B16 E6 7F        		and		SignMask8Bit
  37+ 7B18 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 7B19 E5           		push	hl
  39+ 7B1A 16 00                ld      d,0                                     ; d = value
  40+ 7B1C 60           		ld		h,b
  41+ 7B1D 69           		ld		l,c
  42+ 7B1E CD A2 96     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 7B21 22 71 7F     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 7B24 DD 7C        		ld		a,ixh
  45+ 7B26 32 75 7F     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 7B29 E1           		pop		hl
  47+ 7B2A              XX12CalcZCell:
  48+ 7B2A ED 4B AA C0          ld		bc,(UBnkZScaled)
  49+ 7B2E 23           		inc		hl
  50+ 7B2F 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 7B30 23           		inc		hl
  52+ 7B31 56           		ld		d,(hl)
  53+ 7B32 7A           		ld		a,d
  54+ 7B33 A8                   xor     b
  55+ 7B34 E6 80        		and		SignOnly8Bit
  56+ 7B36 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 7B38 78           		ld		a,b                                     ; now make bc abs bc
  58+ 7B39 E6 7F        		and		SignMask8Bit
  59+ 7B3B 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 7B3C 16 00                ld      d,0                                     ; d = value
  61+ 7B3E 60           		ld		h,b
  62+ 7B3F 69           		ld		l,c
  63+ 7B40 CD A2 96     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 7B43 22 73 7F     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 7B46 DD 7C        		ld		a,ixh
  66+ 7B48 32 77 7F     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 7B4B              XX12CalcCellResult:
  68+ 7B4B 2A 6F 7F     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 7B4E ED 5B 71 7F  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 7B52 ED 4B 75 7F  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 7B56              XX12MSBOnly:
  72+ 7B56 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 7B57 5A           		ld		e,d									    ; for both results
  74+ 7B58 AF           		xor		a									    ;
  75+ 7B59 67           		ld		h,a									    ;
  76+ 7B5A 57           		ld		d,a									    ; so set high byte to 0
  77+ 7B5B CD DF 93     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 7B5E 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 7B5F 3A 77 7F     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 7B62 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 7B63 ED 5B 73 7F  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 7B67 5A           		ld		e,d                                     ; d = result /256
  83+ 7B68 16 00        		ld		d,0									    ; and only us high byte
  84+ 7B6A CD DF 93     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 7B6D C9           		ret											    ; hl = result, a = sign
  86+ 7B6E              								    ; hl = result, a = sign
  87+ 7B6E
  88+ 7B6E              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 7B6E              ;...X cell
  90+ 7B6E 21 79 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 7B71 CD E5 7A             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 7B74 47           		ld		b,a                                 ; b = sign
  93+ 7B75 7C           		ld		a,h                                 ; a = high byte
  94+ 7B76 B0           		or		b
  95+ 7B77 32 AD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 7B7A 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 7B7B 32 AC C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 7B7E              ;...Y cell
  99+ 7B7E 21 81 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 7B81 CD E5 7A             call    XX12ProcessOneRow
 101+ 7B84 47           		ld		b,a
 102+ 7B85 7C           		ld		a,h
 103+ 7B86              ;		ld		a,l
 104+ 7B86 B0           		or		b
 105+ 7B87 32 AF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 7B8A 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 7B8B 32 AE C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 7B8E              ;...Z cell
 109+ 7B8E 21 89 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 7B91 CD E5 7A             call    XX12ProcessOneRow
 111+ 7B94 47           		ld		b,a
 112+ 7B95 7C                   ld		a,h
 113+ 7B96              ;		ld		a,l
 114+ 7B96 B0           		or		b
 115+ 7B97 32 B1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 7B9A 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 7B9B 32 B0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 7B9E C9                   ret
 119+ 7B9F
 120+ 7B9F              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 7B9F              ;...X cell
 122+ 7B9F 21 79 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 7BA2 CD E5 7A             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 7BA5 47           		ld		b,a                                 ; b = sign
 125+ 7BA6 7C           		ld		a,h                                 ; a = high byte
 126+ 7BA7 B0           		or		b
 127+ 7BA8 32 AD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 7BAB 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 7BAC 32 AC C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 7BAF              ;...Y cell
 131+ 7BAF 21 81 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 7BB2 CD E5 7A             call    XX12ProcessOneRow
 133+ 7BB5 47           		ld		b,a
 134+ 7BB6 7C           		ld		a,h
 135+ 7BB7              ;		ld		a,l
 136+ 7BB7 B0           		or		b
 137+ 7BB8 32 AF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 7BBB 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 7BBC 32 AE C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 7BBF              ;...Z cell
 141+ 7BBF 21 89 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 7BC2 CD E5 7A             call    XX12ProcessOneRow
 143+ 7BC5 47           		ld		b,a
 144+ 7BC6 7C                   ld		a,h
 145+ 7BC7              ;		ld		a,l
 146+ 7BC7 B0           		or		b
 147+ 7BC8 32 B1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 7BCB 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 7BCC 32 B0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 7BCF C9                   ret
 151+ 7BD0
 152+ 7BD0              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 7BD0              ;...X cell
 154+ 7BD0 21 61 C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 7BD3 CD E5 7A             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 7BD6 47           		ld		b,a                                 ; b = sign
 157+ 7BD7 7C           		ld		a,h                                 ; a = high byte
 158+ 7BD8 B0           		or		b
 159+ 7BD9 32 AD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 7BDC 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 7BDD 32 AC C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 7BE0              ;...Y cell
 163+ 7BE0 21 67 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 7BE3 CD E5 7A             call    XX12ProcessOneRow
 165+ 7BE6 47           		ld		b,a
 166+ 7BE7 7C           		ld		a,h
 167+ 7BE8              ;		ld		a,l
 168+ 7BE8 B0           		or		b
 169+ 7BE9 32 AF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 7BEC 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 7BED 32 AE C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 7BF0              ;...Z cell
 173+ 7BF0 21 6D C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 7BF3 CD E5 7A             call    XX12ProcessOneRow
 175+ 7BF6 47           		ld		b,a
 176+ 7BF7 7C                   ld		a,h
 177+ 7BF8              ;		ld		a,l
 178+ 7BF8 B0           		or		b
 179+ 7BF9 32 B1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 7BFC 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 7BFD 32 B0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 7C00 C9                   ret
# file closed: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
 564  7C01                  include "./ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1+ 7C01 21 AC C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 7C04 11 A6 C0                             ld      de,XX15
   3+ 7C07 01 06 00                             ld      bc,6
   4+ 7C0A ED B0                                ldir
   5+ 7C0C C9                                   ret
   6+ 7C0D
   7+ 7C0D 21 AC C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 7C10 11 B2 C0                             ld      de,XX12Save
   9+ 7C13 01 06 00                             ld      bc,6
  10+ 7C16 ED B0                                ldir
  11+ 7C18 C9                                   ret
  12+ 7C19
  13+ 7C19 21 B2 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 7C1C 11 AC C0                             ld      de,XX12
  15+ 7C1F 01 06 00                             ld      bc,6
  16+ 7C22 ED B0                                ldir
  17+ 7C24 C9                                   ret
  18+ 7C25
  19+ 7C25 21 AC C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 7C28 11 B8 C0                             ld      de,XX12Save2
  21+ 7C2B 01 06 00                             ld      bc,6
  22+ 7C2E ED B0                                ldir
  23+ 7C30 C9                                   ret
  24+ 7C31
  25+ 7C31 21 B8 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 7C34 11 AC C0                             ld      de,XX12
  27+ 7C37 01 06 00                             ld      bc,6
  28+ 7C3A ED B0                                ldir
  29+ 7C3C C9                                   ret
  30+ 7C3D
# file closed: ./ModelRender/CopyXX12ToXX15.asm
 565  7C3D                  include "./ModelRender/CopyXX15ToXX12.asm"
# file opened: ./ModelRender/CopyXX15ToXX12.asm
   1+ 7C3D 21 A6 C0     CopyXX15ToXX12:         ld		hl,XX15
   2+ 7C40 11 AC C0                             ld      de,XX12
   3+ 7C43 01 06 00                             ld      bc,6
   4+ 7C46 ED B0                                ldir
   5+ 7C48 C9                                   ret
   6+ 7C49
   7+ 7C49
   8+ 7C49
   9+ 7C49 21 A6 C0     CopyXX15ToXX15Save:     ld		hl,XX15
  10+ 7C4C 11 C1 C0                             ld      de,XX15Save
  11+ 7C4F 01 06 00                             ld      bc,6
  12+ 7C52 ED B0                                ldir
  13+ 7C54 C9                                   ret
  14+ 7C55
  15+ 7C55 21 C1 C0     CopyXX15SaveToXX15:     ld		hl,XX15Save
  16+ 7C58 11 A6 C0                             ld      de,XX15
  17+ 7C5B 01 06 00                             ld      bc,6
  18+ 7C5E ED B0                                ldir
  19+ 7C60 C9                                   ret
  20+ 7C61
  21+ 7C61 21 A6 C0     CopyXX15ToXX15Save2:    ld		hl,XX15
  22+ 7C64 11 C9 C0                             ld      de,XX15Save2
  23+ 7C67 01 06 00                             ld      bc,6
  24+ 7C6A ED B0                                ldir
  25+ 7C6C C9                                   ret
  26+ 7C6D
  27+ 7C6D 21 C9 C0     CopyXX15Save2ToXX15:    ld		hl,XX15Save2
  28+ 7C70 11 A6 C0                             ld      de,XX15
  29+ 7C73 01 06 00                             ld      bc,6
  30+ 7C76 ED B0                                ldir
  31+ 7C78 C9                                   ret
  32+ 7C79
# file closed: ./ModelRender/CopyXX15ToXX12.asm
 566  7C79                  include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ./Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 7C79              ScaleXX16Matrix197:
   2+ 7C79                      IFDEF LOGMATHS
   3+ 7C79 ~                                    ld		b,9                 ; Interate though all 9 matrix elements
   4+ 7C79 ~                                    ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5+ 7C79 ~                                    MMUSelectMathsTables
   6+ 7C79 ~            .ScaleXX16Loop:         ld		e,(hl)              ; set DE = matrix value              ;
   7+ 7C79 ~                                    inc		hl                  ;
   8+ 7C79 ~                                    ld		a,(hl)              ;
   9+ 7C79 ~                                    ld		d,a                 ;
  10+ 7C79 ~                                    and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  11+ 7C79 ~                                    ld		ixl,a				; retain for sign bit
  12+ 7C79 ~                                    ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13+ 7C79 ~                                    ld      a,d                 ; a = high byte after x 2
  14+ 7C79 ~                                    push	bc                  ; save BC  counter and constant 197
  15+ 7C79 ~                                    push	hl                  ; save HL
  16+ 7C79 ~                                    call    AEquAmul256Div197Log;
  17+ 7C79 ~                                    pop		hl
  18+ 7C79 ~                                    dec     hl                  ; move back to low byte
  19+ 7C79 ~                                    ld      (hl),a              ; save result in low byte as we want to preserve high byte sign
  20+ 7C79 ~                                    inc     hl                  ; move back to high byte
  21+ 7C79 ~                                    ld      a,ixl
  22+ 7C79 ~                                    ld      (hl),a              ; write back just sign bit
  23+ 7C79 ~                                    pop		bc                  ; retrieve both counter and constant 197
  24+ 7C79 ~                                    inc     hl                  ; no to next vertex value
  25+ 7C79 ~                                    djnz	.ScaleXX16Loop
  26+ 7C79 ~                                    MMUSelectROM0
  27+ 7C79 ~                                    ret
  28+ 7C79                      ELSE
  29+ 7C79 06 09                                ld		b,9                 ; Interate though all 9 matrix elements
  30+ 7C7B 0E C5                                ld		c,ConstNorm         ; c = 197
  31+ 7C7D 21 61 C0                             ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
  32+ 7C80 7E           .ScaleXX16Loop:         ld		a,(hl)              ; set DE = matrix value
  33+ 7C81 5F                                   ld		e,a                 ;
  34+ 7C82 23                                   inc		hl                  ;
  35+ 7C83 7E                                   ld		a,(hl)              ;
  36+ 7C84 57                                   ld		d,a                 ;
  37+ 7C85 E6 80                                and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  38+ 7C87 DD 6F                                ld		ixl,a				; retain for sign bit
  39+ 7C89                                      ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  39+ 7C89 CB 23       >			   sla e
  39+ 7C8B CB 12       >			   rl  d
  40+ 7C8D 7A                                   ld      a,d                 ; a = high byte after x 2
  41+ 7C8E C5                                   push	bc                  ; save BC  counter and constant 197
  42+ 7C8F E5                                   push	hl                  ; save HL
  43+ 7C90 CD 24 99                             call	DIV16Amul256dCUNDOC; AEquAmul256DivD; DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  44+ 7C93 E1                                   pop		hl
  45+ 7C94 2B                                   dec     hl                  ; move back to low byte
  46+ 7C95 71                                   ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  47+ 7C96 23                                   inc     hl                  ; move back to high byte
  48+ 7C97                                  ;    ld      a,(hl)
  49+ 7C97                                  ;    and     $80
  50+ 7C97 DD 7D                                ld      a,ixl
  51+ 7C99 77                                   ld      (hl),a              ; write back just sign bit
  52+ 7C9A C1                                   pop		bc                  ; retrieve both counter and constant 197
  53+ 7C9B 23                                   inc     hl                  ; no to next vertex value
  54+ 7C9C 10 E2                                djnz	.ScaleXX16Loop
  55+ 7C9E C9                                   ret
  56+ 7C9F                      ENDIF
# file closed: ./Maths/Utilities/ScaleXX16Matrix197.asm
 567  7C9F
 568  7C9F                  include "./Universe/StarDust/StarRoutines.asm"
# file opened: ./Universe/StarDust/StarRoutines.asm
   1+ 7C9F              ;note: DIV16Amul256dCUNDOC as per
   2+ 7C9F              ;                                   BC = A0
   3+ 7C9F              ;                                   DE = 0C
   4+ 7C9F              ;                                   so BC = a * 256 / C
   5+ 7C9F
   6+ 7C9F              ; We can cheat here, Speed is always 0 or positive
   7+ 7C9F              ; z postion will always be positive if we can see it
   8+ 7C9F
   9+ 7C9F EB           InitStarAtHL:           ex      de,hl               ; preserving hl
  10+ 7CA0 CD 41 89                             call    doRND               ; a = random OR bit 5
  11+ 7CA3 EB                                   ex      de,hl               ; .
  12+ 7CA4 F6 08                                or      8                   ; .
  13+ 7CA6 77                                   ld      (hl),a              ; save to x pos
  14+ 7CA7 E6 7F                                and     $7F                 ; a = abs a
  15+ 7CA9 23                                   inc     hl                  ;
  16+ 7CAA 77                                   ld      (hl),a              ;
  17+ 7CAB EB                                   ex      de,hl               ; preserving hl
  18+ 7CAC CD 41 89                             call    doRND               ; a = -ve (random / 2)
  19+ 7CAF EB                                   ex      de,hl               ; .
  20+ 7CB0 0F                                   rrca                        ; .
  21+ 7CB1 E6 80                                and     $80                 ; .
  22+ 7CB3 B6                                   or      (hl)                ; or with
  23+ 7CB4 77                                   ld      (hl),a
  24+ 7CB5 23                                   inc     hl
  25+ 7CB6 EB                                   ex      de,hl
  26+ 7CB7 CD 41 89                             call    doRND
  27+ 7CBA EB                                   ex      de,hl
  28+ 7CBB F6 04                                or      4
  29+ 7CBD 77                                   ld      (hl),a
  30+ 7CBE 23                                   inc     hl
  31+ 7CBF E6 7F                                and     $7F
  32+ 7CC1 77                                   ld      (hl),a
  33+ 7CC2 EB                                   ex      de,hl
  34+ 7CC3 CD 41 89                             call    doRND
  35+ 7CC6 EB                                   ex      de,hl
  36+ 7CC7 0F                                   rrca
  37+ 7CC8 E6 80                                and     $80
  38+ 7CCA B6                                   or      (hl)
  39+ 7CCB 77                                   ld      (hl),a
  40+ 7CCC 23                                   inc     hl
  41+ 7CCD EB                                   ex      de,hl
  42+ 7CCE CD 41 89                             call    doRND
  43+ 7CD1 EB                                   ex      de,hl
  44+ 7CD2 F6 90                                or      144
  45+ 7CD4 77                                   ld      (hl),a
  46+ 7CD5 23                                   inc     hl
  47+ 7CD6 F6 70                                or      %01110000
  48+ 7CD8 E6 7F                                and     $7f     ; bodge
  49+ 7CDA 77                                   ld      (hl),a
  50+ 7CDB 23                                   inc     hl
  51+ 7CDC C9                                   ret
  52+ 7CDD
  53+ 7CDD EB           InitHyperStarAtHL:      ex      de,hl
  54+ 7CDE CD 41 89                             call    doRND
  55+ 7CE1 CB 27                                sla     a
  56+ 7CE3 CB 27                                sla     a                ; so its * 4 as we have a blank spot
  57+ 7CE5 EB                                   ex      de,hl
  58+ 7CE6 E6 F8                                and     %11111000
  59+ 7CE8 77                                   ld      (hl),a
  60+ 7CE9 E6 7F                                and     $7F
  61+ 7CEB 23                                   inc     hl
  62+ 7CEC 77                                   ld      (hl),a
  63+ 7CED EB                                   ex      de,hl
  64+ 7CEE CD 41 89                             call    doRND
  65+ 7CF1 EB                                   ex      de,hl
  66+ 7CF2 0F                                   rrca
  67+ 7CF3 E6 80                                and     $80
  68+ 7CF5 B6                                   or      (hl)
  69+ 7CF6 77                                   ld      (hl),a
  70+ 7CF7 23                                   inc     hl
  71+ 7CF8 EB                                   ex      de,hl
  72+ 7CF9 CD 41 89                             call    doRND
  73+ 7CFC CB 27                                sla     a
  74+ 7CFE CB 27                                sla     a               ; so its * 4 as we have a blank spot
  75+ 7D00 EB                                   ex      de,hl
  76+ 7D01 E6 F8                                and     %11111000
  77+ 7D03 77                                   ld      (hl),a
  78+ 7D04 23                                   inc     hl
  79+ 7D05 E6 7F                                and     $7F
  80+ 7D07 77                                   ld      (hl),a
  81+ 7D08 EB                                   ex      de,hl
  82+ 7D09 CD 41 89                             call    doRND
  83+ 7D0C EB                                   ex      de,hl
  84+ 7D0D 0F                                   rrca
  85+ 7D0E E6 80                                and     $80
  86+ 7D10 B6                                   or      (hl)
  87+ 7D11 77                                   ld      (hl),a
  88+ 7D12 23                                   inc     hl
  89+ 7D13 EB                                   ex      de,hl
  90+ 7D14 CD 41 89                             call    doRND
  91+ 7D17 EB                                   ex      de,hl
  92+ 7D18 F6 5F                                or      95
  93+ 7D1A 77                                   ld      (hl),a
  94+ 7D1B 23                                   inc     hl
  95+ 7D1C F6 70                                or      %01110000
  96+ 7D1E E6 7F                                and     $7f     ; bodge
  97+ 7D20 77                                   ld      (hl),a
  98+ 7D21 23                                   inc     hl
  99+ 7D22 C9                                   ret
 100+ 7D23
 101+ 7D23              ;----------------------------------------------------------------------------------------------------------------------------------
 102+ 7D23 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 103+ 7D25 21 F9 85                             ld      hl,varDust
 104+ 7D28 CD 9F 7C     .InitStarsLoop:         call    InitStarAtHL
 105+ 7D2B 10 FB                                djnz    .InitStarsLoop
 106+ 7D2D C9                                   ret
 107+ 7D2E              ;----------------------------------------------------------------------------------------------------------------------------------
 108+ 7D2E 06 0B        InitialiseHyperStars:   ld      b,MaxNumberOfStars
 109+ 7D30 21 F9 85                             ld      hl,varDust
 110+ 7D33 CD DD 7C     .InitStarsLoop:         call    InitHyperStarAtHL
 111+ 7D36 10 FB                                djnz    .InitStarsLoop
 112+ 7D38 C9                                   ret
 113+ 7D39              ;----------------------------------------------------------------------------------------------------------------------------------
 114+ 7D39 06 0B        DustForward:            ld      b,MaxNumberOfStars                  ; get the number of stars to process
 115+ 7D3B FD 21 F9 85                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 116+ 7D3F C5           StarProcessLoop:        push    bc                                  ; save counter +1
 117+ 7D40 FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)                            ; e  = z high
 118+ 7D43 5F                                   ld      e,a                                 ; d = 0
 119+ 7D44 16 00                                ld      d,0                                 ; de = zhi/256
 120+ 7D46 3A 98 83                             ld      a,(DELTA)                           ; a = speed
 121+ 7D49                                      JumpIfAIsNotZero .NormalSpeed               ; if we are stationary set speed
 121+ 7D49 A7          >                        and     a
 121+ 7D4A C2 4E 7D    >                        jp	    nz,.NormalSpeed
 122+ 7D4D 3C                                   inc     a                                   ; so it is at least some dust movement
 123+ 7D4E 47           .NormalSpeed:           ld      b,a                                 ;
 124+ 7D4F 0E 00                                ld      c,0                                 ; bc = delta * 256
 125+ 7D51 CD B0 99                             call    BC_Div_DE                           ; BC = Speed/Z , HL = remainder
 126+ 7D54                                      ShiftHLRight1
 126+ 7D54 CB 3C       >			   srl h
 126+ 7D56 CB 1D       >			   rr  l
 127+ 7D58                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 127+ 7D58 CB 3C       >			   srl h
 127+ 7D5A CB 1D       >			   rr  l
 128+ 7D5C 7D                                   ld      a,l                                 ;
 129+ 7D5D F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 130+ 7D5F DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 131+ 7D61 FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 131+ 7D65 66 05
 132+ 7D67 ED 5B 99 83                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 133+ 7D6B CD D1 94                             call    subHLDES15
 134+ 7D6E                                      JumpOnBitSet h,7,ResetStar                  ; if z ended up negative then reset the star
 134+ 7D6E CB 7C       >                        bit 	7,h
 134+ 7D70 C2 C5 7E    >                        jp      nz,ResetStar
 135+ 7D73 FD 75 04 FD                          ld      (iy+4),hl                           ; save new z pos
 135+ 7D77 74 05
 136+ 7D79 FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 136+ 7D7D 66 01
 137+ 7D7F 7C                                   ld      a,h                                 ;
 138+ 7D80 E6 7F                                and     $7F                                 ;
 139+ 7D82 57                                   ld      d,a                                 ; d = abs(x hi)
 140+ 7D83 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 141+ 7D85 ED 30                                mul                                         ; de =  abs(x hi) * Q
 142+ 7D87 7C                                   ld      a,h                                 ;
 143+ 7D88 E6 80                                and     $80                                 ;
 144+ 7D8A B2                                   or      d                                   ; set sign bit in d
 145+ 7D8B 57                                   ld      d,a                                 ;
 146+ 7D8C CD 02 94                             call    ADDHLDESignedV4                  ; x = x + (x hi/256 * Q)
 147+ 7D8F 7C                                   ld      a,h
 148+ 7D90 E6 7F                                and     $7F
 149+ 7D92                                      JumpIfAGTENusng $70, ResetStar
 149+ 7D92 FE 70       >                        cp     $70
 149+ 7D94 D2 C5 7E    >                        jp		nc,ResetStar
 150+ 7D97 FD 75 00 FD                          ld      (iy+0),hl                           ;
 150+ 7D9B 74 01
 151+ 7D9D FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 151+ 7DA1 66 03
 152+ 7DA3 7C                                   ld      a,h                                 ;
 153+ 7DA4 E6 7F                                and     $7F                                 ;
 154+ 7DA6 57                                   ld      d,a                                 ; d = abs(y hi)
 155+ 7DA7 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 156+ 7DA9 ED 30                                mul                                         ; de =  abs(y hi) * Q
 157+ 7DAB 7C                                   ld      a,h                                 ;
 158+ 7DAC E6 80                                and     $80                                 ;
 159+ 7DAE B2                                   or      d                                   ; set sign bit in d
 160+ 7DAF 57                                   ld      d,a                                 ;
 161+ 7DB0 CD 02 94                             call    ADDHLDESignedV4                  ; y = y + (x hi/256 * Q)
 162+ 7DB3 7C                                   ld      a,h
 163+ 7DB4 E6 7F                                and     $7F
 164+ 7DB6                                      JumpIfAGTENusng $60, ResetStar
 164+ 7DB6 FE 60       >                        cp     $60
 164+ 7DB8 D2 C5 7E    >                        jp		nc,ResetStar
 165+ 7DBB 7C                                   ld      a,h
 166+ 7DBC E6 80                                and     $80
 167+ 7DBE 20 06                                jr      nz,.NoSecondCheck
 168+ 7DC0 7C                                   ld      a,h
 169+ 7DC1                                      JumpIfAGTENusng $20, ResetStar
 169+ 7DC1 FE 20       >                        cp     $20
 169+ 7DC3 D2 C5 7E    >                        jp		nc,ResetStar
 170+ 7DC6 FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 170+ 7DCA 74 03
 171+ 7DCC              ; Now roll
 172+ 7DCC              ;  6. x = x - alpha * y / 256
 173+ 7DCC 3A B3 82     .XRoll:                 ld      a,(ALP1)                           ; h = sign, l = magnitude
 174+ 7DCF FE 00                                cp      0
 175+ 7DD1 28 4D                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 176+ 7DD3                                   ;   break
 177+ 7DD3 6F                                   ld      l,a                                 ; roll magnitude
 178+ 7DD4 3A B5 82                             ld      a,(ALP2FLIP)                        ; inverted roll sign
 179+ 7DD7 E6 80                                and     SignOnly8Bit                        ; sanitise sign bit
 180+ 7DD9 67                                   ld      h,a                                 ; h = roll sign
 181+ 7DDA E5                                   push    hl                                  ; save on the stack
 182+ 7DDB 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 183+ 7DDC 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 184+ 7DDD FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 185+ 7DE0 5F                                   ld      e,a                                 ; save signed byte
 186+ 7DE1 E6 80                                and     SignOnly8Bit                        ; a = sign only
 187+ 7DE3 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 188+ 7DE4 7B           .rxEEquABSignX:         ld      a,e                                 ; e = abs byte
 189+ 7DE5 E6 7F                                and     SignMask8Bit
 190+ 7DE7 5F                                   ld      e,a                                 ; save abs x hi in e
 191+ 7DE8 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 192+ 7DEA 79                                   ld      a,c                                 ; get back sign from roll
 193+ 7DEB A8                                   xor     b                                   ; handle muliple sign bits
 194+ 7DEC B2                                   or      d
 195+ 7DED 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 196+ 7DEE FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 196+ 7DF2 66 01
 197+ 7DF4 CD D1 94                             call    subHLDES15                       ; we are usign add, so may need to fip sign?
 198+ 7DF7 FD 75 00 FD                          ld      (iy+0),hl
 198+ 7DFB 74 01
 199+ 7DFD              ;  5. y = y + alpha * x / 256
 200+ 7DFD              .YRoll:                 ;break
 201+ 7DFD E1                                   pop     hl                                  ; h = sign, l = magnitude
 202+ 7DFE 4C           .rySaveAlphaSign:       ld      c,h                                 ; save alpha sign in c
 203+ 7DFF 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 204+ 7E00 FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 205+ 7E03 5F                                   ld      e,a
 206+ 7E04 E6 80                                and     SignOnly8Bit
 207+ 7E06 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 208+ 7E07 7B           .ryEEquABSignX:         ld      a,e
 209+ 7E08 E6 7F                                and     SignMask8Bit
 210+ 7E0A 5F                                   ld      e,a                                 ; save abs x hi in e
 211+ 7E0B ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 212+ 7E0D 79                                   ld      a,c
 213+ 7E0E A8                                   xor     b                                   ; handle muliple sign bits
 214+ 7E0F B2                                   or      d
 215+ 7E10 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 216+ 7E11 FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 216+ 7E15 66 03
 217+ 7E17 CD 02 94                             call    ADDHLDESignedV4                  ; we are usign add, so may need to fip sign?
 218+ 7E1A FD 75 02 FD                          ld      (iy+2),hl
 218+ 7E1E 74 03
 219+ 7E20 3A A7 82     .NoRoll:                ld      a,(BET1)
 220+ 7E23 FE 00                                cp      0
 221+ 7E25 28 22                                jr      z,.NoPitch
 222+ 7E27              ;  8. y = y - beta * 256
 223+ 7E27 57           .YPitch:                ld      d,a                                 ; d = BET1
 224+ 7E28 FD 7E 02                             ld      a,(iy+2)
 225+ 7E2B 5F                                   ld      e,a                                 ; e = Y HI
 226+ 7E2C ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 227+ 7E2E 5F                                   ld      e,a
 228+ 7E2F ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 229+ 7E31                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 229+ 7E31 CB 23       >			   sla e
 229+ 7E33 CB 12       >			   rl  d
 230+ 7E35 3A A8 82                             ld      a,(BET2)                            ; get inverted Sign
 231+ 7E38 B2                                   or      d
 232+ 7E39 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 233+ 7E3A FD 6E 02 FD                          ld      hl,(iy+2)
 233+ 7E3E 66 03
 234+ 7E40 CD 02 94                             call    ADDHLDESignedV4
 235+ 7E43 FD 75 02 FD                          ld      (iy+2),hl
 235+ 7E47 74 03
 236+ 7E49              ; now work out screen pos
 237+ 7E49              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 238+ 7E49              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 239+ 7E49              ;        pop     de
 240+ 7E49               ;       call    ProjectStarXToScreen
 241+ 7E49                                      ;pop     de
 242+ 7E49              .NoPitch:
 243+ 7E49 FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 244+ 7E4C 6F                                   ld      l,a
 245+ 7E4D E6 7F                                and     $7F
 246+ 7E4F                                      JumpOnBitSet l,7,StarNegXPt
 246+ 7E4F CB 7D       >                        bit 	7,l
 246+ 7E51 C2 5A 7E    >                        jp      nz,StarNegXPt
 247+ 7E54 C6 80                                add     a,$80
 248+ 7E56 4F                                   ld      c,a
 249+ 7E57 C3 5F 7E                             jp      StarDoneX
 250+ 7E5A 47           StarNegXPt:             ld      b,a
 251+ 7E5B 3E 80                                ld      a,$80
 252+ 7E5D 90                                   sub     b
 253+ 7E5E 4F                                   ld      c,a
 254+ 7E5F FD 7E 03     StarDoneX:              ld      a,(iy+3)
 255+ 7E62 6F                                   ld      l,a
 256+ 7E63 E6 7F                                and     $7F
 257+ 7E65                                      JumpOnBitSet l,7,StarNegYPt
 257+ 7E65 CB 7D       >                        bit 	7,l
 257+ 7E67 C2 70 7E    >                        jp      nz,StarNegYPt
 258+ 7E6A C6 60                                add     a,$60
 259+ 7E6C 47                                   ld      b,a
 260+ 7E6D C3 75 7E                             jp      StarDoneY
 261+ 7E70 47           StarNegYPt:             ld      b,a
 262+ 7E71 3E 60                                ld      a,$60
 263+ 7E73 90                                   sub     b
 264+ 7E74 47                                   ld      b,a
 265+ 7E75 3E 92        StarDoneY:              ld      a,L2DustColour
 266+ 7E77 C5                                   push    bc
 267+ 7E78              .DrawStar:              MMUSelectLayer2
 267+ 7E78 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 267+ 7E7C CD 35 E1       call    l2_plot_pixel
 268+ 7E7F FD 7E 05                             ld      a,(iy+5)
 269+ 7E82 C1                                   pop    bc
 270+ 7E83                                      JumpIfAGTENusng $60,EndofStarsLoop
 270+ 7E83 FE 60       >                        cp     $60
 270+ 7E85 D2 B5 7E    >                        jp		nc,EndofStarsLoop
 271+ 7E88 3E 92                                ld      a,L2DustColour
 272+ 7E8A 0C                                   inc     c
 273+ 7E8B C5                                   push    bc
 274+ 7E8C                                      MMUSelectLayer2
 274+ 7E8C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 275+ 7E90 CD 35 E1                             call    l2_plot_pixel
 276+ 7E93 FD 7E 05                             ld      a,(iy+5)
 277+ 7E96 C1                                   pop    bc
 278+ 7E97                                      JumpIfAGTENusng $37,EndofStarsLoop
 278+ 7E97 FE 37       >                        cp     $37
 278+ 7E99 D2 B5 7E    >                        jp		nc,EndofStarsLoop
 279+ 7E9C 3E 92                                ld      a,L2DustColour
 280+ 7E9E 04                                   inc     b
 281+ 7E9F C5                                   push    bc
 282+ 7EA0                                      MMUSelectLayer2
 282+ 7EA0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 282+ 7EA4 CD 35 E1         call    l2_plot_pixel
 283+ 7EA7 FD 7E 05                             ld      a,(iy+5)
 284+ 7EAA C1                                   pop    bc
 285+ 7EAB 3E 92                                ld      a,L2DustColour
 286+ 7EAD 0D                                   dec     c
 287+ 7EAE                                      MMUSelectLayer2
 287+ 7EAE ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 287+ 7EB2 CD 35 E1         call    l2_plot_pixel
 288+ 7EB5 C1           EndofStarsLoop:         pop     bc                                      ;  0
 289+ 7EB6 FD E5        NextStarLoop3:          push    iy                                      ; +1
 290+ 7EB8 E1                                   pop     hl                                      ;  0
 291+ 7EB9 ED 34 06 00                          add     hl,6
 292+ 7EBD E5           NextStarLoop2:          push    hl                                      ; +1
 293+ 7EBE FD E1                                pop     iy                                      ;  0
 294+ 7EC0 05                                   dec     b
 295+ 7EC1 C2 3F 7D                             jp      nz,StarProcessLoop
 296+ 7EC4 C9                                   ret
 297+ 7EC5 C1           ResetStar:              pop     bc                                      ; 0
 298+ 7EC6 FD E5                                push    iy                                      ; +1 (current star)
 299+ 7EC8 E1                                   pop     hl                                      ; 0
 300+ 7EC9 CD 9F 7C                             call    InitStarAtHL
 301+ 7ECC C3 B6 7E                             jp      NextStarLoop3
 302+ 7ECF              ;----------------------------------------------------------------------------------------------------------------------------------
 303+ 7ECF FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 304+ 7ED2 FD 7E 01                             ld      a,(iy+1)
 305+ 7ED5 6F                                   ld      l,a
 306+ 7ED6 E6 7F                                and     $7F
 307+ 7ED8 47                                   ld      b,a
 308+ 7ED9 CD 3B 99                             call    DIV16BCDivDEUNDOC
 309+ 7EDC 7D                                   ld      a,l
 310+ 7EDD                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 310+ 7EDD CB 7F       >                        bit 	7,a
 310+ 7EDF C2 EA 7E    >                        jp      nz,StarXNegativePoint
 311+ 7EE2              ;StarXPositivePoint:									; x was positive result
 312+ 7EE2 2E 80                                ld          l,ScreenCenterX						;
 313+ 7EE4 26 00                                ld          h,0
 314+ 7EE6 09                                   add         hl,bc								; hl = Screen Centre + X
 315+ 7EE7 C3 F1 7E                             jp          StarStoreXPoint
 316+ 7EEA              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 317+ 7EEA 2E 80                                ld          l,ScreenCenterX
 318+ 7EEC 26 00                                ld          h,0
 319+ 7EEE                                      ClearCarryFlag
 319+ 7EEE B7          >                        or a
 320+ 7EEF ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 321+ 7EF1              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 322+ 7EF1 7D                                   ld          a,l
 323+ 7EF2 32 51 86                             ld          (varStarX),a
 324+ 7EF5 C9                                   ret
 325+ 7EF6
 326+ 7EF6 FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 327+ 7EF9 FD 7E 03                             ld          a,(iy+3)
 328+ 7EFC 6F                                   ld          l,a
 329+ 7EFD E6 7F                                and         $7F
 330+ 7EFF 47                                   ld          b,a
 331+ 7F00 CD 3B 99                             call        DIV16BCDivDEUNDOC
 332+ 7F03 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 333+ 7F04                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 333+ 7F04 CB 7F       >                        bit 	7,a
 333+ 7F06 C2 11 7F    >                        jp      nz,StarNegativeYPoint
 334+ 7F09                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 335+ 7F09 2E 60                               ld          l,ScreenCenterY
 336+ 7F0B                                      ClearCarryFlag
 336+ 7F0B B7          >                        or a
 337+ 7F0C ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 338+ 7F0E C3 16 7F                             jp          StarStoreYPoint
 339+ 7F11              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 340+ 7F11 2E 60                                ld          l,ScreenCenterY
 341+ 7F13 26 00                                ld          h,0
 342+ 7F15 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 343+ 7F16              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 344+ 7F16 7D                                   ld          a,l
 345+ 7F17 32 52 86                             ld          (varStarY),a
 346+ 7F1A C9                                   ret
 347+ 7F1B
 348+ 7F1B
# file closed: ./Universe/StarDust/StarRoutines.asm
 569  7F1B              ;    include "Universe/move_object-MVEIT.asm"
 570  7F1B              ;    include "./ModelRender/draw_object.asm"
 571  7F1B              ;    include "./ModelRender/draw_ship_point.asm"
 572  7F1B              ;    include "./ModelRender/drawforwards-LL17.asm"
 573  7F1B              ;    include "./ModelRender/drawforwards-LL17.asm"
 574  7F1B
 575  7F1B                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 7F1B
   2+ 7F1B 00           memfillvalue		DB 0
   3+ 7F1C 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 7F20 7D
   4+ 7F21 1B 7F        memfill_astrt  		DW memfillvalue
   5+ 7F23 00 40        memfill_length 		DB $00,$40
   6+ 7F25 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 7F28 00 00        memfill_bstrt  		DB $00,$00
   8+ 7F2A 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 7F2E              memfill_cmd_len	  	EQU $ - memfill
  10+ 7F2E
  11+ 7F2E              memfill_dma:
  12+ 7F2E              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 7F2E              .set_fill_value:
  14+ 7F2E 32 1B 7F     	ld 		(memfillvalue),a
  15+ 7F31              .set_target:
  16+ 7F31 22 28 7F     	ld		(memfill_bstrt),hl
  17+ 7F34              .set_length:
  18+ 7F34 ED 53 23 7F  	ld		(memfill_length),de
  19+ 7F38              .write_dma:
  20+ 7F38 21 1C 7F     	ld 		hl, memfill
  21+ 7F3B 06 12        	ld 		b, memfill_cmd_len
  22+ 7F3D 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 7F3F ED B3        	otir
  24+ 7F41 C9           	ret
  25+ 7F42
# file closed: ./Hardware/memfill_dma.asm
 576  7F42                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 7F42
   2+ 7F42 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 7F46 7D
   3+ 7F47 00 00        memcopy_astrt  		DB $00,$00
   4+ 7F49 00 40        memcopy_length 		DB $00,$40
   5+ 7F4B 14 10 AD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   6+ 7F4E 00 00        memcopy_bstrt  		DB $00,$00
   7+ 7F50 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 7F54              memcopy_cmd_len	  	equ $ - memcopy
   9+ 7F54
  10+ 7F54              memcopy_dma:
  11+ 7F54              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 7F54              .set_target:
  13+ 7F54 22 4E 7F     	ld		(memcopy_bstrt),hl
  14+ 7F57              .set_source:
  15+ 7F57 ED 53 47 7F  	ld		(memcopy_astrt),de
  16+ 7F5B              .set_length:
  17+ 7F5B ED 43 49 7F  	ld		(memcopy_length),bc
  18+ 7F5F              .write_dma:
  19+ 7F5F 21 42 7F     	ld 		hl, memcopy
  20+ 7F62 06 12        	ld 		b, memcopy_cmd_len
  21+ 7F64 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 7F66 ED B3        	otir
  23+ 7F68 C9           	ret
  24+ 7F69
# file closed: ./Hardware/memcopy_dma.asm
 577  7F69 00 00        XX12PVarQ			DW 0
 578  7F6B 00 00        XX12PVarR			DW 0
 579  7F6D 00 00        XX12PVarS			DW 0
 580  7F6F 00 00        XX12PVarResult1		DW 0
 581  7F71 00 00        XX12PVarResult2		DW 0
 582  7F73 00 00        XX12PVarResult3		DW 0
 583  7F75 00           XX12PVarSign2		DB 0
 584  7F76 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
 585  7F77 00           XX12PVarSign3		DB 0
 586  7F78                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ 7F78              ;
   2+ 7F78              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 7F78              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 7F78              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 7F78              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 7F78              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 7F78              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 7F78              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 7F78              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 7F78              ;
  11+ 7F78              ; Keyboard
  12+ 7F78              ;
  13+ 7F78              ;   0      1       2       3       4       5        6       7       8       9
  14+ 7F78              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 7F78              ;   10     11      12      13      14      15       16      17      18      19
  16+ 7F78              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 7F78              ;   20     21      22      23      24      25       26      27      28      29
  18+ 7F78              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 7F78              ;   30     31      32      33      34      35       36      37      38      39
  20+ 7F78              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 7F78              ;
  22+ 7F78              ; Default map
  23+ 7F78              ;-----------------------------------------------------------------------------------------------------------------------------------
  24+ 7F78              ;   0          1           2             3              4           5           6           7           8           9
  25+ 7F78              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  26+ 7F78              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  27+ 7F78              ;                                                                                                       Find System
  28+ 7F78              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 7F78              ;   10         11          12            13             14          15          16          17          18          19
  30+ 7F78              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  31+ 7F78              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  32+ 7F78              ;-----------------------------------------------------------------------------------------------------------------------------------
  33+ 7F78              ;   20         Accel       22            23             24          25          26          27          28          29
  34+ 7F78              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  35+ 7F78              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  36+ 7F78              ;   PlanetData                                                      PauseGame   SaveGame
  37+ 7F78              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 7F78              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  39+ 7F78              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  40+ 7F78              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  41+ 7F78              ;              ResumeGame
  42+ 7F78
  43+ 7F78              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  44+ 7F78
  45+ 7F78              c_Pressed_Front         equ 0  * 2
  46+ 7F78              c_Pressed_Aft           equ 1  * 2
  47+ 7F78              c_Pressed_Left          equ 2  * 2
  48+ 7F78              c_Pressed_Right         equ 3  * 2
  49+ 7F78              c_Pressed_RollLeft      equ 4  * 2
  50+ 7F78              c_Pressed_RollRight     equ 5  * 2
  51+ 7F78              c_Pressed_Dive          equ 6  * 2
  52+ 7F78              c_Pressed_Climb         equ 7  * 2
  53+ 7F78              c_Pressed_Accellerate   equ 8  * 2
  54+ 7F78              c_Pressed_Decellerate   equ 9  * 2
  55+ 7F78              c_Pressed_FireLaser     equ 10 * 2
  56+ 7F78              c_Pressed_TargetMissle  equ 11 * 2
  57+ 7F78              c_Pressed_FireMissile   equ 12 * 2
  58+ 7F78              c_Pressed_UnarmMissile  equ 13 * 2
  59+ 7F78              c_Pressed_ECM           equ 14 * 2
  60+ 7F78              c_Pressed_EnergyBomb    equ 15 * 2
  61+ 7F78              c_Pressed_EscapePod     equ 16 * 2
  62+ 7F78              c_Pressed_DockingComp   equ 17 * 2
  63+ 7F78              c_Pressed_Hyperspace    equ 18 * 2
  64+ 7F78              c_Pressed_Distance      equ 19 * 2
  65+ 7F78              c_Pressed_HomeCursor    equ 20 * 2
  66+ 7F78              c_Pressed_Launch        equ 21 * 2
  67+ 7F78              c_Pressed_BuyCargo      equ 22 * 2
  68+ 7F78              c_Pressed_SellCargo     equ 23 * 2
  69+ 7F78              c_Pressed_Equip         equ 24 * 2
  70+ 7F78              c_Pressed_GalacticChrt  equ 25 * 2
  71+ 7F78              c_Pressed_LocalChart    equ 26 * 2
  72+ 7F78              c_Pressed_MarketPrices  equ 27 * 2
  73+ 7F78              c_Pressed_Status        equ 28 * 2
  74+ 7F78              c_Pressed_Inventory     equ 29 * 2
  75+ 7F78              c_Pressed_GameSkip      equ 30 * 2
  76+ 7F78              c_Pressed_Save          equ 31 * 2
  77+ 7F78              c_Pressed_Freeze        equ 32 * 2
  78+ 7F78              c_Pressed_Resume        equ 33 * 2
  79+ 7F78              c_Pressed_Recentre      equ 34 * 2
  80+ 7F78              c_Pressed_Quit          equ 35 * 2
  81+ 7F78              c_Pressed_PlanetData    equ 36 * 2
  82+ 7F78              c_Pressed_CursorUp      equ 37 * 2
  83+ 7F78              c_Pressed_CursorDown    equ 38 * 2
  84+ 7F78              c_Pressed_Find          equ 39 * 2
  85+ 7F78              c_Pressed_Yes           equ 40 * 2
  86+ 7F78              c_Pressed_No            equ 41 * 2
  87+ 7F78
  88+ 7F78
  89+ 7F78              ; half row 1
  90+ 7F78              VK_CAPS  				equ 0
  91+ 7F78              VK_Z  					equ 1
  92+ 7F78              VK_X  					equ 2
  93+ 7F78              VK_C  					equ 3
  94+ 7F78              VK_V  					equ 4
  95+ 7F78              ; half row 2
  96+ 7F78              VK_A  					equ 5
  97+ 7F78              VK_S  					equ 6
  98+ 7F78              VK_D  					equ 7
  99+ 7F78              VK_F  					equ 8
 100+ 7F78              VK_G  					equ 9
 101+ 7F78              ; half row 3
 102+ 7F78              VK_Q  					equ 10
 103+ 7F78              VK_W  					equ 11
 104+ 7F78              VK_E  					equ 12
 105+ 7F78              VK_R  					equ 13
 106+ 7F78              VK_T  					equ 14
 107+ 7F78              ; half row 4
 108+ 7F78              VK_1  					equ 15
 109+ 7F78              VK_2  					equ 16
 110+ 7F78              VK_3  					equ 17
 111+ 7F78              VK_4  					equ 18
 112+ 7F78              VK_5  					equ 19
 113+ 7F78              ; half row 5
 114+ 7F78              VK_0 					equ 20
 115+ 7F78              VK_9 					equ 21
 116+ 7F78              VK_8 					equ 22
 117+ 7F78              VK_7 					equ 23
 118+ 7F78              VK_6 					equ 24
 119+ 7F78              ; half row 6
 120+ 7F78              VK_P  					equ 25
 121+ 7F78              VK_O  					equ 26
 122+ 7F78              VK_I  					equ 27
 123+ 7F78              VK_U  					equ 28
 124+ 7F78              VK_Y  					equ 29
 125+ 7F78              ; half row 7
 126+ 7F78              VK_ENTER 				equ 30
 127+ 7F78              VK_L  					equ 31
 128+ 7F78              VK_K  					equ 32
 129+ 7F78              VK_J  					equ 33
 130+ 7F78              VK_H  					equ 34
 131+ 7F78              ; half row 8
 132+ 7F78              VK_SPACE 				equ 35
 133+ 7F78              VK_SYM  				equ 36
 134+ 7F78              VK_M  					equ 37
 135+ 7F78              VK_N  					equ 38
 136+ 7F78              VK_B  					equ 39
 137+ 7F78
 138+ 7F78              ;KeyboardMapping
 139+ 7F78              KeyCode_Front        	equ VK_1
 140+ 7F78              KeyCode_Aft          	equ VK_2
 141+ 7F78              KeyCode_Left         	equ VK_3
 142+ 7F78              KeyCode_Right        	equ VK_4
 143+ 7F78              KeyCode_RollLeft     	equ VK_O
 144+ 7F78              KeyCode_RollRight    	equ VK_P
 145+ 7F78              KeyCode_Dive         	equ VK_Q
 146+ 7F78              KeyCode_Climb        	equ VK_A
 147+ 7F78              KeyCode_Accellerate  	equ VK_W
 148+ 7F78              KeyCode_Decellerate  	equ VK_S
 149+ 7F78              KeyCode_FireLaser    	equ VK_SPACE
 150+ 7F78              KeyCode_TargetMissle 	equ VK_T
 151+ 7F78              KeyCode_FireMissile  	equ VK_F
 152+ 7F78              KeyCode_Find        	equ VK_F
 153+ 7F78              KeyCode_UnarmMissile 	equ VK_R
 154+ 7F78              KeyCode_ECM          	equ VK_E
 155+ 7F78              KeyCode_EnergyBomb   	equ VK_U
 156+ 7F78              KeyCode_EscapePod    	equ VK_CAPS
 157+ 7F78              KeyCode_DockingComp  	equ VK_N
 158+ 7F78              KeyCode_Hyperspace   	equ VK_H
 159+ 7F78              KeyCode_Distance     	equ VK_J
 160+ 7F78              KeyCode_HomeCursor   	equ VK_G
 161+ 7F78              KeyCode_Launch       	equ VK_L
 162+ 7F78              KeyCode_BuyCargo     	equ VK_B
 163+ 7F78              KeyCode_SellCargo    	equ VK_V
 164+ 7F78              KeyCode_Equip        	equ VK_C
 165+ 7F78              KeyCode_GalacticChrt 	equ VK_5
 166+ 7F78              KeyCode_LocalChart   	equ VK_6
 167+ 7F78              KeyCode_MarketPrices 	equ VK_7
 168+ 7F78              KeyCode_Status       	equ VK_8
 169+ 7F78              KeyCode_Inventory    	equ VK_9
 170+ 7F78              KeyCode_GameSkip     	equ VK_Z
 171+ 7F78              KeyCode_Save         	equ VK_O
 172+ 7F78              KeyCode_Freeze       	equ VK_B
 173+ 7F78              KeyCode_Resume       	equ VK_L
 174+ 7F78              KeyCode_Recentre     	equ VK_D
 175+ 7F78              KeyCode_Quit         	equ VK_Y
 176+ 7F78              KeyCode_PlanetData   	equ VK_0
 177+ 7F78              KeyCode_CursorUp        equ VK_Q
 178+ 7F78              KeyCode_CursorDown      equ VK_A
 179+ 7F78              KeyCode_PressedYes      equ VK_Y
 180+ 7F78              KeyCode_PressedNo       equ VK_N
 181+ 7F78
 182+ 7F78 00 00 00...  Keys					DS	40          ; This is the list of key states for all the VK keys presssed i.e. VK_CAPS through to VK_B
 183+ 7FA0              c_KeyBoardLen 			equ $ - Keys
 184+ 7FA0 00 00 00...  RawKeys					DS	8
 185+ 7FA8 FE FD FB F7  KeyAddrTab				DB	$FE, $FD, $FB, $F7, $EF, $DF, $BF, $7F
 185+ 7FAC EF DF BF 7F
 186+ 7FB0              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 187+ 7FB0              ; of updating this table with the respective location to look up
 188+ 7FB0              ; key list sequence is in table above
 189+ 7FB0 87 7F 88 7F  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 189+ 7FB4 89 7F 8A 7F
 189+ 7FB8 92 7F
 190+ 7FBA 91 7F 82 7F                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 190+ 7FBE 7D 7F 83 7F
 190+ 7FC2 7E 7F
 191+ 7FC4 9B 7F 86 7F                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 191+ 7FC8 80 7F 85 7F
 191+ 7FCC 84 7F
 192+ 7FCE 94 7F 78 7F                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 192+ 7FD2 9E 7F 9A 7F
 192+ 7FD6 99 7F
 193+ 7FD8 81 7F 97 7F                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 193+ 7FDC 9F 7F 7C 7F
 193+ 7FE0 7B 7F
 194+ 7FE2 8B 7F 90 7F                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 194+ 7FE6 8F 7F 8E 7F
 194+ 7FEA 8D 7F
 195+ 7FEC 79 7F 92 7F                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 195+ 7FF0 9F 7F 97 7F
 195+ 7FF4 7F 7F
 196+ 7FF6 95 7F 8C 7F                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 196+ 7FFA 82 7F 7D 7F
 196+ 7FFE 80 7F
 197+ 8000 95 7F 9E 7F                          DW  Keys+KeyCode_PressedYes   ,Keys+KeyCode_PressedNo
 198+ 8004
 199+ 8004 23 5A 58 43  ASCII_Map:              DB "#","Z","X","C","V"
 199+ 8008 56
 200+ 8009 41 53 44 46                          DB "A","S","D","F","G"
 200+ 800D 47
 201+ 800E 51 57 45 52                          DB "Q","W","E","R","T"
 201+ 8012 54
 202+ 8013 31 32 33 34                          DB "1","2","3","4","5"
 202+ 8017 35
 203+ 8018 30 39 38 37                          DB "0","9","8","7","6"
 203+ 801C 36
 204+ 801D 50 4F 49 55                          DB "P","O","I","U","Y"
 204+ 8021 59
 205+ 8022 3E 4C 4B 4A                          DB ">","L","K","J","H"
 205+ 8026 48
 206+ 8027 20 5E 4D 4E                          DB " ","^","M","N","B"
 206+ 802B 42
 207+ 802C
 208+ 802C              ; mapping of a code to the lookup table Keyboard map. So if you are using an addr_Pressed you can then fetch from KeyboardMap the address in Keys
 209+ 802C              ; for the raw key press status
 210+ 802C              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 211+ 802C              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 212+ 802C              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 213+ 802C              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 214+ 802C              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 215+ 802C              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 216+ 802C              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 217+ 802C              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 218+ 802C              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 219+ 802C              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 220+ 802C              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 221+ 802C              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 222+ 802C              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 223+ 802C              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 224+ 802C              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 225+ 802C              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 226+ 802C              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 227+ 802C              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 228+ 802C              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 229+ 802C              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 230+ 802C              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 231+ 802C              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 232+ 802C              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 233+ 802C              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 234+ 802C              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 235+ 802C              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 236+ 802C              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 237+ 802C              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 238+ 802C              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 239+ 802C              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 240+ 802C              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 241+ 802C              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 242+ 802C              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 243+ 802C              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 244+ 802C              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 245+ 802C              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 246+ 802C              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 247+ 802C              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 248+ 802C              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 249+ 802C              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 250+ 802C
 251+ 802C
 252+ 802C              MIsKeyPressed:          MACRO   keyaddress, misstarget
 253+ 802C ~                                    ld      hl,(keyaddress)
 254+ 802C ~                                    ld      a,(hl)
 255+ 802C ~                                    JumpIfAIsZero   misstarget
 256+ 802C                                      ENDM
 257+ 802C
 258+ 802C 21 78 7F     init_keyboard:          ld		hl,Keys                         ; no key s are pressed by default
 259+ 802F 11 28 00                             ld		de, c_KeyBoardLen               ;
 260+ 8032 3E 00                                ld		a,0                             ;
 261+ 8034 CD 2E 7F                             call	memfill_dma                     ;
 262+ 8037 C9                                   ret                                     ;
 263+ 8038
 264+ 8038
 265+ 8038
 266+ 8038 DD 21 A0 7F  scan_keyboard:          ld		ix,RawKeys                      ; hl = table of raw IO port readings
 267+ 803C 21 A8 7F                             ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 268+ 803F 0E 08                                ld		c,8                             ; 8 ports to ready
 269+ 8041 11 78 7F                             ld      de,Keys                         ; ix = table of key states from raw read
 270+ 8044 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 271+ 8045 DB FE                                in		a,($FE)							; read port to a
 272+ 8047 DD 77 00                             ld      (ix+0),a                        ; save raw scan
 273+ 804A DD 23                                inc     ix
 274+ 804C 23                                   inc		hl                              ; and ready for next read
 275+ 804D 06 05        .ProcessInputBits:      ld		b,5								; loop all bits (there are only 5 keys to a group)
 276+ 804F 1F           .ProcessBitsLoop:       rra                                     ; shit bit 0 into carry
 277+ 8050 CB 47                                bit		0,a								; is bit set
 278+ 8052 30 08                                jr      nc,.SetKeyPressed               ; low bit means it was pressed
 279+ 8054 FD 6F                                ld      iyl,a
 280+ 8056                                      ZeroA
 280+ 8056 AF          >                        xor a
 281+ 8057 C3 64 80                             jp      .SetKey
 282+ 805A 20 0B                                jr		nz,.SkipKeySet
 283+ 805C FD 6F        .SetKeyPressed:	        ld      iyl,a                           ; save current input byte
 284+ 805E 1A                                   ld      a,(de)                          ; get current keystate
 285+ 805F FE 02                                cp      2
 286+ 8061 28 02                                jr      z,.AlreadyHeld
 287+ 8063 3C                                   inc     a                               ; and increment by 1 as its moved from previous state
 288+ 8064 12           .SetKey:                ld		(de),a				  	        ; save key Pressed state
 289+ 8065 FD 7D        .AlreadyHeld:           ld      a,iyl                           ; and retrieve the current input byte
 290+ 8067 13           .SkipKeySet:	        inc		de								; move to next key
 291+ 8068 10 E5                                djnz	.ProcessBitsLoop				; Process all key group bits
 292+ 806A 0D                                   dec     c                               ; thats one row of bits all processed
 293+ 806B 20 D7                                jr      nz,.PortReadLoop				; Read next input port
 294+ 806D C9                                   ret
 295+ 806E
 296+ 806E
 297+ 806E
 298+ 806E              GetKeyStateAddressDE:   MACRO
 299+ 806E ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 300+ 806E ~                                    add     hl,a
 301+ 806E ~                                    ld      e,(hl)
 302+ 806E ~                                    inc     hl
 303+ 806E ~                                    ld      d,(hl)                          ; now de = address in keypress list
 304+ 806E                                      ENDM
 305+ 806E
 306+ 806E              GetKeyStateAddressHL:   MACRO
 307+ 806E ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 308+ 806E ~                                    add     hl,a
 309+ 806E ~                                    ld      a,(hl)
 310+ 806E ~                                    inc     hl
 311+ 806E ~                                    ld      h,(hl)                          ; now hl = address in keypress list
 312+ 806E ~                                    ld      l,a
 313+ 806E                                      ENDM
 314+ 806E
 315+ 806E
 316+ 806E              ;;old debug codeCurrentX            DB 0
 317+ 806E              ;;old debug codeCurrentY            DB 0
 318+ 806E              ;;old debug code
 319+ 806E              ;;old debug codedisplayKeyStatus:       xor         a
 320+ 806E              ;;old debug code                        ld          (CurrentX),a
 321+ 806E              ;;old debug code                        ld          hl,RawKeys
 322+ 806E              ;;old debug code                        ld          a,(hl)
 323+ 806E              ;;old debug code                        and         %00011111
 324+ 806E              ;;old debug code                        ld          b,5
 325+ 806E              ;;old debug code.displayLoop:           push        bc,,hl
 326+ 806E              ;;old debug code                        rra
 327+ 806E              ;;old debug code                        jr          c,.displayNoPress
 328+ 806E              ;;old debug code.displayPress:          push        af
 329+ 806E              ;;old debug code                        ld          a,(CurrentX)
 330+ 806E              ;;old debug code                        ld          e,a
 331+ 806E              ;;old debug code                        ld          a,(CurrentY)
 332+ 806E              ;;old debug code                        ld          d,a
 333+ 806E              ;;old debug code                        ld          a,'*'
 334+ 806E              ;;old debug code                        MMUSelectLayer1
 335+ 806E              ;;old debug code                        call        l1_print_char
 336+ 806E              ;;old debug code                        ld          a,(CurrentX)
 337+ 806E              ;;old debug code                        add         a,8
 338+ 806E              ;;old debug code                        ld          (CurrentX),a
 339+ 806E              ;;old debug code                        pop         af
 340+ 806E              ;;old debug code                        pop         bc,,hl
 341+ 806E              ;;old debug code                        djnz        .displayLoop
 342+ 806E              ;;old debug code                        ret
 343+ 806E              ;;old debug code.displayNoPress:        push        af
 344+ 806E              ;;old debug code                        ld          a,(CurrentX)
 345+ 806E              ;;old debug code                        ld          e,a
 346+ 806E              ;;old debug code                        ld          a,(CurrentY)
 347+ 806E              ;;old debug code                        ld          d,a
 348+ 806E              ;;old debug code                        ld          a,'O'
 349+ 806E              ;;old debug code                        MMUSelectLayer1
 350+ 806E              ;;old debug code                        call        l1_print_char
 351+ 806E              ;;old debug code                        ld          a,(CurrentX)
 352+ 806E              ;;old debug code                        add         a,8
 353+ 806E              ;;old debug code                        ld          (CurrentX),a
 354+ 806E              ;;old debug code                        pop         af
 355+ 806E              ;;old debug code                        pop         bc,,hl
 356+ 806E              ;;old debug code                        djnz        .displayLoop
 357+ 806E              ;;old debug code                        ret
 358+ 806E              ;;old debug code
 359+ 806E              ;;old debug codedisplayDownStatus:      ld  a,(Keys+      KeyCode_CursorUp)
 360+ 806E              ;;old debug code                        cp  0
 361+ 806E              ;;old debug code                        jr      z,.displayNoUp
 362+ 806E              ;;old debug code                        cp  1
 363+ 806E              ;;old debug code                        jr      z,.displayUp
 364+ 806E              ;;old debug code.displayHeld:           ld      de,8*15
 365+ 806E              ;;old debug code                        ld      a,"*"
 366+ 806E              ;;old debug code                        MMUSelectLayer1
 367+ 806E              ;;old debug code                        call        l1_print_char
 368+ 806E              ;;old debug code                        ret
 369+ 806E              ;;old debug code.displayUp:             ld      de,8*15
 370+ 806E              ;;old debug code                        ld      a,"+"
 371+ 806E              ;;old debug code                        MMUSelectLayer1
 372+ 806E              ;;old debug code                        call        l1_print_char
 373+ 806E              ;;old debug code                        ret
 374+ 806E              ;;old debug code.displayNoUp:             ld      de,8*15
 375+ 806E              ;;old debug code                        ld      a,"O"
 376+ 806E              ;;old debug code                        MMUSelectLayer1
 377+ 806E              ;;old debug code                        call        l1_print_char
 378+ 806E              ;;old debug code                        ret
 379+ 806E              ;;old debug code
 380+ 806E
 381+ 806E
 382+ 806E              ; call with a = c_Pressed key, will then read mapping does this with keyboard scan, waits until key gets to state 1, if it was already held then#
 383+ 806E              ; it will have to be let go to reset of 0 and scan again
 384+ 806E              ; Deprecated as not used as yet
 385+ 806E              ;;;;;;wait_for_key_a_press:   GetKeyStateAddressHL
 386+ 806E              ;;;;;;                        push    hl
 387+ 806E              ;;;;;;.wait_loop:             call    scan_keyboard
 388+ 806E              ;;;;;;                        pop     hl                              ; get key address into hl
 389+ 806E              ;;;;;;                        push    hl
 390+ 806E              ;;;;;;                        ld      a,(hl)
 391+ 806E              ;;;;;;                        JumpIfANENusng  1,.wait_loop             ; will also loop if held down when entering this routine
 392+ 806E              ;;;;;;                        pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 393+ 806E              ;;;;;;                        ret
 394+ 806E              ;;;;;;; call with a = c_Pressed key, will then read mapping does this with keyboard scan waits until key gets to state 2
 395+ 806E              ;;;;;;wait_for_key_a_held:    GetKeyStateAddressDE
 396+ 806E              ;;;;;;                        push    hl
 397+ 806E              ;;;;;;.wait_loop:             call    scan_keyboard
 398+ 806E              ;;;;;;                        pop     hl
 399+ 806E              ;;;;;;                        push    hl
 400+ 806E              ;;;;;;                        ld      a,(hl)
 401+ 806E              ;;;;;;                        JumpIfALTNusng  2, .wait_loop
 402+ 806E              ;;;;;;                        pop     hl
 403+ 806E              ;;;;;;                        ret
 404+ 806E
 405+ 806E              ; Gets the current keystate of the c_Pressed Key in a register
 406+ 806E              get_key_a_state:        GetKeyStateAddressHL                    ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 406+ 806E 21 B0 7F    >                        ld      hl,KeyboardMap                  ; work our address to read from
 406+ 8071 ED 31       >                        add     hl,a
 406+ 8073 7E          >                        ld      a,(hl)
 406+ 8074 23          >                        inc     hl
 406+ 8075 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 406+ 8076 6F          >                        ld      l,a
 407+ 8077 7E                                   ld      a,(hl)                          ; a = keystate
 408+ 8078 C9                                   ret
 409+ 8079
 410+ 8079              ; sets they keystate of c pressed key in a register to 1 (pressed)
 411+ 8079              force_key_press:        GetKeyStateAddressHL                    ; read key locations
 411+ 8079 21 B0 7F    >                        ld      hl,KeyboardMap                  ; work our address to read from
 411+ 807C ED 31       >                        add     hl,a
 411+ 807E 7E          >                        ld      a,(hl)
 411+ 807F 23          >                        inc     hl
 411+ 8080 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 411+ 8081 6F          >                        ld      l,a
 412+ 8082 3E 01                                ld      a,1
 413+ 8084 77                                   ld      (hl),a
 414+ 8085 C9                                   ret
 415+ 8086
 416+ 8086              is_key_up_state:        GetKeyStateAddressHL
 416+ 8086 21 B0 7F    >                        ld      hl,KeyboardMap                  ; work our address to read from
 416+ 8089 ED 31       >                        add     hl,a
 416+ 808B 7E          >                        ld      a,(hl)
 416+ 808C 23          >                        inc     hl
 416+ 808D 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 416+ 808E 6F          >                        ld      l,a
 417+ 808F 7E                                   ld      a,(hl)
 418+ 8090 FE 00                                cp      0
 419+ 8092 C9                                   ret
 420+ 8093
 421+ 8093              ; returns z is set if c_ key is pressed
 422+ 8093              is_key_pressed:         GetKeyStateAddressHL
 422+ 8093 21 B0 7F    >                        ld      hl,KeyboardMap                  ; work our address to read from
 422+ 8096 ED 31       >                        add     hl,a
 422+ 8098 7E          >                        ld      a,(hl)
 422+ 8099 23          >                        inc     hl
 422+ 809A 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 422+ 809B 6F          >                        ld      l,a
 423+ 809C 7E                                   ld      a,(hl)                          ; a = keystate
 424+ 809D FE 01                                cp      1                               ; we cant just test bit 0 as this may have been held long
 425+ 809F C9                                   ret
 426+ 80A0
 427+ 80A0              ; returns nz is set if c_ key is held, if key was held then keystate would be 2 or 3, i.e. bit 1 set
 428+ 80A0              is_key_held:            GetKeyStateAddressHL
 428+ 80A0 21 B0 7F    >                        ld      hl,KeyboardMap                  ; work our address to read from
 428+ 80A3 ED 31       >                        add     hl,a
 428+ 80A5 7E          >                        ld      a,(hl)
 428+ 80A6 23          >                        inc     hl
 428+ 80A7 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 428+ 80A8 6F          >                        ld      l,a
 429+ 80A9 7E                                   ld      a,(hl)                          ; a = keystate
 430+ 80AA E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 431+ 80AC C9                                   ret
 432+ 80AD
 433+ 80AD              ; checks to see if any key is pressed in the key table
 434+ 80AD 21 78 7F     is_any_key_pressed:     ld      hl,Keys
 435+ 80B0 01 28 00                             ld      bc,40
 436+ 80B3 3E 01                                ld      a,1
 437+ 80B5 ED B1                                cpir                                    ; search for the value 1
 438+ 80B7 28 03                                jr      z,.KeyPressed                   ; if a key was pressed then handle press
 439+ 80B9                                      SetAFalse
 439+ 80B9 3E FF       >                        ld      a,$FF
 440+ 80BB C9                                   ret
 441+ 80BC 3E 27        .KeyPressed:            ld      a,39                            ; so c will be how many keys still to scan
 442+ 80BE 91                                   sub     c                               ; so a = 40 - c to get to result
 443+ 80BF C9                                   ret
 444+ 80C0
 445+ 80C0 21 78 7F     is_any_key_held:        ld      hl,Keys
 446+ 80C3 06 28                                ld      b,40
 447+ 80C5 0E 00                                ld      c,0
 448+ 80C7 7E           .KeyReadLoop:           ld      a,(hl)
 449+ 80C8 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 450+ 80CA C2 D4 80                             jp      nz,.KeyPressed
 451+ 80CD 23                                   inc     hl
 452+ 80CE 0C                                   inc     c
 453+ 80CF 10 F6                                djnz    .KeyReadLoop
 454+ 80D1                                      SetAFalse
 454+ 80D1 3E FF       >                        ld      a,$FF
 455+ 80D3 C9                                   ret
 456+ 80D4 79           .KeyPressed:            ld      a,c
 457+ 80D5 C9                                   ret
 458+ 80D6
 459+ 80D6
 460+ 80D6 21 A8 7F     WaitForNoKey:           ld      hl,KeyAddrTab                   ; de = table of IO ports to read
 461+ 80D9 06 08                                ld		b,8                             ; 8 ports to ready
 462+ 80DB 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 463+ 80DC DB FE                                in		a,($FE)							; read port to a
 464+ 80DE E6 1F                                and     %00011111
 465+ 80E0 FE 1F                                cp      %00011111
 466+ 80E2 20 F2                                jr      nz ,WaitForNoKey
 467+ 80E4 23                                   inc		hl                              ; and ready for next read
 468+ 80E5 10 F4                                djnz    .PortReadLoop
 469+ 80E7 C9                                   ret
 470+ 80E8
 471+ 80E8 F5 D5 C5 E5  WaitForAnyKey:          push    af,,de,,bc,,hl
 472+ 80EC CD D6 80                             call    WaitForNoKey
 473+ 80EF 21 A8 7F     .waitKeyLoop:           ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 474+ 80F2 06 08                                ld		b,8                             ; 8 ports to ready
 475+ 80F4 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 476+ 80F5 DB FE                                in		a,($FE)							; read port to a
 477+ 80F7 E6 1F                                and     %00011111
 478+ 80F9 FE 1F                                cp      %00011111
 479+ 80FB C2 05 81                             jp      nz,.WaitComplete
 480+ 80FE C0                                   ret     nz
 481+ 80FF 23                                   inc		hl                              ; and ready for next read
 482+ 8100 10 F2                                djnz    .PortReadLoop
 483+ 8102 C3 EF 80                             jp      .waitKeyLoop
 484+ 8105 E1 C1 D1 F1  .WaitComplete:          pop     af,,de,,bc,,hl
 485+ 8109 C9                                   ret
 486+ 810A
 487+ 810A
 488+ 810A 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 489+ 8128 00                                   DB  0               ; end of string marker as a safety
 490+ 8129 00           InputCursor             DB  0
 491+ 812A 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 492+ 812B 00           InputChanged            DB  0
 493+ 812C              InputLimit              EQU 20
 494+ 812C
 495+ 812C 21 0A 81     keyboard_copy_input_to_de:  ld      hl,InputString
 496+ 812F 3A 29 81                                 ld      a,(InputCursor)
 497+ 8132 FE 00                                    cp      0
 498+ 8134 28 05                                    jr      z,.NoString
 499+ 8136 4F                                       ld      c,a
 500+ 8137 06 00                                    ld      b,0
 501+ 8139 ED B0                                    ldir
 502+ 813B 3E 00        .NoString                   ld      a,0
 503+ 813D 12                                       ld      (de),a
 504+ 813E C9                                       ret
 505+ 813F
 506+ 813F AF           initInputText:          xor     a
 507+ 8140 32 29 81                             ld      (InputCursor),a
 508+ 8143                                      SetMemFalse EnterPressed
 508+ 8143 3E FF       >                        ld      a,$FF
 508+ 8145 32 2A 81    >                        ld      (EnterPressed),a
 509+ 8148                                      SetMemFalse InputChanged
 509+ 8148 3E FF       >                        ld      a,$FF
 509+ 814A 32 2B 81    >                        ld      (InputChanged),a
 510+ 814D 21 0A 81                             ld      hl,InputString
 511+ 8150 06 1E                                ld      b,30
 512+ 8152 77           .wipeloop:              ld      (hl),a
 513+ 8153 23                                   inc     hl
 514+ 8154 10 FC                                djnz    .wipeloop
 515+ 8156 C9                                   ret
 516+ 8157
 517+ 8157              InputName:              SetMemFalse InputChanged
 517+ 8157 3E FF       >                        ld      a,$FF
 517+ 8159 32 2B 81    >                        ld      (InputChanged),a
 518+ 815C CD AD 80                             call    is_any_key_pressed
 519+ 815F FE FF                                cp      $FF
 520+ 8161 C8                                   ret     z
 521+ 8162 4F           .KeyPressed:            ld      c,a
 522+ 8163 3A 29 81                             ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 523+ 8166 FE 14                                cp      InputLimit                      ; move to variable later and then cp (hl)
 524+ 8168 28 0B                                jr      z,.DeleteOrEnterOnly            ;
 525+ 816A 21 04 80                             ld      hl,ASCII_Map
 526+ 816D 79                                   ld      a,c
 527+ 816E ED 31                                add     hl,a
 528+ 8170 7E                                   ld      a,(hl)
 529+ 8171 FE 41                                cp      "A"
 530+ 8173 30 0B                                jr      nc,.AlphaPressed
 531+ 8175              ; CAPS and Symbol act as delete for now
 532+ 8175 FE 20        .DeleteOrEnterOnly      cp      " "                             ; if space was  pressed (mapped to Hash in ASCII table))
 533+ 8177 28 33                                jr      z,.SpacePressed               ; for now we will ignore the shift and just assume delete
 534+ 8179 FE 3E                                cp      ">"         ; ENTER
 535+ 817B 28 19                                jr      z,.EnterPressed
 536+ 817D FE 23                                cp      "#"         ; CAPS
 537+ 817F C9                                   ret
 538+ 8180 47           .AlphaPressed:          ld      b,a
 539+ 8181 3A 29 81                             ld      a,(InputCursor)
 540+ 8184 4F                                   ld      c,a
 541+ 8185 21 0A 81                             ld      hl,InputString
 542+ 8188 ED 31                                add     hl,a
 543+ 818A 78                                   ld      a,b
 544+ 818B 70                                   ld      (hl),b
 545+ 818C 79                                   ld      a,c
 546+ 818D 21 29 81                             ld      hl,InputCursor
 547+ 8190 34                                   inc     (hl)
 548+ 8191                                      SetMemTrue InputChanged
 548+ 8191 AF          >                        xor     a
 548+ 8192 32 2B 81    >                        ld      (InputChanged),a
 549+ 8195 C9                                   ret
 550+ 8196 3A 29 81     .EnterPressed:          ld      a,(InputCursor)
 551+ 8199 21 0A 81                             ld      hl,InputString
 552+ 819C ED 31                                add     hl,a
 553+ 819E                                      ZeroA
 553+ 819E AF          >                        xor a
 554+ 819F 77                                   ld      (hl),a
 555+ 81A0                                      SetMemTrue EnterPressed
 555+ 81A0 AF          >                        xor     a
 555+ 81A1 32 2A 81    >                        ld      (EnterPressed),a
 556+ 81A4                                      SetMemTrue InputChanged
 556+ 81A4 AF          >                        xor     a
 556+ 81A5 32 2B 81    >                        ld      (InputChanged),a
 557+ 81A8 CD 2C 80                             call    init_keyboard           ; Flush keyboard status so futher inputs don't auto read the enter key as a second press
 558+ 81AB C9                                   ret
 559+ 81AC 3A 29 81     .SpacePressed:          ld      a,(InputCursor)         ; Space = delete
 560+ 81AF FE 00                                cp      0                       ; if input is zero length then can not delete
 561+ 81B1 C8                                   ret     z
 562+ 81B2 3D                                   dec     a                       ; move back one and update cursor pos
 563+ 81B3 32 29 81                             ld      (InputCursor),a         ;
 564+ 81B6 21 0A 81                             ld      hl,InputString          ; now update end of line to null
 565+ 81B9 ED 31                                add     hl,a                    ; .
 566+ 81BB                                      ZeroA                           ; .
 566+ 81BB AF          >                        xor a
 567+ 81BC 77                                   ld      (hl),a                  ; .
 568+ 81BD                                      SetMemTrue InputChanged
 568+ 81BD AF          >                        xor     a
 568+ 81BE 32 2B 81    >                        ld      (InputChanged),a
 569+ 81C1 C9                                   ret
 570+ 81C2
 571+ 81C2              TargetMissileTest:      AnyMissilesLeft
 571+ 81C2 3A 0A 84    >                        ld      a,(NbrMissiles)
 571+ 81C5 A7          >                        and     a
 572+ 81C6                                      JumpIfZero      .ClearTargetting
 572+ 81C6 CA DD 81    >                        jp	z,.ClearTargetting
 573+ 81C9                                      IsMissileLaunchFlagged                      ; if we are comitted to launch
 573+ 81C9 3A 9F 86    >                        ld      a,(MissileTargettingFlag)
 573+ 81CC E6 80       >                        and     $80
 574+ 81CE C8                                   ret             z                           ; then don't scan as it will be cleared on launch
 575+ 81CF 3E 16        .ScanForKey:            ld              a,c_Pressed_TargetMissle    ; if not pressed we are done
 576+ 81D1 CD 93 80                             call            is_key_pressed              ; .
 577+ 81D4 C0                                   ret             nz                          ; .
 578+ 81D5 3A 9F 86     .TargetPressed:         ld              a,(MissileTargettingFlag)   ; get flag back
 579+ 81D8                                      JumpIfAEqNusng  StageMissileNotTargeting, .SetTargetting
 579+ 81D8 FE FF       >                        cp     StageMissileNotTargeting
 579+ 81DA CA E3 81    >                        jp      z,.SetTargetting
 580+ 81DD              .ClearTargetting:       ClearMissileTargetting
 580+ 81DD 3E FF       >                        ld      a,StageMissileNotTargeting
 580+ 81DF 32 9F 86    >                        ld      (MissileTargettingFlag),a
 581+ 81E2 C9                                   ret
 582+ 81E3              .SetTargetting:         SetMissileTargetting
 582+ 81E3 3E FE       >                        ld      a,StageMissileTargeting
 582+ 81E5 32 9F 86    >                        ld      (MissileTargettingFlag),a
 583+ 81E8 C9                                   ret
 584+ 81E9
 585+ 81E9 AF           MovementKeyTest:        xor     a
 586+ 81EA 32 8B 84                             ld      (CursorKeysPressed),a
 587+ 81ED 3A A9 83                             ld      a,(MenuIdMax)
 588+ 81F0 E6 FC                                and     $FC
 589+ 81F2 20 26                                jr      nz,CursorKeys
 590+ 81F4 2A BE 7F     ClimbDiveKeys:          ld      hl,(addr_Pressed_Climb)                 ; Check for Climb
 591+ 81F7 7E                                   ld      a,(hl)
 592+ 81F8                                      JumpIfAIsZero ScanDiveKey
 592+ 81F8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 592+ 81F9 CA 07 82    >                        jp	    z, ScanDiveKey
 593+ 81FC 3A 8B 84                             ld      a,(CursorKeysPressed)
 594+ 81FF F6 80                                or      CursorClimb
 595+ 8201 32 8B 84                             ld      (CursorKeysPressed),a
 596+ 8204 C3 3D 82                             jp      ScanLeftKey
 597+ 8207 2A BC 7F     ScanDiveKey:            ld      hl,(addr_Pressed_Dive)                  ; Check for Dive
 598+ 820A 7E                                   ld      a,(hl)
 599+ 820B                                      JumpIfAIsZero ScanLeftKey
 599+ 820B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 599+ 820C CA 3D 82    >                        jp	    z, ScanLeftKey
 600+ 820F 3A 8B 84                             ld      a,(CursorKeysPressed)
 601+ 8212 F6 40                                or      CursorDive
 602+ 8214 32 8B 84                             ld      (CursorKeysPressed),a
 603+ 8217 C3 3D 82                             jp      ScanLeftKey
 604+ 821A 2A FA 7F     CursorKeys:             ld      hl,(addr_Pressed_CursorUp)              ; Check cursor keys
 605+ 821D 7E                                   ld      a,(hl)
 606+ 821E                                      JumpIfAIsZero ScanCursorDownKey
 606+ 821E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 606+ 821F CA 2D 82    >                        jp	    z, ScanCursorDownKey
 607+ 8222 3A 8B 84                             ld      a,(CursorKeysPressed)
 608+ 8225 F6 80                                or      CursorClimb
 609+ 8227 32 8B 84                             ld      (CursorKeysPressed),a
 610+ 822A C3 3D 82                             jp      ScanLeftKey
 611+ 822D 2A FC 7F     ScanCursorDownKey:      ld      hl,(addr_Pressed_CursorDown)
 612+ 8230 7E                                   ld      a,(hl)
 613+ 8231                                      JumpIfAIsZero ScanLeftKey
 613+ 8231 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 613+ 8232 CA 3D 82    >                        jp	    z, ScanLeftKey
 614+ 8235 3A 8B 84                             ld      a,(CursorKeysPressed)
 615+ 8238 F6 40                                or      CursorDive
 616+ 823A 32 8B 84                             ld      (CursorKeysPressed),a
 617+ 823D 2A B8 7F     ScanLeftKey:            ld      hl,(addr_Pressed_RollLeft)
 618+ 8240 7E                                   ld      a,(hl)
 619+ 8241                                      JumpIfAIsZero ScanRightKey
 619+ 8241 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 619+ 8242 CA 4E 82    >                        jp	    z, ScanRightKey
 620+ 8245 3A 8B 84                             ld      a,(CursorKeysPressed)
 621+ 8248 F6 20                                or      CursorLeft
 622+ 824A 32 8B 84                             ld      (CursorKeysPressed),a
 623+ 824D C9                                   ret
 624+ 824E 2A BA 7F     ScanRightKey:           ld      hl,(addr_Pressed_RollRight)
 625+ 8251 7E                                   ld      a,(hl)
 626+ 8252                                      JumpIfAIsZero ScanHomeKey
 626+ 8252 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 626+ 8253 CA 5F 82    >                        jp	    z, ScanHomeKey
 627+ 8256 3A 8B 84                             ld      a,(CursorKeysPressed)
 628+ 8259 F6 10                                or      CursorRight
 629+ 825B 32 8B 84                             ld      (CursorKeysPressed),a
 630+ 825E C9                                   ret
 631+ 825F 2A D8 7F     ScanHomeKey:            ld      hl,(addr_Pressed_HomeCursor)
 632+ 8262 7E                                   ld      a,(hl)
 633+ 8263                                      JumpIfAIsZero ScanRecentreKey
 633+ 8263 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 633+ 8264 CA 70 82    >                        jp	    z, ScanRecentreKey
 634+ 8267 3A 8B 84                             ld      a,(CursorKeysPressed)
 635+ 826A F6 08                                or      CursorHome
 636+ 826C 32 8B 84                             ld      (CursorKeysPressed),a
 637+ 826F C9                                   ret
 638+ 8270 2A F4 7F     ScanRecentreKey:        ld      hl,(addr_Pressed_Recentre)
 639+ 8273 7E                                   ld      a,(hl)
 640+ 8274                                      ReturnIfAIsZero
 640+ 8274 A7          >                        and     a
 640+ 8275 C8          >                        ret     z
 641+ 8276 3A 8B 84                             ld      a,(CursorKeysPressed)
 642+ 8279 F6 04                                or      CursorRecenter
 643+ 827B 32 8B 84                             ld      (CursorKeysPressed),a
 644+ 827E C9                                   ret
 645+ 827F
 646+ 827F
# file closed: ./Hardware/keyboard.asm
 587  827F
 588  827F                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 827F              ;Contants
   2+ 827F
   3+ 827F              SignMask8Bit		equ %01111111
   4+ 827F              SignMask16Bit		equ %0111111111111111
   5+ 827F              SignOnly8Bit		equ $80
   6+ 827F              SignOnly16Bit		equ $8000
   7+ 827F
   8+ 827F              Bit7Only            equ %10000000
   9+ 827F              Bit6Only            equ %01000000
  10+ 827F              Bit5Only            equ %00100000
  11+ 827F              Bit4Only            equ %00010000
  12+ 827F              Bit3Only            equ %00001000
  13+ 827F              Bit2Only            equ %00000100
  14+ 827F              Bit1Only            equ %00000010
  15+ 827F              Bit0Only            equ %00000001
  16+ 827F              Bit7Clear           equ %01111111
  17+ 827F              Bit6Clear           equ %10111111
  18+ 827F              Bit5Clear           equ %11011111
  19+ 827F              Bit4Clear           equ %11101111
  20+ 827F              Bit3Clear           equ %11110111
  21+ 827F              Bit2Clear           equ %11111011
  22+ 827F              Bit1Clear           equ %11111101
  23+ 827F              Bit0Clear           equ %11111110
  24+ 827F              ConstPi				equ $80
  25+ 827F              ConstNorm           equ 197
  26+ 827F
  27+ 827F              ;Text Tokens
  28+ 827F              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  29+ 827F              BrabenBellToken 	equ $0D
  30+ 827F              AcorToken			equ $0C
  31+ 827F              ; Cursor Bits
  32+ 827F              CursorClimb         equ %10000000
  33+ 827F              CursorDive          equ %01000000
  34+ 827F              CursorLeft          equ %00100000
  35+ 827F              CursorRight         equ %00010000
  36+ 827F              CursorHome          equ %00001000
  37+ 827F              CursorRecenter      equ %00000100
  38+ 827F
  39+ 827F              ; Intro Screen
  40+ 827F              TitleShip			equ	$8C
  41+ 827F              RotationUnity		equ $60
  42+ 827F              DBCheckCode			equ $DB
  43+ 827F              MaxVisibility		equ $1F
  44+ 827F              FarInFront			equ $C0
  45+ 827F              ; Equipment Flags
  46+ 827F              EquipmentItemFitted     equ $FF
  47+ 827F              EquipmentItemNotFitted  equ 0
  48+ 827F              ; Universe Managment
  49+ 827F              ShipTotalModelCount     equ 44
  50+ 827F              ShipTypeScoopable       equ 4         ; a sub set of junk
  51+ 827F              ShipTypeJunk            equ 3
  52+ 827F              ShipTypeStation         equ 2
  53+ 827F              ShipTypeMissile         equ 1
  54+ 827F              ShipTypeNormal          equ 0
  55+ 827F              ShipTypeText            equ 253
  56+ 827F              ShipTypeDebug           equ 254
  57+ 827F              ShipTypeEmpty           equ 255
  58+ 827F
  59+ 827F              ; Laser and Missile Settings
  60+ 827F              ; Laser and Missile
  61+ 827F              ShipLaserPower          equ %11110000
  62+ 827F              ShipMissileCount        equ %00001111
  63+ 827F              ShipMissiles1           equ %00000001
  64+ 827F              ShipMissiles2           equ %00000010
  65+ 827F              ShipMissiles3           equ %00000011
  66+ 827F              ShipMissiles4           equ %00000100
  67+ 827F              ShipMissiles5           equ %00000101
  68+ 827F              ShipMissiles6           equ %00000110
  69+ 827F              ShipMissiles7           equ %00000111
  70+ 827F              ShipMissiles8           equ %00001000
  71+ 827F              ShipMissiles9           equ %00001001
  72+ 827F              ShipMissiles10          equ %00001010
  73+ 827F              ShipMissiles11          equ %00001011
  74+ 827F              ShipMissiles12          equ %00001100
  75+ 827F              ShipMissiles13          equ %00001101
  76+ 827F              ShipMissiles14          equ %00001110
  77+ 827F              ShipMissiles15          equ %00001111
  78+ 827F              ; AI Flags  UniverseAIControl
  79+ 827F              ShipCanAnger            equ %10000000   ; Yes or no
  80+ 827F              ShipFighterBaySize      equ %01110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
  81+ 827F              ShipFighterBaySize1     equ %00010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
  82+ 827F              ShipFighterBaySize2     equ %00100000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
  83+ 827F              ShipFighterBaySize3     equ %00110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
  84+ 827F              ShipFighterBaySize4     equ %01000000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
  85+ 827F              ShipFighterBaySize5     equ %01010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
  86+ 827F              ShipFighterBaySizeInf   equ %01110000   ; Infinite fighters (well 255 as thats enough)
  87+ 827F              ShipFighterType         equ %00001100   ; 4 types 0 = Worm, 1 = Sidewinder, 2 = Viper, 3 = Thargon
  88+ 827F              ShipFighterWorm         equ %00000000
  89+ 827F              ShipFighterSidewinder   equ %00000100
  90+ 827F              ShipFighterViper        equ %00001000
  91+ 827F              ShipFighterThargon      equ %00001100
  92+ 827F              ShipUltraHostile        equ %00000010   ; If ultra hostile, will never back down so behaves like a missile
  93+ 827F              ShipFree                equ $00000011   ; Unused bits at present for later
  94+ 827F              ; NewBTactics
  95+ 827F              ShipIsTrader            equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
  96+ 827F              ShipIsBountyHunter      equ Bit1Only   ;
  97+ 827F              ShipIsHostile           equ Bit2Only   ; Also used as Angry flag now
  98+ 827F              ShipIsPirate            equ Bit3Only   ;
  99+ 827F              ShipIsDocking           equ Bit4Only   ;
 100+ 827F              ShipIsBystander         equ Bit5Only   ;
 101+ 827F              ShipIsCop               equ Bit6Only   ;
 102+ 827F              ShipHasEscapePod        equ Bit7Only   ;
 103+ 827F              ShipHostileNewBitNbr    equ 2
 104+ 827F
 105+ 827F              ; UBnkaiatkecm
 106+ 827F              ;Unused                 equ Bit0Only
 107+ 827F              ;Unused                 equ Bit1Only
 108+ 827F              ;Unused                 equ Bit2Only
 109+ 827F              ShipIsDot               equ Bit3Only
 110+ 827F              ShipKilled              equ Bit4Only    ; Ship has just been marked as killed so initiate cloud of debris
 111+ 827F              ShipExploding           equ Bit5Only
 112+ 827F              ShipIsVisible           equ Bit6Only
 113+ 827F              ShipAIEnabled           equ Bit7Only   ;
 114+ 827F
 115+ 827F
 116+ 827F              ; UBnkaiakecm 2
 117+ 827F              ;ShipAngryNewBitNbr      equ 4
 118+ 827F              ShipExplosionDuration   equ 75         ; amount of frames an explosion lasts for
 119+ 827F              ShipNotHostile          equ Bit2Clear   ;
 120+ 827F              ShipIsNotDot            equ Bit3Clear
 121+ 827F              ShipIsDotBitNbr         equ 3
 122+ 827F              ShipKilledBitNbr        equ 4
 123+ 827F              ShipIsVisibleBitNbr     equ 6
 124+ 827F              ShipIsScoopDockEsc      equ Bit7Only   ;
 125+ 827F              ShipAIDisabled          equ Bit7Clear
 126+ 827F              ShipAIEnabledBitNbr     equ 7
 127+ 827F              ShipExplodingBitNbr     equ 5
 128+ 827F              ; Equipment Defaults
 129+ 827F              ECMCounterMax           equ $80
 130+ 827F              ; Main Loop State
 131+ 827F              StatePlayerDocked       equ $FF
 132+ 827F              StateCompletedLaunch    equ $FD
 133+ 827F              StateInTransition       equ $FE
 134+ 827F              StateHJumping           equ $FC
 135+ 827F              StateHEntering          equ $FB
 136+ 827F              StateCompletedHJump     equ $FA
 137+ 827F              StateNormal             equ 0
 138+ 827F              ; Missile Stage flags , $8x = locked to ship id x, $0x = fire at ship id x requested
 139+ 827F              StageMissileNotTargeting equ $FF
 140+ 827F              StageMissileTargeting   equ $FE
 141+ 827F
 142+ 827F
 143+ 827F              ShipMaxDistance     equ 192
 144+ 827F              HyperSpaceTimers    equ $0B0B
 145+ 827F
 146+ 827F
 147+ 827F              MaxNumberOfStars	equ 11
 148+ 827F              ConsoleRefreshInterval  equ 5
 149+ 827F
 150+ 827F              ShipTypeSize		equ	32 			;??????? just a guess for now
 151+ 827F              ShipSST				equ 4			; its a space station
 152+ 827F              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
 153+ 827F              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
 154+ 827F              ShipCountMax		equ	2			; For now just 2 ships to debug
 155+ 827F              LineLimitPerShip	equ 70			; Max lines per ship
 156+ 827F              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
 157+ 827F              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
 158+ 827F
 159+ 827F              ; Memory page managment	(Refers to a memory slot as a place to access data)
 160+ 827F              ShipDataSlot		equ	6			; this may move into rom swap out space later
 161+ 827F              UniverseObjectSlot	equ	7
 162+ 827F
 163+ 827F              KeyForwardsView		equ	$20
 164+ 827F              ; Game specific equates
 165+ 827F              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
 166+ 827F
 167+ 827F              ;...Game Colour Mapping
 168+ 827F              L2DustColour        equ L2ColourGREY_1
 169+ 827F              L2SunScannerBright  equ 252
 170+ 827F              L2SunScanner        equ 180
 171+ 827F              L2DebrisColour      equ L2ColourYELLOW_1
 172+ 827F
 173+ 827F
 174+ 827F              ; Ship Data
 175+ 827F              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
 176+ 827F              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
 177+ 827F              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
 178+ 827F              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
 179+ 827F              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
 180+ 827F              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
 181+ 827F              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
 182+ 827F              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
 183+ 827F              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
 184+ 827F              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
 185+ 827F              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
 186+ 827F              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
 187+ 827F              ;;;;00 00			 EQUW 0     \ type 12 is       Python
 188+ 827F              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
 189+ 827F              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
 190+ 827F              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
 191+ 827F              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
 192+ 827F              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
 193+ 827F              ;;;;00 00			 EQUW 0     \ type 18 is
 194+ 827F              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
 195+ 827F              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
 196+ 827F              ;;;;00 00			 EQUW 0     \ type 21 is
 197+ 827F              ;;;;00 00			 EQUW 0     \ type 22 is
 198+ 827F              ;;;;00 00			 EQUW 0     \ type 23 is
 199+ 827F              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
 200+ 827F              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
 201+ 827F              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
 202+ 827F              ;;;;00 00			 EQUW 0     \ type 27 is
 203+ 827F              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
 204+ 827F              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
 205+ 827F              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
 206+ 827F              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
 207+ 827F              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
 208+ 827F              ;;;;			\ NEWB examples
 209+ 827F              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
 210+ 827F              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
 211+ 827F              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
 212+ 827F              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
 213+ 827F              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
 214+ 827F
# file closed: ./Variables/constant_equates.asm
 589  827F                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 827F
   2+ 827F
   3+ 827F 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
   4+ 8281 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
   5+ 8283              ; Variables to simulate 6502 registers until code fixed
   6+ 8283              ; These must be here in this order as reading Y and X can then be a 16 bit read
   7+ 8283 00           regX		DB	0               ; using 16 bit read into BC this would go into C
   8+ 8284 00           regY		DB	0               ; using 16 bit read into BC this would go into B
   9+ 8285 00           regA		DB	0
  10+ 8286
  11+ 8286
  12+ 8286 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
  13+ 8287 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
  14+ 8289 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
  15+ 828B
  16+ 828B
  17+ 828B
  18+ 828B              ;XX16		DS	16				; 16 byte Matrix
  19+ 828B
  20+ 828B              P0INWK							; page 0 & 46
  21+ 828B              p0INWK31						; page 0 & 65
  22+ 828B              P0INWK36						; PAGE 0 &6A
  23+ 828B
  24+ 828B 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
  25+ 828C              LastNormalVisible	equ	XX4
  26+ 828C              varXX4              equ XX4
  27+ 828C
  28+ 828C
  29+ 828C
  30+ 828C 00           PATG		DB	0				; 6502 &03C9
  31+ 828D 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
  32+ 828F
  33+ 828F
  34+ 828F              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
  35+ 828F              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
  36+ 828F
  37+ 828F              ; Present System Variables
  38+ 828F
  39+ 828F 2B           RandomSeed				DB	43			    ; 00 DEBUG JUST SOME START VALUES
  40+ 8290 20           RandomSeed1				DB	32	            ; 01
  41+ 8291 0C           RandomSeed2				DB	12			    ; 02
  42+ 8292 42           RandomSeed3				DB	66			    ; 03
  43+ 8293 00 00 00 00  RandomSeedSave          DS  4               ; used in explosion routine to save randoms
  44+ 8297 00           varT1					DB	0				; 06
  45+ 8298 00           SClo					DB 0				; 07
  46+ 8299 00           SChi					DB 0				; 08
  47+ 829A 00           varP					DB 0 				; 10	XX16+7
  48+ 829B 00           varPhi					DB 0 				; 11	XX16+8
  49+ 829C 00           varPhi2					DB 0 				; 12	XX16+9
  50+ 829D              varPp1                  equ varPhi
  51+ 829D              varPp2                  equ varPhi2
  52+ 829D 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
  53+ 829E 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
  54+ 829F              UnivPointer				equ	UnivPointerLo
  55+ 829F 00           varV					DB 0				; 22                          XX0+4
  56+ 82A0 00           varVHi					DB 0				; 23                          XX0+5
  57+ 82A1 00           varXXlo                 DB 0                ; 24
  58+ 82A2 00           varXXHi                 DB 0                ; 25
  59+ 82A3              varXX					equ	varXXlo
  60+ 82A3 00           YYlo                    DB 0                ; 26
  61+ 82A4 00           YYHi                    DB 0                ; 27
  62+ 82A5              varYY					equ	YYlo
  63+ 82A5              											;	28
  64+ 82A5              											;	29
  65+ 82A5              ;PlayerShipPositionData - Must be contiguous for setup
  66+ 82A5 00           BETA 					DB	0               ; 2A        (pitch done)
  67+ 82A6 00           JSTY                    DB  0               ; Joystick analog
  68+ 82A7 00           BET1 					DB	0               ; 2B        lower7 magnitude
  69+ 82A8 00           BET2                    DB  0               ;            climb sign
  70+ 82A9 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
  71+ 82AA 1F           BET1MAXC                DB  31              ; max climb
  72+ 82AB E1           BET1MAXD                DB  -31             ; max dive
  73+ 82AC 00           XC						DB	0               ; 2C
  74+ 82AD 00           YC						DB 	0               ; 2D
  75+ 82AE              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
  76+ 82AE 00           ECMCountDown            DB  0
  77+ 82AF 00           ECMLoopB                DB  0
  78+ 82B0 00 00        JSTX                    DW  0               ;           Joystick analog value
  79+ 82B2 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
  80+ 82B3 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
  81+ 82B4 00           ALP2					DB  0				; 32		ALP2	Roll Sign
  82+ 82B5 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
  83+ 82B6 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
  84+ 82B7 E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
  85+ 82B8
  86+ 82B8
  87+ 82B8
  88+ 82B8              MAXMESSAGES             EQU 5
  89+ 82B8              MESSAGETIMELIMIT        EQU 20
  90+ 82B8              MESSAGESIZE             EQU 33
  91+ 82B8              MESSAGELINE             EQU $0001
  92+ 82B8
  93+ 82B8 00           MessageCount            DB  0                ; used for enquing messages later
  94+ 82B9 00           MessageCurrent          DB  0
  95+ 82BA 05 00        MessageIndex            DW  MAXMESSAGES
  96+ 82BC 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
  97+ 8361 05           MessageTimeout          DB  MAXMESSAGES
  98+ 8362 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
  99+ 8387
 100+ 8387              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 101+ 8387              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 102+ 8387              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 103+ 8387 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 104+ 8388              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 105+ 8388
 106+ 8388
 107+ 8388 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 108+ 838D              											;	6D		QQ15+1
 109+ 838D              											;	6E		QQ15+2
 110+ 838D              											;	6F		QQ15+3
 111+ 838D              											;	70		QQ15+4
 112+ 838D              											;	71		QQ15+5
 113+ 838D 00           QQ17					DB	0				;   72
 114+ 838E 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 115+ 838F 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 116+ 8390 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 117+ 8391 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 118+ 8392 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 119+ 8393 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 120+ 8394 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 121+ 8395 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 122+ 8396 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 123+ 8397
 124+ 8397 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 125+ 8398 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 126+ 8399 00           DELT4Lo					DB 	0				; 7E
 127+ 839A 00           DELT4Hi					DB 	0				; 7F
 128+ 839B              DELTA4                  equ                 DELT4Lo
 129+ 839B
 130+ 839B
 131+ 839B              ; Not thise must be in this order else 16 bit fetches will fail
 132+ 839B 00           varU                    DB  0               ;   80
 133+ 839C 00           varQ					DB  0 				;	81
 134+ 839D 00           varR					DB  0 				;	82
 135+ 839E 00           varS					DB  0 				;	83
 136+ 839F              varRS                   equ varR
 137+ 839F
 138+ 839F 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 139+ 83A1
 140+ 83A1 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 141+ 83A2 00           YSAV                    DB  0               ; 85
 142+ 83A3 00           XX17					DB	0				; 86
 143+ 83A4              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 144+ 83A4              varXX17                 equ  XX17
 145+ 83A4 00           ScreenChanged           DB  0
 146+ 83A5 00           ScreenIndex             DB  0
 147+ 83A6 00 00        ScreenIndexTablePointer DW  0
 148+ 83A8 00           InvertedYAxis           DB  0
 149+ 83A9 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 150+ 83AA              											; Bit 7 Set  ShortRangeChart    $80
 151+ 83AA              											; Bit 6 Set  Galactic Chart     $40
 152+ 83AA              											; Bit 5 Set  Market Place       $20
 153+ 83AA              											; Bit 4 Set  Status Screen      $10
 154+ 83AA              											; Bit 3 Set  Display Inventory  $08
 155+ 83AA                                                          ; Bit 2 Set  Planet Data        $04
 156+ 83AA                                                          ; View bit combinations if the ones above not matched
 157+ 83AA                                                          ; bits 1 0
 158+ 83AA                                                          ;      1 1  Front view , i.e. $03
 159+ 83AA                                                          ;      1 0  Aft View          $02
 160+ 83AA                                                          ;      0 1  Left View         $01
 161+ 83AA                                                          ;      0 0  Right view        $00
 162+ 83AA              											; Bit 0 Set  Data On System
 163+ 83AA              											; 0  Space View (Not a menu)
 164+ 83AA 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 165+ 83AB 00           XX13                    DB  0               ;   89
 166+ 83AC 00           TYPE					DB	0				; 8C used for ship type in drawing
 167+ 83AD              ;Docked flag = 00 = in free space
 168+ 83AD              ;              FF = Docked
 169+ 83AD              ;              FE = transition
 170+ 83AD              ;              FD = Setup open space and transition to not docked
 171+ 83AD              ;              FC = Hyperspace manimation
 172+ 83AD              ;              FB = Hyperspace complete
 173+ 83AD 00           DockedFlag				DB	0				; 8E -
 174+ 83AE 00           GamePaused              DB  0
 175+ 83AF 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 176+ 83B0 00           varCNT                  DB  0               ; 93
 177+ 83B1
 178+ 83B1 00           varK					DB	0				; 40
 179+ 83B2 00           varKp1					DB	0				; 41
 180+ 83B3 00           varKp2					DB	0				; 42
 181+ 83B4 00           varKp3					DB	0				; 43
 182+ 83B5
 183+ 83B5 00           varK2                   DB  0               ; 9B
 184+ 83B6 00           varK2p1                 DB  0               ; 9C K2 plus 1
 185+ 83B7 00           varK2p2                 DB  0               ; 9D K2 plus 2
 186+ 83B8 00           varK2p3                 DB  0               ; 9E K2 plus 3
 187+ 83B9
 188+ 83B9 00           Point                   DB  0               ; 9F      POINT
 189+ 83BA
 190+ 83BA 00           varT					DB	0				; D1
 191+ 83BB 00           varTSign                DB  0               ; for teh odd need for a 16 bit varT
 192+ 83BC
 193+ 83BC 00 00 00...  varVector9ByteWork      DS  9
 194+ 83C5
 195+ 83C5 00 00 00 00  varK3					DS	4				; D2
 196+ 83C9 00           varK3p2					DB	0				; 42
 197+ 83CA 00           varK3p3					DB	0				; 43
 198+ 83CB              varK3p1					equ varK3+1			; D3
 199+ 83CB 00 00 00 00  varK4					DS	4				; E0
 200+ 83CF              varK4p1					equ varK4+1			; D3
 201+ 83CF
 202+ 83CF
 203+ 83CF              ;Heap
 204+ 83CF
 205+ 83CF 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 206+ 83D1 00 00 00...  HeapData				DS	50
 207+ 8403              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
 208+ 8403              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
 209+ 8403              ; i.e. a list of programmed missiles in universe slot list code
 210+ 8403 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 211+ 840A              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 212+ 840A              ;  #&5 Does J reverse both joystick channels
 213+ 840A              ;  #&4 Does Y reverse joystick Y channel			03CB
 214+ 840A              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 215+ 840A              ;  #&3 Does F toggle flashing information			03CA
 216+ 840A              ;  #&1 Does A toggle keyboard auto-recentering ?
 217+ 840A              ;  #&0 Caps-lock toggles keyboard flight damping
 218+ 840A 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 219+ 840B 00           PlayerECMActiveCount    DB  0               ; Countdown for player ECM
 220+ 840C 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 221+ 840D 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 222+ 841D 00           AlienItemsAvaliability  DB	0				; 039D
 223+ 841E 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 224+ 841F 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 225+ 8421 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 226+ 8422              											;
 227+ 8422 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 228+ 8423 00           MarketPrice				DB	0				; 03AA QQ24
 229+ 8424 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 230+ 8425 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 231+ 8426 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 232+ 8427 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 233+ 8429              											; this is ship lines stack pointer so may be redundant with paging
 234+ 8429              											; LS = line stack so we will have one for now to remove later
 235+ 8429              ; not needed as we don't do security on file COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 236+ 8429 00           DisplayEcononmy			DB	0				; 03B8
 237+ 842A 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 238+ 842B 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 239+ 842C 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 240+ 842E 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 241+ 8430 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 242+ 8432 00 00        DisplayRadius			DW	0
 243+ 8434              ; --- Used in creation of sun and planet----;
 244+ 8434 00           PlanetXPos              DS  1
 245+ 8435 00           PlanetYPos              DS  1
 246+ 8436 00           PlanetZPos              DS  1
 247+ 8437 00           PlanetType              DS  1
 248+ 8438 00           SunXPos                 DS  1
 249+ 8439 00           SunYPos                 DS  1
 250+ 843A 00           SunZPos                 DS  1
 251+ 843B              ; -- Current Missile Runbtime data
 252+ 843B 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
 253+ 843C 00 00        MissileXPos             DW      0
 254+ 843E 00           MissileXSgn             DB      0
 255+ 843F 00 00        MissileYPos             DW      0
 256+ 8441 00           MissileYSgn             DB      0
 257+ 8442 00 00        MissileZPos             DW      0
 258+ 8444 00           MissileZSgn             DB      0
 259+ 8445 00 00        CurrentTargetXpos       DS      2
 260+ 8447 00 00        CurrentTargetXsgn       DS      2
 261+ 8449 00 00        CurrentTargetYpos       DS      2
 262+ 844B 00 00        CurrentTargetYsgn       DS      2
 263+ 844D 00 00        CurrentTargetZpos       DS      2
 264+ 844F 00 00        CurrentTargetZsgn       DS      2
 265+ 8451 00 00        TargetVectorXpos        DS      2
 266+ 8453 00 00        TargetVectorXsgn        DS      2
 267+ 8455 00 00        TargetVectorYpos        DS      2
 268+ 8457 00 00        TargetVectorYsgn        DS      2
 269+ 8459 00 00        TargetVectorZpos        DS      2
 270+ 845B 00 00        TargetVectorZsgn        DS      2
 271+ 845D 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 272+ 845E 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 273+ 845F 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
 274+ 8460 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 275+ 8461
 276+ 8461              ; --- Main Loop Data -----------------------;
 277+ 8461 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
 278+ 8462 00           SelectedUniverseSlot    DB  0
 279+ 8463 00           SetStationHostileFlag   DB  0               ; used to semaphore angry space station
 280+ 8464 00           ShipBlastCheckCounter   DB  0
 281+ 8465 00           InnerHyperCount			DB 	0				; 2F QQ22+1
 282+ 8466 00           OuterHyperCount			DB 	0				; 2E QQ22
 283+ 8467 00           EventCounter            DB  0
 284+ 8468 00           HyperCircle             DB  0
 285+ 8469 00           MissJumpFlag            DB  0
 286+ 846A 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 287+ 846B 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 288+ 846C 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 289+ 846D 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 290+ 846E 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
 291+ 846F 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 292+ 8470              UniverseSlotListSize    equ	12
 293+ 8470 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
 294+ 847C 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
 295+ 8488              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
 296+ 8488 05           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
 297+ 8489 00           ConsoleRedrawFlag       DB  0
 298+ 848A 00           TextInputMode           DB  0
 299+ 848B 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 300+ 848C                                                          ; 7    6    5    4     3    2        1    0
 301+ 848C                                                          ; Up   Down Left Right Home Recentre
 302+ 848C 00           FireLaserPressed        DB  0
 303+ 848D              ; --- Current System Data ------------------;
 304+ 848D 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
 305+ 848E 00           ExtraVesselsCounter     DB  0
 306+ 848F 00           JunkCount				DB  0				; $033E
 307+ 8490 00           AsteroidCount           DB  0               ; Not used as yet
 308+ 8491 00           TransporterCount        DB  0
 309+ 8492 00           CopCount                DB  0
 310+ 8493 00           PirateCount             DB  0
 311+ 8494              ; --- Galaxy Data --------------------------;
 312+ 8494 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 313+ 8495 00 00 00...  WorkingSeeds			DS	6
 314+ 849B 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 315+ 84A1 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 316+ 84A7 00           PresentSystemX			DB	0				; System we are currently in
 317+ 84A8 00           PresentSystemY			DB  0				; System we are currently in
 318+ 84A9 00           TargetSystemX			DB	0				; System we are targeting for jump
 319+ 84AA 00           TargetSystemY			DB	0				; System we are targeting for jump
 320+ 84AB 00           GovPresentSystem		DB	0				; 03AE Govenment
 321+ 84AC 00           TekPresentSystem		DB	0				; 03AF Technology
 322+ 84AD
 323+ 84AD 00           CompassColor			DB	0				; 03C5
 324+ 84AE 00           SoundToggle				DB	0				; 03C6
 325+ 84AF 00           KeyboardRecenterToggle	DB	0				; 03C8
 326+ 84B0 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 327+ 84B1 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 328+ 84B2 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 329+ 84B3 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 330+ 84B4 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 331+ 84B5 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 332+ 84B6
 333+ 84B6              ; Working Data
 334+ 84B6
 335+ 84B6              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 336+ 84B6              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 337+ 84B6              ; $0925 =	EQUW page9+37* 1
 338+ 84B6              ; $094A =	EQUW page9+37* 2
 339+ 84B6              ; $096F =	EQUW page9+37* 3
 340+ 84B6              ; $0994 =	EQUW page9+37* 4
 341+ 84B6              ; $09B9 =	EQUW page9+37* 5
 342+ 84B6              ; $09DE =	EQUW page9+37* 6
 343+ 84B6              ; $0A03 =	EQUW page9+37* 7
 344+ 84B6              ; $0A28 =	EQUW page9+37* 8
 345+ 84B6              ; $0A4D =	EQUW page9+37* 9
 346+ 84B6              ; $0A72 =	EQUW page9+37*10
 347+ 84B6              ; $0A97 =	EQUW page9+37*11
 348+ 84B6              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 349+ 84B6
 350+ 84B6
 351+ 84B6
 352+ 84B6              ; 0b00 is start address of data to save
 353+ 84B6              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 354+ 84B6              											; Bit mask XXXX10XX - Thargoid plan mission
 355+ 84B6
 356+ 84B6 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 357+ 84B7
 358+ 84B7 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 359+ 84B9 00 00        CommanderLoadAddress	DW	0				;0C03
 360+ 84BB 00 00        LengthOfFile			DW	0				;0C0B
 361+ 84BD 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 362+ 84BF
 363+ 84BF 00 00 00...  EdgesBuffer				DS 50
 364+ 84F1              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 365+ 84F1              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 366+ 84F1
 367+ 84F1 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 368+ 8537              ShipLineStackTop		equ $ - ShipLineStack
 369+ 8537
 370+ 8537 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 371+ 85F7              ; LSX vector overlaps with LSO
 372+ 85F7 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 373+ 85F8 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 374+ 85F9
 375+ 85F9              ; Star Positions are 16 bit 3d coordinates
 376+ 85F9 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
 377+ 863B 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 378+ 8651 00           varStarX                DB  0
 379+ 8652 00           varStarY                DB  0
 380+ 8653 00 00 00...  varDustX                DS MaxNumberOfStars *2
 381+ 8669 00 00 00...  varDustY                DS MaxNumberOfStars *2
 382+ 867F 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 383+ 8695              ; -- Player Runtime Data
 384+ 8695 00           GunTemperature          DB  0
 385+ 8696 00           CabinTemperature        DB  0
 386+ 8697 00           PlayerForwardSheild0	DB	0 ; ?????
 387+ 8698 00           PlayerForwardSheild1    DB	0
 388+ 8699 00           PlayerForwardSheild2    DB	0
 389+ 869A 00           ForeShield				DB	0				; These three must be contiguous
 390+ 869B 00           AftShield				DB	0				; .
 391+ 869C 00           PlayerEnergy			DB	0				; and in this order
 392+ 869D 00           CompassX				DB	0				; 03A8
 393+ 869E 00           CompassY				DB	0				; 03A9
 394+ 869F              ; Simplification of missile targetting
 395+ 869F              ; $FF no missile targettting enabled
 396+ 869F              ; $FE missile targetting, no target selected
 397+ 869F              ; bit 7 set then tagetting and lower nibble holds missile target and launching
 398+ 869F              ; bit 7 clear launch at selected target in lower nibble
 399+ 869F 00           MissileTargettingFlag   DB  0
 400+ 86A0              ;;MissileTarget			DB  0				; 45
 401+ 86A0              ;;MissileLaunchFlag       DB  0
 402+ 86A0 00 00 00...  CommanderName           DS  15
 403+ 86AF 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 404+ 86B0 00           BadnessStatus           DB  0
 405+ 86B1              ;note rapidly changing views could reset these so need to consider it in an array
 406+ 86B1              ; LaserType
 407+ 86B1              ; LaserPulseRate                          ; how many pulses can be fired before long pause
 408+ 86B1              ; LaserPulsePause                         ; time before next pulse - 0 = beam
 409+ 86B1              ; LaserPulseRest                          ; time before pulse count resets to 0
 410+ 86B1              ; LaserDamageOutput                       ; amount of damage for a laser hit
 411+ 86B1              ; LaserEnergyDrain                        ; amount of energy drained by cycle
 412+ 86B1              ; LaserHeat                               ; amount of heat generated
 413+ 86B1              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
 414+ 86B1              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
 415+ 86B1              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
 416+ 86B1              ; LaserTechLevel                          ; minimum tech level system to buy from
 417+ 86B1              ; need to add copy table routines
 418+ 86B1 00           CurrLaserType           DB  0               ; current view laser type, copied in from LaserType array
 419+ 86B2 00           CurrLaserDamage         DB  0               ; copied in from LaserDamagedFlag array
 420+ 86B3 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
 421+ 86B4 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
 422+ 86B5 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
 423+ 86B6 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
 424+ 86B7
 425+ 86B7 00           CurrLaserBurstRate      DB  0
 426+ 86B8 00           CurrLaserBurstCount     DB  0
 427+ 86B9 00           CurrLaserDamageOutput   DB  0
 428+ 86BA 00           CurrLaserEnergyDrain    DB  0
 429+ 86BB 00           CurrLaserHeat           DB  0
 430+ 86BC 00           CurrLaserDurability     DB  0
 431+ 86BD 00           CurrLaserDurabilityAmount DB  0
 432+ 86BE
 433+ 86BE              ; Count down timers must be aligned like this to work
 434+ 86BE 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
 435+ 86BF 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
 436+ 86C0 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
 437+ 86C1 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
 438+ 86C2
 439+ 86C2              ; -- Input variables
 440+ 86C2 00           JoystickX				DB	0				; 034C JSTX
 441+ 86C3 00           JoystickY				DB	0				; 034D JSTY
 442+ 86C4 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 443+ 86C5 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 444+ 86C6
 445+ 86C6              ; -- Console drawing data
 446+ 86C6              FShieldStart            equ $8410
 447+ 86C6              AShieldStart            equ $8D10
 448+ 86C6              FuelStart               equ $9410
 449+ 86C6
 450+ 86C6              EnergyBar4Start         equ $A5D5
 451+ 86C6              EnergyBar3Start         equ $ADD5
 452+ 86C6              EnergyBar2Start         equ $B5D5
 453+ 86C6              EnergyBar1Start         equ $BDD5
 454+ 86C6              ; 70 /2 = 35 values
 455+ 86C6              ;                            0                             1                             2                             3
 456+ 86C6              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 457+ 86C6 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 457+ 86CA 04 04 05 06
 457+ 86CE 06 07 08 09
 457+ 86D2 0A 0A 0B 0C
 457+ 86D6 0D 0E 0E 0F
 457+ 86DA 10 10 11 13
 457+ 86DE 14 15 15 16
 457+ 86E2 17 18 19 1A
 457+ 86E6 1B 1C 1E 1F
 457+ 86EA 1F
 458+ 86EB              SpeedoStart             equ $84D1
 459+ 86EB              ;                            0                             1                             2                             3                             4
 460+ 86EB              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 461+ 86EB 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 461+ 86EF 04 04 05 06
 461+ 86F3 06 07 08 09
 461+ 86F7 0A 0A 0B 0C
 461+ 86FB 0D 0E 0E 0F
 461+ 86FF 10 10 11 12
 461+ 8703 13 14 14 15
 461+ 8707 16 17 18 18
 461+ 870B 19 1A 1A 1B
 461+ 870F 1C 1C 1D 1E
 461+ 8713 1F
 462+ 8714
 463+ 8714              DialMiddleXPos          equ $E1
 464+ 8714              RollMiddle              equ $8CE0
 465+ 8714              PitchMiddle             equ $94E0
 466+ 8714
 467+ 8714
 468+ 8714
 469+ 8714
 470+ 8714
# file closed: ./Variables/general_variables.asm
 590  8714                  INCLUDE "./Variables/general_variablesRoutines.asm"
# file opened: ./Variables/general_variablesRoutines.asm
   1+ 8714              LaserDrainSystems:      DrainSystem PlayerEnergy, CurrLaserEnergyDrain
   1+ 8714 3A BA 86    >                        ld      a,(CurrLaserEnergyDrain)
   1+ 8717 47          >                        ld      b,a
   1+ 8718 3A 9C 86    >                        ld      a,(PlayerEnergy)
   1+ 871B 90          >                        sub     a,b
   1+ 871C 32 9C 86    >                        ld      (PlayerEnergy),a
   1+ 871F 38 03       >                        jr      c,.ZeroSystem
   1+ 8721 C3 28 87    >                        jp      .ExitPoint
   1+ 8724             >.ZeroSystem:            ZeroA
   1+ 8724 AF          >                        xor a
   1+ 8725 32 9C 86    >                        ld      (PlayerEnergy),a
   1+ 8728             >.ExitPoint
   2+ 8728                                      BoostSystem GunTemperature, CurrLaserHeat
   2+ 8728 3A BB 86    >                        ld      a,(CurrLaserHeat)
   2+ 872B 47          >                        ld      b,a
   2+ 872C 3A 95 86    >                        ld      a,(GunTemperature)
   2+ 872F 80          >                        add     b
   2+ 8730 32 95 86    >                        ld      (GunTemperature),a
   2+ 8733 38 03       >                        jr      c, .MaxSystem
   2+ 8735 C3 3D 87    >                        jp      .ExitPoint
   2+ 8738 3E FF       >.MaxSystem:             ld      a,255
   2+ 873A 32 95 86    >                        ld      (GunTemperature),a
   2+ 873D             >.ExitPoint
   3+ 873D C9                                   ret
   4+ 873E
   5+ 873E
   6+ 873E              ResetPlayerShip:        ZeroThrottle
   6+ 873E AF          >                        xor     a
   6+ 873F 32 98 83    >                        ld      (DELTA),a
   6+ 8742 32 99 83    >                        ld      (DELT4Lo),a
   6+ 8745 32 9A 83    >                        ld      (DELT4Lo+1),a
   7+ 8748                                      ZeroPitch
   7+ 8748 AF          >                        xor     a
   7+ 8749 32 A8 82    >                        ld      (BET2),a
   7+ 874C 32 A9 82    >                        ld      (BET2FLIP),a
   7+ 874F 32 A6 82    >                        ld      (JSTY),a
   7+ 8752 32 A5 82    >                        ld      (BETA),a
   8+ 8755                                      ZeroRoll
   8+ 8755 AF          >                        xor     a                              ; zero roll and climb
   8+ 8756 32 B4 82    >                        ld      (ALP2),a
   8+ 8759 32 B5 82    >                        ld      (ALP2FLIP),a
   8+ 875C 32 B0 82    >                        ld      (JSTX),a
   8+ 875F 32 B2 82    >                        ld      (ALPHA),a
   9+ 8762                                      ClearMissileTargetting
   9+ 8762 3E FF       >                        ld      a,StageMissileNotTargeting
   9+ 8764 32 9F 86    >                        ld      (MissileTargettingFlag),a
  10+ 8767                                      ClearECM
  10+ 8767 AF          >                        xor     a
  10+ 8768 32 AE 82    >                        ld      (ECMCountDown),a
  11+ 876B                                      ChargeEnergyAndShields
  11+ 876B 3E FF       >                        ld      a,$FF
  11+ 876D 32 9C 86    >                        ld      (PlayerEnergy),a
  11+ 8770 32 9A 86    >                        ld      (ForeShield),a
  11+ 8773 32 9B 86    >                        ld      (AftShield),a
  12+ 8776                                      ClearTemperatures
  12+ 8776 AF          >                        xor     a
  12+ 8777 32 96 86    >                        ld      (CabinTemperature),a
  12+ 877A 32 95 86    >                        ld      (GunTemperature),a
  13+ 877D CD CA 87                             call    IsLaserUseable
  14+ 8780                                      MMUSelectCommander
  14+ 8780 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  15+ 8784 CD FE E2                             call    LoadLaserToCurrent
  16+ 8787 C8                                   ret     z
  17+ 8788
  18+ 8788 C9                                   ret
  19+ 8789
  20+ 8789 21 0D 89     AddCargoTypeD:          ld      hl,CargoTonnes
  21+ 878C 57                                   ld      d,a
  22+ 878D ED 31                                add     hl,a
  23+ 878F 34                                   inc     (hl)
  24+ 8790 C9                                   ret
  25+ 8791
  26+ 8791 7A           CanWeScoopCargoD:       ld      a,d
  27+ 8792                                      JumpIfAGTENusng  GoldIndex, .ItMayNotBeTonnes  ; if its cargo in kgs or gs then jump
  27+ 8792 FE 0E       >                        cp     GoldIndex
  27+ 8794 D2 B6 87    >                        jp		nc,.ItMayNotBeTonnes
  28+ 8797 21 0D 89     .ItsTonnes:             ld      hl,CargoTonnes
  29+ 879A 0E 00                                ld      c,0
  30+ 879C 06 0E                                ld      b,MineralsIndex+1           ; Only count to Gold as that is in KG
  31+ 879E 7E           .AddLoop:               ld      a,(hl)
  32+ 879F 81                                   add     c
  33+ 87A0 4F                                   ld      c,a                     ; add to counter
  34+ 87A1 05                                   dec     b
  35+ 87A2 23                                   inc     hl
  36+ 87A3 10 F9                                djnz    .AddLoop
  37+ 87A5 21 1E 89                             ld      hl,AlienItemsTonnes     ; Finally do alien items
  38+ 87A8 7E                                   ld      a,(hl)
  39+ 87A9 81                                   add     c
  40+ 87AA 4F                                   ld      c,a
  41+ 87AB 3A 0B 89                             ld      a,(CargoBaySize)        ; Get Bay Size
  42+ 87AE                                      JumpIfAEqNusng c, .CargoFull
  42+ 87AE B9          >                        cp     c
  42+ 87AF CA B4 87    >                        jp      z,.CargoFull
  43+ 87B2              .StillRoom:             ClearCarryFlag
  43+ 87B2 B7          >                        or a
  44+ 87B3 C9                                   ret
  45+ 87B4              .CargoFull:             SetCarryFlag
  45+ 87B4 37          >                        scf
  46+ 87B5 C9                                   ret
  47+ 87B6              .ItMayNotBeTonnes:      JumpIfAEqNusng  AlienItemsIndex,.ItsTonnes       ;ALienItems are tonnes
  47+ 87B6 FE 11       >                        cp     AlienItemsIndex
  47+ 87B8 CA 97 87    >                        jp      z,.ItsTonnes
  48+ 87BB 21 0D 89                             ld      hl,CargoTonnes
  49+ 87BE 7A                                   ld      a,d
  50+ 87BF ED 31                                add     hl,a
  51+ 87C1 7E                                   ld      a,(hl)
  52+ 87C2                                      JumpIfAEqNusng  200, .StillRoom
  52+ 87C2 FE C8       >                        cp     200
  52+ 87C4 CA B2 87    >                        jp      z,.StillRoom
  53+ 87C7 C3 B4 87                             jp      .CargoFull
  54+ 87CA              ; END of rountine
  55+ 87CA
  56+ 87CA 3A B1 86     IsLaserUseable:         ld      a,(CurrLaserType)
  57+ 87CD FE FF                                cp      255
  58+ 87CF C8                                   ret     z
  59+ 87D0 3A B2 86                             ld      a,(CurrLaserDamage)
  60+ 87D3 FE FF                                cp      255
  61+ 87D5 C9                                   ret
  62+ 87D6
  63+ 87D6 CD 7A 88     InitMainLoop:           call    ClearUnivSlotList
  64+ 87D9 AF                                   xor     a
  65+ 87DA 32 61 84                             ld      (CurrentUniverseAI),a
  66+ 87DD 3E 03                                ld      a,3
  67+ 87DF 32 A9 83                             ld      (MenuIdMax),a
  68+ 87E2                                      SetMemFalse SetStationHostileFlag
  68+ 87E2 3E FF       >                        ld      a,$FF
  68+ 87E4 32 63 84    >                        ld      (SetStationHostileFlag),a
  69+ 87E7                                      SetMemFalse DockedFlag
  69+ 87E7 3E FF       >                        ld      a,$FF
  69+ 87E9 32 AD 83    >                        ld      (DockedFlag),a
  70+ 87EC              ;                        call    InitialiseFrontView
  71+ 87EC CD 27 6D                             call    InitialiseCommander
  72+ 87EF                                      MMUSelectUniverseN 2
  72+ 87EF ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
  73+ 87F3 CD 1C 6E                             call    SetInitialShipPosition
  74+ 87F6              ; Initialist screen refresh
  75+ 87F6 3E 05                                ld      a, ConsoleRefreshInterval
  76+ 87F8 32 88 84                             ld      (ConsoleRefreshCounter),a
  77+ 87FB                                      SetMemFalse    ConsoleRedrawFlag
  77+ 87FB 3E FF       >                        ld      a,$FF
  77+ 87FD 32 89 84    >                        ld      (ConsoleRedrawFlag),a
  78+ 8800                                      MMUSelectStockTable
  78+ 8800 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
  79+ 8804 CD AA E0                             call    generate_stock_market
  80+ 8807 CD 97 77                             call    ResetMessageQueue
  81+ 880A                                      InitEventCounter
  81+ 880A AF          >                        xor     a
  81+ 880B 32 67 84    >                        ld      (EventCounter),a
  82+ 880E                                      ClearMissJump
  82+ 880E 3E FF       >                        ld      a,$FF
  82+ 8810 32 69 84    >                        ld      (MissJumpFlag),a
  83+ 8813                                      SetMemFalse TextInputMode
  83+ 8813 3E FF       >                        ld      a,$FF
  83+ 8815 32 8A 84    >                        ld      (TextInputMode),a
  84+ 8818 C9                                   ret
  85+ 8819
  86+ 8819 3E 00        SetSpeedZero:           ld      a,0
  87+ 881B 32 98 83                             ld      (DELTA),a                                       ;
  88+ 881E 67                                   ld      h,a                                             ;
  89+ 881F 6F                                   ld      l,a                                             ;
  90+ 8820 22 99 83                             ld      (DELT4Lo),hl                                    ;
  91+ 8823 C9                                   ret
  92+ 8824
  93+ 8824 21 9C 86     RechargeShip:           ld      hl,PlayerEnergy                                 ; if enery >= 128
  94+ 8827 7E                                   ld      a,(hl)
  95+ 8828 CB 7F                                bit     7,a                                             ; then we can recharge shields
  96+ 882A 28 0D                                jr      z,.UpdatePlayerEnergy
  97+ 882C 21 9A 86     .ShieldCharge:          ld      hl,ForeShield                                   ; charge front shield
  98+ 882F 34                                   inc     (hl)
  99+ 8830 20 01                                jr      nz,.DoneForeShield
 100+ 8832 35           .ForeOverCharge:        dec     (hl)
 101+ 8833 23           .DoneForeShield:        inc     hl                                              ; point to aft shield
 102+ 8834 34                                   inc     (hl)
 103+ 8835 20 01                                jr      nz,.DoneAftShield
 104+ 8837 35                                   dec     (hl)                                            ; back to 255
 105+ 8838 23           .DoneAftShield:         inc     hl                                              ; point to energy
 106+ 8839 34           .UpdatePlayerEnergy:    inc     (hl)
 107+ 883A 28 0A                                jr      z,.OverflowedEnergy
 108+ 883C 3A 2C 89                             ld      a,(ExtraEnergyUnit)
 109+ 883F                                      ReturnIfANENusng EquipmentItemFitted                    ; if energy unit fitted an extra step
 109+ 883F FE FF       >                        cp      EquipmentItemFitted
 109+ 8841 C0          >                        ret     nz
 110+ 8842 34           .EnergyUnitFitted:      inc     (hl)
 111+ 8843 28 01                                jr      z,.OverflowedEnergy
 112+ 8845 C9                                   ret
 113+ 8846 35           .OverflowedEnergy:      dec     (hl)                                            ;  restore to 255
 114+ 8847 C9                                   ret
 115+ 8848 21 9C 86     .SkipShieldCharge:      ld      hl,PlayerEnergy
 116+ 884B 18 EC                                jr      .UpdatePlayerEnergy
 117+ 884D
 118+ 884D              ; sets carry to true if target
 119+ 884D 3A 9F 86     IsMissileLockedOn:      ld      a,(MissileTargettingFlag)
 120+ 8850 CB 7F                                bit     7,a
 121+ 8852 28 07                                jr      z, .TargetSelected
 122+ 8854 E6 70                                and     $70                         ; are all upper bits set (we can ignore bit 7)
 123+ 8856 CA 5B 88                             jp      z, .TargetSelected           ; if its only bit 7 then we have a lock
 124+ 8859                                      ClearCarryFlag                      ; if bitsd 6 to 4 were set then it must be unlocked status
 124+ 8859 B7          >                        or a
 125+ 885A C9                                   ret
 126+ 885B              .TargetSelected:        JumpIfSlotAEmpty .TargetInvalid     ; does slot A have an target
 126+ 885B 21 70 84    >                        ld      hl,UniverseSlotList
 126+ 885E ED 31       >                        add     hl,a
 126+ 8860 7E          >                        ld      a,(hl)
 126+ 8861 3C          >                        inc     a
 126+ 8862 CA 68 88    >                        jp      z,.TargetInvalid    ; if slot was ff inc would make it 0
 126+ 8865 3D          >                        dec     a           ; get original value back for later
 127+ 8866                                      SetCarryFlag
 127+ 8866 37          >                        scf
 128+ 8867 C9                                   ret
 129+ 8868 3E FF        .TargetInvalid:         ld      a, StageMissileNotTargeting     ; housekeep missile status if target gone
 130+ 886A 32 9F 86                             ld      (MissileTargettingFlag),a
 131+ 886D C9                                   ret
 132+ 886E
# file closed: ./Variables/general_variablesRoutines.asm
 591  886E
 592  886E                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ 886E              ; Note this code is core code and can not be in a memory bank unless do explosion code is changed too
   2+ 886E AF           ClearSlotCount:         xor     a
   3+ 886F 21 70 84                             ld      hl,UniverseSlotList
   4+ 8872 06 0C                                ld      b, UniverseSlotListSize ; prbably not needed + UniverseSlotTypeSize
   5+ 8874 77           .fillLoop:              ld      (hl),a
   6+ 8875 23                                   inc     hl
   7+ 8876 10 FC                                djnz    .fillLoop
   8+ 8878 C9                                   ret
   9+ 8879
  10+ 8879              ; Initialises all types to a count of 1 where there is an occupied universe slot
  11+ 8879              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  12+ 8879              ; DOE NOT WORK CorrectSlotCount:       call    ClearSlotCount
  13+ 8879              ; DOE NOT WORK                         ld      hl,UniverseSlotCount
  14+ 8879              ; DOE NOT WORK                         ld      de,UniverseSlotList
  15+ 8879              ; DOE NOT WORK                         ld      b,UniverseSlotListSize
  16+ 8879              ; DOE NOT WORK .fillLoop:              ld      a,(de)
  17+ 8879              ; DOE NOT WORK                         cp      $FF
  18+ 8879              ; DOE NOT WORK                         jr      z,.SkipSlot
  19+ 8879              ; DOE NOT WORK .CorrectSlot:           ld      (hl),a
  20+ 8879              ; DOE NOT WORK                         inc     hl
  21+ 8879              ; DOE NOT WORK                         ld      (hl),1
  22+ 8879              ; DOE NOT WORK                         inc     hl
  23+ 8879              ; DOE NOT WORK                         inc     hl
  24+ 8879              ; DOE NOT WORK .SkipSlot               inc     de
  25+ 8879              ; DOE NOT WORK                         djnz    .fillLoop
  26+ 8879 C9                                   ret
  27+ 887A              ; Wipe all items
  28+ 887A 3E FF        ClearUnivSlotList:      ld      a,$FF
  29+ 887C 21 70 84                             ld      hl,UniverseSlotList
  30+ 887F 06 18                                ld      b, UniverseSlotListSize * 2
  31+ 8881 77           .fillLoop:              ld      (hl),a
  32+ 8882 23                                   inc     hl
  33+ 8883 10 FC                                djnz    .fillLoop
  34+ 8885 C9                                   ret
  35+ 8886
  36+ 8886 21 70 84     SetSlot0ToSpaceStation: ld      hl,UniverseSlotList
  37+ 8889 36 02                                ld      (hl),ShipTypeStation
  38+ 888B 21 7C 84                             ld      hl,UniverseSlotType
  39+ 888E 36 02                                ld      (hl),ShipTypeStation
  40+ 8890 C9                                   ret
  41+ 8891
  42+ 8891 21 70 84     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  43+ 8894 ED 31                                add     hl,a
  44+ 8896 70                                   ld      (hl),b
  45+ 8897 C9                                   ret
  46+ 8898
  47+ 8898 21 7C 84     SetSlotAToClassB:       ld      hl,UniverseSlotType
  48+ 889B ED 31                                add     hl,a
  49+ 889D 70                                   ld      (hl),b
  50+ 889E C9                                   ret
  51+ 889F
  52+ 889F              ; Clears all except slot A, used when say restarting a space station post launch
  53+ 889F 57           ClearFreeSlotListSaveA: ld      d,a
  54+ 88A0 0E 00                                ld      c,0
  55+ 88A2 21 70 84                             ld      hl,UniverseSlotList
  56+ 88A5 06 18                                ld      b, UniverseSlotListSize * 2
  57+ 88A7 79           .fillLoop:              ld      a,c
  58+ 88A8 BA                                   cp      d
  59+ 88A9 28 03                                jr      z,.SkipSlot
  60+ 88AB 3E FF                                ld      a,$FF
  61+ 88AD 77                                   ld      (hl),a
  62+ 88AE 23           .SkipSlot:              inc     hl
  63+ 88AF 23                                   inc     hl
  64+ 88B0 10 F5                                djnz    .fillLoop
  65+ 88B2 C9                                   ret
  66+ 88B3
  67+ 88B3 DD 01        ClearSlotA:             break
  68+ 88B5 21 70 84                             ld      hl,UniverseSlotList
  69+ 88B8 ED 31                                add     hl,a
  70+ 88BA 36 FF                                ld      (hl),$FF
  71+ 88BC 3E 0C                                ld      a,UniverseSlotListSize  ; move to types
  72+ 88BE ED 31                                add     hl,a
  73+ 88C0 36 FF                                ld      (hl),$FF
  74+ 88C2 C9                                   ret
  75+ 88C3              ; Space Station will always be slot 0
  76+ 88C3
  77+ 88C3 21 7D 84     AreShipsPresent:        ld      hl,UniverseSlotType+1
  78+ 88C6 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  79+ 88C8 7E           .NextShip:              ld      a,(hl)
  80+ 88C9 FE 00                                cp      ShipTypeNormal
  81+ 88CB                                      ClearCarryFlag
  81+ 88CB B7          >                        or a
  82+ 88CC C8                                   ret     z
  83+ 88CD 23                                   inc     hl
  84+ 88CE 10 F8                                djnz    .NextShip
  85+ 88D0                                      SetCarryFlag
  85+ 88D0 37          >                        scf
  86+ 88D1 C9                                   ret
  87+ 88D2
  88+ 88D2 21 70 84     IsSpaceStationPresent:  ld      hl,UniverseSlotList
  89+ 88D5                                      ClearCarryFlag
  89+ 88D5 B7          >                        or a
  90+ 88D6 7E           .SearchLoop:            ld      a,(hl)
  91+ 88D7                                      ReturnIfAEqNusng ShipTypeStation
  91+ 88D7 FE 02       >                        cp      ShipTypeStation
  91+ 88D9 C8          >                        ret     z
  92+ 88DA                                      SetCarryFlag
  92+ 88DA 37          >                        scf
  93+ 88DB C9                                   ret
  94+ 88DC
  95+ 88DC 21 70 84     GetTypeAtSlotA:         ld      hl,UniverseSlotList
  96+ 88DF ED 31                                add     hl,a
  97+ 88E1 7E                                   ld      a,(hl)
  98+ 88E2 C9                                   ret
  99+ 88E3
 100+ 88E3 21 71 84     IsPlanetOrSpaceStation: ld      hl,UniverseSlotList+1
 101+ 88E6 7E                                   ld      a,(hl)
 102+ 88E7 C9                                   ret
 103+ 88E8
 104+ 88E8 21 70 84     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 105+ 88EB 06 0C                                ld      b, UniverseSlotListSize
 106+ 88ED 0E 00                                ld      c, 0
 107+ 88EF 7E           .SearchLoop:            ld      a,(hl)
 108+ 88F0                                      JumpIfAEqNusng $FF, .FoundSlot
 108+ 88F0 FE FF       >                        cp     $FF
 108+ 88F2 CA FB 88    >                        jp      z,.FoundSlot
 109+ 88F5 0C                                   inc     c
 110+ 88F6 23                                   inc     hl
 111+ 88F7 10 F6                                djnz    .SearchLoop
 112+ 88F9                                      SetCarryFlag
 112+ 88F9 37          >                        scf
 113+ 88FA C9                                   ret
 114+ 88FB              .FoundSlot:             ClearCarryFlag
 114+ 88FB B7          >                        or a
 115+ 88FC C9                                   ret
 116+ 88FD
 117+ 88FD
 118+ 88FD CD E8 88     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 119+ 8900 79                                   ld      a,c
 120+ 8901 C9                                   ret
 121+ 8902
# file closed: ./Variables/UniverseSlotRoutines.asm
 593  8902
 594  8902                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 8902 00           AutoDocking				DB	0				; $033F
   2+ 8903 00           PlayerECM				DB	0				; $0340
   3+ 8904 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 8905 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 8906 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 890A 19           Fuel					DB	25				; 0365  QQ14
   7+ 890B 46           CargoBaySize			DB	70				; 036E
   8+ 890C 00           CargoRunningLoad        DB  0
   9+ 890D 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   9+ 8911 00 00 00 00
   9+ 8915 00 00 00 00
   9+ 8919 00 00 00 00
  10+ 891D              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  11+ 891D              SlaveCargoTonnes		equ CargoTonnes+3
  12+ 891D              NarcoticsCargoTonnes	equ CargoTonnes+6
  13+ 891D              FirearmsCargoTonnes		equ CargoTonnes+10
  14+ 891D              GoldCargoKGs:           equ CargoTonnes+15
  15+ 891D              AlienItemsTonnes        equ CargoTonnes+17
  16+ 891D              ; For each view laser a localised copy of the stats
  17+ 891D              ; TODO - need to add code to maintain on load/save/equipment transactions
  18+ 891D 00 00 00 00  LaserType               DS  4               ; quick reference to laser type
  19+ 8921 00 00 00 00  LaserDamagedFlag        DS  4               ; probabiliy out of 255 that it will no fire, 0 = good, 255 = will not fire
  20+ 8925              ; dont need as static from table LaserPulseRate          DS  4               ; how many pulses can be fired before long pause
  21+ 8925              ; dont need as static from table LaserPulsePause         DS  4               ; time before next pulse - 0 = beam
  22+ 8925              ; dont need as static from table LaserPulseRest          DS  4               ; time before pulse count resets to 0
  23+ 8925              ; dont need as static from table LaserDamageOutput       DS  4               ; amount of damage for a laser hit
  24+ 8925              ; dont need as static from table LaserEnergyDrain        DS  4               ; amount of energy drained by cycle
  25+ 8925              ; dont need as static from table LaserHeat               DS  4               ; amount of heat generated
  26+ 8925              ; dont need as static from table LaserDurability         DS  4               ; probabability out of 255 that a hit on it unshielded will add random amount of damage
  27+ 8925              ; dont need as static from table LaserDurabilityAmount   DS  4               ; max amount of damagage can be sustained in one damage hit
  28+ 8925
  29+ 8925
  30+ 8925              QQ20                    equ CargoTonnes
  31+ 8925 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  32+ 893F              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  33+ 893F              FuelScoop               EQU EquipmentFitted + EQ_FUEL_SCOOPS
  34+ 893F              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  35+ 893F              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  36+ 893F              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  37+ 893F              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  38+ 893F              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  39+ 893F 01           FuelScoopsBarrelStatus	DB	1				; 0381
  40+ 8940
# file closed: ./Variables/EquipmentVariables.asm
 595  8940
 596  8940                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 8940              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 8940              doRND2:
   3+ 8940 A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 8941              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 8941              ; "doRandom, Random Seed update, new value in A & C)"
   6+ 8941              ; uses a c h l registers
   7+ 8941              doRND:                  ;exx                                     ; protect bc,de,hl
   8+ 8941 3A 8F 82                             ld		a,(RandomSeed)					; Get Seed 0
   9+ 8944 CB 17                                rl		a								; Rotate L including carry
  10+ 8946 4F                                   ld		c,a								; c =  double lo
  11+ 8947 21 91 82     .AddSeed2:              ld		hl,RandomSeed2
  12+ 894A 8E                                   adc		a,(hl)							; RAND+2
  13+ 894B 32 8F 82     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  14+ 894E 08           .SaveBtoSeed2:          ex		af,af'
  15+ 894F 79                                   ld		a,c
  16+ 8950 32 91 82                             ld		(RandomSeed2),a
  17+ 8953 08                                   ex		af,af'
  18+ 8954 3A 90 82                             ld		a,(RandomSeed1)
  19+ 8957 4F                                   ld		c,a								; C = Seed1
  20+ 8958 21 92 82     .AddSeed3:              ld		hl,RandomSeed3
  21+ 895B 8E                                   adc		a,(hl)
  22+ 895C 32 90 82                             ld		(RandomSeed1),a
  23+ 895F 08                                   ex		af,af'
  24+ 8960 79                                   ld		a,c
  25+ 8961 32 92 82                             ld		(RandomSeed3),a
  26+ 8964 08                                   ex		af,af'
  27+ 8965                                      ;exx                                     ; get bc,de,hl back
  28+ 8965 C9                                   ret
  29+ 8966
  30+ 8966 21 8F 82     saveRandomSeeds:        ld      hl,RandomSeed
  31+ 8969 11 93 82                             ld      de,RandomSeedSave
  32+ 896C 01 04 00                             ld      bc,4
  33+ 896F ED A0                                ldi
  34+ 8971 ED A0                                ldi
  35+ 8973 ED A0                                ldi
  36+ 8975 ED A0                                ldi
  37+ 8977 C9                                   ret
  38+ 8978
  39+ 8978 21 93 82     restoreRandomSeeds:     ld      hl,RandomSeedSave
  40+ 897B 11 8F 82                             ld      de,RandomSeed
  41+ 897E 01 04 00                             ld      bc,4
  42+ 8981 ED A0                                ldi
  43+ 8983 ED A0                                ldi
  44+ 8985 ED A0                                ldi
  45+ 8987 ED A0                                ldi
  46+ 8989 C9                                   ret
# file closed: ./Variables/random_number.asm
 597  898A                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 898A 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 898E 58 59 53 45
   1+ 8992 45 44
   2+ 8994 21 A1 84     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 8997 11 88 83                             ld		de,SystemSeed
   4+ 899A ED A0        copy_seed:		        ldi
   5+ 899C ED A0                                ldi
   6+ 899E ED A0                                ldi
   7+ 89A0 ED A0                                ldi
   8+ 89A2 ED A0                                ldi
   9+ 89A4 ED A0                                ldi
  10+ 89A6 C9                                   ret
  11+ 89A7
  12+ 89A7 21 88 83     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 89AA 11 A1 84                             ld		de,GalaxySeeds
  14+ 89AD 18 EB                                jr		copy_seed
  15+ 89AF
  16+ 89AF 21 A1 84     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 89B2 11 95 84                             ld		de,WorkingSeeds
  18+ 89B5 18 E3                                jr		copy_seed
  19+ 89B7
  20+ 89B7 21 95 84     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 89BA 11 A1 84                             ld		de,GalaxySeeds
  22+ 89BD 18 DB                                jr		copy_seed
  23+ 89BF
  24+ 89BF 21 95 84     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 89C2 11 88 83                             ld		de,SystemSeed
  26+ 89C5 18 D3                                jr		copy_seed
  27+ 89C7
  28+ 89C7 21 88 83     copy_system_to_working: ld		hl,SystemSeed
  29+ 89CA 11 95 84                             ld		de,WorkingSeeds
  30+ 89CD 18 CB                                jr		copy_seed
  31+ 89CF
  32+ 89CF              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 89CF CD D2 89     		call	.NextStep					; This logic means we hard code x4
  34+ 89D2              .NextStep:
  35+ 89D2 CD D5 89     		call	process_seed				; This logic means we hard code x2
  36+ 89D5              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 89D5 3A 88 83     		ld		a,(SystemSeed)				; QQ15
  38+ 89D8 B7           		or		a							; clear carry flag
  39+ 89D9 21 8A 83     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 89DC 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 89DD 47           		ld		b,a							; partial sum lo
  42+ 89DE 3A 89 83     		ld		a,(SystemSeed+1)
  43+ 89E1 21 8B 83     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 89E4 8E           		adc		a,(hl)						; note add with carry
  45+ 89E5 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 89E6 3A 8A 83     		ld		a,(SystemSeed+2)
  47+ 89E9 32 88 83     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 89EC 3A 8B 83     		ld		a,(SystemSeed+3)
  49+ 89EF 32 89 83     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 89F2 3A 8D 83     		ld		a,(SystemSeed+5)
  51+ 89F5 32 8B 83     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 89F8 3A 8C 83     		ld		a,(SystemSeed+4)
  53+ 89FB 32 8A 83     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 89FE B7           		or		a
  55+ 89FF 78           		ld		a,b
  56+ 8A00 21 8A 83     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 8A03 86           		add	    a,(hl)
  58+ 8A04 32 8C 83     		ld		(SystemSeed+4),a
  59+ 8A07 79           		ld		a,c
  60+ 8A08 21 8B 83     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 8A0B 8E           		adc		a,(hl)
  62+ 8A0C 32 8D 83     		ld		(SystemSeed+5),a
  63+ 8A0F C9           		ret
  64+ 8A10
  65+ 8A10              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 8A10 CD 13 8A     		call	.NextStep					; This logic means we hard code x4
  67+ 8A13              .NextStep:
  68+ 8A13 CD 16 8A     		call	working_seed				; This logic means we hard code x2
  69+ 8A16              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 8A16              ; x = a + c
  71+ 8A16 3A 95 84     		ld		a,(WorkingSeeds)			; QQ15
  72+ 8A19 B7           		or		a							; clear carry flag
  73+ 8A1A 21 97 84     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 8A1D 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 8A1E 47           		ld		b,a							; partial sum lo [x]
  76+ 8A1F              ; y = b + d	+ carry
  77+ 8A1F 3A 96 84     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 8A22 21 98 84     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 8A25 8E           		adc		a,(hl)						; note add with carry
  80+ 8A26 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 8A27 3A 97 84     		ld		a,(WorkingSeeds+2)
  82+ 8A2A 32 95 84     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 8A2D 3A 98 84     		ld		a,(WorkingSeeds+3)
  84+ 8A30 32 96 84     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 8A33 3A 9A 84     		ld		a,(WorkingSeeds+5)
  86+ 8A36 32 98 84     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 8A39 3A 99 84     		ld		a,(WorkingSeeds+4)
  88+ 8A3C 32 97 84     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 8A3F B7           		or		a
  90+ 8A40 78           		ld		a,b
  91+ 8A41 21 97 84     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 8A44 86           		add	    a,(hl)
  93+ 8A45 32 99 84     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 8A48 79           		ld		a,c
  95+ 8A49 21 98 84     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 8A4C 8E           		adc		a,(hl)
  97+ 8A4D 32 9A 84     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 8A50 C9           		ret
  99+ 8A51
 100+ 8A51 32           working_distX	DB 50
 101+ 8A52 32           working_distY	DB 50
 102+ 8A53 00           current_distY	DB 0
 103+ 8A54
 104+ 8A54 AF           find_present_system:    xor		a
 105+ 8A55 32 A1 83                             ld		(XSAV),a
 106+ 8A58 3A 89 83     .CounterLoop:           ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 107+ 8A5B 4F                                   ld		c,a
 108+ 8A5C 3A A8 84     .calcLocaldy:           ld		a,(PresentSystemY)
 109+ 8A5F 47                                   ld		b,a								; so b holds Y ccord
 110+ 8A60 79                                   ld		a,c
 111+ 8A61 90                                   sub		b
 112+ 8A62 CB 7F                                bit		7,a
 113+ 8A64 28 02                                jr		z,.positivedy
 114+ 8A66 ED 44        .negativedy:            neg
 115+ 8A68 32 53 8A     .positivedy:            ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 116+ 8A6B ED 5B 51 8A                          ld		de,(working_distX)
 117+ 8A6F BA                                   cp		d
 118+ 8A70 30 24                                jr		nc,.toofar
 119+ 8A72 3A 8B 83     .calcLocaldx:           ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 120+ 8A75 4F                                   ld		c,a
 121+ 8A76 3A A7 84                             ld		a,(PresentSystemX)
 122+ 8A79 47                                   ld		b,a								; so b holds Y ccord
 123+ 8A7A 79                                   ld		a,c
 124+ 8A7B 90                                   sub		b
 125+ 8A7C CB 7F                                bit		7,a
 126+ 8A7E 28 02                                jr		z,.positivedx
 127+ 8A80 ED 44        .negativedx:            neg
 128+ 8A82 4F           .positivedx:            ld		c,a
 129+ 8A83 BB                                   cp		e
 130+ 8A84 30 10                                jr		nc,.toofar
 131+ 8A86 3A 53 8A     .Nearer:			    ld		a,(current_distY) 				; we have a closer system
 132+ 8A89 47                                   ld		b,a								; we have c to recall Y into b
 133+ 8A8A ED 43 51 8A                          ld		(working_distX),bc
 134+ 8A8E C5                                   push	bc
 135+ 8A8F CD C7 89                             call 	copy_system_to_working
 136+ 8A92 C1                                   pop		bc
 137+ 8A93 78                                   ld		a,b								;
 138+ 8A94 B1                                   or		c								;
 139+ 8A95 C8                                   ret		z								; if we have distance 0 then bang on
 140+ 8A96 CD CF 89     .toofar:                call	next_system_seed
 141+ 8A99 3A A1 83                             ld		a,(XSAV)
 142+ 8A9C 3D                                   dec		a
 143+ 8A9D FE 00                                cp		0
 144+ 8A9F C8                                   ret		z
 145+ 8AA0 32 A1 83                             ld		(XSAV),a
 146+ 8AA3 18 B3                                jr		.CounterLoop
 147+ 8AA5
 148+ 8AA5              get_planet_data_working_seed:
 149+ 8AA5 3A 96 84     		ld		a, (WorkingSeeds+1)
 150+ 8AA8 E6 07        		and		7
 151+ 8AAA 32 29 84     		ld		(DisplayEcononmy),a
 152+ 8AAD 3A 97 84     		ld		a, (WorkingSeeds+2)
 153+ 8AB0 CB 3F        		srl	a
 154+ 8AB2 CB 3F        		srl	a
 155+ 8AB4 CB 3F        		srl	a
 156+ 8AB6 CB 3F        		srl	a								; c/8
 157+ 8AB8 E6 07        		and		7
 158+ 8ABA 32 2A 84     		ld		(DisplayGovernment),a
 159+ 8ABD CB 3F        		srl	a
 160+ 8ABF FE 00        		cp		0
 161+ 8AC1 20 08        		jr		nz,.CanBeRich
 162+ 8AC3              .Fedual:
 163+ 8AC3 3A 29 84     		ld		a,(DisplayEcononmy)
 164+ 8AC6 F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 165+ 8AC8 32 29 84     		ld		(DisplayEcononmy),a
 166+ 8ACB              .CanBeRich:
 167+ 8ACB 3A 29 84     		ld		a,(DisplayEcononmy)
 168+ 8ACE EE 07        		xor		7							; flip economy so Rich is now 7
 169+ 8AD0 32 2B 84     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 170+ 8AD3 47           		ld		b,a
 171+ 8AD4 3A 98 84     		ld		a,(WorkingSeeds+3)
 172+ 8AD7 E6 03        		and		3
 173+ 8AD9 80           		add		a,b
 174+ 8ADA 32 2B 84     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 175+ 8ADD 3A 2A 84     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 176+ 8AE0 CB 3F        		srl		a 							; gov/2
 177+ 8AE2 47           		ld		b,a
 178+ 8AE3 3A 2B 84     		ld		a,(DisplayTekLevel)
 179+ 8AE6 80           		add		a,b
 180+ 8AE7 32 2B 84     		ld		(DisplayTekLevel),a			; Tek += gov /2
 181+ 8AEA CB 27        		sla		a
 182+ 8AEC CB 27        		sla		a							; Onto Population (TL-1)*= 4
 183+ 8AEE 47           		ld		b,a
 184+ 8AEF 3A 29 84     		ld		a,(DisplayEcononmy)
 185+ 8AF2 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 186+ 8AF3 47           		ld		b,a
 187+ 8AF4 3A 2A 84     		ld		a,(DisplayGovernment)
 188+ 8AF7 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 189+ 8AF8 32 2C 84     		ld		(DisplayPopulation),a
 190+ 8AFB 3A 29 84     		ld		a,(DisplayEcononmy)
 191+ 8AFE EE 07        		xor		7							; Onto productivity
 192+ 8B00 C6 03        		add		3							;  (Flipped eco +3)
 193+ 8B02 57           		ld		d,a
 194+ 8B03 3A 2A 84     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 195+ 8B06 C6 04        		add		4
 196+ 8B08 5F           		ld		e,a
 197+ 8B09 ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 198+ 8B0B 3A 2C 84     		ld		a,(DisplayPopulation)		; then we use d for radius
 199+ 8B0E 57           		ld		d,a
 200+ 8B0F ED 30        		mul
 201+ 8B11 CB 23        		sla		e
 202+ 8B13 CB 1A        		rr		d
 203+ 8B15 CB 23        		sla		e
 204+ 8B17 CB 1A        		rr		d
 205+ 8B19 CB 23        		sla		e
 206+ 8B1B CB 1A        		rr		d							; de * 8
 207+ 8B1D ED 53 2E 84  		ld		(DisplayProductivity),de
 208+ 8B21              .DoRadius:
 209+ 8B21 3A 98 84     		ld		a,(WorkingSeeds+3)
 210+ 8B24 4F           		ld		c,a
 211+ 8B25 3A 9A 84     		ld		a,(WorkingSeeds+5)
 212+ 8B28 E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 213+ 8B2A C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 214+ 8B2C 47           		ld		b,a							;
 215+ 8B2D ED 43 32 84  		ld		(DisplayRadius),bc
 216+ 8B31 C9           		ret
 217+ 8B32
# file closed: ./Variables/galaxy_seed.asm
 598  8B32                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 8B32 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 8B36 65 00
   2+ 8B38 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 8B3C 00
   3+ 8B3D 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 8B41 74 61 72 79
   3+ 8B45 00
   4+ 8B46 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 8B4A 6E 67 00
   5+ 8B4D 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 8B51 6F 6D 00
   6+ 8B54
   7+ 8B54 32 8B 38 8B  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 8B58 3D 8B 46 8B
   7+ 8B5C 4D 8B
   8+ 8B5E              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 8B5E
  10+ 8B5E 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 8B62 65 64 00
  11+ 8B65 47 72 65 65  ConditionName2		DB "Green",0
  11+ 8B69 6E 00
  12+ 8B6B 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 8B6F 6F 77 00
  13+ 8B72 52 65 64 00  ConditionName4		DB "Red",0
  14+ 8B76
  15+ 8B76 5E 8B 65 8B  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 8B7A 6B 8B 72 8B
  16+ 8B7E              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 8B7E
  18+ 8B7E 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 8B82 53 45 49 54
  18+ 8B86 49 4C 45 54
  18+ 8B8A 53 54 4F 4E
  18+ 8B8E 4C 4F 4E 55
  18+ 8B92 54 48 4E 4F
  18+ 8B96 41 4C 4C 45
  18+ 8B9A 58 45 47 45
  18+ 8B9E 5A 41 43 45
  18+ 8BA2 42 49 53 4F
  18+ 8BA6 55 53 45 53
  18+ 8BAA 41 52 4D 41
  18+ 8BAE 49 4E 44 49
  18+ 8BB2 52 45 41 3F
  18+ 8BB6 45 52 41 54
  18+ 8BBA 45 4E 42 45
  18+ 8BBE 52 41 4C 41
  18+ 8BC2 56 45 54 49
  18+ 8BC6 45 44 4F 52
  18+ 8BCA 51 55 41 4E
  18+ 8BCE 54 45 49 53
  18+ 8BD2 52 49 4F 4E
  18+ 8BD6 00
  19+ 8BD7
  20+ 8BD7 00 00 08 00  RankingTable		DW	$0000,$0008,$0010,$0020,$0040,$0080,$0200,$0A00,$1900,$4900,$FFFF
  20+ 8BDB 10 00 20 00
  20+ 8BDF 40 00 80 00
  20+ 8BE3 00 02 00 0A
  20+ 8BE7 00 19 00 49
  20+ 8BEB FF FF
  21+ 8BED
  22+ 8BED 48 61 72 6D  RankingName1		DB 	"Harmless",0
  22+ 8BF1 6C 65 73 73
  22+ 8BF5 00
  23+ 8BF6 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  23+ 8BFA 6C 79 20 48
  23+ 8BFE 61 72 6D 6C
  23+ 8C02 65 73 73 00
  24+ 8C06 50 6F 6F 72  RankingName3		DB 	"Poor",0
  24+ 8C0A 00
  25+ 8C0B 41 76 65 72  RankingName4		DB 	"Average",0
  25+ 8C0F 61 67 65 00
  26+ 8C13 41 62 6F 76  RankingName5		DB 	"Above Average",0
  26+ 8C17 65 20 41 76
  26+ 8C1B 65 72 61 67
  26+ 8C1F 65 00
  27+ 8C21 43 6F 6D 70  RankingName6		DB 	"Competent",0
  27+ 8C25 65 74 65 6E
  27+ 8C29 74 00
  28+ 8C2B 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  28+ 8C2F 65 72 6F 75
  28+ 8C33 73 00
  29+ 8C35 44 65 61 64  RankingName8		DB 	"Deadly",0
  29+ 8C39 6C 79 00
  30+ 8C3C 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  30+ 8C40 20 45 20 4C
  30+ 8C44 20 49 20 54
  30+ 8C48 20 45 20 2D
  30+ 8C4C 2D 2D 00
  31+ 8C4F 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  31+ 8C53 6C 6F 62 73
  31+ 8C57 67 6F 64 00
  32+ 8C5B 4E 75 74 74  RankingName11		DB 	"Nutter",0
  32+ 8C5F 65 72 00
  33+ 8C62
  34+ 8C62 ED 8B F6 8B  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  34+ 8C66 06 8C 0B 8C
  34+ 8C6A 13 8C 21 8C
  34+ 8C6E 2B 8C 35 8C
  34+ 8C72 3C 8C 4F 8C
  34+ 8C76 5B 8C
  35+ 8C78              RankingNameIdxLen EQU $ - RankingNameIdx
  36+ 8C78
  37+ 8C78
  38+ 8C78              getTableText:
  39+ 8C78              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  40+ 8C78              ; ">Note for ranking first 2 bytes are target rank"
  41+ 8C78 D5           	push	de								; save DE as we will likley need it in caller
  42+ 8C79 ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  43+ 8C7B ED 31        	add		hl,a
  44+ 8C7D 5E           	ld		e,(hl)
  45+ 8C7E 23           	inc		hl
  46+ 8C7F 56           	ld		d,(hl)							; de = indexed address
  47+ 8C80 EB           	ex		de,hl							; flip it to hl
  48+ 8C81 D1           	pop		de								; retrieve de
  49+ 8C82 C9           	ret										; return with hl as start entry
  50+ 8C83
  51+ 8C83
  52+ 8C83              ;               CF      ZF      Result
  53+ 8C83              ;               -----------------------------------
  54+ 8C83              ;               0       0       HL > DE
  55+ 8C83              ;               0       1       HL == DE
  56+ 8C83              ;               1       0       HL < DE
  57+ 8C83              ;               1       1       Impossible
  58+ 8C83              getRankIndex:
  59+ 8C83              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  60+ 8C83              ; ">Note for ranking first 2 bytes are target rank"
  61+ 8C83 7A           	ld		a,d
  62+ 8C84 B3           	or		e
  63+ 8C85 FE 00        	cp		0
  64+ 8C87 C8           	ret		z								; quicks skip for 0 kills
  65+ 8C88 AF           	xor 	a
  66+ 8C89 21 D7 8B     	ld		hl,RankingTable
  67+ 8C8C              .testLoop:
  68+ 8C8C 4E           	ld		c,(hl)
  69+ 8C8D 23           	inc		hl
  70+ 8C8E 46           	ld		b,(hl)							; bc = ranking
  71+ 8C8F E5           	push	hl
  72+ 8C90 60           	ld		h,b
  73+ 8C91 69           	ld		l,c
  74+ 8C92 CD A6 9A     	call	compare16HLDE
  75+ 8C95 38 06        	jr		c,.HLLTDE
  76+ 8C97              .HLGTEDE									; Found the correct rank
  77+ 8C97 E1           	pop		hl
  78+ 8C98 23           	inc		hl								; move to next value
  79+ 8C99 23           	inc		hl
  80+ 8C9A 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  81+ 8C9B 18 EF        	jr		.testLoop
  82+ 8C9D              .HLLTDE:									; HL < Kills so found correct rank
  83+ 8C9D E1           	pop		hl
  84+ 8C9E C9           	ret
  85+ 8C9F
# file closed: ./Tables/text_tables.asm
 599  8C9F                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ 8C9F              ; Could move this into rom area for access as it will be read only
   2+ 8C9F 58 00        WordDummy					DB  "X",0
   3+ 8CA1 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   3+ 8CA5 74 00
   4+ 8CA7 52 69 67 68  WordRight					DB	"Right",0              ;2
   4+ 8CAB 74 00
   5+ 8CAD 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   5+ 8CB1 00
   6+ 8CB2 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   6+ 8CB6 00
   7+ 8CB7 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   7+ 8CBB 65 00
   8+ 8CBD 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   8+ 8CC1 70 65 00
   9+ 8CC4 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
  10+ 8CC8 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
  10+ 8CCC 6F 00
  11+ 8CCE 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  12+ 8CD2 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  12+ 8CD6 00
  13+ 8CD7 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  13+ 8CDB 70 73 00
  14+ 8CDE 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  14+ 8CE2 4D 2E 00
  15+ 8CE5 53 79 73 74  WordSystem          		DB  "System",0             ;13
  15+ 8CE9 65 6D 00
  16+ 8CEC 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  16+ 8CF0 67 79 00
  17+ 8CF3 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  17+ 8CF7 00
  18+ 8CF8 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  18+ 8CFC 72 00
  19+ 8CFE 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  19+ 8D02 65 00
  20+ 8D04 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  20+ 8D08 00
  21+ 8D09 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  21+ 8D0D 61 72 79 00
  22+ 8D11 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  22+ 8D15 6E 67 00
  23+ 8D18 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  23+ 8D1C 6F 6D 00
  24+ 8D1F 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  24+ 8D23 00
  25+ 8D24 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  25+ 8D28 6C 64 00
  26+ 8D2B 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  26+ 8D2F 69 6E 67 00
  27+ 8D33 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  27+ 8D37 75 74 65 72
  27+ 8D3B 73 00
  28+ 8D3D 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  28+ 8D41 72 73 70 61
  28+ 8D45 63 65 00
  29+ 8D48 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  29+ 8D4C 63 74 69 63
  29+ 8D50 00
  30+ 8D51 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  30+ 8D55 61 00
  31+ 8D57 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  31+ 8D5B 6E 00
  32+ 8D5D 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  32+ 8D61 6E 64 65 72
  32+ 8D65 00
  33+ 8D66 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  33+ 8D6A 74 69 76 65
  33+ 8D6E 00
  34+ 8D6F 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  34+ 8D73 00
  35+ 8D74 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  35+ 8D78 69 6C 65 73
  35+ 8D7C 00
  36+ 8D7D 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  36+ 8D81 6F 61 63 74
  36+ 8D85 69 76 65 73
  36+ 8D89 00
  37+ 8D8A 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  37+ 8D8E 65 73 00
  38+ 8D91 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  38+ 8D95 6F 72 2F 57
  38+ 8D99 69 6E 65 73
  38+ 8D9D 00
  39+ 8D9E 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  39+ 8DA2 72 69 65 73
  39+ 8DA6 00
  40+ 8DA7 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  40+ 8DAB 6F 74 69 63
  40+ 8DAF 73 00
  41+ 8DB1 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  41+ 8DB5 69 6E 65 72
  41+ 8DB9 79 00
  42+ 8DBB 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  42+ 8DBF 79 73 00
  43+ 8DC2 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  43+ 8DC6 61 72 6D 73
  43+ 8DCA 00
  44+ 8DCB 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  44+ 8DCF 00
  45+ 8DD0 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  45+ 8DD4 72 61 6C 73
  45+ 8DD8 00
  46+ 8DD9 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  46+ 8DDD 00
  47+ 8DDE 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  47+ 8DE2 69 6E 75 6D
  47+ 8DE6 00
  48+ 8DE7 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  48+ 8DEB 53 74 6F 6E
  48+ 8DEF 65 73 00
  49+ 8DF2 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  49+ 8DF6 6E 20 49 74
  49+ 8DFA 65 6D 73 00
  50+ 8DFE 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  50+ 8E02 65 73 00
  51+ 8E05 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  51+ 8E09 67 72 61 6D
  51+ 8E0D 73 00
  52+ 8E0F 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  52+ 8E13 73 00
  53+ 8E15 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  53+ 8E19 74 00
  54+ 8E1B 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  54+ 8E1F 65 00
  55+ 8E21 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  55+ 8E25 74 00
  56+ 8E27 44 61 74 61  WordData					DB	"Data",0			   ;54
  56+ 8E2B 00
  57+ 8E2C 4F 6E 00     WordOn						DB  "On",0                 ;55
  58+ 8E2F 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  58+ 8E33 61 6E 63 65
  58+ 8E37 00
  59+ 8E38 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  59+ 8E3C 6F 6D 79 00
  60+ 8E40 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  60+ 8E44 72 6E 6D 65
  60+ 8E48 6E 74 00
  61+ 8E4B 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  61+ 8E4F 4C 65 76 65
  61+ 8E53 6C 00
  62+ 8E55 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  62+ 8E59 6C 61 74 69
  62+ 8E5D 6F 6E 00
  63+ 8E60 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  63+ 8E64 69 6F 6E 00
  64+ 8E68 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  64+ 8E6C 69 6F 6E 00
  65+ 8E70 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  65+ 8E74 73 00
  66+ 8E76 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  66+ 8E7A 75 63 74 69
  66+ 8E7E 76 69 74 79
  66+ 8E82 00
  67+ 8E83 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  67+ 8E87 61 67 65 00
  68+ 8E8B 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  68+ 8E8F 75 73 00
  69+ 8E92 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  70+ 8E95 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  70+ 8E99 00
  71+ 8E9A 52 69 63 68  WordRich					DB  "Rich",0               ;69
  71+ 8E9E 00
  72+ 8E9F 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  73+ 8EA3 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  73+ 8EA7 6C 79 00
  74+ 8EAA 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  74+ 8EAE 00
  75+ 8EAF 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  75+ 8EB3 73 74 72 69
  75+ 8EB7 61 6C 00
  76+ 8EBA 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  76+ 8EBE 63 75 6C 74
  76+ 8EC2 75 72 61 6C
  76+ 8EC6 00
  77+ 8EC7 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  77+ 8ECB 63 68 79 00
  78+ 8ECF 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  78+ 8ED3 61 6C 00
  79+ 8ED6 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  79+ 8EDA 69 2D 47 6F
  79+ 8EDE 76 65 72 6E
  79+ 8EE2 6D 65 6E 74
  79+ 8EE6 00
  80+ 8EE7 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  80+ 8EEB 61 74 6F 72
  80+ 8EEF 73 68 69 70
  80+ 8EF3 00
  81+ 8EF4 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  81+ 8EF8 75 6E 69 73
  81+ 8EFC 74 00
  82+ 8EFE 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  82+ 8F02 65 64 65 72
  82+ 8F06 61 63 79 00
  83+ 8F0A 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  83+ 8F0E 63 72 61 63
  83+ 8F12 79 00
  84+ 8F14 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  84+ 8F18 6F 72 61 74
  84+ 8F1C 65 20 53 74
  84+ 8F20 61 74 65 00
  85+ 8F24 53 74 61 74  WordState 					DB  "State",0              ;83
  85+ 8F28 65 00
  86+ 8F2A 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  86+ 8F2E 74 00
  87+ 8F30 59 65 61 72  WordYears 					DB  "Years",0              ;85
  87+ 8F34 73 00
  88+ 8F36 30 00        Word0						DB  "0",0				   ;86
  89+ 8F38 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  89+ 8F3C 65 74 00
  90+ 8F3F 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  90+ 8F43 65 73 00
  91+ 8F46 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  91+ 8F4A 75 63 74 00
  92+ 8F4E 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  93+ 8F52 50 72 69 63  WordPrice					DB  "Price",0              ;91
  93+ 8F56 65 00
  94+ 8F58 46 6F 72 00  WordFor                     DB  "For",0                ;92
  95+ 8F5C 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  95+ 8F60 00
  96+ 8F61 74 00        Wordt						DB  "t",0                  ;94
  97+ 8F63 6B 67 00     Wordkg						DB  "kg",0                 ;95
  98+ 8F66 67 00        Wordg						DB  "g",0                  ;96
  99+ 8F68 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  99+ 8F6C 69 74 69 74
  99+ 8F70 79 00
 100+ 8F72 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 101+ 8F76 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 101+ 8F7A 6B 00
 102+ 8F7C 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 102+ 8F80 70 00
 103+ 8F82 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 103+ 8F86 00
 104+ 8F87              ;WordMissile                 DB  "Missile",0            ;102
 105+ 8F87 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 105+ 8F8B 72 64 72 69
 105+ 8F8F 76 65 00
 106+ 8F92 4D 69 6C 69  WordMilitary                DB  "Military",0
 106+ 8F96 74 61 72 79
 106+ 8F9A 00
 107+ 8F9B 41 64 64 65  WordAdder                   DB  "Adder",0
 107+ 8F9F 72 00
 108+ 8FA1 41 6E 61 63  WordAnaconda                DB  "Anaconda",0
 108+ 8FA5 6F 6E 64 61
 108+ 8FA9 00
 109+ 8FAA 41 73 70 5F  WordAsp_Mk_2                DB  "Asp_Mk_2",0
 109+ 8FAE 4D 6B 5F 32
 109+ 8FB2 00
 110+ 8FB3 42 6F 61 00  WordBoa                     DB  "Boa",0
 111+ 8FB7 43 61 72 67  WordCargoType5              DB  "CargoType5",0
 111+ 8FBB 6F 54 79 70
 111+ 8FBF 65 35 00
 112+ 8FC2 42 6F 75 6C  WordBoulder                 DB  "Boulder",0
 112+ 8FC6 64 65 72 00
 113+ 8FCA 41 73 74 65  WordAsteroid                DB  "Asteroid",0
 113+ 8FCE 72 6F 69 64
 113+ 8FD2 00
 114+ 8FD3 42 75 73 68  WordBushmaster              DB  "Bushmaster",0
 114+ 8FD7 6D 61 73 74
 114+ 8FDB 65 72 00
 115+ 8FDE 43 68 61 6D  WordChameleon               DB  "Chameleon",0
 115+ 8FE2 65 6C 65 6F
 115+ 8FE6 6E 00
 116+ 8FE8 43 6F 62 72  WordCobraMk3                DB  "CobraMk3",0
 116+ 8FEC 61 4D 6B 33
 116+ 8FF0 00
 117+ 8FF1 43 6F 62 72  WordCobra_Mk_1              DB  "Cobra_Mk_1",0
 117+ 8FF5 61 5F 4D 6B
 117+ 8FF9 5F 31 00
 118+ 8FFC 43 6F 62 72  WordCobra_Mk_3_P            DB  "Cobra_Mk_3_P",0
 118+ 9000 61 5F 4D 6B
 118+ 9004 5F 33 5F 50
 118+ 9008 00
 119+ 9009 43 6F 6E 73  WordConstrictor             DB  "Constrictor",0
 119+ 900D 74 72 69 63
 119+ 9011 74 6F 72 00
 120+ 9015 43 6F 72 69  WordCoriolis                DB  "Coriolis",0
 120+ 9019 6F 6C 69 73
 120+ 901D 00
 121+ 901E 43 6F 75 67  WordCougar                  DB  "Cougar",0
 121+ 9022 61 72 00
 122+ 9025 44 6F 64 6F  WordDodo                    DB  "Dodo",0
 122+ 9029 00
 123+ 902A 44 72 61 67  WordDragon                  DB  "Dragon",0
 123+ 902E 6F 6E 00
 124+ 9031 45 73 63 61  WordEscape_Pod              DB  "Escape_Pod",0
 124+ 9035 70 65 5F 50
 124+ 9039 6F 64 00
 125+ 903C 46 65 72 5F  WordFer_De_Lance            DB  "Fer_De_Lance",0
 125+ 9040 44 65 5F 4C
 125+ 9044 61 6E 63 65
 125+ 9048 00
 126+ 9049 47 65 63 6B  WordGecko                   DB  "Gecko",0
 126+ 904D 6F 00
 127+ 904F 47 68 61 76  WordGhavial                 DB  "Ghavial",0
 127+ 9053 69 61 6C 00
 128+ 9057 49 67 75 61  WordIguana                  DB  "Iguana",0
 128+ 905B 6E 61 00
 129+ 905E 4B 72 61 69  WordKrait                   DB  "Krait",0
 129+ 9062 74 00
 130+ 9064 4C 6F 67 6F  WordLogo                    DB  "Logo",0
 130+ 9068 00
 131+ 9069 4D 61 6D 62  WordMamba                   DB  "Mamba",0
 131+ 906D 61 00
 132+ 906F 4D 69 73 73  WordMissile                 DB  "Missile",0
 132+ 9073 69 6C 65 00
 133+ 9077 4D 6F 6E 69  WordMonitor                 DB  "Monitor",0
 133+ 907B 74 6F 72 00
 134+ 907F 4D 6F 72 61  WordMoray                   DB  "Moray",0
 134+ 9083 79 00
 135+ 9085 4F 70 68 69  WordOphidian                DB  "Ophidian",0
 135+ 9089 64 69 61 6E
 135+ 908D 00
 136+ 908E 50 6C 61 74  WordPlate                   DB  "Plate",0
 136+ 9092 65 00
 137+ 9094 50 79 74 68  WordPython                  DB  "Python",0
 137+ 9098 6F 6E 00
 138+ 909B 50 79 74 68  WordPython_P                DB  "Python_P",0
 138+ 909F 6F 6E 5F 50
 138+ 90A3 00
 139+ 90A4 52 6F 63 6B  WordRock_Hermit             DB  "Rock_Hermit",0
 139+ 90A8 5F 48 65 72
 139+ 90AC 6D 69 74 00
 140+ 90B0 53 68 75 74  WordShuttleType9            DB  "ShuttleType9",0
 140+ 90B4 74 6C 65 54
 140+ 90B8 79 70 65 39
 140+ 90BC 00
 141+ 90BD 53 68 75 74  WordShuttle_Mk_2            DB  "Shuttle_Mk_2",0
 141+ 90C1 74 6C 65 5F
 141+ 90C5 4D 6B 5F 32
 141+ 90C9 00
 142+ 90CA 53 69 64 65  WordSidewinder              DB  "Sidewinder",0
 142+ 90CE 77 69 6E 64
 142+ 90D2 65 72 00
 143+ 90D5 53 70 6C 69  WordSplinter                DB  "Splinter",0
 143+ 90D9 6E 74 65 72
 143+ 90DD 00
 144+ 90DE 54 65 73 74  WordTestVector              DB  "TestVector",0
 144+ 90E2 56 65 63 74
 144+ 90E6 6F 72 00
 145+ 90E9 54 68 61 72  WordThargoid                DB  "Thargoid",0
 145+ 90ED 67 6F 69 64
 145+ 90F1 00
 146+ 90F2 54 68 61 72  WordThargon                 DB  "Thargon",0
 146+ 90F6 67 6F 6E 00
 147+ 90FA 54 72 61 6E  WordTransportType10         DB  "TransportType10",0
 147+ 90FE 73 70 6F 72
 147+ 9102 74 54 79 70
 147+ 9106 65 31 30 00
 148+ 910A 56 69 70 65  WordViper                   DB  "Viper",0
 148+ 910E 72 00
 149+ 9110 57 6F 72 6D  WordWorm                    DB  "Worm",0
 149+ 9114 00
 150+ 9115 52 61 74 74  WordRattler                 DB  "Rattler",0
 150+ 9119 6C 65 72 00
 151+ 911D
 152+ 911D 9F 8C A1 8C  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 152+ 9121 A7 8C AD 8C
 153+ 9125 B2 8C B7 8C  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 153+ 9129 BD 8C C4 8C
 154+ 912D C8 8C CE 8C  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 154+ 9131 D2 8C D7 8C
 155+ 9135 DE 8C E5 8C  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 155+ 9139 EC 8C F3 8C
 156+ 913D F8 8C FE 8C  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 156+ 9141 04 8D 09 8D
 157+ 9145 11 8D 18 8D  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 157+ 9149 1F 8D 24 8D
 158+ 914D 2B 8D 33 8D  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 158+ 9151 3D 8D 48 8D
 159+ 9155 51 8D 57 8D  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 159+ 9159 5D 8D 66 8D
 160+ 915D 6F 8D 74 8D  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 160+ 9161 7D 8D 8A 8D
 161+ 9165 91 8D 9E 8D  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 161+ 9169 A7 8D B1 8D
 162+ 916D BB 8D C2 8D  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 162+ 9171 CB 8D D0 8D
 163+ 9175 D9 8D DE 8D  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 163+ 9179 E7 8D F2 8D
 164+ 917D FE 8D 05 8E  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 164+ 9181 0F 8E 15 8E
 165+ 9185 1B 8E 21 8E  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 165+ 9189 27 8E 2C 8E
 166+ 918D 2F 8E 38 8E  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 166+ 9191 40 8E 4B 8E
 167+ 9195 55 8E 60 8E  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 167+ 9199 68 8E 70 8E
 168+ 919D 76 8E 83 8E  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 168+ 91A1 8B 8E 92 8E
 169+ 91A5 95 8E        					DW  WordMCR																	;68
 170+ 91A7 9A 8E 9F 8E  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 170+ 91AB A3 8E AA 8E
 171+ 91AF AF 8E BA 8E                      DW  WordIndustrial,     WordAgricultural									;73
 172+ 91B3 C7 8E CF 8E  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 172+ 91B7 D6 8E E7 8E
 173+ 91BB F4 8E FE 8E                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 173+ 91BF 0A 8F 14 8F
 174+ 91C3 24 8F 2A 8F  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 174+ 91C7 30 8F 36 8F
 175+ 91CB 38 8F 3F 8F  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 175+ 91CF 46 8F 4E 8F
 176+ 91D3 52 8F 58 8F                      DW  WordPrice,          WordFor,          WordSale                          ;91
 176+ 91D7 5C 8F
 177+ 91D9 61 8F 63 8F  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 177+ 91DD 66 8F
 178+ 91DF 68 8F 72 8F  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 178+ 91E3 76 8F 7C 8F
 179+ 91E7 82 8F 6F 90                      DW  WordShip,           WordMissile       ; 101
 180+ 91EB 9B 8F A1 8F  WordIdxShipNames:   DW  WordAdder,          WordAnaconda,     WordAsp_Mk_2,        WordBoa
 180+ 91EF AA 8F B3 8F
 181+ 91F3 B7 8F C2 8F                      DW  WordCargoType5,     WordBoulder,      WordAsteroid,        WordBushmaster
 181+ 91F7 CA 8F D3 8F
 182+ 91FB DE 8F E8 8F                      DW  WordChameleon,      WordCobraMk3,     WordCobra_Mk_1,      WordCobra_Mk_3_P
 182+ 91FF F1 8F FC 8F
 183+ 9203 09 90 15 90                      DW  WordConstrictor,    WordCoriolis,     WordCougar,          WordDodo
 183+ 9207 1E 90 25 90
 184+ 920B 2A 90 31 90                      DW  WordDragon,         WordEscape_Pod,   WordFer_De_Lance,    WordGecko
 184+ 920F 3C 90 49 90
 185+ 9213 4F 90 57 90                      DW  WordGhavial,        WordIguana,       WordKrait,           WordLogo
 185+ 9217 5E 90 64 90
 186+ 921B 69 90 6F 90                      DW  WordMamba,          WordMissile,      WordMonitor,         WordMoray
 186+ 921F 77 90 7F 90
 187+ 9223 85 90 8E 90                      DW  WordOphidian,       WordPlate,        WordPython,          WordPython_P
 187+ 9227 94 90 9B 90
 188+ 922B A4 90 B0 90                      DW  WordRock_Hermit,    WordShuttleType9, WordShuttle_Mk_2,    WordSidewinder
 188+ 922F BD 90 CA 90
 189+ 9233 D5 90 DE 90                      DW  WordSplinter,       WordTestVector,   WordThargoid,        WordThargon
 189+ 9237 E9 90 F2 90
 190+ 923B FA 90 0A 91                      DW  WordTransportType10,WordViper,        WordWorm,            WordRattler
 190+ 923F 10 91 15 91
 191+ 9243              ; Phrases
 192+ 9243 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 193+ 9247 06 07 00     TextEscapePod				DB	6,7,0            ;1
 194+ 924A 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 195+ 924D 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 196+ 9250 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 197+ 9253 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 198+ 9256 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 199+ 9259 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 200+ 925C 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 201+ 9260 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 202+ 9264 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 203+ 9268 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 204+ 926C 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 205+ 9270 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 206+ 9273 36 37 00     TextDataOn					DB	54,55,0          ;14
 207+ 9276 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 208+ 9279 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 209+ 927C 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 210+ 927F 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 211+ 9282 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 212+ 9285 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 213+ 9288 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 214+ 928B 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 215+ 928E 54 55 00     TextLightYears				DB  84,85,0			 ;23
 216+ 9291 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 217+ 9295 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 218+ 9298 64 65        TextEquipShip               DB  100,101          ;26
 219+ 929A
 220+ 929A 00           TextDummy					DB  0
 221+ 929B
 222+ 929B 43 92 47 92  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 222+ 929F 4A 92
 223+ 92A1 4D 92 50 92  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 223+ 92A5 53 92
 224+ 92A7 56 92 59 92  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 225+ 92AB 5C 92 60 92  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 225+ 92AF 64 92 68 92
 226+ 92B3 6C 92 70 92  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 226+ 92B7 73 92
 227+ 92B9 76 92 79 92  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 227+ 92BD 7F 92 7C 92
 227+ 92C1 88 92 82 92
 227+ 92C5 85 92 8B 92
 228+ 92C9 8E 92        					DW  TextLightYears		                                            ; 21 23
 229+ 92CB 91 92 95 92  					DW  Text0LightYears, TextMarketPrices
 230+ 92CF 9A 92        					DW  TextDummy;  25
 231+ 92D1 00 00 00...  TextBuffer			DS	33
 232+ 92F2
 233+ 92F2              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 234+ 92F2              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 235+ 92F2
 236+ 92F2              CapitaliseString:
 237+ 92F2              ; ">CapitaliseString hl = address"
 238+ 92F2              .CapLoop:
 239+ 92F2 23           	inc		hl
 240+ 92F3 7E           	ld		a,(hl)
 241+ 92F4 FE 00        	cp		0
 242+ 92F6 C8           	ret		z
 243+ 92F7 FE 5B        	cp		'Z'+1
 244+ 92F9 30 F7        	jr		nc,.CapLoop
 245+ 92FB FE 41        	cp		'A'
 246+ 92FD 38 F3        	jr		c,.CapLoop
 247+ 92FF              .LowerCase:
 248+ 92FF C6 20        	add		a,'a'-'A'
 249+ 9301 77           	ld		(hl),a
 250+ 9302 18 EE        	jr		.CapLoop
 251+ 9304
 252+ 9304 21 EB 91     ShipIndexToAddress      ld      hl,WordIdxShipNames
 253+ 9307 C3 0D 93                             jp      WordLookup
 254+ 930A
 255+ 930A 21 1D 91     WordIndexToAddress:     ld		hl,WordIdx
 256+ 930D ED 31        WordLookup:             add		hl,a
 257+ 930F ED 31                                add		hl,a
 258+ 9311 D5                                   push	de
 259+ 9312 5E                                   ld		e,(hl)
 260+ 9313 23                                   inc		hl
 261+ 9314 56                                   ld		d,(hl)
 262+ 9315 EB                                   ex		de,hl
 263+ 9316 D1                                   pop		de
 264+ 9317 C9                                   ret
 265+ 9318
 266+ 9318
 267+ 9318              expandTokenToString:
 268+ 9318              ; ">expandTokenToString a = texttoken"
 269+ 9318 21 9B 92     	ld		hl,TextTokens
 270+ 931B CD 78 8C     	call	getTableText
 271+ 931E 11 D1 92     	ld		de,TextBuffer
 272+ 9321              .ReadLoop:
 273+ 9321 7E           	ld		a,(hl)
 274+ 9322 FE 00        	cp		0
 275+ 9324 28 1B        	jr		z,.ReadDone
 276+ 9326 E5           	push	hl
 277+ 9327 D5           	push	de
 278+ 9328 21 1D 91     	ld		hl,WordIdx
 279+ 932B CD 78 8C     	call	getTableText
 280+ 932E D1           	pop		de
 281+ 932F              .WordExpandLoop:
 282+ 932F 7E           	ld		a,(hl)
 283+ 9330 FE 00        	cp		0
 284+ 9332 28 05        	jr		z,.AddSpace
 285+ 9334              ;.GetChar:
 286+ 9334 12           	ld		(de),a
 287+ 9335 13           	inc		de
 288+ 9336 23           	inc		hl
 289+ 9337 18 F6        	jr		.WordExpandLoop
 290+ 9339              .AddSpace:
 291+ 9339 3E 20        	ld		a,' '
 292+ 933B 12           	ld		(de),a
 293+ 933C 13           	inc		de
 294+ 933D E1           	pop		hl
 295+ 933E 23           	inc		hl
 296+ 933F 18 E0        	jr		.ReadLoop
 297+ 9341              .ReadDone:
 298+ 9341 1B           	dec		de
 299+ 9342 AF           	xor		a
 300+ 9343 12           	ld		(de),a
 301+ 9344 C9           	ret
 302+ 9345
# file closed: ./Tables/dictionary.asm
 600  9345                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ 9345 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ 9349 53 45 49 54
   1+ 934D 49 4C 45 54
   1+ 9351 53 54 4F 4E
   1+ 9355 4C 4F 4E 55
   1+ 9359 54 48 4E 4F
   2+ 935D 41 4C 4C     name_digrams2   DB "ALL"
   3+ 9360 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ 9364 45 5A 41 43
   3+ 9368 45 42 49 53
   3+ 936C 4F 55 53 45
   3+ 9370 53 41 52 4D
   3+ 9374 41 49 4E 44
   3+ 9378 49 52 45 41
   4+ 937C 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ 9380 54 45 4E 42
   4+ 9384 45 52 41 4C
   4+ 9388 41 56 45 54
   4+ 938C 49 45 44 4F
   4+ 9390 52 51 55 41
   4+ 9394 4E 54 45 49
   4+ 9398 53 52 49 4F
   4+ 939C 4E
   5+ 939D
   6+ 939D              ; TODO Moveinto galaxy data module
   7+ 939D 00 00 00...  name_expanded	DS 32
   8+ 93BD 00           				DB 0
   9+ 93BE
  10+ 93BE
  11+ 93BE
  12+ 93BE              NamingLoop:
  13+ 93BE 3A 9A 84     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ 93C1 E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ 93C3 FE 00        	cp		0					; 0 = skip 2 chars
  16+ 93C5 28 12        	jr		z,.SkipPhrase
  17+ 93C7 C6 0C        	add		a,12
  18+ 93C9 CB 27        	sla		a					; phrase = (a+12)*2
  19+ 93CB 21 45 93     	ld		hl,name_digrams
  20+ 93CE ED 31        	add		hl,a
  21+ 93D0 ED A0        	ldi
  22+ 93D2 7E           	ld		a,(hl)
  23+ 93D3 FE 3F        	cp		'?'
  24+ 93D5 28 02        	jr		z,.SkipPhrase
  25+ 93D7              .AddExtra:
  26+ 93D7 ED A0        	ldi
  27+ 93D9              .SkipPhrase:
  28+ 93D9 D5           	push	de
  29+ 93DA CD 16 8A     	call	working_seed
  30+ 93DD D1           	pop		de
  31+ 93DE C9           	ret
  32+ 93DF
  33+ 93DF              ;GetDigramGalaxySeed:
  34+ 93DF              ;	call	copy_galaxy_to_working
  35+ 93DF              ;	jr		GetDigramWorkingSeed
  36+ 93DF              ;GetDigramSystemSeed:
  37+ 93DF              ;	call	copy_system_to_working
  38+ 93DF              ;GetDigramWorkingSeed:
  39+ 93DF              ;; ">GetDigram a = digram seed"
  40+ 93DF              ;	ld		de,name_expanded
  41+ 93DF              ;	ld		b,3
  42+ 93DF              ;	ld		a,(WorkingSeeds)
  43+ 93DF              ;	and		$40
  44+ 93DF              ;	jr		z,.SmallSizeName
  45+ 93DF              ;.LargeSizeName:
  46+ 93DF              ;	call	NamingLoop
  47+ 93DF              ;.SmallSizeName:
  48+ 93DF              ;	call	NamingLoop
  49+ 93DF              ;	call	NamingLoop
  50+ 93DF              ;	call	NamingLoop
  51+ 93DF              ;.DoneName:
  52+ 93DF              ;	ex		de,hl
  53+ 93DF              ;	ld		(hl),0
  54+ 93DF              ;	ex		de,hl
  55+ 93DF              ;	ret
  56+ 93DF
  57+ 93DF
  58+ 93DF
  59+ 93DF              ;GetDigramWorkingSeed:
  60+ 93DF              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ 93DF              ;	ld		b,5					; working seed
  62+ 93DF              ;	ld		de,name_expanded
  63+ 93DF              ;.ExpansionLoop:
  64+ 93DF              ;	push	bc
  65+ 93DF              ;	ld		hl,WorkingSeeds
  66+ 93DF              ;	ld		a,b
  67+ 93DF              ;	add		hl,a
  68+ 93DF              ;	ld		a,(hl)	; a = first byte of name seed
  69+ 93DF              ;	and 	$1F					; Keep bottom 5 bits only
  70+ 93DF              ;	cp		0					; 0 = skip 2 chars
  71+ 93DF              ;	jr		z,.SkipPhrase
  72+ 93DF              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ 93DF              ;	call	TT27
  74+ 93DF              ;.SkipPhrase:
  75+ 93DF              ;	push	de
  76+ 93DF              ;	call	next_working_seed
  77+ 93DF              ;	pop		de
  78+ 93DF              ;	pop		bc
  79+ 93DF              ;	djnz	GetDigramWorkingSeed
  80+ 93DF              ;.DoneName:
  81+ 93DF              ;	ex		de,hl
  82+ 93DF              ;	ld		(hl),0
  83+ 93DF              ;	ex		de,hl
  84+ 93DF              ;	ret
  85+ 93DF              ;
  86+ 93DF              ;ExpandToken:
  87+ 93DF              ;	DE = target
  88+ 93DF              ;	a = token
  89+ 93DF              ;
  90+ 93DF              ;PlanetDigram:
  91+ 93DF              ;	cp		&A0							; >- 160
  92+ 93DF              ;	jr		c,MorePage4
  93+ 93DF              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ 93DF              ;	asl		2							; Multiply by 2
  95+ 93DF              ;	ld		hl, name_digrams2
  96+ 93DF              ;	add		hl,a
  97+ 93DF              ;	ld		a,(hl)
  98+ 93DF              ;	call	ProcessTextToken
  99+ 93DF              ;	inc		hl
 100+ 93DF              ;	ld		a,(hl)
 101+ 93DF              ;	cp		'?'
 102+ 93DF              ;	ret		z
 103+ 93DF              ;	call	ProcessTextToken
 104+ 93DF              ;	ret
 105+ 93DF              ;MorePage4:
 106+ 93DF              ;	sub		$A0
 107+ 93DF              ;ExtraTokenCheck:
 108+ 93DF              ;	push	de							; save target address
 109+ 93DF              ;	push	bc
 110+ 93DF              ;	ld		b,a
 111+ 93DF              ;	ld		hl,varV
 112+ 93DF              ;	ld		(VarV),0400
 113+ 93DF              ;	ld		(varV),a
 114+ 93DF              ;	ld
 115+ 93DF              ;
 116+ 93DF              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ 93DF              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ 93DF              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ 93DF              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ 93DF              ;0A                      ASL A		      \ *= 2
 121+ 93DF              ;A8                      TAY 		      \ digram index = 0to62
 122+ 93DF              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ 93DF              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ 93DF              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ 93DF              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ 93DF              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ 93DF              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ 93DF              ;
 129+ 93DF              ;	.TT47	\ more page4, subtract #160
 130+ 93DF              ;E9 A0                   SBC #&A0	\ -= 160
 131+ 93DF              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ 93DF              ;AA                      TAX 		\ copy of word index
 133+ 93DF              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ 93DF              ;85 22                   STA &22		\ V
 135+ 93DF              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ 93DF              ;85 23                   STA &23		\ V+1
 137+ 93DF              ;A0 00                   LDY #0
 138+ 93DF              ;8A                      TXA 		\ token = word index
 139+ 93DF              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ 93DF              ;	.TT51	\ counters Y letter, X token
 141+ 93DF              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ 93DF              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ 93DF              ;C8                      INY 		\ letter count
 144+ 93DF              ;D0 F9                   BNE TT51	\ loop Y
 145+ 93DF              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ 93DF              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ 93DF              ;	.TT49	\ word ended
 148+ 93DF              ;C8                      INY
 149+ 93DF              ;D0 02                   BNE TT59    	\ next word
 150+ 93DF              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ 93DF              ;	.TT59	\ next word
 152+ 93DF              ;CA                      DEX 		\ token count
 153+ 93DF              ;D0 ED                   BNE TT51	\ loop X token
 154+ 93DF              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ 93DF              ;98                      TYA
 156+ 93DF              ;48                      PHA 		\ store Yindex
 157+ 93DF              ;A5 23                   LDA &23		\ V+1
 158+ 93DF              ;48                      PHA 		\ correct pointer hi
 159+ 93DF              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ 93DF              ;49 23                   EOR #&23	\ decode '#'
 161+ 93DF              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ 93DF              ;68                      PLA 		\ restore this depth's Vhi
 163+ 93DF              ;85 23                   STA &23		\ V+1
 164+ 93DF              ;68                      PLA
 165+ 93DF              ;A8                      TAY 		\ restore this depth's Yindex
 166+ 93DF              ;C8                      INY 		\ next letter
 167+ 93DF              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ 93DF              ;E6 23                   INC &23		\ V+1
 169+ 93DF              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ 93DF              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ 93DF              ;	.TT48 	\ rts
 172+ 93DF              ;60                      RTS 		\ end of flight token printing TT27
 173+ 93DF              ;
 174+ 93DF              ;
 175+ 93DF              ;
 176+ 93DF              ;
 177+ 93DF              ;
 178+ 93DF              ;
 179+ 93DF              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ 93DF              ;;AA                      TAX		\ copy token to count down
 181+ 93DF              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ 93DF              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ 93DF              ;CA                      DEX
 184+ 93DF              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ 93DF              ;CA                      DEX
 186+ 93DF              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ 93DF              ;CA                      DEX
 188+ 93DF              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ 93DF              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ 93DF              ;CA                      DEX
 191+ 93DF              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ 93DF              ;CA                      DEX
 193+ 93DF              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ 93DF              ;CA                      DEX
 195+ 93DF              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ 93DF              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ 93DF              ;85 72                   STA &72	 	\ QQ17
 198+ 93DF              ;60                      RTS
 199+ 93DF              ;CA                      DEX 		\ skip Acc ==7
 200+ 93DF              ;CA                      DEX
 201+ 93DF              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ 93DF              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ 93DF              ;60                      RTS
 204+ 93DF              ;CA                      DEX 		\ continue 9to127 tokens
 205+ 93DF              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ 93DF              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ 93DF              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ 93DF              ;C9 0E                   CMP #14		\ < 14 ?
 209+ 93DF              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ 93DF              ;C9 20                   CMP #32		\ < 32 ?
 211+ 93DF              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ 93DF              ;		\ Token  < 14 or > 31
 213+ 93DF              ;A6 72                   LDX &72	 	\ QQ17
 214+ 93DF              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ 93DF              ;30 11                   BMI TT41 	\ if bit7 set
 216+ 93DF              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ 93DF              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ 93DF              ;	.TT42	\ Uppercase to lowercase
 219+ 93DF              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ 93DF              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ 93DF              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ 93DF              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ 93DF              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ 93DF              ;	.TT44	\ print character as is with TT26
 225+ 93DF              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ 93DF              ;
 227+ 93DF              ;	.TT41	\ QQ17 bit7 set
 228+ 93DF              ;24 72                   BIT &72		\ QQ17
 229+ 93DF              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ 93DF              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ 93DF              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ 93DF              ;48                      PHA 		\ else store token Acc
 233+ 93DF              ;8A                      TXA 		\ QQ17 copy
 234+ 93DF              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ 93DF              ;85 72                   STA &72	 	\ QQ17
 236+ 93DF              ;68                      PLA 		\ restore token
 237+ 93DF              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ 93DF              ;
 239+ 93DF              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ 93DF              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ 93DF              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ 93DF              ;
 243+ 93DF              ;	.crlf	\ Acc == 9,  colon on right
 244+ 93DF              ;A9 15                   LDA #21		\ on right
 245+ 93DF              ;85 2C                   STA &2C		\ XC
 246+ 93DF              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ 93DF              ;
 248+ 93DF              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ 93DF              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ 93DF              ;F0 63                   BEQ TT48	\ rts
 251+ 93DF              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ 93DF              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ 93DF              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ 93DF              ;48                      PHA 		\ push token
 255+ 93DF              ;8A                      TXA 		\ QQ17 copy
 256+ 93DF              ;29 BF                   AND #&BF	\ clear bit6
 257+ 93DF              ;85 72                   STA &72	 	\ QQ17
 258+ 93DF              ;68                      PLA 		\ pull token
 259+ 93DF              ;	.TT74	\ TT26, print character.
 260+ 93DF              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ 93DF              ;
 262+ 93DF              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ 93DF              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ 93DF              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ 93DF              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ 93DF              ;0A                      ASL A		      \ *= 2
 267+ 93DF              ;A8                      TAY 		      \ digram index = 0to62
 268+ 93DF              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ 93DF              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ 93DF              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ 93DF              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ 93DF              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ 93DF              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ 93DF              ;
 275+ 93DF              ;	.TT47	\ more page4, subtract #160
 276+ 93DF              ;E9 A0                   SBC #&A0	\ -= 160
 277+ 93DF              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ 93DF              ;AA                      TAX 		\ copy of word index
 279+ 93DF              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ 93DF              ;85 22                   STA &22		\ V
 281+ 93DF              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ 93DF              ;85 23                   STA &23		\ V+1
 283+ 93DF              ;A0 00                   LDY #0
 284+ 93DF              ;8A                      TXA 		\ token = word index
 285+ 93DF              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ 93DF              ;	.TT51	\ counters Y letter, X token
 287+ 93DF              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ 93DF              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ 93DF              ;C8                      INY 		\ letter count
 290+ 93DF              ;D0 F9                   BNE TT51	\ loop Y
 291+ 93DF              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ 93DF              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ 93DF              ;	.TT49	\ word ended
 294+ 93DF              ;C8                      INY
 295+ 93DF              ;D0 02                   BNE TT59    	\ next word
 296+ 93DF              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ 93DF              ;	.TT59	\ next word
 298+ 93DF              ;CA                      DEX 		\ token count
 299+ 93DF              ;D0 ED                   BNE TT51	\ loop X token
 300+ 93DF              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ 93DF              ;98                      TYA
 302+ 93DF              ;48                      PHA 		\ store Yindex
 303+ 93DF              ;A5 23                   LDA &23		\ V+1
 304+ 93DF              ;48                      PHA 		\ correct pointer hi
 305+ 93DF              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ 93DF              ;49 23                   EOR #&23	\ decode '#'
 307+ 93DF              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ 93DF              ;68                      PLA 		\ restore this depth's Vhi
 309+ 93DF              ;85 23                   STA &23		\ V+1
 310+ 93DF              ;68                      PLA
 311+ 93DF              ;A8                      TAY 		\ restore this depth's Yindex
 312+ 93DF              ;C8                      INY 		\ next letter
 313+ 93DF              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ 93DF              ;E6 23                   INC &23		\ V+1
 315+ 93DF              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ 93DF              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ 93DF              ;	.TT48 	\ rts
 318+ 93DF              ;60                      RTS 		\ end of flight token printing TT27
 319+ 93DF              ;
 320+ 93DF              ;
 321+ 93DF              ;
# file closed: ./Tables/name_digrams.asm
 601  93DF              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
 602  93DF
 603  93DF              ; Include all maths libraries to test assembly
 604  93DF
 605  93DF              ;;    INCLUDE "./Maths/addhldesigned.asm"
 606  93DF                  INCLUDE "./Maths/asm_add.asm"
# file opened: ./Maths/asm_add.asm
   1+ 93DF              ;; calcs BHB + CDE where B and C are signs and may be 24 bit
   2+ 93DF              ;; result HL with A as sign
   3+ 93DF              ;; special handling if result is zero forcign sign bit to be zero
   4+ 93DF
   5+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLSAHLEquBHLaddCDE:        ld      a,b
   6+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        xor     c
   7+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        and     SignOnly8Bit
   8+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        JumpIfNegative   .OppositeSigns
   9+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.SameSigns:             ld      ixh,b                      ; ixh = b
  10+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ClearSignBit b                     ; b = ABS b
  11+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        add     hl,de                      ; hl = hl + de
  12+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,b                        ; a = b + c + carry
  13+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        adc     c                          ;
  14+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      b,a                        ;
  15+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,ixh                      ;
  16+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        SignBitOnlyA                       ;
  17+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        or      b                          ;
  18+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ret                                ;
  19+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.OppositeSigns:         ld      ixh,b                      ; save signed into ixh and ixl
  20+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      ixl,c                      ; .
  21+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ClearSignBit c                     ; c = ABS C
  22+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,b                        ; a = abs b
  23+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ClearSignBitA                      ; .
  24+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        sbc     c                          ; a = a - c
  25+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        JumpIfNegative  .OppositeCDEgtBHL  ; if c is positive
  26+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        push    hl
  27+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        sbc     hl,de                      ; then subtract de from hl
  28+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        JumpIfNegative  .HLDEWasNegative   ; if sub was positive
  29+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        pop     de                         ; at this stage the stack is just junk
  30+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      b,a                        ; then copy results to AHL
  31+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,ixh                      ; by just handling sign
  32+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        SignBitOnlyA                       ; .
  33+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        or      b                          ; .
  34+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ret                                ; .
  35+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.OppositeCDEgtBHL:      ex      de,hl                      ; save hl
  36+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      c,ixh                      ; swap signs over
  37+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      b,ixl                      ;
  38+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        jp      .OppositeSigns             ; and do calc again
  39+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.HLDEWasNegative:       pop     hl                         ; get back hl swap values and try again
  40+ 93DF              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        jp      .OppositeCDEgtBHL
  41+ 93DF              ; example
  42+ 93DF              ; bhl - 00 00 06 CDE - 80 00 0B so equates to 000006 + (-00000B) or -000005 or 800005
  43+ 93DF
  44+ 93DF 78           ADDHLDESignBC:          ld      a,b
  45+ 93E0 E6 80                                and     SignOnly8Bit
  46+ 93E2 A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
  47+ 93E3                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
  47+ 93E3 FA F1 93    >                        jp		m, ADDHLDEsBCOppSGN
  48+ 93E6 78           ADDHLDEsBCSameSigns:    ld      a,b
  49+ 93E7 B1                                   or      c
  50+ 93E8                                      JumpIfNegative ADDHLDEsBCSameNeg    ; optimisation so we can just do simple add if both positive
  50+ 93E8 FA ED 93    >                        jp		m, ADDHLDEsBCSameNeg
  51+ 93EB 19                                   add     hl,de                       ; both positive so a will already be zero
  52+ 93EC C9                                   ret
  53+ 93ED 19           ADDHLDEsBCSameNeg:      add     hl,de
  54+ 93EE 78                                   ld      a,b
  55+ 93EF B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  56+ 93F0 C9                                   ret
  57+ 93F1              ADDHLDEsBCOppSGN:       ClearCarryFlag
  57+ 93F1 B7          >                        or a
  58+ 93F2 ED 52                                sbc     hl,de
  59+ 93F4 38 02                                jr      c,ADDHLDEsBCOppInvert
  60+ 93F6 78           ADDHLDEsBCOppSGNNoCarry: ld      a,b                        ; we got here so hl > de therefore we can just take hl's previous sign bit
  61+ 93F7 C9                                   ret
  62+ 93F8              ADDHLDEsBCOppInvert:    NegHL                               ; if result was zero then set sign to zero (which doing h or l will give us for free)
  62+ 93F8 AF          >                    xor a
  62+ 93F9 95          >                    sub l
  62+ 93FA 6F          >                    ld l,a
  62+ 93FB 9F          >                    sbc a,a
  62+ 93FC 94          >                    sub h
  62+ 93FD 67          >                    ld h,a
  63+ 93FE 78                                   ld      a,b
  64+ 93FF EE 80                                xor     SignOnly8Bit                ; flip sign bit
  65+ 9401 C9                                   ret
  66+ 9402
  67+ 9402 7C           ADDHLDESignedV4:        ld      a,h
  68+ 9403 E6 80                                and     SignOnly8Bit
  69+ 9405 47                                   ld      b,a                         ;save sign bit in b
  70+ 9406 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  71+ 9407                                      JumpIfNegative .ADDHLDEOppSGN       ;Signs are opposite there fore we can subtract to get difference
  71+ 9407 FA 1F 94    >                        jp		m, .ADDHLDEOppSGN
  72+ 940A 78           .ADDHLDESameSigns:      ld      a,b
  73+ 940B B2                                   or      d
  74+ 940C                                      JumpIfNegative .ADDHLDESameNeg      ; optimisation so we can just do simple add if both positive
  74+ 940C FA 11 94    >                        jp		m, .ADDHLDESameNeg
  75+ 940F 19                                   add     hl,de
  76+ 9410 C9                                   ret
  77+ 9411 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  78+ 9412 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  79+ 9414 67                                   ld      h,a
  80+ 9415 7A                                   ld      a,d
  81+ 9416 E6 7F                                and     SignMask8Bit
  82+ 9418 57                                   ld      d,a
  83+ 9419 19                                   add     hl,de
  84+ 941A 3E 80                                ld      a,SignOnly8Bit
  85+ 941C B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  86+ 941D 67                                   ld      h,a
  87+ 941E C9                                   ret
  88+ 941F 7C           .ADDHLDEOppSGN:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  89+ 9420 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  90+ 9422 67                                   ld      h,a
  91+ 9423 7A                                   ld      a,d
  92+ 9424 E6 7F                                and     SignMask8Bit
  93+ 9426 57                                   ld      d,a
  94+ 9427                                      ClearCarryFlag
  94+ 9427 B7          >                        or a
  95+ 9428 ED 52                                sbc     hl,de
  96+ 942A 38 04                                jr      c,.ADDHLDEOppInvert
  97+ 942C 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  98+ 942D B4                                   or      h
  99+ 942E 67                                   ld      h,a                         ; set the previou sign value
 100+ 942F C9                                   ret
 101+ 9430              .ADDHLDEOppInvert:      NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 101+ 9430 AF          >                    xor a
 101+ 9431 95          >                    sub l
 101+ 9432 6F          >                    ld l,a
 101+ 9433 9F          >                    sbc a,a
 101+ 9434 94          >                    sub h
 101+ 9435 67          >                    ld h,a
 102+ 9436 78                                   ld      a,b
 103+ 9437 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 104+ 9439 B4                                   or      h
 105+ 943A 67                                   ld      h,a                         ; recover sign
 106+ 943B C9                                   ret
 107+ 943C
 108+ 943C              ;;;NOT USED addhldesigned:          bit     7,h
 109+ 943C              ;;;NOT USED                         jr      nz,.noneghl
 110+ 943C              ;;;NOT USED                         call    negate16hl
 111+ 943C              ;;;NOT USED .noneghl:               bit     7,d
 112+ 943C              ;;;NOT USED                         jr      nz,.nonegde
 113+ 943C              ;;;NOT USED                         call    negate16de
 114+ 943C              ;;;NOT USED .nonegde:               add     hl,de                       ; do 2'd c add
 115+ 943C              ;;;NOT USED                         xor     a                           ; assume positive
 116+ 943C              ;;;NOT USED                         bit     7,h
 117+ 943C              ;;;NOT USED                         ret     z                           ; if not set then can exit early
 118+ 943C              ;;;NOT USED                         call    negate16hl
 119+ 943C              ;;;NOT USED                         ld      a,$FF
 120+ 943C              ;;;NOT USED                         ret
 121+ 943C
 122+ 943C
 123+ 943C              ;; NOT USED MAY WORK ? ; HL(2sc) = HL (signed) + A (unsigned), uses HL, DE, A
 124+ 943C              ;; NOT USED MAY WORK ? ; 06 06 2022 not used
 125+ 943C              ;; NOT USED MAY WORK ? HL2cEquHLSgnPlusAusgn:  ld      d,0
 126+ 943C              ;; NOT USED MAY WORK ?                         ld      e,a                         ; set up DE = A
 127+ 943C              ;; NOT USED MAY WORK ?                         ld      a,h
 128+ 943C              ;; NOT USED MAY WORK ?                         and     SignMask8Bit
 129+ 943C              ;; NOT USED MAY WORK ?                         jr      z,.HLPositive               ; if HL is negative then do HL - A
 130+ 943C              ;; NOT USED MAY WORK ? .HLNegative:            ld      h,a                         ; hl = ABS (HL)
 131+ 943C              ;; NOT USED MAY WORK ?                         NegHL                               ; hl = - hl
 132+ 943C              ;; NOT USED MAY WORK ? .HLPositive:            ClearCarryFlag                      ; now do adc hl,de
 133+ 943C              ;; NOT USED MAY WORK ?                         adc     hl,de                       ; aftert his hl will be 2's c
 134+ 943C              ;; NOT USED MAY WORK ?                         ret
 135+ 943C              ;; NOT USED MAY WORK ? ; 06 06 2022 not used
 136+ 943C              ;; NOT USED MAY WORK ? HLEquHLSgnPlusAusgn:    ld      e,a
 137+ 943C              ;; NOT USED MAY WORK ?                         ld      a,h
 138+ 943C              ;; NOT USED MAY WORK ?                         and     SignMask8Bit
 139+ 943C              ;; NOT USED MAY WORK ?                         jr      nz,.HLNegative              ; if HL is negative then do HL - A
 140+ 943C              ;; NOT USED MAY WORK ? .HLPositive:            ld      a,e                         ; else its HL + A
 141+ 943C              ;; NOT USED MAY WORK ?                         add     hl,a
 142+ 943C              ;; NOT USED MAY WORK ?                         ret
 143+ 943C              ;; NOT USED MAY WORK ? .HLNegative:            ClearSignBit    h                   ; Clear sign of HL
 144+ 943C              ;; NOT USED MAY WORK ?                         NegHL                               ; and convert to 2's C
 145+ 943C              ;; NOT USED MAY WORK ?                         ld      d,0
 146+ 943C              ;; NOT USED MAY WORK ?                         ClearCarryFlag
 147+ 943C              ;; NOT USED MAY WORK ?                         sbc     hl,de                       ; now add a to -ve HL , add does not do 2's c
 148+ 943C              ;; NOT USED MAY WORK ?                         jp      m,.FlipResult               ; if it was negative then its really positive
 149+ 943C              ;; NOT USED MAY WORK ?                         SetSignBit      h
 150+ 943C              ;; NOT USED MAY WORK ?                         ret
 151+ 943C              ;; NOT USED MAY WORK ? .FlipResult:            NegHL                               ; so if -hl + A => HL - A => HL - DE is negative then the actual result is +ve
 152+ 943C              ;; NOT USED MAY WORK ?                         ret
 153+ 943C
 154+ 943C
 155+ 943C              ; 06 06 2022 not used
 156+ 943C              ; HL = HL (signed) + A (unsigned), uses HL, DE, A
 157+ 943C 57           AddAusngToHLsng:        ld      d,a
 158+ 943D 5C                                   ld      e,h
 159+ 943E 7C                                   ld      a,h
 160+ 943F E6 7F                                and     SignMask8Bit
 161+ 9441 67                                   ld      h,a
 162+ 9442 7A                                   ld      a,d
 163+ 9443 ED 31                                add     hl,a
 164+ 9445 7B                                   ld      a,e
 165+ 9446 E6 80                                and     SignOnly8Bit
 166+ 9448 B4                                   or      h
 167+ 9449 C9                                   ret
 168+ 944A              ; 06 06 2022 not used
 169+ 944A              ; HL = A (unsigned) - HL (signed), uses HL, DE, BC, A
 170+ 944A 44           HLEequAusngMinusHLsng:  ld      b,h
 171+ 944B 4F                                   ld      c,a
 172+ 944C 78                                   ld      a,b
 173+ 944D E6 80                                and     SignOnly8Bit
 174+ 944F 20 08                                jr      nz,.DoAdd
 175+ 9451 EB           .DoSubtract:            ex      de,hl               ; move hl into de
 176+ 9452 26 00                                ld      h,0                 ; hl = a
 177+ 9454 69                                   ld      l,c
 178+ 9455                                      ClearCarryFlag
 178+ 9455 B7          >                        or a
 179+ 9456 ED 52                                sbc     hl,de               ; hl = a - hl
 180+ 9458 C9                                   ret
 181+ 9459 79           .DoAdd:                 ld      a,c
 182+ 945A ED 31                                add hl,a
 183+ 945C C9                                   ret
 184+ 945D              ;tested mathstestsun2
 185+ 945D              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
 186+ 945D 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
 187+ 945E AA                                   xor     d                   ; .
 188+ 945F E6 80                                and     SignOnly8Bit        ; .
 189+ 9461 20 19                                jr      nz,.SignDifferent   ; .
 190+ 9463 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
 191+ 9464 E6 80                                and     SignOnly8Bit        ; so store it in iyh
 192+ 9466 FD 67                                ld      iyh,a               ;
 193+ 9468 78                                   ld      a,b                 ; bch = abs bch
 194+ 9469 E6 7F                                and     SignMask8Bit        ; .
 195+ 946B 47                                   ld      b,a                 ; .
 196+ 946C 7A                                   ld      a,d                 ; del = abs del
 197+ 946D E6 7F                                and     SignMask8Bit        ; .
 198+ 946F 57                                   ld      d,a                 ; .
 199+ 9470 7C                                   ld      a,h                 ; l = h + l
 200+ 9471 85                                   add     l                   ; .
 201+ 9472 6F                                   ld      l,a                 ; .
 202+ 9473 79                                   ld      a,c                 ; e = e + c + carry
 203+ 9474 8B                                   adc     e                   ; .
 204+ 9475 5F                                   ld      e,a                 ; .
 205+ 9476 78                                   ld      a,b                 ; d = b + d + carry (signed)
 206+ 9477 8A                                   adc     d                   ;
 207+ 9478 FD B4                                or      iyh                 ; d = or back in sign bit
 208+ 947A 57                                   ld      d,a                 ;
 209+ 947B C9                                   ret                         ; done
 210+ 947C 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
 211+ 947D FD 67                                ld      iyh,a               ; iyh = b sign
 212+ 947F E6 7F                                and     SignMask8Bit        ; .
 213+ 9481 47                                   ld      b,a                 ; .
 214+ 9482 7A                                   ld      a,d                 ; del = abs del
 215+ 9483 FD 6F                                ld      iyl,a               ; iyl = d sign
 216+ 9485 E6 7F                                and     SignMask8Bit        ; .
 217+ 9487 57                                   ld      d,a                 ; .
 218+ 9488 E5                                   push    hl                  ; save hl
 219+ 9489 60 69                                ld      hl,bc               ; hl = bc - de, if bc < de then there is a carry
 220+ 948B ED 52                                sbc     hl,de               ;
 221+ 948D E1                                   pop     hl                  ;
 222+ 948E 38 0E                                jr      c,.BCHltDEL
 223+ 9490 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
 224+ 9492 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
 225+ 9493                                      JumpIfALTNusng l,.BCHltDEL
 225+ 9493 BD          >                        cp      l
 225+ 9494 DA 9E 94    >                        jp		c, .BCHltDEL
 226+ 9497 20 15                                jr      nz,.DELltBCH
 227+ 9499              ; The same so its just zero
 228+ 9499 AF           .BCHeqDEL:              xor     a                  ; its just zero
 229+ 949A 57                                   ld      d,a                ; .
 230+ 949B 5F                                   ld      e,a                ; .
 231+ 949C 6F                                   ld      l,a                ; .
 232+ 949D C9                                   ret                        ; .
 233+ 949E              ;BCH is less than DEL so its DEL - BCH the sort out sign
 234+ 949E 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
 235+ 949F 94                                   sub     h                  ; .                              ;   01D70F DEL
 236+ 94A0 6F                                   ld      l,a                ; .                              ;  -000028 BCH
 237+ 94A1 7B                                   ld      a,e                ; e = e - c - carry              ;1.
 238+ 94A2 99                                   sbc     c                  ; .                              ;
 239+ 94A3 5F                                   ld      e,a                ; .                              ;
 240+ 94A4 7A                                   ld      a,d                ; d = d - b - carry              ;
 241+ 94A5 98                                   sbc     b                  ; .                              ;
 242+ 94A6 57                                   ld      d,a                ; .                              ;
 243+ 94A7 FD 7D                                ld      a,iyl              ; as d was larger, take d sign
 244+ 94A9 E6 80                                and     SignOnly8Bit       ;
 245+ 94AB B2                                   or      d                  ;
 246+ 94AC 57                                   ld      d,a                ;
 247+ 94AD C9                                   ret
 248+ 94AE 7C           .DELltBCH:              ld      a,h                ; l = h - l
 249+ 94AF 95                                   sub     l                  ;
 250+ 94B0 6F                                   ld      l,a                ;
 251+ 94B1 79                                   ld      a,c                ; e = c - e - carry
 252+ 94B2 9B                                   sbc     e                  ;
 253+ 94B3 5F                                   ld      e,a                ;
 254+ 94B4 78                                   ld      a,b                ; d = b - d - carry
 255+ 94B5 9A                                   sbc     d                  ;
 256+ 94B6 57                                   ld      d,a                ;
 257+ 94B7 FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
 258+ 94B9 E6 80                                and     SignOnly8Bit       ;
 259+ 94BB B2                                   or      d                  ;
 260+ 94BC 57                                   ld      d,a                ;
 261+ 94BD C9                                   ret
 262+ 94BE
 263+ 94BE              ; 06 06 2022 not used
 264+ 94BE              ;BHL = AHL + DE where AHL = 16 bit + A sign and DE = 15 bit signed
 265+ 94BE 47           AddAHLtoDEsigned:       ld      b,a                     ; B = A , C = D (save sign bytes)
 266+ 94BF 4A                                   ld      c,d                     ; .
 267+ 94C0 A9                                   xor     c                       ; A = A xor C
 268+ 94C1 CB BA                                res     7,d                     ; clear sign bit of D
 269+ 94C3 20 02                                jr nz,  .OppositeSigns          ; if A xor C is opposite signs job to A0A1
 270+ 94C5 19                                   add     hl,de                   ; HL = HL + DE
 271+ 94C6 C9                                   ret                             ; return
 272+ 94C7 ED 52        .OppositeSigns:         sbc     hl,de                   ; HL = HL -DE
 273+ 94C9 D0                                   ret     nc                      ; if no carry return
 274+ 94CA 19                                   add     hl,de                   ; else HL = HL + DE
 275+ 94CB EB                                   ex      de,hl                   ;      swap HL and DE
 276+ 94CC A7                                   and     a                       ;      reset carry
 277+ 94CD ED 52                                sbc     hl,de                   ;      HL = DE - HL (as they were swapped)
 278+ 94CF 41                                   ld      b,c                     ;      B = sign of C
 279+ 94D0 C9                                   ret                             ;      ret
 280+ 94D1
 281+ 94D1
 282+ 94D1              ; 06 06 2022 not used
 283+ 94D1              ; a = value to add
 284+ 94D1              ; b = offset (equivalent to regX)
 285+ 94D1              ; returns INWK [x] set to new value
 286+ 94D1              ; NOT USED addINWKbasigned:
 287+ 94D1              ; NOT USED 		ld 		hl,UBnKxlo                  ; hl = INWK 0
 288+ 94D1              ; NOT USED 		ld      c,a                         ; preserve a
 289+ 94D1              ; NOT USED 		ld		a,b
 290+ 94D1              ; NOT USED 		add		hl,a                        ; hl = INWK[x]
 291+ 94D1              ; NOT USED         ld      a,c                         ; get back a value
 292+ 94D1              ; NOT USED         and     $80                         ; get sign bit from a
 293+ 94D1              ; NOT USED         ld      b,a                         ; now b = sign bit of a
 294+ 94D1              ; NOT USED         ld      a,c                         ; a = original value
 295+ 94D1              ; NOT USED         and     SignMask8Bit                ; a = unsigned version of original value
 296+ 94D1              ; 06 06 2022 not used
 297+ 94D1              ; hl = unsigned version of INWK0[b]
 298+ 94D1              ; a = value to add, also in c which will optimise later code
 299+ 94D1              ; b = sign bit of a ( in old code was varT)
 300+ 94D1              ; NOTUSEDaddhlcsigned:
 301+ 94D1              ; NOTUSED        ld      e,(hl)                      ; de = INKK value
 302+ 94D1              ; NOTUSED        inc     hl
 303+ 94D1              ; NOTUSED        ld      d,(hl)
 304+ 94D1              ; NOTUSED        inc     hl                          ; now pointing a sign
 305+ 94D1              ; NOTUSED        ld      a,(hl)                      ; a = sign bit
 306+ 94D1              ; NOTUSED        ex      de,hl                       ; hl = value now and de = pointer to sign
 307+ 94D1              ; NOTUSED        xor     b                           ; a = resultant sign
 308+ 94D1              ; NOTUSED        bit     7,a                         ; is it negative?
 309+ 94D1              ; NOTUSED        jr      z,.postivecalc
 310+ 94D1              ; NOTUSED.negativecalc:
 311+ 94D1              ; NOTUSED        ld      a,h
 312+ 94D1              ; NOTUSED        and     SignMask8Bit
 313+ 94D1              ; NOTUSED        ld      h,a                         ; strip high bit
 314+ 94D1              ; NOTUSED        ld      ixl,b                       ; save sign bit from b into d
 315+ 94D1              ; NOTUSED        ld      b,0                         ; c = value to subtract so now bc = value to subtract
 316+ 94D1              ; NOTUSED        sbc     hl,bc
 317+ 94D1              ; NOTUSED        ld      b,ixl                       ; get sign back
 318+ 94D1              ; NOTUSED        ex      de,hl                       ; de = value hl = pointer to sign
 319+ 94D1              ; NOTUSED        ld      a,(hl)                      ;
 320+ 94D1              ; NOTUSED        and     SignMask8Bit
 321+ 94D1              ; NOTUSED        sbc     a,0                         ; subtract carry which could flip sign bit
 322+ 94D1              ; NOTUSED        or      $80                         ; set bit 0
 323+ 94D1              ; NOTUSED        xor     b                           ; flip bit on sign (var T)
 324+ 94D1              ; NOTUSED        ld      (hl),a
 325+ 94D1              ; NOTUSED        dec     hl
 326+ 94D1              ; NOTUSED        ld      (hl),d
 327+ 94D1              ; NOTUSED        dec     hl
 328+ 94D1              ; NOTUSED        ld      (hl),e                      ; write out DE to INKW[x]0,1
 329+ 94D1              ; NOTUSED        ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
 330+ 94D1              ; NOTUSED        ret     c                           ; if carry was set then we can exit now
 331+ 94D1              ; NOTUSED.nocarry:
 332+ 94D1              ; NOTUSED        NegHL                               ; get hl back to positive, a is still inkw+2
 333+ 94D1              ; NOTUSED        or      b                           ; b is still varT
 334+ 94D1              ; NOTUSED        ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
 335+ 94D1              ; NOTUSED        ld      (hl),e
 336+ 94D1              ; NOTUSED        inc     hl
 337+ 94D1              ; NOTUSED        ld      (hl),d
 338+ 94D1              ; NOTUSED        inc     hl
 339+ 94D1              ; NOTUSED        ld      (hl),a                      ; set sign bit in INKK[x]+2
 340+ 94D1              ; NOTUSED        ex      de,hl                       ; hl = value de = pointer to sign
 341+ 94D1              ; NOTUSED        ret
 342+ 94D1              ; NOTUSED.postivecalc:
 343+ 94D1              ; NOTUSED        ld      ixl,b
 344+ 94D1              ; NOTUSED        ld      b,0
 345+ 94D1              ; NOTUSED        add     hl,de
 346+ 94D1              ; NOTUSED        ex      de,hl
 347+ 94D1              ; NOTUSED        or      ixl                         ; we don;t need to recover b here
 348+ 94D1              ; NOTUSED        ld      (hl),a                      ; push sign into INWK[x]
 349+ 94D1              ; NOTUSED        dec     hl
 350+ 94D1              ; NOTUSED        ld      (hl),d
 351+ 94D1              ; NOTUSED        dec     hl
 352+ 94D1              ; NOTUSED        ld      (hl),e
 353+ 94D1              ; NOTUSED        ret
 354+ 94D1
 355+ 94D1              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
 356+ 94D1              ;MVT1
 357+ 94D1              ;    S = bits 6 to 0 of A
 358+ 94D1              ;    A = sign bit => T
 359+ 94D1              ;    xor sign bit with ink[x] Sign
 360+ 94D1              ;    if negative thn its not an add
 361+ 94D1              ;
 362+ 94D1              ;        and h, 7F
 363+ 94D1              ;        b = 0
 364+ 94D1              ;        c = varS
 365+ 94D1              ;        subtract INW[X]hilo, bc
 366+ 94D1              ;        retain carry
 367+ 94D1              ;        get INKW[x]Sign
 368+ 94D1              ;        and 7F
 369+ 94D1              ;        subtract carry (so will go negtive if negative)
 370+ 94D1              ;        xor bit 7 of h with T to flip bit
 371+ 94D1              ;        write to INKW[x]Sign
 372+ 94D1              ;
 373+ 94D1              ;    else
 374+ 94D1              ;MV10.
 375+ 94D1              ;        add INWK[x]hi,lo, varS
 376+ 94D1              ;        or      sign bit
 377+ 94D1
 378+ 94D1
# file closed: ./Maths/asm_add.asm
 607  94D1                  INCLUDE "./Maths/asm_subtract.asm"
# file opened: ./Maths/asm_subtract.asm
   1+ 94D1              ;...subtract routines
   2+ 94D1              ; we could cheat, flip the sign of DE and just add but its not very optimised
   3+ 94D1 7C           subHLDES15:             ld      a,h
   4+ 94D2 E6 80                                and     SignOnly8Bit
   5+ 94D4 47                                   ld      b,a                         ;save sign bit in b
   6+ 94D5 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
   7+ 94D6                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
   7+ 94D6 FA 04 95    >                        jp		m, .SUBHLDEOppSGN
   8+ 94D9 78           .SUBHLDESameSigns:      ld      a,b
   9+ 94DA B2                                   or      d
  10+ 94DB                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
  10+ 94DB FA E5 94    >                        jp		m, .SUBHLDESameNeg
  11+ 94DE                                      ClearCarryFlag
  11+ 94DE B7          >                        or a
  12+ 94DF ED 52                                sbc     hl,de
  13+ 94E1                                      JumpIfNegative .SUBHLDESameOvrFlw
  13+ 94E1 FA F8 94    >                        jp		m, .SUBHLDESameOvrFlw
  14+ 94E4 C9                                   ret
  15+ 94E5 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  16+ 94E6 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  17+ 94E8 67                                   ld      h,a
  18+ 94E9 7A                                   ld      a,d
  19+ 94EA E6 7F                                and     SignMask8Bit
  20+ 94EC 57                                   ld      d,a
  21+ 94ED                                      ClearCarryFlag
  21+ 94ED B7          >                        or a
  22+ 94EE ED 52                                sbc     hl,de
  23+ 94F0                                      JumpIfNegative .SUBHLDESameOvrFlw
  23+ 94F0 FA F8 94    >                        jp		m, .SUBHLDESameOvrFlw
  24+ 94F3 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
  25+ 94F4 F6 80                                or      SignOnly8Bit
  26+ 94F6 67                                   ld      h,a
  27+ 94F7 C9                                   ret
  28+ 94F8              .SUBHLDESameOvrFlw:     NegHL
  28+ 94F8 AF          >                    xor a
  28+ 94F9 95          >                    sub l
  28+ 94FA 6F          >                    ld l,a
  28+ 94FB 9F          >                    sbc a,a
  28+ 94FC 94          >                    sub h
  28+ 94FD 67          >                    ld h,a
  29+ 94FE 78                                   ld      a,b
  30+ 94FF EE 80                                xor     SignOnly8Bit                ; flip sign bit
  31+ 9501 B4                                   or      h
  32+ 9502 67                                   ld      h,a                         ; recover sign
  33+ 9503 C9                                   ret
  34+ 9504 B7           .SUBHLDEOppSGN:         or      a
  35+ 9505 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  36+ 9506 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  37+ 9508 67                                   ld      h,a
  38+ 9509 7A                                   ld      a,d
  39+ 950A E6 7F                                and     SignMask8Bit
  40+ 950C 57                                   ld      d,a
  41+ 950D 19                                   add     hl,de
  42+ 950E 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  43+ 950F B4                                   or      h
  44+ 9510 67                                   ld      h,a                         ; set the previou sign value
  45+ 9511 C9                                   ret
  46+ 9512
  47+ 9512
# file closed: ./Maths/asm_subtract.asm
 608  9512                  INCLUDE "./Maths/Utilities/AddDEToCash.asm"
# file opened: ./Maths/Utilities/AddDEToCash.asm
   1+ 9512              ; Note its big endian
   2+ 9512 2A 06 89     addDEtoCash:            ld      hl,(Cash)
   3+ 9515 19                                   add     hl,de
   4+ 9516 22 06 89                             ld      (Cash),hl
   5+ 9519 11 00 00                             ld      de,0
   6+ 951C 2A 08 89                             ld      hl,(Cash+2)
   7+ 951F ED 5A                                adc     hl,de
   8+ 9521 22 08 89                             ld      (Cash+2),hl
   9+ 9524 C9                                   ret
  10+ 9525
  11+ 9525 2A 06 89     subDEfromCash:          ld      hl,(Cash)
  12+ 9528 7C                                   ld      a,h
  13+ 9529 B5                                   or      l
  14+ 952A 2A 08 89                             ld      hl,(Cash+2)
  15+ 952D B4                                   or      h
  16+ 952E B5                                   or      l
  17+ 952F C8                                   ret     z               ; No cash return
  18+ 9530 B7                                   or      a
  19+ 9531 2A 06 89                             ld      hl,(Cash)
  20+ 9534 ED 52                                sbc     hl,de
  21+ 9536 22 06 89                             ld      (Cash),hl
  22+ 9539 11 00 00                             ld      de,0
  23+ 953C 2A 08 89                             ld      hl,(Cash+2)
  24+ 953F ED 52                                sbc     hl,de
  25+ 9541 22 08 89                             ld      (Cash+2),hl
  26+ 9544                                      JumpOnBitSet h,7,.ZeroCash
  26+ 9544 CB 7C       >                        bit 	7,h
  26+ 9546 C2 4A 95    >                        jp      nz,.ZeroCash
  27+ 9549 C9                                   ret
  28+ 954A 21 00 00     .ZeroCash:              ld      hl,0
  29+ 954D 22 06 89                             ld      (Cash),hl
  30+ 9550 22 08 89                             ld      (Cash+2),hl
  31+ 9553 C9                                   ret
  32+ 9554
# file closed: ./Maths/Utilities/AddDEToCash.asm
 609  9554                  INCLUDE "./Maths/DIVD3B2.asm"
# file opened: ./Maths/DIVD3B2.asm
   1+ 9554              ;INPUTS: ahl = dividend cde = divisor
   2+ 9554              ;OUTPUTS: cde = quotient ahl = remainder
   3+ 9554 47           Div24by24:              ld b,a
   4+ 9555 E5                                   push hl
   5+ 9556 DD E1                                pop ix
   6+ 9558 2E 18                                ld l,24
   7+ 955A E5                                   push hl
   8+ 955B AF                                   xor a
   9+ 955C 67                                   ld h,a
  10+ 955D 6F                                   ld l,a
  11+ 955E DD 29        .Div24by24loop:         add ix,ix
  12+ 9560 CB 10                                rl b
  13+ 9562 ED 6A                                adc hl,hl
  14+ 9564 17                                   rla
  15+ 9565 B9                                   cp c
  16+ 9566 38 0C                                jr c,.Div24by24skip
  17+ 9568 20 05                                jr nz,.Div24by24setbit
  18+ 956A ED 52                                sbc hl,de
  19+ 956C 19                                   add hl,de
  20+ 956D 38 05                                jr c,.Div24by24skip
  21+ 956F ED 52        .Div24by24setbit:       sbc hl,de
  22+ 9571 99                                   sbc a,c
  23+ 9572 DD 23                                inc ix
  24+ 9574 E3           .Div24by24skip:         ex (sp),hl
  25+ 9575 2D                                   dec l
  26+ 9576 E3                                   ex (sp),hl
  27+ 9577 20 E5                                jr nz,.Div24by24loop
  28+ 9579 D1                                   pop de
  29+ 957A 48                                   ld c,b
  30+ 957B DD E5                                push ix
  31+ 957D D1                                   pop de
  32+ 957E C9                                   ret
  33+ 957F
  34+ 957F FD 67        Div24by24ASigned:       ld      iyh,a
  35+ 9581 E6 7F                                and     SignMask8Bit
  36+ 9583 CD 54 95                             call    Div24by24
  37+ 9586 F5                                   push    af
  38+ 9587 FD 7C                                ld      a,iyh
  39+ 9589 E6 80                                and     SignOnly8Bit
  40+ 958B B1                                   or      c
  41+ 958C 4F                                   ld      c,a
  42+ 958D F1                                   pop     af
  43+ 958E C9                                   ret
  44+ 958F
  45+ 958F                                      ; CDE = AHL/CDE, AHL = remainder
  46+ 958F FD 67        Div24by24LeadSign:      ld      iyh,a           ; Preserve signed in IYL
  47+ 9591 A9                                   xor     c               ; flip sign if negative
  48+ 9592 E6 80                                and     SignOnly8Bit    ; .
  49+ 9594 FD 6F                                ld      iyl,a           ; .
  50+ 9596 79                                   ld      a,c             ; make both values ABS
  51+ 9597 E6 7F                                and     SignMask8Bit    ; .
  52+ 9599 4F                                   ld      c,a             ; .
  53+ 959A FD 7C                                ld      a,iyh           ; .
  54+ 959C E6 7F                                and     SignMask8Bit    ; .
  55+ 959E CD 54 95                             call    Div24by24       ; do abs divide
  56+ 95A1 FD B5                                or      iyl             ; bring in sign bit
  57+ 95A3 FD 67                                ld      iyh,a           ; save a
  58+ 95A5 79                                   ld      a,c             ; sort sign for c
  59+ 95A6 FD B5                                or      iyl             ;
  60+ 95A8 4F                                   ld      c,a             ;
  61+ 95A9 FD 7C                                ld      a,iyh           ; sort sign of a
  62+ 95AB C9                                   ret
  63+ 95AC
  64+ 95AC              ; --------------------------------------------------------------
  65+ 95AC              ;divdide by 16 using undocumented instrunctions
  66+ 95AC              ;Input: BC = Dividend, DE = Divisor, HL = 0
  67+ 95AC              ;Output: BC = Quotient, HL = Remainder
  68+ 95AC 47           PROJ256mulAdivQ:        ld      b,a
  69+ 95AD 0E 00                                ld      c,0
  70+ 95AF 16 00                                ld      d,0
  71+ 95B1 3A 9C 83                             ld      a,(varQ)
  72+ 95B4 5F                                   ld      e,a
  73+ 95B5 21 00 00     PROJDIV16UNDOC:         ld      hl,0
  74+ 95B8 78                                   ld      a,b
  75+ 95B9 06 10                                ld      b,16
  76+ 95BB CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
  77+ 95BD 17                                   rla             ; ...
  78+ 95BE ED 6A                                adc     hl,hl       ; ...
  79+ 95C0 ED 52                                sbc     hl,de       ; ...
  80+ 95C2 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
  81+ 95C4 19                                   add     hl,de       ; ...
  82+ 95C5 0D                                   dec     c       ; ...
  83+ 95C6 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
  84+ 95C8 79                                   ld      a,c
  85+ 95C9 32 9D 83                             ld      (varR),a
  86+ 95CC C9                                   ret
  87+ 95CD
  88+ 95CD
  89+ 95CD
  90+ 95CD
# file closed: ./Maths/DIVD3B2.asm
 610  95CD                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ 95CD              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ 95CD 2A 9D 83                             ld  hl,(varRS)
   3+ 95D0 3A 9C 83                             ld  a,(varQ)
   4+ 95D3 C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ 95D5 11 00 00                             ld  de,0        ; de = XY
   6+ 95D8 47                                   ld  b,a         ; b = Q
   7+ 95D9                                      ShiftHLRight1
   7+ 95D9 CB 3C       >			   srl h
   7+ 95DB CB 1D       >			   rr  l
   8+ 95DD CB 20                                sla b
   9+ 95DF 30 03                                jr  nc,.LL126
  10+ 95E1 EB           .LL125:                 ex de,hl
  11+ 95E2 19                                   add hl,de
  12+ 95E3 EB                                   ex  de,hl       ; de = de + rs
  13+ 95E4              .LL126:                 ShiftHLRight1
  13+ 95E4 CB 3C       >			   srl h
  13+ 95E6 CB 1D       >			   rr  l
  14+ 95E8 CB 20                                sla b
  15+ 95EA 38 F5                                jr      c,.LL125
  16+ 95EC 20 F6                                jr      nz,.LL126
  17+ 95EE EB                                   ex      de,hl   ; hl = result
  18+ 95EF D1 C1                                pop     bc,,de
  19+ 95F1 C9                                   ret
  20+ 95F2
  21+ 95F2
  22+ 95F2              MacroDEEquQmulASigned:  MACRO
  23+ 95F2 ~                                    ld      d,a                         ; save a into d
  24+ 95F2 ~                                    ld      a,(varQ)
  25+ 95F2 ~                                    ld      e,a
  26+ 95F2 ~                                    xor     d                           ; a = a xor var Q
  27+ 95F2 ~                                    and     SignOnly8Bit
  28+ 95F2 ~                                    ld      b,a                         ; b = sign of a xor q
  29+ 95F2 ~                                    ld      a,d                         ; d = abs d (or a reg)
  30+ 95F2 ~                                    and     SignMask8Bit
  31+ 95F2 ~                                    ld      d,a
  32+ 95F2 ~                                    ld      a,e                         ; e = abs e (or varQ)
  33+ 95F2 ~                                    and     SignMask8Bit
  34+ 95F2 ~                                    ld      e,a
  35+ 95F2 ~                                    mul                                 ; de = a * Q
  36+ 95F2 ~                                    ld      a,d
  37+ 95F2 ~                                    or      b                           ; de = a * Q leading sign bit
  38+ 95F2 ~                                    ld      d,a
  39+ 95F2                                      ENDM
  40+ 95F2
  41+ 95F2
  42+ 95F2
  43+ 95F2                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  44+ 95F2              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  44+ 95F2 57          >                        ld      d,a                         ; save a into d
  44+ 95F3 3A 9C 83    >                        ld      a,(varQ)
  44+ 95F6 5F          >                        ld      e,a
  44+ 95F7 AA          >                        xor     d                           ; a = a xor var Q
  44+ 95F8 E6 80       >                        and     SignOnly8Bit
  44+ 95FA 47          >                        ld      b,a                         ; b = sign of a xor q
  44+ 95FB 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  44+ 95FC E6 7F       >                        and     SignMask8Bit
  44+ 95FE 57          >                        ld      d,a
  44+ 95FF 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  44+ 9600 E6 7F       >                        and     SignMask8Bit
  44+ 9602 5F          >                        ld      e,a
  44+ 9603 ED 30       >                        mul                                 ; de = a * Q
  44+ 9605 7A          >                        ld      a,d
  44+ 9606 B0          >                        or      b                           ; de = a * Q leading sign bit
  44+ 9607 57          >                        ld      d,a
  45+ 9608 2A 9D 83                             ld		hl,(varR)
  46+ 960B CD 33 96                             call	madXAAddHLDESigned
  47+ 960E EB                                   ex      de,hl                       ; de = R.S + DE
  48+ 960F                                      ClearCarryFlag
  48+ 960F B7          >                        or a
  49+ 9610 DD 6B                                ld      ixl,e
  50+ 9612 7A                                   ld      a,d
  51+ 9613 C9                                   ret
  52+ 9614
  53+ 9614              madDEequQmulAaddRS:     MacroDEEquQmulASigned
  53+ 9614 57          >                        ld      d,a                         ; save a into d
  53+ 9615 3A 9C 83    >                        ld      a,(varQ)
  53+ 9618 5F          >                        ld      e,a
  53+ 9619 AA          >                        xor     d                           ; a = a xor var Q
  53+ 961A E6 80       >                        and     SignOnly8Bit
  53+ 961C 47          >                        ld      b,a                         ; b = sign of a xor q
  53+ 961D 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  53+ 961E E6 7F       >                        and     SignMask8Bit
  53+ 9620 57          >                        ld      d,a
  53+ 9621 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  53+ 9622 E6 7F       >                        and     SignMask8Bit
  53+ 9624 5F          >                        ld      e,a
  53+ 9625 ED 30       >                        mul                                 ; de = a * Q
  53+ 9627 7A          >                        ld      a,d
  53+ 9628 B0          >                        or      b                           ; de = a * Q leading sign bit
  53+ 9629 57          >                        ld      d,a
  54+ 962A 2A 9D 83                             ld		hl,(varR)
  55+ 962D CD 33 96                             call	madXAAddHLDESigned
  56+ 9630 EB                                   ex      de,hl                       ; de = R.S + DE
  57+ 9631                                      ClearCarryFlag
  57+ 9631 B7          >                        or a
  58+ 9632 C9                                   ret
  59+ 9633
  60+ 9633 7C           madXAAddHLDESigned:     ld      a,h
  61+ 9634 E6 80                                and     SignOnly8Bit
  62+ 9636 47                                   ld      b,a                         ;save sign bit in b
  63+ 9637 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  64+ 9638                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  64+ 9638 FA 50 96    >                        jp		m, .ADDHLDEOppSGN
  65+ 963B 78           .ADDHLDESameSigns:       ld      a,b
  66+ 963C B2                                   or      d
  67+ 963D                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  67+ 963D FA 42 96    >                        jp		m, .ADDHLDESameNeg
  68+ 9640 19                                   add     hl,de
  69+ 9641 C9                                   ret
  70+ 9642 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  71+ 9643 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  72+ 9645 67                                   ld      h,a
  73+ 9646 7A                                   ld      a,d
  74+ 9647 E6 7F                                and     SignMask8Bit
  75+ 9649 57                                   ld      d,a
  76+ 964A 19                                   add     hl,de
  77+ 964B 3E 80                                ld      a,SignOnly8Bit
  78+ 964D B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  79+ 964E 67                                   ld      h,a
  80+ 964F C9                                   ret
  81+ 9650 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  82+ 9651 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  83+ 9653 67                                   ld      h,a
  84+ 9654 7A                                   ld      a,d
  85+ 9655 E6 7F                                and     SignMask8Bit
  86+ 9657 57                                   ld      d,a
  87+ 9658 B7                                   or      a
  88+ 9659 ED 52                                sbc     hl,de
  89+ 965B 38 04                                jr      c,.ADDHLDEOppInvert
  90+ 965D 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  91+ 965E B4                                   or      h
  92+ 965F 67                                   ld      h,a                         ; set the previou sign value
  93+ 9660 C9                                   ret
  94+ 9661              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  94+ 9661 AF          >                    xor a
  94+ 9662 95          >                    sub l
  94+ 9663 6F          >                    ld l,a
  94+ 9664 9F          >                    sbc a,a
  94+ 9665 94          >                    sub h
  94+ 9666 67          >                    ld h,a
  95+ 9667 78                                   ld      a,b
  96+ 9668 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  97+ 966A B4                                   or      h
  98+ 966B 67                                   ld      h,a                         ; recover sign
  99+ 966C C9                                   ret
 100+ 966D
 101+ 966D
 102+ 966D                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
 103+ 966D                  ;
 104+ 966D                  ; enter : hl = 16-bit multiplier   = x
 105+ 966D                  ;          e =  8-bit multiplicand = y
 106+ 966D                  ;
 107+ 966D                  ; exit  : ahl = 24-bit product
 108+ 966D                  ;         carry reset
 109+ 966D                  ;
 110+ 966D                  ; uses  : af, de, hl
 111+ 966D 54           AHLequHLmulE:           ld d,h                      ; xh
 112+ 966E 63                                   ld h,e                      ; yl
 113+ 966F ED 30                                mul de                      ; xh*yl
 114+ 9671 EB                                   ex de,hl
 115+ 9672 ED 30                                mul de                      ; yl*xl, hl = xh*yl
 116+ 9674
 117+ 9674 7A                                   ld  a,d                     ; sum products
 118+ 9675 85                                   add a,l
 119+ 9676 57                                   ld  d,a
 120+ 9677 EB                                   ex de,hl
 121+ 9678
 122+ 9678 7A                                   ld  a,d
 123+ 9679 CE 00                                adc a,0
 124+ 967B C9                                   ret
 125+ 967C
 126+ 967C 54           HLE0quH0mulE:           ld      d,h                 ; .
 127+ 967D 63                                   ld      h,e                 ; .
 128+ 967E ED 30                                mul     de                  ; de = xh * yl
 129+ 9680 EB                                   ex      de,hl
 130+ 9681 C9                                   ret
 131+ 9682
 132+ 9682                 ; multiplication of two 16-bit numbers into a 32-bit product
 133+ 9682                 ;
 134+ 9682                 ; enter : de = 16-bit multiplicand = y
 135+ 9682                 ;         hl = 16-bit multiplicand = x
 136+ 9682                 ;
 137+ 9682                 ; exit  : dehl = 32-bit product
 138+ 9682                 ;         carry reset
 139+ 9682                 ;
 140+ 9682                 ; uses  : af, bc, de, hl
 141+ 9682
 142+ 9682
 143+ 9682
 144+ 9682 45           DEHLequDEmulHL:         ld b,l                      ; x0
 145+ 9683 4B                                   ld c,e                      ; y0
 146+ 9684 5D                                   ld e,l                      ; x0
 147+ 9685 6A                                   ld l,d
 148+ 9686 E5                                   push hl                     ; x1 y1
 149+ 9687 69                                   ld l,c                      ; y0
 150+ 9688              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 151+ 9688 ED 30                                mul de                      ; y1*x0
 152+ 968A EB                                   ex de,hl
 153+ 968B ED 30                                mul de                      ; x1*y0
 154+ 968D
 155+ 968D AF                                   xor a                       ; zero A
 156+ 968E 19                                   add hl,de                   ; sum cross products p2 p1
 157+ 968F 8F                                   adc a,a                     ; capture carry p3
 158+ 9690
 159+ 9690 59                                   ld e,c                      ; x0
 160+ 9691 50                                   ld d,b                      ; y0
 161+ 9692 ED 30                                mul de                      ; y0*x0
 162+ 9694
 163+ 9694 47                                   ld b,a                      ; carry from cross products
 164+ 9695 4C                                   ld c,h                      ; LSB of MSW from cross products
 165+ 9696
 166+ 9696 7A                                   ld a,d
 167+ 9697 85                                   add a,l
 168+ 9698 67                                   ld h,a
 169+ 9699 6B                                   ld l,e                      ; LSW in HL p1 p0
 170+ 969A
 171+ 969A D1                                   pop de
 172+ 969B ED 30                                mul de                      ; x1*y1
 173+ 969D
 174+ 969D EB                                   ex de,hl
 175+ 969E ED 4A                                adc hl,bc
 176+ 96A0 EB                                   ex de,hl                    ; de = final MSW
 177+ 96A1
 178+ 96A1 C9                                   ret
 179+ 96A2
 180+ 96A2              ; multiplication of two 16-bit numbers into a 16-bit product
 181+ 96A2              ; enter : de = 16-bit multiplicand
 182+ 96A2              ;         hl = 16-bit multiplicand
 183+ 96A2              ; exit  : hl = 16-bit product
 184+ 96A2              ;         carry reset
 185+ 96A2              ; maths is
 186+ 96A2              ;        hl = y , de= x
 187+ 96A2              ;        hl = xhi,ylo + (yhigh * xlow)
 188+ 96A2              ;        hl = yhih & xlo + x
 189+ 96A2              ;
 190+ 96A2              ;
 191+ 96A2              ; uses  : af, bc, de, hl
 192+ 96A2 C5           mulDEbyHL:              push    bc
 193+ 96A3 7A                                   ld a,d                      ; a = xh
 194+ 96A4 54                                   ld d,h                      ; d = yh
 195+ 96A5 67                                   ld h,a                      ; h = xh
 196+ 96A6 4B                                   ld c,e                      ; c = xl
 197+ 96A7 45                                   ld b,l                      ; b = yl
 198+ 96A8 ED 30                                mul                         ; yh * yl
 199+ 96AA EB                                   ex de,hl
 200+ 96AB ED 30                                mul                         ; xh * yl
 201+ 96AD 19                                   add hl,de                   ; add cross products
 202+ 96AE 59                                   ld e,c
 203+ 96AF 50                                   ld d,b
 204+ 96B0 ED 30                                mul                         ; yl * xl
 205+ 96B2 7D                                   ld a,l                      ; cross products lsb
 206+ 96B3 82                                   add a,d                     ; add to msb final
 207+ 96B4 67                                   ld h,a
 208+ 96B5 6B                                   ld l,e                      ; hl = final
 209+ 96B6                                      ; 83 cycles, 19 bytes
 210+ 96B6 AF                                   xor a                       ; reset carry
 211+ 96B7 C1                                   pop     bc
 212+ 96B8 C9                                   ret
 213+ 96B9
 214+ 96B9
 215+ 96B9              ; CHL = multiplicand D = multiplier
 216+ 96B9              ; DCHL = CHL * D
 217+ 96B9 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
 218+ 96BA AC                                   xor     h                   ; xor with h to get resultant sign
 219+ 96BB E6 80                                and     SignOnly8Bit        ; .
 220+ 96BD FD 67                                ld      iyh,a               ; iyh = copy of sign
 221+ 96BF 79                                   ld      a,c                 ; now CHL = ABS (CHL)
 222+ 96C0 E6 7F                                and     SignMask8Bit        ; .
 223+ 96C2 4F                                   ld      c,a                 ; .
 224+ 96C3 7A                                   ld      a,d                 ; d = ABS D
 225+ 96C4 E6 7F                                and     SignMask8Bit        ; .
 226+ 96C6              ; At this point CHL = ABS (HLE), A = ABS(D)
 227+ 96C6 57           .mul1:                  ld      d,a                 ; first do D * L
 228+ 96C7 5D                                   ld      e,l                 ; .
 229+ 96C8 ED 30                                mul     de                  ; DE = L * D
 230+ 96CA 08                                   ex      af,af'              ; save multiplier
 231+ 96CB 6B                                   ld      l,e                 ; L = p0
 232+ 96CC 7A                                   ld      a,d                 ; carry byte
 233+ 96CD 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
 234+ 96CE 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
 235+ 96CF 57                                   ld      d,a                 ; and multiplier
 236+ 96D0 ED 30                                mul     de                  ; now its D & L
 237+ 96D2 08                                   ex      af,af'              ; get back carry byte with flags
 238+ 96D3 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
 239+ 96D4 67                                   ld      h,a                 ; h = P1
 240+ 96D5 7A                                   ld      a,d                 ; a = carry byte
 241+ 96D6 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
 242+ 96D7 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
 243+ 96D8 57                                   ld      d,a                 ;
 244+ 96D9 ED 30                                mul     de                  ;
 245+ 96DB 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
 246+ 96DC 8B                                   adc     a,e                 ;
 247+ 96DD FD B4                                or      iyh                 ; recover saved resultant sign
 248+ 96DF 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
 249+ 96E0 C9                                   ret
 250+ 96E1
 251+ 96E1              ;  CHL = 53456 D = 1E
 252+ 96E1              ;  56 * 1E = A14 L = 14 carry = 0A
 253+ 96E1              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
 254+ 96E1              ;  5  * 1E = 096 C = 96 + 6 = 9C
 255+ 96E1              ;  CHL = 9C2214
 256+ 96E1              ;mult3
 257+ 96E1              ; DELC = HLE * D, uses HL, DE, C , A , IYH
 258+ 96E1              ; HLE = multiplicand D = multiplier
 259+ 96E1              ; tested by mathstestsun.asm all passed
 260+ 96E1              ; Algorithm
 261+ 96E1              ; AC =  E * D   (save carry)         H    L    E
 262+ 96E1              ; DE =  L * D                                  D
 263+ 96E1              ;  L =  A + E + carry                         E*D (lo)
 264+ 96E1              ; DE =  H * D                             L*D+ ^ (hi)
 265+ 96E1              ;  E =  A + E + carry                H*D (lo) + carry
 266+ 96E1              ;
 267+ 96E1              ;
 268+ 96E1 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 269+ 96E2 AC                                   xor     h                   ; xor with h to get resultant sign
 270+ 96E3 E6 80                                and     SignOnly8Bit        ; .
 271+ 96E5 FD 67                                ld      iyh,a               ; iyh = copy of sign
 272+ 96E7 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
 273+ 96E8 E6 7F                                and     SignMask8Bit        ; .
 274+ 96EA 67                                   ld      h,a                 ; .
 275+ 96EB 7A                                   ld      a,d                 ; d = ABS D
 276+ 96EC E6 7F                                and     SignMask8Bit        ; .
 277+ 96EE 57                                   ld      d,a                 ; .
 278+ 96EF B7           .testEitherSideZero:    or      a
 279+ 96F0 28 24                                jr      z,.ResultZero
 280+ 96F2 7C                                   ld      a,h
 281+ 96F3 B5                                   or      l
 282+ 96F4 B3                                   or      e
 283+ 96F5 28 1F                                jr      z,.ResultZero
 284+ 96F7              ; At this point HLE = ABS (HLE), A = ABS(D)
 285+ 96F7 42                                   ld      b,d                 ; save Quotient
 286+ 96F8 ED 30        .mul1:                  mul     de                  ; C = E * D
 287+ 96FA 4B                                   ld      c,e                 ; C = p0
 288+ 96FB FD 6A                                ld      iyl,d               ; save carry (p1)
 289+ 96FD 5D           .mul2:                  ld      e,l                 ; L = L * D
 290+ 96FE 50                                   ld      d,b                 ; .
 291+ 96FF ED 30                                mul     de                  ; .
 292+ 9701 FD 7D                                ld      a,iyl               ; get back p1
 293+ 9703 83           .carrybyte1:            add     a,e                 ; L = L + E
 294+ 9704 6F                                   ld      l,a                 ; .
 295+ 9705 FD 6A                                ld      iyl,d               ; save new carry byte
 296+ 9707 5C           .mul3:                  ld      e,h                 ; E = H * D
 297+ 9708 50                                   ld      d,b                 ; .
 298+ 9709 ED 30                                mul     de                  ; .
 299+ 970B FD 7D                                ld      a,iyl
 300+ 970D 8B                                   adc     a,e                 ; .
 301+ 970E 5F                                   ld      e,a                 ; .
 302+ 970F 7A           .ItsNotZero:            ld      a,d                 ;
 303+ 9710 CE 00                                adc     a,0                 ; final carry bit
 304+ 9712 FD B4                                or      iyh                 ; bring back sign
 305+ 9714 57                                   ld      d,a                 ; s = sign
 306+ 9715 C9                                   ret
 307+ 9716 11 00 00     .ResultZero:            ld      de,0
 308+ 9719                                      ZeroA
 308+ 9719 AF          >                        xor a
 309+ 971A 4F                                   ld      c,a
 310+ 971B 6F                                   ld      l,a
 311+ 971C C9                                   ret
 312+ 971D
 313+ 971D              ;;;
 314+ 971D              ;;;
 315+ 971D              ;;;mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 316+ 971D              ;;;                        xor     h                   ; xor with h to get resultant sign
 317+ 971D              ;;;                        and     SignOnly8Bit        ; .
 318+ 971D              ;;;                        ld      iyh,a               ; iyh = copy of sign
 319+ 971D              ;;;                        ld      a,h                 ; now HLE = ABS (HLE)
 320+ 971D              ;;;                        and     SignMask8Bit        ; .
 321+ 971D              ;;;                        ld      h,a                 ; .
 322+ 971D              ;;;                        ld      a,d                 ; d = ABS D
 323+ 971D              ;;;                        and     SignMask8Bit        ; .
 324+ 971D              ;;;                        ld      d,a                 ; .
 325+ 971D              ;;;.testEitherSideZero:    or      a
 326+ 971D              ;;;                        jr      z,.ResultZero
 327+ 971D              ;;;                        ld      a,h
 328+ 971D              ;;;                        or      l
 329+ 971D              ;;;                        or      e
 330+ 971D              ;;;                        jr      z,.ResultZero
 331+ 971D              ;;;; At this point HLE = ABS (HLE), A = ABS(D)
 332+ 971D              ;;;.mul1:                  mul     de                  ; C = E * D
 333+ 971D              ;;;                        ex      af,af'              ; save mulitplier
 334+ 971D              ;;;                        ld      c,e                 ; C = p0
 335+ 971D              ;;;                        ld      a,d                 ; save carry (p1)
 336+ 971D              ;;;                        ex      af,af'              ; .
 337+ 971D              ;;;.mul2:                  ld      e,l                 ; L = L * D
 338+ 971D              ;;;                        ld      d,a                 ; .
 339+ 971D              ;;;                        mul     de                  ; .
 340+ 971D              ;;;                        ex      af,af'              ; .
 341+ 971D              ;;;.carrybyte1:            add     a,e                 ; L = L + E
 342+ 971D              ;;;                        ld      l,a                 ; .
 343+ 971D              ;;;                        ld      a,d
 344+ 971D              ;;;                        ex      af,af'              ; save new carry byte
 345+ 971D              ;;;.mul3:                  ld      e,h                 ; E = H * D
 346+ 971D              ;;;                        ld      d,a                 ; .
 347+ 971D              ;;;                        mul     de                  ; .
 348+ 971D              ;;;                        ex      af,af'              ; .
 349+ 971D              ;;;                        adc     a,e                 ; .
 350+ 971D              ;;;                        ld      e,a                 ; .
 351+ 971D              ;;;.ItsNotZero:            ld      a,d                 ;
 352+ 971D              ;;;                        adc     a,0                 ; final carry bit
 353+ 971D              ;;;                        or      iyh                 ; bring back sign
 354+ 971D              ;;;                        ld      d,a                 ; s = sign
 355+ 971D              ;;;                        ret
 356+ 971D              ;;;.ResultZero:            ld      de,0
 357+ 971D              ;;;                        ZeroA
 358+ 971D              ;;;                        ld      c,a
 359+ 971D              ;;;                        ld      l,a
 360+ 971D              ;;;                        ret
 361+ 971D
 362+ 971D              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 363+ 971D              ; enter : de = 16-bit multiplicand
 364+ 971D              ;         hl = 16-bit multiplicand
 365+ 971D              ; exit  : hl = 16-bit product
 366+ 971D              ;         carry reset
 367+ 971D              ;
 368+ 971D              ; uses  : af, bc, de, hl
 369+ 971D 00           mulDEbyHLSignByte       DB      0
 370+ 971E AF           mulDEbyHLSgnTo2c:       xor     a
 371+ 971F 32 1D 97                             ld      (mulDEbyHLSignByte),a
 372+ 9722 7A           .SignDE:                ld      a,d
 373+ 9723 ED 27 80                             test    $80
 374+ 9726 28 08                                jr      z,.SignHL
 375+ 9728 E6 7F        .NegativeDE:            and     $7F
 376+ 972A 57                                   ld      d,a
 377+ 972B 3E 80                                ld      a,$80
 378+ 972D 32 1D 97                             ld      (mulDEbyHLSignByte),a
 379+ 9730 7C           .SignHL:                ld      a,h
 380+ 9731 ED 27 80                             test    $80
 381+ 9734 28 0B                                jr      z,.AbsoluteMultiply
 382+ 9736 E6 7F        .NegativeHL:            and     $7F
 383+ 9738 67                                   ld      h,a
 384+ 9739 3A 1D 97                             ld      a,(mulDEbyHLSignByte)
 385+ 973C EE 80                                xor     $80
 386+ 973E 32 1D 97                             ld      (mulDEbyHLSignByte),a
 387+ 9741 CD A2 96     .AbsoluteMultiply:      call    mulDEbyHL
 388+ 9744 3A 1D 97     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 389+ 9747 ED 27 80                             test    $80
 390+ 974A C8                                   ret     z
 391+ 974B AF           .Negateghl: 			xor 	a
 392+ 974C 95                                   sub 	l
 393+ 974D 6F                                   ld 		l,a
 394+ 974E 9F                                   sbc 	a,a
 395+ 974F 94                                   sub 	h
 396+ 9750 67                                   ld 		h,a
 397+ 9751 C9                                   ret
 398+ 9752
 399+ 9752 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 400+ 9753 32 1D 97                             ld      (mulDEbyHLSignByte),a
 401+ 9756 7A           .SignDE:                ld      a,d
 402+ 9757 ED 27 80                             test    $80
 403+ 975A 28 08                                jr      z,.AbsoluteMultiply
 404+ 975C E6 7F        .NegativeDE:            and     $7F
 405+ 975E 57                                   ld      d,a
 406+ 975F 3E 80                                ld      a,$80
 407+ 9761 32 1D 97                             ld      (mulDEbyHLSignByte),a
 408+ 9764 CD A2 96     .AbsoluteMultiply:      call    mulDEbyHL
 409+ 9767 3A 1D 97     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 410+ 976A ED 27 80                             test    $80
 411+ 976D C8                                   ret     z
 412+ 976E AF           .Negateghl:             xor 	a
 413+ 976F 95                                   sub 	l
 414+ 9770 6F                                   ld 		l,a
 415+ 9771 9F                                   sbc 	a,a
 416+ 9772 94                                   sub 	h
 417+ 9773 67                                   ld 		h,a
 418+ 9774 C9                                   ret
 419+ 9775
 420+ 9775
# file closed: ./Maths/multiply.asm
 611  9775                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ 9775              ; "ASM_SQUA : TESTGOOD"
   2+ 9775              ; "AP = A^2 A = low,P = hi"
   3+ 9775
   4+ 9775              inline_squde: MACRO
   5+ 9775 ~            			ld	e,a
   6+ 9775 ~            			ld  d,a
   7+ 9775 ~            			mul
   8+ 9775              			ENDM
   9+ 9775
  10+ 9775              inline_squa: MACRO
  11+ 9775 ~            			ld	e,a
  12+ 9775 ~            			ld  d,a
  13+ 9775 ~            			mul
  14+ 9775 ~            			ld	a,e
  15+ 9775              			ENDM
  16+ 9775
# file closed: ./Maths/asm_square.asm
 612  9775                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ 9775              ; "ASM SQRT : TESTGOOD"
   2+ 9775              ; "16-bit integer square root"
   3+ 9775              ; "call with de = number to square root"
   4+ 9775              ; "returns   hl = square root"
   5+ 9775              ; "corrupts  bc, de"
   6+ 9775              asm_sqrt:
   7+ 9775 01 00 80     	ld bc,$8000
   8+ 9778 61           	ld h,c
   9+ 9779 69           	ld l,c
  10+ 977A              .sqrloop:
  11+ 977A CB 38        	srl b
  12+ 977C CB 19        	rr c
  13+ 977E 09           	add hl,bc
  14+ 977F EB           	ex de,hl
  15+ 9780 ED 52        	sbc hl,de
  16+ 9782 38 04        	jr c,.sqrbit
  17+ 9784 EB           	ex de,hl
  18+ 9785 09           	add hl,bc
  19+ 9786 18 05        	jr .sqrfi
  20+ 9788              .sqrbit:
  21+ 9788 19           	add hl,de
  22+ 9789 EB           	ex de,hl
  23+ 978A B7           	or a
  24+ 978B ED 42        	sbc hl,bc
  25+ 978D              .sqrfi:
  26+ 978D CB 3C        	srl h
  27+ 978F CB 1D        	rr l
  28+ 9791 CB 38        	srl b
  29+ 9793 CB 19        	rr c
  30+ 9795 30 E3        	jr nc,.sqrloop
  31+ 9797 C9           	ret
  32+ 9798
  33+ 9798
  34+ 9798              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ 9798 3A 9C 83     	ld		a,(varQ)
  36+ 979B 5F           	ld		e,a
  37+ 979C 3A 9D 83     	ld		a,(varR)
  38+ 979F 57           	ld		d,a
  39+ 97A0 CD 75 97     	call	asm_sqrt
  40+ 97A3 7D               ld      a,l
  41+ 97A4 32 9C 83     	ld		(varQ),a
  42+ 97A7 C9           	ret
  43+ 97A8
# file closed: ./Maths/asm_sqrt.asm
 613  97A8                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ 97A8
   2+ 97A8
   3+ 97A8
   4+ 97A8              ;
   5+ 97A8              ;   Set flags E to 11111110
   6+ 97A8              ;   Loop:   A << 2
   7+ 97A8              ;           if carry was 0
   8+ 97A8              ;               if a >= D
   9+ 97A8              ;                   A = A - D
  10+ 97A8              ;                   clear carry (probably irrelevant really)
  11+ 97A8              ;           else
  12+ 97A8
  13+ 97A8              ;               sla flags << bringing in carry of 1
  14+ 97A8              ;               if bit 7 of flag was set then loop
  15+ 97A8              ;                                        elase a = e and exit
  16+ 97A8              ;
  17+ 97A8              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop BC/DE ==> BC, remainder in HL
  18+ 97A8              ;
  19+ 97A8              ;INPUTS: hl = dividend dbc = divisor
  20+ 97A8              ;OUTPUTS: hl/de -> AHL = quotient CDE = remainder, Carryflag set if divide by 0
  21+ 97A8
  22+ 97A8 57           DVIDT:                  ld      d,a                     ; D = var P+1
  23+ 97A9 3A 9C 83                             ld      a,(varQ)
  24+ 97AC 4F                                   ld      c,a                     ; C = var Q
  25+ 97AD 3A 9A 82                             ld      a,(varP)
  26+ 97B0 5F                                   ld      e,a                     ; E = var P
  27+ 97B1                                      ; Need fast exists on ABS values
  28+ 97B1 7A           BAequDEdivC:            ld      a,d                     ; Fast exit is value is 0
  29+ 97B2 B3                                   or      e                       ; .
  30+ 97B3 28 2A                                jr      z,.ResultIsZero         ; .
  31+ 97B5 79                                   ld      a,c                     ; Fast exit is divide by 0
  32+ 97B6 A7                                   and     a                       ;
  33+ 97B7 28 29                                jr      z,.ResultIsFFFF         ;
  34+ 97B9 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
  35+ 97BA A9                                   xor     c                       ;
  36+ 97BB E6 80                                and     $80
  37+ 97BD 6F                                   ld      l,a                     ; l = var T
  38+ 97BE 3E 00                                ld      a,0
  39+ 97C0 06 10                                ld      b,16
  40+ 97C2                                      ShiftDELeft1
  40+ 97C2 CB 23       >			   sla e
  40+ 97C4 CB 12       >			   rl  d
  41+ 97C6 CB 21                                sla     c                       ; c = abs c
  42+ 97C8 CB 39                                srl     c
  43+ 97CA CB 17        .DivideLoop:            rl      a
  44+ 97CC                                      JumpIfALTNusng c, .SkipSubtract
  44+ 97CC B9          >                        cp      c
  44+ 97CD DA D3 97    >                        jp		c, .SkipSubtract
  45+ 97D0                                      ClearCarryFlag
  45+ 97D0 B7          >                        or a
  46+ 97D1 99                                   sbc     c
  47+ 97D2                                      ClearCarryFlag
  47+ 97D2 B7          >                        or a
  48+ 97D3 3F           .SkipSubtract:          ccf
  49+ 97D4 CB 13                                rl      e
  50+ 97D6 CB 12                                rl      d
  51+ 97D8 05                                   dec     b
  52+ 97D9 20 EF                                jr      nz,.DivideLoop
  53+ 97DB 7B                                   ld      a,e
  54+ 97DC B5                                   or      l
  55+ 97DD 42                                   ld      b,d
  56+ 97DE C9                                   ret
  57+ 97DF              .ResultIsZero:          ZeroA
  57+ 97DF AF          >                        xor a
  58+ 97E0 47                                   ld      b,a
  59+ 97E1 C9                                   ret
  60+ 97E2 3E FF        .ResultIsFFFF:          ld      a,$FF
  61+ 97E4 47                                   ld      b,a
  62+ 97E5 C9                                   ret
  63+ 97E6
  64+ 97E6 57           DIV96:                  ld      d,a                     ; D = var P+1
  65+ 97E7 3A 9C 83                             ld      a,(varQ)
  66+ 97EA 0E 60                                ld      c,96                    ; C = var Q
  67+ 97EC 3A 9A 82                             ld      a,(varP)
  68+ 97EF 5F                                   ld      e,a                     ; E = var P
  69+ 97F0                                      ; Need fast exists on ABS values
  70+ 97F0 7A           BAequDEdiv96            ld      a,d                     ; Fast exit is value is 0
  71+ 97F1 B3                                   or      e                       ; .
  72+ 97F2 28 26                                jr      z,.ResultIsZero         ; .
  73+ 97F4 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
  74+ 97F5 A9                                   xor     c                       ;
  75+ 97F6 E6 80                                and     $80
  76+ 97F8 6F                                   ld      l,a                     ; l = var T
  77+ 97F9 3E 00                                ld      a,0
  78+ 97FB 06 10                                ld      b,16
  79+ 97FD                                      ShiftDELeft1
  79+ 97FD CB 23       >			   sla e
  79+ 97FF CB 12       >			   rl  d
  80+ 9801 CB 21                                sla     c                       ; c = abs c
  81+ 9803 CB 39                                srl     c
  82+ 9805 CB 17        .DivideLoop:            rl      a
  83+ 9807                                      JumpIfALTNusng c, .SkipSubtract
  83+ 9807 B9          >                        cp      c
  83+ 9808 DA 0E 98    >                        jp		c, .SkipSubtract
  84+ 980B                                      ClearCarryFlag
  84+ 980B B7          >                        or a
  85+ 980C 99                                   sbc     c
  86+ 980D                                      ClearCarryFlag
  86+ 980D B7          >                        or a
  87+ 980E 3F           .SkipSubtract:          ccf
  88+ 980F CB 13                                rl      e
  89+ 9811 CB 12                                rl      d
  90+ 9813 05                                   dec     b
  91+ 9814 20 EF                                jr      nz,.DivideLoop
  92+ 9816 7B                                   ld      a,e
  93+ 9817 B5                                   or      l
  94+ 9818 42                                   ld      b,d
  95+ 9819 C9                                   ret
  96+ 981A              .ResultIsZero:          ZeroA
  96+ 981A AF          >                        xor a
  97+ 981B 47                                   ld      b,a
  98+ 981C C9                                   ret
  99+ 981D
 100+ 981D 14           Div16by24usgn:          inc     d                           ; can we fast retu
 101+ 981E 15                                   dec     d
 102+ 981F 20 13                                jr      nz,.ResultZero
 103+ 9821 50 59                                ld      de,bc                       ; so prep for bc/de
 104+ 9823 44 4D                                ld      bc,hl
 105+ 9825 7A           .div16by16usng:         ld      a,d
 106+ 9826 B3                                   or      e
 107+ 9827 28 10                                jr      z,.DivideByZero
 108+ 9829 14                                   inc     d
 109+ 982A 15                                   dec     d
 110+ 982B CD B0 99                             call    BC_Div_DE
 111+ 982E                                      ZeroA
 111+ 982E AF          >                        xor a
 112+ 982F EB                                   ex      de,hl                       ; de = remainder (need to fix c after hl = nothing of worth)
 113+ 9830 60 69                                ld      hl,bc                       ; hl = result (a is zero from above)
 114+ 9832 4F                                   ld      c,a                         ; now fix c
 115+ 9833 C9                                   ret
 116+ 9834 AF           .ResultZero:            xor     a                           ; set AHL to 0 as d was 0 so h is zero
 117+ 9835 4F                                   ld      c,a                         ; c = 0
 118+ 9836 67                                   ld      h,a
 119+ 9837 6F                                   ld      l,a
 120+ 9838 C9                                   ret
 121+ 9839 3E FF        .DivideByZero:          ld      a,$FF
 122+ 983B 67                                   ld      h,a
 123+ 983C 6F                                   ld      l,a
 124+ 983D                                      SetCarryFlag
 124+ 983D 37          >                        scf
 125+ 983E C9                                   ret
 126+ 983F
 127+ 983F              ;DIVD4 P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
 128+ 983F 06 08        HLEquAmul256DivD:       ld		b,8							; counter
 129+ 9841 CB 27                                sla		a							;
 130+ 9843 67                                   ld		h,a							; r a * 2 we will build result in hl
 131+ 9844 CB 17        .DivideLoop:            rl		a							; a = a * 2
 132+ 9846 38 03                                jr      c,.StraightToSubtraction    ; jump on carry to subtraction
 133+ 9848 BA                                   cp      d                           ; what was var Q
 134+ 9849 38 03                                jr		c,.SkipSubtraction	        ; if a < d skip subtraction, note this will come to skip subtraction with carry the wrong way round
 135+ 984B              .StraightToSubtraction: ClearCarryFlag                      ; in 6502 the borrow flag is inverted carry, z80 just uses carry so we need to clear it
 135+ 984B B7          >                        or a
 136+ 984C 9A                                   sbc     a,d                         ; a = a - q
 137+ 984D                                      ClearCarryFlag                      ; set carry so it gets shifted into bit 0 of b. we do this as we have to flip carry due to jr c from earlier cp d
 137+ 984D B7          >                        or a
 138+ 984E 3F           .SkipSubtraction:       ccf                                 ; we need to do this as 6502 does opposite on carry, i.e. if we jumped direct here then carry would be set in z80
 139+ 984F CB 14                                rl      h                           ; roll d left bringing in carry if there was an sbc performed
 140+ 9851 10 F1                                djnz    .DivideLoop                 ; 8 cycles
 141+ 9853 BA           .CalculateRemainder:    cp      d                           ; calulate 256 * a / d if q >= q then answer will not fit in one byte d is still set, a holds remainder to be subtracted
 142+ 9854 30 19                                jr      nc, .RemainderTooBig
 143+ 9856                                      ClearCarryFlag                      ; remove carry as the previous cp will have set it and mess up the sla in the remainder loop
 143+ 9856 B7          >                        or a
 144+ 9857 06 FE        .InitRemainderLoop:     ld      b,%11111110                 ; loop for bits 1 to 7
 145+ 9859 68                                   ld      l,b                         ; and set l to capture result bits (R)
 146+ 985A CB 27        .RemainderLoop:         sla     a                           ; shift a left
 147+ 985C 38 0A                                jr      c, .RemainderSubtraction    ; if there was a carry go to subtraction
 148+ 985E BA                                   cp      d                           ; if a < d then skip subtraction
 149+ 985F 38 01                                jr      c,.RemainderSkipSubtract    ; .
 150+ 9861 9A                                   sbc     d                           ; a > q so a = a - q, carry will be clear here
 151+ 9862 3F           .RemainderSkipSubtract: ccf                                 ; as the jr used z80 we need to flip the carry to behave like 6502
 152+ 9863 CB 15                                rl      l                           ; rotate counter to the left
 153+ 9865 38 F3                                jr      c, .RemainderLoop           ; if there was a bit pushed to carry then loop
 154+ 9867 C9                                   ret
 155+ 9868 9A           .RemainderSubtraction:  sbc     d                           ; as the carry came from an sla we want to retain it
 156+ 9869                                      SetCarryFlag                        ; roll in a carry bit to result
 156+ 9869 37          >                        scf
 157+ 986A CB 15                                rl      l                           ;
 158+ 986C 38 EC                                jr      c, .RemainderLoop           ; and loop if there was a carry bit that came out
 159+ 986E C9                                   ret
 160+ 986F 2E FF        .RemainderTooBig:       ld      l,$FF                       ; now hl = result
 161+ 9871 C9                                   ret
 162+ 9872
 163+ 9872 BA           AEquAmul256DivD:        cp      d
 164+ 9873 28 1D                                jr      z,.BothSame
 165+ 9875 30 1E                                jr      nc,.DgtA
 166+ 9877 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
 167+ 9879 CB 27        .DivideLoop:            sla     a
 168+ 987B 38 0D                                jr      c,.LL29
 169+ 987D                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
 169+ 987D BA          >                        cp      d
 169+ 987E DA 83 98    >                        jp		c, .SkipSub
 170+ 9881 92                                   sub     d
 171+ 9882                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
 171+ 9882 B7          >                        or a
 172+ 9883              .SkipSub:               FlipCarryFlag                       ; if we did the subtract the carry will be clear so we need to invert to roll in.
 172+ 9883 3F          >                        ccf
 173+ 9884 CB 13                                rl      e
 174+ 9886 38 F1                                jr      c,.DivideLoop
 175+ 9888 7B                                   ld      a,e
 176+ 9889 C9                                   ret
 177+ 988A 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
 178+ 988B                                      SetCarryFlag                        ; Set the C flag to rotate into the result in R
 178+ 988B 37          >                        scf
 179+ 988C CB 13                                rl      e                           ; rotate counter e left
 180+ 988E 38 E9                                jr      c,.DivideLoop               ; if a bit was spat off teh end then loop
 181+ 9890 7B                                   ld      a,e                         ; stick result in a
 182+ 9891 C9                                   ret
 183+ 9892 3E 01        .BothSame:              ld  a,1
 184+ 9894 C9                                   ret
 185+ 9895 3E FF        .DgtA:                  ld  a,255                           ; Fail with FF as result
 186+ 9897 C9                                   ret
 187+ 9898
 188+ 9898
 189+ 9898              ; Divide 8-bit values
 190+ 9898              ; In: Divide E by divider C
 191+ 9898              ; Out: A = result, B = rest
 192+ 9898              ;
 193+ 9898              ;;;Div8:
 194+ 9898              ;;;    xor a
 195+ 9898              ;;;    ld b,8
 196+ 9898              ;;;Div8_Loop:
 197+ 9898              ;;;    rl e
 198+ 9898              ;;;    rla
 199+ 9898              ;;;    sub c
 200+ 9898              ;;;    jr nc,Div8_NoAdd
 201+ 9898              ;;;    add a,c
 202+ 9898              ;;;Div8_NoAdd:
 203+ 9898              ;;;    djnz Div8_Loop
 204+ 9898              ;;;    ld b,a0
 205+ 9898              ;;;    ld a,e
 206+ 9898              ;;;    rla
 207+ 9898              ;;;    cpl
 208+ 9898              ;;;    ret
 209+ 9898
 210+ 9898              ;;Inputs: DE is the numerator, BC is the divisor
 211+ 9898              ;;Outputs: DE is the result
 212+ 9898              ;;         A is a copy of E
 213+ 9898              ;;         HL is the remainder
 214+ 9898              ;;         BC is not changed
 215+ 9898              ;; so DE = DE /BC
 216+ 9898              ;140 bytes
 217+ 9898              ;145cc
 218+ 9898
 219+ 9898              MacroDEDivBC:       MACRO
 220+ 9898 ~                                rla
 221+ 9898 ~                                adc     hl,hl
 222+ 9898 ~                                sbc     hl,bc
 223+ 9898 ~                                jr      nc,$+3
 224+ 9898 ~                                add     hl,bc
 225+ 9898                                  ENDM
 226+ 9898
 227+ 9898              DEequDEDivBC:
 228+ 9898 AF               xor a
 229+ 9899 ED 62            sbc hl,hl
 230+ 989B 7A               ld a,d
 231+ 989C                  MacroDEDivBC
 231+ 989C 17          >                    rla
 231+ 989D ED 6A       >                    adc     hl,hl
 231+ 989F ED 42       >                    sbc     hl,bc
 231+ 98A1 30 01       >                    jr      nc,$+3
 231+ 98A3 09          >                    add     hl,bc
 232+ 98A4                  MacroDEDivBC
 232+ 98A4 17          >                    rla
 232+ 98A5 ED 6A       >                    adc     hl,hl
 232+ 98A7 ED 42       >                    sbc     hl,bc
 232+ 98A9 30 01       >                    jr      nc,$+3
 232+ 98AB 09          >                    add     hl,bc
 233+ 98AC                  MacroDEDivBC
 233+ 98AC 17          >                    rla
 233+ 98AD ED 6A       >                    adc     hl,hl
 233+ 98AF ED 42       >                    sbc     hl,bc
 233+ 98B1 30 01       >                    jr      nc,$+3
 233+ 98B3 09          >                    add     hl,bc
 234+ 98B4                  MacroDEDivBC
 234+ 98B4 17          >                    rla
 234+ 98B5 ED 6A       >                    adc     hl,hl
 234+ 98B7 ED 42       >                    sbc     hl,bc
 234+ 98B9 30 01       >                    jr      nc,$+3
 234+ 98BB 09          >                    add     hl,bc
 235+ 98BC                  MacroDEDivBC
 235+ 98BC 17          >                    rla
 235+ 98BD ED 6A       >                    adc     hl,hl
 235+ 98BF ED 42       >                    sbc     hl,bc
 235+ 98C1 30 01       >                    jr      nc,$+3
 235+ 98C3 09          >                    add     hl,bc
 236+ 98C4                  MacroDEDivBC
 236+ 98C4 17          >                    rla
 236+ 98C5 ED 6A       >                    adc     hl,hl
 236+ 98C7 ED 42       >                    sbc     hl,bc
 236+ 98C9 30 01       >                    jr      nc,$+3
 236+ 98CB 09          >                    add     hl,bc
 237+ 98CC                  MacroDEDivBC
 237+ 98CC 17          >                    rla
 237+ 98CD ED 6A       >                    adc     hl,hl
 237+ 98CF ED 42       >                    sbc     hl,bc
 237+ 98D1 30 01       >                    jr      nc,$+3
 237+ 98D3 09          >                    add     hl,bc
 238+ 98D4                  MacroDEDivBC
 238+ 98D4 17          >                    rla
 238+ 98D5 ED 6A       >                    adc     hl,hl
 238+ 98D7 ED 42       >                    sbc     hl,bc
 238+ 98D9 30 01       >                    jr      nc,$+3
 238+ 98DB 09          >                    add     hl,bc
 239+ 98DC 17               rla
 240+ 98DD 2F               cpl
 241+ 98DE 57               ld d,a
 242+ 98DF
 243+ 98DF 7B               ld a,e
 244+ 98E0                  MacroDEDivBC
 244+ 98E0 17          >                    rla
 244+ 98E1 ED 6A       >                    adc     hl,hl
 244+ 98E3 ED 42       >                    sbc     hl,bc
 244+ 98E5 30 01       >                    jr      nc,$+3
 244+ 98E7 09          >                    add     hl,bc
 245+ 98E8                  MacroDEDivBC
 245+ 98E8 17          >                    rla
 245+ 98E9 ED 6A       >                    adc     hl,hl
 245+ 98EB ED 42       >                    sbc     hl,bc
 245+ 98ED 30 01       >                    jr      nc,$+3
 245+ 98EF 09          >                    add     hl,bc
 246+ 98F0                  MacroDEDivBC
 246+ 98F0 17          >                    rla
 246+ 98F1 ED 6A       >                    adc     hl,hl
 246+ 98F3 ED 42       >                    sbc     hl,bc
 246+ 98F5 30 01       >                    jr      nc,$+3
 246+ 98F7 09          >                    add     hl,bc
 247+ 98F8                  MacroDEDivBC
 247+ 98F8 17          >                    rla
 247+ 98F9 ED 6A       >                    adc     hl,hl
 247+ 98FB ED 42       >                    sbc     hl,bc
 247+ 98FD 30 01       >                    jr      nc,$+3
 247+ 98FF 09          >                    add     hl,bc
 248+ 9900                  MacroDEDivBC
 248+ 9900 17          >                    rla
 248+ 9901 ED 6A       >                    adc     hl,hl
 248+ 9903 ED 42       >                    sbc     hl,bc
 248+ 9905 30 01       >                    jr      nc,$+3
 248+ 9907 09          >                    add     hl,bc
 249+ 9908                  MacroDEDivBC
 249+ 9908 17          >                    rla
 249+ 9909 ED 6A       >                    adc     hl,hl
 249+ 990B ED 42       >                    sbc     hl,bc
 249+ 990D 30 01       >                    jr      nc,$+3
 249+ 990F 09          >                    add     hl,bc
 250+ 9910                  MacroDEDivBC
 250+ 9910 17          >                    rla
 250+ 9911 ED 6A       >                    adc     hl,hl
 250+ 9913 ED 42       >                    sbc     hl,bc
 250+ 9915 30 01       >                    jr      nc,$+3
 250+ 9917 09          >                    add     hl,bc
 251+ 9918                  MacroDEDivBC
 251+ 9918 17          >                    rla
 251+ 9919 ED 6A       >                    adc     hl,hl
 251+ 991B ED 42       >                    sbc     hl,bc
 251+ 991D 30 01       >                    jr      nc,$+3
 251+ 991F 09          >                    add     hl,bc
 252+ 9920 17               rla
 253+ 9921 2F               cpl
 254+ 9922 5F               ld e,a
 255+ 9923 C9               ret
 256+ 9924
 257+ 9924
 258+ 9924
 259+ 9924              ;divdide by 16 using undocumented instrunctions
 260+ 9924              ;Input: BC = Dividend, DE = Divisor, HL = 0
 261+ 9924              ;Output: BC = Quotient, HL = Remainder
 262+ 9924              ; Our use
 263+ 9924              ; BC = A0
 264+ 9924              ; DE = 0C
 265+ 9924              ; so BC = a * 256 / C
 266+ 9924              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
 266+ 9924 B9          >                        cp     c
 266+ 9925 D2 50 99    >                        jp		nc,DEV16ATooLarge
 267+ 9928 47                                   ld      b,a
 268+ 9929 59                                   ld      e,c
 269+ 992A 0E 00                                ld      c,0
 270+ 992C 16 00                                ld      d,0
 271+ 992E C3 3B 99                             jp      DIV16UNDOC
 272+ 9931 47           DIV16Amul256dQUNDOC:    ld      b,a
 273+ 9932 0E 00                                ld      c,0
 274+ 9934 21 9C 83                             ld      hl,varQ
 275+ 9937 7E                                   ld      a,(hl)
 276+ 9938 16 00                                ld      d,0
 277+ 993A 5F                                   ld      e,a
 278+ 993B              DIV16BCDivDEUNDOC:
 279+ 993B 21 00 00     DIV16UNDOC:             ld      hl,0
 280+ 993E 78                                   ld      a,b
 281+ 993F 06 10                                ld      b,16
 282+ 9941 CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
 283+ 9943 17                                   rla			; ...
 284+ 9944 ED 6A                                adc	hl,hl		; ...
 285+ 9946 ED 52                                sbc	hl,de		; ...
 286+ 9948 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
 287+ 994A 19                                   add	hl,de		; ...
 288+ 994B 0D                                   dec	c		; ...
 289+ 994C 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 290+ 994E 47                                   ld   b,a
 291+ 994F C9                                   ret
 292+ 9950 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 293+ 9953 C9                                   ret
 294+ 9954              ; switch to logarithm version
 295+ 9954              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 296+ 9954 06 08        asm_div8:               ld b,8
 297+ 9956 AF                                   xor a
 298+ 9957 CB 21        .div8_loop:	            sla c
 299+ 9959 17                                   rla
 300+ 995A BA                                   cp d
 301+ 995B 38 02                                jr c,.div8_skip
 301+ 995D
 302+ 995D 0C                                   inc c
 303+ 995E 92                                   sub d
 304+ 995F 10 F6        .div8_skip:	            djnz .div8_loop
 305+ 9961 C9                                   ret
 306+ 9962              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 307+ 9962 06 10        asm_div16:              ld b,16
 308+ 9964 AF                                   xor a
 309+ 9965 CB 25        div16_loop:	            sla l
 310+ 9967 CB 14                                rl	h
 311+ 9969              ;    add hl,hl
 312+ 9969 17                                   rla
 313+ 996A B9                                   cp c
 314+ 996B 38 02                                jr c,div16_skip
 315+ 996D 2C                                   inc l
 316+ 996E 91                                   sub c
 317+ 996F 10 F4        div16_skip:		        djnz div16_loop
 318+ 9971 C9                                   ret
 319+ 9972              ;
 320+ 9972              ; Divide 16-bit values (with 16-bit result)
 321+ 9972              ; In: Divide BC by divider DE
 322+ 9972              ; Out: BC = result, HL = rest
 323+ 9972              ;
 324+ 9972              HLDivC_Iteration: 	    MACRO
 325+ 9972 ~                                    add	hl,hl		; unroll 16 times
 326+ 9972 ~                                    rla				; ...
 327+ 9972 ~                                    cp	c			; ...
 328+ 9972 ~                                    jr	1F
 329+ 9972 ~                                    sub	c			; ...
 330+ 9972 ~            1:
 331+ 9972 ~                                    inc	l			; ...
 332+ 9972                                      ENDM
 333+ 9972
 334+ 9972              EDivC_Iteration:        MACRO
 335+ 9972 ~                                    rl  e
 336+ 9972 ~                                    rla
 337+ 9972 ~                                    sub c
 338+ 9972 ~                                    jr  nc,.Div8_NoAdd
 339+ 9972 ~                                    add a,c
 340+ 9972 ~            .Div8_NoAdd:
 341+ 9972                                      ENDM
 342+ 9972
 343+ 9972              ; Switch to a logarithm version
 344+ 9972              ; Divide E by divider C Out: A = result, B = rest
 345+ 9972              E_Div_C:                ZeroA
 345+ 9972 AF          >                        xor a
 346+ 9973                                      EDivC_Iteration
 346+ 9973 CB 13       >                        rl  e
 346+ 9975 17          >                        rla
 346+ 9976 91          >                        sub c
 346+ 9977 30 01       >                        jr  nc,.Div8_NoAdd
 346+ 9979 81          >                        add a,c
 346+ 997A             >.Div8_NoAdd:
 347+ 997A                                      EDivC_Iteration
 347+ 997A CB 13       >                        rl  e
 347+ 997C 17          >                        rla
 347+ 997D 91          >                        sub c
 347+ 997E 30 01       >                        jr  nc,.Div8_NoAdd
 347+ 9980 81          >                        add a,c
 347+ 9981             >.Div8_NoAdd:
 348+ 9981                                      EDivC_Iteration
 348+ 9981 CB 13       >                        rl  e
 348+ 9983 17          >                        rla
 348+ 9984 91          >                        sub c
 348+ 9985 30 01       >                        jr  nc,.Div8_NoAdd
 348+ 9987 81          >                        add a,c
 348+ 9988             >.Div8_NoAdd:
 349+ 9988                                      EDivC_Iteration
 349+ 9988 CB 13       >                        rl  e
 349+ 998A 17          >                        rla
 349+ 998B 91          >                        sub c
 349+ 998C 30 01       >                        jr  nc,.Div8_NoAdd
 349+ 998E 81          >                        add a,c
 349+ 998F             >.Div8_NoAdd:
 350+ 998F                                      EDivC_Iteration
 350+ 998F CB 13       >                        rl  e
 350+ 9991 17          >                        rla
 350+ 9992 91          >                        sub c
 350+ 9993 30 01       >                        jr  nc,.Div8_NoAdd
 350+ 9995 81          >                        add a,c
 350+ 9996             >.Div8_NoAdd:
 351+ 9996                                      EDivC_Iteration
 351+ 9996 CB 13       >                        rl  e
 351+ 9998 17          >                        rla
 351+ 9999 91          >                        sub c
 351+ 999A 30 01       >                        jr  nc,.Div8_NoAdd
 351+ 999C 81          >                        add a,c
 351+ 999D             >.Div8_NoAdd:
 352+ 999D                                      EDivC_Iteration
 352+ 999D CB 13       >                        rl  e
 352+ 999F 17          >                        rla
 352+ 99A0 91          >                        sub c
 352+ 99A1 30 01       >                        jr  nc,.Div8_NoAdd
 352+ 99A3 81          >                        add a,c
 352+ 99A4             >.Div8_NoAdd:
 353+ 99A4                                      EDivC_Iteration
 353+ 99A4 CB 13       >                        rl  e
 353+ 99A6 17          >                        rla
 353+ 99A7 91          >                        sub c
 353+ 99A8 30 01       >                        jr  nc,.Div8_NoAdd
 353+ 99AA 81          >                        add a,c
 353+ 99AB             >.Div8_NoAdd:
 354+ 99AB 47                                   ld      b,a
 355+ 99AC 7B                                   ld      a,e
 356+ 99AD 17                                   rla
 357+ 99AE 2F                                   cpl
 358+ 99AF C9                                   ret
 359+ 99B0
 360+ 99B0
 361+ 99B0              BCDIVDE_Iteration:      MACRO
 362+ 99B0 ~                                    rla
 363+ 99B0 ~                                    adc	    hl,hl
 364+ 99B0 ~                                    add	    hl,de
 365+ 99B0 ~                                    jr	    c,1F
 366+ 99B0 ~                                    sbc	    hl,de
 367+ 99B0 ~            1:
 368+ 99B0                                      ENDM
 369+ 99B0
 370+ 99B0
 371+ 99B0              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 372+ 99B0              ;BC/DE ==> BC, remainder in HL
 373+ 99B0              ;NOTE: BC/0 returns 0 as the quotient.
 374+ 99B0              ;min: 738cc
 375+ 99B0              ;max: 898cc
 376+ 99B0              ;avg: 818cc
 377+ 99B0              ;144 bytes
 378+ 99B0 AF           BC_Div_DE:              xor a
 379+ 99B1 67                                   ld h,a
 380+ 99B2 6F                                   ld l,a
 381+ 99B3 93                                   sub e
 382+ 99B4 5F                                   ld e,a
 383+ 99B5 9F                                   sbc a,a
 384+ 99B6 92                                   sub d
 385+ 99B7 57                                   ld d,a
 386+ 99B8 78                                   ld a,b
 387+ 99B9                                      BCDIVDE_Iteration
 387+ 99B9 17          >                        rla
 387+ 99BA ED 6A       >                        adc	    hl,hl
 387+ 99BC 19          >                        add	    hl,de
 387+ 99BD 38 02       >                        jr	    c,1F
 387+ 99BF ED 52       >                        sbc	    hl,de
 387+ 99C1             >1:
 388+ 99C1                                      BCDIVDE_Iteration
 388+ 99C1 17          >                        rla
 388+ 99C2 ED 6A       >                        adc	    hl,hl
 388+ 99C4 19          >                        add	    hl,de
 388+ 99C5 38 02       >                        jr	    c,1F
 388+ 99C7 ED 52       >                        sbc	    hl,de
 388+ 99C9             >1:
 389+ 99C9                                      BCDIVDE_Iteration
 389+ 99C9 17          >                        rla
 389+ 99CA ED 6A       >                        adc	    hl,hl
 389+ 99CC 19          >                        add	    hl,de
 389+ 99CD 38 02       >                        jr	    c,1F
 389+ 99CF ED 52       >                        sbc	    hl,de
 389+ 99D1             >1:
 390+ 99D1                                      BCDIVDE_Iteration
 390+ 99D1 17          >                        rla
 390+ 99D2 ED 6A       >                        adc	    hl,hl
 390+ 99D4 19          >                        add	    hl,de
 390+ 99D5 38 02       >                        jr	    c,1F
 390+ 99D7 ED 52       >                        sbc	    hl,de
 390+ 99D9             >1:
 391+ 99D9                                      BCDIVDE_Iteration
 391+ 99D9 17          >                        rla
 391+ 99DA ED 6A       >                        adc	    hl,hl
 391+ 99DC 19          >                        add	    hl,de
 391+ 99DD 38 02       >                        jr	    c,1F
 391+ 99DF ED 52       >                        sbc	    hl,de
 391+ 99E1             >1:
 392+ 99E1                                      BCDIVDE_Iteration
 392+ 99E1 17          >                        rla
 392+ 99E2 ED 6A       >                        adc	    hl,hl
 392+ 99E4 19          >                        add	    hl,de
 392+ 99E5 38 02       >                        jr	    c,1F
 392+ 99E7 ED 52       >                        sbc	    hl,de
 392+ 99E9             >1:
 393+ 99E9                                      BCDIVDE_Iteration
 393+ 99E9 17          >                        rla
 393+ 99EA ED 6A       >                        adc	    hl,hl
 393+ 99EC 19          >                        add	    hl,de
 393+ 99ED 38 02       >                        jr	    c,1F
 393+ 99EF ED 52       >                        sbc	    hl,de
 393+ 99F1             >1:
 394+ 99F1                                      BCDIVDE_Iteration
 394+ 99F1 17          >                        rla
 394+ 99F2 ED 6A       >                        adc	    hl,hl
 394+ 99F4 19          >                        add	    hl,de
 394+ 99F5 38 02       >                        jr	    c,1F
 394+ 99F7 ED 52       >                        sbc	    hl,de
 394+ 99F9             >1:
 395+ 99F9 17                                   rla
 396+ 99FA 47                                   ld b,a
 397+ 99FB 79                                   ld a,c
 398+ 99FC                                      BCDIVDE_Iteration
 398+ 99FC 17          >                        rla
 398+ 99FD ED 6A       >                        adc	    hl,hl
 398+ 99FF 19          >                        add	    hl,de
 398+ 9A00 38 02       >                        jr	    c,1F
 398+ 9A02 ED 52       >                        sbc	    hl,de
 398+ 9A04             >1:
 399+ 9A04                                      BCDIVDE_Iteration
 399+ 9A04 17          >                        rla
 399+ 9A05 ED 6A       >                        adc	    hl,hl
 399+ 9A07 19          >                        add	    hl,de
 399+ 9A08 38 02       >                        jr	    c,1F
 399+ 9A0A ED 52       >                        sbc	    hl,de
 399+ 9A0C             >1:
 400+ 9A0C                                      BCDIVDE_Iteration
 400+ 9A0C 17          >                        rla
 400+ 9A0D ED 6A       >                        adc	    hl,hl
 400+ 9A0F 19          >                        add	    hl,de
 400+ 9A10 38 02       >                        jr	    c,1F
 400+ 9A12 ED 52       >                        sbc	    hl,de
 400+ 9A14             >1:
 401+ 9A14                                      BCDIVDE_Iteration
 401+ 9A14 17          >                        rla
 401+ 9A15 ED 6A       >                        adc	    hl,hl
 401+ 9A17 19          >                        add	    hl,de
 401+ 9A18 38 02       >                        jr	    c,1F
 401+ 9A1A ED 52       >                        sbc	    hl,de
 401+ 9A1C             >1:
 402+ 9A1C                                      BCDIVDE_Iteration
 402+ 9A1C 17          >                        rla
 402+ 9A1D ED 6A       >                        adc	    hl,hl
 402+ 9A1F 19          >                        add	    hl,de
 402+ 9A20 38 02       >                        jr	    c,1F
 402+ 9A22 ED 52       >                        sbc	    hl,de
 402+ 9A24             >1:
 403+ 9A24                                      BCDIVDE_Iteration
 403+ 9A24 17          >                        rla
 403+ 9A25 ED 6A       >                        adc	    hl,hl
 403+ 9A27 19          >                        add	    hl,de
 403+ 9A28 38 02       >                        jr	    c,1F
 403+ 9A2A ED 52       >                        sbc	    hl,de
 403+ 9A2C             >1:
 404+ 9A2C                                      BCDIVDE_Iteration
 404+ 9A2C 17          >                        rla
 404+ 9A2D ED 6A       >                        adc	    hl,hl
 404+ 9A2F 19          >                        add	    hl,de
 404+ 9A30 38 02       >                        jr	    c,1F
 404+ 9A32 ED 52       >                        sbc	    hl,de
 404+ 9A34             >1:
 405+ 9A34                                      BCDIVDE_Iteration
 405+ 9A34 17          >                        rla
 405+ 9A35 ED 6A       >                        adc	    hl,hl
 405+ 9A37 19          >                        add	    hl,de
 405+ 9A38 38 02       >                        jr	    c,1F
 405+ 9A3A ED 52       >                        sbc	    hl,de
 405+ 9A3C             >1:
 406+ 9A3C 17                                   rla
 407+ 9A3D 4F                                   ld c,a
 408+ 9A3E C9                                   ret
 409+ 9A3F
# file closed: ./Maths/asm_divide.asm
 614  9A3F                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ 9A3F              asm_tis2:
   2+ 9A3F              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ 9A3F              ; ">DOES NOT DO SIGNED YET"
   4+ 9A3F F5           	push af
   5+ 9A40 E6 7F            and SignMask8Bit
   6+ 9A42 57           	ld d,a				;; d = A
   7+ 9A43 3A 9C 83     	ld a,(varQ)
   8+ 9A46 5F           	ld e,a
   9+ 9A47 7A           	ld a,d
  10+ 9A48 BB           	cp e
  11+ 9A49 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ 9A4B 1E 60        	ld e, 96
  13+ 9A4D ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ 9A4F EB           	ex de,hl
  15+ 9A50 3A 9C 83     	ld a,(varQ)
  16+ 9A53 4F           	ld c,a
  17+ 9A54 CD 62 99     	call asm_div16
  18+ 9A57 F1           	pop af
  19+ 9A58 E6 80        	and $80
  20+ 9A5A B5           	or l
  21+ 9A5B C9           	ret
  22+ 9A5C              .tis2_set96:
  23+ 9A5C F1           	pop af
  24+ 9A5D E6 80        	and $80
  25+ 9A5F F6 96        	or $96
  26+ 9A61 C9           	ret
  27+ 9A62
  28+ 9A62
  29+ 9A62              asm_unit_vector:
  30+ 9A62              squareregfx:
  31+ 9A62 3A A6 C0     	ld a,(UBnkXScaled)
  32+ 9A65 57           	ld d,a
  33+ 9A66 5F           	ld e,a
  34+ 9A67 ED 30        	mul
  35+ 9A69 EB           	ex de,hl
  36+ 9A6A              squareregfy:
  37+ 9A6A 3A A8 C0     	ld a, (UBnkYScaled)
  38+ 9A6D 57           	ld d,a
  39+ 9A6E 5F           	ld e,a
  40+ 9A6F ED 30        	mul
  41+ 9A71 19           	add hl,de
  42+ 9A72              squareregfz:
  43+ 9A72 3A AA C0     	ld a, (UBnkZScaled)
  44+ 9A75 57           	ld d,a
  45+ 9A76 5F           	ld e,a
  46+ 9A77 ED 30        	mul
  47+ 9A79 19           	add hl,de
  48+ 9A7A EB           	ex de,hl			; de de to number to root
  49+ 9A7B              hlequsquareroot:
  50+ 9A7B CD 75 97     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ 9A7E E5           	push hl				; save it for work 3 copies
  52+ 9A7F E5           	push hl				; save it for work
  53+ 9A80 E5           	push hl				; save it for work
  54+ 9A81              normfx:
  55+ 9A81 3A A6 C0     	ld a,(UBnkXScaled)
  56+ 9A84 E1           	pop hl				; get copy #1
  57+ 9A85 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ 9A86 4F           	ld c,a
  59+ 9A87 CD 3F 9A     	call asm_tis2
  60+ 9A8A 32 A6 C0     	ld (UBnkXScaled),a
  61+ 9A8D              normfy:
  62+ 9A8D 3A A8 C0     	ld a,(UBnkYScaled)
  63+ 9A90 E1           	pop hl				; get copy #2
  64+ 9A91 7D           	ld a,l
  65+ 9A92 4F           	ld c,a
  66+ 9A93 CD 3F 9A     	call asm_tis2
  67+ 9A96 32 A8 C0     	ld (UBnkYScaled),a
  68+ 9A99              normfz:
  69+ 9A99 3A AA C0     	ld a,(UBnkZScaled)
  70+ 9A9C E1           	pop hl				; get copy #2
  71+ 9A9D 7D           	ld a,l
  72+ 9A9E 4F           	ld c,a
  73+ 9A9F CD 3F 9A     	call asm_tis2
  74+ 9AA2 32 AA C0     	ld (UBnkZScaled),a
  75+ 9AA5              asm_unit_vector_end:
  76+ 9AA5 C9           	ret
  77+ 9AA6
# file closed: ./Maths/asm_unitvector.asm
 615  9AA6                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ 9AA6              ; Input:
   2+ 9AA6              ;       HL = 1st value
   3+ 9AA6              ;       DE = 2nd value
   4+ 9AA6              ; Output:
   5+ 9AA6              ;       CF, ZF = results of comparison:
   6+ 9AA6              ;
   7+ 9AA6              ;               CF      ZF      Result
   8+ 9AA6              ;               -----------------------------------
   9+ 9AA6              ;               0       0       HL > DE
  10+ 9AA6              ;               0       1       HL == DE
  11+ 9AA6              ;               1       0       HL < DE
  12+ 9AA6              ;               1       1       Impossible
  13+ 9AA6              ;
  14+ 9AA6
  15+ 9AA6 E5           compare16HLDE:      push    hl
  16+ 9AA7 A7                               and     a
  17+ 9AA8 ED 52                            sbc     hl,de
  18+ 9AAA E1                               pop     hl
  19+ 9AAB C9                               ret
  20+ 9AAC
  21+ 9AAC              ; With compare signed we do ABS comparison
  22+ 9AAC              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  23+ 9AAC
  24+ 9AAC E5 D5        compare16HLDEABS:   push    hl,,de
  25+ 9AAE 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  26+ 9AAF E6 7F                            and     SignMask8Bit
  27+ 9AB1 67                               ld      h,a
  28+ 9AB2 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  29+ 9AB3 E6 7F                            and     SignMask8Bit
  30+ 9AB5 57                               ld      d,a
  31+ 9AB6 A7                               and     a
  32+ 9AB7 ED 52                            sbc     hl,de
  33+ 9AB9 D1 E1                            pop     hl,,de
  34+ 9ABB C9                               ret
  35+ 9ABC
  36+ 9ABC
# file closed: ./Maths/compare16.asm
 616  9ABC                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ 9ABC              ;;----------------------------------------------------------------------------------------------------------------------
   2+ 9ABC              ;; 16-bit negate
   3+ 9ABC              negate16:
   4+ 9ABC              negate16hl:
   5+ 9ABC                      ; Input:
   6+ 9ABC                      ;       HL = value
   7+ 9ABC                      ; Output:
   8+ 9ABC                      ;       HL = -value
   9+ 9ABC                      ; Destroys:
  10+ 9ABC                      ;       AF
  11+ 9ABC                      ;
  12+ 9ABC AF           	xor 	a
  13+ 9ABD 95           	sub 	l
  14+ 9ABE 6F           	ld 		l,a
  15+ 9ABF 9F           	sbc 	a,a
  16+ 9AC0 94           	sub 	h
  17+ 9AC1 67           	ld 		h,a
  18+ 9AC2 C9           	ret
  19+ 9AC3
  20+ 9AC3              negate16de:
  21+ 9AC3 AF           	xor 	a
  22+ 9AC4 93           	sub 	e
  23+ 9AC5 5F           	ld 		e,a
  24+ 9AC6 9F           	sbc 	a,a
  25+ 9AC7 92           	sub 	d
  26+ 9AC8 57           	ld 		d,a
  27+ 9AC9 C9           	ret
  28+ 9ACA
  29+ 9ACA              negate16bc:
  30+ 9ACA AF           	xor 	a
  31+ 9ACB 91           	sub 	c
  32+ 9ACC 4F           	ld 		c,a
  33+ 9ACD 9F           	sbc 	a,a
  34+ 9ACE 90           	sub 	b
  35+ 9ACF 47           	ld 		b,a
  36+ 9AD0 C9           	ret
  37+ 9AD1
  38+ 9AD1
  39+ 9AD1              macronegate16hl:	MACRO
  40+ 9AD1 ~            					xor 	a
  41+ 9AD1 ~            					sub 	l
  42+ 9AD1 ~            					ld 		l,a
  43+ 9AD1 ~            					sbc 	a,a
  44+ 9AD1 ~            					sub 	h
  45+ 9AD1 ~            					ld 		h,a
  46+ 9AD1              					ENDM
  47+ 9AD1
  48+ 9AD1              macronegate16de:	MACRO
  49+ 9AD1 ~            					xor 	a
  50+ 9AD1 ~                                sub 	e
  51+ 9AD1 ~                                ld 		e,a
  52+ 9AD1 ~                                sbc 	a,a
  53+ 9AD1 ~                                sub 	d
  54+ 9AD1 ~                                ld 		d,a
  55+ 9AD1              					ENDM
  56+ 9AD1              macronegate16bc:	MACRO
  57+ 9AD1 ~            					xor 	a
  58+ 9AD1 ~                                sub 	c
  59+ 9AD1 ~                                ld 		c,a
  60+ 9AD1 ~                                sbc 	a,a
  61+ 9AD1 ~                                sub 	b
  62+ 9AD1 ~                                ld 		b,a
  63+ 9AD1              					ENDM
  64+ 9AD1
  65+ 9AD1              macronegate16ix:	MACRO
  66+ 9AD1 ~            					xor 	a
  67+ 9AD1 ~                                sub 	ixl
  68+ 9AD1 ~                                ld 		ixl,a
  69+ 9AD1 ~                                sbc 	a,a
  70+ 9AD1 ~                                sub 	ixh
  71+ 9AD1 ~                                ld 		ixh,a
  72+ 9AD1              					ENDM
# file closed: ./Maths/negate16.asm
 617  9AD1                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ 9AD1              ; a equal a / d * 96
   2+ 9AD1
   3+ 9AD1
   4+ 9AD1
   5+ 9AD1              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
   6+ 9AD1 3A A6 C0     normaliseXX1596S7:      ld		a,(XX15VecX)	    ; XX15+0
   7+ 9AD4 DD 67                                ld		ixh,a               ; ixh = signed x component
   8+ 9AD6 E6 7F                                and		SignMask8Bit        ; a = unsigned version
   9+ 9AD8              .n96SQX:	            inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
   9+ 9AD8 5F          >			ld	e,a
   9+ 9AD9 57          >			ld  d,a
   9+ 9ADA ED 30       >			mul
  10+ 9ADC 62                                   ld		h,d					; h == varR d = varO e= varA
  11+ 9ADD 6B                                   ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  12+ 9ADE 3A A7 C0     .n96SQY:                ld		a,(XX15VecY)
  13+ 9AE1 DD 6F                                ld		ixl,a               ; ixl = signed y componet
  14+ 9AE3 E6 7F                                and		SignMask8Bit                 ; = abs
  15+ 9AE5                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  15+ 9AE5 5F          >			ld	e,a
  15+ 9AE6 57          >			ld  d,a
  15+ 9AE7 ED 30       >			mul
  16+ 9AE9 19                                   add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  17+ 9AEA 3A A8 C0     .n96SQZ:                ld		a,(XX15VecZ)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  18+ 9AED FD 67                                ld		iyh,a               ; iyh = signed
  19+ 9AEF E6 7F                                and		SignMask8Bit                 ; unsigned
  20+ 9AF1                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  20+ 9AF1 5F          >			ld	e,a
  20+ 9AF2 57          >			ld  d,a
  20+ 9AF3 ED 30       >			mul
  21+ 9AF5 19           .n96SQADD:              add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  22+ 9AF6 EB                                   ex		de,hl				; hl => de ready for square root
  23+ 9AF7 CD 75 97     .n96SQRT:               call	asm_sqrt			; hl = de = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  24+ 9AFA 3A A6 C0     .n96NORMX:              ld		a,(XX15VecX)
  25+ 9AFD E6 7F                                and		SignMask8Bit
  26+ 9AFF 4F                                   ld		c,a
  27+ 9B00 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  28+ 9B01 CD 94 9C                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  29+ 9B04 47                                   ld		b,a				    ;++SGN
  30+ 9B05 DD 7C                                ld		a,ixh			    ;++SGN
  31+ 9B07 E6 80                                and		$80				    ;++SGN
  32+ 9B09 B0                                   or		b				    ;++SGN
  33+ 9B0A 32 A6 C0                             ld		(XX15VecX),a
  34+ 9B0D 3A A7 C0     .n96NORMY:              ld		a,(XX15VecY)
  35+ 9B10 E6 7F                                and		SignMask8Bit
  36+ 9B12 4F                                   ld		c,a
  37+ 9B13 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  38+ 9B14 CD 94 9C                             call	AequAdivDmul967Bit     	; does not use HL so we can retain it
  39+ 9B17 47                                   ld		b,a				    ;++SGN
  40+ 9B18 DD 7D                                ld		a,ixl			    ;++SGN
  41+ 9B1A E6 80                                and		$80				    ;++SGN
  42+ 9B1C B0                                   or		b				    ;++SGN
  43+ 9B1D 32 A7 C0                             ld		(XX15VecY),a
  44+ 9B20 3A A8 C0     .n96NORMZ:              ld		a,(XX15VecZ)
  45+ 9B23 E6 7F                                and		SignMask8Bit
  46+ 9B25 4F                                   ld		c,a
  47+ 9B26 55                                   ld		d,l				; Q(i.e. l) => D, later we can just pop into de
  48+ 9B27 CD 94 9C                             call	AequAdivDmul967Bit;AequAdivDmul96	; does not use HL so we can retain it
  49+ 9B2A 47                                   ld		b,a				    ;++SGN
  50+ 9B2B FD 7C                                ld		a,iyh			    ;++SGN
  51+ 9B2D E6 80                                and		$80				    ;++SGN
  52+ 9B2F B0                                   or		b				    ;++SGN
  53+ 9B30 32 A8 C0                             ld		(XX15VecZ),a
  54+ 9B33 C9                                   ret
  55+ 9B34
  56+ 9B34              ; Normalise vector
  57+ 9B34              ; scale Q = Sqrt (X^2 + Y^2 + Z^2)
  58+ 9B34              ; X = X / Q with 96 = 1 , i.e X = X / Q * 3/8
  59+ 9B34              ; Y = Y / Q with 96 = 1 , i.e Y = Y / Q * 3/8
  60+ 9B34              ; Z = Z / Q with 96 = 1 , i.e Z = Z / Q * 3/8
  61+ 9B34
# file closed: ./Maths/normalise96.asm
 618  9B34                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ 9B34              ;Number in hl to decimal ASCII
   2+ 9B34              ;Thanks to z80 Bits
   3+ 9B34              ;inputs:	hl = number to ASCII
   4+ 9B34              ;example: hl=300 outputs '00300'
   5+ 9B34              ;destroys: af, bc, hl, de used
   6+ 9B34              DispHLtoDE:
   7+ 9B34              ; "DispHL, writes HL to DE address"
   8+ 9B34 01 F0 D8     	ld	bc,-10000
   9+ 9B37 CD 4D 9B     	call	Num1
  10+ 9B3A 01 18 FC     	ld	bc,-1000
  11+ 9B3D CD 4D 9B     	call	Num1
  12+ 9B40 01 9C FF     	ld	bc,-100
  13+ 9B43 CD 4D 9B     	call	Num1
  14+ 9B46 0E F6        	ld	c,-10
  15+ 9B48 CD 4D 9B     	call	Num1
  16+ 9B4B 0E FF        	ld	c,-1
  17+ 9B4D              Num1:
  18+ 9B4D 3E 2F        	ld	a,'0'-1
  19+ 9B4F              .Num2:
  20+ 9B4F 3C           	inc	a
  21+ 9B50 09           	add	hl,bc
  22+ 9B51 38 FC        	jr	c,.Num2
  23+ 9B53 ED 42        	sbc	hl,bc
  24+ 9B55 12           	ld	(de),a
  25+ 9B56 13           	inc	de
  26+ 9B57 C9           	ret
  27+ 9B58
  28+ 9B58              DispAtoDE:
  29+ 9B58 26 00        	ld h,0
  30+ 9B5A 6F           	ld l,a
  31+ 9B5B C3 34 9B     	jp DispHLtoDE
  32+ 9B5E
  33+ 9B5E              DispPriceAtoDE:
  34+ 9B5E 26 00        	ld h,0
  35+ 9B60 6F           	ld l,a
  36+ 9B61 01 9C FF     	ld	bc,-100
  37+ 9B64 CD 74 9B     	call	.NumLeadBlank1
  38+ 9B67 0E F6        	ld	c,-10
  39+ 9B69 CD 4D 9B     	call	Num1
  40+ 9B6C 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ 9B6E 12           	ld		(de),a					; we can optimse that later TODO
  42+ 9B6F 13           	inc		de						; with just an inc De
  43+ 9B70 0E FF        	ld	c,-1
  44+ 9B72 18 D9        	jr		Num1
  45+ 9B74              .NumLeadBlank1:
  46+ 9B74 3E 2F        	ld	a,'0'-1
  47+ 9B76              .NumLeadBlank2:
  48+ 9B76 3C           	inc	a
  49+ 9B77 09           	add	hl,bc
  50+ 9B78 38 FC        	jr	c,.NumLeadBlank2
  51+ 9B7A FE 30        	cp	'0'
  52+ 9B7C 20 02        	jr	nz,.DontBlank
  53+ 9B7E              .Blank:
  54+ 9B7E 3E 20        	ld	a,' '
  55+ 9B80              .DontBlank:
  56+ 9B80 ED 42        	sbc	hl,bc
  57+ 9B82 12           	ld	(de),a
  58+ 9B83 13           	inc	de
  59+ 9B84 C9           	ret
  60+ 9B85
  61+ 9B85              DispQtyAtoDE:
  62+ 9B85 FE 00        	cp	0
  63+ 9B87 28 23        	jr	z,.NoStock
  64+ 9B89 26 00        	ld h,0
  65+ 9B8B 6F           	ld l,a
  66+ 9B8C 01 9C FF     	ld	bc,-100
  67+ 9B8F CD 9B 9B     	call	.NumLeadBlank1
  68+ 9B92 0E F6        	ld	c,-10
  69+ 9B94 CD 9B 9B     	call	.NumLeadBlank1
  70+ 9B97 0E FF        	ld	c,-1
  71+ 9B99 18 B2        	jr		Num1
  72+ 9B9B              .NumLeadBlank1:
  73+ 9B9B 3E 2F        	ld	a,'0'-1
  74+ 9B9D              .NumLeadBlank2:
  75+ 9B9D 3C           	inc	a
  76+ 9B9E 09           	add	hl,bc
  77+ 9B9F 38 FC        	jr	c,.NumLeadBlank2
  78+ 9BA1 FE 30        	cp	'0'
  79+ 9BA3 20 02        	jr	nz,.DontBlank
  80+ 9BA5              .Blank:
  81+ 9BA5 3E 20        	ld	a,' '
  82+ 9BA7              .DontBlank:
  83+ 9BA7 ED 42        	sbc	hl,bc
  84+ 9BA9 12           	ld	(de),a
  85+ 9BAA 13           	inc	de
  86+ 9BAB C9           	ret
  87+ 9BAC              .NoStock:
  88+ 9BAC 3E 20        	ld	a,' '
  89+ 9BAE 12           	ld	(de),a
  90+ 9BAF 13           	inc	de
  91+ 9BB0 12           	ld	(de),a
  92+ 9BB1 13           	inc	de
  93+ 9BB2 3E 2D        	ld	a,'-'
  94+ 9BB4 12           	ld	(de),a
  95+ 9BB5 13           	inc de
  96+ 9BB6 C9           	ret
  97+ 9BB7
  98+ 9BB7
  99+ 9BB7              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ 9BB7              ;### Input      DE,IX=32bit value, IY=destination address
 101+ 9BB7              ;### Output     IY=last char in destination string
 102+ 9BB7              ;### Destroyed AF,BC,DE,HL,IX
 103+ 9BB7 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ 9BBB 0A 00 00 00
 103+ 9BBF 64 00 00 00
 103+ 9BC3 E8 03 00 00
 103+ 9BC7 10 27 00 00
 104+ 9BCB A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ 9BCF 40 42 0F 00
 104+ 9BD3 80 96 98 00
 104+ 9BD7 00 E1 F5 05
 104+ 9BDB 00 CA 9A 3B
 105+ 9BDF 00 00 00 00  clcn32z ds 4
 106+ 9BE3
 107+ 9BE3              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ 9BE3 CD F2 9B     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ 9BE6 FD 7E 00                             ld      a,(IY+0)
 110+ 9BE9 FD 77 01                             ld      (IY+1),a
 111+ 9BEC 3E 2E                                ld      a,"."
 112+ 9BEE FD 77 00                             ld      (IY+0),a
 113+ 9BF1 C9                                   ret
 114+ 9BF2
 115+ 9BF2 DD 22 DF 9B  DispDEIXtoIY:           ld (clcn32z),ix
 116+ 9BF6 ED 53 E1 9B                          ld (clcn32z+2),de
 117+ 9BFA DD 21 DB 9B                          ld ix,clcn32t+36
 118+ 9BFE 06 09                                ld b,9
 119+ 9C00 0E 00                                ld c,0
 120+ 9C02 3E 30        .clcn321:               ld a,'0'
 121+ 9C04 B7                                   or a
 122+ 9C05 DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ 9C08 DD 56 01                             ld d,(ix+1)
 124+ 9C0B 2A DF 9B                             ld hl,(clcn32z)
 125+ 9C0E ED 52                                sbc hl,de
 126+ 9C10 22 DF 9B                             ld (clcn32z),hl
 127+ 9C13 DD 5E 02                             ld e,(ix+2)
 128+ 9C16 DD 56 03                             ld d,(ix+3)
 129+ 9C19 2A E1 9B                             ld hl,(clcn32z+2)
 130+ 9C1C ED 52                                sbc hl,de
 131+ 9C1E 22 E1 9B                             ld (clcn32z+2),hl
 132+ 9C21 38 04                                jr c,.clcn325
 133+ 9C23 0C                                   inc c
 134+ 9C24 3C                                   inc a
 135+ 9C25 18 DE                                jr .clcn322
 136+ 9C27 DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ 9C2A DD 56 01                             ld d,(ix+1)
 138+ 9C2D 2A DF 9B                             ld hl,(clcn32z)
 139+ 9C30 19                                   add hl,de
 140+ 9C31 22 DF 9B                             ld (clcn32z),hl
 141+ 9C34 DD 5E 02                             ld e,(ix+2)
 142+ 9C37 DD 56 03                             ld d,(ix+3)
 143+ 9C3A 2A E1 9B                             ld hl,(clcn32z+2)
 144+ 9C3D ED 5A                                adc hl,de
 145+ 9C3F 22 E1 9B                             ld (clcn32z+2),hl
 146+ 9C42 11 FC FF                             ld de,-4
 147+ 9C45 DD 19                                add ix,de
 148+ 9C47 0C                                   inc c
 149+ 9C48 0D                                   dec c
 150+ 9C49 28 05                                jr z,.clcn323
 151+ 9C4B FD 77 00                             ld (iy+0),a
 152+ 9C4E FD 23                                inc iy
 153+ 9C50 10 B0        .clcn323:               djnz .clcn321
 154+ 9C52 3A DF 9B                             ld a,(clcn32z)
 155+ 9C55 C6 30                                add A,'0'
 156+ 9C57 FD 77 00                             ld (iy+0),a
 157+ 9C5A FD 36 01 00                          ld (iy+1),0
 158+ 9C5E C9                                   ret
 159+ 9C5F
# file closed: ./Maths/binary_to_decimal.asm
 619  9C5F              ;;    include "./Maths/ADDHLDESignBC.asm"
 620  9C5F              ;INCLUDE "badd_ll38.asm"
 621  9C5F              ;;INCLUDE "XX12equXX15byXX16.asm"
 622  9C5F                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ 9C5F              AequAdivQmul96ABS:      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   1+ 9C5F BA          >                        cp     d
   1+ 9C60 D2 7B 9C    >                        jp		nc,.TIS2AccGTEQ
   2+ 9C63 06 FE                                ld			b,$FE						; division roll (replaced varT)
   3+ 9C65 CB 27        .TIS2RollTLoop:			sla			a
   4+ 9C67                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
   4+ 9C67 BA          >                        cp      d
   4+ 9C68 DA 7E 9C    >                        jp		c, .TIS2SkipSub
   5+ 9C6B 9A                                   sbc			a,d							; do subtraction with carry
   6+ 9C6C 37                                   scf
   7+ 9C6D CB 10                                rl			b							; T rolled left to push bit out the end
   8+ 9C6F 38 F4                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
   9+ 9C71 78           .TIS2SKIPCont:	        ld			a,b							; T
  10+ 9C72 CB 3F                                srl			a							; result / 2
  11+ 9C74 CB 3F                                srl			a							; result / 4
  12+ 9C76 47                                   ld			b,a							; t = t /4
  13+ 9C77 CB 3F                                srl			a							; result / 8
  14+ 9C79 80                                   add			a,b							; result /8 + result /4
  15+ 9C7A C9                                   ret
  16+ 9C7B 3E 60        .TIS2AccGTEQ:           ld			a,$60							; unity
  17+ 9C7D C9                                   ret
  18+ 9C7E B7           .TIS2SkipSub:           or			a
  19+ 9C7F CB 10                                rl			b							; T rolled left to push bit out the end
  20+ 9C81 38 E2                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  21+ 9C83 C3 71 9C                             jp			.TIS2SKIPCont
  22+ 9C86
  23+ 9C86
  24+ 9C86              ; USES 			A DE BC
  25+ 9C86              ; DOES NOT USE 	HL
  26+ 9C86              TIS2962C:		; two's compliment entry point, exits not 2's compliment
  27+ 9C86 CB 7F        	bit			7,a
  28+ 9C88 28 04        	jr			z,AequAdivQmul96
  29+ 9C8A ED 44        	neg										; revers 2s'c and just set neg bit
  30+ 9C8C CB FF        	set			7,a
  31+ 9C8E              ; Note negative numbers are bit 7 set not 2's compliment
  32+ 9C8E              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  33+ 9C8E              TIS2:
  34+ 9C8E 4F           	ld			c,a							; copy of Acc
  35+ 9C8F 3A 9C 83     	ld			a,(varQ)
  36+ 9C92 57           	ld			d,a							; d = varQ
  37+ 9C93 79           	ld			a,c							; recover a
  38+ 9C94              AequAdivDmul967Bit:
  39+ 9C94 4F               ld          c,a
  40+ 9C95 7A               ld          a,d
  41+ 9C96 CB 27            sla         a
  42+ 9C98 30 10            jr          nc, .OKToDivide
  43+ 9C9A              .ScaleDown:
  44+ 9C9A B7               or          a
  45+ 9C9B CB 3A            srl         d
  46+ 9C9D
  47+ 9C9D 79               ld          a,c
  48+ 9C9E E6 7F            and         SignMask8Bit
  49+ 9CA0 CB 3F            srl         a
  50+ 9CA2 47               ld          b,a
  51+ 9CA3 79               ld          a,c
  52+ 9CA4 E6 80            and         $80
  53+ 9CA6 B0               or          b
  54+ 9CA7 C3 AB 9C         jp          AequAdivDmul96
  55+ 9CAA              .OKToDivide:
  56+ 9CAA 79               ld          a,c
  57+ 9CAB              AequAdivDmul96:
  58+ 9CAB 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  59+ 9CAC E6 7F        	and			SignMask8Bit				; ignore sign
  60+ 9CAE              	JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  60+ 9CAE BA          >                        cp     d
  60+ 9CAF D2 CF 9C    >                        jp		nc,.TIS2AccGTEQ
  61+ 9CB2 06 FE        	ld			b,$FE						; division roll (replaced varT)
  62+ 9CB4              .TIS2RollTLoop:									; .TIL2	; roll T
  63+ 9CB4 CB 27        	sla			a
  64+ 9CB6              	JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
  64+ 9CB6 BA          >                        cp      d
  64+ 9CB7 DA D5 9C    >                        jp		c, .TIS2SkipSub
  65+ 9CBA 9A           	sbc			a,d							; do subtraction with carry
  66+ 9CBB 37           	scf                                     ; set carrry to roll into b
  67+ 9CBC CB 10        	rl			b							; T rolled left to push bit out the end
  68+ 9CBE 38 F4        	jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  69+ 9CC0              .TIS2SKIPCont:
  70+ 9CC0 78           	ld			a,b							; A = T = 4 / 4
  71+ 9CC1 CB 3F        	srl			a							; .
  72+ 9CC3 CB 3F        	srl			a							; .
  73+ 9CC5 47           	ld			b,a							; .
  74+ 9CC6 CB 3F        	srl			a							; A = A / 2 (i.e. T /8)
  75+ 9CC8 80           	add			a,b							; A = T/8 + T/4 (3T/8)
  76+ 9CC9 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  77+ 9CCA 79           	ld			a,c							; copy of Acc to look at sign bit
  78+ 9CCB E6 80        	and			$80							; recover sign only
  79+ 9CCD B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  80+ 9CCE C9           	ret
  81+ 9CCF              .TIS2AccGTEQ:
  82+ 9CCF              ;TI4:										;\ clean to +/- unity
  83+ 9CCF 79           	ld			a,c
  84+ 9CD0 E6 80        	and			$80							; copy of Acc
  85+ 9CD2 F6 60        	or			$60							; unity
  86+ 9CD4 C9           	ret
  87+ 9CD5              .TIS2SkipSub:
  88+ 9CD5              	ClearCarryFlag                          ; Clear carry as it needs to be empty to roll in 0
  88+ 9CD5 B7          >                        or a
  89+ 9CD6 CB 10        	rl			b							; T rolled left to push bit out the end
  90+ 9CD8 38 DA        	jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  91+ 9CDA C3 C0 9C     	jp			.TIS2SKIPCont
  92+ 9CDD
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
 623  9CDD                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ 9CDD              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   2+ 9CDD              fmltu:
   3+ 9CDD 57           AequAmulQdiv256:        ld	d,a
   4+ 9CDE 3A 9C 83                             ld	a,(varQ)
   5+ 9CE1 5F                                   ld	e,a
   6+ 9CE2 ED 30                                mul
   7+ 9CE4 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   8+ 9CE5 C9                                   ret
   9+ 9CE6
  10+ 9CE6 5F           AequAmulDdiv256:        ld  e,a
  11+ 9CE7 ED 30                                mul
  12+ 9CE9 7A                                   ld  a,d
  13+ 9CEA C9                                   ret
  14+ 9CEB
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
 624  9CEB                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ 9CEB              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ 9CEB              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ 9CEB 21 7F 86     		ld		hl,varDustZ
   4+ 9CEE FD 7D        		ld		a,iyl
   5+ 9CF0 ED 31        		add		hl,a
   6+ 9CF2 7E           		ld		a,(hl)
   7+ 9CF3 C3 FF 9C     		jp		DV41
   8+ 9CF6              DV42:										; travel step of dust particle front/rear
   9+ 9CF6 21 7F 86     		ld		hl,varDustZ
  10+ 9CF9 3A 84 82     		ld		a,(regY)
  11+ 9CFC ED 31        		add		hl,a
  12+ 9CFE 7E           		ld		a,(hl)						; a = SZ[y]
  13+ 9CFF              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ 9CFF 5F           		ld		e,a							; using E as Q var replacement
  15+ 9D00 3A 98 83     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ 9D03              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ 9D03 06 08        		ld		b,8							; counter
  18+ 9D05 CB 27        		sla		a							;
  19+ 9D07 57           		ld		d,a							; use d for - p = delta * 2
  20+ 9D08 AF           		xor		a
  21+ 9D09              DVL4:										; counter x loop (b reg)
  22+ 9D09 CB 17        		rl		a							; a = a * 2
  23+ 9D0B 38 03        		jr		c,DV8						; jump on carry
  24+ 9D0D BB           		cp		e							; var Q
  25+ 9D0E 38 02        		jr		c,DV5						; skip subtraction
  26+ 9D10              DV8:
  27+ 9D10 9B           		sbc		a,e							; a = a - q (with carry)
  28+ 9D11 37           		scf									;  carry gets set
  29+ 9D12              DV5:										; skipped subtraction
  30+ 9D12 CB 12        		rl		d							; d (P hi)
  31+ 9D14 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ 9D16              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ 9D16              ; Note we are not going to call LL28+4 but inline code here:
  34+ 9D16 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ 9D18 4F           		ld		c,a							; use c as R var
  36+ 9D19              .RollRemainder:
  37+ 9D19 CB 27        		sla		a
  38+ 9D1B 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ 9D1D B8           		cp		b							; a < q?
  40+ 9D1E 30 01        		jr		nc,.DontSBC
  41+ 9D20              .DoSBC:										; a is < q
  42+ 9D20 98           		sbc		a,b							; 	a -= q
  43+ 9D21              .DontSBC:
  44+ 9D21 CB 11        		rl		c							; r << 1
  45+ 9D23 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ 9D25 79           		ld		a,c
  47+ 9D26 32 9D 83     		ld		(varR),a					; for backwards compat
  48+ 9D29 7A           		ld		a,d
  49+ 9D2A 32 9A 82     		ld		(varP),a
  50+ 9D2D C9           		ret									; R (c) left with remainder
  51+ 9D2E              .Reduce:									; a geneated a carry
  52+ 9D2E 98           		sbc		a,b							; a = a - (q +1)
  53+ 9D2F 37           		scf									; set carry flag for rl
  54+ 9D30 CB 11        		rl		c							; r << 1 briging in carry
  55+ 9D32 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ 9D34 79           		ld		a,c
  57+ 9D35 32 9D 83     		ld		(varR),a					; for backwards compat
  58+ 9D38 7A           		ld		a,d
  59+ 9D39 32 9A 82     		ld		(varP),a
  60+ 9D3C C9           		ret
  61+ 9D3D              .AnswerTooBig:
  62+ 9D3D 0E FF        		ld		c,$FF						; arse its too big
  63+ 9D3F 79           		ld		a,c
  64+ 9D40 32 9D 83     		ld		(varR),a					; for backwards compat
  65+ 9D43 7A           		ld		a,d
  66+ 9D44 32 9A 82     		ld		(varP),a
  67+ 9D47 C9           		ret
  68+ 9D48
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
 625  9D48                  INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ 9D48
   2+ 9D48              asm_defmutl:
   3+ 9D48              AequDmulEdiv256usgn:
   4+ 9D48              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ 9D48 ED 30        	mul
   6+ 9D4A 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ 9D4B C9           	ret
   8+ 9D4C
   9+ 9D4C
# file closed: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
 626  9D4C              ;INCLUDE "AP2equAPmulQunsgEorP-MLTU2.asm"
 627  9D4C              ;INCLUDE "APequPmulQUnsg-MULTU.asm"
 628  9D4C              ;INCLUDE "APequPmulX-MU11.asm"
 629  9D4C                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ 9D4C              APequQmulA:
   2+ 9D4C              asm_mult1:
   3+ 9D4C              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ 9D4C FE 00        	cp	0
   5+ 9D4E 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ 9D50 5F           	ld	e,a
   7+ 9D51 3A 9C 83     	ld	a,(varQ)
   8+ 9D54 57           	ld	d,a
   9+ 9D55 FE 00        	cp	0				; compare a
  10+ 9D57 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ 9D59 AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ 9D5A E6 80        	and $80				; get the resultant sign and save into b
  13+ 9D5C 47           	ld	b,a
  14+ 9D5D 7A           	ld	a,d
  15+ 9D5E E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ 9D60 57           	ld	d,a
  17+ 9D61 7B           	ld	a,e
  18+ 9D62 E6 7F        	and SignMask8Bit
  19+ 9D64 5F           	ld	e,a
  20+ 9D65 ED 30        	mul					; zxn de = d * e
  21+ 9D67 7B           	ld	a,e
  22+ 9D68 32 9A 82     	ld	(varP),a		; p = lo
  23+ 9D6B 7A           	ld	a,d				; a = hi
  24+ 9D6C B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ 9D6D 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ 9D6E C9           	ret
  27+ 9D6F              .mul0:
  28+ 9D6F AF           	xor	a
  29+ 9D70 32 9A 82     	ld	(varP),a
  30+ 9D73 57           	ld	d,a
  31+ 9D74 5F           	ld  e,a
  32+ 9D75 C9           	ret
  33+ 9D76
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
 630  9D76                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ 9D76              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ 9D76              SAEquSRPlusAQ:
   3+ 9D76              ; Calculate the following between sign-magnitude numbers:
   4+ 9D76              ;   (S A) = (S R) + (A Q)
   5+ 9D76              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ 9D76              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ 9D76              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ 9D76              LL38:
   9+ 9D76              ;	ld		d,a
  10+ 9D76              ;	ld		a,(varQ)
  11+ 9D76              ;	ld		e,a
  12+ 9D76              ;	ld		a,(varS)
  13+ 9D76              ;	ld		h,a
  14+ 9D76              ;	ld		a,(varR)
  15+ 9D76              ;	ld		l,a
  16+ 9D76              ;	call	ADDHLDESignedv3
  17+ 9D76              ;	ld		a,h
  18+ 9D76              ;	ld		(varS),a
  19+ 9D76              ;	ld		a,l
  20+ 9D76              ;	ret
  21+ 9D76              ; calculation table
  22+ 9D76              ;   R     Q    Op            Sign calc
  23+ 9D76              ;	10    5    Add           +    sign same add R sign
  24+ 9D76              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ 9D76              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ 9D76              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ 9D76              ;   5    10    Add           +    sign same add R sign
  28+ 9D76              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ 9D76              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ 9D76              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ 9D76
  32+ 9D76              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ 9D76              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ 9D76              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ 9D76              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ 9D76
  37+ 9D76
  38+ 9D76              ; Calculate sign for Q from A and varS
  39+ 9D76 21 9E 83     	ld		hl,varS							;
  40+ 9D79 AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ 9D7A FA 85 9D     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ 9D7D 3A 9C 83     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ 9D80 21 9D 83     	ld		hl,varR
  44+ 9D83 86           	add		a,(hl)							; a = Q + R
  45+ 9D84 C9           	ret										; Done carry set if overflow
  46+ 9D85              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ 9D85 3A 9D 83     	ld		a,(varR)						; a = R
  48+ 9D88 21 9C 83     	ld		hl,varQ                         ; Q
  49+ 9D8B              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ 9D8B              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ 9D8B B7          >                        or a
  51+ 9D8C 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ 9D8D 38 01            jr      c,.LL39SignCorrection
  53+ 9D8F              ;--    jr      a,.LL39ResultZero
  54+ 9D8F              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ 9D8F              ;--	or		a								; Clear carry flag to say result is correct
  56+ 9D8F C9           	ret
  57+ 9D90              .LL39SignCorrection:
  58+ 9D90 FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ 9D92 28 0E            jr      z,.LL39ResultZero
  60+ 9D94 ED 44            neg                                     ; flip A 2'c value to positive
  61+ 9D96 08           	ex		af,af'							; save A temporarily
  62+ 9D97 3A 9E 83     	ld		a,(varS)						; Flip Sign bit in varS
  63+ 9D9A EE 80        	xor		$80							    ;
  64+ 9D9C 32 9E 83     	ld		(varS),a                        ; flip sign bit of a
  65+ 9D9F 08           	ex		af,af'                          ; get back a which is the result
  66+ 9DA0                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ 9DA0 B7          >                        or a
  67+ 9DA1 C9           	ret
  68+ 9DA2              .LL39ResultZero:
  69+ 9DA2 32 9E 83         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ 9DA5                  ClearCarryFlag                          ; clear carry
  70+ 9DA5 B7          >                        or a
  71+ 9DA6 C9               ret
  72+ 9DA7              ;--LL39SwapSubtraction:
  73+ 9DA7              ;--	push	bc
  74+ 9DA7              ;--	ld		b,a
  75+ 9DA7              ;--	ld		a,(hl)
  76+ 9DA7              ;--	sub		b
  77+ 9DA7              ;--	pop		bc
  78+ 9DA7              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ 9DA7              ;--	ld		a,(varS)
  80+ 9DA7              ;--	xor		$80
  81+ 9DA7              ;--	ld		(varS),a
  82+ 9DA7              ;--	ex		af,af'
  83+ 9DA7              ;--	ret
  84+ 9DA7
  85+ 9DA7              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ 9DA7              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ 9DA7              ;;;;;   (S A) = (S R) + (A Q)
  88+ 9DA7              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ 9DA7              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ 9DA7              ;;;;LL38:
  91+ 9DA7              ;;;;; Calculate sign for Q from A and varS
  92+ 9DA7              ;;;;	ld		hl,varS							;
  93+ 9DA7              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ 9DA7              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ 9DA7              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ 9DA7              ;;;;	ld		hl,varR
  97+ 9DA7              ;;;;	add		a,(hl)							; a = Q + R
  98+ 9DA7              ;;;;	ret										; Done
  99+ 9DA7              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ 9DA7              ;;;;	ld		hl,varQ                         ;
 101+ 9DA7              ;;;;	ld		a,(hl)
 102+ 9DA7              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ 9DA7              ;;;;	ld		a,(varR)						;
 104+ 9DA7              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ 9DA7              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ 9DA7              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ 9DA7              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ 9DA7              ;;;;	ret
 109+ 9DA7              ;;;;.SignCorrection:
 110+ 9DA7              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ 9DA7              ;;;;	ex		af,af'							; save A temporarily
 112+ 9DA7              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ 9DA7              ;;;;	xor		$80							    ;
 114+ 9DA7              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ 9DA7              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ 9DA7              ;;;;	ret
 117+ 9DA7              ;;;;LL39Sub16Bit:
 118+ 9DA7              ;;;;	ld		e,a
 119+ 9DA7              ;;;;	ld		d,0
 120+ 9DA7              ;;;;	ld		a,(varR)
 121+ 9DA7              ;;;;	ld		l,a
 122+ 9DA7              ;;;;	ld		h,0
 123+ 9DA7              ;;;;	ClearCarryFlag
 124+ 9DA7              ;;;;	sbc		hl,de
 125+ 9DA7              ;;;;	jr		c,.SignCorrection16bit
 126+ 9DA7              ;;;;	bit		7,h
 127+ 9DA7              ;;;;	jr		z,.GoodToReturn
 128+ 9DA7              ;;;;.Needtonegate:
 129+ 9DA7              ;;;;	macronegate16hl
 130+ 9DA7              ;;;;.GoodToReturn
 131+ 9DA7              ;;;;	ld		a,l
 132+ 9DA7              ;;;;	or		a
 133+ 9DA7              ;;;;	ret
 134+ 9DA7              ;;;;.SignCorrection16bit:
 135+ 9DA7              ;;;;	macronegate16hl
 136+ 9DA7              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ 9DA7              ;;;;	xor		$80							    ;
 138+ 9DA7              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ 9DA7              ;;;;	ld		a,l
 140+ 9DA7              ;;;;	ret
 141+ 9DA7
 142+ 9DA7
# file closed: ./Maths/Utilities/badd_ll38.asm
 631  9DA7                  INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
# file opened: ./Maths/Utilities/moveship4-MVS4.asm
   1+ 9DA7              ; Note comparing hl vs iY, you need at least 3 incs or decs for hl to be slower
   2+ 9DA7              ; it may be faster though if we can use hl to avoid memory actions if needed
   3+ 9DA7              ; need to optimise mad as push hl pop hl and use de doesn't really improve speed
   4+ 9DA7
   5+ 9DA7
   6+ 9DA7              moveship4Yreg:
   7+ 9DA7 3A 84 82     		ld		a,(regY)
   8+ 9DAA 47           		ld		b,a
   9+ 9DAB              moveship4breg:
  10+ 9DAB              		; b = Y index, 9 = nosev, 15 = roofv 21 = sidev
  11+ 9DAB              MVS4PitchAlphaRollBeta:
  12+ 9DAB              MVS4:										;.MVS4	\ -> &52A1 \ Moveship4, Y is matrix row, pitch&roll update to coordinates
  13+ 9DAB 3A B2 82     		ld		a,(ALPHA)					;  ALPHA
  14+ 9DAE 32 9C 83     		ld		(varQ),a					; player ship's roll Q = Alpha
  15+ 9DB1 21 22 C0     		ld		hl,UBnKxsgn
  16+ 9DB4 78           		ld		a,b							; from
  17+ 9DB5 ED 31        		add		hl,a
  18+ 9DB7 7E           		ld		a,(hl)						; INWK+2,Y
  19+ 9DB8 32 9D 83     		ld		(varR),a					; R  \ lo
  20+ 9DBB 23           		inc		hl
  21+ 9DBC 7E           		ld		a,(hl)						; INWK+3,Y
  22+ 9DBD 32 9E 83     		ld		(varS),a					; S  \ hi		SR = nosev_y (or axis y)
  23+ 9DC0 2B           		dec		hl
  24+ 9DC1 2B           		dec		hl
  25+ 9DC2 2B           		dec		hl							;
  26+ 9DC3 7E           		ld		a,(hl)						; INWK+0,Y
  27+ 9DC4 32 9A 82     		ld		(varP),a					; P  \ over-written	 P = nosevx lo
  28+ 9DC7 23           		inc		hl
  29+ 9DC8 7E           		ld		a,(hl)						; INWK+1,Y
  30+ 9DC9 EE 80        		xor		$80							; flip sign  AP = nosevx * - 1
  31+ 9DCB CD F2 95     		call	madXAequQmulAaddRS			; MAD	\ DE = X.A = alpha*INWK+1,Y + INWK+2to3,Y
  32+ 9DCE 23                   inc     hl
  33+ 9DCF 23                   inc     hl
  34+ 9DD0 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  35+ 9DD1 2B                   dec     hl
  36+ 9DD2 3A 83 82             ld      a,(regX)
  37+ 9DD5 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-aX   \ their comment
  38+ 9DD6 32 9A 82             ld      (varP),a                    ;  P
  39+ 9DD9 2B                   dec     hl
  40+ 9DDA 2B                   dec     hl
  41+ 9DDB 7E                   ld      a,(hl)                      ; INWK+0,Y
  42+ 9DDC 32 9D 83             ld      (varR),a                    ;  R	\ lo
  43+ 9DDF 23                   inc     hl
  44+ 9DE0 7E                   ld      a,(hl)                      ;  INWK+1,Y
  45+ 9DE1 32 9E 83             ld      (varS),a                    ; S	\ hi
  46+ 9DE4 23                   inc     hl
  47+ 9DE5 23                   inc     hl
  48+ 9DE6 7E                   ld      a,(hl)                      ; INWK+3,Y
  49+ 9DE7 CD F2 95             call    madXAequQmulAaddRS          ; MAD	\ X.A = alpha*INWK+3,Y + INWK+0to1,Y
  50+ 9DEA 2B                   dec     hl
  51+ 9DEB 2B                   dec     hl
  52+ 9DEC 77                   ld      (hl),a                      ; INWK+1,Y  \ hi
  53+ 9DED 3A 83 82             ld      a,(regX)
  54+ 9DF0 2B                   dec     hl
  55+ 9DF1 77                   ld      (hl),a                      ; INWK+0,Y  \ X=X+aY   \ their comment
  56+ 9DF2 32 9A 82             ld      (varP),a                    ; P
  57+ 9DF5 3A A5 82             ld      a,(BETA)                    ; BETA
  58+ 9DF8 32 9C 83             ld      (varQ),a                    ; Q	\ player ship's pitch
  59+ 9DFB 23                   inc     hl
  60+ 9DFC 23                   inc     hl
  61+ 9DFD 7E                   ld      a,(hl)                      ; INWK+2,Y
  62+ 9DFE 32 9D 83             ld      (varR),a                    ; R	\ lo
  63+ 9E01 23                   inc     hl
  64+ 9E02 7E                   ld      a,(hl)                      ; INWK+3,Y
  65+ 9E03 32 9E 83             ld      (varS),a                    ; S	\ hi
  66+ 9E06 23                   inc     hl
  67+ 9E07 7E                   ld      a,(hl)                      ; INWK+4,Y
  68+ 9E08 32 9A 82             ld      (varP),a                    ; P	\ lo
  69+ 9E0B 23                   inc     hl
  70+ 9E0C 7E                   ld      a,(hl)                      ; INWK+5,Y
  71+ 9E0D EE 80                xor     $80                         ; flip sign hi
  72+ 9E0F CD F2 95             call    madXAequQmulAaddRS          ; MAD	\ X.A =-beta*INWK+5,Y + INWK+2to3,Y
  73+ 9E12 2B                   dec     hl
  74+ 9E13 2B                   dec     hl
  75+ 9E14 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  76+ 9E15 3A 83 82             ld      a,(regX)
  77+ 9E18 2B                   dec     hl
  78+ 9E19 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-bZ  \ their comment
  79+ 9E1A 32 9A 82             ld      (varP),a                    ; P
  80+ 9E1D 23                   inc     hl
  81+ 9E1E 23                   inc     hl
  82+ 9E1F 7E                   ld      a,(hl)                      ; INWK+4,Y
  83+ 9E20 32 9D 83             ld      (varR),a                    ; R	\ lo
  84+ 9E23 23                   inc     hl
  85+ 9E24 7E                   ld      a,(hl)                      ; INWK+5,Y
  86+ 9E25 32 9E 83             ld      (varS),a                    ; S	\ hi
  87+ 9E28 2B                   dec     hl
  88+ 9E29 2B                   dec     hl
  89+ 9E2A 7E                   ld      a,(hl)                      ; INWK+3,Y
  90+ 9E2B CD F2 95             call    madXAequQmulAaddRS          ; MAD	\ X.A = beta*INWK+3,Y + INWK+4,5,Y
  91+ 9E2E 23                   inc     hl
  92+ 9E2F 23                   inc     hl
  93+ 9E30 77                   ld      (hl),a                      ; INWK+5,Y \ hi
  94+ 9E31 3A 83 82             ld      a,(regX)
  95+ 9E34 2B                   dec     hl
  96+ 9E35 77                   ld      (hl),a                      ; INWK+4,Y \ Z=Z+bY   \ their comment
  97+ 9E36 C9                   ret
  98+ 9E37
  99+ 9E37
# file closed: ./Maths/Utilities/moveship4-MVS4.asm
 632  9E37              ;INCLUDE "MoveShip5-MVS5.asm"
 633  9E37              ;INCLUDE "PAequAmulQusgn-MLU2.asm"
 634  9E37              ;INCLUDE "PAequDustYIdxYmulQ-MLU1.asm"
 635  9E37              ;INCLUDE "PlanetP12addInwkX-MVT6.asm"
 636  9E37                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ 9E37              ;;;LL28:
   2+ 9E37              ;;;    ld      c,a                         ;
   3+ 9E37              ;;;    ld      a,(varQ)                    ;
   4+ 9E37              ;;;    ld      b,a                         ;
   5+ 9E37              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ 9E37              ;;;RequAmul256divB:                        ;
   7+ 9E37              ;;;LL28Breg:
   8+ 9E37              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ 9E37              ;;;	cp		b							; Check A >= Q
  10+ 9E37              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ 9E37              ;;;.CalcRemainder:
  12+ 9E37              ;;;	ld		c, 	$FE						; set R to $FE
  13+ 9E37              ;;;.RollRemainder:
  14+ 9E37              ;;;	sla		a
  15+ 9E37              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ 9E37              ;;;	cp		b							; a < q?
  17+ 9E37              ;;;	jr		nc,.DontSBC
  18+ 9E37              ;;;.DoSBC:									; a is < q
  19+ 9E37              ;;;	sbc		a,b							; 	a -= q
  20+ 9E37              ;;;.DontSBC:
  21+ 9E37              ;;;	rl		c							; r << 1
  22+ 9E37              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ 9E37              ;;;    ld      a,c
  24+ 9E37              ;;;    ld      (varR),a
  25+ 9E37              ;;;	ret									; R (c) left with remainder
  26+ 9E37              ;;;.Reduce:								; a geneated a carry
  27+ 9E37              ;;;	sbc		a,b							; a = a - (q +1)
  28+ 9E37              ;;;	scf									; set carry flag for rl
  29+ 9E37              ;;;	rl		c							; r << 1 briging in carry
  30+ 9E37              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ 9E37              ;;;    ld      a,c
  32+ 9E37              ;;;    ld      (varR),a
  33+ 9E37              ;;;	ret
  34+ 9E37              ;;;.AnswerTooBig:
  35+ 9E37              ;;;	ld	    c,$FF							; arse its too big
  36+ 9E37              ;;;    ld      a,c
  37+ 9E37              ;;;    ld      (varR),a
  38+ 9E37              ;;;	ret
  39+ 9E37
  40+ 9E37              BCequAmul256DivC:
  41+ 9E37 59             ld    e,c
  42+ 9E38 67             ld    h,a
  43+ 9E39 2E 00          ld    l,0
  44+ 9E3B              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ 9E3B 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ 9E3C B7             or a                                   ; from this time on the carry is cleared
  47+ 9E3D C8             ret z
  48+ 9E3E 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ 9E41 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ 9E43              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ 9E43 ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ 9E45 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ 9E46 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ 9E48 C9             ret
  55+ 9E49
  56+ 9E49              HL_Div_C:
  57+ 9E49              ; Integer divides HL by C
  58+ 9E49              ; Result in HL, remainder in A
  59+ 9E49              ; Clobbers F, B
  60+ 9E49 06 10                ld b,16
  61+ 9E4B AF                   xor a
  62+ 9E4C              HL_Div_C_Loop:
  63+ 9E4C 29                   add hl,hl
  64+ 9E4D 17                   rla
  65+ 9E4E B9                   cp c
  66+ 9E4F 38 02                jr c,HL_DivC_Skip
  67+ 9E51 91                   sub c
  68+ 9E52 2C                   inc l
  69+ 9E53              HL_DivC_Skip:
  70+ 9E53 10 F7                djnz HL_Div_C_Loop
  71+ 9E55 7D                   ld   a,l
  72+ 9E56 32 9D 83             ld  (varR),a
  73+ 9E59 C9                   ret
  74+ 9E5A
  75+ 9E5A
  76+ 9E5A
  77+ 9E5A              ; Entry point if varQ is populated with demoninator
  78+ 9E5A              RequAmul256divQ:
  79+ 9E5A              BFRDIV:
  80+ 9E5A F5           		push	af
  81+ 9E5B 3A 9C 83     		ld		a,(varQ)
  82+ 9E5E 4F           		ld		c,a
  83+ 9E5F F1           		pop		af
  84+ 9E60 FE 00        		cp		0
  85+ 9E62 CA 79 9E     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ 9E65              RequAmul256divC:
  87+ 9E65 2E 00        		ld		l,0
  88+ 9E67 67           		ld		h,a
  89+ 9E68              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ 9E68 06 10        		ld b,16
  91+ 9E6A AF           		xor a
  92+ 9E6B              LOOPPOINT:
  93+ 9E6B 29           		add hl,hl
  94+ 9E6C 17           		rla
  95+ 9E6D B9           		cp c
  96+ 9E6E 38 02        		jr c,SKIPINCSUB
  97+ 9E70 2C           		inc l
  98+ 9E71 91           		sub c
  99+ 9E72              SKIPINCSUB:
 100+ 9E72 10 F7        		djnz LOOPPOINT
 101+ 9E74 7D           		ld		a,l
 102+ 9E75 32 9D 83     		ld 		(varR),a
 103+ 9E78 C9           		ret
 104+ 9E79              HLDIVC_0_BY:
 105+ 9E79 32 9D 83     		ld		(varR),a
 106+ 9E7C C9           		ret
 107+ 9E7D              ;	push	af
 108+ 9E7D              ;	ld		a,b
 109+ 9E7D              ;	ld		(varQ),a
 110+ 9E7D              ;	pop		af
 111+ 9E7D              ;RequAmul256divQ:
 112+ 9E7D              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ 9E7D              ;	ld		hl,varQ
 114+ 9E7D              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ 9E7D              ;	ld		b,$FE						; b = X
 116+ 9E7D              ;	ld		c,a							; c = R	div roll counter
 117+ 9E7D              ;LL31:									; roll R
 118+ 9E7D              ;	sla		a
 119+ 9E7D              ;	jr		c,LL29						; hop to Reduce
 120+ 9E7D              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ 9E7D              ;	sbc		a,(hl)						; a = a - Q
 122+ 9E7D              ;	rl		c							; rotate R left
 123+ 9E7D              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ 9E7D              ;	jr		LL2Good
 125+ 9E7D              ;LL29:									; Reduce
 126+ 9E7D              ;	sbc		a,(hl)
 127+ 9E7D              ;	scf
 128+ 9E7D              ;	rl		c							; roll a carry flag into R
 129+ 9E7D              ;	jr		c,LL31						;  loop R
 130+ 9E7D              ;	jr		LL2Good
 131+ 9E7D              ;LL2:
 132+ 9E7D              ;	ld		c,$FF
 133+ 9E7D              ;LL2Good:
 134+ 9E7D              ;	ld		a,c
 135+ 9E7D              ;	ld		(varR),a
 136+ 9E7D              ;	ret
 137+ 9E7D
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
 637  9E7D                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ 9E7D              RequAdivQ:
   2+ 9E7D              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ 9E7D              LL61:										; Handling division R=A/Q for case further down
   4+ 9E7D 4F           	ld		c,a								; c = A
   5+ 9E7E 3A 9C 83     	ld		a,(varQ)						; test for divide by 0
   6+ 9E81 FE 00        	cp		0
   7+ 9E83 28 16        	jr		z,LL84							; divide by zero error
   8+ 9E85 57           	ld		d,a								; now we can do C/D
   9+ 9E86 06 08            ld b,8
  10+ 9E88 AF               xor a
  11+ 9E89              LL63:										; roll divide loop
  12+ 9E89 CB 21            sla c
  13+ 9E8B 17               rla
  14+ 9E8C BA               cp d
  15+ 9E8D 38 02            jr c,LL64
  16+ 9E8F 0C               inc c
  17+ 9E90 92               sub d
  18+ 9E91              LL64:
  19+ 9E91 10 F6            djnz LL63
  20+ 9E93 32 9B 83     	ld	(varU),a							; store remainder in U
  21+ 9E96 79           	ld	a,c
  22+ 9E97 32 9D 83     	ld	(varR),a							; store remainder in R
  23+ 9E9A C9               ret
  24+ 9E9B              LL84:										; div error  R=U=#5
  25+ 9E9B 3E 32        	ld		a,50
  26+ 9E9D 32 9D 83     	ld		(varR),a
  27+ 9EA0 32 9B 83     	ld		(varU),a
  28+ 9EA3 C9           	ret
  29+ 9EA4
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
 638  9EA4              ;    INCLUDE "./Maths/Utilities/RSequABSrs-LL129.asm"
 639  9EA4                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ 9EA4              asm_mult12:
   2+ 9EA4              RSequQmulA:
   3+ 9EA4              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ 9EA4 CD 4C 9D     	call APequQmulA
   5+ 9EA7 08           	ex 	af,af'
   6+ 9EA8 7A           	ld	a,d
   7+ 9EA9 32 9E 83     	ld	(varS),a
   8+ 9EAC 7B           	ld	a,e
   9+ 9EAD 32 9D 83     	ld	(varR),a
  10+ 9EB0 08           	ex 	af,af'
  11+ 9EB1 C9           	ret
  12+ 9EB2
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
 640  9EB2              ;INCLUDE "SwapRotmapXY-PUS1.asm"
 641  9EB2                  include "./Universe/Ships/CopyRotMattoXX15.asm"
# file opened: ./Universe/Ships/CopyRotMattoXX15.asm
   1+ 9EB2              CopyRotMatNoseVtoXX15:
   2+ 9EB2                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2+ 9EB2 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
   2+ 9EB5 32 A6 C0    >                        ld       (XX15VecX),a
   3+ 9EB8                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3+ 9EB8 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
   3+ 9EBB 32 A7 C0    >                        ld       (XX15VecY),a
   4+ 9EBE                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4+ 9EBE 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
   4+ 9EC1 32 A8 C0    >                        ld       (XX15VecZ),a
   5+ 9EC4 C9                   ret
   6+ 9EC5
   7+ 9EC5              CopyRotMatRoofVtoXX15:
   8+ 9EC5                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8+ 9EC5 3A 30 C0    >                        ld       a,(UBnkrotmatRoofvX+1)
   8+ 9EC8 32 A6 C0    >                        ld       (XX15VecX),a
   9+ 9ECB                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9+ 9ECB 3A 32 C0    >                        ld       a,(UBnkrotmatRoofvY+1)
   9+ 9ECE 32 A7 C0    >                        ld       (XX15VecY),a
  10+ 9ED1                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10+ 9ED1 3A 34 C0    >                        ld       a,(UBnkrotmatRoofvZ+1)
  10+ 9ED4 32 A8 C0    >                        ld       (XX15VecZ),a
  11+ 9ED7 C9                   ret
  12+ 9ED8
  13+ 9ED8              CopyRotMatSideVtoXX15:
  14+ 9ED8                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14+ 9ED8 3A 2A C0    >                        ld       a,(UBnkrotmatSidevX+1)
  14+ 9EDB 32 A6 C0    >                        ld       (XX15VecX),a
  15+ 9EDE                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15+ 9EDE 3A 2C C0    >                        ld       a,(UBnkrotmatSidevY+1)
  15+ 9EE1 32 A7 C0    >                        ld       (XX15VecY),a
  16+ 9EE4                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16+ 9EE4 3A 2E C0    >                        ld       a,(UBnkrotmatSidevZ+1)
  16+ 9EE7 32 A8 C0    >                        ld       (XX15VecZ),a
  17+ 9EEA C9                   ret
  18+ 9EEB
# file closed: ./Universe/Ships/CopyRotMattoXX15.asm
 642  9EEB                  include "./Universe/Ships/CopyXX15toRotMat.asm"
# file opened: ./Universe/Ships/CopyXX15toRotMat.asm
   1+ 9EEB              CopyXX15toRotMatNoseV:
   2+ 9EEB                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2+ 9EEB 3A A6 C0    >                        ld       a,(XX15VecX)
   2+ 9EEE 32 36 C0    >                        ld       (UBnkrotmatNosevX+1),a
   3+ 9EF1                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3+ 9EF1 3A A7 C0    >                        ld       a,(XX15VecY)
   3+ 9EF4 32 38 C0    >                        ld       (UBnkrotmatNosevY+1),a
   4+ 9EF7                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4+ 9EF7 3A A8 C0    >                        ld       a,(XX15VecZ)
   4+ 9EFA 32 3A C0    >                        ld       (UBnkrotmatNosevZ+1),a
   5+ 9EFD                      ZeroA
   5+ 9EFD AF          >                        xor a
   6+ 9EFE 32 35 C0             ld  (UBnkrotmatNosevX),a
   7+ 9F01 32 37 C0             ld  (UBnkrotmatNosevY),a
   8+ 9F04 32 39 C0             ld  (UBnkrotmatNosevZ),a
   9+ 9F07 C9                   ret
  10+ 9F08
  11+ 9F08              CopyXX15toRotMatRoofV:
  12+ 9F08                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
  12+ 9F08 3A A6 C0    >                        ld       a,(XX15VecX)
  12+ 9F0B 32 30 C0    >                        ld       (UBnkrotmatRoofvX+1),a
  13+ 9F0E                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
  13+ 9F0E 3A A7 C0    >                        ld       a,(XX15VecY)
  13+ 9F11 32 32 C0    >                        ld       (UBnkrotmatRoofvY+1),a
  14+ 9F14                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  14+ 9F14 3A A8 C0    >                        ld       a,(XX15VecZ)
  14+ 9F17 32 34 C0    >                        ld       (UBnkrotmatRoofvZ+1),a
  15+ 9F1A                      ZeroA
  15+ 9F1A AF          >                        xor a
  16+ 9F1B 32 2F C0             ld  (UBnkrotmatRoofvX),a
  17+ 9F1E 32 31 C0             ld  (UBnkrotmatRoofvY),a
  18+ 9F21 32 33 C0             ld  (UBnkrotmatRoofvZ),a
  19+ 9F24 C9                   ret
  20+ 9F25
  21+ 9F25              CopyXX15toRotMatSideV:
  22+ 9F25                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  22+ 9F25 3A A6 C0    >                        ld       a,(XX15VecX)
  22+ 9F28 32 2A C0    >                        ld       (UBnkrotmatSidevX+1),a
  23+ 9F2B                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  23+ 9F2B 3A A7 C0    >                        ld       a,(XX15VecY)
  23+ 9F2E 32 2C C0    >                        ld       (UBnkrotmatSidevY+1),a
  24+ 9F31                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  24+ 9F31 3A A8 C0    >                        ld       a,(XX15VecZ)
  24+ 9F34 32 2E C0    >                        ld       (UBnkrotmatSidevZ+1),a
  25+ 9F37                      ZeroA
  25+ 9F37 AF          >                        xor a
  26+ 9F38 32 29 C0             ld  (UBnkrotmatSidevX),a
  27+ 9F3B 32 2B C0             ld  (UBnkrotmatSidevY),a
  28+ 9F3E 32 2D C0             ld  (UBnkrotmatSidevZ),a
  29+ 9F41 C9                   ret
  30+ 9F42
# file closed: ./Universe/Ships/CopyXX15toRotMat.asm
 643  9F42                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ 9F42              ;rotmap0xLo: DB	0				; INWK +9
   2+ 9F42              ;rotmap0xHi: DB	0				; INWK +10
   3+ 9F42              ;rotmat0yLo: DB	0				; INWK +11
   4+ 9F42              ;rotmat0yHi: DB	0				; INWK +12
   5+ 9F42              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ 9F42              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ 9F42              ;rotmap1xLo: DB	0				; INWK +15
   8+ 9F42              ;rotmap1xHi:	DB	0				; INWK +16
   9+ 9F42              ;rotmat1yLo:	DB	0				; INWK +17
  10+ 9F42              ;rotmat1yHi:	DB	0				; INWK +18
  11+ 9F42              ;rotmat1zLo:	DB	0				; INWK +19
  12+ 9F42              ;rotmat1zHi:	DB	0				; INWK +20
  13+ 9F42              ;rotmat2xLo: DB	0				; INWK +21
  14+ 9F42              ;rotmat2xHi:	DB	0				; INWK +22
  15+ 9F42              ;rotmat2yLo:	DB	0				; INWK +23
  16+ 9F42              ;rotmat2yHi:	DB	0				; INWK +24
  17+ 9F42              ;rotmat2zLo:	DB	0				; INWK +25
  18+ 9F42              ;rotmat2zHi:	DB	0				; INWK +26
  19+ 9F42              ;
  20+ 9F42              ;rotmatFx	equ	rotmat0xHi
  21+ 9F42              ;rotmatFy	equ	rotmat0yHi
  22+ 9F42              ;rotmatFz	equ	rotmat0zHi
  23+ 9F42              ;rotmatUx	equ	rotmat1xHi
  24+ 9F42              ;rotmatUy	equ	rotmat1yHi
  25+ 9F42              ;rotmatUz	equ	rotmat1zHi
  26+ 9F42              ;
  27+ 9F42              ;inwkarray			equ		INWK+10
  28+ 9F42
  29+ 9F42
  30+ 9F42
  31+ 9F42
  32+ 9F42              ; Divide that sets value to FFFF if divide by 0 unless main value is 0, then 0
  33+ 9F42
  34+ 9F42              ; (P+1 A) = (A P) / Q
  35+ 9F42              ;  B A    = (A P) / Q
  36+ 9F42              ; TESTED OK
  37+ 9F42
  38+ 9F42
  39+ 9F42 2A A6 C0     NormalizeXX15:          ld      hl, (XX15VecX)              ; h= VecX, l = VecY
  40+ 9F45 3A A8 C0                             ld      a,  (XX15VecZ)              ; a = VecZ, d we don't care
  41+ 9F48 E6 7F        .ABSZ:                  and     SignMask8Bit
  42+ 9F4A FD 67                                ld      iyh,a                       ; iyh = abs z
  43+ 9F4C 57           .ZSquared:              ld      d,a
  44+ 9F4D 5F                                   ld      e,a
  45+ 9F4E ED 30                                mul     de
  46+ 9F50 42 4B                                ld      bc,de                       ; bc = z squared
  47+ 9F52 7D           .ABSX:                  ld      a,l
  48+ 9F53 E6 7F        .XSquared:              and     SignMask8Bit
  49+ 9F55 DD 67                                ld      ixh,a                       ; ixh = abs x
  50+ 9F57 57                                   ld      d,a
  51+ 9F58 5F                                   ld      e,a
  52+ 9F59 ED 30                                mul     de
  53+ 9F5B EB                                   ex      de,hl                       ; hl = x squared
  54+ 9F5C 7A           .ABSY:                  ld      a,d                         ; as h was swapped into d
  55+ 9F5D E6 7F                                and     SignMask8Bit
  56+ 9F5F DD 6F                                ld      ixl,a                       ; ixl = abs y
  57+ 9F61 5F           .YSquared:              ld      e,a
  58+ 9F62 57                                   ld      d,a
  59+ 9F63 ED 30                                mul     de                          ; de = y squared
  60+ 9F65 19                                   add     hl,de                       ; hl = hl + de + bc
  61+ 9F66 09                                   add     hl,bc                       ;
  62+ 9F67 EB                                   ex      de,hl
  63+ 9F68 CD 75 97                             call    asm_sqrt                    ; d = iyl =hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
  64+ 9F6B 55                                   ld      d,l
  65+ 9F6C FD 6A                                ld      iyl,d
  66+ 9F6E DD 7C        .NormaliseX:            ld      a,ixh                       ; normalise x
  67+ 9F70 CD 94 9C                             call    AequAdivDmul967Bit
  68+ 9F73 57                                   ld      d,a
  69+ 9F74 3A A6 C0                             ld      a,(XX15VecX)
  70+ 9F77 E6 80                                and     SignOnly8Bit
  71+ 9F79 B2                                   or      d
  72+ 9F7A 32 A6 C0                             ld      (XX15VecX),a
  73+ 9F7D DD 7D        .NormaliseY:            ld      a,ixl                       ; normalise y
  74+ 9F7F 55                                   ld      d,l
  75+ 9F80 CD 94 9C                             call    AequAdivDmul967Bit
  76+ 9F83 57                                   ld      d,a
  77+ 9F84 3A A7 C0                             ld      a,(XX15VecY)
  78+ 9F87 E6 80                                and     SignOnly8Bit
  79+ 9F89 B2                                   or      d
  80+ 9F8A 32 A7 C0                             ld      (XX15VecY),a
  81+ 9F8D FD 7C        .NormaliseZ:            ld      a,iyh                       ; normalise z
  82+ 9F8F 55                                   ld      d,l
  83+ 9F90 CD 94 9C                             call    AequAdivDmul967Bit
  84+ 9F93 57                                   ld      d,a
  85+ 9F94 3A A8 C0                             ld      a,(XX15VecZ)
  86+ 9F97 E6 80                                and     SignOnly8Bit
  87+ 9F99 B2                                   or      d
  88+ 9F9A 32 A8 C0                             ld      (XX15VecZ),a
  89+ 9F9D C9                                   ret
  90+ 9F9E
  91+ 9F9E              TidyNormaliseNoseV:     MACRO
  92+ 9F9E ~                                    call	CopyRotMatNoseVtoXX15	    ; copy over matrix row 3 (Nosev)
  93+ 9F9E ~                                    call	NormalizeXX15			    ; normalise z hi, its really TIS3 and write back to matrix
  94+ 9F9E ~                                    call	CopyXX15toRotMatNoseV       ; .
  95+ 9F9E                                      ENDM
  96+ 9F9E              TidyNormaliseRoofV:     MACRO
  97+ 9F9E ~                                    call	CopyRotMatRoofVtoXX15
  98+ 9F9E ~                                    call	NormalizeXX15			; normalise z hi, its really TIS3
  99+ 9F9E ~                                    call	CopyXX15toRotMatRoofV
 100+ 9F9E                                      ENDM
 101+ 9F9E
 102+ 9F9E
 103+ 9F9E DD 01        TidyUbnK:               break
 104+ 9FA0                                      TidyNormaliseNoseV
 104+ 9FA0 CD B2 9E    >                        call	CopyRotMatNoseVtoXX15	    ; copy over matrix row 3 (Nosev)
 104+ 9FA3 CD 42 9F    >                        call	NormalizeXX15			    ; normalise z hi, its really TIS3 and write back to matrix
 104+ 9FA6 CD EB 9E    >                        call	CopyXX15toRotMatNoseV       ; .
 105+ 9FA9 3A 36 C0                             ld      a,(UBnkrotmatNosevX+1)      ; Now check and see which vector elemetn we are going to
 106+ 9FAC E6 60                                and     %01100000                   ; if X is not small then we go straigth to roofx
 107+ 9FAE C2 46 A0                             jp      nz,.ProcessRoofX            ; .
 108+ 9FB1 3A 38 C0     .TidyXIsSmall:          ld      a,(UBnkrotmatNosevY+1)      ; Else we test Y on to using
 109+ 9FB4 E6 60                                and     %01100000                   ; if Y is not small we process roofz
 110+ 9FB6 20 47                                jr      nz,.ProcessRoofZ            ; .
 111+ 9FB8              ;...roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 112+ 9FB8 3A 36 C0     .ProcessRoofY:          ld		a,(UBnkrotmatNosevX+1)
 113+ 9FBB 32 9C 83                             ld		(varQ),a					; q = nosev_y
 114+ 9FBE 3A 30 C0                             ld		a,(UBnkrotmatRoofvX+1)	    ;roov z
 115+ 9FC1 CD A4 9E                             call	RSequQmulA
 116+ 9FC4 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 117+ 9FC7 32 9C 83                             ld		(varQ),a					; b = regX for now
 118+ 9FCA 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 119+ 9FCD CD 14 96                             call	madDEequQmulAaddRS
 120+ 9FD0 7A                                   ld      a,d                         ; flip sign bit
 121+ 9FD1 EE 80                                xor     SignOnly8Bit
 122+ 9FD3 57                                   ld      d,a
 123+ 9FD4 3A 38 C0                             ld      a,(UBnkrotmatNosevY+1)
 124+ 9FD7 32 9C 83                             ld      (varQ),a
 125+ 9FDA 7A           .YTest0Div:             ld      a,d
 126+ 9FDB E6 7F                                and     $7F
 127+ 9FDD B3                                   or      e
 128+ 9FDE FE 00                                cp      0
 129+ 9FE0 20 0E                                jr      nz,.SkipYZeroTest
 130+ 9FE2                                      ZeroA
 130+ 9FE2 AF          >                        xor a
 131+ 9FE3 C3 40 A0                             jp      .SetRoofZ
 132+ 9FE6 FE 00        .YTestDiv0:             cp      0
 133+ 9FE8 20 06                                jr      nz,.SkipYZeroTest
 134+ 9FEA 3E 60        .YDivideByZero:         ld      a,96
 135+ 9FEC B2                                   or      d
 136+ 9FED C3 40 A0                             jp      .SetRoofZ
 137+ 9FF0 7B           .SkipYZeroTest:         ld      a,e
 138+ 9FF1 32 9A 82                             ld      (varP),a
 139+ 9FF4 7A                                   ld      a,d
 140+ 9FF5 CD A8 97                             call    DVIDT
 141+ 9FF8 78                                   ld      a,b
 142+ 9FF9 32 32 C0     .SetRoofY:              ld      (UBnkrotmatRoofvY+1),a
 143+ 9FFC C3 8A A0                             jp      .DoneRoof
 144+ 9FFF              ;...roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 145+ 9FFF 3A 36 C0     .ProcessRoofZ:          ld		a,(UBnkrotmatNosevX+1)      ; Failing that we default to Z
 146+ A002 32 9C 83                             ld		(varQ),a				    ; q = nosev_y
 147+ A005 3A 30 C0                             ld		a,(UBnkrotmatRoofvX+1)	    ;roov z
 148+ A008 CD A4 9E                             call	RSequQmulA
 149+ A00B 3A 38 C0                             ld		a,(UBnkrotmatNosevY+1)	    ; nosev z
 150+ A00E 32 9C 83                             ld		(varQ),a				    ; b = regX for now
 151+ A011 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 152+ A014 CD 14 96                             call	madDEequQmulAaddRS
 153+ A017 7A                                   ld      a,d                         ; flip sign bit
 154+ A018 EE 80                                xor     SignOnly8Bit
 155+ A01A 57                                   ld      d,a
 156+ A01B 3A 3A C0                             ld      a,(UBnkrotmatNosevZ+1)
 157+ A01E 32 9C 83                             ld      (varQ),a
 158+ A021 7A           .ZTest0Div:             ld      a,d
 159+ A022 E6 7F                                and     $7F
 160+ A024 B3                                   or      e
 161+ A025 FE 00                                cp      0
 162+ A027 20 0E                                jr      nz,.SkipZZeroTest
 163+ A029                                      ZeroA
 163+ A029 AF          >                        xor a
 164+ A02A C3 40 A0                             jp      .SetRoofZ
 165+ A02D FE 00        .ZTestDiv0:             cp      0
 166+ A02F 20 06                                jr      nz,.SkipZZeroTest
 167+ A031 3E 60        .ZDivideByZero:         ld      a,96
 168+ A033 B2                                   or      d
 169+ A034 C3 40 A0                             jp      .SetRoofZ
 170+ A037 7B           .SkipZZeroTest:         ld      a,e
 171+ A038 32 9A 82                             ld      (varP),a
 172+ A03B 7A                                   ld      a,d
 173+ A03C CD A8 97                             call    DVIDT
 174+ A03F 78                                   ld      a,b
 175+ A040 32 34 C0     .SetRoofZ:              ld      (UBnkrotmatRoofvZ+1),a
 176+ A043 C3 8A A0                             jp      .DoneRoof
 177+ A046              ;...roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 178+ A046 3A 38 C0     .ProcessRoofX:          ld		a,(UBnkrotmatNosevY+1)      ; so we set Q to Nose Y
 179+ A049 32 9C 83                             ld		(varQ),a					; q = nosev_y
 180+ A04C 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; A = roofv Y
 181+ A04F CD A4 9E                             call	RSequQmulA                  ; RS = NoseY & RoofY
 182+ A052 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 183+ A055 32 9C 83                             ld		(varQ),a					; b = regX for now
 184+ A058 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 185+ A05B CD 14 96                             call	madDEequQmulAaddRS
 186+ A05E 7A                                   ld      a,d                         ; flip sign bit
 187+ A05F EE 80                                xor     SignOnly8Bit
 188+ A061 57                                   ld      d,a
 189+ A062 3A 36 C0                             ld      a,(UBnkrotmatNosevX+1)
 190+ A065 32 9C 83                             ld      (varQ),a
 191+ A068 7A           .XTest0Div:             ld      a,d
 192+ A069 E6 7F                                and     $7F
 193+ A06B B3                                   or      e
 194+ A06C FE 00                                cp      0
 195+ A06E 20 0E                                jr      nz,.SkipXZeroTest
 196+ A070                                      ZeroA
 196+ A070 AF          >                        xor a
 197+ A071 C3 40 A0                             jp      .SetRoofZ
 198+ A074 FE 00        .XTestDiv0:             cp      0
 199+ A076 20 06                                jr      nz,.SkipXZeroTest
 200+ A078 3E 60        .XDivideByZero:         ld      a,96
 201+ A07A B2                                   or      d
 202+ A07B C3 87 A0                             jp      .SetRoofX
 203+ A07E 7B           .SkipXZeroTest:         ld      a,e
 204+ A07F 32 9A 82                             ld      (varP),a
 205+ A082 7A                                   ld      a,d
 206+ A083 CD A8 97                             call    DVIDT
 207+ A086 78                                   ld      a,b
 208+ A087 32 30 C0     .SetRoofX:              ld      (UBnkrotmatRoofvX+1),a
 209+ A08A              .DoneRoof:              TidyNormaliseRoofV
 209+ A08A CD C5 9E    >                        call	CopyRotMatRoofVtoXX15
 209+ A08D CD 42 9F    >                        call	NormalizeXX15			; normalise z hi, its really TIS3
 209+ A090 CD 08 9F    >                        call	CopyXX15toRotMatRoofV
 210+ A093              ;...sidex = ((nosez * roofy) - nosey * roofz) / 96
 211+ A093 3A 3A C0     .DoSidevX:              ld		a,(UBnkrotmatNosevZ+1)      ;  -(-nosev_z * roofv_y + nosev_y * roofv_z) / 96
 212+ A096 EE 80                                xor     SignOnly8Bit
 213+ A098 32 9C 83                             ld		(varQ),a					; q = nosev_y
 214+ A09B 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	     ;roov z
 215+ A09E CD A4 9E                             call	RSequQmulA
 216+ A0A1 3A 38 C0                             ld		a,(UBnkrotmatNosevY+1)		; nosev z
 217+ A0A4 32 9C 83                             ld		(varQ),a							; b = regX for now
 218+ A0A7 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 219+ A0AA CD 14 96                             call	madDEequQmulAaddRS
 220+ A0AD CD F0 97                             call    BAequDEdiv96
 221+ A0B0 78                                   ld      a,b
 222+ A0B1 32 2A C0                             ld      (UBnkrotmatSidevX+1),a
 223+ A0B4              ;...sidey = ((nosex * roofz) - nosez * roofx) / 96
 224+ A0B4 3A 36 C0     .DoSidevY:              ld		a,(UBnkrotmatNosevX+1)      ; -(-nosev_x * roofv_z - nosev_z * roofv_x) / 96
 225+ A0B7 EE 80                                xor     SignOnly8Bit
 226+ A0B9 32 9C 83                             ld		(varQ),a					; q = nosev_y
 227+ A0BC 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roov z
 228+ A0BF CD A4 9E                             call	RSequQmulA                  ; rs = nosex * roofz
 229+ A0C2 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 230+ A0C5 32 9C 83                             ld		(varQ),a					; b = regX for now
 231+ A0C8 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 232+ A0CB CD 14 96                             call	madDEequQmulAaddRS          ; DE = noseyz* roofz +
 233+ A0CE CD F0 97                             call    BAequDEdiv96
 234+ A0D1 78                                   ld      a,b
 235+ A0D2 32 2C C0                             ld      (UBnkrotmatSidevY+1),a         ;-(-nosev_y * roofv_x + nosev_x * roofv_y) / 96
 236+ A0D5              ;...sidez = ((nosey * roofx) - nosex * roofy) / 96
 237+ A0D5 3A 38 C0     .DoSidevZ:              ld		a,(UBnkrotmatNosevY+1)      ;
 238+ A0D8 EE 80                                xor     SignOnly8Bit
 239+ A0DA 32 9C 83                             ld		(varQ),a					; q = nosev_y
 240+ A0DD 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 241+ A0E0 CD A4 9E                             call	RSequQmulA
 242+ A0E3 3A 36 C0                             ld		a,(UBnkrotmatNosevX+1)		; nosev z
 243+ A0E6 32 9C 83                             ld		(varQ),a							; b = regX for now
 244+ A0E9 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 245+ A0EC CD 14 96                             call	madDEequQmulAaddRS
 246+ A0EF CD F0 97                             call    BAequDEdiv96
 247+ A0F2 78                                   ld      a,b
 248+ A0F3 32 2E C0                             ld      (UBnkrotmatSidevZ+1),a
 249+ A0F6                                      ZeroA
 249+ A0F6 AF          >                        xor a
 250+ A0F7 32 29 C0                             ld      (UBnkrotmatSidevX),a
 251+ A0FA 32 2B C0                             ld      (UBnkrotmatSidevY),a
 252+ A0FD 32 2D C0                             ld      (UBnkrotmatSidevZ),a
 253+ A100 C9                                   ret
 254+ A101
 255+ A101
 256+ A101              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
 257+ A101              		; b = regX on entry
 258+ A101              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
 259+ A101 08           		ex		af,af'
 260+ A102 78           		ld		a,b
 261+ A103 32 9C 83     		ld		(varQ),a
 262+ A106 08           		ex		af,af'
 263+ A107 EE 80        		xor		$80							;	 flip sign of Acc
 264+ A109 CD F2 95     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
 265+ A10C              ; USES 				A BC E
 266+ A10C              ; DOES NOT USE		D HL
 267+ A10C              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
 268+ A10C 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
 269+ A10D E6 80        		and		SignOnly8Bit						; ..
 270+ A10F 5F           		ld		e,a							; ..
 271+ A110 79           		ld		a,c							; a = high byte again with sign bit cleared
 272+ A111 E6 7F        		and		SignMask8Bit							; ..
 273+ A113 06 FE        		ld		b,$FE						; slide counter T1
 274+ A115              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
 275+ A115 CB 27        		sla		a
 276+ A117              		JumpIfALTNusng $60, TIS1SkipSub
 276+ A117 FE 60       >                        cp      $60
 276+ A119 DA 26 A1    >                        jp		c, TIS1SkipSub
 277+ A11C DE 60        		sbc		a,$60							; subtract 96
 278+ A11E 37           		scf
 279+ A11F CB 10        		rl		b							;  T1
 280+ A121 38 F2        		jr		c,TIS1RollTLoop
 281+ A123              TIS1KIPCont:
 282+ A123 78           		ld		a,b							;   T1
 283+ A124 B3           		or		e							;   restore T sign
 284+ A125 C9           		ret
 285+ A126              TIS1SkipSub:
 286+ A126 B7           	or			a
 287+ A127 CB 10        	rl			b							; T rolled left to push bit out the end
 288+ A129 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
 289+ A12B C3 23 A1     	jp			TIS1KIPCont
 290+ A12E
 291+ A12E              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
 292+ A12E              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
 293+ A12E
 294+ A12E
 295+ A12E
 296+ A12E
 297+ A12E              TidyRotYSmall:
 298+ A12E CD 57 A2     		call	CalcRoofvZ
 299+ A131 32 34 C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
 300+ A134 C3 68 A1     		jp		NormaliseRoofV
 301+ A137
 302+ A137              TidyRotXSmall:
 303+ A137 AF           		xor		a
 304+ A138 47           		ld		b,a
 305+ A139 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
 306+ A13C E6 60        		and		%01100000
 307+ A13E CA 2E A1     		jp		z,TidyRotYSmall
 308+ A141 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 309+ A144 47           		ld		b,a							; b = regX for now
 310+ A145 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 311+ A148 CD 1D A2     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
 312+ A14B 32 32 C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
 313+ A14E C3 68 A1     		jp		NormaliseRoofV
 314+ A151              ; TIDY is broken
 315+ A151
 316+ A151
 317+ A151              TIDY:
 318+ A151
 319+ A151              ORTHOGALISE:
 320+ A151              ;-- NormaliseNosev
 321+ A151 CD B2 9E     		call	CopyRotMatNoseVtoXX15
 322+ A154 CD D1 9A     		call	normaliseXX1596S7			; normalise z hi, its really TIS3
 323+ A157 CD EB 9E     		call	CopyXX15toRotMatNoseV
 324+ A15A              .CheckNXSmall:
 325+ A15A 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)
 326+ A15D E6 60        		and		%01100000					; check top two magnitude bits
 327+ A15F CA 37 A1     		jp		z,TidyRotXSmall
 328+ A162              .RotXIsBig:
 329+ A162 CD E3 A1             call	CalcRoofvX
 330+ A165 32 30 C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 331+ A168              NormaliseRoofV:
 332+ A168 CD C5 9E     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 333+ A16B CD D1 9A     		call	normaliseXX1596S7			; normalise roof
 334+ A16E              ;calc sidev x
 335+ A16E CD 08 9F     		call	CopyXX15toRotMatRoofV		; get back normalised version
 336+ A171 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)
 337+ A174 32 9C 83     		ld		(varQ),a					; q = nosev_y
 338+ A177 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 339+ A17A CD A4 9E     		call	RSequQmulA
 340+ A17D 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 341+ A180 47           		ld		b,a							; b = regX for now
 342+ A181 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 343+ A184 CD 01 A1     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 344+ A187                      JumpIfAIsZero NormSideXNoNeg
 344+ A187 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 344+ A188 CA 8D A1    >                        jp	    z, NormSideXNoNeg
 345+ A18B EE 80        		xor		$80							; flip a to get -sidev_x
 346+ A18D              NormSideXNoNeg:
 347+ A18D 32 2A C0     		ld		(UBnkrotmatSidevX+1),a
 348+ A190              ;calc sidev y
 349+ A190 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 350+ A193 32 9C 83     		ld		(varQ),a
 351+ A196 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 352+ A199 CD A4 9E     		call	RSequQmulA
 353+ A19C 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 354+ A19F 47           		ld		b,a							; b = regX for now
 355+ A1A0 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 356+ A1A3 CD 01 A1     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 357+ A1A6                      JumpIfAIsZero NormSideYNoNeg
 357+ A1A6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 357+ A1A7 CA AC A1    >                        jp	    z, NormSideYNoNeg
 358+ A1AA EE 80        		xor		$80							; flip a to get -sidev_y
 359+ A1AC              NormSideYNoNeg:
 360+ A1AC 32 38 C0     		ld		(UBnkrotmatNosevY+1),a
 361+ A1AF              ;calc sidev z
 362+ A1AF 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 363+ A1B2 32 9C 83     		ld		(varQ),a
 364+ A1B5 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 365+ A1B8 CD A4 9E     		call	RSequQmulA
 366+ A1BB 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 367+ A1BE 47           		ld		b,a							; b = regX for now
 368+ A1BF 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 369+ A1C2 CD 01 A1     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 370+ A1C5                      JumpIfAIsZero NormSideZNoNeg
 370+ A1C5 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 370+ A1C6 CA CB A1    >                        jp	    z, NormSideZNoNeg
 371+ A1C9 EE 80        		xor		$80							; flip a to get -sidev_y
 372+ A1CB              NormSideZNoNeg:
 373+ A1CB 32 2C C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 374+ A1CE              .ClearLoBytes:
 375+ A1CE 21 35 C0     		ld		hl,UBnkrotmatNosevX
 376+ A1D1 06 09        		ld		b,9
 377+ A1D3 AF                   xor     a
 378+ A1D4              .ClearLoLoop:
 379+ A1D4 77           		ld		(hl),a						; zero out lo bytes
 380+ A1D5 23           		inc		hl
 381+ A1D6 23           		inc		hl
 382+ A1D7 10 FB        		djnz	.ClearLoLoop
 383+ A1D9 CD D8 9E     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 384+ A1DC CD D1 9A     		call	normaliseXX1596S7			; normalise roof
 385+ A1DF              ;calc sidev x
 386+ A1DF CD 25 9F     		call	CopyXX15toRotMatSideV		; get back normalised version
 387+ A1E2
 388+ A1E2 C9           		ret
 389+ A1E3
 390+ A1E3
 391+ A1E3              CalcRoofvX:
 392+ A1E3              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 393+ A1E3              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 393+ A1E3 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 393+ A1E6 32 9C 83    >                        ld       (varQ),a
 394+ A1E9 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 395+ A1EC CD A4 9E     		call	RSequQmulA						; rs = nosez hi * roofz hi
 396+ A1EF              		ldCopyByte UBnkrotmatNosevY+1,varQ
 396+ A1EF 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 396+ A1F2 32 9C 83    >                        ld       (varQ),a
 397+ A1F5 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)
 398+ A1F8 CD F2 95     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 399+ A1FB 7A           		ld		a,d
 400+ A1FC E6 80        		and 	$80
 401+ A1FE FD 67        		ld		iyh,a
 402+ A200              ;DEBUG		ld		c,a
 403+ A200 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 404+ A203 4F           		ld		c,a								; temp save
 405+ A204 E6 80        		and		$80
 406+ A206 FD AC        		xor		iyh								; flip from saved multiply sign result
 407+ A208 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 408+ A20A 79           		ld		a,c								; recover a
 409+ A20B E6 7F        		and		$7F								; a is unsigned nosev x
 410+ A20D 42           		ld		b,d
 411+ A20E 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 412+ A20F 57           		ld		d,a								; de = nosev x hi
 413+ A210 1E 00        		ld		e,0
 414+ A212 CD B0 99     		call	BC_Div_DE
 415+ A215 FD 7C        		ld		a,iyh							; get back sign from nosevx
 416+ A217 EE 80        		xor		$80								; flip sign
 417+ A219 E6 80        		and		$80								; keep sign bit only
 418+ A21B B0           		or		b
 419+ A21C C9           		ret
 420+ A21D
 421+ A21D
 422+ A21D              CalcRoofvY:
 423+ A21D              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 424+ A21D              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 424+ A21D 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 424+ A220 32 9C 83    >                        ld       (varQ),a
 425+ A223 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 426+ A226 CD A4 9E     		call	RSequQmulA
 427+ A229              		ldCopyByte UBnkrotmatNosevX+1,varQ
 427+ A229 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 427+ A22C 32 9C 83    >                        ld       (varQ),a
 428+ A22F 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)
 429+ A232 CD F2 95     		call	madXAequQmulAaddRS
 430+ A235 7A           		ld		a,d
 431+ A236 E6 80        		and 	$80
 432+ A238 FD 67        		ld		iyh,a
 433+ A23A 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 434+ A23D 4F           		ld		c,a								; temp save
 435+ A23E E6 80        		and		$80
 436+ A240 FD AC        		xor		iyh								; flip from saved multiply sign result
 437+ A242 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 438+ A244 79           		ld		a,c								; recover a
 439+ A245 E6 7F        		and		$7F								; a is unsigned nosev x
 440+ A247 42           		ld		b,d
 441+ A248 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 442+ A249 57           		ld		d,a								; de = nosev x hi
 443+ A24A 1E 00        		ld		e,0
 444+ A24C CD B0 99     		call	BC_Div_DE
 445+ A24F FD 7C        		ld		a,iyh
 446+ A251 EE 80        		xor		$80
 447+ A253 E6 80        		and		$80
 448+ A255 B0           		or		b
 449+ A256 C9           		ret
 450+ A257
 451+ A257              CalcRoofvZ:
 452+ A257              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 453+ A257              		ldCopyByte UBnkrotmatNosevY+1,varQ
 453+ A257 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 453+ A25A 32 9C 83    >                        ld       (varQ),a
 454+ A25D 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)
 455+ A260 CD A4 9E     		call	RSequQmulA						; rs = NOSEy * ROOFy
 456+ A263              		ldCopyByte UBnkrotmatNosevX+1,varQ
 456+ A263 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 456+ A266 32 9C 83    >                        ld       (varQ),a
 457+ A269 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)
 458+ A26C CD F2 95     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 459+ A26F 7A           		ld		a,d
 460+ A270 E6 80        		and 	$80
 461+ A272 FD 67        		ld		iyh,a
 462+ A274 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 463+ A277 4F           		ld		c,a								; temp save
 464+ A278 E6 80        		and		$80
 465+ A27A FD AC        		xor		iyh								; flip from saved multiply sign result
 466+ A27C FD 67        		ld		iyh,a							; save nosesev sign to iyh
 467+ A27E 79           		ld		a,c								; recover a
 468+ A27F E6 7F        		and		$7F								; a is unsigned nosev x
 469+ A281 42           		ld		b,d
 470+ A282 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 471+ A283 57           		ld		d,a								; de = nosev x hi
 472+ A284 1E 00        		ld		e,0
 473+ A286 CD B0 99     		call	BC_Div_DE
 474+ A289 FD 7C        		ld		a,iyh
 475+ A28B EE 80        		xor		$80
 476+ A28D E6 80        		and		$80
 477+ A28F B0           		or		b
 478+ A290 C9           		ret
 479+ A291
# file closed: ./Maths/Utilities/tidy.asm
 644  A291                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ A291
   2+ A291              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ A291 BA          >                        cp     d
   2+ A292 D2 B0 A2    >                        jp		nc,.Ll28Exit255
   3+ A295 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ A297 CB 27        .LL31:                  sla     a
   5+ A299 38 0D                                jr      c,.LL29
   6+ A29B                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ A29B BA          >                        cp      d
   6+ A29C DA A1 A2    >                        jp		c, .SkipSub
   7+ A29F 92                                   sub     d
   8+ A2A0                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ A2A0 B7          >                        or a
   9+ A2A1 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ A2A2 CB 13                                rl      e
  11+ A2A4 38 F1                                jr      c,.LL31
  12+ A2A6 7B                                   ld      a,e
  13+ A2A7 C9                                   ret
  14+ A2A8 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ A2A9 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ A2AA CB 13                                rl      e                           ; rotate counter e left
  17+ A2AC 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ A2AE 7B                                   ld      a,e                         ; stick result in a
  19+ A2AF C9                                   ret
  20+ A2B0 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ A2B2 C9                                   ret
  22+ A2B3
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
 645  A2B3                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ A2B3              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ A2B3              TIS1:
   3+ A2B3 08           		ex		af,af'
   4+ A2B4 3A 83 82     		ld		a,(regX)
   5+ A2B7 47           		ld		b,a
   6+ A2B8 08           		ex		af,af'
   7+ A2B9              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ A2B9 08           		ex		af,af'
   9+ A2BA 78           		ld		a,b
  10+ A2BB 32 9C 83     		ld		(varQ),a
  11+ A2BE 08           		ex		af,af'
  12+ A2BF EE 80        		xor		$80							;	 flip sign of Acc
  13+ A2C1 CD F2 95     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ A2C4              ; USES 				A BC E
  15+ A2C4              ; DOES NOT USE		D HL
  16+ A2C4              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ A2C4 47           		ld		b,a
  18+ A2C5 E6 80        		and		$80							;	hi sign
  19+ A2C7 5F           		ld		e,a							;   e = varT
  20+ A2C8 78           		ld		a,b
  21+ A2C9 E6 7F        		and		$7F							;	hi A7
  22+ A2CB 06 FE        		ld		b,$FE						;   slide counter
  23+ A2CD 48           		ld		c,b							;   c == T1 ::  T1
  24+ A2CE              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ A2CE CB 27        		sla		a
  26+ A2D0 FE 60        		cp		$60							; max 96
  27+ A2D2 30 02        		jr		nc,.DV4
  28+ A2D4 DE 60        		sbc		a,$60							;  SBC #&60
  29+ A2D6              .DV4:										; skip subtraction
  30+ A2D6 CB 11        		rl		c							;  T1
  31+ A2D8 38 F4        		jr		c,.DVL3
  32+ A2DA 79           		ld		a,c							;   T1
  33+ A2DB B3           		or		e							;   restore T sign
  34+ A2DC C9           		ret
  35+ A2DD
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
 646  A2DD              ;INCLUDE "XAequQmuilAaddRS-MAD-ADD.asm"
 647  A2DD              ;INCLUDE "XHiYLoequPA-gc3.asm"
 648  A2DD              ;INCLUDE "XHiYLoequPmulAmul4-gc2.asm"
 649  A2DD              ;INCLUDE "XLoYHiequPmulQmul4-gcash.asm"
 650  A2DD              ;INCLUDE "XX12equXX15byXX16-LL51.asm"
 651  A2DD                ;  INCLUDE "./Maths/Utilities/XYeqyx1loSmulMdiv256-Ll120-LL123.asm"
 652  A2DD
 653  A2DD                  INCLUDE "./GameEngine/Tactics.asm"
# file opened: ./GameEngine/Tactics.asm
   1+ A2DD
   2+ A2DD                                      DEFINE TACTICSDEBUG 1
   3+ A2DD              ;                        DEFINE TARGETDEBUG 1
   4+ A2DD              MISSILEMAXPITCH         equ 3
   5+ A2DD              MISSILEMINPITCH         equ -3
   6+ A2DD              MISSILEMAXROLL          equ 3
   7+ A2DD              MISSILEMINROLL          equ -3
   8+ A2DD              ;Ship Tactics
   9+ A2DD              ;ShipTypeNormal          equ 0
  10+ A2DD              ;ShipTypeMissile         equ 1
  11+ A2DD              ;ShipTypeStation         equ 2
  12+ A2DD              ;ShipTypeJunk            equ 3
  13+ A2DD              ;ShipTypeScoopable       equ 4         ; a sub set of junk
  14+ A2DD              ; To be added
  15+ A2DD              ;ShipTypeTargoid
  16+ A2DD              ;ShipTypeHermit
  17+ A2DD              ; Maybe add the followign with ai flags changing in memory shiptype
  18+ A2DD              ;ShipTypePirate
  19+ A2DD              ;ShipTypeBountyHunter
  20+ A2DD              ;ShipTypeTrader
  21+ A2DD              ;ShipType.....
  22+ A2DD              ;ShipTypeMissionTypeA
  23+ A2DD              ;ShipTypeMissionTypeB
  24+ A2DD              ;ShipTypeMissionTypeETC
  25+ A2DD              ;ShipTypeNoAI
  26+ A2DD
  27+ A2DD
  28+ A2DD
  29+ A2DD 71 A8 18 A5  ShipAIJumpTable:      DW    NormalAI,   MissileAIV3,  StationAI,  JunkAI,     ScoopableAI
  29+ A2E1 0D A3 0E A3
  29+ A2E5 0F A3
  30+ A2E7 10 A3 11 A3                        DW    ThargoidAI, NoAI,       NoAI,       NoAI,       NoAI
  30+ A2EB 11 A3 11 A3
  30+ A2EF 11 A3
  31+ A2F1              ShipAiJumpTableMax:   EQU ($ - ShipAIJumpTable)/2
  32+ A2F1
  33+ A2F1
  34+ A2F1
  35+ A2F1              ;----------------------------------------------------------------------------------------------------------------------------------
  36+ A2F1              ; Main entry point to tactics. Every time it will do a a tidy and the do AI logic
  37+ A2F1              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
  38+ A2F1 21 FC 6A                            ld      hl,TidyCounter
  39+ A2F4 35                                  dec     (hl)
  40+ A2F5                                     ;call     z,TidyUbnK  ;TODO SEE IF THIS IS AN ISSUE
  41+ A2F5                                     ; This shoudl be a call nz to tidy *****ret     nz
  42+ A2F5 3E 10                               ld      a,16
  43+ A2F7 32 FC 6A                            ld      (TidyCounter),a
  44+ A2FA                                     ;call    TidyUbnK
  45+ A2FA                                     ; add AI in here too
  46+ A2FA 3A 45 C3                            ld       a,(ShipTypeAddr)
  47+ A2FD                                     ReturnIfAGTEusng ShipAiJumpTableMax              ; TODO capture duff jumps whilst debugging in case a new shjip type code is added
  47+ A2FD FE 0A       >                        cp    ShipAiJumpTableMax
  47+ A2FF D0          >                        ret	 nc
  48+ A300 21 DD A2                            ld       hl,ShipAIJumpTable
  49+ A303 ED 31                               add      hl,a
  50+ A305 ED 31                               add      hl,a
  51+ A307 7E                                  ld       a,(hl)                                  ; contrary to the name
  52+ A308 23                                  inc      hl                                      ; jp (hl) is really
  53+ A309 66                                  ld       h,(hl)                                  ; jp hl
  54+ A30A 6F                                  ld       l,a                                     ;
  55+ A30B E9                                  jp       hl                                      ; Follow the AI Jump Table
  56+ A30C C9                                  ret                                              ; not needed as jp handles this
  57+ A30D
  58+ A30D
  59+ A30D
  60+ A30D              ; used  when no pre-checks are requrired, e.g. if forcing a space station from main loop
  61+ A30D
  62+ A30D
  63+ A30D C9           StationAI:              ret
  64+ A30E C9           JunkAI:                 ret
  65+ A30F C9           ScoopableAI:            ret
  66+ A310 C9           ThargoidAI:             ret
  67+ A311 C9           NoAI:                   ret
  68+ A312              ;----------------------------------------------------------------------------------------------------------------------------------
  69+ A312 3A 47 C3     CalculateAgression:     ld      a,(ShipAIFlagsAddr)
  70+ A315 47                                   ld      b,a
  71+ A316 E6 02                                and     %00000010
  72+ A318 20 0E                                jr      nz,.UltraHostile
  73+ A31A 78                                   ld      a,b
  74+ A31B E6 F0                                and     %11110000                               ; if it can can anger a fighter bay then generally more hostile as implies its a large ship
  75+ A31D 47                                   ld      b,a
  76+ A31E 3A 46 C3                             ld      a,(ShipNewBitsAddr)
  77+ A321 E6 4E                                and     %01001110                               ; We look at if its a bounty hunter, hostile already, pirate and cop
  78+ A323 B0                                   or      b
  79+ A324 32 53 C0                             ld      (UBnKShipAggression),a
  80+ A327 C9                                   ret
  81+ A328 3E FF        .UltraHostile:          ld      a,$FF
  82+ A32A 32 53 C0                             ld      (UBnKShipAggression),a
  83+ A32D C9                                   ret
  84+ A32E              ;----------------------------------------------------------------------------------------------------------------------------------
  85+ A32E              ; set angry if possible, if its an innocent then flag the space station to get angry
  86+ A32E 3A 46 C3     MakeHostile:            ld      a,(ShipNewBitsAddr)                     ; Check bit 5 of newb flags
  87+ A331                                      ;break
  88+ A331                                      JumpIfMemEqNusng ShipTypeAddr, ShipTypeStation, .SetNewbHostile
  88+ A331 3A 45 C3    >                        ld  a,(ShipTypeAddr)
  88+ A334 FE 02       >                        cp  ShipTypeStation
  88+ A336 CA 55 A3    >                        jp  z,.SetNewbHostile
  89+ A339 E6 20        .ItsNotAStation:        and     ShipIsBystander                         ; check if space station present if its a bystander
  90+ A33B C4 68 A3                             call    nz, SetStationHostile                   ; Set Space Station if present, Angry
  91+ A33E 3A 54 C0                             ld      a,(UBnkaiatkecm)                        ; get AI data
  92+ A341                                      ReturnOnBitClear a, ShipAIEnabledBitNbr         ; if 0 then no AI attached so it can't get angry
  92+ A341 CB 7F       >                        bit 	ShipAIEnabledBitNbr,a
  92+ A343 C8          >                        ret		z
  93+ A344 4F                                   ld      c,a                                     ; Copy to c in case we need it later
  94+ A345                                      SetMemToN UBnKAccel, 2                          ; set accelleration to 2 to speed up
  94+ A345 3E 02       >                        ld      a,2
  94+ A347 32 47 C0    >                        ld      (UBnKAccel),a
  95+ A34A CB 27                                sla     a                                       ; set pitch to 4
  96+ A34C 32 49 C0                             ld      (UBnKRotZCounter),a                     ; .
  97+ A34F 3A 47 C3                             ld      a,(ShipAIFlagsAddr)
  98+ A352                                      ReturnIfBitMaskClear ShipCanAnger
  98+ A352 E6 80       >                        and     ShipCanAnger
  98+ A354 C8          >                        ret     z
  99+ A355 CD 52 C5     .SetNewbHostile:        call    SetShipHostile
 100+ A358 C9                                   ret
 101+ A359
 102+ A359              ;----------------------------------------------------------------------------------------------------------------------------------
 103+ A359 C9           MissileDidHitUs:        ret ; TODO
 104+ A35A
 105+ A35A              ;----------------------------------------------------------------------------------------------------------------------------------
 106+ A35A C9           PlayerHitByMissile:     ret; TODO , do hit set up blast radius etc
 107+ A35B              ;----------------------------------------------------------------------------------------------------------------------------------
 108+ A35B              MissileHitShipA:        MMUSelectLayer1
 108+ A35B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 109+ A35F 3E 02                                ld      a,L1ColourInkRed
 110+ A361 CD A5 E0                             call    l1_set_border
 111+ A364 CD 5A C6                             call    UnivExplodeShip
 112+ A367 C9                                   ret; TODO hit ship do explosion, check for near by and if player is near and missile type logic, e.g. AP or HE
 113+ A368              ;----------------------------------------------------------------------------------------------------------------------------------
 114+ A368 CD D2 88     SetStationHostile:      call    IsSpaceStationPresent                   ; only if present
 115+ A36B D8                                   ret     c
 116+ A36C 3A 40 C0                             ld      a,(UbnKShipUnivBankNbr)                     ; save current bank
 117+ A36F FD 67                                ld      iyh,a
 118+ A371                                      MMUSelectUniverseN 0                            ; space station is always 0
 118+ A371 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 119+ A375 CD 52 C5                             call    SetShipHostile
 120+ A378 FD 7C                                ld      a,iyh                                   ; get prev bank back
 121+ A37A                                      MMUSelectUniverseA                              ;
 121+ A37A C6 46       >                     add    a,BankUNIVDATA0
 121+ A37C ED 92 56    >                     nextreg UniverseMMU,       a
 122+ A37F C9                                   ret
 123+ A380
 124+ A380              ;----------------------------------------------------------------------------------------------------------------------------------
 125+ A380              CheckMissileBlastInit:  ZeroA
 125+ A380 AF          >                        xor a
 126+ A381 32 6E 84                             ld      (CurrentMissileCheck),a
 127+ A384 21 20 C0                             ld      hl,UBnKxlo                      ; Copy Blast Coordinates
 128+ A387 01 0C 00                             ld      bc,12                           ; and Damage stats
 129+ A38A 11 3C 84                             ld      de,MissileXPos
 130+ A38D ED B0                                ldir
 131+ A38F                                      ZeroA                                   ; we have processd enque request
 131+ A38F AF          >                        xor a
 132+ A390 32 44 C0                             ld      (UBnKMissleHitToProcess),a      ;
 133+ A393 CD 50 A4                             call    CheckIfBlastHitUs               ; If we are in Range
 134+ A396 DC 59 A3                             call    c, MissileDidHitUs              ; Then we get hit
 135+ A399 C9                                   ret
 136+ A39A
 137+ A39A              ;----------------------------------------------------------------------------------------------------------------------------------
 138+ A39A              CheckPointRange:        MACRO   ShipPos, ShipSign, MissilePos, MissileSign
 139+ A39A ~                                    ld      a,(MissilePos)                      ; check X Coord
 140+ A39A ~                                    ld      hl,(ShipSign)
 141+ A39A ~                                    xor     (hl)
 142+ A39A ~                                    and     SignOnly8Bit
 143+ A39A ~                                    ld      hl,(ShipPos)
 144+ A39A ~                                    ld      de,(MissilePos)
 145+ A39A ~                                    jr      z,.SignsDiffernt
 146+ A39A ~            .XSame:                 and     a
 147+ A39A ~                                    sbc     hl,de                               ; distance = Ship X - Missile X
 148+ A39A ~                                    JumpIfPositive      .CheckDiff              ; if result was -ve
 149+ A39A ~                                    NegHL
 150+ A39A ~                                    jp      .CheckDiff
 151+ A39A ~            .SignsDiffernt:         add     hl,de
 152+ A39A ~                                    ReturnIfNegative                            ; if we overflowed then return
 153+ A39A ~            .CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 154+ A39A ~                                    ReturnIfANotZero
 155+ A39A ~                                    ld      a,l
 156+ A39A ~                                    and     a
 157+ A39A ~                                    ReturnIfAGTEMemusng   CurrentMissileBlastRange
 158+ A39A                                      ENDM
 159+ A39A              ;...................................................................
 160+ A39A              ; We only do one test per loop for spreading the load of work
 161+ A39A 3A 6E 84     CheckMissileBlastLoop:  ld      a,(CurrentMissileCheck)
 162+ A39D                                      ReturnIfAGTENusng   UniverseSlotListSize
 162+ A39D FE 0C       >                        cp    UniverseSlotListSize
 162+ A39F D0          >                        ret	 nc
 163+ A3A0 FD 6F                                ld      iyl,a
 164+ A3A2 3C                                   inc     a                                   ; update for next slot so re can fast return on distance checks
 165+ A3A3 32 6E 84                             ld      (CurrentMissileCheck),a
 166+ A3A6                                      ReturnIfSlotAEmpty
 166+ A3A6 21 70 84    >                        ld      hl,UniverseSlotList
 166+ A3A9 ED 31       >                        add     hl,a
 166+ A3AB 7E          >                        ld      a,(hl)
 166+ A3AC 3C          >                        inc     a
 166+ A3AD C8          >                        ret     z           ; if slot was ff inc would make it 0
 166+ A3AE 3D          >                        dec     a           ; get original value back for later
 167+ A3AF CD D2 88                             call    IsSpaceStationPresent               ; If its a station its imune to missiles
 168+ A3B2 D8                                   ret     c                                   ; if we have a special mission to kill a staion then its type won't be space station for game logic
 169+ A3B3 3A 51 C0                             ld      a,(UBnKexplDsp)                     ; Don't explode a ship twice
 170+ A3B6 E6 20                                and     ShipExploding                       ;
 171+ A3B8                                      ReturnIfNotZero                             ;
 171+ A3B8 C0          >                        ret     nz
 172+ A3B9 3A 5D 84                             ld      a,(CurrentMissileBlastRange)
 173+ A3BC FD 67                                ld      iyh,a                               ; iyh = missile blast depending on type
 174+ A3BE FD 7D        .CheckRange:            ld      a,iyl                               ; now page in universe data
 175+ A3C0                                      MMUSelectUniverseA
 175+ A3C0 C6 46       >                     add    a,BankUNIVDATA0
 175+ A3C2 ED 92 56    >                     nextreg UniverseMMU,       a
 176+ A3C5                                      CheckPointRange UBnKxlo, UBnKxsgn, MissileXPos, MissileXSgn  ; its a square but its good enough
 176+ A3C5 3A 3C 84    >                        ld      a,(MissileXPos)                      ; check X Coord
 176+ A3C8 2A 22 C0    >                        ld      hl,(UBnKxsgn)
 176+ A3CB AE          >                        xor     (hl)
 176+ A3CC E6 80       >                        and     SignOnly8Bit
 176+ A3CE 2A 20 C0    >                        ld      hl,(UBnKxlo)
 176+ A3D1 ED 5B 3C 84 >                        ld      de,(MissileXPos)
 176+ A3D5 28 0F       >                        jr      z,.SignsDiffernt
 176+ A3D7 A7          >.XSame:                 and     a
 176+ A3D8 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 176+ A3DA             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 176+ A3DA F2 E8 A3    >                        jp		p, .CheckDiff
 176+ A3DD             >                        NegHL
 176+ A3DD AF          >                    xor a
 176+ A3DE 95          >                    sub l
 176+ A3DF 6F          >                    ld l,a
 176+ A3E0 9F          >                    sbc a,a
 176+ A3E1 94          >                    sub h
 176+ A3E2 67          >                    ld h,a
 176+ A3E3 C3 E8 A3    >                        jp      .CheckDiff
 176+ A3E6 19          >.SignsDiffernt:         add     hl,de
 176+ A3E7             >                        ReturnIfNegative                            ; if we overflowed then return
 176+ A3E7 F8          >                        ret     m
 176+ A3E8 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 176+ A3E9             >                        ReturnIfANotZero
 176+ A3E9 A7          >                        and     a
 176+ A3EA C0          >                        ret     nz
 176+ A3EB 7D          >                        ld      a,l
 176+ A3EC A7          >                        and     a
 176+ A3ED             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 176+ A3ED 21 5D 84    >                        ld      hl,CurrentMissileBlastRange
 176+ A3F0 BE          >                        cp      (hl)
 176+ A3F1 D0          >                        ret	    nc
 177+ A3F2                                      CheckPointRange UBnKylo, UBnKysgn, MissileYPos, MissileYSgn
 177+ A3F2 3A 3F 84    >                        ld      a,(MissileYPos)                      ; check X Coord
 177+ A3F5 2A 25 C0    >                        ld      hl,(UBnKysgn)
 177+ A3F8 AE          >                        xor     (hl)
 177+ A3F9 E6 80       >                        and     SignOnly8Bit
 177+ A3FB 2A 23 C0    >                        ld      hl,(UBnKylo)
 177+ A3FE ED 5B 3F 84 >                        ld      de,(MissileYPos)
 177+ A402 28 0F       >                        jr      z,.SignsDiffernt
 177+ A404 A7          >.XSame:                 and     a
 177+ A405 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 177+ A407             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 177+ A407 F2 15 A4    >                        jp		p, .CheckDiff
 177+ A40A             >                        NegHL
 177+ A40A AF          >                    xor a
 177+ A40B 95          >                    sub l
 177+ A40C 6F          >                    ld l,a
 177+ A40D 9F          >                    sbc a,a
 177+ A40E 94          >                    sub h
 177+ A40F 67          >                    ld h,a
 177+ A410 C3 15 A4    >                        jp      .CheckDiff
 177+ A413 19          >.SignsDiffernt:         add     hl,de
 177+ A414             >                        ReturnIfNegative                            ; if we overflowed then return
 177+ A414 F8          >                        ret     m
 177+ A415 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 177+ A416             >                        ReturnIfANotZero
 177+ A416 A7          >                        and     a
 177+ A417 C0          >                        ret     nz
 177+ A418 7D          >                        ld      a,l
 177+ A419 A7          >                        and     a
 177+ A41A             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 177+ A41A 21 5D 84    >                        ld      hl,CurrentMissileBlastRange
 177+ A41D BE          >                        cp      (hl)
 177+ A41E D0          >                        ret	    nc
 178+ A41F                                      CheckPointRange UBnKzlo, UBnKzsgn, MissileZPos, MissileZSgn
 178+ A41F 3A 42 84    >                        ld      a,(MissileZPos)                      ; check X Coord
 178+ A422 2A 28 C0    >                        ld      hl,(UBnKzsgn)
 178+ A425 AE          >                        xor     (hl)
 178+ A426 E6 80       >                        and     SignOnly8Bit
 178+ A428 2A 26 C0    >                        ld      hl,(UBnKzlo)
 178+ A42B ED 5B 42 84 >                        ld      de,(MissileZPos)
 178+ A42F 28 0F       >                        jr      z,.SignsDiffernt
 178+ A431 A7          >.XSame:                 and     a
 178+ A432 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 178+ A434             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 178+ A434 F2 42 A4    >                        jp		p, .CheckDiff
 178+ A437             >                        NegHL
 178+ A437 AF          >                    xor a
 178+ A438 95          >                    sub l
 178+ A439 6F          >                    ld l,a
 178+ A43A 9F          >                    sbc a,a
 178+ A43B 94          >                    sub h
 178+ A43C 67          >                    ld h,a
 178+ A43D C3 42 A4    >                        jp      .CheckDiff
 178+ A440 19          >.SignsDiffernt:         add     hl,de
 178+ A441             >                        ReturnIfNegative                            ; if we overflowed then return
 178+ A441 F8          >                        ret     m
 178+ A442 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 178+ A443             >                        ReturnIfANotZero
 178+ A443 A7          >                        and     a
 178+ A444 C0          >                        ret     nz
 178+ A445 7D          >                        ld      a,l
 178+ A446 A7          >                        and     a
 178+ A447             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 178+ A447 21 5D 84    >                        ld      hl,CurrentMissileBlastRange
 178+ A44A BE          >                        cp      (hl)
 178+ A44B D0          >                        ret	    nc
 179+ A44C CD 49 C6                             call    ShipMissileBlast                    ; Ship hit by missile blast
 180+ A44F C9                                   ret                                         ; we are done
 181+ A450              ;...................................................................
 182+ A450 3A 3B C0     CheckIfBlastHitUs:      ld      a,(UBnKMissileBlastRange)
 183+ A453 4F                                   ld      c,a
 184+ A454 C3 5B A4                             jp      MissileHitUsCheckPos
 185+ A457              ;...................................................................
 186+ A457 3A 3D C0     CheckIfMissileHitUs:    ld      a,(UBnKMissileDetonateRange)
 187+ A45A 4F                                   ld      c,a
 188+ A45B              ;...................................................................
 189+ A45B 2A 20 C0     MissileHitUsCheckPos:   ld      hl, (UBnKxlo)
 190+ A45E                                      ZeroA
 190+ A45E AF          >                        xor a
 191+ A45F B4                                   or      h
 192+ A460                                      ClearCarryFlag
 192+ A460 B7          >                        or a
 193+ A461                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 193+ A461 C0          >                        ret     nz
 194+ A462 7D                                   ld      a,l
 195+ A463                                      ReturnIfAGTENusng    c                      ; return no carry if x far
 195+ A463 B9          >                        cp    c
 195+ A464 D0          >                        ret	 nc
 196+ A465 2A 23 C0     .CheckY:                ld      hl,(UBnKylo)
 197+ A468                                      ZeroA
 197+ A468 AF          >                        xor a
 198+ A469 B5                                   or      l
 199+ A46A                                      ClearCarryFlag
 199+ A46A B7          >                        or a
 200+ A46B                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 200+ A46B C0          >                        ret     nz
 201+ A46C 7D                                   ld      a,l
 202+ A46D                                      ReturnIfAGTENusng    c                      ; return no carry if y far
 202+ A46D B9          >                        cp    c
 202+ A46E D0          >                        ret	 nc
 203+ A46F 2A 26 C0     .CheckZ:                ld      hl,(UBnKzlo)
 204+ A472                                      ZeroA
 204+ A472 AF          >                        xor a
 205+ A473 B5                                   or      l
 206+ A474                                      ClearCarryFlag
 206+ A474 B7          >                        or a
 207+ A475                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 207+ A475 C0          >                        ret     nz
 208+ A476 7D                                   ld      a,l
 209+ A477                                      ReturnIfAGTENusng    c                      ; return no carry if z far
 209+ A477 B9          >                        cp    c
 209+ A478 D0          >                        ret	 nc
 210+ A479              .ItsAHit:               SetCarryFlag                                ; So must have hit
 210+ A479 37          >                        scf
 211+ A47A C9                                   ret
 212+ A47B
 213+ A47B              SelectMissileBank:      MACRO
 214+ A47B ~                                    ld      a,iyh
 215+ A47B ~                                    MMUSelectUnivBankA
 216+ A47B                                      ENDM
 217+ A47B
 218+ A47B              SelectTargetBank:       MACRO
 219+ A47B ~                                    ld      a,iyl
 220+ A47B ~                                    MMUSelectUnivBankA
 221+ A47B                                      ENDM
 222+ A47B
 223+ A47B              ;...................................................................
 224+ A47B              ; ... Copy of target data for missile calcs etc
 225+ A47B                                      INCLUDE "./TacticsWorkingData.asm"
# file opened: ./GameEngine/./TacticsWorkingData.asm
   1++A47B 00           TacticsTargetShip       DB 0
   2++A47C 20           TacticsPad0A            DB " "
   3++A47D 00           TacticsMissileBank      DB 0
   4++A47E 00           TacticsTargetBank       DB 0
   5++A47F 50 72 64 3E  TacticsPad0B            DB "Prd>"
   6++A483 00 00        TacticsDotProduct1      DS 2
   7++A485 3E           TacticsPad0C            DB ">"
   8++A486 00 00        TacticsDotProduct2      DS 2
   9++A488 3E           TacticsPad0D            DB ">"
  10++A489 00 00        TacticsDotProduct3      DS 2
  11++A48B 4D 69 73 6C  TacticsPad1A            DB "MislX"
  11++A48F 58
  12++A490 00 00 00     TacticsMissileX         DS 3
  13++A493 59           TacticsPad1B            DB "Y"
  14++A494 00 00 00     TacticsMissileY         DS 3
  15++A497 5A           TacticsPad1C            DB "Z"
  16++A498 00 00 00     TacticsMissileZ         DS 3
  17++A49B 4D 61 74 20  TcaticsPad2A            DB "Mat X"
  17++A49F 58
  18++A4A0 20 59        TacticsPad2B            DB " Y"
  19++A4A2 20 5A        TacticsPad2C            DB " Z"
  20++A4A4 00           TacticsRotMatX          DB 0
  21++A4A5 00           TacticsToyMatXSign      DB 0
  22++A4A6 00           TacticsRotMatY          DB 0
  23++A4A7 00           TacticsToyMatYSign      DB 0
  24++A4A8 00           TacticsRotMatZ          DB 0
  25++A4A9 00           TacticsToyMatZSign      DB 0
  26++A4AA 20           TacticsPad2D            DB " "
  27++A4AB 54 61 72 67  TacticsPad3A            DB "Targ="
  27++A4AF 3D
  28++A4B0 00 00 00     TacticsTargetX          DS 3
  29++A4B3 00 00 00     TacticsTargetY          DS 3
  30++A4B6 00 00 00     TacticsTargetZ          DS 3
  31++A4B9 3D 20 20     TacticsPad3B            DB "=  "
  32++A4BC 56 65 63 74  TacticsPad4A            DB "VectX"
  32++A4C0 58
  33++A4C1 00 00 00     TacticsVectorX:         DS 3
  34++A4C4 59           TacticsPad4B            DB "Y"
  35++A4C5 00 00 00     TacticsVectorY:         DS 3
  36++A4C8 5A           TacticsPad4C            DB "Z"
  37++A4C9 00 00 00     TacticsVectorZ:         DS 3
  38++A4CC 4E 6F 72 6D  TacticsPad5A            DB "NormX"
  38++A4D0 58
  39++A4D1 00 00        TacticsNormX:           DS 2
  40++A4D3 20 59        TacticsPad5B            DB " Y"
  41++A4D5 00 00        TacticsNormY:           DS 2
  42++A4D7 20 5A        TacticsPad5C            DB " Z"
  43++A4D9 00 00        TacticsNormZ:           DS 2
  44++A4DB 20           TacticsPad5D            DB " "
  45++A4DC 53 69 64 65  TacticsPad7A            DB "SideX"
  45++A4E0 58
  46++A4E1 00 00        TacticsSideX            DS 2
  47++A4E3 20 59        TacticsPad7B            DB " Y"
  48++A4E5 00 00        TacticsSideY            DS 2
  49++A4E7 20 5A        TacticsPad7C            DB " Z"
  50++A4E9 00 00        TacticsSideZ            DS 2
  51++A4EB 20 52 6F 6F  TacticsPad8A            DB " RoofX"
  51++A4EF 66 58
  52++A4F1 00 00        TacticsRoofX            DS 2
  53++A4F3 20 59        TacticsPad8B            DB " Y"
  54++A4F5 00 00        TacticsRoofY            DS 2
  55++A4F7 20 5A        TacticsPad8C            DB " Z"
  56++A4F9 00 00        TacticsRoofZ            DS 2
  57++A4FB 20 4E 6F 73  TacticsPad9A            DB " NoseX"
  57++A4FF 65 58
  58++A501 00 00        TacticsNoseX            DS 2
  59++A503 20 59        TacticsPad9B            DB " Y"
  60++A505 00 00        TacticsNoseY            DS 2
  61++A507 20 5A        TacticsPad9C            DB " Z"
  62++A509 00 00        TacticsNoseZ            DS 2
  63++A50B 20           TacticsPad9D            DB " "
  64++A50C 52 45 53 55  TacticsPadAA            DB "RESULT"
  64++A510 4C 54
  65++A512 00           TacticsRotX             DS 1
  66++A513 20           TacticsPadAB            DB " "
  67++A514 00           TacticsRotZ             DS 1
  68++A515 20           TacticsPadAC            DB " "
  69++A516 00           TacticsSpeed            DS 1
  70++A517 20           TacticsPadAD            DB " "
  71++A518
  72++A518
# file closed: ./GameEngine/./TacticsWorkingData.asm
 226+ A518                                      INCLUDE "../GameEngine/MissileAI.asm"
# file opened: ./GameEngine/../GameEngine/MissileAI.asm
   1++A518                                      DEFINE MISSILEDEBUG 1
   2++A518                                      DEFINE MISSILEDOHIT 1
   3++A518
   4++A518              MISSILEMAXACCEL         equ 3
   5++A518              MISSILEMAXDECEL         equ -3
   6++A518                                      ;DEFINE MISSILEBREAK
   7++A518              ;.. Thsi version uses new kind logic
   8++A518              ;... Now the tactics if current ship is the missile, when we enter this SelectedUniverseSlot holds slot of missile
   9++A518              MissileAIV3:            ;ld      a,(ShipAIEnabled)
  10++A518                                      ;ReturnOnBitClear a, ShipAIEnabledBitNbr
  11++A518                                      IFDEF MISSILEDOHIT
  12++A518                                          JumpIfMemTrue UBnKMissleHitToProcess, .ProcessMissileHit
  12++A518 3A 44 C0    >                        ld      a,(UBnKMissleHitToProcess)
  12++A51B A7          >                        and     a
  12++A51C CA AF A6    >                        jp      z, .ProcessMissileHit
  13++A51F                                      ENDIF
  14++A51F              .CheckForECM:           JumpIfMemNotZero ECMCountDown,.ECMIsActive  ; If ECM is running then kill the missile
  14++A51F 3A AE 82    >                        ld  a,(ECMCountDown)
  14++A522 A7          >                        and a
  14++A523 C2 B8 A6    >                        jp  nz,.ECMIsActive
  15++A526              .IsMissileHostile:      IsShipHostile                               ; is missle attacking us?
  15++A526 3A 46 C3    >                        ld      a,(ShipNewBitsAddr)
  15++A529 E6 04       >                        and     ShipIsHostile
  16++A52B                                      JumpIfZero .MissileTargetingShip            ; Missile is friendly then z is set else targetting us
  16++A52B CA 80 A5    >                        jp	z,.MissileTargetingShip
  17++A52E 2A 20 C0     .MissileTargetingPlayer:ld      hl, (UBnKxlo)                       ; check if missile in range of us
  18++A531 3A 3D C0                             ld      a,(UBnKMissileDetonateRange)
  19++A534 4F                                   ld      c,a                                 ; c holds detonation range
  20++A535 CD 5B A4                             call    MissileHitUsCheckPos
  21++A538 D2 43 A5     .MissileNotHitUsYet:    jp      nc, .UpdateTargetingUsPos
  22++A53B DD 01        .MissleHitUs:           break
  23++A53D CD 5A A3                             call    PlayerHitByMissile
  24++A540 C3 B8 A6                             jp      .ECMIsActive                        ; we use ECM logic to destroy missile which eqneues is
  25++A543 CD 26 AC     .UpdateTargetingUsPos:  call    SetPlayerAsTarget
  26++A546 CD F8 AB                             call    CopyPosToVector
  27++A549 2A 20 C0                             ld      hl,(UBnKxlo)
  28++A54C 3A 22 C0                             ld      a,(UBnKxsgn)
  29++A54F 22 C1 A4                             ld      (TacticsVectorX),hl
  30++A552                                      ;xor     $80
  31++A552 22 C1 A4                             ld      (TacticsVectorX),hl
  32++A555 32 C3 A4                             ld      (TacticsVectorX+2),a
  33++A558
  34++A558 2A 23 C0                             ld      hl,(UBnKylo)
  35++A55B 3A 25 C0                             ld      a,(UBnKysgn)
  36++A55E 22 C5 A4                             ld      (TacticsVectorY),hl
  37++A561                                      ;xor     $80
  38++A561 22 C5 A4                             ld      (TacticsVectorY),hl
  39++A564 32 C7 A4                             ld      (TacticsVectorY+2),a
  40++A567
  41++A567 2A 26 C0                             ld      hl,(UBnKzlo)
  42++A56A 3A 28 C0                             ld      a,(UBnKzsgn)
  43++A56D 22 C9 A4                             ld      (TacticsVectorZ),hl
  44++A570                                      ;xor     $80
  45++A570 22 C9 A4                             ld      (TacticsVectorZ),hl
  46++A573 32 CB A4                             ld      (TacticsVectorZ+2),a
  47++A576 3A 62 84                             ld      a,(SelectedUniverseSlot)            ; we will use this quite a lot with next bank switching
  48++A579 C6 46                                add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  49++A57B FD 67                                ld      iyh,a
  50++A57D C3 8D A6                             jp      .NormaliseDirection
  51++A580              ;--- Missile is targeting other ship
  52++A580 3A 62 84     .MissileTargetingShip:  ld      a,(SelectedUniverseSlot)            ; we will use this quite a lot with next bank switching
  53++A583 C6 46        .SaveMissileBank:       add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  54++A585 FD 67                                ld      iyh,a
  55++A587                                      IFDEF MISSILEDEBUG
  56++A587 32 7D A4                                 ld  (TacticsMissileBank),a
  57++A58A                                      ENDIF
  58++A58A 3A 45 C0     .SaveTargetBank:        ld      a,(UBnKMissileTarget)               ; target will be used a lot too
  59++A58D C6 46                                add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  60++A58F FD 6F                                ld      iyl,a                               ; save target
  61++A591                                      IFDEF MISSILEDEBUG
  62++A591 32 7E A4                                 ld  (TacticsTargetBank),a
  63++A594                                      ENDIF
  64++A594              .IsMissleTargetGone:    JumpIfSlotAEmpty    .ECMIsActive            ; if the target was blown up then detonate
  64++A594 21 70 84    >                        ld      hl,UniverseSlotList
  64++A597 ED 31       >                        add     hl,a
  64++A599 7E          >                        ld      a,(hl)
  64++A59A 3C          >                        inc     a
  64++A59B CA B8 A6    >                        jp      z,.ECMIsActive    ; if slot was ff inc would make it 0
  64++A59E 3D          >                        dec     a           ; get original value back for later
  65++A59F              ;... Note we don't have to check for impact as we already have a loop doing that
  66++A59F              .SelectTargetShip:      SelectTargetBank
  66++A59F FD 7D       >                        ld      a,iyl
  66++A5A1             >                        MMUSelectUnivBankA
  66++A5A1 ED 92 56    >                     nextreg UniverseMMU,       a
  67++A5A4 3A 54 C0     .IsShipExploding:       ld      a,(UBnkaiatkecm)                    ; check exploding status
  68++A5A7 E6 20                                and     ShipExploding                       ; as if exploding then the missile will also explode
  69++A5A9 28 08                                jr      z,.UpdateTargetingShipX
  70++A5AB              .ShipIsExploding:       SelectMissileBank                           ; get missile back into memory
  70++A5AB FD 7C       >                        ld      a,iyh
  70++A5AD             >                        MMUSelectUnivBankA
  70++A5AD ED 92 56    >                     nextreg UniverseMMU,       a
  71++A5B0 C3 B8 A6                             jp      .ECMIsActive
  72++A5B3              ;--- At this point we already have the target banked in ready for calculating vector
  73++A5B3              ; Tactics vector = missile - target
  74++A5B3 DD 01        .UpdateTargetingShipX:  break
  75++A5B5 ED 5B 20 C0                          ld      de,(UBnKxlo)                        ; get target ship X
  76++A5B9 3A 22 C0                             ld      a,(UBnKxsgn)                        ; and flip sign so we have missile - target
  77++A5BC                                      IFDEF MISSILEDEBUG
  78++A5BC ED 53 B0 A4                              ld  (TacticsTargetX),de
  79++A5C0 32 B2 A4                                 ld  (TacticsTargetX+2),a
  80++A5C3                                      ENDIF
  81++A5C3                                      FlipSignBitA
  81++A5C3 EE 80       >                        xor     SignOnly8Bit
  82++A5C5 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
  83++A5C6                                      SelectMissileBank
  83++A5C6 FD 7C       >                        ld      a,iyh
  83++A5C8             >                        MMUSelectUnivBankA
  83++A5C8 ED 92 56    >                     nextreg UniverseMMU,       a
  84++A5CB 2A 20 C0                             ld      hl,(UBnKxlo)                        ; get missile x
  85++A5CE 3A 22 C0                             ld      a,(UBnKxsgn)                        ; get missile x sign
  86++A5D1                                      IFDEF MISSILEDEBUG
  87++A5D1 22 90 A4                                 ld  (TacticsMissileX),hl
  88++A5D4 32 92 A4                                 ld  (TacticsMissileX+2),a
  89++A5D7                                      ENDIF
  90++A5D7 47                                   ld      b,a
  91++A5D8 CD DF 93                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
  92++A5DB 22 C1 A4                             ld      (TacticsVectorX),hl
  93++A5DE 32 C3 A4                             ld      (TacticsVectorX+2),a
  94++A5E1              .UpdateTargetingShipY:  SelectTargetBank
  94++A5E1 FD 7D       >                        ld      a,iyl
  94++A5E3             >                        MMUSelectUnivBankA
  94++A5E3 ED 92 56    >                     nextreg UniverseMMU,       a
  95++A5E6 ED 5B 23 C0                          ld      de,(UBnKylo)                        ; get target ship X
  96++A5EA 3A 25 C0                             ld      a,(UBnKysgn)
  97++A5ED                                      IFDEF MISSILEDEBUG
  98++A5ED ED 53 B3 A4                              ld  (TacticsTargetY),de
  99++A5F1 32 B5 A4                                 ld  (TacticsTargetY+2),a
 100++A5F4                                      ENDIF
 101++A5F4                                      FlipSignBitA
 101++A5F4 EE 80       >                        xor     SignOnly8Bit
 102++A5F6 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 103++A5F7                                      SelectMissileBank
 103++A5F7 FD 7C       >                        ld      a,iyh
 103++A5F9             >                        MMUSelectUnivBankA
 103++A5F9 ED 92 56    >                     nextreg UniverseMMU,       a
 104++A5FC 2A 23 C0                             ld      hl,(UBnKylo)                        ; get missile x
 105++A5FF 3A 25 C0                             ld      a,(UBnKysgn)                        ; get missile x sign
 106++A602                                      IFDEF MISSILEDEBUG
 107++A602 22 94 A4                                 ld  (TacticsMissileY),hl
 108++A605 32 96 A4                                 ld  (TacticsMissileY+2),a
 109++A608                                      ENDIF
 110++A608 47                                   ld      b,a
 111++A609 CD DF 93                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 112++A60C 22 C5 A4                             ld      (TacticsVectorY),hl
 113++A60F 32 C7 A4                             ld      (TacticsVectorY+2),a
 114++A612              .UpdateTargetingShipZ:  SelectTargetBank
 114++A612 FD 7D       >                        ld      a,iyl
 114++A614             >                        MMUSelectUnivBankA
 114++A614 ED 92 56    >                     nextreg UniverseMMU,       a
 115++A617 ED 5B 26 C0                          ld      de,(UBnKzlo)                        ; get target ship X
 116++A61B 3A 28 C0                             ld      a,(UBnKzsgn)
 117++A61E                                      IFDEF MISSILEDEBUG
 118++A61E ED 53 B6 A4                              ld  (TacticsTargetZ),de
 119++A622 32 B8 A4                                 ld  (TacticsTargetZ+2),a
 120++A625                                      ENDIF
 121++A625                                      FlipSignBitA
 121++A625 EE 80       >                        xor     SignOnly8Bit
 122++A627 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 123++A628                                      SelectMissileBank
 123++A628 FD 7C       >                        ld      a,iyh
 123++A62A             >                        MMUSelectUnivBankA
 123++A62A ED 92 56    >                     nextreg UniverseMMU,       a
 124++A62D 2A 26 C0                             ld      hl,(UBnKzlo)                        ; get missile x
 125++A630 3A 28 C0                             ld      a,(UBnKzsgn)                        ; get missile x sign
 126++A633                                      IFDEF MISSILEDEBUG
 127++A633 22 98 A4                                 ld  (TacticsMissileZ),hl
 128++A636 32 9A A4                                 ld  (TacticsMissileZ+2),a
 129++A639                                      ENDIF
 130++A639
 131++A639 47                                   ld      b,a
 132++A63A CD DF 93                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 133++A63D 22 C9 A4                             ld      (TacticsVectorZ),hl
 134++A640 32 CB A4                             ld      (TacticsVectorZ+2),a
 135++A643              ; by here missile in in memory and TacticsVector now holds distance
 136++A643              ; if or ABS all high bytes is <> 0
 137++A643              .CheckDistance:         IFDEF MISSILEDOHIT
 138++A643 2A C2 A4                                 ld      hl,(TacticsVectorX+1)              ; test if high bytes are set (value is assumed to be 24 bit, though calcs are only 16 so this is uneeded)
 139++A646 7C                                       ld      a,h                                ; .
 140++A647 ED 5B C6 A4                              ld      de,(TacticsVectorY+1)              ; .
 141++A64B B2                                       or      d                                  ; .
 142++A64C ED 4B CA A4                              ld      bc,(TacticsVectorZ+1)              ; .
 143++A650 B0                                       or      b                                  ; .
 144++A651                                          ClearSignBitA                              ; .
 144++A651 E6 7F       >                        and     SignMask8Bit
 145++A653                                          JumpIfNotZero       .FarAway               ; .
 145++A653 C2 62 A6    >                        jp	nz,.FarAway
 146++A656 B5                                       or      l                                    ; test for low byte bit 7, i.e high of 16 bit values
 147++A657 B3                                       or      e                                  ; .
 148++A658 B1                                       or      c                                  ; .
 149++A659                                          JumpIfNotZero       .FarAway               ; .
 149++A659 C2 62 A6    >                        jp	nz,.FarAway
 150++A65C                                      ELSE
 151++A65C ~                                        jp                  .FarAway
 152++A65C                                      ENDIF
 153++A65C              ; If we get here its close enough to detonate
 154++A65C 3A 45 C0     .CloseMissileExplode:   ld      a,(UBnKMissileTarget)
 155++A65F C3 5B A3                             jp      MissileHitShipA
 156++A662              ;   *far away ** TODO need to set memory read write on page 0
 157++A662              .FarAway:               SelectTargetBank
 157++A662 FD 7D       >                        ld      a,iyl
 157++A664             >                        MMUSelectUnivBankA
 157++A664 ED 92 56    >                     nextreg UniverseMMU,       a
 158++A667                                      JumpIfMemFalse      UBnKECMFitted, .NoECM                   ; if target has ECM and enough energy to use it
 158++A667 3A 5A C0    >                        ld      a,(UBnKECMFitted)
 158++A66A A7          >                        and     a
 158++A66B C2 88 A6    >                        jp      nz, .NoECM
 159++A66E                                      JumpIfMemLTNusng    UBnKEnergy,    ECMCounterMax, .NoECM    ; .
 159++A66E 3A 58 C0    >                        ld      a,(UBnKEnergy)
 159++A671 FE 80       >                        cp      ECMCounterMax
 159++A673 DA 88 A6    >                        jp	  c,.NoECM
 160++A676                                      JumpIfMemIsNotZero   ECMCountDown, .NoECM                ; . ECM is already active
 160++A676 3A AE 82    >                        ld      a,(ECMCountDown)
 160++A679 A7          >                        and     a
 160++A67A C2 88 A6    >                        jp	    nz,.NoECM
 161++A67D 3A 91 82     .TestIfUsingECM:        ld      a,(RandomSeed2)                                             ; if random < 16
 162++A680                                      JumpIfAGTENusng     16, .UpdateMissilePos                           ;   then fire ECM destroying missile
 162++A680 FE 10       >                        cp     16
 162++A682 D2 88 A6    >                        jp		nc,.UpdateMissilePos
 163++A685              ;. If we get here then target is still paged in to fire ECM
 164++A685 C3 7A C5     .ZeroPageFireECM:       jp      FireECM                                             ; with an implicit return
 165++A688              ;                       implicit ret
 166++A688              ;. If we get here then target is still paged in with no ECM
 167++A688              .NoECM:
 168++A688                                    ;;;         ** can do 16 bit maths as we can take teh view that once a object/space station is 24 bit value away then
 169++A688                                    ;;;         ** targeting computer looses track and destructs missiles
 170++A688              ;--- Now we can actually update the missile AI
 171++A688              .UpdateMissilePos:      ;break
 172++A688                                      SelectMissileBank
 172++A688 FD 7C       >                        ld      a,iyh
 172++A68A             >                        MMUSelectUnivBankA
 172++A68A ED 92 56    >                     nextreg UniverseMMU,       a
 173++A68D                                      ;break
 174++A68D                                      ;call    ORTHOGALISE
 175++A68D              .NormaliseDirection:    IFDEF MISSILEBREAK
 176++A68D ~                                        break
 177++A68D                                      ENDIF
 178++A68D CD 87 AC                             call    NormalizeTactics                    ; Normalise vector down to 7 bit + sign byte (.TA19->TAS2)
 179++A690                                      IFDEF TACTICSDEBUG
 180++A690 CD 45 AB                                 call DebugTacticsCopy
 181++A693                                      ENDIF
 182++A693              .NegateDirection:       FlipSignMem TacticsVectorX+2                ; negate vector in XX15 so it points opposite direction
 182++A693 3A C3 A4    >                        ld  a,(TacticsVectorX+2)
 182++A696 EE 80       >                        xor SignOnly8Bit
 182++A698 32 C3 A4    >                        ld  (TacticsVectorX+2),a
 183++A69B                                      FlipSignMem TacticsVectorY+2                ; we have already negated the dot product above
 183++A69B 3A C7 A4    >                        ld  a,(TacticsVectorY+2)
 183++A69E EE 80       >                        xor SignOnly8Bit
 183++A6A0 32 C7 A4    >                        ld  (TacticsVectorY+2),a
 184++A6A3                                      FlipSignMem TacticsVectorZ+2                ; .
 184++A6A3 3A CB A4    >                        ld  a,(TacticsVectorZ+2)
 184++A6A6 EE 80       >                        xor SignOnly8Bit
 184++A6A8 32 CB A4    >                        ld  (TacticsVectorZ+2),a
 185++A6AB CD C2 A6                             call    SeekingLogic
 186++A6AE C9                                   ret
 187++A6AF 3A 6E 84     .ProcessMissileHit:     ld      a,(CurrentMissileCheck)
 188++A6B2                                      ReturnIfAGTENusng UniverseSlotListSize  ; need to wait another loop
 188++A6B2 FE 0C       >                        cp    UniverseSlotListSize
 188++A6B4 D0          >                        ret	 nc
 189++A6B5 C3 80 A3     .ActivateNewExplosion:  jp  CheckMissileBlastInit               ; initialise
 190++A6B8                                      ; DUMMY RET get a free return by using jp
 191++A6B8 CD 5A C6     .ECMIsActive:           call    UnivExplodeShip                 ; ECM detonates missile
 192++A6BB                                      SetMemTrue  UBnKMissleHitToProcess      ; Enque an explosion
 192++A6BB AF          >                        xor     a
 192++A6BC 32 44 C0    >                        ld      (UBnKMissleHitToProcess),a
 193++A6BF C3 AF A6                             jp      .ProcessMissileHit              ; lets see if we can enqueue now
 194++A6C2                                      ; DUMMY RET get a free return as activenewexplosion does jp to init with a free ret
 195++A6C2
 196++A6C2 CD 8A AB     SeekingLogic:           call    XX12EquTacticsDotNosev              ; SA = nose . XX15                           (     ->TAS3)
 197++A6C5 32 83 A4                             ld      (TacticsDotProduct1),a              ; CNT = A (high byte of dot product)
 198++A6C8 3A 9E 83                             ld      a,(varS)                            ; get sign from dot product
 199++A6CB 32 87 A4                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 200++A6CE CD E0 AB     .RoofDotProduct:        call    XX12EquTacticsDotRoofv              ; Now tran the roof for rotation
 201++A6D1 32 86 A4                             ld      (TacticsDotProduct2),a              ; so if its +ve then the roof is similar so pull up to head towards it
 202++A6D4 3A 9E 83                             ld      a,(varS)                            ; .
 203++A6D7 32 87 A4                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 204++A6DA CD E4 A6                             call    SimplifiedShipPitchv3
 205++A6DD CD 08 A7                             call    SimplifiedShipRollv3
 206++A6E0 CD 36 A7                             call    SimplifiedShipSpeedv3
 207++A6E3 C9                                   ret
 208++A6E4
 209++A6E4              SimplifiedShipPitchv3:  ;break
 210++A6E4 2A 86 A4                             ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 211++A6E7 7C                                   ld      a,h                                ; .
 212++A6E8 EE 80                                xor     $80                                ; .
 213++A6EA E6 80                                and     $80                                ; .
 214++A6EC 67                                   ld      h,a                                ; h  = flipped sign
 215++A6ED 7D                                   ld      a,l                                ; a = value * 2
 216++A6EE CB 27                                sla     a                                  ;
 217++A6F0                                      JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 217++A6F0 FE 10       >                        cp     16
 217++A6F2 D2 FE A6    >                        jp		nc,.skipPitchZero
 218++A6F5                                      ZeroA                                      ; else we zero pitch but
 218++A6F5 AF          >                        xor a
 219++A6F6 B4                                   or      h                                  ; we need to retain the sign
 220++A6F7 32 49 C0                             ld      (UBnKRotZCounter),a                ; .
 221++A6FA                                      IFDEF MISSILEDEBUG
 222++A6FA 32 14 A5                                 ld  (TacticsRotZ),a
 223++A6FD                                      ENDIF
 224++A6FD C9                                   ret
 225++A6FE 3E 02        .skipPitchZero:         ld      a,2
 226++A700 B4                                   or      h
 227++A701 32 49 C0                             ld      (UBnKRotZCounter),a
 228++A704                                      IFDEF MISSILEDEBUG
 229++A704 32 14 A5                                 ld  (TacticsRotZ),a
 230++A707                                      ENDIF
 231++A707 C9                                   ret
 232++A708
 233++A708              ;Direct on dot product nose is $24
 234++A708              ; Position                  Pitch   Roll    Speed
 235++A708              ; Top left forwards         up      -ve     +
 236++A708              ; Top right forwards        up      +ve     +
 237++A708              ; Bottom left forwards      down    -ve     +
 238++A708              ; Bottom right forwards     down    +ve     +
 239++A708              ; Top left rear             up      -ve     -
 240++A708              ; Top right rear            up      +ve     -
 241++A708              ; Bottom left rear          down    -ve     -
 242++A708              ; Bottom right rear         down    +ve     -
 243++A708
 244++A708
 245++A708
 246++A708              SimplifiedShipRollv3:  ; ld      a,(UBnKRotXCounter)               ; get current roll
 247++A708                                     ; sla     a                                 ; * 2 to also abs
 248++A708                                     ; ReturnIfAGTENusng 32                      ; and so if >32 skip
 249++A708 CD E6 AB                             call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 250++A70B 32 89 A4                             ld      (TacticsDotProduct3),a             ; .
 251++A70E 6F                                   ld      l,a                                ; .
 252++A70F 3A 9E 83                             ld      a,(varS)                           ; .
 253++A712 32 8A A4                             ld      (TacticsDotProduct3+1),a           ; .
 254++A715 67                                   ld      h,a                                ; h = sign sidev
 255++A716 3A 87 A4                             ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 256++A719                                      ;xor     $80                               ; .
 257++A719                                      ;xor     h                                 ; b = flip against pitch sign
 258++A719                                      ;and     $80                               ; .
 259++A719                                      ;xor $80
 260++A719 47                                   ld      b,a                                ; b = roof product
 261++A71A 7D                                   ld      a,l                                ; a = abs sidev  * 2
 262++A71B CB 27                                sla     a                                  ;
 263++A71D                                      JumpIfAGTENusng 16,.skipRollZero           ;
 263++A71D FE 10       >                        cp     16
 263++A71F D2 2B A7    >                        jp		nc,.skipRollZero
 264++A722                                      ZeroA                                      ; if its zoer then set rotx to zero
 264++A722 AF          >                        xor a
 265++A723 B0                                   or      b
 266++A724 32 48 C0                             ld      (UBnKRotXCounter),a
 267++A727                                      IFDEF MISSILEDEBUG
 268++A727 32 12 A5                                 ld  (TacticsRotX),a
 269++A72A                                      ENDIF
 270++A72A C9                                   ret
 271++A72B 3E 02        .skipRollZero:          ld      a,2
 272++A72D B4                                   or      h
 273++A72E A8                                   xor     b
 274++A72F 32 48 C0                             ld      (UBnKRotXCounter),a
 275++A732                                      IFDEF MISSILEDEBUG
 276++A732 32 12 A5                                 ld  (TacticsRotX),a
 277++A735                                      ENDIF
 278++A735 C9                                   ret
 279++A736
 280++A736 2A 83 A4     SimplifiedShipSpeedv3:  ld      hl,(TacticsDotProduct1)
 281++A739 7C                                   ld      a,h
 282++A73A A7                                   and     a
 283++A73B 20 13                                jr      nz,.SlowDown
 284++A73D ED 5B 86 A4                          ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 285++A741 7D                                   ld      a,l
 286++A742                                      JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 286++A742 FE 16       >                        cp      22
 286++A744 DA 50 A7    >                        jp		c, .SlowDown
 287++A747 3E 03        .Accelerate:            ld      a,3                                 ; else
 288++A749 32 47 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 289++A74C                                      IFDEF MISSILEDEBUG
 290++A74C 32 16 A5                                 ld  (TacticsSpeed),a
 291++A74F                                      ENDIF
 292++A74F C9                                   ret                                         ;  .
 293++A750              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 293++A750 FE 12       >                        cp      18
 293++A752 DA 5E A7    >                        jp		c, .NoSpeedChange
 294++A755 3E FE        .Deccelerate:           ld      a,-2
 295++A757 32 47 C0                             ld      (UBnKAccel),a
 296++A75A                                      IFDEF MISSILEDEBUG
 297++A75A 32 16 A5                                 ld  (TacticsSpeed),a
 298++A75D                                      ENDIF
 299++A75D C9                                   ret
 300++A75E              .NoSpeedChange:         ZeroA                                       ; else no change
 300++A75E AF          >                        xor a
 301++A75F 32 47 C0                             ld      (UBnKAccel),a
 302++A762                                      IFDEF MISSILEDEBUG
 303++A762 32 16 A5                                 ld  (TacticsSpeed),a
 304++A765                                      ENDIF
 305++A765 C9                                   ret
 306++A766
 307++A766
 308++A766 CD A5 A7     SimplifiedShipSpeedv3b:  call    GetDistance                         ;
 309++A769 7C                                   ld      a,h
 310++A76A A7                                   and     a
 311++A76B 06 16                                ld      b,22
 312++A76D 20 08                                jr      nz,.NotSlow
 313++A76F 7D           .CloseSlowTest:         ld      a,l
 314++A770                                      JumpIfAGTENusng 30, .NotSlow
 314++A770 FE 1E       >                        cp     30
 314++A772 D2 77 A7    >                        jp		nc,.NotSlow
 315++A775 06 3C                                ld      b,60
 316++A777 2A 83 A4     .NotSlow:               ld      hl,(TacticsDotProduct1)             ; if nosedir is negative (pointing the wrong way)
 317++A77A 7C                                   ld      a,h                                 ; or nosedir < 22 (very far off)
 318++A77B E6 80                                and     $80                                 ; do decelleration test
 319++A77D C2 8E A7                             jp      nz,.DecelTest                       ; .
 320++A780 7D                                   ld      a,l                                 ; .
 321++A781                                      JumpIfALTNusng b, .DecelTest                ; .
 321++A781 B8          >                        cp      b
 321++A782 DA 8E A7    >                        jp		c, .DecelTest
 322++A785 3E 03        .Accelerate:            ld      a,3                                 ; else
 323++A787 32 47 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 324++A78A                                      IFDEF MISSILEDEBUG
 325++A78A 32 16 A5                                 ld  (TacticsSpeed),a
 326++A78D                                      ENDIF
 327++A78D C9                                   ret                                         ;  .
 328++A78E 7D           .DecelTest:             ld      a,l                                 ; if abs acelleration > 18
 329++A78F                                      JumpIfAGTENusng 18 ,.Deccelerate             ;    decelerate by 2
 329++A78F FE 12       >                        cp     18
 329++A791 D2 9C A7    >                        jp		nc,.Deccelerate
 330++A794              .NoSpeedChange:         ZeroA                                       ; else no change
 330++A794 AF          >                        xor a
 331++A795 32 47 C0                             ld      (UBnKAccel),a
 332++A798                                      IFDEF MISSILEDEBUG
 333++A798 32 16 A5                                 ld  (TacticsSpeed),a
 334++A79B                                      ENDIF
 335++A79B C9                                   ret
 336++A79C 3E FE        .Deccelerate:           ld      a,-2
 337++A79E 32 47 C0                             ld      (UBnKAccel),a
 338++A7A1                                      IFDEF MISSILEDEBUG
 339++A7A1 32 16 A5                                 ld  (TacticsSpeed),a
 340++A7A4                                      ENDIF
 341++A7A4 C9                                   ret
 342++A7A5
 343++A7A5 2A C1 A4     GetDistance:            ld      hl,(TacticsVectorX)
 344++A7A8 ED 5B C5 A4                          ld      de,(TacticsVectorY)
 345++A7AC ED 4B C9 A4                          ld      bc,(TacticsVectorZ)
 346++A7B0 7C                                   ld      a,h
 347++A7B1 E6 7F                                and     $7F
 348++A7B3 67                                   ld      h,a
 349++A7B4 78                                   ld      a,b
 350++A7B5 E6 7F                                and     $7F
 351++A7B7 47                                   ld      b,a
 352++A7B8 7A                                   ld      a,d
 353++A7B9 E6 7F                                and     $7F
 354++A7BB 57                                   ld      d,a
 355++A7BC 09                                   add     hl,bc
 356++A7BD 19                                   add     hl,de
 357++A7BE                                      ShiftHLRight1
 357++A7BE CB 3C       >			   srl h
 357++A7C0 CB 1D       >			   rr  l
 358++A7C2                                      ShiftHLRight1
 358++A7C2 CB 3C       >			   srl h
 358++A7C4 CB 1D       >			   rr  l
 359++A7C6 C9                                   ret
 360++A7C7
 361++A7C7
# file closed: ./GameEngine/../GameEngine/MissileAI.asm
 227+ A7C7                                      INCLUDE "../GameEngine/NormalAI.asm"
# file opened: ./GameEngine/../GameEngine/NormalAI.asm
   1++A7C7                                      DEFINE DEBUGFORCEHOSTILE 1
   2++A7C7
   3++A7C7 00 00 00     NewLaunchUBnKX          DS 3
   4++A7CA 00 00 00     NewLaunchUBnKY          DS 3
   5++A7CD 00 00 00     NewLaunchUBnKZ          DS 3
   6++A7D0
   7++A7D0 00 00 00...  NewLaunchMatrix         DS 3*3*2    ; 3x3 matrix of 3 bytes
   8++A7E2 00           NewLaunchSpeed          DS 1
   9++A7E3 00           NewLaunchRotX           DS 1
  10++A7E4 00           NewLaunchRotZ           DS 1
  11++A7E5
  12++A7E5              NewLaunchDataBlockSize  equ (3*3) + (3*3*2)
  13++A7E5              ; ---------------------------------------------------------------------------------------------------------------------------------
  14++A7E5              ; a = y offset negative from center of ship
  15++A7E5 21 20 C0     CalcLaunchOffset:       ld      hl,UBnKxlo
  16++A7E8 11 C7 A7                             ld      de,NewLaunchUBnKX
  17++A7EB 01 1B 00                             ld      bc,NewLaunchDataBlockSize
  18++A7EE ED B0                                ldir
  19++A7F0 CB 27        .ApplyOffset:           sla     a
  20++A7F2 CB 27                                sla     a
  21++A7F4 FD 6F                                ld      iyl,a                          ; save pre calculated speed
  22++A7F6              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatRoofvX     ; e =  ABS (nosev x hi) c = sign
  22++A7F6 5F          >                        ld      e,a
  22++A7F7 2A 2F C0    >                        ld      hl,(UBnkrotmatRoofvX)
  22++A7FA 7C          >                        ld      a,h
  22++A7FB             >                        ClearSignBitA
  22++A7FB E6 7F       >                        and     SignMask8Bit
  22++A7FD 57          >                        ld      d,a
  22++A7FE ED 30       >                        mul     de
  22++A800 7C          >                        ld      a,h
  22++A801             >                        SignBitOnlyA
  22++A801 E6 80       >                        and     SignOnly8Bit
  22++A803 47          >                        ld      b,a;ld      c,a
  22++A804 62          >                        ld      h,d;ld      e,d
  22++A805 0E 00       >                        ld      c,0;ld      d,0
  23++A807 78                                   ld      a,b
  24++A808 EE 80                                xor     $80
  25++A80A 47                                   ld      b,a
  26++A80B              .AddSpeedToX:           AddSpeedToVert NewLaunchUBnKX
  26++A80B ED 5B C8 A7 >                        ld      de,(NewLaunchUBnKX+1)
  26++A80F 3A C7 A7    >                        ld      a,(NewLaunchUBnKX)
  26++A812 6F          >                        ld      l,a
  26++A813 CD 5D 94    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  26++A816 7D          >                        ld      a,l
  26++A817 32 C7 A7    >                        ld      (NewLaunchUBnKX),a
  26++A81A ED 53 C8 A7 >                        ld      (NewLaunchUBnKX+1),de
  27++A81E              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatRoofvY
  27++A81E FD 5D       >                        ld      e,iyl
  27++A820 2A 31 C0    >                        ld      hl,(UBnkrotmatRoofvY)
  27++A823 7C          >                        ld      a,h
  27++A824             >                        ClearSignBitA
  27++A824 E6 7F       >                        and     SignMask8Bit
  27++A826 57          >                        ld      d,a
  27++A827 ED 30       >                        mul     de
  27++A829 7C          >                        ld      a,h
  27++A82A             >                        SignBitOnlyA
  27++A82A E6 80       >                        and     SignOnly8Bit
  27++A82C 47          >                        ld      b,a;ld      c,a
  27++A82D 62          >                        ld      h,d;ld      e,d
  27++A82E 0E 00       >                        ld      c,0;ld      d,0
  28++A830 78                                   ld      a,b
  29++A831 EE 80                                xor     $80
  30++A833 47                                   ld      b,a
  31++A834              .AddSpeedToY:           AddSpeedToVert NewLaunchUBnKY
  31++A834 ED 5B CB A7 >                        ld      de,(NewLaunchUBnKY+1)
  31++A838 3A CA A7    >                        ld      a,(NewLaunchUBnKY)
  31++A83B 6F          >                        ld      l,a
  31++A83C CD 5D 94    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  31++A83F 7D          >                        ld      a,l
  31++A840 32 CA A7    >                        ld      (NewLaunchUBnKY),a
  31++A843 ED 53 CB A7 >                        ld      (NewLaunchUBnKY+1),de
  32++A847              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatRoofvZ
  32++A847 FD 5D       >                        ld      e,iyl
  32++A849 2A 33 C0    >                        ld      hl,(UBnkrotmatRoofvZ)
  32++A84C 7C          >                        ld      a,h
  32++A84D             >                        ClearSignBitA
  32++A84D E6 7F       >                        and     SignMask8Bit
  32++A84F 57          >                        ld      d,a
  32++A850 ED 30       >                        mul     de
  32++A852 7C          >                        ld      a,h
  32++A853             >                        SignBitOnlyA
  32++A853 E6 80       >                        and     SignOnly8Bit
  32++A855 47          >                        ld      b,a;ld      c,a
  32++A856 62          >                        ld      h,d;ld      e,d
  32++A857 0E 00       >                        ld      c,0;ld      d,0
  33++A859 78                                   ld      a,b
  34++A85A EE 80                                xor     $80
  35++A85C 47                                   ld      b,a
  36++A85D              .AddSpeedToZ:           AddSpeedToVert NewLaunchUBnKZ
  36++A85D ED 5B CE A7 >                        ld      de,(NewLaunchUBnKZ+1)
  36++A861 3A CD A7    >                        ld      a,(NewLaunchUBnKZ)
  36++A864 6F          >                        ld      l,a
  36++A865 CD 5D 94    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  36++A868 7D          >                        ld      a,l
  36++A869 32 CD A7    >                        ld      (NewLaunchUBnKZ),a
  36++A86C ED 53 CE A7 >                        ld      (NewLaunchUBnKZ+1),de
  37++A870 C9                                   ret
  38++A871
  39++A871
  40++A871
  41++A871                                      ;DEFINE MISSILEBREAK
  42++A871              ;.. Thsi version uses new kind logic
  43++A871              ;... Now the tactics if current ship is the missile, when we enter this SelectedUniverseSlot holds slot of missile
  44++A871              NormalAI:               ;ld      a,(ShipAIEnabled)
  45++A871                                      ;ReturnOnBitClear a, ShipAIEnabledBitNbr
  46++A871 CD 8B C5     .GetEnergy:             call    RechargeEnergy                  ; TA13 if enegery <= maxumum value for blueprint then recharge energy by 1
  47++A874 3A 46 C3                             ld      a,(ShipNewBitsAddr)
  48++A877 E6 01        .IsItATrader:           and     ShipIsTrader
  49++A879 20 11                                jr      nz, .NotATrader
  50++A87B CD 41 89     .ItsATrader:            call    doRandom
  51++A87E                                      ReturnIfALTNusng 100                    ; 61% chance do nothing
  51++A87E FE 64       >                        cp    100
  51++A880 D8          >                        ret	 c
  52++A881                                      IFDEF DEBUGFORCEHOSTILE
  53++A881 CD 52 C5                                     call SetShipHostile
  54++A884 3A 46 C3                                     ld      a,(ShipNewBitsAddr)
  55++A887 F6 02                                        or      ShipIsBountyHunter
  56++A889 32 46 C3                                     ld      (ShipNewBitsAddr),a
  57++A88C                                      ENDIF
  58++A88C              .NotATrader:
  59++A88C 3A 46 C3     .IsItBountyHunter:      ld      a,(ShipNewBitsAddr)
  60++A88F E6 02                                and     ShipIsBountyHunter
  61++A891 20 08                                jr      nz, .NotBountyHunter
  62++A893              .CheckFIST:             CallIfMemGTENusng FugitiveInnocentStatus, 40, SetShipHostile ; if our FIST rating >= 40 set ship hostile (bit 2)
  62++A893 3A 0C 84    >                        ld      a,(FugitiveInnocentStatus)
  62++A896 FE 28       >                        cp      40
  62++A898 D4 52 C5    >                        call    nc,SetShipHostile
  63++A89B              .NotBountyHunter:
  64++A89B 3A 46 C3     .CheckHostile:          ld      a,(ShipNewBitsAddr)
  65++A89E E6 04                                and     ShipIsHostile
  66++A8A0 20 0D                                jr      nz,.ItsHostile
  67++A8A2 3A 46 C3     .ItsNotHostile:         ld      a,(ShipNewBitsAddr)
  68++A8A5 E6 10                                and     ShipIsDocking                   ; if bit 4 is not clear
  69++A8A7 20 03                                jr      nz,.NotDocking
  70++A8A9 DD 01        .ItsDocking:            break
  71++A8AB                                      ;       do docking algorithm
  72++A8AB                                      ;       return
  73++A8AB C9                                   ret
  74++A8AC DD 01        .NotDocking:            break
  75++A8AE                                      ;       calcuilate vector to planet
  76++A8AE                                      ;       move towards planet
  77++A8AE                                      ;       return
  78++A8AE C9                                   ret
  79++A8AF 3A 46 C3     .ItsHostile:            ld      a,(ShipNewBitsAddr)
  80++A8B2 E6 08        .IsItPirate:            and     ShipIsPirate
  81++A8B4 20 0E                                jr      nz,.NotAPirate
  82++A8B6              .IsItInSafeZone:        ;      if we are not in space station safe zone
  83++A8B6 3A 46 C3     .InSafeZone:            ld      a,(ShipNewBitsAddr)
  84++A8B9 F6 81                                or      Bit7Only | ShipIsTrader
  85++A8BB CD 26 AC     .NotSafeZone:           call    SetPlayerAsTarget
  86++A8BE CD F8 AB                             call    CopyPosToVector
  87++A8C1 CD 87 AC                             call    NormalizeTactics
  88++A8C4              .NotAPirate:
  89++A8C4 3A 5E C0     .SpawnFighter:          ld      a,(UBnKFightersLeft)
  90++A8C7 A7                                   and     a
  91++A8C8 28 0E                                jr      z,.NoFighters
  92++A8CA CD 41 89     .CanSpawnFighter:       call    doRandom
  93++A8CD                                      JumpIfALTNusng 200, .NoFighters
  93++A8CD FE C8       >                        cp      200
  93++A8CF DA D8 A8    >                        jp		c, .NoFighters
  94++A8D2 DD 01                                break
  95++A8D4                                      ;SPAWN FIGHTER of Type UBnKFighterShipId at Y - 20 z - 20
  96++A8D4 21 5E C0                             ld      hl,UBnKFightersLeft             ;reduced figters left
  97++A8D7 35                                   dec     (hl)
  98++A8D8                                      ;inherits parent's ai angry
  99++A8D8 3A 92 82     .NoFighters:            ld      a,(RandomSeed3)                 ;if random >= 250
 100++A8DB F6 68                                or      104                             ;set a noticable roll
 101++A8DD 3A 3D C3     .CheckEnergyLevels:     ld      a,(EnergyAddr)
 102++A8E0 47                                   ld      b,a
 103++A8E1 3A 58 C0                             ld      a,(UBnKEnergy)
 104++A8E4 CB 38                                srl     b                               ; max energy / 2
 105++A8E6                                      JumpIfAGTENusng b,.EnergyOverHalf       ; if ship max energy / 2 < current enerhy
 105++A8E6 B8          >                        cp     b
 105++A8E7 D2 0A A9    >                        jp		nc,.EnergyOverHalf
 106++A8EA CB 38                                srl     b
 107++A8EC                                      JumpIfAGTENusng b,.EnergyOverQuater     ; if ship max enery / 4 < current energy
 107++A8EC B8          >                        cp     b
 107++A8ED D2 0A A9    >                        jp		nc,.EnergyOverQuater
 108++A8F0 3A 46 C3                             ld      a,(ShipNewBitsAddr)
 109++A8F3 E6 80                                and     ShipHasEscapePod
 110++A8F5 28 13                                jr      z, .NoEscapePod
 111++A8F7 3A 91 82                             ld      a,(RandomSeed2)
 112++A8FA                                      JumpIfALTNusng 230,.NoEscapePod         ;if random >= 230
 112++A8FA FE E6       >                        cp      230
 112++A8FC DA 0A A9    >                        jp		c, .NoEscapePod
 113++A8FF 3A 54 C0                             ld      a,(UBnkaiatkecm)                ;  disable ship AI hostily and ECM
 114++A902 E6 7F                                and     ShipAIDisabled                  ;  .
 115++A904 32 54 C0                             ld      (UBnkaiatkecm),a                ;  .
 116++A907                                      ;ZeroA                                   ;  .
 117++A907 32 5A C0                             ld      (UBnKECMFitted),a               ;  .
 118++A90A              .LaunchEscapePod:       ;break
 119++A90A                                      ;            goto spawn escape pod
 120++A90A              .EnergyOverHalf:
 121++A90A              .EnergyOverQuater:
 122++A90A 3A 5C C0     .NoEscapePod:           ld      a,(UBnKMissilesLeft)            ;      if missiles > 0
 123++A90D 47                                   ld      b,a
 124++A90E                                      JumpIfAIsZero .NoMissileLaunch
 124++A90E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 124++A90F CA 25 A9    >                        jp	    z, .NoMissileLaunch
 125++A912 3A 92 82     .MissileLaunchTest:     ld      a,(RandomSeed3)                 ;         if random and 15 > = nbr missiles
 126++A915 E6 0F                                and     15
 127++A917                                      JumpIfALTNusng b, .NoMissileLaunch
 127++A917 B8          >                        cp      b
 127++A918 DA 25 A9    >                        jp		c, .NoMissileLaunch
 128++A91B 3A AE 82                             ld      a,(ECMCountDown)
 129++A91E                                      JumpIfAIsNotZero  .NoMissileLaunch
 129++A91E A7          >                        and     a
 129++A91F C2 25 A9    >                        jp	    nz,.NoMissileLaunch
 130++A922 C3 09 66                             jp    LaunchEnemyMissile                ; jump out and return if firing missile
 131++A925 3A 21 C0     .NoMissileLaunch:       ld      a,(UBnKxhi)
 132++A928 2A 24 C0                             ld      hl,(UBnKyhi)
 133++A92B B6                                   or      (hl)
 134++A92C 2A 27 C0                             ld      hl,(UBnKzhi)
 135++A92F B6                                   or      (hl)
 136++A930                                      JumpIfAGTENusng 160, .TooFarForLaser   ; if in laser range (all highs order together < 160)
 136++A930 FE A0       >                        cp     160
 136++A932 D2 59 A9    >                        jp		nc,.TooFarForLaser
 137++A935 CD 8A AB                             call    XX12EquTacticsDotNosev
 138++A938 47                                   ld      b,a
 139++A939 3A 9E 83                             ld      a,(varS)
 140++A93C                                      JumpIfAIsNotZero .TooFarForLaser        ;   if dot product of ship < 160 i.e. > -32
 140++A93C A7          >                        and     a
 140++A93D C2 59 A9    >                        jp	    nz,.TooFarForLaser
 141++A940 78                                   ld      a,b                            ;    .
 142++A941                                      JumpIfALTNusng    32, .DoneLaserShot  ;    .
 142++A941 FE 20       >                        cp      32
 142++A943 DA 54 A9    >                        jp		c, .DoneLaserShot
 143++A946              .FireLaser:             ;break                        ;      do fire laser logic (drain energy, add beam to lines as random line from ship to a random edge of screen)
 144++A946 78                                   ld      a,b ;; need to see if b gets corrupted by laser fire
 145++A947                                      JumpIfAEqNusng      35, .LaserHitPlayer
 145++A947 FE 23       >                        cp     35
 145++A949 CA 54 A9    >                        jp      z,.LaserHitPlayer
 146++A94C                                      JumpIfAEqNusng      36, .LaserHitPlayer
 146++A94C FE 24       >                        cp     36
 146++A94E CA 54 A9    >                        jp      z,.LaserHitPlayer
 147++A951 C3 54 A9     .LaserMissedPlayer:     jp      .DoneLaserShot
 148++A954              .LaserHitPlayer:        ;break ;         do direct hit logic
 149++A954 21 47 C0     .DoneLaserShot:         ld      hl,UBnKAccel                   ;      Half attacking ship's accelleration in byte 28 (dec so must be 0 1 or 2)
 150++A957 CB 26                                sla     (hl)
 151++A959              .TooFarForLaser:
 152++A959              .UpdateShip             ;break
 153++A959 CD 12 A3                             call    CalculateAgression              ; refresh aggression levels
 154++A95C 3A 27 C0                             ld      a,(UBnKzhi)
 155++A95F                                      JumpIfAGTENusng 3, .ShipFarAway
 155++A95F FE 03       >                        cp     3
 155++A961 D2 6F A9    >                        jp		nc,.ShipFarAway
 156++A964 3A 21 C0                             ld      a,(UBnKxhi)
 157++A967 2A 24 C0                             ld      hl,(UBnKyhi)
 158++A96A B6                                   or      (hl)
 159++A96B E6 FE                                and     %11111110
 160++A96D 28 26                                jr      z,.ShipTurnAway
 161++A96F 3A 91 82     .ShipFarAway:           ld      a,(RandomSeed2)                     ; if random with bit 7 set < ship AI byte 32 flag
 162++A972                                      ;or      %10000000               ; .
 163++A972                                      JumpIfAGTEMemusng UBnKShipAggression, .ShipTurnAway
 163++A972 21 53 C0    >                        ld      hl,UBnKShipAggression
 163++A975 BE          >                        cp      (hl)
 163++A976 D2 95 A9    >                        jp		nc,.ShipTurnAway
 164++A979                                      FlipSignMem TacticsVectorX+2                ; negate vector in XX15 so it points opposite direction
 164++A979 3A C3 A4    >                        ld  a,(TacticsVectorX+2)
 164++A97C EE 80       >                        xor SignOnly8Bit
 164++A97E 32 C3 A4    >                        ld  (TacticsVectorX+2),a
 165++A981                                      FlipSignMem TacticsVectorY+2                ; we have already negated the dot product above
 165++A981 3A C7 A4    >                        ld  a,(TacticsVectorY+2)
 165++A984 EE 80       >                        xor SignOnly8Bit
 165++A986 32 C7 A4    >                        ld  (TacticsVectorY+2),a
 166++A989                                      FlipSignMem TacticsVectorZ+2                ; .
 166++A989 3A CB A4    >                        ld  a,(TacticsVectorZ+2)
 166++A98C EE 80       >                        xor SignOnly8Bit
 166++A98E 32 CB A4    >                        ld  (TacticsVectorZ+2),a
 167++A991 CD 99 A9                             call    ShipSeekingLogic            ;    seek as per missile
 168++A994 C9                                   ret
 169++A995 CD 99 A9     .ShipTurnAway:          call    ShipSeekingLogic            ; move away (ie.. as per missile but dot products not reversed)
 170++A998                                      ;              consider a random roll
 171++A998 C9                                   ret
 172++A999
 173++A999 CD 8A AB     ShipSeekingLogic:       call    XX12EquTacticsDotNosev              ; SA = nose . XX15                           (     ->TAS3)
 174++A99C 32 83 A4                             ld      (TacticsDotProduct1),a              ; CNT = A (high byte of dot product)
 175++A99F 3A 9E 83                             ld      a,(varS)                            ; get sign from dot product
 176++A9A2 32 87 A4                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 177++A9A5 CD E0 AB     .RoofDotProduct:        call    XX12EquTacticsDotRoofv              ; Now tran the roof for rotation
 178++A9A8 32 86 A4                             ld      (TacticsDotProduct2),a              ; so if its +ve then the roof is similar so pull up to head towards it
 179++A9AB 3A 9E 83                             ld      a,(varS)                            ; .
 180++A9AE 32 87 A4                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 181++A9B1 CD BB A9                             call    ShipPitchv2
 182++A9B4 CD DF A9                             call    ShipRollv2
 183++A9B7 CD 0D AA                             call    ShipSpeedv2
 184++A9BA C9                                   ret
 185++A9BB
 186++A9BB
 187++A9BB
 188++A9BB
 189++A9BB              ShipPitchv2:  ;break
 190++A9BB 2A 86 A4                             ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 191++A9BE 7C                                   ld      a,h                                ; .
 192++A9BF EE 80                                xor     $80                                ; .
 193++A9C1 E6 80                                and     $80                                ; .
 194++A9C3 67                                   ld      h,a                                ; h  = flipped sign
 195++A9C4 7D                                   ld      a,l                                ; a = value * 2
 196++A9C5 CB 27                                sla     a                                  ;
 197++A9C7                                      JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 197++A9C7 FE 10       >                        cp     16
 197++A9C9 D2 D5 A9    >                        jp		nc,.skipPitchZero
 198++A9CC                                      ZeroA                                      ; else we zero pitch but
 198++A9CC AF          >                        xor a
 199++A9CD B4                                   or      h                                  ; we need to retain the sign
 200++A9CE 32 49 C0                             ld      (UBnKRotZCounter),a                ; .
 201++A9D1                                      IFDEF MISSILEDEBUG
 202++A9D1 32 14 A5                                 ld  (TacticsRotZ),a
 203++A9D4                                      ENDIF
 204++A9D4 C9                                   ret
 205++A9D5 3E 03        .skipPitchZero:         ld      a,3
 206++A9D7 B4                                   or      h
 207++A9D8 32 49 C0                             ld      (UBnKRotZCounter),a
 208++A9DB                                      IFDEF MISSILEDEBUG
 209++A9DB 32 14 A5                                 ld  (TacticsRotZ),a
 210++A9DE                                      ENDIF
 211++A9DE C9                                   ret
 212++A9DF
 213++A9DF              ;Direct on dot product nose is $24
 214++A9DF              ; Position                  Pitch   Roll    Speed
 215++A9DF              ; Top left forwards         up      -ve     +
 216++A9DF              ; Top right forwards        up      +ve     +
 217++A9DF              ; Bottom left forwards      down    -ve     +
 218++A9DF              ; Bottom right forwards     down    +ve     +
 219++A9DF              ; Top left rear             up      -ve     -
 220++A9DF              ; Top right rear            up      +ve     -
 221++A9DF              ; Bottom left rear          down    -ve     -
 222++A9DF              ; Bottom right rear         down    +ve     -
 223++A9DF
 224++A9DF
 225++A9DF
 226++A9DF              ShipRollv2:  ; ld      a,(UBnKRotXCounter)               ; get current roll
 227++A9DF                                     ; sla     a                                 ; * 2 to also abs
 228++A9DF                                     ; ReturnIfAGTENusng 32                      ; and so if >32 skip
 229++A9DF CD E6 AB                             call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 230++A9E2 32 89 A4                             ld      (TacticsDotProduct3),a             ; .
 231++A9E5 6F                                   ld      l,a                                ; .
 232++A9E6 3A 9E 83                             ld      a,(varS)                           ; .
 233++A9E9 32 8A A4                             ld      (TacticsDotProduct3+1),a           ; .
 234++A9EC 67                                   ld      h,a                                ; h = sign sidev
 235++A9ED 3A 87 A4                             ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 236++A9F0                                      ;xor     $80                               ; .
 237++A9F0                                      ;xor     h                                 ; b = flip against pitch sign
 238++A9F0                                      ;and     $80                               ; .
 239++A9F0                                      ;xor $80
 240++A9F0 47                                   ld      b,a                                ; b = roof product
 241++A9F1 7D                                   ld      a,l                                ; a = abs sidev  * 2
 242++A9F2 CB 27                                sla     a                                  ;
 243++A9F4                                      JumpIfAGTENusng 16,.skipRollZero           ;
 243++A9F4 FE 10       >                        cp     16
 243++A9F6 D2 02 AA    >                        jp		nc,.skipRollZero
 244++A9F9                                      ZeroA                                      ; if its zoer then set rotx to zero
 244++A9F9 AF          >                        xor a
 245++A9FA B0                                   or      b
 246++A9FB 32 48 C0                             ld      (UBnKRotXCounter),a
 247++A9FE                                      IFDEF MISSILEDEBUG
 248++A9FE 32 12 A5                                 ld  (TacticsRotX),a
 249++AA01                                      ENDIF
 250++AA01 C9                                   ret
 251++AA02 3E 03        .skipRollZero:          ld      a,3
 252++AA04 B4                                   or      h
 253++AA05 A8                                   xor     b
 254++AA06 32 48 C0                             ld      (UBnKRotXCounter),a
 255++AA09                                      IFDEF MISSILEDEBUG
 256++AA09 32 12 A5                                 ld  (TacticsRotX),a
 257++AA0C                                      ENDIF
 258++AA0C C9                                   ret
 259++AA0D
 260++AA0D 2A 83 A4     ShipSpeedv2:  ld      hl,(TacticsDotProduct1)
 261++AA10 7C                                   ld      a,h
 262++AA11 A7                                   and     a
 263++AA12 20 13                                jr      nz,.SlowDown
 264++AA14 ED 5B 86 A4                          ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 265++AA18 7D                                   ld      a,l
 266++AA19                                      JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 266++AA19 FE 16       >                        cp      22
 266++AA1B DA 27 AA    >                        jp		c, .SlowDown
 267++AA1E 3E 02        .Accelerate:            ld      a,2                                 ; else
 268++AA20 32 47 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 269++AA23                                      IFDEF MISSILEDEBUG
 270++AA23 32 16 A5                                 ld  (TacticsSpeed),a
 271++AA26                                      ENDIF
 272++AA26 C9                                   ret                                         ;  .
 273++AA27              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 273++AA27 FE 12       >                        cp      18
 273++AA29 DA 35 AA    >                        jp		c, .NoSpeedChange
 274++AA2C 3E FF        .Deccelerate:           ld      a,-1
 275++AA2E 32 47 C0                             ld      (UBnKAccel),a
 276++AA31                                      IFDEF MISSILEDEBUG
 277++AA31 32 16 A5                                 ld  (TacticsSpeed),a
 278++AA34                                      ENDIF
 279++AA34 C9                                   ret
 280++AA35              .NoSpeedChange:         ZeroA                                       ; else no change
 280++AA35 AF          >                        xor a
 281++AA36 32 47 C0                             ld      (UBnKAccel),a
 282++AA39                                      IFDEF MISSILEDEBUG
 283++AA39 32 16 A5                                 ld  (TacticsSpeed),a
 284++AA3C                                      ENDIF
 285++AA3C C9                                   ret
 286++AA3D
 287++AA3D
 288++AA3D
 289++AA3D              RAT2 equ    4           ; roll pitch threshold
 290++AA3D              RAT  equ    3           ; magnitude of counter
 291++AA3D              CNT2 equ    22          ; angle for ship slowdown
 292++AA3D
 293++AA3D
 294++AA3D 2A 86 A4     ShipPitch:              ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 295++AA40 7C                                   ld      a,h                                ; .
 296++AA41 EE 80                                xor     $80                                ; .
 297++AA43 E6 80                                and     $80                                ; .
 298++AA45 67                                   ld      h,a                                ; h  = flipped sign
 299++AA46 7D                                   ld      a,l                                ; a = value * 2
 300++AA47 CB 27                                sla     a                                  ;
 301++AA49                                      JumpIfAGTENusng RAT2, .skipPitchZero         ; if its > 16 then update pitch
 301++AA49 FE 04       >                        cp     RAT2
 301++AA4B D2 57 AA    >                        jp		nc,.skipPitchZero
 302++AA4E                                      ZeroA                                      ; else we zero pitch but
 302++AA4E AF          >                        xor a
 303++AA4F B4                                   or      h                                  ; we need to retain the sign
 304++AA50 32 49 C0                             ld      (UBnKRotZCounter),a                ; .
 305++AA53                                      IFDEF MISSILEDEBUG
 306++AA53 32 14 A5                                 ld  (TacticsRotZ),a
 307++AA56                                      ENDIF
 308++AA56 C9                                   ret
 309++AA57 7D           .skipPitchZero:         ld      a,l
 310++AA58 B4                                   or      h
 311++AA59 32 49 C0                             ld      (UBnKRotZCounter),a
 312++AA5C                                      IFDEF MISSILEDEBUG
 313++AA5C 32 14 A5                                 ld  (TacticsRotZ),a
 314++AA5F                                      ENDIF
 315++AA5F C9                                   ret
 316++AA60
 317++AA60
 318++AA60                                      ;
 319++AA60 CD E6 AB     ShipRoll:               call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 320++AA63 32 89 A4                             ld      (TacticsDotProduct3),a             ; .
 321++AA66 6F                                   ld      l,a                                ; .
 322++AA67 3A 9E 83                             ld      a,(varS)                           ; .
 323++AA6A 32 8A A4                             ld      (TacticsDotProduct3+1),a           ; .
 324++AA6D 67                                   ld      h,a                                ; h = sign sidev
 325++AA6E 3A 87 A4                             ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 326++AA71 47                                   ld      b,a                                ; b = roof product
 327++AA72 7D                                   ld      a,l                                ; a = abs sidev  * 2
 328++AA73 CB 27                                sla     a                                  ;
 329++AA75                                      JumpIfAGTENusng RAT2,.skipRollZero           ;
 329++AA75 FE 04       >                        cp     RAT2
 329++AA77 D2 83 AA    >                        jp		nc,.skipRollZero
 330++AA7A                                      ZeroA                                      ; if its zoer then set rotx to zero
 330++AA7A AF          >                        xor a
 331++AA7B B0                                   or      b
 332++AA7C 32 48 C0                             ld      (UBnKRotXCounter),a
 333++AA7F                                      IFDEF MISSILEDEBUG
 334++AA7F 32 12 A5                                 ld  (TacticsRotX),a
 335++AA82                                      ENDIF
 336++AA82 C9                                   ret
 337++AA83 3E 01        .skipRollZero:          ld      a,1
 338++AA85 B4                                   or      h
 339++AA86 A8                                   xor     b
 340++AA87 32 48 C0                             ld      (UBnKRotXCounter),a
 341++AA8A                                      IFDEF MISSILEDEBUG
 342++AA8A 32 12 A5                                 ld  (TacticsRotX),a
 343++AA8D                                      ENDIF
 344++AA8D C9                                   ret
 345++AA8E
 346++AA8E 2A 83 A4     ShipSpeed:              ld      hl,(TacticsDotProduct1)
 347++AA91 7C                                   ld      a,h
 348++AA92 A7                                   and     a
 349++AA93 20 13                                jr      nz,.SlowDown
 350++AA95 ED 5B 86 A4                          ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 351++AA99 7D                                   ld      a,l
 352++AA9A                                      JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 352++AA9A FE 16       >                        cp      22
 352++AA9C DA A8 AA    >                        jp		c, .SlowDown
 353++AA9F 3E 03        .Accelerate:            ld      a,3                                 ; else
 354++AAA1 32 47 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 355++AAA4                                      IFDEF MISSILEDEBUG
 356++AAA4 32 16 A5                                 ld  (TacticsSpeed),a
 357++AAA7                                      ENDIF
 358++AAA7 C9                                   ret                                         ;  .
 359++AAA8              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 359++AAA8 FE 12       >                        cp      18
 359++AAAA DA B6 AA    >                        jp		c, .NoSpeedChange
 360++AAAD 3E FF        .Deccelerate:           ld      a,-1
 361++AAAF 32 47 C0                             ld      (UBnKAccel),a
 362++AAB2                                      IFDEF MISSILEDEBUG
 363++AAB2 32 16 A5                                 ld  (TacticsSpeed),a
 364++AAB5                                      ENDIF
 365++AAB5 C9                                   ret
 366++AAB6              .NoSpeedChange:         ZeroA                                       ; else no change
 366++AAB6 AF          >                        xor a
 367++AAB7 32 47 C0                             ld      (UBnKAccel),a
 368++AABA                                      IFDEF MISSILEDEBUG
 369++AABA 32 16 A5                                 ld  (TacticsSpeed),a
 370++AABD                                      ENDIF
 371++AABD C9                                   ret
 372++AABE
# file closed: ./GameEngine/../GameEngine/NormalAI.asm
 228+ AABE
 229+ AABE              ; On Entry A = TacticsDotProduct2 sign (i.e. roof direction)
 230+ AABE              ; on exit a == new roll
 231+ AABE EE 80        calcNPitch:             xor     SignOnly8Bit                    ; c = sign flipped of dot product only
 232+ AAC0 E6 80                                and     SignOnly8Bit                    ; .
 233+ AAC2 4F                                   ld      c,a                             ; . (varT in effect)
 234+ AAC3 F6 03                                or      MISSILEMAXPITCH                 ; a = flipped sign max pitch
 235+ AAC5 3A 49 C0                             ld      a,(UBnKRotZCounter)             ; b = abs (currentz pitch)
 236+ AAC8 C9                                   ret
 237+ AAC9
 238+ AAC9 E6 7F                                and     SignMask8Bit                    ; . which will initially be 0
 239+ AACB 47                                   ld      b,a                             ; .
 240+ AACC 3A 86 A4                             ld      a,(TacticsDotProduct2)          ; a = abs roof dot product
 241+ AACF                                      JumpIfALTNusng MISSILEMAXPITCH+1, .calcNPitch2    ; if a >= roll threshold
 241+ AACF FE 04       >                        cp      MISSILEMAXPITCH+1
 241+ AAD1 DA DE AA    >                        jp		c, .calcNPitch2
 242+ AAD4 78                                   ld      a,b
 243+ AAD5 E6 80                                and     SignOnly8Bit
 244+ AAD7                                      ;jr      z,.NPitchPositive
 245+ AAD7                                     ; ld      a,
 246+ AAD7 3E 03                                ld      a,MISSILEMAXPITCH                         ;    z rot = z rot * dot product flipped sign
 247+ AAD9 B1                                   or      c                               ;    i.e. zrot = current magnitude but dot product sign flipped
 248+ AADA 32 49 C0                             ld      (UBnKRotZCounter),a             ;    .
 249+ AADD C9                                   ret                                     ; else (a LT current abs z)
 250+ AADE B1           .calcNPitch2:           or      c                               ;     rot z = dot product with sign flipped
 251+ AADF 32 49 C0                             ld      (UBnKRotZCounter),a             ;
 252+ AAE2 C9                                   ret                                     ;
 253+ AAE3
 254+ AAE3 3A 49 C0     calcNRoll:              ld      a,(UBnKRotZCounter)
 255+ AAE6 E6 80                                and     SignOnly8Bit
 256+ AAE8 EE 80                                xor     SignOnly8Bit                    ; flip sign of dot product
 257+ AAEA F6 05                                or      5
 258+ AAEC 32 48 C0                             ld      (UBnKRotXCounter),a
 259+ AAEF C9                                   ret
 260+ AAF0
 261+ AAF0 4F                                   ld      c,a
 262+ AAF1 F6 03                                or      MISSILEMAXPITCH
 263+ AAF3 3A 48 C0                             ld      a,(UBnKRotXCounter)
 264+ AAF6 C9                                   ret
 265+ AAF7
 266+ AAF7
 267+ AAF7
 268+ AAF7 E6 7F                                and     SignMask8Bit                    ; get ABS value
 269+ AAF9 47                                   ld      b,a
 270+ AAFA 3A 86 A4                             ld      a,(TacticsDotProduct2)          ; now we have the dot product abs value
 271+ AAFD                                      JumpIfALTNusng MISSILEMAXROLL+1, .calcNRoll2
 271+ AAFD FE 04       >                        cp      MISSILEMAXROLL+1
 271+ AAFF DA 09 AB    >                        jp		c, .calcNRoll2
 272+ AB02 3E 03                                ld      a,MISSILEMAXROLL
 273+ AB04 B1                                   or      c
 274+ AB05 32 48 C0                             ld      (UBnKRotXCounter),a
 275+ AB08 C9                                   ret
 276+ AB09 B1           .calcNRoll2:            or      c                               ;     rot z = dot product with sign flipped
 277+ AB0A 32 48 C0                             ld      (UBnKRotXCounter),a
 278+ AB0D C9                                   ret
 279+ AB0E
 280+ AB0E
 281+ AB0E 21 2A C0     CopyRotSideToTacticsMat:ld      hl,UBnkrotmatSidevX+1
 282+ AB11 C3 1D AB                             jp      CopyRotmatToTacticsMat
 283+ AB14
 284+ AB14 21 36 C0     CopyRotNoseToTacticsMat:ld      hl,UBnkrotmatNosevX+1
 285+ AB17 C3 1D AB                             jp      CopyRotmatToTacticsMat
 286+ AB1A
 287+ AB1A 21 30 C0     CopyRotRoofToTacticsMat:ld      hl,UBnkrotmatRoofvX+1
 288+ AB1D              ; Coy rotation matrix high byte to trans rot mat, strip off sign and separate to rotmat byte 2
 289+ AB1D 11 A4 A4     CopyRotmatToTacticsMat: ld      de,TacticsRotMatX
 290+ AB20 7E                                   ld      a,(hl)              ; matrix high byte of x
 291+ AB21 47                                   ld      b,a
 292+ AB22 E6 7F                                and     SignMask8Bit
 293+ AB24 12                                   ld      (de),a              ; set rot mat value
 294+ AB25 13                                   inc     de
 295+ AB26 78                                   ld      a,b
 296+ AB27 E6 80                                and     SignOnly8Bit
 297+ AB29 12                                   ld      (de),a              ; set rot mat sign
 298+ AB2A 13                                   inc     de                  ; move to next rot mat element
 299+ AB2B 23                                   inc     hl
 300+ AB2C 23                                   inc     hl                  ; matrix high byte of y
 301+ AB2D 7E           .processYElement:       ld      a,(hl)              ; matrix high byte of y
 302+ AB2E 47                                   ld      b,a
 303+ AB2F E6 7F                                and     SignMask8Bit
 304+ AB31 12                                   ld      (de),a              ; set rot mat value
 305+ AB32 13                                   inc     de
 306+ AB33 78                                   ld      a,b
 307+ AB34 E6 80                                and     SignOnly8Bit
 308+ AB36 12                                   ld      (de),a              ; set rot mat sign
 309+ AB37 13                                   inc     de                  ; move to next rot mat element
 310+ AB38 23                                   inc     hl
 311+ AB39 23                                   inc     hl                  ; matrix high byte of z
 312+ AB3A 7E           .ProcessZElement:       ld      a,(hl)              ; matrix high byte of z
 313+ AB3B 47                                   ld      b,a
 314+ AB3C E6 7F                                and     SignMask8Bit
 315+ AB3E 12                                   ld      (de),a              ; set rot mat value
 316+ AB3F 13                                   inc     de
 317+ AB40 78                                   ld      a,b
 318+ AB41 E6 80                                and     SignOnly8Bit
 319+ AB43 12                                   ld      (de),a              ; set rot mat sign
 320+ AB44 C9                                   ret
 321+ AB45
 322+ AB45                                      IFDEF TACTICSDEBUG
 323+ AB45              DebugTacticsCopy:
 324+ AB45 2A 29 C0                             ld      hl,(UBnkrotmatSidevX)
 325+ AB48 ED 5B 2B C0                          ld      de,(UBnkrotmatSidevY)
 326+ AB4C ED 4B 2D C0                          ld      bc,(UBnkrotmatSidevZ)
 327+ AB50 22 E1 A4                             ld      (TacticsSideX),hl
 328+ AB53 ED 53 E5 A4                          ld      (TacticsSideY),de
 329+ AB57 ED 43 E9 A4                          ld      (TacticsSideZ),bc
 330+ AB5B
 331+ AB5B 2A 2F C0                             ld      hl,(UBnkrotmatRoofvX)
 332+ AB5E ED 5B 31 C0                          ld      de,(UBnkrotmatRoofvY)
 333+ AB62 ED 4B 33 C0                          ld      bc,(UBnkrotmatRoofvZ)
 334+ AB66 22 F1 A4                             ld      (TacticsRoofX),hl
 335+ AB69 ED 53 F5 A4                          ld      (TacticsRoofY),de
 336+ AB6D ED 43 F9 A4                          ld      (TacticsRoofZ),bc
 337+ AB71
 338+ AB71 2A 35 C0                             ld      hl,(UBnkrotmatNosevX)
 339+ AB74 ED 5B 37 C0                          ld      de,(UBnkrotmatNosevY)
 340+ AB78 ED 4B 39 C0                          ld      bc,(UBnkrotmatNosevZ)
 341+ AB7C 22 01 A5                             ld      (TacticsNoseX),hl
 342+ AB7F ED 53 05 A5                          ld      (TacticsNoseY),de
 343+ AB83 ED 43 09 A5                          ld      (TacticsNoseZ),bc
 344+ AB87
 345+ AB87 C9                                   ret
 346+ AB88                                      ENDIF
 347+ AB88
 348+ AB88 00 00        TacticsVarResult        DW 0
 349+ AB8A CD 14 AB     XX12EquTacticsDotNosev: call    CopyRotNoseToTacticsMat
 350+ AB8D 21 A4 A4     XX12EquTacticsDotHL:    ld      hl,TacticsRotMatX; UBnkTransmatNosevX    ; ROTMATX HI
 351+ AB90 7E           .CalcXValue:            ld      a,(hl)                              ; DE = RotMatX & Vect X
 352+ AB91 5F                                   ld      e,a                                 ; .
 353+ AB92 3A C1 A4                             ld      a,(TacticsVectorX)                  ; .
 354+ AB95 57                                   ld      d,a                                 ; .
 355+ AB96 ED 30                                mul                                         ; .
 356+ AB98 7A                                   ld      a,d                                 ; S = A = Hi (RotMatX & Vect X)
 357+ AB99 32 9E 83                             ld      (varS),a                            ; .
 358+ AB9C 23                                   inc     hl                                  ; move to sign byte
 359+ AB9D 3A C3 A4     .CalcXSign:             ld      a,(TacticsVectorX+2)                ; B  = A = Sign VecX xor sign RotMatX
 360+ ABA0 AE                                   xor     (hl)                                ; .
 361+ ABA1 47                                   ld      b,a                                 ; .
 362+ ABA2 23           .MoveToY:               inc     hl                                  ; Move on to Y component
 363+ ABA3 7E           .CalcYValue:            ld      a,(hl)                              ; D = 0, E = Hi (RotMatY & Vect Y)
 364+ ABA4 5F                                   ld      e,a                                 ; .
 365+ ABA5 3A C5 A4                             ld      a,(TacticsVectorY)                  ; .
 366+ ABA8 57                                   ld      d,a                                 ; .
 367+ ABA9 ED 30                                mul     de                                  ; .
 368+ ABAB 5A                                   ld      e,d                                 ; .
 369+ ABAC 16 00                                ld      d,0                                 ; .
 370+ ABAE 23                                   inc     hl                                  ; move to sign byte
 371+ ABAF 3A C7 A4     .CalcYSign:             ld      a,(TacticsVectorY+2)                ; c = sign of y_sign * sidev_y
 372+ ABB2 AE                                   xor     (hl)                                ;
 373+ ABB3 4F                                   ld      c,a                                 ;
 374+ ABB4 23           .MoveToZ:               inc     hl                                  ; Move on to Z component
 375+ ABB5 E5           .AddXandY:              push    hl                                  ; but save HL as we need that
 376+ ABB6 3A 9E 83                             ld      a,(varS)                            ; hl = Hi (RotMatX & Vect X) b= sign
 377+ ABB9 26 00                                ld      h,0                                 ; de = Hi (RotMatY & Vect Y) c= sign
 378+ ABBB 6F                                   ld      l,a                                 ;
 379+ ABBC CD DF 93                             call    ADDHLDESignBC                       ; a(sign) hl = sum
 380+ ABBF 47                                   ld      b,a                                 ; b = sign of result
 381+ ABC0 22 88 AB                             ld      (TacticsVarResult),hl               ; save sub in TacticsVarResult
 382+ ABC3 E1           .CalcZValue:            pop     hl                                  ; get back to the rotation mat z
 383+ ABC4 7E                                   ld      a,(hl)                              ; D = 0, E = Hi (RotMatZ & Vect Z)
 384+ ABC5 5F                                   ld      e,a                                 ; .
 385+ ABC6 3A C9 A4                             ld      a,(TacticsVectorZ)                  ; .
 386+ ABC9 57                                   ld      d,a                                 ; .
 387+ ABCA ED 30                                mul     de                                  ; .
 388+ ABCC 5A                                   ld      e,d                                 ; .
 389+ ABCD 16 00                                ld      d,0                                 ; .
 390+ ABCF 23                                   inc     hl                                  ; move to sign byte
 391+ ABD0 3A CB A4     .CalcZSign:             ld      a,(TacticsVectorZ+2)
 392+ ABD3 AE                                   xor     (hl)
 393+ ABD4 4F                                   ld      c,a                                 ; Set C to the sign of z_sign * sidev_z
 394+ ABD5 2A 88 AB                             ld      hl, (TacticsVarResult)              ; CHL = x + y, BDE = z products
 395+ ABD8 CD DF 93                             call    ADDHLDESignBC                       ; so AHL = X y z products
 396+ ABDB 32 9E 83                             ld      (varS),a                            ; for backwards compatibility
 397+ ABDE 7D                                   ld      a,l                                  ; .
 398+ ABDF C9                                   ret
 399+ ABE0
 400+ ABE0 CD 1A AB     XX12EquTacticsDotRoofv: call    CopyRotRoofToTacticsMat
 401+ ABE3 C3 8D AB                             jp      XX12EquTacticsDotHL
 402+ ABE6
 403+ ABE6 CD 0E AB     XX12EquTacticsDotSidev: call    CopyRotSideToTacticsMat
 404+ ABE9 C3 8D AB                             jp      XX12EquTacticsDotHL
 405+ ABEC
 406+ ABEC 21 20 C0     CopyToTargetVector:     ld      hl,UBnKxlo
 407+ ABEF 11 B0 A4                             ld      de,TacticsTargetX
 408+ ABF2 01 09 00                             ld      bc,9
 409+ ABF5 ED B0                                ldir
 410+ ABF7 C9                                   ret
 411+ ABF8
 412+ ABF8 2A 20 C0     CopyPosToVector:        ld      hl,(UBnKxlo)
 413+ ABFB 3A 22 C0                             ld      a,(UBnKxsgn)
 414+ ABFE 22 C1 A4                             ld      (TacticsVectorX),hl
 415+ AC01                                      ;xor     $80
 416+ AC01 22 C1 A4                             ld      (TacticsVectorX),hl
 417+ AC04 32 C3 A4                             ld      (TacticsVectorX+2),a
 418+ AC07
 419+ AC07 2A 23 C0                             ld      hl,(UBnKylo)
 420+ AC0A 3A 25 C0                             ld      a,(UBnKysgn)
 421+ AC0D 22 C5 A4                             ld      (TacticsVectorY),hl
 422+ AC10                                      ;xor     $80
 423+ AC10 22 C5 A4                             ld      (TacticsVectorY),hl
 424+ AC13 32 C7 A4                             ld      (TacticsVectorY+2),a
 425+ AC16
 426+ AC16 2A 26 C0                             ld      hl,(UBnKzlo)
 427+ AC19 3A 28 C0                             ld      a,(UBnKzsgn)
 428+ AC1C 22 C9 A4                             ld      (TacticsVectorZ),hl
 429+ AC1F                                      ;xor     $80
 430+ AC1F 22 C9 A4                             ld      (TacticsVectorZ),hl
 431+ AC22 32 CB A4                             ld      (TacticsVectorZ+2),a
 432+ AC25 C9                                   ret
 433+ AC26
 434+ AC26              SetPlayerAsTarget:      ZeroA
 434+ AC26 AF          >                        xor a
 435+ AC27 21 B0 A4                             ld      hl,TacticsTargetX
 436+ AC2A 06 09                                ld      b, 3*3
 437+ AC2C 77           .ZeroLoop:              ld      (hl),a                              ; player is always at 0,0,0
 438+ AC2D 23                                   inc     hl
 439+ AC2E 10 FC                                djnz    .ZeroLoop
 440+ AC30 C9                                   ret
 441+ AC31
 442+ AC31 CD 26 AC     CalcVectorToMyShip:     call    SetPlayerAsTarget
 443+ AC34 CD F8 AB                             call    CopyPosToVector
 444+ AC37                                      ;call    CopyToTargetVector
 445+ AC37                                      ;FlipSignMem     TacticsTargetX+2
 446+ AC37                                      ;FlipSignMem     TacticsTargetY+2
 447+ AC37                                      ;FlipSignMem     TacticsTargetZ+2
 448+ AC37 C9                                   ret
 449+ AC38
 450+ AC38 ED 5B B0 A4  CalcTargetVector:       ld      de,(TacticsTargetX)                        ; get target ship X
 451+ AC3C 3A B2 A4                             ld      a,(TacticsTargetX+2)                       ; and flip sign so we have missile - target
 452+ AC3F                                      FlipSignBitA
 452+ AC3F EE 80       >                        xor     SignOnly8Bit
 453+ AC41 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 454+ AC42 2A 20 C0                             ld      hl,(UBnKxlo)                        ; get missile x
 455+ AC45 3A 22 C0                             ld      a,(UBnKxsgn)                        ; get missile x sign
 456+ AC48 47                                   ld      b,a
 457+ AC49 CD DF 93                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 458+ AC4C 22 C1 A4                             ld      (TacticsVectorX),hl
 459+ AC4F 32 C3 A4                             ld      (TacticsVectorX+2),a
 460+ AC52 ED 5B B3 A4  .UpdateTargetingShipY:  ld      de,(TacticsTargetY)
 461+ AC56 3A B5 A4                             ld      a,(TacticsTargetY+2)
 462+ AC59                                      FlipSignBitA
 462+ AC59 EE 80       >                        xor     SignOnly8Bit
 463+ AC5B 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 464+ AC5C 2A 23 C0                             ld      hl,(UBnKylo)                        ; get missile x
 465+ AC5F 3A 25 C0                             ld      a,(UBnKysgn)                        ; get missile x sign
 466+ AC62 47                                   ld      b,a
 467+ AC63 CD DF 93                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 468+ AC66 22 C5 A4                             ld      (TacticsVectorY),hl
 469+ AC69 32 C7 A4                             ld      (TacticsVectorY+2),a
 470+ AC6C ED 5B B6 A4  .UpdateTargetingShipZ:  ld      de,(TacticsTargetZ)
 471+ AC70 3A B8 A4                             ld      a,(TacticsTargetZ+2)
 472+ AC73                                      FlipSignBitA
 472+ AC73 EE 80       >                        xor     SignOnly8Bit
 473+ AC75 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 474+ AC76 2A 26 C0                             ld      hl,(UBnKzlo)                        ; get missile x
 475+ AC79 3A 28 C0                             ld      a,(UBnKzsgn)                        ; get missile x sign
 476+ AC7C 47                                   ld      b,a
 477+ AC7D CD DF 93                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 478+ AC80 22 C9 A4                             ld      (TacticsVectorZ),hl
 479+ AC83 32 CB A4                             ld      (TacticsVectorZ+2),a
 480+ AC86 C9                                   ret
 481+ AC87
 482+ AC87              ;-- Now its scaled we can normalise
 483+ AC87              ;-- Scale down so that h d &b are zero, then do once again so l e and c are 7 bit
 484+ AC87              ;-- use 7 bit mul96 to ensure we don;t get odd maths
 485+ AC87 2A C1 A4     NormalizeTactics:       ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 486+ AC8A ED 5B C5 A4                          ld      de, (TacticsVectorY)        ; .
 487+ AC8E ED 4B C9 A4                          ld      bc, (TacticsVectorZ)        ; .
 488+ AC92 7C           .ScaleLoop:             ld      a,h
 489+ AC93 B2                                   or      d
 490+ AC94 B0                                   or      b
 491+ AC95 28 0F                                jr      z,.DoneScaling
 492+ AC97                                      ShiftHLRight1
 492+ AC97 CB 3C       >			   srl h
 492+ AC99 CB 1D       >			   rr  l
 493+ AC9B                                      ShiftDERight1
 493+ AC9B CB 3A       >			   srl d
 493+ AC9D CB 1B       >			   rr  e
 494+ AC9F                                      ShiftBCRight1
 494+ AC9F CB 38       >			   srl b
 494+ ACA1 CB 19       >			   rr  c
 495+ ACA3 C3 92 AC                             jp      .ScaleLoop
 496+ ACA6              .DoneScaling:           ShiftHLRight1                       ; as the values now need to be sign magnitued
 496+ ACA6 CB 3C       >			   srl h
 496+ ACA8 CB 1D       >			   rr  l
 497+ ACAA                                      ShiftDERight1                       ; e.g. S + 7 bit we need an extra shift
 497+ ACAA CB 3A       >			   srl d
 497+ ACAC CB 1B       >			   rr  e
 498+ ACAE                                      ShiftBCRight1                       ; now values are in L E C
 498+ ACAE CB 38       >			   srl b
 498+ ACB0 CB 19       >			   rr  c
 499+ ACB2 E5 D5 C5                             push    hl,,de,,bc                  ; save vecrtor x y and z nwo they are scaled to 1 byte
 500+ ACB5 53                                   ld      d,e                         ; hl = y(e) ^ 2
 501+ ACB6 ED 30                                mul     de                          ; .
 502+ ACB8 EB                                   ex      de,hl                       ; .
 503+ ACB9 53                                   ld      d,e                         ; de = x(l) ^ 2
 504+ ACBA ED 30                                mul     de                          ; .
 505+ ACBC 19                                   add     hl,de                       ; hl = hl + de
 506+ ACBD 51                                   ld      d,c                         ; de = y(c)^ 2 + x ^ 2
 507+ ACBE 59                                   ld      e,c                         ; .
 508+ ACBF ED 30                                mul     de                          ; .
 509+ ACC1 19                                   add     hl,de                       ; hl =  y^ 2 + x ^ 2 + z ^ 2
 510+ ACC2 EB                                   ex      de,hl                       ; fix as hl was holding square
 511+ ACC3 CD 75 97                             call    asm_sqrt                    ; IYH = A = hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
 512+ ACC6                                      ; add in logic if h is low then use lower bytes for all
 513+ ACC6 7D                                   ld      a,l                         ;
 514+ ACC7 FD 67                                ld      iyh,a                       ;
 515+ ACC9 57                                   ld      d,a                         ; D = sqrt
 516+ ACCA C1                                   pop     bc                          ; retrive tacticsvectorz scaled
 517+ ACCB 79                                   ld      a,c                         ; a = scaled byte
 518+ ACCC CD 94 9C                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg          ; This rountine I think is wrong and retuins bad values
 519+ ACCF 32 C9 A4                             ld      (TacticsVectorZ),a          ; z = normalised z
 520+ ACD2 D1                                   pop     de
 521+ ACD3 7B                                   ld      a,e
 522+ ACD4 FD 54                                ld      d,iyh
 523+ ACD6 CD 94 9C                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 524+ ACD9 32 C5 A4                             ld      (TacticsVectorY),a
 525+ ACDC E1                                   pop     hl
 526+ ACDD 7D                                   ld      a,l
 527+ ACDE FD 54                                ld      d,iyh
 528+ ACE0 CD 94 9C                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 529+ ACE3 32 C1 A4                             ld      (TacticsVectorX),a
 530+ ACE6                                      ; BODGE FOR NOW
 531+ ACE6                                     ; BODGE FOR NOW
 532+ ACE6                                      ZeroA                              ;; added to help debugging
 532+ ACE6 AF          >                        xor a
 533+ ACE7 32 C2 A4                             ld      (TacticsVectorX+1),a       ;; added to help debugging
 534+ ACEA 32 C6 A4                             ld      (TacticsVectorY+1),a       ;; added to help debugging
 535+ ACED 32 CA A4                             ld      (TacticsVectorZ+1),a       ;; added to help debugging
 536+ ACF0                                      SignBitOnlyMem TacticsVectorX+2     ; now upper byte is sign only
 536+ ACF0 3A C3 A4    >                        ld      a, (TacticsVectorX+2)
 536+ ACF3 E6 80       >                        and     SignOnly8Bit
 536+ ACF5 32 C3 A4    >                        ld      (TacticsVectorX+2),a
 537+ ACF8                                      SignBitOnlyMem TacticsVectorY+2     ; (could move it to lower perhaps later if
 537+ ACF8 3A C7 A4    >                        ld      a, (TacticsVectorY+2)
 537+ ACFB E6 80       >                        and     SignOnly8Bit
 537+ ACFD 32 C7 A4    >                        ld      (TacticsVectorY+2),a
 538+ AD00                                      SignBitOnlyMem TacticsVectorZ+2     ;  its worth it)
 538+ AD00 3A CB A4    >                        ld      a, (TacticsVectorZ+2)
 538+ AD03 E6 80       >                        and     SignOnly8Bit
 538+ AD05 32 CB A4    >                        ld      (TacticsVectorZ+2),a
 539+ AD08 C9                                   ret
 540+ AD09
 541+ AD09
 542+ AD09              ;TODOcall    TacticsPosMinusTarget              ; calculate vector to target
 543+ AD09              ;;TODO                        check range
 544+ AD09              ;;TODO                        if target has ecm then 7% chance it will active, reduce target energy (i.e. damage)
 545+ AD09              ;;TODO                        else
 546+ AD09              ;;TODO                            normalise teh vector for direction
 547+ AD09              ;;TODO                            dot product = missile nosev . normalised vector
 548+ AD09              ;;TODO                            cnt = high byte of dot product, cnf is +ve if facing similar direction
 549+ AD09              ;;TODO                            negate normalised vector so its opposite product
 550+ AD09              ;;TODO                            invert sign of cnt
 551+ AD09              ;;TODO                            AK = roovf . XX15
 552+ AD09              ;;TODO                            Ships pitch = call nroll to caulate teh valu eof ships pitch counter
 553+ AD09              ;;TODO                            if pitch * 2 < 32 then
 554+ AD09              ;;TODO                                ax = sidev . xx15
 555+ AD09              ;;TODO                                    a = x xort current pitch direction
 556+ AD09              ;;TODO                                    shipts roll = nroll
 557+ AD09              ;;TODO                            do accelleration at TA6 (    https://www.bbcelite.com/disc/flight/subroutine/tactics_part_7_of_7.html#ta20
 558+ AD09
 559+ AD09              ;;TODO
 560+ AD09              ;;TODO
 561+ AD09              ;;TODO
 562+ AD09              ;;TODOget the targetted ship inbto bank
 563+ AD09              ;;TODO                        check range as per player
 564+ AD09              ;;TODO                        handle explosion enc
 565+ AD09
 566+ AD09              ;                    else see how close it is to target
 567+ AD09              ;                         if close to target
 568+ AD09              ;                            then explodes destroy missile
 569+ AD09              ;                                 if ship is not station
 570+ AD09              ;                                    then set up signal target ship hit my missile flag
 571+ AD09              ;                                         set blastcheckcounter to slotlist length  (12)
 572+ AD09              ;                                 end if
 573+ AD09              ;                                 if we are in range of missle blast
 574+ AD09              ;                                    cause blast damage to our ship (this will signal death is needed)
 575+ AD09              ;                                 end if
 576+ AD09              ;                                 return
 577+ AD09              ;                         end if
 578+ AD09              ;                 end if
 579+ AD09              ;         end if
 580+ AD09
 581+ AD09
 582+ AD09                          ;            else if ship is angry at us
 583+ AD09              ;
 584+ AD09
 585+ AD09              ; Part 1 - if type is missile and enquing a missile blast and slot free
 586+ AD09              ;             then enqueue missile blast details
 587+ AD09              ;                  mark as exploded
 588+ AD09              ;                  remove missile from universe slot list
 589+ AD09
 590+ AD09              ; TODO, how to we deal with scared ships, e.g. if angry and no guns or missiles then should be considered scared or if hull mass < say 25% of our ship
 591+ AD09              ; also for future ship vs ship combat
 592+ AD09              ;... Tactics........................................................................
 593+ AD09              ;.PART 1
 594+ AD09              ; if shiphitbymissleflag <> false
 595+ AD09              ;    then dec blast check counter
 596+ AD09              ;         if blast check counter = 0
 597+ AD09              ;            then set shiphitbymissileflag to FF
 598+ AD09              ;    else if SetShipHitByMissileFlag = current ship number
 599+ AD09              ;            then cause damage to ship
 600+ AD09              ;         else if ship is in range and ship is not a station
 601+ AD09              ;                  then cause blast damage to ship
 602+ AD09              ;         if destroyed
 603+ AD09              ;            then explode ship
 604+ AD09              ;                 return
 605+ AD09              ; end if
 606+ AD09              ; if ship is a missle (I think we allow missile on missle action)
 607+ AD09              ;    then if ecm is active
 608+ AD09              ;            then destroy missile and return
 609+ AD09              ;            else if ship is angry at us
 610+ AD09              ;                    then if ship is close to us
 611+ AD09              ;                            then explodes causing damage to our ship
 612+ AD09              ;                                 enque missile blast
 613+ AD09              ;                                 destroy missile
 614+ AD09              ;                                 set blastcheckcounter to slotlist length
 615+ AD09              ;                                 set shiphitbymissileflag to FE (general blast)
 616+ AD09              ;                                 return
 617+ AD09              ;                            else jump to part 3 to do updates
 618+ AD09              ;                         end if
 619+ AD09              ;                    else see how close it is to target
 620+ AD09              ;                         if close to target
 621+ AD09              ;                            then
 622+ AD09              ;                                 enque missile blast
 623+ AD09              ;                                 destroy missile
 624+ AD09              ;                                 if ship is not station
 625+ AD09              ;                                    then set up signal target ship hit my missile flag
 626+ AD09              ;                                         set blastcheckcounter to slotlist length  (12)
 627+ AD09              ;                                 end if
 628+ AD09              ;                                 if we are in range of missle blast
 629+ AD09              ;                                    cause blast damage to our ship (this will signal death is needed)
 630+ AD09              ;                                 end if
 631+ AD09              ;                                 return
 632+ AD09              ;                         end if
 633+ AD09              ;                 end if
 634+ AD09              ;         end if
 635+ AD09              ;.PART 2A ** adding in a collision logic
 636+ AD09              ;    else if ship is close to another ship
 637+ AD09              ;            then if docking flag set and other ship is space station or we are space station and other ship has docking flag
 638+ AD09              ;                    then if aligned correctly
 639+ AD09              ;                         then remove ship as docked
 640+ AD09              ;                              return
 641+ AD09              ;         else
 642+ AD09              ;            call collision route and determine daamage based on sizes and bounce vectors
 643+ AD09              ;            return
 644+ AD09              ;.PART 2 ** Need to check if ship has AI flag
 645+ AD09              ;    else if not hostile
 646+ AD09              ;            then if not docking or station not present
 647+ AD09              ;                    then calculate vector to planet
 648+ AD09              ;                         jump to part 7
 649+ AD09              ;                    else calculate verctor to docking slot
 650+ AD09              ;                         call caluclate vector to docking slot (DOCKIT)
 651+ AD09              ;                         jump to part 7
 652+ AD09              ;                 end if
 653+ AD09              ;            else case ship type
 654+ AD09              ;                      >>escape pod>> point at planet and jump to step 7
 655+ AD09              ;                      >>space station>> if hostile
 656+ AD09              ;                                           then if cop counter < 7 and 6.2% chance
 657+ AD09              ;                                                   then spawm hostile cop
 658+ AD09              ;                                                end if
 659+ AD09              ;                                           else
 660+ AD09              ;                                                if 0.8% change and transporter count = 0
 661+ AD09              ;                                                   then if 50% chance
 662+ AD09              ;                                                           then spawn transporter
 663+ AD09              ;                                                           else spawn shuttle
 664+ AD09              ;                                                        end if
 665+ AD09              ;                                                end if
 666+ AD09              ;                                        end if
 667+ AD09              ;                                        return
 668+ AD09              ;                      >>targoid and no mother ship in slot list>> set random drift
 669+ AD09              ;                                                                  return
 670+ AD09              ;                      >>if bounty hunter flag>> if ship not hostile
 671+ AD09              ;                                                   then if trader flag clear or 20% chance
 672+ AD09              ;                                                        then if fugitive or offender
 673+ AD09              ;                                                                then set hosile
 674+ AD09              ;                                                end if
 675+ AD09              ;                      >>Carrier and hanger slots > 0 >> if 22% chance (code to be added later)
 676+ AD09              ;                                         then spawn agressive hosting one of types carried
 677+ AD09              ;                                              reduce ships in hanger by 1
 678+ AD09              ;                                              return
 679+ AD09              ;                      >>rock hermit>> if 22% chance
 680+ AD09              ;                                         then spawn agressive hosting one of Sidewinder, Mamba, Krait, Adder or Gecko
 681+ AD09              ;                                              return
 682+ AD09              ;                      >>pirate and in safe zone>> stop pirate being hostile by removing agressive and hostileflags
 683+ AD09              ;                 end case
 684+ AD09              ;         end if
 685+ AD09              ;         recharge ship energy by recharge factor (TODO as a config item on ship type but by default 1)
 686+ AD09              ; .PART 3
 687+ AD09              ;         calulcate dot product of ship nose to us
 688+ AD09              ; .PART 4
 689+ AD09              ;         2.5% change ship rill roll a noticable amount
 690+ AD09              ;         if ship has > 50% energy jump to part 6
 691+ AD09              ;         if ship > 1/8th energy jump to part 5
 692+ AD09              ;         if random 10% chance (i.e. ship < 1/8 energy and bails out)
 693+ AD09              ;            then launch escape pod
 694+ AD09              ;                 set AI to null
 695+ AD09              ;                 set random pitch and roll
 696+ AD09              ;                 set accelleation to 0
 697+ AD09              ;         end if
 698+ AD09              ; .PART 5
 699+ AD09              ;         if ship does not have any missilesor ECM is firing to part 6
 700+ AD09              ;            then if random > threshold for ship type (TODO as a config item on ship type)
 701+ AD09              ;                    then if tharoid ; note this means thargoids are sensitve to ECM
 702+ AD09              ;                            then launch thargon
 703+ AD09              ;                            else spawn angry missle under ship
 704+ AD09              ;                         end if
 705+ AD09              ;                 end if
 706+ AD09              ;            else return
 707+ AD09              ;         end if
 708+ AD09              ; .PART 6
 709+ AD09              ;         if ship is not pointing at us from dot product ( < 160 , also > -32)
 710+ AD09              ;            then jump to part 7
 711+ AD09              ;            else if ship is pointing directly at us ( < 163 i.e. > -35)
 712+ AD09              ;                    then fire laser at us (which reduces energy)
 713+ AD09              ;                         cause laser damage to our ship (this will signal death is needed)
 714+ AD09              ;                         decellerate by half as ship has lock on
 715+ AD09              ;                         return
 716+ AD09              ;                    else fire laser into space (which reduces energy)
 717+ AD09              ;                 end if
 718+ AD09              ;         end if
 719+ AD09              ; .PART 7#
 720+ AD09              ;        if ship is a msile targetting us
 721+ AD09              ;           then ship turns towards us some more
 722+ AD09              ;           else if z hi > =  3 or ( x hi or y hi > 1) , i.e. ship is far away
 723+ AD09              ;                    then do random wiht bit 7 set
 724+ AD09              ;                         if random < AI flag
 725+ AD09              ;                            then   ship turned towards us
 726+ AD09              ;                            else   ship turns away from us
 727+ AD09              ;                         end if
 728+ AD09              ;                end if
 729+ AD09              ;           end if
 730+ AD09              ;           calculate new roll, pitch and accelleration based on new targe vector
 731+ AD09
 732+ AD09
 733+ AD09              ;        determine ship direction based on agression and type
 734+ AD09              ;        set pitch and roll coutners
 735+ AD09              ;        adjust speed depleding on relationship to us
 736+ AD09              ; .PART 8 - new
 737+ AD09              ;        if ship has ECM, another ECM is not active and missile targeted at it
 738+ AD09              ;           if ship has enery of ECM energey cost + 1/8th total
 739+ AD09              ;              if chance 25%
 740+ AD09              ;                 then fire ECM
 741+ AD09              ;
 742+ AD09
 743+ AD09
 744+ AD09
 745+ AD09
 746+ AD09 2A C1 A4     ReduceTacticVectors:ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 747+ AD0C ED 5B C5 A4                      ld      de, (TacticsVectorY)        ; .
 748+ AD10 ED 4B C9 A4                      ld      bc, (TacticsVectorZ)        ; .
 749+ AD14 3A C3 A4                         ld      a,(TacticsVectorX+2)        ; .
 750+ AD17 FD 67                            ld      iyh,a                       ; iyh = X sign
 751+ AD19 3A C7 A4                         ld      a,(TacticsVectorY+2)        ; .
 752+ AD1C FD 6F                            ld      iyl,a                       ; iyl = Y sign
 753+ AD1E 3A CB A4                         ld      a,(TacticsVectorZ+2)        ; .
 754+ AD21 DD 67                            ld      ixh,a                       ; ixh = z sign
 755+ AD23 FD B4        .ScaleLoop:         or      iyh                         ; now check if upper has value
 756+ AD25 FD B5                            or      iyl                         ; .
 757+ AD27                                  ClearSignBitA                       ;  exluding sign bit
 757+ AD27 E6 7F       >                        and     SignMask8Bit
 758+ AD29 28 21                            jr      z,.DoneScaling              ; and exit loop if upper byte is only sign component
 759+ AD2B FD 7C        .ScaledDownBy2:     ld      a,iyh
 760+ AD2D CB 2F                            sra     a
 761+ AD2F FD 67                            ld      iyh,a                       ; actually we can keep sign bit so just sr then rr
 762+ AD31 CB 1C                            rr      h                           ; Deal with X
 763+ AD33 CB 1D                            rr      l                           ;
 764+ AD35 FD 7D                            ld      a,iyl
 765+ AD37 CB 2F                            sra     a                           ; actually we can keep sign bit so just sr then rr
 766+ AD39 FD 6F                            ld      iyl,a
 767+ AD3B CB 1A                            rr      d                           ; Deal with Y
 768+ AD3D CB 1B                            rr      e                           ;
 769+ AD3F DD 7D                            ld      a, ixl                      ; actually we can keep sign bit so just sr then rr
 770+ AD41 CB 2F                            sra     a
 771+ AD43 DD 6F                            ld      ixl,a
 772+ AD45 CB 18                            rr      b                           ; Deal with Z
 773+ AD47 CB 19                            rr      c                           ;
 774+ AD49 C3 23 AD                         jp      .ScaleLoop
 775+ AD4C 7C           .DoneScaling:       ld      a,h
 776+ AD4D B2                               or      d
 777+ AD4E B0                               or      b
 778+ AD4F                                  SignBitOnlyA                        ; check if new sign bit has a value rotated in,
 778+ AD4F E6 80       >                        and     SignOnly8Bit
 779+ AD51 28 0C                            jr      z,.OKToNormalise
 780+ AD53              .ShiftTo15Bit:      ShiftHLRight1                       ; one last shift to 15 bit we don't need
 780+ AD53 CB 3C       >			   srl h
 780+ AD55 CB 1D       >			   rr  l
 781+ AD57                                  ShiftDERight1                       ; to do sign bytes
 781+ AD57 CB 3A       >			   srl d
 781+ AD59 CB 1B       >			   rr  e
 782+ AD5B                                  ShiftBCRight1                       ; as value must be 0
 782+ AD5B CB 38       >			   srl b
 782+ AD5D CB 19       >			   rr  c
 783+ AD5F 7C           .OKToNormalise:     ld      a,h                         ; iyh now can only hold sign
 784+ AD60 FD B4                            or      iyh                         ; so by the end of here
 785+ AD62 67                               ld      h,a                         ;   hl = x
 786+ AD63 7A                               ld      a,d                         ;   de = y
 787+ AD64 FD B5                            or      iyl                         ;   bc = z
 788+ AD66 57                               ld      d,a                         ; all scaled to 15 bit + sign
 789+ AD67 78                               ld      a,b                         ;
 790+ AD68 DD B4                            or      ixh                         ;
 791+ AD6A 47                               ld      b,a                         ;
 792+ AD6B 22 D1 A4                         ld      (TacticsNormX),hl
 793+ AD6E 22 D5 A4                         ld      (TacticsNormY),hl
 794+ AD71 22 D9 A4                         ld      (TacticsNormZ),hl
 795+ AD74 C9                               ret
 796+ AD75                                 ; ***SIgn bits*** need to be in byte 3
 797+ AD75
# file closed: ./GameEngine/Tactics.asm
 654  AD75                  INCLUDE "./Hardware/drive_access.asm"
# file opened: ./Hardware/drive_access.asm
   1+ AD75              M_GETSETDRV             equ $89
   2+ AD75              F_OPEN                  equ $9a
   3+ AD75              F_CLOSE                 equ $9b
   4+ AD75              F_READ                  equ $9d
   5+ AD75              F_WRITE                 equ $9e
   6+ AD75              F_SEEK                  equ $9f
   7+ AD75
   8+ AD75              FA_READ                 equ $01
   9+ AD75              FA_APPEND               equ $06
  10+ AD75              FA_OVERWRITE            equ $0C
  11+ AD75              DISK_FILEMAP            equ $85
  12+ AD75              DISK_STRMSTART          equ $86
  13+ AD75              DISK_STRMEND            equ $87
  14+ AD75
  15+ AD75              ESX_MODE_READ           equ $01
  16+ AD75              ESX_MODE_OPEN_EXIST     equ $00
  17+ AD75
  18+ AD75              FILEMAP_SIZE            equ $20
  19+ AD75              FILEMAP_BLOCK_SIZE      equ $06
  20+ AD75
  21+ AD75              ; Success 1 = default drive, carry reset
  22+ AD75              ; Failure HL = -1 , carry set, errno set
  23+ AD75 F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  23+ AD79 DD E5
  24+ AD7B AF                                   xor	    a	; a = 0 means get default drive into A
  25+ AD7C CF                                   rst	    $08
  26+ AD7D 89                                   db	    M_GETSETDRV
  27+ AD7E 32 13 AE                             ld	    (DefaultDrive),a
  28+ AD81 DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  28+ AD85 C1 F1
  29+ AD87 C9                                   ret
  30+ AD88
  31+ AD88
  32+ AD88              ; Disable NMI Multi face - needed for streaming
  33+ AD88              ;disable_multiface:      ld      bc,REGISTER_NUMBER_PORT
  34+ AD88              ;                        ld      a,PERIPHERAL_2_REGISTER
  35+ AD88              ;                        out     (c),a
  36+ AD88              ;                        inc     b
  37+ AD88              ;                        in      a,(c)
  38+ AD88              ;                        and     %11110111
  39+ AD88              ;                        out     (c),a
  40+ AD88              ;                        ret
  41+ AD88              ;
  42+ AD88              ;enable_multiface:       ld      bc,REGISTER_NUMBER_PORT
  43+ AD88              ;                        ld      a,PERIPHERAL_2_REGISTER
  44+ AD88              ;                        out     (c),a
  45+ AD88              ;                        inc     b
  46+ AD88              ;                        in      a,(c)
  47+ AD88              ;                        or      %00001000
  48+ AD88              ;                        out     (c),a
  49+ AD88              ;                        ret
  50+ AD88              ;
  51+ AD88              ; *******************************************************************************************************
  52+ AD88              ;	Function:	Open a file read for reading/writing
  53+ AD88              ;	In:		ix = filename
  54+ AD88              ;			b  = Open filemode
  55+ AD88              ;	ret		a  = handle, 0 on error
  56+ AD88              ;   fOpen_read_exists takes defaults and sets up default drive
  57+ AD88              ; *******************************************************************************************************
  58+ AD88              ;fOpen_read_exists:      ld      b,ESX_MODE_READ | ESX_MODE_OPEN_EXIST
  59+ AD88              ;                        call    GetDefaultDrive
  60+ AD88              ;                        call    fOpen
  61+ AD88              ;                        call    fRefill_map
  62+ AD88              ;                        jp      c,.RefilMapError
  63+ AD88              ;                        jp      z,.RefilMapEmpty
  64+ AD88              ;                        ret
  65+ AD88              ;.RefilMapError:         jp      .RefilMapError
  66+ AD88              ;.RefilMapEmpty:         jp      .RefilMapEmpty
  67+ AD88              ;
  68+ AD88              ;
  69+ AD88
  70+ AD88 3A 13 AE     fOpen:	                ld	    a,(DefaultDrive); default drive must be called before we start
  71+ AD8B CF                                   rst	    $08
  72+ AD8C 9A                                   db	    F_OPEN
  73+ AD8D 32 14 AE                             ld      (FileHandle),a  ; make a local copy of last file opened
  74+ AD90 38 01                                jr      c,.FileOpenError
  75+ AD92 C9                                   ret
  76+ AD93 C3 93 AD     .FileOpenError:         jp      .FileOpenError
  77+ AD96
  78+ AD96              ; *******************************************************************************************************
  79+ AD96              ;	Function	refills the buffer map with card addresses for the file
  80+ AD96              ;	In:		a  = file handle (if calling fRefill_mapA)
  81+ AD96              ;           ix = address of filemap_buffer (if calling fRefill_mapA)
  82+ AD96              ;           de = filemap size (which should equal 4 in our case)
  83+ AD96              ;			bc  = amount to read
  84+ AD96              ;	ret:		carry set = error
  85+ AD96              ;               zero set  = no data loaded so still error
  86+ AD96              ;   you can use fRefill_map to pull default valuess
  87+ AD96              ; *******************************************************************************************************
  88+ AD96              ;fRefill_map:            ld      a,(FileHandle)
  89+ AD96              ;                        ld      ix,FilemapBuffer
  90+ AD96              ;                        ld      de,FILEMAP_SIZE
  91+ AD96              ;fRefill_mapA:           rst     $08
  92+ AD96              ;                        db      DISK_FILEMAP
  93+ AD96              ;.SetFlags:              ld      (CardFlags),a                   ; set up adressing mode flags  bit 0=card id (0 or 1) bit 1=0 for byte addressing, 1 for block addressing
  94+ AD96              ;.CheckForEntries:       ld      (FilemapBufferLast),hl          ; save last entry address +2
  95+ AD96              ;                        ld      de,FilemapBuffer
  96+ AD96              ;                        sbc     hl,de                           ; hl = number of entries found
  97+ AD96              ;                        ld      a,$ff
  98+ AD96              ;                        ret
  99+ AD96              ;
 100+ AD96              ;read_stream_block:      ld      hl,(FilemapBufferPointer)
 101+ AD96              ;                        ldBCDEatHL                              ; load the disk address
 102+ AD96              ;                        push    bc                              ; into IXDE
 103+ AD96              ;                        pop     ix                              ; now IXDE = card address
 104+ AD96              ;                        ldBCatHL                                ; bc = number of blocks to be read
 105+ AD96              ;                        ld      (FilemapBlockCount),bc
 106+ AD96              ;                        ret
 107+ AD96              ; Start up stream of data
 108+ AD96              ; If successful, the call returns with:
 109+ AD96              ; B=protocol: 0=SD/MMC, 1=IDE,  C=data port
 110+ AD96              ; NOTE: On the Next, these values will always be: B=0 C=$EB
 111+ AD96              ;fStream_start:          ld      hl,FilemapBuffer                ; set to head of filemap
 112+ AD96              ;                        ld      (FilemapBufferPointer),hl       ; .
 113+ AD96              ;                        ZeroA
 114+ AD96              ;                        ld      (FilereadsPerformed),a
 115+ AD96              ;                        call    read_stream_block
 116+ AD96              ;                        ld      a,(CardFlags)                   ; get card flags back
 117+ AD96              ;                        rst     $08
 118+ AD96              ;                        DB      DISK_STRMSTART                  ; start up stream
 119+ AD96              ;                        ld      (FileStreamPort),bc             ; save port information (even through it will not change on a next)
 120+ AD96              ;                        ret
 121+ AD96
 122+ AD96              ; *******************************************************************************************************
 123+ AD96              ;	Function	stream in a block of data to memory
 124+ AD96              ;	In:		ix  = address to read into
 125+ AD96              ;			bc  = amount to read
 126+ AD96              ;	ret:		carry set = error
 127+ AD96              ; *******************************************************************************************************
 128+ AD96              ;fStream_block:          ld      ix,FileBuffer
 129+ AD96              ;                        ld      a,(CardFlags)
 130+ AD96              ;                        ld      bc,(FileStreamPort)
 131+ AD96              ;                        ld      hl,FileBuffer
 132+ AD96              ;                        ld      (FilemapBufferPointer),hl
 133+ AD96              ;.StreamLoop:            ld      b,0
 134+ AD96              ;                        ld      a,(TargetSize+1)
 135+ AD96              ;                        cp      2
 136+ AD96              ;                        jr      c,.stream_partial_block
 137+ AD96              ;.StreamFullBlock:       inir                                ; read 256 bytes to hl
 138+ AD96              ;                        inir                                ; read 256 bytes to hl+256
 139+ AD96              ;                        dec     b                           ; update byte count
 140+ AD96              ;                        dec     b                           ; .
 141+ AD96              ;                        ld      hl,TargetSize               ; 512 bytes read
 142+ AD96              ;                        ld      de,512
 143+ AD96              ;                        ClearCarryFlag
 144+ AD96              ;                        sbc     hl,de
 145+ AD96              ;                        ld      (TargetSize),hl
 146+ AD96              ;                        ld      a,(FileStreamPort+1)        ; get the protocol
 147+ AD96              ;                        and     a
 148+ AD96              ;                        jr      nz,.protocol_ide            ; we arn't using but for compatibility
 149+ AD96              ;.protocol_sdmmc:        in      a,(c)                       ; for sd and mmc, read in the 2 byte CRC
 150+ AD96              ;                        nop                                 ; as the max performance of the interface is
 151+ AD96              ;                        nop                                 ; 16T per byte, no ops pad out operation
 152+ AD96              ;                        in      a,(c)
 153+ AD96              ;                        nop
 154+ AD96              ;                        nop
 155+ AD96              ;.wait_for_next_block:   in      a,(c)                       ; if wait token is not FF then we are read
 156+ AD96              ;                        cp      $FF
 157+ AD96              ;                        jr      z,.wait_for_next_block
 158+ AD96              ;                        cp      $FE                         ; if not and its not FE its a fault
 159+ AD96              ;                        jr      nz,.token_error
 160+ AD96              ;.protocol_ide:          ld      de,(TargetSize)             ; Any more bytes required
 161+ AD96              ;                        ld      a,d
 162+ AD96              ;                        or      e
 163+ AD96              ;                        jr      z,.streaming_complete
 164+ AD96              ;                        ret
 165+ AD96              ;.stream_partial_block:  and     a                           ; is block at least 256 bytes?
 166+ AD96              ;                        jr      z,.under256_bytes
 167+ AD96              ;                        inir                                ; get 256 bytes
 168+ AD96              ;.under256_bytes:        ld      b,e
 169+ AD96              ;                        inc     b
 170+ AD96              ;                        dec     b
 171+ AD96              ;                        jr      z,.streaming_complete
 172+ AD96              ;                        inir
 173+ AD96              ;.streaming_complete:    ld      a,(CardFlags)
 174+ AD96              ;                        rst     $08
 175+ AD96              ;                        DB      DISK_STRMEND
 176+ AD96              ;                        ld      a,(FileHandle)
 177+ AD96              ;                        call    fClose
 178+ AD96              ;                        ret
 179+ AD96              ;.token_error:           jp      .token_error
 180+ AD96              ;
 181+ AD96              ;
 182+ AD96              ;fOpenReadFile:          ld      (TargetSize),bc
 183+ AD96              ;                        call    disable_multiface
 184+ AD96              ;                        call    fOpen_read_exists
 185+ AD96              ;.SetupStream:           call    fStream_start
 186+ AD96              ;                        jr      c,.FileStreamError
 187+ AD96              ;                        ret
 188+ AD96              ;
 189+ AD96              ;.FileStreamError:       jp      .FileStreamError
 190+ AD96              ;
 191+ AD96              ; *******************************************************************************************************
 192+ AD96              ;	Function	Read bytes from the open file
 193+ AD96              ;	In:		ix  = address to read into
 194+ AD96              ;			bc  = amount to read
 195+ AD96              ;	ret:		carry set = error
 196+ AD96              ; *******************************************************************************************************
 197+ AD96 B7           fRead:                  or   	a             ; is it zero?
 198+ AD97 C8                                   ret  	z             ; if so return
 199+ AD98 E5                                   push    hl
 200+ AD99 DD E5 E1                             ld      hl,ix    	 ; load ix into hl and save hl for later
 201+ AD9C CF                                   rst	    $08
 202+ AD9D 9D                                   db	    F_READ
 203+ AD9E E1                                   pop	    hl
 204+ AD9F C9                                   ret
 205+ ADA0
 206+ ADA0              ; *******************************************************************************************************
 207+ ADA0              ;	Function	Write bytes to the open file
 208+ ADA0              ;	In:		ix  = address to read from
 209+ ADA0              ;			bc  = amount to write
 210+ ADA0              ;	ret:		carry set = error
 211+ ADA0              ; *******************************************************************************************************
 212+ ADA0 B7           fWrite:                 or   	a             ; is it zero?
 213+ ADA1 C8                                   ret  	z             ; if so return
 214+ ADA2 E5                                   push	hl
 215+ ADA3 DD E5 E1                             ld      hl,ix
 216+ ADA6 CF                                   rst	    $08
 217+ ADA7 9E                                   db	    F_WRITE
 218+ ADA8 E1                                   pop	    hl
 219+ ADA9 C9                                   ret
 220+ ADAA
 221+ ADAA              ; *******************************************************************************************************
 222+ ADAA              ;	Function:	Close open file
 223+ ADAA              ;	In:		a  = handle
 224+ ADAA              ;	ret		a  = handle, 0 on error
 225+ ADAA              ; *******************************************************************************************************
 226+ ADAA B7           fClose:		            or   	a             ; is it zero?
 227+ ADAB C8                                   ret  	z             ; if so return
 228+ ADAC CF                                   rst	    $08
 229+ ADAD 9B                                   db	    F_CLOSE
 230+ ADAE C9                                   ret
 231+ ADAF
 232+ ADAF              ;fSeekHome:              push    bc,,de,,hl,,ix
 233+ ADAF              ;                        ld      bc,0
 234+ ADAF              ;                        ld      de,0
 235+ ADAF              ;                        ld      l,0
 236+ ADAF              ;                        call    fSeek
 237+ ADAF              ;                        pop     bc,,de,,hl,,ix
 238+ ADAF              ;                        ret
 239+ ADAF              ;
 240+ ADAF              ;fSeekForward256:        push    bc,,de,,hl,,ix
 241+ ADAF              ;                        ld      bc,0
 242+ ADAF              ;                        ld      de,256
 243+ ADAF              ;                        ld      l,1
 244+ ADAF              ;                        call    fSeek
 245+ ADAF              ;                        pop     bc,,de,,hl,,ix
 246+ ADAF              ;                        ret
 247+ ADAF
 248+ ADAF              ; *******************************************************************************************************
 249+ ADAF              ;	Function	Read bytes from the open file
 250+ ADAF              ;	In:		a   = file handle
 251+ ADAF              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
 252+ ADAF              ;			BCDE = bytes to seek
 253+ ADAF              ;	ret:		BCDE = file pos from start
 254+ ADAF              ; *******************************************************************************************************
 255+ ADAF DD E5 E5     fSeek:                  push	ix,,hl
 256+ ADB2 CF                                   rst	    $08
 257+ ADB3 9F                                   db	    F_SEEK
 258+ ADB4 E1 DD E1                             pop	    ix,,hl
 259+ ADB7 C9                                   ret
 260+ ADB8
 261+ ADB8              ; *******************************************************************************************************
 262+ ADB8              ; Init the file system
 263+ ADB8              ; *******************************************************************************************************
 264+ ADB8 CD 75 AD     InitFileSystem:         call    GetDefaultDrive
 265+ ADBB C9                                   ret
 266+ ADBC
 267+ ADBC              ; *******************************************************************************************************
 268+ ADBC              ; Function:	Load a whole file into memory	(confirmed working on real machine)
 269+ ADBC              ; In:		hl = file data pointer
 270+ ADBC              ;		    ix = address to load to
 271+ ADBC              ;           bc = filelength
 272+ ADBC              ; *******************************************************************************************************
 273+ ADBC CD 75 AD     FileLoad:	            call    GetDefaultDrive
 274+ ADBF C5 D5 F5                             push	bc,,de,,af
 275+ ADC2                                      ; get file size
 276+ ADC2 C5 DD E5                             push	bc,,ix			; store size, load address,
 277+ ADC5 E5 DD E1                             ld      ix,hl
 278+ ADC8 06 01                                ld      b,FA_READ		; mode open for reading
 279+ ADCA CD 88 AD                             call    fOpen
 280+ ADCD 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 281+ ADCF FE 00                                cp	    0				; was file handle 0?
 282+ ADD1 28 13                                jr	    z,.error_opening; of so there was an error opening.
 283+ ADD3 DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 284+ ADD6 F5                                   push	af				; remember handle
 285+ ADD7 CD 96 AD                             call	fRead			; read data from A to address IX of length BC
 286+ ADDA 38 0C                                jr	    c,.error_reading
 287+ ADDC F1                                   pop	    af			    ; get handle back
 288+ ADDD CD AA AD                             call	fClose			; close file
 289+ ADE0 38 07                                jr	    c,.error_closing
 290+ ADE2 F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 291+ ADE5 C9                                   ret
 292+ ADE6              ;
 293+ ADE6              ; On error, display error code an lock up so we can see it
 294+ ADE6              ;
 295+ ADE6 DD E1        .error_opening:         pop	ix
 296+ ADE8 C1           .error_reading:		    pop	bc	; don't pop a, need error code
 297+ ADE9
 298+ ADE9              .error_closing:
 299+ ADE9 C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 300+ ADEA D1                                   pop	de
 301+ ADEB C1                                   pop	bc
 302+ ADEC C9                                   ret
 303+ ADED
 304+ ADED              ; *******************************************************************************************************
 305+ ADED              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 306+ ADED              ; In:		hl = file name
 307+ ADED              ;		    ix = address to save from
 308+ ADED              ;		    bc = size
 309+ ADED              ; *******************************************************************************************************
 310+ ADED CD 75 AD     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 311+ ADF0 C5 DD E5                             push	bc,,ix   			; store size& save address
 312+ ADF3 E5 DD E1                             ld      ix,hl               ; get name into ix
 313+ ADF6 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 314+ ADF8 CD 88 AD                             call    fOpen
 315+ ADFB 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 316+ ADFD FE 00                                cp	    0			        ; was file handle 0?
 317+ ADFF 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 318+ AE01 DD E1 C1                             pop	    bc,,ix			    ; get lenght and save address back
 319+ AE04 F5                                   push	af			        ; remember handle
 320+ AE05 CD A0 AD                             call	fWrite			    ; read data from A to address IX of length BC
 321+ AE08 38 04                                jr	c,.error
 322+ AE0A F1                                   pop	af			            ; get handle back
 323+ AE0B CD AA AD                             call	fClose			    ; close file
 324+ AE0E C9           .error:                 ret
 325+ AE0F              ;
 326+ AE0F              ; On error, display error code an lock up so we can see it
 327+ AE0F              ;
 328+ AE0F DD E1 C1     .error_opening:         pop	bc,,ix                  ; don't pop a, need error code
 329+ AE12 C9                                   ret
 330+ AE13
 331+ AE13 00           DefaultDrive:	        DB	0
 332+ AE14 00           FileHandle:             DB  0
 333+ AE15 00           CardFlags               DB  0
 334+ AE16 00 00        TargetSize              DW  0
 335+ AE18 00 00        FileStreamPort          DW  0
 336+ AE1A 00 00 00...  FileBuffer              DS  512                     ; block of data
 337+ B01A 00           FilereadsPerformed      DB  0
 338+ B01B 00 00        FilemapBlockCount       DW  0
 339+ B01D 00 00        FilemapBufferPointer    DW  0
 340+ B01F 00 00        FilemapBufferLast       DW  0
 341+ B021 00 00 00...  FilemapBuffer           DS  FILEMAP_BLOCK_SIZE * FILEMAP_SIZE        ; expecting 60 to be overkill as most should be 1
 342+ B0E1
# file closed: ./Hardware/drive_access.asm
 655  B0E1
 656  B0E1                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ B0E1 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ B0E5 41 4E 44 45
   1+ B0E9 52 00
   2+ B0EB 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ B0EF 4E 54 4F 52
   2+ B0F3 59 00
   3+ B0F5 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ B0F9 65 6E 74 20
   3+ B0FD 53 79 73 74
   3+ B101 65 6D 20 20
   3+ B105 20 3A 00
   4+ B108 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ B10C 72 73 70 61
   4+ B110 63 65 20 53
   4+ B114 79 73 74 65
   4+ B118 6D 3A 00
   5+ B11B 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ B11F 69 74 69 6F
   5+ B123 6E 20 20 20
   5+ B127 3A 00
   6+ B129 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ B12D 20 20 20 20
   6+ B131 20 20 20 20
   6+ B135 3A 00
   7+ B137 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ B13B 20 20 20 20
   7+ B13F 20 20 20 20
   7+ B143 3A 00
   8+ B145 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ B149 6C 20 53 74
   8+ B14D 61 74 75 73
   8+ B151 3A 00
   9+ B153 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ B157 6E 67 20 20
   9+ B15B 20 20 20 20
   9+ B15F 3A 00
  10+ B161 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ B165 50 4D 45 4E
  10+ B169 54 3A 00
  11+ B16C
  12+ B16C 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ B170 20 4C 69 67
  12+ B174 68 74 20 59
  12+ B178 65 61 72 73
  12+ B17C 00
  13+ B17D 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ B181 58 58 58 58
  13+ B185 58 58 00
  14+ B188 2E           txt_cash_decimal        DB "."
  15+ B189 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ B18D 00
  16+ B18E
  17+ B18E              txt_status_colour		equ $FF
  18+ B18E
  19+ B18E              print_boiler_text_l2:
  20+ B18E              ; ">print_boilder_text hl = text structure, b = message count"
  21+ B18E              BoilerTextLoop:
  22+ B18E C5           	push		bc			; Save Message Count loop value
  23+ B18F 4E           	ld			c,(hl)		; Get Row into b
  24+ B190 23           	inc			hl
  25+ B191 46           	ld			b,(hl)		; Get Col into b
  26+ B192 23           	inc			hl
  27+ B193 5E           	ld			e,(hl)		; Get text address Lo into E
  28+ B194 23           	inc			hl
  29+ B195 56           	ld			d,(hl)		; Get text address Hi into E
  30+ B196 23           	inc			hl
  31+ B197 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  32+ B198 EB           	ex			de,hl		; now hl = address of text data
  33+ B199 1E FF        	ld			e,txt_status_colour
  34+ B19B                  MMUSelectLayer2
  34+ B19B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ B19F CD C8 E0     	call		l1_print_at
  36+ B1A2 E1           	pop			hl
  37+ B1A3 C1           	pop			bc
  38+ B1A4 10 E8        	djnz		BoilerTextLoop
  39+ B1A6 C9           	ret
  40+ B1A7
  41+ B1A7
  42+ B1A7              print_boiler_text:
  43+ B1A7              ; ">print_boilder_text hl = text structure, b = message count"
  44+ B1A7              .BoilerTextLoop:
  45+ B1A7 C5           	push		bc			; Save Message Count loop value
  46+ B1A8 4E           	ld			c,(hl)		; Get Row into b
  47+ B1A9 23           	inc			hl
  48+ B1AA 46           	ld			b,(hl)		; Get Col into b
  49+ B1AB 23           	inc			hl
  50+ B1AC 5E           	ld			e,(hl)		; Get text address Lo into E
  51+ B1AD 23           	inc			hl
  52+ B1AE 56           	ld			d,(hl)		; Get text address Hi into E
  53+ B1AF 23           	inc			hl
  54+ B1B0 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  55+ B1B1 EB           	ex			de,hl		; now hl = address of text data
  56+ B1B2 1E FF        	ld			e,txt_status_colour
  57+ B1B4 C5           	push		bc
  58+ B1B5 D1           	pop			de
  59+ B1B6 CD C8 E0     	call		l1_print_at
  60+ B1B9 E1           	pop			hl
  61+ B1BA C1           	pop			bc
  62+ B1BB 10 EA        	djnz		.BoilerTextLoop
  63+ B1BD C9           	ret
  64+ B1BE
  65+ B1BE              GetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++B1BE
   2++B1BE
   3++B1BE 3A 0A 89     	ld		a,(Fuel)
   4++B1C1 11 6C B1     	ld		de,txt_fuel_level
   5++B1C4 0E 9C        	ld	c, -100
   6++B1C6 CD D0 B1     	call	.Num1
   7++B1C9 0E F6        	ld	c,-10
   8++B1CB CD D0 B1     	call	.Num1
   9++B1CE 0E FF        	ld	c,-1
  10++B1D0              .Num1:
  11++B1D0 06 2F        	ld	b,'0'-1
  12++B1D2              .Num2:
  13++B1D2 04           	inc		b
  14++B1D3 81           	add		a,c
  15++B1D4 38 FC        	jr		c,.Num2
  16++B1D6 91           	sub 	c
  17++B1D7 C5           	push	bc
  18++B1D8 F5           	push	af
  19++B1D9 79           	ld		a,c
  20++B1DA FE FF        	cp		-1
  21++B1DC CC E5 B1     	call	z,.InsertDot
  22++B1DF 78           	ld		a,b
  23++B1E0 12           	ld		(de),a
  24++B1E1 13           	inc		de
  25++B1E2 F1           	pop		af
  26++B1E3 C1           	pop		bc
  27++B1E4 C9           	ret
  28++B1E5              .InsertDot:
  29++B1E5 3E 2E        	ld		a,'.'
  30++B1E7 12           	ld		(de),a
  31++B1E8 13           	inc		de
  32++B1E9 C9           	ret
  33++B1EA
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
  66+ B1EA
  67+ B1EA 2A 06 89     GetCash:                ld      hl,(Cash)
  68+ B1ED EB                                   ex      de,hl
  69+ B1EE DD 2A 08 89                          ld      ix,(Cash+2)
  70+ B1F2 FD 21 7D B1                          ld		iy,txt_cash_amount
  71+ B1F6 CD F2 9B                             call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ B1F9 FD 7E 00     .ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ B1FC 32 89 B1                             ld		(txt_cash_fraction),a
  74+ B1FF 21 7E B1     .UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ B202 7E                                   ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ B203 FE 00                                cp		0
  77+ B205 C8                                   ret		z
  78+ B206 FD 36 00 00                          ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ B20A C9                                   ret
  80+ B20B
# file closed: ./Menus/common_menu.asm
 657  B20B
 658  B20B              EndOfNonBanked:
 659  B20B                  DISPLAY "Non Banked Code Ends At", EndOfNonBanked
 660  B20B
 661  B20B              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
 662  B20B              ;INCLUDE "./title_page.asm"
 663  B20B
 664  B20B              ; Blocks dependent on variables in Universe Banks
 665  B20B              ; Bank 49
 666  B20B              ;    SEG RESETUNIVSEG
 667  B20B              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
 668  B20B              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
 669  B20B
 670  B20B
 671  B20B
 672  B20B              ;	ORG ResetUniverseAddr
 673  B20B              ;INCLUDE "./GameEngine/resetUniverse.asm"
 674  B20B              ; Bank 50  ------------------------------------------------------------------------------------------------------------------------
 675  B20B                  SLOT    MenuShrChtAddr
 676  B20B                  PAGE    BankMenuShrCht
 677  B20B              	ORG     MenuShrChtAddr,BankMenuShrCht
 678  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 D1 92  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2              .BoilerTextLoop:
   4++C0C2 C5           	push		bc			; Save Message Count loop value
   5++C0C3 4E           	ld			c,(hl)		; Get Row into b
   6++C0C4 23           	inc			hl
   7++C0C5 46           	ld			b,(hl)		; Get Col into b
   8++C0C6 23           	inc			hl
   9++C0C7 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C0C8 23           	inc			hl
  11++C0C9 56           	ld			d,(hl)		; Get text address Hi into E
  12++C0CA 23           	inc			hl
  13++C0CB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C0CC EB           	ex			de,hl		; now hl = address of text data
  15++C0CD 1E FF        	ld			e,txt_status_colour
  16++C0CF C5           	push		bc
  17++C0D0 D1           	pop			de
  18++C0D1                  MMUSelectLayer1
  18++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0D5 CD C8 E0     	call		l1_print_at
  20++C0D8 E1           	pop			hl
  21++C0D9 C1           	pop			bc
  22++C0DA 10 E6        	djnz		.BoilerTextLoop
  23++C0DC C9           	ret
  24++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B A7 84                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD F5 E0                             call	sprite_local_cursor
  39+ C0EB 3A 0A 89                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD A7 E7                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B A9 84                          ld		bc,(TargetSystemX)              ; bc = selected jump
  49+ C0FD ED 5B A7 84                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD FD E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A 94 84     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,     a
  58+ C113 ED 4B A9 84                          ld      bc,(TargetSystemX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 64 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 82 F6                             call	GetDigramWorkingSeed
  64+ C124 21 9D 93                             ld		hl,name_expanded
  65+ C127 CD F2 92                             call	CapitaliseString
  66+ C12A 21 9D 93                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B A9 84                          ld		bc,(TargetSystemX)              ; bc = selected jump
  72+ C134 ED 5B A7 84                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c                             ; a = target x pos
  74+ C139 93                                   sub		e                               ; a = target x - present x
  75+ C13A F2 4B C1                             jp      p,.NoFlipX                      ; if > 0 skip next bit
  76+ C13D ED 44                                neg                                     ; c = a = abs a * 4
  77+ C13F CB 27                                sla		a                               ; .
  78+ C141 CB 27                                sla		a                               ; .
  79+ C143 4F                                   ld      c,a                             ;  .
  80+ C144 3E 80                                ld      a,src_x_centre                  ; c = a = centre screen - c
  81+ C146 91                                   sub     c                               ; .
  82+ C147 4F                                   ld      c,a                             ; .
  83+ C148 C3 52 C1                             jp      .fixY                           ;. now do Y
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b                             ; for Y its * 2
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD D0 E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD B3 E2                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A 94 84     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 124+ C193 ED 4B A9 84                          ld      bc,(TargetSystemX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 64 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD 22 E2                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD 22 E2                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A 94 84     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B A7 84                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B A9 84                          ld      bc,(TargetSystemX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD F7 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A 30 84                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD F2 9B                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD A6 9A                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD A6 9A                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD A6 9A                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c, .NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c, .NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD C7 89     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A 94 84                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 256+ C2BC CD 82 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 9D 93                             ld		hl,name_expanded
 258+ C2C2 CD F2 92                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 9D 93                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 9D 93                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD 22 E2                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 62 83                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD C7 89     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A 94 84     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 330+ C343 CD 82 F6                             call	GetDigramWorkingSeed
 331+ C346 21 9D 93     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD F2 92                             call	CapitaliseString
 333+ C34C 21 9D 93     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD 22 E2                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 A1 83                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD 2E 7F                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A 94 84                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,     a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 88 83                             ld      de,SystemSeed
 359+ C388 CD 9A 89                             call    copy_seed
 360+ C38B 3A 89 83                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A A8 84     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A 8B 83     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A A7 84                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A 89 83     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 A8 84                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A 8B 83                             ld		a,(SystemSeed+3)
 390+ C3C5 21 A7 84                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A 8D 83                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD EB E9                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A A1 83                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 A1 83                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  InitNoDoubleBuffer
 417+ C3FC             >                            MMUSelectLayer1
 417+ C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 417+ C400 CD 80 E0    >                            call	l1_cls
 417+ C403 3E 07       >                            ld		a,7
 417+ C405 CD 9B E0    >                            call	l1_attr_cls_to_a
 417+ C408             >                            MMUSelectLayer2
 417+ C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 417+ C40C CD 09 E0    >                            call    asm_l2_double_buffer_off
 417+ C40F CD FF E0    >                            call	l2_cls	; Get some space
 417+ C412             >                            MMUSelectSpriteBank
 417+ C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 417+ C416 CD 6E E5    >                            call    sprite_cls_cursors
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 A9 83                             ld      (MenuIdMax),a
 420+ C41E                                      CopyPresentSystemToTarget               ; for short range we always start at present and cusor on present
 420+ C41E 2A A7 84    >                        ld      hl,(PresentSystemX)
 420+ C421 22 A9 84    >                        ld      (TargetSystemX),hl
 421+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 422+ C427 11 FD BE                             ld		de,$BEFD
 423+ C42A 3E C0                                ld		a,$C0
 424+ C42C                                      MMUSelectLayer2
 424+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 425+ C430 CD 49 E2                             call	l2_draw_box
 426+ C433 01 01 0A                             ld		bc,$0A01
 427+ C436 11 C0 FE                             ld		de,$FEC0
 428+ C439                                      MMUSelectLayer2
 428+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 429+ C43D CD B3 E2                             call	l2_draw_horz_line
 430+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 431+ C442 CD 18 93                             call	expandTokenToString
 432+ C445 06 01                                ld		b,1
 433+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 434+ C44A CD C2 C0                             call	SRM_print_boiler_text
 435+ C44D CD 94 89     SRCSetUpChart:          call	copy_galaxy_to_system
 436+ C450 CD 65 C3                             call	plot_local_stars
 437+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 438+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 439+ C459 C9                                   ret
 440+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 441+ C45A 3A 8B 84     local_chart_cursors:    ld     a,(CursorKeysPressed)
 442+ C45D                                      ReturnIfAIsZero
 442+ C45D A7          >                        and     a
 442+ C45E C8          >                        ret     z
 443+ C45F 17                                   rla
 444+ C460 DC 78 C4                             call   c,src_UpPressed
 445+ C463 17                                   rla
 446+ C464 DC 95 C4                             call   c,src_DownPressed
 447+ C467 17                                   rla
 448+ C468 DC B4 C4                             call   c,src_LeftPressed
 449+ C46B 17                                   rla
 450+ C46C DC D1 C4                             call   c,src_RightPressed
 451+ C46F 17                                   rla
 452+ C470 DC F0 C4                             call   c,src_HomePressed
 453+ C473 17                                   rla
 454+ C474 DC FA C4                             call   c,src_RecenterPressed
 455+ C477 C9                                   ret
 456+ C478              ;----------------------------------------------------------------------------------------------------------------------------------
 457+ C478 3A AA 84     src_UpPressed:          ld     a,(TargetSystemY)
 458+ C47B                                      JumpIfAIsZero   src_BoundsLimit
 458+ C47B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 458+ C47C CA 0F C5    >                        jp	    z, src_BoundsLimit
 459+ C47F 47                                   ld      b,a                         ; save target as we will need it
 460+ C480 3A A8 84                             ld      a,(PresentSystemY)
 461+ C483 90                                   sub     b                           ; get the difference between present and target
 462+ C484 FA 8C C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 463+ C487                                      JumpIfAGTENusng 40,src_BoundsLimit  ; if no more than 20 then OK
 463+ C487 FE 28       >                        cp     40
 463+ C489 D2 0F C5    >                        jp		nc,src_BoundsLimit
 464+ C48C 78           .SkipBoundsTest:        ld      a,b
 465+ C48D 3D                                   dec     a
 466+ C48E 32 AA 84                             ld      (TargetSystemY),a
 467+ C491 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 468+ C494 C9                                   ret
 469+ C495              ;----------------------------------------------------------------------------------------------------------------------------------
 470+ C495 3A A8 84     src_DownPressed:        ld     a,(PresentSystemY)
 471+ C498 47                                   ld      b,a
 472+ C499 3A AA 84                             ld      a,(TargetSystemY)
 473+ C49C 4F                                   ld      c,a
 474+ C49D                                      JumpIfAEqNusng 128,src_BoundsLimit
 474+ C49D FE 80       >                        cp     128
 474+ C49F CA 0F C5    >                        jp      z,src_BoundsLimit
 475+ C4A2 90                                   sub     b
 476+ C4A3 FA AB C4                             jp      m,.SkipBoundsTest
 477+ C4A6                                      JumpIfAGTENusng 40,src_BoundsLimit
 477+ C4A6 FE 28       >                        cp     40
 477+ C4A8 D2 0F C5    >                        jp		nc,src_BoundsLimit
 478+ C4AB 79           .SkipBoundsTest:        ld      a,c
 479+ C4AC 3C                                   inc    a
 480+ C4AD 32 AA 84                             ld      (TargetSystemY),a
 481+ C4B0 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 482+ C4B3 C9                                   ret
 483+ C4B4              ;----------------------------------------------------------------------------------------------------------------------------------
 484+ C4B4 3A A9 84     src_LeftPressed:        ld      a,(TargetSystemX)           ; we can't move left if target is zero
 485+ C4B7                                      JumpIfAIsZero   src_BoundsLimit
 485+ C4B7 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 485+ C4B8 CA 0F C5    >                        jp	    z, src_BoundsLimit
 486+ C4BB 47                                   ld      b,a                         ; save target as we will need it
 487+ C4BC 3A A7 84                             ld      a,(PresentSystemX)
 488+ C4BF 90                                   sub     b                           ; get the difference between present and target
 489+ C4C0 FA C8 C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 490+ C4C3                                      JumpIfAGTENusng 20,src_BoundsLimit  ; if no more than 20 then OK
 490+ C4C3 FE 14       >                        cp     20
 490+ C4C5 D2 0F C5    >                        jp		nc,src_BoundsLimit
 491+ C4C8 78           .SkipBoundsTest:        ld      a,b
 492+ C4C9 3D                                   dec     a
 493+ C4CA 32 A9 84                             ld      (TargetSystemX),a
 494+ C4CD CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 495+ C4D0 C9                                   ret
 496+ C4D1              ;----------------------------------------------------------------------------------------------------------------------------------
 497+ C4D1 3A A7 84     src_RightPressed:       ld      a,(PresentSystemX)
 498+ C4D4 47                                   ld      b,a
 499+ C4D5 3A A9 84                             ld      a,(TargetSystemX)
 500+ C4D8 4F                                   ld      c,a
 501+ C4D9                                      JumpIfAEqNusng 255,src_BoundsLimit
 501+ C4D9 FE FF       >                        cp     255
 501+ C4DB CA 0F C5    >                        jp      z,src_BoundsLimit
 502+ C4DE 90                                   sub     b
 503+ C4DF FA E7 C4                             jp      m,.SkipBoundsTest
 504+ C4E2                                      JumpIfAGTENusng 20,src_BoundsLimit
 504+ C4E2 FE 14       >                        cp     20
 504+ C4E4 D2 0F C5    >                        jp		nc,src_BoundsLimit
 505+ C4E7 79           .SkipBoundsTest:        ld      a,c
 506+ C4E8 3C                                   inc    a
 507+ C4E9 32 A9 84                             ld      (TargetSystemX),a
 508+ C4EC CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 509+ C4EF C9                                   ret
 510+ C4F0              ;----------------------------------------------------------------------------------------------------------------------------------
 511+ C4F0 2A A7 84     src_HomePressed:        ld      hl,(PresentSystemX)
 512+ C4F3 22 A9 84                             ld      (TargetSystemX),hl
 513+ C4F6 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 514+ C4F9 C9                                   ret
 515+ C4FA              ;----------------------------------------------------------------------------------------------------------------------------------
 516+ C4FA 3A 94 84     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 517+ C4FD                                      MMUSelectGalaxyA
 517+ C4FD ED 92 57    >                     nextreg GalaxyDataMMU,     a
 518+ C500 ED 4B A9 84                          ld      bc,(TargetSystemX)
 519+ C504 CD 70 FB                             call    find_nearest_to_bc
 520+ C507 ED 43 A9 84                          ld      (TargetSystemX),bc
 521+ C50B CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 522+ C50E C9                                   ret
 523+ C50F              ;----------------------------------------------------------------------------------------------------------------------------------
 524+ C50F AF           src_BoundsLimit:        xor     a
 525+ C510 C9                                   ret
 526+ C511
# file closed: ./Menus/short_range_chart_menu.asm
 679  C511                  DISPLAY "Bank ",BankMenuShrCht," - Bytes free ",/D, $2000 - ($-MenuShrChtAddr), " - BankMenuShrCht"
 680  C511              ; Bank 51  ------------------------------------------------------------------------------------------------------------------------
 681  C511                  SLOT    MenuGalChtAddr
 682  C511                  PAGE    BankMenuGalCht
 683  C511              	ORG     MenuGalChtAddr
 684  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 D1 92  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014              galactic_chart_hyper_offset equ 4
   9+ C014              galactic_chart_hyper_x_offset equ 32 - 4
  10+ C014              galactic_chart_hyper_y_offset equ 32 - 4 + 24
  11+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
  11+ C018 61 6E 63 65
  11+ C01C 3A 20
  12+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  13+ C021 2E           galactic_chart_decimal      DB "."
  14+ C022 30           galactic_chart_fraction     DB "0"
  15+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  15+ C027 68 74 20 59
  15+ C02B 65 61 72 73
  15+ C02F 00
  16+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  16+ C034 30 00
  17+ C036
  18+ C036 00 00 00...  galactic_distance           DS  6
  19+ C03C
  20+ C03C              galactic_find_position      equ $B008
  21+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  21+ C040 3A 20 00
  22+ C043              galactic_find_text          equ $B038
  23+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  23+ C047 20 20 20 20
  23+ C04B 20 20 20 20
  23+ C04F 20 20 20 20
  23+ C053 20 20 20 20
  23+ C057 00
  24+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  24+ C05C 20 53 79 73
  24+ C060 74 65 6D 20
  24+ C064 4E 6F 74 20
  24+ C068 46 6F 75 6E
  24+ C06C 64 20 2D 2D
  24+ C070 2A 2A 00
  25+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  25+ C077 2D 2D 20 53
  25+ C07B 79 73 74 65
  25+ C07F 6D 20 46 6F
  25+ C083 75 6E 64 20
  25+ C087 2D 2D 2A 2A
  25+ C08B 20 20 00
  26+ C08E
  27+ C08E              GCM_print_boiler_text:
  28+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E              .BoilerTextLoop:
   4++C08E C5           	push		bc			; Save Message Count loop value
   5++C08F 4E           	ld			c,(hl)		; Get Row into b
   6++C090 23           	inc			hl
   7++C091 46           	ld			b,(hl)		; Get Col into b
   8++C092 23           	inc			hl
   9++C093 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C094 23           	inc			hl
  11++C095 56           	ld			d,(hl)		; Get text address Hi into E
  12++C096 23           	inc			hl
  13++C097 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C098 EB           	ex			de,hl		; now hl = address of text data
  15++C099 1E FF        	ld			e,txt_status_colour
  16++C09B C5           	push		bc
  17++C09C D1           	pop			de
  18++C09D                  MMUSelectLayer1
  18++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0A1 CD C8 E0     	call		l1_print_at
  20++C0A4 E1           	pop			hl
  21++C0A5 C1           	pop			bc
  22++C0A6 10 E6        	djnz		.BoilerTextLoop
  23++C0A8 C9           	ret
  24++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  29+ C0A9              GCM_draw_chart_circle_and_crosshair:
  30+ C0A9 ED 4B A7 84  	ld		bc,(PresentSystemX)				; bc = present system
  31+ C0AD              .OnGalacticChart:
  32+ C0AD CB 38        	srl		b								; but row is row / 2
  33+ C0AF C5           	push  	bc
  34+ C0B0              	MMUSelectSpriteBank
  34+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  35+ C0B4 CD 91 E0     	call	sprite_galactic_cursor
  36+ C0B7 C1           	pop		bc
  37+ C0B8 78           	ld		a,b
  38+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  39+ C0BB 47           	ld		b,a
  40+ C0BC 3A 0A 89     	ld		a,(Fuel)
  41+ C0BF CB 3F        	srl		a
  42+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  43+ C0C3 57           	ld		d,a
  44+ C0C4 1E FF        	ld		e,$FF
  45+ C0C6              	MMUSelectLayer2
  45+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  46+ C0CA CD A7 E7     	call	l2_draw_circle
  47+ C0CD C9           	ret
  48+ C0CE              ; TODO MOVE CURSOR CODE
  49+ C0CE
  50+ C0CE ED 4B A9 84  GCM_draw_hyperspace_cross_hair: ld		bc,(TargetSystemX)              ; bc = selected jump
  51+ C0D2 C5                                           push    bc
  52+ C0D3 CB 38                                        srl		b								; but row is row / 2
  53+ C0D5                                              MMUSelectSpriteBank
  53+ C0D5 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C0D9 CD 9D E0                                     call	sprite_galactic_hyper_cursor
  55+ C0DC C1                                           pop     bc
  56+ C0DD CD A9 E0                                     call	sprite_ghc_move
  57+ C0E0 C9                                           ret
  58+ C0E1
  59+ C0E1
  60+ C0E1 AF           plot_gc_stars:          xor		a
  61+ C0E2 32 A1 83                             ld		(XSAV),a
  62+ C0E5 DD 21 16 E0                          ld      ix,galaxy_data
  63+ C0E9 3A 94 84     .CounterLoop:           ld      a,(Galaxy)
  64+ C0EC                                      MMUSelectGalaxyA
  64+ C0EC ED 92 57    >                     nextreg GalaxyDataMMU,     a
  65+ C0EF DD E5                                push    ix
  66+ C0F1 E1                                   pop     hl
  67+ C0F2 11 88 83                             ld      de,SystemSeed
  68+ C0F5 CD 9A 89                             call    copy_seed
  69+ C0F8 3A 8B 83                             ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  70+ C0FB 4F                                   ld		c,a								; c = X Coord
  71+ C0FC 3A 89 83                             ld		a,(SystemSeed+1)
  72+ C0FF CB 3F                                srl		a								; Ycoord /2
  73+ C101 C6 18                                add		a,galactic_chart_y_offset		; add offset to Y coord of star
  74+ C103 47                                   ld		b,a								; b = row
  75+ C104 C5                                   push	bc
  76+ C105 3E D8                                ld		a,galactic_star_colour
  77+ C107                                      MMUSelectLayer2
  77+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  78+ C10B CD 35 E1                             call	l2_plot_pixel
  79+ C10E C1                                   pop		bc
  80+ C10F 3A 8C 83                             ld		a,(SystemSeed+4)
  81+ C112 F6 50                                or		$50								; minimum distance away
  82+ C114 FE 90                                cp		$90
  83+ C116 30 0A                                jr		nc,.NoSecondPixel
  84+ C118 0C           .SecondPixel:           inc		c
  85+ C119 3E 6C                                ld		a,galactic_star_colour2
  86+ C11B                                      MMUSelectLayer2
  86+ C11B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  87+ C11F CD 35 E1                             call	l2_plot_pixel
  88+ C122 DD E5        .NoSecondPixel:         push    ix
  89+ C124 E1                                   pop     hl
  90+ C125 ED 34 08 00                          add     hl,8
  91+ C129 E5                                   push    hl
  92+ C12A DD E1                                pop     ix
  93+ C12C 3A A1 83                             ld		a,(XSAV)
  94+ C12F 3D                                   dec		a
  95+ C130 FE 00                                cp		0
  96+ C132 C8                                   ret		z
  97+ C133 32 A1 83                             ld		(XSAV),a
  98+ C136 18 B1                                jr		.CounterLoop
  99+ C138
 100+ C138 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C13C 2A 2A 2A 2A
 100+ C140 2B 2B 2B 2B
 100+ C144 2B 2B 2B 2B
 101+ C148              draw_galactic_chart_menu:   InitNoDoubleBuffer
 101+ C148             >                            MMUSelectLayer1
 101+ C148 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 101+ C14C CD 80 E0    >                            call	l1_cls
 101+ C14F 3E 07       >                            ld		a,7
 101+ C151 CD 9B E0    >                            call	l1_attr_cls_to_a
 101+ C154             >                            MMUSelectLayer2
 101+ C154 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 101+ C158 CD 09 E0    >                            call    asm_l2_double_buffer_off
 101+ C15B CD FF E0    >                            call	l2_cls	; Get some space
 101+ C15E             >                            MMUSelectSpriteBank
 101+ C15E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 101+ C162 CD 6E E5    >                            call    sprite_cls_cursors
 102+ C165 DD 2E DC                                 ld      ixl,$DC
 103+ C168 3E 40                                    ld      a,$40
 104+ C16A 32 A9 83                                 ld      (MenuIdMax),a
 105+ C16D 2A A7 84                                 ld      hl,(PresentSystemX)
 106+ C170              ;                            ld      (TargetSystemX),hl
 107+ C170 CD 4B C4                                 call    gc_present_system               ; Set up the seed for present system
 108+ C173 01 01 01     .Drawbox:                   ld		bc,$0101
 109+ C176 11 FD BE                                 ld		de,$BEFD
 110+ C179 3E C0                                    ld		a,$C0
 111+ C17B                                          MMUSelectLayer2
 111+ C17B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 112+ C17F CD 49 E2                                 call	l2_draw_box
 113+ C182 01 01 0A                                 ld		bc,$0A01
 114+ C185 11 C0 FE                                 ld		de,$FEC0
 115+ C188 CD B3 E2                                 call	l2_draw_horz_line
 116+ C18B 3E 0D        .StaticText:                ld		a,galactic_chart_header
 117+ C18D CD 18 93                                 call	expandTokenToString
 118+ C190 06 01                                    ld		b,1
 119+ C192 21 10 C0                                 ld		hl,galactic_chart_boiler_text
 120+ C195 CD 8E C0                                 call	GCM_print_boiler_text
 121+ C198 CD A9 C0     .CircleandCrosshair:        call	GCM_draw_chart_circle_and_crosshair
 122+ C19B CD CE C0                                 call	GCM_draw_hyperspace_cross_hair
 123+ C19E CD E1 C0                                 call	plot_gc_stars
 124+ C1A1 3A 94 84                                 ld      a,(Galaxy)
 125+ C1A4                                          MMUSelectGalaxyA
 125+ C1A4 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 126+ C1A7 ED 4B A9 84                              ld      bc,(TargetSystemX)
 127+ C1AB CD 64 FC                                 call    galaxy_system_under_cursor          ; TODO for some reason this bit
 128+ C1AE FE 00                                    cp      0                                   ; does not reset cursor on a miss
 129+ C1B0 20 11                                    jr      nz,.CurrentTargetIsValid
 130+ C1B2              .CurrentTargetIsInvalid:    CopyPresentSystemToTarget
 130+ C1B2 2A A7 84    >                        ld      hl,(PresentSystemX)
 130+ C1B5 22 A9 84    >                        ld      (TargetSystemX),hl
 131+ C1B8 ED 4B A9 84                              ld      bc,(TargetSystemX)
 132+ C1BC                                          MMUSelectSpriteBank
 132+ C1BC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 133+ C1C0 CD A9 E0                                 call	sprite_ghc_move
 134+ C1C3 3A 94 84     .CurrentTargetIsValid:      ld      a,(Galaxy)
 135+ C1C6                                          MMUSelectGalaxyA
 135+ C1C6 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 136+ C1C9 ED 43 5B E8                              ld      (GalaxyTargetSystem),bc
 137+ C1CD CD 64 FC                                 call    galaxy_system_under_cursor
 138+ C1D0 CD A3 C3                                 call    gc_name_if_possible
 139+ C1D3                                          SetMemFalse TextInputMode
 139+ C1D3 3E FF       >                        ld      a,$FF
 139+ C1D5 32 8A 84    >                        ld      (TextInputMode),a
 140+ C1D8 C9                                       ret
 141+ C1D9
 142+ C1D9              gcDelayVal                  equ $0A
 143+ C1D9              gcBlinkVal                  equ $10
 144+ C1D9
 145+ C1D9
 146+ C1D9 10           gcCursorBlink               DB  gcBlinkVal
 147+ C1DA 20           gcCursorChar                DB  " "
 148+ C1DB 00           gcEndOfString               DB  0
 149+ C1DC 00 00 00...  gcInputText                 DS  31
 150+ C1FB 00 00 00 00                              DB  0,0,0,0,0
 150+ C1FF 00
 151+ C200 00 00 00...  gcBlank                     DS  32
 152+ C220
 153+ C220              ;----------------------------------------------------------------------------------------------------------------------------------
 154+ C220 11 08 B0     gc_display_find_text:   ld		de,galactic_find_position   ; Wipe input area on screen
 155+ C223 21 3C C0                             ld      hl,galactic_find_message
 156+ C226                                      MMUSelectLayer1
 156+ C226 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 157+ C22A CD C8 E0                             call	l1_print_at
 158+ C22D C9                                   ret
 159+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 160+ C22E 11 DC C1     gc_display_find_string: ld      de,gcInputText
 161+ C231 CD 2C 81                             call    keyboard_copy_input_to_de
 162+ C234 21 DA C1                             ld      hl,gcCursorChar         ; Now just copy cursor char too
 163+ C237 ED A0                                ldi                             ; Copy cursor to local
 164+ C239 3A 29 81                             ld      a,(InputCursor)
 165+ C23C 3C                                   inc     a
 166+ C23D 47                                   ld      b,a
 167+ C23E 3E 14                                ld      a,20
 168+ C240 90                                   sub     b
 169+ C241 47                                   ld      b,a
 170+ C242 3E 20                                ld      a," "
 171+ C244 12           .SpacePad:              ld      (de),a
 172+ C245 13                                   inc     de
 173+ C246 10 FC                                djnz    .SpacePad
 174+ C248 AF                                   xor     a
 175+ C249 12                                   ld      (de),a
 176+ C24A 11 38 B0                             ld		de,galactic_find_text    ; Display text
 177+ C24D 21 DC C1                             ld      hl,gcInputText
 178+ C250                                      MMUSelectLayer1
 178+ C250 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 179+ C254 CD C8 E0                             call	l1_print_at
 180+ C257 C9                                   ret
 181+ C258
 182+ C258 3A D9 C1     blink_cursor:           ld      a,(gcCursorBlink)
 183+ C25B 3D                                   dec     a
 184+ C25C 32 D9 C1                             ld      (gcCursorBlink),a
 185+ C25F C0                                   ret     nz
 186+ C260 3E 10        .FlashCursor:           ld      a,gcBlinkVal
 187+ C262 32 D9 C1                             ld      (gcCursorBlink),a
 188+ C265 3A DA C1                             ld      a,(gcCursorChar)
 189+ C268 FE 20                                cp      " "
 190+ C26A 28 06                                jr      z,.ChangeToStar
 191+ C26C 3E 20                                ld      a," "
 192+ C26E 32 DA C1                             ld      (gcCursorChar),a
 193+ C271 C9                                   ret
 194+ C272 3E 2A        .ChangeToStar:          ld      a,"*"
 195+ C274 32 DA C1                             ld      (gcCursorChar),a
 196+ C277 C9                                   ret
 197+ C278              ;----------------------------------------------------------------------------------------------------------------------------------
 198+ C278              ; The main loop handles the find key
 199+ C278              loop_gc_menu:           JumpIfMemTrue TextInputMode,AlreadyInInputMode  ;if we are in input mode then go directly there
 199+ C278 3A 8A 84    >                        ld      a,(TextInputMode)
 199+ C27B A7          >                        and     a
 199+ C27C CA 95 C2    >                        jp      z, AlreadyInInputMode
 200+ C27F 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 201+ C281 CD 93 80                             call    is_key_pressed
 202+ C284 C0                                   ret     nz                                      ;the main loop handles find key
 203+ C285 CD 3F 81                             call    initInputText                           ;Initialise find input
 204+ C288                                      SetMemTrue TextInputMode                        ;Set input mode to true
 204+ C288 AF          >                        xor     a
 204+ C289 32 8A 84    >                        ld      (TextInputMode),a
 205+ C28C                                      SetMemToN gcCursorBlink, gcBlinkVal             ; set up blink
 205+ C28C 3E 10       >                        ld      a,gcBlinkVal
 205+ C28E 32 D9 C1    >                        ld      (gcCursorBlink),a
 206+ C291 CD 20 C2     .DisplayInputbar:       call    gc_display_find_text                    ; now prep the boiler plate input text
 207+ C294 C9                                   ret                                             ; and exit so next interation handles new input as we have to rescan keyboard
 208+ C295              ;Already in input mode post pressing find
 209+ C295 CD 57 81     AlreadyInInputMode:     call    InputName                               ; Call input routine to parse a key
 210+ C298                                      JumpIfMemFalse InputChanged, .blinkNoDelay      ; no key they bypass rest of input
 210+ C298 3A 2B 81    >                        ld      a,(InputChanged)
 210+ C29B A7          >                        and     a
 210+ C29C C2 A9 C2    >                        jp      nz, .blinkNoDelay
 211+ C29F              .WasItEnter:            JumpIfMemTrue EnterPressed, .FindEnterPressed   ; if enter was pressed then find
 211+ C29F 3A 2A 81    >                        ld      a,(EnterPressed)
 211+ C2A2 A7          >                        and     a
 211+ C2A3 CA B5 C2    >                        jp      z, .FindEnterPressed
 212+ C2A6 CD 2E C2                             call    gc_display_find_string                  ; update string
 213+ C2A9 CD 58 C2     .blinkNoDelay:          call    blink_cursor
 214+ C2AC                                      CallIfMemEqNusng    gcCursorBlink, gcBlinkVal, gc_display_find_string ; on blink we get a double update but we can live with that
 214+ C2AC 3A D9 C1    >                        ld      a,(gcCursorBlink)
 214+ C2AF FE 10       >                        cp      gcBlinkVal
 214+ C2B1 CC 2E C2    >                        call    z,gc_display_find_string
 215+ C2B4 C9                                   ret
 216+ C2B5              .FindEnterPressed:      SetMemFalse EnterPressed                        ; reset enter
 216+ C2B5 3E FF       >                        ld      a,$FF
 216+ C2B7 32 2A 81    >                        ld      (EnterPressed),a
 217+ C2BA                                      SetMemFalse TextInputMode                       ; leave input mode
 217+ C2BA 3E FF       >                        ld      a,$FF
 217+ C2BC 32 8A 84    >                        ld      (TextInputMode),a
 218+ C2BF 3A 94 84                             ld      a,(Galaxy)                              ; Fetch correct galaxy seed bank into memory
 219+ C2C2                                      MMUSelectGalaxyA
 219+ C2C2 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 220+ C2C5 21 0A 81                             ld      hl,InputString
 221+ C2C8 11 5E E8                             ld      de,GalaxySearchString
 222+ C2CB CD D0 F6                             call    GalaxyCopyLoop
 223+ C2CE CD 39 FB                             call    find_system_by_name
 224+ C2D1 FE FF                                cp      $FF                                     ; 0 denotes found FF, failure
 225+ C2D3 28 1D                                jr      z,.FindNoMatch
 226+ C2D5 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 227+ C2D8 4F                                   ld      c,a
 228+ C2D9 3A F9 E8                             ld      a,(GalaxyWorkingSeed+1)
 229+ C2DC 47                                   ld      b,a
 230+ C2DD ED 43 A9 84                          ld      (TargetSystemX),bc
 231+ C2E1 CD 84 C3                             call    UpdateGalacticCursor
 232+ C2E4 11 08 B0                             ld		de,galactic_find_position               ; Wipe input area on screen
 233+ C2E7 21 73 C0                             ld      hl,galactic_find_match
 234+ C2EA                                      MMUSelectLayer1
 234+ C2EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 235+ C2EE CD C8 E0                             call	l1_print_at
 236+ C2F1 C9                                   ret
 237+ C2F2              .FindNoMatch:           ; if not found display "Not found"
 238+ C2F2                                      ; move curor if found
 239+ C2F2 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 240+ C2F5 21 58 C0                             ld      hl,galactic_find_no_match
 241+ C2F8                                      MMUSelectLayer1
 241+ C2F8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C2FC CD C8 E0                             call	l1_print_at
 243+ C2FF C9                                   ret; DOSTUFFHERE
 244+ C300              ;----------------------------------------------------------------------------------------------------------------------------------
 245+ C300              galctic_chart_cursors:  ReturnIfMemTrue TextInputMode
 245+ C300 3A 8A 84    >                        ld      a,(TextInputMode)
 245+ C303 A7          >                        and     a
 245+ C304 C8          >                        ret     z
 246+ C305 3A 8B 84                             ld      a,(CursorKeysPressed)
 247+ C308                                      ReturnIfAIsZero
 247+ C308 A7          >                        and     a
 247+ C309 C8          >                        ret     z
 248+ C30A 17                                   rla
 249+ C30B DC 23 C3                             call   c,gc_UpPressed
 250+ C30E 17                                   rla
 251+ C30F DC 33 C3                             call   c,gc_DownPressed
 252+ C312 17                                   rla
 253+ C313 DC 43 C3                             call   c,gc_LeftPressed
 254+ C316 17                                   rla
 255+ C317 DC 53 C3                             call   c,gc_RightPressed
 256+ C31A 17                                   rla
 257+ C31B DC 63 C3                             call   c,gc_HomePressed
 258+ C31E 17                                   rla
 259+ C31F DC 6D C3                             call   c,gc_RecenterPressed
 260+ C322 C9                                   ret
 261+ C323              ;----------------------------------------------------------------------------------------------------------------------------------
 262+ C323 3A AA 84     gc_UpPressed:           ld     a,(TargetSystemX+1)
 263+ C326                                      JumpIfAEqNusng 1,gc_BoundsLimit
 263+ C326 FE 01       >                        cp     1
 263+ C328 CA 82 C3    >                        jp      z,gc_BoundsLimit
 264+ C32B 3D                                   dec     a
 265+ C32C 32 AA 84                             ld      (TargetSystemX+1),a
 266+ C32F CD 84 C3                             call    UpdateGalacticCursor
 267+ C332 C9                                   ret
 268+ C333              ;----------------------------------------------------------------------------------------------------------------------------------
 269+ C333 3A AA 84     gc_DownPressed:         ld     a,(TargetSystemX+1)
 270+ C336                                      JumpIfAEqNusng 255,gc_BoundsLimit
 270+ C336 FE FF       >                        cp     255
 270+ C338 CA 82 C3    >                        jp      z,gc_BoundsLimit
 271+ C33B 3C                                   inc    a
 272+ C33C 32 AA 84                             ld      (TargetSystemX+1),a
 273+ C33F CD 84 C3                             call    UpdateGalacticCursor
 274+ C342 C9                                   ret
 275+ C343              ;----------------------------------------------------------------------------------------------------------------------------------
 276+ C343 3A A9 84     gc_LeftPressed:         ld     a,(TargetSystemX)
 277+ C346                                      JumpIfAEqNusng 2,gc_BoundsLimit
 277+ C346 FE 02       >                        cp     2
 277+ C348 CA 82 C3    >                        jp      z,gc_BoundsLimit
 278+ C34B 3D                                   dec    a
 279+ C34C 32 A9 84                             ld      (TargetSystemX),a
 280+ C34F CD 84 C3                             call    UpdateGalacticCursor
 281+ C352 C9                                   ret
 282+ C353              ;----------------------------------------------------------------------------------------------------------------------------------
 283+ C353 3A A9 84     gc_RightPressed:        ld     a,(TargetSystemX)
 284+ C356                                      JumpIfAEqNusng 253,gc_BoundsLimit
 284+ C356 FE FD       >                        cp     253
 284+ C358 CA 82 C3    >                        jp      z,gc_BoundsLimit
 285+ C35B 3C                                   inc    a
 286+ C35C 32 A9 84                             ld      (TargetSystemX),a
 287+ C35F CD 84 C3                             call    UpdateGalacticCursor
 288+ C362 C9                                   ret
 289+ C363              ;----------------------------------------------------------------------------------------------------------------------------------
 290+ C363 2A A7 84     gc_HomePressed:         ld      hl,(PresentSystemX)
 291+ C366 22 A9 84                             ld      (TargetSystemX),hl
 292+ C369 CD 84 C3                             call    UpdateGalacticCursor
 293+ C36C C9                                   ret
 294+ C36D              ;----------------------------------------------------------------------------------------------------------------------------------
 295+ C36D 3A 94 84     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 296+ C370                                      MMUSelectGalaxyA
 296+ C370 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 297+ C373 ED 4B A9 84                          ld      bc,(TargetSystemX)
 298+ C377 CD 70 FB                             call    find_nearest_to_bc
 299+ C37A ED 43 A9 84                          ld      (TargetSystemX),bc
 300+ C37E CD 84 C3                             call    UpdateGalacticCursor
 301+ C381 C9                                   ret
 302+ C382              ;----------------------------------------------------------------------------------------------------------------------------------
 303+ C382 AF           gc_BoundsLimit          xor     a
 304+ C383 C9                                   ret
 305+ C384
 306+ C384              ;----------------------------------------------------------------------------------------------------------------------------------
 307+ C384 ED 4B A9 84  UpdateGalacticCursor:   ld		bc,(TargetSystemX)              ; bc = selected jump
 308+ C388              OnGalacticChart:        MMUSelectSpriteBank
 308+ C388 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 309+ C38C CD A9 E0                             call	sprite_ghc_move
 310+ C38F 3A 94 84                             ld      a,(Galaxy)
 311+ C392                                      MMUSelectGalaxyA
 311+ C392 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 312+ C395 ED 4B A9 84                          ld      bc,(TargetSystemX)
 313+ C399 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 314+ C39D CD 64 FC                             call    galaxy_system_under_cursor
 315+ C3A0 FE 00                                cp      0
 316+ C3A2 C8                                   ret     z
 317+ C3A3              ; just fall into gc_name_if_possible
 318+ C3A3 CD 82 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 319+ C3A6 CD D1 C3                             call    gc_clear_name_area
 320+ C3A9 21 9D 93                             ld		hl,name_expanded
 321+ C3AC CD F2 92                             call	CapitaliseString
 322+ C3AF 21 9D 93                             ld		hl, name_expanded
 323+ C3B2 01 0A A0                             ld      bc,$A00A
 324+ C3B5 1E FF                                ld		e,$FF
 325+ C3B7                                      MMUSelectLayer2
 325+ C3B7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 326+ C3BB CD 22 E2                             call	l2_print_7at
 327+ C3BE CD EB C3                             call    gc_calc_distance
 328+ C3C1 21 14 C0                             ld      hl,galactic_chart_distance
 329+ C3C4 01 0A A8                             ld      bc,$A80A
 330+ C3C7 1E FF                                ld		e,$FF
 331+ C3C9                                      MMUSelectLayer2
 331+ C3C9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 332+ C3CD CD 22 E2                             call	l2_print_7at
 333+ C3D0 C9                                   ret
 334+ C3D1              ;----------------------------------------------------------------------------------------------------------------------------------
 335+ C3D1 26 08        gc_clear_name_area:     ld      h,8
 336+ C3D3 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 337+ C3D6 01 0A A0                             ld      bc,$A00A
 338+ C3D9 E5           .ClearLoop:             push    hl
 339+ C3DA D5                                   push    de
 340+ C3DB C5                                   push    bc
 341+ C3DC                                      MMUSelectLayer2
 341+ C3DC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C3E0 CD B3 E2                             call	l2_draw_horz_line
 343+ C3E3 C1                                   pop     bc
 344+ C3E4 D1                                   pop     de
 345+ C3E5 E1                                   pop     hl
 346+ C3E6 04                                   inc     b
 347+ C3E7 25                                   dec     h
 348+ C3E8 20 EF                                jr      nz,.ClearLoop
 349+ C3EA C9                                   ret
 350+ C3EB              ;----------------------------------------------------------------------------------------------------------------------------------
 351+ C3EB 3A 94 84     gc_calc_distance:       ld      a,(Galaxy)
 352+ C3EE                                      MMUSelectGalaxyA
 352+ C3EE ED 92 57    >                     nextreg GalaxyDataMMU,     a
 353+ C3F1 11 1E C0                             ld      de,galactic_chart_dist_amount
 354+ C3F4 21 30 C0                             ld      hl,galactic_default_dist
 355+ C3F7 ED A0                                ldi
 356+ C3F9 ED A0                                ldi
 357+ C3FB ED A0                                ldi
 358+ C3FD ED A0                                ldi
 359+ C3FF ED A0                                ldi
 360+ C401 ED 4B A7 84                          ld      bc,(PresentSystemX)
 361+ C405 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 362+ C409 ED 4B A9 84                          ld      bc,(TargetSystemX)
 363+ C40D ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 364+ C411 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 365+ C414 DD 2A 30 84                          ld      ix,(Distance)
 366+ C418 11 00 00                             ld      de,0
 367+ C41B FD 21 36 C0                          ld      iy,galactic_distance
 368+ C41F CD F2 9B                             call    DispDEIXtoIY
 369+ C422 FD E5                                push    iy
 370+ C424 E1                                   pop     hl
 371+ C425 11 36 C0                             ld      de,galactic_distance
 372+ C428 7E                                   ld		a,(hl)				;Push last digit to post decimal
 373+ C429 32 22 C0                             ld		(galactic_chart_fraction),a
 374+ C42C 2B                                   dec     hl
 375+ C42D CD A6 9A                             call    compare16HLDE
 376+ C430 38 18                                jr      c,.done_number
 377+ C432 7E                                   ld      a,(hl)
 378+ C433 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 379+ C436 2B                                   dec     hl
 380+ C437 CD A6 9A                             call    compare16HLDE
 381+ C43A 38 0E                                jr      c,.done_number
 382+ C43C 7E                                   ld      a,(hl)
 383+ C43D 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 384+ C440 2B                                   dec     hl
 385+ C441 CD A6 9A                             call    compare16HLDE
 386+ C444 38 04                                jr      c,.done_number
 387+ C446 7E                                   ld      a,(hl)
 388+ C447 32 1E C0                             ld      (galactic_chart_dist_amount),a
 389+ C44A C9           .done_number:           ret
 390+ C44B              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ C44B AF           gc_present_system:      xor     a
 392+ C44C 32 A1 83                             ld		(XSAV),a
 393+ C44F DD 21 16 E0                          ld      ix,galaxy_data
 394+ C453 3A 94 84     GCCounterLoop:          ld      a,(Galaxy)
 395+ C456                                      MMUSelectGalaxyA
 395+ C456 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 396+ C459 2A A7 84                             ld      hl,(PresentSystemX)
 397+ C45C DD E5                                push    ix
 398+ C45E 7D                                   ld      a,l
 399+ C45F DD BE 03                             cp      (ix+3)                          ; seed x
 400+ C462 20 14                                jr      nz,.ItsNotThisX
 401+ C464 7C                                   ld      a,h
 402+ C465 DD BE 01                             cp      (ix+1)                          ; seed x
 403+ C468 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 404+ C46A DD E5                                push    ix
 405+ C46C E1                                   pop     hl
 406+ C46D 11 9B 84                             ld      de,PresentSystemSeeds
 407+ C470 CD 9A 89                             call    copy_seed
 408+ C473 3E FF                                ld      a,$FF
 409+ C475 DD E1                                pop     ix
 410+ C477 C9                                   ret
 411+ C478 E1           .ItsNotThisX:           pop     hl
 412+ C479 ED 34 08 00                          add     hl,8
 413+ C47D E5                                   push    hl
 414+ C47E DD E1                                pop     ix
 415+ C480 3A A1 83                             ld		a,(XSAV)
 416+ C483 3D                                   dec		a
 417+ C484 32 A1 83                             ld      (XSAV),a
 418+ C487 FE 00                                cp		0
 419+ C489 C8                                   ret		z
 420+ C48A 18 C7                                jr		GCCounterLoop
 421+ C48C
# file closed: ./Menus//galactic_chart_menu.asm
 685  C48C                  DISPLAY "Bank ",BankMenuGalCht," - Bytes free ",/D, $2000 - ($-MenuGalChtAddr), " - BankMenuGalCht"
 686  C48C              ; Bank 52  ------------------------------------------------------------------------------------------------------------------------
 687  C48C                  SLOT    MenuInventAddr
 688  C48C                  PAGE    BankMenuInvent
 689  C48C              	ORG     MenuInventAddr
 690  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070              .BoilerTextLoop:
   4++C070 C5           	push		bc			; Save Message Count loop value
   5++C071 4E           	ld			c,(hl)		; Get Row into b
   6++C072 23           	inc			hl
   7++C073 46           	ld			b,(hl)		; Get Col into b
   8++C074 23           	inc			hl
   9++C075 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C076 23           	inc			hl
  11++C077 56           	ld			d,(hl)		; Get text address Hi into E
  12++C078 23           	inc			hl
  13++C079 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C07A EB           	ex			de,hl		; now hl = address of text data
  15++C07B 1E FF        	ld			e,txt_status_colour
  16++C07D C5           	push		bc
  17++C07E D1           	pop			de
  18++C07F                  MMUSelectLayer1
  18++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C083 CD C8 E0     	call		l1_print_at
  20++C086 E1           	pop			hl
  21++C087 C1           	pop			bc
  22++C088 10 E6        	djnz		.BoilerTextLoop
  23++C08A C9           	ret
  24++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A 0A 89     	ld		a,(Fuel)
   4++C136 11 6C B1     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 0D 89                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD 78 8C                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 1D 91                             ld		hl, WordIdx
 118+ C17A CD 78 8C                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD C8 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD C8 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD 78 8C                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 1D 91                             ld		hl,WordIdx
 148+ C1C1 CD 78 8C                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD C8 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A 08 89     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A 06 89                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    InitNoDoubleBuffer
 170+ C1F5             >                            MMUSelectLayer1
 170+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 170+ C1F9 CD 80 E0    >                            call	l1_cls
 170+ C1FC 3E 07       >                            ld		a,7
 170+ C1FE CD 9B E0    >                            call	l1_attr_cls_to_a
 170+ C201             >                            MMUSelectLayer2
 170+ C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 170+ C205 CD 09 E0    >                            call    asm_l2_double_buffer_off
 170+ C208 CD FF E0    >                            call	l2_cls	; Get some space
 170+ C20B             >                            MMUSelectSpriteBank
 170+ C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 170+ C20F CD 6E E5    >                            call    sprite_cls_cursors
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 A9 83                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 6E E5                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD 49 E2                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD B3 E2                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 6C B1                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD C2 E1                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD C2 E1                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
 691  C281                  DISPLAY "Bank ",BankMenuInvent," - Bytes free ",/D, $2000 - ($-MenuInventAddr), " - BankMenuInvent"
 692  C281              ; Bank 53  ------------------------------------------------------------------------------------------------------------------------
 693  C281                  SLOT    MenuSystemAddr
 694  C281                  PAGE    BankMenuSystem
 695  C281              	ORG     MenuSystemAddr
 696  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 D1 92  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 9D 93  						DW $0280,name_expanded
   5+ C018 08 0B 2F 8E  						DW $0B08,WordDistance
   6+ C01C 08 13 38 8E  						DW $1308,WordEconomy
   7+ C020 08 1B 40 8E  						DW $1B08,WordGovernment
   8+ C024 08 23 4B 8E  						DW $2308,WordTechLevel
   9+ C028 08 2B 55 8E  						DW $2B08,WordPopulation
  10+ C02C 08 3B 70 8E  						DW $3B08,WordGross
  11+ C030 38 3B 76 8E  						DW $3B38,WordProductivity
  12+ C034 08 43 83 8E  						DW $4308,WordAverage
  13+ C038 48 43 8B 8E  						DW $4348,WordRadius
  14+ C03C 60 0B D1 92  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 D1 92  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 0A E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7F E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 64 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 85 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A 94 84     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,     a
 107+ C2B1 ED 4B A7 84                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5              .BoilerTextLoop:
   4++C2C5 C5           	push		bc			; Save Message Count loop value
   5++C2C6 4E           	ld			c,(hl)		; Get Row into b
   6++C2C7 23           	inc			hl
   7++C2C8 46           	ld			b,(hl)		; Get Col into b
   8++C2C9 23           	inc			hl
   9++C2CA 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C2CB 23           	inc			hl
  11++C2CC 56           	ld			d,(hl)		; Get text address Hi into E
  12++C2CD 23           	inc			hl
  13++C2CE E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C2CF EB           	ex			de,hl		; now hl = address of text data
  15++C2D0 1E FF        	ld			e,txt_status_colour
  16++C2D2 C5           	push		bc
  17++C2D3 D1           	pop			de
  18++C2D4                  MMUSelectLayer1
  18++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C2D8 CD C8 E0     	call		l1_print_at
  20++C2DB E1           	pop			hl
  21++C2DC C1           	pop			bc
  22++C2DD 10 E6        	djnz		.BoilerTextLoop
  23++C2DF C9           	ret
  24++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  InitNoDoubleBuffer
 129+ C2F0             >                            MMUSelectLayer1
 129+ C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 129+ C2F4 CD 80 E0    >                            call	l1_cls
 129+ C2F7 3E 07       >                            ld		a,7
 129+ C2F9 CD 9B E0    >                            call	l1_attr_cls_to_a
 129+ C2FC             >                            MMUSelectLayer2
 129+ C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 129+ C300 CD 09 E0    >                            call    asm_l2_double_buffer_off
 129+ C303 CD FF E0    >                            call	l2_cls	; Get some space
 129+ C306             >                            MMUSelectSpriteBank
 129+ C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 129+ C30A CD 6E E5    >                            call    sprite_cls_cursors
 130+ C30D                                      ZeroA
 130+ C30D AF          >                        xor a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 A9 83                             ld		(MenuIdMax),a
 134+ C316 3A 94 84     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 136+ C31C ED 4B A9 84  .CheckCursorOrHome:     ld      bc,(TargetSystemX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 64 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B A7 84  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 64 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B A9 84  .FoundASystem:          ld      bc,(TargetSystemX)
 147+ C342 2A A7 84                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 95 84     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD 02 FA                             call    galaxy_copy_seed
 159+ C35B CD C5 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD 49 E2                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD B3 E2                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD 18 93                             call	expandTokenToString
 170+ C37B 3A 94 84     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,     a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F8 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD 02 FA                             call    galaxy_copy_seed
 178+ C38E CD 6D F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 9D 93                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 9D 93                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A 30 84  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD E3 9B                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD C8 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD 18 93                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD 18 93                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD 0A 93                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD C8 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD C8 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD E3 9B                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD C8 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A 94 84     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 251+ C455 CD DC F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD C8 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD F2 9B                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD C8 E0                             call	l1_print_at
 272+ C48F 3A 94 84     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 274+ C495 2A 10 E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD F2 9B                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD C8 E0                             call	l1_print_at
 289+ C4BC 3A 94 84     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,     a
 291+ C4C2 11 F8 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD 02 FA                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6F F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD 15 E1                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
 697  C4F7                  DISPLAY "Bank ",BankMenuSystem," - Bytes free ",/D, $2000 - ($-MenuSystemAddr), " - BankMenuSystem"
 698  C4F7              ; Bank 54  ------------------------------------------------------------------------------------------------------------------------
 699  C4F7                  SLOT    MenuMarketAddr
 700  C4F7                  PAGE    BankMenuMarket
 701  C4F7                  ORG     MenuMarketAddr
 702  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 D1 92  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 9D 93  						DW $0220,name_expanded
   4+ C018 80 0B 1F 8D  						DW $0B80,WordUnit
   5+ C01C B0 0B 68 8F  						DW $0BB0,WordQuantity
   6+ C020 08 13 46 8F  						DW $1308,WordProduct
   7+ C024 60 13 4E 8F  						DW $1360,WordUoM
   8+ C028 80 13 52 8F  						DW $1380,WordPrice
   9+ C02C B0 13 76 8F  						DW $13B0,WordStock
  10+ C030 E0 13 72 8F  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213              .BoilerTextLoop:
   4++C213 C5           	push		bc			; Save Message Count loop value
   5++C214 4E           	ld			c,(hl)		; Get Row into b
   6++C215 23           	inc			hl
   7++C216 46           	ld			b,(hl)		; Get Col into b
   8++C217 23           	inc			hl
   9++C218 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C219 23           	inc			hl
  11++C21A 56           	ld			d,(hl)		; Get text address Hi into E
  12++C21B 23           	inc			hl
  13++C21C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C21D EB           	ex			de,hl		; now hl = address of text data
  15++C21E 1E FF        	ld			e,txt_status_colour
  16++C220 C5           	push		bc
  17++C221 D1           	pop			de
  18++C222                  MMUSelectLayer1
  18++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C226 CD C8 E0     	call		l1_print_at
  20++C229 E1           	pop			hl
  21++C22A C1           	pop			bc
  22++C22B 10 E6        	djnz		.BoilerTextLoop
  23++C22D C9           	ret
  24++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A 08 89     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A 06 89                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A 0C 89                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD C8 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD C8 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position  ; hl = base cursor position + row number * 8
 249+ C28F 57                                   ld      d,a                 ; .
 250+ C290 1E 08                                ld      e,8                 ; .
 251+ C292 ED 30                                mul                         ; .
 252+ C294 53                                   ld      d,e                 ; .
 253+ C295 1E 00                                ld      e,0                 ; .
 254+ C297 19                                   add     hl,de               ; .
 255+ C298 22 41 C0                             ld      (market_cursor),hl  ; save in market cursor and copy to de
 256+ C29B EB                                   ex      hl,de               ; .
 257+ C29C 21 43 C0                             ld      hl,market_blank_line; hl = blank line text
 258+ C29F                                      MMUSelectLayer1             ; print blank line (hl) and position DE
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD C8 E0                             call	l1_print_at         ; .
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 0D 89                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 1D 91                             ld		hl,WordIdx
 273+ C2C5 CD 78 8C                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD C8 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 1D 91                             ld		hl,WordIdx
 281+ C2DF CD 78 8C                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD C8 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD C8 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD C8 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD C8 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:InitNoDoubleBuffer
 314+ C343             >                            MMUSelectLayer1
 314+ C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 314+ C347 CD 80 E0    >                            call	l1_cls
 314+ C34A 3E 07       >                            ld		a,7
 314+ C34C CD 9B E0    >                            call	l1_attr_cls_to_a
 314+ C34F             >                            MMUSelectLayer2
 314+ C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 314+ C353 CD 09 E0    >                            call    asm_l2_double_buffer_off
 314+ C356 CD FF E0    >                            call	l2_cls	; Get some space
 314+ C359             >                            MMUSelectSpriteBank
 314+ C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 314+ C35D CD 6E E5    >                            call    sprite_cls_cursors
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 A9 83                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD 49 E2                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD B3 E2                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD B3 E2                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD B3 E2                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD B3 E2                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD B3 E2                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD B3 E2                             call	l2_draw_horz_line
 340+ C3AA 3A 94 84     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,     a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD 18 93                             call	expandTokenToString
 344+ C3B5 CD 7A F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0              ; Generate the market list on screen
 349+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 350+ C3C2 21 08 20                             ld		hl,market_position          ; set current cursor position on screen
 351+ C3C5 22 41 C0                             ld		(market_cursor),hl          ; .
 352+ C3C8 F5           MarketLoop:	            push	af
 353+ C3C9 CD 8B C2                             call	PrintMarketItem             ; display a single market item
 354+ C3CC F1                                   pop		af
 355+ C3CD 3C                                   inc		a
 356+ C3CE FE 11                                cp		17
 357+ C3D0 20 F6                                jr		nz,MarketLoop
 358+ C3D2 AF           .InitialHighlight:      xor     a
 359+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 360+ C3D6 CD B3 C0                             call    mkt_highlight_row
 361+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 362+ C3DC 11 10 A8                             ld      de,$A810
 363+ C3DF                                      MMUSelectLayer1
 363+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 364+ C3E3 CD C8 E0                             call	l1_print_at
 365+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 366+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 367+ C3EC 11 10 B0                             ld      de,$B010
 368+ C3EF                                      MMUSelectLayer1
 368+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 369+ C3F3 CD C8 E0                             call	l1_print_at
 370+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 371+ C3F9 C9                                   ret
 372+ C3FA
 373+ C3FA
 374+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 375+ C3FA              ; Handles all the input whilst in the market menu
 376+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 377+ C3FC CD 93 80                             call    is_key_pressed
 378+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 379+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 380+ C404 CD 93 80                             call    is_key_pressed
 381+ C407 CC 2C C4                             call    z,mkt_DownPressed
 382+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 383+ C40C CD 93 80                             call    is_key_pressed
 384+ C40F CC 46 C4                             call    z,mkt_LeftPressed
 385+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 386+ C414 CD 93 80                             call    is_key_pressed
 387+ C417 CC 89 C4                             call    z,mkt_RightPressed
 388+ C41A C9                                   ret
 389+ C41B
 390+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 392+ C41E FE 00                                cp      0
 393+ C420 C8                                   ret     z
 394+ C421 CD C3 C0                             call    mkt_lowlight_row
 395+ C424 21 74 C0                             ld      hl,mkt_selected_row
 396+ C427 35                                   dec     (hl)
 397+ C428 CD B3 C0                             call    mkt_highlight_row
 398+ C42B C9                                   ret
 399+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 400+ C42C 3E 4C        mkt_DownPressed:        ld      a,c_Pressed_CursorDown
 401+ C42E CD 6E 80                             call    get_key_a_state
 402+ C431 FE 01                                cp      1
 403+ C433 28 00                                jr      z,.ItsOK
 404+ C435 3A 74 C0     .ItsOK:                 ld      a,(mkt_selected_row)
 405+ C438 FE 10                                cp      16
 406+ C43A C8                                   ret     z
 407+ C43B CD C3 C0                             call    mkt_lowlight_row
 408+ C43E 21 74 C0                             ld      hl,mkt_selected_row
 409+ C441 34                                   inc     (hl)
 410+ C442 CD B3 C0                             call    mkt_highlight_row
 411+ C445 C9                                   ret
 412+ C446              ;----------------------------------------------------------------------------------------------------------------------------------
 413+ C446 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 414+ C449 21 0D 89                             ld      hl,CargoTonnes
 415+ C44C ED 31                                add     hl,a
 416+ C44E 7E                                   ld      a,(hl)
 417+ C44F FE 00                                cp      0
 418+ C451 C8                                   ret     z
 419+ C452 35                                   dec     (hl)
 420+ C453 DD 21 00 E0                          ld      ix,StockFood
 421+ C457 3A 74 C0                             ld      a,(mkt_selected_row)
 422+ C45A 16 08                                ld      d,8
 423+ C45C 5F                                   ld      e,a
 424+ C45D ED 30                                mul
 425+ C45F DD 19                                add     ix,de
 426+ C461                                      MMUSelectStockTable
 426+ C461 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 427+ C465 DD 34 01                             inc     (ix+1)
 428+ C468 DD 7E 07                             ld      a,(ix+7)
 429+ C46B FE 30                                cp      48
 430+ C46D 20 04                                jr      nz,.UnderATonne
 431+ C46F 21 0C 89                             ld      hl,CargoRunningLoad
 432+ C472 35                                   dec     (hl)            ; We need to cosider UoM
 433+ C473 DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 434+ C476 16 00                                ld      d,0
 435+ C478 5F                                   ld      e,a
 436+ C479 CD 12 95                             call    addDEtoCash
 437+ C47C                                      ; DO ADD CASH
 438+ C47C 3A 74 C0                             ld      a,(mkt_selected_row)
 439+ C47F CD 8B C2                             call    PrintMarketItem
 440+ C482 CD 69 C2                             call    MKT_DisplayCargo
 441+ C485 CD 7A C2                             call    MKT_DisplayCash
 442+ C488 C9                                   ret
 443+ C489              ;----------------------------------------------------------------------------------------------------------------------------------
 444+ C489              mkt_RightPressed:       MMUSelectStockTable
 444+ C489 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 445+ C48D DD 21 00 E0                          ld      ix,StockFood
 446+ C491 3A 74 C0                             ld      a,(mkt_selected_row)
 447+ C494 16 08                                ld      d,8
 448+ C496 5F                                   ld      e,a
 449+ C497 ED 30                                mul
 450+ C499 DD 19                                add     ix,de
 451+ C49B 4F                                   ld      c,a
 452+ C49C DD 7E 01                             ld      a,(ix+1)
 453+ C49F FE 00                                cp      0
 454+ C4A1 C8                                   ret     z
 455+ C4A2 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 456+ C4A5 FE 30                                cp      48
 457+ C4A7 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 458+ C4A9 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 459+ C4AC 21 0D 89                             ld      hl,CargoTonnes
 460+ C4AF ED 31                                add     hl,a
 461+ C4B1 7E                                   ld      a,(hl)
 462+ C4B2 FE C8                                cp      200
 463+ C4B4 C8                                   ret     z                                   ; else its a 200 UoM limit
 464+ C4B5 C3 BE C4                             jp      .CheckCash
 465+ C4B8 2A 0B 89     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 466+ C4BB 7C                                   ld      a,h
 467+ C4BC BD                                   cp      l
 468+ C4BD C8                                   ret     z                                   ; return if we have already maxed out
 469+ C4BE 2A 08 89     .CheckCash:             ld      hl,(Cash+2)
 470+ C4C1 7C                                   ld      a,h
 471+ C4C2 B5                                   or      l
 472+ C4C3 20 0F                                jr      nz,.MoreThanRequired
 473+ C4C5 2A 06 89                             ld      hl,(Cash)
 474+ C4C8 7C                                   ld      a,h
 475+ C4C9 FE 00                                cp      0
 476+ C4CB 20 07                                jr      nz,.MoreThanRequired
 477+ C4CD DD 7E 02                             ld      a,(ix+2)
 478+ C4D0 BD                                   cp      l
 479+ C4D1 30 01                                jr      nc,.MoreThanRequired
 480+ C4D3 C9                                   ret                         ; Insufficient Funds
 481+ C4D4 19           .MoreThanRequired:      add     hl,de
 482+ C4D5 7C                                   ld      a,h
 483+ C4D6 B3                                   or      e
 484+ C4D7                                      ; check cash can we buy, and cargo capacity
 485+ C4D7 DD 35 01                             dec     (ix+1)
 486+ C4DA 3A 74 C0                             ld      a,(mkt_selected_row)
 487+ C4DD 21 0D 89                             ld      hl,CargoTonnes
 488+ C4E0 ED 31                                add     hl,a
 489+ C4E2 34                                   inc     (hl)
 490+ C4E3 DD 7E 07                             ld      a,(ix+7)
 491+ C4E6 47                                   ld      b,a
 492+ C4E7 FE 30                                cp      48
 493+ C4E9 20 05                                jr      nz,.UnderOneTonne
 494+ C4EB 78                                   ld      a,b
 495+ C4EC 21 0C 89                             ld      hl,CargoRunningLoad
 496+ C4EF 34                                   inc     (hl)
 497+ C4F0 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 498+ C4F3 16 00                                ld      d,0
 499+ C4F5 5F                                   ld      e,a
 500+ C4F6 CD 25 95                             call    subDEfromCash
 501+ C4F9 3A 74 C0                             ld      a,(mkt_selected_row)
 502+ C4FC CD 8B C2                             call    PrintMarketItem
 503+ C4FF CD 69 C2                             call    MKT_DisplayCargo
 504+ C502 CD 7A C2                             call    MKT_DisplayCash
 505+ C505 C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
 703  C506                  DISPLAY "Bank ",BankMenuMarket," - Bytes free ",/D, $2000 - ($-MenuMarketAddr), " - BankMenuMarket"
 704  C506              ; Bank 55  ------------------------------------------------------------------------------------------------------------------------
 705  C506                  SLOT    StockTableAddr
 706  C506                  PAGE    BankStockTable
 707  C506                  ORG     StockTableAddr
 708  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48  ; 01
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48  ; 02
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48  ; 03
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48  ; 04
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48  ; 05
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48  ; 06
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48  ; 07
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48  ; 08
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48  ; 09
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48  ; 11
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48  ; 12
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48  ; 13
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48  ; 14
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49  ; 15
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49  ; 16
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50  ; 17
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48  ; 18
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088              FoodIndex               EQU 01
  63+ E088              TextilesIndex           EQU 02
  64+ E088              RadioactivesIndex       EQU 03
  65+ E088              SlavesIndex             EQU 04
  66+ E088              LiquorWinesIndex        EQU 05
  67+ E088              LuxuriesIndex           EQU 06
  68+ E088              NarcoticsIndex          EQU 07
  69+ E088              ComputersIndex          EQU 08
  70+ E088              MachineryIndex          EQU 09
  71+ E088              AlloysIndex             EQU 10
  72+ E088              FirearmsIndex           EQU 11
  73+ E088              FursIndex               EQU 12
  74+ E088              MineralsIndex           EQU 13
  75+ E088              GoldIndex               EQU 14
  76+ E088              PlatinumIndex           EQU 15
  77+ E088              GemStonesIndex          EQU 16
  78+ E088              AlienItemsIndex		    equ 17
  79+ E088              StockListLen		    equ	18
  80+ E088
  81+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  81+ E08C 10 E0
  82+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  82+ E092 28 E0
  83+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  83+ E098 40 E0
  84+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  84+ E09E 58 E0
  85+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  85+ E0A4 70 E0
  86+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  87+ E0AA
  88+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  89+ E0AC CD 94 89                             call	copy_galaxy_to_system
  90+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  91+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  92+ E0B6 DD 19                                add		ix,de				; Move down a row
  93+ E0B8 04                                   inc		b
  94+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  95+ E0BC 3A 1E 84                             ld		a,(RandomMarketSeed)
  96+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  97+ E0C2 81                                   add		a,c
  98+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  99+ E0C4 3A 29 84                             ld		a,(DisplayEcononmy)	; d= economy
 100+ E0C7 57                                   ld		d,a
 101+ E0C8 DD 7E 04                             ld		a,(ix+4)
 102+ E0CB 5F                                   ld		e,a					; e  = economy adjust
 103+ E0CC CB 7B                                bit		7,e
 104+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
 105+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
 106+ E0D0 7B                                   ld		a,e
 107+ E0D1 ED 44                                neg
 108+ E0D3 5F                                   ld		e,a
 109+ E0D4              .PosMul:
 110+ E0D4 7B                                   ld		a,e
 111+ E0D5 ED 44                                neg
 112+ E0D7 5F                                   ld		e,a
 113+ E0D8 ED 30                                mul
 114+ E0DA 79                                   ld		a,c
 115+ E0DB 83                                   add		a,e
 116+ E0DC CB 27                                sla		a
 117+ E0DE CB 27                                sla		a					; Multply price by 4
 118+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 119+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 120+ E0E6 3A 1E 84                             ld		a,(RandomMarketSeed)
 121+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 122+ E0EC 81                                   add		a,c
 123+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 124+ E0EE 3A 29 84                             ld		a,(DisplayEcononmy)	; d= economy
 125+ E0F1 57                                   ld		d,a
 126+ E0F2 DD 7E 04                             ld		a,(ix+4)
 127+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 128+ E0F6 CB 7B                                bit		7,e
 129+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 130+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 131+ E0FB ED 44                                neg
 132+ E0FD 5F                                   ld		e,a
 133+ E0FE 7B           .PosQtyMul:             ld		a,e
 134+ E0FF ED 44                                neg
 135+ E101 5F                                   ld		e,a
 136+ E102 ED 30                                mul
 137+ E104 79                                   ld		a,c
 138+ E105 93                                   sub		e
 139+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 140+ E109 78                                   ld		a,b
 141+ E10A FE 11                                cp		AlienItemsIndex
 142+ E10C 20 A5                                jr		nz,.generate_stock_loop
 143+ E10E AF                                   xor		a
 144+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 145+ E112 C9                                   ret
 146+ E113
# file closed: ./Tables/stock_table.asm
 709  E113                  DISPLAY "Bank ",BankStockTable," - Bytes free ",/D, $2000 - ($-StockTableAddr), " - BankStockTable"
 710  E113              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
 711  E113                  SLOT    CommanderAddr
 712  E113                  PAGE    BankCommander
 713  E113                  ORG     CommanderAddr, BankCommander
 714  E000                  INCLUDE "./Commander/commanderData.asm"
# file opened: ./Commander/commanderData.asm
   1+ E000 43 4F 4D 4D  commanderPage           DB  "COMMANDERPAGE 56"
   1+ E004 41 4E 44 45
   1+ E008 52 50 41 47
   1+ E00C 45 20 35 36
   2+ E010 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E014 53 4F 4E 00
   3+ E018 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00
   3+ E01C 03 1C 0E 00
   3+ E020 00 0A 00 11
   3+ E024 3A 07 09 08
   3+ E028 00
   4+ E029 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E02D 53 B7
   5+ E02F 14           defaultHomeX	        DB $14
   6+ E030 AD           defaultHomeY	        DB $AD
   7+ E031 44 65 66 61  defaultSaveName         DB "Default.SAV",0,0,0,0
   7+ E035 75 6C 74 2E
   7+ E039 53 41 56 00
   7+ E03D 00 00 00
   8+ E040
   9+ E040              ; Gun and cabin temps are not saved as can only be saved in dock
  10+ E040              ; Note Can only save whilst docked
  11+ E040 43 4F 4D 4D  SaveCommanderHeader     DB  "COMMANDERSAVE..."
  11+ E044 41 4E 44 45
  11+ E048 52 53 41 56
  11+ E04C 45 2E 2E 2E
  12+ E050 00 00 00...  SaveFilename            DS  15
  13+ E05F 00 00 00...  SaveCommanderName       DS  15
  14+ E06E 00 00 00...  SaveSeeds               DS  06
  15+ E074 00 00 00...  SaveStockAvaliabiliy    DS  17
  16+ E085 00 00 00...  SaveCargo               DS  16
  17+ E095 00 00 00...  SaveEquipmentFitted     DS  EQ_ITEM_COUNT
  18+ E0AF 00 00 00 00  SaveLaserType           DS  4
  19+ E0B3 00 00 00 00  SaveLaserDamagedFlag    DS  4
  20+ E0B7 00           SavePresentSystemX      DS  1
  21+ E0B8 00           SavePresentSystemY      DS  1
  22+ E0B9 00           SaveTargetSystemX       DS  1
  23+ E0BA 00           SaveTargetSystemY       DS  1
  24+ E0BB 00 00 00 00  SaveCash                DS  4
  25+ E0BF 00           SaveFuel                DS  1
  26+ E0C0 00           SaveFugitiveInnocentStatus DS 1
  27+ E0C1 00 00        SaveKillTally           DS  2
  28+ E0C3 00           SaveOuterHyperCount     DS  1
  29+ E0C4 00           SaveInnerHyperCount     DS  1
  30+ E0C5 00           SaveForeShield          DS  1
  31+ E0C6 00           SaveAftShield           DS  1
  32+ E0C7 00           SavePlayerEnergy        DS  1
  33+ E0C8 00           SaveCargoBaySize        DS  1
  34+ E0C9 00           SaveFuelScoopStatus     DS  1
  35+ E0CA              SaveSize                equ $ - SaveCommanderHeader
  36+ E0CA
  37+ E0CA              copyCommanderToSave:    ldCopyStringLen CommanderName,      SaveCommanderName, 15
  37+ E0CA 21 A0 86    >                        ld      hl,CommanderName
  37+ E0CD 11 5F E0    >                        ld      de, SaveCommanderName
  37+ E0D0 01 0F 00    >                        ld      bc, 15
  37+ E0D3 ED B0       >                        ldir
  38+ E0D5                                      ldCopyStringLen GalaxySeeds,        SaveSeeds, 6
  38+ E0D5 21 A1 84    >                        ld      hl,GalaxySeeds
  38+ E0D8 11 6E E0    >                        ld      de, SaveSeeds
  38+ E0DB 01 06 00    >                        ld      bc, 6
  38+ E0DE ED B0       >                        ldir
  39+ E0E0                                      ldCopyStringLen StockAvaliabiliy,   SaveStockAvaliabiliy, 16
  39+ E0E0 21 0D 84    >                        ld      hl,StockAvaliabiliy
  39+ E0E3 11 74 E0    >                        ld      de, SaveStockAvaliabiliy
  39+ E0E6 01 10 00    >                        ld      bc, 16
  39+ E0E9 ED B0       >                        ldir
  40+ E0EB                                      ldCopyStringLen CargoTonnes,        SaveCargo, 16
  40+ E0EB 21 0D 89    >                        ld      hl,CargoTonnes
  40+ E0EE 11 85 E0    >                        ld      de, SaveCargo
  40+ E0F1 01 10 00    >                        ld      bc, 16
  40+ E0F4 ED B0       >                        ldir
  41+ E0F6                                      ldCopyStringLen EquipmentFitted,    SaveEquipmentFitted, EQ_ITEM_COUNT
  41+ E0F6 21 25 89    >                        ld      hl,EquipmentFitted
  41+ E0F9 11 95 E0    >                        ld      de, SaveEquipmentFitted
  41+ E0FC 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  41+ E0FF ED B0       >                        ldir
  42+ E101                                      ldCopyStringLen LaserType,          SaveLaserType, 4
  42+ E101 21 1D 89    >                        ld      hl,LaserType
  42+ E104 11 AF E0    >                        ld      de, SaveLaserType
  42+ E107 01 04 00    >                        ld      bc, 4
  42+ E10A ED B0       >                        ldir
  43+ E10C                                      ldCopyStringLen LaserDamagedFlag,   SaveLaserDamagedFlag, 4
  43+ E10C 21 21 89    >                        ld      hl,LaserDamagedFlag
  43+ E10F 11 B3 E0    >                        ld      de, SaveLaserDamagedFlag
  43+ E112 01 04 00    >                        ld      bc, 4
  43+ E115 ED B0       >                        ldir
  44+ E117                                      ldCopy2Byte     PresentSystemX,     SavePresentSystemX
  44+ E117 2A A7 84    >                        ld       hl,(PresentSystemX)
  44+ E11A 22 B7 E0    >                        ld       (SavePresentSystemX),hl
  45+ E11D                                      ldCopy2Byte     TargetSystemX,      SaveTargetSystemX
  45+ E11D 2A A9 84    >                        ld       hl,(TargetSystemX)
  45+ E120 22 B9 E0    >                        ld       (SaveTargetSystemX),hl
  46+ E123                                      ldCopyStringLen Cash,               SaveCash, 6
  46+ E123 21 06 89    >                        ld      hl,Cash
  46+ E126 11 BB E0    >                        ld      de, SaveCash
  46+ E129 01 06 00    >                        ld      bc, 6
  46+ E12C ED B0       >                        ldir
  47+ E12E                                      ldCopyByte      Fuel,               SaveFuel
  47+ E12E 3A 0A 89    >                        ld       a,(Fuel)
  47+ E131 32 BF E0    >                        ld       (SaveFuel),a
  48+ E134                                      ldCopyByte      FugitiveInnocentStatus,  SaveFugitiveInnocentStatus
  48+ E134 3A 0C 84    >                        ld       a,(FugitiveInnocentStatus)
  48+ E137 32 C0 E0    >                        ld       (SaveFugitiveInnocentStatus),a
  49+ E13A                                      ldCopy2Byte     KillTally           ,SaveKillTally
  49+ E13A 2A 1F 84    >                        ld       hl,(KillTally)
  49+ E13D 22 C1 E0    >                        ld       (SaveKillTally),hl
  50+ E140                                      ldCopyByte      OuterHyperCount     ,SaveOuterHyperCount
  50+ E140 3A 66 84    >                        ld       a,(OuterHyperCount)
  50+ E143 32 C3 E0    >                        ld       (SaveOuterHyperCount),a
  51+ E146                                      ldCopyByte      InnerHyperCount     ,SaveInnerHyperCount
  51+ E146 3A 65 84    >                        ld       a,(InnerHyperCount)
  51+ E149 32 C4 E0    >                        ld       (SaveInnerHyperCount),a
  52+ E14C                                      ldCopyByte      ForeShield          ,SaveForeShield
  52+ E14C 3A 9A 86    >                        ld       a,(ForeShield)
  52+ E14F 32 C5 E0    >                        ld       (SaveForeShield),a
  53+ E152                                      ldCopyByte      AftShield           ,SaveAftShield
  53+ E152 3A 9B 86    >                        ld       a,(AftShield)
  53+ E155 32 C6 E0    >                        ld       (SaveAftShield),a
  54+ E158                                      ldCopyByte      PlayerEnergy        ,SavePlayerEnergy
  54+ E158 3A 9C 86    >                        ld       a,(PlayerEnergy)
  54+ E15B 32 C7 E0    >                        ld       (SavePlayerEnergy),a
  55+ E15E                                      ldCopyByte      CargoBaySize        ,SaveCargoBaySize
  55+ E15E 3A 0B 89    >                        ld       a,(CargoBaySize)
  55+ E161 32 C8 E0    >                        ld       (SaveCargoBaySize),a
  56+ E164                                      ldCopyByte      FuelScoopsBarrelStatus     ,SaveFuelScoopStatus
  56+ E164 3A 3F 89    >                        ld       a,(FuelScoopsBarrelStatus)
  56+ E167 32 C9 E0    >                        ld       (SaveFuelScoopStatus),a
  57+ E16A C9                                   ret
  58+ E16B
  59+ E16B              copyCommanderFromSave:  ldCopyStringLen SaveCommanderName,      CommanderName, 15
  59+ E16B 21 5F E0    >                        ld      hl,SaveCommanderName
  59+ E16E 11 A0 86    >                        ld      de, CommanderName
  59+ E171 01 0F 00    >                        ld      bc, 15
  59+ E174 ED B0       >                        ldir
  60+ E176                                      ldCopyStringLen SaveSeeds,              GalaxySeeds, 6
  60+ E176 21 6E E0    >                        ld      hl,SaveSeeds
  60+ E179 11 A1 84    >                        ld      de, GalaxySeeds
  60+ E17C 01 06 00    >                        ld      bc, 6
  60+ E17F ED B0       >                        ldir
  61+ E181                                      ldCopyStringLen SaveStockAvaliabiliy,   StockAvaliabiliy, 16
  61+ E181 21 74 E0    >                        ld      hl,SaveStockAvaliabiliy
  61+ E184 11 0D 84    >                        ld      de, StockAvaliabiliy
  61+ E187 01 10 00    >                        ld      bc, 16
  61+ E18A ED B0       >                        ldir
  62+ E18C                                      ldCopyStringLen SaveCargo,              CargoTonnes, 16
  62+ E18C 21 85 E0    >                        ld      hl,SaveCargo
  62+ E18F 11 0D 89    >                        ld      de, CargoTonnes
  62+ E192 01 10 00    >                        ld      bc, 16
  62+ E195 ED B0       >                        ldir
  63+ E197                                      ldCopyStringLen SaveEquipmentFitted,    EquipmentFitted, EQ_ITEM_COUNT
  63+ E197 21 95 E0    >                        ld      hl,SaveEquipmentFitted
  63+ E19A 11 25 89    >                        ld      de, EquipmentFitted
  63+ E19D 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  63+ E1A0 ED B0       >                        ldir
  64+ E1A2                                      ldCopyStringLen SaveLaserType,          LaserType, 4
  64+ E1A2 21 AF E0    >                        ld      hl,SaveLaserType
  64+ E1A5 11 1D 89    >                        ld      de, LaserType
  64+ E1A8 01 04 00    >                        ld      bc, 4
  64+ E1AB ED B0       >                        ldir
  65+ E1AD                                      ldCopyStringLen SaveLaserDamagedFlag,    LaserDamagedFlag, 4
  65+ E1AD 21 B3 E0    >                        ld      hl,SaveLaserDamagedFlag
  65+ E1B0 11 21 89    >                        ld      de, LaserDamagedFlag
  65+ E1B3 01 04 00    >                        ld      bc, 4
  65+ E1B6 ED B0       >                        ldir
  66+ E1B8                                      ldCopy2Byte     SavePresentSystemX,     PresentSystemX
  66+ E1B8 2A B7 E0    >                        ld       hl,(SavePresentSystemX)
  66+ E1BB 22 A7 84    >                        ld       (PresentSystemX),hl
  67+ E1BE                                      ldCopy2Byte     SaveTargetSystemX,      TargetSystemX
  67+ E1BE 2A B9 E0    >                        ld       hl,(SaveTargetSystemX)
  67+ E1C1 22 A9 84    >                        ld       (TargetSystemX),hl
  68+ E1C4 21 62 83                             ld		hl,IndexedWork              ; not sure yet why thisis done here
  69+ E1C7 CD 94 89                             call	        copy_galaxy_to_system
  70+ E1CA CD 54 8A                             call	        find_present_system
  71+ E1CD CD B7 89                             call	        copy_working_to_galaxy
  72+ E1D0                                      ldCopyStringLen SaveCash,               Cash, 6
  72+ E1D0 21 BB E0    >                        ld      hl,SaveCash
  72+ E1D3 11 06 89    >                        ld      de, Cash
  72+ E1D6 01 06 00    >                        ld      bc, 6
  72+ E1D9 ED B0       >                        ldir
  73+ E1DB                                      ldCopyByte      SaveFuel,               Fuel
  73+ E1DB 3A BF E0    >                        ld       a,(SaveFuel)
  73+ E1DE 32 0A 89    >                        ld       (Fuel),a
  74+ E1E1                                      ldCopyByte      SaveFugitiveInnocentStatus,  FugitiveInnocentStatus
  74+ E1E1 3A C0 E0    >                        ld       a,(SaveFugitiveInnocentStatus)
  74+ E1E4 32 0C 84    >                        ld       (FugitiveInnocentStatus),a
  75+ E1E7                                      ldCopy2Byte     SaveKillTally           ,KillTally
  75+ E1E7 2A C1 E0    >                        ld       hl,(SaveKillTally)
  75+ E1EA 22 1F 84    >                        ld       (KillTally),hl
  76+ E1ED                                      ldCopyByte      SaveOuterHyperCount     ,OuterHyperCount
  76+ E1ED 3A C3 E0    >                        ld       a,(SaveOuterHyperCount)
  76+ E1F0 32 66 84    >                        ld       (OuterHyperCount),a
  77+ E1F3                                      ldCopyByte      SaveInnerHyperCount     ,InnerHyperCount
  77+ E1F3 3A C4 E0    >                        ld       a,(SaveInnerHyperCount)
  77+ E1F6 32 65 84    >                        ld       (InnerHyperCount),a
  78+ E1F9                                      ldCopyByte      SaveForeShield          ,ForeShield
  78+ E1F9 3A C5 E0    >                        ld       a,(SaveForeShield)
  78+ E1FC 32 9A 86    >                        ld       (ForeShield),a
  79+ E1FF                                      ldCopyByte      SaveAftShield           ,AftShield
  79+ E1FF 3A C6 E0    >                        ld       a,(SaveAftShield)
  79+ E202 32 9B 86    >                        ld       (AftShield),a
  80+ E205                                      ldCopyByte      SavePlayerEnergy        ,PlayerEnergy
  80+ E205 3A C7 E0    >                        ld       a,(SavePlayerEnergy)
  80+ E208 32 9C 86    >                        ld       (PlayerEnergy),a
  81+ E20B                                      ldCopyByte      SaveCargoBaySize        ,CargoBaySize
  81+ E20B 3A C8 E0    >                        ld       a,(SaveCargoBaySize)
  81+ E20E 32 0B 89    >                        ld       (CargoBaySize),a
  82+ E211                                      ldCopyByte      SaveFuelScoopStatus     ,FuelScoopsBarrelStatus
  82+ E211 3A C9 E0    >                        ld       a,(SaveFuelScoopStatus)
  82+ E214 32 3F 89    >                        ld       (FuelScoopsBarrelStatus),a
  83+ E217 C9                                   ret
  84+ E218
  85+ E218 CD CA E0     saveCommander:          call    copyCommanderToSave
  86+ E21B                                      ldCopyStringLen defaultSaveName, SaveFilename, 15
  86+ E21B 21 31 E0    >                        ld      hl,defaultSaveName
  86+ E21E 11 50 E0    >                        ld      de, SaveFilename
  86+ E221 01 0F 00    >                        ld      bc, 15
  86+ E224 ED B0       >                        ldir
  87+ E226 21 31 E0                             ld      hl, defaultSaveName             ; default debug name
  88+ E229 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  89+ E22D 01 8A 00                             ld      bc, SaveSize
  90+ E230 CD ED AD                             call    FileSave
  91+ E233 C9                                   ret
  92+ E234
  93+ E234 21 31 E0     loadCommander:          ld      hl, defaultSaveName             ; default debug name
  94+ E237 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  95+ E23B 01 8A 00                             ld      bc, SaveSize
  96+ E23E CD BC AD                             call    FileLoad
  97+ E241 CD 6B E1                             call    copyCommanderFromSave
  98+ E244                                      ClearMissileTargetting
  98+ E244 3E FF       >                        ld      a,StageMissileNotTargeting
  98+ E246 32 9F 86    >                        ld      (MissileTargettingFlag),a
  99+ E249 C9                                   ret
 100+ E24A
 101+ E24A               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
 102+ E24A              defaultCommander:       ldCopyStringLen defaultName, CommanderName, 8
 102+ E24A 21 10 E0    >                        ld      hl,defaultName
 102+ E24D 11 A0 86    >                        ld      de, CommanderName
 102+ E250 01 08 00    >                        ld      bc, 8
 102+ E253 ED B0       >                        ldir
 103+ E255                                      ldCopyStringLen defaultSeeds, GalaxySeeds, 6
 103+ E255 21 29 E0    >                        ld      hl,defaultSeeds
 103+ E258 11 A1 84    >                        ld      de, GalaxySeeds
 103+ E25B 01 06 00    >                        ld      bc, 6
 103+ E25E ED B0       >                        ldir
 104+ E260                                      ldCopy2Byte defaultHomeX, PresentSystemX
 104+ E260 2A 2F E0    >                        ld       hl,(defaultHomeX)
 104+ E263 22 A7 84    >                        ld       (PresentSystemX),hl
 105+ E266                                      ldCopy2Byte defaultHomeX, TargetSystemX
 105+ E266 2A 2F E0    >                        ld       hl,(defaultHomeX)
 105+ E269 22 A9 84    >                        ld       (TargetSystemX),hl
 106+ E26C 21 62 83                             ld		hl,IndexedWork              ; not sure yet why thisis done here
 107+ E26F CD 94 89                             call	copy_galaxy_to_system
 108+ E272 CD 54 8A                             call	find_present_system
 109+ E275 CD B7 89                             call	copy_working_to_galaxy
 110+ E278 01 60 EA                             ld      bc,60000
 111+ E27B ED 43 06 89                          ld      (Cash),bc
 112+ E27F 01 00 00                             ld		bc,0
 113+ E282 ED 43 08 89                          ld		(Cash+2), bc                    ; cash no longer big endian
 114+ E286 3E 46                                ld		a,MaxFuelLevel
 115+ E288 32 0A 89                             ld		(Fuel),a
 116+ E28B 3E 5B                                ld      a,BankGalaxyData0
 117+ E28D 32 94 84                             ld		(Galaxy),a
 118+ E290 AF                                   xor		a
 119+ E291 21 25 89                             ld      hl,EquipmentFitted
 120+ E294 06 1A                                ld      b, EQ_ITEM_COUNT
 121+ E296 77           .ClearFittedLooop:      ld      (hl),a
 122+ E297 23                                   inc     hl
 123+ E298 10 FC                                djnz    .ClearFittedLooop
 124+ E29A                                      SetAFalse
 124+ E29A 3E FF       >                        ld      a,$FF
 125+ E29C 32 33 89                             ld      (EquipmentFitted+EQ_FRONT_BEAM),a
 126+ E29F 32 B6 84                             ld		(MissionData),a						;The Plan/Mission
 127+ E2A2 3E 04                                ld      a,4                                  ; a = 0 = pulse laser
 128+ E2A4 32 1D 89                             ld		(LaserType),a
 129+ E2A7 3E FF                                ld      a,$FF                                 ; a = 255
 130+ E2A9 32 1E 89                             ld		(LaserType+1),a
 131+ E2AC 32 1F 89                             ld		(LaserType+2),a
 132+ E2AF 32 20 89                             ld		(LaserType+3),a
 133+ E2B2 AF                                   xor     a                                  ; a= 0
 134+ E2B3 32 21 89                             ld      (LaserDamagedFlag),a
 135+ E2B6 32 22 89                             ld      (LaserDamagedFlag+1),a
 136+ E2B9 32 23 89                             ld      (LaserDamagedFlag+2),a
 137+ E2BC 32 24 89                             ld      (LaserDamagedFlag+3),a
 138+ E2BF              ; REMOVE?             ld      a,EQ_FRONT_PULSE
 139+ E2BF AF                                   xor     a
 140+ E2C0 32 28 89                             ld		(ECMPresent),a
 141+ E2C3 32 3F 89                             ld		(FuelScoopsBarrelStatus),a
 142+ E2C6 32 2B 89                             ld		(EnergyBomb),a
 143+ E2C9 32 2C 89                             ld		(ExtraEnergyUnit),a
 144+ E2CC 32 2D 89                             ld		(DockingComputer),a
 145+ E2CF 32 2E 89                             ld		(GalacticHyperDrive),a
 146+ E2D2 32 2A 89                             ld		(EscapePod),a
 147+ E2D5 32 0C 84                             ld      (FugitiveInnocentStatus),a
 148+ E2D8 32 1F 84                             ld		(KillTally),a
 149+ E2DB 32 66 84                             ld      (OuterHyperCount),a
 150+ E2DE 32 65 84                             ld      (InnerHyperCount),a
 151+ E2E1 3D                                   dec		a								; now a = 255
 152+ E2E2 32 9A 86                             ld		(ForeShield),a
 153+ E2E5 32 9B 86                             ld		(AftShield),a
 154+ E2E8 32 9C 86                             ld		(PlayerEnergy),a
 155+ E2EB 3E 14                                ld		a,20
 156+ E2ED 32 0B 89                             ld		(CargoBaySize),a
 157+ E2F0 CD 68 E3                             call	ZeroCargo						; Clear out cargo
 158+ E2F3 3E 00        .SetLasers:             ld      a,0                             ; we start on Front view
 159+ E2F5 CD FE E2                             call    LoadLaserToCurrent
 160+ E2F8                                      ClearMissileTargetting
 160+ E2F8 3E FF       >                        ld      a,StageMissileNotTargeting
 160+ E2FA 32 9F 86    >                        ld      (MissileTargettingFlag),a
 161+ E2FD C9                                   ret
 162+ E2FE
 163+ E2FE
 164+ E2FE              ; a = current view number
 165+ E2FE 21 1D 89     LoadLaserToCurrent:     ld      hl,LaserType                    ; .
 166+ E301 ED 31                                add     hl,a                            ; .
 167+ E303 7E                                   ld      a,(hl)                          ; .
 168+ E304 47                                   ld      b,a                             ; first off is there a laser present in current view
 169+ E305 32 B1 86                             ld      (CurrLaserType),a               ; set type
 170+ E308 FE FF                                cp      255                             ; .
 171+ E30A C8                                   ret     z                               ; we can then drop out early if nothing fitted
 172+ E30B 3E 04                                ld      a,4                             ; Damage state is in next variable in memory
 173+ E30D ED 31                                add     hl,a
 174+ E30F 7E                                   ld      a,(hl)
 175+ E310 32 B2 86                             ld      (CurrLaserDamage),a             ; copy over current laser's damage
 176+ E313 50                                   ld      d,b                             ; get table index
 177+ E314 1E 0C                                ld      e,LaserStatsTableWidth          ;
 178+ E316 ED 30                                mul     de                              ;
 179+ E318 21 04 79                             ld      hl,LaserStatsTable              ;
 180+ E31B 19                                   add     hl,de                           ;
 181+ E31C 23                                   inc     hl                              ; we already have type
 182+ E31D                                      ldAtHLtoMem CurrLaserPulseRate          ; table [1]
 182+ E31D 7E          >                        ld      a,(hl)
 182+ E31E 32 B3 86    >                        ld      (CurrLaserPulseRate),a
 183+ E321 23                                   inc     hl                              ; table [2]
 184+ E322                                      ldAtHLtoMem CurrLaserPulseOnTime
 184+ E322 7E          >                        ld      a,(hl)
 184+ E323 32 B4 86    >                        ld      (CurrLaserPulseOnTime),a
 185+ E326 23                                   inc     hl                              ; table [3]
 186+ E327                                      ldAtHLtoMem CurrLaserPulseOffTime
 186+ E327 7E          >                        ld      a,(hl)
 186+ E328 32 B5 86    >                        ld      (CurrLaserPulseOffTime),a
 187+ E32B 23                                   inc     hl                              ; table [4]
 188+ E32C                                      ldAtHLtoMem CurrLaserPulseRest
 188+ E32C 7E          >                        ld      a,(hl)
 188+ E32D 32 B6 86    >                        ld      (CurrLaserPulseRest),a
 189+ E330 23                                   inc     hl                              ; table [5]
 190+ E331                                      ldAtHLtoMem CurrLaserDamageOutput
 190+ E331 7E          >                        ld      a,(hl)
 190+ E332 32 B9 86    >                        ld      (CurrLaserDamageOutput),a
 191+ E335 23                                   inc     hl                              ; table [6]
 192+ E336                                      ldAtHLtoMem CurrLaserEnergyDrain
 192+ E336 7E          >                        ld      a,(hl)
 192+ E337 32 BA 86    >                        ld      (CurrLaserEnergyDrain),a
 193+ E33A 23                                   inc     hl                              ; table [7]
 194+ E33B                                      ldAtHLtoMem CurrLaserHeat
 194+ E33B 7E          >                        ld      a,(hl)
 194+ E33C 32 BB 86    >                        ld      (CurrLaserHeat),a
 195+ E33F 23                                   inc     hl                              ; table [8]
 196+ E340                                      ldAtHLtoMem CurrLaserDurability
 196+ E340 7E          >                        ld      a,(hl)
 196+ E341 32 BC 86    >                        ld      (CurrLaserDurability),a
 197+ E344 23                                   inc     hl                              ; table [9]
 198+ E345                                      ldAtHLtoMem CurrLaserDurabilityAmount   ; we don't need tech level etc for in game run only markets so stop here
 198+ E345 7E          >                        ld      a,(hl)
 198+ E346 32 BD 86    >                        ld      (CurrLaserDurabilityAmount),a
 199+ E349 C9                                   ret
 200+ E34A
 201+ E34A              ; Set a = 2 * (slaves + narcotics) + firearms
 202+ E34A 3A 10 89     calculateBadness:       ld      a,(SlaveCargoTonnes)            ; Badness = 2(slaves + narcotics)
 203+ E34D 47                                   ld      b,a                             ; .
 204+ E34E 3A 13 89                             ld      a,(NarcoticsCargoTonnes)        ; .
 205+ E351 80                                   add     b                               ; .
 206+ E352 CB 27                                sla     a                               ; .
 207+ E354 47                                   ld      b,a                             ;
 208+ E355 3A 17 89                             ld      a,(FirearmsCargoTonnes)         ; Badness += firearms tonns
 209+ E358 80                                   add     b
 210+ E359 C9                                   ret
 211+ E35A
 212+ E35A CD 6B E1     PlayerDeath:            call    copyCommanderFromSave           ; load last loaded/saved commander
 213+ E35D                                      ZeroA                                   ; set current laser to front
 213+ E35D AF          >                        xor a
 214+ E35E CD FE E2                             call    LoadLaserToCurrent
 215+ E361 CD D6 87                             call    InitMainLoop
 216+ E364 CD 3E 87                             call    ResetPlayerShip
 217+ E367 C9                                   ret
 218+ E368                                  ;    clear out all other objects
 219+ E368                                  ;    create debris
 220+ E368                                  ;    if cargo presetn then create a cargo
 221+ E368                                  ;
 222+ E368                                  ;    enqueve message game over
 223+ E368                                  ;    go to load commander page
# file closed: ./Commander/commanderData.asm
 715  E368                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E368              ZeroCargo:
   2+ E368 AF           		xor		a							;zero-out cargo, including gems.
   3+ E369 06 10        		ld		b,16						;all the way up to alien items
   4+ E36B 21 0D 89     		ld		hl,CargoTonnes   			; cargo levels
   5+ E36E              .ZeroLoop:
   6+ E36E 77                   ld      (hl),a
   7+ E36F 23           		inc		hl
   8+ E370 10 FC        		djnz	.ZeroLoop
   9+ E372 C9           		ret
  10+ E373
# file closed: ./Commander/zero_player_cargo.asm
 716  E373                  DISPLAY "Bank ",BankCommander," - Bytes free ",/D, $2000 - ($-CommanderAddr), " - BankCommander"
 717  E373              ; Bank 57  ------------------------------------------------------------------------------------------------------------------------
 718  E373                  SLOT    LAYER2Addr
 719  E373                  PAGE    BankLAYER2
 720  E373                  ORG     LAYER2Addr
 721  E000
 722  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_BUFFER_MODE            DB 0
   4+ E002 00           varL2_ACCESS_MODE            DB 0
   5+ E003
   6+ E003 3E 08        asm_l2_double_buffer_on:    ld      a,8
   7+ E005 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
   8+ E008 C9                                       ret
   9+ E009
  10+ E009 AF           asm_l2_double_buffer_off:   xor     a
  11+ E00A 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
  12+ E00D C9                                       ret
  13+ E00E
  14+ E00E 01 3B 12     asm_disable_l2_readwrite:   ld      bc, IO_LAYER2_PORT
  15+ E011 ED 70                                    in      (c)
  16+ E013 32 02 E0                                 ld      (varL2_ACCESS_MODE),a
  17+ E016 E6 FA                                    and     LAYER2_DISABLE_MEM_ACCESS
  18+ E018 ED 79                                    out     (c),a
  19+ E01A C9                                       ret
  20+ E01B
  21+ E01B 3A 02 E0     asm_restore_l2_readwrite:   ld      a,(varL2_ACCESS_MODE)
  22+ E01E E6 05                                    and     LAYER2_READ_WRITE_MASK
  23+ E020 57                                       ld      d,a
  24+ E021 01 3B 12                                 ld      bc, IO_LAYER2_PORT
  25+ E024 ED 70                                    in      (c)
  26+ E026 32 02 E0                                 ld      (varL2_ACCESS_MODE),a
  27+ E029 A2                                       and     d
  28+ E02A ED 79                                    out     (c),a
  29+ E02C C9                                       ret
  30+ E02D
  31+ E02D 01 3B 12     asm_enable_l2_readwrite:    ld      bc, IO_LAYER2_PORT
  32+ E030 ED 70                                    in      (c)
  33+ E032 F6 05                                    or      LAYER2_READ_WRITE_MASK
  34+ E034 ED 79                                    out     (c),a
  35+ E036 C9                                       ret
  36+ E037
  37+ E037              ; "asm_l2_bank_select"
  38+ E037              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  39+ E037 57           asm_l2_bank_select:         ld      d,a
  40+ E038 FE 00                                    cp      0
  41+ E03A 28 08                                    jr      z,.NotBreakDebug
  42+ E03C FE 40                                    cp      $40
  43+ E03E 28 04                                    jr      z,.NotBreakDebug
  44+ E040 FE 80                                    cp      $80
  45+ E042 28 00                                    jr      z,.NotBreakDebug
  46+ E044              .NotBreakDebug:
  47+ E044 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  48+ E047 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  49+ E049 B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  50+ E04A 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  51+ E04D ED 79                                    out 	(c),a
  52+ E04F C9                                       ret
  53+ E050              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  54+ E050 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  55+ E053 FE 00                                    cp		0
  56+ E055 20 04                                    jr 		nz,.nottopbank
  57+ E057 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  58+ E059 18 DC                                    jr		asm_l2_bank_select
  59+ E05B FE 01        .nottopbank:                cp		1
  60+ E05D 20 04                                    jr 		nz,.notmiddlebank
  61+ E05F 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  62+ E061 18 D4                                    jr		asm_l2_bank_select
  63+ E063 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  64+ E065 18 D0                                    jr		asm_l2_bank_select
  65+ E067              		; Note no ret as its handled by above routines
  66+ E067
  67+ E067              ; "asm_l2_row_bank_select"
  68+ E067              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
  69+ E067              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
  70+ E067              ; "destroys BC call de is safe a = adjusted poke pixel row"
  71+ E067 FE 40        asm_l2_row_bank_select:     cp 		64			; row < 64?
  72+ E069 30 11                                    jr 		nc, .l2rowGTE64
  73+ E06B 08           .l2rowLT64:                 ex		af,af'
  74+ E06C                                          ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
  75+ E06C 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  76+ E06F F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  77+ E071 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  78+ E074 ED 79                                    out 	(c),a
  79+ E076 AF                                       xor		a						; set a to 0
  80+ E077 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  81+ E07A 08                                       ex		af,af'					; return pixel poke unharmed
  82+ E07B C9                                       ret
  83+ E07C FE 80        .l2rowGTE64:                cp 		128
  84+ E07E 30 14                                    jr 		nc, .l2rowGTE128
  85+ E080 08           .l2row64to127:              ex		af,af'
  86+ E081                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
  87+ E081 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  88+ E084 F6 43                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  89+ E086 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  90+ E089 ED 79                                    out 	(c),a
  91+ E08B 3E 01                                    ld		a,1						; set a to 1
  92+ E08D 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  93+ E090 08                                       ex		af,af'
  94+ E091 D6 40                                    sub		64
  95+ E093 C9                                       ret
  96+ E094 08           .l2rowGTE128:               ex		af,af'
  97+ E095                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
  98+ E095 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  99+ E098 F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 100+ E09A
 101+ E09A 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
 102+ E09D ED 79                                    out 	(c),a
 103+ E09F 3E 01                                    ld		a,1						; set a to 2
 104+ E0A1 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
 105+ E0A4 08                                       ex		af,af'
 106+ E0A5 D6 80                                    sub		128
 107+ E0A7 C9                                       ret
 108+ E0A8
 109+ E0A8
# file closed: ./Layer2Graphics/layer2_bank_select.asm
 723  E0A8                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E0A8
   2+ E0A8 00           l2_cls_byte	            DB 0
   3+ E0A9              ; ">DMA Command BLOCK"
   4+ E0A9
   5+ E0A9 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E0AD 7D
   6+ E0AE A8 E0        l2_fill_astrt           DW l2_cls_byte
   7+ E0B0 00 40        l2_fill_length          DB $00,$40
   8+ E0B2 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E0B5 00 00        l2_fill_bstrt           DB $00,$00
  10+ E0B7 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E0BB              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E0BB
  13+ E0BB              l2_cls_dma_bank:
  14+ E0BB              ; ">l2_cls_dma_bank"
  15+ E0BB              ; ">sets a bank to"
  16+ E0BB 32 A8 E0     .set_colour:            ld (l2_cls_byte),a
  17+ E0BE 21 A9 E0     .write_dma:             ld hl, l2_fill
  18+ E0C1 06 12                                ld b, l2_fill_cmd_len
  19+ E0C3 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  20+ E0C5 ED B3                                otir
  21+ E0C7 C9                                   ret
  22+ E0C8
  23+ E0C8 3E 00        l2_set_color_upper2:    ld      a,0
  24+ E0CA CD 67 E0                             call asm_l2_row_bank_select
  25+ E0CD 3A A8 E0                             ld      a,(l2_cls_byte)
  26+ E0D0 CD BB E0                             call l2_cls_dma_bank
  27+ E0D3 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  28+ E0D5 CD 67 E0                             call asm_l2_row_bank_select
  29+ E0D8 3A A8 E0                             ld      a,(l2_cls_byte)
  30+ E0DB CD BB E0                             call l2_cls_dma_bank
  31+ E0DE C9                                   ret
  32+ E0DF
  33+ E0DF
  34+ E0DF 3E 00        l2_cls_upper_two_thirds:ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  35+ E0E1 CD 67 E0                             call asm_l2_row_bank_select
  36+ E0E4 3E E3                                ld 	a,COLOUR_TRANSPARENT
  37+ E0E6 CD BB E0                             call l2_cls_dma_bank
  38+ E0E9 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  39+ E0EB CD 67 E0                             call asm_l2_row_bank_select
  40+ E0EE 3E E3                                ld 	a,COLOUR_TRANSPARENT
  41+ E0F0 CD BB E0                             call l2_cls_dma_bank
  42+ E0F3 C9                                   ret
  43+ E0F4
  44+ E0F4 3E 80        l2_cls_lower_third:     ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  45+ E0F6 CD 67 E0                             call asm_l2_row_bank_select
  46+ E0F9 3E E3                                ld 	a,COLOUR_TRANSPARENT
  47+ E0FB CD BB E0                             call l2_cls_dma_bank
  48+ E0FE C9                                   ret
  49+ E0FF
  50+ E0FF CD DF E0     l2_cls:                 call l2_cls_upper_two_thirds
  51+ E102 CD F4 E0                             call l2_cls_lower_third
  52+ E105 C9                                   ret
  53+ E106
# file closed: ./Layer2Graphics/layer2_cls.asm
 724  E106                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E106
   2+ E106 ED 91 12 08  l2_initialise:          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   3+ E10A ED 91 13 0B                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   4+ E10E ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   5+ E112 C9                                   ret
   6+ E113
# file closed: ./Layer2Graphics/layer2_initialise.asm
 725  E113                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E113              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E113 C5          >            push bc
   1+ E114 01 3B 24    >                ld bc,$243B
   1+ E117 3E 12       >                    ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E119 ED 79       >                    out (c),a
   1+ E11B 04          >                    inc b
   1+ E11C ED 78       >                in a,(c)
   1+ E11E C1          >            pop bc
   2+ E11F 57                                   ld      d,a
   3+ E120                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E120 C5          >            push bc
   3+ E121 01 3B 24    >                ld bc,$243B
   3+ E124 3E 13       >                    ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E126 ED 79       >                    out (c),a
   3+ E128 04          >                    inc b
   3+ E129 ED 78       >                in a,(c)
   3+ E12B C1          >            pop bc
   4+ E12C 5F                                   ld      e,a
   5+ E12D ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E130 7A                                   ld      a,d
   7+ E131 ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E134 C9                                   ret
   9+ E135
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
 726  E135                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E135              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
   2+ E135 F5           l2_plot_pixel:          push    af
   3+ E136 78                                   ld      a,b
   4+ E137              l2_pp_row_valid:        JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
   4+ E137 FE C0       >                        cp     ScreenHeight
   4+ E139 D2 47 E1    >                        jp		nc,l2_pp_dont_plot
   5+ E13C C5                                   push    bc								; bank select destroys bc so need to save it
   6+ E13D                                  ;	ld      a,b
   7+ E13D CD 67 E0                             call    asm_l2_row_bank_select
   8+ E140 C1                                   pop     bc
   9+ E141 47                                   ld      b,a
  10+ E142 60                                   ld      h,b								; hl now holds ram address after bank select
  11+ E143 69                                   ld      l,c
  12+ E144 F1                                   pop     af								; a = colour to plott
  13+ E145 77                                   ld      (hl),a
  14+ E146 C9                                   ret
  15+ E147 F1           l2_pp_dont_plot:        pop     af
  16+ E148 C9                                   ret
  17+ E149
  18+ E149              ; y aixs bounds check must have been done before calling this
  19+ E149 F5           l2_plot_pixel_no_check: push    af
  20+ E14A C5                                   push    bc								; bank select destroys bc so need to save it
  21+ E14B 78                                   ld      a,b                             ; determine target bank
  22+ E14C CD 67 E0                             call    asm_l2_row_bank_select
  23+ E14F C1                                   pop     bc
  24+ E150 47                                   ld      b,a                             ; b now adjusted for bank, c = column
  25+ E151 60 69                                ld      hl,bc                           ; hl now holds ram address after bank select
  26+ E153 F1                                   pop     af								; a = colour to plott
  27+ E154 77                                   ld      (hl),a                          ; poke to ram
  28+ E155 C9                                   ret
  29+ E156
  30+ E156              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  31+ E156              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  32+ E156 E5           l2_plot_pixel_no_bank:  push 	hl
  33+ E157 60                                   ld 		h,b								; hl now holds ram address after bank select
  34+ E158 69                                   ld 		l,c
  35+ E159 77                                   ld 		(hl),a
  36+ E15A E1                                   pop		hl
  37+ E15B C9                                   ret
  38+ E15C
  39+ E15C F5           ShipPixel:              push    af
  40+ E15D 78                                   ld      a,b
  41+ E15E FE 7F                                cp      127
  42+ E160 D0                                   ret     nc
  43+ E161 F1                                   pop     af
  44+ E162 18 E5                                jr      l2_plot_pixel_no_check
  45+ E164                                      ;***Implicit ret due to jr
  46+ E164
  47+ E164              ; in bc = yx iyl = colour
  48+ E164 78           DebrisPixel:            ld      a,b
  49+ E165 FE 7F                                cp      127
  50+ E167 D0                                   ret     nc
  51+ E168 FD 7D                                ld      a, iyl
  52+ E16A 18 DD                                jr      l2_plot_pixel_no_check
  53+ E16C                                      ;***Implicit ret due to jr
  54+ E16C
  55+ E16C F5           l2_plot_pixel_y_test:   push	af
  56+ E16D 78                                   ld		a,b
  57+ E16E FE C0                                cp		192
  58+ E170 30 03                                jr		nc,.clearup
  59+ E172 F1                                   pop		af
  60+ E173 18 C0                                jr		l2_plot_pixel
  61+ E175 F1           .clearup:               pop		af
  62+ E176 C9                                   ret
  63+ E177
  64+ E177              l2_point_pixel_y_safe:	MACRO
  65+ E177 ~            						push	hl
  66+ E177 ~            						push	bc
  67+ E177 ~            						call	l2_plot_pixel
  68+ E177 ~            						pop		bc
  69+ E177 ~            						pop		hl
  70+ E177              						ENDM
  71+ E177
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
 727  E177                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E177
   2+ E177              l2_print_chr_at:
   3+ E177              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E177              ; "Need a version that also prints absence of character"
   5+ E177 7A           	ld		a,d
   6+ E178 FE 20        	cp		32
   7+ E17A 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E17C FE 7F        	cp		127
   9+ E17E 30 3B        	jr		nc,.InvalidCharacter
  10+ E180              .ValidCharater:
  11+ E180 26 00        	ld		h,0
  12+ E182 6A           	ld		l,d
  13+ E183 29           	add		hl,hl						; * 2
  14+ E184 29           	add		hl,hl						; * 4
  15+ E185 29           	add		hl,hl						; * 8 to get byte address
  16+ E186 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E18A 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E18B 23           	inc		hl							; skip first byte
  19+ E18C 16 07        	ld		d,7
  20+ E18E              .PrintCharLoop:
  21+ E18E D5           	push	de
  22+ E18F 7E           	ld		a,(hl)
  23+ E190 FE 00        	cp		0
  24+ E192 28 21        	jr		z,.NextRowNoBCPop
  25+ E194              .PrintARow:
  26+ E194 C5           	push	bc							; save row col
  27+ E195 16 07        	ld		d,7							; d is loop row number now
  28+ E197              .PrintPixelLoop:
  29+ E197 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E198              .PrintTheRow:
  31+ E198 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E19A F5           	push	af							; save character byte
  33+ E19B CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E19D 20 04        	jr		nz,.PixelToPrint
  35+ E19F              .NoPixelToPrint:
  36+ E19F 3E E3        	ld		a,$E3
  37+ E1A1 18 01        	jr		.HaveSetPixelColour
  38+ E1A3              .PixelToPrint:
  39+ E1A3 7B           	ld		a,e							; Get Colour
  40+ E1A4              .HaveSetPixelColour
  41+ E1A4 E5           	push	hl
  42+ E1A5              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E1A5              .BankOnFirstOnly:
  44+ E1A5 F5           	push	af
  45+ E1A6 7A           	ld		a,d
  46+ E1A7 FE 07        	cp		7
  47+ E1A9 28 11        	jr		z,.PlotWithBank
  48+ E1AB              .PlotNoBank:
  49+ E1AB F1           	pop		af
  50+ E1AC 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E1AD 69           	ld 		l,c
  52+ E1AE 77           	ld 		(hl),a
  53+ E1AF              .IterateLoop:
  54+ E1AF              ;	pop		bc
  55+ E1AF E1           	pop		hl
  56+ E1B0 F1           	pop		af							; a= current byte shifted
  57+ E1B1 15           	dec		d						 	; do dec after inc as we amy
  58+ E1B2 20 E3        	jr		nz,.PrintPixelLoop
  59+ E1B4              .NextRow:
  60+ E1B4 C1           	pop		bc							; Current Col Row
  61+ E1B5              .NextRowNoBCPop:
  62+ E1B5 D1           	pop		de							; d= row loop
  63+ E1B6 04           	inc		b							; Down 1 row
  64+ E1B7 23           	inc		hl							; Next character byte
  65+ E1B8 15           	dec		d							; 1 done now
  66+ E1B9 20 D3        	jr		nz,.PrintCharLoop
  67+ E1BB              .InvalidCharacter:
  68+ E1BB C9           	ret
  69+ E1BC              .PlotWithBank:
  70+ E1BC F1           	pop		af
  71+ E1BD CD 35 E1     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E1C0 18 ED        	jr		.IterateLoop
  73+ E1C2
  74+ E1C2              l2_print_at:
  75+ E1C2              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E1C2              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E1C2 7E           	ld	a,(hl)							; Return if empty string
  78+ E1C3 FE 00        	cp	0
  79+ E1C5 C8           	ret	z
  80+ E1C6 E5           	push	hl
  81+ E1C7 D5           	push	de
  82+ E1C8 C5           	push	bc
  83+ E1C9 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E1CA CD 77 E1     	call 	l2_print_chr_at
  85+ E1CD C1           	pop		bc
  86+ E1CE D1           	pop		de
  87+ E1CF E1           	pop		hl
  88+ E1D0              .Move8Pixlestoright:
  89+ E1D0 08           	ex		af,af'
  90+ E1D1 79           	ld		a,c
  91+ E1D2 C6 08        	add		8
  92+ E1D4 4F           	ld		c,a
  93+ E1D5 08           	ex		af,af'
  94+ E1D6 23           	inc		hl
  95+ E1D7 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E1D9
  97+ E1D9
  98+ E1D9              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E1D9              ; "Need a version that also prints absence of character"
 100+ E1D9              ; removed blank line optimisation as we need spaces printed
 101+ E1D9 7A           l2_print_7chr_at:       ld		a,d
 102+ E1DA FE 1F                                cp		31
 103+ E1DC 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E1DE FE 7F                                cp		127
 105+ E1E0 30 39                                jr		nc,.InvalidCharacter
 106+ E1E2 26 00        .ValidCharater:         ld		h,0
 107+ E1E4 6A                                   ld		l,d
 108+ E1E5 29                                   add		hl,hl						; * 2
 109+ E1E6 29                                   add		hl,hl						; * 4
 110+ E1E7 29                                   add		hl,hl						; * 8 to get byte address
 111+ E1E8 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E1EC 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E1ED 23                                   inc		hl							; skip first byte
 114+ E1EE 16 07                                ld		d,7
 115+ E1F0 D5           .PrintCharLoop:         push	de
 116+ E1F1 7E                                   ld		a,(hl)
 117+ E1F2                                      ;cp		0
 118+ E1F2                                      ;jr		z,.NextRowNoBCPop
 119+ E1F2 C5           .PrintARow:             push	bc							; save row col
 120+ E1F3 16 06                                ld		d,6							; d is loop row number now
 121+ E1F5 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E1F6 28 1C                                jr		z,.NextRow
 123+ E1F8 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E1FA F5                                   push	af							; save character byte
 125+ E1FB CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E1FD 20 04                                jr		nz,.PixelToPrint
 127+ E1FF 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E201 18 01                                jr		.HaveSetPixelColour
 129+ E203 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E204 E5           .HaveSetPixelColour		push	hl
 131+ E205                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E205 F5           .BankOnFirstOnly:       push	af
 133+ E206 7A                                   ld		a,d
 134+ E207 FE 06                                cp		6
 135+ E209 28 11                                jr		z,.PlotWithBank
 136+ E20B F1           .PlotNoBank:            pop		af
 137+ E20C 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E20D 69                                   ld 		l,c
 139+ E20E 77                                   ld 		(hl),a
 140+ E20F              .IterateLoop:	        ;	pop		bc
 141+ E20F E1                                   pop		hl
 142+ E210 F1                                   pop		af							; a= current byte shifted
 143+ E211 15                                   dec		d						 	; do dec after inc as we amy
 144+ E212 20 E1                                jr		nz,.PrintPixelLoop
 145+ E214 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E215 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E216 04                                   inc		b							; Down 1 row
 148+ E217 23                                   inc		hl							; Next character byte
 149+ E218 15                                   dec		d							; 1 done now
 150+ E219 20 D5                                jr		nz,.PrintCharLoop
 151+ E21B C9           .InvalidCharacter:      ret
 152+ E21C F1           .PlotWithBank:          pop		af
 153+ E21D CD 35 E1                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E220 18 ED                                jr		.IterateLoop
 155+ E222
 156+ E222              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E222              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E222 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E223 FE 00                                cp	0
 160+ E225 C8                                   ret	z
 161+ E226 E5                                   push	hl
 162+ E227 D5                                   push	de
 163+ E228 C5                                   push	bc
 164+ E229 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E22A CD D9 E1                             call 	l2_print_7chr_at
 166+ E22D C1                                   pop		bc
 167+ E22E D1                                   pop		de
 168+ E22F E1                                   pop		hl
 169+ E230 08           .Move7Pixlestoright:	ex		af,af'
 170+ E231 79                                   ld		a,c
 171+ E232 C6 07                                add		7
 172+ E234 4F                                   ld		c,a
 173+ E235 08                                   ex		af,af'
 174+ E236 23                                   inc		hl
 175+ E237 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E239
 177+ E239
# file closed: ./Layer2Graphics/layer2_print_character.asm
 728  E239                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E239              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E239              ; TODO DMA Optimise
   3+ E239 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E23C 53                                   ld      d,e
   5+ E23D 5C                                   ld      e,h
   6+ E23E CD B3 E2                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E241 E1 D1 C1                             pop     bc,,de,,hl
   8+ E244 04                                   inc     b
   9+ E245 15                                   dec     d
  10+ E246 C8                                   ret     z
  11+ E247 18 F0                                jr      l2_draw_fill_box
  12+ E249
  13+ E249              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E249 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E24C 53                                   ld		d,e
  16+ E24D 5F                                   ld		e,a
  17+ E24E 14                                   inc		d
  18+ E24F CD B3 E2                             call	l2_draw_horz_line
  19+ E252 F1 D1 C1                             pop		bc,,de,,af
  20+ E255 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E258 67                                   ld		h,a							;save color whilst b = row + height
  22+ E259 78                                   ld		a,b
  23+ E25A 82                                   add		a,d
  24+ E25B 47                                   ld		b,a
  25+ E25C 53                                   ld		d,e							; d = width
  26+ E25D 14                                   inc		d							; Extra pixel for width
  27+ E25E 5C                                   ld		e,h							; e = colour
  28+ E25F CD B3 E2                             call	l2_draw_horz_line
  29+ E262 F1 D1 C1                             pop		bc,,de,,af
  30+ E265 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E268 04                                   inc		b							; save 2 pixles
  32+ E269 15                                   dec		d
  33+ E26A 5F                                   ld		e,a							; e = color
  34+ E26B CD 04 E3                             call	l2_draw_vert_line
  35+ E26E F1 D1 C1                             pop		bc,,de,,af
  36+ E271 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E272 15                                   dec		d
  38+ E273 67                                   ld		h,a							;save color whilst c = col + width
  39+ E274 79                                   ld		a,c
  40+ E275 83                                   add		a,e
  41+ E276 4F                                   ld		c,a
  42+ E277 5C                                   ld		e,h							; e = color
  43+ E278 CD 04 E3                             call	l2_draw_vert_line
  44+ E27B C9                                   ret
  45+ E27C
# file closed: ./Layer2Graphics/layer2_draw_box.asm
 729  E27C                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E27C
   2+ E27C              ;; NOTE DMA is little endian
   3+ E27C 00           l2_horz_pixel           DB 0
   4+ E27D
   5+ E27D 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E281 7D
   6+ E282 7C E2        l2_horz_colr            DW l2_horz_pixel
   7+ E284 00           l2_horz_lenlo           DB 0
   8+ E285 00           l2_horz_lenhi           DB 0
   9+ E286 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E289 00 00        l2_horz_target          DB $00, $00
  11+ E28B CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E28D              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E28D
  14+ E28D
  15+ E28D              ; "l2_draw_horz_dma"
  16+ E28D              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E28D 7B           l2_draw_horz_dma:       ld		a,e                                               ; T=4      ;
  18+ E28E 32 7C E2                             ld		(l2_horz_pixel),a                                 ; T=13     ;
  19+ E291 5A                                   ld      e,d ; saved 3 t states ld		a,d                                               ; T=4      ; e=d   4
  20+ E292 16 00                                ld      d,0; saved 3 t states ld 		(l2_horz_lenlo),a                                 ; T=13     ; d = 0  7
  21+ E294 ED 53 84 E2                          ld      (l2_horz_lenlo),de; saved 3 t states xor 	a                                                 ; T=4      ; t 20  31
  22+ E298                                      ; saved 3 t states ld ld 		(l2_horz_lenhi),a                                 ; T=13     ;
  23+ E298                                    ; saved 4 t states  ld		h,b                           ;          ;
  24+ E298                                    ; saved 4 t states  ld		l,c                           ;          ;
  25+ E298 ED 43 89 E2                          ld      (l2_horz_target),bc ; saved 4 t states  was , hl  ; T=20     ;
  26+ E29C 21 7D E2     .write_dma:             ld 		hl, l2_horz_line                                  ;          ;
  27+ E29F 06 10                                ld 		b, l2_horz_cmd_len                                ;
  28+ E2A1 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  29+ E2A3 ED B3                                otir                                                      ;
  30+ E2A5 C9                                   ret
  31+ E2A6
  32+ E2A6              ; "bc = left side row,col, d = length, e = color"
  33+ E2A6 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E2A7 C5                                   push 	bc							; save row col
  35+ E2A8 78                                   ld   	a,b
  36+ E2A9 CD 67 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E2AC C1                                   pop  	bc
  38+ E2AD 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E2AE D1                                   pop  	de							; get length back
  40+ E2AF CD 8D E2                             call    l2_draw_horz_dma
  41+ E2B2 C9                                   ret
  42+ E2B3
  43+ E2B3              ; "l2_draw_horz_line"
  44+ E2B3              ; "bc = left side row,col, d = length, e = color"
  45+ E2B3              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E2B3 7A           l2_draw_horz_line:      ld		a,d
  47+ E2B4 FE 00                                cp 		0							; if its zero length then just return
  48+ E2B6 C8           .zerolengthexit:        ret		z
  49+ E2B7 FE 01        .isitlen1:              cp 		1
  50+ E2B9 CA DB E2                             jp 		z,.l2_draw_horz_line_1
  51+ E2BC FE 0A        .longenoughtfordma:     cp  10
  52+ E2BE C3 A6 E2                             jp  l2_draw_horz_dma_bank
  53+ E2C1 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E2C3 78                                   ld   	a,b
  55+ E2C4 CD 67 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E2C7 C1                                   pop  	bc
  57+ E2C8 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E2C9 69                                   ld   	l,c
  59+ E2CA D1                                   pop  	de							; get length back
  60+ E2CB 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E2CC 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E2CD 82                                   add  	a,d
  63+ E2CE 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E2D0 3E FF        .clipat255:             ld   	a,$FF
  65+ E2D2 91                                   sub  	c							; a holds clipped length
  66+ E2D3 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E2D4 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E2D6 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E2D7 23                                   inc hl
  70+ E2D8 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E2DA C9                                   ret
  72+ E2DB 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E2DC C3 35 E1                             jp		l2_plot_pixel				; hijack return
  74+ E2DF
  75+ E2DF              ; "l2_draw_horz_line_to"
  76+ E2DF              ; "bc = left side row,col, d right pixel, e = color"
  77+ E2DF 7A           l2_draw_horz_line_to:   ld 		a,d
  78+ E2E0 B9                                   cp 		c
  79+ E2E1 30 04                                jr		nc, .noswap
  80+ E2E3 28 07                                jr      z, .singlepixel
  81+ E2E5 51           .swap:                  ld		d,c
  82+ E2E6 4F                                   ld		c,a
  83+ E2E7 7A           .noswap:                ld		a,d
  84+ E2E8 91                                   sub		c
  85+ E2E9              ;                        dec		a							; so now its length not offset
  86+ E2E9 57                                   ld		d,a
  87+ E2EA 18 C7                                jr 		l2_draw_horz_line			; hijack routine and return statements
  88+ E2EC 7B           .singlepixel:           ld		a,e
  89+ E2ED C3 35 E1                             jp		l2_plot_pixel				; hijack return
  90+ E2F0
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
 730  E2F0                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E2F0              ; ">l2_draw_vert_segment"
   2+ E2F0              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E2F0              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E2F0 7A           l2_draw_vert_segment:   ld		a,d
   5+ E2F1 FE 00        .emptylinecheck:	    cp 		0
   6+ E2F3 C8                                   ret		z
   7+ E2F4 FE 01        .justonepixel	        cp		1
   8+ E2F6 20 02                                jr		nz, .multiplepixelsLoop
   9+ E2F8 73                                   ld		(hl),e
  10+ E2F9 C9                                   ret
  11+ E2FA              .multiplepixelsLoop:
  12+ E2FA 7C           .endofbankcheck:        ld   	a,h
  13+ E2FB FE 40                                cp   	64
  14+ E2FD D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E2FE 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E2FF 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E300 15                                   dec		d
  18+ E301 C8                                   ret		z
  19+ E302 18 F6                                jr		.multiplepixelsLoop
  20+ E304
  21+ E304              ; ">l2_draw_vert_line"
  22+ E304              ; ">bc = row col d = length, e = color"
  23+ E304 78           l2_draw_vert_line:      ld 		a,b
  24+ E305 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E307 D0                                   ret 	nc							; can't start off the screen
  26+ E308 7A           .emptylinecheck:        ld		a,d
  27+ E309 FE 00                                cp		0
  28+ E30B C8                                   ret		z
  29+ E30C FE 01                                cp		1
  30+ E30E 20 04                                jr		nz,.multiplepixels
  31+ E310 CD 35 E1     .itsonepixel:           call	l2_plot_pixel
  32+ E313 C9                                   ret
  33+ E314              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E314 7A           .clipto192:             ld		a,d							; get length
  35+ E315 80                                   add		a,b							; a= row + length
  36+ E316 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E318 FE C0                                cp		SCREEN_HEIGHT
  38+ E31A 38 08                                jr		c, .noclipneeded
  39+ E31C 78           .needtoclip             ld		a,b
  40+ E31D 82                                   add		a,d
  41+ E31E D6 C0                                sub		SCREEN_HEIGHT
  42+ E320 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E321 7A                                   ld		a,d
  44+ E322 94                                   sub		h
  45+ E323 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E324              ; so now BC = row col, d = length clipped, e = color
  47+ E324 78           .noclipneeded:          ld		a,b
  48+ E325 C5 D5                                push	bc,,de
  49+ E327 CD 67 E0                             call 	asm_l2_row_bank_select
  49+ E32A               	 	; we now have poke address and a variable holding current bank number
  50+ E32A D1 C1                                pop		bc,,de
  51+ E32C 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E32D 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E32E CD F0 E2                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E331 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E332 FE 00                                cp		0
  56+ E334 28 27                                jr		z, .doneplotting
  57+ E336 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E339 3C                                   inc		a
  59+ E33A 06 00                                ld		b,0
  60+ E33C C5 D5                                push	bc,,de
  61+ E33E CD 50 E0                             call 	asm_l2_bank_n_select
  62+ E341 D1 C1                                pop     bc,,de
  63+ E343 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E344 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E345 CD F0 E2                             call	l2_draw_vert_segment
  66+ E348 7A                                   ld		a,d
  67+ E349 FE 00                                cp		0
  68+ E34B 28 10                                jr		z,.doneplotting
  69+ E34D 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E350 3C                                   inc		a
  71+ E351 06 00                                ld		b,0
  72+ E353 C5 D5                                push	bc,,de
  73+ E355 CD 50 E0                             call 	asm_l2_bank_n_select
  74+ E358 D1                                   pop		de
  75+ E359 E1                                   pop		hl							; hl = bc
  76+ E35A CD F0 E2                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E35D C9           .doneplotting:	        ret
  78+ E35E
  79+ E35E              ; ">l2_draw_vert_line_to"
  80+ E35E              ; ">bc = row col d = to position, e = color"
  81+ E35E 78           l2_draw_vert_line_to:   ld		a,b
  82+ E35F BA                                   cp		d
  83+ E360 38 02                                jr		c, .noyswap
  84+ E362 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E363 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E364 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E365 90                                   sub		b
  88+ E366 3C                                   inc		a			; so now its length not offset
  89+ E367 57                                   ld		d,a
  90+ E368 18 9A                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E36A                                      ; no return needed
  92+ E36A
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
 731  E36A                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E36A
   2+ E36A              l2_draw_box_to:
   3+ E36A              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E36A              ; ">NOT IMPLEMENTED YET"
   5+ E36A C9           	ret
   6+ E36B
   7+ E36B              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E36B              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E36B              l2decbstep	EQU $05
  10+ E36B              l2incbstep	EQU	$04
  11+ E36B              l2deccstep	EQU $0D
  12+ E36B              l2inccstep	EQU	$0C
  13+ E36B              		; l2 deltas are signed
  14+ E36B 00 00        l2deltaY	DW	0
  15+ E36D 00 00        l2deltaX	DW	0
  16+ E36F 00           l2deltaYsq	db	0
  17+ E370 00           l2deltaXsq	db	0
  18+ E371 00           l2deltaYn	db	0
  19+ E372 00           l2deltaXn	db	0
  20+ E373 00           l2deltaYsqn	db	0
  21+ E374 00           l2deltaXsqn	db	0
  22+ E375 00           l2linecolor	db	0
  23+ E376 00 00        l2fraction	dw	0
  24+ E378 00 00        l2e2		dw	0
  25+ E37A 00           l2way		db	0
  26+ E37B 00 00        l2targetPtr	dw	0
  27+ E37D              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  28+ E37D 00 00 00...  l2targetArray1 ds	256
  29+ E47D 00 00 00...  l2targetArray2 ds	256
  30+ E57D              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  31+ E57D              ;;plotLine(int x0, int y0, int x1, int y1)
  32+ E57D              ;;    dx =  abs(x1-x0);
  33+ E57D              ;;    sx = x0<x1 ? 1 : -1;
  34+ E57D              ;;    dy = -abs(y1-y0);
  35+ E57D              ;;    sy = y0<y1 ? 1 : -1;
  36+ E57D              ;;    err = dx+dy;  /* error value e_xy */
  37+ E57D              ;;    while (true)   /* loop */
  38+ E57D              ;;        plot(x0, y0);
  39+ E57D              ;;        if (x0==x1 && y0==y1) break;
  40+ E57D              ;;        e2 = 2*err;
  41+ E57D              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  42+ E57D              ;;            err += dy;
  43+ E57D              ;;            x0 += sx;
  44+ E57D              ;;        end if
  45+ E57D              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  46+ E57D              ;;            err += dx;
  47+ E57D              ;;            y0 += sy;
  48+ E57D              ;;        end if
  49+ E57D              ;;    end while
  50+ E57D              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  51+ E57D              ; ">hl will be either l2targetArray1 or 2"
  52+ E57D              ; NOTE IF WE INTERLEAVE THESE TWO TABLES WE COUDL READ BOTH X POS as a 16 bit read
  53+ E57D FE 01        l2_draw_diagonal_save:  cp		1
  54+ E57F 28 06                                jr		z,l2S_ItsArray1
  55+ E581 21 7D E4                             ld		hl,l2targetArray2
  56+ E584 C3 8A E5                             jp		l2S_setTarget
  57+ E587 21 7D E3     l2S_ItsArray1:	        ld		hl,l2targetArray1
  58+ E58A 22 7B E3     l2S_setTarget:	        ld		(l2targetPtr),hl
  59+ E58D              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  60+ E58D 32 75 E3                             ld		(l2linecolor),a					;save colour for later
  61+ E590 21 00 00                             ld		hl,0                            ;
  62+ E593 22 6D E3                             ld		(l2deltaX),hl                   ;
  63+ E596 22 6B E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
  64+ E599 78           l2S_preSort:            ld		a,b								;
  65+ E59A                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
  65+ E59A BA          >                        cp      d
  65+ E59B DA A3 E5    >                        jp		c, l2S_noYSort
  66+ E59E              l2S_SortBasedOnY:	    ldhlbc									;
  66+ E59E 60          >                        ld		h,b
  66+ E59F 69          >                        ld		l,c
  67+ E5A0 EB                                   ex		de,hl                           ;
  68+ E5A1                                      ldbchl									; swap over bc and de using hl as an intermediate
  68+ E5A1 44          >                        ld		b,h
  68+ E5A2 4D          >                        ld		c,l
  69+ E5A3 DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
  70+ E5A5 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
  71+ E5A7 79           l2S_setXLen:            ld		a,c                             ;
  72+ E5A8                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
  72+ E5A8 BB          >                        cp      e
  72+ E5A9 DA B5 E5    >                        jp		c, l2S_PosXLen
  73+ E5AC 79           l2S_NegXLen:            ld		a,c                             ;
  74+ E5AD 93                                   sub     e                               ;
  75+ E5AE 32 6D E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
  76+ E5B1 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
  77+ E5B3 18 07                                jr		l2S_XINCDEC
  78+ E5B5 7B           l2S_PosXLen:	        ld		a,e                             ;
  79+ E5B6 91                                   sub		c                               ;
  80+ E5B7 32 6D E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
  81+ E5BA 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
  82+ E5BC              l2S_XINCDEC:
  83+ E5BC 32 28 E6     	ld		(l2S_adjustCol),a				;
  84+ E5BF 32 58 E6     	ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
  85+ E5C2              l2S_setYLen
  86+ E5C2 7A           	ld		a,d							 	; presorted on Y so it is now always positive
  87+ E5C3 90           	sub		b
  88+ E5C4 32 6B E3     	ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
  89+ E5C7              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
  90+ E5C7              ldS_FracDYltDX:								;
  91+ E5C7 2A 6B E3     	ld		hl,(l2deltaY)					; Fraction = dY - dX
  92+ E5CA ED 5B 6D E3  	ld		de,(l2deltaX)
  93+ E5CE              	ClearCarryFlag
  93+ E5CE B7          >                        or a
  94+ E5CF ED 52        	sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
  95+ E5D1 EB           	ex		de,hl
  96+ E5D2 FD 62        	ld		iyh,d							; we will use IY reg for fractions
  97+ E5D4 FD 6B        	ld		iyl,e
  98+ E5D6 F2 FB E5     	jp		p,l2S_fracIsPositive
  99+ E5D9              l2S_fracIsNegative:
 100+ E5D9              	NegIY
 100+ E5D9 AF          >                    xor a
 100+ E5DA FD 95       >                    sub iyl
 100+ E5DC FD 6F       >                    ld iyl,a
 100+ E5DE 9F          >                    sbc a,a
 100+ E5DF FD 94       >                    sub iyh
 100+ E5E1 FD 67       >                    ld iyh,a
 101+ E5E3              	ShiftIYRight1
 101+ E5E3 FD 7C       >			   ld 	a,iyh
 101+ E5E5 CB 3F       >			   srl 	a
 101+ E5E7 FD 67       >			   ld	iyh,a
 101+ E5E9 FD 7D       >			   ld 	a,iyl
 101+ E5EB 1F          >			   rra
 101+ E5EC FD 6F       >			   ld	iyl,a
 102+ E5EE              	NegIY
 102+ E5EE AF          >                    xor a
 102+ E5EF FD 95       >                    sub iyl
 102+ E5F1 FD 6F       >                    ld iyl,a
 102+ E5F3 9F          >                    sbc a,a
 102+ E5F4 FD 94       >                    sub iyh
 102+ E5F6 FD 67       >                    ld iyh,a
 103+ E5F8 C3 06 E6     	jp		l2S_SkipCalcInc					; so we have a negative frac
 104+ E5FB              l2S_fracIsPositive:
 105+ E5FB              	ShiftIYRight1
 105+ E5FB FD 7C       >			   ld 	a,iyh
 105+ E5FD CB 3F       >			   srl 	a
 105+ E5FF FD 67       >			   ld	iyh,a
 105+ E601 FD 7D       >			   ld 	a,iyl
 105+ E603 1F          >			   rra
 105+ E604 FD 6F       >			   ld	iyl,a
 106+ E606              l2S_SkipCalcInc:
 107+ E606              l2S_Loop:									; As we loop, bc = to plot current XY
 108+ E606 2A 7B E3     	ld		hl,(l2targetPtr)				; Insert into respective array
 109+ E609 78           	ld		a,b
 110+ E60A ED 31        	add		hl,a
 111+ E60C 71           	ld		(hl),c
 112+ E60D              l2S_CheckIfEnd:
 113+ E60D DD 7C        	ld		a,ixh
 114+ E60F              	JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 114+ E60F B8          >                        cp     b
 114+ E610 D2 16 E6    >                        jp		nc,l2S_CheckXPos
 115+ E613 C3 1A E6     	jp		l2S_Continue
 116+ E616              l2S_CheckXPos:
 117+ E616 79           	ld		a,c
 118+ E617              	ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 118+ E617 DD BD       >                        cp    ixl
 118+ E619 D0          >                        ret	 nc
 119+ E61A              l2S_Continue:
 120+ E61A              l2S_HNegative:
 121+ E61A FD 7C        	ld		a,iyh
 122+ E61C CB 7F        	bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 123+ E61E 28 0B        	jr		z,l2S_ErrNotNegative			;
 124+ E620              l2S_ErrNegative:								; if its a negative error update X
 125+ E620 3A 6B E3     	ld		a,(l2deltaY)
 126+ E623 16 00        	ld		d,0
 127+ E625 5F           	ld		e,a
 128+ E626 FD 19        	add		iy,de							; add deltaY(unsinged) to l2fraction
 129+ E628              l2S_adjustCol:
 130+ E628 00           	nop										; this is our inc/dec of X
 131+ E629 18 DB        	jr		l2S_Loop							; repeat loop
 132+ E62B              l2S_ErrNotNegative:
 133+ E62B FD 7C        	ld		a,iyh
 134+ E62D FD B5        	or		iyl
 135+ E62F              	JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 135+ E62F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ E630 CA 49 E6    >                        jp	    z, l2S_ErrZero
 136+ E633              l2S_ErrPositive:								; if its a positive error then we update Y
 137+ E633              	lddeiy
 137+ E633 FD 54       >                        ld		d,iyh
 137+ E635 FD 5D       >                        ld		e,iyl
 138+ E637 EB           	ex		de,hl
 139+ E638 16 00        	ld		d,0
 140+ E63A 3A 6D E3     	ld		a,(l2deltaX)
 141+ E63D 5F           	ld		e,a
 142+ E63E              	ClearCarryFlag
 142+ E63E B7          >                        or a
 143+ E63F ED 52        	sbc		hl,de
 144+ E641 EB           	ex		de,hl
 145+ E642              	ldiyde
 145+ E642 FD 62       >                        ld		iyh,d
 145+ E644 FD 6B       >                        ld		iyl,e
 146+ E646              l2S_adjustRow:									; move Y down by one
 147+ E646 04           	inc		b
 148+ E647 18 BD        	jr		l2S_Loop
 149+ E649              l2S_ErrZero:
 150+ E649 2A 6D E3     	ld		hl,(l2deltaX)
 151+ E64C EB           	ex		de,hl
 152+ E64D 2A 6B E3     	ld		hl,(l2deltaY)
 153+ E650              	ClearCarryFlag
 153+ E650 B7          >                        or a
 154+ E651 ED 52        	sbc		hl,de
 155+ E653 EB           	ex		de,hl
 156+ E654              	ldiyde
 156+ E654 FD 62       >                        ld		iyh,d
 156+ E656 FD 6B       >                        ld		iyl,e
 157+ E658              l2S_adjustCol2:
 158+ E658 00           	nop										; update X and Y
 159+ E659 04           	inc		b
 160+ E65A 18 AA        	jr		l2S_Loop
 161+ E65C
 162+ E65C              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 163+ E65C 32 75 E3     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 164+ E65F 21 00 00                             ld		hl,0                            ;
 165+ E662 22 6D E3                             ld		(l2deltaX),hl                   ;
 166+ E665 22 6B E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 167+ E668 78           l2D_preSort:            ld		a,b								;
 168+ E669                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if equal then verical line picked up earlier
 168+ E669 BA          >                        cp      d
 168+ E66A DA 72 E6    >                        jp		c, l2D_noYSort
 169+ E66D              l2D_SortBasedOnY:	    ldhlbc									;
 169+ E66D 60          >                        ld		h,b
 169+ E66E 69          >                        ld		l,c
 170+ E66F EB                                   ex		de,hl                           ;
 171+ E670                                      ldbchl									; swap over bc and de using hl as an intermediate
 171+ E670 44          >                        ld		b,h
 171+ E671 4D          >                        ld		c,l
 172+ E672 DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 173+ E674 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 174+ E676 79           l2D_setXLen:            ld		a,c                             ;
 175+ E677                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 175+ E677 BB          >                        cp      e
 175+ E678 DA 84 E6    >                        jp		c, l2D_PosXLen
 176+ E67B 79           l2D_NegXLen:            ld		a,c                             ;
 177+ E67C 93                                   sub     e                               ;
 178+ E67D 32 6D E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 179+ E680 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 180+ E682 18 07                                jr		l2D_XINCDEC
 181+ E684 7B           l2D_PosXLen:	        ld		a,e                             ;
 182+ E685 91                                   sub		c                               ;
 183+ E686 32 6D E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 184+ E689 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 185+ E68B 32 FA E6     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 186+ E68E 32 2A E7                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 187+ E691 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 188+ E692 90                                   sub		b
 189+ E693 32 6B E3                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 190+ E696              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 191+ E696 2A 6B E3     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 192+ E699 ED 5B 6D E3                          ld		de,(l2deltaX)
 193+ E69D                                      ClearCarryFlag
 193+ E69D B7          >                        or a
 194+ E69E ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 195+ E6A0 EB                                   ex		de,hl
 196+ E6A1 FD 62                                ld		iyh,d							; we will use IY reg for fractions
 197+ E6A3 FD 6B                                ld		iyl,e
 198+ E6A5 F2 CA E6                             jp		p,l2D_fracIsPositive
 199+ E6A8              l2D_fracIsNegative:     NegIY
 199+ E6A8 AF          >                    xor a
 199+ E6A9 FD 95       >                    sub iyl
 199+ E6AB FD 6F       >                    ld iyl,a
 199+ E6AD 9F          >                    sbc a,a
 199+ E6AE FD 94       >                    sub iyh
 199+ E6B0 FD 67       >                    ld iyh,a
 200+ E6B2                                      ShiftIYRight1
 200+ E6B2 FD 7C       >			   ld 	a,iyh
 200+ E6B4 CB 3F       >			   srl 	a
 200+ E6B6 FD 67       >			   ld	iyh,a
 200+ E6B8 FD 7D       >			   ld 	a,iyl
 200+ E6BA 1F          >			   rra
 200+ E6BB FD 6F       >			   ld	iyl,a
 201+ E6BD                                      NegIY
 201+ E6BD AF          >                    xor a
 201+ E6BE FD 95       >                    sub iyl
 201+ E6C0 FD 6F       >                    ld iyl,a
 201+ E6C2 9F          >                    sbc a,a
 201+ E6C3 FD 94       >                    sub iyh
 201+ E6C5 FD 67       >                    ld iyh,a
 202+ E6C7 C3 D5 E6                             jp		l2D_SkipCalcInc					; so we have a negative frac
 203+ E6CA              l2D_fracIsPositive:     ShiftIYRight1
 203+ E6CA FD 7C       >			   ld 	a,iyh
 203+ E6CC CB 3F       >			   srl 	a
 203+ E6CE FD 67       >			   ld	iyh,a
 203+ E6D0 FD 7D       >			   ld 	a,iyl
 203+ E6D2 1F          >			   rra
 203+ E6D3 FD 6F       >			   ld	iyl,a
 204+ E6D5              l2D_SkipCalcInc:
 205+ E6D5 C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 206+ E6D7 3A 75 E3                             ld		a,(l2linecolor)     			;
 207+ E6DA CD 35 E1                             call	l2_plot_pixel       			; Plot Pixel
 208+ E6DD D1 C1                                pop     bc,,de
 209+ E6DF DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 210+ E6E1                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 210+ E6E1 B8          >                        cp     b
 210+ E6E2 D2 E8 E6    >                        jp		nc,l2D_CheckXPos
 211+ E6E5 C3 EC E6                             jp		l2D_Continue
 212+ E6E8 79           l2D_CheckXPos:          ld		a,c
 213+ E6E9                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 213+ E6E9 DD BD       >                        cp      ixl
 213+ E6EB C8          >                        ret     z
 214+ E6EC              l2D_Continue:
 215+ E6EC FD 7C        l2D_HNegative:			ld		a,iyh
 216+ E6EE CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 217+ E6F0 28 0B                                jr		z,l2D_ErrNotNegative			;
 218+ E6F2 3A 6B E3     l2D_ErrNegative:		ld		a,(l2deltaY)
 219+ E6F5 16 00                                ld		d,0
 220+ E6F7 5F                                   ld		e,a
 221+ E6F8 FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 222+ E6FA 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 223+ E6FB 18 D8                                jr		l2D_Loop							; repeat loop
 224+ E6FD FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 225+ E6FF FD B5                                or		iyl
 226+ E701                                      JumpIfAIsZero l2D_ErrZero					; if there is no error then goto zeroerror
 226+ E701 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 226+ E702 CA 1B E7    >                        jp	    z, l2D_ErrZero
 227+ E705              l2D_ErrPositive:		lddeiy
 227+ E705 FD 54       >                        ld		d,iyh
 227+ E707 FD 5D       >                        ld		e,iyl
 228+ E709 EB                                   ex		de,hl
 229+ E70A 16 00                                ld		d,0
 230+ E70C 3A 6D E3                             ld		a,(l2deltaX)
 231+ E70F 5F                                   ld		e,a
 232+ E710                                      ClearCarryFlag
 232+ E710 B7          >                        or a
 233+ E711 ED 52                                sbc		hl,de
 234+ E713 EB                                   ex		de,hl
 235+ E714                                      ldiyde
 235+ E714 FD 62       >                        ld		iyh,d
 235+ E716 FD 6B       >                        ld		iyl,e
 236+ E718 04           l2D_adjustRow:			inc		b
 237+ E719 18 BA                                jr		l2D_Loop
 238+ E71B 2A 6D E3     l2D_ErrZero:            ld		hl,(l2deltaX)
 239+ E71E EB                                   ex		de,hl
 240+ E71F 2A 6B E3                             ld		hl,(l2deltaY)
 241+ E722                                      ClearCarryFlag
 241+ E722 B7          >                        or a
 242+ E723 ED 52                                sbc		hl,de
 243+ E725 EB                                   ex		de,hl
 244+ E726                                      ldiyde
 244+ E726 FD 62       >                        ld		iyh,d
 244+ E728 FD 6B       >                        ld		iyl,e
 245+ E72A 00           l2D_adjustCol2:         nop										; update X and Y
 246+ E72B 04                                   inc		b
 247+ E72C 18 A7                                jr		l2D_Loop
 248+ E72E              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ E72E
 250+ E72E
 251+ E72E
 252+ E72E
 253+ E72E              ;Loin:				; BBC version of line draw
 254+ E72E              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 255+ E72E              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 256+ E72E              ;	ld		ixh,0							; ixh = s
 257+ E72E              ;	ld		iyh,0							; iyh = swap
 258+ E72E              ;	ld		l,0								; l will hold delta sign flags
 259+ E72E              ;LoinCalcDeltaX:
 260+ E72E              ;	ld		a,e
 261+ E72E              ;	sub		c								; a = deltaX
 262+ E72E              ;	JumpIfPositive LoinPosDx
 263+ E72E              ;LoinNegDx:
 264+ E72E              ;	neg										; carry flag will indicate deltaX was negative
 265+ E72E              ;	ld		l,$80							; set bit 7 of l for negative
 266+ E72E              ;LoinPosDx:
 267+ E72E              ;	ld		ixl,a							; ixl = varP = deltaX
 268+ E72E              ;LoinCalcDeltaY:
 269+ E72E              ;	ld		a,d
 270+ E72E              ;	sub		b								; a= deltaY
 271+ E72E              ;	JumpIfPositive LoinPosDy
 272+ E72E              ;LoinNegDy:
 273+ E72E              ;	neg
 274+ E72E              ;	set		6,l								; set bit 6 of l for negative deltaY
 275+ E72E              ;LoinPosDy:
 276+ E72E              ;	ld		iyl,a							; iyl = varQ = deltaY
 277+ E72E              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 278+ E72E              ;LoinSTPx:									; step along X
 279+ E72E              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 280+ E72E              ;LoinSTPxSwapCoords:
 281+ E72E              ;	dec		iyh								; swap flag now becomes FF
 282+ E72E              ;	ld		a,l								; save l flags
 283+ E72E              ;	ex		de,hl							; save de to hl
 284+ E72E              ;	lddebc									; Point2 = point1
 285+ E72E              ;	ldbchl									; Point1 = point2 that was saved
 286+ E72E              ;	ld		l,a								; get back l flags
 287+ E72E              ;LoinSTPxCorrectOrder:
 288+ E72E              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 289+ E72E              ;	ld		a,iyl							; get delta Y back
 290+ E72E              ;	ld		iy1,$FE							; roll counter
 291+ E72E              ;LionSTPxRollQ:
 292+ E72E              ;	sla		a								; highest bit of delta-Y
 293+ E72E              ;	jp		c,LoinSTPxSteep
 294+ E72E              ;	cp		ixl								; compare with DeltaX
 295+ E72E              ;	jp		cs,LoinSTPxShallow
 296+ E72E              ;LoinSTPxSteep:								;; LI4
 297+ E72E              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 298+ E72E              ;	scf										; force carry flag set
 299+ E72E              ;LoinSTPxShallow:							;; LI5
 300+ E72E              ;	rl		iyl								; rotate iyl which started as FE
 301+ E72E              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 302+ E72E              ;	inc		ihl								; DeltaX += 1
 303+ E72E              ;LoinSTPxYDirection:							; change this to self modifying code
 304+ E72E              ;	ld		a,d
 305+ E72E              ;	JumpIfAGTEn	b,LionDOWN:
 306+ E72E              ;	ld		a,iyh							; swap flag
 307+ E72E              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 308+ E72E              ;LoinSTPxX1Dec:
 309+ E72E              ;	dec		c								; move left 1 pixel as we sawped
 310+ E72E              ;LoinSTPxXCounter:							;; LIL2
 311+ E72E              ;	sub		b
 312+ E72E              ;	if
 313+ E72E              ;
 314+ E72E              ;85 82                   STA &82	   \ R	\ mask byte
 315+ E72E              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 316+ E72E              ;A2 FE                   LDX #&FE	\ roll counter
 317+ E72E              ;86 81                   STX &81		\ Q
 318+ E72E              ;.LIL1	\ roll Q
 319+ E72E              ;0A                      ASL A		\ highest bit of delta-Y
 320+ E72E              ;B0 04                   BCS LI4		\ steep
 321+ E72E              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 322+ E72E              ;90 03                   BCC LI5		\ shallow
 323+ E72E              ;.LI4	\ steep
 324+ E72E              ;E5 1B                   SBC &1B		\ P
 325+ E72E              ;38                      SEC
 326+ E72E              ;.LI5	\ shallow
 327+ E72E              ;26 81                   ROL &81	   \ Q	\ #&FE
 328+ E72E              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 329+ E72E              ;A6 1B                   LDX &1B		\ P
 330+ E72E              ;E8                      INX 		\ Xreg is width
 331+ E72E              ;A5 37                   LDA &37		\ Y2
 332+ E72E              ;E5 35                   SBC &35		\ Y1
 333+ E72E              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 334+ E72E              ;A5 90                   LDA &90		\ SWAP
 335+ E72E              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 336+ E72E              ;CA                      DEX
 337+ E72E              ;.LIL2	\ counter X width
 338+ E72E              ;A5 82                   LDA &82	   \ R	\ mask byte
 339+ E72E              ;51 07                   EOR (&07),Y	\ (SC),Y
 340+ E72E              ;91 07                   STA (&07),Y	\ (SC),Y
 341+ E72E              ;.LI6	\ Xreg correct
 342+ E72E              ;46 82                   LSR &82	   \ R	\ mask byte
 343+ E72E              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 344+ E72E              ;66 82                   ROR &82		\ R
 345+ E72E              ;A5 07                   LDA &07		\ SC
 346+ E72E              ;69 08                   ADC #8		\ next column
 347+ E72E              ;85 07                   STA &07		\ SC
 348+ E72E              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 349+ E72E              ;A5 83                   LDA &83		\ S
 350+ E72E              ;65 81                   ADC &81	   \ Q	\ some low bits
 351+ E72E              ;85 83                   STA &83		\ S
 352+ E72E              ;90 07                   BCC LIC2	\ skip Y adjustment
 353+ E72E              ;88                      DEY
 354+ E72E              ;10 04                   BPL LIC2	\ skip Y adjustment
 355+ E72E              ;C6 08                   DEC &08		\ SC+1
 356+ E72E              ;A0 07                   LDY #7
 357+ E72E              ;.LIC2	\ skip Y adjustment
 358+ E72E              ;CA                      DEX
 359+ E72E              ;D0 DC                   BNE LIL2	\ loop X width
 360+ E72E              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 361+ E72E              ;60                      RTS
 362+ E72E              ;
 363+ E72E              ;.DOWN	\ Line is going to the right and down
 364+ E72E              ;A5 90                   LDA &90		\ SWAP
 365+ E72E              ;F0 07                   BEQ LI9		\ no swap
 366+ E72E              ;CA                      DEX
 367+ E72E              ;.LIL3	\ counter X width
 368+ E72E              ;A5 82                   LDA &82	    \ R \ mask byte
 369+ E72E              ;51 07                   EOR (&07),Y	\ (SC),Y
 370+ E72E              ;91 07                   STA (&07),Y	\ (SC),Y
 371+ E72E              ;.LI9	\ no swap
 372+ E72E              ;46 82                   LSR &82		\ R
 373+ E72E              ;90 08                   BCC LI10	\ still in correct column, hop
 374+ E72E              ;66 82                   ROR &82		\ R
 375+ E72E              ;A5 07                   LDA &07		\ SC
 376+ E72E              ;69 08                   ADC #8		\ next column
 377+ E72E              ;85 07                   STA &07		\ SC
 378+ E72E              ;.LI10	\ this is like an overflow monitor to update Y
 379+ E72E              ;A5 83                   LDA &83		\ S
 380+ E72E              ;65 81                   ADC &81		\ Q
 381+ E72E              ;85 83                   STA &83		\ S
 382+ E72E              ;90 09                   BCC LIC3	\ skip Y adjustment
 383+ E72E              ;C8                      INY
 384+ E72E              ;C0 08                   CPY #8
 385+ E72E              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 386+ E72E              ;E6 08                   INC &08		\ SC+1
 387+ E72E              ;A0 00                   LDY #0
 388+ E72E              ;.LIC3	\ skipped Y adjustment
 389+ E72E              ;CA                      DEX
 390+ E72E              ;D0 DA                   BNE LIL3	\ loop X width
 391+ E72E              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 392+ E72E              ;60                      RTS
 393+ E72E              ;
 394+ E72E              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 395+ E72E              ;A4 35                   LDY &35		\ Y1
 396+ E72E              ;98                      TYA
 397+ E72E              ;A6 34                   LDX &34		\ X1
 398+ E72E              ;C4 37                   CPY &37		\ Y2
 399+ E72E              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 400+ E72E              ;C6 90                   DEC &90		\ SWAP
 401+ E72E              ;A5 36                   LDA &36		\ X2
 402+ E72E              ;85 34                   STA &34		\ X1
 403+ E72E              ;86 36                   STX &36		\ X2
 404+ E72E              ;AA                      TAX
 405+ E72E              ;A5 37                   LDA &37		\ Y2
 406+ E72E              ;85 35                   STA &35		\ Y1
 407+ E72E              ;84 37                   STY &37		\ Y2
 408+ E72E              ;A8                      TAY
 409+ E72E              ;.LI15	\ Y1 Y2 order is now correct
 410+ E72E              ;4A                      LSR A
 411+ E72E              ;4A                      LSR A
 412+ E72E              ;4A                      LSR A
 413+ E72E              ;09 60                   ORA #&60
 414+ E72E              ;85 08                   STA &08	 \ SC+1	\ screen hi
 415+ E72E              ;8A                      TXA 		\ X1
 416+ E72E              ;29 F8                   AND #&F8
 417+ E72E              ;85 07                   STA &07	  \ SC	\ screen lo
 418+ E72E              ;8A                      TXA
 419+ E72E              ;29 07                   AND #7		\ mask index
 420+ E72E              ;AA                      TAX
 421+ E72E              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 422+ E72E              ;85 82                   STA &82	    \ R	\ mask
 423+ E72E              ;A5 35                   LDA &35		\ Y1
 424+ E72E              ;29 07                   AND #7
 425+ E72E              ;A8                      TAY
 426+ E72E              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 427+ E72E              ;A2 01                   LDX #1		\ roll counter
 428+ E72E              ;86 1B                   STX &1B	    	\ P
 429+ E72E              ;.LIL4	\ roll P
 430+ E72E              ;0A                      ASL A
 431+ E72E              ;B0 04                   BCS LI13	\ do subtraction
 432+ E72E              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 433+ E72E              ;90 03                   BCC LI14	\ less than Q
 434+ E72E              ;.LI13	\ do subtraction
 435+ E72E              ;E5 81                   SBC &81		\ Q
 436+ E72E              ;38                      SEC
 437+ E72E              ;.LI14	\ less than Q
 438+ E72E              ;26 1B                   ROL &1B		\ P
 439+ E72E              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 440+ E72E              ;A6 81                   LDX &81		\ Q
 441+ E72E              ;E8                      INX 		\ adjust height
 442+ E72E              ;A5 36                   LDA &36		\ X2
 443+ E72E              ;E5 34                   SBC &34		\ X1
 444+ E72E              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 445+ E72E              ;18                      CLC
 446+ E72E              ;A5 90                   LDA &90		\ SWAP
 447+ E72E              ;F0 07                   BEQ LI17 	\ skip first point
 448+ E72E              ;CA                      DEX
 449+ E72E              ;.LIL5	\ skipped first point, counter X
 450+ E72E              ;A5 82                   LDA &82	    \ R \ mask byte
 451+ E72E              ;51 07                   EOR (&07),Y	\ (SC),Y
 452+ E72E              ;91 07                   STA (&07),Y	\ (SC),Y
 453+ E72E              ;.LI17	\ skipped first point
 454+ E72E              ;88                      DEY
 455+ E72E              ;10 04                   BPL LI16	\ skip hi adjust
 456+ E72E              ;C6 08                   DEC &08		\ SC+1
 457+ E72E              ;A0 07                   LDY #7		\ new char
 458+ E72E              ;	.LI16	\ skipped hi adjust
 459+ E72E              ;A5 83                   LDA &83		\ S
 460+ E72E              ;65 1B                   ADC &1B		\ P
 461+ E72E              ;85 83                   STA &83		\ S
 462+ E72E              ;90 0C                   BCC LIC5	\ skip, still in same column
 463+ E72E              ;46 82                   LSR &82	  \ R	\ mask
 464+ E72E              ;90 08                   BCC LIC5  	\ no mask bit hop
 465+ E72E              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 466+ E72E              ;A5 07                   LDA &07	  \ SC  \ screen lo
 467+ E72E              ;69 08                   ADC #8		\ next char below
 468+ E72E              ;85 07                   STA &07		\ SC
 469+ E72E              ;.LIC5	\ same column
 470+ E72E              ;CA                      DEX
 471+ E72E              ;D0 DC                   BNE LIL5	\ loop X height
 472+ E72E              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 473+ E72E              ;60                      RTS
 474+ E72E              ;
 475+ E72E              ;.LFT	\ going left
 476+ E72E              ;A5 90                   LDA &90		\ SWAP
 477+ E72E              ;F0 07                   BEQ LI18	\ skip first point
 478+ E72E              ;CA                      DEX 		\ reduce height
 479+ E72E              ;.LIL6	\ counter X height
 480+ E72E              ;A5 82                   LDA &82	   \ R	\ mask byte
 481+ E72E              ;51 07                   EOR (&07),Y	\ (SC),Y
 482+ E72E              ;91 07                   STA (&07),Y	\ (SC),Y
 483+ E72E              ;.LI18
 484+ E72E              ;88                      DEY
 485+ E72E              ;10 04                   BPL LI19	\ skip hi adjust
 486+ E72E              ;C6 08                   DEC &08		\ SC+1
 487+ E72E              ;A0 07                   LDY #7		\ rest char row
 488+ E72E              ;.LI19	\ skipped hi adjust
 489+ E72E              ;A5 83                   LDA &83		\ S
 490+ E72E              ;65 1B                   ADC &1B	    \ P \ some low bits
 491+ E72E              ;85 83                   STA &83		\ S
 492+ E72E              ;90 0D                   BCC LIC6	\ no overflow
 493+ E72E              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 494+ E72E              ;90 09                   BCC LIC6	\ no overflow
 495+ E72E              ;26 82                   ROL &82		\ R
 496+ E72E              ;A5 07                   LDA &07		\ SC
 497+ E72E              ;E9 07                   SBC #7		\ down 1 char
 498+ E72E              ;85 07                   STA &07		\ SC
 499+ E72E              ;18                      CLC
 500+ E72E              ;.LIC6	\ no overflow
 501+ E72E              ;CA                      DEX 		\ height
 502+ E72E              ;D0 DB                   BNE LIL6	\ loop X
 503+ E72E              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 504+ E72E              ;.HL6
 505+ E72E              ;60                      RTS 		\ end Line drawing
 506+ E72E
 507+ E72E
 508+ E72E              ;;l2_draw_diagonalopt:
 509+ E72E              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 510+ E72E              ;;	push	af
 511+ E72E              ;;	ld		a,b
 512+ E72E              ;;	cp		d
 513+ E72E              ;;	jr		z,.RegularDiagnonal
 514+ E72E              ;;.CheckHorz:
 515+ E72E              ;;	ld		a,c
 516+ E72E              ;;	cp		e
 517+ E72E              ;;	jr		z,.horizontalLine
 518+ E72E              ;;.RegularDiagnonal:
 519+ E72E              ;;	pop		af
 520+ E72E              ;;	call diag
 521+ E72E
 522+ E72E
 523+ E72E              ;;l2_signed_mul2a:
 524+ E72E              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 525+ E72E              ;;	TEST	$80
 526+ E72E              ;;	jr		nz, .negativecalc
 527+ E72E              ;;.positivecalc:
 528+ E72E              ;;	ccf
 529+ E72E              ;;	rla
 530+ E72E              ;;	ret
 531+ E72E              ;;.negativecalc:
 532+ E72E              ;;	neg
 533+ E72E              ;;	ccf
 534+ E72E              ;;	rla
 535+ E72E              ;;	neg
 536+ E72E              ;;	ret
 537+ E72E              ;;
 538+ E72E              ;;l2_signed_mul2atohl:
 539+ E72E              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 540+ E72E              ;;	TEST	$80
 541+ E72E              ;;	jr		nz, .negativecalc
 542+ E72E              ;;.positivecalc:
 543+ E72E              ;;	ld		hl,0
 544+ E72E              ;;	ld		l,a
 545+ E72E              ;;	add		hl,a
 546+ E72E              ;;	ret
 547+ E72E              ;;.negativecalc:
 548+ E72E              ;;	neg
 549+ E72E              ;;	ld		hl,0
 550+ E72E              ;;	ld		l,a
 551+ E72E              ;;	neghl
 552+ E72E              ;;	ret
 553+ E72E              ;;
 554+ E72E              ;;l2_e2fractionby2:
 555+ E72E              ;;	ld 		hl,(l2fraction)
 556+ E72E              ;;	push	de
 557+ E72E              ;;	ld		d,h
 558+ E72E              ;;	ld		e,l
 559+ E72E              ;;	add		hl,de
 560+ E72E              ;;	pop		de
 561+ E72E              ;;	ld		(l2e2),hl
 562+ E72E              ;;	ret
 563+ E72E
 564+ E72E
 565+ E72E
 566+ E72E
 567+ E72E
 568+ E72E              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 569+ E72E              ;;//.catchLoop:
 570+ E72E              ;;//	jp .catchLoop
 571+ E72E              ;;//.continue:
 572+ E72E              ;;//    ld      A,D
 573+ E72E              ;;//    sub     H
 574+ E72E              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 575+ E72E              ;;//.DXNegative:
 576+ E72E              ;;//    neg
 577+ E72E              ;;//.DXPositive:
 578+ E72E              ;;//    ld      B,A              ;B <- |delta_x|
 579+ E72E              ;;//    ld      A,E
 580+ E72E              ;;//    sub     L
 581+ E72E              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 582+ E72E              ;;//.DYNegative:
 583+ E72E              ;;//    neg
 584+ E72E              ;;//.DYPositive:
 585+ E72E              ;;//    sub     B               ;|delta_y|
 586+ E72E              ;;//	push	af
 587+ E72E              ;;//	jr		c,.DeltaX
 588+ E72E              ;;//.DeltaY
 589+ E72E              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 590+ E72E              ;;//    ld      H,L             			;then values x and y are swapped
 591+ E72E              ;;//    ld      L,A             			;so the loop will always be performed on the
 592+ E72E              ;;//    ld      A,D             			;x value. A flag must be set to
 593+ E72E              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 594+ E72E              ;;//    ld      E,A             			;instead of (x,y)
 595+ E72E              ;;//.DeltaX:
 596+ E72E              ;;//	ld		a,d
 597+ E72E              ;;//	sub		h
 598+ E72E              ;;//	jr		nc,.TestDY					; x1 < x2
 599+ E72E              ;;//.TestDX:
 600+ E72E              ;;//	ex		de,hl
 601+ E72E              ;;//.TestDY:
 602+ E72E              ;;//	ld		a,e
 603+ E72E              ;;//	sub		l
 604+ E72E              ;;//    ld      A,$01
 605+ E72E              ;;//    jr      NC,.StoreA
 606+ E72E              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 607+ E72E              ;;//.StoreA:
 608+ E72E              ;;//        ld      (l2way),A
 609+ E72E              ;;//.InitLine:
 610+ E72E              ;;//        ld      B,H
 611+ E72E              ;;//        ld      C,L
 612+ E72E              ;;//        ld      A,E
 613+ E72E              ;;//        sub     L
 614+ E72E              ;;//        jr      NC,.EndInit
 615+ E72E              ;;//        ld      A,L
 616+ E72E              ;;//        ld      L,E
 617+ E72E              ;;//        ld      E,A
 618+ E72E              ;;//.EndInit:
 619+ E72E              ;;//        ld      A,E
 620+ E72E              ;;//        sub     L
 621+ E72E              ;;//        rla
 622+ E72E              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 623+ E72E              ;;//        add     A,H
 624+ E72E              ;;//        sub     D
 625+ E72E              ;;//        ld      E,A             ;'d' variable is initialised
 626+ E72E              ;;//        add     A,H
 627+ E72E              ;;//        sub     D
 628+ E72E              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 629+ E72E              ;;//.Loop:
 630+ E72E              ;;//        ld      A,B
 631+ E72E              ;;//        sub     D
 632+ E72E              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 633+ E72E              ;;//        pop     AF
 634+ E72E              ;;//        bit     7,A
 635+ E72E              ;;//        push    AF
 636+ E72E              ;;//        push    AF
 637+ E72E              ;;//        push    BC
 638+ E72E              ;;//        jr      Z,.DrawPoint
 639+ E72E              ;;//        ld      A,B
 640+ E72E              ;;//        ld      B,C
 641+ E72E              ;;//        ld      C,A
 642+ E72E              ;;//.DrawPoint:
 643+ E72E              ;;//		push	hl
 644+ E72E              ;;//		pushbcdeaf
 645+ E72E              ;;//		ld		b,e
 646+ E72E              ;;//		ld		c,d
 647+ E72E              ;;//	ld 		a,(l2linecolor)
 648+ E72E              ;;//	call	l2_plot_pixel
 649+ E72E              ;;//		popafdebc
 650+ E72E              ;;//		pop		hl
 651+ E72E              ;;//        pop     BC
 652+ E72E              ;;//        pop     AF
 653+ E72E              ;;//.TestD:
 654+ E72E              ;;//        bit     7,E
 655+ E72E              ;;//        jr      NZ,.Case1
 656+ E72E              ;;//.Case2:                          ;d >= 0
 657+ E72E              ;;//        ld      A,E
 658+ E72E              ;;//        add     A,H
 659+ E72E              ;;//        ld      E,A
 660+ E72E              ;;//        ld      A,(l2way)
 661+ E72E              ;;//        add     A,C
 662+ E72E              ;;//        ld      C,A
 663+ E72E              ;;//        jr      .EndLoop
 664+ E72E              ;;//.Case1:                          ;d < 0
 665+ E72E              ;;//        ld      A,E
 666+ E72E              ;;//        add     A,L
 667+ E72E              ;;//        ld      E,A
 668+ E72E              ;;//.EndLoop:
 669+ E72E              ;;//        inc     B
 670+ E72E              ;;//        jr      .Loop
 671+ E72E              ;;//.EndLine:
 672+ E72E              ;;//        pop     AF              ;MUST NOT BE REMOVED
 673+ E72E              ;;//        pop     HL              ;can be removed
 674+ E72E              ;;//        pop     DE              ;can be removed
 675+ E72E              ;;//        ret
 676+ E72E
 677+ E72E              ;;	ld		(.l2yadjust),a
 678+ E72E              ;;	call	calcdeltax:
 679+ E72E              ;;	ld		(.l2xadjust),a
 680+ E72E              ;;.calcfraction:							; err(or fraction) = dx+dy;
 681+ E72E              ;;	push	hl
 682+ E72E              ;;	push	de
 683+ E72E              ;;	ld		hl,(l2deltaX)
 684+ E72E              ;;	ld		de,(l2deltaY)
 685+ E72E              ;;	add		hl,de
 686+ E72E              ;;	ld		(l2fraction),hl
 687+ E72E              ;;	pop		de
 688+ E72E              ;;	pop		hl
 689+ E72E              ;;.mainloop:
 690+ E72E              ;;	push	bc
 691+ E72E              ;;	push	de
 692+ E72E              ;;	ld 		a,(l2linecolor)
 693+ E72E              ;;	call	l2_plot_pixel
 694+ E72E              ;;	pop		de
 695+ E72E              ;;	pop		bc
 696+ E72E              ;;.arewefinishedtest
 697+ E72E              ;;	ld		a,b
 698+ E72E              ;;	cp		d
 699+ E72E              ;;	jr		nz,.notthereyet
 700+ E72E              ;;	ld		a,c
 701+ E72E              ;;	cp		e
 702+ E72E              ;;	ret		z
 703+ E72E              ;;.notthereyet:
 704+ E72E              ;;	push	de
 705+ E72E              ;;	call	l2_e2fractionby2			; e2 = 2*err;
 706+ E72E              ;;	pop		de
 707+ E72E              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
 708+ E72E              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
 709+ E72E              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
 710+ E72E              ;;	or		a							;
 711+ E72E              ;;	sbc		hl,de						;
 712+ E72E              ;;	pop		de
 713+ E72E              ;;	jr		z,  .dodycalc				; if equal then calc
 714+ E72E              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
 715+ E72E              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
 716+ E72E              ;;.dodycalc:
 717+ E72E              ;;	ld		hl,(l2fraction)
 718+ E72E              ;;	push	de
 719+ E72E              ;;	ld		de,(l2deltaY)
 720+ E72E              ;;	add		hl,de
 721+ E72E              ;;	ld		(l2fraction),de
 722+ E72E              ;;	pop		de
 723+ E72E              ;;.l2yadjust:
 724+ E72E              ;;	nop
 725+ E72E              ;;.skipdycalc:
 726+ E72E              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
 727+ E72E              ;;	ld		hl,(l2e2)
 728+ E72E              ;;	push	de							;
 729+ E72E              ;;	ld		de,(l2deltaX)				;
 730+ E72E              ;;	or		a							; clear carry flag
 731+ E72E              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
 732+ E72E              ;;	pop		de
 733+ E72E              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
 734+ E72E              ;;	jp		m,.dodxcalc					; was sign bit set
 735+ E72E              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
 736+ E72E              ;;.dodxcalc:
 737+ E72E              ;;	ld		hl,(l2fraction)
 738+ E72E              ;;	push	de
 739+ E72E              ;;	ld		de,(l2deltaX)
 740+ E72E              ;;	add		hl,de
 741+ E72E              ;;	ld		(l2fraction),de
 742+ E72E              ;;	pop		de
 743+ E72E              ;;.l2xadjust:
 744+ E72E              ;;	nop
 745+ E72E              ;;.skipdxcalc:
 746+ E72E              ;;	jr 		.mainloop
 747+ E72E
 748+ E72E
 749+ E72E              ;;/l2_draw_diagonalold:
 750+ E72E              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 751+ E72E              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 752+ E72E              ;;/.sortycoords:
 753+ E72E              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
 754+ E72E              ;;/	cp		d
 755+ E72E              ;;/	jr		nc, .nocoordswap
 756+ E72E              ;;/.swapcoords:
 757+ E72E              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
 758+ E72E              ;;/	lddebc
 759+ E72E              ;;/	ldbchl
 760+ E72E              ;;/.nocoordswap:
 761+ E72E              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
 762+ E72E              ;;/	sub		b							; we have already sorted  so y1 > y0
 763+ E72E              ;;/	ld		(l2deltaY),a
 764+ E72E              ;;/	neg									; DEBUG
 765+ E72E              ;;/	ld		(l2deltaYn),a				; DEBUG
 766+ E72E              ;;/	neg									; DEBUG
 767+ E72E              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
 768+ E72E              ;;/    ld		a,c
 769+ E72E              ;;/	cp		e
 770+ E72E              ;;/	jr		c, .x1GTx0
 771+ E72E              ;;/.x1LTx0
 772+ E72E              ;;/	ld		a,c
 773+ E72E              ;;/	sub		e
 774+ E72E              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
 775+ E72E              ;;/	neg									; DEBUG
 776+ E72E              ;;/	ld		(l2deltaXn),a				; DEBUG
 777+ E72E              ;;/	neg									; DEBUG
 778+ E72E              ;;/	ld		a,l2incbstep
 779+ E72E              ;;/	jr		.setlayershift0
 780+ E72E              ;;/.x1GTx0:
 781+ E72E              ;;/	ld		a,e
 782+ E72E              ;;/	sub		c
 783+ E72E              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
 784+ E72E              ;;/	neg									; DEBUG
 785+ E72E              ;;/	ld		(l2deltaXn),a				; DEBUG
 786+ E72E              ;;/	neg									; DEBUG
 787+ E72E              ;;/	ld		a,l2decbstep
 788+ E72E              ;;/.setlayershift0:
 789+ E72E              ;;/	ld		a,0
 790+ E72E              ;;/	pushbcde
 791+ E72E              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
 792+ E72E              ;;/	popdebc
 793+ E72E              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
 794+ E72E              ;;/.dymuliplyby2:
 795+ E72E              ;;/	ld		a, (l2deltaY)				; dy *= 2
 796+ E72E              ;;/	call	l2_signed_mul2a
 797+ E72E              ;;/	ld		(l2deltaYsq),a
 798+ E72E              ;;/	neg									; DEBUG
 799+ E72E              ;;/	ld		(l2deltaYsqn),a				; DEBUG
 800+ E72E              ;;/	neg									; DEBUG
 801+ E72E              ;;/.dxmuliplyby2:
 802+ E72E              ;;/	ld		a, (l2deltaX)				; dx *= 2
 803+ E72E              ;;/	call	l2_signed_mul2a
 804+ E72E              ;;/	ld		(l2deltaXsq),a
 805+ E72E              ;;/	neg									; DEBUG
 806+ E72E              ;;/	ld		(l2deltaXsqn),a				; DEBUG
 807+ E72E              ;;/	neg									; DEBUG
 808+ E72E              ;;/.plotfirstpixel:
 809+ E72E              ;;/	pushbcde
 810+ E72E              ;;/	ld a,(l2linecolor)
 811+ E72E              ;;/	call	l2_plot_pixel
 812+ E72E              ;;/	popdebc
 813+ E72E              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
 814+ E72E              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
 815+ E72E              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
 816+ E72E              ;;/	cp		(hl)
 817+ E72E              ;;/	jp		m,	.signset
 818+ E72E              ;;/.signclear:
 819+ E72E              ;;/	jp		pe,	.dxLTEdybranch
 820+ E72E              ;;/	jr		.dxGTdybranch
 821+ E72E              ;;/.signset:
 822+ E72E              ;;/	jp		po,	.dxLTEdybranch
 823+ E72E              ;;/.dxGTdybranch:
 824+ E72E              ;;/	ld		a,(l2deltaYsq)
 825+ E72E              ;;/	ld		hl,l2deltaX
 826+ E72E              ;;/	sub		(hl)
 827+ E72E              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
 828+ E72E              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
 829+ E72E              ;;/	ld		a,c
 830+ E72E              ;;/	cp		e
 831+ E72E              ;;/	ret		z							; if x0 = x1 then done
 832+ E72E              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
 833+ E72E              ;;/	ld		a,(l2fraction)
 834+ E72E              ;;/	TEST	$80
 835+ E72E              ;;/	jr		nz,.BranchAskipYstep
 836+ E72E              ;;/	inc		b							; 		++l2_vy0;
 837+ E72E              ;;/	ld		hl,l2deltaXsq
 838+ E72E              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
 839+ E72E              ;;/	ld		(l2fraction),a
 840+ E72E              ;;/.BranchAskipYstep:
 841+ E72E              ;;/.l2stepx1:
 842+ E72E              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
 843+ E72E              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
 844+ E72E              ;;/	ld		hl,l2deltaYsq
 845+ E72E              ;;/	add		a,(hl)
 846+ E72E              ;;/	ld		(l2fraction),a
 847+ E72E              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
 848+ E72E              ;;/	pushbcde
 849+ E72E              ;;/	ld a,(l2linecolor)
 850+ E72E              ;;/	call	l2_plot_pixel
 851+ E72E              ;;/	popdebc
 852+ E72E              ;;/.BranchAloop:
 853+ E72E              ;;/	jr		.BranchAwhile
 854+ E72E              ;;/.dxLTEdybranch:
 855+ E72E              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
 856+ E72E              ;;/	ld		hl, l2deltaY
 857+ E72E              ;;/	sub		(hl)
 858+ E72E              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
 859+ E72E              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
 860+ E72E              ;;/	ld		a,b
 861+ E72E              ;;/	cp		d
 862+ E72E              ;;/	ret		z							; if x0 = x1 then done
 863+ E72E              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
 864+ E72E              ;;/	ld		a,(l2fraction)
 865+ E72E              ;;/	TEST	$80
 866+ E72E              ;;/	jr		nz,.BranchBskipYstep
 867+ E72E              ;;/.l2stepx2
 868+ E72E              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
 869+ E72E              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
 870+ E72E              ;;/	ld		hl,l2deltaYsq
 871+ E72E              ;;/	sub		(hl)
 872+ E72E              ;;/	ld		(l2fraction),a
 873+ E72E              ;;/.BranchBskipYstep:
 874+ E72E              ;;/	ld		hl, l2deltaYsq
 875+ E72E              ;;/	add		a,(hl)
 876+ E72E              ;;/	ld		(l2fraction),a
 877+ E72E              ;;/	inc		b							; ++l2_vy0;
 878+ E72E              ;;/.BranchBplotBCColA:
 879+ E72E              ;;/	pushbcde
 880+ E72E              ;;/	ld a,(l2linecolor)
 881+ E72E              ;;/	call	l2_plot_pixel
 882+ E72E              ;;/	popdebc
 883+ E72E              ;;/.BranchBloop:
 884+ E72E              ;;/	jr		.BranchBwhile
 885+ E72E
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
 732  E72E                  INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_triangle.asm
   1+ E72E
   2+ E72E
   3+ E72E
   4+ E72E 00 00        l2trianglebc	        DW 0
   5+ E730 00 00        l2trianglede	        DW 0
   6+ E732 00 00        l2trianglehl	        DW 0
   7+ E734
   8+ E734              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ E734 C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ E738 CD 5C E6                             call	l2_draw_diagonal		; BC to DE
  11+ E73B F1                                   pop		af
  12+ E73C D1                                   pop		de						; swap DE and HL
  13+ E73D E1                                   pop		hl						; so BC to DE is really to HL
  14+ E73E C1                                   pop		bc
  15+ E73F D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ E741 F5                                   push	af
  17+ E742 CD 5C E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ E745 F1                                   pop		af
  19+ E746 C1                                   pop		bc						; Now bc = original de
  20+ E747 D1                                   pop		de						; de = original hl
  21+ E748 CD 5C E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ E74B C9                                   ret
  23+ E74C
  24+ E74C
  25+ E74C
  26+ E74C
  27+ E74C
# file closed: ./Layer2Graphics/asm_l2_plot_triangle.asm
 733  E74C                  INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_fill_triangle.asm
   1+ E74C              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
   2+ E74C              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
   3+ E74C              ; "note line to   bc = left side row,col, d right pixel, e = color"
   4+ E74C              l2_fillBottomFlatTriangle:;break
   5+ E74C 7D                                   ld		a,l
   6+ E74D 32 75 E3                             ld		(l2linecolor),a
   7+ E750 79                                   ld		a,c
   8+ E751 BB                                   cp		e
   9+ E752 30 08                                jr		nc, .x2gtex1
  10+ E754 DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x1
  11+ E757 DD 2E 02                             ld		ixl,2                           ; list 2 hols  x0 down to x2
  12+ E75A 18 06                                jr		.storepoints
  13+ E75C DD 26 02     .x2gtex1:               ld		ixh,2
  14+ E75F DD 2E 01                             ld		ixl,1
  15+ E762 C5 D5 E5     .storepoints:           push	bc,,de,,hl
  16+ E765 DD 7C                                ld		a,ixh
  17+ E767 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
  18+ E768 54                                   ld		d,h
  19+ E769 CD 7D E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
  20+ E76C E1 D1 C1                             pop		bc,,de,,hl
  21+ E76F C5 E5                                push	bc,,hl
  22+ E771 54                                   ld		d,h                             ; now its bc -> he
  23+ E772 DD 7D                                ld		a,ixl
  24+ E774 CD 7D E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
  25+ E777 E1 C1                                pop		bc,,hl
  26+ E779 50           .SaveForLoop:           ld		d,b
  27+ E77A 5C                                   ld		e,h								; save loop counters
  28+ E77B D5                                   push	de								; de = y0ycommon
  29+ E77C 21 7D E3     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
  30+ E77F 78                                   ld		a,b
  31+ E780 ED 31                                add		hl,a							; hl = l2targetArray1 row b
  32+ E782 7E                                   ld		a,(hl)							;
  33+ E783 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
  34+ E784 21 7D E4                             ld      hl,l2targetArray2
  35+ E787 78                                   ld      a,b
  36+ E788 ED 31                                add     hl,a
  37+ E78A              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
  38+ E78A 7E                                   ld		a,(hl)
  39+ E78B 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
  40+ E78C 3A 75 E3     .SetColour:             ld		a,(l2linecolor)
  41+ E78F 5F                                   ld		e,a								; de = to colour
  42+ E790 C5           .SavePoints:            push	bc								; bc = rowcol
  43+ E791 25                                   dec		h
  44+ E792 E5                                   push	hl								; hl = l2targetArray1[b]
  45+ E793 CD DF E2     .DoLine:	            call	l2_draw_horz_line_to
  46+ E796 E1                                   pop		hl
  47+ E797 C1                                   pop		bc
  48+ E798 04                                   inc		b								; down a rowc
  49+ E799 D1                                   pop		de								; de = from to (and b also = current)
  50+ E79A 14                                   inc		d
  51+ E79B 7B                                   ld		a,e								; while e >= d
  52+ E79C BA                                   cp		d
  53+ E79D 30 DA                                jr 		nc,.SaveForLoop					; Is this the right point??
  54+ E79F C9                                   ret
  55+ E7A0
# file closed: ./Layer2Graphics/asm_l2_fill_triangle.asm
 734  E7A0                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ E7A0
   2+ E7A0 00 00        l2_circle_pos		DW 0
   3+ E7A2 00           l2_circle_colour	DB 0
   4+ E7A3 00           l2_circle_radius	DB 0
   5+ E7A4 00           l2_circle_x			DB 0
   6+ E7A5 00           l2_circle_y			DB 0
   7+ E7A6 00           l2_circle_d			DB 0
   8+ E7A7
   9+ E7A7              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  10+ E7A7 7B           l2_draw_circle:     ld		a,e
  11+ E7A8 32 4E E8                         ld		(.PlotPixel+1),a
  12+ E7AB 7A                               ld		a,d								; get radius
  13+ E7AC A7                               and		a
  14+ E7AD C8                               ret		z
  15+ E7AE FE 01                            cp		1
  16+ E7B0 CA 59 E8                         jp		z,CircleSinglepixel
  17+ E7B3 ED 43 DD E7                      ld		(.Plot1+1),bc					; save origin into DE reg in code
  18+ E7B7 DD 67                            ld		ixh,a							; ixh = raidus
  19+ E7B9 DD 2E 00                         ld		ixl,0
  20+ E7BC 26 00        .calcd:	            ld		h,0
  21+ E7BE 6F                               ld		l,a
  22+ E7BF 29                               add		hl,hl							; hl = r * 2
  23+ E7C0 EB                               ex		de,hl							; de = r * 2
  24+ E7C1 21 03 00                         ld		hl,3
  25+ E7C4 A7                               and		a
  26+ E7C5 ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
  27+ E7C7 44                               ld		b,h
  28+ E7C8 4D                               ld		c,l								; bc = 3 - (r * 2)
  29+ E7C9 21 01 00     .calcdelta:         ld		hl,1
  30+ E7CC 16 00                            ld		d,0
  31+ E7CE DD 5D                            ld		e,ixl
  32+ E7D0 A7                               and		a
  33+ E7D1 ED 52                            sbc		hl,de
  34+ E7D3 11 01 00     .Setde1:            ld		de,1
  35+ E7D6 DD 7C        .CircleLoop:        ld		a,ixh
  36+ E7D8 DD BD                            cp		ixl
  37+ E7DA D8                               ret		c
  38+ E7DB D9           .ProcessLoop:	    exx
  39+ E7DC 11 00 00     .Plot1:             ld		de,0
  40+ E7DF 7B                               ld		a,e
  41+ E7E0 DD 85                            add		a,ixl
  42+ E7E2 4F                               ld		c,a
  43+ E7E3 7A                               ld		a,d
  44+ E7E4 DD 84                            add		a,ixh
  45+ E7E6 47                               ld		b,a
  46+ E7E7 CD 4D E8                         call	.PlotPixel			;CX+X,CY+Y
  47+ E7EA 7B           .Plot2:             ld 		a,e
  48+ E7EB DD 95                            sub 	ixl
  49+ E7ED 4F                               ld 		c,a
  50+ E7EE 7A                               ld 		a,d
  51+ E7EF DD 84                            add 	a,ixh
  52+ E7F1 47                               ld		b,a
  53+ E7F2 CD 4D E8                         call	.PlotPixel			;CX-X,CY+Y
  54+ E7F5 7B           .Plot3:             ld 		a,e
  55+ E7F6 DD 85                            add		a,ixl
  56+ E7F8 4F                               ld 		c,a
  57+ E7F9 7A                               ld 		a,d
  58+ E7FA DD 94                            sub 	ixh
  59+ E7FC 47                               ld 		b,a
  60+ E7FD CD 4D E8                         call	.PlotPixel			;CX+X,CY-Y
  61+ E800 7B           .Plot4:             ld 		a,e
  62+ E801 DD 95                            sub 	ixl
  63+ E803 4F                               ld 		c,a
  64+ E804 7A                               ld 		a,d
  65+ E805 DD 94                            sub 	ixh
  66+ E807 47                               ld 		b,a
  67+ E808 CD 4D E8                         call	.PlotPixel			;CX-X,CY-Y
  68+ E80B 7A           .Plot5:	            ld 		a,d
  69+ E80C DD 85                            add 	a,ixl
  70+ E80E 47                               ld 		b,a
  71+ E80F 7B                               ld 		a,e
  72+ E810 DD 84                            add 	a,ixh
  73+ E812 4F                               ld 		c,a
  74+ E813 CD 4D E8                         call	.PlotPixel			;CY+X,CX+Y
  75+ E816 7A           .Plot6:	            ld 		a,d
  76+ E817 DD 95                            sub 	ixl
  77+ E819 47                               ld 		b,a
  78+ E81A 7B                               ld 		a,e
  79+ E81B DD 84                            add 	a,ixh
  80+ E81D 4F                               ld 		c,a
  81+ E81E CD 4D E8                         call	.PlotPixel			;CY-X,CX+Y
  82+ E821 7A           .Plot7:	            ld 		a,d
  83+ E822 DD 85                            add 	a,ixl
  84+ E824 47                               ld 		b,a
  85+ E825 7B                               ld 		a,e
  86+ E826 DD 94                            sub 	ixh
  87+ E828 4F                               ld 		c,a
  88+ E829 CD 4D E8                         call	.PlotPixel			;CY+X,CX-Y
  89+ E82C 7A           .Plot8:	            ld 		a,d
  90+ E82D DD 95                            sub 	ixl
  91+ E82F 47                               ld		b,a
  92+ E830 7B                               ld 		a,e
  93+ E831 DD 94                            sub 	ixh
  94+ E833 4F                               ld 		c,a
  95+ E834 CD 4D E8                         call	.PlotPixel			;CY-X,CX-Y
  96+ E837 D9                               exx
  97+ E838 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
  98+ E83A 28 03                            jr z,   .draw_circle_1
  99+ E83C 19                               add hl,de			; Delta=Delta+D1
 100+ E83D 18 05                            jr      .draw_circle_2		;
 101+ E83F 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 102+ E840 03                               inc     bc
 103+ E841 03                               inc     bc				; D2=D2+2
 104+ E842 DD 25                            dec     ixh				; Y=Y-1
 105+ E844 03           .draw_circle_2:		inc bc				; D2=D2+2
 106+ E845 03                               inc bc
 107+ E846 13                               inc de				; D1=D1+2
 108+ E847 13                               inc de
 109+ E848 DD 2C                            inc ixl				; X=X+1
 110+ E84A C3 D6 E7                         jp      .CircleLoop
 111+ E84D 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 112+ E84F D5 C5 E5                         push	de,,bc,,hl
 113+ E852 CD 6C E1                         call 	l2_plot_pixel_y_test
 114+ E855 E1 C1 D1                         pop		de,,bc,,hl
 115+ E858 C9                               ret
 116+ E859 7B           CircleSinglepixel:  ld		a,e
 117+ E85A CD 6C E1                         call	l2_plot_pixel_y_test
 118+ E85D C9                               ret
 119+ E85E
 120+ E85E              ; ">l2_draw_clipped_circle HL = Center X 2's c, DE = Center Y 2's c = center , c = radius, b = colour"
 121+ E85E 43           l2_draw_clipped_circle:     ld		b,e                     ; save Colour
 122+ E85F 32 D7 E9                         ld		(.PlotPixel+1),a
 123+ E862 79                               ld		a,c								; get radius
 124+ E863                                  ReturnIfAIsZero
 124+ E863 A7          >                        and     a
 124+ E864 C8          >                        ret     z
 125+ E865                                  JumpIfAEqNusng  1, .circleSinglepixel
 125+ E865 FE 01       >                        cp     1
 125+ E867 CA E4 E9    >                        jp      z,.circleSinglepixel
 126+ E86A ED 53 97 E8                      ld		(.Plot1Y+1),de					; save origin into DE and HL
 127+ E86E 22 9A E8                         ld      (.Plot1X+1),hl                  ; .
 128+ E871 DD 67                            ld		ixh,a							; ixh = raidus
 129+ E873 DD 2E 00                         ld		ixl,0						    ; ixl = 0
 130+ E876 26 00        .calcd:	            ld		h,0                             ; hl = radius
 131+ E878 6F                               ld		l,a                             ; .
 132+ E879 29                               add		hl,hl							; hl = r * 2
 133+ E87A EB                               ex		de,hl							; de = r * 2
 134+ E87B 21 03 00                         ld		hl,3                            ; hl = 3 - (r * 2)
 135+ E87E A7                               and		a                               ; .
 136+ E87F ED 52                            sbc		hl,de							; .
 137+ E881 44                               ld		b,h                             ; bc = 3 - (r * 2)
 138+ E882 4D                               ld		c,l								; .
 139+ E883 21 01 00     .calcdelta:         ld		hl,1                            ; hl = 1
 140+ E886 16 00                            ld		d,0                             ; de = ixl
 141+ E888 DD 5D                            ld		e,ixl                           ;
 142+ E88A A7                               and		a                               ;
 143+ E88B ED 52                            sbc		hl,de                           ; hl = 1 - radius
 144+ E88D 11 01 00     .Setde1:            ld		de,1                            ; de = 1
 145+ E890              .CircleLoop:        ReturnIfRegLTNusng ixh, ixl             ; if radius > ixl counter
 145+ E890 DD 7C       >                        ld      a,ixh
 145+ E892 DD BD       >                        cp      ixl
 145+ E894 D8          >                        ret	    c
 146+ E895 D9           .ProcessLoop:	    exx                                     ; save all bc,de,hl registers
 147+ E896 11 00 00     .Plot1Y:            ld		de,0                            ; this is Y coord
 148+ E899 21 00 00     .Plot1X:            ld      hl,0                            ; this is x coord
 149+ E89C E5 D5 C5                         push    hl,,de,,bc                      ; save bc +3
 150+ E89F 06 00                            ld      b,0
 151+ E8A1 DD 4D                            ld      c,ixl
 152+ E8A3                                  ClearCarryFlag
 152+ E8A3 B7          >                        or a
 153+ E8A4 ED 4A                            adc     hl,bc
 154+ E8A6 C1                               pop     bc                              ; can optimise, perhaps use iy instead of bc or just optimise push pop and jump to an overall .Plot1Done and minimise push pops + 2
 155+ E8A7                                  JumpIfRegIsNotZero  h,.Plot1Done        ; if h <> 0 then hl < 0 or hl > 255
 155+ E8A7 7C          >                        ld      a,h
 155+ E8A8 A7          >                        and     a
 155+ E8A9 C2 BE E8    >                        jp	    nz,.Plot1Done
 156+ E8AC EB                               ex      de,hl                           ; now de = x coord calculated
 157+ E8AD C5                               push    bc                              ; + 3
 158+ E8AE                                  ClearCarryFlag
 158+ E8AE B7          >                        or a
 159+ E8AF 06 00                            ld      b,0
 160+ E8B1 DD 4D                            ld      c,ixl
 161+ E8B3 ED 4A                            adc     hl,bc
 162+ E8B5 C1                               pop     bc                              ; + 2
 163+ E8B6                                  JumpIfRegIsNotZero  h,.Plot1Done        ; if h <> 0 then hl < 0 or hl > 255
 163+ E8B6 7C          >                        ld      a,h
 163+ E8B7 A7          >                        and     a
 163+ E8B8 C2 BE E8    >                        jp	    nz,.Plot1Done
 164+ E8BB CD D6 E9                         call	.PlotPixel	            		;CX+X,CY+Y using DE = x and hl = y *** Note if we order plot 1 to 8 we can selectivley jump past many on elimiation check
 165+ E8BE D1 E1        .Plot1Done:         pop     hl,,de                          ; get de (y) and hl (x) back but reversed as the next plot expected the to be reversed from the ex de,hl above  + 0
 166+ E8C0 E5 D5 C5     .Plot2:             push    hl,,de,,bc                      ; e.g  do all CX + X first, so plot1, plot3 and just one check for cx + x off screen
 167+ E8C3 06 00                            ld      b,0                             ;                              plot2, plot8 for cx - x
 168+ E8C5 DD 4D                            ld      c,ixl                           ;                              plot4, plot5 for cy + x  ** Need to check the comments on each plot are correct
 169+ E8C7                                  ClearCarryFlag                          ;                              plot6        for cy - x
 169+ E8C7 B7          >                        or a
 170+ E8C8 ED 42                            sbc     hl,bc                           ;                              plot7 is last one
 171+ E8CA C1                               pop     bc                              ;
 172+ E8CB                                  JumpIfRegIsNotZero  h,.Plot2Done        ;
 172+ E8CB 7C          >                        ld      a,h
 172+ E8CC A7          >                        and     a
 172+ E8CD C2 E2 E8    >                        jp	    nz,.Plot2Done
 173+ E8D0 EB                               ex      de,hl
 174+ E8D1 C5                               push    bc
 175+ E8D2 06 00                            ld      b,0
 176+ E8D4 DD 4D                            ld      c,ixl
 177+ E8D6                                  ClearCarryFlag
 177+ E8D6 B7          >                        or a
 178+ E8D7 ED 4A                            adc     hl,bc
 179+ E8D9 C1                               pop     bc
 180+ E8DA                                  JumpIfRegIsNotZero  h,.Plot2Done
 180+ E8DA 7C          >                        ld      a,h
 180+ E8DB A7          >                        and     a
 180+ E8DC C2 E2 E8    >                        jp	    nz,.Plot2Done
 181+ E8DF CD D6 E9                         call	.PlotPixel	                    ; CX-X,CY+Y
 182+ E8E2 E1 D1        .Plot2Done:         pop     de,,hl
 183+ E8E4 E5 D5 C5     .Plot3:             push    hl,,de,,bc
 184+ E8E7 06 00                            ld      b,0
 185+ E8E9 DD 4D                            ld      c,ixl
 186+ E8EB                                  ClearCarryFlag
 186+ E8EB B7          >                        or a
 187+ E8EC ED 4A                            adc     hl,bc
 188+ E8EE C1                               pop     bc
 189+ E8EF                                  JumpIfRegIsNotZero  h,.Plot3Done
 189+ E8EF 7C          >                        ld      a,h
 189+ E8F0 A7          >                        and     a
 189+ E8F1 C2 06 E9    >                        jp	    nz,.Plot3Done
 190+ E8F4 EB                               ex      de,hl
 191+ E8F5 C5                               push    bc
 192+ E8F6 06 00                            ld      b,0
 193+ E8F8 DD 4D                            ld      c,ixl
 194+ E8FA                                  ClearCarryFlag
 194+ E8FA B7          >                        or a
 195+ E8FB ED 42                            sbc     hl,bc
 196+ E8FD C1                               pop     bc
 197+ E8FE                                  JumpIfRegIsNotZero  h,.Plot3Done
 197+ E8FE 7C          >                        ld      a,h
 197+ E8FF A7          >                        and     a
 197+ E900 C2 06 E9    >                        jp	    nz,.Plot3Done
 198+ E903 CD D6 E9                         call	.PlotPixel	                    ; CX+X,CY-Y
 199+ E906 E1 D1        .Plot3Done:         pop     de,,hl
 200+ E908 E5 D5 C5     .Plot4:             push    hl,,de,,bc
 201+ E90B 06 00                            ld      b,0
 202+ E90D DD 4D                            ld      c,ixl
 203+ E90F                                  ClearCarryFlag
 203+ E90F B7          >                        or a
 204+ E910 ED 42                            sbc     hl,bc
 205+ E912 C1                               pop     bc
 206+ E913                                  JumpIfRegIsNotZero  h,.Plot4Done
 206+ E913 7C          >                        ld      a,h
 206+ E914 A7          >                        and     a
 206+ E915 C2 2A E9    >                        jp	    nz,.Plot4Done
 207+ E918 EB                               ex      de,hl
 208+ E919 C5                               push    bc
 209+ E91A 06 00                            ld      b,0
 210+ E91C DD 4D                            ld      c,ixl
 211+ E91E                                  ClearCarryFlag
 211+ E91E B7          >                        or a
 212+ E91F ED 42                            sbc     hl,bc
 213+ E921 C1                               pop     bc
 214+ E922                                  JumpIfRegIsNotZero  h,.Plot4Done
 214+ E922 7C          >                        ld      a,h
 214+ E923 A7          >                        and     a
 214+ E924 C2 2A E9    >                        jp	    nz,.Plot4Done
 215+ E927 CD D6 E9                         call	.PlotPixel	                    ; CX-X,CY-Y
 216+ E92A E1 D1        .Plot4Done:         pop     de,,hl
 217+ E92C EB           .Plot5:             ex      de,hl
 218+ E92D E5 D5 C5                         push    hl,,de,,bc
 219+ E930 06 00                            ld      b,0
 220+ E932 DD 4D                            ld      c,ixl
 221+ E934                                  ClearCarryFlag
 221+ E934 B7          >                        or a
 222+ E935 ED 4A                            adc     hl,bc
 223+ E937 C1                               pop     bc
 224+ E938                                  JumpIfRegIsNotZero  h,.Plot5Done
 224+ E938 7C          >                        ld      a,h
 224+ E939 A7          >                        and     a
 224+ E93A C2 4F E9    >                        jp	    nz,.Plot5Done
 225+ E93D EB                               ex      de,hl
 226+ E93E C5                               push    bc
 227+ E93F 06 00                            ld      b,0
 228+ E941 DD 4D                            ld      c,ixl
 229+ E943                                  ClearCarryFlag
 229+ E943 B7          >                        or a
 230+ E944 ED 4A                            adc     hl,bc
 231+ E946 C1                               pop     bc
 232+ E947                                  JumpIfRegIsNotZero  h,.Plot5Done
 232+ E947 7C          >                        ld      a,h
 232+ E948 A7          >                        and     a
 232+ E949 C2 4F E9    >                        jp	    nz,.Plot5Done
 233+ E94C CD D6 E9                         call	.PlotPixel	                    ;CY+X,CX+Y
 234+ E94F E1 D1        .Plot5Done:         pop     de,,hl
 235+ E951 EB           .Plot6:             ex      de,hl
 236+ E952 E5 D5 C5                         push    hl,,de,,bc
 237+ E955 06 00                            ld      b,0
 238+ E957 DD 4D                            ld      c,ixl
 239+ E959                                  ClearCarryFlag
 239+ E959 B7          >                        or a
 240+ E95A ED 42                            sbc     hl,bc
 241+ E95C C1                               pop     bc
 242+ E95D                                  JumpIfRegIsNotZero  h,.Plot6Done
 242+ E95D 7C          >                        ld      a,h
 242+ E95E A7          >                        and     a
 242+ E95F C2 74 E9    >                        jp	    nz,.Plot6Done
 243+ E962 EB                               ex      de,hl
 244+ E963 C5                               push    bc
 245+ E964 06 00                            ld      b,0
 246+ E966 DD 4D                            ld      c,ixl
 247+ E968                                  ClearCarryFlag
 247+ E968 B7          >                        or a
 248+ E969 ED 4A                            adc     hl,bc
 249+ E96B C1                               pop     bc
 250+ E96C                                  JumpIfRegIsNotZero  h,.Plot6Done
 250+ E96C 7C          >                        ld      a,h
 250+ E96D A7          >                        and     a
 250+ E96E C2 74 E9    >                        jp	    nz,.Plot6Done
 251+ E971 CD D6 E9                         call	.PlotPixel	                    ; CY-X,CX+Y
 252+ E974 E1 D1        .Plot6Done:         pop     de,,hl
 253+ E976 EB           .Plot7:             ex      de,hl
 254+ E977 E5 D5 C5                         push    hl,,de,,bc
 255+ E97A 06 00                            ld      b,0
 256+ E97C DD 4D                            ld      c,ixl
 257+ E97E                                  ClearCarryFlag
 257+ E97E B7          >                        or a
 258+ E97F ED 4A                            adc     hl,bc
 259+ E981 C1                               pop     bc
 260+ E982                                  JumpIfRegIsNotZero  h,.Plot7Done
 260+ E982 7C          >                        ld      a,h
 260+ E983 A7          >                        and     a
 260+ E984 C2 99 E9    >                        jp	    nz,.Plot7Done
 261+ E987 EB                               ex      de,hl
 262+ E988 C5                               push    bc
 263+ E989 06 00                            ld      b,0
 264+ E98B DD 4D                            ld      c,ixl
 265+ E98D                                  ClearCarryFlag
 265+ E98D B7          >                        or a
 266+ E98E ED 42                            sbc     hl,bc
 267+ E990 C1                               pop     bc
 268+ E991                                  JumpIfRegIsNotZero  h,.Plot7Done
 268+ E991 7C          >                        ld      a,h
 268+ E992 A7          >                        and     a
 268+ E993 C2 99 E9    >                        jp	    nz,.Plot7Done
 269+ E996 CD D6 E9                         call	.PlotPixel	                    ; CY+X,CX-Y
 270+ E999 E1 D1        .Plot7Done:         pop     de,,hl
 271+ E99B EB           .Plot8:             ex      de,hl
 272+ E99C E5 D5 C5                         push    hl,,de,,bc
 273+ E99F 06 00                            ld      b,0
 274+ E9A1 DD 4D                            ld      c,ixl
 275+ E9A3                                  ClearCarryFlag
 275+ E9A3 B7          >                        or a
 276+ E9A4 ED 42                            sbc     hl,bc
 277+ E9A6 C1                               pop     bc
 278+ E9A7                                  JumpIfRegIsNotZero  h,.Plot8Done
 278+ E9A7 7C          >                        ld      a,h
 278+ E9A8 A7          >                        and     a
 278+ E9A9 C2 BE E9    >                        jp	    nz,.Plot8Done
 279+ E9AC EB                               ex      de,hl
 280+ E9AD C5                               push    bc
 281+ E9AE 06 00                            ld      b,0
 282+ E9B0 DD 4D                            ld      c,ixl
 283+ E9B2                                  ClearCarryFlag
 283+ E9B2 B7          >                        or a
 284+ E9B3 ED 42                            sbc     hl,bc
 285+ E9B5 C1                               pop     bc
 286+ E9B6                                  JumpIfRegIsNotZero  h,.Plot8Done
 286+ E9B6 7C          >                        ld      a,h
 286+ E9B7 A7          >                        and     a
 286+ E9B8 C2 BE E9    >                        jp	    nz,.Plot8Done
 287+ E9BB CD D6 E9                         call	.PlotPixel	                    ; CY-X,CX-Y
 288+ E9BE E1 D1        .Plot8Done:         pop     de,,hl
 289+ E9C0 D9           .PlotDone:          exx
 290+ E9C1 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
 291+ E9C3 28 03                            jr z,   .draw_circle_1
 292+ E9C5 19                               add hl,de			; Delta=Delta+D1
 293+ E9C6 18 05                            jr      .draw_circle_2		;
 294+ E9C8 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 295+ E9C9 03                               inc     bc
 296+ E9CA 03                               inc     bc				; D2=D2+2
 297+ E9CB DD 25                            dec     ixh				; Y=Y-1
 298+ E9CD 03           .draw_circle_2:		inc     bc				; D2=D2+2
 299+ E9CE 03                               inc     bc
 300+ E9CF 13                               inc     de				; D1=D1+2
 301+ E9D0 13                               inc     de
 302+ E9D1 DD 2C                            inc     ixl				; X=X+1
 303+ E9D3 C3 90 E8                         jp      .CircleLoop
 304+ E9D6 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 305+ E9D8 D5 C5 E5                         push	de,,bc,,hl
 306+ E9DB 45                               ld      b,l                     ; At this point de = x and hl = y
 307+ E9DC 4B                               ld      c,e
 308+ E9DD CD 6C E1                         call 	l2_plot_pixel_y_test
 309+ E9E0 E1 C1 D1                         pop		de,,bc,,hl
 310+ E9E3 C9                               ret
 311+ E9E4 7B           .circleSinglepixel:  ld		a,e
 312+ E9E5 CD 6C E1                         call	l2_plot_pixel_y_test
 313+ E9E8 C9                               ret
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
 735  E9E9                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ E9E9
   2+ E9E9 00           l2_circle_dblx		DB 0
   3+ E9EA 00           l2_circle_dbly		DB 0
   4+ E9EB
   5+ E9EB              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ E9EB              ; Note this code currently does not process BC
   7+ E9EB 7B           l2_draw_circle_fill:    ld		a,e
   8+ E9EC 32 82 EA                             ld		(.LineColour+1),a
   9+ E9EF 7A                                   ld		a,d								; get radius
  10+ E9F0 A7                                   and		a
  11+ E9F1 C8                                   ret		z
  12+ E9F2 FE 01                                cp		1
  13+ E9F4 CA 59 E8                             jp		z,CircleSinglepixel
  14+ E9F7 ED 43 21 EA                          ld		(.Line1+1),bc					; save origin into DE reg in code
  15+ E9FB DD 67                                ld		ixh,a							; ixh = raidus (x)
  16+ E9FD DD 2E 00                             ld		ixl,0							; ihy = y
  17+ EA00 26 00        .calcd:	                ld		h,0
  18+ EA02 6F                                   ld		l,a
  19+ EA03 29                                   add		hl,hl							; hl = r * 2
  20+ EA04 EB                                   ex		de,hl							; de = r * 2
  21+ EA05 21 03 00                             ld		hl,3
  22+ EA08 A7                                   and		a
  23+ EA09 ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  24+ EA0B 44                                   ld		b,h
  25+ EA0C 4D                                   ld		c,l								; bc = 3 - (r * 2)
  26+ EA0D 21 01 00     .calcdelta              ld		hl,1
  27+ EA10 16 00                                ld		d,0
  28+ EA12 DD 5D                                ld		e,ixl
  29+ EA14 A7                                   and		a
  30+ EA15 ED 52                                sbc		hl,de
  31+ EA17 11 01 00     .Setde1	                ld		de,1
  32+ EA1A DD 7C        .CircleLoop:            ld		a,ixh
  33+ EA1C DD BD                                cp		ixl
  34+ EA1E D8                                   ret		c
  35+ EA1F D9           .ProcessLoop:	        exx
  36+ EA20 11 00 00     .Line1:                 ld		de,0
  37+ EA23 7B                                   ld 		a,e
  38+ EA24 DD 95                                sub 	ixl
  39+ EA26 4F                                   ld 		c,a
  40+ EA27 7A                                   ld 		a,d
  41+ EA28 DD 84                                add 	a,ixh
  42+ EA2A 47                                   ld		b,a
  43+ EA2B                                      ;; TODO ADD DOUBLE X CALC
  44+ EA2B D5                                   push	de
  45+ EA2C DD 55                                ld		d,ixl
  46+ EA2E CB 22                                sla		d
  47+ EA30 CD 7D EA                             call	.PlotLine			;CX-X,CY+Y
  48+ EA33 D1                                   pop		de
  49+ EA34 7B           .Line2:                 ld 		a,e
  50+ EA35 DD 95                                sub		ixl
  51+ EA37 4F                                   ld 		c,a
  52+ EA38 7A                                   ld 		a,d
  53+ EA39 DD 94                                sub 	ixh
  54+ EA3B 47                                   ld 		b,a
  55+ EA3C                                      ;; TODO ADD DOUBLE X CALC
  56+ EA3C D5                                   push	de
  57+ EA3D DD 55                                ld		d,ixl
  58+ EA3F CB 22                                sla		d
  59+ EA41 CD 7D EA                             call	.PlotLine			;CX-X,CY-Y
  60+ EA44 D1                                   pop		de
  61+ EA45 7B           .Line3:	                ld 		a,e
  62+ EA46 DD 94                                sub		ixh
  63+ EA48 4F                                   ld 		c,a
  64+ EA49 7A                                   ld 		a,d
  65+ EA4A DD 85                                add 	a,ixl
  66+ EA4C 47                                   ld 		b,a
  67+ EA4D                                      ;; TODO ADD DOUBLE Y CALC
  68+ EA4D D5                                   push	de
  69+ EA4E DD 54                                ld		d,ixh
  70+ EA50 CB 22                                sla		d
  71+ EA52 CD 7D EA                             call	.PlotLine			;CX-Y,CY+x
  72+ EA55 D1                                   pop		de
  73+ EA56 7B           .Line4:	                ld 		a,e
  74+ EA57 DD 94                                sub		ixh
  75+ EA59 4F                                   ld 		c,a
  76+ EA5A 7A                                   ld 		a,d
  77+ EA5B DD 95                                sub 	ixl
  78+ EA5D 47                                   ld 		b,a
  79+ EA5E                                      ;; TODO ADD DOUBLE Y CALC
  80+ EA5E D5                                   push	de
  81+ EA5F DD 54                                ld		d,ixh
  82+ EA61 CB 22                                sla		d
  83+ EA63 CD 7D EA                             call	.PlotLine			;CX-Y,CY+x
  84+ EA66 D1                                   pop		de
  85+ EA67 D9                                   exx
  86+ EA68 CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  87+ EA6A 28 03                                jr z,.draw_circle_1
  88+ EA6C 19                                   add hl,de			; Delta=Delta+D1
  89+ EA6D 18 05                                jr .draw_circle_2		;
  90+ EA6F 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  91+ EA70 03                                   inc bc
  92+ EA71 03                                   inc bc				; D2=D2+2
  93+ EA72 DD 25                                dec ixh				; Y=Y-1
  94+ EA74 03           .draw_circle_2:		    inc bc				; D2=D2+2
  95+ EA75 03                                   inc bc
  96+ EA76 13                                   inc de				; D1=D1+2
  97+ EA77 13                                   inc de
  98+ EA78 DD 2C                                inc ixl				; X=X+1
  99+ EA7A C3 1A EA                             jp .CircleLoop
 100+ EA7D D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 101+ EA81 3E 00        .LineColour:	        ld		a,0         ; circle colur
 102+ EA83 5F                                   ld      e,a
 103+ EA84 CD B3 E2                             call 	l2_draw_horz_line
 104+ EA87 F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 105+ EA8B C9                                   ret
 106+ EA8C
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
 736  EA8C                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ EA8C              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ EA8C 08           l2_draw_any_line:       ex		af,af'              ; save colour into a'
   3+ EA8D 79                                   ld		a,c                 ; if x and e are the same its horizontal
   4+ EA8E BB                                   cp		e
   5+ EA8F 28 08                                jr		z,.HorizontalLineCheck
   6+ EA91 78                                   ld		a,b                 ; if b and d are the same its vertica;
   7+ EA92 BA                                   cp		d
   8+ EA93 28 0E                                jr		z,.VerticalLine
   9+ EA95              ; use jp and get a free ret instruction optimisation
  10+ EA95 08           .DiagonalLine:		    ex		af,af'			     ; get colour back into a
  11+ EA96 C3 5C E6                             jp		l2_draw_diagonal
  12+ EA99
  13+ EA99 78           .HorizontalLineCheck:   ld      a,b
  14+ EA9A BA                                   cp      d
  15+ EA9B 28 0B                                jr      z, .SinglePixel
  16+ EA9D 08           .HorizontalLine:        ex		af,af'              ; get colour back into a
  17+ EA9E 53                                   ld		d,e				    ; set d as target right pixel
  18+ EA9F 5F                                   ld		e,a				    ; e holds colour on this call
  19+ EAA0 C3 DF E2                             jp		l2_draw_horz_line_to
  20+ EAA3 08           .VerticalLine:          ex		af,af'
  21+ EAA4 5F                                   ld		e,a				    ; e holds colour on this call
  22+ EAA5 C3 5E E3                             jp		l2_draw_vert_line_to
  23+ EAA8 08           .SinglePixel:           ex		af,af'              ; get colour back into a
  24+ EAA9 C3 35 E1                             jp      l2_plot_pixel
  25+ EAAC              ;......................................................
  26+ EAAC
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
 737  EAAC                  INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
# file opened: ./Layer2Graphics/clearLines-LL155.asm
   1+ EAAC              ; ClearLines (LL155)
   2+ EAAC              ;   y = 0
   3+ EAAC              ; 	XX20 = UbnkEdgeHeapSize
   4+ EAAC              ;   exit if XX20 < 4
   5+ EAAC              ;   ++y
   6+ EAAC              ;   do
   7+ EAAC              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ EAAC              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ EAAC              ;		++y
  10+ EAAC              ;	until Y > XX20
  11+ EAAC
  12+ EAAC              clearLines:
  13+ EAAC              layer2_clearLines:
  14+ EAAC 3A 22 C3     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ EAAF 47                                   ld		b,a
  16+ EAB0 21 30 C2                             ld		hl,UbnkLineArray
  17+ EAB3 C5           clearLinesLoop:         push	bc
  18+ EAB4 7E                                   ld		a,(hl)
  19+ EAB5 23                                   inc		hl
  20+ EAB6 4F                                   ld		c,a
  21+ EAB7 7E                                   ld		a,(hl)
  22+ EAB8 23                                   inc		hl
  23+ EAB9 47                                   ld		b,a
  24+ EABA 7E                                   ld		a,(hl)
  25+ EABB 23                                   inc		hl
  26+ EABC 5F                                   ld		e,a
  27+ EABD 7E                                   ld		a,(hl)
  28+ EABE 23                                   inc		hl
  29+ EABF 57                                   ld		d,a
  30+ EAC0 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ EAC2 E5                                   push	hl
  32+ EAC3 CD 8C EA                             call    l2_draw_any_line
  33+ EAC6 E1                                   pop		hl
  34+ EAC7 C1                                   pop		bc
  35+ EAC8 10 E9                                djnz	clearLinesLoop
  36+ EACA C9                                   ret
  37+ EACB
# file closed: ./Layer2Graphics/clearLines-LL155.asm
 738  EACB                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ EACB              ; ******************************************************************************
   2+ EACB              ;
   3+ EACB              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ EACB              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ EACB              ;
   6+ EACB              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ EACB              ;
   8+ EACB              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ EACB              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ EACB              ;	before using line drawing.
  11+ EACB              ;
  12+ EACB              ;	The routine checks the range of specified coordinates which is the
  13+ EACB              ;	boundaries of the graphics area (256x64	pixels).
  14+ EACB              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ EACB              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ EACB              ;	visible part will be drawn.
  17+ EACB              ;
  18+ EACB              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ EACB              ;
  20+ EACB              ;	The plot routine is	defined by an address pointer	in IX.
  21+ EACB              ;
  22+ EACB              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ EACB              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ EACB              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ EACB              ;
  26+ EACB              ;	OUT:	None.
  27+ EACB              ;
  28+ EACB              ;	Registers	used	by routine:
  29+ EACB              ;		   N	:	B, loop counter
  30+ EACB              ;		   i	:	line	balance variable
  31+ EACB              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ EACB              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ EACB              ;	  (x0,y0)	:	(h,l)
  34+ EACB              ;	  direc_x	:	d, horisontal step increment
  35+ EACB              ;	  direc_y	:	e, vertical step increment
  36+ EACB              ;		 ddx	:	b, horisontal step increment
  37+ EACB              ;		 ddy	:	c, vertical step increment
  38+ EACB              ;
  39+ EACB              ;		DE, A work registers.
  40+ EACB              ;
  41+ EACB              ; The algorithm in pseudo-code:
  42+ EACB              ;
  43+ EACB              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ EACB              ;	x = ABS x: y =	ABS y
  45+ EACB              ;
  46+ EACB              ;	if x	>= y
  47+ EACB              ;		if x+y=0 then return
  48+ EACB              ;		H = x
  49+ EACB              ;		L = y
  50+ EACB              ;		ddx = direc_x
  51+ EACB              ;		ddy = 0
  52+ EACB              ;	else
  53+ EACB              ;		H = y
  54+ EACB              ;		L = x
  55+ EACB              ;		ddx = 0
  56+ EACB              ;		ddy = direc_y
  57+ EACB              ;	endif
  58+ EACB              ;
  59+ EACB              ;	B = H
  60+ EACB              ;	i = INT(B/2)
  61+ EACB              ;	FOR N=B TO 1 STEP -1
  62+ EACB              ;		i = i + L
  63+ EACB              ;		if i	< H
  64+ EACB              ;			ix =	ddx
  65+ EACB              ;			iy =	ddy
  66+ EACB              ;		else
  67+ EACB              ;			i = i - H
  68+ EACB              ;			ix =	direc_x
  69+ EACB              ;			iy =	direc_y
  70+ EACB              ;		endif
  71+ EACB              ;		x0 =	x0 +	ix
  72+ EACB              ;		y0 =	y0 +	iy
  73+ EACB              ;		plot	(x0,y0)
  74+ EACB              ;	NEXT	N
  75+ EACB              ;
  76+ EACB              ;
  77+ EACB              ;	Registers	changed after return:
  78+ EACB              ;		..BCDEHL/IXIY/af......	same
  79+ EACB              ;		AF....../..../..bcdehl	different
  80+ EACB              ;
  81+ EACB DF           line_gfx_colour db $DF
  82+ EACC 00 00        line_gfx_coords	dw 0
  83+ EACE              LineHLtoDE:
  84+ EACE 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ EACF FE C0                                cp	192
  86+ EAD1 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ EAD3 7A                                   ld	a,d
  88+ EAD4 FE C0                                cp	192
  89+ EAD6 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ EAD8 22 CC EA                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ EADB E5                                   push	hl
  92+ EADC D5                                   push	de
  93+ EADD 6C                                   ld	l,h				; L = x0
  94+ EADE 62                                   ld	h,d				; H = x1
  95+ EADF 7C           distanceX:		        ld	a,h
  96+ EAE0 95                                   sub	l
  97+ EAE1 6F                                   ld	l,a
  98+ EAE2 26 00                                ld	h,0
  99+ EAE4 30 02                                jr	nc, distanceXDone
 100+ EAE6 26 FF                                ld	h,-1
 101+ EAE8 D1           distanceXDone:          pop	de
 102+ EAE9 E3                                   ex	(sp),hl			; L = y0
 103+ EAEA 63                                   ld	h,e				; H = y1
 104+ EAEB 7C           distanceY:		        ld	a,h
 105+ EAEC 95                                   sub	l
 106+ EAED 6F                                   ld	l,a
 107+ EAEE 26 00                                ld	h,0
 108+ EAF0 30 02                                jr	nc, distanceYDone
 109+ EAF2 26 FF                                ld	h,-1
 110+ EAF4 D1           distanceYDone:          pop	de
 111+ EAF5 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ EAF6 CD FA EA                             call	DrawLineRelative			; draw line...
 113+ EAF9 C9           exit_line:              ret
 114+ EAFA
 115+ EAFA              ; ***************************************************************************
 116+ EAFA              ;
 117+ EAFA              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ EAFA              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ EAFA              ;
 120+ EAFA              ; OUT: h - l distance in	HL
 121+ EAFA              ;
 122+ EAFA
 123+ EAFA D5           DrawLineRelative:       push	de
 124+ EAFB E5                                   push	hl
 125+ EAFC D9                                   exx
 126+ EAFD E1                                   pop	hl					; get relative	horisontal movement
 127+ EAFE CD 69 EB                             call	sgn
 128+ EB01 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ EB02 CD 76 EB                             call	absValue
 130+ EB05 45                                   ld	b,l					; x = ABS(x)
 131+ EB06 E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ EB07 CD 69 EB                             call	sgn
 133+ EB0A 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ EB0B CD 76 EB                             call	absValue
 135+ EB0E 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ EB0F              ; so by here BC = dx dy HL in increment/decrement x y
 137+ EB0F C5                                   push	bc
 138+ EB10 D9                                   exx
 139+ EB11 E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ EB12 7C                                   ld	a,h
 141+ EB13 BD                                   cp	l
 142+ EB14 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ EB16 B4           areXandYZero:           or	h					;	if x+y = 0
 144+ EB17 28 4F                                jr	z, exit_draw		;		return
 145+ EB19 D9           y_lessorequal_x:        exx						;	else
 146+ EB1A 42                                   ld	b,d					;		ddx = direc_x
 147+ EB1B 0E 00                                ld	c,0					;		ddy = 0
 148+ EB1D D9                                   exx
 149+ EB1E 18 08                                jr	init_drawloop		; else
 150+ EB20 7C           x_smaller_y:	        ld	a,h
 151+ EB21 65                                   ld	h,l					;	H = y
 152+ EB22 6F                                   ld	l,a					;	L = x
 153+ EB23 D9                                   exx
 154+ EB24 06 00                                ld	b,0					;	ddx = 0
 155+ EB26 4B                                   ld	c,e					;	ddy = direc_y
 156+ EB27 D9                                   exx
 157+ EB28 44           init_drawloop:	        ld	b,h
 158+ EB29 4C                                   ld	c,h					; B = H
 159+ EB2A CB 39                                srl	c					; i = INT(B/2)
 160+ EB2C              										; FOR N=B	TO 1	STEP	-1
 161+ EB2C 79           drawloop:		        ld	a,c
 162+ EB2D 85                                   add	a,l
 163+ EB2E 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ EB30 BC                                   cp	h
 165+ EB31 30 06                                jr	nc, i_greater		;	if i	< H
 166+ EB33 4F                                   ld	c,a					;		i = i + L
 167+ EB34 D9                                   exx
 168+ EB35 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ EB36 D9                                   exx
 170+ EB37 18 05                                jr	check_plot			;	else
 171+ EB39 94           i_greater:		        sub	h					;		i = i - H
 172+ EB3A 4F                                   ld	c,a
 173+ EB3B D9                                   exx
 174+ EB3C D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ EB3D D9                                   exx						;	endif
 176+ EB3E E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ EB3F EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ EB40 2A CC EA                             ld	hl,(line_gfx_coords)
 179+ EB43 7D                                   ld	a,l
 180+ EB44 83                                   add	a,e					;
 181+ EB45 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ EB46 7A                                   ld	a,d
 183+ EB47 3C                                   inc	a
 184+ EB48 84                                   add	a,h
 185+ EB49 38 04                                jr	c, check_range		;	check out	of range
 186+ EB4B 28 1A                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ EB4D 18 02                                jr	plot_point
 188+ EB4F 20 16        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ EB51
 190+ EB51 3D           plot_point:             dec	a
 191+ EB52 C5                                   push	bc
 192+ EB53 F5                                   push	af
 193+ EB54 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ EB55 4D                                   ld		c,l
 195+ EB56 3A CB EA                             ld		a,(line_gfx_colour)
 196+ EB59 ED 43 CC EA                          ld      (line_gfx_coords),bc
 197+ EB5D CD 35 E1                             call	l2_plot_pixel
 197+ EB60
 198+ EB60 F1                                   pop		af
 199+ EB61 C1                                   pop		bc
 200+ EB62 E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ EB63 10 C7                                djnz	drawloop		; NEXT N
 202+ EB65 18 01                                jr	exit_draw
 203+ EB67
 204+ EB67 E1           range_error:	        pop	hl					; remove H,L distances...
 205+ EB68 C9           exit_draw:		        ret
 206+ EB69
 207+ EB69
 208+ EB69              ; ******************************************************************************
 209+ EB69              ;
 210+ EB69              ;	SGN (Signum value) of 16	bit signed integer.
 211+ EB69              ;
 212+ EB69              ;	IN:		HL =	integer
 213+ EB69              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ EB69              ;
 215+ EB69              ;	Registers	changed after return:
 216+ EB69              ;	..BCDEHL/IXIY	same
 217+ EB69              ;	AF....../....	different
 218+ EB69              ;
 219+ EB69 7C           sgn:				    ld	a,h
 220+ EB6A B5                                   or	l
 221+ EB6B C8                                   ret	z				; integer	is zero, return 0...
 222+ EB6C CB 7C                                bit	7,h
 223+ EB6E 20 03                                jr	nz, negative_int
 224+ EB70 3E 01                                ld	a,1
 225+ EB72 C9                                   ret
 226+ EB73 3E FF        negative_int:		    ld	a,-1
 227+ EB75 C9                                   ret
 228+ EB76
 229+ EB76
 230+ EB76              ; ******************************************************************************
 231+ EB76              ;
 232+ EB76              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ EB76              ;
 234+ EB76              ;	IN:		HL =	integer
 235+ EB76              ;	OUT:		HL =	converted	integer
 236+ EB76              ;
 237+ EB76              ;	Registers	changed after return:
 238+ EB76              ;	A.BCDE../IXIY	same
 239+ EB76              ;	.F....HL/....	different
 240+ EB76              ;
 241+ EB76 CB 7C        absValue:			    bit	7,h
 242+ EB78 C8                                   ret	z				; integer	is positive...
 243+ EB79 D5                                   push	de
 244+ EB7A EB                                   ex	de,hl
 245+ EB7B 21 00 00                             ld	hl,0
 246+ EB7E BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ EB7F ED 52                                sbc	hl,de			; convert	negative integer
 248+ EB81 D1                                   pop	de
 249+ EB82 C9                                   ret
 250+ EB83
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
 739  EB83                  DISPLAY "Bank ",BankLAYER2," - Bytes free ",/D, $2000 - ($-LAYER2Addr), " - BankLAYER2"
 740  EB83              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
 741  EB83                  SLOT    LAYER1Addr
 742  EB83                  PAGE    BankLAYER1
 743  EB83                  ORG     LAYER1Addr, BankLAYER1
 744  E000
 745  E000                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD 2E 7F                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
 746  E047                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls_top:             xor     a
   2+ E048 21 00 40                             ld      hl, $4000
   3+ E04B 11 00 08                             ld      de, $0800
   4+ E04E CD 2E 7F                             call    memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_cls_mid:             xor     a
   8+ E053 21 00 48                             ld      hl, $4800
   9+ E056 11 00 08                             ld      de, $0800
  10+ E059 CD 2E 7F                             call    memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D AF           l1_cls_bottom:          xor     a
  14+ E05E 21 00 50                             ld      hl, $5000
  15+ E061 11 00 08                             ld      de, $0800
  16+ E064 CD 2E 7F                             call    memfill_dma
  17+ E067 C9                                   ret
  18+ E068
  19+ E068              ; Designed specifically to clear a whole character aligned line
  20+ E068 1E 00        l1_cls_line_d:          ld      e,0
  21+ E06A ED 94                                pixelad
  22+ E06C 11 00 01                             ld      de,32 * 8
  23+ E06F AF                                   xor     a
  24+ E070 CD 2E 7F                             call    memfill_dma
  25+ E073 C9                                   ret
  26+ E074
  27+ E074              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E074 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E076 ED 94                                pixelad
  30+ E078 11 00 02                             ld      de,32 * 16
  31+ E07B AF                                   xor     a
  32+ E07C CD 2E 7F                             call    memfill_dma
  33+ E07F C9                                   ret
  34+ E080
  35+ E080 AF           l1_cls:                 xor		a
  36+ E081 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E084 11 00 18                             ld		de, $1800
  38+ E087 CD 2E 7F                             call	memfill_dma
  39+ E08A C9                                   ret
  40+ E08B
  41+ E08B 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E08E 1E 20                                ld      e,32
  43+ E090 ED 30                                mul
  44+ E092 19                                   add     hl,de
  45+ E093 11 40 00                             ld		de, 32 * 2
  46+ E096 CD 2E 7F                             call	memfill_dma
  47+ E099 C9                                   ret
  48+ E09A
  49+ E09A
  50+ E09A AF           l1_attr_cls:            xor		a
  51+ E09B 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E09E 11 00 03                             ld		de, $0300
  53+ E0A1 CD 2E 7F                             call	memfill_dma
  54+ E0A4 C9                                   ret
  55+ E0A5
  56+ E0A5 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0A8 ED 79                                out		(c),a
  58+ E0AA C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
 747  E0AB                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E0AB              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E0AB D5 E5        l1_print_char:          push	de,,hl
   3+ E0AD ED 94                                pixelad								; hl = address of de
   4+ E0AF E5                                   push	hl							; save hl for loop
   5+ E0B0 26 00                                ld		h,0
   6+ E0B2 6F                                   ld		l,a
   7+ E0B3 29                                   add		hl,hl						; * 2
   8+ E0B4 29                                   add		hl,hl						; * 4
   9+ E0B5 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0B6 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0BA EB                                   ex		de,hl						; save address into de
  12+ E0BB E1                                   pop		hl							; get back hl for loop
  13+ E0BC 06 08                                ld		b,8							; do 8 rows
  14+ E0BE 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0BF 13                                   inc		de							; next byte
  16+ E0C0 77                                   ld		(hl),a						; poke to screen
  17+ E0C1 ED 93                                pixeldn								; Down 1 row
  18+ E0C3 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0C5 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0C7 C9                                   ret
  21+ E0C8
  22+ E0C8              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0C8              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0C8              l1_print_at:
  25+ E0C8 7E           .PrintLoop:             ld		a,(hl)
  26+ E0C9 FE 00                                cp		0
  27+ E0CB C8                                   ret		z
  28+ E0CC                                      CallIfAGTENusng " ", l1_print_char
  28+ E0CC FE 20       >                        cp      " "
  28+ E0CE D4 AB E0    >                        call	nc,l1_print_char
  29+ E0D1 23                                   inc		hl							; move 1 message character right
  30+ E0D2 7B                                   ld		a,e
  31+ E0D3 C6 08                                add		a,8
  32+ E0D5 5F                                   ld		e,a							; move 1 screen character right
  33+ E0D6 18 F0                                jr		.PrintLoop
  34+ E0D8              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E0D8 C9                                   ret
  36+ E0D9
  37+ E0D9              ;l1_print_at_wrap:
  38+ E0D9              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E0D9              ;	ld      iyh,e
  40+ E0D9              ;.PrintLoop:
  41+ E0D9              ;	ld		a,(hl)
  42+ E0D9              ;	cp		0
  43+ E0D9              ;	ret		z
  44+ E0D9              ;.CountWordCharLen
  45+ E0D9              ;; Need to change to word wrap, so it will loop through string as before
  46+ E0D9              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E0D9              ;; if that is > 238 then force a premature line wrap
  48+ E0D9              ;
  49+ E0D9              ;
  50+ E0D9              ;    push    iy
  51+ E0D9              ;    call	l1_print_char
  52+ E0D9              ;    pop     iy
  53+ E0D9              ;	inc		hl							; move 1 message character right
  54+ E0D9              ;	ld		a,e
  55+ E0D9              ;    cp      238
  56+ E0D9              ;    jr      nc,.NextLine
  57+ E0D9              ;	add		a,8
  58+ E0D9              ;	ld		e,a							; move 1 screen character right
  59+ E0D9              ;	jr		.PrintLoop
  60+ E0D9              ;.Clearstackandfinish:
  61+ E0D9              ;	pop		de
  62+ E0D9              ;	ret
  63+ E0D9              ;.NextLine:
  64+ E0D9              ;    ld      a,(hl)
  65+ E0D9              ;    cp      " "
  66+ E0D9              ;    ld      e,iyh
  67+ E0D9              ;    ld      a,d
  68+ E0D9              ;    add     a,8
  69+ E0D9              ;    ld      d,a
  70+ E0D9              ;    jr		.PrintLoop
  71+ E0D9
  72+ E0D9              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E0D9 E5           L1LenWordAtHL:          push    hl
  74+ E0DA D5                                   push    de
  75+ E0DB 7E           .CountLoop:             ld      a,(hl)
  76+ E0DC FE 00                                cp      0
  77+ E0DE 28 0F                                jr      z,.CountDone
  78+ E0E0 FE 20                                cp      32
  79+ E0E2 28 0B                                jr      z,.CountDone
  80+ E0E4 7B                                   ld      a,e
  81+ E0E5 C6 08                                add     a,8
  82+ E0E7 5F                                   ld      e,a
  83+ E0E8 FE EE                                cp      238
  84+ E0EA 30 07                                jr      nc,.TooLong
  85+ E0EC 23                                   inc     hl
  86+ E0ED 18 EC                                jr      .CountLoop
  87+ E0EF D1           .CountDone:             pop     de
  88+ E0F0 E1                                   pop     hl
  89+ E0F1 AF                                   xor     a
  90+ E0F2 C9                                   ret
  91+ E0F3 D1           .TooLong                pop     de
  92+ E0F4 E1                                   pop     hl
  93+ E0F5 3E FF                                ld      a,$FF
  94+ E0F7 C9                                   ret
  95+ E0F8
  96+ E0F8 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0F9 FE 00                                cp      0
  98+ E0FB C8                                   ret     z
  99+ E0FC FE 20                                cp      32
 100+ E0FE 28 0F                                jr      z,.ItsASpace
 101+ E100 FD E5                                push    iy
 102+ E102 CD AB E0                             call	l1_print_char
 103+ E105 FD E1                                pop     iy
 104+ E107 7B                                   ld      a,e
 105+ E108 C6 08                                add     a,8
 106+ E10A 5F                                   ld      e,a
 107+ E10B 23                                   inc     hl
 108+ E10C C3 F8 E0                             jp      L1PrintWordAtHL
 109+ E10F 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E110 7B                                   ld      a,e
 111+ E111 C6 08                                add     a,8
 112+ E113 5F                                   ld      e,a
 113+ E114 C9                                   ret
 114+ E115
 115+ E115
 116+ E115              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E115              ; Now has full word level wrapping
 118+ E115 FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E117 7E           .PrintLoop:             ld		a,(hl)
 120+ E118 FE 00                                cp		0
 121+ E11A C8                                   ret		z
 122+ E11B CD D9 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E11E FE FF                                cp      $FF
 124+ E120 28 06                                jr      z,.WrapNextLine
 125+ E122 CD F8 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E125              ; Need to change to word wrap, so it will loop through string as before
 127+ E125              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E125              ; if that is > 238 then force a premature line wrap
 129+ E125 18 F0                                jr		.PrintLoop
 130+ E127              .Clearstackandfinish:   ;op		de
 131+ E127 C9                                   ret
 132+ E128              .WrapNextLine:
 133+ E128 FD 5C        .NextLine:              ld      e,iyh
 134+ E12A 7A                                   ld      a,d
 135+ E12B C6 08                                add     a,8
 136+ E12D 57                                   ld      d,a
 137+ E12E 18 E7                                jr		.PrintLoop
 138+ E130
 139+ E130
# file closed: ./Layer1Graphics/layer1_print_at.asm
 748  E130                  DISPLAY "Bank ",BankLAYER1," - Bytes free ",/D, $2000 - ($-LAYER1Addr), " - BankLAYER1"
 749  E130              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
 750  E130              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
 751  E130              ; as the is aligned and data tables are after that
 752  E130              ; need to make the ship index tables same size in each to simplify further
 753  E130                  SLOT    ShipModelsAddr
 754  E130                  PAGE    BankShipModels1
 755  E130              	ORG     ShipModelsAddr, BankShipModels1
 756  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyEdgesToUniverse:   MACRO
  47+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  48+ E000 ~                                    ld          de,UBnkHullEdges
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(LineX4Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyNormsToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullNormals
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld          a,(FaceCtX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              ; Passes in ship nbr in A and bank is part of MACRO
  69+ E000              MCopyShipToUniverse:    MACRO       banklabel
  70+ E000 ~                                    ld          hl,UBnkShipModelBank
  71+ E000 ~                                    ld          (hl),banklabel
  72+ E000 ~                                    push        af
  73+ E000 ~                                    ld          a,iyl
  74+ E000 ~                                    ld          (UBnKShipModelId),a
  75+ E000 ~                                    pop         af
  76+ E000 ~                                    ld          (UBnKShipModelNbr),a
  77+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
  78+ E000 ~                                    add         hl,a
  79+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
  80+ E000 ~                                    ld          c,(hl)
  81+ E000 ~                                    inc         hl
  82+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
  83+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
  84+ E000 ~                                    add         hl,a
  85+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
  86+ E000 ~                                    ld          a,(hl)
  87+ E000 ~                                    inc         hl
  88+ E000 ~                                    ld          h,(hl)
  89+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
  90+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
  91+ E000 ~                                    ld          bc,ShipDataLength
  92+ E000 ~                                    ldir
  93+ E000 ~                                    call        CopyVertsToUniv
  94+ E000 ~                                    call        CopyEdgesToUniv
  95+ E000 ~                                    call        CopyNormsToUniv
  96+ E000 ~            .ClearName:             ld          hl,StartOfUnivName
  97+ E000 ~                                    ld          a," "
  98+ E000 ~                                    ld          b,16
  99+ E000 ~            .fillLoop:              ld          (hl),a
 100+ E000 ~                                    inc         hl
 101+ E000 ~                                    djnz        .fillLoop
 102+ E000 ~            .SetName:               ld          a,(UBnKShipModelId)
 103+ E000 ~                                    call        ShipIndexToAddress
 104+ E000 ~                                    ld          de,StartOfUnivName
 105+ E000 ~                                    ld          b,16
 106+ E000 ~            .CopyLoop:              ld          a,(hl)
 107+ E000 ~                                    cp          0
 108+ E000 ~                                    jr          z,.CopyDone
 109+ E000 ~                                    ld          (de),a
 110+ E000 ~                                    inc         hl
 111+ E000 ~                                    inc         de
 112+ E000 ~                                    djnz        .CopyLoop
 113+ E000 ~            .CopyDone:              ret
 114+ E000                                      ENDM
 115+ E000
 116+ E000              MCopyBodyToUniverse:    MACRO       copyRoutine
 117+ E000 ~                                    ld          a,13
 118+ E000 ~                                    call        copyRoutine
 119+ E000 ~                                    ret
 120+ E000                                      ENDM
 121+ E000
 122+ E000
 123+ E000              MCopyShipIdToUniverse:  MACRO
 124+ E000 ~                                    call        GetShipModelId
 125+ E000 ~                                    MMUSelectShipBankA
 126+ E000 ~                                    ld          a,b
 127+ E000 ~                                    jp          CopyShipToUniverse
 128+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
 757  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
 758  E00F              GetShipBankId:
 759  E00F              GetShipBank1Id:         MGetShipBankId ShipBankTable
 759  E00F 06 00       >                        ld      b,0
 759  E011 4F          >                        ld      c,a                                 ; c= original ship id
 759  E012 CB 3F       >.ShiftLoop:             srl     a
 759  E014 CB 3F       >                        srl     a
 759  E016 CB 3F       >                        srl     a
 759  E018 CB 3F       >                        srl     a                                   ; divide by 16
 759  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 759  E01B 79          >                        ld      a,c
 759  E01C 50          >                        ld      d,b
 759  E01D 1E 10       >                        ld      e,16
 759  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 759  E021 93          >                        sub     e                                   ; a= actual model id now
 759  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 759  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 759  E024 7A          >                        ld      a,d                                 ; a = bank number
 759  E025             >;.. Now b = bank and a = adjusted ship nbr
 759  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
 759  E028 ED 31       >                        add     hl,a
 759  E02A ED 31       >                        add     hl,a
 759  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 759  E02D             >                        ClearCarryFlag
 759  E02D B7          >                        or a
 759  E02E C9          >                        ret
 760  E02F              CopyVertsToUniv:
 761  E02F              CopyVertsToUniv1:       McopyVertsToUniverse
 761  E02F 2A 43 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 761  E032 11 49 C3    >                        ld          de,UBnkHullVerticies
 761  E035 06 00       >                        ld          b,0
 761  E037 3A 37 C3    >                        ld			a,(VertexCtX6Addr)
 761  E03A 4F          >                        ld          c,a
 761  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 761  E03C CD 54 7F    >                        call        memcopy_dma
 761  E03F C9          >                        ret
 762  E040              CopyEdgesToUniv:
 763  E040              CopyEdgesToUniv1:       McopyEdgesToUniverse
 763  E040 2A 31 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 763  E043 11 39 C4    >                        ld          de,UBnkHullEdges
 763  E046 06 00       >                        ld          b,0
 763  E048 3A 33 C3    >                        ld			a,(LineX4Addr)
 763  E04B 4F          >                        ld          c,a
 763  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 763  E04D CD 54 7F    >                        call        memcopy_dma
 763  E050 C9          >                        ret
 764  E051              CopyNormsToUniv:
 765  E051              CopyNormsToUniv1:       McopyNormsToUniverse
 765  E051 2A 3F C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 765  E054 11 01 C5    >                        ld          de,UBnkHullNormals
 765  E057 06 00       >                        ld          b,0
 765  E059 3A 3B C3    >                        ld          a,(FaceCtX4Addr)
 765  E05C 4F          >                        ld          c,a
 765  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 765  E05E CD 54 7F    >                        call        memcopy_dma
 765  E061 C9          >                        ret
 766  E062              ShipBankTable:
 767  E062              ShipBankTable1:         MShipBankTable
 767  E062 3B 00       >                        DW      BankShipModels1
 767  E064 43 00       >                        DW      BankShipModels2
 767  E066 44 00       >                        DW      BankShipModels3
 767  E068 45 00       >                        DW      BankShipModels4
 768  E06A              CopyShipToUniverse:
 769  E06A              CopyShipToUniverse1     MCopyShipToUniverse     BankShipModels1
 769  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
 769  E06D 36 3B       >                        ld          (hl),BankShipModels1
 769  E06F F5          >                        push        af
 769  E070 FD 7D       >                        ld          a,iyl
 769  E072 32 43 C0    >                        ld          (UBnKShipModelId),a
 769  E075 F1          >                        pop         af
 769  E076 32 42 C0    >                        ld          (UBnKShipModelNbr),a
 769  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 769  E07C ED 31       >                        add         hl,a
 769  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 769  E080 4E          >                        ld          c,(hl)
 769  E081 23          >                        inc         hl
 769  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 769  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 769  E086 ED 31       >                        add         hl,a
 769  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 769  E08A 7E          >                        ld          a,(hl)
 769  E08B 23          >                        inc         hl
 769  E08C 66          >                        ld          h,(hl)
 769  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 769  E08E 11 2E C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 769  E091 01 1B 00    >                        ld          bc,ShipDataLength
 769  E094 ED B0       >                        ldir
 769  E096 CD 2F E0    >                        call        CopyVertsToUniv
 769  E099 CD 40 E0    >                        call        CopyEdgesToUniv
 769  E09C CD 51 E0    >                        call        CopyNormsToUniv
 769  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
 769  E0A2 3E 20       >                        ld          a," "
 769  E0A4 06 10       >                        ld          b,16
 769  E0A6 77          >.fillLoop:              ld          (hl),a
 769  E0A7 23          >                        inc         hl
 769  E0A8 10 FC       >                        djnz        .fillLoop
 769  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnKShipModelId)
 769  E0AD CD 04 93    >                        call        ShipIndexToAddress
 769  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
 769  E0B3 06 10       >                        ld          b,16
 769  E0B5 7E          >.CopyLoop:              ld          a,(hl)
 769  E0B6 FE 00       >                        cp          0
 769  E0B8 28 05       >                        jr          z,.CopyDone
 769  E0BA 12          >                        ld          (de),a
 769  E0BB 23          >                        inc         hl
 769  E0BC 13          >                        inc         de
 769  E0BD 10 F6       >                        djnz        .CopyLoop
 769  E0BF C9          >.CopyDone:              ret
 770  E0C0              CopyBodyToUniverse:
 771  E0C0              CopyBodyToUniverse1:    MCopyBodyToUniverse     CopyShipToUniverse1
 771  E0C0 3E 0D       >                        ld          a,13
 771  E0C2 CD 6A E0    >                        call        CopyShipToUniverse1
 771  E0C5 C9          >                        ret
 772  E0C6                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E0C6              ShipModelTable:
   2+ E0C6 66 E1        ShipModelTable1:         DW Adder                                   ;00 $00
   3+ E0C8 9D E2                                 DW Anaconda                                ;01 $01
   4+ E0CA A6 E3                                 DW Asp_Mk_2                                ;02 $02
   5+ E0CC D3 E4                                 DW Boa                                     ;03 $03
   6+ E0CE CC E5                                 DW CargoType5                              ;04 $04
   7+ E0D0 7B E6                                 DW Boulder                                 ;05 $05
   8+ E0D2 24 E7                                 DW Asteroid                                ;06 $06
   9+ E0D4 01 E8                                 DW Bushmaster                              ;07 $07
  10+ E0D6 D4 E8                                 DW Chameleon                               ;08 $08
  11+ E0D8 02 EA                                 DW CobraMk3                                ;09 $09
  12+ E0DA 91 EB                                 DW Cobra_Mk_1                              ;10 $0A
  13+ E0DC 5E EC                                 DW Cobra_Mk_3_P                            ;11 $0B
  14+ E0DE ED ED                                 DW Constrictor                             ;12 $0C
  15+ E0E0 F6 EE                                 DW Coriolis                                ;13 $0D
  16+ E0E2 19 F0                                 DW Cougar                                  ;14 $0E
  17+ E0E4 22 F1                                 DW Dodo                                    ;15 $0F
  18+ E0E6              ShipVertexTable:
  19+ E0E6 81 E1        ShipVertexTable1:        DW AdderVertices                           ;00 $00
  20+ E0E8 B8 E2                                 DW AnacondaVertices                        ;01 $01
  21+ E0EA C1 E3                                 DW Asp_Mk_2Vertices                        ;02 $02
  22+ E0EC EE E4                                 DW BoaVertices                             ;03 $03
  23+ E0EE E7 E5                                 DW CargoType5Vertices                      ;04 $04
  24+ E0F0 96 E6                                 DW BoulderVertices                         ;05 $05
  25+ E0F2 3F E7                                 DW AsteroidVertices                        ;06 $06
  26+ E0F4 1C E8                                 DW BushmasterVertices                      ;07 $07
  27+ E0F6 EE E8                                 DW ChameleonVertices                       ;08 $08
  28+ E0F8 1D EA                                 DW CobraMk3Vertices                        ;09 $09
  29+ E0FA AC EB                                 DW Cobra_Mk_1Vertices                      ;10 $0A
  30+ E0FC 79 EC                                 DW Cobra_Mk_3_PVertices                    ;11 $0B
  31+ E0FE 08 EE                                 DW ConstrictorVertices                     ;12 $0C
  32+ E100 11 EF                                 DW CoriolisVertices                        ;13 $0D
  33+ E102 34 F0                                 DW CougarVertices                          ;14 $0E
  34+ E104 3D F1                                 DW DodoVertices                            ;15 $0F
  35+ E106              ShipEdgeTable:
  36+ E106 ED E1        ShipEdgeTable1:          DW AdderEdges                              ;00 $00
  37+ E108 12 E3                                 DW AnacondaEdges                           ;01 $01
  38+ E10A 33 E4                                 DW Asp_Mk_2Edges                           ;02 $02
  39+ E10C 3C E5                                 DW BoaEdges                                ;03 $03
  40+ E10E 23 E6                                 DW CargoType5Edges                         ;04 $04
  41+ E110 C0 E6                                 DW BoulderEdges                            ;05 $05
  42+ E112 75 E7                                 DW AsteroidEdges                           ;06 $06
  43+ E114 64 E8                                 DW BushmasterEdges                         ;07 $07
  44+ E116 5A E9                                 DW ChameleonEdges                          ;08 $08
  45+ E118 C5 EA                                 DW CobraMk3Edges                           ;09 $09
  46+ E11A EE EB                                 DW Cobra_Mk_1Edges                         ;10 $0A
  47+ E11C 21 ED                                 DW Cobra_Mk_3_PEdges                       ;11 $0B
  48+ E11E 6E EE                                 DW ConstrictorEdges                        ;12 $0C
  49+ E120 71 EF                                 DW CoriolisEdges                           ;13 $0D
  50+ E122 A6 F0                                 DW CougarEdges                             ;14 $0E
  51+ E124 CD F1                                 DW DodoEdges                               ;15 $0F
  52+ E126              ShipNormalTable:
  53+ E126 61 E2        ShipNormalTable1:        DW AdderNormals                            ;00 $00
  54+ E128 76 E3                                 DW AnacondaNormals                         ;01 $01
  55+ E12A A3 E4                                 DW Asp_Mk_2Normals                         ;02 $02
  56+ E12C 9C E5                                 DW BoaNormals                              ;03 $03
  57+ E12E 5F E6                                 DW CargoType5Normals                       ;04 $04
  58+ E130 FC E6                                 DW BoulderNormals                          ;05 $05
  59+ E132 C9 E7                                 DW AsteroidNormals                         ;06 $06
  60+ E134 B0 E8                                 DW BushmasterNormals                       ;07 $07
  61+ E136 CE E9                                 DW ChameleonNormals                        ;08 $08
  62+ E138 5D EB                                 DW CobraMk3Normals                         ;09 $09
  63+ E13A 36 EC                                 DW Cobra_Mk_1Normals                       ;10 $0A
  64+ E13C B9 ED                                 DW Cobra_Mk_3_PNormals                     ;11 $0B
  65+ E13E CE EE                                 DW ConstrictorNormals                      ;12 $0C
  66+ E140 E1 EF                                 DW CoriolisNormals                         ;13 $0D
  67+ E142 0A F1                                 DW CougarNormals                           ;14 $0E
  68+ E144 55 F2                                 DW DodoNormals                             ;15 $0F
  69+ E146              ShipModelSizeTable:
  70+ E146 37 01        ShipModelSizeTable1:     DW AdderLen                                ;00 $00
  71+ E148 09 01                                 DW AnacondaLen                             ;01 $01
  72+ E14A 2D 01                                 DW Asp_Mk_2Len                             ;02 $02
  73+ E14C F9 00                                 DW BoaLen                                  ;03 $03
  74+ E14E AF 00                                 DW CargoType5Len                           ;04 $04
  75+ E150 A9 00                                 DW BoulderLen                              ;05 $05
  76+ E152 DD 00                                 DW AsteroidLen                             ;06 $06
  77+ E154 D3 00                                 DW BushmasterLen                           ;07 $07
  78+ E156 2E 01                                 DW ChameleonLen                            ;08 $08
  79+ E158 8F 01                                 DW CobraMk3Len                             ;09 $09
  80+ E15A CD 00                                 DW Cobra_Mk_1Len                           ;10 $0A
  81+ E15C 8F 01                                 DW Cobra_Mk_3_PLen                         ;11 $0B
  82+ E15E 09 01                                 DW ConstrictorLen                          ;12 $0C
  83+ E160 23 01                                 DW CoriolisLen                             ;13 $0D
  84+ E162 09 01                                 DW CougarLen                               ;14 $0E
  85+ E164 63 01                                 DW DodoLen                                 ;15 $0F
  86+ E166
  87+ E166                                      include "Data/ships/Adder.asm"
# file opened: ./Data/ships/Adder.asm
   1++E166 00           Adder:	                DB $00                              ; Number of cargo canisters released when destroyed
   2++E167 C4 09                                DW 50 * 50                          ; Ship's targetable area LoHi
   3++E169 ED E1                                DW AdderEdges                       ; Edge Data
   4++E16B 74                                   DB AdderEdgesSize                   ; Size of Edge Data
   5++E16C 00                                   DB $00                              ; Gun Vertex Byte offset
   6++E16D 16                                   DB $16                              ; Explosion Count
   7++E16E 12                                   DB AdderVertSize / 6                ; Vertex Count /6
   8++E16F 6C                                   DB AdderVertSize                    ; Vertex Count
   9++E170 1D                                   DB AdderEdgesCnt                    ; Edges Count
  10++E171 28 00                                DW $0028                            ; Bounty LoHi
  11++E173 3C                                   DB AdderNormalsSize                 ; Face (Normal) Count
  12++E174 17                                   DB $17                              ; Range when it turns to a dot
  13++E175 48                                   DB $48                              ; Energy Max
  14++E176 18                                   DB $18                              ; Speed Max
  15++E177 61 E2                                DW AdderNormals                     ; Normals
  16++E179 12                                   DB $12                              ; Q scaling
  17++E17A 21                                   DB $21                              ; Laser power and Nbr Missiles
  18++E17B 81 E1                                DW AdderVertices                    ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                   ; Ship Type
  20++E17E 00                                   DB 0                                ; NewB Tactics
  21++E17F 80                                   DB ShipCanAnger                     ; AI Flags
  22++E180 80                                   DB $80                              ; chance of ECM module
  23++E181                                                     ; chance of ECM module
  24++E181 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC     ;01
  24++E185 01 BC
  25++E187 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23     ;02
  25++E18B 01 23
  26++E18D 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45     ;03
  26++E191 23 45
  27++E193 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66     ;04
  27++E197 45 66
  28++E199 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E     ;05
  28++E19D 56 7E
  29++E19F 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE     ;06
  29++E1A3 78 AE
  30++E1A5 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA     ;07
  30++E1A9 89 AA
  31++E1AB 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC     ;08
  31++E1AF 9A BC
  32++E1B1 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D     ;09
  32++E1B5 78 9D
  33++E1B7 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D     ;10
  33++E1BB 46 7D
  34++E1BD 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD     ;11
  34++E1C1 09 BD
  35++E1C3 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D     ;12
  35++E1C7 02 4D
  36++E1C9 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE     ;13
  36++E1CD 1A CE
  37++E1CF 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E     ;14
  37++E1D3 13 5E
  38++E1D5 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00     ;15
  38++E1D9 00 00
  39++E1DB 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00     ;16
  39++E1DF 00 00
  40++E1E1 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00     ;17
  40++E1E5 00 00
  41++E1E7 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00     ;18
  41++E1EB 00 00
  42++E1ED              AdderVertSize:          equ $ - AdderVertices
  43++E1ED 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04               ;01
  44++E1F1 07 23 04 08                          DB $07, $23, $04, $08               ;02
  45++E1F5 1F 45 08 0C                          DB $1F, $45, $08, $0C               ;03
  46++E1F9 1F 56 0C 10                          DB $1F, $56, $0C, $10               ;04
  47++E1FD 1F 7E 10 14                          DB $1F, $7E, $10, $14               ;05
  48++E201 1F 8A 14 18                          DB $1F, $8A, $14, $18               ;06
  49++E205 1F 9A 18 1C                          DB $1F, $9A, $18, $1C               ;07
  50++E209 07 BC 1C 00                          DB $07, $BC, $1C, $00               ;08
  51++E20D 1F 46 0C 24                          DB $1F, $46, $0C, $24               ;09
  52++E211 1F 7D 24 20                          DB $1F, $7D, $24, $20               ;10
  53++E215 1F 89 20 18                          DB $1F, $89, $20, $18               ;11
  54++E219 1F 0B 00 28                          DB $1F, $0B, $00, $28               ;12
  55++E21D 1F 9B 1C 28                          DB $1F, $9B, $1C, $28               ;13
  56++E221 1F 02 04 2C                          DB $1F, $02, $04, $2C               ;14
  57++E225 1F 24 08 2C                          DB $1F, $24, $08, $2C               ;15
  58++E229 1F 1C 00 30                          DB $1F, $1C, $00, $30               ;16
  59++E22D 1F AC 1C 30                          DB $1F, $AC, $1C, $30               ;17
  60++E231 1F 13 04 34                          DB $1F, $13, $04, $34               ;18
  61++E235 1F 35 08 34                          DB $1F, $35, $08, $34               ;19
  62++E239 1F 0D 28 2C                          DB $1F, $0D, $28, $2C               ;20
  63++E23D 1F 1E 30 34                          DB $1F, $1E, $30, $34               ;21
  64++E241 1F 9D 20 28                          DB $1F, $9D, $20, $28               ;22
  65++E245 1F 4D 24 2C                          DB $1F, $4D, $24, $2C               ;23
  66++E249 1F AE 14 30                          DB $1F, $AE, $14, $30               ;24
  67++E24D 1F 5E 10 34                          DB $1F, $5E, $10, $34               ;25
  68++E251 05 00 38 3C                          DB $05, $00, $38, $3C               ;26
  69++E255 03 00 3C 40                          DB $03, $00, $3C, $40               ;27
  70++E259 04 00 40 44                          DB $04, $00, $40, $44               ;28
  71++E25D 03 00 44 38                          DB $03, $00, $44, $38               ;29
  72++E261              AdderEdgesSize:         equ $ - AdderEdges
  73++E261              AdderEdgesCnt:          equ AdderEdgesSize/4
  74++E261 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A               ;01
  75++E265 5F 00 27 0A                          DB $5F, $00, $27, $0A               ;02
  76++E269 1F 45 32 0D                          DB $1F, $45, $32, $0D               ;03
  77++E26D 5F 45 32 0D                          DB $5F, $45, $32, $0D               ;04
  78++E271 1F 1E 34 00                          DB $1F, $1E, $34, $00               ;05
  79++E275 5F 1E 34 00                          DB $5F, $1E, $34, $00               ;06
  80++E279 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;07
  81++E27D 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;08
  82++E281 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;09
  83++E285 9F 1E 34 00                          DB $9F, $1E, $34, $00               ;10
  84++E289 DF 1E 34 00                          DB $DF, $1E, $34, $00               ;11
  85++E28D 9F 45 32 0D                          DB $9F, $45, $32, $0D               ;12
  86++E291 DF 45 32 0D                          DB $DF, $45, $32, $0D               ;13
  87++E295 1F 00 1C 00                          DB $1F, $00, $1C, $00               ;14
  88++E299 5F 00 1C 00                          DB $5F, $00, $1C, $00               ;15
  89++E29D
  90++E29D              AdderNormalsSize:       equ $ - AdderNormals
  91++E29D              AdderLen:                equ $ - Adder
  92++E29D
  93++E29D
  94++E29D
  95++E29D
  96++E29D
  97++E29D
  98++E29D
  99++E29D
 100++E29D
 101++E29D
 102++E29D
# file closed: ./Data/ships/Adder.asm
  88+ E29D                                      include "Data/ships/Anaconda.asm"
# file opened: ./Data/ships/Anaconda.asm
   1++E29D 07           Anaconda:	            DB $07                                                        ; Number of cargo canisters released when destroyed
   2++E29E 10 27                                DW 100 * 100                                                  ; Ship's targetable area LoHi
   3++E2A0 12 E3                                DW AnacondaEdges                                              ; Edge Data
   4++E2A2 64                                   DB AnacondaEdgesSize                                          ; Size of Edge Data
   5++E2A3 30                                   DB $30                                                        ; Gun Vertex Byte offset
   6++E2A4 2E                                   DB $2E                                                        ; Explosion Count
   7++E2A5 0F                                   DB AnacondaVertSize / 6                                       ; Vertex Count /6
   8++E2A6 5A                                   DB AnacondaVertSize                                           ; Vertex Count
   9++E2A7 19                                   DB AnacondaEdgesCnt                                           ; Edges Count
  10++E2A8 00 00                                DW $0000                                                      ; Bounty LoHi
  11++E2AA 30                                   DB AnacondaNormalsSize                                        ; Face (Normal) Count
  12++E2AB 24                                   DB $24                                                        ; Range when it turns to a dot
  13++E2AC FC                                   DB $FC                                                        ; Energy Max
  14++E2AD 0E                                   DB $0E                                                        ; Speed Max
  15++E2AE 76 E3                                DW AnacondaNormals                                            ; Normals
  16++E2B0 11                                   DB $11                                                        ; Q scaling
  17++E2B1 3F                                   DB $3F                                                        ; Laser power and Nbr Missiles
  18++E2B2 B8 E2                                DW AnacondaVertices                                           ; Verticles Address
  19++E2B4 00                                   DB ShipTypeNormal                                             ; Ship Type
  20++E2B5 00                                   DB 0                                                          ; NewB Tactics
  21++E2B6 A4                                   DB ShipCanAnger | ShipFighterBaySize2 | ShipFighterSidewinder ; AI Flags
  22++E2B7 D0                                   DB $D0                                                        ; chance of ECM module
  23++E2B8 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55 ;01
  23++E2BC 01 55
  24++E2BE 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22 ;02
  24++E2C2 01 22
  25++E2C4 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33 ;03
  25++E2C8 02 33
  26++E2CA 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44 ;04
  26++E2CE 03 44
  27++E2D0 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55 ;05
  27++E2D4 04 55
  28++E2D6 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66 ;06
  28++E2DA 15 66
  29++E2DC 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77 ;07
  29++E2E0 12 77
  30++E2E2 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88 ;08
  30++E2E6 23 88
  31++E2E8 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99 ;09
  31++E2EC 34 99
  32++E2EE 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA ;10
  32++E2F2 45 AA
  33++E2F4 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF ;11
  33++E2F8 FF FF
  34++E2FA 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88 ;12
  34++E2FE 27 88
  35++E300 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF ;13
  35++E304 FF FF
  36++E306 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA ;14
  36++E30A 49 AA
  37++E30C 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF ;15
  37++E310 FF FF
  38++E312              AnacondaVertSize:       equ $ - AnacondaVertices
  39++E312 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04           ;01
  40++E316 1E 02 04 08                          DB $1E, $02, $04, $08           ;02
  41++E31A 1E 03 08 0C                          DB $1E, $03, $08, $0C           ;03
  42++E31E 1E 04 0C 10                          DB $1E, $04, $0C, $10           ;04
  43++E322 1E 05 00 10                          DB $1E, $05, $00, $10           ;05
  44++E326 1D 15 00 14                          DB $1D, $15, $00, $14           ;06
  45++E32A 1D 12 04 18                          DB $1D, $12, $04, $18           ;07
  46++E32E 1D 23 08 1C                          DB $1D, $23, $08, $1C           ;08
  47++E332 1D 34 0C 20                          DB $1D, $34, $0C, $20           ;09
  48++E336 1D 45 10 24                          DB $1D, $45, $10, $24           ;10
  49++E33A 1E 16 14 28                          DB $1E, $16, $14, $28           ;11
  50++E33E 1E 17 18 28                          DB $1E, $17, $18, $28           ;12
  51++E342 1E 27 18 2C                          DB $1E, $27, $18, $2C           ;13
  52++E346 1E 28 1C 2C                          DB $1E, $28, $1C, $2C           ;14
  53++E34A 1F 38 1C 30                          DB $1F, $38, $1C, $30           ;15
  54++E34E 1F 39 20 30                          DB $1F, $39, $20, $30           ;16
  55++E352 1E 49 20 34                          DB $1E, $49, $20, $34           ;17
  56++E356 1E 4A 24 34                          DB $1E, $4A, $24, $34           ;18
  57++E35A 1E 5A 24 38                          DB $1E, $5A, $24, $38
  58++E35E 1E 56 14 38                          DB $1E, $56, $14, $38
  59++E362 1E 6B 28 38                          DB $1E, $6B, $28, $38
  60++E366 1F 7B 28 30                          DB $1F, $7B, $28, $30
  61++E36A 1F 78 2C 30                          DB $1F, $78, $2C, $30
  62++E36E 1F 9A 30 34                          DB $1F, $9A, $30, $34
  63++E372 1F AB 30 38                          DB $1F, $AB, $30, $38
  64++E376              AnacondaEdgesSize:      equ $ - AnacondaEdges
  65++E376              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  66++E376 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31           ;01
  67++E37A BE 33 12 57                          DB $BE, $33, $12, $57           ;02
  68++E37E FE 4D 39 13                          DB $FE, $4D, $39, $13           ;03
  69++E382 5F 00 5A 10                          DB $5F, $00, $5A, $10           ;04
  70++E386 7E 4D 39 13                          DB $7E, $4D, $39, $13           ;05
  71++E38A 3E 33 12 57                          DB $3E, $33, $12, $57           ;06
  72++E38E 3E 00 6F 14                          DB $3E, $00, $6F, $14           ;07
  73++E392 9F 61 48 18                          DB $9F, $61, $48, $18           ;08
  74++E396 DF 6C 44 22                          DB $DF, $6C, $44, $22           ;09
  75++E39A 5F 6C 44 22                          DB $5F, $6C, $44, $22           ;10
  76++E39E 1F 61 48 18                          DB $1F, $61, $48, $18           ;11
  77++E3A2 1F 00 5E 12                          DB $1F, $00, $5E, $12           ;12
  78++E3A6              AnacondaNormalsSize:    equ $ - AnacondaNormals
  79++E3A6              AnacondaLen:            equ $ - Anaconda
  80++E3A6
  81++E3A6
  82++E3A6
  83++E3A6
# file closed: ./Data/ships/Anaconda.asm
  89+ E3A6                                      include "Data/ships/Asp_Mk_2.asm"
# file opened: ./Data/ships/Asp_Mk_2.asm
   1++E3A6 00           Asp_Mk_2:	            DB $00                          ; Number of cargo canisters released when destroyed
   2++E3A7 10 0E                                DW 60 * 60                      ; Ship's targetable area LoHi
   3++E3A9 33 E4                                DW Asp_Mk_2Edges                ; Edge Data
   4++E3AB 70                                   DB Asp_Mk_2EdgesSize            ; Size of Edge Data
   5++E3AC 20                                   DB $20                          ; Gun Vertex Byte offset
   6++E3AD 1A                                   DB $1A                          ; Explosion Count
   7++E3AE 13                                   DB Asp_Mk_2VertSize /6          ; Vertex Count /6
   8++E3AF 72                                   DB Asp_Mk_2VertSize             ; Vertex Count
   9++E3B0 1C                                   DB Asp_Mk_2EdgesCnt             ; Edges Count
  10++E3B1 C8 00                                DW $00C8                        ; Bounty LoHi
  11++E3B3 30                                   DB Asp_Mk_2NormalsSize          ; Face (Normal) Count
  12++E3B4 28                                   DB $28                          ; Range when it turns to a dot
  13++E3B5 96                                   DB $96                          ; Energy Max
  14++E3B6 28                                   DB $28                          ; Speed Max
  15++E3B7 A3 E4                                DW Asp_Mk_2Normals              ; Normals
  16++E3B9 01                                   DB $01                          ; Q scaling
  17++E3BA 29                                   DB $29                          ; Laser power and Nbr Missiles
  18++E3BB C1 E3                                DW Asp_Mk_2Vertices             ; Verticles Address
  19++E3BD 00                                   DB ShipTypeNormal               ; Ship Type
  20++E3BE 00                                   DB 0                            ; NewB Tactics
  21++E3BF 80                                   DB ShipCanAnger                 ; AI Flags
  22++E3C0 80                                   DB $80                          ; chance of ECM module
  23++E3C1 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22 ;01
  23++E3C5 01 22
  24++E3C7 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB ;02
  24++E3CB 12 BB
  25++E3CD 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB ;03
  25++E3D1 16 BB
  26++E3D3 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79 ;04
  26++E3D7 16 79
  27++E3D9 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77 ;05
  27++E3DD 01 77
  28++E3DF 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB ;06
  28++E3E3 25 BB
  29++E3E5 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A ;07
  29++E3E9 25 8A
  30++E3EB 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88 ;08
  30++E3EF 02 88
  31++E3F1 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79 ;09
  31++E3F5 04 79
  32++E3F7 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A ;10
  32++E3FB 04 8A
  33++E3FD 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69 ;11
  33++E401 34 69
  34++E403 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A ;12
  34++E407 34 5A
  35++E409 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B ;13
  35++E40D 35 6B
  36++E40F 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB ;14
  36++E413 BB BB
  37++E415 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB ;15
  37++E419 BB BB
  38++E41B 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB ;16
  38++E41F BB BB
  39++E421 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB ;17
  39++E425 BB BB
  40++E427 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04 ;18
  40++E42B 04 04
  41++E42D 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04 ;19
  41++E431 04 04
  42++E433              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  43++E433 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04           ;01
  44++E437 16 01 00 10                          DB $16, $01, $00, $10           ;02
  45++E43B 16 02 00 1C                          DB $16, $02, $00, $1C           ;03
  46++E43F 1F 1B 04 08                          DB $1F, $1B, $04, $08           ;04
  47++E443 1F 16 08 0C                          DB $1F, $16, $08, $0C           ;05
  48++E447 10 79 0C 20                          DB $10, $79, $0C, $20           ;06
  49++E44B 1F 04 20 24                          DB $1F, $04, $20, $24           ;07
  50++E44F 10 8A 18 24                          DB $10, $8A, $18, $24           ;08
  51++E453 1F 25 14 18                          DB $1F, $25, $14, $18           ;09
  52++E457 1F 2B 04 14                          DB $1F, $2B, $04, $14           ;10
  53++E45B 1F 17 0C 10                          DB $1F, $17, $0C, $10           ;11
  54++E45F 1F 07 10 20                          DB $1F, $07, $10, $20           ;12
  55++E463 1F 28 18 1C                          DB $1F, $28, $18, $1C           ;13
  56++E467 1F 08 1C 24                          DB $1F, $08, $1C, $24           ;14
  57++E46B 1F 6B 08 30                          DB $1F, $6B, $08, $30           ;15
  58++E46F 1F 5B 14 30                          DB $1F, $5B, $14, $30           ;16
  59++E473 16 36 28 30                          DB $16, $36, $28, $30           ;17
  60++E477 16 35 2C 30                          DB $16, $35, $2C, $30           ;18
  61++E47B 16 34 28 2C                          DB $16, $34, $28, $2C
  62++E47F 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  63++E483 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  64++E487 1F 69 0C 28                          DB $1F, $69, $0C, $28
  65++E48B 1F 49 20 28                          DB $1F, $49, $20, $28
  66++E48F 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  67++E493 09 BB 3C 38                          DB $09, $BB, $3C, $38
  68++E497 08 BB 38 40                          DB $08, $BB, $38, $40
  69++E49B 08 BB 40 34                          DB $08, $BB, $40, $34
  70++E49F 0A 04 48 44                          DB $0A, $04, $48, $44
  71++E4A3              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  72++E4A3              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  73++E4A3 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05           ;01
  74++E4A7 7F 08 26 07                          DB $7F, $08, $26, $07           ;02
  75++E4AB FF 08 26 07                          DB $FF, $08, $26, $07           ;03
  76++E4AF 36 00 18 01                          DB $36, $00, $18, $01           ;04
  77++E4B3 1F 00 2B 13                          DB $1F, $00, $2B, $13           ;05
  78++E4B7 BF 06 1C 02                          DB $BF, $06, $1C, $02           ;06
  79++E4BB 3F 06 1C 02                          DB $3F, $06, $1C, $02           ;07
  80++E4BF 5F 3B 40 1F                          DB $5F, $3B, $40, $1F           ;08
  81++E4C3 DF 3B 40 1F                          DB $DF, $3B, $40, $1F           ;09
  82++E4C7 1F 50 2E 32                          DB $1F, $50, $2E, $32           ;10
  83++E4CB 9F 50 2E 32                          DB $9F, $50, $2E, $32           ;11
  84++E4CF 3F 00 00 5A                          DB $3F, $00, $00, $5A           ;12
  85++E4D3              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  86++E4D3              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  87++E4D3
  88++E4D3
  89++E4D3
  90++E4D3
# file closed: ./Data/ships/Asp_Mk_2.asm
  90+ E4D3                                      include "Data/ships/Boa.asm"
# file opened: ./Data/ships/Boa.asm
   1++E4D3 05           Boa:	                DB $05                          ; Number of cargo canisters released when destroyed
   2++E4D4 24 13                                DW 70 * 70                      ; Ship's targetable area LoHi
   3++E4D6 3C E5                                DW BoaEdges                     ; Edge Data
   4++E4D8 60                                   DB BoaEdgesSize                 ; Size of Edge Data
   5++E4D9 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E4DA 26                                   DB $26                          ; Explosion Count
   7++E4DB 0D                                   DB BoaVertSize /6               ; Vertex Count /6
   8++E4DC 4E                                   DB BoaVertSize                  ; Vertex Count
   9++E4DD 18                                   DB BoaEdgesCnt                  ; Edges Count
  10++E4DE 00 00                                DW $0000                        ; Bounty LoHi
  11++E4E0 30                                   DB BoaNormalsSize               ; Face (Normal) Count
  12++E4E1 28                                   DB $28                          ; Range when it turns to a dot
  13++E4E2 FA                                   DB $FA                          ; Energy Max
  14++E4E3 18                                   DB $18                          ; Speed Max
  15++E4E4 9C E5                                DW BoaNormals                   ; Normals
  16++E4E6 00                                   DB $00                          ; Q scaling
  17++E4E7 1C                                   DB $1C                          ; Laser power and Nbr Missiles
  18++E4E8 EE E4                                DW BoaVertices                  ; Verticles Address
  19++E4EA 00                                   DB ShipTypeNormal               ; Ship Type
  20++E4EB 00                                   DB 0                            ; NewB Tactics
  21++E4EC 80                                   DB ShipCanAnger                 ; AI Flags
  22++E4ED A0                                   DB $A0                          ; chance of ECM module
  23++E4EE 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF ; 01
  23++E4F2 FF FF
  24++E4F4 00 28 57 38                          DB $00, $28, $57, $38, $02, $33 ; 02
  24++E4F8 02 33
  25++E4FA 26 19 63 78                          DB $26, $19, $63, $78, $01, $44 ; 03
  25++E4FE 01 44
  26++E500 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55 ; 04
  26++E504 12 55
  27++E506 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69 ; 05
  27++E50A 23 69
  28++E50C 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B ; 06
  28++E510 03 6B
  29++E512 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B ; 07
  29++E516 04 8B
  30++E518 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A ; 08
  30++E51C 14 8A
  31++E51E 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A ; 09
  31++E522 15 7A
  32++E524 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79 ; 10
  32++E528 25 79
  33++E52A 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA ; 11
  33++E52E 02 AA
  34++E530 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA ; 12
  34++E534 01 AA
  35++E536 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC ; 13
  35++E53A 12 CC
  36++E53C              BoaVertSize:            equ $ - BoaVertices
  37++E53C 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  38++E540 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  39++E544 1F 79 00 24                          DB $1F, $79, $00, $24
  40++E548 1D 69 00 10                          DB $1D, $69, $00, $10
  41++E54C 1D 8B 00 18                          DB $1D, $8B, $00, $18
  42++E550 1D 7A 00 20                          DB $1D, $7A, $00, $20
  43++E554 1F 36 10 14                          DB $1F, $36, $10, $14
  44++E558 1F 0B 14 18                          DB $1F, $0B, $14, $18
  45++E55C 1F 48 18 1C                          DB $1F, $48, $18, $1C
  46++E560 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  47++E564 1F 57 20 24                          DB $1F, $57, $20, $24
  48++E568 1F 29 10 24                          DB $1F, $29, $10, $24
  49++E56C 18 23 04 10                          DB $18, $23, $04, $10
  50++E570 18 03 04 14                          DB $18, $03, $04, $14
  51++E574 18 25 0C 24                          DB $18, $25, $0C, $24
  52++E578 18 15 0C 20                          DB $18, $15, $0C, $20
  53++E57C 18 04 08 18                          DB $18, $04, $08, $18
  54++E580 18 14 08 1C                          DB $18, $14, $08, $1C
  55++E584 16 02 04 28                          DB $16, $02, $04, $28
  56++E588 16 01 08 2C                          DB $16, $01, $08, $2C
  57++E58C 16 12 0C 30                          DB $16, $12, $0C, $30
  58++E590 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  59++E594 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  60++E598 0E 2C 30 28                          DB $0E, $2C, $30, $28
  61++E59C              BoaEdgesSize:           equ $ - BoaEdges
  62++E59C              BoaEdgesCnt:            equ BoaEdgesSize/4
  63++E59C 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  64++E5A0 7F 00 2D 59                          DB $7F, $00, $2D, $59
  65++E5A4 BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  66++E5A8 1F 00 28 00                          DB $1F, $00, $28, $00
  67++E5AC 7F 3E 20 14                          DB $7F, $3E, $20, $14
  68++E5B0 FF 3E 20 14                          DB $FF, $3E, $20, $14
  69++E5B4 1F 00 17 06                          DB $1F, $00, $17, $06
  70++E5B8 DF 17 0F 09                          DB $DF, $17, $0F, $09
  71++E5BC 5F 17 0F 09                          DB $5F, $17, $0F, $09
  72++E5C0 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  73++E5C4 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  74++E5C8 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  75++E5CC              BoaNormalsSize:         equ $ - BoaNormals
  76++E5CC              BoaLen:                 equ $ - Boa
  77++E5CC
# file closed: ./Data/ships/Boa.asm
  91+ E5CC
  92+ E5CC                                      include "Data/ships/CargoType5.asm"
# file opened: ./Data/ships/CargoType5.asm
   1++E5CC 00           CargoType5              DB $00                         ; Number of cargo canisters released when destroyed
   2++E5CD 90 01                                DW 20 * 20                     ; Ship's targetable area LoHi
   3++E5CF 23 E6                                DW CargoType5Edges             ; Edge Data
   4++E5D1 3C                                   DB CargoType5EdgesSize         ; Size of Edge Data
   5++E5D2 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E5D3 12                                   DB $12                         ; Explosion Count
   7++E5D4 0A                                   DB CargoType5VertSize /6       ; Vertex Count /6
   8++E5D5 3C                                   DB CargoType5VertSize          ; Vertex Count
   9++E5D6 0F                                   DB CargoType5EdgesCnt          ; Edges Count
  10++E5D7 00 00                                DW $0000                       ; Bounty LoHi
  11++E5D9 1C                                   DB CargoType5NormalsSize       ; Face (Normal) Count
  12++E5DA 0C                                   DB $0C                         ; Range when it turns to a dot
  13++E5DB 11                                   DB $11                         ; Energy Max
  14++E5DC 0F                                   DB $0F                         ; Speed Max
  15++E5DD 5F E6                                DW CargoType5Normals           ; Normals
  16++E5DF 02                                   DB $02                         ; Q scaling
  17++E5E0 00                                   DB $00                         ; Laser power and Nbr Missiles
  18++E5E1 E7 E5                                DW CargoType5Vertices          ; Verticles Address
  19++E5E3 04                                   DB ShipTypeScoopable           ; Ship Type
  20++E5E4 00                                   DB 0                           ; NewB Tactics
  21++E5E5 00                                   DB 0                           ; AI Flags
  22++E5E6 00                                   DB $0                          ; chance of ECM module
  23++E5E7              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  24++E5E7 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	; 60 bytes in total for data
  24++E5EB 10 55
  25++E5ED 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22
  25++E5F1 10 22
  26++E5F3 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33
  26++E5F7 20 33
  27++E5F9 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44
  27++E5FD 30 44
  28++E5FF 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55   ; end of left pentagon
  28++E603 40 55
  29++E605 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66   ; start of right pentagon
  29++E609 51 66
  30++E60B 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66
  30++E60F 21 66
  31++E611 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66
  31++E615 32 66
  32++E617 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66
  32++E61B 43 66
  33++E61D 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66
  33++E621 54 66
  34++E623              CargoType5VertSize      equ $  - CargoType5Vertices
  35++E623 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04,$1F,$20,$04,$08 	; 8 x 7 = 60 bytes
  35++E627 1F 20 04 08
  36++E62B 1F 30 08 0C                          DB $1F,$30,$08,$0C,$1F,$40,$0C,$10
  36++E62F 1F 40 0C 10
  37++E633 1F 50 00 10                          DB $1F,$50,$00,$10,$1F,$51,$00,$14
  37++E637 1F 51 00 14
  38++E63B 1F 21 04 18                          DB $1F,$21,$04,$18,$1F,$32,$08,$1C
  38++E63F 1F 32 08 1C
  39++E643 1F 43 0C 20                          DB $1F,$43,$0C,$20,$1F,$54,$10,$24
  39++E647 1F 54 10 24
  40++E64B 1F 61 14 18                          DB $1F,$61,$14,$18,$1F,$62,$18,$1C
  40++E64F 1F 62 18 1C
  41++E653 1F 63 1C 20                          DB $1F,$63,$1C,$20,$1F,$64,$20,$24
  41++E657 1F 64 20 24
  42++E65B 1F 65 24 14                          DB $1F,$65,$24,$14
  43++E65F              CargoType5EdgesSize     equ $  - CargoType5Edges
  44++E65F              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  45++E65F 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00
  46++E663 1F 00 29 1E                          DB $1F,$00,$29,$1E,$5F,$00,$12,$30
  46++E667 5F 00 12 30
  47++E66B 5F 00 33 00                          DB $5F,$00,$33,$00,$7F,$00,$12,$30
  47++E66F 7F 00 12 30
  48++E673 3F 00 29 1E                          DB $3F,$00,$29,$1E,$9F,$60,$00,$00   ; end Cargo cannister
  48++E677 9F 60 00 00
  49++E67B              CargoType5NormalsSize   equ $  - CargoType5Normals
  50++E67B              CargoType5Len           equ $  - CargoType5
# file closed: ./Data/ships/CargoType5.asm
  93+ E67B                                      include "Data/ships/Boulder.asm"
# file opened: ./Data/ships/Boulder.asm
   1++E67B 00           Boulder:	            DB $00                               ; Number of cargo canisters released when destroyed
   2++E67C 84 03                                DW 30 * 30                           ; Ship's targetable area LoHi
   3++E67E C0 E6                                DW BoulderEdges                      ; Edge Data
   4++E680 3C                                   DB BoulderEdgesSize                  ; Size of Edge Data
   5++E681 00                                   DB $00                               ; Gun Vertex Byte offset
   6++E682 0E                                   DB $0E                               ; Explosion Count
   7++E683 07                                   DB BoulderVertSize /6                ; Vertex Count /6
   8++E684 2A                                   DB BoulderVertSize                   ; Vertex Count
   9++E685 0F                                   DB BoulderEdgesCnt                   ; Edges Count
  10++E686 01 00                                DW $0001                             ; Bounty LoHi
  11++E688 28                                   DB BoulderNormalsSize                ; Face (Normal) Count
  12++E689 14                                   DB $14                               ; Range when it turns to a dot
  13++E68A 14                                   DB $14                               ; Energy Max
  14++E68B 1E                                   DB $1E                               ; Speed Max
  15++E68C FC E6                                DW BoulderNormals                    ; Normals
  16++E68E 02                                   DB $02                               ; Q scaling
  17++E68F 00                                   DB $00                               ; Laser power and Nbr Missiles
  18++E690 96 E6                                DW BoulderVertices                   ; Verticles Address
  19++E692 03                                   DB ShipTypeJunk                      ; Ship Type
  20++E693 00                                   DB 0                                 ; NewB Tactics
  21++E694 00                                   DB 0                                 ; AI Flags
  22++E695 A0                                   DB $A0                               ; chance of ECM module
  23++E696 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  23++E69A 01 59
  24++E69C 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  24++E6A0 12 56
  25++E6A2 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  25++E6A6 23 67
  26++E6A8 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  26++E6AC 34 78
  27++E6AE 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  27++E6B2 04 89
  28++E6B4 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  28++E6B8 FF FF
  29++E6BA 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  29++E6BE FF FF
  30++E6C0              BoulderVertSize:        equ $ - BoulderVertices
  31++E6C0 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  32++E6C4 1F 26 04 08                          DB $1F, $26, $04, $08
  33++E6C8 1F 37 08 0C                          DB $1F, $37, $08, $0C
  34++E6CC 1F 48 0C 10                          DB $1F, $48, $0C, $10
  35++E6D0 1F 09 10 00                          DB $1F, $09, $10, $00
  36++E6D4 1F 01 00 14                          DB $1F, $01, $00, $14
  37++E6D8 1F 12 04 14                          DB $1F, $12, $04, $14
  38++E6DC 1F 23 08 14                          DB $1F, $23, $08, $14
  39++E6E0 1F 34 0C 14                          DB $1F, $34, $0C, $14
  40++E6E4 1F 04 10 14                          DB $1F, $04, $10, $14
  41++E6E8 1F 59 00 18                          DB $1F, $59, $00, $18
  42++E6EC 1F 56 04 18                          DB $1F, $56, $04, $18
  43++E6F0 1F 67 08 18                          DB $1F, $67, $08, $18
  44++E6F4 1F 78 0C 18                          DB $1F, $78, $0C, $18
  45++E6F8 1F 89 10 18                          DB $1F, $89, $10, $18
  46++E6FC              BoulderEdgesSize:       equ $ - BoulderEdges
  47++E6FC              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  48++E6FC DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  49++E700 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  50++E704 5F 20 2F 18                          DB $5F, $20, $2F, $18
  51++E708 FF 03 27 07                          DB $FF, $03, $27, $07
  52++E70C FF 05 04 01                          DB $FF, $05, $04, $01
  53++E710 1F 31 54 08                          DB $1F, $31, $54, $08
  54++E714 3F 70 15 15                          DB $3F, $70, $15, $15
  55++E718 7F 4C 23 52                          DB $7F, $4C, $23, $52
  56++E71C 3F 16 38 89                          DB $3F, $16, $38, $89
  57++E720 3F 28 6E 26                          DB $3F, $28, $6E, $26
  58++E724              BoulderNormalsSize:     equ $ - BoulderNormals
  59++E724              BoulderLen:             equ $ - Boulder
  60++E724
# file closed: ./Data/ships/Boulder.asm
  94+ E724                                      include "Data/ships/Asteroid.asm"
# file opened: ./Data/ships/Asteroid.asm
   1++E724 00           Asteroid:	            DB $00                          ; Number of cargo canisters released when destroyed
   2++E725 00 19                                DW 80 * 80                      ; Ship's targetable area LoHi
   3++E727 75 E7                                DW AsteroidEdges                ; Edge Data
   4++E729 54                                   DB AsteroidEdgesSize            ; Size of Edge Data
   5++E72A 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E72B 22                                   DB $22                          ; Explosion Count
   7++E72C 09                                   DB AsteroidVertSize /6          ; Vertex Count /6
   8++E72D 36                                   DB AsteroidVertSize             ; Vertex Count
   9++E72E 15                                   DB AsteroidEdgesCnt             ; Edges Count
  10++E72F 05 00                                DW $0005                        ; Bounty LoHi
  11++E731 38                                   DB AsteroidNormalsSize          ; Face (Normal) Count
  12++E732 32                                   DB $32                          ; Range when it turns to a dot
  13++E733 3C                                   DB $3C                          ; Energy Max
  14++E734 1E                                   DB $1E                          ; Speed Max
  15++E735 C9 E7                                DW AsteroidNormals              ; Normals
  16++E737 01                                   DB $01                          ; Q scaling
  17++E738 00                                   DB $00                          ; Laser power and Nbr Missiles
  18++E739 3F E7                                DW AsteroidVertices             ; Verticles Address
  19++E73B 03                                   DB ShipTypeJunk                 ; Ship Type
  20++E73C 00                                   DB 0                            ; NewB Tactics
  21++E73D 00                                   DB 0                            ; AI Flags
  22++E73E 00                                   DB $00                          ; chance of ECM module
  23++E73F 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF ;01
  23++E743 FF FF
  24++E745 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF ;02
  24++E749 FF FF
  25++E74B 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF ;03
  25++E74F FF FF
  26++E751 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF ;04
  26++E755 FF FF
  27++E757 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC ;05
  27++E75B 65 DC
  28++E75D 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF ;06
  28++E761 FF FF
  29++E763 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32 ;07
  29++E767 10 32
  30++E769 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF ;08
  30++E76D FF FF
  31++E76F 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA ;09
  31++E773 98 BA
  32++E775              AsteroidVertSize:       equ $ - AsteroidVertices
  33++E775 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04           ;01
  34++E779 1F D6 00 10                          DB $1F, $D6, $00, $10           ;02
  35++E77D 1F C5 0C 10                          DB $1F, $C5, $0C, $10           ;03
  36++E781 1F B4 08 0C                          DB $1F, $B4, $08, $0C           ;04
  37++E785 1F A3 04 08                          DB $1F, $A3, $04, $08           ;05
  38++E789 1F 32 04 18                          DB $1F, $32, $04, $18           ;06
  39++E78D 1F 31 08 18                          DB $1F, $31, $08, $18           ;07
  40++E791 1F 41 08 14                          DB $1F, $41, $08, $14           ;08
  41++E795 1F 10 14 18                          DB $1F, $10, $14, $18           ;09
  42++E799 1F 60 00 14                          DB $1F, $60, $00, $14           ;10
  43++E79D 1F 54 0C 14                          DB $1F, $54, $0C, $14           ;11
  44++E7A1 1F 20 00 18                          DB $1F, $20, $00, $18           ;12
  45++E7A5 1F 65 10 14                          DB $1F, $65, $10, $14           ;13
  46++E7A9 1F A8 04 20                          DB $1F, $A8, $04, $20           ;14
  47++E7AD 1F 87 04 1C                          DB $1F, $87, $04, $1C           ;15
  48++E7B1 1F D7 00 1C                          DB $1F, $D7, $00, $1C           ;16
  49++E7B5 1F DC 10 1C                          DB $1F, $DC, $10, $1C           ;17
  50++E7B9 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C           ;18
  51++E7BD 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  52++E7C1 1F BA 08 20                          DB $1F, $BA, $08, $20
  53++E7C5 1F 98 1C 20                          DB $1F, $98, $1C, $20
  54++E7C9
  55++E7C9              AsteroidEdgesSize:      equ $ - AsteroidEdges
  56++E7C9              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  57++E7C9 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51           ;01
  58++E7CD 5F 09 42 51                          DB $5F, $09, $42, $51           ;02
  59++E7D1 9F 48 40 1F                          DB $9F, $48, $40, $1F           ;03
  60++E7D5 DF 40 49 2F                          DB $DF, $40, $49, $2F           ;04
  61++E7D9 5F 2D 4F 41                          DB $5F, $2D, $4F, $41           ;05
  62++E7DD 1F 87 0F 23                          DB $1F, $87, $0F, $23           ;06
  63++E7E1 1F 26 4C 46                          DB $1F, $26, $4C, $46           ;07
  64++E7E5 BF 42 3B 27                          DB $BF, $42, $3B, $27           ;08
  65++E7E9 FF 43 0F 50                          DB $FF, $43, $0F, $50           ;09
  66++E7ED 7F 42 0E 4B                          DB $7F, $42, $0E, $4B           ;10
  67++E7F1 FF 46 50 28                          DB $FF, $46, $50, $28           ;11
  68++E7F5 7F 3A 66 33                          DB $7F, $3A, $66, $33           ;12
  69++E7F9 3F 51 09 43                          DB $3F, $51, $09, $43           ;13
  70++E7FD 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F           ;14
  71++E801              AsteroidNormalsSize:    equ $ - AsteroidNormals
  72++E801              AsteroidLen:            equ $ - Asteroid
  73++E801
  74++E801
# file closed: ./Data/ships/Asteroid.asm
  95+ E801
  96+ E801                                      include "Data/ships/Bushmaster.asm"
# file opened: ./Data/ships/Bushmaster.asm
   1++E801 00           Bushmaster:	            DB $00                           ; Number of cargo canisters released when destroyed
   2++E802 9A 10                                DW $109A                         ; Ship's targetable area LoHi
   3++E804 64 E8                                DW BushmasterEdges               ; Edge Data
   4++E806 4C                                   DB BushmasterEdgesSize           ; Size of Edge Data
   5++E807 00                                   DB $00                           ; Gun Vertex Byte offset
   6++E808 1E                                   DB $1E                           ; Explosion Count
   7++E809 0C                                   DB BushmasterVertSize /6         ; Vertex Count /6
   8++E80A 48                                   DB BushmasterVertSize            ; Vertex Count
   9++E80B 13                                   DB BushmasterEdgesCnt            ; Edges Count
  10++E80C 96 00                                DW $0096                         ; Bounty LoHi
  11++E80E 24                                   DB BushmasterNormalsSize         ; Face (Normal) Count
  12++E80F 14                                   DB $14                           ; Range when it turns to a dot
  13++E810 4A                                   DB $4A                           ; Energy Max
  14++E811 23                                   DB $23                           ; Speed Max
  15++E812 B0 E8                                DW BushmasterNormals             ; Normals
  16++E814 02                                   DB $02                           ; Q scaling
  17++E815 21                                   DB $20 | ShipMissiles1           ; Laser power and Nbr Missiles
  18++E816 1C E8                                DW BushmasterVertices            ; Verticles Address
  19++E818 00                                   DB ShipTypeNormal                ; Ship Type
  20++E819 00                                   DB 0                             ; NewB Tactics
  21++E81A 80                                   DB ShipCanAnger                  ; AI Flags
  22++E81B 70                                   DB $70                           ; chance of ECM module
  23++E81C 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01  ; 01
  23++E820 23 01
  24++E822 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13  ; 02
  24++E826 57 13
  25++E828 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02  ; 03
  25++E82C 46 02
  26++E82E 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01  ; 04
  26++E832 45 01
  27++E834 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF  ; 05
  27++E838 FF FF
  28++E83A 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45  ; 06
  28++E83E 88 45
  29++E840 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57  ; 07
  29++E844 88 57
  30++E846 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46  ; 08
  30++E84A 88 46
  31++E84C 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88  ; 09
  31++E850 88 88
  32++E852 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88  ; 10
  32++E856 88 88
  33++E858 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88  ; 11
  33++E85C 88 88
  34++E85E 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88  ; 12           ; 12 * 6 = 72
  34++E862 88 88
  35++E864              BushmasterVertSize:     equ $ - BushmasterVertices
  36++E864 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04            ; 01
  37++E868 1F 02 00 08                          DB $1F, $02, $00, $08            ; 02
  38++E86C 1F 01 00 0C                          DB $1F, $01, $00, $0C            ; 03
  39++E870 1F 23 00 10                          DB $1F, $23, $00, $10            ; 04
  40++E874 1F 45 0C 14                          DB $1F, $45, $0C, $14            ; 05
  41++E878 1F 04 08 0C                          DB $1F, $04, $08, $0C            ; 06
  42++E87C 1F 15 04 0C                          DB $1F, $15, $04, $0C            ; 07
  43++E880 1F 46 08 1C                          DB $1F, $46, $08, $1C            ; 08
  44++E884 1F 57 04 18                          DB $1F, $57, $04, $18            ; 09
  45++E888 1F 26 08 10                          DB $1F, $26, $08, $10            ; 10
  46++E88C 1F 37 04 10                          DB $1F, $37, $04, $10            ; 11
  47++E890 1F 48 14 1C                          DB $1F, $48, $14, $1C            ; 12
  48++E894 1F 58 14 18                          DB $1F, $58, $14, $18            ; 13
  49++E898 1F 68 10 1C                          DB $1F, $68, $10, $1C            ; 14
  50++E89C 1F 78 10 18                          DB $1F, $78, $10, $18            ; 15
  51++E8A0 0A 88 20 24                          DB $0A, $88, $20, $24            ; 16
  52++E8A4 0A 88 24 28                          DB $0A, $88, $24, $28            ; 17
  53++E8A8 0A 88 28 2C                          DB $0A, $88, $28, $2C            ; 18
  54++E8AC 0A 88 2C 20                          DB $0A, $88, $2C, $20            ; 19           ; 19 * 4 = 76
  55++E8B0              BushmasterEdgesSize:    equ $ - BushmasterEdges
  56++E8B0              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4        ;
  57++E8B0 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D            ; 01
  58++E8B4 1F 17 58 1D                          DB $1F, $17, $58, $1D            ; 02
  59++E8B8 DF 0E 5D 12                          DB $DF, $0E, $5D, $12            ; 03
  60++E8BC 5F 0E 5D 12                          DB $5F, $0E, $5D, $12            ; 04
  61++E8C0 BF 1F 59 0D                          DB $BF, $1F, $59, $0D            ; 05
  62++E8C4 3F 1F 59 0D                          DB $3F, $1F, $59, $0D            ; 06
  63++E8C8 FF 2A 55 07                          DB $FF, $2A, $55, $07            ; 07
  64++E8CC 7F 2A 55 07                          DB $7F, $2A, $55, $07            ; 08
  65++E8D0 3F 00 00 60                          DB $3F, $00, $00, $60            ; 09           ; 9 * 4 = 36
  66++E8D4              BushmasterNormalsSize:  equ $ - BushmasterNormals
  67++E8D4              BushmasterLen:          equ $ - Bushmaster
  68++E8D4
# file closed: ./Data/ships/Bushmaster.asm
  97+ E8D4                                      include "Data/ships/Chameleon.asm"
# file opened: ./Data/ships/Chameleon.asm
   1++E8D4 03           Chameleon:	            DB $03                          ; Number of cargo canisters released when destroyed
   2++E8D5 A0 0F                                DW $0FA0                        ; Ship's targetable area LoHi
   3++E8D7 5A E9                                DW ChameleonEdges               ; Edge Data
   4++E8D9 74                                   DB ChameleonEdgesSize           ; Size of Edge Data
   5++E8DA 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E8DB 1A                                   DB $1A                          ; Explosion Count
   7++E8DC 12                                   DB ChameleonVertSize /6         ; Vertex Count /6
   8++E8DD 6C                                   DB ChameleonVertSize            ; Vertex Count
   9++E8DE 1D                                   DB ChameleonEdgesCnt            ; Edges Count
  10++E8DF C8                                   DB $00C8                        ; Bounty LoHi
  11++E8E0 34                                   DB ChameleonNormalsSize         ; Face (Normal) Count
  12++E8E1 0A                                   DB $0A                          ; Range when it turns to a dot
  13++E8E2 64                                   DB $64                          ; Energy Max
  14++E8E3 1D                                   DB $1D                          ; Speed Max
  15++E8E4 CE E9                                DW ChameleonNormals             ; Normals
  16++E8E6 01                                   DB $01                          ; Q scaling
  17++E8E7 23                                   DB $23                          ; Laser power and Nbr Missiles
  18++E8E8 EE E8                                DW ChameleonVertices            ; Verticles Address
  19++E8EA 00                                   DB ShipTypeNormal               ; Ship Type
  20++E8EB 00                                   DB 0                            ; NewB Tactics
  21++E8EC 80                                   DB ShipCanAnger                 ; AI Flags
  22++E8ED 40                                   DB $40                          ; chance of ECM module
  23++E8EE 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  23++E8F2 25 01
  24++E8F4 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  24++E8F8 34 01
  25++E8FA 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  25++E8FE 8B 25
  26++E900 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  26++E904 68 22
  27++E906 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  27++E90A 69 33
  28++E90C 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  28++E910 9A 34
  29++E912 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  29++E916 7A 44
  30++E918 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  30++E91C 7B 55
  31++E91E 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  31++E922 36 02
  32++E924 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  32++E928 57 14
  33++E92A 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  33++E92E BC 88
  34++E930 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  34++E934 9C 68
  35++E936 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  35++E93A AC 99
  36++E93C 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  36++E940 BC 7A
  37++E942 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  37++E946 CC CC
  38++E948 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  38++E94C CC CC
  39++E94E 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  39++E952 CC CC
  40++E954 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  40++E958 CC CC
  41++E95A              ChameleonVertSize:      equ $ - ChameleonVertices
  42++E95A 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  43++E95E 1F 02 00 20                          DB $1F, $02, $00, $20
  44++E962 1F 15 00 24                          DB $1F, $15, $00, $24
  45++E966 1F 03 04 20                          DB $1F, $03, $04, $20
  46++E96A 1F 14 04 24                          DB $1F, $14, $04, $24
  47++E96E 1F 34 04 14                          DB $1F, $34, $04, $14
  48++E972 1F 25 00 08                          DB $1F, $25, $00, $08
  49++E976 1F 26 0C 20                          DB $1F, $26, $0C, $20
  50++E97A 1F 36 10 20                          DB $1F, $36, $10, $20
  51++E97E 1F 75 1C 24                          DB $1F, $75, $1C, $24
  52++E982 1F 74 18 24                          DB $1F, $74, $18, $24
  53++E986 1F 39 10 14                          DB $1F, $39, $10, $14
  54++E98A 1F 4A 14 18                          DB $1F, $4A, $14, $18
  55++E98E 1F 28 08 0C                          DB $1F, $28, $08, $0C
  56++E992 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  57++E996 1F 8B 08 28                          DB $1F, $8B, $08, $28
  58++E99A 1F 9A 14 30                          DB $1F, $9A, $14, $30
  59++E99E 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  60++E9A2 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  61++E9A6 1F 69 10 2C                          DB $1F, $69, $10, $2C
  62++E9AA 1F 7A 18 34                          DB $1F, $7A, $18, $34
  63++E9AE 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  64++E9B2 1F BC 28 34                          DB $1F, $BC, $28, $34
  65++E9B6 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  66++E9BA 1F AC 30 34                          DB $1F, $AC, $30, $34
  67++E9BE 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  68++E9C2 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  69++E9C6 0A CC 40 44                          DB $0A, $CC, $40, $44
  70++E9CA 0A CC 44 38                          DB $0A, $CC, $44, $38
  71++E9CE              ChameleonEdgesSize:     equ $ - ChameleonEdges
  72++E9CE              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  73++E9CE 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  74++E9D2 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  75++E9D6 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  76++E9DA 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  77++E9DE 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  78++E9E2 DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  79++E9E6 1F 00 60 00                          DB $1F, $00, $60, $00
  80++E9EA 5F 00 60 00                          DB $5F, $00, $60, $00
  81++E9EE BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  82++E9F2 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  83++E9F6 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  84++E9FA FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  85++E9FE 3F 00 00 60                          DB $3F, $00, $00, $60
  86++EA02              ChameleonNormalsSize:   equ $ - ChameleonNormals
  87++EA02              ChameleonLen:           equ $ - Chameleon
  88++EA02
# file closed: ./Data/ships/Chameleon.asm
  98+ EA02                                      include "Data/ships/CobraMk3.asm"
# file opened: ./Data/ships/CobraMk3.asm
   1++EA02              ; Corrected pointers
   2++EA02              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++EA02              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++EA02              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++EA02 03           CobraMk3    		    DB $03                            ; Number of cargo canisters released when destroyed
   6++EA03 41 23                                DW $2341                          ; Ship's targetable area LoHi
   7++EA05 C5 EA                                DW CobraMk3Edges                  ; Edge Data
   8++EA07 98                                   DB CobraMkEdgesSize               ; Size of Edge Data
   9++EA08 54                                   DB $54                            ; Gun Vertex Byte offset
  10++EA09 2A                                   DB $2A                            ; Explosion Count
  11++EA0A 1C                                   DB CobraMkVertSize /6             ; Vertex Count /6
  12++EA0B A8                                   DB CobraMkVertSize                ; Vertex Count
  13++EA0C 26                                   DB CobraMkEdgesCnt                ; Edges Count
  14++EA0D 00 00                                DW $0000                          ; Bounty LoHi
  15++EA0F 34                                   DB CobraMk3NormalsSize            ; Face (Normal) Count
  16++EA10 32                                   DB $32                            ; Range when it turns to a dot
  17++EA11 96                                   DB $96                            ; Energy Max
  18++EA12 1C                                   DB $1C                            ; Speed Max
  19++EA13 5D EB                                DW CobraMk3Normals                ; Normals
  20++EA15 01                                   DB $01                            ; Q scaling
  21++EA16 34                                   DB $30 | ShipMissiles4            ; Laser power and Nbr Missiles
  22++EA17 1D EA                                DW CobraMk3Vertices               ; Verticles Address
  23++EA19 00                                   DB ShipTypeNormal                 ; Ship Type
  24++EA1A 00                                   DB 0                              ; NewB Tactics
  25++EA1B 80                                   DB ShipCanAnger                   ; AI Flags
  26++EA1C 70                                   DB $70                            ; chance of ECM module
  27++EA1D 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  27++EA21 FF FF
  28++EA23 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  28++EA27 FF FF
  29++EA29 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  29++EA2D FF FF
  30++EA2F 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  30++EA33 73 AA
  31++EA35 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  31++EA39 84 CC
  32++EA3B 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  32++EA3F FF FF
  33++EA41 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  33++EA45 FF FF
  34++EA47 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  34++EA4B 98 CC
  35++EA4D 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  35++EA51 97 AA
  36++EA53 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  36++EA57 65 99
  37++EA59 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  37++EA5D A9 BB
  38++EA5F 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  38++EA63 B9 CC
  39++EA65 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  39++EA69 99 99
  40++EA6B 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  40++EA6F 99 99
  41++EA71 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  41++EA75 99 99
  42++EA77 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  42++EA7B 99 99
  43++EA7D 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  43++EA81 99 99
  44++EA83 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  44++EA87 99 99
  45++EA89 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  45++EA8D 99 99
  46++EA8F 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  46++EA93 99 99
  47++EA95 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  47++EA99 B0 BB
  48++EA9B 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  48++EA9F B0 BB
  49++EAA1 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  49++EAA5 99 99
  50++EAA7 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  50++EAAB 99 99
  51++EAAD 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  51++EAB1 99 99
  52++EAB3 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  52++EAB7 99 99
  53++EAB9 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  53++EABD 99 99
  54++EABF 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  54++EAC3 99 99
  55++EAC5              CobraMkVertSize         equ $  - CobraMk3Vertices
  56++EAC5 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
  56++EAC9 1F C4 00 10
  57++EACD 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
  57++EAD1 1F A7 0C 20
  58++EAD5 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
  58++EAD9 1F 98 18 1C
  59++EADD 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
  59++EAE1 1F 95 14 24
  60++EAE5 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
  60++EAE9 1F 51 08 14
  61++EAED 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
  61++EAF1 1F 73 0C 14
  62++EAF5 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
  62++EAF9 1F 10 04 08
  63++EAFD 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
  63++EB01 1F A9 20 28
  64++EB05 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
  64++EB09 1F C9 1C 2C
  65++EB0D 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
  65++EB11 1F CB 00 2C
  66++EB15 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
  66++EB19 1D 42 00 18
  67++EB1D 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
  67++EB21 14 99 30 34
  68++EB25 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
  68++EB29 14 99 38 3C
  69++EB2D 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
  69++EB31 13 99 3C 40
  70++EB35 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
  70++EB39 13 99 34 48
  71++EB3D 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
  71++EB41 1E 65 08 24
  72++EB45 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
  72++EB49 06 99 5C 60
  73++EB4D 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
  73++EB51 06 99 64 68
  74++EB55 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
  74++EB59 08 99 64 6C
  75++EB5D              CobraMkEdgesSize        equ $  - CobraMk3Edges
  76++EB5D              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
  77++EB5D              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  78++EB5D 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
  79++EB61 9F 12 37 10                          DB $9F,$12,$37,$10
  80++EB65 1F 12 37 10                          DB $1F,$12,$37,$10
  81++EB69 9F 10 34 0E                          DB $9F,$10,$34,$0E
  82++EB6D 1F 10 34 0E                          DB $1F,$10,$34,$0E
  83++EB71 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
  84++EB75 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
  85++EB79 9F 3D 66 00                          DB $9F,$3D,$66,$00
  86++EB7D 1F 3D 66 00                          DB $1F,$3D,$66,$00
  87++EB81 3F 00 00 50                          DB $3F,$00,$00,$50
  88++EB85 DF 07 2A 09                          DB $DF,$07,$2A,$09
  89++EB89 5F 00 1E 06                          DB $5F,$00,$1E,$06
  90++EB8D 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
  91++EB91              CobraMk3NormalsSize     equ $  - CobraMk3Normals
  92++EB91              CobraMk3Len             equ $  - CobraMk3
  93++EB91
# file closed: ./Data/ships/CobraMk3.asm
  99+ EB91                                      include "Data/ships/Cobra_Mk_1.asm"
# file opened: ./Data/ships/Cobra_Mk_1.asm
   1++EB91 03           Cobra_Mk_1:	            DB $03                              ; Number of cargo canisters released when destroyed
   2++EB92 49 26                                DW $2649                            ; Ship's targetable area LoHi
   3++EB94 EE EB                                DW Cobra_Mk_1Edges                  ; Edge Data
   4++EB96 48                                   DB Cobra_Mk_1EdgesSize              ; Size of Edge Data
   5++EB97 28                                   DB $28                              ; Gun Vertex Byte offset
   6++EB98 1A                                   DB $1A                              ; Explosion Count
   7++EB99 0B                                   DB Cobra_Mk_1VertSize /6            ; Vertex Count /6
   8++EB9A 42                                   DB Cobra_Mk_1VertSize               ; Vertex Count
   9++EB9B 12                                   DB Cobra_Mk_1EdgesCnt               ; Edges Count
  10++EB9C 00 4B                                DW $4B00                            ; Bounty LoHi
  11++EB9E 28                                   DB Cobra_Mk_1NormalsSize            ; Face (Normal) Count
  12++EB9F 13                                   DB $13                              ; Range when it turns to a dot
  13++EBA0 51                                   DB $51                              ; Energy Max
  14++EBA1 1A                                   DB $1A                              ; Speed Max
  15++EBA2 36 EC                                DW Cobra_Mk_1Normals                ; Normals
  16++EBA4 02                                   DB $02                              ; Q scaling
  17++EBA5 23                                   DB $20 | ShipMissiles3              ; Laser power and Nbr Missiles
  18++EBA6 AC EB                                DW Cobra_Mk_1Vertices               ; Verticles Address
  19++EBA8 00                                   DB ShipTypeNormal                   ; Ship Type
  20++EBA9 00                                   DB 0                                ; NewB Tactics
  21++EBAA 80                                   DB ShipCanAnger                     ; AI Flags
  22++EBAB 30                                   DB $30                              ; chance of ECM module
  23++EBAC 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  23++EBB0 01 23
  24++EBB2 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  24++EBB6 01 45
  25++EBB8 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  25++EBBC 23 88
  26++EBBE 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  26++EBC2 45 99
  27++EBC4 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  27++EBC8 26 78
  28++EBCA 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  28++EBCE 46 79
  29++EBD0 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  29++EBD4 13 78
  30++EBD6 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  30++EBDA 15 79
  31++EBDC 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  31++EBE0 02 46
  32++EBE2 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  32++EBE6 01 11
  33++EBE8 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  33++EBEC 01 11
  34++EBEE              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  35++EBEE 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  36++EBF2 1F 23 00 08                          DB $1F, $23, $00, $08
  37++EBF6 1F 38 08 18                          DB $1F, $38, $08, $18
  38++EBFA 1F 17 18 1C                          DB $1F, $17, $18, $1C
  39++EBFE 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  40++EC02 1F 45 0C 04                          DB $1F, $45, $0C, $04
  41++EC06 1F 28 08 10                          DB $1F, $28, $08, $10
  42++EC0A 1F 67 10 14                          DB $1F, $67, $10, $14
  43++EC0E 1F 49 14 0C                          DB $1F, $49, $14, $0C
  44++EC12 14 02 00 20                          DB $14, $02, $00, $20
  45++EC16 14 04 20 04                          DB $14, $04, $20, $04
  46++EC1A 10 26 10 20                          DB $10, $26, $10, $20
  47++EC1E 10 46 20 14                          DB $10, $46, $20, $14
  48++EC22 1F 78 10 18                          DB $1F, $78, $10, $18
  49++EC26 1F 79 14 1C                          DB $1F, $79, $14, $1C
  50++EC2A 14 13 00 18                          DB $14, $13, $00, $18
  51++EC2E 14 15 04 1C                          DB $14, $15, $04, $1C
  52++EC32 02 01 28 24                          DB $02, $01, $28, $24
  53++EC36              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  54++EC36              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  55++EC36 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  56++EC3A 5F 00 1B 03                          DB $5F, $00, $1B, $03
  57++EC3E 9F 08 2E 08                          DB $9F, $08, $2E, $08
  58++EC42 DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  59++EC46 1F 08 2E 08                          DB $1F, $08, $2E, $08
  60++EC4A 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  61++EC4E 1F 00 31 00                          DB $1F, $00, $31, $00
  62++EC52 3F 00 00 9A                          DB $3F, $00, $00, $9A
  63++EC56 BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  64++EC5A 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  65++EC5E              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  66++EC5E              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  67++EC5E
# file closed: ./Data/ships/Cobra_Mk_1.asm
 100+ EC5E                                      include "Data/ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/ships/Cobra_Mk_3_P.asm
   1++EC5E 01           Cobra_Mk_3_P:	        DB $01                              ; Number of cargo canisters released when destroyed
   2++EC5F 41 23                                DW $2341                            ; Ship's targetable area LoHi
   3++EC61 21 ED                                DW Cobra_Mk_3_PEdges                ; Edge Data
   4++EC63 98                                   DB Cobra_Mk_3_PEdgesSize            ; Size of Edge Data
   5++EC64 54                                   DB $54                              ; Gun Vertex Byte offset
   6++EC65 2A                                   DB $2A                              ; Explosion Count
   7++EC66 1C                                   DB Cobra_Mk_3_PVertSize /6          ; Vertex Count /6
   8++EC67 A8                                   DB Cobra_Mk_3_PVertSize             ; Vertex Count
   9++EC68 26                                   DB Cobra_Mk_3_PEdgesCnt             ; Edges Count
  10++EC69 00 AF                                DW $AF00                            ; Bounty LoHi
  11++EC6B 34                                   DB Cobra_Mk_3_PNormalsSize          ; Face (Normal) Count
  12++EC6C 32                                   DB $32                              ; Range when it turns to a dot
  13++EC6D 96                                   DB $96                              ; Energy Max
  14++EC6E 1C                                   DB $1C                              ; Speed Max
  15++EC6F B9 ED                                DW Cobra_Mk_3_PNormals              ; Normals
  16++EC71 01                                   DB $01                              ; Q scaling
  17++EC72 14                                   DB $10 | ShipMissiles4              ; Laser power and Nbr Missiles
  18++EC73 79 EC                                DW Cobra_Mk_3_PVertices             ; Verticles Address
  19++EC75 00                                   DB ShipTypeNormal                   ; Ship Type
  20++EC76 00                                   DB 0                                ; NewB Tactics
  21++EC77 80                                   DB ShipCanAnger                     ; AI Flags
  22++EC78 90                                   DB $90                              ; chance of ECM module
  23++EC79 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  23++EC7D FF FF
  24++EC7F 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  24++EC83 FF FF
  25++EC85 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  25++EC89 FF FF
  26++EC8B 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  26++EC8F 73 AA
  27++EC91 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  27++EC95 84 CC
  28++EC97 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  28++EC9B FF FF
  29++EC9D 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  29++ECA1 FF FF
  30++ECA3 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  30++ECA7 98 CC
  31++ECA9 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  31++ECAD 97 AA
  32++ECAF 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  32++ECB3 65 99
  33++ECB5 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  33++ECB9 A9 BB
  34++ECBB 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  34++ECBF B9 CC
  35++ECC1 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  35++ECC5 99 99
  36++ECC7 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  36++ECCB 99 99
  37++ECCD 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  37++ECD1 99 99
  38++ECD3 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  38++ECD7 99 99
  39++ECD9 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  39++ECDD 99 99
  40++ECDF 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  40++ECE3 99 99
  41++ECE5 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  41++ECE9 99 99
  42++ECEB 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  42++ECEF 99 99
  43++ECF1 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  43++ECF5 B0 BB
  44++ECF7 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  44++ECFB B0 BB
  45++ECFD 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  45++ED01 99 99
  46++ED03 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  46++ED07 99 99
  47++ED09 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  47++ED0D 99 99
  48++ED0F 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  48++ED13 99 99
  49++ED15 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  49++ED19 99 99
  50++ED1B 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  50++ED1F 99 99
  51++ED21              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  52++ED21 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  53++ED25 1F C4 00 10                          DB $1F, $C4, $00, $10
  54++ED29 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  55++ED2D 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  56++ED31 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  57++ED35 1F 98 18 1C                          DB $1F, $98, $18, $1C
  58++ED39 1F 96 18 24                          DB $1F, $96, $18, $24
  59++ED3D 1F 95 14 24                          DB $1F, $95, $14, $24
  60++ED41 1F 97 14 20                          DB $1F, $97, $14, $20
  61++ED45 1F 51 08 14                          DB $1F, $51, $08, $14
  62++ED49 1F 62 08 18                          DB $1F, $62, $08, $18
  63++ED4D 1F 73 0C 14                          DB $1F, $73, $0C, $14
  64++ED51 1F 84 10 18                          DB $1F, $84, $10, $18
  65++ED55 1F 10 04 08                          DB $1F, $10, $04, $08
  66++ED59 1F 20 00 08                          DB $1F, $20, $00, $08
  67++ED5D 1F A9 20 28                          DB $1F, $A9, $20, $28
  68++ED61 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  69++ED65 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  70++ED69 1F BA 04 28                          DB $1F, $BA, $04, $28
  71++ED6D 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  72++ED71 1D 31 04 14                          DB $1D, $31, $04, $14
  73++ED75 1D 42 00 18                          DB $1D, $42, $00, $18
  74++ED79 06 B0 50 54                          DB $06, $B0, $50, $54
  75++ED7D 14 99 30 34                          DB $14, $99, $30, $34
  76++ED81 14 99 48 4C                          DB $14, $99, $48, $4C
  77++ED85 14 99 38 3C                          DB $14, $99, $38, $3C
  78++ED89 14 99 40 44                          DB $14, $99, $40, $44
  79++ED8D 13 99 3C 40                          DB $13, $99, $3C, $40
  80++ED91 11 99 38 44                          DB $11, $99, $38, $44
  81++ED95 13 99 34 48                          DB $13, $99, $34, $48
  82++ED99 13 99 30 4C                          DB $13, $99, $30, $4C
  83++ED9D 1E 65 08 24                          DB $1E, $65, $08, $24
  84++EDA1 06 99 58 60                          DB $06, $99, $58, $60
  85++EDA5 06 99 5C 60                          DB $06, $99, $5C, $60
  86++EDA9 08 99 58 5C                          DB $08, $99, $58, $5C
  87++EDAD 06 99 64 68                          DB $06, $99, $64, $68
  88++EDB1 06 99 68 6C                          DB $06, $99, $68, $6C
  89++EDB5 08 99 64 6C                          DB $08, $99, $64, $6C
  90++EDB9              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  91++EDB9              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  92++EDB9 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  93++EDBD 9F 12 37 10                          DB $9F, $12, $37, $10
  94++EDC1 1F 12 37 10                          DB $1F, $12, $37, $10
  95++EDC5 9F 10 34 0E                          DB $9F, $10, $34, $0E
  96++EDC9 1F 10 34 0E                          DB $1F, $10, $34, $0E
  97++EDCD 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
  98++EDD1 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
  99++EDD5 9F 3D 66 00                          DB $9F, $3D, $66, $00
 100++EDD9 1F 3D 66 00                          DB $1F, $3D, $66, $00
 101++EDDD 3F 00 00 50                          DB $3F, $00, $00, $50
 102++EDE1 DF 07 2A 09                          DB $DF, $07, $2A, $09
 103++EDE5 5F 00 1E 06                          DB $5F, $00, $1E, $06
 104++EDE9 5F 07 2A 09                          DB $5F, $07, $2A, $09
 105++EDED              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
 106++EDED              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
 107++EDED
# file closed: ./Data/ships/Cobra_Mk_3_P.asm
 101+ EDED                                      include "Data/ships/Constrictor.asm"
# file opened: ./Data/ships/Constrictor.asm
   1++EDED F3           Constrictor:    	    DB $F3                         ; Number of cargo canisters released when destroyed
   2++EDEE 49 26                                DW $2649                       ; Ship's targetable area LoHi
   3++EDF0 6E EE                                DW ConstrictorEdges            ; Edge Data
   4++EDF2 60                                   DB ConstrictorEdgesSize        ; Size of Edge Data
   5++EDF3 00                                   DB $00                         ; Gun Vertex Byte offset
   6++EDF4 2E                                   DB $2E                         ; Explosion Count
   7++EDF5 11                                   DB ConstrictorVertSize /6      ; Vertex Count /6
   8++EDF6 66                                   DB ConstrictorVertSize         ; Vertex Count
   9++EDF7 18                                   DB ConstrictorEdgesCnt         ; Edges Count
  10++EDF8 18 00                                DW $0018                       ; Bounty LoHi
  11++EDFA 28                                   DB ConstrictorNormalsSize      ; Face (Normal) Count
  12++EDFB 2D                                   DB $2D                         ; Range when it turns to a dot
  13++EDFC C8                                   DB $C8                         ; Energy Max
  14++EDFD 37                                   DB $37                         ; Speed Max
  15++EDFE CE EE                                DW ConstrictorNormals          ; Normals
  16++EE00 02                                   DB $02                         ; Q scaling
  17++EE01 2F                                   DB $20 | ShipMissiles15        ; Laser power and Nbr Missiles
  18++EE02 08 EE                                DW ConstrictorVertices         ; Verticles Address
  19++EE04 00                                   DB ShipTypeNormal              ; Ship Type
  20++EE05 00                                   DB 0                           ; NewB Tactics
  21++EE06 80                                   DB ShipCanAnger                ; AI Flags
  22++EE07 FF                                   DB $FF                         ; chance of ECM module
  23++EE08 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  23++EE0C 02 99
  24++EE0E 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  24++EE12 01 99
  25++EE14 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  25++EE18 14 99
  26++EE1A 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  26++EE1E 45 89
  27++EE20 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  27++EE24 56 88
  28++EE26 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  28++EE2A 67 88
  29++EE2C 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  29++EE30 37 89
  30++EE32 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  30++EE36 23 99
  31++EE38 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  31++EE3C FF FF
  32++EE3E 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  32++EE42 FF FF
  33++EE44 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  33++EE48 99 99
  34++EE4A 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  34++EE4E 99 99
  35++EE50 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  35++EE54 99 99
  36++EE56 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  36++EE5A 99 99
  37++EE5C 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  37++EE60 99 99
  38++EE62 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  38++EE66 99 99
  39++EE68 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  39++EE6C 9F 01
  40++EE6E              ConstrictorVertSize     equ $  - ConstrictorVertices
  41++EE6E 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
  41++EE72 1F 19 04 08
  42++EE76 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
  42++EE7A 1F 02 00 20
  43++EE7E 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
  43++EE82 1F 23 1C 20
  44++EE86 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
  44++EE8A 1F 49 08 0C
  45++EE8E 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
  45++EE92 1F 37 18 20
  46++EE96 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
  46++EE9A 1F 56 10 24
  47++EE9E 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
  47++EEA2 1F 58 0C 10
  48++EEA6 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
  48++EEAA 1F 78 14 18
  49++EEAE 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
  49++EEB2 1F 06 20 24
  50++EEB6 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
  50++EEBA 05 99 30 38
  51++EEBE 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
  51++EEC2 0A 99 2C 3C
  52++EEC6 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
  52++EECA 12 99 2C 34
  53++EECE              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  54++EECE              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  55++EECE 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  55++EED2 9F 18 4B 14
  56++EED6 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  56++EEDA 1F 2C 4B 00
  57++EEDE 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  57++EEE2 9F 2C 4B 00
  58++EEE6 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  58++EEEA 1F 2C 4B 00
  59++EEEE 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  59++EEF2 5F 00 1B 00
  60++EEF6              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  61++EEF6              ConstrictorLen          equ $  - Constrictor
  62++EEF6
# file closed: ./Data/ships/Constrictor.asm
 102+ EEF6                                      include "Data/ships/Coriolis.asm"
# file opened: ./Data/ships/Coriolis.asm
   1++EEF6 00           Coriolis:	            DB $00                                      ; Number of cargo canisters released when destroyed
   2++EEF7 00 64                                DW $6400                                    ; Ship's targetable area LoHi
   3++EEF9 71 EF                                DW CoriolisEdges                            ; Edge Data
   4++EEFB 70                                   DB CoriolisEdgesSize                        ; Size of Edge Data
   5++EEFC 00                                   DB $00                                      ; Gun Vertex Byte offset
   6++EEFD 36                                   DB $36                                      ; Explosion Count
   7++EEFE 10                                   DB CoriolisVertSize /6                      ; Vertex Count /6
   8++EEFF 60                                   DB CoriolisVertSize                         ; Vertex Count
   9++EF00 1C                                   DB CoriolisEdgesCnt                         ; Edges Count
  10++EF01 00 00                                DW $0000                                    ; Bounty LoHi
  11++EF03 38                                   DB CoriolisNormalsSize                      ; Face (Normal) Count
  12++EF04 78                                   DB $78                                      ; Range when it turns to a dot
  13++EF05 F0                                   DB $F0                                      ; Energy Max
  14++EF06 00                                   DB $00                                      ; Speed Max
  15++EF07 E1 EF                                DW CoriolisNormals                          ; Normals
  16++EF09 00                                   DB $00                                      ; Q scaling
  17++EF0A 06                                   DB $06                                      ; Laser power and Nbr Missiles
  18++EF0B 11 EF                                DW CoriolisVertices                         ; Verticles Address
  19++EF0D 02                                   DB ShipTypeStation                          ; Ship Type
  20++EF0E 00                                   DB 0                                        ; NewB Tactics
  21++EF0F 78                                   DB ShipFighterBaySize | ShipFighterViper    ; AI Flags
  22++EF10 FF                                   DB $FF                                      ; chance of ECM module
  23++EF11 A0 00 A0 1F  CoriolisVertices:	    DB $A0, $00, $A0, $1F, $10, $62
  23++EF15 10 62
  24++EF17 00 A0 A0 1F                          DB $00, $A0, $A0, $1F, $20, $83
  24++EF1B 20 83
  25++EF1D A0 00 A0 9F                          DB $A0, $00, $A0, $9F, $30, $74
  25++EF21 30 74
  26++EF23 00 A0 A0 5F                          DB $00, $A0, $A0, $5F, $10, $54
  26++EF27 10 54
  27++EF29 A0 A0 00 5F                          DB $A0, $A0, $00, $5F, $51, $A6
  27++EF2D 51 A6
  28++EF2F A0 A0 00 1F                          DB $A0, $A0, $00, $1F, $62, $B8
  28++EF33 62 B8
  29++EF35 A0 A0 00 9F                          DB $A0, $A0, $00, $9F, $73, $C8
  29++EF39 73 C8
  30++EF3B A0 A0 00 DF                          DB $A0, $A0, $00, $DF, $54, $97
  30++EF3F 54 97
  31++EF41 A0 00 A0 3F                          DB $A0, $00, $A0, $3F, $A6, $DB
  31++EF45 A6 DB
  32++EF47 00 A0 A0 3F                          DB $00, $A0, $A0, $3F, $B8, $DC
  32++EF4B B8 DC
  33++EF4D A0 00 A0 BF                          DB $A0, $00, $A0, $BF, $97, $DC
  33++EF51 97 DC
  34++EF53 00 A0 A0 7F                          DB $00, $A0, $A0, $7F, $95, $DA
  34++EF57 95 DA
  35++EF59 0A 1E A0 5E                          DB $0A, $1E, $A0, $5E, $00, $00
  35++EF5D 00 00
  36++EF5F 0A 1E A0 1E                          DB $0A, $1E, $A0, $1E, $00, $00
  36++EF63 00 00
  37++EF65 0A 1E A0 9E                          DB $0A, $1E, $A0, $9E, $00, $00
  37++EF69 00 00
  38++EF6B 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00
  38++EF6F 00 00
  39++EF71              CoriolisVertSize:       equ $ - CoriolisVertices
  40++EF71 1F 10 00 0C  CoriolisEdges:	        DB $1F, $10, $00, $0C
  41++EF75 1F 20 00 04                          DB $1F, $20, $00, $04
  42++EF79 1F 30 04 08                          DB $1F, $30, $04, $08
  43++EF7D 1F 40 08 0C                          DB $1F, $40, $08, $0C
  44++EF81 1F 51 0C 10                          DB $1F, $51, $0C, $10
  45++EF85 1F 61 00 10                          DB $1F, $61, $00, $10
  46++EF89 1F 62 00 14                          DB $1F, $62, $00, $14
  47++EF8D 1F 82 14 04                          DB $1F, $82, $14, $04
  48++EF91 1F 83 04 18                          DB $1F, $83, $04, $18
  49++EF95 1F 73 08 18                          DB $1F, $73, $08, $18
  50++EF99 1F 74 08 1C                          DB $1F, $74, $08, $1C
  51++EF9D 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  52++EFA1 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  53++EFA5 1F DB 20 24                          DB $1F, $DB, $20, $24
  54++EFA9 1F DC 24 28                          DB $1F, $DC, $24, $28
  55++EFAD 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  56++EFB1 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  57++EFB5 1F A6 10 20                          DB $1F, $A6, $10, $20
  58++EFB9 1F B6 14 20                          DB $1F, $B6, $14, $20
  59++EFBD 1F B8 14 24                          DB $1F, $B8, $14, $24
  60++EFC1 1F C8 18 24                          DB $1F, $C8, $18, $24
  61++EFC5 1F C7 18 28                          DB $1F, $C7, $18, $28
  62++EFC9 1F 97 1C 28                          DB $1F, $97, $1C, $28
  63++EFCD 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
  64++EFD1 1E 00 30 34                          DB $1E, $00, $30, $34
  65++EFD5 1E 00 34 38                          DB $1E, $00, $34, $38
  66++EFD9 1E 00 38 3C                          DB $1E, $00, $38, $3C
  67++EFDD 1E 00 3C 30                          DB $1E, $00, $3C, $30
  68++EFE1              CoriolisEdgesSize:      equ $ - CoriolisEdges
  69++EFE1              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
  70++EFE1 1F 00 00 A0  CoriolisNormals:	    DB $1F, $00, $00, $A0
  71++EFE5 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
  72++EFE9 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
  73++EFED 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
  74++EFF1 DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
  75++EFF5 5F 00 A0 00                          DB $5F, $00, $A0, $00
  76++EFF9 1F A0 00 00                          DB $1F, $A0, $00, $00
  77++EFFD 9F A0 00 00                          DB $9F, $A0, $00, $00
  78++F001 1F 00 A0 00                          DB $1F, $00, $A0, $00
  79++F005 FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
  80++F009 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
  81++F00D 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
  82++F011 BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
  83++F015 3F 00 00 A0                          DB $3F, $00, $00, $A0
  84++F019              CoriolisNormalsSize:    equ $ - CoriolisNormals
  85++F019              CoriolisLen:            equ $ - Coriolis
  86++F019
# file closed: ./Data/ships/Coriolis.asm
 103+ F019                                      include "Data/ships/Cougar.asm"
# file opened: ./Data/ships/Cougar.asm
   1++F019 03           Cougar:	                DB $03                         ; Number of cargo canisters released when destroyed
   2++F01A 24 13                                DW $1324                       ; Ship's targetable area LoHi
   3++F01C A6 F0                                DW CougarEdges                 ; Edge Data
   4++F01E 64                                   DB CougarEdgesSize             ; Size of Edge Data
   5++F01F 00                                   DB $00                         ; Gun Vertex Byte offset
   6++F020 2A                                   DB $2A                         ; Explosion Count
   7++F021 13                                   DB CougarVertSize /6           ; Vertex Count /6
   8++F022 72                                   DB CougarVertSize              ; Vertex Count
   9++F023 19                                   DB CougarEdgesCnt              ; Edges Count
  10++F024 00 00                                DW $0000                       ; Bounty LoHi
  11++F026 18                                   DB CougarNormalsSize           ; Face (Normal) Count
  12++F027 22                                   DB $22                         ; Range when it turns to a dot
  13++F028 FC                                   DB $FC                         ; Energy Max
  14++F029 28                                   DB $28                         ; Speed Max
  15++F02A 0A F1                                DW CougarNormals               ; Normals
  16++F02C 02                                   DB $02                         ; Q scaling
  17++F02D 34                                   DB $30 | ShipMissiles4         ; Laser power and Nbr Missiles
  18++F02E 34 F0                                DW CougarVertices              ; Verticles Address
  19++F030 00                                   DB ShipTypeNormal              ; Ship Type
  20++F031 00                                   DB 0                           ; NewB Tactics
  21++F032 80                                   DB ShipCanAnger                ; AI Flags
  22++F033 B0                                   DB $B0                         ; chance of ECM module
  23++F034 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  23++F038 02 44
  24++F03A 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  24++F03E 01 22
  25++F040 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  25++F044 01 55
  26++F046 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  26++F04A 04 55
  27++F04C 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  27++F050 12 35
  28++F052 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  28++F056 23 44
  29++F058 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  29++F05C 34 55
  30++F05E 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  30++F062 01 11
  31++F064 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  31++F068 01 11
  32++F06A 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  32++F06E 34 44
  33++F070 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  33++F074 34 44
  34++F076 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  34++F07A 00 44
  35++F07C 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  35++F080 00 44
  36++F082 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  36++F086 00 00
  37++F088 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  37++F08C 44 44
  38++F08E 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  38++F092 55 55
  39++F094 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  39++F098 55 55
  40++F09A 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  40++F09E 55 55
  41++F0A0 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  41++F0A4 55 55
  42++F0A6              CougarVertSize:         equ $ - CougarVertices
  43++F0A6 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  44++F0AA 1F 01 04 1C                          DB $1F, $01, $04, $1C
  45++F0AE 1F 01 1C 20                          DB $1F, $01, $1C, $20
  46++F0B2 1F 01 20 08                          DB $1F, $01, $20, $08
  47++F0B6 1E 05 08 0C                          DB $1E, $05, $08, $0C
  48++F0BA 1E 45 0C 18                          DB $1E, $45, $0C, $18
  49++F0BE 1E 15 08 10                          DB $1E, $15, $08, $10
  50++F0C2 1E 35 10 18                          DB $1E, $35, $10, $18
  51++F0C6 1F 34 18 28                          DB $1F, $34, $18, $28
  52++F0CA 1F 34 28 24                          DB $1F, $34, $28, $24
  53++F0CE 1F 34 24 14                          DB $1F, $34, $24, $14
  54++F0D2 1F 24 14 00                          DB $1F, $24, $14, $00
  55++F0D6 1B 04 00 0C                          DB $1B, $04, $00, $0C
  56++F0DA 1B 12 04 10                          DB $1B, $12, $04, $10
  57++F0DE 1B 23 14 10                          DB $1B, $23, $14, $10
  58++F0E2 1A 01 04 08                          DB $1A, $01, $04, $08
  59++F0E6 1A 34 14 18                          DB $1A, $34, $14, $18
  60++F0EA 14 00 30 34                          DB $14, $00, $30, $34
  61++F0EE 12 00 34 2C                          DB $12, $00, $34, $2C
  62++F0F2 12 44 2C 38                          DB $12, $44, $2C, $38
  63++F0F6 14 44 38 30                          DB $14, $44, $38, $30
  64++F0FA 12 55 3C 40                          DB $12, $55, $3C, $40
  65++F0FE 14 55 40 48                          DB $14, $55, $40, $48
  66++F102 12 55 48 44                          DB $12, $55, $48, $44
  67++F106 14 55 44 3C                          DB $14, $55, $44, $3C
  68++F10A              CougarEdgesSize:        equ $ - CougarEdges
  69++F10A              CougarEdgesCnt:         equ CougarEdgesSize/4
  70++F10A 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  71++F10E DF 10 2E 04                          DB $DF, $10, $2E, $04
  72++F112 5F 00 1B 05                          DB $5F, $00, $1B, $05
  73++F116 5F 10 2E 04                          DB $5F, $10, $2E, $04
  74++F11A 1F 10 2E 04                          DB $1F, $10, $2E, $04
  75++F11E 3E 00 00 A0                          DB $3E, $00, $00, $A0
  76++F122              CougarNormalsSize:      equ $ - CougarNormals
  77++F122              CougarLen:              equ $ - Cougar
  78++F122
# file closed: ./Data/ships/Cougar.asm
 104+ F122                                      include "Data/ships/Dodo.asm"
# file opened: ./Data/ships/Dodo.asm
   1++F122 00           Dodo:	                DB $00                        ; Number of cargo canisters released when destroyed
   2++F123 90 7E                                DW $7E90                      ; Ship's targetable area LoHi
   3++F125 CD F1                                DW DodoEdges                  ; Edge Data
   4++F127 88                                   DB DodoEdgesSize              ; Size of Edge Data
   5++F128 00                                   DB $00                        ; Gun Vertex Byte offset
   6++F129 36                                   DB $36                        ; Explosion Count
   7++F12A 18                                   DB DodoVertSize /6            ; Vertex Count /6
   8++F12B 90                                   DB DodoVertSize               ; Vertex Count
   9++F12C 22                                   DB DodoEdgesCnt               ; Edges Count
  10++F12D 00 00                                DW $0000                      ; Bounty LoHi
  11++F12F 30                                   DB DodoNormalsSize            ; Face (Normal) Count
  12++F130 7D                                   DB $7D                        ; Range when it turns to a dot
  13++F131 F0                                   DB $F0                        ; Energy Max
  14++F132 00                                   DB $00                        ; Speed Max
  15++F133 55 F2                                DW DodoNormals                ; Normals
  16++F135 00                                   DB $00                        ; Q scaling
  17++F136 00                                   DB $00                        ; Laser power and Nbr Missiles
  18++F137 3D F1                                DW DodoVertices               ; Verticles Address
  19++F139 02                                   DB ShipTypeStation            ; Ship Type
  20++F13A 00                                   DB 0                          ; NewB Tactics
  21++F13B 00                                   DB 0                          ; AI Flags
  22++F13C FF                                   DB $FF                        ; chance of ECM module
  23++F13D 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  23++F141 01 55
  24++F143 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  24++F147 01 22
  25++F149 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  25++F14D 02 33
  26++F14F 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  26++F153 03 44
  27++F155 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  27++F159 04 55
  28++F15B 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  28++F15F 15 66
  29++F161 E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  29++F165 12 77
  30++F167 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  30++F16B 23 88
  31++F16D 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  31++F171 34 99
  32++F173 E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  32++F177 45 AA
  33++F179 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  33++F17D 16 77
  34++F17F E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  34++F183 27 88
  35++F185 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  35++F189 38 99
  36++F18B E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  36++F18F 49 AA
  37++F191 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  37++F195 56 AA
  38++F197 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  38++F19B 67 BB
  39++F19D 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  39++F1A1 78 BB
  40++F1A3 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  40++F1A7 89 BB
  41++F1A9 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  41++F1AD 9A BB
  42++F1AF 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  42++F1B3 6A BB
  43++F1B5 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  43++F1B9 00 00
  44++F1BB 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  44++F1BF 00 00
  45++F1C1 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  45++F1C5 00 00
  46++F1C7 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  46++F1CB 00 00
  47++F1CD              DodoVertSize:           equ $ - DodoVertices
  48++F1CD 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  49++F1D1 1F 02 04 08                          DB $1F, $02, $04, $08
  50++F1D5 1F 03 08 0C                          DB $1F, $03, $08, $0C
  51++F1D9 1F 04 0C 10                          DB $1F, $04, $0C, $10
  52++F1DD 1F 05 10 00                          DB $1F, $05, $10, $00
  53++F1E1 1F 16 14 28                          DB $1F, $16, $14, $28
  54++F1E5 1F 17 28 18                          DB $1F, $17, $28, $18
  55++F1E9 1F 27 18 2C                          DB $1F, $27, $18, $2C
  56++F1ED 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  57++F1F1 1F 38 1C 30                          DB $1F, $38, $1C, $30
  58++F1F5 1F 39 30 20                          DB $1F, $39, $30, $20
  59++F1F9 1F 49 20 34                          DB $1F, $49, $20, $34
  60++F1FD 1F 4A 34 24                          DB $1F, $4A, $34, $24
  61++F201 1F 5A 24 38                          DB $1F, $5A, $24, $38
  62++F205 1F 56 38 14                          DB $1F, $56, $38, $14
  63++F209 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  64++F20D 1F 8B 40 44                          DB $1F, $8B, $40, $44
  65++F211 1F 9B 44 48                          DB $1F, $9B, $44, $48
  66++F215 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  67++F219 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  68++F21D 1F 15 00 14                          DB $1F, $15, $00, $14
  69++F221 1F 12 04 18                          DB $1F, $12, $04, $18
  70++F225 1F 23 08 1C                          DB $1F, $23, $08, $1C
  71++F229 1F 34 0C 20                          DB $1F, $34, $0C, $20
  72++F22D 1F 45 10 24                          DB $1F, $45, $10, $24
  73++F231 1F 67 28 3C                          DB $1F, $67, $28, $3C
  74++F235 1F 78 2C 40                          DB $1F, $78, $2C, $40
  75++F239 1F 89 30 44                          DB $1F, $89, $30, $44
  76++F23D 1F 9A 34 48                          DB $1F, $9A, $34, $48
  77++F241 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  78++F245 1E 00 50 54                          DB $1E, $00, $50, $54
  79++F249 14 00 54 5C                          DB $14, $00, $54, $5C
  80++F24D 17 00 5C 58                          DB $17, $00, $5C, $58
  81++F251 14 00 58 50                          DB $14, $00, $58, $50
  82++F255              DodoEdgesSize:          equ $ - DodoEdges
  83++F255              DodoEdgesCnt:           equ DodoEdgesSize/4
  84++F255 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  85++F259 1F 67 8E 58                          DB $1F, $67, $8E, $58
  86++F25D 5F A9 37 59                          DB $5F, $A9, $37, $59
  87++F261 5F 00 B0 58                          DB $5F, $00, $B0, $58
  88++F265 DF A9 37 59                          DB $DF, $A9, $37, $59
  89++F269 9F 67 8E 58                          DB $9F, $67, $8E, $58
  90++F26D 3F 00 B0 58                          DB $3F, $00, $B0, $58
  91++F271 3F A9 37 59                          DB $3F, $A9, $37, $59
  92++F275 7F 67 8E 58                          DB $7F, $67, $8E, $58
  93++F279 FF 67 8E 58                          DB $FF, $67, $8E, $58
  94++F27D BF A9 37 59                          DB $BF, $A9, $37, $59
  95++F281 3F 00 00 C4                          DB $3F, $00, $00, $C4
  96++F285              DodoNormalsSize:        equ $ - DodoNormals
  97++F285              DodoLen:                equ $ - Dodo
  98++F285
# file closed: ./Data/ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
 773  F285                  DISPLAY "Bank ",BankShipModels1," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels1"
 774  F285              ; Bank 66  ------------------------------------------------------------------------------------------------------------------------
 775  F285                  SLOT    DispMarketAddr
 776  F285                  PAGE    BankDispMarket
 777  F285                  ORG     DispMarketAddr
 778  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 D1 92  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 9D 93  						DW $0220,name_expanded
   4+ C018 80 0B 1F 8D  						DW $0B80,WordUnit
   5+ C01C B0 0B 68 8F  						DW $0BB0,WordQuantity
   6+ C020 08 13 46 8F  						DW $1308,WordProduct
   7+ C024 60 13 4E 8F  						DW $1360,WordUoM
   8+ C028 80 13 52 8F  						DW $1380,WordPrice
   9+ C02C B0 13 76 8F  						DW $13B0,WordStock
  10+ C030 E0 13 72 8F  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3              .BoilerTextLoop:
   4++C1F3 C5           	push		bc			; Save Message Count loop value
   5++C1F4 4E           	ld			c,(hl)		; Get Row into b
   6++C1F5 23           	inc			hl
   7++C1F6 46           	ld			b,(hl)		; Get Col into b
   8++C1F7 23           	inc			hl
   9++C1F8 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C1F9 23           	inc			hl
  11++C1FA 56           	ld			d,(hl)		; Get text address Hi into E
  12++C1FB 23           	inc			hl
  13++C1FC E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C1FD EB           	ex			de,hl		; now hl = address of text data
  15++C1FE 1E FF        	ld			e,txt_status_colour
  16++C200 C5           	push		bc
  17++C201 D1           	pop			de
  18++C202                  MMUSelectLayer1
  18++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C206 CD C8 E0     	call		l1_print_at
  20++C209 E1           	pop			hl
  21++C20A C1           	pop			bc
  22++C20B 10 E6        	djnz		.BoilerTextLoop
  23++C20D C9           	ret
  24++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A 08 89     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A 06 89                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A 0C 89                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:   call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD C8 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD C8 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:       push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD C8 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 0D 89                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 1D 91                             ld		hl,WordIdx
 256+ C2A5 CD 78 8C                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD C8 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 1D 91                             ld		hl,WordIdx
 264+ C2BF CD 78 8C                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD C8 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD C8 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD C8 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD C8 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:InitNoDoubleBuffer
 297+ C323             >                            MMUSelectLayer1
 297+ C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 297+ C327 CD 80 E0    >                            call	l1_cls
 297+ C32A 3E 07       >                            ld		a,7
 297+ C32C CD 9B E0    >                            call	l1_attr_cls_to_a
 297+ C32F             >                            MMUSelectLayer2
 297+ C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C333 CD 09 E0    >                            call    asm_l2_double_buffer_off
 297+ C336 CD FF E0    >                            call	l2_cls	; Get some space
 297+ C339             >                            MMUSelectSpriteBank
 297+ C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 297+ C33D CD 6E E5    >                            call    sprite_cls_cursors
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 A9 83                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD 49 E2                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD B3 E2                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD B3 E2                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD B3 E2                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD B3 E2                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD B3 E2                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD B3 E2                             call	l2_draw_horz_line
 323+ C38A 3A 94 84     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,     a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD 18 93                             call	expandTokenToString
 327+ C395 CD 7A F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD C8 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD C8 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: ./Menus/market_prices_disp.asm
 779  C3D3                  DISPLAY "Bank ",BankDispMarket," - Bytes free ",/D, $2000 - ($-MenuShrChtAddr), " - BankDispMarket"
 780  C3D3              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
 781  C3D3                  SLOT    ShipModelsAddr
 782  C3D3                  PAGE    BankShipModels2
 783  C3D3              	ORG     ShipModelsAddr, BankShipModels2
 784  E000
 785  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
 786  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
 786  E00F 06 00       >                        ld      b,0
 786  E011 4F          >                        ld      c,a                                 ; c= original ship id
 786  E012 CB 3F       >.ShiftLoop:             srl     a
 786  E014 CB 3F       >                        srl     a
 786  E016 CB 3F       >                        srl     a
 786  E018 CB 3F       >                        srl     a                                   ; divide by 16
 786  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 786  E01B 79          >                        ld      a,c
 786  E01C 50          >                        ld      d,b
 786  E01D 1E 10       >                        ld      e,16
 786  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 786  E021 93          >                        sub     e                                   ; a= actual model id now
 786  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 786  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 786  E024 7A          >                        ld      a,d                                 ; a = bank number
 786  E025             >;.. Now b = bank and a = adjusted ship nbr
 786  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
 786  E028 ED 31       >                        add     hl,a
 786  E02A ED 31       >                        add     hl,a
 786  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 786  E02D             >                        ClearCarryFlag
 786  E02D B7          >                        or a
 786  E02E C9          >                        ret
 787  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
 787  E02F 2A 43 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 787  E032 11 49 C3    >                        ld          de,UBnkHullVerticies
 787  E035 06 00       >                        ld          b,0
 787  E037 3A 37 C3    >                        ld			a,(VertexCtX6Addr)
 787  E03A 4F          >                        ld          c,a
 787  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 787  E03C CD 54 7F    >                        call        memcopy_dma
 787  E03F C9          >                        ret
 788  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
 788  E040 2A 31 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 788  E043 11 39 C4    >                        ld          de,UBnkHullEdges
 788  E046 06 00       >                        ld          b,0
 788  E048 3A 33 C3    >                        ld			a,(LineX4Addr)
 788  E04B 4F          >                        ld          c,a
 788  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 788  E04D CD 54 7F    >                        call        memcopy_dma
 788  E050 C9          >                        ret
 789  E051              CopyNormsToUniv2:       McopyNormsToUniverse
 789  E051 2A 3F C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 789  E054 11 01 C5    >                        ld          de,UBnkHullNormals
 789  E057 06 00       >                        ld          b,0
 789  E059 3A 3B C3    >                        ld          a,(FaceCtX4Addr)
 789  E05C 4F          >                        ld          c,a
 789  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 789  E05E CD 54 7F    >                        call        memcopy_dma
 789  E061 C9          >                        ret
 790  E062              ShipBankTable2:         MShipBankTable
 790  E062 3B 00       >                        DW      BankShipModels1
 790  E064 43 00       >                        DW      BankShipModels2
 790  E066 44 00       >                        DW      BankShipModels3
 790  E068 45 00       >                        DW      BankShipModels4
 791  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
 791  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
 791  E06D 36 43       >                        ld          (hl),BankShipModels2
 791  E06F F5          >                        push        af
 791  E070 FD 7D       >                        ld          a,iyl
 791  E072 32 43 C0    >                        ld          (UBnKShipModelId),a
 791  E075 F1          >                        pop         af
 791  E076 32 42 C0    >                        ld          (UBnKShipModelNbr),a
 791  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 791  E07C ED 31       >                        add         hl,a
 791  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 791  E080 4E          >                        ld          c,(hl)
 791  E081 23          >                        inc         hl
 791  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 791  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 791  E086 ED 31       >                        add         hl,a
 791  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 791  E08A 7E          >                        ld          a,(hl)
 791  E08B 23          >                        inc         hl
 791  E08C 66          >                        ld          h,(hl)
 791  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 791  E08E 11 2E C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 791  E091 01 1B 00    >                        ld          bc,ShipDataLength
 791  E094 ED B0       >                        ldir
 791  E096 CD 2F E0    >                        call        CopyVertsToUniv
 791  E099 CD 40 E0    >                        call        CopyEdgesToUniv
 791  E09C CD 51 E0    >                        call        CopyNormsToUniv
 791  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
 791  E0A2 3E 20       >                        ld          a," "
 791  E0A4 06 10       >                        ld          b,16
 791  E0A6 77          >.fillLoop:              ld          (hl),a
 791  E0A7 23          >                        inc         hl
 791  E0A8 10 FC       >                        djnz        .fillLoop
 791  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnKShipModelId)
 791  E0AD CD 04 93    >                        call        ShipIndexToAddress
 791  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
 791  E0B3 06 10       >                        ld          b,16
 791  E0B5 7E          >.CopyLoop:              ld          a,(hl)
 791  E0B6 FE 00       >                        cp          0
 791  E0B8 28 05       >                        jr          z,.CopyDone
 791  E0BA 12          >                        ld          (de),a
 791  E0BB 23          >                        inc         hl
 791  E0BC 13          >                        inc         de
 791  E0BD 10 F6       >                        djnz        .CopyLoop
 791  E0BF C9          >.CopyDone:              ret
 792  E0C0              CopyBodyToUniverse2:    MCopyBodyToUniverse     CopyShipToUniverse2
 792  E0C0 3E 0D       >                        ld          a,13
 792  E0C2 CD 6A E0    >                        call        CopyShipToUniverse2
 792  E0C5 C9          >                        ret
 793  E0C6
 794  E0C6                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E0C6 66 E1        ShipModelTable2:         DW Dragon                                  ;16  $10
   2+ E0C8 43 E2                                 DW Escape_Pod                              ;17  $11
   3+ E0CA 9E E2                                 DW Fer_De_Lance                            ;18  $12
   4+ E0CC BF E3                                 DW Gecko                                   ;19  $13
   5+ E0CE 8A E4                                 DW Ghavial                                 ;20  $14
   6+ E0D0 75 E5                                 DW Iguana                                  ;21  $15
   7+ E0D2 6E E6                                 DW Krait                                   ;22  $16
   8+ E0D4 5B E7                                 DW Logo                                    ;23  $17
   9+ E0D6 1A E9                                 DW Mamba                                   ;24  $18
  10+ E0D8 4F EA                                 DW Missile                                 ;25  $19
  11+ E0DA EC EA                                 DW Monitor                                 ;26  $1A
  12+ E0DC F5 EB                                 DW Moray                                   ;27  $1B
  13+ E0DE D4 EC                                 DW Ophidian                                ;28  $1C
  14+ E0E0 0F EE                                 DW Plate                                   ;29  $1D
  15+ E0E2 50 EE                                 DW Python                                  ;30  $1E
  16+ E0E4 49 EF                                 DW Python_P                                ;31  $1F
  17+ E0E6 81 E1        ShipVertexTable2:        DW DragonVertices                          ;16  $10
  18+ E0E8 5E E2                                 DW Escape_PodVertices                      ;17  $11
  19+ E0EA B9 E2                                 DW Fer_De_LanceVertices                    ;18  $12
  20+ E0EC DA E3                                 DW GeckoVertices                           ;19  $13
  21+ E0EE A5 E4                                 DW GhavialVertices                         ;20  $14
  22+ E0F0 90 E5                                 DW IguanaVertices                          ;21  $15
  23+ E0F2 89 E6                                 DW KraitVertices                           ;22  $16
  24+ E0F4 76 E7                                 DW LogoVertices                            ;23  $17
  25+ E0F6 35 E9                                 DW MambaVertices                           ;24  $18
  26+ E0F8 6A EA                                 DW MissileVertices                         ;25  $19
  27+ E0FA 07 EB                                 DW MonitorVertices                         ;26  $1A
  28+ E0FC 10 EC                                 DW MorayVertices                           ;27  $1B
  29+ E0FE EF EC                                 DW OphidianVertices                        ;28  $1C
  30+ E100 2A EE                                 DW PlateVertices                           ;29  $1D
  31+ E102 6B EE                                 DW PythonVertices                          ;30  $1E
  32+ E104 64 EF                                 DW Python_PVertices                        ;31  $1F
  33+ E106 B7 E1        ShipEdgeTable2:          DW DragonEdges                             ;16  $10
  34+ E108 76 E2                                 DW Escape_PodEdges                         ;17  $11
  35+ E10A 2B E3                                 DW Fer_De_LanceEdges                       ;18  $12
  36+ E10C 22 E4                                 DW GeckoEdges                              ;19  $13
  37+ E10E ED E4                                 DW GhavialEdges                            ;20  $14
  38+ E110 EA E5                                 DW IguanaEdges                             ;21  $15
  39+ E112 EF E6                                 DW KraitEdges                              ;22  $16
  40+ E114 72 E8                                 DW LogoEdges                               ;23  $17
  41+ E116 CB E9                                 DW MambaEdges                              ;24  $18
  42+ E118 B8 EA                                 DW MissileEdges                            ;25  $19
  43+ E11A 6D EB                                 DW MonitorEdges                            ;26  $1A
  44+ E11C 64 EC                                 DW MorayEdges                              ;27  $1B
  45+ E11E 67 ED                                 DW OphidianEdges                           ;28  $1C
  46+ E120 3C EE                                 DW PlateEdges                              ;29  $1D
  47+ E122 AD EE                                 DW PythonEdges                             ;30  $1E
  48+ E124 A6 EF                                 DW Python_PEdges                           ;31  $1F
  49+ E126 0B E2        ShipNormalTable2:        DW DragonNormals                           ;16  $10
  50+ E128 8E E2                                 DW Escape_PodNormals                       ;17  $11
  51+ E12A 97 E3                                 DW Fer_De_LanceNormals                     ;18  $12
  52+ E12C 66 E4                                 DW GeckoNormals                            ;19  $13
  53+ E12E 45 E5                                 DW GhavialNormals                          ;20  $14
  54+ E130 46 E6                                 DW IguanaNormals                           ;21  $15
  55+ E132 43 E7                                 DW KraitNormals                            ;22  $16
  56+ E134 06 E9                                 DW LogoNormals                             ;23  $17
  57+ E136 3B EA                                 DW MambaNormals                            ;24  $18
  58+ E138 DC EA                                 DW MissileNormals                          ;25  $19
  59+ E13A C9 EB                                 DW MonitorNormals                          ;26  $1A
  60+ E13C B0 EC                                 DW MorayNormals                            ;27  $1B
  61+ E13E DF ED                                 DW OphidianNormals                         ;28  $1C
  62+ E140 4C EE                                 DW PlateNormals                            ;29  $1D
  63+ E142 15 EF                                 DW PythonNormals                           ;30  $1E
  64+ E144 0E F0                                 DW Python_PNormals                         ;31  $1F
  65+ E146 DD 00        ShipModelSizeTable2:     DW DragonLen                               ;16  $10
  66+ E148 5B 00                                 DW Escape_PodLen                           ;17  $11
  67+ E14A 21 01                                 DW Fer_De_LanceLen                         ;18  $12
  68+ E14C CB 00                                 DW GeckoLen                                ;19  $13
  69+ E14E EB 00                                 DW GhavialLen                              ;20  $14
  70+ E150 F9 00                                 DW IguanaLen                               ;21  $15
  71+ E152 ED 00                                 DW KraitLen                                ;22  $16
  72+ E154 BF 01                                 DW LogoLen                                 ;23  $17
  73+ E156 35 01                                 DW MambaLen                                ;24  $18
  74+ E158 9D 00                                 DW MissileLen                              ;25  $19
  75+ E15A 09 01                                 DW MonitorLen                              ;26  $1A
  76+ E15C DF 00                                 DW MorayLen                                ;27  $1B
  77+ E15E 3B 01                                 DW OphidianLen                             ;28  $1C
  78+ E160 41 00                                 DW PlateLen                                ;29  $1D
  79+ E162 F9 00                                 DW PythonLen                               ;30  $1E
  80+ E164 F9 00                                 DW Python_PLen                             ;31  $1F
  81+ E166
  82+ E166                                      include "Data/ships/Dragon.asm"
# file opened: ./Data/ships/Dragon.asm
   1++E166 00           Dragon:	                DB $00                                                    ; Number of cargo canisters released when destroyed
   2++E167 66 50                                DW $5066                                                  ; Ship's targetable area LoHi
   3++E169 B7 E1                                DW DragonEdges                                            ; Edge Data
   4++E16B 54                                   DB DragonEdgesSize                                        ; Size of Edge Data
   5++E16C 00                                   DB $00                                                    ; Gun Vertex Byte offset
   6++E16D 3C                                   db $3C                                                    ; Explosion Count
   7++E16E 09                                   DB DragonVertSize /6                                      ; Vertex Count /6
   8++E16F 36                                   DB DragonVertSize                                         ; Vertex Count
   9++E170 15                                   DB DragonEdgesCnt                                         ; Edges Count
  10++E171 00 00                                DW $0000                                                  ; Bounty LoHi
  11++E173 38                                   DB DragonNormalsSize                                      ; Face (Normal) Count
  12++E174 20                                   DB $20                                                    ; Range when it turns to a dot
  13++E175 F7                                   DB $F7                                                    ; Energy Max
  14++E176 14                                   DB $14                                                    ; Speed Max
  15++E177 0B E2                                DW DragonNormals                                          ; Normals
  16++E179 00                                   DB $00                                                    ; Q scaling
  17++E17A 47                                   DB $40 | ShipMissiles7                                    ; Laser power and Nbr Missiles
  18++E17B 81 E1                                DW DragonVertices                                         ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                                         ; Ship Type
  20++E17E 00                                   DB 0                                                      ; NewB Tactics
  21++E17F A0                                   DB ShipCanAnger | ShipFighterBaySize2 | ShipFighterWorm   ; AI Flags
  22++E180 B0                                   DB $B0                                                    ; chance of ECM module
  23++E181 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  23++E185 6B 05
  24++E187 D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  24++E18B 67 01
  25++E18D D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  25++E191 78 12
  26++E193 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  26++E197 CD 23
  27++E199 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  27++E19D CD 89
  28++E19F D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  28++E1A3 9A 34
  29++E1A5 D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  29++E1A9 AB 45
  30++E1AB 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  30++E1AF FF FF
  31++E1B1 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  31++E1B5 FF FF
  32++E1B7              DragonVertSize:         equ $ - DragonVertices
  33++E1B7 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  34++E1BB 1F 12 08 1C                          DB $1F, $12, $08, $1C
  35++E1BF 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  36++E1C3 1F 34 14 1C                          DB $1F, $34, $14, $1C
  37++E1C7 1F 45 18 1C                          DB $1F, $45, $18, $1C
  38++E1CB 1F 50 00 1C                          DB $1F, $50, $00, $1C
  39++E1CF 1F 67 04 20                          DB $1F, $67, $04, $20
  40++E1D3 1F 78 08 20                          DB $1F, $78, $08, $20
  41++E1D7 1F 89 10 20                          DB $1F, $89, $10, $20
  42++E1DB 1F 9A 14 20                          DB $1F, $9A, $14, $20
  43++E1DF 1F AB 18 20                          DB $1F, $AB, $18, $20
  44++E1E3 1F B6 00 20                          DB $1F, $B6, $00, $20
  45++E1E7 1F 06 00 04                          DB $1F, $06, $00, $04
  46++E1EB 1F 17 04 08                          DB $1F, $17, $04, $08
  47++E1EF 1F 4A 14 18                          DB $1F, $4A, $14, $18
  48++E1F3 1F 5B 00 18                          DB $1F, $5B, $00, $18
  49++E1F7 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  50++E1FB 1F 8C 08 10                          DB $1F, $8C, $08, $10
  51++E1FF 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  52++E203 1F 9D 10 14                          DB $1F, $9D, $10, $14
  53++E207 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  54++E20B              DragonEdgesSize:        equ $ - DragonEdges
  55++E20B              DragonEdgesCnt:         equ DragonEdgesSize/4
  56++E20B 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  57++E20F 1F 21 5A 00                          DB $1F, $21, $5A, $00
  58++E213 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  59++E217 BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  60++E21B 9F 21 5A 00                          DB $9F, $21, $5A, $00
  61++E21F 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  62++E223 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  63++E227 5F 21 5A 00                          DB $5F, $21, $5A, $00
  64++E22B 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  65++E22F FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  66++E233 DF 21 5A 00                          DB $DF, $21, $5A, $00
  67++E237 DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  68++E23B 3F 30 00 52                          DB $3F, $30, $00, $52
  69++E23F BF 30 00 52                          DB $BF, $30, $00, $52
  70++E243              DragonNormalsSize:      equ $ - DragonNormals
  71++E243              DragonLen:              equ $ - Dragon
  72++E243
# file closed: ./Data/ships/Dragon.asm
  83+ E243                                      include "Data/ships/Escape_Pod.asm"
# file opened: ./Data/ships/Escape_Pod.asm
   1++E243 20           Escape_Pod:             DB $20                          ; Number of cargo canisters released when destroyed
   2++E244 00 01                                DW $0100                        ; Ship's targetable area LoHi
   3++E246 76 E2                                DW Escape_PodEdges              ; Edge Data
   4++E248 18                                   DB Escape_PodEdgesSize          ; Size of Edge Data
   5++E249 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E24A 16                                   DB $16                          ; Explosion Count
   7++E24B 04                                   DB Escape_PodVertSize /6        ; Vertex Count /6
   8++E24C 18                                   DB Escape_PodVertSize           ; Vertex Count
   9++E24D 06                                   DB Escape_PodEdgesCnt           ; Edges Count
  10++E24E 00 00                                DW $0000                        ; Bounty LoHi
  11++E250 10                                   DB Escape_PodNormalsSize        ; Face (Normal) Count
  12++E251 08                                   DB $08                          ; Range when it turns to a dot
  13++E252 11                                   DB $11                          ; Energy Max
  14++E253 08                                   DB $08                          ; Speed Max
  15++E254 8E E2                                DW Escape_PodNormals            ; Normals
  16++E256 04                                   DB $04                          ; Q scaling
  17++E257 00                                   DB $00                          ; Laser power and Nbr Missiles
  18++E258 5E E2                                DW Escape_PodVertices           ; Verticles Address
  19++E25A 00                                   DB 0                            ; Ship Type
  20++E25B 00                                   DB 0                            ; NewB Tactics
  21++E25C 00                                   DB 0                            ; AI Flags
  22++E25D FF                                   DB $FF                          ; chance of ECM module
  23++E25E 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  23++E262 12 33
  24++E264 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  24++E268 02 33
  25++E26A 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  25++E26E 01 33
  26++E270 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  26++E274 01 22
  27++E276              Escape_PodVertSize:     equ $ - Escape_PodVertices
  28++E276 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  29++E27A 1F 03 04 08                          DB $1F, $03, $04, $08
  30++E27E 1F 01 08 0C                          DB $1F, $01, $08, $0C
  31++E282 1F 12 0C 00                          DB $1F, $12, $0C, $00
  32++E286 1F 13 00 08                          DB $1F, $13, $00, $08
  33++E28A 1F 02 0C 04                          DB $1F, $02, $0C, $04
  34++E28E              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  35++E28E              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  36++E28E 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  37++E292 1F 27 67 1E                          DB $1F, $27, $67, $1E
  38++E296 5F 27 67 1E                          DB $5F, $27, $67, $1E
  39++E29A 9F 70 00 00                          DB $9F, $70, $00, $00
  40++E29E              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  41++E29E              Escape_PodLen:          equ $ - Escape_Pod
  42++E29E
# file closed: ./Data/ships/Escape_Pod.asm
  84+ E29E                                      include "Data/ships/Fer_De_Lance.asm"
# file opened: ./Data/ships/Fer_De_Lance.asm
   1++E29E 00           Fer_De_Lance:	        DB $00                          ; Number of cargo canisters released when destroyed
   2++E29F 40 06                                DW $0640                        ; Ship's targetable area LoHi
   3++E2A1 2B E3                                DW Fer_De_LanceEdges            ; Edge Data
   4++E2A3 6C                                   DB Fer_De_LanceEdgesSize        ; Size of Edge Data
   5++E2A4 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E2A5 1A                                   DB $1A                          ; Explosion Count
   7++E2A6 13                                   DB Fer_De_LanceVertSize /6      ; Vertex Count /6
   8++E2A7 72                                   DB Fer_De_LanceVertSize         ; Vertex Count
   9++E2A8 1B                                   DB Fer_De_LanceEdgesCnt         ; Edges Count
  10++E2A9 00 00                                DW $0000                        ; Bounty LoHi
  11++E2AB 28                                   DB Fer_De_LanceNormalsSize      ; Face (Normal) Count
  12++E2AC 28                                   DB $28                          ; Range when it turns to a dot
  13++E2AD A0                                   DB $A0                          ; Energy Max
  14++E2AE 1E                                   DB $1E                          ; Speed Max
  15++E2AF 97 E3                                DW Fer_De_LanceNormals          ; Normals
  16++E2B1 01                                   DB $01                          ; Q scaling
  17++E2B2 17                                   DB $10 | ShipMissiles7          ; Laser power and Nbr Missiles
  18++E2B3 B9 E2                                DW Fer_De_LanceVertices         ; Verticles Address
  19++E2B5 00                                   DB ShipTypeNormal               ; Ship Type
  20++E2B6 00                                   DB 0                            ; NewB Tactics
  21++E2B7 80                                   DB ShipCanAnger                 ; AI Flags
  22++E2B8 FF                                   DB $FF                          ; chance of ECM module
  23++E2B9 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  23++E2BD 01 59
  24++E2BF 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  24++E2C3 12 99
  25++E2C5 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  25++E2C9 23 99
  26++E2CB 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  26++E2CF 34 99
  27++E2D1 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  27++E2D5 45 99
  28++E2D7 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  28++E2DB 01 26
  29++E2DD 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  29++E2E1 23 67
  30++E2E3 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  30++E2E7 34 78
  31++E2E9 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  31++E2ED 04 58
  32++E2EF 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  32++E2F3 06 78
  33++E2F5 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  33++E2F9 00 00
  34++E2FB 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  34++E2FF 00 00
  35++E301 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  35++E305 00 00
  36++E307 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  36++E30B 00 00
  37++E30D 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  37++E311 00 00
  38++E313 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  38++E317 00 00
  39++E319 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  39++E31D 99 99
  40++E31F 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  40++E323 99 99
  41++E325 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  41++E329 99 99
  42++E32B              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  43++E32B 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  44++E32F 1F 29 04 08                          DB $1F, $29, $04, $08
  45++E333 1F 39 08 0C                          DB $1F, $39, $08, $0C
  46++E337 1F 49 0C 10                          DB $1F, $49, $0C, $10
  47++E33B 1F 59 00 10                          DB $1F, $59, $00, $10
  48++E33F 1C 01 00 14                          DB $1C, $01, $00, $14
  49++E343 1C 26 14 18                          DB $1C, $26, $14, $18
  50++E347 1C 37 18 1C                          DB $1C, $37, $18, $1C
  51++E34B 1C 48 1C 20                          DB $1C, $48, $1C, $20
  52++E34F 1C 05 00 20                          DB $1C, $05, $00, $20
  53++E353 0F 06 14 24                          DB $0F, $06, $14, $24
  54++E357 0B 67 18 24                          DB $0B, $67, $18, $24
  55++E35B 0B 78 1C 24                          DB $0B, $78, $1C, $24
  56++E35F 0F 08 20 24                          DB $0F, $08, $20, $24
  57++E363 0E 12 04 14                          DB $0E, $12, $04, $14
  58++E367 0E 23 08 18                          DB $0E, $23, $08, $18
  59++E36B 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  60++E36F 0E 45 10 20                          DB $0E, $45, $10, $20
  61++E373 08 00 28 2C                          DB $08, $00, $28, $2C
  62++E377 09 00 2C 30                          DB $09, $00, $2C, $30
  63++E37B 0B 00 28 30                          DB $0B, $00, $28, $30
  64++E37F 08 00 34 38                          DB $08, $00, $34, $38
  65++E383 09 00 38 3C                          DB $09, $00, $38, $3C
  66++E387 0B 00 34 3C                          DB $0B, $00, $34, $3C
  67++E38B 0C 99 40 44                          DB $0C, $99, $40, $44
  68++E38F 0C 99 40 48                          DB $0C, $99, $40, $48
  69++E393 08 99 44 48                          DB $08, $99, $44, $48
  70++E397              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  71++E397              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  72++E397 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  73++E39B 9F 44 00 18                          DB $9F, $44, $00, $18
  74++E39F BF 3F 00 25                          DB $BF, $3F, $00, $25
  75++E3A3 3F 00 00 68                          DB $3F, $00, $00, $68
  76++E3A7 3F 3F 00 25                          DB $3F, $3F, $00, $25
  77++E3AB 1F 44 00 18                          DB $1F, $44, $00, $18
  78++E3AF BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  79++E3B3 3C 00 2D 16                          DB $3C, $00, $2D, $16
  80++E3B7 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  81++E3BB 5F 00 1C 00                          DB $5F, $00, $1C, $00
  82++E3BF              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  83++E3BF              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  84++E3BF
# file closed: ./Data/ships/Fer_De_Lance.asm
  85+ E3BF                                      include "Data/ships/Gecko.asm"
# file opened: ./Data/ships/Gecko.asm
   1++E3BF 00           Gecko:	                DB $00                         ; Number of cargo canisters released when destroyed
   2++E3C0 49 26                                DW $2649                       ; Ship's targetable area LoHi
   3++E3C2 22 E4                                DW GeckoEdges                  ; Edge Data
   4++E3C4 44                                   DB GeckoEdgesSize              ; Size of Edge Data
   5++E3C5 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E3C6 1A                                   DB $1A                         ; Explosion Count
   7++E3C7 0C                                   DB GeckoVertSize /6            ; Vertex Count /6
   8++E3C8 48                                   DB GeckoVertSize               ; Vertex Count
   9++E3C9 11                                   DB GeckoEdgesCnt               ; Edges Count
  10++E3CA 37 00                                DW $0037                       ; Bounty LoHi
  11++E3CC 24                                   DB GeckoNormalsSize            ; Face (Normal) Count
  12++E3CD 12                                   DB $12                         ; Range when it turns to a dot
  13++E3CE 46                                   DB $46                         ; Energy Max
  14++E3CF 1E                                   DB $1E                         ; Speed Max
  15++E3D0 66 E4                                DW GeckoNormals                ; Normals
  16++E3D2 03                                   DB $03                         ; Q scaling
  17++E3D3 10                                   DB $10                         ; Laser power and Nbr Missiles
  18++E3D4 DA E3                                DW GeckoVertices               ; Verticles Address
  19++E3D6 00                                   DB ShipTypeNormal              ; Ship Type
  20++E3D7 00                                   DB 0                           ; NewB Tactics
  21++E3D8 80                                   DB ShipCanAnger                ; AI Flags
  22++E3D9 60                                   DB $60                         ; chance of ECM module
  23++E3DA 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  23++E3DE 03 45
  24++E3E0 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  24++E3E4 01 23
  25++E3E6 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  25++E3EA 05 67
  26++E3EC 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  26++E3F0 01 78
  27++E3F2 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  27++E3F6 45 66
  28++E3F8 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  28++E3FC 12 88
  29++E3FE 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  29++E402 34 67
  30++E404 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  30++E408 23 78
  31++E40A 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  31++E40E 33 33
  32++E410 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  32++E414 33 33
  33++E416 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  33++E41A 33 33
  34++E41C 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  34++E420 33 33
  35++E422              GeckoVertSize:          equ $ - GeckoVertices
  36++E422 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  37++E426 1F 12 04 14                          DB $1F, $12, $04, $14
  38++E42A 1F 18 14 0C                          DB $1F, $18, $14, $0C
  39++E42E 1F 07 0C 08                          DB $1F, $07, $0C, $08
  40++E432 1F 56 08 10                          DB $1F, $56, $08, $10
  41++E436 1F 45 10 00                          DB $1F, $45, $10, $00
  42++E43A 1F 28 14 1C                          DB $1F, $28, $14, $1C
  43++E43E 1F 37 1C 18                          DB $1F, $37, $1C, $18
  44++E442 1F 46 18 10                          DB $1F, $46, $18, $10
  45++E446 1D 05 00 08                          DB $1D, $05, $00, $08
  46++E44A 1E 01 04 0C                          DB $1E, $01, $04, $0C
  47++E44E 1D 34 00 18                          DB $1D, $34, $00, $18
  48++E452 1E 23 04 1C                          DB $1E, $23, $04, $1C
  49++E456 14 67 08 18                          DB $14, $67, $08, $18
  50++E45A 14 78 0C 1C                          DB $14, $78, $0C, $1C
  51++E45E 10 33 20 28                          DB $10, $33, $20, $28
  52++E462 11 33 24 2C                          DB $11, $33, $24, $2C
  53++E466              GeckoEdgesSize:             equ $ - GeckoEdges
  54++E466              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  55++E466 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  56++E46A 1F 04 2D 08                          DB $1F, $04, $2D, $08
  57++E46E 5F 19 6C 13                          DB $5F, $19, $6C, $13
  58++E472 5F 00 54 0C                          DB $5F, $00, $54, $0C
  59++E476 DF 19 6C 13                          DB $DF, $19, $6C, $13
  60++E47A 9F 04 2D 08                          DB $9F, $04, $2D, $08
  61++E47E BF 58 10 D6                          DB $BF, $58, $10, $D6
  62++E482 3F 00 00 BB                          DB $3F, $00, $00, $BB
  63++E486 3F 58 10 D6                          DB $3F, $58, $10, $D6
  64++E48A              GeckoNormalsSize:       equ $ - GeckoNormals
  65++E48A              GeckoLen:               equ $ - Gecko
  66++E48A
# file closed: ./Data/ships/Gecko.asm
  86+ E48A                                      include "Data/ships/Ghavial.asm"
# file opened: ./Data/ships/Ghavial.asm
   1++E48A 03           Ghavial:	            DB $03                      ; Number of cargo canisters released when destroyed
   2++E48B 00 26                                DW $2600                    ; Ship's targetable area LoHi
   3++E48D ED E4                                DW GhavialEdges             ; Edge Data
   4++E48F 58                                   DB GhavialEdgesSize         ; Size of Edge Data
   5++E490 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E491 22                                   DB $22                      ; Explosion Count
   7++E492 0C                                   DB GhavialVertSize /6       ; Vertex Count /6
   8++E493 48                                   DB GhavialVertSize          ; Vertex Count
   9++E494 16                                   DB GhavialEdgesCnt          ; Edges Count
  10++E495 64 00                                DW $0064                    ; Bounty LoHi
  11++E497 30                                   DB GhavialNormalsSize       ; Face (Normal) Count
  12++E498 0A                                   DB $0A                      ; Range when it turns to a dot
  13++E499 72                                   DB $72                      ; Energy Max
  14++E49A 10                                   DB $10                      ; Speed Max
  15++E49B 45 E5                                DW GhavialNormals           ; Normals
  16++E49D 00                                   DB $00                      ; Q scaling
  17++E49E 27                                   DB $27                      ; Laser power and Nbr Missiles
  18++E49F A5 E4                                DW GhavialVertices          ; Verticles Address
  19++E4A1 00                                   DB ShipTypeNormal           ; Ship Type
  20++E4A2 00                                   DB 0                        ; NewB Tactics
  21++E4A3 80                                   DB ShipCanAnger             ; AI Flags
  22++E4A4 60                                   DB $60                      ; chance of ECM module
  23++E4A5
  24++E4A5 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  24++E4A9 67 01
  25++E4AB 1E 00 64 9F                      DB $1E, $00, $64, $9F, $6B, $05
  25++E4AF 6B 05
  26++E4B1 28 1E 1A 3F                      DB $28, $1E, $1A, $3F, $23, $01
  26++E4B5 23 01
  27++E4B7 28 1E 1A BF                      DB $28, $1E, $1A, $BF, $45, $03
  27++E4BB 45 03
  28++E4BD 3C 00 14 3F                      DB $3C, $00, $14, $3F, $78, $12
  28++E4C1 78 12
  29++E4C3 28 00 3C 3F                      DB $28, $00, $3C, $3F, $89, $23
  29++E4C7 89 23
  30++E4C9 3C 00 14 BF                      DB $3C, $00, $14, $BF, $AB, $45
  30++E4CD AB 45
  31++E4CF 28 00 3C BF                      DB $28, $00, $3C, $BF, $9A, $34
  31++E4D3 9A 34
  32++E4D5 00 1E 14 7F                      DB $00, $1E, $14, $7F, $FF, $FF
  32++E4D9 FF FF
  33++E4DB 0A 18 00 09                      DB $0A, $18, $00, $09, $00, $00
  33++E4DF 00 00
  34++E4E1 0A 18 00 89                      DB $0A, $18, $00, $89, $00, $00
  34++E4E5 00 00
  35++E4E7 00 16 0A 09                      DB $00, $16, $0A, $09, $00, $00
  35++E4EB 00 00
  36++E4ED
  37++E4ED              GhavialVertSize: equ $ - GhavialVertices
  38++E4ED
  39++E4ED
  40++E4ED 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  41++E4F1 1F 12 10 08                  DB $1F, $12, $10, $08
  42++E4F5 1F 23 14 08                  DB $1F, $23, $14, $08
  43++E4F9 1F 30 0C 08                  DB $1F, $30, $0C, $08
  44++E4FD 1F 34 1C 0C                  DB $1F, $34, $1C, $0C
  45++E501 1F 45 18 0C                  DB $1F, $45, $18, $0C
  46++E505 1F 50 0C 04                  DB $1F, $50, $0C, $04
  47++E509 1F 67 00 20                  DB $1F, $67, $00, $20
  48++E50D 1F 78 10 20                  DB $1F, $78, $10, $20
  49++E511 1F 89 14 20                  DB $1F, $89, $14, $20
  50++E515 1F 9A 1C 20                  DB $1F, $9A, $1C, $20
  51++E519 1F AB 18 20                  DB $1F, $AB, $18, $20
  52++E51D 1F B6 04 20                  DB $1F, $B6, $04, $20
  53++E521 1F 06 04 00                  DB $1F, $06, $04, $00
  54++E525 1F 17 00 10                  DB $1F, $17, $00, $10
  55++E529 1F 28 10 14                  DB $1F, $28, $10, $14
  56++E52D 1F 39 14 1C                  DB $1F, $39, $14, $1C
  57++E531 1F 4A 1C 18                  DB $1F, $4A, $1C, $18
  58++E535 1F 5B 18 04                  DB $1F, $5B, $18, $04
  59++E539 09 00 24 28                  DB $09, $00, $24, $28
  60++E53D 09 00 28 2C                  DB $09, $00, $28, $2C
  61++E541 09 00 2C 24                  DB $09, $00, $2C, $24
  62++E545
  63++E545              GhavialEdgesSize: equ $ - GhavialEdges
  64++E545
  65++E545
  66++E545              GhavialEdgesCnt: equ GhavialEdgesSize/4
  67++E545
  68++E545
  69++E545 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  70++E549 1F 33 24 0C                  DB $1F, $33, $24, $0C
  71++E54D 3F 33 1C 19                  DB $3F, $33, $1C, $19
  72++E551 3F 00 30 2A                  DB $3F, $00, $30, $2A
  73++E555 BF 33 1C 19                  DB $BF, $33, $1C, $19
  74++E559 9F 33 24 0C                  DB $9F, $33, $24, $0C
  75++E55D 5F 00 3E 0F                  DB $5F, $00, $3E, $0F
  76++E561 5F 1C 38 07                  DB $5F, $1C, $38, $07
  77++E565 7F 1B 37 0D                  DB $7F, $1B, $37, $0D
  78++E569 7F 00 33 26                  DB $7F, $00, $33, $26
  79++E56D FF 1B 37 0D                  DB $FF, $1B, $37, $0D
  80++E571 DF 1C 38 07                  DB $DF, $1C, $38, $07
  81++E575
  82++E575              GhavialNormalsSize: equ $ - GhavialNormals
  83++E575              GhavialLen: equ $ - Ghavial
  84++E575
# file closed: ./Data/ships/Ghavial.asm
  87+ E575                                      include "Data/ships/Iguana.asm"
# file opened: ./Data/ships/Iguana.asm
   1++E575 01           Iguana:	                DB $01                      ; Number of cargo canisters released when destroyed
   2++E576 AC 0D                                DW $0DAC                    ; Ship's targetable area LoHi
   3++E578 EA E5                                DW IguanaEdges              ; Edge Data
   4++E57A 5C                                   DB IguanaEdgesSize          ; Size of Edge Data
   5++E57B 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E57C 1A                                   DB $1A                      ; Explosion Count
   7++E57D 0F                                   DB IguanaVertSize /6        ; Vertex Count /6
   8++E57E 5A                                   DB IguanaVertSize           ; Vertex Count
   9++E57F 17                                   DB IguanaEdgesCnt           ; Edges Count
  10++E580 96 00                                DW $0096                    ; Bounty LoHi
  11++E582 28                                   DB IguanaNormalsSize        ; Face (Normal) Count
  12++E583 0A                                   DB $0A                      ; Range when it turns to a dot
  13++E584 5A                                   DB $5A                      ; Energy Max
  14++E585 21                                   DB $21                      ; Speed Max
  15++E586 46 E6                                DW IguanaNormals            ; Normals
  16++E588 01                                   DB $01                      ; Q scaling
  17++E589 23                                   DB $20 | ShipMissiles3      ; Laser power and Nbr Missiles
  18++E58A 90 E5                                DW IguanaVertices           ; Verticles Address
  19++E58C 00                                   DB ShipTypeNormal           ; Ship Type
  20++E58D 00                                   DB 0                        ; NewB Tactics
  21++E58E 80                                   DB ShipCanAnger             ; AI Flags
  22++E58F 80                                   DB $80                      ; chance of ECM module
  23++E590
  24++E590
  25++E590 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  25++E594 23 01
  26++E596 00 14 1E 1F                  DB $00, $14, $1E, $1F, $46, $02
  26++E59A 46 02
  27++E59C 28 00 0A 9F                  DB $28, $00, $0A, $9F, $45, $01
  27++E5A0 45 01
  28++E5A2 00 14 1E 5F                  DB $00, $14, $1E, $5F, $57, $13
  28++E5A6 57 13
  29++E5A8 28 00 0A 1F                  DB $28, $00, $0A, $1F, $67, $23
  29++E5AC 67 23
  30++E5AE 00 14 28 3F                  DB $00, $14, $28, $3F, $89, $46
  30++E5B2 89 46
  31++E5B4 28 00 1E BF                  DB $28, $00, $1E, $BF, $88, $45
  31++E5B8 88 45
  32++E5BA 00 14 28 7F                  DB $00, $14, $28, $7F, $89, $57
  32++E5BE 89 57
  33++E5C0 28 00 1E 3F                  DB $28, $00, $1E, $3F, $99, $67
  33++E5C4 99 67
  34++E5C6 28 00 28 9E                  DB $28, $00, $28, $9E, $11, $00
  34++E5CA 11 00
  35++E5CC 28 00 28 1E                  DB $28, $00, $28, $1E, $33, $22
  35++E5D0 33 22
  36++E5D2 00 08 28 2A                  DB $00, $08, $28, $2A, $99, $88
  36++E5D6 99 88
  37++E5D8 10 00 24 AA                  DB $10, $00, $24, $AA, $88, $88
  37++E5DC 88 88
  38++E5DE 00 08 28 6A                  DB $00, $08, $28, $6A, $99, $88
  38++E5E2 99 88
  39++E5E4 10 00 24 2A                  DB $10, $00, $24, $2A, $99, $99
  39++E5E8 99 99
  40++E5EA
  41++E5EA              IguanaVertSize: equ $ - IguanaVertices
  42++E5EA
  43++E5EA
  44++E5EA
  45++E5EA 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  46++E5EE 1F 01 00 08                  DB $1F, $01, $00, $08
  47++E5F2 1F 13 00 0C                  DB $1F, $13, $00, $0C
  48++E5F6 1F 23 00 10                  DB $1F, $23, $00, $10
  49++E5FA 1F 46 04 14                  DB $1F, $46, $04, $14
  50++E5FE 1F 45 08 18                  DB $1F, $45, $08, $18
  51++E602 1F 57 0C 1C                  DB $1F, $57, $0C, $1C
  52++E606 1F 67 10 20                  DB $1F, $67, $10, $20
  53++E60A 1F 48 14 18                  DB $1F, $48, $14, $18
  54++E60E 1F 58 18 1C                  DB $1F, $58, $18, $1C
  55++E612 1F 69 14 20                  DB $1F, $69, $14, $20
  56++E616 1F 79 1C 20                  DB $1F, $79, $1C, $20
  57++E61A 1F 04 04 08                  DB $1F, $04, $04, $08
  58++E61E 1F 15 08 0C                  DB $1F, $15, $08, $0C
  59++E622 1F 26 04 10                  DB $1F, $26, $04, $10
  60++E626 1F 37 0C 10                  DB $1F, $37, $0C, $10
  61++E62A 1F 89 14 1C                  DB $1F, $89, $14, $1C
  62++E62E 1E 01 08 24                  DB $1E, $01, $08, $24
  63++E632 1E 23 10 28                  DB $1E, $23, $10, $28
  64++E636 0A 88 2C 30                  DB $0A, $88, $2C, $30
  65++E63A 0A 88 34 30                  DB $0A, $88, $34, $30
  66++E63E 0A 99 2C 38                  DB $0A, $99, $2C, $38
  67++E642 0A 99 34 38                  DB $0A, $99, $34, $38
  68++E646
  69++E646              IguanaEdgesSize: equ $ - IguanaEdges
  70++E646
  71++E646
  72++E646              IguanaEdgesCnt: equ IguanaEdgesSize/4
  73++E646
  74++E646
  75++E646 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  76++E64A DF 33 4D 19  	DB $DF, $33, $4D, $19
  77++E64E 1F 33 4D 19  	DB $1F, $33, $4D, $19
  78++E652 5F 33 4D 19  	DB $5F, $33, $4D, $19
  79++E656 9F 2A 55 00  	DB $9F, $2A, $55, $00
  80++E65A DF 2A 55 00  	DB $DF, $2A, $55, $00
  81++E65E 1F 2A 55 00  	DB $1F, $2A, $55, $00
  82++E662 5F 2A 55 00  	DB $5F, $2A, $55, $00
  83++E666 BF 17 00 5D  	DB $BF, $17, $00, $5D
  84++E66A 3F 17 00 5D  	DB $3F, $17, $00, $5D
  85++E66E
  86++E66E
  87++E66E              IguanaNormalsSize: equ $ - IguanaNormals
  88++E66E              IguanaLen: equ $ - Iguana
  89++E66E
# file closed: ./Data/ships/Iguana.asm
  88+ E66E                                      include "Data/ships/Krait.asm"
# file opened: ./Data/ships/Krait.asm
   1++E66E
   2++E66E 01           Krait:                  DB $01                         ; Number of cargo canisters released when destroyed
   3++E66F 0E 10                                DW $100E                       ; Ship's targetable area LoHi
   4++E671 EF E6                                DW KraitEdges                  ; Edge Data
   5++E673 54                                   DB KraitEdgesSize              ; Size of Edge Data
   6++E674 00                                   DB $00                         ; Gun Vertex Byte offset
   7++E675 12                                   DB $12                         ; Explosion Count
   8++E676 11                                   DB KraitVertSize /6            ; Vertex Count /6
   9++E677 66                                   DB KraitVertSize               ; Vertex Count
  10++E678 15                                   DB KraitEdgesCnt               ; Edges Count
  11++E679 64 00                                DW $0064                       ; Bounty LoHi
  12++E67B 18                                   DB KraitNormalsSize            ; Face (Normal) Count
  13++E67C 14                                   DB $14                         ; Range when it turns to a dot
  14++E67D 50                                   DB $50                         ; Energy Max
  15++E67E 1E                                   DB $1E                         ; Speed Max
  16++E67F 43 E7                                DW KraitNormals                ; Normals
  17++E681 02                                   DB $02                         ; Q scaling
  18++E682 14                                   DB $10 | ShipMissiles4         ; Laser power and Nbr Missiles
  19++E683 89 E6                                DW KraitVertices               ; Verticles Address
  20++E685 00                                   DB ShipTypeNormal              ; Ship Type
  21++E686 00                                   DB 0                           ; NewB Tactics
  22++E687 80                                   DB ShipCanAnger                ; AI Flags
  23++E688 D0                                   DB $D0                         ; chance of ECM module
  24++E689 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  24++E68D 01 23
  25++E68F 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  25++E693 03 45
  26++E695 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  26++E699 12 45
  27++E69B 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  27++E69F 01 44
  28++E6A1 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  28++E6A5 23 55
  29++E6A7 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  29++E6AB 01 11
  30++E6AD 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  30++E6B1 23 33
  31++E6B3 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  31++E6B7 00 33
  32++E6B9 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  32++E6BD 00 33
  33++E6BF 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  33++E6C3 33 33
  34++E6C5 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  34++E6C9 00 00
  35++E6CB 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  35++E6CF 44 44
  36++E6D1 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  36++E6D5 44 44
  37++E6D7 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  37++E6DB 44 44
  38++E6DD 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  38++E6E1 55 55
  39++E6E3 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  39++E6E7 55 55
  40++E6E9 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  40++E6ED 55 55
  41++E6EF              KraitVertSize           equ $  - KraitVertices
  42++E6EF 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  42++E6F3 1F 12 00 08
  43++E6F7 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  43++E6FB 1F 23 00 10
  44++E6FF 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  44++E703 1F 25 10 08
  45++E707 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  45++E70B 1F 04 0C 04
  46++E70F 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  46++E713 1C 23 10 18
  47++E717 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  47++E71B 09 00 1C 28
  48++E71F 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  48++E723 09 33 1C 24
  49++E727 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  49++E72B 08 44 2C 34
  50++E72F 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  50++E733 07 44 30 2C
  51++E737 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  51++E73B 08 55 3C 40
  52++E73F 08 55 40 38                          DB $08, $55, $40, $38
  53++E743              KraitEdgesSize          equ $  - KraitEdges
  54++E743              KraitEdgesCnt           equ KraitEdgesSize/4
  55++E743 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  56++E747 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  56++E74B DF 07 30 06
  57++E74F 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  57++E753 3F 4D 00 9A
  58++E757 BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  59++E75B              KraitNormalsSize        equ $  - KraitNormals
  60++E75B              KraitLen                equ $  - Krait
  61++E75B
# file closed: ./Data/ships/Krait.asm
  89+ E75B                                      include "Data/ships/Logo.asm"
# file opened: ./Data/ships/Logo.asm
   1++E75B 00           Logo:	                DB $00                    ; Number of cargo canisters released when destroyed
   2++E75C 49 26                                DW $2649                  ; Ship's targetable area LoHi
   3++E75E 72 E8                                DW LogoEdges              ; Edge Data
   4++E760 94                                   DB LogoEdgesSize          ; Size of Edge Data
   5++E761 00                                   DB $00                    ; Gun Vertex Byte offset
   6++E762 36                                   DB $36                    ; Explosion Count
   7++E763 2A                                   DB LogoVertSize /6        ; Vertex Count /6
   8++E764 FC                                   DB LogoVertSize           ; Vertex Count
   9++E765 25                                   DB LogoEdgesCnt           ; Edges Count
  10++E766 00 00                                DW $0000                  ; Bounty LoHi
  11++E768 14                                   DB LogoNormalsSize        ; Face (Normal) Count
  12++E769 63                                   DB $63                    ; Range when it turns to a dot
  13++E76A FC                                   DB $FC                    ; Energy Max
  14++E76B 24                                   DB $24                    ; Speed Max
  15++E76C 06 E9                                DW LogoNormals            ; Normals
  16++E76E 01                                   DB $01                    ; Q scaling
  17++E76F 00                                   DB $00                    ; Laser power and Nbr Missiles
  18++E770 76 E7                                DW LogoVertices           ; Verticles Address
  19++E772 FD                                   DB ShipTypeText           ; Ship Type
  20++E773 00                                   DB 0                      ; NewB Tactics
  21++E774 00                                   DB 0                      ; AI Flags
  22++E775 FF                                   DB $FF                    ; chance of ECM module
  23++E776
  24++E776 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  24++E77A 00 00
  25++E77C 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  25++E780 00 00
  26++E782 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  26++E786 00 00
  27++E788 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  27++E78C 00 00
  28++E78E 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  28++E792 00 00
  29++E794 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  29++E798 00 00
  30++E79A 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  30++E79E 00 00
  31++E7A0 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  31++E7A4 00 00
  32++E7A6 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  32++E7AA 00 00
  33++E7AC 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  33++E7B0 00 00
  34++E7B2 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  34++E7B6 00 00
  35++E7B8 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  35++E7BC 00 00
  36++E7BE 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  36++E7C2 02 33
  37++E7C4 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  37++E7C8 02 44
  38++E7CA 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  38++E7CE 01 33
  39++E7D0 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  39++E7D4 02 33
  40++E7D6 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  40++E7DA 02 44
  41++E7DC 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  41++E7E0 01 44
  42++E7E2 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  42++E7E6 00 00
  43++E7E8 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  43++E7EC 00 00
  44++E7EE 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  44++E7F2 00 00
  45++E7F4 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  45++E7F8 00 00
  46++E7FA 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  46++E7FE 00 00
  47++E800 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  47++E804 00 00
  48++E806 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  48++E80A 00 00
  49++E80C 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  49++E810 00 00
  50++E812 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  50++E816 00 00
  51++E818 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  51++E81C 00 00
  52++E81E 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  52++E822 00 00
  53++E824 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  53++E828 00 00
  54++E82A 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  54++E82E 00 00
  55++E830 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  55++E834 00 00
  56++E836 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  56++E83A 00 00
  57++E83C 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  57++E840 00 00
  58++E842 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  58++E846 00 00
  59++E848 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  59++E84C 00 00
  60++E84E 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  60++E852 00 00
  61++E854 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  61++E858 00 00
  62++E85A 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  62++E85E 00 00
  63++E860 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  63++E864 00 00
  64++E866 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  64++E86A 00 00
  65++E86C 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  65++E870 00 00
  66++E872
  67++E872              LogoVertSize: equ $ - LogoVertices
  68++E872
  69++E872
  70++E872
  71++E872 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  72++E876 1F 00 04 08  	DB $1F, $00, $04, $08
  73++E87A 1F 00 08 0C  	DB $1F, $00, $08, $0C
  74++E87E 1F 00 0C 10  	DB $1F, $00, $0C, $10
  75++E882 1F 00 10 14  	DB $1F, $00, $10, $14
  76++E886 1F 00 14 18  	DB $1F, $00, $14, $18
  77++E88A 1F 00 18 1C  	DB $1F, $00, $18, $1C
  78++E88E 1F 00 1C 20  	DB $1F, $00, $1C, $20
  79++E892 1F 00 20 24  	DB $1F, $00, $20, $24
  80++E896 1F 00 24 28  	DB $1F, $00, $24, $28
  81++E89A 1F 00 28 2C  	DB $1F, $00, $28, $2C
  82++E89E 1F 00 2C 00  	DB $1F, $00, $2C, $00
  83++E8A2 1E 03 38 3C  	DB $1E, $03, $38, $3C
  84++E8A6 1E 01 3C 40  	DB $1E, $01, $3C, $40
  85++E8AA 1E 04 40 44  	DB $1E, $04, $40, $44
  86++E8AE 1E 01 44 38  	DB $1E, $01, $44, $38
  87++E8B2 1E 03 10 30  	DB $1E, $03, $10, $30
  88++E8B6 1E 22 30 34  	DB $1E, $22, $30, $34
  89++E8BA 1E 04 34 20  	DB $1E, $04, $34, $20
  90++E8BE 1E 11 20 10  	DB $1E, $11, $20, $10
  91++E8C2 1E 13 10 38  	DB $1E, $13, $10, $38
  92++E8C6 1E 13 30 3C  	DB $1E, $13, $30, $3C
  93++E8CA 1E 24 34 40  	DB $1E, $24, $34, $40
  94++E8CE 1E 14 20 44  	DB $1E, $14, $20, $44
  95++E8D2 1E 00 54 58  	DB $1E, $00, $54, $58
  96++E8D6 1E 00 58 60  	DB $1E, $00, $58, $60
  97++E8DA 1E 00 60 64  	DB $1E, $00, $60, $64
  98++E8DE 1E 00 5C 68  	DB $1E, $00, $5C, $68
  99++E8E2 1E 00 6C 70  	DB $1E, $00, $6C, $70
 100++E8E6 1E 00 70 74  	DB $1E, $00, $70, $74
 101++E8EA 1E 00 78 7C  	DB $1E, $00, $78, $7C
 102++E8EE 1E 00 80 84  	DB $1E, $00, $80, $84
 103++E8F2 1E 00 88 8C  	DB $1E, $00, $88, $8C
 104++E8F6 1E 00 90 94  	DB $1E, $00, $90, $94
 105++E8FA 1E 00 94 9C  	DB $1E, $00, $94, $9C
 106++E8FE 1E 00 9C A0  	DB $1E, $00, $9C, $A0
 107++E902 1E 00 A4 98  	DB $1E, $00, $A4, $98
 108++E906
 109++E906              LogoEdgesSize: equ $ - LogoEdges
 110++E906
 111++E906
 112++E906              LogoEdgesCnt: equ LogoEdgesSize/4
 113++E906
 114++E906
 115++E906 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 116++E90A 1F 00 04 0F  	DB $1F, $00, $04, $0F
 117++E90E 3F 00 0D 34  	DB $3F, $00, $0D, $34
 118++E912 9F 51 51 00  	DB $9F, $51, $51, $00
 119++E916 1F 51 51 00  	DB $1F, $51, $51, $00
 120++E91A
 121++E91A
 122++E91A              LogoNormalsSize: equ $ - LogoNormals
 123++E91A              LogoLen: equ $ - Logo
 124++E91A
# file closed: ./Data/ships/Logo.asm
  90+ E91A                                      include "Data/ships/Mamba.asm"
# file opened: ./Data/ships/Mamba.asm
   1++E91A 01           Mamba:	                DB $01                     ; Number of cargo canisters released when destroyed
   2++E91B 24 13                                DW $1324                   ; Ship's targetable area LoHi
   3++E91D CB E9                                DW MambaEdges              ; Edge Data
   4++E91F 70                                   DB MambaEdgesSize          ; Size of Edge Data
   5++E920 00                                   DB $00                     ; Gun Vertex Byte offset
   6++E921 22                                   DB $22                     ; Explosion Count
   7++E922 19                                   DB MambaVertSize /6        ; Vertex Count /6
   8++E923 96                                   DB MambaVertSize           ; Vertex Count
   9++E924 1C                                   DB MambaEdgesCnt           ; Edges Count
  10++E925 96 00                                DW $0096                   ; Bounty LoHi
  11++E927 14                                   DB MambaNormalsSize        ; Face (Normal) Count
  12++E928 19                                   DB $19                     ; Range when it turns to a dot
  13++E929 5A                                   DB $5A                     ; Energy Max
  14++E92A 1E                                   DB $1E                     ; Speed Max
  15++E92B 3B EA                                DW MambaNormals            ; Normals
  16++E92D 02                                   DB $02                     ; Q scaling
  17++E92E 12                                   DB $12 | ShipMissiles2     ; Laser power and Nbr Missiles
  18++E92F 35 E9                                DW MambaVertices           ; Verticles Address
  19++E931 00                                   DB ShipTypeNormal          ; Ship Type
  20++E932 00                                   DB 0                       ; NewB Tactics
  21++E933 80                                   DB ShipCanAnger            ; AI Flags
  22++E934 E0                                   DB $E0                     ; chance of ECM module
  23++E935
  24++E935 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  24++E939 10 32
  25++E93B 40 08 20 FF                  DB $40, $08, $20, $FF, $20, $44
  25++E93F 20 44
  26++E941 20 08 20 BE                  DB $20, $08, $20, $BE, $21, $44
  26++E945 21 44
  27++E947 20 08 20 3E                  DB $20, $08, $20, $3E, $31, $44
  27++E94B 31 44
  28++E94D 40 08 20 7F                  DB $40, $08, $20, $7F, $30, $44
  28++E951 30 44
  29++E953 04 04 10 8E                  DB $04, $04, $10, $8E, $11, $11
  29++E957 11 11
  30++E959 04 04 10 0E                  DB $04, $04, $10, $0E, $11, $11
  30++E95D 11 11
  31++E95F 08 03 1C 0D                  DB $08, $03, $1C, $0D, $11, $11
  31++E963 11 11
  32++E965 08 03 1C 8D                  DB $08, $03, $1C, $8D, $11, $11
  32++E969 11 11
  33++E96B 14 04 10 D4                  DB $14, $04, $10, $D4, $00, $00
  33++E96F 00 00
  34++E971 14 04 10 54                  DB $14, $04, $10, $54, $00, $00
  34++E975 00 00
  35++E977 18 07 14 F4                  DB $18, $07, $14, $F4, $00, $00
  35++E97B 00 00
  36++E97D 10 07 14 F0                  DB $10, $07, $14, $F0, $00, $00
  36++E981 00 00
  37++E983 10 07 14 70                  DB $10, $07, $14, $70, $00, $00
  37++E987 00 00
  38++E989 18 07 14 74                  DB $18, $07, $14, $74, $00, $00
  38++E98D 00 00
  39++E98F 08 04 20 AD                  DB $08, $04, $20, $AD, $44, $44
  39++E993 44 44
  40++E995 08 04 20 2D                  DB $08, $04, $20, $2D, $44, $44
  40++E999 44 44
  41++E99B 08 04 20 6E                  DB $08, $04, $20, $6E, $44, $44
  41++E99F 44 44
  42++E9A1 08 04 20 EE                  DB $08, $04, $20, $EE, $44, $44
  42++E9A5 44 44
  43++E9A7 20 04 20 A7                  DB $20, $04, $20, $A7, $44, $44
  43++E9AB 44 44
  44++E9AD 20 04 20 27                  DB $20, $04, $20, $27, $44, $44
  44++E9B1 44 44
  45++E9B3 24 04 20 67                  DB $24, $04, $20, $67, $44, $44
  45++E9B7 44 44
  46++E9B9 24 04 20 E7                  DB $24, $04, $20, $E7, $44, $44
  46++E9BD 44 44
  47++E9BF 26 00 20 A5                  DB $26, $00, $20, $A5, $44, $44
  47++E9C3 44 44
  48++E9C5 26 00 20 25                  DB $26, $00, $20, $25, $44, $44
  48++E9C9 44 44
  49++E9CB
  50++E9CB              MambaVertSize: equ $ - MambaVertices
  51++E9CB
  52++E9CB
  53++E9CB
  54++E9CB 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  55++E9CF 1F 30 00 10  	DB $1F, $30, $00, $10
  56++E9D3 1F 40 04 10  	DB $1F, $40, $04, $10
  57++E9D7 1E 42 04 08  	DB $1E, $42, $04, $08
  58++E9DB 1E 41 08 0C  	DB $1E, $41, $08, $0C
  59++E9DF 1E 43 0C 10  	DB $1E, $43, $0C, $10
  60++E9E3 0E 11 14 18  	DB $0E, $11, $14, $18
  61++E9E7 0C 11 18 1C  	DB $0C, $11, $18, $1C
  62++E9EB 0D 11 1C 20  	DB $0D, $11, $1C, $20
  63++E9EF 0C 11 14 20  	DB $0C, $11, $14, $20
  64++E9F3 14 00 24 2C  	DB $14, $00, $24, $2C
  65++E9F7 10 00 24 30  	DB $10, $00, $24, $30
  66++E9FB 10 00 28 34  	DB $10, $00, $28, $34
  67++E9FF 14 00 28 38  	DB $14, $00, $28, $38
  68++EA03 0E 00 34 38  	DB $0E, $00, $34, $38
  69++EA07 0E 00 2C 30  	DB $0E, $00, $2C, $30
  70++EA0B 0D 44 3C 40  	DB $0D, $44, $3C, $40
  71++EA0F 0E 44 44 48  	DB $0E, $44, $44, $48
  72++EA13 0C 44 3C 48  	DB $0C, $44, $3C, $48
  73++EA17 0C 44 40 44  	DB $0C, $44, $40, $44
  74++EA1B 07 44 50 54  	DB $07, $44, $50, $54
  75++EA1F 05 44 50 60  	DB $05, $44, $50, $60
  76++EA23 05 44 54 60  	DB $05, $44, $54, $60
  77++EA27 07 44 4C 58  	DB $07, $44, $4C, $58
  78++EA2B 05 44 4C 5C  	DB $05, $44, $4C, $5C
  79++EA2F 05 44 58 5C  	DB $05, $44, $58, $5C
  80++EA33 1E 21 00 08  	DB $1E, $21, $00, $08
  81++EA37 1E 31 00 0C  	DB $1E, $31, $00, $0C
  82++EA3B
  83++EA3B              MambaEdgesSize: equ $ - MambaEdges
  84++EA3B
  85++EA3B
  86++EA3B              MambaEdgesCnt: equ MambaEdgesSize/4
  87++EA3B
  88++EA3B
  89++EA3B 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  90++EA3F 1E 00 18 02  	DB $1E, $00, $18, $02
  91++EA43 9E 20 40 10  	DB $9E, $20, $40, $10
  92++EA47 1E 20 40 10  	DB $1E, $20, $40, $10
  93++EA4B 3E 00 00 7F  	DB $3E, $00, $00, $7F
  94++EA4F
  95++EA4F              MambaNormalsSize: equ $ - MambaNormals
  96++EA4F              MambaLen: equ $ - Mamba
  97++EA4F
# file closed: ./Data/ships/Mamba.asm
  91+ EA4F                                      include "Data/ships/Missile.asm"
# file opened: ./Data/ships/Missile.asm
   1++EA4F                  DEFINE DEBUGMODEL 1
   2++EA4F 00           Missile:	            DB $00                     ; Number of cargo canisters released when destroyed
   3++EA50 40 06                                DW $0640                   ; Ship's targetable area LoHi
   4++EA52 B8 EA                                DW MissileEdges            ; Edge Data
   5++EA54 24                                   DB MissileEdgesSize        ; Size of Edge Data
   6++EA55 00                                   DB $00                     ; Gun Vertex Byte offset
   7++EA56 0A                                   DB $0A                     ; Explosion Count
   8++EA57 0D                                   DB MissileVertSize /6      ; Vertex Count /6
   9++EA58 4E                                   DB MissileVertSize         ; Vertex Count
  10++EA59 09                                   DB MissileEdgesCnt         ; Edges Count
  11++EA5A 00 00                                DW $0000                   ; Bounty LoHi
  12++EA5C 10                                   DB MissileNormalsSize      ; Face (Normal) Count
  13++EA5D 0E                                   DB $0E                     ; Range when it turns to a dot
  14++EA5E 02                                   DB $02                     ; Energy Max
  15++EA5F 2C                                   DB $2C                     ; Speed Max
  16++EA60 DC EA                                DW MissileNormals          ; Normals
  17++EA62 02                                   DB $02                     ; Q scaling
  18++EA63 00                                   DB $00                     ; Laser power and Nbr Missiles
  19++EA64 6A EA                                DW MissileVertices         ; Verticles Address
  20++EA66 01                                   DB ShipTypeMissile         ; Ship Type
  21++EA67 00                                   DB 0                       ; NewB Tactics
  22++EA68 00                                   DB 0                       ; AI Flags
  23++EA69 00                                   DB $00                     ; chance of ECM module
  24++EA6A
  25++EA6A              ;;;     Byte 0 = X magnitide with origin at middle of ship
  26++EA6A              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  27++EA6A              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  28++EA6A              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  29++EA6A              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  30++EA6A              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  31++EA6A              MissileVertices:    IFDEF DEBUGMODEL
  32++EA6A 00 50 00 1F                          DB $00,$50,$00,$1F,$00,$00  ; 00 00 Y Tip (Roof)
  32++EA6E 00 00
  33++EA70 00 00 00 1F                          DB $00,$00,$00,$1F,$00,$00  ; 01 04 Y base for all nodes
  33++EA74 00 00
  34++EA76 50 00 00 1F                          DB $50,$00,$00,$1F,$01,$01  ; 02 08 X Tip (Side)
  34++EA7A 01 01
  35++EA7C 00 00 00 1F                          DB $00,$00,$00,$1F,$01,$01  ; 03 0C X Base
  35++EA80 01 01
  36++EA82 00 00 30 1F                          DB $00,$00,$30,$1F,$02,$02  ; 04 10 Z Tip (Nose1)
  36++EA86 02 02
  37++EA88 00 00 00 1F                          DB $00,$00,$00,$1F,$02,$03  ; 05 14 Z base
  37++EA8C 02 03
  38++EA8E 04 00 25 9F                          DB $04,$00,$25,$9F,$03,$03  ; 06 18 Z Trangle point 1
  38++EA92 03 03
  39++EA94 04 00 25 1F                          DB $04,$00,$25,$1F,$03,$03  ; 07 1C Z Trangle point 2
  39++EA98 03 03
  40++EA9A 05 10 00 9F                          DB $05,$10,$00,$9F,$00,$00  ; 08 20 Y Cross Member 1
  40++EA9E 00 00
  41++EAA0 05 10 00 1F                          DB $05,$10,$00,$1F,$00,$00  ; 09 24 Y Cross Member 2
  41++EAA4 00 00
  42++EAA6 10 05 00 1F                          DB $10,$05,$00,$1F,$00,$00  ; 10 28 X Cross Member 1
  42++EAAA 00 00
  43++EAAC 20 00 00 1F                          DB $20,$00,$00,$1F,$00,$00  ; 11 2C X Cross Member 2
  43++EAB0 00 00
  44++EAB2 10 05 00 5F                          DB $10,$05,$00,$5F,$00,$00  ; 12 30 X Cross Member 3
  44++EAB6 00 00
  45++EAB8                                  ELSE
  46++EAB8 ~                                    DB $00, $00, $44, $1F, $10, $32
  47++EAB8 ~                                    DB $08, $08, $24, $5F, $21, $54
  48++EAB8 ~                                    DB $08, $08, $24, $1F, $32, $74
  49++EAB8 ~                                    DB $08, $08, $24, $9F, $30, $76
  50++EAB8 ~                                    DB $08, $08, $24, $DF, $10, $65
  51++EAB8 ~                                    DB $08, $08, $2C, $3F, $74, $88
  52++EAB8 ~                                    DB $08, $08, $2C, $7F, $54, $88
  53++EAB8 ~                                    DB $08, $08, $2C, $FF, $65, $88
  54++EAB8 ~                                    DB $08, $08, $2C, $BF, $76, $88
  55++EAB8 ~                                    DB $0C, $0C, $2C, $28, $74, $88
  56++EAB8 ~                                    DB $0C, $0C, $2C, $68, $54, $88
  57++EAB8 ~                                    DB $0C, $0C, $2C, $E8, $65, $88
  58++EAB8 ~                                    DB $0C, $0C, $2C, $A8, $76, $88
  59++EAB8 ~                                    DB $08, $08, $0C, $A8, $76, $77
  60++EAB8 ~                                    DB $08, $08, $0C, $E8, $65, $66
  61++EAB8 ~                                    DB $08, $08, $0C, $28, $74, $77
  62++EAB8 ~                                    DB $08, $08, $0C, $68, $54, $55
  63++EAB8                                  ENDIF
  64++EAB8              MissileVertSize: equ $ - MissileVertices
  65++EAB8
  66++EAB8              ;;;     Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  67++EAB8              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  68++EAB8              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  69++EAB8              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  70++EAB8
  71++EAB8              MissileEdges:	    IFDEF DEBUGMODEL
  72++EAB8 1F 00 00 04                          DB $1F,$00,$00,$04 ; Y
  73++EABC 1F 00 08 0C                          DB $1F,$00,$08,$0C ; X
  74++EAC0 1F 00 10 14                          DB $1F,$00,$10,$14 ; Z
  75++EAC4 1F 00 10 18                          DB $1F,$00,$10,$18 ; Z Tip Traingle 1
  76++EAC8 1F 00 10 1C                          DB $1F,$00,$10,$1C ; Z Tip Traingle 2
  77++EACC 1F 00 1C 18                          DB $1F,$00,$1C,$18 ; Z Tip Traingle 2
  78++EAD0 1F 00 20 24                          DB $1F,$00,$20,$24 ; Y Cross memeber
  79++EAD4 1F 00 28 2C                          DB $1F,$00,$28,$2C ; X Triangle
  80++EAD8 1F 00 2C 30                          DB $1F,$00,$2C,$30 ; X Triangle
  81++EADC                                      ;DB $1F,$00,$18,$1C
  82++EADC                                  ELSE
  83++EADC ~                                    DB $1F, $21, $00, $04
  84++EADC ~                                    DB $1F, $32, $00, $08
  85++EADC ~                                    DB $1F, $30, $00, $0C
  86++EADC ~                                    DB $1F, $10, $00, $10
  87++EADC ~                                    DB $1F, $24, $04, $08
  88++EADC ~                                    DB $1F, $51, $04, $10
  89++EADC ~                                    DB $1F, $60, $0C, $10
  90++EADC ~                                    DB $1F, $73, $08, $0C
  91++EADC ~                                    DB $1F, $74, $08, $14
  92++EADC ~                                    DB $1F, $54, $04, $18
  93++EADC ~                                    DB $1F, $65, $10, $1C
  94++EADC ~                                    DB $1F, $76, $0C, $20
  95++EADC ~                                    DB $1F, $86, $1C, $20
  96++EADC ~                                    DB $1F, $87, $14, $20
  97++EADC ~                                    DB $1F, $84, $14, $18
  98++EADC ~                                    DB $1F, $85, $18, $1C
  99++EADC ~                                    DB $08, $85, $18, $28
 100++EADC ~                                    DB $08, $87, $14, $24
 101++EADC ~                                    DB $08, $87, $20, $30
 102++EADC ~                                    DB $08, $85, $1C, $2C
 103++EADC ~                                    DB $08, $74, $24, $3C
 104++EADC ~                                    DB $08, $54, $28, $40
 105++EADC ~                                    DB $08, $76, $30, $34
 106++EADC ~                                    DB $08, $65, $2C, $38
 107++EADC                                  ENDIF
 108++EADC              MissileEdgesSize: equ $ - MissileEdges
 109++EADC
 110++EADC
 111++EADC              MissileEdgesCnt: equ MissileEdgesSize/4
 112++EADC
 113++EADC              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
 114++EADC              ;;;		Byte 1 = X Lo
 115++EADC              ;;;		Byte 2 = Y Lo
 116++EADC              ;;;		Byte 3 = Z Lo
 117++EADC              MissileNormals:	    IFDEF DEBUGMODEL
 118++EADC 1F 00 10 00                          DB $1F,$00,$10,$00
 119++EAE0 1F 10 00 00                          DB $1F,$10,$00,$00
 120++EAE4 1F 00 00 10                          DB $1F,$00,$00,$10
 121++EAE8 1F 00 00 10                          DB $1F,$00,$00,$10
 122++EAEC                                  ELSE
 123++EAEC ~                                    DB $9F, $40, $00, $10
 124++EAEC ~                                    DB $5F, $00, $40, $10
 125++EAEC ~                                    DB $1F, $40, $00, $10
 126++EAEC ~                                    DB $1F, $00, $40, $10
 127++EAEC ~                                    DB $1F, $20, $00, $00
 128++EAEC ~                                    DB $5F, $00, $20, $00
 129++EAEC ~                                    DB $9F, $20, $00, $00
 130++EAEC ~                                    DB $1F, $00, $20, $00
 131++EAEC ~                                    DB $3F, $00, $00, $B0
 132++EAEC                                  ENDIF
 133++EAEC
 134++EAEC              MissileNormalsSize: equ $ - MissileNormals
 135++EAEC              MissileLen: equ $ - Missile
 136++EAEC
# file closed: ./Data/ships/Missile.asm
  92+ EAEC                                      include "Data/ships/Monitor.asm"
# file opened: ./Data/ships/Monitor.asm
   1++EAEC 04           Monitor:	            DB $04                     ; Number of cargo canisters released when destroyed
   2++EAED 00 36                                DW $3600                   ; Ship's targetable area LoHi
   3++EAEF 6D EB                                DW MonitorEdges            ; Edge Data
   4++EAF1 5C                                   DB MonitorEdgesSize        ; Size of Edge Data
   5++EAF2 00                                   DB $00                     ; Gun Vertex Byte offset
   6++EAF3 2A                                   DB $2A                     ; Explosion Count
   7++EAF4 11                                   DB MonitorVertSize /6      ; Vertex Count /6
   8++EAF5 66                                   DB MonitorVertSize         ; Vertex Count
   9++EAF6 17                                   DB MonitorEdgesCnt         ; Edges Count
  10++EAF7 90 01                                DW $0190                   ; Bounty LoHi
  11++EAF9 2C                                   DB MonitorNormalsSize      ; Face (Normal) Count
  12++EAFA 28                                   DB $28                     ; Range when it turns to a dot
  13++EAFB 84                                   DB $84                     ; Energy Max
  14++EAFC 10                                   DB $10                     ; Speed Max
  15++EAFD C9 EB                                DW MonitorNormals          ; Normals
  16++EAFF 00                                   DB $00                     ; Q scaling
  17++EB00 37                                   DB $37                     ; Laser power and Nbr Missiles
  18++EB01 07 EB                                DW MonitorVertices         ; Verticles Address
  19++EB03 00                                   DB ShipTypeNormal          ; Ship Type
  20++EB04 00                                   DB 0                       ; NewB Tactics
  21++EB05 80                                   DB ShipCanAnger            ; AI Flags
  22++EB06 40                                   DB $40                     ; chance of ECM module
  23++EB07
  24++EB07 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  24++EB0B FF FF
  25++EB0D 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  25++EB11 23 01
  26++EB13 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  26++EB17 50 34
  27++EB19 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  27++EB1D 78 12
  28++EB1F 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  28++EB23 96 45
  29++EB25 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  29++EB29 AA 28
  30++EB2B 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  30++EB2F AA 49
  31++EB31 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  31++EB35 AA 23
  32++EB37 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  32++EB3B AA 34
  33++EB3D 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  33++EB41 AA 89
  34++EB43 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  34++EB47 89 67
  35++EB49 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  35++EB4D 00 00
  36++EB4F 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  36++EB53 00 00
  37++EB55 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  37++EB59 77 77
  38++EB5B 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  38++EB5F 77 77
  39++EB61 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  39++EB65 66 66
  40++EB67 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  40++EB6B 66 66
  41++EB6D              MonitorVertSize:        equ $ - MonitorVertices
  42++EB6D 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  43++EB71 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  44++EB75 1F 23 04 1C                          DB $1F, $23, $04, $1C
  45++EB79 1F 34 08 20                          DB $1F, $34, $08, $20
  46++EB7D 1F 45 08 10                          DB $1F, $45, $08, $10
  47++EB81 1F 50 00 08                          DB $1F, $50, $00, $08
  48++EB85 1F 03 04 08                          DB $1F, $03, $04, $08
  49++EB89 1F 67 00 28                          DB $1F, $67, $00, $28
  50++EB8D 1F 78 0C 28                          DB $1F, $78, $0C, $28
  51++EB91 1F 89 24 28                          DB $1F, $89, $24, $28
  52++EB95 1F 96 10 28                          DB $1F, $96, $10, $28
  53++EB99 1F 17 00 0C                          DB $1F, $17, $00, $0C
  54++EB9D 1F 28 0C 14                          DB $1F, $28, $0C, $14
  55++EBA1 1F 49 18 10                          DB $1F, $49, $18, $10
  56++EBA5 1F 56 10 00                          DB $1F, $56, $10, $00
  57++EBA9 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  58++EBAD 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  59++EBB1 1F 4A 20 18                          DB $1F, $4A, $20, $18
  60++EBB5 1F 8A 14 24                          DB $1F, $8A, $14, $24
  61++EBB9 1F 9A 18 24                          DB $1F, $9A, $18, $24
  62++EBBD 0A 00 2C 30                          DB $0A, $00, $2C, $30
  63++EBC1 0A 77 34 38                          DB $0A, $77, $34, $38
  64++EBC5 0A 66 3C 40                          DB $0A, $66, $3C, $40
  65++EBC9              MonitorEdgesSize:       equ $ - MonitorEdges
  66++EBC9              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  67++EBC9 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  68++EBCD 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  69++EBD1 3F 36 1C 10                          DB $3F, $36, $1C, $10
  70++EBD5 3F 00 39 1C                          DB $3F, $00, $39, $1C
  71++EBD9 BF 36 1C 10                          DB $BF, $36, $1C, $10
  72++EBDD 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  73++EBE1 DF 26 2F 12                          DB $DF, $26, $2F, $12
  74++EBE5 5F 26 2F 12                          DB $5F, $26, $2F, $12
  75++EBE9 7F 27 30 0D                          DB $7F, $27, $30, $0D
  76++EBED FF 27 30 0D                          DB $FF, $27, $30, $0D
  77++EBF1 3F 00 00 40                          DB $3F, $00, $00, $40
  78++EBF5              MonitorNormalsSize:     equ $ - MonitorNormals
  79++EBF5              MonitorLen:             equ $ - Monitor
  80++EBF5
# file closed: ./Data/ships/Monitor.asm
  93+ EBF5                                      include "Data/ships/Moray.asm"
# file opened: ./Data/ships/Moray.asm
   1++EBF5 01           Moray:	                DB $01                    ; Number of cargo canisters released when destroyed
   2++EBF6 84 03                                DW $0384                  ; Ship's targetable area LoHi
   3++EBF8 64 EC                                DW MorayEdges             ; Edge Data
   4++EBFA 4C                                   DB MorayEdgesSize         ; Size of Edge Data
   5++EBFB 00                                   DB $00                    ; Gun Vertex Byte offset
   6++EBFC 1A                                   DB $1A                    ; Explosion Count
   7++EBFD 0E                                   DB MorayVertSize /6       ; Vertex Count /6
   8++EBFE 54                                   DB MorayVertSize          ; Vertex Count
   9++EBFF 13                                   DB MorayEdgesCnt          ; Edges Count
  10++EC00 32 00                                DW $0032                  ; Bounty LoHi
  11++EC02 24                                   DB MorayNormalsSize       ; Face (Normal) Count
  12++EC03 28                                   DB $28                    ; Range when it turns to a dot
  13++EC04 59                                   DB $59                    ; Energy Max
  14++EC05 19                                   DB $19                    ; Speed Max
  15++EC06 B0 EC                                DW MorayNormals           ; Normals
  16++EC08 02                                   DB $02                    ; Q scaling
  17++EC09 2A                                   DB $2A                    ; Laser power and Nbr Missiles
  18++EC0A 10 EC                                DW MorayVertices          ; Verticles Address
  19++EC0C 00                                   DB ShipTypeNormal         ; Ship Type
  20++EC0D 00                                   DB 0                      ; NewB Tactics
  21++EC0E 80                                   DB ShipCanAnger           ; AI Flags
  22++EC0F C0                                   DB $C0                    ; chance of ECM module
  23++EC10
  24++EC10 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  24++EC14 02 78
  25++EC16 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  25++EC1A 01 67
  26++EC1C 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  26++EC20 FF FF
  27++EC22 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  27++EC26 13 66
  28++EC28 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  28++EC2C 25 88
  29++EC2E 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  29++EC32 45 78
  30++EC34 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  30++EC38 34 67
  31++EC3A 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  31++EC3E 44 44
  32++EC40 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  32++EC44 44 44
  33++EC46 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  33++EC4A 44 44
  34++EC4C 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  34++EC50 00 00
  35++EC52 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  35++EC56 00 00
  36++EC58 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  36++EC5C 00 00
  37++EC5E 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  37++EC62 00 00
  38++EC64              MorayVertSize:          equ $ - MorayVertices
  39++EC64 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  40++EC68 1F 16 04 0C                          DB $1F, $16, $04, $0C
  41++EC6C 18 36 0C 18                          DB $18, $36, $0C, $18
  42++EC70 18 47 14 18                          DB $18, $47, $14, $18
  43++EC74 18 58 10 14                          DB $18, $58, $10, $14
  44++EC78 1F 28 00 10                          DB $1F, $28, $00, $10
  45++EC7C 0F 67 04 18                          DB $0F, $67, $04, $18
  46++EC80 0F 78 00 14                          DB $0F, $78, $00, $14
  47++EC84 0F 02 00 08                          DB $0F, $02, $00, $08
  48++EC88 0F 01 04 08                          DB $0F, $01, $04, $08
  49++EC8C 11 13 08 0C                          DB $11, $13, $08, $0C
  50++EC90 11 25 08 10                          DB $11, $25, $08, $10
  51++EC94 0D 45 08 14                          DB $0D, $45, $08, $14
  52++EC98 0D 34 08 18                          DB $0D, $34, $08, $18
  53++EC9C 05 44 1C 20                          DB $05, $44, $1C, $20
  54++ECA0 07 44 1C 24                          DB $07, $44, $1C, $24
  55++ECA4 07 44 20 24                          DB $07, $44, $20, $24
  56++ECA8 05 00 28 2C                          DB $05, $00, $28, $2C
  57++ECAC 05 00 30 34                          DB $05, $00, $30, $34
  58++ECB0              MorayEdgesSize:         equ $ - MorayEdges
  59++ECB0              MorayEdgesCnt:          equ MorayEdgesSize/4
  60++ECB0 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  61++ECB4 9F 0A 31 07                          DB $9F, $0A, $31, $07
  62++ECB8 1F 0A 31 07                          DB $1F, $0A, $31, $07
  63++ECBC F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  64++ECC0 78 00 34 4E                          DB $78, $00, $34, $4E
  65++ECC4 78 3B 1C 65                          DB $78, $3B, $1C, $65
  66++ECC8 DF 48 63 32                          DB $DF, $48, $63, $32
  67++ECCC 5F 00 53 1E                          DB $5F, $00, $53, $1E
  68++ECD0 5F 48 63 32                          DB $5F, $48, $63, $32
  69++ECD4
  70++ECD4              MorayNormalsSize:       equ $ - MorayNormals
  71++ECD4              MorayLen:               equ $ - Moray
  72++ECD4
# file closed: ./Data/ships/Moray.asm
  94+ ECD4                                      include "Data/ships/Ophidian.asm"
# file opened: ./Data/ships/Ophidian.asm
   1++ECD4 02           Ophidian:	            DB $02                     ; Number of cargo canisters released when destroyed
   2++ECD5 88 0E                                DW $0E88                   ; Ship's targetable area LoHi
   3++ECD7 67 ED                                DW OphidianEdges           ; Edge Data
   4++ECD9 78                                   DB OphidianEdgesSize       ; Size of Edge Data
   5++ECDA 00                                   DB $00                     ; Gun Vertex Byte offset
   6++ECDB 3C                                   DB $3C                     ; Explosion Count
   7++ECDC 14                                   DB OphidianVertSize /6     ; Vertex Count /6
   8++ECDD 78                                   DB OphidianVertSize        ; Vertex Count
   9++ECDE 1E                                   DB OphidianEdgesCnt        ; Edges Count
  10++ECDF 32 00                                DW $0032                   ; Bounty LoHi
  11++ECE1 30                                   DB OphidianNormalsSize     ; Face (Normal) Count
  12++ECE2 14                                   DB $14                     ; Range when it turns to a dot
  13++ECE3 40                                   DB $40                     ; Energy Max
  14++ECE4 22                                   DB $22                     ; Speed Max
  15++ECE5 DF ED                                DW OphidianNormals         ; Normals
  16++ECE7 01                                   DB $01                     ; Q scaling
  17++ECE8 1A                                   DB $1A                     ; Laser power and Nbr Missiles
  18++ECE9 EF EC                                DW OphidianVertices        ; Verticles Address
  19++ECEB 00                                   DB ShipTypeNormal          ; Ship Type
  20++ECEC 00                                   DB 0                       ; NewB Tactics
  21++ECED 80                                   DB ShipCanAnger            ; AI Flags
  22++ECEE C0                                   DB $C0                     ; chance of ECM module
  23++ECEF
  24++ECEF 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02 ; 01
  24++ECF3 68 02
  25++ECF5 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01 ; 02
  25++ECF9 67 01
  26++ECFB 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01 ; 03
  26++ECFF 22 01
  27++ED01 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24 ; 04
  27++ED05 8A 24
  28++ED07 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13 ; 05
  28++ED0B 79 13
  29++ED0D 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF ; 06
  29++ED11 FF FF
  30++ED13 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35 ; 07
  30++ED17 9B 35
  31++ED19 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45 ; 08
  31++ED1D AB 45
  32++ED1F 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A ; 09
  32++ED23 BB 4A
  33++ED25 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF ; 10
  33++ED29 FF FF
  34++ED2B 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF ; 11
  34++ED2F FF FF
  35++ED31 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39 ; 12
  35++ED35 BB 39
  36++ED37 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF ; 13
  36++ED3B FF FF
  37++ED3D 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF ; 14
  37++ED41 FF FF
  38++ED43 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A ; 15
  38++ED47 BB 9A
  39++ED49 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF ; 16
  39++ED4D FF FF
  40++ED4F 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB ; 17
  40++ED53 BB BB
  41++ED55 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB ; 18
  41++ED59 BB BB
  42++ED5B 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB ; 19
  42++ED5F BB BB
  43++ED61 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB ; 20
  43++ED65 BB BB
  44++ED67
  45++ED67              OphidianVertSize:       equ $ - OphidianVertices
  46++ED67 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  47++ED6B 1F 01 04 08                          DB $1F, $01, $04, $08
  48++ED6F 1F 02 00 08                          DB $1F, $02, $00, $08
  49++ED73 1F 12 08 14                          DB $1F, $12, $08, $14
  50++ED77 1F 13 10 14                          DB $1F, $13, $10, $14
  51++ED7B 1F 24 0C 14                          DB $1F, $24, $0C, $14
  52++ED7F 1F 35 14 18                          DB $1F, $35, $14, $18
  53++ED83 1F 45 14 1C                          DB $1F, $45, $14, $1C
  54++ED87 1F 28 00 0C                          DB $1F, $28, $00, $0C
  55++ED8B 1F 17 04 10                          DB $1F, $17, $04, $10
  56++ED8F 1F 39 10 2C                          DB $1F, $39, $10, $2C
  57++ED93 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  58++ED97 1F 67 04 3C                          DB $1F, $67, $04, $3C
  59++ED9B 1F 68 00 3C                          DB $1F, $68, $00, $3C
  60++ED9F 1F 79 10 3C                          DB $1F, $79, $10, $3C
  61++EDA3 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  62++EDA7 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  63++EDAB 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  64++EDAF 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  65++EDB3 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  66++EDB7 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  67++EDBB 1F AB 20 38                          DB $1F, $AB, $20, $38
  68++EDBF 10 BB 40 44                          DB $10, $BB, $40, $44
  69++EDC3 10 BB 44 48                          DB $10, $BB, $44, $48
  70++EDC7 10 BB 48 4C                          DB $10, $BB, $48, $4C
  71++EDCB 10 BB 4C 40                          DB $10, $BB, $4C, $40
  72++EDCF 10 39 30 34                          DB $10, $39, $30, $34
  73++EDD3 10 39 2C 30                          DB $10, $39, $2C, $30
  74++EDD7 10 4A 28 24                          DB $10, $4A, $28, $24
  75++EDDB 10 4A 24 20                          DB $10, $4A, $24, $20
  76++EDDF              OphidianEdgesSize:      equ $ - OphidianEdges
  77++EDDF              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  78++EDDF
  79++EDDF 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  80++EDE3 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  81++EDE7 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  82++EDEB 1F 10 22 02                          DB $1F, $10, $22, $02
  83++EDEF 9F 10 22 02                          DB $9F, $10, $22, $02
  84++EDF3 3F 00 25 03                          DB $3F, $00, $25, $03
  85++EDF7 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  86++EDFB 5F 0A 14 02                          DB $5F, $0A, $14, $02
  87++EDFF DF 0A 14 02                          DB $DF, $0A, $14, $02
  88++EE03 7F 12 20 02                          DB $7F, $12, $20, $02
  89++EE07 FF 12 20 02                          DB $FF, $12, $20, $02
  90++EE0B 3F 00 00 25                          DB $3F, $00, $00, $25
  91++EE0F
  92++EE0F              OphidianNormalsSize:    equ $ - OphidianNormals
  93++EE0F              OphidianLen:            equ $ - Ophidian
  94++EE0F
# file closed: ./Data/ships/Ophidian.asm
  95+ EE0F                                      include "Data/ships/Plate.asm"
# file opened: ./Data/ships/Plate.asm
   1++EE0F 80           Plate:	                DB $80                    ; Number of cargo canisters released when destroyed
   2++EE10 64 00                                DW $0064                  ; Ship's targetable area LoHi
   3++EE12 3C EE                                DW PlateEdges             ; Edge Data
   4++EE14 10                                   DB PlateEdgesSize         ; Size of Edge Data
   5++EE15 00                                   DB $00                    ; Gun Vertex Byte offset
   6++EE16 0A                                   DB $0A                    ; Explosion Count
   7++EE17 03                                   DB PlateVertSize /6       ; Vertex Count /6
   8++EE18 12                                   DB PlateVertSize          ; Vertex Count
   9++EE19 04                                   DB PlateEdgesCnt          ; Edges Count
  10++EE1A 00 00                                DW $0000                  ; Bounty LoHi
  11++EE1C 04                                   DB PlateNormalsSize       ; Face (Normal) Count
  12++EE1D 05                                   DB $05                    ; Range when it turns to a dot
  13++EE1E 10                                   DB $10                    ; Energy Max
  14++EE1F 10                                   DB $10                    ; Speed Max
  15++EE20 4C EE                                DW PlateNormals           ; Normals
  16++EE22 03                                   DB $03                    ; Q scaling
  17++EE23 00                                   DB $00                    ; Laser power and Nbr Missiles
  18++EE24 2A EE                                DW PlateVertices          ; Verticles Address
  19++EE26 04                                   DB ShipTypeScoopable      ; Ship Type
  20++EE27 00                                   DB 0                      ; NewB Tactics
  21++EE28 80                                   DB ShipCanAnger           ; AI Flags
  22++EE29 00                                   DB $00                    ; chance of ECM module
  23++EE2A
  24++EE2A
  25++EE2A 0F 16 09 FF  PlateVertices:	        DB $0F, $16, $09, $FF, $FF, $FF
  25++EE2E FF FF
  26++EE30 0F 26 09 BF                          DB $0F, $26, $09, $BF, $FF, $FF
  26++EE34 FF FF
  27++EE36 13 20 0B 14                          DB $13, $20, $0B, $14, $FF, $FF
  27++EE3A FF FF
  28++EE3C
  29++EE3C              PlateVertSize: equ $ - PlateVertices
  30++EE3C
  31++EE3C
  32++EE3C
  33++EE3C 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  34++EE40 10 FF 04 08  	DB $10, $FF, $04, $08
  35++EE44 14 FF 08 0C  	DB $14, $FF, $08, $0C
  36++EE48 10 FF 0C 00  	DB $10, $FF, $0C, $00
  37++EE4C
  38++EE4C              PlateEdgesSize: equ $ - PlateEdges
  39++EE4C
  40++EE4C
  41++EE4C              PlateEdgesCnt: equ PlateEdgesSize/4
  42++EE4C
  43++EE4C
  44++EE4C 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  45++EE50
  46++EE50
  47++EE50              PlateNormalsSize: equ $ - PlateNormals
  48++EE50              PlateLen: equ $ - Plate
  49++EE50
# file closed: ./Data/ships/Plate.asm
  96+ EE50                                      include "Data/ships/Python.asm"
# file opened: ./Data/ships/Python.asm
   1++EE50              ;\ -> &5BA1 \ Python = Type 12                                                   ; Number of cargo canisters released when destroyed
   2++EE50 05           Python:                 DB $05                                                   ; Ship's targetable area LoHi
   3++EE51 00 19                                DW $1900                                                 ; Edge Data
   4++EE53 AD EE                                DW PythonEdges                                           ; Size of Edge Data
   5++EE55 68                                   DB PythonEdgesSize                                       ; Gun Vertex Byte offset
   6++EE56 00                                   DB $00                                                   ; Explosion Count
   7++EE57 2A                                   DB $2A                                                   ; Vertex Count /6
   8++EE58 0B                                   DB PythonVertSize /6                                     ; Vertex Count
   9++EE59 42                                   DB PythonVertSize                                        ; Edges Count
  10++EE5A 1A                                   DB PythonEdgesCnt                                        ; Bounty LoHi
  11++EE5B 00 00                                DW $0000                                                 ; Face (Normal) Count
  12++EE5D 34                                   DB PythonNormalsSize                                     ; Range when it turns to a dot
  13++EE5E 28                                   DB $28                                                   ; Energy Max
  14++EE5F FA                                   DB $FA                                                   ; Speed Max
  15++EE60 14                                   DB $14                                                   ; Normals
  16++EE61 15 EF                                DW PythonNormals                                         ; Q scaling
  17++EE63 00                                   DB $00                                                   ; Laser power and Nbr Missiles
  18++EE64 56                                   DB $50 | ShipMissiles6                                   ; Verticles Address
  19++EE65 6B EE                                DW PythonVertices                                        ; Ship Type
  20++EE67 00                                   DB ShipTypeNormal                                        ; NewB Tactics
  21++EE68 00                                   DB 0                                                     ; AI Flags
  22++EE69 90                                   DB ShipCanAnger | ShipFighterBaySize1 | ShipFighterWorm  ; chance of ECM module
  23++EE6A E0                                   DB $E0
  24++EE6B 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  24++EE6F 10 32
  25++EE71 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  25++EE75 10 54
  26++EE77 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  26++EE7B FF FF
  27++EE7D 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  27++EE81 FF FF
  28++EE83 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  28++EE87 54 98
  29++EE89 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  29++EE8D 89 CC
  30++EE8F 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  30++EE93 B8 CC
  31++EE95 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  31++EE99 A9 CC
  32++EE9B 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  32++EE9F 32 76
  33++EEA1 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  33++EEA5 76 BA
  34++EEA7 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  34++EEAB BA CC
  35++EEAD              PythonVertSize          equ $  - PythonVertices
  36++EEAD 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  36++EEB1 1F 20 00 0C
  37++EEB5 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  37++EEB9 1E 10 00 04
  38++EEBD 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  38++EEC1 1D 51 04 08
  39++EEC5 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  39++EEC9 1D 40 04 0C
  40++EECD 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  40++EED1 1D A7 08 24
  41++EED5 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  41++EED9 1D B6 0C 24
  42++EEDD 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  42++EEE1 05 BB 0C 28
  43++EEE5 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  43++EEE9 05 AA 08 28
  44++EEED 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  44++EEF1 1F B8 0C 18
  45++EEF5 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  45++EEF9 1F C9 14 1C
  46++EEFD 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  46++EF01 1D CB 18 28
  47++EF05 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  47++EF09 1D BA 24 28
  48++EF0D 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  48++EF11 1D 76 20 24
  49++EF15              PythonEdgesSize         equ $  - PythonEdges
  50++EF15              PythonEdgesCnt          equ PythonEdgesSize/4
  51++EF15 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  51++EF19 1E 1B 28 0B
  52++EF1D DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  52++EF21 5E 1B 28 0B
  53++EF25 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  53++EF29 1E 13 26 00
  54++EF2D DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  54++EF31 5E 13 26 00
  55++EF35 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  55++EF39 3E 19 25 0B
  56++EF3D 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  56++EF41 FE 19 25 0B
  57++EF45 3E 00 00 70                          DB $3E, $00, $00, $70
  58++EF49              PythonNormalsSize       equ $  - PythonNormals
  59++EF49              PythonLen               equ $  - Python
  60++EF49
# file closed: ./Data/ships/Python.asm
  97+ EF49                                      include "Data/ships/Python_P.asm"
# file opened: ./Data/ships/Python_P.asm
   1++EF49 02           Python_P:	            DB $02                           ; Number of cargo canisters released when destroyed
   2++EF4A 00 19                                DW $1900                         ; Ship's targetable area LoHi
   3++EF4C A6 EF                                DW Python_PEdges                 ; Edge Data
   4++EF4E 68                                   DB Python_PEdgesSize             ; Size of Edge Data
   5++EF4F 00                                   DB $00                           ; Gun Vertex Byte offset
   6++EF50 2A                                   DB $2A                           ; Explosion Count
   7++EF51 0B                                   DB Python_PVertSize /6           ; Vertex Count /6
   8++EF52 42                                   DB Python_PVertSize              ; Vertex Count
   9++EF53 1A                                   DB Python_PEdgesCnt              ; Edges Count
  10++EF54 C8 00                                DW $00C8                         ; Bounty LoHi
  11++EF56 34                                   DB Python_PNormalsSize           ; Face (Normal) Count
  12++EF57 28                                   DB $28                           ; Range when it turns to a dot
  13++EF58 FA                                   DB $FA                           ; Energy Max
  14++EF59 14                                   DB $14                           ; Speed Max
  15++EF5A 0E F0                                DW Python_PNormals               ; Normals
  16++EF5C 00                                   DB $00                           ; Q scaling
  17++EF5D 66                                   DB $60 | ShipMissiles6           ; Laser power and Nbr Missiles
  18++EF5E 64 EF                                DW Python_PVertices              ; Verticles Address
  19++EF60 00                                   DB ShipTypeNormal                ; Ship Type
  20++EF61 00                                   DB 0                             ; NewB Tactics
  21++EF62 80                                   DB ShipCanAnger                  ; AI Flags
  22++EF63 F0                                   DB $F0                           ; chance of ECM module
  23++EF64
  24++EF64 00 00 E0 1F  Python_PVertices:	    DB $00, $00, $E0, $1F, $10, $32
  24++EF68 10 32
  25++EF6A 00 30 30 1F                          DB $00, $30, $30, $1F, $10, $54
  25++EF6E 10 54
  26++EF70 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  26++EF74 FF FF
  27++EF76 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  27++EF7A FF FF
  28++EF7C 00 30 20 3F                          DB $00, $30, $20, $3F, $54, $98
  28++EF80 54 98
  29++EF82 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  29++EF86 89 CC
  30++EF88 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  30++EF8C B8 CC
  31++EF8E 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  31++EF92 A9 CC
  32++EF94 00 30 30 5F                          DB $00, $30, $30, $5F, $32, $76
  32++EF98 32 76
  33++EF9A 00 30 20 7F                          DB $00, $30, $20, $7F, $76, $BA
  33++EF9E 76 BA
  34++EFA0 00 18 70 7F                          DB $00, $18, $70, $7F, $BA, $CC
  34++EFA4 BA CC
  35++EFA6
  36++EFA6              Python_PVertSize: equ $ - Python_PVertices
  37++EFA6
  38++EFA6
  39++EFA6
  40++EFA6 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  41++EFAA 1F 20 00 0C  	DB $1F, $20, $00, $0C
  42++EFAE 1F 31 00 08  	DB $1F, $31, $00, $08
  43++EFB2 1F 10 00 04  	DB $1F, $10, $00, $04
  44++EFB6 1F 59 08 10  	DB $1F, $59, $08, $10
  45++EFBA 1F 51 04 08  	DB $1F, $51, $04, $08
  46++EFBE 1F 37 08 20  	DB $1F, $37, $08, $20
  47++EFC2 1F 40 04 0C  	DB $1F, $40, $04, $0C
  48++EFC6 1F 62 0C 20  	DB $1F, $62, $0C, $20
  49++EFCA 1F A7 08 24  	DB $1F, $A7, $08, $24
  50++EFCE 1F 84 0C 10  	DB $1F, $84, $0C, $10
  51++EFD2 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  52++EFD6 07 88 0C 14  	DB $07, $88, $0C, $14
  53++EFDA 07 BB 0C 28  	DB $07, $BB, $0C, $28
  54++EFDE 07 99 08 14  	DB $07, $99, $08, $14
  55++EFE2 07 AA 08 28  	DB $07, $AA, $08, $28
  56++EFE6 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  57++EFEA 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  58++EFEE 1F C8 14 18  	DB $1F, $C8, $14, $18
  59++EFF2 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  60++EFF6 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  61++EFFA 1F CB 18 28  	DB $1F, $CB, $18, $28
  62++EFFE 1F 98 10 14  	DB $1F, $98, $10, $14
  63++F002 1F BA 24 28  	DB $1F, $BA, $24, $28
  64++F006 1F 54 04 10  	DB $1F, $54, $04, $10
  65++F00A 1F 76 20 24  	DB $1F, $76, $20, $24
  66++F00E
  67++F00E              Python_PEdgesSize: equ $ - Python_PEdges
  68++F00E
  69++F00E
  70++F00E              Python_PEdgesCnt: equ Python_PEdgesSize/4
  71++F00E
  72++F00E
  73++F00E 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  74++F012 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  75++F016 DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  76++F01A 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  77++F01E 9F 13 26 00  	DB $9F, $13, $26, $00
  78++F022 1F 13 26 00  	DB $1F, $13, $26, $00
  79++F026 DF 13 26 00  	DB $DF, $13, $26, $00
  80++F02A 5F 13 26 00  	DB $5F, $13, $26, $00
  81++F02E BF 19 25 0B  	DB $BF, $19, $25, $0B
  82++F032 3F 19 25 0B  	DB $3F, $19, $25, $0B
  83++F036 7F 19 25 0B  	DB $7F, $19, $25, $0B
  84++F03A FF 19 25 0B  	DB $FF, $19, $25, $0B
  85++F03E 3F 00 00 70  	DB $3F, $00, $00, $70
  86++F042
  87++F042
  88++F042              Python_PNormalsSize: equ $ - Python_PNormals
  89++F042              Python_PLen: equ $ - Python_P
  90++F042
# file closed: ./Data/ships/Python_P.asm
  98+ F042
# file closed: ./Data/ShipModelMetaData2.asm
 795  F042                  DISPLAY "Bank ",BankShipModels2," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels2"
 796  F042              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
 797  F042                  SLOT    ShipModelsAddr
 798  F042                  PAGE    BankShipModels3
 799  F042              	ORG     ShipModelsAddr, BankShipModels3
 800  E000
 801  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
 802  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
 802  E00F 06 00       >                        ld      b,0
 802  E011 4F          >                        ld      c,a                                 ; c= original ship id
 802  E012 CB 3F       >.ShiftLoop:             srl     a
 802  E014 CB 3F       >                        srl     a
 802  E016 CB 3F       >                        srl     a
 802  E018 CB 3F       >                        srl     a                                   ; divide by 16
 802  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 802  E01B 79          >                        ld      a,c
 802  E01C 50          >                        ld      d,b
 802  E01D 1E 10       >                        ld      e,16
 802  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 802  E021 93          >                        sub     e                                   ; a= actual model id now
 802  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 802  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 802  E024 7A          >                        ld      a,d                                 ; a = bank number
 802  E025             >;.. Now b = bank and a = adjusted ship nbr
 802  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
 802  E028 ED 31       >                        add     hl,a
 802  E02A ED 31       >                        add     hl,a
 802  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 802  E02D             >                        ClearCarryFlag
 802  E02D B7          >                        or a
 802  E02E C9          >                        ret
 803  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
 803  E02F 2A 43 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 803  E032 11 49 C3    >                        ld          de,UBnkHullVerticies
 803  E035 06 00       >                        ld          b,0
 803  E037 3A 37 C3    >                        ld			a,(VertexCtX6Addr)
 803  E03A 4F          >                        ld          c,a
 803  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 803  E03C CD 54 7F    >                        call        memcopy_dma
 803  E03F C9          >                        ret
 804  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
 804  E040 2A 31 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 804  E043 11 39 C4    >                        ld          de,UBnkHullEdges
 804  E046 06 00       >                        ld          b,0
 804  E048 3A 33 C3    >                        ld			a,(LineX4Addr)
 804  E04B 4F          >                        ld          c,a
 804  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 804  E04D CD 54 7F    >                        call        memcopy_dma
 804  E050 C9          >                        ret
 805  E051              CopyNormsToUniv3:       McopyNormsToUniverse
 805  E051 2A 3F C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 805  E054 11 01 C5    >                        ld          de,UBnkHullNormals
 805  E057 06 00       >                        ld          b,0
 805  E059 3A 3B C3    >                        ld          a,(FaceCtX4Addr)
 805  E05C 4F          >                        ld          c,a
 805  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 805  E05E CD 54 7F    >                        call        memcopy_dma
 805  E061 C9          >                        ret
 806  E062              ShipBankTable3:         MShipBankTable
 806  E062 3B 00       >                        DW      BankShipModels1
 806  E064 43 00       >                        DW      BankShipModels2
 806  E066 44 00       >                        DW      BankShipModels3
 806  E068 45 00       >                        DW      BankShipModels4
 807  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
 807  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
 807  E06D 36 44       >                        ld          (hl),BankShipModels3
 807  E06F F5          >                        push        af
 807  E070 FD 7D       >                        ld          a,iyl
 807  E072 32 43 C0    >                        ld          (UBnKShipModelId),a
 807  E075 F1          >                        pop         af
 807  E076 32 42 C0    >                        ld          (UBnKShipModelNbr),a
 807  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 807  E07C ED 31       >                        add         hl,a
 807  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 807  E080 4E          >                        ld          c,(hl)
 807  E081 23          >                        inc         hl
 807  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 807  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 807  E086 ED 31       >                        add         hl,a
 807  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 807  E08A 7E          >                        ld          a,(hl)
 807  E08B 23          >                        inc         hl
 807  E08C 66          >                        ld          h,(hl)
 807  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 807  E08E 11 2E C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 807  E091 01 1B 00    >                        ld          bc,ShipDataLength
 807  E094 ED B0       >                        ldir
 807  E096 CD 2F E0    >                        call        CopyVertsToUniv
 807  E099 CD 40 E0    >                        call        CopyEdgesToUniv
 807  E09C CD 51 E0    >                        call        CopyNormsToUniv
 807  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
 807  E0A2 3E 20       >                        ld          a," "
 807  E0A4 06 10       >                        ld          b,16
 807  E0A6 77          >.fillLoop:              ld          (hl),a
 807  E0A7 23          >                        inc         hl
 807  E0A8 10 FC       >                        djnz        .fillLoop
 807  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnKShipModelId)
 807  E0AD CD 04 93    >                        call        ShipIndexToAddress
 807  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
 807  E0B3 06 10       >                        ld          b,16
 807  E0B5 7E          >.CopyLoop:              ld          a,(hl)
 807  E0B6 FE 00       >                        cp          0
 807  E0B8 28 05       >                        jr          z,.CopyDone
 807  E0BA 12          >                        ld          (de),a
 807  E0BB 23          >                        inc         hl
 807  E0BC 13          >                        inc         de
 807  E0BD 10 F6       >                        djnz        .CopyLoop
 807  E0BF C9          >.CopyDone:              ret
 808  E0C0              CopyBodyToUniverse3:    MCopyBodyToUniverse     CopyShipToUniverse3
 808  E0C0 3E 0D       >                        ld          a,13
 808  E0C2 CD 6A E0    >                        call        CopyShipToUniverse3
 808  E0C5 C9          >                        ret
 809  E0C6                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E0C6 66 E1        ShipModelTable3:         DW Rock_Hermit                             ;32  $30
   2+ E0C8 43 E2                                 DW ShuttleType9                            ;33  $31
   3+ E0CA 7C E3                                 DW Shuttle_Mk_2                            ;34  $32
   4+ E0CC A1 E4                                 DW Sidewinder                              ;35  $33
   5+ E0CE 50 E5                                 DW Splinter                                ;36  $34
   6+ E0D0 AB E5                                 DW TestVector                              ;37  $35
   7+ E0D2 10 E6                                 DW Thargoid                                ;38  $36
   8+ E0D4 33 E7                                 DW Thargon                                 ;39  $37
   9+ E0D6 E2 E7                                 DW TransportType10                         ;40  $38
  10+ E0D8 CB E9                                 DW Viper                                   ;41  $39
  11+ E0DA AC EA                                 DW Worm                                    ;42  $3A
  12+ E0DC 63 EB                                 DW Rattler                                 ;43  $3B
  13+ E0DE 00 00                                 DW 0                                       ;44  $3C
  14+ E0E0 00 00                                 DW 0                                       ;45  $3D
  15+ E0E2 00 00                                 DW 0                                       ;46  $3E
  16+ E0E4 00 00                                 DW 0                                       ;47  $3F
  17+ E0E6 81 E1        ShipVertexTable3:        DW Rock_HermitVertices                     ;32  $30
  18+ E0E8 5E E2                                 DW ShuttleType9Vertices                    ;33  $31
  19+ E0EA 97 E3                                 DW Shuttle_Mk_2Vertices                    ;34  $32
  20+ E0EC BC E4                                 DW SidewinderVertices                      ;35  $33
  21+ E0EE 6B E5                                 DW SplinterVertices                        ;36  $34
  22+ E0F0 C6 E5                                 DW TestVectorVertices                      ;37  $35
  23+ E0F2 2B E6                                 DW ThargoidVertices                        ;38  $36
  24+ E0F4 4E E7                                 DW ThargonVertices                         ;39  $37
  25+ E0F6 FD E7                                 DW TransportType10Vertices                 ;40  $38
  26+ E0F8 E6 E9                                 DW ViperVertices                           ;41  $39
  27+ E0FA C7 EA                                 DW WormVertices                            ;42  $3A
  28+ E0FC 7E EB                                 DW RattlerVertices                         ;43  $3B
  29+ E0FE 00 00                                 DW 0                                       ;44  $3C
  30+ E100 00 00                                 DW 0                                       ;45  $3D
  31+ E102 00 00                                 DW 0                                       ;46  $3E
  32+ E104 00 00                                 DW 0                                       ;47  $3F
  33+ E106
  34+ E106 B7 E1        ShipEdgeTable3:          DW Rock_HermitEdges                        ;32  $30
  35+ E108 D0 E2                                 DW ShuttleType9Edges                       ;33  $31
  36+ E10A FD E3                                 DW Shuttle_Mk_2Edges                       ;34  $32
  37+ E10C F8 E4                                 DW SidewinderEdges                         ;35  $33
  38+ E10E 83 E5                                 DW SplinterEdges                           ;36  $34
  39+ E110 F0 E5                                 DW TestVectorEdges                         ;37  $35
  40+ E112 A3 E6                                 DW ThargoidEdges                           ;38  $36
  41+ E114 8A E7                                 DW ThargonEdges                            ;39  $37
  42+ E116 DB E8                                 DW TransportType10Edges                    ;40  $38
  43+ E118 40 EA                                 DW ViperEdges                              ;41  $39
  44+ E11A 03 EB                                 DW WormEdges                               ;42  $3A
  45+ E11C D8 EB                                 DW RattlerEdges                            ;43  $3B
  46+ E11E 00 00                                 DW 0                                       ;44  $3C
  47+ E120 00 00                                 DW 0                                       ;45  $3D
  48+ E122 00 00                                 DW 0                                       ;46  $3E
  49+ E124 00 00                                 DW 0                                       ;47  $3F
  50+ E126
  51+ E126 0B E2        ShipNormalTable3:        DW Rock_HermitNormals                      ;32  $30
  52+ E128 48 E3                                 DW ShuttleType9Normals                     ;33  $31
  53+ E12A 6D E4                                 DW Shuttle_Mk_2Normals                     ;34  $32
  54+ E12C 34 E5                                 DW SidewinderNormals                       ;35  $33
  55+ E12E 9B E5                                 DW SplinterNormals                         ;36  $34
  56+ E130 00 E6                                 DW TestVectorNormals                       ;37  $35
  57+ E132 0B E7                                 DW ThargoidNormals                         ;38  $36
  58+ E134 C6 E7                                 DW ThargonNormals                          ;39  $37
  59+ E136 93 E9                                 DW TransportType10Normals                  ;40  $38
  60+ E138 90 EA                                 DW ViperNormals                            ;41  $39
  61+ E13A 43 EB                                 DW WormNormals                             ;42  $3A
  62+ E13C D8 EB                                 DW RattlerEdges                            ;43  $3B
  63+ E13E 00 00                                 DW 0                                       ;44  $3C
  64+ E140 00 00                                 DW 0                                       ;45  $3D
  65+ E142 00 00                                 DW 0                                       ;46  $3E
  66+ E144 00 00                                 DW 0                                       ;47  $3F
  67+ E146
  68+ E146 DD 00        ShipModelSizeTable3:     DW Rock_HermitLen                          ;32  $30
  69+ E148 39 01                                 DW ShuttleType9Len                         ;33  $31
  70+ E14A 25 01                                 DW Shuttle_Mk_2Len                         ;34  $32
  71+ E14C AF 00                                 DW SidewinderLen                           ;35  $33
  72+ E14E 5B 00                                 DW SplinterLen                             ;36  $34
  73+ E150 65 00                                 DW TestVectorLen                           ;37  $35
  74+ E152 23 01                                 DW ThargoidLen                             ;38  $36
  75+ E154 AF 00                                 DW ThargonLen                              ;39  $37
  76+ E156 E9 01                                 DW TransportType10Len                      ;40  $38
  77+ E158 E1 00                                 DW ViperLen                                ;41  $39
  78+ E15A B7 00                                 DW WormLen                                 ;42  $3A
  79+ E15C 11 01                                 DW RattlerLen                              ;43  $3B
  80+ E15E 00 00                                 DW 0                                       ;44  $3C
  81+ E160 00 00                                 DW 0                                       ;45  $3D
  82+ E162 00 00                                 DW 0                                       ;46  $3E
  83+ E164 00 00                                 DW 0                                       ;47  $3F
  84+ E166
  85+ E166                                      include "Data/ships/Rock_Hermit.asm"
# file opened: ./Data/ships/Rock_Hermit.asm
   1++E166 07           Rock_Hermit:	        DB $07                            ; Number of cargo canisters released when destroyed
   2++E167 00 19                                DW $1900                          ; Ship's targetable area LoHi
   3++E169 B7 E1                                DW Rock_HermitEdges               ; Edge Data
   4++E16B 54                                   DB Rock_HermitEdgesSize           ; Size of Edge Data
   5++E16C 00                                   DB $00                            ; Gun Vertex Byte offset
   6++E16D 32                                   DB $32                            ; Explosion Count
   7++E16E 09                                   DB Rock_HermitVertSize /6         ; Vertex Count /6
   8++E16F 36                                   DB Rock_HermitVertSize            ; Vertex Count
   9++E170 15                                   DB Rock_HermitEdgesCnt            ; Edges Count
  10++E171 00 00                                DW $0000                          ; Bounty LoHi
  11++E173 38                                   DB Rock_HermitNormalsSize         ; Face (Normal) Count
  12++E174 32                                   DB $32                            ; Range when it turns to a dot
  13++E175 B4                                   DB $B4                            ; Energy Max
  14++E176 1E                                   DB $1E                            ; Speed Max
  15++E177 0B E2                                DW Rock_HermitNormals             ; Normals
  16++E179 01                                   DB $01                            ; Q scaling
  17++E17A 02                                   DB $02                            ; Laser power and Nbr Missiles
  18++E17B 81 E1                                DW Rock_HermitVertices            ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                 ; Ship Type
  20++E17E 00                                   DB 0                              ; NewB Tactics
  21++E17F 80                                   DB ShipCanAnger                   ; AI Flags
  22++E180 30                                   DB $30                            ; chance of ECM module
  23++E181
  24++E181
  25++E181 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  25++E185 FF FF
  26++E187 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF
  26++E18B FF FF
  27++E18D 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  27++E191 FF FF
  28++E193 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF
  28++E197 FF FF
  29++E199 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC
  29++E19D 65 DC
  30++E19F 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF
  30++E1A3 FF FF
  31++E1A5 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32
  31++E1A9 10 32
  32++E1AB 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF
  32++E1AF FF FF
  33++E1B1 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA
  33++E1B5 98 BA
  34++E1B7
  35++E1B7
  36++E1B7              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  37++E1B7
  38++E1B7
  39++E1B7
  40++E1B7 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  41++E1BB 1F D6 00 10  	DB $1F, $D6, $00, $10
  42++E1BF 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  43++E1C3 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  44++E1C7 1F A3 04 08  	DB $1F, $A3, $04, $08
  45++E1CB 1F 32 04 18  	DB $1F, $32, $04, $18
  46++E1CF 1F 31 08 18  	DB $1F, $31, $08, $18
  47++E1D3 1F 41 08 14  	DB $1F, $41, $08, $14
  48++E1D7 1F 10 14 18  	DB $1F, $10, $14, $18
  49++E1DB 1F 60 00 14  	DB $1F, $60, $00, $14
  50++E1DF 1F 54 0C 14  	DB $1F, $54, $0C, $14
  51++E1E3 1F 20 00 18  	DB $1F, $20, $00, $18
  52++E1E7 1F 65 10 14  	DB $1F, $65, $10, $14
  53++E1EB 1F A8 04 20  	DB $1F, $A8, $04, $20
  54++E1EF 1F 87 04 1C  	DB $1F, $87, $04, $1C
  55++E1F3 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  56++E1F7 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  57++E1FB 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  58++E1FF 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  59++E203 1F BA 08 20  	DB $1F, $BA, $08, $20
  60++E207 1F 98 1C 20  	DB $1F, $98, $1C, $20
  61++E20B
  62++E20B              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  63++E20B
  64++E20B
  65++E20B              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  66++E20B
  67++E20B
  68++E20B 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  69++E20F 5F 09 42 51  	DB $5F, $09, $42, $51
  70++E213 9F 48 40 1F  	DB $9F, $48, $40, $1F
  71++E217 DF 40 49 2F  	DB $DF, $40, $49, $2F
  72++E21B 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  73++E21F 1F 87 0F 23  	DB $1F, $87, $0F, $23
  74++E223 1F 26 4C 46  	DB $1F, $26, $4C, $46
  75++E227 BF 42 3B 27  	DB $BF, $42, $3B, $27
  76++E22B FF 43 0F 50  	DB $FF, $43, $0F, $50
  77++E22F 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  78++E233 FF 46 50 28  	DB $FF, $46, $50, $28
  79++E237 7F 3A 66 33  	DB $7F, $3A, $66, $33
  80++E23B 3F 51 09 43  	DB $3F, $51, $09, $43
  81++E23F 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  82++E243
  83++E243
  84++E243              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  85++E243              Rock_HermitLen: equ $ - Rock_Hermit
  86++E243
# file closed: ./Data/ships/Rock_Hermit.asm
  86+ E243                                      include "Data/ships/ShuttleType9.asm"
# file opened: ./Data/ships/ShuttleType9.asm
   1++E243 0F           ShuttleType9:	            DB $0F                       ; Number of cargo canisters released when destroyed
   2++E244 C4 09                                    DW $09C4                     ; Ship's targetable area LoHi
   3++E246 D0 E2                                    DW ShuttleType9Edges         ; Edge Data
   4++E248 78                                       DB ShuttleType9EdgesSize     ; Size of Edge Data
   5++E249 00                                       DB $00                       ; Gun Vertex Byte offset
   6++E24A 26                                       DB $26                       ; Explosion Count
   7++E24B 13                                       DB ShuttleType9VertSize /6   ; Vertex Count /6
   8++E24C 72                                       DB ShuttleType9VertSize      ; Vertex Count
   9++E24D 1E                                       DB ShuttleType9EdgesCnt      ; Edges Count
  10++E24E 00 00                                    DW $0000                     ; Bounty LoHi
  11++E250 34                                       DB ShuttleType9NormalsSize   ; Face (Normal) Count
  12++E251 16                                       DB $16                       ; Range when it turns to a dot
  13++E252 20                                       DB $20                       ; Energy Max
  14++E253 08                                       DB $08                       ; Speed Max
  15++E254 48 E3                                    DW ShuttleType9Normals       ; Normals
  16++E256 02                                       DB $02                       ; Q scaling
  17++E257 00                                       DB $00                       ; Laser power and Nbr Missiles
  18++E258 5E E2                                    DW ShuttleType9Vertices      ; Verticles Address
  19++E25A 00           	                        DB ShipTypeNormal            ; Ship Type
  20++E25B 00                                       DB 0                         ; NewB Tactics
  21++E25C 00                                       DB 0                         ; AI Flags
  22++E25D 80                                       DB $80                       ; chance of ECM module
  23++E25E
  24++E25E
  25++E25E 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF ; 01
  25++E262 FF FF
  26++E264 11 00 17 9F                          DB $11, $00, $17, $9F, $FF, $FF ; 02
  26++E268 FF FF
  27++E26A 00 12 17 1F                          DB $00, $12, $17, $1F, $FF, $FF ; 03
  27++E26E FF FF
  28++E270 12 00 17 1F                          DB $12, $00, $17, $1F, $FF, $FF ; 04
  28++E274 FF FF
  29++E276 14 14 1B FF                          DB $14, $14, $1B, $FF, $12, $39 ; 05
  29++E27A 12 39
  30++E27C 14 14 1B BF                          DB $14, $14, $1B, $BF, $34, $59 ; 06
  30++E280 34 59
  31++E282 14 14 1B 3F                          DB $14, $14, $1B, $3F, $56, $79 ; 07
  31++E286 56 79
  32++E288 14 14 1B 7F                          DB $14, $14, $1B, $7F, $17, $89 ; 08
  32++E28C 17 89
  33++E28E 05 00 1B 30                          DB $05, $00, $1B, $30, $99, $99 ; 09
  33++E292 99 99
  34++E294 00 02 1B 70                          DB $00, $02, $1B, $70, $99, $99 ; 10
  34++E298 99 99
  35++E29A 05 00 1B A9                          DB $05, $00, $1B, $A9, $99, $99 ; 11
  35++E29E 99 99
  36++E2A0 00 03 1B 29                          DB $00, $03, $1B, $29, $99, $99 ; 12
  36++E2A4 99 99
  37++E2A6 00 09 23 50                          DB $00, $09, $23, $50, $0A, $BC ; 13
  37++E2AA 0A BC
  38++E2AC 03 01 1F 47                          DB $03, $01, $1F, $47, $FF, $02 ; 14
  38++E2B0 FF 02
  39++E2B2 04 0B 19 08                          DB $04, $0B, $19, $08, $01, $F4 ; 15
  39++E2B6 01 F4
  40++E2B8 0B 04 19 08                          DB $0B, $04, $19, $08, $A1, $3F ; 16
  40++E2BC A1 3F
  41++E2BE 03 01 1F C7                          DB $03, $01, $1F, $C7, $6B, $23 ; 17
  41++E2C2 6B 23
  42++E2C4 03 0B 19 88                          DB $03, $0B, $19, $88, $F8, $C0 ; 18
  42++E2C8 F8 C0
  43++E2CA 0A 04 19 88                          DB $0A, $04, $19, $88, $4F, $18 ; 19
  43++E2CE 4F 18
  44++E2D0
  45++E2D0              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  46++E2D0
  47++E2D0
  48++E2D0
  49++E2D0 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  50++E2D4 1F 4A 04 08  	DB $1F, $4A, $04, $08
  51++E2D8 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  52++E2DC 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  53++E2E0 1F 18 00 1C  	DB $1F, $18, $00, $1C
  54++E2E4 18 12 00 10  	DB $18, $12, $00, $10
  55++E2E8 1F 23 04 10  	DB $1F, $23, $04, $10
  56++E2EC 18 34 04 14  	DB $18, $34, $04, $14
  57++E2F0 1F 45 08 14  	DB $1F, $45, $08, $14
  58++E2F4 0C 56 08 18  	DB $0C, $56, $08, $18
  59++E2F8 1F 67 0C 18  	DB $1F, $67, $0C, $18
  60++E2FC 18 78 0C 1C  	DB $18, $78, $0C, $1C
  61++E300 1F 39 10 14  	DB $1F, $39, $10, $14
  62++E304 1F 59 14 18  	DB $1F, $59, $14, $18
  63++E308 1F 79 18 1C  	DB $1F, $79, $18, $1C
  64++E30C 1F 19 10 1C  	DB $1F, $19, $10, $1C
  65++E310 10 0C 00 30  	DB $10, $0C, $00, $30
  66++E314 10 0A 04 30  	DB $10, $0A, $04, $30
  67++E318 10 AB 08 30  	DB $10, $AB, $08, $30
  68++E31C 10 BC 0C 30  	DB $10, $BC, $0C, $30
  69++E320 10 99 20 24  	DB $10, $99, $20, $24
  70++E324 07 99 24 28  	DB $07, $99, $24, $28
  71++E328 09 99 28 2C  	DB $09, $99, $28, $2C
  72++E32C 07 99 20 2C  	DB $07, $99, $20, $2C
  73++E330 05 BB 34 38  	DB $05, $BB, $34, $38
  74++E334 08 BB 38 3C  	DB $08, $BB, $38, $3C
  75++E338 07 BB 34 3C  	DB $07, $BB, $34, $3C
  76++E33C 05 AA 40 44  	DB $05, $AA, $40, $44
  77++E340 08 AA 44 48  	DB $08, $AA, $44, $48
  78++E344 07 AA 40 48  	DB $07, $AA, $40, $48
  79++E348              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  80++E348              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  81++E348
  82++E348 DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  83++E34C 5F 00 4A 04  	DB $5F, $00, $4A, $04
  84++E350 DF 33 33 17  	DB $DF, $33, $33, $17
  85++E354 9F 4A 00 04  	DB $9F, $4A, $00, $04
  86++E358 9F 33 33 17  	DB $9F, $33, $33, $17
  87++E35C 1F 00 4A 04  	DB $1F, $00, $4A, $04
  88++E360 1F 33 33 17  	DB $1F, $33, $33, $17
  89++E364 1F 4A 00 04  	DB $1F, $4A, $00, $04
  90++E368 5F 33 33 17  	DB $5F, $33, $33, $17
  91++E36C 3F 00 00 6B  	DB $3F, $00, $00, $6B
  92++E370 9F 29 29 5A  	DB $9F, $29, $29, $5A
  93++E374 1F 29 29 5A  	DB $1F, $29, $29, $5A
  94++E378 5F 37 37 28  	DB $5F, $37, $37, $28
  95++E37C
  96++E37C
  97++E37C              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
  98++E37C              ShuttleType9Len: equ $ - ShuttleType9
  99++E37C
# file closed: ./Data/ships/ShuttleType9.asm
  87+ E37C                                      include "Data/ships/Shuttle_Mk_2.asm"
# file opened: ./Data/ships/Shuttle_Mk_2.asm
   1++E37C 0F           Shuttle_Mk_2:	        DB $0F                         ; Number of cargo canisters released when destroyed
   2++E37D C4 09                                DW $09C4                       ; Ship's targetable area LoHi
   3++E37F FD E3                                DW Shuttle_Mk_2Edges           ; Edge Data
   4++E381 70                                   DB Shuttle_Mk_2EdgesSize       ; Size of Edge Data
   5++E382 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E383 26                                   DB $26                         ; Explosion Count
   7++E384 11                                   DB Shuttle_Mk_2VertSize /6     ; Vertex Count /6
   8++E385 66                                   DB Shuttle_Mk_2VertSize        ; Vertex Count
   9++E386 1C                                   DB Shuttle_Mk_2EdgesCnt        ; Edges Count
  10++E387 00 00                                DW $0000                       ; Bounty LoHi
  11++E389 34                                   DB Shuttle_Mk_2NormalsSize     ; Face (Normal) Count
  12++E38A 0A                                   DB $0A                         ; Range when it turns to a dot
  13++E38B 20                                   DB $20                         ; Energy Max
  14++E38C 09                                   DB $09                         ; Speed Max
  15++E38D 6D E4                                DW Shuttle_Mk_2Normals         ; Normals
  16++E38F 02                                   DB $02                         ; Q scaling
  17++E390 00                                   DB $00                         ; Laser power and Nbr Missiles
  18++E391 97 E3                                DW Shuttle_Mk_2Vertices        ; Verticles Address
  19++E393 00                                   DB ShipTypeNormal              ; Ship Type
  20++E394 00                                   DB 0                           ; NewB Tactics
  21++E395 00                                   DB 0                           ; AI Flags
  22++E396 80                                   DB $80                         ; chance of ECM module
  23++E397
  24++E397
  25++E397 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  25++E39B 23 01
  26++E39D 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  26++E3A1 34 00
  27++E3A3 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  27++E3A7 15 00
  28++E3A9 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  28++E3AD 26 11
  29++E3AF 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  29++E3B3 37 22
  30++E3B5 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  30++E3B9 58 04
  31++E3BB 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  31++E3BF 69 15
  32++E3C1 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  32++E3C5 7A 26
  33++E3C7 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  33++E3CB 7B 34
  34++E3CD 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  34++E3D1 BC 48
  35++E3D3 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  35++E3D7 9C 58
  36++E3D9 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  36++E3DD AC 69
  37++E3DF 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  37++E3E3 BC 7A
  38++E3E5 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  38++E3E9 CC CC
  39++E3EB 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  39++E3EF CC CC
  40++E3F1 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  40++E3F5 CC CC
  41++E3F7 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  41++E3FB CC CC
  42++E3FD
  43++E3FD              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  44++E3FD
  45++E3FD
  46++E3FD
  47++E3FD 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  48++E401 1F 12 00 0C  	DB $1F, $12, $00, $0C
  49++E405 1F 23 00 10  	DB $1F, $23, $00, $10
  50++E409 1F 30 00 04  	DB $1F, $30, $00, $04
  51++E40D 1F 04 04 14  	DB $1F, $04, $04, $14
  52++E411 1F 05 08 14  	DB $1F, $05, $08, $14
  53++E415 1F 15 08 18  	DB $1F, $15, $08, $18
  54++E419 1F 16 0C 18  	DB $1F, $16, $0C, $18
  55++E41D 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  56++E421 1F 27 10 1C  	DB $1F, $27, $10, $1C
  57++E425 1F 37 10 20  	DB $1F, $37, $10, $20
  58++E429 1F 34 04 20  	DB $1F, $34, $04, $20
  59++E42D 1F 48 14 24  	DB $1F, $48, $14, $24
  60++E431 1F 58 14 28  	DB $1F, $58, $14, $28
  61++E435 1F 59 18 28  	DB $1F, $59, $18, $28
  62++E439 1F 69 18 2C  	DB $1F, $69, $18, $2C
  63++E43D 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  64++E441 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  65++E445 1F 7B 20 30  	DB $1F, $7B, $20, $30
  66++E449 1F 4B 20 24  	DB $1F, $4B, $20, $24
  67++E44D 1F 8C 24 28  	DB $1F, $8C, $24, $28
  68++E451 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  69++E455 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  70++E459 1F BC 30 24  	DB $1F, $BC, $30, $24
  71++E45D 0A CC 34 38  	DB $0A, $CC, $34, $38
  72++E461 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  73++E465 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  74++E469 0A CC 40 34  	DB $0A, $CC, $40, $34
  75++E46D
  76++E46D              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  77++E46D
  78++E46D
  79++E46D              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  80++E46D
  81++E46D
  82++E46D 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  83++E471 DF 27 27 4E  	DB $DF, $27, $27, $4E
  84++E475 5F 27 27 4E  	DB $5F, $27, $27, $4E
  85++E479 1F 27 27 4E  	DB $1F, $27, $27, $4E
  86++E47D 1F 00 60 00  	DB $1F, $00, $60, $00
  87++E481 9F 60 00 00  	DB $9F, $60, $00, $00
  88++E485 5F 00 60 00  	DB $5F, $00, $60, $00
  89++E489 1F 60 00 00  	DB $1F, $60, $00, $00
  90++E48D BF 42 42 16  	DB $BF, $42, $42, $16
  91++E491 FF 42 42 16  	DB $FF, $42, $42, $16
  92++E495 7F 42 42 16  	DB $7F, $42, $42, $16
  93++E499 3F 42 42 16  	DB $3F, $42, $42, $16
  94++E49D 3F 00 00 60  	DB $3F, $00, $00, $60
  95++E4A1
  96++E4A1
  97++E4A1              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
  98++E4A1              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
  99++E4A1
# file closed: ./Data/ships/Shuttle_Mk_2.asm
  88+ E4A1                                      include "Data/ships/Sidewinder.asm"
# file opened: ./Data/ships/Sidewinder.asm
   1++E4A1 00           Sidewinder:	            DB $00                      ; Number of cargo canisters released when destroyed
   2++E4A2 81 10                                DW $1081                    ; Ship's targetable area LoHi
   3++E4A4 F8 E4                                DW SidewinderEdges          ; Edge Data
   4++E4A6 3C                                   DB SidewinderEdgesSize      ; Size of Edge Data
   5++E4A7 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E4A8 1E                                   DB $1E                      ; Explosion Count
   7++E4A9 0A                                   DB SidewinderVertSize /6    ; Vertex Count /6
   8++E4AA 3C                                   DB SidewinderVertSize       ; Vertex Count
   9++E4AB 0F                                   DB SidewinderEdgesCnt       ; Edges Count
  10++E4AC 32 00                                DW $0032                    ; Bounty LoHi
  11++E4AE 1C                                   DB SidewinderNormalsSize    ; Face (Normal) Count
  12++E4AF 14                                   DB $14                      ; Range when it turns to a dot
  13++E4B0 46                                   DB $46                      ; Energy Max
  14++E4B1 25                                   DB $25                      ; Speed Max
  15++E4B2 34 E5                                DW SidewinderNormals        ; Normals
  16++E4B4 02                                   DB $02                      ; Q scaling
  17++E4B5 11                                   DB $10 | ShipMissiles1      ; Laser power and Nbr Missiles
  18++E4B6 BC E4                                DW SidewinderVertices       ; Verticles Address
  19++E4B8 00                                   DB ShipTypeNormal           ; Ship Type
  20++E4B9 00                                   DB 0                        ; NewB Tactics
  21++E4BA 80                                   DB ShipCanAnger             ; AI Flags
  22++E4BB 30                                   DB $30                      ; chance of ECM module
  23++E4BC
  24++E4BC 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  24++E4C0 10 54
  25++E4C2 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  25++E4C6 20 65
  26++E4C8 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  26++E4CC 32 66
  27++E4CE 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  27++E4D2 31 44
  28++E4D4 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  28++E4D8 10 32
  29++E4DA 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  29++E4DE 43 65
  30++E4E0 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  30++E4E4 33 33
  31++E4E6 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  31++E4EA 33 33
  32++E4EC 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  32++E4F0 33 33
  33++E4F2 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  33++E4F6 33 33
  34++E4F8
  35++E4F8
  36++E4F8              SidewinderVertSize: equ $ - SidewinderVertices
  37++E4F8
  38++E4F8
  39++E4F8
  40++E4F8 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  41++E4FC 1F 62 04 08  	DB $1F, $62, $04, $08
  42++E500 1F 20 04 10  	DB $1F, $20, $04, $10
  43++E504 1F 10 00 10  	DB $1F, $10, $00, $10
  44++E508 1F 41 00 0C  	DB $1F, $41, $00, $0C
  45++E50C 1F 31 0C 10  	DB $1F, $31, $0C, $10
  46++E510 1F 32 08 10  	DB $1F, $32, $08, $10
  47++E514 1F 43 0C 14  	DB $1F, $43, $0C, $14
  48++E518 1F 63 08 14  	DB $1F, $63, $08, $14
  49++E51C 1F 65 04 14  	DB $1F, $65, $04, $14
  50++E520 1F 54 00 14  	DB $1F, $54, $00, $14
  51++E524 0F 33 18 1C  	DB $0F, $33, $18, $1C
  52++E528 0C 33 1C 20  	DB $0C, $33, $1C, $20
  53++E52C 0C 33 18 24  	DB $0C, $33, $18, $24
  54++E530 0C 33 20 24  	DB $0C, $33, $20, $24
  55++E534
  56++E534              SidewinderEdgesSize: equ $ - SidewinderEdges
  57++E534
  58++E534
  59++E534              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  60++E534
  61++E534
  62++E534 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  63++E538 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  64++E53C 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  65++E540 3F 00 00 70  	DB $3F, $00, $00, $70
  66++E544 DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  67++E548 5F 00 20 08  	DB $5F, $00, $20, $08
  68++E54C 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  69++E550
  70++E550
  71++E550              SidewinderNormalsSize: equ $ - SidewinderNormals
  72++E550              SidewinderLen: equ $ - Sidewinder
  73++E550
# file closed: ./Data/ships/Sidewinder.asm
  89+ E550                                      include "Data/ships/Splinter.asm"
# file opened: ./Data/ships/Splinter.asm
   1++E550 B0           Splinter:	            DB $B0                      ; Number of cargo canisters released when destroyed
   2++E551 00 01                                DW $0100                    ; Ship's targetable area LoHi
   3++E553 83 E5                                DW SplinterEdges            ; Edge Data
   4++E555 18                                   DB SplinterEdgesSize        ; Size of Edge Data
   5++E556 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E557 16                                   DB $16                      ; Explosion Count
   7++E558 04                                   DB SplinterVertSize /6      ; Vertex Count /6
   8++E559 18                                   DB SplinterVertSize         ; Vertex Count
   9++E55A 06                                   DB SplinterEdgesCnt         ; Edges Count
  10++E55B 00 00                                DW $0000                    ; Bounty LoHi
  11++E55D 10                                   DB SplinterNormalsSize      ; Face (Normal) Count
  12++E55E 08                                   DB $08                      ; Range when it turns to a dot
  13++E55F 14                                   DB $14                      ; Energy Max
  14++E560 0A                                   DB $0A                      ; Speed Max
  15++E561 9B E5                                DW SplinterNormals          ; Normals
  16++E563 05                                   DB $05                      ; Q scaling
  17++E564 00                                   DB $00                      ; Laser power and Nbr Missiles
  18++E565 6B E5                                DW SplinterVertices         ; Verticles Address
  19++E567 00                                   DB ShipTypeNormal           ; Ship Type
  20++E568 00                                   DB 0                        ; NewB Tactics
  21++E569 00                                   DB 0                        ; AI Flags
  22++E56A 00                                   DB $00                      ; chance of ECM module
  23++E56B
  24++E56B 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  24++E56F 12 33
  25++E571 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  25++E575 02 33
  26++E577 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  26++E57B 01 33
  27++E57D 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  27++E581 01 22
  28++E583              SplinterVertSize:       equ $ - SplinterVertices
  29++E583 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  30++E587 1F 03 04 08                          DB $1F, $03, $04, $08
  31++E58B 1F 01 08 0C                          DB $1F, $01, $08, $0C
  32++E58F 1F 12 0C 00                          DB $1F, $12, $0C, $00
  33++E593 1F 13 00 08                          DB $1F, $13, $00, $08
  34++E597 1F 02 0C 04                          DB $1F, $02, $0C, $04
  35++E59B              SplinterEdgesSize:      equ $ - SplinterEdges
  36++E59B              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  37++E59B 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  38++E59F 1F 03 04 08                          DB $1F, $03, $04, $08
  39++E5A3 1F 01 08 0C                          DB $1F, $01, $08, $0C
  40++E5A7 1F 12 0C 00                          DB $1F, $12, $0C, $00
  41++E5AB              SplinterNormalsSize:    equ $ - SplinterNormals
  42++E5AB              SplinterLen:            equ $ - Splinter
  43++E5AB
# file closed: ./Data/ships/Splinter.asm
  90+ E5AB                                      include "Data/ships/TestVector.asm"
# file opened: ./Data/ships/TestVector.asm
   1++E5AB 03           TestVector:             DB $03                      ; Number of cargo canisters released when destroyed
   2++E5AC 23 41                                DW $4123                    ; Ship's targetable area LoHi
   3++E5AE F0 E5                                DW TestVectorEdges          ; Edge Data
   4++E5B0 10                                   DB TestVectorEdgesSize      ; Size of Edge Data
   5++E5B1 54                                   DB $54                      ; Gun Vertex Byte offset
   6++E5B2 2A                                   DB $2A                      ; Explosion Count
   7++E5B3 07                                   DB TestVectorVertSize /6    ; Vertex Count /6
   8++E5B4 2A                                   DB TestVectorVertSize       ; Vertex Count
   9++E5B5 04                                   DB TestVectorEdgesCnt       ; Edges Count
  10++E5B6 00 00                                DW $0000                    ; Bounty LoHi
  11++E5B8 10                                   DB TestVectorNormalsSize    ; Face (Normal) Count
  12++E5B9 32                                   DB $32                      ; Range when it turns to a dot
  13++E5BA 96                                   DB $96                      ; Energy Max
  14++E5BB 1C                                   DB $1C                      ; Speed Max
  15++E5BC 00 E6                                DW TestVectorNormals        ; Normals
  16++E5BE 04                                   DB $04                      ; Q scaling
  17++E5BF 01                                   DB $01                      ; Laser power and Nbr Missiles
  18++E5C0 C6 E5                                DW TestVectorVertices       ; Verticles Address
  19++E5C2 FE                                   DB ShipTypeDebug            ; Ship Type
  20++E5C3 00                                   DB 0                        ; NewB Tactics
  21++E5C4 00                                   DB 0                        ; AI Flags
  22++E5C5 00                                   DB $00                      ; chance of ECM module
  23++E5C6
  24++E5C6 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  24++E5CA 00 00
  25++E5CC 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  25++E5D0 00 00
  26++E5D2 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  26++E5D6 01 01
  27++E5D8 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  27++E5DC 01 01
  28++E5DE 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  28++E5E2 02 02
  29++E5E4 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  29++E5E8 02 02
  30++E5EA 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  30++E5EE 03 03
  31++E5F0              TestVectorVertSize      equ $  - TestVectorVertices
  32++E5F0 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  33++E5F4 1F 00 08 0C                          DB $1F,$00,$08,$0C
  34++E5F8 1F 00 10 14                          DB $1F,$00,$10,$14
  35++E5FC 1F 00 18 18                          DB $1F,$00,$18,$18
  36++E600              TestVectorEdgesSize     equ $  - TestVectorEdges
  37++E600              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  38++E600              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  39++E600 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  40++E604 1F 10 00 00                          DB $1F,$10,$00,$00
  41++E608 1F 00 00 10                          DB $1F,$00,$00,$10
  42++E60C 1F 00 00 10                          DB $1F,$00,$00,$10
  43++E610              TestVectorNormalsSize   equ $  - TestVectorNormals
  44++E610              TestVectorLen           equ $  - TestVector
  45++E610
# file closed: ./Data/ships/TestVector.asm
  91+ E610                                      include "Data/ships/Thargoid.asm"
# file opened: ./Data/ships/Thargoid.asm
   1++E610 00           Thargoid:	            DB $00                                                      ; Number of cargo canisters released when destroyed
   2++E611 49 26                                DW $2649                                                    ; Ship's targetable area LoHi
   3++E613 A3 E6                                DW ThargoidEdges                                            ; Edge Data
   4++E615 68                                   DB ThargoidEdgesSize                                        ; Size of Edge Data
   5++E616 3C                                   DB $3C                                                      ; Gun Vertex Byte offset
   6++E617 26                                   DB $26                                                      ; Explosion Count
   7++E618 14                                   DB ThargoidVertSize /6                                      ; Vertex Count /6
   8++E619 78                                   DB ThargoidVertSize                                         ; Vertex Count
   9++E61A 1A                                   DB ThargoidEdgesCnt                                         ; Edges Count
  10++E61B F4 01                                DW $01F4                                                    ; Bounty LoHi
  11++E61D 28                                   DB ThargoidNormalsSize                                      ; Face (Normal) Count
  12++E61E 37                                   DB $37                                                      ; Range when it turns to a dot
  13++E61F F0                                   DB $F0                                                      ; Energy Max
  14++E620 27                                   DB $27                                                      ; Speed Max
  15++E621 0B E7                                DW ThargoidNormals                                          ; Normals
  16++E623 02                                   DB $02                                                      ; Q scaling
  17++E624 16                                   DB $16                                                      ; Laser power and Nbr Missiles
  18++E625 2B E6                                DW ThargoidVertices                                         ; Verticles Address
  19++E627 00                                   DB 0                                                        ; Ship Type
  20++E628 00                                   DB 0                                                        ; NewB Tactics
  21++E629 FC                                   DB ShipCanAnger | ShipFighterBaySize  | ShipFighterThargon  ; AI Flags
  22++E62A FF                                   DB $FF                                                      ; chance of ECM module
  23++E62B
  24++E62B 20 30 30 5F  ThargoidVertices:	    DB $20, $30, $30, $5F, $40, $88 ; 01
  24++E62F 40 88
  25++E631 20 44 00 5F                          DB $20, $44, $00, $5F, $10, $44 ; 02
  25++E635 10 44
  26++E637 20 30 30 7F                          DB $20, $30, $30, $7F, $21, $44 ; 03
  26++E63B 21 44
  27++E63D 20 00 44 3F                          DB $20, $00, $44, $3F, $32, $44 ; 04
  27++E641 32 44
  28++E643 20 30 30 3F                          DB $20, $30, $30, $3F, $43, $55 ; 05
  28++E647 43 55
  29++E649 20 44 00 1F                          DB $20, $44, $00, $1F, $54, $66 ; 06
  29++E64D 54 66
  30++E64F 20 30 30 1F                          DB $20, $30, $30, $1F, $64, $77 ; 07
  30++E653 64 77
  31++E655 20 00 44 1F                          DB $20, $00, $44, $1F, $74, $88 ; 08
  31++E659 74 88
  32++E65B 18 74 74 DF                          DB $18, $74, $74, $DF, $80, $99 ; 09
  32++E65F 80 99
  33++E661 18 A4 00 DF                          DB $18, $A4, $00, $DF, $10, $99 ; 10
  33++E665 10 99
  34++E667 18 74 74 FF                          DB $18, $74, $74, $FF, $21, $99 ; 11
  34++E66B 21 99
  35++E66D 18 00 A4 BF                          DB $18, $00, $A4, $BF, $32, $99 ; 12
  35++E671 32 99
  36++E673 18 74 74 BF                          DB $18, $74, $74, $BF, $53, $99 ; 13
  36++E677 53 99
  37++E679 18 A4 00 9F                          DB $18, $A4, $00, $9F, $65, $99 ; 14
  37++E67D 65 99
  38++E67F 18 74 74 9F                          DB $18, $74, $74, $9F, $76, $99 ; 15
  38++E683 76 99
  39++E685 18 00 A4 9F                          DB $18, $00, $A4, $9F, $87, $99 ; 16
  39++E689 87 99
  40++E68B 18 40 50 9E                          DB $18, $40, $50, $9E, $99, $99 ; 17
  40++E68F 99 99
  41++E691 18 40 50 BE                          DB $18, $40, $50, $BE, $99, $99 ; 18
  41++E695 99 99
  42++E697 18 40 50 FE                          DB $18, $40, $50, $FE, $99, $99 ; 19
  42++E69B 99 99
  43++E69D 18 40 50 DE                          DB $18, $40, $50, $DE, $99, $99 ; 20
  43++E6A1 99 99
  44++E6A3
  45++E6A3              ThargoidVertSize: equ $ - ThargoidVertices
  46++E6A3
  47++E6A3
  48++E6A3
  49++E6A3 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C           ;01
  50++E6A7 1F 40 00 04                  DB $1F, $40, $00, $04           ;02
  51++E6AB 1F 41 04 08                  DB $1F, $41, $04, $08           ;03
  52++E6AF 1F 42 08 0C                  DB $1F, $42, $08, $0C           ;04
  53++E6B3 1F 43 0C 10                  DB $1F, $43, $0C, $10           ;05
  54++E6B7 1F 54 10 14                  DB $1F, $54, $10, $14           ;06
  55++E6BB 1F 64 14 18                  DB $1F, $64, $14, $18           ;07
  56++E6BF 1F 74 18 1C                  DB $1F, $74, $18, $1C           ;08
  57++E6C3 1F 80 00 20                  DB $1F, $80, $00, $20           ;09
  58++E6C7 1F 10 04 24                  DB $1F, $10, $04, $24           ;10
  59++E6CB 1F 21 08 28                  DB $1F, $21, $08, $28           ;11
  60++E6CF 1F 32 0C 2C                  DB $1F, $32, $0C, $2C           ;12
  61++E6D3 1F 53 10 30                  DB $1F, $53, $10, $30           ;13
  62++E6D7 1F 65 14 34                  DB $1F, $65, $14, $34           ;14
  63++E6DB 1F 76 18 38                  DB $1F, $76, $18, $38           ;15
  64++E6DF 1F 87 1C 3C                  DB $1F, $87, $1C, $3C           ;16
  65++E6E3 1F 98 20 3C                  DB $1F, $98, $20, $3C           ;17
  66++E6E7 1F 90 20 24                  DB $1F, $90, $20, $24           ;18
  67++E6EB 1F 91 24 28                  DB $1F, $91, $24, $28
  68++E6EF 1F 92 28 2C                  DB $1F, $92, $28, $2C
  69++E6F3 1F 93 2C 30                  DB $1F, $93, $2C, $30
  70++E6F7 1F 95 30 34                  DB $1F, $95, $30, $34
  71++E6FB 1F 96 34 38                  DB $1F, $96, $34, $38
  72++E6FF 1F 97 38 3C                  DB $1F, $97, $38, $3C
  73++E703 1E 99 40 44                  DB $1E, $99, $40, $44
  74++E707 1E 99 48 4C                  DB $1E, $99, $48, $4C
  75++E70B
  76++E70B              ThargoidEdgesSize: equ $ - ThargoidEdges
  77++E70B
  78++E70B              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  79++E70B
  80++E70B 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  81++E70F 7F 67 3C 19  	DB $7F, $67, $3C, $19
  82++E713 7F 67 19 3C  	DB $7F, $67, $19, $3C
  83++E717 3F 67 19 3C  	DB $3F, $67, $19, $3C
  84++E71B 1F 40 00 00  	DB $1F, $40, $00, $00
  85++E71F 3F 67 3C 19  	DB $3F, $67, $3C, $19
  86++E723 1F 67 3C 19  	DB $1F, $67, $3C, $19
  87++E727 1F 67 19 3C  	DB $1F, $67, $19, $3C
  88++E72B 5F 67 19 3C  	DB $5F, $67, $19, $3C
  89++E72F 9F 30 00 00  	DB $9F, $30, $00, $00
  90++E733
  91++E733
  92++E733              ThargoidNormalsSize: equ $ - ThargoidNormals
  93++E733              ThargoidLen: equ $ - Thargoid
  94++E733
# file closed: ./Data/ships/Thargoid.asm
  92+ E733                                      include "Data/ships/Thargon.asm"
# file opened: ./Data/ships/Thargon.asm
   1++E733 F0           Thargon:	            DB $F0                          ; Number of cargo canisters released when destroyed
   2++E734 40 06                                DW $0640                        ; Ship's targetable area LoHi
   3++E736 8A E7                                DW ThargonEdges                 ; Edge Data
   4++E738 3C                                   DB ThargonEdgesSize             ; Size of Edge Data
   5++E739 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E73A 12                                   DB $12                          ; Explosion Count
   7++E73B 0A                                   DB ThargonVertSize /6           ; Vertex Count /6
   8++E73C 3C                                   DB ThargonVertSize              ; Vertex Count
   9++E73D 0F                                   DB ThargonEdgesCnt              ; Edges Count
  10++E73E 32 00                                DW $0032                        ; Bounty LoHi
  11++E740 1C                                   DB ThargonNormalsSize           ; Face (Normal) Count
  12++E741 14                                   DB $14                          ; Range when it turns to a dot
  13++E742 14                                   DB $14                          ; Energy Max
  14++E743 1E                                   DB $1E                          ; Speed Max
  15++E744 C6 E7                                DW ThargonNormals               ; Normals
  16++E746 02                                   DB $02                          ; Q scaling
  17++E747 10                                   DB $10                          ; Laser power and Nbr Missiles
  18++E748 4E E7                                DW ThargonVertices              ; Verticles Address
  19++E74A 00                                   DB 0                            ; Ship Type
  20++E74B 00                                   DB 0                            ; NewB Tactics
  21++E74C 80                                   DB ShipCanAnger                 ; AI Flags
  22++E74D 00                                   DB $00                          ; chance of ECM module
  23++E74E
  24++E74E
  25++E74E 09 00 28 9F  ThargonVertices:	    DB $09, $00, $28, $9F, $01, $55
  25++E752 01 55
  26++E754 09 26 0C DF                          DB $09, $26, $0C, $DF, $01, $22
  26++E758 01 22
  27++E75A 09 18 20 FF                          DB $09, $18, $20, $FF, $02, $33
  27++E75E 02 33
  28++E760 09 18 20 BF                          DB $09, $18, $20, $BF, $03, $44
  28++E764 03 44
  29++E766 09 26 0C 9F                          DB $09, $26, $0C, $9F, $04, $55
  29++E76A 04 55
  30++E76C 09 00 08 3F                          DB $09, $00, $08, $3F, $15, $66
  30++E770 15 66
  31++E772 09 0A 0F 7F                          DB $09, $0A, $0F, $7F, $12, $66
  31++E776 12 66
  32++E778 09 06 1A 7F                          DB $09, $06, $1A, $7F, $23, $66
  32++E77C 23 66
  33++E77E 09 06 1A 3F                          DB $09, $06, $1A, $3F, $34, $66
  33++E782 34 66
  34++E784 09 0A 0F 3F                          DB $09, $0A, $0F, $3F, $45, $66
  34++E788 45 66
  35++E78A
  36++E78A              ThargonVertSize:        equ $ - ThargonVertices
  37++E78A
  38++E78A
  39++E78A 1F 10 00 04  ThargonEdges:	        DB $1F, $10, $00, $04
  40++E78E 1F 20 04 08                          DB $1F, $20, $04, $08
  41++E792 1F 30 08 0C                          DB $1F, $30, $08, $0C
  42++E796 1F 40 0C 10                          DB $1F, $40, $0C, $10
  43++E79A 1F 50 00 10                          DB $1F, $50, $00, $10
  44++E79E 1F 51 00 14                          DB $1F, $51, $00, $14
  45++E7A2 1F 21 04 18                          DB $1F, $21, $04, $18
  46++E7A6 1F 32 08 1C                          DB $1F, $32, $08, $1C
  47++E7AA 1F 43 0C 20                          DB $1F, $43, $0C, $20
  48++E7AE 1F 54 10 24                          DB $1F, $54, $10, $24
  49++E7B2 1F 61 14 18                          DB $1F, $61, $14, $18
  50++E7B6 1F 62 18 1C                          DB $1F, $62, $18, $1C
  51++E7BA 1F 63 1C 20                          DB $1F, $63, $1C, $20
  52++E7BE 1F 64 20 24                          DB $1F, $64, $20, $24
  53++E7C2 1F 65 24 14                          DB $1F, $65, $24, $14
  54++E7C6
  55++E7C6              ThargonEdgesSize:       equ $ - ThargonEdges
  56++E7C6
  57++E7C6
  58++E7C6              ThargonEdgesCnt:        equ ThargonEdgesSize/4
  59++E7C6
  60++E7C6
  61++E7C6 9F 24 00 00  ThargonNormals:	        DB $9F, $24, $00, $00
  62++E7CA 5F 14 05 07                          DB $5F, $14, $05, $07
  63++E7CE 7F 2E 2A 0E                          DB $7F, $2E, $2A, $0E
  64++E7D2 3F 24 00 68                          DB $3F, $24, $00, $68
  65++E7D6 3F 2E 2A 0E                          DB $3F, $2E, $2A, $0E
  66++E7DA 1F 14 05 07                          DB $1F, $14, $05, $07
  67++E7DE 1F 24 00 00                          DB $1F, $24, $00, $00
  68++E7E2
  69++E7E2
  70++E7E2              ThargonNormalsSize:     equ $ - ThargonNormals
  71++E7E2              ThargonLen:             equ $ - Thargon
  72++E7E2
# file closed: ./Data/ships/Thargon.asm
  93+ E7E2                                      include "Data/ships/TransportType10.asm"
# file opened: ./Data/ships/TransportType10.asm
   1++E7E2 00           TransportType10:	    DB $00                             ; Number of cargo canisters released when destroyed
   2++E7E3 C4 09                                DW $09C4                           ; Ship's targetable area LoHi
   3++E7E5 DB E8                                DW TransportType10Edges            ; Edge Data
   4++E7E7 B8                                   DB TransportType10EdgesSize        ; Size of Edge Data
   5++E7E8 30                                   DB $30                             ; Gun Vertex Byte offset
   6++E7E9 1A                                   DB $1A                             ; Explosion Count
   7++E7EA 25                                   DB TransportType10VertSize /6      ; Vertex Count /6
   8++E7EB DE                                   DB TransportType10VertSize         ; Vertex Count
   9++E7EC 2E                                   DB TransportType10EdgesCnt         ; Edges Count
  10++E7ED 00 00                                DW $0000                           ; Bounty LoHi
  11++E7EF 38                                   DB TransportType10NormalsSize      ; Face (Normal) Count
  12++E7F0 10                                   DB $10                             ; Range when it turns to a dot
  13++E7F1 20                                   DB $20                             ; Energy Max
  14++E7F2 0A                                   DB $0A                             ; Speed Max
  15++E7F3 93 E9                                DW TransportType10Normals          ; Normals
  16++E7F5 02                                   DB $02                             ; Q scaling
  17++E7F6 00                                   DB $00                             ; Laser power and Nbr Missiles
  18++E7F7 FD E7                                DW TransportType10Vertices         ; Verticles Address
  19++E7F9 00                                   DB ShipTypeNormal                  ; Ship Type
  20++E7FA 00                                   DB 0                               ; NewB Tactics
  21++E7FB 00                                   DB 0                               ; AI Flags
  22++E7FC FF                                   DB $FF                             ; chance of ECM module
  23++E7FD
  24++E7FD 00 0A 1A 3F  TransportType10Vertices:DB $00, $0A, $1A, $3F, $06, $77     ;01
  24++E801 06 77
  25++E803 19 04 1A BF                          DB $19, $04, $1A, $BF, $01, $77     ;02
  25++E807 01 77
  26++E809 1C 03 1A FF                          DB $1C, $03, $1A, $FF, $01, $22     ;03
  26++E80D 01 22
  27++E80F 19 08 1A FF                          DB $19, $08, $1A, $FF, $02, $33     ;04
  27++E813 02 33
  28++E815 1A 08 1A 7F                          DB $1A, $08, $1A, $7F, $03, $44     ;05
  28++E819 03 44
  29++E81B 1D 03 1A 7F                          DB $1D, $03, $1A, $7F, $04, $55     ;06
  29++E81F 04 55
  30++E821 1A 04 1A 3F                          DB $1A, $04, $1A, $3F, $05, $66     ;07
  30++E825 05 66
  31++E827 00 06 0C 13                          DB $00, $06, $0C, $13, $FF, $FF     ;08
  31++E82B FF FF
  32++E82D 1E 01 0C DF                          DB $1E, $01, $0C, $DF, $17, $89     ;09
  32++E831 17 89
  33++E833 21 08 0C DF                          DB $21, $08, $0C, $DF, $12, $39     ;10
  33++E837 12 39
  34++E839 21 08 0C 5F                          DB $21, $08, $0C, $5F, $34, $5A     ;11
  34++E83D 34 5A
  35++E83F 1E 01 0C 5F                          DB $1E, $01, $0C, $5F, $56, $AB     ;12
  35++E843 56 AB
  36++E845 0B 02 1E DF                          DB $0B, $02, $1E, $DF, $89, $CD     ;13
  36++E849 89 CD
  37++E84B 0D 08 1E DF                          DB $0D, $08, $1E, $DF, $39, $DD     ;14
  37++E84F 39 DD
  38++E851 0E 08 1E 5F                          DB $0E, $08, $1E, $5F, $3A, $DD     ;15
  38++E855 3A DD
  39++E857 0B 02 1E 5F                          DB $0B, $02, $1E, $5F, $AB, $CD     ;16
  39++E85B AB CD
  40++E85D 05 06 02 87                          DB $05, $06, $02, $87, $77, $77     ;17
  40++E861 77 77
  41++E863 12 03 02 87                          DB $12, $03, $02, $87, $77, $77     ;18
  41++E867 77 77
  42++E869 05 07 07 A7                          DB $05, $07, $07, $A7, $77, $77     ;19
  42++E86D 77 77
  43++E86F 12 04 07 A7                          DB $12, $04, $07, $A7, $77, $77     ;20
  43++E873 77 77
  44++E875 0B 06 0E A7                          DB $0B, $06, $0E, $A7, $77, $77     ;21
  44++E879 77 77
  45++E87B 0B 05 07 A7                          DB $0B, $05, $07, $A7, $77, $77     ;22
  45++E87F 77 77
  46++E881 05 07 0E 27                          DB $05, $07, $0E, $27, $66, $66     ;23
  46++E885 66 66
  47++E887 12 04 0E 27                          DB $12, $04, $0E, $27, $66, $66     ;24
  47++E88B 66 66
  48++E88D 0B 05 07 27                          DB $0B, $05, $07, $27, $66, $66     ;25
  48++E891 66 66
  49++E893 05 06 03 27                          DB $05, $06, $03, $27, $66, $66     ;26
  49++E897 66 66
  50++E899 12 03 03 27                          DB $12, $03, $03, $27, $66, $66     ;27
  50++E89D 66 66
  51++E89F 0B 04 08 07                          DB $0B, $04, $08, $07, $66, $66     ;28
  51++E8A3 66 66
  52++E8A5 0B 05 03 27                          DB $0B, $05, $03, $27, $66, $66     ;29
  52++E8A9 66 66
  53++E8AB 10 08 0D E6                          DB $10, $08, $0D, $E6, $33, $33     ;30
  53++E8AF 33 33
  54++E8B1 10 08 10 C6                          DB $10, $08, $10, $C6, $33, $33     ;31
  54++E8B5 33 33
  55++E8B7 11 08 0D 66                          DB $11, $08, $0D, $66, $33, $33     ;32
  55++E8BB 33 33
  56++E8BD 11 08 10 46                          DB $11, $08, $10, $46, $33, $33     ;33
  56++E8C1 33 33
  57++E8C3 0D 03 1A E8                          DB $0D, $03, $1A, $E8, $00, $00     ;34
  57++E8C7 00 00
  58++E8C9 0D 03 1A 68                          DB $0D, $03, $1A, $68, $00, $00     ;35
  58++E8CD 00 00
  59++E8CF 09 03 1A 25                          DB $09, $03, $1A, $25, $00, $00     ;36
  59++E8D3 00 00
  60++E8D5 08 03 1A A5                          DB $08, $03, $1A, $A5, $00, $00     ;37
  60++E8D9 00 00
  61++E8DB
  62++E8DB              TransportType10VertSize: equ $ - TransportType10Vertices
  63++E8DB
  64++E8DB
  65++E8DB
  66++E8DB 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04               ;01
  67++E8DF 1F 01 04 08                          DB $1F, $01, $04, $08               ;02
  68++E8E3 1F 02 08 0C                          DB $1F, $02, $08, $0C               ;03
  69++E8E7 1F 03 0C 10                          DB $1F, $03, $0C, $10               ;04
  70++E8EB 1F 04 10 14                          DB $1F, $04, $10, $14               ;05
  71++E8EF 1F 05 14 18                          DB $1F, $05, $14, $18               ;06
  72++E8F3 1F 06 00 18                          DB $1F, $06, $00, $18               ;07
  73++E8F7 10 67 00 1C                          DB $10, $67, $00, $1C               ;08
  74++E8FB 1F 17 04 20                          DB $1F, $17, $04, $20               ;09
  75++E8FF 0B 12 08 24                          DB $0B, $12, $08, $24               ;10
  76++E903 1F 23 0C 24                          DB $1F, $23, $0C, $24               ;11
  77++E907 1F 34 10 28                          DB $1F, $34, $10, $28               ;12
  78++E90B 0B 45 14 28                          DB $0B, $45, $14, $28               ;13
  79++E90F 1F 56 18 2C                          DB $1F, $56, $18, $2C               ;14
  80++E913 11 78 1C 20                          DB $11, $78, $1C, $20               ;15
  81++E917 11 19 20 24                          DB $11, $19, $20, $24               ;16
  82++E91B 11 5A 28 2C                          DB $11, $5A, $28, $2C               ;17
  83++E91F 11 6B 1C 2C                          DB $11, $6B, $1C, $2C               ;18
  84++E923 13 BC 1C 3C                          DB $13, $BC, $1C, $3C               ;19
  85++E927 13 8C 1C 30                          DB $13, $8C, $1C, $30               ;20
  86++E92B 10 89 20 30                          DB $10, $89, $20, $30               ;21
  87++E92F 1F 39 24 34                          DB $1F, $39, $24, $34               ;22
  88++E933 1F 3A 28 38                          DB $1F, $3A, $28, $38               ;23
  89++E937 10 AB 2C 3C                          DB $10, $AB, $2C, $3C               ;24
  90++E93B 1F 9D 30 34                          DB $1F, $9D, $30, $34               ;25
  91++E93F 1F 3D 34 38                          DB $1F, $3D, $34, $38               ;26
  92++E943 1F AD 38 3C                          DB $1F, $AD, $38, $3C               ;27
  93++E947 1F CD 30 3C                          DB $1F, $CD, $30, $3C               ;28
  94++E94B 07 77 40 44                          DB $07, $77, $40, $44               ;29
  95++E94F 07 77 48 4C                          DB $07, $77, $48, $4C               ;30
  96++E953 07 77 4C 50                          DB $07, $77, $4C, $50               ;31
  97++E957 07 77 48 50                          DB $07, $77, $48, $50               ;32
  98++E95B 07 77 50 54                          DB $07, $77, $50, $54               ;33
  99++E95F 07 66 58 5C                          DB $07, $66, $58, $5C               ;34
 100++E963 07 66 5C 60                          DB $07, $66, $5C, $60               ;35
 101++E967 07 66 60 58                          DB $07, $66, $60, $58               ;36
 102++E96B 07 66 64 68                          DB $07, $66, $64, $68               ;37
 103++E96F 07 66 68 6C                          DB $07, $66, $68, $6C               ;38
 104++E973 07 66 64 6C                          DB $07, $66, $64, $6C               ;39
 105++E977 07 66 6C 70                          DB $07, $66, $6C, $70               ;40
 106++E97B 06 33 74 78                          DB $06, $33, $74, $78               ;41
 107++E97F 06 33 7C 80                          DB $06, $33, $7C, $80               ;42
 108++E983 08 00 84 88                          DB $08, $00, $84, $88               ;43
 109++E987 05 00 88 8C                          DB $05, $00, $88, $8C               ;44
 110++E98B 05 00 8C 90                          DB $05, $00, $8C, $90               ;45
 111++E98F 05 00 90 84                          DB $05, $00, $90, $84               ;46
 112++E993
 113++E993              TransportType10EdgesSize: equ $ - TransportType10Edges
 114++E993
 115++E993
 116++E993              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 117++E993
 118++E993
 119++E993 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67               ;01
 120++E997 BF 6F 30 07                          DB $BF, $6F, $30, $07               ;02
 121++E99B FF 69 3F 15                          DB $FF, $69, $3F, $15               ;03
 122++E99F 5F 00 22 00                          DB $5F, $00, $22, $00               ;04
 123++E9A3 7F 69 3F 15                          DB $7F, $69, $3F, $15               ;05
 124++E9A7 3F 6F 30 07                          DB $3F, $6F, $30, $07               ;06
 125++E9AB 1F 08 20 03                          DB $1F, $08, $20, $03               ;07
 126++E9AF 9F 08 20 03                          DB $9F, $08, $20, $03               ;08
 127++E9B3 93 08 22 0B                          DB $93, $08, $22, $0B               ;09
 128++E9B7 9F 4B 20 4F                          DB $9F, $4B, $20, $4F               ;10
 129++E9BB 1F 4B 20 4F                          DB $1F, $4B, $20, $4F               ;11
 130++E9BF 13 08 22 0B                          DB $13, $08, $22, $0B               ;12
 131++E9C3 1F 00 26 11                          DB $1F, $00, $26, $11               ;13
 132++E9C7 1F 00 00 79                          DB $1F, $00, $00, $79               ;14
 133++E9CB
 134++E9CB
 135++E9CB              TransportType10NormalsSize: equ $ - TransportType10Normals
 136++E9CB              TransportType10Len: equ $ - TransportType10
 137++E9CB
# file closed: ./Data/ships/TransportType10.asm
  94+ E9CB                                      include "Data/ships/Viper.asm"
# file opened: ./Data/ships/Viper.asm
   1++E9CB 00           Viper:                  DB $00                         ; Number of cargo canisters released when destroyed
   2++E9CC F9 15                                DW $15F9                       ; Ship's targetable area LoHi
   3++E9CE 40 EA                                DW ViperEdges                  ; Edge Data
   4++E9D0 50                                   DB ViperEdgesSize              ; Size of Edge Data
   5++E9D1 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E9D2 2A                                   DB $2A                         ; Explosion Count
   7++E9D3 0F                                   DB ViperVertSize /6            ; Vertex Count /6
   8++E9D4 5A                                   DB ViperVertSize               ; Vertex Count
   9++E9D5 14                                   DB ViperEdgesCnt               ; Edges Count
  10++E9D6 00 00                                DW $0000                       ; Bounty LoHi
  11++E9D8 1C                                   DB ViperNormalsSize            ; Face (Normal) Count
  12++E9D9 17                                   DB $17                         ; Range when it turns to a dot
  13++E9DA 64                                   DB $64                         ; Energy Max
  14++E9DB 20                                   DB $20                         ; Speed Max
  15++E9DC 90 EA                                DW ViperNormals                ; Normals
  16++E9DE 01                                   DB $01                         ; Q scaling
  17++E9DF 11                                   DB $11                         ; Laser power and Nbr Missiles
  18++E9E0 E6 E9                                DW ViperVertices               ; Verticles Address
  19++E9E2 00                                   DB ShipTypeNormal              ; Ship Type
  20++E9E3 00                                   DB 0                           ; NewB Tactics
  21++E9E4 80                                   DB ShipCanAnger                ; AI Flags
  22++E9E5 FF                                   DB $FF                         ; chance of ECM module
  23++E9E6
  24++E9E6 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  24++E9EA 21 43
  25++E9EC 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  25++E9F0 10 22
  26++E9F2 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  26++E9F6 43 55
  27++E9F8 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  27++E9FC 42 66
  28++E9FE 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  28++EA02 31 66
  29++EA04 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  29++EA08 54 66
  30++EA0A 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  30++EA0E 35 66
  31++EA10 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  31++EA14 20 66
  32++EA16 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  32++EA1A 10 66
  33++EA1C 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  33++EA20 66 66
  34++EA22 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  34++EA26 66 66
  35++EA28 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  35++EA2C 66 66
  36++EA2E 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  36++EA32 66 66
  37++EA34 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  37++EA38 66 66
  38++EA3A 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  38++EA3E 66 66
  39++EA40              ViperVertSize           equ $  - ViperVertices
  40++EA40 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  40++EA44 1E 21 00 04
  41++EA48 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  41++EA4C 1F 31 00 10
  42++EA50 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  42++EA54 1E 10 04 20
  43++EA58 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  43++EA5C 1E 53 08 18
  44++EA60 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  44++EA64 1E 65 14 18
  45++EA68 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  45++EA6C 1E 63 10 18
  46++EA70 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  46++EA74 1E 46 0C 14
  47++EA78 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  47++EA7C 12 66 24 34
  48++EA80 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  48++EA84 12 66 28 38
  49++EA88 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  49++EA8C 10 66 30 34
  50++EA90              ViperEdgesSize          equ $  - ViperEdges
  51++EA90              ViperEdgesCnt           equ ViperEdgesSize/4
  52++EA90 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  52++EA94 9F 16 21 0B
  53++EA98 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  53++EA9C DF 16 21 0B
  54++EAA0 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  54++EAA4 5F 00 20 00
  55++EAA8 3F 00 00 30                          DB $3F, $00, $00, $30
  56++EAAC              ViperNormalsSize        equ $  - ViperNormals
  57++EAAC              ViperLen                equ $  - Viper
  58++EAAC
# file closed: ./Data/ships/Viper.asm
  95+ EAAC                                      include "Data/ships/Worm.asm"
# file opened: ./Data/ships/Worm.asm
   1++EAAC 00           Worm:	                DB $00                      ; Number of cargo canisters released when destroyed
   2++EAAD 49 26                                DW $2649                    ; Ship's targetable area LoHi
   3++EAAF 03 EB                                DW WormEdges                ; Edge Data
   4++EAB1 40                                   DB WormEdgesSize            ; Size of Edge Data
   5++EAB2 00                                   DB $00                      ; Gun Vertex Byte offset
   6++EAB3 12                                   DB $12                      ; Explosion Count
   7++EAB4 0A                                   DB WormVertSize /6          ; Vertex Count /6
   8++EAB5 3C                                   DB WormVertSize             ; Vertex Count
   9++EAB6 10                                   DB WormEdgesCnt             ; Edges Count
  10++EAB7 00 00                                DW $0000                    ; Bounty LoHi
  11++EAB9 20                                   DB WormNormalsSize          ; Face (Normal) Count
  12++EABA 13                                   DB $13                      ; Range when it turns to a dot
  13++EABB 1E                                   DB $1E                      ; Energy Max
  14++EABC 17                                   DB $17                      ; Speed Max
  15++EABD 43 EB                                DW WormNormals              ; Normals
  16++EABF 03                                   DB $03                      ; Q scaling
  17++EAC0 30                                   DB $30                      ; Laser power and Nbr Missiles
  18++EAC1 C7 EA                                DW WormVertices             ; Verticles Address
  19++EAC3 00                                   DB ShipTypeNormal           ; Ship Type
  20++EAC4 00                                   DB 0                        ; NewB Tactics
  21++EAC5 80                                   DB ShipCanAnger             ; AI Flags
  22++EAC6 B0                                   DB $B0                      ; chance of ECM module
  23++EAC7 0A 0A 23 5F  WormVertices:	        DB $0A, $0A, $23, $5F, $02, $77
  23++EACB 02 77
  24++EACD 0A 0A 23 DF                          DB $0A, $0A, $23, $DF, $03, $77
  24++EAD1 03 77
  25++EAD3 05 06 0F 1F                          DB $05, $06, $0F, $1F, $01, $24
  25++EAD7 01 24
  26++EAD9 05 06 0F 9F                          DB $05, $06, $0F, $9F, $01, $35
  26++EADD 01 35
  27++EADF 0F 0A 19 5F                          DB $0F, $0A, $19, $5F, $24, $77
  27++EAE3 24 77
  28++EAE5 0F 0A 19 DF                          DB $0F, $0A, $19, $DF, $35, $77
  28++EAE9 35 77
  29++EAEB 1A 0A 19 7F                          DB $1A, $0A, $19, $7F, $46, $77
  29++EAEF 46 77
  30++EAF1 1A 0A 19 FF                          DB $1A, $0A, $19, $FF, $56, $77
  30++EAF5 56 77
  31++EAF7 08 0E 19 3F                          DB $08, $0E, $19, $3F, $14, $66
  31++EAFB 14 66
  32++EAFD 08 0E 19 BF                          DB $08, $0E, $19, $BF, $15, $66
  32++EB01 15 66
  33++EB03
  34++EB03              WormVertSize: equ $ - WormVertices
  35++EB03
  36++EB03
  37++EB03 1F 07 00 04  WormEdges:	            DB $1F, $07, $00, $04
  38++EB07 1F 37 04 14                          DB $1F, $37, $04, $14
  39++EB0B 1F 57 14 1C                          DB $1F, $57, $14, $1C
  40++EB0F 1F 67 1C 18                          DB $1F, $67, $1C, $18
  41++EB13 1F 47 18 10                          DB $1F, $47, $18, $10
  42++EB17 1F 27 10 00                          DB $1F, $27, $10, $00
  43++EB1B 1F 02 00 08                          DB $1F, $02, $00, $08
  44++EB1F 1F 03 04 0C                          DB $1F, $03, $04, $0C
  45++EB23 1F 24 10 08                          DB $1F, $24, $10, $08
  46++EB27 1F 35 14 0C                          DB $1F, $35, $14, $0C
  47++EB2B 1F 14 08 20                          DB $1F, $14, $08, $20
  48++EB2F 1F 46 20 18                          DB $1F, $46, $20, $18
  49++EB33 1F 15 0C 24                          DB $1F, $15, $0C, $24
  50++EB37 1F 56 24 1C                          DB $1F, $56, $24, $1C
  51++EB3B 1F 01 08 0C                          DB $1F, $01, $08, $0C
  52++EB3F 1F 16 20 24                          DB $1F, $16, $20, $24
  53++EB43
  54++EB43              WormEdgesSize: equ $ - WormEdges
  55++EB43
  56++EB43
  57++EB43              WormEdgesCnt: equ WormEdgesSize/4
  58++EB43
  59++EB43
  60++EB43 1F 00 58 46  WormNormals:	        DB $1F, $00, $58, $46
  61++EB47 1F 00 45 0E                          DB $1F, $00, $45, $0E
  62++EB4B 1F 46 42 23                          DB $1F, $46, $42, $23
  63++EB4F 9F 46 42 23                          DB $9F, $46, $42, $23
  64++EB53 1F 40 31 0E                          DB $1F, $40, $31, $0E
  65++EB57 9F 40 31 0E                          DB $9F, $40, $31, $0E
  66++EB5B 3F 00 00 C8                          DB $3F, $00, $00, $C8
  67++EB5F 5F 00 50 00                          DB $5F, $00, $50, $00
  68++EB63
  69++EB63
  70++EB63              WormNormalsSize: equ $ - WormNormals
  71++EB63              WormLen: equ $ - Worm
  72++EB63
# file closed: ./Data/ships/Worm.asm
  96+ EB63                                      include "Data/ships/Rattler.asm"
# file opened: ./Data/ships/Rattler.asm
   1++EB63 02           Rattler:	            DB $02                       ; Number of cargo canisters released when destroyed
   2++EB64 70 17                                DW $1770                     ; Ship's targetable area LoHi
   3++EB66 D8 EB                                DW RattlerEdges              ; Edge Data
   4++EB68 68                                   DB RattlerEdgesSize          ; Size of Edge Data
   5++EB69 00                                   DB $00                       ; Gun Vertex Byte offset
   6++EB6A 2A                                   DB $2A                       ; Explosion Count
   7++EB6B 0F                                   DB RattlerVertSize /6        ; Vertex Count /6
   8++EB6C 5A                                   DB RattlerVertSize           ; Vertex Count
   9++EB6D 1A                                   DB RattlerEdgesCnt           ; Edges Count
  10++EB6E 96 00                                DW $0096                     ; Bounty LoHi
  11++EB70 34                                   DB RattlerNormalsSize        ; Face (Normal) Count
  12++EB71 0A                                   DB $0A                       ; Range when it turns to a dot
  13++EB72 71                                   DB $71                       ; Energy Max
  14++EB73 1F                                   DB $1F                       ; Speed Max
  15++EB74 40 EC                                DW RattlerNormals            ; Normals
  16++EB76 01                                   DB $01                       ; Q scaling
  17++EB77 22                                   DB $20 | ShipMissiles2       ; Laser power and Nbr Missiles
  18++EB78 7E EB                                DW RattlerVertices           ; Verticles Address
  19++EB7A 00                                   DB ShipTypeNormal            ; Ship Type
  20++EB7B 00                                   DB 0                         ; NewB Tactics
  21++EB7C 80                                   DB ShipCanAnger              ; AI Flags
  22++EB7D 90                                   DB $90                       ; chance of ECM module
  23++EB7E
  24++EB7E
  25++EB7E 00 00 3C 1F  RattlerVertices:	    DB $00, $00, $3C, $1F, $89, $23
  25++EB82 89 23
  26++EB84 28 00 28 1F                          DB $28, $00, $28, $1F, $9A, $34
  26++EB88 9A 34
  27++EB8A 28 00 28 9F                          DB $28, $00, $28, $9F, $78, $12
  27++EB8E 78 12
  28++EB90 3C 00 00 1F                          DB $3C, $00, $00, $1F, $AB, $45
  28++EB94 AB 45
  29++EB96 3C 00 00 9F                          DB $3C, $00, $00, $9F, $67, $01
  29++EB9A 67 01
  30++EB9C 46 00 28 3F                          DB $46, $00, $28, $3F, $CC, $5B
  30++EBA0 CC 5B
  31++EBA2 46 00 28 BF                          DB $46, $00, $28, $BF, $CC, $06
  31++EBA6 CC 06
  32++EBA8 00 14 28 3F                          DB $00, $14, $28, $3F, $FF, $FF
  32++EBAC FF FF
  33++EBAE 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  33++EBB2 FF FF
  34++EBB4 0A 06 28 AA                          DB $0A, $06, $28, $AA, $CC, $CC
  34++EBB8 CC CC
  35++EBBA 0A 06 28 EA                          DB $0A, $06, $28, $EA, $CC, $CC
  35++EBBE CC CC
  36++EBC0 14 00 28 AA                          DB $14, $00, $28, $AA, $CC, $CC
  36++EBC4 CC CC
  37++EBC6 0A 06 28 2A                          DB $0A, $06, $28, $2A, $CC, $CC
  37++EBCA CC CC
  38++EBCC 0A 06 28 6A                          DB $0A, $06, $28, $6A, $CC, $CC
  38++EBD0 CC CC
  39++EBD2 14 00 28 2A                          DB $14, $00, $28, $2A, $CC, $CC
  39++EBD6 CC CC
  40++EBD8
  41++EBD8              RattlerVertSize: equ $ - RattlerVertices
  42++EBD8
  43++EBD8
  44++EBD8 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  45++EBDC 1F 17 08 10  	DB $1F, $17, $08, $10
  46++EBE0 1F 28 00 08  	DB $1F, $28, $00, $08
  47++EBE4 1F 39 00 04  	DB $1F, $39, $00, $04
  48++EBE8 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  49++EBEC 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  50++EBF0 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  51++EBF4 1F 6C 18 20  	DB $1F, $6C, $18, $20
  52++EBF8 1F 01 10 1C  	DB $1F, $01, $10, $1C
  53++EBFC 1F 67 10 20  	DB $1F, $67, $10, $20
  54++EC00 1F 12 08 1C  	DB $1F, $12, $08, $1C
  55++EC04 1F 78 08 20  	DB $1F, $78, $08, $20
  56++EC08 1F 23 00 1C  	DB $1F, $23, $00, $1C
  57++EC0C 1F 89 00 20  	DB $1F, $89, $00, $20
  58++EC10 1F 34 04 1C  	DB $1F, $34, $04, $1C
  59++EC14 1F 9A 04 20  	DB $1F, $9A, $04, $20
  60++EC18 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  61++EC1C 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  62++EC20 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  63++EC24 1F BC 14 20  	DB $1F, $BC, $14, $20
  64++EC28 0A CC 24 28  	DB $0A, $CC, $24, $28
  65++EC2C 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  66++EC30 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  67++EC34 0A CC 30 34  	DB $0A, $CC, $30, $34
  68++EC38 0A CC 34 38  	DB $0A, $CC, $34, $38
  69++EC3C 0A CC 38 30  	DB $0A, $CC, $38, $30
  70++EC40
  71++EC40              RattlerEdgesSize: equ $ - RattlerEdges
  72++EC40
  73++EC40
  74++EC40              RattlerEdgesCnt: equ RattlerEdgesSize/4
  75++EC40
  76++EC40
  77++EC40 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  78++EC44 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  79++EC48 9F 09 5D 12  	DB $9F, $09, $5D, $12
  80++EC4C 1F 09 5D 12  	DB $1F, $09, $5D, $12
  81++EC50 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  82++EC54 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  83++EC58 DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  84++EC5C DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  85++EC60 DF 09 5D 12  	DB $DF, $09, $5D, $12
  86++EC64 5F 09 5D 12  	DB $5F, $09, $5D, $12
  87++EC68 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  88++EC6C 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  89++EC70 3F 00 00 60  	DB $3F, $00, $00, $60
  90++EC74
  91++EC74              RattlerNormalsSize: equ $ - RattlerNormals
  92++EC74              RattlerLen: equ $ - Rattler
  93++EC74
# file closed: ./Data/ships/Rattler.asm
  97+ EC74
# file closed: ./Data/ShipModelMetaData3.asm
 810  EC74              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
 811  EC74              ;;Privisioned for more models     SLOT    ShipModelsAddr
 812  EC74              ;;Privisioned for more models     PAGE    BankShipModels4
 813  EC74              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
 814  EC74                  DISPLAY "Bank ",BankShipModels3," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels3"
 815  EC74              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
 816  EC74                  SLOT    SpritemembankAddr
 817  EC74                  PAGE    BankSPRITE
 818  EC74              	ORG     SpritemembankAddr, BankSPRITE
 819  E000                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0                            ; 00
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1     ; 01
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2    ; 02
   5+ E000                                                                                   ;
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1    ; 03
   7+ E000              ;galactic_hyper_sprite1				equ galactic_hyper_sprite+1      ;
   8+ E000              ;galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1     ;
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite+1      ; 04
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1        ; 05
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1       ; 06
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1       ; 07
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1         ; 08
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2        ; 09
  17+ E000
  18+ E000              reticlule_sprite1                   equ	local_hyper_sprite2+1        ; 10
  19+ E000              reticlule_sprite2                   equ	reticlule_sprite1+1          ; 11
  20+ E000              reticlule_sprite3                   equ	reticlule_sprite2+1          ; 12
  21+ E000              reticlule_sprite4                   equ reticlule_sprite3+1          ; 13
  22+ E000
  23+ E000              laser_sprite1                       equ	reticlule_sprite4+1          ; 14
  24+ E000              laser_sprite2                       equ	laser_sprite1    +1          ; 15
  25+ E000              laser_sprite3                       equ	laser_sprite2    +1          ; 16
  26+ E000              laser_sprite4                       equ laser_sprite3    +1          ; 17
  27+ E000              laser_sprite5                       equ	laser_sprite4    +1          ; 18
  28+ E000              laser_sprite6                       equ	laser_sprite5    +1          ; 19
  29+ E000              laser_sprite7                       equ	laser_sprite6    +1          ; 20
  30+ E000              laser_sprite8                       equ laser_sprite7    +1          ; 21
  31+ E000              laser_sprite9                       equ	laser_sprite8    +1          ; 22
  32+ E000              laser_sprite10                      equ	laser_sprite9    +1          ; 23
  33+ E000              laser_sprite11                      equ	laser_sprite10   +1          ; 24
  34+ E000              laser_sprite12                      equ laser_sprite11   +1          ; 25
  35+ E000              laser_sprite13                      equ	laser_sprite12   +1          ; 26
  36+ E000              laser_sprite14                      equ	laser_sprite13   +1          ; 27
  37+ E000              laser_sprite15                      equ	laser_sprite14   +1          ; 28
  38+ E000              laser_sprite16                      equ laser_sprite15   +1          ; 29
  39+ E000              compass_sun                         equ laser_sprite16   +1          ; 30
  40+ E000              compass_station                     equ compass_sun      +1          ; 31
  41+ E000              targetting_sprite1                  equ compass_station  +1          ; 32
  42+ E000              targetting_sprite2                  equ targetting_sprite1   +1      ; 33
  43+ E000              ECM_sprite                          equ targetting_sprite2   +1      ; 34
  44+ E000              missile_sprite1                     equ ECM_sprite       +1          ; 35
  45+ E000              missile_sprite2                     equ missile_sprite1  +1          ; 36
  46+ E000              missile_sprite3                     equ missile_sprite2  +1          ; 37
  47+ E000              missile_sprite4                     equ missile_sprite3  +1          ; 38
  48+ E000
  49+ E000              glactic_pattern_1					equ 0
  50+ E000              glactic_hyper_pattern_1             equ 2
  51+ E000              local_present_cursor                equ 4
  52+ E000              local_hyper_pattern                 equ 7
  53+ E000              reticule_pattern_1                  equ 10
  54+ E000              reticule_pattern_2                  equ 11
  55+ E000              laser_pattern_1                     equ 12
  56+ E000              laser_pattern_2                     equ 13
  57+ E000              laser_pattern_3                     equ 14
  58+ E000              laser_pattern_4                     equ 15
  59+ E000              laser_pattern_5                     equ 16
  60+ E000              targetting_pattern                  equ 23
  61+ E000              lock_pattern                        equ 24
  62+ E000              ecm_pattern                         equ 25
  63+ E000              missile_ready_pattern               equ 26
  64+ E000              missile_armed_pattern               equ 27
  65+ E000              missile_locked_pattern              equ 28
  66+ E000
  67+ E000              compass_sun_infront                 equ 17
  68+ E000              compass_sun_behind                  equ 18
  69+ E000              compass_station_infront             equ 19
  70+ E000              compass_station_behind              equ 20
  71+ E000              spritecursoroffset					equ 17
  72+ E000              spriteborderoffset                  equ 32
  73+ E000
  74+ E000              HideSprite:                 MACRO   spritenbr
  75+ E000 ~                                        nextreg		SPRITE_PORT_INDEX_REGISTER,spritenbr
  76+ E000 ~                                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
  77+ E000                                          ENDM
  78+ E000
  79+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  80+ E000              sprite_big:
  81+ E000 7A           .SetAnchor:	                ld		a,d                                 ; a = sprite nbr, bug fix?
  82+ E001 F5                                       push	af									; save id for next few
  83+ E002 D5                                       push	de
  84+ E003 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  85+ E006              ; write out X position bits 1 to 8
  86+ E006 79                                       ld		a,c
  87+ E007 21 11 00                                 ld      hl,spritecursoroffset
  88+ E00A ED 31                                    add		hl,a                                ; hl = full x position
  89+ E00C 7D                                       ld		a,l
  90+ E00D ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  91+ E010              ; write out Y position bits 1 to 8
  92+ E010 EB                                       ex		de,hl								; de = full x position
  93+ E011 78                                       ld		a,b
  94+ E012 21 11 00                                 ld      hl,spritecursoroffset
  95+ E015 ED 31                                    add		hl,a
  96+ E017 7D                                       ld		a,l                                 ; hl = full y position
  97+ E018 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  98+ E01B              ; write out MSB of X as its an anchor
  99+ E01B 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 100+ E01C ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 101+ E01F              ; write out sprite pattern
 102+ E01F D1                                       pop		de                                  ; de = pattern and sprite nbr
 103+ E020 7B                                       ld		a,e
 104+ E021 F6 C0                                    or		%11000000							;
 105+ E023 ED 92 38                                 nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 106+ E026              ; write out msb of y in h must be bit 0 only
 107+ E026 3E 00                                    ld		a,%00000000							; big unified composite
 108+ E028 B4                                       or		h									; MSB Y
 109+ E029 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 110+ E02C F1           .BigSprite1:                pop		af
 111+ E02D 3C                                       inc		a
 112+ E02E F5                                       push	af
 113+ E02F ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 114+ E032 3E 10                                    ld		a,16
 115+ E034 ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 116+ E037 AF                                       xor 	a
 117+ E038 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 118+ E03B ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 119+ E03E 3E C1                                    ld		a,%11000001							; relative and 4 bytes of data, pattern 1
 120+ E040 ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 121+ E043 3E 41                                    ld		a,%01000001							; big unified composite
 122+ E045 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 123+ E048 F1           .BigSprite2:                pop		af
 124+ E049 3C                                       inc		a
 125+ E04A ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 126+ E04D AF                                       xor		a
 127+ E04E ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 128+ E051 3E 10                                    ld		a,16
 129+ E053 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 130+ E056 AF                                       xor		a
 131+ E057 ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 132+ E05A 3E C2                                    ld		a,%11000010							; relative and 4 bytes of data, pattern 2
 133+ E05C ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 134+ E05F 3E 41                                    ld		a,%01000001							; big unified composite
 135+ E061 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 136+ E064 C9                                       ret
 137+ E065
 138+ E065              ; for a sinle sprite within 256x192 area
 139+ E065 7A           sprite_single:          ld		a,d                                 ; a = sprite nbr, bug fix?
 140+ E066 D5                                   push    de
 141+ E067 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 142+ E06A              ; write out X position bits 1 to 8
 143+ E06A 79                                   ld		a,c                                 ; a = column (c)
 144+ E06B 21 20 00                             ld      hl,spriteborderoffset
 145+ E06E ED 31                                add		hl,a                                ; hl = full x position
 146+ E070 EB                                   ex		de,hl								; de = full x position
 147+ E071 7B                                   ld		a,e
 148+ E072 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 149+ E075              ; write out Y position bits 1 to 8
 150+ E075 78                                   ld		a,b                                 ; a = row
 151+ E076 21 20 00                             ld      hl,spriteborderoffset
 152+ E079 ED 31                                add		hl,a
 153+ E07B 7D                                   ld		a,l                                 ; hl = full y position
 154+ E07C ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 155+ E07F              ; write out MSB of X as its an anchor
 156+ E07F 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 157+ E080 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 158+ E083              ; write out sprite pattern
 159+ E083 D1                                   pop     de
 160+ E084 7B                                   ld		a,e
 161+ E085 F6 80                                or		%10000000							;
 162+ E087 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 163+ E08A              ; write out extended attribute
 164+ E08A 3E 00                                ld      a,%00000000                         ; its a single sprite
 165+ E08C B4                                   or      h
 166+ E08D ED 92 39                             nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 167+ E090 C9                                   ret
 168+ E091              ; ">sprite_galactic_cursor BC = rowcol"
 169+ E091 16 00        sprite_galactic_cursor:     ld		d,galactic_cursor_sprite
 170+ E093 1E 00                                    ld		e,0
 171+ E095 78                                       ld		a,b
 172+ E096 C6 18                                    add		a,galactic_chart_y_offset
 173+ E098 47                                       ld		b,a
 174+ E099 CD 00 E0                                 call	sprite_big
 175+ E09C C9                                       ret
 176+ E09D
 177+ E09D              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 178+ E09D 78           sprite_galactic_hyper_cursor:ld		a,b
 179+ E09E C6 04                                    add		a,galactic_chart_hyper_offset
 180+ E0A0 47                                       ld		b,a
 181+ E0A1 16 04                                    ld		d,galactic_hyper_sprite
 182+ E0A3 1E 03                                    ld		e,3
 183+ E0A5 CD 65 E0                                 call	sprite_single ; sprite_big:
 184+ E0A8 C9                                       ret
 185+ E0A9
 186+ E0A9
 187+ E0A9              ; moves hyperspace cursor to target system x position
 188+ E0A9 3E 04        sprite_ghc_move:            ld		a,galactic_hyper_sprite
 189+ E0AB ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 190+ E0AE              ; write out X position bits 1 to 8
 191+ E0AE 79                                       ld		a,c
 192+ E0AF 21 1C 00                                 ld      hl,galactic_chart_hyper_x_offset
 193+ E0B2 ED 31                                    add		hl,a                                ; hl = full x position
 194+ E0B4 7D                                       ld		a,l
 195+ E0B5 ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 196+ E0B8              ; write out Y position bits 1 to 8
 197+ E0B8 EB                                       ex		de,hl								; de = full x position
 198+ E0B9 CB 38                                    srl		b			    					; row is row / 2
 199+ E0BB 78                                       ld      a,b
 200+ E0BC 21 34 00                                 ld      hl,galactic_chart_hyper_y_offset
 201+ E0BF ED 31                                    add		hl,a
 202+ E0C1 7D                                       ld		a,l                                 ; hl = full y position
 203+ E0C2 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 204+ E0C5              ; write out MSB of X as its an anchor
 205+ E0C5 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 206+ E0C6 ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 207+ E0C9              ; write out msb of y in h must be bit 0 only
 208+ E0C9 3E 00                                    ld		a,%00000000							; big unified composite
 209+ E0CB B2                                       or		d									; MSB Y
 210+ E0CC ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 211+ E0CF C9                                       ret
 212+ E0D0
 213+ E0D0
 214+ E0D0 3E 08        sprite_lhc_move:            ld		a,local_hyper_sprite
 215+ E0D2 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 216+ E0D5              ; write out X position bits 1 to 8
 217+ E0D5 79                                       ld		a,c
 218+ E0D6 21 11 00                                 ld      hl,spritecursoroffset
 219+ E0D9 ED 31                                    add		hl,a                                ; hl = full x position
 220+ E0DB 7D                                       ld		a,l
 221+ E0DC ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 222+ E0DF              ; write out Y position bits 1 to 8
 223+ E0DF EB                                       ex		de,hl								; de = full x position
 224+ E0E0 78                                       ld		a,b
 225+ E0E1 21 11 00                                 ld      hl,spritecursoroffset
 226+ E0E4 ED 31                                    add		hl,a
 227+ E0E6 7D                                       ld		a,l                                 ; hl = full y position
 228+ E0E7 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 229+ E0EA              ; write out MSB of X as its an anchor
 230+ E0EA 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 231+ E0EB ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 232+ E0EE              ; write out msb of y in h must be bit 0 only
 233+ E0EE 3E 00                                    ld		a,%00000000							; big unified composite
 234+ E0F0 B2                                       or		d									; MSB Y
 235+ E0F1 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 236+ E0F4 C9                                       ret
 237+ E0F5
 238+ E0F5              ; "sprite_local_cursor BC = rowcol"
 239+ E0F5 16 05        sprite_local_cursor:        ld		d,local_cursor_sprite
 240+ E0F7 1E 04                                    ld		e,local_present_cursor
 241+ E0F9 CD 00 E0                                 call	sprite_big
 242+ E0FC C9                                       ret
 243+ E0FD
 244+ E0FD              ; "sprite_local_hyper_cursor BC = rowcol"
 245+ E0FD 16 08        sprite_local_hyper_cursor:  ld		d,local_hyper_sprite
 246+ E0FF 1E 07                                    ld		e,local_hyper_pattern
 247+ E101 CD 00 E0                                 call	sprite_big
 248+ E104 C9                                       ret
 249+ E105
 250+ E105              compass_offset              equ 2
 251+ E105              ScannerX                    equ 128
 252+ E105              ScannerY                    equ 171
 253+ E105              SunScanCenterX              equ 92
 254+ E105              SunScanCenterY              equ 171
 255+ E105              PlanetScanCenterX           equ 164
 256+ E105              PlanetScanCenterY           equ 171
 257+ E105
 258+ E105
 259+ E105 3E 20        compass_sun_move:       ld		a,compass_sun
 260+ E107 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 261+ E10A              ; write out X position bits 1 to 8
 262+ E10A 3E 5A                                ld      a, SunScanCenterX-compass_offset
 263+ E10C 81                                   add     a,c
 264+ E10D ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 265+ E110              ; write out Y position bits 1 to 8
 266+ E110 3E A9                                ld      a, SunScanCenterY-compass_offset
 267+ E112 90                                   sub     b
 268+ E113 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 269+ E116 C9                                   ret
 270+ E117
 271+ E117 3E 21        compass_station_move:   ld		a,compass_station
 272+ E119 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 273+ E11C              ; write out X position bits 1 to 8
 274+ E11C 3E A2                                ld      a, PlanetScanCenterX-compass_offset
 275+ E11E 81                                   add     a,c
 276+ E11F ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 277+ E122              ; write out Y position bits 1 to 8
 278+ E122 3E A9                                ld      a, PlanetScanCenterY-compass_offset
 279+ E124 90                                   sub     b
 280+ E125 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 281+ E128 C9                                   ret
 282+ E129
 283+ E129              ReticuleCentreX         EQU (256/2)+32 -1
 284+ E129              ReticuleCentreY         EQU (192/2)+32 -1
 285+ E129              ReticuleOffset          EQU 8
 286+ E129
 287+ E129              TargetetingCentreX1     EQU ReticuleCentreX -32
 288+ E129              TargetetingCentreX2     EQU ReticuleCentreX +16
 289+ E129              TargetetingCentreY      EQU ReticuleCentreY -7
 290+ E129
 291+ E129              sprite_missile_x        EQU 2+32
 292+ E129              sprite_missile_y        EQU 192-8+32
 293+ E129
 294+ E129              sprite_ecm_x            EQU (6*8) +2 +32
 295+ E129              sprite_ecm_y            EQU 192-15+32
 296+ E129
 297+ E129 3E 24        sprite_ECM:             ld      a,ECM_sprite
 298+ E12B ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a
 299+ E12E 3E 52                                ld      a,sprite_ecm_x
 300+ E130 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 301+ E133 3E D1                                ld		a,sprite_ecm_y
 302+ E135 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 303+ E138 3E 99                                ld      a,ecm_pattern | %10000000
 304+ E13A ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 305+ E13D C9                                   ret
 306+ E13E
 307+ E13E ED 92 34     sprite_missile_ready:   nextreg SPRITE_PORT_INDEX_REGISTER,a
 308+ E141 79                                   ld      a,c
 309+ E142 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 310+ E145 3E D8                                ld		a,sprite_missile_y
 311+ E147 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 312+ E14A 3E 9A                                ld      a,missile_ready_pattern | %10000000
 313+ E14C ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 314+ E14F C9                                   ret
 315+ E150
 316+ E150 3E 25        sprite_missile_1:       ld      a,missile_sprite1
 317+ E152 0E 22                                ld      c,sprite_missile_x
 318+ E154 C3 3E E1                             jp      sprite_missile_ready
 319+ E157
 320+ E157 3E 26        sprite_missile_2:       ld      a,missile_sprite2
 321+ E159 0E 31                                ld      c,sprite_missile_x+15
 322+ E15B C3 3E E1                             jp      sprite_missile_ready
 323+ E15E
 324+ E15E 3E 27        sprite_missile_3:       ld      a,missile_sprite3
 325+ E160 0E 3B                                ld      c,sprite_missile_x+25
 326+ E162 C3 3E E1                             jp      sprite_missile_ready
 327+ E165
 328+ E165 3E 28        sprite_missile_4:       ld      a,missile_sprite4
 329+ E167 0E 45                                ld      c,sprite_missile_x +35
 330+ E169 C3 3E E1                             jp      sprite_missile_ready
 331+ E16C
 332+ E16C
 333+ E16C
 334+ E16C 3E 0C        sprite_reticule:        ld      a,reticlule_sprite1                 ; LEFT ARM
 335+ E16E ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 336+ E171 3E 87                                ld      a,ReticuleCentreX -16 - ReticuleOffset
 337+ E173 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 338+ E176 3E 7F                                ld		a,ReticuleCentreY
 339+ E178 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 340+ E17B AF                                   xor     a
 341+ E17C ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 342+ E17F 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 343+ E181 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 344+ E184 3E 0D        .rightReticule          ld      a,reticlule_sprite2                 ; RIGHT ARM
 345+ E186 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 346+ E189 3E A7                                ld      a,ReticuleCentreX + ReticuleOffset
 347+ E18B ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 348+ E18E 3E 7F                                ld		a,ReticuleCentreY
 349+ E190 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 350+ E193 3E 08                                ld      a,%00001000
 351+ E195 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 352+ E198 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 353+ E19A ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 354+ E19D 3E 0E        .topReticule            ld      a,reticlule_sprite3
 355+ E19F ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 356+ E1A2 3E 9F                                ld      a,ReticuleCentreX
 357+ E1A4 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 358+ E1A7 3E 67                                ld		a,ReticuleCentreY-16 - ReticuleOffset
 359+ E1A9 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 360+ E1AC AF                                   xor     a
 361+ E1AD ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 362+ E1B0 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 363+ E1B2 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 364+ E1B5 3E 0F        .bottomReticule         ld      a,reticlule_sprite4
 365+ E1B7 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 366+ E1BA 3E 9F                                ld      a,ReticuleCentreX
 367+ E1BC ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 368+ E1BF 3E 87                                ld		a,ReticuleCentreY + ReticuleOffset
 369+ E1C1 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 370+ E1C4 3E 04                                ld      a,%00000100
 371+ E1C6 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring vertical
 372+ E1C9 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 373+ E1CB ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 374+ E1CE C9                                   ret
 375+ E1CF
 376+ E1CF              laserbasex              equ 6
 377+ E1CF              laserbasey              equ 14
 378+ E1CF
 379+ E1CF              ShowSprite              MACRO   spritenbr, patternnbr
 380+ E1CF ~                                    ld      a, spritenbr
 381+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 382+ E1CF ~                                    ld      a,patternnbr | %10000000
 383+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 384+ E1CF                                      ENDM
 385+ E1CF
 386+ E1CF              LeftLaser:              MACRO   xoffset, yoffset, spriteL, patternL
 387+ E1CF ~                                    ld      a, spriteL
 388+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 389+ E1CF ~                                    ld      a,((laserbasex + xoffset) *8) + 32
 390+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 391+ E1CF ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 392+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 393+ E1CF ~                                    xor     a
 394+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 395+ E1CF ~                                    ld      a, patternL | %00000000             ; hidden by default
 396+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 397+ E1CF                                      ENDM
 398+ E1CF
 399+ E1CF              RightLaser:             MACRO   xoffset, yoffset, spriteL, patternL
 400+ E1CF ~                                    ld      a, spriteL
 401+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 402+ E1CF ~                                    ld      a,(((30-laserbasex) - xoffset) *8) + 32 -2
 403+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 404+ E1CF ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 405+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 406+ E1CF ~                                    ld      a,%00001000
 407+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 408+ E1CF ~                                    ld      a, patternL | %00000000             ; hidden by default
 409+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 410+ E1CF                                      ENDM
 411+ E1CF
 412+ E1CF              show_ecm_sprite:        ShowSprite  ECM_sprite, ecm_pattern
 412+ E1CF 3E 24       >                        ld      a, ECM_sprite
 412+ E1D1 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 412+ E1D4 3E 99       >                        ld      a,ecm_pattern | %10000000
 412+ E1D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 413+ E1D9 C9                                   ret
 414+ E1DA
 415+ E1DA              show_missile_1_ready:   ShowSprite  missile_sprite1, missile_ready_pattern
 415+ E1DA 3E 25       >                        ld      a, missile_sprite1
 415+ E1DC ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 415+ E1DF 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 415+ E1E1 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 416+ E1E4 C9                                   ret
 417+ E1E5
 418+ E1E5              show_missile_2_ready:   ShowSprite  missile_sprite2, missile_ready_pattern
 418+ E1E5 3E 26       >                        ld      a, missile_sprite2
 418+ E1E7 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 418+ E1EA 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 418+ E1EC ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 419+ E1EF C9                                   ret
 420+ E1F0
 421+ E1F0              show_missile_3_ready:   ShowSprite  missile_sprite3, missile_ready_pattern
 421+ E1F0 3E 27       >                        ld      a, missile_sprite3
 421+ E1F2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 421+ E1F5 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 421+ E1F7 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 422+ E1FA C9                                   ret
 423+ E1FB
 424+ E1FB              show_missile_4_ready:   ShowSprite  missile_sprite4, missile_ready_pattern
 424+ E1FB 3E 28       >                        ld      a, missile_sprite4
 424+ E1FD ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 424+ E200 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 424+ E202 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 425+ E205 C9                                   ret
 426+ E206
 427+ E206              show_missile_1_armed:   ShowSprite  missile_sprite1, missile_armed_pattern
 427+ E206 3E 25       >                        ld      a, missile_sprite1
 427+ E208 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 427+ E20B 3E 9B       >                        ld      a,missile_armed_pattern | %10000000
 427+ E20D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 428+ E210 C9                                   ret
 429+ E211
 430+ E211              show_missile_1_locked:  ShowSprite  missile_sprite1, missile_locked_pattern
 430+ E211 3E 25       >                        ld      a, missile_sprite1
 430+ E213 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 430+ E216 3E 9C       >                        ld      a,missile_locked_pattern | %10000000
 430+ E218 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 431+ E21B C9                                   ret
 432+ E21C
 433+ E21C
 434+ E21C              show_compass_sun_infront:ShowSprite  compass_sun, compass_sun_infront
 434+ E21C 3E 20       >                        ld      a, compass_sun
 434+ E21E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 434+ E221 3E 91       >                        ld      a,compass_sun_infront | %10000000
 434+ E223 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 435+ E226 C9                                    ret
 436+ E227
 437+ E227              show_compass_sun_behind: ShowSprite  compass_sun, compass_sun_behind
 437+ E227 3E 20       >                        ld      a, compass_sun
 437+ E229 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 437+ E22C 3E 92       >                        ld      a,compass_sun_behind | %10000000
 437+ E22E ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 438+ E231 C9                                    ret
 439+ E232
 440+ E232              show_compass_station_infront: ShowSprite  compass_station, compass_station_infront
 440+ E232 3E 21       >                        ld      a, compass_station
 440+ E234 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 440+ E237 3E 93       >                        ld      a,compass_station_infront | %10000000
 440+ E239 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 441+ E23C C9                                    ret
 442+ E23D
 443+ E23D              show_compass_station_behind:  ShowSprite  compass_station, compass_station_behind
 443+ E23D 3E 21       >                        ld      a, compass_station
 443+ E23F ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 443+ E242 3E 94       >                        ld      a,compass_station_behind | %10000000
 443+ E244 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 444+ E247 C9                                    ret
 445+ E248
 446+ E248              sprite_laser:           LeftLaser  0,0,laser_sprite1 ,laser_pattern_1
 446+ E248 3E 10       >                        ld      a, laser_sprite1
 446+ E24A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 446+ E24D 3E 50       >                        ld      a,((laserbasex + 0) *8) + 32
 446+ E24F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 446+ E252 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 446+ E254 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 446+ E257 AF          >                        xor     a
 446+ E258 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 446+ E25B 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 446+ E25D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 447+ E260                                      LeftLaser  2,0,laser_sprite2 ,laser_pattern_2
 447+ E260 3E 11       >                        ld      a, laser_sprite2
 447+ E262 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 447+ E265 3E 60       >                        ld      a,((laserbasex + 2) *8) + 32
 447+ E267 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 447+ E26A 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 447+ E26C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 447+ E26F AF          >                        xor     a
 447+ E270 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 447+ E273 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 447+ E275 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 448+ E278                                      LeftLaser  4,1,laser_sprite3 ,laser_pattern_3
 448+ E278 3E 12       >                        ld      a, laser_sprite3
 448+ E27A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 448+ E27D 3E 70       >                        ld      a,((laserbasex + 4) *8) + 32
 448+ E27F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 448+ E282 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 448+ E284 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 448+ E287 AF          >                        xor     a
 448+ E288 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 448+ E28B 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 448+ E28D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 449+ E290                                      LeftLaser  6,1,laser_sprite4 ,laser_pattern_4
 449+ E290 3E 13       >                        ld      a, laser_sprite4
 449+ E292 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 449+ E295 3E 80       >                        ld      a,((laserbasex + 6) *8) + 32
 449+ E297 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 449+ E29A 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 449+ E29C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 449+ E29F AF          >                        xor     a
 449+ E2A0 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 449+ E2A3 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 449+ E2A5 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 450+ E2A8                                      LeftLaser  8,2,laser_sprite5 ,laser_pattern_5
 450+ E2A8 3E 14       >                        ld      a, laser_sprite5
 450+ E2AA ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 450+ E2AD 3E 90       >                        ld      a,((laserbasex + 8) *8) + 32
 450+ E2AF ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 450+ E2B2 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 450+ E2B4 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 450+ E2B7 AF          >                        xor     a
 450+ E2B8 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 450+ E2BB 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 450+ E2BD ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 451+ E2C0                                      RightLaser 0,0,laser_sprite9 ,laser_pattern_1
 451+ E2C0 3E 18       >                        ld      a, laser_sprite9
 451+ E2C2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 451+ E2C5 3E DE       >                        ld      a,(((30-laserbasex) - 0) *8) + 32 -2
 451+ E2C7 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 451+ E2CA 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 451+ E2CC ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 451+ E2CF 3E 08       >                        ld      a,%00001000
 451+ E2D1 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 451+ E2D4 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 451+ E2D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 452+ E2D9                                      RightLaser 2,0,laser_sprite10,laser_pattern_2
 452+ E2D9 3E 19       >                        ld      a, laser_sprite10
 452+ E2DB ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 452+ E2DE 3E CE       >                        ld      a,(((30-laserbasex) - 2) *8) + 32 -2
 452+ E2E0 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 452+ E2E3 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 452+ E2E5 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 452+ E2E8 3E 08       >                        ld      a,%00001000
 452+ E2EA ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 452+ E2ED 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 452+ E2EF ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 453+ E2F2                                      RightLaser 4,1,laser_sprite11,laser_pattern_3
 453+ E2F2 3E 1A       >                        ld      a, laser_sprite11
 453+ E2F4 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 453+ E2F7 3E BE       >                        ld      a,(((30-laserbasex) - 4) *8) + 32 -2
 453+ E2F9 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 453+ E2FC 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 453+ E2FE ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 453+ E301 3E 08       >                        ld      a,%00001000
 453+ E303 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 453+ E306 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 453+ E308 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 454+ E30B                                      RightLaser 6,1,laser_sprite12,laser_pattern_4
 454+ E30B 3E 1B       >                        ld      a, laser_sprite12
 454+ E30D ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 454+ E310 3E AE       >                        ld      a,(((30-laserbasex) - 6) *8) + 32 -2
 454+ E312 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 454+ E315 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 454+ E317 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 454+ E31A 3E 08       >                        ld      a,%00001000
 454+ E31C ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 454+ E31F 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 454+ E321 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 455+ E324                                      RightLaser 8,2,laser_sprite13,laser_pattern_5
 455+ E324 3E 1C       >                        ld      a, laser_sprite13
 455+ E326 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 455+ E329 3E 9E       >                        ld      a,(((30-laserbasex) - 8) *8) + 32 -2
 455+ E32B ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 455+ E32E 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 455+ E330 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 455+ E333 3E 08       >                        ld      a,%00001000
 455+ E335 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 455+ E338 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 455+ E33A ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 456+ E33D C9                                   ret
 457+ E33E                                      ; Need simple show updates just to update the show attribute
 458+ E33E
 459+ E33E              sprite_laser_show:      ShowSprite laser_sprite1 ,laser_pattern_1
 459+ E33E 3E 10       >                        ld      a, laser_sprite1
 459+ E340 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 459+ E343 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 459+ E345 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 460+ E348                                      ShowSprite laser_sprite2 ,laser_pattern_2
 460+ E348 3E 11       >                        ld      a, laser_sprite2
 460+ E34A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 460+ E34D 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 460+ E34F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 461+ E352                                      ShowSprite laser_sprite3 ,laser_pattern_3
 461+ E352 3E 12       >                        ld      a, laser_sprite3
 461+ E354 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 461+ E357 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 461+ E359 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 462+ E35C                                      ShowSprite laser_sprite4 ,laser_pattern_4
 462+ E35C 3E 13       >                        ld      a, laser_sprite4
 462+ E35E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 462+ E361 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 462+ E363 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 463+ E366                                      ShowSprite laser_sprite5 ,laser_pattern_5
 463+ E366 3E 14       >                        ld      a, laser_sprite5
 463+ E368 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 463+ E36B 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 463+ E36D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 464+ E370                                      ShowSprite laser_sprite9 ,laser_pattern_1
 464+ E370 3E 18       >                        ld      a, laser_sprite9
 464+ E372 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 464+ E375 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 464+ E377 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 465+ E37A                                      ShowSprite laser_sprite10,laser_pattern_2
 465+ E37A 3E 19       >                        ld      a, laser_sprite10
 465+ E37C ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 465+ E37F 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 465+ E381 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 466+ E384                                      ShowSprite laser_sprite11,laser_pattern_3
 466+ E384 3E 1A       >                        ld      a, laser_sprite11
 466+ E386 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 466+ E389 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 466+ E38B ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 467+ E38E                                      ShowSprite laser_sprite12,laser_pattern_4
 467+ E38E 3E 1B       >                        ld      a, laser_sprite12
 467+ E390 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 467+ E393 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 467+ E395 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 468+ E398                                      ShowSprite laser_sprite13,laser_pattern_5
 468+ E398 3E 1C       >                        ld      a, laser_sprite13
 468+ E39A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 468+ E39D 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 468+ E39F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 469+ E3A2 C9                                   ret
 470+ E3A3
 471+ E3A3              sprite_galactic_hide:   HideSprite galactic_cursor_sprite
 471+ E3A3 ED 91 34 00 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 471+ E3A7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 472+ E3AB                                      HideSprite galactic_cursor_sprite1
 472+ E3AB ED 91 34 01 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 472+ E3AF ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 473+ E3B3                                      HideSprite galactic_cursor_sprite2
 473+ E3B3 ED 91 34 03 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 473+ E3B7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 474+ E3BB C9                                   ret
 475+ E3BC
 476+ E3BC              sprite_galactic_hyper_hide:
 477+ E3BC                                      HideSprite galactic_hyper_sprite
 477+ E3BC ED 91 34 04 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 477+ E3C0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 478+ E3C4                                       ;nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 479+ E3C4              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 480+ E3C4              ;                        nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 481+ E3C4              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 482+ E3C4 C9                                   ret
 483+ E3C5
 484+ E3C5              sprite_local_hide:      HideSprite local_cursor_sprite
 484+ E3C5 ED 91 34 05 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 484+ E3C9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 485+ E3CD                                      HideSprite local_cursor_sprite1
 485+ E3CD ED 91 34 06 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 485+ E3D1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 486+ E3D5                                      HideSprite local_cursor_sprite2
 486+ E3D5 ED 91 34 07 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 486+ E3D9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 487+ E3DD C9                                   ret
 488+ E3DE
 489+ E3DE              sprite_local_hyper_hide:HideSprite local_hyper_sprite
 489+ E3DE ED 91 34 08 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 489+ E3E2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 490+ E3E6                                      HideSprite local_hyper_sprite1
 490+ E3E6 ED 91 34 09 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 490+ E3EA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 491+ E3EE                                      HideSprite local_hyper_sprite2
 491+ E3EE ED 91 34 0B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 491+ E3F2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 492+ E3F6 C9                                   ret
 493+ E3F7
 494+ E3F7              sprite_reticule_hide:   HideSprite reticlule_sprite1
 494+ E3F7 ED 91 34 0C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite1
 494+ E3FB ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 495+ E3FF                                      HideSprite reticlule_sprite2
 495+ E3FF ED 91 34 0D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite2
 495+ E403 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 496+ E407                                      HideSprite reticlule_sprite3
 496+ E407 ED 91 34 0E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite3
 496+ E40B ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 497+ E40F                                      HideSprite reticlule_sprite4
 497+ E40F ED 91 34 0F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite4
 497+ E413 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 498+ E417 C9                                   ret
 499+ E418
 500+ E418              sprite_ecm_hide:        HideSprite ECM_sprite
 500+ E418 ED 91 34 24 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,ECM_sprite
 500+ E41C ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 501+ E420 C9                                   ret
 502+ E421
 503+ E421              sprite_missile_1_hide:  HideSprite missile_sprite1
 503+ E421 ED 91 34 25 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite1
 503+ E425 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 504+ E429 C9                                   ret
 505+ E42A
 506+ E42A              sprite_missile_2_hide:  HideSprite missile_sprite2
 506+ E42A ED 91 34 26 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite2
 506+ E42E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 507+ E432 C9                                   ret
 508+ E433
 509+ E433              sprite_missile_3_hide:  HideSprite missile_sprite3
 509+ E433 ED 91 34 27 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite3
 509+ E437 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 510+ E43B C9                                   ret
 511+ E43C
 512+ E43C              sprite_missile_4_hide:  HideSprite missile_sprite4
 512+ E43C ED 91 34 28 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite4
 512+ E440 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 513+ E444 C9                                   ret
 514+ E445
 515+ E445 CD 21 E4     sprite_missile_all_hide:call  sprite_missile_1_hide
 516+ E448 CD 2A E4                             call  sprite_missile_2_hide
 517+ E44B CD 33 E4                             call  sprite_missile_3_hide
 518+ E44E CD 3C E4                             call  sprite_missile_4_hide
 519+ E451 C9                                   ret
 520+ E452
 521+ E452 3E 22        sprite_targetting:      ld      a,targetting_sprite1                 ; LEFT ARM
 522+ E454 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 523+ E457 3E 7F                                ld      a,TargetetingCentreX1
 524+ E459 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 525+ E45C 3E 78                                ld		a,TargetetingCentreY
 526+ E45E ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 527+ E461 AF                                   xor     a
 528+ E462 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 529+ E465 3E 97                                ld      a,targetting_pattern | %10000000
 530+ E467 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 531+ E46A 3E 23        .right:                 ld      a,targetting_sprite2                ; RIGHT ARM
 532+ E46C ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 533+ E46F 3E AF                                ld      a,TargetetingCentreX2
 534+ E471 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 535+ E474 3E 78                                ld		a,TargetetingCentreY
 536+ E476 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 537+ E479 3E 08                                ld      a,%00001000
 538+ E47B ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 539+ E47E 3E 97                                ld      a,targetting_pattern | %10000000
 540+ E480 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 541+ E483 C9                                   ret
 542+ E484
 543+ E484 3E 22        sprite_lock:            ld      a,targetting_sprite1                 ; LEFT ARM
 544+ E486 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 545+ E489 3E 7F                                ld      a,TargetetingCentreX1
 546+ E48B ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 547+ E48E 3E 78                                ld		a,TargetetingCentreY
 548+ E490 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 549+ E493 AF                                   xor     a
 550+ E494 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 551+ E497 3E 98                                ld      a,lock_pattern | %10000000
 552+ E499 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 553+ E49C 3E 23        .right:                 ld      a,targetting_sprite2                 ; RIGHT ARM
 554+ E49E ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 555+ E4A1 3E AF                                ld      a,TargetetingCentreX2
 556+ E4A3 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 557+ E4A6 3E 78                                ld		a,TargetetingCentreY
 558+ E4A8 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 559+ E4AB 3E 08                                ld      a,%00001000
 560+ E4AD ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 561+ E4B0 3E 98                                ld      a,lock_pattern | %10000000
 562+ E4B2 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 563+ E4B5 C9                                   ret
 564+ E4B6
 565+ E4B6
 566+ E4B6
 567+ E4B6              sprite_targetting_hide: HideSprite targetting_sprite1
 567+ E4B6 ED 91 34 22 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite1
 567+ E4BA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 568+ E4BE                                      HideSprite targetting_sprite2
 568+ E4BE ED 91 34 23 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite2
 568+ E4C2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 569+ E4C6 C9                                   ret
 570+ E4C7
 571+ E4C7              sprite_targetting_show: ShowSprite targetting_sprite1, targetting_pattern
 571+ E4C7 3E 22       >                        ld      a, targetting_sprite1
 571+ E4C9 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 571+ E4CC 3E 97       >                        ld      a,targetting_pattern | %10000000
 571+ E4CE ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 572+ E4D1                                      ShowSprite targetting_sprite2, targetting_pattern
 572+ E4D1 3E 23       >                        ld      a, targetting_sprite2
 572+ E4D3 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 572+ E4D6 3E 97       >                        ld      a,targetting_pattern | %10000000
 572+ E4D8 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 573+ E4DB C9                                   ret
 574+ E4DC
 575+ E4DC              sprite_laser_hide:      HideSprite laser_sprite1
 575+ E4DC ED 91 34 10 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite1
 575+ E4E0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 576+ E4E4                                      HideSprite laser_sprite2
 576+ E4E4 ED 91 34 11 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite2
 576+ E4E8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 577+ E4EC                                      HideSprite laser_sprite3
 577+ E4EC ED 91 34 12 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite3
 577+ E4F0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 578+ E4F4                                      HideSprite laser_sprite4
 578+ E4F4 ED 91 34 13 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite4
 578+ E4F8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 579+ E4FC                                      HideSprite laser_sprite5
 579+ E4FC ED 91 34 14 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite5
 579+ E500 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 580+ E504                                      HideSprite laser_sprite6
 580+ E504 ED 91 34 15 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite6
 580+ E508 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 581+ E50C                                      HideSprite laser_sprite7
 581+ E50C ED 91 34 16 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite7
 581+ E510 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 582+ E514                                      HideSprite laser_sprite8
 582+ E514 ED 91 34 17 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite8
 582+ E518 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 583+ E51C                                      HideSprite laser_sprite9
 583+ E51C ED 91 34 18 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite9
 583+ E520 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 584+ E524                                      HideSprite laser_sprite10
 584+ E524 ED 91 34 19 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite10
 584+ E528 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 585+ E52C                                      HideSprite laser_sprite11
 585+ E52C ED 91 34 1A >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite11
 585+ E530 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 586+ E534                                      HideSprite laser_sprite12
 586+ E534 ED 91 34 1B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite12
 586+ E538 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 587+ E53C                                      HideSprite laser_sprite13
 587+ E53C ED 91 34 1C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite13
 587+ E540 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 588+ E544                                      HideSprite laser_sprite14
 588+ E544 ED 91 34 1D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite14
 588+ E548 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 589+ E54C                                      HideSprite laser_sprite15
 589+ E54C ED 91 34 1E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite15
 589+ E550 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 590+ E554                                      HideSprite laser_sprite16
 590+ E554 ED 91 34 1F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite16
 590+ E558 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 591+ E55C C9                                   ret
 592+ E55D
 593+ E55D              sprite_compass_hide:    HideSprite compass_sun
 593+ E55D ED 91 34 20 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_sun
 593+ E561 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 594+ E565                                      HideSprite compass_station
 594+ E565 ED 91 34 21 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_station
 594+ E569 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 595+ E56D C9                                   ret
 596+ E56E
 597+ E56E CD A3 E3     sprite_cls_cursors:     call	sprite_galactic_hide
 598+ E571 CD BC E3                             call	sprite_galactic_hyper_hide
 599+ E574 CD C5 E3                             call	sprite_local_hide
 600+ E577 CD DE E3                             call	sprite_local_hyper_hide
 601+ E57A CD F7 E3                             call    sprite_reticule_hide
 602+ E57D CD DC E4                             call    sprite_laser_hide
 603+ E580 CD 5D E5                             call    sprite_compass_hide
 604+ E583 CD B6 E4                             call    sprite_targetting_hide
 605+ E586 CD 45 E4                             call    sprite_missile_all_hide
 606+ E589 C9                                   ret
 607+ E58A
 608+ E58A CD 6E E5     sprite_cls_all:         call    sprite_cls_cursors
 609+ E58D CD 18 E4                             call    sprite_ecm_hide
 610+ E590 CD 45 E4                             call    sprite_missile_all_hide
 611+ E593 C9                                   ret
 612+ E594
 613+ E594 CD 6E E5     init_sprites:           call		sprite_cls_cursors
 614+ E597 ED 91 15 43                          nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,%01000011
 615+ E59B C9                                   ret
 616+ E59C
 617+ E59C
 618+ E59C              select_sprite_a:        MACRO
 619+ E59C ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 620+ E59C                                      ENDM
 621+ E59C
 622+ E59C              set_sprite_x_low_a:     MACRO
 623+ E59C ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 624+ E59C                                      ENDM
 625+ E59C
 626+ E59C              set_sprite_y_low_a:     MACRO
 627+ E59C ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a
 628+ E59C                                      ENDM
 629+ E59C
 630+ E59C              set_sprite_x_msb_anc:   MACRO
 631+ E59C ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a
 632+ E59C                                      ENDM
 633+ E59C
 634+ E59C              set_sprite_pat_a:       MACRO
 635+ E59C ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 636+ E59C                                      ENDM
 637+ E59C
 638+ E59C              set_sprite_pat_a_nx:    MACRO
 639+ E59C ~                                    and     %10111111
 640+ E59C ~                                    set_sprite_pat_a
 641+ E59C                                      ENDM
 642+ E59C
 643+ E59C              set_sprite_pat_a_vis:   MACRO
 644+ E59C ~                                    or      %10000000
 645+ E59C ~                                    set_sprite_pat_a
 646+ E59C                                      ENDM
 647+ E59C
 648+ E59C              set_sprite_hidden:      MACRO
 649+ E59C ~                                    xor     a
 650+ E59C ~                                    set_sprite_pat_a
 651+ E59C                                      ENDM
 652+ E59C
 653+ E59C              set_sprite_pas_a_vis_nx:MACRO
 654+ E59C ~                                    or      %10000000
 655+ E59C ~                                    set_sprite_pat_a_nx
 656+ E59C                                      ENDM
 657+ E59C
 658+ E59C              set_sprite_extended_a:  MACRO
 659+ E59C ~                                    nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 660+ E59C                                      ENDM
 661+ E59C
 662+ E59C 20           diag_x_pos:             DB 32
 663+ E59D 40           diag_y_pos:             DB 64
 664+ E59E 00           diag_sprite_nbr:        DB 0
 665+ E59F
 666+ E59F 06 40        sprite_diagnostic_clear:ld      b,64
 667+ E5A1 0E 00                                ld      c,0
 668+ E5A3 79           .HideLoop:              ld      a,c
 669+ E5A4                                      HideSprite a
 669+ E5A4 ED 92 34    >                            nextreg		SPRITE_PORT_INDEX_REGISTER,a
 669+ E5A7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 670+ E5AB 0C                                   inc     c
 671+ E5AC 10 F5                                djnz    .HideLoop
 672+ E5AE C9                                   ret
 673+ E5AF
 674+ E5AF AF           sprite_diagnostic:      xor a
 675+ E5B0 32 9E E5                             ld      (diag_sprite_nbr),a
 676+ E5B3 01 3B 30                             ld      bc,$303B
 677+ E5B6 ED 79                                out     (c),a
 678+ E5B8 01 57 00     .sprite_loop:           ld      bc,SPRITE_INFO_PORT
 679+ E5BB 3A 9C E5                             ld      a,(diag_x_pos)
 680+ E5BE ED 79                                out     (c),a
 681+ E5C0 C6 10                                add     16
 682+ E5C2 32 9C E5                             ld      (diag_x_pos),a
 683+ E5C5 3A 9D E5                             ld      a,(diag_y_pos)
 684+ E5C8 ED 79                                out     (c),a
 685+ E5CA AF                                   xor     a
 686+ E5CB ED 79                                out     (c),a
 687+ E5CD 3A 9E E5                             ld      a,(diag_sprite_nbr)
 688+ E5D0 F6 80                                or      %10000000
 689+ E5D2 E6 BF                                and     %10111111
 690+ E5D4 ED 79                                out     (c),a
 691+ E5D6 3A 9E E5                             ld      a,(diag_sprite_nbr)
 692+ E5D9 3C                                   inc     a
 693+ E5DA 32 9E E5                             ld      (diag_sprite_nbr),a
 694+ E5DD                                      JumpIfALTNusng 14,.sprite_loop
 694+ E5DD FE 0E       >                        cp      14
 694+ E5DF DA B8 E5    >                        jp		c, .sprite_loop
 695+ E5E2 3E 40                                ld      a,64
 696+ E5E4                                      JumpIfALTNusng  25,.cont
 696+ E5E4 FE 19       >                        cp      25
 696+ E5E6 DA EA E5    >                        jp		c, .cont
 697+ E5E9 C9                                   ret
 698+ E5EA 3E 40        .cont:                  ld      a,64
 699+ E5EC 32 9D E5                             ld      (diag_y_pos),a
 700+ E5EF 18 C7                                jr      .sprite_loop
 701+ E5F1 C9                                   ret
 702+ E5F2
 703+ E5F2
 704+ E5F2
# file closed: ./Layer3Sprites/sprite_routines.asm
 820  E5F2                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E5F2
   2+ E5F2
   3+ E5F2
   4+ E5F2 00 00 00...  FileWork                DS 10
   5+ E5FC 00           FileNumber:             DB  0
   6+ E5FD
   7+ E5FD 4E 45 53 70  Filename                DB "NESpr"
   7+ E601 72
   8+ E602 30 30        FileNbr                 DB "00"
   9+ E604 2E 64 61 74  Extension:              DB ".dat",0
   9+ E608 00
  10+ E609
  11+ E609
  12+ E609 3A FC E5     FileNbrA:               ld      a,(FileNumber)
  13+ E60C ED 23                                swapnib
  14+ E60E E6 0F                                and     %00001111
  15+ E610 06 30                                ld      b,"0"
  16+ E612 80                                   add     b
  17+ E613 32 02 E6                             ld      (FileNbr),a
  18+ E616 3A FC E5                             ld      a,(FileNumber)
  19+ E619 E6 0F                                and     %00001111
  20+ E61B 80                                   add     b
  21+ E61C 32 03 E6                             ld      (FileNbr+1),a
  22+ E61F C9                                   ret
  23+ E620
  24+ E620 01 3B 30     load_pattern_files:     ld          bc,SPRITE_SLOT_PORT             ; select pattern 0
  25+ E623                                      ZeroA                                       ;
  25+ E623 AF          >                        xor a
  26+ E624 ED 79                                out         (c),a
  27+ E626 3E 01                                ld          a,$01
  28+ E628 32 FC E5                             ld          (FileNumber),a
  29+ E62B 06 1D                                ld          b,29
  30+ E62D C5           .ReadLoop:              push        bc
  31+ E62E CD 09 E6                             call        FileNbrA
  32+ E631 CD 40 E6                             call        load_a_pattern
  33+ E634 3A FC E5                             ld          a,(FileNumber)
  34+ E637 3C                                   inc         a
  35+ E638 27                                   daa
  36+ E639 32 FC E5                             ld          (FileNumber),a
  37+ E63C C1                                   pop         bc
  38+ E63D 10 EE                                djnz        .ReadLoop
  39+ E63F C9                                   ret
  40+ E640                                                   ; write byte 256
  41+ E640
  42+ E640 21 FD E5     load_a_pattern:         ld          hl,Filename
  43+ E643 DD 21 5D E6                          ld          ix,SpriteDatabuffer
  44+ E647 01 00 01                             ld          bc,256
  45+ E64A CD BC AD                             call        FileLoad
  46+ E64D 1E FF                                ld          e,255
  47+ E64F 01 5B 00     .streamPattern:         ld          bc, SPRITE_PATTERN_UPLOAD_PORT
  48+ E652 21 5D E6                             ld          hl, SpriteDatabuffer
  49+ E655 ED 90        .streamPatternLoop:     outinb                                      ; write byte of pattern
  50+ E657 1D                                   dec         e
  51+ E658 20 FB                                jr          nz, .streamPatternLoop          ; carry on writing for "e" iterations
  52+ E65A ED 90                                outinb
  53+ E65C C9                                   ret
  54+ E65D
  55+ E65D 00 00 00...  SpriteDatabuffer:       DS  256
  56+ E75D
  57+ E75D
# file closed: ./Layer3Sprites/sprite_load.asm
 821  E75D              ;;;***    INCLUDE "./Layer3Sprites/SpriteSheet.asm"
 822  E75D                  DISPLAY "Bank ",BankSPRITE," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankSPRITE"
 823  E75D              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
 824  E75D                  SLOT    ConsoleImageAddr
 825  E75D                  PAGE    BankConsole
 826  E75D              	ORG     ConsoleImageAddr, BankConsole
 827  E000                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF ; row 1
   2+ E004 FF FF 00 7F
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 40 08
   3+ E028 01 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 10 08
   4+ E048 04 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$01,$C9,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01 ; row 2
  10+ E104 00 01 01 C9
  10+ E108 C0 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 40 08
  11+ E128 01 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 18 00
  12+ E148 0C 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$06,$08,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79 ; row 3
  18+ E204 00 01 06 08
  18+ E208 38 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 55 55
  19+ E228 55 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$0C,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 0C 08
  20+ E248 18 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$0E,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65 ; row 4
  26+ E304 00 01 0E 08
  26+ E308 18 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 40 08
  27+ E328 01 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$03,$00,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 03 00
  28+ E348 60 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$08,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65 ; row 5
  34+ E404 00 01 18 08
  34+ E408 0C 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 40 08
  35+ E428 01 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 FF
  36+ E448 80 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$30,$08,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D ; row 6
  42+ E504 00 03 30 08
  42+ E508 06 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 40 00
  43+ E528 01 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$20,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61 ; row 7
  50+ E604 24 93 20 08
  50+ E608 02 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$60,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 60 08
  51+ E628 02 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$60,$08,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61 ; row 8
  58+ E704 FF FF 60 08
  58+ E708 03 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$20,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 20 00
  59+ E728 02 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 00 01 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 45 45
  67+ E808 45 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$05,$45,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 05 45
  68+ E828 05 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 45 45
  69+ E848 45 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
  76+ E900
# file closed: ./Images/ConsoleImageData.asm
 828  E900                  DISPLAY "Bank ",BankConsole," - Bytes free ",/D, $2000 - ($-ConsoleImageAddr), " - BankConsole"
 829  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
 830  E900                  SLOT    ViewFrontAddr
 831  E900                  PAGE    BankFrontView
 832  E900                  ORG     ViewFrontAddr
 833  C000                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   1+ C004 74 56 69 65
   1+ C008 77 20 20 20
   1+ C00C 50 47 36 32
   2+ C010
   3+ C010 47           draw_front_calc_alpha:  ld      b,a
   4+ C011 E6 80                                and     $80
   5+ C013 32 B4 82                             ld      (ALP2),a                            ; set sign
   6+ C016 4F                                   ld      c,a                                 ; save sign
   7+ C017 EE 80                                xor     $80
   8+ C019 32 B5 82                             ld      (ALP2FLIP),a                        ; and oppsite sign
   9+ C01C 3A B0 82                             ld      a,(JSTX)
  10+ C01F ED 27 80                             test    $80
  11+ C022 28 02                                jr      z,  .PositiveRoll
  12+ C024 ED 44        .NegativeRoll:          neg
  13+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  14+ C028 CB 3F                                srl     a
  15+ C02A FE 08                                cp      8
  16+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  17+ C02E CB 3F        .IncreasedDamp          srl     a
  18+ C030 32 B3 82     .NotIncreasedDamp:      ld      (ALP1),a
  19+ C033 B1                                   or      c
  20+ C034 32 B2 82                             ld      (ALPHA),a                           ; a = signed bit alph1
  21+ C037 21 E2 C2     .RestartDampenRoll:     ld      hl,dampenRcounter
  22+ C03A 36 04                                ld      (hl),dampenRate
  23+ C03C C9                                   ret
  24+ C03D
  25+ C03D              ; Do the same for pitch
  26+ C03D 47           draw_front_calc_beta:   ld      b,a
  27+ C03E E6 80                                and     $80
  28+ C040 32 A8 82                             ld      (BET2),a                            ; set sign
  29+ C043 4F                                   ld      c,a                                 ; save sign
  30+ C044 EE 80                                xor     $80
  31+ C046 32 A9 82                             ld      (BET2FLIP),a                        ; and oppsite sign
  32+ C049 3A A6 82                             ld      a,(JSTY)
  33+ C04C ED 27 80                             test    $80
  34+ C04F 28 02                                jr      z,  .PositivePitch
  35+ C051 ED 44        .NegativePitch:         neg
  36+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  37+ C055 CB 3F                                srl     a
  38+ C057 FE 08                                cp      8
  39+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  40+ C05B CB 3F        .IncreasedDamp          srl     a
  41+ C05D 32 A7 82     .NotIncreasedDamp:      ld      (BET1),a
  42+ C060 B1                                   or      c
  43+ C061 32 A5 82                             ld      (BETA),a                            ; a = signed bit bet1
  44+ C064 21 E3 C2     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  45+ C067 36 04                                ld      (hl),dampenRate
  46+ C069 C9                                   ret
  47+ C06A
  48+ C06A              initialise_front_view:
  49+ C06A
  50+ C06A              draw_front_view:        MMUSelectLayer1
  50+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C06E CD 80 E0                             call    l1_cls
  52+ C071 CD 9A E0                             call    l1_attr_cls
  53+ C074                                      MMUSelectLayer2
  53+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  54+ C078 CD 03 E0                             call     asm_l2_double_buffer_on
  55+ C07B                                      MMUSelectSpriteBank
  55+ C07B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  56+ C07F CD 6E E5                             call    sprite_cls_cursors
  57+ C082 CD 6C E1                             call    sprite_reticule
  58+ C085 CD 48 E2                             call    sprite_laser
  59+ C088 CD 52 E4                             call    sprite_targetting
  60+ C08B CD 84 E4                             call    sprite_lock
  61+ C08E CD B6 E4                             call    sprite_targetting_hide      ; do not show targeting initially
  62+ C091 CD 29 E1                             call    sprite_ECM
  63+ C094 CD 50 E1                             call    sprite_missile_1
  64+ C097 CD 57 E1                             call    sprite_missile_2
  65+ C09A CD 5E E1                             call    sprite_missile_3
  66+ C09D CD 65 E1                             call    sprite_missile_4
  67+ C0A0 CD 18 E4                             call    sprite_ecm_hide
  68+ C0A3 CD 45 E4                             call    sprite_missile_all_hide
  69+ C0A6                                     ; call    sprite_laser_show
  70+ C0A6                                      MMUSelectConsoleBank
  70+ C0A6 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  71+ C0AA 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  72+ C0AD 11 00 E0                             ld          de,ConsoleImageData
  73+ C0B0 01 00 08                             ld          bc, ScreenL1BottomLen
  74+ C0B3 CD 54 7F                             call        memcopy_dma
  75+ C0B6 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  76+ C0B9 11 00 E8                             ld          de,ConsoleAttributes
  77+ C0BC 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  78+ C0BF CD 54 7F                             call        memcopy_dma
  79+ C0C2 CD 23 7D                             call        InitialiseStars
  80+ C0C5 AF                                   xor         a
  81+ C0C6 32 AD 83                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  82+ C0C9 32 D0 C0                             ld          (CurrentLock),a             ; we are on no targetting sprites
  83+ C0CC 32 D1 C0                             ld          (ShowingLock),a
  84+ C0CF C9                                   ret
  85+ C0D0
  86+ C0D0 00           CurrentLock             DB      0
  87+ C0D1 00           ShowingLock             DB      0
  88+ C0D2 3A 9F 86     update_front_view:      ld      a,(MissileTargettingFlag)
  89+ C0D5                                      JumpIfANEquNusng StageMissileNotTargeting,  .NoTarget
  89+ C0D5 FE FF       >                        cp     StageMissileNotTargeting
  89+ C0D7 CA E7 C0    >                        jp     z,.NoTarget
  90+ C0DA                                      JumpIfANEquNusng StageMissileTargeting, .Targetting
  90+ C0DA FE FE       >                        cp     StageMissileTargeting
  90+ C0DC CA F4 C0    >                        jp     z,.Targetting
  91+ C0DF CB 7F                                bit     7,a
  92+ C0E1 20 26                                jr      nz, .Locked
  93+ C0E3 CD B6 E4                             call    sprite_targetting_hide
  94+ C0E6 C9                                   ret
  95+ C0E7 3A D1 C0     .NoTarget:              ld      a,(ShowingLock)
  96+ C0EA                                      ReturnIfAIsZero
  96+ C0EA A7          >                        and     a
  96+ C0EB C8          >                        ret     z
  97+ C0EC                                      MMUSelectSpriteBank
  97+ C0EC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  98+ C0F0 CD B6 E4                             call     sprite_targetting_hide
  99+ C0F3 C9                                   ret
 100+ C0F4              .Targetting:            CallIfMemZero CurrentLock, sprite_targetting
 100+ C0F4 3A D0 C0    >                        ld      a,(CurrentLock)
 100+ C0F7 A7          >                        and     a
 100+ C0F8 CC 52 E4    >                        call    z, sprite_targetting
 101+ C0FB                                      CallIfMemZero ShowingLock, sprite_targetting_show
 101+ C0FB 3A D1 C0    >                        ld      a,(ShowingLock)
 101+ C0FE A7          >                        and     a
 101+ C0FF CC C7 E4    >                        call    z, sprite_targetting_show
 102+ C102 21 00 01                             ld      hl,$0100                        ; set both bytes in one go
 103+ C105 22 D0 C0                             ld      (CurrentLock),hl
 104+ C108 C9                                   ret
 105+ C109              .Locked:                CallIfMemNotZero CurrentLock, sprite_lock
 105+ C109 3A D0 C0    >                        ld      a,(CurrentLock)
 105+ C10C A7          >                        and     a
 105+ C10D C4 84 E4    >                        call    nz, sprite_lock
 106+ C110                                      CallIfMemZero ShowingLock, sprite_targetting_show
 106+ C110 3A D1 C0    >                        ld      a,(ShowingLock)
 106+ C113 A7          >                        and     a
 106+ C114 CC C7 E4    >                        call    z, sprite_targetting_show
 107+ C117 21 01 01                             ld      hl,$0101                        ; set both bytes in one go
 108+ C11A 22 D0 C0                             ld      (CurrentLock),hl
 109+ C11D C9                                   ret
 110+ C11E
 111+ C11E                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 112+ C11E                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 113+ C11E 80 40 60 28  LightningLines:         db 128, 064, 096, 040, 255, 097, 042, 076, 035, 031, 082, 039, 079, 020, 026, 079, 026, 058, 018, 022, 064, 021, 032, 026, 018, 038, 025, 030, 009, 026, 035, 020, 005, 016, 018, 037, 021, 000, 000, 018
 113+ C122 FF 61 2A 4C
 113+ C126 23 1F 52 27
 113+ C12A 4F 14 1A 4F
 113+ C12E 1A 3A 12 16
 113+ C132 40 15 20 1A
 113+ C136 12 26 19 1E
 113+ C13A 09 1A 23 14
 113+ C13E 05 10 12 25
 113+ C142 15 00 00 12
 114+ C146 80 40 8B 28                          db 128, 064, 139, 040, 255, 137, 045, 160, 035, 031, 150, 040, 157, 056, 026, 160, 036, 175, 010, 022, 156, 037, 196, 040, 018, 197, 041, 223, 033, 026, 223, 033, 245, 030, 018, 223, 032, 254, 047, 018
 114+ C14A FF 89 2D A0
 114+ C14E 23 1F 96 28
 114+ C152 9D 38 1A A0
 114+ C156 24 AF 0A 16
 114+ C15A 9C 25 C4 28
 114+ C15E 12 C5 29 DF
 114+ C162 21 1A DF 21
 114+ C166 F5 1E 12 DF
 114+ C16A 20 FE 2F 12
 115+ C16E 80 40 5A 59                          db 128, 064, 090, 089, 255, 089, 089, 064, 098, 031, 079, 092, 064, 072, 025, 065, 075, 030, 070, 022, 035, 071, 038, 064, 018, 067, 095, 021, 099, 026, 031, 097, 000, 080, 018, 031, 097, 021, 110, 018
 115+ C172 FF 59 59 40
 115+ C176 62 1F 4F 5C
 115+ C17A 40 48 19 41
 115+ C17E 4B 1E 46 16
 115+ C182 23 47 26 40
 115+ C186 12 43 5F 15
 115+ C18A 63 1A 1F 61
 115+ C18E 00 50 12 1F
 115+ C192 61 15 6E 12
 116+ C196 80 40 61 71                          db 128, 064, 097, 113, 255, 098, 110, 064, 115, 031, 070, 115, 073, 127, 025, 071, 114, 060, 112, 022, 030, 120, 020, 126, 018, 070, 114, 050, 120, 026, 050, 120, 027, 119, 018, 020, 125, 010, 120, 018
 116+ C19A FF 62 6E 40
 116+ C19E 73 1F 46 73
 116+ C1A2 49 7F 19 47
 116+ C1A6 72 3C 70 16
 116+ C1AA 1E 78 14 7E
 116+ C1AE 12 46 72 32
 116+ C1B2 78 1A 32 78
 116+ C1B6 1B 77 12 14
 116+ C1BA 7D 0A 78 12
 117+ C1BE 80 40 84 59                          db 128, 064, 132, 089, 255, 131, 081, 145, 098, 031, 145, 097, 133, 103, 025, 145, 098, 150, 110, 022, 150, 109, 154, 105, 018, 150, 110, 146, 120, 026, 145, 120, 140, 126, 018, 147, 120, 159, 126, 018
 117+ C1C2 FF 83 51 91
 117+ C1C6 62 1F 91 61
 117+ C1CA 85 67 19 91
 117+ C1CE 62 96 6E 16
 117+ C1D2 96 6D 9A 69
 117+ C1D6 12 96 6E 92
 117+ C1DA 78 1A 91 78
 117+ C1DE 8C 7E 12 93
 117+ C1E2 78 9F 7E 12
 118+ C1E6 80 40 9F 67                          db 128, 064, 159, 103, 255, 161, 102, 171, 108, 031, 160, 102, 175, 127, 025, 175, 124, 200, 122, 022, 200, 121, 223, 120, 018, 224, 120, 225, 127, 026, 224, 119, 245, 116, 018, 246, 117, 254, 123, 018
 118+ C1EA FF A1 66 AB
 118+ C1EE 6C 1F A0 66
 118+ C1F2 AF 7F 19 AF
 118+ C1F6 7C C8 7A 16
 118+ C1FA C8 79 DF 78
 118+ C1FE 12 E0 78 E1
 118+ C202 7F 1A E0 77
 118+ C206 F5 74 12 F6
 118+ C20A 75 FE 7B 12
 119+ C20E 80 40 91 4A                          db 128, 064, 145, 074, 255, 145, 073, 158, 072, 031, 159, 072, 179, 064, 025, 159, 073, 185, 085, 022, 182, 084, 197, 076, 018, 195, 075, 207, 079, 026, 206, 079, 245, 063, 018, 206, 080, 245, 105, 018
 119+ C212 FF 91 49 9E
 119+ C216 48 1F 9F 48
 119+ C21A B3 40 19 9F
 119+ C21E 49 B9 55 16
 119+ C222 B6 54 C5 4C
 119+ C226 12 C3 4B CF
 119+ C22A 4F 1A CE 4F
 119+ C22E F5 3F 12 CE
 119+ C232 50 F5 69 12
 120+ C236
 121+ C236              ; Draw line at hl for b lines
 122+ C236 E5 C5        DrawLighningLine:       push    hl,,bc
 123+ C238 4E                                   ld      c,(hl)
 124+ C239 23                                   inc     hl
 125+ C23A 46                                   ld      b,(hl)
 126+ C23B 23                                   inc     hl
 127+ C23C 5E                                   ld      e,(hl)
 128+ C23D 23                                   inc     hl
 129+ C23E 56                                   ld      d,(hl)
 130+ C23F 23                                   inc     hl
 131+ C240 7E                                   ld      a,(hl)          ; colour
 132+ C241 CD 5C E6                             call    l2_draw_diagonal
 133+ C244 C1 E1                                pop     hl,,bc
 134+ C246 3E 05                                ld      a,5
 135+ C248 ED 31                                add     hl,a
 136+ C24A 10 EA                                djnz    DrawLighningLine
 137+ C24C C9                                   ret
 138+ C24D
 139+ C24D              ;Loop though all lines
 140+ C24D              ;   60$% chance of drawing a line, call draw line
 141+ C24D              ;   go to next line
 142+ C24D              ;repeat
 143+ C24D 06 07        hyperspace_Lightning:   ld      b, 7                    ; total number of lightning bolts
 144+ C24F 21 1E C1                             ld      hl,LightningLines
 145+ C252                                      MMUSelectLayer2
 145+ C252 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C256                                      ;break
 147+ C256              ; above here select which lines table we will use
 148+ C256 C5 E5        .LineLoop:              push    bc,,hl
 149+ C258 CD 41 89                             call    doRandom
 150+ C25B FE 1E                                cp      30
 151+ C25D 30 0C                                jr      nc,.NextLine
 152+ C25F CD 41 89                             call    doRandom
 153+ C262 E6 07                                and     $07
 154+ C264 3C                                   inc     a
 155+ C265 47                                   ld      b,a
 156+ C266 E1                                   pop     hl
 157+ C267 E5                                   push    hl
 158+ C268 CD 36 C2                             call    DrawLighningLine
 159+ C26B E1 C1        .NextLine:              pop     bc,,hl
 160+ C26D 16 08                                ld      d,8
 161+ C26F 1E 05                                ld      e,5
 162+ C271 ED 30                                mul
 163+ C273 19                                   add     hl,de
 164+ C274 10 E0                                djnz    .LineLoop
 165+ C276 3A 68 84                             ld      a,(HyperCircle)
 166+ C279 57                                   ld      d,a
 167+ C27A 01 80 40                             ld      bc, $4080
 168+ C27D                                      ;break
 169+ C27D 1E 00                                ld      e,$00
 170+ C27F CD EB E9                             call    l2_draw_circle_fill; ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
 171+ C282 01 80 40                             ld      bc, $4080
 172+ C285 3A 68 84                             ld      a,(HyperCircle)
 173+ C288 3C                                   inc     a
 174+ C289 57                                   ld      d,a
 175+ C28A 1E FF                                ld      e,$FF
 176+ C28C CD A7 E7                             call    l2_draw_circle
 177+ C28F 3A 68 84                             ld      a,(HyperCircle)
 178+ C292 3C                                   inc     a
 179+ C293 3C                                   inc     a
 180+ C294 FE 40                                cp      64
 181+ C296 D0                                   ret     nc
 182+ C297 32 68 84                             ld      (HyperCircle),a
 183+ C29A                                      SetCarryFlag
 183+ C29A 37          >                        scf
 184+ C29B C9                                   ret
 185+ C29C
 186+ C29C
 187+ C29C              draw_hyperspace:        MMUSelectLayer1
 187+ C29C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 188+ C2A0 CD 80 E0                             call    l1_cls
 189+ C2A3 CD 9A E0                             call    l1_attr_cls
 190+ C2A6                                      MMUSelectLayer2
 190+ C2A6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 191+ C2AA CD 03 E0                             call     asm_l2_double_buffer_on
 192+ C2AD                                      MMUSelectSpriteBank
 192+ C2AD ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 193+ C2B1 CD 6E E5                             call    sprite_cls_cursors
 194+ C2B4                                      MMUSelectConsoleBank
 194+ C2B4 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 195+ C2B8 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
 196+ C2BB 11 00 E0                             ld          de,ConsoleImageData
 197+ C2BE 01 00 08                             ld          bc, ScreenL1BottomLen
 198+ C2C1 CD 54 7F                             call        memcopy_dma
 199+ C2C4 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 200+ C2C7 11 00 E8                             ld          de,ConsoleAttributes
 201+ C2CA 01 00 01                             ld          bc, ScreenL1AttrBtmLen
 202+ C2CD CD 54 7F                             call        memcopy_dma
 203+ C2D0 CD 2E 7D                             call        InitialiseHyperStars
 204+ C2D3 AF                                   xor         a
 205+ C2D4 32 AD 83                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
 206+ C2D7 3E 02                                ld          a,2
 207+ C2D9 32 68 84                             ld          (HyperCircle),a
 208+ C2DC 3E FC                                ld          a,$FC
 209+ C2DE 32 AD 83                             ld          (DockedFlag),a
 210+ C2E1 C9                                   ret
 211+ C2E2
 212+ C2E2
 213+ C2E2              loop_hyperspace
 214+ C2E2
 215+ C2E2              dampenRate:             equ     $04
 216+ C2E2 04           dampenRcounter:         DB      dampenRate
 217+ C2E3 04           dampenPcounter:         DB      dampenRate
 218+ C2E4 AF           input_front_view:       xor         a
 219+ C2E5 2A C0 7F                             ld      hl,(addr_Pressed_Accellerate)
 220+ C2E8 7E                                   ld      a,(hl)
 221+ C2E9                                      JumpIfAIsZero     .TestDecellerate
 221+ C2E9 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 221+ C2EA CA 06 C3    >                        jp	    z, .TestDecellerate
 222+ C2ED 3A 97 83                             ld      a,(SHIPMAXSPEED)
 223+ C2F0 57                                   ld      d,a
 224+ C2F1 3A 98 83                             ld      a,(DELTA)
 225+ C2F4                                      JumpIfAGTENusng d,.TestDecellerate
 225+ C2F4 BA          >                        cp     d
 225+ C2F5 D2 06 C3    >                        jp		nc,.TestDecellerate
 226+ C2F8 3C                                   inc     a
 227+ C2F9 32 98 83                             ld      (DELTA),a
 228+ C2FC 2A 99 83                             ld      hl,(DELT4Lo)
 229+ C2FF ED 34 04 00                          add     hl,4
 230+ C303 22 99 83                             ld      (DELT4Lo),hl
 231+ C306 2A C2 7F     .TestDecellerate:       ld      hl,(addr_Pressed_Decellerate)
 232+ C309 7E                                   ld      a,(hl)
 233+ C30A                                      JumpIfAIsZero   .TestLeftPressed
 233+ C30A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 233+ C30B CA 23 C3    >                        jp	    z, .TestLeftPressed
 234+ C30E 3A 98 83                             ld      a,(DELTA)
 235+ C311                                      JumpIfAIsZero   .TestLeftPressed
 235+ C311 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 235+ C312 CA 23 C3    >                        jp	    z, .TestLeftPressed
 236+ C315 3D                                   dec     a
 237+ C316 32 98 83                             ld      (DELTA),a
 238+ C319 2A 99 83                             ld      hl,(DELT4Lo)
 239+ C31C 2B                                   dec     hl
 240+ C31D 2B                                   dec     hl
 241+ C31E 2B                                   dec     hl
 242+ C31F 2B                                   dec     hl
 243+ C320 22 99 83                             ld      (DELT4Lo),hl
 244+ C323 2A B8 7F     .TestLeftPressed:       ld      hl,(addr_Pressed_RollLeft)
 245+ C326 7E                                   ld      a,(hl)
 246+ C327                                      JumpIfAIsZero   .TestRightPressed
 246+ C327 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 246+ C328 CA 3E C3    >                        jp	    z, .TestRightPressed
 247+ C32B 3A B0 82                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 248+ C32E 21 B7 82                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 249+ C331 BE                                   cp      (hl)
 250+ C332 28 0A                                jr      z,.TestRightPressed
 251+ C334                                      ;break
 252+ C334 3D                                   dec     a                                   ; increase joystick roll
 253+ C335 32 B0 82                             ld      (JSTX),a
 254+ C338 CD 10 C0                             call    draw_front_calc_alpha
 255+ C33B C3 73 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 256+ C33E 2A BA 7F     .TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 257+ C341 7E                                   ld      a,(hl)
 258+ C342                                      JumpIfAIsZero   .DampenRoll
 258+ C342 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 258+ C343 CA 59 C3    >                        jp	    z, .DampenRoll
 259+ C346 3A B0 82                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 260+ C349 21 B6 82                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 261+ C34C BE                                   cp      (hl)
 262+ C34D 28 24                                jr      z,.TestDivePressed                   ; if its held then we don't dampen
 263+ C34F                                      ;break
 264+ C34F 3C                                   inc     a                                   ; increase joystick roll
 265+ C350 32 B0 82     .UpdateAlphRoll:        ld      (JSTX),a
 266+ C353 CD 10 C0                             call    draw_front_calc_alpha
 267+ C356 C3 73 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 268+ C359 21 E2 C2     .DampenRoll:            ld      hl,dampenRcounter
 269+ C35C 35                                   dec     (hl)
 270+ C35D 20 14                                jr      nz,.TestDivePressed
 271+ C35F 3E 04                                ld      a,dampenRate
 272+ C361 77                                   ld      (hl),a
 273+ C362 3A B0 82                             ld      a,(JSTX)
 274+ C365 FE 00                                cp      0
 275+ C367 28 0A                                jr      z, .TestDivePressed
 276+ C369 CB 7F                                bit     7,a
 277+ C36B 28 03                                jr      z,.PosRollDampen
 278+ C36D 3C           .NegRollDampen:         inc     a
 279+ C36E 18 01                                jr      .ApplyRollDampen
 280+ C370 3D           .PosRollDampen:         dec     a
 281+ C371 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 282+ C373              ; Dive and Climb input
 283+ C373 2A BC 7F     .TestDivePressed:       ld      hl,(addr_Pressed_Dive)
 284+ C376 7E                                   ld      a,(hl)
 285+ C377                                      JumpIfAIsZero   .TestClimbPressed
 285+ C377 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 285+ C378 CA 8E C3    >                        jp	    z, .TestClimbPressed
 286+ C37B 3A A6 82                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 287+ C37E 21 AB 82                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 288+ C381 BE                                   cp      (hl)
 289+ C382 28 0A                                jr      z,.TestClimbPressed
 290+ C384                                      ;break
 291+ C384 3D                                   dec     a                                   ; increase joystick roll
 292+ C385 32 A6 82                             ld      (JSTY),a
 293+ C388 CD 3D C0                             call    draw_front_calc_beta
 294+ C38B C3 C3 C3                             jp      .ForwardCursorKeysDone
 295+ C38E 2A BE 7F     .TestClimbPressed:      ld      hl,(addr_Pressed_Climb)
 296+ C391 7E                                   ld      a,(hl)
 297+ C392                                      JumpIfAIsZero   .DampenPitch
 297+ C392 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 297+ C393 CA A9 C3    >                        jp	    z, .DampenPitch
 298+ C396 3A A6 82                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 299+ C399 21 AA 82                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 300+ C39C BE                                   cp      (hl)
 301+ C39D 28 24                                jr      z,.ForwardCursorKeysDone
 302+ C39F 3C                                   inc     a                                   ; increase joystick roll
 303+ C3A0 32 A6 82     .UpdateBetaPitch:       ld      (JSTY),a
 304+ C3A3 CD 3D C0                             call    draw_front_calc_beta
 305+ C3A6 C3 C3 C3                             jp      .ForwardCursorKeysDone
 306+ C3A9 21 E3 C2     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 307+ C3AC 35                                   dec     (hl)
 308+ C3AD 20 14                                jr      nz,.ForwardCursorKeysDone
 309+ C3AF 3E 04                                ld      a,dampenRate
 310+ C3B1 77                                   ld      (hl),a
 311+ C3B2 3A A6 82                             ld      a,(JSTY)
 312+ C3B5 FE 00                                cp      0
 313+ C3B7 28 0A                                jr      z,.ForwardCursorKeysDone
 314+ C3B9 CB 7F                                bit     7,a
 315+ C3BB 28 03                                jr      z,.PosPitchDampen
 316+ C3BD 3C           .NegPitchDampen:        inc     a
 317+ C3BE 18 01                                jr      .ApplyPitchDampen
 318+ C3C0 3D           .PosPitchDampen:        dec     a
 319+ C3C1 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 320+ C3C3              ; Now test hyperpsace. We can't be docked as this is a view routine piece of logic but for say local charts we may
 321+ C3C3              ; be in flight and they have to force a forward view when hyperspace is pressed
 322+ C3C3              ; We won't do galatic here, but for other views force to forward view
 323+ C3C3 3E 24        .ForwardCursorKeysDone: ld      a,c_Pressed_Hyperspace              ; Check for hyperspace
 324+ C3C5 CD 93 80                             call    is_key_pressed
 325+ C3C8 20 48                                jr      nz,.NotHyperspace
 326+ C3CA              ; If we are in hyperspace countdown then test for hyperspace
 327+ C3CA 2A 65 84                             ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 328+ C3CD 7C                                   ld      a,h                                 ; hyperspace
 329+ C3CE B5                                   or      l                                   ; .
 330+ C3CF 20 41                                jr      nz,.CancelHyperspace                ; .
 331+ C3D1              ; check selected target if we find one then after gettting galaxy at bc a=0 if not found
 332+ C3D1 ED 5B A7 84                          ld      de,(PresentSystemX)
 333+ C3D5 2A A9 84                             ld      hl,(TargetSystemX)
 334+ C3D8 CD A6 9A                             call    compare16HLDE
 335+ C3DB 28 35                                jr      z,.NoTargetSelected                 ; can't jump to current system
 336+ C3DD 3A 94 84                             ld      a,(Galaxy)
 337+ C3E0                                      MMUSelectGalaxyA
 337+ C3E0 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 338+ C3E3 ED 4B A9 84                          ld      bc,(TargetSystemX)
 339+ C3E7 CD BB FA                             call    galaxy_name_at_bc
 340+ C3EA FE 00                                cp      0
 341+ C3EC 28 24                                jr      z,.NotHyperspace
 342+ C3EE              ; check fuel is sufficient
 343+ C3EE ED 4B A7 84                          ld      bc,(PresentSystemX)
 344+ C3F2 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 345+ C3F6 ED 4B A9 84                          ld      bc,(TargetSystemX)
 346+ C3FA ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 347+ C3FE CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 348+ C401 7C                                   ld      a,h
 349+ C402 A7                                   and     a
 350+ C403 20 0D                                jr      nz,.InsufficientFuel            ; max jump capacity is 25 ly for any ship
 351+ C405 3A 0A 89                             ld      a,(Fuel)
 352+ C408                                      JumpIfALTNusng    l, .InsufficientFuel
 352+ C408 BD          >                        cp      l
 352+ C409 DA 12 C4    >                        jp		c, .InsufficientFuel
 353+ C40C              ; set up timer countdown
 354+ C40C 21 0B 0B                             ld      hl,HyperSpaceTimers                 ; set both timers to 15
 355+ C40F 22 65 84                             ld      (InnerHyperCount),hl                ; .
 356+ C412              .CancelHyperspace
 357+ C412              .NoTargetSelected
 358+ C412              .InsufficientFuel
 359+ C412              .NotHyperspace:
 360+ C412 CD CA 87     .CheckForLaserPressed:  call    IsLaserUseable                      ; no laser or destroyed?
 361+ C415 28 44                                jr      z,.CheckTargetting
 362+ C417              .CanLaserStillFire:     SetMemFalse FireLaserPressed                ; default to no laser
 362+ C417 3E FF       >                        ld      a,$FF
 362+ C419 32 8C 84    >                        ld      (FireLaserPressed),a
 363+ C41C 3A B3 86                             ld      a,(CurrLaserPulseRate)              ; if not beam type
 364+ C41F                                      JumpIfAIsZero .BeamType                     ; .
 364+ C41F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 364+ C420 CA 4D C4    >                        jp	    z, .BeamType
 365+ C423 47                                   ld      b,a                                 ; and not run out of pulses
 366+ C424 3A C1 86                             ld      a,(CurrLaserPulseRateCount)         ;
 367+ C427 3A BE 86                             ld      a,(CurrLaserPulseOnCount)           ;    if not already on
 368+ C42A                                      JumpIfAEqNusng  b, .PulseLimitReached       ;
 368+ C42A B8          >                        cp     b
 368+ C42B CA 5B C4    >                        jp      z,.PulseLimitReached
 369+ C42E 21 BF 86                             ld      hl,CurrLaserPulseOffCount           ;       and not in off phase
 370+ C431 B6                                   or      (hl)                                ;
 371+ C432 23                                   inc     hl  ; CurrLaserPulseRestCount       ;       and not in rest phase.
 372+ C433 B6                                   or      (hl)                                ;    .
 373+ C434 20 25                                jr      nz, .CheckTargetting                ;    .
 374+ C436 3E 14        .IsFirePressed:         ld      a,c_Pressed_FireLaser               ;       if fire is pressed
 375+ C438 CD 86 80                             call    is_key_up_state                     ;       .
 376+ C43B 28 1E                                jr      z,.CheckTargetting                  ;       .
 377+ C43D 3A C1 86     .CanProcesFire:         ld      a,(CurrLaserPulseRateCount)         ;            pulse rate count ++
 378+ C440 3C                                   inc     a                                   ;            .
 379+ C441 32 C1 86     .StillHavePulsesLeft:   ld      (CurrLaserPulseRateCount),a         ;            .
 380+ C444                                      ldCopyByte CurrLaserPulseOnTime, CurrLaserPulseOnCount  ; pulse on count = pulse on time
 380+ C444 3A B4 86    >                        ld       a,(CurrLaserPulseOnTime)
 380+ C447 32 BE 86    >                        ld       (CurrLaserPulseOnCount),a
 381+ C44A                                   ;   ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount; pulse off count = pulse off time
 382+ C44A                                   ;   ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount  ; pulse rest count = pulse rest time
 383+ C44A C3 5B C4                             jp      .CheckTargetting
 384+ C44D 3E 14        .BeamType:              ld      a,c_Pressed_FireLaser               ; else (beam type) if fire is pressed
 385+ C44F CD 86 80                             call    is_key_up_state                     ;                   .
 386+ C452 28 07                                jr      z,.CheckTargetting                  ;                   .
 387+ C454                                      SetMemTrue FireLaserPressed                 ;                   set pulse on to 1
 387+ C454 AF          >                        xor     a
 387+ C455 32 8C 84    >                        ld      (FireLaserPressed),a
 388+ C458 C3 5B C4                             jp      .CheckTargetting
 389+ C45B              .PulseLimitReached:     ;ZeroA                                       ;
 390+ C45B                                      ;ld      (CurrLaserPulseRateCount),a         ;
 391+ C45B                                      ;ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount   ; start the rest phase
 392+ C45B              ; . Here we check to see if the target lock has been pressed
 393+ C45B CD C2 81     .CheckTargetting:       call    TargetMissileTest
 394+ C45E 3E 18        .CheckForMissile:       ld      a,c_Pressed_FireMissile             ; launch pressed?
 395+ C460 CD 93 80                             call    is_key_pressed
 396+ C463 20 13                                jr      nz,.NotMissileLaunch
 397+ C465                                      AnyMissilesLeft
 397+ C465 3A 0A 84    >                        ld      a,(NbrMissiles)
 397+ C468 A7          >                        and     a
 398+ C469 28 0D                                jr      z,.NotMissileLaunch                 ; no missiles in rack
 399+ C46B CD 4D 88                             call    IsMissileLockedOn
 400+ C46E 28 08                                jr      z,.MissileNotLocked
 401+ C470              .MissileLaunch:         SetMissileLaunch
 401+ C470 3A 9F 86    >                        ld      a,(MissileTargettingFlag)
 401+ C473 E6 0F       >                        and     $0F
 401+ C475 32 9F 86    >                        ld      (MissileTargettingFlag),a
 402+ C478              .MissileNotLocked:                       ; later on we need a "bing bong" nose for trying to launch an unlocked missile
 403+ C478              .NotMissileLaunch:
 404+ C478 3A 28 89     .CheckForECM:           ld      a,(ECMPresent)
 405+ C47B                                      JumpIfAEqNusng EquipmentItemNotFitted,.NoECM
 405+ C47B FE 00       >                        cp     EquipmentItemNotFitted
 405+ C47D CA A0 C4    >                        jp      z,.NoECM
 406+ C480 3A 0B 84     .CheckECMActive:        ld      a,(PlayerECMActiveCount)
 407+ C483                                      JumpIfAIsNotZero .NoECM
 407+ C483 A7          >                        and     a
 407+ C484 C2 A0 C4    >                        jp	    nz,.NoECM
 408+ C487 3E 1C        .CheckForKeyPress:      ld      a, c_Pressed_ECM
 409+ C489 CD 93 80                             call    is_key_pressed
 410+ C48C 20 12                                jr      nz, .NoECM
 411+ C48E              .FireECM:               SetMemToN      PlayerECMActiveCount, ECMCounterMax
 411+ C48E 3E 80       >                        ld      a,ECMCounterMax
 411+ C490 32 0B 84    >                        ld      (PlayerECMActiveCount),a
 412+ C493 3A AE 82                             ld      a,(ECMCountDown)
 413+ C496                                      JumpIfAGTENusng ECMCounterMax, .NoECM
 413+ C496 FE 80       >                        cp     ECMCounterMax
 413+ C498 D2 A0 C4    >                        jp		nc,.NoECM
 414+ C49B                                      SetMemToN      ECMCountDown, ECMCounterMax
 414+ C49B 3E 80       >                        ld      a,ECMCounterMax
 414+ C49D 32 AE 82    >                        ld      (ECMCountDown),a
 415+ C4A0 C9           .NoECM:                 ret
 416+ C4A1
 417+ C4A1
 418+ C4A1
 419+ C4A1
 420+ C4A1
 421+ C4A1
 422+ C4A1
# file closed: ./Views/Front_View.asm
 834  C4A1                  DISPLAY "Bank ",BankFrontView," - Bytes free ",/D, $2000 - ($-ViewFrontAddr), " - BankFrontView"
 835  C4A1              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
 836  C4A1                  SLOT    MenuStatusAddr
 837  C4A1                  PAGE    BankMenuStatus
 838  C4A1                  ORG     MenuStatusAddr
 839  C000                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 40 02 E1 B0  status_boiler_text		DW $0240,txt_commander
   4+ C014 90 02 A0 86  						DW $0290,CommanderName
   5+ C018 08 0B F5 B0  						DW $0B08,txt_present_system
   6+ C01C 08 13 08 B1  						DW $1308,txt_hyperspace_system
   7+ C020 08 1B 1B B1  						DW $1B08,txt_condition
   8+ C024 08 23 29 B1  						DW $2308,txt_fuel
   9+ C028 08 2B 37 B1  						DW $2B08,txt_cash
  10+ C02C 08 33 45 B1  						DW $3308,txt_legal_status
  11+ C030 08 3B 53 B1  						DW $3B08,txt_rating
  12+ C034 08 4B 61 B1  						DW $4B08,txt_equipment
  13+ C038
  14+ C038 00 00        equipment_cursor		DW  $0000
  15+ C03A              present_position		equ	$0B98
  16+ C03A              hyperspace_position		equ	$1398
  17+ C03A              condition_position		equ	$1B70
  18+ C03A              fuel_position			equ	$2370
  19+ C03A              cash_position			equ	$2B70
  20+ C03A              legal_status_position	equ $3370
  21+ C03A              rank_position			equ $3B70
  22+ C03A              equipment_position		equ $5340
  23+ C03A              equipment_position2		equ $5378
  24+ C03A              equipmax_row			equ $FF
  25+ C03A
  26+ C03A 00           STAT_selected_row       DB 0
  27+ C03B 00           STAT_current_topItem    DB 0
  28+ C03C 00           STAT_current_end        DB 0
  29+ C03D              STAT_buffer_rows         EQU     128
  30+ C03D              STAT_buffer_row_len      EQU     24
  31+ C03D              STAT_eqip_window_len    EQU 10
  32+ C03D              STAT_display_buff_len   EQU     STAT_buffer_rows *   STAT_buffer_row_len
  33+ C03D 00 00 00...  STAT_display_buffer:    DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  34+ CC3D              STAT_position			equ $5840
  35+ CC3D 00 00 00...  STAT_cash_amount    	DS 10
  36+ CC47 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  37+ CC4B
  38+ CC4B 00 00 00...  stat_present_name       DS  30
  39+ CC69 00                                   DB  0
  40+ CC6A 00 00 00...  stat_target_name        DS  30
  41+ CC88 00                                   DB  0
  42+ CC89
  43+ CC89 21 7F E8     stat_copy_to_name:      ld      hl,GalaxyExpandedName
  44+ CC8C 01 1E 00                             ld      bc,30
  45+ CC8F ED B0                                ldir
  46+ CC91 C9                                   ret
  47+ CC92
  48+ CC92              ;----------------------------------------------------------------------------------------------------------------------------------
  49+ CC92              STAT_print_boiler_text: INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++CC92
   2++CC92              ;">print_boilder_text hl = text structure, b = message count"
   3++CC92              .BoilerTextLoop:
   4++CC92 C5           	push		bc			; Save Message Count loop value
   5++CC93 4E           	ld			c,(hl)		; Get Row into b
   6++CC94 23           	inc			hl
   7++CC95 46           	ld			b,(hl)		; Get Col into b
   8++CC96 23           	inc			hl
   9++CC97 5E           	ld			e,(hl)		; Get text address Lo into E
  10++CC98 23           	inc			hl
  11++CC99 56           	ld			d,(hl)		; Get text address Hi into E
  12++CC9A 23           	inc			hl
  13++CC9B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++CC9C EB           	ex			de,hl		; now hl = address of text data
  15++CC9D 1E FF        	ld			e,txt_status_colour
  16++CC9F C5           	push		bc
  17++CCA0 D1           	pop			de
  18++CCA1                  MMUSelectLayer1
  18++CCA1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++CCA5 CD C8 E0     	call		l1_print_at
  20++CCA8 E1           	pop			hl
  21++CCA9 C1           	pop			bc
  22++CCAA 10 E6        	djnz		.BoilerTextLoop
  23++CCAC C9           	ret
  24++CCAD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  50+ CCAD              ;----------------------------------------------------------------------------------------------------------------------------------
  51+ CCAD DD 22 51 CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  52+ CCB1 ED 53 53 CD                          ld (.STATclcn32zIX),de
  53+ CCB5 DD 21 4D CD                          ld ix,.STATclcn32t+36
  54+ CCB9 06 09                                ld b,9
  55+ CCBB 0E 00                                ld c,0
  56+ CCBD 3E 30        .STATclcn321:           ld a,'0'
  57+ CCBF B7                                   or a
  58+ CCC0 DD 5E 00     .STATclcn322:           ld e,(ix+0)
  59+ CCC3 DD 56 01                             ld d,(ix+1)
  60+ CCC6 2A 51 CD                             ld hl,(.STATclcn32z)
  61+ CCC9 ED 52                                sbc hl,de
  62+ CCCB 22 51 CD                             ld (.STATclcn32z),hl
  63+ CCCE DD 5E 02                             ld e,(ix+2)
  64+ CCD1 DD 56 03                             ld d,(ix+3)
  65+ CCD4 2A 53 CD                             ld hl,(.STATclcn32zIX)
  66+ CCD7 ED 52                                sbc hl,de
  67+ CCD9 22 53 CD                             ld (.STATclcn32zIX),hl
  68+ CCDC 38 04                                jr c,.STATclcn325
  69+ CCDE 0C                                   inc c
  70+ CCDF 3C                                   inc a
  71+ CCE0 18 DE                                jr .STATclcn322
  72+ CCE2 DD 5E 00     .STATclcn325:           ld e,(ix+0)
  73+ CCE5 DD 56 01                             ld d,(ix+1)
  74+ CCE8 2A 51 CD                             ld hl,(.STATclcn32z)
  75+ CCEB 19                                   add hl,de
  76+ CCEC 22 51 CD                             ld (.STATclcn32z),hl
  77+ CCEF DD 5E 02                             ld e,(ix+2)
  78+ CCF2 DD 56 03                             ld d,(ix+3)
  79+ CCF5 2A 53 CD                             ld hl,(.STATclcn32zIX)
  80+ CCF8 ED 5A                                adc hl,de
  81+ CCFA 22 53 CD                             ld (.STATclcn32zIX),hl
  82+ CCFD 11 FC FF                             ld de,-4
  83+ CD00 DD 19                                add ix,de
  84+ CD02 0C                                   inc c
  85+ CD03 0D                                   dec c
  86+ CD04 28 05                                jr z,.STATclcn323
  87+ CD06 FD 77 00                             ld (iy+0),a
  88+ CD09 FD 23                                inc iy
  89+ CD0B 10 B0        .STATclcn323:           djnz .STATclcn321
  90+ CD0D 3A 51 CD                             ld a,(.STATclcn32z)
  91+ CD10 C6 30                                add A,'0'
  92+ CD12 FD 77 00                             ld (iy+0),a
  93+ CD15 FD 36 02 00                          ld (iy+2),0
  94+ CD19 FD 7E 00                             ld      a,(IY+0)
  95+ CD1C FD 77 01                             ld      (IY+1),a
  96+ CD1F 3E 2E                                ld      a,"."
  97+ CD21 FD 77 00                             ld      (IY+0),a
  98+ CD24 FD 23                                inc     IY
  99+ CD26 FD 23                                inc     IY
 100+ CD28 C9                                   ret
 101+ CD29 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 101+ CD2D 0A 00 00 00
 101+ CD31 64 00 00 00
 101+ CD35 E8 03 00 00
 101+ CD39 10 27 00 00
 102+ CD3D A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 102+ CD41 40 42 0F 00
 102+ CD45 80 96 98 00
 102+ CD49 00 E1 F5 05
 102+ CD4D 00 CA 9A 3B
 103+ CD51 00 00        .STATclcn32z            ds 2
 104+ CD53 00 00        .STATclcn32zIX          ds 2
 105+ CD55              ;----------------------------------------------------------------------------------------------------------------------------------
 106+ CD55 2A 08 89     STAT_GetCash:           ld		hl,(Cash+2)
 107+ CD58 EB                                   ex      de,hl
 108+ CD59 DD 2A 06 89                          ld      ix,(Cash)
 109+ CD5D FD 21 3D CC                          ld		iy,STAT_cash_amount
 110+ CD61 CD AD CC                             call 	STAT_DispDEIXtoIY
 111+ CD64 FD E5                                push    iy
 112+ CD66 D1                                   pop     de
 113+ CD67 21 47 CC                             ld      hl,STAT_cash_UoM
 114+ CD6A 01 04 00                             ld      bc,4
 115+ CD6D ED B0                                ldir
 116+ CD6F C9                                   ret
 117+ CD70              ;----------------------------------------------------------------------------------------------------------------------------------
 118+ CD70 7E           STAT_expand_word:       ld      a,(hl)
 119+ CD71 FE 00                                cp      0
 120+ CD73 C8                                   ret     z
 121+ CD74 12                                   ld      (de),a
 122+ CD75 23                                   inc     hl
 123+ CD76 13                                   inc     de
 124+ CD77 18 F7                                jr      STAT_expand_word
 125+ CD79
 126+ CD79              ; hl = list of words
 127+ CD79              ; de = adress to expand to
 128+ CD79 7E           STAT_expand_name:       ld      a,(hl)
 129+ CD7A 47                                   ld      b,a
 130+ CD7B 23                                   inc     hl
 131+ CD7C 7E                                   ld      a,(hl)              ; its a 16 bit
 132+ CD7D 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 133+ CD7E B0                                   or      b
 134+ CD7F 20 01                                jr      nz,.MoreToDo
 135+ CD81              ;                        ld      (de),a we dont want the null marker now
 136+ CD81 C9                                   ret
 137+ CD82 E5 D5        .MoreToDo:              push    hl,,de
 138+ CD84 7E                                   ld      a,(hl)              ; bodge for now no optimise
 139+ CD85 5F                                   ld      e,a
 140+ CD86 23                                   inc     hl
 141+ CD87 7E                                   ld      a,(hl)
 142+ CD88 57                                   ld      d,a
 143+ CD89 EB                                   ex      hl,de               ; hl is now Word... address
 144+ CD8A D1                                   pop     de                  ; de back to pointer to buffer
 145+ CD8B CD 70 CD     .ProcessWord:           call    STAT_expand_word
 146+ CD8E 3E 20                                ld      a," "               ; speculative space
 147+ CD90 12                                   ld      (de),a
 148+ CD91 13                                   inc     de
 149+ CD92 E1                                   pop     hl                  ; get string pointer back
 150+ CD93 23                                   inc     hl
 151+ CD94 23                                   inc     hl                  ; on to next word
 152+ CD95 18 E2                                jr      STAT_expand_name
 153+ CD97
 154+ CD97              STAT_First_Item         EQU     EQ_CARGO_BAY
 155+ CD97 3A 94 84     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 156+ CD9A                                      MMUSelectGalaxyA
 156+ CD9A ED 92 57    >                     nextreg GalaxyDataMMU,     a
 157+ CD9D 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 158+ CDA0 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 159+ CDA2 11 00 0C                             ld      de, STAT_display_buff_len
 160+ CDA5 CD 2E 7F                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 161+ CDA8 21 54 C0                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 162+ CDAB 11 18 00                             ld      de,STAT_buffer_row_len
 163+ CDAE 06 80                                ld      b,STAT_buffer_rows
 164+ CDB0                                      ZeroA
 164+ CDB0 AF          >                        xor a
 165+ CDB1 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 166+ CDB2 19                                   add     hl,de
 167+ CDB3 10 FC                                djnz    .EoLLoop
 168+ CDB5 DD 21 27 89                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 169+ CDB9 FD 21 3D C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 170+ CDBD 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; we do not include Fuel and Missile counts
 171+ CDBF 0E 00                                ld      c,0                                         ; Current Row
 172+ CDC1 1E 02                                ld      e,STAT_First_Item
 173+ CDC3 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 174+ CDC6                                      JumpIfAIsZero .NotFitted                            ; optimised check for EquipmentItemNotFitted
 174+ CDC6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 174+ CDC7 CA EB CD    >                        jp	    z, .NotFitted
 175+ CDCA D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 175+ CDCE E5 C5
 176+ CDD0 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 177+ CDD3 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 178+ CDD5 ED 30                                mul
 179+ CDD7 19                                   add     hl,de                                       ; hl = dword list of work pointers
 180+ CDD8 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 181+ CDDC CD 79 CD                             call    STAT_expand_name                           ; expand name
 182+ CDDF C1 DD E1 FD                          pop     iy,,ix,,bc
 182+ CDE3 E1
 183+ CDE4 11 18 00                             ld      de,STAT_buffer_row_len
 184+ CDE7 FD 19                                add     iy,de                                       ; now iy = start of next column
 185+ CDE9 D1                                   pop     de
 186+ CDEA 0C                                   inc     c
 187+ CDEB              .NotFitted:
 188+ CDEB DD 23        .DoneFittedCheck:       inc     ix
 189+ CDED 1C                                   inc     e
 190+ CDEE 10 D3                                djnz    .ProcessRow
 191+ CDF0 79           .DoneProcess:           ld      a,c
 192+ CDF1 32 3C C0                             ld      (STAT_current_end),a
 193+ CDF4 C9                                   ret
 194+ CDF5
 195+ CDF5 06 0A        draw_STAT_boilertext:   ld		b,10
 196+ CDF7 21 10 C0                             ld		hl,status_boiler_text
 197+ CDFA CD 92 CC                             call	STAT_print_boiler_text
 198+ CDFD C9                                   ret
 199+ CDFE
 200+ CDFE              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ CDFE 01 01 01     draw_STAT_maintext:    	ld		bc,$0101
 202+ CE01 11 FD BE                             ld		de,$BEFD
 203+ CE04 3E C0                                ld		a,$C0
 204+ CE06                                      MMUSelectLayer2
 204+ CE06 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 205+ CE0A CD 49 E2                             call	l2_draw_box
 206+ CE0D CD F5 CD                             call    draw_STAT_boilertext
 207+ CE10 3A 94 84     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 208+ CE13                                      MMUSelectGalaxyA
 208+ CE13 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 209+ CE16 ED 4B A7 84                          ld      bc, (PresentSystemX)
 210+ CE1A CD BB FA                             call    galaxy_name_at_bc
 211+ CE1D 11 4B CC                             ld      de,stat_present_name
 212+ CE20 CD 89 CC                             call    stat_copy_to_name
 212+ CE23
 213+ CE23 01 98 0B                             ld      bc,present_position
 214+ CE26 21 4B CC                             ld      hl,stat_present_name
 215+ CE29                                      MMUSelectLayer2
 215+ CE29 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 216+ CE2D 1E FF                                ld      e,txt_status_colour
 217+ CE2F CD C2 E1                             call    l2_print_at
 218+ CE32 3A 94 84     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 219+ CE35                                      MMUSelectGalaxyA
 219+ CE35 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 220+ CE38 ED 4B A9 84                          ld      bc, (TargetSystemX)
 221+ CE3C CD BB FA                             call    galaxy_name_at_bc
 222+ CE3F 11 6A CC                             ld      de,stat_target_name
 223+ CE42 CD 89 CC                             call    stat_copy_to_name
 223+ CE45
 224+ CE45 01 98 13                             ld      bc,hyperspace_position
 225+ CE48 21 6A CC                             ld      hl,stat_target_name
 226+ CE4B                                      MMUSelectLayer2
 226+ CE4B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 227+ CE4F 1E FF                                ld      e,txt_status_colour
 228+ CE51 CD C2 E1                             call    l2_print_at
 229+ CE54 CD 0D CF     .StatusText:	        call	get_cmdr_condition
 230+ CE57 21 76 8B                             ld		hl, ConditionNameIdx
 231+ CE5A CD 78 8C                             call	getTableText
 232+ CE5D 01 70 1B                             ld		bc,condition_position
 233+ CE60                                      MMUSelectLayer2
 233+ CE60 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 234+ CE64 1E FF                                ld      e,txt_status_colour
 235+ CE66 CD C2 E1                             call    l2_print_at
 236+ CE69 CD BE B1     .DisplayFuel:           call	GetFuelLevel
 237+ CE6C 21 6C B1                             ld		hl, txt_fuel_level
 238+ CE6F 7E                                   ld		a,(hl)
 239+ CE70 FE 30                                cp		'0'
 240+ CE72 20 01                                jr		nz,.PrintFuel
 241+ CE74 23           .SkipLeadingZero:	    inc		hl
 242+ CE75 01 70 23     .PrintFuel:             ld		bc,fuel_position
 243+ CE78                                      MMUSelectLayer2
 243+ CE78 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 244+ CE7C 1E FF                                ld      e,txt_status_colour
 245+ CE7E CD C2 E1                             call    l2_print_at
 246+ CE81 CD 55 CD     .DisplayCash:           call	STAT_GetCash
 247+ CE84 01 70 2B                             ld		bc,cash_position
 248+ CE87 21 3D CC                             ld		hl,STAT_cash_amount
 249+ CE8A                                      MMUSelectLayer2
 249+ CE8A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 250+ CE8E 1E FF                                ld      e,txt_status_colour
 251+ CE90 CD C2 E1                             call    l2_print_at
 252+ CE93 3A 0C 84     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 253+ CE96 FE 00                                cp		0
 254+ CE98 20 05                                jr		nz,.Naughty
 255+ CE9A 21 57 8D                             ld		hl,WordClean
 256+ CE9D 18 0C                                jr		.DisplayLegalStatus
 257+ CE9F FE 32        .Naughty:               cp		50
 258+ CEA1 38 05                                jr		c,.JustOffender
 259+ CEA3 21 66 8D     .VeryNaughty:           ld		hl,WordFugitive
 260+ CEA6 18 03                                jr		.DisplayLegalStatus
 261+ CEA8 21 5D 8D     .JustOffender:          ld		hl,WordOffender
 262+ CEAB 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 263+ CEAE                                      MMUSelectLayer2
 263+ CEAE ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 264+ CEB2 1E FF                                ld      e,txt_status_colour
 265+ CEB4 CD C2 E1                             call    l2_print_at
 266+ CEB7 ED 5B 1F 84  .DisplayRating:         ld		de,(KillTally)
 267+ CEBB CD 83 8C                             call	getRankIndex
 268+ CEBE 21 62 8C                             ld		hl, RankingNameIdx
 269+ CEC1 CD 78 8C                             call	getTableText
 270+ CEC4 01 70 3B                             ld		bc,rank_position
 271+ CEC7                                      MMUSelectLayer2
 271+ CEC7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 272+ CECB 1E FF                                ld      e,txt_status_colour
 273+ CECD CD C2 E1                             call    l2_print_at
 274+ CED0 C9                                   ret
 275+ CED1
 276+ CED1
 277+ CED1              draw_STAT_items:        MMUSelectLayer1
 277+ CED1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 278+ CED5 CD 80 E0                             call    l1_cls
 279+ CED8                                      ; add in all the status stuff later
 280+ CED8 3A 3B C0                             ld      a,(STAT_current_topItem)                    ; Move to correct top of stat list item
 281+ CEDB 16 18                                ld      d,STAT_buffer_row_len                       ; so de = offset to first item in display
 282+ CEDD 5F                                   ld      e,a
 283+ CEDE ED 30                                mul
 284+ CEE0 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl = pointer to first item in display
 285+ CEE3 19                                   add     hl,de                                       ;
 286+ CEE4 3A 3B C0                             ld      a,(STAT_current_topItem)                    ; set a to number of lines to display
 287+ CEE7 47                                   ld      b,a                                         ;
 288+ CEE8 3A 3C C0                             ld      a,(STAT_current_end)                        ;
 289+ CEEB 90                                   sub     b                                           ;
 290+ CEEC                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen   ; if there are enough then just do a screen fill
 290+ CEEC FE 0A       >                        cp      STAT_eqip_window_len
 290+ CEEE DA F5 CE    >                        jp		c, .FillScreen
 291+ CEF1 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len                      ; if its more than a screen then window
 292+ CEF3 18 01                                jr      .ReadyToPrint
 293+ CEF5 47           .FillScreen:            ld      b,a                                         ; b = the mumber of rows to display
 294+ CEF6 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 295+ CEF9 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                                ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 296+ CEFC CD C8 E0                             call    l1_print_at
 296+ CEFF
 297+ CEFF C1 E1                                pop     hl,,bc                                      ; get mesage addr back and move down one line
 298+ CF01 11 18 00                             ld      de,STAT_buffer_row_len
 299+ CF04 19                                   add     hl,de
 300+ CF05 D1                                   pop     de                                           ; get output row back
 301+ CF06 3E 08                                ld      a,8
 302+ CF08 82                                   add     a,d
 303+ CF09 57                                   ld      d,a
 304+ CF0A 10 ED                                djnz    .DrawARow
 305+ CF0C C9                                   ret
 306+ CF0D
 307+ CF0D              ;----------------------------------------------------------------------------------------------------------------------------------
 308+ CF0D
 309+ CF0D 3A AD 83     get_cmdr_condition:     ld			a,(DockedFlag)
 310+ CF10 FE FF                                cp			StatePlayerDocked
 311+ CF12 28 17                                jr			z,.PlayerIsDocked
 312+ CF14              .PlayerNotDocked:	    ReturnIfMemTrue    SpaceStationSafeZone
 312+ CF14 3A 8D 84    >                        ld      a,(SpaceStationSafeZone)
 312+ CF17 A7          >                        and     a
 312+ CF18 C8          >                        ret     z
 313+ CF19 CD C3 88                             call        AreShipsPresent
 314+ CF1C 38 03                                jr          c,.NoShipsAround
 315+ CF1E 3E 01                                ld          a,1
 316+ CF20 C9                                   ret
 317+ CF21 3A 9C 86     .NoShipsAround:         ld			a,(PlayerEnergy)
 318+ CF24 FE 80                                cp			$80
 319+ CF26 3E 01                                ld          a,1
 320+ CF28 CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 321+ CF2A C9                                   ret
 322+ CF2B AF           .PlayerIsDocked:        xor			a
 323+ CF2C C9                                   ret
 324+ CF2D
 325+ CF2D              draw_status_menu:       InitNoDoubleBuffer
 325+ CF2D             >                            MMUSelectLayer1
 325+ CF2D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 325+ CF31 CD 80 E0    >                            call	l1_cls
 325+ CF34 3E 07       >                            ld		a,7
 325+ CF36 CD 9B E0    >                            call	l1_attr_cls_to_a
 325+ CF39             >                            MMUSelectLayer2
 325+ CF39 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 325+ CF3D CD 09 E0    >                            call    asm_l2_double_buffer_off
 325+ CF40 CD FF E0    >                            call	l2_cls	; Get some space
 325+ CF43             >                            MMUSelectSpriteBank
 325+ CF43 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 325+ CF47 CD 6E E5    >                            call    sprite_cls_cursors
 326+ CF4A 3E 08                                ld		a,8
 327+ CF4C 32 A9 83                             ld		(MenuIdMax),a
 328+ CF4F 01 01 01     .Drawbox:               ld		bc,$0101
 329+ CF52 11 FD BE                             ld		de,$BEFD
 330+ CF55 3E C0                                ld		a,$C0
 331+ CF57                                      MMUSelectLayer2
 331+ CF57 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 332+ CF5B CD 49 E2                             call	l2_draw_box
 333+ CF5E 01 01 0A                             ld		bc,$0A01
 334+ CF61 11 C0 FE                             ld		de,$FEC0
 335+ CF64                                      SetMemToN STAT_current_topItem, 0
 335+ CF64 3E 00       >                        ld      a,0
 335+ CF66 32 3B C0    >                        ld      (STAT_current_topItem),a
 336+ CF69 CD B3 E2                             call	l2_draw_horz_line
 337+ CF6C CD 97 CD     .equipment              call    STAT_buffer_list
 338+ CF6F CD D1 CE                             call    draw_STAT_items
 339+ CF72 CD FE CD                             call    draw_STAT_maintext
 340+ CF75 C9                                   ret
 341+ CF76
 342+ CF76              ;----------------------------------------------------------------------------------------------------------------------------------
 343+ CF76              ; Handles all the input whilst in the market menu
 344+ CF76 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 345+ CF78 CD 93 80                             call    is_key_pressed
 346+ CF7B CC 87 CF                             call    z,STAT_UpPressed
 347+ CF7E 3E 4C                                ld      a,c_Pressed_CursorDown
 348+ CF80 CD 93 80                             call    is_key_pressed
 349+ CF83 CC 9C CF                             call    z,STAT_DownPressed
 350+ CF86 C9                                   ret
 351+ CF87
 352+ CF87              ;----------------------------------------------------------------------------------------------------------------------------------
 353+ CF87 AF           STAT_UpPressed:         xor     a
 354+ CF88 32 3A C0                             ld      (STAT_selected_row),a
 355+ CF8B 3A 3B C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 356+ CF8E FE 00                                cp      0
 357+ CF90 C8                                   ret     z
 358+ CF91 3D                                   dec     a           ; chjange later to buffering step back 1
 359+ CF92 32 3B C0                             ld      (STAT_current_topItem),a
 360+ CF95 CD D1 CE                             call    draw_STAT_items
 361+ CF98 CD F5 CD                             call    draw_STAT_boilertext
 362+ CF9B C9                                   ret
 363+ CF9C              ;----------------------------------------------------------------------------------------------------------------------------------
 364+ CF9C 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 365+ CF9E 32 3A C0                             ld      (STAT_selected_row),a
 366+ CFA1 3A 3C C0                             ld      a,(STAT_current_end)
 367+ CFA4 47                                   ld      b,a                             ; This check is if the current list is < one screen
 368+ CFA5 05                                   dec     b
 369+ CFA6 3A 3A C0                             ld      a,(STAT_selected_row)
 370+ CFA9 B8                                   cp      b
 371+ CFAA C8                                   ret     z
 372+ CFAB FE 09                                cp      STAT_eqip_window_len-1
 373+ CFAD 28 05                                jr      z, .check_scroll_down
 374+ CFAF 21 3A C0                             ld      hl,STAT_selected_row
 375+ CFB2 34                                   inc     (hl)
 376+ CFB3 C9                                   ret
 377+ CFB4 47           .check_scroll_down:     ld      b,a
 378+ CFB5 3A 3B C0                             ld      a,(STAT_current_topItem)
 379+ CFB8 80                                   add     b
 380+ CFB9 3C                                   inc     a
 381+ CFBA 21 3C C0                             ld      hl,STAT_current_end
 382+ CFBD                                      ReturnIfAGTEusng      (hl)
 382+ CFBD BE          >                        cp    (hl)
 382+ CFBE D0          >                        ret	 nc
 383+ CFBF 21 3B C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 384+ CFC2 34                                   inc     (hl)
 385+ CFC3 CD D1 CE                             call    draw_STAT_items
 386+ CFC6 CD F5 CD                             call    draw_STAT_boilertext
 387+ CFC9 C9                                   ret
 388+ CFCA
# file closed: ./Menus/status_menu.asm
 840  CFCA                  DISPLAY "Bank ",BankMenuStatus," - Bytes free ",/D, $2000 - ($-MenuStatusAddr), " - BankMenuStatus"
 841  CFCA              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
 842  CFCA                  SLOT    MenuEquipSAddr
 843  CFCA                  PAGE    BankMenuEquipS
 844  CFCA                  ORG     MenuEquipSAddr
 845  C000                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 9D 93  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E              .BoilerTextLoop:
   4++D26E C5           	push		bc			; Save Message Count loop value
   5++D26F 4E           	ld			c,(hl)		; Get Row into b
   6++D270 23           	inc			hl
   7++D271 46           	ld			b,(hl)		; Get Col into b
   8++D272 23           	inc			hl
   9++D273 5E           	ld			e,(hl)		; Get text address Lo into E
  10++D274 23           	inc			hl
  11++D275 56           	ld			d,(hl)		; Get text address Hi into E
  12++D276 23           	inc			hl
  13++D277 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++D278 EB           	ex			de,hl		; now hl = address of text data
  15++D279 1E FF        	ld			e,txt_status_colour
  16++D27B C5           	push		bc
  17++D27C D1           	pop			de
  18++D27D                  MMUSelectLayer1
  18++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++D281 CD C8 E0     	call		l1_print_at
  20++D284 E1           	pop			hl
  21++D285 C1           	pop			bc
  22++D286 10 E6        	djnz		.BoilerTextLoop
  23++D288 C9           	ret
  24++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A 08 89     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A 06 89                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD C8 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD 2E 7F                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D6 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 80 E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD C8 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        InitNoDoubleBuffer
 377+ D3EA             >                            MMUSelectLayer1
 377+ D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 377+ D3EE CD 80 E0    >                            call	l1_cls
 377+ D3F1 3E 07       >                            ld		a,7
 377+ D3F3 CD 9B E0    >                            call	l1_attr_cls_to_a
 377+ D3F6             >                            MMUSelectLayer2
 377+ D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ D3FA CD 09 E0    >                            call    asm_l2_double_buffer_off
 377+ D3FD CD FF E0    >                            call	l2_cls	; Get some space
 377+ D400             >                            MMUSelectSpriteBank
 377+ D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 377+ D404 CD 6E E5    >                            call    sprite_cls_cursors
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 A9 83                             ld      (MenuIdMax),a
 380+ D40C 3A 94 84     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,     a
 382+ D412 CD 6D F9                             call    galaxy_planet_data
 383+ D415 CD F5 F8                             call    galaxy_equip_market
 384+ D418 ED 4B A7 84                          ld      bc,(PresentSystemX)
 385+ D41C CD BB FA                             call    galaxy_name_at_bc
 386+ D41F CD 6D F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD 49 E2                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD B3 E2                             call	l2_draw_horz_line
 398+ D441 3A 94 84     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD 18 93                             call	expandTokenToString
 402+ D44C CD 7A F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD 93 80                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD 93 80                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD 93 80                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD 93 80                             call    is_key_pressed
 443+ D4A3 CC 68 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >                        cp    (hl)
 481+ D4EA D0          >                        ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A 94 84     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 489+ D4F9 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2F                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD 12 95                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 25 89                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),EquipmentItemNotFitted; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 08                             ld      a,(ix+8)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 1D 89     .ItsALaser              ld      hl,LaserType        ; clear out respective current laser
 523+ D541 47                                   ld      b,a
 524+ D542 DD 7E 09                             ld      a,(ix+9)
 525+ D545 ED 31                                add     hl,a
 526+ D547 36 FF                                ld      (hl),$FF            ; $FF = not fitted
 527+ D549 C9                                   ret
 528+ D54A DD 5E 04     .RefundMissle           ld      e,(ix+4)
 529+ D54D DD 56 05                             ld      d,(ix+5)
 530+ D550 E5 C5                                push    hl,,bc
 531+ D552 CD 12 95                             call    addDEtoCash         ; refund laser value
 532+ D555 C1 E1                                pop     hl,,bc
 533+ D557 DD 7E 07                             ld      a,(ix+7)
 534+ D55A 3D                                   dec     a
 535+ D55B FE 30                                cp      "0"
 536+ D55D 20 02                                jr      nz,.NotAllSold
 537+ D55F 3E 2D        .AllSold:               ld      a,"-"
 538+ D561 DD 77 07     .NotAllSold:            ld      (ix+7),a
 539+ D564 CD 5D D4                             call    eqip_refesh_buffer
 540+ D567 C9                                   ret
 541+ D568              ;----------------------------------------------------------------------------------------------------------------------------------
 542+ D568 3A 94 84     eqshp_RightPressed:     ld      a,(Galaxy)
 543+ D56B                                      MMUSelectGalaxyA
 543+ D56B ED 92 57    >                     nextreg GalaxyDataMMU,     a
 544+ D56E DD 21 D6 F4                          ld      ix,ShipEquipmentList
 545+ D572 3A 90 C0                             ld      a,(eqshp_current_topItem)
 546+ D575 47                                   ld      b,a
 547+ D576 3A 8F C0                             ld      a,(eqshp_selected_row)
 548+ D579 80                                   add     a,b
 549+ D57A FE 01                                cp      EQ_MISSILE
 550+ D57C 20 0A                                jr      nz,.NotAMissileBuy
 551+ D57E 08           .ItsAMissile:           ex      af,af'
 552+ D57F 3E 34                                ld      a,"4"
 553+ D581 32 9A D5                             ld      (.CompareCheck+1),a
 554+ D584 08                                   ex      af,af'
 555+ D585 C3 8F D5                             jp      .FindInTable
 556+ D588 08           .NotAMissileBuy:        ex      af,af'
 557+ D589 3E 2A                                ld      a,"*"
 558+ D58B 32 9A D5                             ld      (.CompareCheck+1),a
 559+ D58E 08                                   ex      af,af'
 560+ D58F 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 561+ D591 5F                                   ld      e,a
 562+ D592 ED 30                                mul
 563+ D594 DD 19                                add     ix,de
 564+ D596 DD 7E 07                             ld      a,(ix+7)
 565+ D599 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 566+ D59B C8                                   ret     z
 567+ D59C 47           .Purchasable:           ld      b,a
 568+ D59D DD 7E 06                             ld      a,(ix+6)
 569+ D5A0 FE 01                                cp      EQ_MISSILE
 570+ D5A2 20 06                                jr      nz,.NotMissleMax
 571+ D5A4 21 0A 84     .MissleQuanity:         ld      hl,NbrMissiles
 572+ D5A7 78                                   ld      a,b
 573+ D5A8 BE                                   cp      (hl)
 574+ D5A9 C8                                   ret     z
 575+ D5AA 4F           .NotMissleMax:          ld      c,a
 576+ D5AB DD 7E 01                             ld      a,(ix+1)
 577+ D5AE FE FF                                cp      $FF
 578+ D5B0 C8                                   ret     z
 579+ D5B1              .CheckCash:             JumpIfMemIsNotZero  Cash+2 , .MoreThanRequired      ; Nothing in game > 65535CR
 579+ D5B1 3A 08 89    >                        ld      a,(Cash+2)
 579+ D5B4 A7          >                        and     a
 579+ D5B5 C2 C5 D5    >                        jp	    nz,.MoreThanRequired
 580+ D5B8 2A 06 89                             ld      hl,(Cash)                                   ; hl = lower 16 bits of cash
 581+ D5BB DD 5E 04                             ld      e,(ix+4)
 582+ D5BE DD 56 05                             ld      d,(ix+5)
 583+ D5C1 CD A6 9A                             call	compare16HLDE
 584+ D5C4 D8                                   ret     c                                           ; Insufficient Funds
 585+ D5C5 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 586+ D5C8 FE 00                                cp      0
 587+ D5CA 28 15                                jr      z,.MaxFuelOut
 588+ D5CC FE 01                                cp      1
 589+ D5CE 28 1B                                jr      z,.AddMissle
 590+ D5D0                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 590+ D5D0 FE 0A       >                        cp     EQ_FRONT_PULSE
 590+ D5D2 D2 F5 D5    >                        jp		nc,.AddLaser
 591+ D5D5 21 25 89     .AddNormalItem:         ld      hl,EquipmentFitted
 592+ D5D8 ED 31                                add     hl,a
 593+ D5DA 36 FF                                ld      (hl),EquipmentItemFitted
 594+ D5DC 3E 2A                                ld      a,"*"
 595+ D5DE C3 3D D6                             jp      .AddedItem
 596+ D5E1              .MaxFuelOut:            MaxFuelMacro
 596+ D5E1 3E 46       >						ld		a,MaxFuelLevel
 596+ D5E3 32 0A 89    >						ld		(Fuel),a
 597+ D5E6 3E 2A                                ld      a,"*"
 598+ D5E8 C3 3D D6                             jp      .AddedItem
 599+ D5EB 21 0A 84     .AddMissle:             ld      hl,NbrMissiles
 600+ D5EE 34                                   inc     (hl)
 601+ D5EF 7E                                   ld      a,(hl)
 602+ D5F0 C6 30                                add     "0"
 603+ D5F2 C3 3D D6                             jp      .AddedItem
 604+ D5F5 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get if its a laser, $FF = no laser
 605+ D5F8 FE FF                                cp      $FF
 606+ D5FA 20 29                                jr      nz,.BuyLaser
 607+ D5FC              .LargeCargoBay: ;TODO
 608+ D5FC 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 609+ D5FD 21 D6 F4                             ld      hl,ShipEquipmentList
 610+ D600 16 10                                ld      d,ShipEquipTableRowLen
 611+ D602 5F                                   ld      e,a
 612+ D603 ED 30                                mul
 613+ D605 19                                   add     hl,de               ; now we have the row for the current laser
 614+ D606 3E 04                                ld      a,4
 615+ D608 ED 31                                add     hl,a
 616+ D60A 7E                                   ld      a,(hl)
 617+ D60B 5F                                   ld      e,a
 618+ D60C 23                                   inc     hl
 619+ D60D 7E                                   ld      a,(hl)
 620+ D60E 57                                   ld      d,a
 621+ D60F E5 C5                                push    hl,,bc
 622+ D611 CD 12 95                             call    addDEtoCash         ; refund laser value
 623+ D614 C1 E1                                pop     hl,,bc
 624+ D616 3E 02                                ld      a,2
 625+ D618 ED 31                                add     hl,a
 626+ D61A 3E 2D                                ld      a,"-"
 627+ D61C 77                                   ld      (hl),a              ; clear on ship equipment
 628+ D61D 21 25 89                             ld      hl,EquipmentFitted
 629+ D620 79                                   ld      a,c                 ; get back current laser ref
 630+ D621 ED 31                                add     hl,a
 631+ D623 36 00                                ld      (hl),EquipmentItemNotFitted  ; remove laser from equipment
 632+ D625 21 25 89     .BuyLaser:              ld      hl,EquipmentFitted
 633+ D628 DD 7E 06                             ld      a,(ix+6)
 634+ D62B ED 31                                add     hl,a
 635+ D62D 36 FF                                ld      (hl),EquipmentItemFitted
 636+ D62F DD 7E 09                             ld      a,(ix+9)            ; get laser position
 637+ D632 21 1D 89                             ld      hl,LaserType
 638+ D635 ED 31                                add     hl,a
 639+ D637 DD 7E 08                             ld      a,(ix+8)            ; get type
 640+ D63A 77                                   ld      (hl),a
 641+ D63B 3E 2A                                ld      a,"*"
 642+ D63D DD 77 07     .AddedItem              ld      (ix+7),a
 643+ D640 DD 5E 04                             ld      e,(ix+4)
 644+ D643 DD 56 05                             ld      d,(ix+5)
 645+ D646 CD 25 95                             call    subDEfromCash
 646+ D649 CD 5D D4                             call    eqip_refesh_buffer
 647+ D64C C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
 846  D64D                  DISPLAY "Bank ",BankMenuEquipS," - Bytes free ",/D, $2000 - ($-MenuEquipSAddr), " - BankMenuEquipS"
 847  D64D              ; Bank 65  ------------------------------------------------------------------------------------------------------------------------
 848  D64D                                  SLOT    LaunchShipAddr
 849  D64D                                  PAGE    BankLaunchShip
 850  D64D                                  ORG     LaunchShipAddr
 851  C000                                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD A6 E2                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD A6 E2                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD 5C E6                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD 5C E6                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD 54 7F                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD 54 7F                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 80 E0                             call    l1_cls
 129+ C180 CD 9A E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD 6E E5                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 03 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 A8 E0                             ld      (l2_cls_byte),a
 136+ C196 CD C8 E0                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 A8 E0                             ld      (l2_cls_byte),a
 139+ C19E CD F4 E0                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD 13 E1                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 A8 E0                             ld      (l2_cls_byte),a
 146+ C1B3 CD C8 E0                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 A8 E0                             ld      (l2_cls_byte),a
 149+ C1BB CD F4 E0                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A 97 83    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 98 83    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 99 83 >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 98 83    >                        ld      (DELTA),a
 160+ C1E9 32 99 83    >                        ld      (DELT4Lo),a
 160+ C1EC 32 9A 83    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,StateInTransition
 163+ C1F1 32 AD 83                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5              draw_docking_ship:      MMUSelectLayer1
 167+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 168+ C1F9 CD 80 E0                             call    l1_cls
 169+ C1FC CD 9A E0                             call    l1_attr_cls
 170+ C1FF                                      MMUSelectSpriteBank
 170+ C1FF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 171+ C203 CD 6E E5                             call    sprite_cls_cursors
 172+ C206                                      MMUSelectLayer2
 172+ C206 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173+ C20A CD 03 E0                             call    asm_l2_double_buffer_on
 174+ C20D 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 175+ C20F 32 A8 E0                             ld      (l2_cls_byte),a
 176+ C212 CD C8 E0                             call    l2_set_color_upper2
 177+ C215 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 178+ C217 32 A8 E0                             ld      (l2_cls_byte),a
 179+ C21A CD F4 E0                             call    l2_cls_lower_third
 180+ C21D CD 07 C1                             call    LaunchTubeEdges
 181+ C220 CD 5C C1                             call    LaunchConsole
 182+ C223              .NextBuffer:            MMUSelectLayer2
 182+ C223 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183+ C227 CD 13 E1                             call    l2_flip_buffers
 184+ C22A 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 185+ C22C 32 A8 E0                             ld      (l2_cls_byte),a
 186+ C22F CD C8 E0                             call    l2_set_color_upper2
 187+ C232 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 188+ C234 32 A8 E0                             ld      (l2_cls_byte),a
 189+ C237 CD F4 E0                             call    l2_cls_lower_third
 190+ C23A CD 07 C1                             call    LaunchTubeEdges
 191+ C23D CD 5C C1                             call    LaunchConsole
 192+ C240 3E FF        .SetUpTimers:           ld      a,init_countdown
 193+ C242 32 00 C1                             ld      (launch_countdown),a
 194+ C245 21 87 C0                             ld      hl,dockingdraw_table
 195+ C248 22 03 C1                             ld      (docking_table_idx),hl
 196+ C24B AF                                   xor     a
 197+ C24C 32 05 C1                             ld      (current_offsetX),a
 198+ C24F 32 06 C1                             ld      (current_offsetY),a
 199+ C252 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 200+ C253                                      ZeroThrottle
 200+ C253 AF          >                        xor     a
 200+ C254 32 98 83    >                        ld      (DELTA),a
 200+ C257 32 99 83    >                        ld      (DELT4Lo),a
 200+ C25A 32 9A 83    >                        ld      (DELT4Lo+1),a
 201+ C25D 3E FF                                ld      a,StatePlayerDocked
 202+ C25F 32 AD 83                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 203+ C262 C9                                   ret
 204+ C263
 205+ C263 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 206+ C266 3E FF                                ld      a,init_countdown
 207+ C268 32 00 C1                             ld      (launch_countdown),a
 208+ C26B 2A 01 C1                             ld      hl,(launch_table_idx)
 209+ C26E 4E                                   ld      c,(hl)
 210+ C26F 79                                   ld      a,c
 211+ C270 FE FF                                cp      $FF
 212+ C272 28 1E                                jr      z,.FinishedLaunch
 213+ C274 23                                   inc     hl
 214+ C275 46                                   ld      b,(hl)                 ; bc = top left
 215+ C276 23                                   inc     hl
 216+ C277 5E                                   ld      e,(hl)
 217+ C278 23                                   inc     hl
 218+ C279 56                                   ld      d,(hl)                 ;de = width and height
 219+ C27A 23                                   inc     hl
 220+ C27B 7E                                   ld      a,(hl)                 ; a = colour
 221+ C27C 23                                   inc     hl
 222+ C27D 22 01 C1                             ld      (launch_table_idx),hl
 223+ C280 67                                   ld      h,a
 224+ C281 C5 D5                                push    bc,,de
 225+ C283                                      MMUSelectLayer2
 225+ C283 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ C287 CD 39 E2                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 227+ C28A D1 C1                                pop     bc,,de
 228+ C28C 3E 80                                ld      a,$80
 229+ C28E CD 49 E2                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 230+ C291 C9                                   ret
 231+ C292 3E FD        .FinishedLaunch:        ld      a,StateCompletedLaunch  ; now seed that we need a universe rebuild post launch
 232+ C294 32 AD 83                             ld      (DockedFlag),a
 233+ C297 C9                                   ret
 234+ C298
 235+ C298 CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 236+ C29B 3E FF                                ld      a,init_countdown
 237+ C29D 32 00 C1                             ld      (launch_countdown),a
 238+ C2A0 2A 03 C1                             ld      hl,(docking_table_idx)
 239+ C2A3 4E                                   ld      c,(hl)
 240+ C2A4 79                                   ld      a,c
 241+ C2A5 FE FF                                cp      $FF
 242+ C2A7 28 1E                                jr      z,.FinishedDocking
 243+ C2A9 23                                   inc     hl
 244+ C2AA 46                                   ld      b,(hl)                 ; bc = top left
 245+ C2AB 23                                   inc     hl
 246+ C2AC 5E                                   ld      e,(hl)
 247+ C2AD 23                                   inc     hl
 248+ C2AE 56                                   ld      d,(hl)                 ;de = width and height
 249+ C2AF 23                                   inc     hl
 250+ C2B0 7E                                   ld      a,(hl)
 251+ C2B1 23                                   inc     hl
 252+ C2B2 22 03 C1                             ld      (docking_table_idx),hl
 253+ C2B5 67                                   ld      h,a
 254+ C2B6 C5 D5                                push    bc,,de
 255+ C2B8                                      MMUSelectLayer2
 255+ C2B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ C2BC CD 39 E2                             call    l2_draw_fill_box
 257+ C2BF D1 C1                                pop     bc,,de
 258+ C2C1 3E 80                                ld      a,$80
 259+ C2C3 CD 49 E2                             call    l2_draw_box
 260+ C2C6 C9                                   ret
 261+ C2C7              .FinishedDocking        ForceTransition ScreenStatus              ; Force move to status screen
 261+ C2C7 3E 04       >                        ld      a,ScreenStatus
 261+ C2C9 32 40 6C    >                        ld      (ScreenTransitionForced), a
 262+ C2CC C9                                   ret
 263+ C2CD
 264+ C2CD
 265+ C2CD
# file closed: ./Transitions/launch_ship.asm
 852  C2CD                                  DISPLAY "Bank ",BankLaunchShip," - Bytes free ",/D, $2000 - ($-LaunchShipAddr), " - BankLaunchShip"
 853  C2CD              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
 854  C2CD                                  SLOT    UniverseBankAddr
 855  C2CD                                  PAGE    BankUNIVDATA0
 856  C2CD                                  ORG	    UniverseBankAddr,BankUNIVDATA0
 857  C000                                  INCLUDE "./Universe/Ships/univ_ship_data.asm"
# file opened: ./Universe/Ships/univ_ship_data.asm
   1+ C000                  DEFINE DEBUGMISSILELAUNCH 1
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                       1234567890123456
  14+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  14+ C004 65 72 73 65
  14+ C008 20 50 47
  15+ C00B 58           StartOfUnivN:       DB "X"
  16+ C00C 00 00        StartOfUnivPad:     DS 2
  17+ C00E 00           StartOfUnivM:       DB 0
  18+ C00F 00           StartOfUnivT        DB 0
  19+ C010 00 00 00...  StartOfUnivName     DS 16
  20+ C020              ; NOTE we can cheat and pre allocate segs just using a DS for now
  21+ C020
  22+ C020              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  23+ C020              ; Universe map substibute for INWK
  24+ C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  25+ C020                                     INCLUDE "./Universe/Ships/AIRuntimeData.asm"
# file opened: ././Universe/Ships/AIRuntimeData.asm
   1++C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C020              ;--NOTE POSTITION AND MATRIX are loaded by a single LDIR in cases so must be contiguous
   3++C020              StartOfShipRuntimeData      EQU $
   4++C020 00           UBnKxlo                     DB  0                       ; INWK+0
   5++C021 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   6++C022 00           UBnKxsgn                    DB  0                       ; INWK+2
   7++C023 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   8++C024 00           UBnKyhi                     DB  0                       ; INWK+4 \ yHi
   9++C025 00           UBnKysgn                    DB  0                       ; INWK +5
  10++C026 00           UBnKzlo                     DB  0                       ; INWK +6
  11++C027 00           UBnKzhi                     DB  0                       ; INWK +7
  12++C028 00           UBnKzsgn                    DB  0                       ; INWK +8
  13++C029              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  14++C029              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  15++C029              ; Note they seem to have to be after camera position not quite found why yet, can only assume it does an iy or ix indexed copy? Bu oddly does not affect space station.
  16++C029 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  17++C02B              UBnkrotmatSidev             equ UBnkrotmatSidevX
  18++C02B 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  19++C02D 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  20++C02F 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  21++C031              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  22++C031 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  23++C033 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  24++C035 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  25++C037              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  26++C037 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  27++C039 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  28++C03B              ; -- Note these must be here for initialise blast as it does a 12 byte ldir
  29++C03B              ; . Note missile explosion will have to have logic to cause linger if a blast is to be enqued
  30++C03B 00           UBnKMissileBlastRange:      DB  0                       ; copied in when setting up a missile
  31++C03C 00           UBnKMissileBlastDamage:     DB  0                       ; copied in when setting up a missile
  32++C03D 00           UBnKMissileDetonateRange:   DB  0                       ; copied in when setting up a missile, allows for proximity missiles
  33++C03E 00           UBnKMissileDetonateDamage:  DB  0                       ; copied in when setting up a missile
  34++C03F              ; -- Metadata for ship to help with bank managment
  35++C03F              UBnKStartOfRuntimeData:
  36++C03F 00           UBnKSlotNumber              DB  0
  37++C040 00           UbnKShipUnivBankNbr         DB  0                       ; Present ship universe bank number
  38++C041 00           UBnkShipModelBank           DB  0                       ; Bank nbr ship was from
  39++C042 00           UBnKShipModelNbr            DB  0                       ; Ship Id with in the bank
  40++C043 00           UBnKShipModelId             DB  0                       ; Absolute ship id
  41++C044              ; -- Ship AI data
  42++C044 00           UBnKMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  43++C045 00           UBnKMissileTarget           DB  0                       ; This is the ship slot number for the target from 0 to n if the missile is not hostile to us, if the target is $FF then its us
  44++C046 00           UBnKSpeed                   DB  0                       ; INWK +27
  45++C047 00           UBnKAccel                   DB  0                       ; INWK +28
  46++C048 00           UBnKRotXCounter             DB  0                       ; INWK +29
  47++C049 00           UBnKRotZCounter             DB  0                       ; INWK +30
  48++C04A 00           UBnKRAT                     DB  0                       ; temporary for rotation magnitude or roll counter, for debugging state
  49++C04B 00           UBnKRAT2                    DB  0                       ; temporary for rotation threshold
  50++C04C 00           UBnKCNT                     DB  0                       ; temp for calculating roll and pitch
  51++C04D 00           UBnKCNT2                    DB  0                       ; roll threshold, max angle boynd ship will slow down
  52++C04E 00           univRAT                     DB  0               ; 99
  53++C04F 00           univRAT2                    DB  0               ; 9A
  54++C050 00           univRAT2Val                 DB  0               ; 9A
  55++C051 00           UBnKexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  56++C052 00           UBnkDrawAllFaces            DB  0
  57++C053 00           UBnKShipAggression          DB  0                       ; calculated agression factor
  58++C054 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  59++C055 00           UBnKSpawnObject             DB  0
  60++C056 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  61++C057 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  62++C058 00           UBnKEnergy                  DB  0                       ; INWK +35
  63++C059 00           UBnKECMCountDown            DB  0                       ; counts down ECM usage if activated reducing energy too in update loop
  64++C05A 00           UBnKECMFitted               DB  0                       ; Does ship have ECM, true false
  65++C05B 00           UBnKLaserPower              DB  0                       ; Type of laser fitted
  66++C05C 00           UBnKMissilesLeft            DB  0
  67++C05D 00           UBnKFighterShipId           DB  0                       ; computed ship Id for any carriers
  68++C05E 00           UBnKFightersLeft            DB  0                       ; the number of ships left in hanger, 255 = infinite
  69++C05F 00           UBnKCloudCounter            DB  0                       ; cloud pixels
  70++C060 00           UBnKCloudRadius             DB  0                       ; cloud pixels
  71++C061              UBnKRuntimeSize             EQU $-UBnKStartOfRuntimeData
  72++C061              ; Flags work as follows:
  73++C061              ; UBnKSpawnObject - signals on death to spawn cargo items
  74++C061              ; 0 -                   Spawn Cargo 1
  75++C061              ; 1 -                   Spawn Cargo 2
  76++C061              ; 2 -                   Spawn Cargo 3
  77++C061              ; 3 -                   Spawn Cargo 4
  78++C061              ; 4 -                   Spawn Alloy 1
  79++C061              ; 5 -                   Spawn Alloy 2
  80++C061              ; 6 -                   Spawn Alloy 3
  81++C061              ; 7 -                   Spawn Alloy 4
  82++C061
  83++C061              ; UBnkaiatkecm
  84++C061              ; Bit	                Description
  85++C061              ; 7 -                   AI Enabled Flag
  86++C061              ; 6 -                   Ship Visible = ShipOnScreen/NotCloaked (cleared or set by check visible or cloaking override)
  87++C061              ; 5 -                   Ship is exploding if set, note if its a missile and one already equeued this will have to linger
  88++C061              ;                       linger can be done by not erasing ship unit missile equeue handled
  89++C061              ; 4 -                   Ship marked as exploded, cleared once aknowledged then bit 5 takes over and UBnKCloudCounter
  90++C061              ; 3 -                   Display state - Plot as a Dot
  91++C061              ; 2 -                   Nbr of Missiles bit 2
  92++C061              ; 1 -                   Nbr of Missiles bit 1
  93++C061              ; 0 -                   ECM present flag
  94++C061              ; ShipNewBitsAddr (in blueprint)
  95++C061              ;Bit	                Description
  96++C061              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  97++C061              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  98++C061              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  99++C061              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
 100++C061              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
 101++C061              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
 102++C061              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
 103++C061              ;                       Hostile ships will attack us on sight; there are quite a few of them
 104++C061              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
 105++C061              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
 106++C061              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
 107++C061              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
 108++C061              ;#4	Docking flag        * 0 = not docking * 1 = docking
 109++C061              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
 110++C061              ;                       This flag is randomly set for traders when they are spawned
 111++C061              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
 112++C061              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
 113++C061              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
 114++C061              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
 115++C061              ;#6	Cop flag            * 0 = not a cop * 1 = cop
 116++C061              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
 117++C061              ;                       Ships that are cops: Viper, Transporter
 118++C061              ;#7	Scooped, docked, escape pod flag
 119++C061              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
 120++C061              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
 121++C061              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
 122++C061
# file closed: ././Universe/Ships/AIRuntimeData.asm
  26+ C061              ; moved to runtime asm
  27+ C061              ;                        INCLUDE "./Universe/Ships/ShipPosVars.asm"
  28+ C061              ;                        INCLUDE "./Universe/Ships/RotationMatrixVars.asm"
  29+ C061
  30+ C061              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  31+ C061              ;                    [roofv x y z ] roof vector (up)
  32+ C061              ;                    [sidev x y z ] side vector (right)
  33+ C061              ;;rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  34+ C061              ;;rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  35+ C061
  36+ C061
  37+ C061                                      INCLUDE "./Universe/Ships/XX16Vars.asm"
# file opened: ././Universe/Ships/XX16Vars.asm
   1++C061              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C061 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C063              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C063 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C065 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C067 00 00        UBnkTransmatRoofvX          DW 0
   7++C069              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C069 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C06B 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C06D 00 00        UBnkTransmatNosevX          DW 0
  11++C06F              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C06F 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C071 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C073 00 00        UbnkTransmatTransX          DW 0
  15++C075 00 00        UbnkTransmatTransY          DW 0
  16++C077 00 00        UbnkTransmatTransZ          DW 0
  17++C079              XX16                        equ UBnkTransmatSidev
  18++C079              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C079 00 00        UbnkTransInvRow0x0          DW 0
  20++C07B 00 00        UbnkTransInvRow0x1          DW 0
  21++C07D 00 00        UbnkTransInvRow0x2          DW 0
  22++C07F 00 00        UbnkTransInvRow0x3          DW 0
  23++C081 00 00        UbnkTransInvRow1y0          DW 0
  24++C083 00 00        UbnkTransInvRow1y1          DW 0
  25++C085 00 00        UbnkTransInvRow1y2          DW 0
  26++C087 00 00        UbnkTransInvRow1y3          DW 0
  27++C089 00 00        UbnkTransInvRow2z0          DW 0
  28++C08B 00 00        UbnkTransInvRow2z1          DW 0
  29++C08D 00 00        UbnkTransInvRow2z2          DW 0
  30++C08F 00 00        UbnkTransInvRow2z3          DW 0
  31++C091
  32++C091              XX16Inv             equ UbnkTransInvRow0x0
  33++C091
# file closed: ././Universe/Ships/XX16Vars.asm
  38+ C091                                      INCLUDE "./Universe/Ships/XX25Vars.asm"
# file opened: ././Universe/Ships/XX25Vars.asm
   1++C091              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C091 00           UbnkProjxLo                 DB  0
   3++C092 00           UbnkProjxHi                 DB  0
   4++C093 00           UbnkProjxSgn                DB  0
   5++C094              UbnkProjx                   EQU UbnkProjxLo
   6++C094 00           UbnkProjyLo                 DB  0
   7++C095 00           UbnkProjyHi                 DB  0
   8++C096 00           UbnkProjySgn                DB  0
   9++C097              UbnkProjy                   EQU UbnkProjyLo
  10++C097 00           UbnkProjzLo                 DB  0
  11++C098 00           UbnkProjzHi                 DB  0
  12++C099 00           UbnkProjzSgn                DB  0
  13++C09A              UbnkProjz                   EQU UbnkProjzLo
  14++C09A              XX25                        EQU UbnkProjxLo
  15++C09A
# file closed: ././Universe/Ships/XX25Vars.asm
  39+ C09A                                      INCLUDE "./Universe/Ships/XX18Vars.asm"
# file opened: ././Universe/Ships/XX18Vars.asm
   1++C09A              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C09A 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C09B 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C09C 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C09D              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C09D 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C09E 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C09F 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C0A0              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C0A0 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C0A1 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C0A2 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C0A3              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C0A3              XX18                        equ UBnkDrawCam0xLo
  15++C0A3
# file closed: ././Universe/Ships/XX18Vars.asm
  40+ C0A3
  41+ C0A3              ; Used to make 16 bit reads a little cleaner in source code
  42+ C0A3 00 00 00     UbnkZPoint                  DS  3
  43+ C0A6              UbnkZPointLo                equ UbnkZPoint
  44+ C0A6              UbnkZPointHi                equ UbnkZPoint+1
  45+ C0A6              UbnkZPointSign              equ UbnkZPoint+2
  46+ C0A6                                      INCLUDE "./Universe/Ships/XX15Vars.asm"
# file opened: ././Universe/Ships/XX15Vars.asm
   1++C0A6              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C0A6 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C0A7 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C0A8 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C0A9 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C0AA 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C0AB 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C0AC
   9++C0AC              XX15                        equ UBnkXScaled
  10++C0AC              XX15VecX                    equ XX15
  11++C0AC              XX15VecY                    equ XX15+1
  12++C0AC              XX15VecZ                    equ XX15+2
  13++C0AC              UbnkXPoint                  equ XX15
  14++C0AC              UbnkXPointLo                equ XX15+0
  15++C0AC              UbnkXPointHi                equ XX15+1
  16++C0AC              UbnkXPointSign              equ XX15+2
  17++C0AC              UbnkYPoint                  equ XX15+3
  18++C0AC              UbnkYPointLo                equ XX15+3
  19++C0AC              UbnkYPointHi                equ XX15+4
  20++C0AC              UbnkYPointSign              equ XX15+5
  21++C0AC              ; Repurposed XX15 pre clip plines
  22++C0AC              UbnkPreClipX1               equ XX15+0
  23++C0AC              UbnkPreClipY1               equ XX15+2
  24++C0AC              UbnkPreClipX2               equ XX15+4
  25++C0AC              UbnkPreClipY2               equ XX15+6
  26++C0AC              ; Repurposed XX15 post clip lines
  27++C0AC              UBnkNewX1                   equ XX15+0
  28++C0AC              UBnkNewY1                   equ XX15+1
  29++C0AC              UBnkNewX2                   equ XX15+2
  30++C0AC              UBnkNewY2                   equ XX15+3
  31++C0AC              ; Repurposed XX15
  32++C0AC              regXX15fx                   equ UBnkXScaled
  33++C0AC              regXX15fxSgn                equ UBnkXScaledSign
  34++C0AC              regXX15fy                   equ UBnkYScaled
  35++C0AC              regXX15fySgn                equ UBnkYScaledSign
  36++C0AC              regXX15fz                   equ UBnkZScaled
  37++C0AC              regXX15fzSgn                equ UBnkZScaledSign
  38++C0AC              ; Repurposed XX15
  39++C0AC              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C0AC              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C0AC              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C0AC              ; After clipping the coords are two 8 bit pairs
  43++C0AC              UBnkPoint1Clipped           equ UBnkXScaled
  44++C0AC              UBnkPoint2Clipped           equ UBnkYScaled
  45++C0AC              ; Repurposed XX15 when plotting lines
  46++C0AC              ; Repurposed XX15 before calling clip routine
  47++C0AC              UBnkX1                      equ XX15
  48++C0AC              UBnKx1Lo                    equ XX15
  49++C0AC              UBnKx1Hi                    equ XX15+1
  50++C0AC              UBnkY1                      equ XX15+2
  51++C0AC              UbnKy1Lo                    equ XX15+2
  52++C0AC              UBnkY1Hi                    equ XX15+3
  53++C0AC              UBnkX2                      equ XX15+4
  54++C0AC              UBnkX2Lo                    equ XX15+4
  55++C0AC              UBnkX2Hi                    equ XX15+5
  56++C0AC
# file closed: ././Universe/Ships/XX15Vars.asm
  47+ C0AC                                      INCLUDE "./Universe/Ships/XX12Vars.asm"
# file opened: ././Universe/Ships/XX12Vars.asm
   1++C0AC              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C0AC              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C0AC 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C0AD 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C0AE 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C0AF 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C0B0 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C0B1 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C0B2 00 00 00...  XX12Save                    DS  6
  10++C0B8 00 00 00...  XX12Save2                   DS  6
  11++C0BE              XX12                        equ UBnkXX12xLo
  12++C0BE              varXX12                     equ UBnkXX12xLo
  13++C0BE              ; Repurposed XX12 when plotting lines
  14++C0BE              UBnkY2                      equ XX12+0
  15++C0BE              UbnKy2Lo                    equ XX12+0
  16++C0BE              UBnkY2Hi                    equ XX12+1
  17++C0BE              UBnkDeltaXLo                equ XX12+2
  18++C0BE              UBnkDeltaXHi                equ XX12+3
  19++C0BE              UBnkDeltaYLo                equ XX12+4
  20++C0BE              UBnkDeltaYHi                equ XX12+5
  21++C0BE              UbnkGradient                equ XX12+2
  22++C0BE              UBnkTemp1                   equ XX12+2
  23++C0BE              UBnkTemp1Lo                 equ XX12+2
  24++C0BE              UBnkTemp1Hi                 equ XX12+3
  25++C0BE              UBnkTemp2                   equ XX12+3
  26++C0BE              UBnkTemp2Lo                 equ XX12+3
  27++C0BE              UBnkTemp2Hi                 equ XX12+4
  28++C0BE
# file closed: ././Universe/Ships/XX12Vars.asm
  48+ C0BE
  49+ C0BE
  50+ C0BE              ; Post clipping the results are now 8 bit
  51+ C0BE 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  52+ C0BF 00           UBnkProjectedY              DB  0
  53+ C0C0 00           UBnkProjectedX              DB  0
  54+ C0C1              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  55+ C0C1 00 00 00...  XX15Save                    DS  8
  56+ C0C9 00 00 00...  XX15Save2                   DS  8
  57+ C0D1 00           VarBackface                 DB 0
  58+ C0D2              ; Heap (or array) information for lines and normals
  59+ C0D2              ; Coords are stored XY,XY,XY,XY
  60+ C0D2              ; Normals
  61+ C0D2              ; This needs re-oprganising now.
  62+ C0D2              ; Runtime Calculation Store
  63+ C0D2
  64+ C0D2              FaceArraySize               equ 30
  65+ C0D2              EdgeHeapSize                equ 40
  66+ C0D2              NodeArraySize               equ 40
  67+ C0D2              LineArraySize               equ 50
  68+ C0D2              ; Storage arrays for data
  69+ C0D2              ; Structure of arrays
  70+ C0D2              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  71+ C0D2              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  72+ C0D2              ; NodeArray         -  4 bytes per element      0           1            2          3
  73+ C0D2              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  74+ C0D2              ; Line Array        -  4 bytes per eleement     0           1            2          3
  75+ C0D2              ;                                               X1          Y1           X2         Y2
  76+ C0D2 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  77+ C0F0 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  78+ C190 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  79+ C230 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
  80+ C2F8              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  81+ C2F8 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  82+ C320              ; Array current Lengths
  83+ C320 00           UbnkFaceVisArrayLen         DS 1
  84+ C321 00           UBnkNodeArrayLen            DS 1
  85+ C322 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  86+ C323 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  87+ C324              XX20                        equ UbnkLineArrayLen
  88+ C324              varXX20                     equ UbnkLineArrayLen
  89+ C324
  90+ C324 00           UbnkEdgeHeapSize            DS 1
  91+ C325 00           UbnkEdgeHeapBytes           DS 1
  92+ C326 00           UBnkLinesHeapLen            DS 1
  93+ C327 00           UbnKEdgeHeapCounter         DS 1
  94+ C328 00           UbnKEdgeRadius              DS 1
  95+ C329 00           UbnKEdgeShipType            DS 1
  96+ C32A 00           UbnKEdgeExplosionType       DS 1
  97+ C32B
  98+ C32B              ; Node heap is used to write out transformed Vertexs
  99+ C32B
 100+ C32B              ; Lines
 101+ C32B 00 00 00     UBnkXX19                    DS  3
 102+ C32E
 103+ C32E 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 104+ C349              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 105+ C349              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 106+ C349              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 107+ C349              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 108+ C349              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 109+ C349              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 110+ C349              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 111+ C349              VertexCountAddr             equ UBnkHullCopy + VertexCountOffset
 112+ C349              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 113+ C349              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 114+ C349              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 115+ C349              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 116+ C349              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 117+ C349              DotAddr                     equ UBnkHullCopy + DotOffset
 118+ C349              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 119+ C349              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 120+ C349              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 121+ C349              QAddr                       equ UBnkHullCopy + QOffset
 122+ C349              LaserAddr                   equ UBnkHullCopy + LaserOffset
 123+ C349              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 124+ C349              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 125+ C349              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 126+ C349              ShipAIFlagsAddr             equ UBnkHullCopy + ShipAIFlagsOffset
 127+ C349              ShipECMFittedChanceAddr     equ UBnkHullCopy + ShipECMFittedChanceOffset
 128+ C349              ; Static Ship Data. This is copied in when creating the universe object
 129+ C349              XX0                         equ UBnkHullCopy        ; general hull index pointer TODO find biggest ship design
 130+ C349
 131+ C349 00 00 00...  UBnkHullVerticies           DS  40 * 6              ; largetst is trasnport type 10 at 37 vericies so alows for 40 * 6 Bytes  =
 132+ C439 00 00 00...  UBnkHullEdges               DS  50 * 4              ; ype 10 is 46 edges so allow 50
 133+ C501 00 00 00...  UBnkHullNormals             DS  20 * 4              ; type 10 is 14 edges so 20 to be safe
 134+ C551
 135+ C551
 136+ C551 0C           OrthagCountdown             DB  12
 137+ C552
 138+ C552              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 139+ C552              UBnk_Data_len               EQU $ - StartOfUniv
 140+ C552
 141+ C552              ZeroUnivPitchAndRoll:   MACRO
 142+ C552 ~                                    xor     a
 143+ C552 ~                                    ld      (UBnKRotXCounter),a
 144+ C552 ~                                    ld      (UBnKRotZCounter),a
 145+ C552                                      ENDM
 146+ C552
 147+ C552              MaxUnivPitchAndRoll:    MACRO
 148+ C552 ~                                    ld      a,127
 149+ C552 ~                                    ld      (UBnKRotXCounter),a
 150+ C552 ~                                    ld      (UBnKRotZCounter),a
 151+ C552                                      ENDM
 152+ C552
 153+ C552              RandomUnivPitchAndRoll: MACRO
 154+ C552 ~                                    call    doRandom
 155+ C552 ~                                    or      %01101111
 156+ C552 ~                                    ld      (UBnKRotXCounter),a
 157+ C552 ~                                    call    doRandom
 158+ C552 ~                                    or      %01101111
 159+ C552 ~                                    ld      (UBnKRotZCounter),a
 160+ C552                                      ENDM
 161+ C552
 162+ C552              RandomUnivSpeed:        MACRO
 163+ C552 ~                                    call    doRandom
 164+ C552 ~                                    and     31
 165+ C552 ~                                    ld      (UBnKSpeed),a
 166+ C552                                      ENDM
 167+ C552
 168+ C552              MaxUnivSpeed:           MACRO
 169+ C552 ~                                    ld      a,31
 170+ C552 ~                                    ld      (UBnKSpeed),a
 171+ C552                                      ENDM
 172+ C552
 173+ C552              ZeroUnivAccelleration:  MACRO
 174+ C552 ~                                    xor     a
 175+ C552 ~                                    ld      (UBnKAccel),a
 176+ C552                                      ENDM
 177+ C552
 178+ C552 3A 46 C3     SetShipHostile:         ld      a,(ShipNewBitsAddr)
 179+ C555 F6 04                                or      ShipIsHostile
 180+ C557 32 46 C3                             ld      (ShipNewBitsAddr),a
 181+ C55A C9                                   ret
 182+ C55B
 183+ C55B 3A 46 C3     ClearShipHostile:       ld      a,(ShipNewBitsAddr)
 184+ C55E E6 FB                                and     ShipNotHostile
 185+ C560 32 46 C3                             ld      (ShipNewBitsAddr),a
 186+ C563 C9                                   ret
 187+ C564
 188+ C564
 189+ C564              ; --------------------------------------------------------------
 190+ C564 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 191+ C567 11 52 05                             ld      de,UBnk_Data_len
 192+ C56A AF                                   xor     a
 193+ C56B CD 2E 7F                             call    memfill_dma
 194+ C56E C9                                   ret
 195+ C56F              ; --------------------------------------------------------------
 196+ C56F 21 20 C0     ResetUbnkPosition:      ld      hl,UBnKxlo
 197+ C572 06 09                                ld      b, 3*3
 198+ C574 AF                                   xor     a
 199+ C575 77           .zeroLoop:              ld      (hl),a
 200+ C576 23                                   inc     hl
 201+ C577 10 FC                                djnz    .zeroLoop
 202+ C579 C9                                   ret
 203+ C57A
 204+ C57A 3E 80        FireECM:                ld      a,ECMCounterMax                 ; set ECM time
 205+ C57C 32 59 C0                             ld      (UBnKECMCountDown),a            ;
 206+ C57F 3A AE 82                             ld      a,(ECMCountDown)
 207+ C582                                      ReturnIfALTNusng ECMCounterMax
 207+ C582 FE 80       >                        cp    ECMCounterMax
 207+ C584 D8          >                        ret	 c
 208+ C585 3E 80                                ld      a,ECMCounterMax
 209+ C587 32 AE 82                             ld      (ECMCountDown),a
 210+ C58A C9                                   ret
 211+ C58B
 212+ C58B 3A 58 C0     RechargeEnergy:         ld      a,(UBnKEnergy)
 213+ C58E                                      ReturnIfAGTEMemusng EnergyAddr
 213+ C58E 21 3D C3    >                        ld      hl,EnergyAddr
 213+ C591 BE          >                        cp      (hl)
 213+ C592 D0          >                        ret	    nc
 214+ C593 3C                                   inc     a
 215+ C594 32 58 C0                             ld      (UBnKEnergy),a
 216+ C597 C9                                   ret
 217+ C598              ; A ship normally needs enough energy to fire ECM but if its shot then
 218+ C598              ; it may be too low, in which case the ECM does a saftey shutdown and returns 1 energy
 219+ C598              ; plus a 50% chance it will blow the ECM up
 220+ C598 3A 59 C0     UpdateECM:              ld      a,(UBnKECMCountDown)
 221+ C59B                                      ReturnIfAIsZero
 221+ C59B A7          >                        and     a
 221+ C59C C8          >                        ret     z
 222+ C59D 3D                                   dec     a
 223+ C59E 32 59 C0                             ld      (UBnKECMCountDown),a
 224+ C5A1 21 58 C0                             ld      hl,UBnKEnergy
 225+ C5A4 35                                   dec     (hl)
 226+ C5A5 F0                                   ret     p
 227+ C5A6 CD 5A C6     .ExhaustedEnergy:       call    UnivExplodeShip                 ; if it ran out of energy it was as it was also shot or collided as it checks in advance. Main ECM loop will continue as a compromise as multiple ships can fire ECM simultaneously
 228+ C5A9 C9                                   ret
 229+ C5AA
 230+ C5AA
 231+ C5AA              ; --------------------------------------------------------------
 232+ C5AA              ; update ship speed and pitch based on adjustments from AI Tactics
 233+ C5AA 3A 47 C0     UpdateSpeedAndPitch:    ld      a,(UBnKAccel)                   ; only apply non zero accelleration
 234+ C5AD                                      JumpIfAIsZero .SkipAccelleration
 234+ C5AD A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 234+ C5AE CA CC C5    >                        jp	    z, .SkipAccelleration
 235+ C5B1 47                                   ld      b,a                             ; b = accelleration in 2's c
 236+ C5B2 3A 46 C0                             ld      a,(UBnKSpeed)                   ; a = speed + accelleration
 237+ C5B5                                      ClearCarryFlag
 237+ C5B5 B7          >                        or a
 238+ C5B6 88                                   adc     a,b
 239+ C5B7                                      JumpIfPositive  .DoneAccelleration      ; if speed < 0
 239+ C5B7 F2 BB C5    >                        jp		p, .DoneAccelleration
 240+ C5BA              .SpeedNegative:         ZeroA                                   ;    then speed = 0
 240+ C5BA AF          >                        xor a
 241+ C5BB 47           .DoneAccelleration:     ld      b,a                             ; if speed > speed limit
 242+ C5BC 3A 3E C3                             ld      a,(SpeedAddr)                   ;    speed = limit
 243+ C5BF                                      JumpIfAGTENusng b, .SpeedInLimits       ; .
 243+ C5BF B8          >                        cp     b
 243+ C5C0 D2 C4 C5    >                        jp		nc,.SpeedInLimits
 244+ C5C3 47                                   ld      b,a                             ; .
 245+ C5C4 78           .SpeedInLimits:         ld      a,b                             ; .
 246+ C5C5 32 46 C0                             ld      (UBnKSpeed),a                   ; .
 247+ C5C8                                      ZeroA                                   ; acclleration = 0
 247+ C5C8 AF          >                        xor a
 248+ C5C9 32 47 C0                             ld      (UBnKAccel),a                   ; for next AI update
 249+ C5CC              .SkipAccelleration:     ; handle roll and pitch rates
 250+ C5CC C9                                   ret
 251+ C5CD
 252+ C5CD DD 01        UnivSetEnemyMissile:    break
 253+ C5CF 21 C7 A7                             ld      hl,NewLaunchUBnKX               ; Copy launch ship matrix
 254+ C5D2 11 20 C0                             ld      de,UBnKxlo                      ;
 255+ C5D5 01 1B 00                             ld      bc,NewLaunchDataBlockSize       ; positon + 3 rows of 3 bytes
 256+ C5D8 ED B0                                ldir                                    ;
 257+ C5DA 3E 03        .SetUpSpeed:            ld      a,3                             ; set accelleration
 258+ C5DC 32 47 C0                             ld      (UBnKAccel),a                   ;
 259+ C5DF                                      ZeroA
 259+ C5DF AF          >                        xor a
 260+ C5E0 32 48 C0                             ld      (UBnKRotXCounter),a
 261+ C5E3 32 49 C0                             ld      (UBnKRotZCounter),a
 262+ C5E6 3E 03                                ld      a,3                             ; these are max roll and pitch rates for later
 263+ C5E8 32 4A C0                             ld      (UBnKRAT),a
 264+ C5EB 3C                                   inc     a
 265+ C5EC 32 4B C0                             ld      (UBnKRAT2),a
 266+ C5EF 3E 16                                ld      a,22
 267+ C5F1 32 4D C0                             ld      (UBnKCNT2),a
 268+ C5F4                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 268+ C5F4 3E 1F       >                        ld      a,31
 268+ C5F6 32 46 C0    >                        ld      (UBnKSpeed),a
 269+ C5F9                                      SetMemFalse UBnKMissleHitToProcess
 269+ C5F9 3E FF       >                        ld      a,$FF
 269+ C5FB 32 44 C0    >                        ld      (UBnKMissleHitToProcess),a
 270+ C5FE 3E 80                                ld      a,ShipAIEnabled
 271+ C600 32 54 C0                             ld      (UBnkaiatkecm),a
 272+ C603 CD 52 C5                             call    SetShipHostile
 273+ C606 C9                                   ret
 274+ C607
 275+ C607
 276+ C607              ; --------------------------------------------------------------
 277+ C607              ; This sets the position of the current ship if its a player launched missile
 278+ C607 CD 00 C8     UnivSetPlayerMissile:   call    InitialisePlayerMissileOrientation  ; Copy in Player  facing
 279+ C60A CD 6F C5                             call    ResetUbnkPosition               ; home position
 280+ C60D 3E 05                                ld      a,MissileDropHeight             ; the missile launches from underneath
 281+ C60F 32 23 C0                             ld      (UBnKylo),a                     ; so its -ve drop height
 282+ C612                                      IFDEF DEBUGMISSILELAUNCH
 283+ C612 3E 20                                    ld      a,$20       ; DEBUG
 284+ C614 32 26 C0                                 ld      (UBnKzlo),a
 285+ C617                                      ENDIF
 286+ C617 3E 80                                ld      a,$80                           ;
 287+ C619 32 25 C0                             ld      (UBnKysgn),a                    ;
 288+ C61C 3E 03                                ld      a,3                             ; set accelleration
 289+ C61E 32 47 C0                             ld      (UBnKAccel),a                   ;
 290+ C621                                      ZeroA
 290+ C621 AF          >                        xor a
 291+ C622 32 48 C0                             ld      (UBnKRotXCounter),a
 292+ C625 32 49 C0                             ld      (UBnKRotZCounter),a
 293+ C628 3E 03                                ld      a,3                             ; these are max roll and pitch rates for later
 294+ C62A 32 4A C0                             ld      (UBnKRAT),a
 295+ C62D 3C                                   inc     a
 296+ C62E 32 4B C0                             ld      (UBnKRAT2),a
 297+ C631 3E 16                                ld      a,22
 298+ C633 32 4D C0                             ld      (UBnKCNT2),a
 299+ C636                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 299+ C636 3E 1F       >                        ld      a,31
 299+ C638 32 46 C0    >                        ld      (UBnKSpeed),a
 300+ C63B                                      SetMemFalse UBnKMissleHitToProcess
 300+ C63B 3E FF       >                        ld      a,$FF
 300+ C63D 32 44 C0    >                        ld      (UBnKMissleHitToProcess),a
 301+ C640 3E 80                                ld      a,ShipAIEnabled
 302+ C642 32 54 C0                             ld      (UBnkaiatkecm),a
 303+ C645                                      ;break
 304+ C645 CD 5B C5                             call    ClearShipHostile                ; its a player missile
 305+ C648
 306+ C648 C9                                   ret
 307+ C649              ; --------------------------------------------------------------
 308+ C649              ; this applies blast damage to ship
 309+ C649 3A 5E 84     ShipMissileBlast:       ld      a,(CurrentMissileBlastDamage)
 310+ C64C 47                                   ld      b,a
 311+ C64D 3A 58 C0                             ld      a,(UBnKEnergy)                   ; Reduce Energy
 312+ C650 90                                   sub     b
 313+ C651 C3 5A C6                             jp      UnivExplodeShip
 314+ C654 18 04                                jr      UnivExplodeShip
 315+ C656 32 58 C0                             ld      (UBnKEnergy),a
 316+ C659 C9                                   ret
 317+ C65A              ; --------------------------------------------------------------
 318+ C65A              ; This sets the ship as a shower of explosiondwd
 319+ C65A DD 01        UnivExplodeShip:        break
 320+ C65C 3A 54 C0                             ld      a,(UBnkaiatkecm)
 321+ C65F F6 30                                or      ShipExploding | ShipKilled      ; Set Exlpoding flag and mark as just been killed
 322+ C661 E6 7F                                and     Bit7Clear                       ; Remove AI
 323+ C663 32 54 C0                             ld      (UBnkaiatkecm),a
 324+ C666 AF                                   xor     a
 325+ C667 32 58 C0                             ld      (UBnKEnergy),a
 326+ C66A                                      ;TODO
 327+ C66A C9                                   ret
 328+ C66B
 329+ C66B CD A4 C6     UnivSetDemoPostion:     call    UnivSetSpawnPosition
 330+ C66E 3E 81                                ld      a,%10000001                     ; AI Enabled has 1 missile
 331+ C670 32 54 C0                             ld      (UBnkaiatkecm),a                ; set hostinle, no AI, has ECM
 332+ C673 32 46 C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 333+ C676 3E FF                                ld      a,$FF
 334+ C678 32 49 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 335+ C67B 32 48 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 336+ C67E                                      ZeroA
 336+ C67E AF          >                        xor a
 337+ C67F 32 22 C0                             ld      (UBnKxsgn),a
 338+ C682 32 25 C0                             ld      (UBnKysgn),a
 339+ C685 32 28 C0                             ld      (UBnKzsgn),a
 340+ C688 21 00 00                             ld      hl,0
 341+ C68B 22 20 C0                             ld      (UBnKxlo),hl
 342+ C68E 22 23 C0                             ld      (UBnKylo),hl
 343+ C691 3A 45 C3                             ld      a,(ShipTypeAddr)
 344+ C694 21 B0 05                             ld      hl,$05B0                            ; so its a negative distance behind
 345+ C697                                      JumpIfANENusng ShipTypeStation, .SkipFurther
 345+ C697 FE 02       >                        cp     ShipTypeStation
 345+ C699 C2 A0 C6    >                        jp      nz,.SkipFurther
 346+ C69C 3E 05                                ld      a,5
 347+ C69E 84                                   add     h
 348+ C69F 67                                   ld      h,a
 349+ C6A0 22 26 C0     .SkipFurther            ld      (UBnKzlo),hl
 350+ C6A3 C9                                   ret
 351+ C6A4              ; --------------------------------------------------------------
 352+ C6A4              ; This sets the position of the current ship randomly, called after spawing
 353+ C6A4 CD DB C7     UnivSetSpawnPosition:   call    InitialiseOrientation
 354+ C6A7                                      RandomUnivPitchAndRoll
 354+ C6A7 CD 41 89    >                        call    doRandom
 354+ C6AA F6 6F       >                        or      %01101111
 354+ C6AC 32 48 C0    >                        ld      (UBnKRotXCounter),a
 354+ C6AF CD 41 89    >                        call    doRandom
 354+ C6B2 F6 6F       >                        or      %01101111
 354+ C6B4 32 49 C0    >                        ld      (UBnKRotZCounter),a
 355+ C6B7 CD 41 89                             call    doRandom                        ; set x lo and y lo to random
 356+ C6BA 32 20 C0     .setXlo:                ld      (UBnKxlo),a
 357+ C6BD 32 23 C0     .setYlo:                ld      (UBnKylo),a
 358+ C6C0 0F           .setXsign:              rrca                                    ; rotate by 1 bit right
 359+ C6C1 47                                   ld      b,a
 360+ C6C2 E6 80                                and     SignOnly8Bit
 361+ C6C4 32 22 C0                             ld      (UBnKxsgn),a
 362+ C6C7 78           .setYSign:              ld      a,b                             ; get random back again
 363+ C6C8 0F                                   rrca                                    ; rotate by 1 bit right
 364+ C6C9 47                                   ld      b,a
 365+ C6CA E6 80                                and     SignOnly8Bit                    ; and set y sign
 366+ C6CC 32 25 C0                             ld      (UBnKysgn),a
 367+ C6CF CB 08        .setYHigh:              rrc     b                               ; as value is in b rotate again
 368+ C6D1 78                                   ld      a,b                             ;
 369+ C6D2 E6 1F                                and     31                              ; set y hi to random 0 to 31
 370+ C6D4 32 24 C0                             ld      (UBnKyhi),a                     ;
 371+ C6D7 CB 08        .setXHigh:              rrc     b                               ; as value is in b rotate again
 372+ C6D9 78                                   ld      a,b
 373+ C6DA E6 1F                                and     31                              ; set x hi to random 0 to 31
 374+ C6DC 4F                                   ld      c,a                             ; save shifted into c as well
 375+ C6DD 32 21 C0                             ld      (UBnKxhi),a
 376+ C6E0 3E 50        .setZHigh:              ld      a,80                            ; set z hi to 80 - xhi - yhi - carry
 377+ C6E2 98                                   sbc     b
 378+ C6E3 99                                   sbc     c
 379+ C6E4 32 27 C0                             ld      (UBnKzhi),a
 380+ C6E7 3A 45 C3     .CheckIfBodyOrJunk:     ld      a,(ShipTypeAddr)
 381+ C6EA                                      ReturnIfAEqNusng ShipTypeJunk
 381+ C6EA FE 03       >                        cp      ShipTypeJunk
 381+ C6EC C8          >                        ret     z
 382+ C6ED                                      ReturnIfAEqNusng ShipTypeScoopable
 382+ C6ED FE 04       >                        cp      ShipTypeScoopable
 382+ C6EF C8          >                        ret     z
 383+ C6F0 78                                   ld      a,b                             ; its not junk to set z sign
 384+ C6F1 0F                                   rrca                                    ; as it can jump in
 385+ C6F2 E6 80                                and     SignOnly8Bit
 386+ C6F4 32 28 C0                             ld      (UBnKzsgn),a
 387+ C6F7 C9                                   ret
 388+ C6F8
 389+ C6F8              ; --------------------------------------------------------------
 390+ C6F8              ; This sets the cargo type or carryflag set for not cargo
 391+ C6F8              ; Later this will be done via a loadable lookup table
 392+ C6F8 3A 45 C3     ShipCargoType:          ld      a,(ShipTypeAddr)
 393+ C6FB                                      JumpIfAEqNusng ShipID_CargoType5, .CargoCanister
 393+ C6FB FE 04       >                        cp     ShipID_CargoType5
 393+ C6FD CA 14 C7    >                        jp      z,.CargoCanister
 394+ C700              .IsItThargon:           JumpIfAEqNusng ShipID_Thargon,    .Thargon
 394+ C700 FE 27       >                        cp     ShipID_Thargon
 394+ C702 CA 1A C7    >                        jp      z,.Thargon
 395+ C705              .IsItAlloy:             JumpIfAEqNusng ShipID_Plate,      .Plate
 395+ C705 FE 1D       >                        cp     ShipID_Plate
 395+ C707 CA 1D C7    >                        jp      z,.Plate
 396+ C70A              .IsItSplinter:          JumpIfAEqNusng ShipID_Splinter,   .Splinter
 396+ C70A FE 24       >                        cp     ShipID_Splinter
 396+ C70C CA 20 C7    >                        jp      z,.Splinter
 397+ C70F              .IsItEscapePod:         JumpIfAEqNusng ShipID_Escape_Pod, .EscapePod
 397+ C70F FE 11       >                        cp     ShipID_Escape_Pod
 397+ C711 CA 23 C7    >                        jp      z,.EscapePod
 398+ C714 CD 41 89     .CargoCanister:         call    doRandom
 399+ C717 E6 0F                                and     15                      ; Limit stock from Food to Platinum
 400+ C719 C9                                   ret
 401+ C71A 3E 11        .Thargon:               ld      a,AlienItemsIndex
 402+ C71C C9                                   ret
 403+ C71D 3E 0A        .Plate:                 ld      a,AlloysIndex
 404+ C71F C9                                   ret
 405+ C720 3E 0D        .Splinter:              ld      a,MineralsIndex
 406+ C722 C9                                   ret
 407+ C723 3E 04        .EscapePod:             ld      a,SlavesIndex
 408+ C725 C9                                   ret
 409+ C726
 410+ C726              ; --------------------------------------------------------------
 411+ C726              ; This sets current univrse object to space station
 412+ C726 3E 81        ResetStationLaunch:     ld  a,%10000001                         ; Has AI and 1 Missile
 413+ C728 32 54 C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 414+ C72B AF                                   xor a
 415+ C72C 32 49 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 416+ C72F 32 46 C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 417+ C732 3E FF                                ld      a,$FF
 418+ C734 32 48 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 419+ C737 21 00 00     .SetPosBehindUs:        ld      hl,$0000
 420+ C73A 22 20 C0                             ld      (UBnKxlo),hl
 421+ C73D 21 00 00                             ld      hl,$0000
 422+ C740 22 23 C0                             ld      (UBnKylo),hl
 423+ C743 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 424+ C746 22 26 C0                             ld      (UBnKzlo),hl
 425+ C749 AF                                   xor     a
 426+ C74A 32 22 C0                             ld      (UBnKxsgn),a
 427+ C74D 32 25 C0                             ld      (UBnKysgn),a
 428+ C750 3E 80                                ld      a,$80
 429+ C752 32 28 C0                             ld      (UBnKzsgn),a
 430+ C755 CD 0A C8     .SetOrientation:        call    LaunchedOrientation             ; set initial facing
 431+ C758 C9                                   ret
 432+ C759                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 433+ C759              ;Output: BC = Quotient, HL = Remainder
 434+ C759
 435+ C759
 436+ C759
 437+ C759 2A 23 29 27  FighterTypeMapping:     DB ShipID_Worm, ShipID_Sidewinder, ShipID_Viper, ShipID_Thargon
 438+ C75D
 439+ C75D              ; Initialiase data, iyh must equal slot number
 440+ C75D              ;                   iyl must be ship type
 441+ C75D              ;                   a  = current bank number
 442+ C75D 01 22 00     UnivInitRuntime:        ld      bc,UBnKRuntimeSize
 443+ C760 21 3F C0                             ld      hl,UBnKStartOfRuntimeData
 444+ C763                                      ZeroA
 444+ C763 AF          >                        xor a
 445+ C764 32 59 C0                             ld      (UBnKECMCountDown),a
 446+ C767 77           .InitLoop:              ld      (hl),a
 447+ C768 23                                   inc     hl
 448+ C769 10 FC                                djnz    .InitLoop
 449+ C76B              .SetEnergy:             ldCopyByte EnergyAddr, UBnKEnergy
 449+ C76B 3A 3D C3    >                        ld       a,(EnergyAddr)
 449+ C76E 32 58 C0    >                        ld       (UBnKEnergy),a
 450+ C771 FD 7C        .SetBankData:           ld      a,iyh
 451+ C773 32 3F C0                             ld      (UBnKSlotNumber),a
 452+ C776 C6 46                                add     a,BankUNIVDATA0
 453+ C778 32 40 C0                             ld      (UbnKShipUnivBankNbr),a
 454+ C77B FD 7D                                ld      a,iyl
 455+ C77D 32 43 C0                             ld      (UBnKShipModelId),a
 456+ C780 CD 0F E0                             call    GetShipBankId                ; this will mostly be debugging info
 457+ C783 32 41 C0                             ld      (UBnkShipModelBank),a        ; this will mostly be debugging info
 458+ C786 78                                   ld      a,b                          ; this will mostly be debugging info
 459+ C787 32 42 C0                             ld      (UBnKShipModelNbr),a         ; this will mostly be debugging info
 460+ C78A 3A 42 C3     .SetUpMissileCount:     ld      a,(LaserAddr)                ; get laser and missile details
 461+ C78D E6 0F                                and     ShipMissileCount
 462+ C78F 4F                                   ld      c,a
 463+ C790 3A 90 82                             ld      a,(RandomSeed1)              ; missile flag limit
 464+ C793 A1                                   and     c                            ; .
 465+ C794 32 5C C0                             ld      (UBnKMissilesLeft),a
 466+ C797 3A 42 C3     .SetupLaserType         ld      a,(LaserAddr)
 467+ C79A E6 F0                                and     ShipLaserPower
 468+ C79C ED 23                                swapnib
 469+ C79E 32 5B C0                             ld      (UBnKLaserPower),a
 470+ C7A1 3A 47 C3     .SetUpFighterBays:      ld      a,(ShipAIFlagsAddr)
 471+ C7A4 4F                                   ld      c,a
 472+ C7A5 E6 70                                and     ShipFighterBaySize
 473+ C7A7                                      JumpIfANENusng ShipFighterBaySizeInf, .LimitedBay
 473+ C7A7 FE 70       >                        cp     ShipFighterBaySizeInf
 473+ C7A9 C2 AE C7    >                        jp      nz,.LimitedBay
 474+ C7AC 3E FF                                ld      a,$FF                       ; force unlimited ships
 475+ C7AE ED 23        .LimitedBay:            swapnib                             ; as its bits 6 to 4 and we have removed bit 7 we can cheat with a swapnib
 476+ C7B0 32 5E C0                             ld      (UBnKFightersLeft),a
 477+ C7B3 79           .SetUpFighterType:      ld      a,c                         ; get back AI flags
 478+ C7B4 E6 0C                                and     ShipFighterType             ; fighter type is bits 2 and 3
 479+ C7B6 CB 1F                                rr      a                           ; so get them down to 0 and 1
 480+ C7B8 CB 1F                                rr      a                           ;
 481+ C7BA 21 59 C7                             ld      hl,FighterTypeMapping       ; then use the lookup table
 482+ C7BD ED 31                                add     hl,a                        ; for the respective ship id
 483+ C7BF 7E                                   ld      a,(hl)                      ; we work on this for optimisation
 484+ C7C0 32 5D C0                             ld      (UBnKFighterShipId),a       ; ship data holds index to this table
 485+ C7C3 3A 48 C3     .SetUpECM:              ld      a,(ShipECMFittedChanceAddr) ; Now handle ECM
 486+ C7C6 47                                   ld      b,a
 487+ C7C7 3A 92 82     .FetchLatestRandom:     ld      a,(RandomSeed3)
 488+ C7CA                                      JumpIfALTNusng b, .ECMFitted
 488+ C7CA B8          >                        cp      b
 488+ C7CB DA D6 C7    >                        jp		c, .ECMFitted
 489+ C7CE              .ECMNotFitted:          SetMemFalse UBnKECMFitted
 489+ C7CE 3E FF       >                        ld      a,$FF
 489+ C7D0 32 5A C0    >                        ld      (UBnKECMFitted),a
 490+ C7D3 C3 DA C7                             jp      .DoneECM
 491+ C7D6              .ECMFitted:             SetMemTrue  UBnKECMFitted
 491+ C7D6 AF          >                        xor     a
 491+ C7D7 32 5A C0    >                        ld      (UBnKECMFitted),a
 492+ C7DA              .DoneECM:               ; TODO set up laser power
 493+ C7DA C9                                   ret
 494+ C7DB
 495+ C7DB                                      include "Universe/Ships/InitialiseOrientation.asm"
# file opened: ./Universe/Ships/InitialiseOrientation.asm
   1++C7DB              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   2++C7DB              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   3++C7DB              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   4++C7DB              InitialiseOrientation:
   5++C7DB 21 00 00     ZI1:                    ld      hl, 0
   6++C7DE 22 2B C0                             ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   7++C7E1 22 2D C0                             ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   8++C7E4 22 2F C0                             ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
   9++C7E7 22 33 C0                             ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  10++C7EA 22 35 C0                             ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  11++C7ED 22 37 C0                             ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  12++C7F0 21 00 60                             ld      hl, $6000					; 96 in hi byte
  13++C7F3                                      ;ld      hl,1
  14++C7F3 22 29 C0                             ld      (UBnkrotmatSidevX),hl
  15++C7F6 22 31 C0                             ld      (UBnkrotmatRoofvY),hl
  16++C7F9 21 00 E0                             ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  17++C7FC 22 39 C0                             ld      (UBnkrotmatNosevZ),hl
  18++C7FF C9                                   ret
  19++C800
  20++C800              InitialisePlayerMissileOrientation:
  21++C800 CD DB C7                             call    InitialiseOrientation
  22++C803 21 00 60                             ld      hl,$6000
  23++C806 22 39 C0                             ld      (UBnkrotmatNosevZ),hl           ; mius
  24++C809 C9                                   ret
  25++C80A
  26++C80A
  27++C80A              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  28++C80A              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  29++C80A              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  30++C80A CD DB C7     LaunchedOrientation:    call    InitialiseOrientation
  31++C80D                                      FlipSignMem UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  31++C80D 3A 36 C0    >                        ld  a,(UBnkrotmatNosevX+1)
  31++C810 EE 80       >                        xor SignOnly8Bit
  31++C812 32 36 C0    >                        ld  (UBnkrotmatNosevX+1),a
  32++C815                                      FlipSignMem UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  32++C815 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)
  32++C818 EE 80       >                        xor SignOnly8Bit
  32++C81A 32 38 C0    >                        ld  (UBnkrotmatNosevY+1),a
  33++C81D                                      FlipSignMem UBnkrotmatNosevZ+1
  33++C81D 3A 3A C0    >                        ld  a,(UBnkrotmatNosevZ+1)
  33++C820 EE 80       >                        xor SignOnly8Bit
  33++C822 32 3A C0    >                        ld  (UBnkrotmatNosevZ+1),a
  34++C825 C9                                   ret
  35++C826
# file closed: ./Universe/Ships/InitialiseOrientation.asm
 496+ C826
 497+ C826              ;----------------------------------------------------------------------------------------------------------------------------------
 498+ C826              ;OrientateVertex:
 499+ C826              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 500+ C826              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 501+ C826              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 502+ C826              ;
 503+ C826
 504+ C826              ;----------------------------------------------------------------------------------------------------------------------------------
 505+ C826              ;TransposeVertex:
 506+ C826              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 507+ C826              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 508+ C826              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 509+ C826              ; VectorToVertex:
 510+ C826              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 511+ C826              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 512+ C826              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 513+ C826              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 514+ C826              ;OUTPUTS:   cahl = quotient cde = divisor
 515+ C826              ;--------------------------------------------------------------------------------------------------------
 516+ C826                                      include "./ModelRender/EraseOldLines-EE51.asm"
# file opened: ././ModelRender/EraseOldLines-EE51.asm
   1++C826              ;
   2++C826              ; EraseOldLines:
   3++C826              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++C826              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++C826              ;	 	loop + 4
   6++C826              ; Return
   7++C826
   8++C826              EraseOldLines:
   9++C826              EE51:										; if bit3 set draw lines in XX19 heap
  10++C826              	ReturnOnMemBitClear UBnKexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++C826 3A 51 C0    >                        ld     a,(UBnKexplDsp)
  10++C829 CB 5F       >                        bit 	3,a
  10++C82B C8          >                        ret		z
  11++C82C CB DF        	set		3,a
  12++C82E 32 51 C0     	ld		(UBnKexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++C831 C3 AC EA     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++C834              ; We use the ret from the clearLines so not needed here
  15++C834
# file closed: ././ModelRender/EraseOldLines-EE51.asm
 517+ C834                                      include "./ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ././ModelRender/TrimToScreenGrad-LL118.asm
   1++C834              ;TrimToScreenGrad:
   2++C834              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++C834              ;ret
   4++C834              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++C834              ;TODO        bit     7,a
   6++C834              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++C834              ;TODO        ld      a,h
   8++C834              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++C834              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++C834              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++C834
  12++C834              ;18                      CLC
  13++C834              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++C834              ;85 36                   STA &36			 \ XX15+2
  15++C834              ;98                      TYA 			 \ step Y1 hi
  16++C834              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++C834              ;85 37                   STA &37			 \ XX15+3
  18++C834              ;A9 00                   LDA #0			 \ xleft min
  19++C834              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++C834              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++C834              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++C834              ;	.LL119	\ x1 hi +ve from LL118
  23++C834              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++C834              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++C834              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++C834              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++C834              ;8A                      TXA 			 \ step Y1 lo
  28++C834              ;18                      CLC
  29++C834              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++C834              ;85 36                   STA &36			 \ XX15+2
  31++C834              ;98                      TYA 			 \ step Y1 hi
  32++C834              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++C834              ;85 37                   STA &37			 \ XX15+3
  34++C834              ;A2 FF                   LDX #&FF		 \ xright max
  35++C834              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++C834              ;E8                      INX 			 \ X = 0
  37++C834              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++C834              ;	.LL134	\ Ytrim
  39++C834              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++C834              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++C834              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++C834              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++C834              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++C834              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++C834              ;8A                      TXA 			 \ step X1 lo
  46++C834              ;18                      CLC
  47++C834              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++C834              ;85 34                   STA &34			 \ XX15+0
  49++C834              ;98                      TYA 			 \ step X1 hi
  50++C834              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++C834              ;85 35                   STA &35			 \ XX15+1
  52++C834              ;A9 00                   LDA #0			 \ Y bottom min
  53++C834              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++C834              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++C834              ;	.LL135	\ y1 hi +ve from LL134
  56++C834              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++C834              ;38                      SEC
  58++C834              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++C834              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++C834              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++C834              ;E9 00                   SBC #0			 \ any hi
  62++C834              ;85 83                   STA &83			 \ S
  63++C834              ;90 16                   BCC LL136		 \ failed, rts
  64++C834              ;	.LL139
  65++C834              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++C834              ;8A                      TXA 			 \ step X1 lo
  67++C834              ;18                      CLC
  68++C834              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++C834              ;85 34                   STA &34			 \ XX15+0
  70++C834              ;98                      TYA 			 \ step X1 hi
  71++C834              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++C834              ;85 35                   STA &35			 \ XX15+1
  73++C834              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++C834              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++C834              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++C834              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++C834              ;	.LL136	\ rts
  78++C834              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++C834              ;
  80++C834
# file closed: ././ModelRender/TrimToScreenGrad-LL118.asm
 518+ C834                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++C834              ;--------------------------------------------------------------------------------------------------------------------
   2++C834
   3++C834 00           clipDx                  DB      0           ; also XX12+2
   4++C835 00           clipDxHigh              DB      0           ; also XX12+3
   5++C836 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++C837 00           clipDy                  DB      0           ; also XX12+4
   7++C838 00           clipDyHigh              DB      0           ; also XX12+5
   8++C839 00           clipGradient            DB      0
   9++C83A 00           clipDxySign             DB      0
  10++C83B              varX12p3                equ     clipDxySign
  11++C83B 00           clipXGTY                DB      0
  12++C83C 00           clipFlags               DB      0
  13++C83D 00           SWAP                    DB      0
  14++C83E 00 00        varYX                   DW      0
  15++C840              ;varRegX                 DB      0
  16++C840              ;varXX12p2               DB      0
  17++C840 00           clipXX13                 DB      0
  18++C841
  19++C841
  20++C841              ; bounds check and the start to avoid dxy calcs if off screen, eliminating off screens first saves a lot of uncessary mul/div
  21++C841              ;ClipXX15XX12Line:
  22++C841 ED 4B A8 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3)
  23++C845 DD 2A AC C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1)
  24++C849 2A A6 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1)
  25++C84C ED 5B AA C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5)
  26++C850 AF                                   xor     a
  27++C851 32 3D C8                             ld      (SWAP),a                    ; SWAP = 0
  28++C854 7A                                   ld      a,d                         ; A = X2Hi
  29++C855 FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX
  30++C858                                      ;       push    af
  31++C858                                      ;       ld      a,iyh
  32++C858                                      ;       ld      (regX),a
  33++C858                                      ;       pop     af
  34++C858 DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  35++C85A 20 0A                                jr      nz, .LL107
  36++C85C DD 7D                                ld      a,ixl
  37++C85E ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  38++C861 20 03                                jr      nz,.LL107
  39++C863 FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  40++C866                                      ;        push    af
  41++C866                                      ;        ld      a,iyh
  42++C866                                      ;        ld      (regX),a
  43++C866                                      ;        pop     af
  44++C866              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  45++C866              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  46++C866 FD 7C        .LL107                  ld      a,iyh
  47++C868 32 40 C8                             ld      (clipXX13),a                ; debug copy iyh to xx13
  48++C86B 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  49++C86C B0                                   or      b                           ;
  50++C86D 20 27                                jr      nz,.LL83                    ;
  51++C86F 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  52++C870 ED 27 80                             test    $80                         ; i.e  screen height < y1)
  53++C873 20 21                                jr      nz,.LL83
  54++C875              ; If we get here, (x1, y1) is on-screen
  55++C875 FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  56++C877 FE 00                                cp      0
  57++C879 20 15                                jr      nz, .LL108
  58++C87B              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  59++C87B 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  60++C87C 32 A7 C0                             ld      (UBnkNewY1),a
  61++C87F DD 7D                                ld      a,ixl
  62++C881 32 A9 C0                             ld      (UBnkNewY2),a
  63++C884 7D                                   ld      a,l
  64++C885 32 A6 C0                             ld      (UBnkNewX1),a
  65++C888 7B                                   ld      a,e
  66++C889 32 A8 C0                             ld      (UBnkNewX2),a
  67++C88C                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  67++C88C B7          >                        or a
  68++C88D C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  69++C88E              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  70++C88E 37           .PointsOutofBounds:     scf                                 ; LL109 (ClipFailed) carry flag set as not visible
  71++C88F C9                                   ret
  72++C890 FD 7C        .LL108:                 ld      a,iyh
  73++C892 B7                                   or      a
  74++C893 1F                                   rra
  75++C894 FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  76++C896                                      ;        push    af                  ;OPTIMISATION 6/11/21 commented out
  77++C896                                      ;        ld      a,iyh               ;OPTIMISATION 6/11/21 commented out
  78++C896                                      ;        ld      (regX),a            ;OPTIMISATION 6/11/21 commented out
  79++C896                                      ;        pop     af                  ;OPTIMISATION 6/11/21 commented out
  80++C896 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  81++C898 ED 27 80                             test    $80                         ;
  82++C89B 28 28                                jr      z, .LL115                   ;
  83++C89D 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  84++C89E A2                                   and     d
  85++C89F                                      JumpIfNegative  .PointsOutofBounds
  85++C89F FA 8E C8    >                        jp		m, .PointsOutofBounds
  86++C8A2 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  87++C8A3 DD A4                                and     ixh
  88++C8A5                                      JumpIfNegative  .PointsOutofBounds
  88++C8A5 FA 8E C8    >                        jp		m, .PointsOutofBounds
  89++C8A8 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  90++C8A9 3D                                   dec     a
  91++C8AA FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  92++C8AC                                      ;        push    af                 ;OPTIMISATION 6/11/21 commented out
  93++C8AC                                      ;        ld      a,iyl              ;OPTIMISATION 6/11/21 commented out
  94++C8AC                                      ;        ld      (varXX12p2),a      ;OPTIMISATION 6/11/21 commented out
  95++C8AC                                      ;        pop     af                 ;OPTIMISATION 6/11/21 commented out
  96++C8AC 7A                                   ld      a,d                         ; a = x2 hi
  97++C8AD 3D                                   dec     a
  98++C8AE FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  99++C8B0                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  99++C8B0 F2 8E C8    >                        jp		p, .PointsOutofBounds
 100++C8B3              ;by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
 101++C8B3 DD 7C                                ld      a,ixh
 102++C8B5 3D                                   dec     a
 103++C8B6 FD 6F                                ld      iyl,a
 104++C8B8 78                                   ld      a,b
 105++C8B9 3D                                   dec     a
 106++C8BA FD B5                                or      iyl
 107++C8BC                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
 107++C8BC F2 8E C8    >                        jp		p, .PointsOutofBounds
 108++C8BF 79                                   ld      a,c
 109++C8C0 DD A5                                and     ixl
 110++C8C2                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
 110++C8C2 FA 8E C8    >                        jp		m, .PointsOutofBounds
 111++C8C5              ; Clip line: calulate the line's gradient
 112++C8C5              ; here as an optimisation we make sure X1 is always < X2  later on
 113++C8C5              .LL115:                 ClearCarryFlag
 113++C8C5 B7          >                        or a
 114++C8C6 E5 D5        .CalcDX:                push    hl,,de
 115++C8C8 EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 116++C8C9 ED 52                                sbc     hl,de
 117++C8CB                                     ; pop     de                          ; we need de back
 118++C8CB 22 34 C8                             ld      (clipDx),hl
 119++C8CE 7C                                   ld      a,h
 120++C8CF 32 36 C8                             ld      (clipDxHighNonABS),a
 121++C8D2                                     ; ld      a,e                         ;a = x2 lo
 122++C8D2                                     ; sbc     a,l                         ;a= a - x1
 123++C8D2                                     ; ld      (clipDx),a
 124++C8D2                                     ; ld      a,d
 125++C8D2                                     ; sbc     a,h
 126++C8D2                                     ; ld      (clipDxHigh),a                ; later we will just move to sub hl,de
 127++C8D2                                     ; ld      (clipDxHighNonABS),a          ; it looks liek we need this later post scale loop
 128++C8D2              .CalcDy:                ClearCarryFlag
 128++C8D2 B7          >                        or a
 129++C8D3 DD E5 E1                             ld      hl,ix
 130++C8D6 ED 42                                sbc     hl,bc
 131++C8D8 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 132++C8DA 22 37 C8                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 133++C8DD 7C           .CalcQuadrant:          ld      a,h
 134++C8DE                                     ; ld      a,ixl
 135++C8DE                                     ; sbc     c
 136++C8DE                                     ; ld      (clipDy),a
 137++C8DE                                     ; ld      a,ixh
 138++C8DE                                     ; sbc     a,b
 139++C8DE                                     ; ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 140++C8DE                                     ; pop     hl
 141++C8DE
 142++C8DE              ;So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 143++C8DE                                    ;  push    hl                          ; Set S = the sign of delta_x * the sign of delta_y, so if bit 7 of S is set, the deltas have different signs
 144++C8DE 21 35 C8                             ld      hl,clipDxHigh
 145++C8E1 AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 146++C8E2 32 9E 83                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 147++C8E5 32 3A C8                             ld      (clipDxySign),a
 148++C8E8 3A 38 C8     .AbsDy:                 ld      a,(clipDyHigh)
 149++C8EB ED 27 80                             test    $80
 150++C8EE 28 0C                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 151++C8F0 2A 37 C8                             ld      hl,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 152++C8F3                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 152++C8F3 AF          >					xor 	a
 152++C8F4 93          >                    sub 	e
 152++C8F5 5F          >                    ld 		e,a
 152++C8F6 9F          >                    sbc 	a,a
 152++C8F7 92          >                    sub 	d
 152++C8F8 57          >                    ld 		d,a
 153++C8F9 22 37 C8                             ld      (clipDy),hl                 ;OPTIMISATION 6/11/21 commented out
 154++C8FC 2A 34 C8     .LL110:                 ld      hl,(clipDx)
 155++C8FF 3A 35 C8                             ld      a,(clipDxHigh)
 156++C902 ED 27 80                             test    $80                         ; is it a negative X
 157++C905 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 158++C907                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 159++C907                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 159++C907 AF          >					xor 	a
 159++C908 95          >					sub 	l
 159++C909 6F          >					ld 		l,a
 159++C90A 9F          >					sbc 	a,a
 159++C90B 94          >					sub 	h
 159++C90C 67          >					ld 		h,a
 160++C90D                                     ; ld      (clipDx),hl                 ;OPTIMISATION 6/11/21 commented out; we still retain the old sign in NonABS version
 161++C90D              .LL111:               ;  push    de
 162++C90D                                     ; ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 163++C90D                                     ; ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 164++C90D 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 165++C90E B2                                   or      d
 166++C90F 28 0A                                jr      z,.CalculateDelta
 166++C911
 167++C911                                      ShiftDERight1
 167++C911 CB 3A       >			   srl d
 167++C913 CB 1B       >			   rr  e
 168++C915                                      ShiftHLRight1
 168++C915 CB 3C       >			   srl h
 168++C917 CB 1D       >			   rr  l
 169++C919 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 170++C91B              .CalculateDelta:        ;ld      (clipDx),hl                ;OPTIMISATION 6/11/21 commented out
 171++C91B                                      ;ld      (clipDy),de                ;OPTIMISATION 6/11/21 commented out
 172++C91B              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 173++C91B AF           .LL113:                 xor     a
 174++C91C 32 BA 83                             ld      (varT),a                    ; t = 0
 175++C91F 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 176++C920                                      JumpIfALTNusng  e, .LL114           ;
 176++C920 BB          >                        cp      e
 176++C921 DA 31 C9    >                        jp		c, .LL114
 177++C924              ; Here Dx >= Dy sp calculate Delta Y / delta X
 178++C924 32 9C 83     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 179++C927 57                                   ld      d,a                         ; d = also Q for calc
 180++C928 7B                                   ld      a,e                         ; Set A = delta_y_lo
 181++C929 CD 72 98                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 182++C92C 32 9D 83                             ld      (varR),a                    ;
 183++C92F 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 184++C931              ; Here Delta Y > Delta X so calulate delta X / delta Y
 185++C931 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 186++C932 57                                   ld      d,a
 187++C933 32 9C 83                             ld      (varQ),a
 188++C936 7D                                   ld      a,l                         ; Set A = delta_x_lo
 189++C937 CD 72 98                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 190++C93A 32 9D 83                             ld      (varR),a                    ;
 191++C93D 21 BA 83                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 192++C940 35                                   dec     (hl)
 193++C941 D1           .LL116:                 pop     de                          ; get back X2
 194++C942 E1                                   pop     hl                          ; get back X1 into hl,
 195++C943 3A 9D 83                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 196++C946 32 39 C8                             ld      (clipGradient),a
 197++C949 FD 6F                                ld      iyl,a
 198++C94B                                      ;       push    af                   ;OPTIMISATION 6/11/21 commented out
 199++C94B                                      ;       ld      a,iyl                ;OPTIMISATION 6/11/21 commented out
 200++C94B                                      ;       ld      (varXX12p2),a        ;OPTIMISATION 6/11/21 commented out
 201++C94B                                      ;       pop     af                   ;OPTIMISATION 6/11/21 commented out
 202++C94B 3A 9E 83                             ld      a,(varS)
 203++C94E 32 3A C8                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 204++C951                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 205++C951 FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 206++C953 FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 207++C955 28 05                                jr      z,.LL138                    ;
 208++C957 ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 209++C95A 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 210++C95C              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 211++C95C CD 83 C9     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 212++C95F FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 213++C961 ED 27 80                             test    $80
 214++C964 28 1A                                jr      z,.LL124
 215++C966              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 216++C966 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 217++C967 B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 218++C968 C2 8E C8                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 219++C96B B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 220++C96C FA 8E C8                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 221++C96F              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 222++C96F              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 223++C96F EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 224++C970 DD E5                                push    ix                          ;  swap Y1 and Y2
 225++C972 C5                                   push    bc
 226++C973 DD E1                                pop     ix
 227++C975 C1                                   pop     bc
 228++C976 CD 83 C9                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 229++C979 3A 3D C8                             ld      a,(SWAP)
 230++C97C 3D                                   dec     a
 231++C97D 32 3D C8                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 232++C980 C3 7B C8     .LL124:                 jp      .ClipDone                    ; now put points in place
 233++C983
 234++C983              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 235++C983              ; iyh still holds XX13 iyl still holds gradient
 236++C983 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 237++C984 ED 27 80                             test    $80
 238++C987 28 17                                jr      z,.LL119
 239++C989 32 9E 83     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 240++C98C E5 D5 C5                             push    hl,,de,,bc
 241++C98F CD 05 CA                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 242++C992                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 243++C992                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 244++C992 C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 245++C995 2A 3E C8                             ld      hl,(varYX)
 246++C998              ;                        ex      hl,de
 247++C998                                  ;    ld      hl,bc
 248++C998 09                                   add     hl,bc                       ; y1 = y1 + varYX
 249++C999 44 4D                                ld      bc,hl
 250++C99B 21 00 00                             ld      hl,0                        ; Set x1 = 0
 251++C99E               ;                       pop     de
 252++C99E 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 253++C9A0 FE 00        .LL119:                 cp      0
 254++C9A2 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 255++C9A4 3D                                   dec     a
 256++C9A5 32 9E 83                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 257++C9A8 E5 D5 C5                             push    hl,,de,,bc
 258++C9AB CD 05 CA                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 259++C9AE                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 260++C9AE                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 261++C9AE C1 D1 E1                             pop     hl,,de,,bc
 262++C9B1                                    ;  push    de                          ; Set y1 = y1 + (Y X)
 263++C9B1 2A 3E C8                             ld      hl,(varYX)
 264++C9B4                                    ; ex      de,hl                       ;OPTIMISATION 6/11/21 commented out
 265++C9B4 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 266++C9B5 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 267++C9B7                                    ; ex      hl,de                       ;OPTIMISATION 6/11/21 commented out
 268++C9B7                                    ; ld      hl,bc                       ;OPTIMISATION 6/11/21 commented out
 269++C9B7                                    ; add     hl,de                       ; y1 = y1 + varYX
 270++C9B7 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 271++C9BA                                    ;  pop     de
 272++C9BA              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 273++C9BA 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 274++C9BB ED 27 80                             test    $80                         ;
 275++C9BE 28 1A                                jr      z,.LL135                    ;
 276++C9C0 32 9E 83                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 277++C9C3 79                                   ld      a,c                         ; Set R = y1_lo
 278++C9C4 32 9D 83                             ld      (varR),a                    ;
 279++C9C7 E5 D5 C5                             push    hl,,de,,bc
 280++C9CA CD 2C CA                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 281++C9CD                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 282++C9CD                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 283++C9CD C1 D1 E1                             pop     hl,,de,,bc
 284++C9D0 D5                                   push    de
 285++C9D1 EB                                   ex      hl,de                       ; de = x1
 286++C9D2 2A 3E C8                             ld      hl,(varYX)                  ; hl = varYX
 287++C9D5 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 288++C9D6 D1                                   pop     de                          ; de = x2 again
 289++C9D7 01 00 00                             ld      bc,0                        ; Set y1 = 0
 290++C9DA 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 291++C9DB E6 80                                and     $80
 292++C9DD B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 293++C9DE C8                                   ret     z
 294++C9DF E5                                   push    hl
 295++C9E0 60 69                                ld      hl,bc
 296++C9E2 01 80 00                             ld      bc,128
 297++C9E5 B7                                   or      a
 298++C9E6 ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 299++C9E8 22 9D 83                             ld      (varRS), hl                 ; and now RS (or SR)
 300++C9EB 7C                                   ld      a,h
 301++C9EC E1                                   pop     hl
 302++C9ED ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 303++C9F0 C0                                   ret     nz
 304++C9F1              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 305++C9F1 E5 D5 C5     .LL139:                 push    hl,,de,,bc
 306++C9F4 CD 2C CA                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 307++C9F7                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 308++C9F7                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 309++C9F7 C1 D1 E1                             pop     hl,,de,,bc
 310++C9FA D5                                   push    de
 311++C9FB EB                                   ex      hl,de
 312++C9FC 2A 3E C8                             ld      hl,(varYX)
 313++C9FF 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 314++CA00 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 315++CA03 D1                                   pop     de
 316++CA04 C9           .LL136:                 ret                                 ;  Return from the subroutine
 317++CA05
 318++CA05
 319++CA05              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 320++CA05              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 321++CA05              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 322++CA05              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 323++CA05 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 324++CA06 32 9D 83                             ld      (varR),a
 325++CA09 CD 74 CA                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 326++CA0C F5                                   push    af                           ;  Store A on the stack so we can use it later
 327++CA0D C5                                   push    bc
 328++CA0E 47                                   ld      b,a
 329++CA0F 3A BA 83                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 330++CA12 FE 00                                cp      0
 331++CA14 78                                   ld      a,b
 332++CA15 C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 333++CA16 20 23                                jr      nz, LL121
 334++CA18              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 335++CA18 3A 39 C8     LL122:                  ld      a,(clipGradient)
 336++CA1B 32 9C 83                             ld      (varQ),a; optimise
 337++CA1E CD CD 95                             call    HLequSRmulQdiv256
 338++CA21 22 3E C8                             ld      (varYX),hl
 339++CA24 F1                                   pop     af
 340++CA25 ED 27 80                             test    $80
 341++CA28 CA 67 CA                             jp      z,LL133
 342++CA2B C9                                   ret
 343++CA2C              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 344++CA2C              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 345++CA2C              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 346++CA2C              ;
 347++CA2C              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 348++CA2C              ;                          LL133                Negate (Y X) and return from the subroutine
 349++CA2C              ;                          LL128                Contains an RTS
 350++CA2C CD 74 CA     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 351++CA2F F5                                   push    af                          ; Store A on the stack so we can use it later
 352++CA30 C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 353++CA31 47                                   ld      b,a
 354++CA32 3A BA 83                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 355++CA35 FE 00                                cp      0
 356++CA37 78                                   ld      a,b
 357++CA38 C1                                   pop     bc
 358++CA39 20 DD                                jr      nz, LL122
 359++CA3B              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 360++CA3B 11 FE FF     LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 361++CA3E 2A 9D 83                             ld      hl,(varRS)                  ; hl = RS
 362++CA41 3A 9C 83                             ld      a,(varQ)
 363++CA44 47                                   ld      b,a                         ; b = q
 364++CA45              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 364++CA45 CB 25       >			   sla l
 364++CA47 CB 14       >			   rl  h
 365++CA49 7C                                   ld      a,h
 366++CA4A 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 367++CA4C                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 367++CA4C B8          >                        cp      b
 367++CA4D DA 58 CA    >                        jp		c, .LL132
 368++CA50 3F           .LL131:                 ccf                                 ; compliment carry
 369++CA51 98                                   sbc     a,b                         ; q
 370++CA52 67                                   ld      h,a                         ; h (s)
 371++CA53 7D                                   ld      a,l                         ; r
 372++CA54 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 373++CA56 37                                   scf                                 ; set carry for next rolls
 374++CA57 3F                                   ccf
 375++CA58              .LL132:                 RollDELeft1                         ; Rotate de bits left
 375++CA58 CB 13       >               rl  e
 375++CA5A CB 12       >               rl  d
 376++CA5C 38 E7                                jr      c,.LL130                    ;
 377++CA5E ED 53 3E C8                          ld      (varYX),de
 378++CA62 F1                                   pop     af              ; get back sign
 379++CA63 ED 27 80                             test    $80
 380++CA66 C8                                   ret     z               ; if negative then return with value as is reversed sign
 381++CA67 2A 3E C8     LL133:                  ld      hl,(varYX)      ; may not actually need this?
 382++CA6A                                      NegHL
 382++CA6A AF          >                    xor a
 382++CA6B 95          >                    sub l
 382++CA6C 6F          >                    ld l,a
 382++CA6D 9F          >                    sbc a,a
 382++CA6E 94          >                    sub h
 382++CA6F 67          >                    ld h,a
 383++CA70 22 3E C8                             ld      (varYX),hl
 384++CA73 C9           LL128:                  ret
 385++CA74              ; Do the following, in this order:  Q = XX12+2
 386++CA74              ;                                   A = S EOR XX12+3
 387++CA74              ;                                   (S R) = |S R|
 388++CA74              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 389++CA74 3A 39 C8     LL129:                  ld      a,(clipGradient)
 390++CA77 32 9C 83                             ld      (varQ),a                    ;Set Q = XX12+2
 391++CA7A 3A 9E 83                             ld      a,(varS)                    ; If S is positive, jump to LL127
 392++CA7D E5 F5                                push    hl,,af
 393++CA7F ED 27 80                             test    $80
 394++CA82 28 0C                                jr      z,.LL127
 395++CA84 2A 9D 83                             ld      hl,(varRS)                  ; else SR = | SR|
 396++CA87                                      NegHL
 396++CA87 AF          >                    xor a
 396++CA88 95          >                    sub l
 396++CA89 6F          >                    ld l,a
 396++CA8A 9F          >                    sbc a,a
 396++CA8B 94          >                    sub h
 396++CA8C 67          >                    ld h,a
 397++CA8D 22 9D 83                             ld      (varRS),hl
 398++CA90 21 3A C8     .LL127:                 ld      hl,clipDxySign
 399++CA93 F1                                   pop     af
 400++CA94 AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 401++CA95 E1                                   pop     hl
 402++CA96 C9                                   ret
 403++CA97
# file closed: ././ModelRender/CLIP-LL145.asm
 519+ CA97              ;--------------------------------------------------------------------------------------------------------
 520+ CA97                                      include "./Universe/Ships/CopyRotmatToTransMat.asm"
# file opened: ././Universe/Ships/CopyRotmatToTransMat.asm
   1++CA97              ; Set TransMatTo
   2++CA97              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CA97              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CA97              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CA97              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CA97              CopyRotmatToTransMat:                       ; Tested
   7++CA97 21 29 C0     LL15_CopyRotMat:        ld      hl,UBnkrotmatSidevX
   8++CA9A
   9++CA9A 11 61 C0                             ld      de,UBnkTransmatSidevX
  10++CA9D                                      SixLDIInstrunctions
  10++CA9D ED A0       >                        ldi
  10++CA9F ED A0       >                        ldi
  10++CAA1 ED A0       >                        ldi
  10++CAA3 ED A0       >                        ldi
  10++CAA5 ED A0       >                        ldi
  10++CAA7 ED A0       >                        ldi
  11++CAA9 21 2F C0                             ld      hl,UBnkrotmatRoofvX
  12++CAAC 11 67 C0                             ld      de, UBnkTransmatRoofvX
  13++CAAF                                      SixLDIInstrunctions
  13++CAAF ED A0       >                        ldi
  13++CAB1 ED A0       >                        ldi
  13++CAB3 ED A0       >                        ldi
  13++CAB5 ED A0       >                        ldi
  13++CAB7 ED A0       >                        ldi
  13++CAB9 ED A0       >                        ldi
  14++CABB 21 35 C0                             ld      hl,UBnkrotmatNosevX
  15++CABE 11 6D C0                             ld      de, UBnkTransmatNosevX
  16++CAC1                                      SixLDIInstrunctions
  16++CAC1 ED A0       >                        ldi
  16++CAC3 ED A0       >                        ldi
  16++CAC5 ED A0       >                        ldi
  16++CAC7 ED A0       >                        ldi
  16++CAC9 ED A0       >                        ldi
  16++CACB ED A0       >                        ldi
  17++CACD C9                                   ret
  18++CACE
  19++CACE              CopyRotToTransMacro:    MACRO
  20++CACE ~                                    ld      hl,UBnkrotmatSidevX
  21++CACE ~                                    ld      de,UBnkTransmatSidevX
  22++CACE ~                                    SixLDIInstrunctions
  23++CACE ~                                    SixLDIInstrunctions
  24++CACE ~                                    SixLDIInstrunctions
  25++CACE                                      ENDM
  26++CACE
# file closed: ././Universe/Ships/CopyRotmatToTransMat.asm
 521+ CACE                                      include "./Universe/Ships/TransposeXX12ByShipToXX15.asm"
# file opened: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
   1++CACE              TransposeXX12ByShipToXX15:
   2++CACE 2A AC C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++CAD1 7C           		ld		a,h			                        ; get XX12 Sign
   4++CAD2 E6 80        		and		$80									; check sign bit on high byte
   5++CAD4 47           		ld		b,a									; and put it in of 12xlo in b
   6++CAD5                      ;110921 debugld      h,0
   7++CAD5 7C                   ld      a,h
   8++CAD6 E6 7F                and     $7F
   9++CAD8 67                   ld      h,a
  10++CAD9                      ;110921 debugld      h,0
  11++CAD9 ED 5B 20 C0  		ld		de,(UBnKxlo)						;
  12++CADD 3A 22 C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++CAE0 E6 80        		and		$80									; make sure we only have bit 7
  14++CAE2 4F           		ld		c,a									; and put sign of unkxsgn c
  15++CAE3 CD DF 93     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++CAE6 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++CAE7 67           		ld		h,a
  18++CAE8 22 A6 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++CAEB              ; ..................................
  20++CAEB 2A AE C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++CAEE 7C           		ld		a,h
  22++CAEF E6 80        		and		$80
  23++CAF1 47           		ld		b,a
  24++CAF2                      ;110921 debugld      h,0
  25++CAF2 7C                   ld      a,h
  26++CAF3 E6 7F                and     $7F
  27++CAF5 67                   ld      h,a
  28++CAF6                      ;110921 debugld      h,0
  29++CAF6 ED 5B 23 C0  		ld		de,(UBnKylo)
  30++CAFA 3A 25 C0     		ld		a,(UBnKysgn)
  31++CAFD E6 80        		and		$80									; make sure we only have bit 7
  32++CAFF 4F           		ld		c,a
  33++CB00 CD DF 93     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++CB03 B4           		or		h									; combine sign in A with H
  35++CB04 67           		ld		h,a
  36++CB05 22 A8 C0     		ld		(UBnkYScaled),hl
  37++CB08              ; ..................................
  38++CB08 2A B0 C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++CB0B 7C           		ld		a,h
  40++CB0C E6 80        		and		$80
  41++CB0E 47           		ld		b,a
  42++CB0F                      ;110921 debugld      h,0
  43++CB0F 7C                   ld      a,h
  44++CB10 E6 7F                and     $7F
  45++CB12 67                   ld      h,a
  46++CB13                      ;110921 debugld      h,0
  47++CB13 ED 5B 26 C0  		ld		de,(UBnKzlo)
  48++CB17 3A 28 C0     		ld		a,(UBnKzsgn)
  49++CB1A E6 80        		and		$80									; make sure we only have bit 7
  50++CB1C 4F           		ld		c,a
  51++CB1D CD DF 93     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++CB20 B4           		or		h									; combine sign in A with H
  53++CB21 67           		ld		h,a
  54++CB22 CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++CB24 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++CB26 E6 7F                and     $7F                                 ; a = value unsigned
  57++CB28 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++CB2A 7D                   ld      a,l                                 ; get low byte now
  59++CB2B              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++CB2B FE 04       >                        cp      4
  59++CB2D DA 3C CB    >                        jp		c, ClampZto4
  60++CB30              NoClampZto4:
  61++CB30 22 AA C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++CB33 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++CB34 32 BA 83             ld      (varT),a
  64++CB37 7C           		ld		a,h
  65++CB38 32 9B 83             ld      (varU),a
  66++CB3B C9           		ret
  67++CB3C              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++CB3C 21 04 00     		ld		hl,4
  69++CB3F 22 AA C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++CB42 7D           		ld		a,l
  71++CB43 32 BA 83             ld      (varT),a                            ;                                                                           ;;;
  72++CB46 7C           		ld		a,h
  73++CB47 32 9B 83             ld      (varU),a 						; compatibility for now
  74++CB4A C9           		ret
  75++CB4B
# file closed: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
 522+ CB4B                                      include "./Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ././Maths/Utilities/ScaleNodeTo8Bit.asm
   1++CB4B              ScaleNodeTo8Bit:								; TODO make signed
   2++CB4B ED 4B AA C0  	ld			bc,(UBnkZScaled)
   3++CB4F 2A A6 C0     	ld			hl,(UBnkXScaled)
   4++CB52 ED 5B A8 C0  	ld			de,(UBnkYScaled)
   5++CB56              SetABSbc:
   6++CB56 78           	ld			a,b
   7++CB57 DD 67        	ld			ixh,a
   8++CB59 E6 7F        	and			SignMask8Bit
   9++CB5B 47           	ld			b,a									; bc = ABS bc
  10++CB5C              SetABShl:
  11++CB5C 7C           	ld			a,h
  12++CB5D DD 6F        	ld			ixl,a
  13++CB5F E6 7F        	and			SignMask8Bit
  14++CB61 67           	ld			h,a									; hl = ABS hl
  15++CB62              SetABSde:
  16++CB62 7A           	ld			a,d
  17++CB63 FD 67        	ld			iyh,a
  18++CB65 E6 7F        	and			SignMask8Bit
  19++CB67 57           	ld			d,a									; de = ABS de
  20++CB68              ScaleNodeTo8BitLoop:
  21++CB68 78               ld          a,b		                            ; U	\ z hi
  22++CB69 B4           	or			h                                   ; XX15+1	\ x hi
  23++CB6A B2           	or			d                                   ; XX15+4	\ y hi
  24++CB6B 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++CB6D                  ShiftHLRight1
  25++CB6D CB 3C       >			   srl h
  25++CB6F CB 1D       >			   rr  l
  26++CB71                  ShiftDERight1
  26++CB71 CB 3A       >			   srl d
  26++CB73 CB 1B       >			   rr  e
  27++CB75              	ShiftBCRight1
  27++CB75 CB 38       >			   srl b
  27++CB77 CB 19       >			   rr  c
  28++CB79 C3 68 CB         jp          ScaleNodeTo8BitLoop
  29++CB7C              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++CB7C DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++CB7E E6 80        	and			SignOnly8Bit
  32++CB80 B0           	or			b
  33++CB81 47           	ld			b,a
  34++CB82              SignforHL:
  35++CB82 DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++CB84 E6 80        	and			SignOnly8Bit
  37++CB86 B4           	or			h
  38++CB87 67           	ld			h,a
  39++CB88              SignforDE:
  40++CB88 FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++CB8A E6 80        	and			SignOnly8Bit
  42++CB8C B2           	or			d
  43++CB8D 57           	ld			d,a
  44++CB8E              SignsDoneSaveResult:
  45++CB8E ED 43 AA C0  	ld			(UBnkZScaled),bc
  46++CB92 22 A6 C0     	ld			(UBnkXScaled),hl
  47++CB95 ED 53 A8 C0  	ld			(UBnkYScaled),de
  48++CB99 78           	ld			a,b
  49++CB9A 32 9B 83     	ld			(varU),a
  50++CB9D 79           	ld			a,c
  51++CB9E 32 BA 83     	ld			(varT),a
  52++CBA1 C9           	ret
  53++CBA2
# file closed: ././Maths/Utilities/ScaleNodeTo8Bit.asm
 523+ CBA2
 524+ CBA2              ;--------------------------------------------------------------------------------------------------------
 525+ CBA2 21 D2 C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 526+ CBA5 ED 31                                add     hl,a
 527+ CBA7 3E FF                                ld      a,$FF
 528+ CBA9 77                                   ld      (hl),a
 529+ CBAA C9                                   ret
 530+ CBAB              ;--------------------------------------------------------------------------------------------------------
 531+ CBAB 21 D2 C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 532+ CBAE ED 31                                add     hl,a
 533+ CBB0 AF                                   xor     a
 534+ CBB1 77                                   ld      (hl),a
 535+ CBB2 C9                                   ret
 536+ CBB3              ;--------------------------------------------------------------------------------------------------------
 537+ CBB3 3A 3B C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 538+ CBB6 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 539+ CBB8 CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 540+ CBBA 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 541+ CBBB 21 D2 C0                             ld      hl,UbnkFaceVisArray
 542+ CBBE 3E FF                                ld      a,$FF
 543+ CBC0              SetAllFacesVisibleLoop:
 544+ CBC0 77           EE30:                   ld      (hl),a
 545+ CBC1 23                                   inc     hl
 546+ CBC2 10 FC                                djnz    SetAllFacesVisibleLoop
 547+ CBC4 C9                                   ret
 548+ CBC5              ;--------------------------------------------------------------------------------------------------------
 549+ CBC5 3A 3B C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 550+ CBC8 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 551+ CBCA CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 552+ CBCC 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 553+ CBCD 06 10                                ld      b,16
 554+ CBCF 21 D2 C0                             ld      hl,UbnkFaceVisArray
 555+ CBD2 3E 00                                ld      a,$00
 556+ CBD4 77           SetAllFacesHiddenLoop:  ld      (hl),a
 557+ CBD5 23                                   inc     hl
 558+ CBD6 10 FC                                djnz    SetAllFacesHiddenLoop
 559+ CBD8 C9                                   ret
 560+ CBD9
 561+ CBD9              ;;;;X = normal scale
 562+ CBD9              ;;;;ZtempHi = zhi
 563+ CBD9              ;;;;......................................................
 564+ CBD9              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 565+ CBD9              ;;;;  Loop                                              ::LL90
 566+ CBD9              ;;;;     inc X
 567+ CBD9              ;;;;     divide X, Y & ZtempHiLo by 2
 568+ CBD9              ;;;;  Until ZtempHi = 0
 569+ CBD9              ;;;;......................................................
 570+ CBD9              ;-LL21---------------------------------------------------------------------------------------------------
 571+ CBD9                                      include "Universe/Ships/NormaliseTransMat.asm"
# file opened: ./Universe/Ships/NormaliseTransMat.asm
   1++CBD9              ;divdide by 16 using undocumented instrunctions
   2++CBD9              Norm256mulAdivQ:
   3++CBD9 47               ld      b,a
   4++CBDA 0E 00            ld      c,0
   5++CBDC 16 00            ld      d,0
   6++CBDE 3A 9C 83         ld      a,(varQ)
   7++CBE1 5F               ld      e,a
   8++CBE2              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++CBE2              ;Output: BC = Quotient, HL = Remainder
  10++CBE2              NormDIV16UNDOC:
  11++CBE2 21 00 00         ld      hl,0
  12++CBE5 78               ld      a,b
  13++CBE6 06 10            ld      b,16
  14++CBE8              NormDIV16UNDOCLOOP:
  15++CBE8 CB 31        	sll	    c		; unroll 16 times
  16++CBEA 17           	rla	    		; ...
  17++CBEB ED 6A        	adc	    hl,hl		; ...
  18++CBED ED 52        	sbc	    hl,de		; ...
  19++CBEF 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++CBF1 19           	add	    hl,de		; ...
  21++CBF2 0D           	dec	    c		; ...
  22++CBF3              NormDIV16UNDOCSKIP:
  23++CBF3 10 F3            djnz    NormDIV16UNDOCLOOP
  24++CBF5 79               ld      a,c
  25++CBF6 32 9D 83         ld      (varR),a
  26++CBF9 C9               ret
  27++CBFA
  28++CBFA FD 67        Norm256mulAdivQSignA:   ld      iyh,a
  29++CBFC                                      ClearSignBitA
  29++CBFC E6 7F       >                        and     SignMask8Bit
  30++CBFE CD D9 CB                             call    Norm256mulAdivQ              ; do 15 bit unsigned
  31++CC01 FD 7C                                ld      a,iyh                       ; now correct R reg
  32++CC03                                      SignBitOnlyA
  32++CC03 E6 80       >                        and     SignOnly8Bit
  33++CC05 B1                                   or      c
  34++CC06 32 9D 83                             ld      (varR),a
  35++CC09 C9                                   ret
  36++CC0A
  37++CC0A              ; Tested OK
  38++CC0A              ;LL21
  39++CC0A              NormaliseTransMat:
  40++CC0A                      IFDEF LOGMATHS
  41++CC0A ~                            ld      hl,UBnkTransmatNosevZ+1     ; initialise loop
  42++CC0A ~                            ld      b,9                         ; total of 9 elements to transform
  43++CC0A ~                            MMUSelectMathsTables
  44++CC0A ~            .LL21Loop:      ld      d,(hl)
  45++CC0A ~                            dec     hl
  46++CC0A ~                            ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  47++CC0A ~                            ShiftDELeft1                        ; De = DE * 2
  48++CC0A ~                            ld      a,d                         ; a = hi byte after shifting
  49++CC0A ~                            push	hl
  50++CC0A ~                            push	bc
  51++CC0A ~                            call    AEquAmul256Div197Log        ; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  52++CC0A ~                            ;ld      a,c                         ; BFRDIV returns R also in l reg
  53++CC0A ~                            pop		bc
  54++CC0A ~                            pop		hl							; bc gets wrecked by BFRDIV
  55++CC0A ~                            ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  56++CC0A ~                            dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  57++CC0A ~                            djnz    .LL21Loop                   ; loop from 2zLo through to 0xLo
  58++CC0A ~                            MMUSelectROM0
  59++CC0A ~                            ret
  60++CC0A                      ELSE
  61++CC0A 21 72 C0                     ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  62++CC0D 0E C5                        ld      c,ConstNorm                 ; c = Q = norm = 197
  63++CC0F 79                           ld      a,c
  64++CC10 32 9C 83                     ld      (varQ),a                    ; set up varQ
  65++CC13 06 09                        ld      b,9                         ; total of 9 elements to transform
  66++CC15 56           LL21Loop:       ld      d,(hl)
  67++CC16 2B                           dec     hl
  68++CC17 5E                           ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  69++CC18                              ShiftDELeft1                        ; De = DE * 2
  69++CC18 CB 23       >			   sla e
  69++CC1A CB 12       >			   rl  d
  70++CC1C 7A                           ld      a,d                         ; a = hi byte after shifting
  71++CC1D E5                           push	hl
  72++CC1E C5                           push	bc
  73++CC1F CD D9 CB                     call    Norm256mulAdivQ
  74++CC22                              ;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  75++CC22 79                           ld      a,c                         ; BFRDIV returns R also in l reg
  76++CC23 C1                           pop		bc
  77++CC24 E1                           pop		hl							; bc gets wrecked by BFRDIV
  78++CC25 77                           ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  79++CC26 2B                           dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  80++CC27 10 EC                        djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  81++CC29 C9                           ret
  82++CC2A                      ENDIF
# file closed: ./Universe/Ships/NormaliseTransMat.asm
 572+ CC2A              ;;;                        include "Universe/Ships/NormaliseXX15.asm"
 573+ CC2A              ;-LL91---------------------------------------------------------------------------------------------------
 574+ CC2A
 575+ CC2A              ; Now we have
 576+ CC2A              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 577+ CC2A              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 578+ CC2A              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 579+ CC2A              ;
 580+ CC2A              ;--------------------------------------------------------------------------------------------------------
 581+ CC2A                                      include "Universe/Ships/InverseXX16.asm"
# file opened: ./Universe/Ships/InverseXX16.asm
   1++CC2A              ; TESTEDOK
   2++CC2A
   3++CC2A              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++CC2A              ;        ld      a,(XX17)
   5++CC2A              ;        ld      ixl,a
   6++CC2A              ;        ld      ixh,9
   7++CC2A              ;        ld      hl,UBnkTransInv0x
   8++CC2A              ;        ld      a,(hl)
   9++CC2A              ;ScaleNode:
  10++CC2A              ;        ld      b,ixl
  11++CC2A              ;ScaleNodeLoop:
  12++CC2A              ;        sla      a
  13++CC2A              ;        djnz    ScaleNodeLoop
  14++CC2A              ;        ld      (hl),a
  15++CC2A              ;        inc     hl
  16++CC2A              ;        inc     hl
  17++CC2A              ;        dec     ixh
  18++CC2A              ;        jr      nz,ScaleNode
  19++CC2A              ;        ret
  20++CC2A
  21++CC2A
  22++CC2A              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++CC2A              ; we coudl combine this with move to transmat later as an optimisation
  24++CC2A              ; INPUT - All Scaled
  25++CC2A              ;  They transmat has already been put into side, roof nose order
  26++CC2A              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++CC2A              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++CC2A              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++CC2A              ; OUTPUT
  30++CC2A              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++CC2A              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++CC2A              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++CC2A              ; First all side values become compoment 0 of each vector
  34++CC2A 2A 61 C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++CC2D ED 5B 67 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++CC31 ED 4B 6D C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++CC35 22 79 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++CC38 ED 53 7B C0          ld      (UbnkTransInvRow0x1),de     ;
  39++CC3C ED 43 7D C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++CC40 2A 63 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++CC43 ED 5B 69 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++CC47 ED 4B 6F C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++CC4B 22 81 C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++CC4E ED 53 83 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++CC52 ED 43 85 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++CC56 2A 65 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++CC59 ED 5B 6B C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++CC5D ED 4B 71 C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++CC61 22 89 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++CC64 ED 53 8B C0          ld      (UbnkTransInvRow2z1),de     ;
  51++CC68 ED 43 8D C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++CC6C C9                   ret
  53++CC6D
  54++CC6D
# file closed: ./Universe/Ships/InverseXX16.asm
 582+ CC6D              ;--------------------------------------------------------------------------------------------------------
 583+ CC6D              ;--------------------------------------------------------------------------------------------------------
 584+ CC6D              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 585+ CC6D              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 586+ CC6D              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 587+ CC6D              ; Returns
 588+ CC6D              ;
 589+ CC6D              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 590+ CC6D              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 591+ CC6D              ;
 592+ CC6D              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 593+ CC6D              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 594+ CC6D              ;
 595+ CC6D              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 596+ CC6D              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 597+ CC6D              ; TESTEDOK
 598+ CC6D              XX12DotOneRow:
 599+ CC6D              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 599+ CC6D 3A A6 C0    >                        ld      a,(UBnkXScaled)                        ;
 599+ CC70 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 599+ CC71 7E          >                        ld      a,(hl)                        ; A = XX16 element
 599+ CC72 57          >                        ld      d,a
 599+ CC73 ED 30       >                        mul
 599+ CC75 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 599+ CC76 32 BA 83    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 600+ CC79 23                                   inc     hl                                  ; move to sign byte
 601+ CC7A              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 601+ CC7A 3A A7 C0    >                        ld      a,(UBnkXScaledSign)
 601+ CC7D AE          >                        xor     (hl)
 602+ CC7E 32 9E 83                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 603+ CC81 23                                   inc     hl
 604+ CC82              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 604+ CC82 3A A8 C0    >                        ld      a,(UBnkYScaled)                        ;
 604+ CC85 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 604+ CC86 7E          >                        ld      a,(hl)                        ; A = XX16 element
 604+ CC87 57          >                        ld      d,a
 604+ CC88 ED 30       >                        mul
 604+ CC8A 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 604+ CC8B 32 9C 83    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 605+ CC8E                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 605+ CC8E 3A BA 83    >                        ld       a,(varT)
 605+ CC91 32 9D 83    >                        ld       (varR),a
 606+ CC94 23                                   inc     hl
 607+ CC95                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 607+ CC95 3A A9 C0    >                        ld      a,(UBnkYScaledSign)
 607+ CC98 AE          >                        xor     (hl)
 608+ CC99              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 609+ CC99 E5           STequSRplusAQ           push    hl
 610+ CC9A CD 76 9D                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 611+ CC9D E1                                   pop     hl
 612+ CC9E 32 BA 83                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 613+ CCA1 23                                   inc     hl
 614+ CCA2              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 614+ CCA2 3A AA C0    >                        ld      a,(UBnkZScaled)                        ;
 614+ CCA5 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 614+ CCA6 7E          >                        ld      a,(hl)                        ; A = XX16 element
 614+ CCA7 57          >                        ld      d,a
 614+ CCA8 ED 30       >                        mul
 614+ CCAA 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 614+ CCAB 32 9C 83    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 615+ CCAE                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 615+ CCAE 3A BA 83    >                        ld       a,(varT)
 615+ CCB1 32 9D 83    >                        ld       (varR),a
 616+ CCB4 23                                   inc     hl
 617+ CCB5                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 617+ CCB5 3A AB C0    >                        ld      a,(UBnkZScaledSign)
 617+ CCB8 AE          >                        xor     (hl)
 618+ CCB9              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 619+ CCB9 CD 76 9D                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 620+ CCBC              ; Now we exit with A = result S = Sign
 621+ CCBC C9                                   ret
 622+ CCBD
 623+ CCBD
 624+ CCBD
 625+ CCBD              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 626+ CCBD              ;TESTED OK
 627+ CCBD              ;XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 628+ CCBD              XX12EquXX15DotProductXX16:
 629+ CCBD 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 630+ CCC0 21 61 C0                             ld      hl,UBnkTransmatSidevX
 631+ CCC3 CD 6D CC                             call    XX12DotOneRow
 632+ CCC6 32 AC C0                             ld      (UBnkXX12xLo),a
 633+ CCC9 3A 9E 83                             ld      a,(varS)
 634+ CCCC 32 AD C0                             ld      (UBnkXX12xSign),a
 635+ CCCF 21 67 C0                             ld      hl,UBnkTransmatRoofvX
 636+ CCD2 CD 6D CC                             call    XX12DotOneRow
 637+ CCD5 32 AE C0                             ld      (UBnkXX12yLo),a
 638+ CCD8 3A 9E 83                             ld      a,(varS)
 639+ CCDB 32 AF C0                             ld      (UBnkXX12ySign),a
 640+ CCDE 21 6D C0                             ld      hl,UBnkTransmatNosevX
 641+ CCE1 CD 6D CC                             call    XX12DotOneRow
 642+ CCE4 32 B0 C0                             ld      (UBnkXX12zLo),a
 643+ CCE7 3A 9E 83                             ld      a,(varS)
 644+ CCEA 32 B1 C0                             ld      (UBnkXX12zSign),a
 645+ CCED C9                                   ret
 646+ CCEE              ;--------------------------------------------------------------------------------------------------------
 647+ CCEE                                      include "./Universe/Ships/CopyXX12ScaledToXX18.asm"
# file opened: ././Universe/Ships/CopyXX12ScaledToXX18.asm
   1++CCEE              CopyXX12ScaledToXX18:
   2++CCEE              CopyResultToDrawCam:
   3++CCEE                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++CCEE 3A AC C0    >                        ld       a,(XX12)
   3++CCF1 32 9A C0    >                        ld       (XX18),a
   4++CCF4                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++CCF4 3A AD C0    >                        ld       a,(XX12+1)
   4++CCF7 32 9C C0    >                        ld       (XX18+2),a
   5++CCFA                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++CCFA 3A AE C0    >                        ld       a,(XX12+2)
   5++CCFD 32 9D C0    >                        ld       (XX18+3),a
   6++CD00                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++CD00 3A AF C0    >                        ld       a,(XX12+3)
   6++CD03 32 9F C0    >                        ld       (XX18+5),a
   7++CD06                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++CD06 3A B0 C0    >                        ld       a,(XX12+4)
   7++CD09 32 A0 C0    >                        ld       (XX18+6),a
   8++CD0C                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++CD0C 3A B1 C0    >                        ld       a,(XX12+5)
   8++CD0F 32 A2 C0    >                        ld       (XX18+8),a
   9++CD12 C9                   ret
  10++CD13
# file closed: ././Universe/Ships/CopyXX12ScaledToXX18.asm
 648+ CD13                                      include "./Universe/Ships/CopyXX12toXX15.asm"
# file opened: ././Universe/Ships/CopyXX12toXX15.asm
   1++CD13              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++CD13 3A AC C0    >                        ld       a,(UBnkXX12xLo)
   1++CD16 32 A6 C0    >                        ld       (UBnkXScaled),a
   2++CD19                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++CD19 3A AD C0    >                        ld       a,(UBnkXX12xSign)
   2++CD1C 32 A7 C0    >                        ld       (UBnkXScaledSign),a
   3++CD1F                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++CD1F 3A AE C0    >                        ld       a,(UBnkXX12yLo)
   3++CD22 32 A8 C0    >                        ld       (UBnkYScaled),a
   4++CD25                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++CD25 3A AF C0    >                        ld       a,(UBnkXX12ySign)
   4++CD28 32 A9 C0    >                        ld       (UBnkYScaledSign),a
   5++CD2B                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++CD2B 3A B0 C0    >                        ld       a,(UBnkXX12zLo)
   5++CD2E 32 AA C0    >                        ld       (UBnkZScaled),a
   6++CD31                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++CD31 3A B1 C0    >                        ld       a,(UBnkXX12zSign)
   6++CD34 32 AB C0    >                        ld       (UBnkZScaledSign),a
   7++CD37 C9                                   ret
   8++CD38
# file closed: ././Universe/Ships/CopyXX12toXX15.asm
 649+ CD38                                      include "./Universe/Ships/CopyXX18toXX15.asm"
# file opened: ././Universe/Ships/CopyXX18toXX15.asm
   1++CD38              CopyXX18toXX15:
   2++CD38              CopyDrawCamToScaled:
   3++CD38                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++CD38 3A 9A C0    >                        ld       a,(UBnkDrawCam0xLo)
   3++CD3B 32 A6 C0    >                        ld       (UBnkXScaled),a
   4++CD3E                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++CD3E 3A 9C C0    >                        ld       a,(UBnkDrawCam0xSgn)
   4++CD41 32 A7 C0    >                        ld       (UBnkXScaledSign),a
   5++CD44                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++CD44 3A 9D C0    >                        ld       a,(UBnkDrawCam0yLo)
   5++CD47 32 A8 C0    >                        ld       (UBnkYScaled),a
   6++CD4A                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++CD4A 3A 9F C0    >                        ld       a,(UBnkDrawCam0ySgn)
   6++CD4D 32 A9 C0    >                        ld       (UBnkYScaledSign),a
   7++CD50                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++CD50 3A A0 C0    >                        ld       a,(UBnkDrawCam0zLo)
   7++CD53 32 AA C0    >                        ld       (UBnkZScaled),a
   8++CD56                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++CD56 3A A2 C0    >                        ld       a,(UBnkDrawCam0zSgn)
   8++CD59 32 AB C0    >                        ld       (UBnkZScaledSign),a
   9++CD5C C9                   ret
  10++CD5D
# file closed: ././Universe/Ships/CopyXX18toXX15.asm
 650+ CD5D                                      include "./Universe/Ships/CopyXX18ScaledToXX15.asm"
# file opened: ././Universe/Ships/CopyXX18ScaledToXX15.asm
   1++CD5D 21 20 C0     LoadCraftToCamera:      ld      hl,UBnKxlo
   2++CD60 11 9A C0                             ld      de,UBnkDrawCam0xLo
   3++CD63                                      NineLDIInstrunctions                ; transfer 9 bytes
   3++CD63 ED A0       >		                ldi
   3++CD65 ED A0       >		                ldi
   3++CD67 ED A0       >		                ldi
   3++CD69 ED A0       >		                ldi
   3++CD6B ED A0       >		                ldi
   3++CD6D ED A0       >		                ldi
   3++CD6F ED A0       >		                ldi
   3++CD71 ED A0       >		                ldi
   3++CD73 ED A0       >		                ldi
   4++CD75 C9                                   ret
   5++CD76
   6++CD76              CopyCameraToXX15Signed:
   7++CD76 2A 9A C0             ld  hl,(UBnkDrawCam0xLo)
   8++CD79 3A 9C C0             ld  a,(UBnkDrawCam0xSgn)
   9++CD7C B4                   or  h
  10++CD7D 67                   ld  h,a
  11++CD7E 22 A6 C0             ld  (UBnkXScaled),hl
  12++CD81 2A 9D C0             ld  hl,(UBnkDrawCam0yLo)
  13++CD84 3A 9F C0             ld  a,(UBnkDrawCam0ySgn)
  14++CD87 B4                   or  h
  15++CD88 67                   ld  h,a
  16++CD89 22 A8 C0             ld  (UBnkYScaled),hl
  17++CD8C 2A A0 C0             ld  hl,(UBnkDrawCam0zLo)
  18++CD8F 3A A2 C0             ld  a,(UBnkDrawCam0zSgn)
  19++CD92 B4                   or  h
  20++CD93 67                   ld  h,a
  21++CD94 22 AA C0             ld  (UBnkZScaled),hl
  22++CD97 C9                   ret
  23++CD98
  24++CD98              CopyXX18ScaledToXX15:
  25++CD98              CopyDrawCamToScaledMatrix:
  26++CD98                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  26++CD98 3A A2 C0    >                        ld       a,(UBnkDrawCam0zSgn)
  26++CD9B 32 AB C0    >                        ld       (UBnkZScaledSign),a
  27++CD9E                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  27++CD9E 3A 9A C0    >                        ld       a,(UBnkDrawCam0xLo)
  27++CDA1 32 A6 C0    >                        ld       (UBnkXScaled),a
  28++CDA4                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  28++CDA4 3A 9C C0    >                        ld       a,(UBnkDrawCam0xSgn)
  28++CDA7 32 A7 C0    >                        ld       (UBnkXScaledSign),a
  29++CDAA                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  29++CDAA 3A 9D C0    >                        ld       a,(UBnkDrawCam0yLo)
  29++CDAD 32 A8 C0    >                        ld       (UBnkYScaled),a
  30++CDB0                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  30++CDB0 3A 9F C0    >                        ld       a,(UBnkDrawCam0ySgn)
  30++CDB3 32 A9 C0    >                        ld       (UBnkYScaledSign),a
  31++CDB6                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  31++CDB6 3A A0 C0    >                        ld       a,(UBnkDrawCam0zLo)
  31++CDB9 32 AA C0    >                        ld       (UBnkZScaled),a
  32++CDBC C9                   ret
  33++CDBD
  34++CDBD              CopyXX15ToXX18Scaled:
  35++CDBD              CopyScaledMatrixToDrawCam:
  36++CDBD                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  36++CDBD 3A AB C0    >                        ld       a,(UBnkZScaledSign)
  36++CDC0 32 A2 C0    >                        ld       (UBnkDrawCam0zSgn),a
  37++CDC3                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  37++CDC3 3A A6 C0    >                        ld       a,(UBnkXScaled)
  37++CDC6 32 9A C0    >                        ld       (UBnkDrawCam0xLo),a
  38++CDC9                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  38++CDC9 3A A7 C0    >                        ld       a,(UBnkXScaledSign)
  38++CDCC 32 9C C0    >                        ld       (UBnkDrawCam0xSgn),a
  39++CDCF                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  39++CDCF 3A A8 C0    >                        ld       a,(UBnkYScaled)
  39++CDD2 32 9D C0    >                        ld       (UBnkDrawCam0yLo),a
  40++CDD5                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  40++CDD5 3A A9 C0    >                        ld       a,(UBnkYScaledSign)
  40++CDD8 32 9F C0    >                        ld       (UBnkDrawCam0ySgn),a
  41++CDDB                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  41++CDDB 3A AA C0    >                        ld       a,(UBnkZScaled)
  41++CDDE 32 A0 C0    >                        ld       (UBnkDrawCam0zLo),a
  42++CDE1 C9                   ret
  43++CDE2
  44++CDE2
  45++CDE2              XX15EquXX15AddXX18:
  46++CDE2              LL94Z:
  47++CDE2 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  48++CDE4 16 00                ld      d,0                                                     ;
  49++CDE6 3A AA C0             ld      a,(UBnkZScaled)                                         ;
  50++CDE9 6F                   ld      l,a                                                     ;
  51++CDEA 3A AB C0             ld      a,(UBnkZScaledSign)                                     ;
  52++CDED 47                   ld      b,a                                                     ;
  53++CDEE 3A A0 C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  54++CDF1 5F                   ld      e,a                                                     ;
  55++CDF2 3A A2 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  56++CDF5 4F                   ld      c,a                                                     ;
  57++CDF6 CD DF 93             call    ADDHLDESignBC                                           ;
  58++CDF9 47                   ld      b,a                                                     ;
  59++CDFA 7C                   ld      a,h                                                     ;
  60++CDFB 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  61++CDFC 32 AB C0             ld      (UBnkZScaledSign),a                                     ;
  62++CDFF 7D                   ld      a,l                                                     ;
  63++CE00 32 AA C0             ld      (UBnkZScaled),a                                         ;           endif
  64++CE03              LL94X:
  65++CE03 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  66++CE05 16 00                ld      d,0                                                     ;
  67++CE07 3A A6 C0             ld      a,(UBnkXScaled)                                         ;
  68++CE0A 6F                   ld      l,a                                                     ;
  69++CE0B 3A A7 C0             ld      a,(UBnkXScaledSign)                                     ;
  70++CE0E 47                   ld      b,a                                                     ;
  71++CE0F 3A 9A C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  72++CE12 5F                   ld      e,a                                                     ;
  73++CE13 3A 9C C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  74++CE16 4F                   ld      c,a                                                     ;
  75++CE17 CD DF 93             call    ADDHLDESignBC                                           ;
  76++CE1A 47                   ld      b,a                                                     ;
  77++CE1B 7C                   ld      a,h                                                     ;
  78++CE1C 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  79++CE1D 32 A7 C0             ld      (UBnkXScaledSign),a                                     ;
  80++CE20 7D                   ld      a,l                                                     ;
  81++CE21 32 A6 C0             ld      (UBnkXScaled),a                                         ;           endif
  82++CE24              LL94Y:
  83++CE24 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  84++CE26 16 00                ld      d,0                                                     ;
  85++CE28 3A A8 C0             ld      a,(UBnkYScaled)                                         ;
  86++CE2B 6F                   ld      l,a                                                     ;
  87++CE2C 3A A9 C0             ld      a,(UBnkYScaledSign)                                     ;
  88++CE2F 47                   ld      b,a                                                     ;
  89++CE30 3A 9D C0             ld      a,(UBnkDrawCam0yLo)                                     ;
  90++CE33 5F                   ld      e,a                                                     ;
  91++CE34 3A 9F C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
  92++CE37 4F                   ld      c,a                                                     ;
  93++CE38 CD DF 93             call    ADDHLDESignBC                                           ;
  94++CE3B 47                   ld      b,a                                                     ;
  95++CE3C 7C                   ld      a,h                                                     ;
  96++CE3D 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  97++CE3E 32 A9 C0             ld      (UBnkYScaledSign),a                                     ;
  98++CE41 7D                   ld      a,l                                                     ;
  99++CE42 32 A8 C0             ld      (UBnkYScaled),a                                         ;
 100++CE45 C9                   ret
 101++CE46
# file closed: ././Universe/Ships/CopyXX18ScaledToXX15.asm
 651+ CE46                                      include "./Universe/Ships/CopyXX12ToScaled.asm"
# file opened: ././Universe/Ships/CopyXX12ToScaled.asm
   1++CE46              CopyXX12ToScaled:
   2++CE46              CopyResultToScaled:
   3++CE46                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++CE46 3A AC C0    >                        ld       a,(XX12+0)
   3++CE49 32 A6 C0    >                        ld       (UBnkXScaled),a
   4++CE4C                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++CE4C 3A AE C0    >                        ld       a,(XX12+2)
   4++CE4F 32 A8 C0    >                        ld       (UBnkYScaled),a
   5++CE52                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++CE52 3A B0 C0    >                        ld       a,(XX12+4)
   5++CE55 32 AA C0    >                        ld       (UBnkZScaled),a
   6++CE58 C9                   ret
   7++CE59
# file closed: ././Universe/Ships/CopyXX12ToScaled.asm
 652+ CE59              ;--------------------------------------------------------------------------------------------------------
 653+ CE59                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++CE59              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++CE59              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++CE59              ;;; S = XX12 XSign Xor XX15 XSign
   4++CE59              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++CE59              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++CE59              ;;; R = T
   7++CE59              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++CE59              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++CE59              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++CE59              ;;; Q = A * Q /256 usigned (zdot)
  11++CE59              ;;; R = T
  12++CE59              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++CE59
  14++CE59
  15++CE59
  16++CE59
  17++CE59
  18++CE59              MacroAequDxEdiv256usgn:	MACRO
  19++CE59 ~            						mul
  20++CE59 ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++CE59              						ENDM
  22++CE59              DotProductXX12XX15:
  23++CE59 3A AC C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++CE5C                      JumpIfAIsZero dotxskipzero
  24++CE5C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++CE5D CA 7A CE    >                        jp	    z, dotxskipzero
  25++CE60 5F                   ld          e,a
  26++CE61 3A A6 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++CE64 57                   ld          d,a                     ; de = xx12 x signed
  28++CE65                      JumpIfAIsZero dotxskipzero
  28++CE65 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++CE66 CA 7A CE    >                        jp	    z, dotxskipzero
  29++CE69 ED 30        		mul
  30++CE6B 42                   ld          b,d                     ; b = result
  31++CE6C 3A AD C0             ld          a,(UBnkXX12xSign)
  32++CE6F 21 A7 C0             ld          hl,UBnkXScaledSign
  33++CE72 AE                   xor         (hl)
  34++CE73 E6 80                and         $80                     ; so sign bit only
  35++CE75 FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++CE77 C3 7E CE             jp          dotmuly
  37++CE7A              dotxskipzero:
  38++CE7A AF                   xor         a
  39++CE7B 47                   ld          b,a
  40++CE7C FD 67                ld          iyh,a
  41++CE7E              dotmuly:
  42++CE7E              ; now we have b = XX12 x &d  norm x signed
  43++CE7E 3A AE C0             ld          a,(UBnkXX12yLo)
  44++CE81                      JumpIfAIsZero dotyskipzero
  44++CE81 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++CE82 CA A1 CE    >                        jp	    z, dotyskipzero
  45++CE85 5F                   ld          e,a
  46++CE86 3A A8 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++CE89                      JumpIfAIsZero dotyskipzero
  47++CE89 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++CE8A CA A1 CE    >                        jp	    z, dotyskipzero
  48++CE8D 57                   ld          d,a                     ; de = xx12 x signed
  49++CE8E ED 30                mul
  50++CE90 4A                   ld          c,d                     ; c = result
  51++CE91 DD 69                ld          ixl,c
  52++CE93 3A AF C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++CE96 21 A9 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++CE99 AE                   xor         (hl)                    ; XX15+3
  55++CE9A E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++CE9C DD 67                ld          ixh,a
  57++CE9E C3 A5 CE             jp          dotaddxy
  58++CEA1              dotyskipzero:
  59++CEA1 AF                   xor         a
  60++CEA2 4F                   ld          c,a
  61++CEA3 DD 67                ld          ixh,a
  62++CEA5              dotaddxy:
  63++CEA5              ; Optimise later as this is 16 bit
  64++CEA5 26 00                ld          h,0                     ;
  65++CEA7 68                   ld          l,b                     ; hl = xlo + x scaled
  66++CEA8 16 00                ld          d,0                     ;
  67++CEAA 59                   ld          e,c                     ; de = ylo + yscaled
  68++CEAB FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++CEAD 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++CEAE CD DF 93             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++CEB1 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++CEB2 3A B0 C0             ld          a,(UBnkXX12zLo)         ;
  73++CEB5                      JumpIfAIsZero dotzskipzero
  73++CEB5 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++CEB6 CA DB CE    >                        jp	    z, dotzskipzero
  74++CEB9 5F                   ld          e,a                     ;
  75++CEBA 3A AA C0             ld          a,(UBnkZScaled)         ;
  76++CEBD                      JumpIfAIsZero dotzskipzero
  76++CEBD A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++CEBE CA DB CE    >                        jp	    z, dotzskipzero
  77++CEC1 57                   ld          d,a
  78++CEC2 ED 30                mul
  79++CEC4 E5                   push        hl                      ; save prev result
  80++CEC5 3A AB C0             ld          a,(UBnkZScaledSign)
  81++CEC8 21 B1 C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++CECB AE                   xor         (hl)                    ; hi sign
  83++CECC E6 80                and         $80                     ; a = sign of multiply
  84++CECE 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++CECF E1                   pop         hl
  86++CED0 5A                   ld          e,d
  87++CED1 16 00                ld          d,0
  88++CED3 CD DF 93             call ADDHLDESignBC
  89++CED6 32 9E 83             ld          (varS),a
  90++CED9 7D                   ld          a,l
  91++CEDA C9                   ret                                 ; returns with A = value, varS = sign
  92++CEDB              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++CEDB 78                   ld          a,b
  94++CEDC 32 9E 83             ld          (varS),a
  95++CEDF 7D                   ld          a,l
  96++CEE0 C9                   ret
  97++CEE1              ;;;;       DotProductXX12XX15:
  98++CEE1              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++CEE1              ;;;;       ld          e,a
 100++CEE1              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++CEE1              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++CEE1              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++CEE1              ;;;;		mul
 104++CEE1              ;;;;       ld          b,d                     ; b as var T
 105++CEE1              ;;;;       ld          a,(UBnkXX12xSign)
 106++CEE1              ;;;;       ld          hl,UBnkXScaledSign
 107++CEE1              ;;;;       xor         (hl)
 108++CEE1              ;;;;       and         $80                     ; so sign bit only
 109++CEE1              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++CEE1              ;;;; now we have b = XX12 x & norm x signed
 111++CEE1              ;;;; by here B = xlo & xscaled C = result sign
 112++CEE1              ;;;;       ld          a,(UBnkXX12yLo)
 113++CEE1              ;;;;       ld          e,a
 114++CEE1              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++CEE1              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++CEE1              ;;;;       mul
 117++CEE1              ;;;;       ld          a,d
 118++CEE1              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++CEE1              ;;;;       ld          a,b                     ; get back T from above held in b
 120++CEE1              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++CEE1              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++CEE1              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++CEE1              ;;;;       xor         (hl)                    ; XX15+3
 124++CEE1              ;;;;       and         $80
 125++CEE1              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++CEE1              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++CEE1              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++CEE1              ;;;;       ld          e,a                     ; use e as var Q
 129++CEE1              ;;;;       ld          a,(UBnkZScaled)         ;
 130++CEE1              ;;;;       ld          d,a
 131++CEE1              ;;;;       mul
 132++CEE1              ;;;;       ld          a,d
 133++CEE1              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++CEE1              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++CEE1              ;;;;       ld          a,(UBnkZScaledSign)
 136++CEE1              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++CEE1              ;;;;       xor         (hl)                    ; hi sign
 138++CEE1              ;;;;       and         $80
 139++CEE1              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++CEE1              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++CEE1
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 654+ CEE1              ;--------------------------------------------------------------------------------------------------------
 655+ CEE1              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 656+ CEE1              ; Not Used in code      include "Universe/Ships/ScaleNormal.asm"
 657+ CEE1              ;--------------------------------------------------------------------------------------------------------
 658+ CEE1                                      include "./Universe/Ships/ScaleObjectDistance.asm"
# file opened: ././Universe/Ships/ScaleObjectDistance.asm
   1++CEE1              ScaleObjectDistance:
   2++CEE1              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++CEE1 3A 41 C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++CEE4 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++CEE5              LL90:                                       ; scaling object distance
   6++CEE5 3A A1 C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++CEE8 47                   ld      b,a                         ; z_hi (yReg)
   8++CEE9                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++CEE9 A7          >                        and     a
   8++CEEA C8          >                        ret     z
   9++CEEB              LL90Loop:
  10++CEEB              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++CEEB 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++CEEC                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++CEEC 2A 9D C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++CEEF CB 3C       >                    srl   h
  12++CEF1 CB 1D       >                    rr    l
  12++CEF3 22 9D C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++CEF6                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++CEF6 2A 9A C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++CEF9 CB 3C       >                    srl   h
  13++CEFB CB 1D       >                    rr    l
  13++CEFD 22 9A C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++CF00                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++CF00 2A A0 C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++CF03 CB 3C       >                    srl   h
  14++CF05 CB 1D       >                    rr    l
  14++CF07 22 A0 C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++CF0A 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++CF0B                      JumpIfAIsNotZero LL90Loop           ; loop until z hi = 0 this gives scalinging in c
  16++CF0B A7          >                        and     a
  16++CF0C C2 EB CE    >                        jp	    nz,LL90Loop
  17++CF0F C9                   ret
  18++CF10
# file closed: ././Universe/Ships/ScaleObjectDistance.asm
 659+ CF10              ;--------------------------------------------------------------------------------------------------------
 660+ CF10
 661+ CF10              ; Backface cull
 662+ CF10              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 663+ CF10              ; normal vector = cross product of ship ccordinates
 664+ CF10              ;
 665+ CF10
 666+ CF10                                      include "./Universe/Ships/CopyFaceToXX15.asm"
# file opened: ././Universe/Ships/CopyFaceToXX15.asm
   1++CF10 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++CF11 47                                   ld      b,a                                                    ;;;
   3++CF12 E6 80                                and     SignOnly8Bit
   4++CF14 32 A7 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++CF17 78                                   ld      a,b
   6++CF18 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++CF1A 47                                   ld      b,a
   8++CF1B E6 80                                and     SignOnly8Bit
   9++CF1D 32 A9 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++CF20 78                                   ld      a,b
  11++CF21 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++CF23 E6 80                                and     SignOnly8Bit
  13++CF25 32 AB C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++CF28 23                                   inc     hl                          ; move to X ccord
  15++CF29 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++CF2A 32 A6 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++CF2D 23                                   inc     hl                                                                                                                 ;;;
  18++CF2E 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++CF2F 32 A8 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++CF32 23                                   inc     hl                                                                                                                 ;;;
  21++CF33 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++CF34 32 AA C0                             ld      (UBnkZScaled),a
  23++CF37 C9                                   ret
  24++CF38
# file closed: ././Universe/Ships/CopyFaceToXX15.asm
 667+ CF38                                      include "./Universe/Ships/CopyFaceToXX12.asm"
# file opened: ././Universe/Ships/CopyFaceToXX12.asm
   1++CF38 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++CF39 47                                   ld      b,a                         ; save sign bits to b
   3++CF3A E6 80                                and     SignOnly8Bit
   4++CF3C 32 AD C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++CF3F 78                                   ld      a,b
   6++CF40 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++CF42 47                                   ld      b,a
   8++CF43 E6 80                                and     SignOnly8Bit
   9++CF45 32 AF C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++CF48 78                                   ld      a,b
  11++CF49 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++CF4B E6 80                                and     SignOnly8Bit
  13++CF4D 32 B1 C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++CF50 23                                   inc     hl                          ; move to X ccord
  15++CF51 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++CF52 32 AC C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++CF55 23                                   inc     hl                                                                                                                 ;;;
  18++CF56 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++CF57 32 AE C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++CF5A 23                                   inc     hl                                                                                                                 ;;;
  21++CF5B 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++CF5C 32 B0 C0                             ld      (UBnkXX12zLo),a
  23++CF5F C9                                   ret
  24++CF60
# file closed: ././Universe/Ships/CopyFaceToXX12.asm
 668+ CF60              ;--------------------------------------------------------------
 669+ CF60              ; Original loginc in EE29 (LL9 4 of 12)
 670+ CF60              ; Enters with XX4 = z distnace scaled to 1 .. 31
 671+ CF60              ; get number of faces * 4      FaceCntX4
 672+ CF60              ; return if no faces
 673+ CF60              ; get Face Normal scale factor FaceScale (XX17)
 674+ CF60              ; get ship pos z hi     (XX18)
 675+ CF60              ; While Z hi <> 0
 676+ CF60              ;    FaceScale = FaceScale + 1           (XX17)
 677+ CF60              ;    Ship pos y = ship pos y / 2         (XX18)
 678+ CF60              ;    ship pos x = ship pos x / 2         (XX18)
 679+ CF60              ;    ship pos z = ship pos z / 2         (XX18)
 680+ CF60              ; Loop
 681+ CF60              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 682+ CF60              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 683+ CF60              ; Copy XX12 into XX18
 684+ CF60              ; For each face
 685+ CF60              ;     Get Face sign and visibility distance byte
 686+ CF60              ;     if normal visibility range  < XX4
 687+ CF60              ;        Get Face data into XX12
 688+ CF60              ;        if FaceScale (XX17) >= 4
 689+ CF60              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 690+ CF60              ;        else
 691+ CF60              ;           Copy FaceScale scaled to X  (XX17)
 692+ CF60              ;LabelOverflowLoop:
 693+ CF60              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 694+ CF60              ;           While X >= 0
 695+ CF60              ;              X--                                                                                                  ::LL93
 696+ CF60              ;              if  x >= 0
 697+ CF60              ;                  XX15x = XX15x / 2
 698+ CF60              ;                  XX15y = XX15y / 2
 699+ CF60              ;                  XX15y = XX15y / 2
 700+ CF60              ;           loop
 701+ CF60              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 702+ CF60              ;           if A > 256 (i.e. was overflow)
 703+ CF60              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 704+ CF60              ;               X = 1
 705+ CF60              ;               Goto LabelOverflowLoop
 706+ CF60              ;           else
 707+ CF60              ;              Scaled (XX15) Z = AddZ
 708+ CF60              ;           endif
 709+ CF60              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
 710+ CF60              ;           if A > 256 (i.e. was overflow)
 711+ CF60              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 712+ CF60              ;               X = 1
 713+ CF60              ;               Goto LabelOverflowLoop
 714+ CF60              ;           else
 715+ CF60              ;              Scaled (XX15) X = AddX
 716+ CF60              ;           endif
 717+ CF60              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
 718+ CF60              ;           if A > 256 (i.e. was overflow)
 719+ CF60              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 720+ CF60              ;               X = 1
 721+ CF60              ;               Goto LabelOverflowLoop
 722+ CF60              ;           else
 723+ CF60              ;              Scaled (XX15) Y = AddY
 724+ CF60              ;           endif
 725+ CF60              ;        endif
 726+ CF60              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
 727+ CF60              ;        if dot product < 0
 728+ CF60              ;           set face visible
 729+ CF60              ;        else
 730+ CF60              ;           set face invisible
 731+ CF60              ;        end if
 732+ CF60              ;     else
 733+ CF60              ;       Set FaceVisibility to true
 734+ CF60              ;     end if
 735+ CF60              ; Next Face
 736+ CF60
 737+ CF60              ;line of sight vector = [x y z] + face normal vector
 738+ CF60
 739+ CF60              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
 740+ CF60              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
 741+ CF60              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
 742+ CF60              ;
 743+ CF60              ;--------------------------------------------------------------
 744+ CF60              ; line of sight (eye outwards dot face normal vector < 0
 745+ CF60              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
 746+ CF60              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
 747+ CF60              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
 748+ CF60
 749+ CF60                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++CF60                  DEFINE DEBUGDRAWDISTANCE 1
   2++CF60                  DEFINE DEBUGFORCEFACEDRAW 1
   3++CF60 00           CurrentNormIdx  DB 0
   4++CF61              ; SomeFacesVisible:
   5++CF61              ; EE29:
   6++CF61
   7++CF61              ;   Backface cull logic  line of sight vector . face normal vector
   8++CF61              ;       line of sight vector . face normal vector
   9++CF61              ;       => line of sight vector = [x y z] + face normal vector
  10++CF61              ;       Where [x y z] =
  11++CF61              ;                                               [ [x y z] . sidev ]
  12++CF61              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  13++CF61              ;                                               [ [x y z] . nosev ]
  14++CF61              ;
  15++CF61              ;   so project the [x y z] vector into the face's normal space
  16++CF61              ;  line of sight vector = projected [x y z] vector + face normal vector
  17++CF61              ;                         [ [x y z] . sidev ]   [ normal_x ]
  18++CF61              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  19++CF61              ;                         [ [x y z] . nosev ]   [ normal_z ]
  20++CF61              ;
  21++CF61              ;                         [ [x y z] . sidev + normal_x ]
  22++CF61              ;                       = [ [x y z] . roofv + normal_y ]
  23++CF61              ;                         [ [x y z] . nosev + normal_z ]
  24++CF61              ;
  25++CF61              ; so
  26++CF61              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  27++CF61              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  28++CF61              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  29++CF61              ;
  30++CF61              ; where face is visible if visibility < 0
  31++CF61              ;
  32++CF61              ;   so we set XX15 to [x y z] . sidev
  33++CF61              ;                     [x y z] . roofv
  34++CF61              ;                     [x y z] . nosev
  35++CF61              ;
  36++CF61
  37++CF61
  38++CF61
  39++CF61 3A A1 C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  40++CF64                                      JumpIfAIsZero .ScaleDone            ;
  40++CF64 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  40++CF65 CA 91 CF    >                        jp	    z, .ScaleDone
  41++CF68 2A 9A C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  42++CF6B ED 5B 9D C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  43++CF6F ED 4B A0 C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  44++CF73 FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  45++CF75                                      ShiftHLRight1                       ; divide cam position by 2
  45++CF75 CB 3C       >			   srl h
  45++CF77 CB 1D       >			   rr  l
  46++CF79                                      ShiftDERight1                       ;
  46++CF79 CB 3A       >			   srl d
  46++CF7B CB 1B       >			   rr  e
  47++CF7D                                      ShiftBCRight1                       ;
  47++CF7D CB 38       >			   srl b
  47++CF7F CB 19       >			   rr  c
  48++CF81 78                                   ld      a,b                         ; loop if not scaled down
  49++CF82                                      JumpIfAIsNotZero .ScaleNormalLoop     ;
  49++CF82 A7          >                        and     a
  49++CF83 C2 73 CF    >                        jp	    nz,.ScaleNormalLoop
  50++CF86 22 9A C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  51++CF89 ED 53 9D C0                          ld      (UBnkDrawCam0yLo),de        ;
  52++CF8D ED 43 A0 C0                          ld      (UBnkDrawCam0zLo),bc        ;
  53++CF91 FD 7D        .ScaleDone:             ld      a,iyl
  54++CF93 32 A3 83                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  55++CF96 C9                                   ret
  56++CF97
  57++CF97 3A 28 C0     CheckVisible:           ld      a,(UBnKzsgn)                 ; Is the ship behind us
  58++CF9A E6 80        .CheckBehind:           and     SignOnly8Bit                 ; which means z sign is negative
  59++CF9C 20 44                                jr      nz,.ShipNoDraw               ; .
  60++CF9E 2A 26 C0     .CheckViewPort:         ld      hl,(UBnKzlo)                 ; now check to see if its within 90 degree arc
  61++CFA1 7C                                   ld      a,h
  62++CFA2                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
  62++CFA2 FE C0       >                        cp     ShipMaxDistance
  62++CFA4 D2 E2 CF    >                        jp		nc,.ShipNoDraw
  63++CFA7 ED 5B 20 C0  .CheckXAxis:            ld      de,(UBnKxlo)                 ; if abs x > abx z then its out side of view port
  64++CFAB CD A6 9A                             call    compare16HLDE
  65++CFAE 38 32                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  66++CFB0 ED 5B 23 C0  .CheckYAxis:            ld      de,(UBnKylo)                ; if abs y > abx z then its out side of view port
  67++CFB4 CD A6 9A                             call    compare16HLDE
  68++CFB7 38 29                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  69++CFB9              .CalculateXX4:          ShiftHLRight1                       ; hl = z pos / 8
  69++CFB9 CB 3C       >			   srl h
  69++CFBB CB 1D       >			   rr  l
  70++CFBD                                      ShiftHLRight1                       ; .
  70++CFBD CB 3C       >			   srl h
  70++CFBF CB 1D       >			   rr  l
  71++CFC1                                      ShiftHLRight1                       ; .
  71++CFC1 CB 3C       >			   srl h
  71++CFC3 CB 1D       >			   rr  l
  72++CFC5 7C                                   ld      a,h
  73++CFC6 CB 3F                                srl     a                           ; if a / 16 <> 0 then ship is a dot
  74++CFC8              .DrawAsDotCheck:        JumpIfNotZero   .ShipIsADot
  74++CFC8 C2 E8 CF    >                        jp	nz,.ShipIsADot
  75++CFCB                                      ; Check visbility distance
  76++CFCB              .SetXX4Dist:            ;break
  77++CFCB 7D                                   ld      a,l
  78++CFCC 1F                                   rra                                 ; l may have had bit 0 of h carried in
  79++CFCD CB 3F                                srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
  80++CFCF CB 3F                                srl     a
  81++CFD1 CB 3F                                srl     a
  82++CFD3 32 52 C0                             ld      (UBnkDrawAllFaces),a        ; XX4 = "all faces" distance
  83++CFD6 3A 54 C0                             ld      a,(UBnkaiatkecm)            ; its visible but a dot
  84++CFD9 F6 40                                or      ShipIsVisible               ; Visible and not a dot
  85++CFDB E6 F7                                and     ShipIsNotDot                ;
  86++CFDD 32 54 C0                             ld      (UBnkaiatkecm),a            ;
  87++CFE0                                      ClearCarryFlag
  87++CFE0 B7          >                        or a
  88++CFE1 C9                                   ret
  89++CFE2              .ShipNoDraw:            ClearMemBitN  UBnkaiatkecm  , ShipIsVisibleBitNbr ; Assume its hidden
  89++CFE2 21 54 C0    >                        ld      hl,UBnkaiatkecm
  89++CFE5 CB B6       >                        res     ShipIsVisibleBitNbr,(hl)
  90++CFE7 C9                                   ret
  91++CFE8 3A 54 C0     .ShipIsADot:            ld      a,(UBnkaiatkecm)            ; its visible but a dot
  92++CFEB                                      IFDEF DEBUGDRAWDISTANCE
  93++CFEB F6 40                                    or      ShipIsVisible   ;
  94++CFED                                      ELSE
  95++CFED ~                                        or      ShipIsVisible | ShipIsDot   ;
  96++CFED                                      ENDIF
  97++CFED 32 54 C0                             ld      (UBnkaiatkecm),a            ;
  98++CFF0 C9                                   ret
  99++CFF1
 100++CFF1
 101++CFF1              ; TODO remove all teh processing of rotmat to load craft to camera as its already been done
 102++CFF1              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 102++CFF1 3A 3B C3    >                        ld   a,(FaceCtX4Addr)
 102++CFF4 A7          >                        and a
 102++CFF5 C8          >                        ret    z
 103++CFF6                                     ; break
 104++CFF6 CD 97 CA                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 105++CFF9 CD 79 7C                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 106++CFFC CD 5D CD                             call    LoadCraftToCamera           ; XX18 = camera
 107++CFFF                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 108++CFFF 3A 41 C3     .BackfaceLoop:          ld      a,(QAddr)                   ;
 109++D002 FD 6F                                ld      iyl,a                       ; iyl = scale factor
 110++D004              ; By this point XX18 = scaled draw cam and iyl = scale factor
 111++D004 CD 61 CF                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 112++D007 CD 76 CD                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 113++D00A CD D0 7B     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 114++D00D CD EE CC                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 115++D010 21 01 C5     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 116++D013 22 9F 82                             ld      (varV),hl
 117++D016 3A 3B C3                             ld      a,(FaceCtX4Addr)                                        ; For each face
 118++D019 CB 3F                                srl     a                                              ;
 119++D01B CB 3F                                srl     a                                              ;
 120++D01D 47                                   ld      b,a                                            ;
 121++D01E AF                                   xor     a
 122++D01F 32 60 CF                             ld      (CurrentNormIdx),a                                          ; used to increment up face incdex as b decrements
 123++D022 E5           .ProcessNormalsLoop:    push    hl
 124++D023 C5                                   push    bc
 125++D024 7E           .LL86:                  ld      a,(hl)                                         ; Get Face sign and visibility distance byte
 126++D025 E6 1F                                and     $1F                                            ; if normal visibility range  < XX4
 127++D027 E5                                   push    hl
 128++D028 21 52 C0                             ld      hl,UBnkDrawAllFaces
 129++D02B BE                                   cp      (hl)
 130++D02C E1                                   pop     hl
 131++D02D                                      IFDEF DEBUGFORCEFACEDRAW
 132++D02D C3 72 D1                                 jp      .FaceVisible
 133++D030                                      ELSE
 134++D030 ~                                        jp      c,.FaceVisible              ; then we always draw
 135++D030                                      ENDIF
 136++D030              ; This bit needs to be added to force face visible
 137++D030 CD 38 CF     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 138++D033 3A A3 83                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 139++D036 47                                   ld      b,a
 140++D037                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 140++D037 FE 04       >                        cp      4
 140++D039 DA 74 D0    >                        jp		c, .ScaleNormByXX17
 141++D03C CD 38 CD     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 142++D03F C3 03 D1                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 143++D042 3A 9A C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 144++D045 CB 3F                                srl     a                           ; which is held in XX18
 145++D047 32 9A C0                             ld      (UBnkDrawCam0xLo),a         ; .
 146++D04A 3A A0 C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 147++D04D CB 3F                                srl     a                           ; .
 148++D04F 32 A0 C0                             ld      (UBnkDrawCam0zLo),a         ; .
 149++D052 3A 9D C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 150++D055 CB 3F                                srl     a                           ; .
 151++D057 32 9D C0                             ld      (UBnkDrawCam0yLo),a        ; .
 152++D05A 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 153++D05C                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 153++D05C 3A A6 C0    >                    ld      a,(UBnkXScaled)
 153++D05F CB 3F       >                    srl     a
 153++D061 32 A6 C0    >                    ld      (UBnkXScaled),a
 154++D064                                      ShiftMem8Right1 UBnkYScaled         ;
 154++D064 3A A8 C0    >                    ld      a,(UBnkYScaled)
 154++D067 CB 3F       >                    srl     a
 154++D069 32 A8 C0    >                    ld      (UBnkYScaled),a
 155++D06C                                      ShiftMem8Right1 UBnkZScaled         ;
 155++D06C 3A AA C0    >                    ld      a,(UBnkZScaled)
 155++D06F CB 3F       >                    srl     a
 155++D071 32 AA C0    >                    ld      (UBnkZScaled),a
 156++D074              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 157++D074              .ScaleNormByXX17:       ;ld      b,a
 158++D074 CD 13 CD                             call    CopyXX12toXX15
 159++D077 05           .LL93                   dec     b
 160++D078 FA 97 D0                             jp      m, .ScaledNorm
 161++D07B              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 161++D07B 3A A6 C0    >                    ld      a,(UBnkXScaled)
 161++D07E CB 3F       >                    srl     a
 161++D080 32 A6 C0    >                    ld      (UBnkXScaled),a
 162++D083                                      ShiftMem8Right1 UBnkYScaled        ;
 162++D083 3A A8 C0    >                    ld      a,(UBnkYScaled)
 162++D086 CB 3F       >                    srl     a
 162++D088 32 A8 C0    >                    ld      (UBnkYScaled),a
 163++D08B                                      ShiftMem8Right1 UBnkZScaled        ;
 163++D08B 3A AA C0    >                    ld      a,(UBnkZScaled)
 163++D08E CB 3F       >                    srl     a
 163++D090 32 AA C0    >                    ld      (UBnkZScaled),a
 164++D093 05                                   dec     b                          ;
 165++D094 F2 7B D0                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 166++D097              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 167++D097              ; Add normal to XX15
 168++D097              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 169++D097              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 170++D097              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 171++D097              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 172++D097              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 172++D097 3A AA C0    >                        ld       a,(UBnkZScaled)
 172++D09A 32 9D 83    >                        ld       (varR),a
 173++D09D                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 173++D09D 3A B1 C0    >                        ld       a,(UBnkXX12zSign)
 173++D0A0 32 9E 83    >                        ld       (varS),a
 174++D0A3                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 174++D0A3 3A A0 C0    >                        ld       a,(UBnkDrawCam0zLo)
 174++D0A6 32 9C 83    >                        ld       (varQ),a
 175++D0A9 3A A2 C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 176++D0AC CD 76 9D                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 177++D0AF DA 42 D0                             jp      c,.Ovflw
 178++D0B2 32 AA C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 179++D0B5                                      ldCopyByte  varS, UBnkZScaledSign   ;
 179++D0B5 3A 9E 83    >                        ld       a,(varS)
 179++D0B8 32 AB C0    >                        ld       (UBnkZScaledSign),a
 180++D0BB                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 180++D0BB 3A A6 C0    >                        ld       a,(UBnkXScaled)
 180++D0BE 32 9D 83    >                        ld       (varR),a
 181++D0C1                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 181++D0C1 3A AD C0    >                        ld       a,(UBnkXX12xSign)
 181++D0C4 32 9E 83    >                        ld       (varS),a
 182++D0C7                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 182++D0C7 3A 9A C0    >                        ld       a,(UBnkDrawCam0xLo)
 182++D0CA 32 9C 83    >                        ld       (varQ),a
 183++D0CD 3A 9C C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 184++D0D0 CD 76 9D                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 185++D0D3 DA 42 D0                             jp      c,.Ovflw
 186++D0D6 32 A6 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 187++D0D9                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 187++D0D9 3A 9E 83    >                        ld       a,(varS)
 187++D0DC 32 A7 C0    >                        ld       (UBnkXScaledSign),a
 188++D0DF                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 188++D0DF 3A A8 C0    >                        ld       a,(UBnkYScaled)
 188++D0E2 32 9D 83    >                        ld       (varR),a
 189++D0E5                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 189++D0E5 3A AF C0    >                        ld       a,(UBnkXX12ySign)
 189++D0E8 32 9E 83    >                        ld       (varS),a
 190++D0EB                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 190++D0EB 3A 9D C0    >                        ld       a,(UBnkDrawCam0yLo)
 190++D0EE 32 9C 83    >                        ld       (varQ),a
 191++D0F1 3A 9F C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 192++D0F4 CD 76 9D                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 193++D0F7 DA 42 D0                             jp      c,.Ovflw                    ; .
 194++D0FA 32 A8 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 195++D0FD                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 195++D0FD 3A 9E 83    >                        ld       a,(varS)
 195++D100 32 A9 C0    >                        ld       (UBnkYScaledSign),a
 196++D103              ; calculate dot product LL89
 197++D103              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 197++D103 3A AC C0    >                        ld       a,(UBnkXX12xLo)
 197++D106 32 9C 83    >                        ld       (varQ),a
 198++D109 3A A6 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 199++D10C CD DD 9C                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 200++D10F 32 BA 83                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 201++D112 3A AD C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 202++D115 21 A7 C0                             ld      hl,UBnkXScaledSign          ; .
 203++D118 AE                                   xor     (hl)                        ; .
 204++D119 32 9E 83                             ld      (varS),a                    ; .
 205++D11C                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 205++D11C 3A AE C0    >                        ld       a,(UBnkXX12yLo)
 205++D11F 32 9C 83    >                        ld       (varQ),a
 206++D122 3A A8 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 207++D125 CD DD 9C                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 208++D128 32 9C 83                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 209++D12B                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 209++D12B 3A BA 83    >                        ld       a,(varT)
 209++D12E 32 9D 83    >                        ld       (varR),a
 210++D131 3A AF C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 211++D134 21 A9 C0                             ld      hl, UBnkYScaledSign         ; .
 212++D137 AE                                   xor     (hl)                        ; .
 213++D138 CD 76 9D                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 214++D13B 32 BA 83                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 215++D13E                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 215++D13E 3A B0 C0    >                        ld       a,(UBnkXX12zLo)
 215++D141 32 9C 83    >                        ld       (varQ),a
 216++D144 3A AA C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 217++D147 CD DD 9C                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 218++D14A 32 9C 83                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 219++D14D                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 219++D14D 3A BA 83    >                        ld       a,(varT)
 219++D150 32 9D 83    >                        ld       (varR),a
 220++D153 3A AB C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 221++D156 21 B1 C0                             ld      hl, UBnkXX12zSign           ; .
 222++D159 AE                                   xor     (hl)                        ; .
 223++D15A CD 76 9D                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 224++D15D FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 225++D15F 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 226++D161 3A 9E 83                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 227++D164 ED 27 80                             test    $80                         ; this should test S not A
 228++D167 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 229++D169 3A 60 CF     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 230++D16C CD AB CB                             call        SetFaceAHidden                                      ;           set face invisible
 231++D16F C3 78 D1                             jp          .ProcessNormalLoopEnd                                ;        end if
 232++D172 3A 60 CF     .FaceVisible:            ld          a,(CurrentNormIdx)
 233++D175 CD A2 CB                             call        SetFaceAVisible
 234++D178 21 60 CF     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 235++D17B 34                                   inc         (hl)                    ; move index pointer up by one
 236++D17C C1                                   pop         bc
 237++D17D E1                                   pop         hl                      ; get normal data pointer back
 238++D17E 3E 04                                ld          a,4
 239++D180 ED 31                                add         hl,a                    ; move to next normal entry
 240++D182 22 9F 82                             ld          (varV),hl               ; save as we need it again
 241++D185 05                                   dec         b
 242++D186 C2 22 D0                             jp          nz,.ProcessNormalsLoop
 243++D189 C9                                   ret
 244++D18A
# file closed: ././ModelRender/BackfaceCull.asm
 750+ D18A
 751+ D18A
 752+ D18A              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
 753+ D18A
 754+ D18A              TransposeXX12NodeToXX15:
 755+ D18A                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
 755+ D18A 3A 22 C0    >                        ld       a,(UBnKxsgn)
 755+ D18D 32 A8 C0    >                        ld       (UbnkXPointSign),a
 756+ D190 ED 4B AC C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 757+ D194 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 758+ D195 FA AB D1             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 759+ D198              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 760+ D198              NodeXPositiveX:
 761+ D198 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 762+ D199 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 763+ D19B 2A 20 C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
 764+ D19E 26 00                ld          h,0                                 ; but we don;t want the sign
 765+ D1A0 09                   add         hl,bc                               ; its a 16 bit add
 766+ D1A1 22 A6 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
 767+ D1A4 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 768+ D1A5 32 A8 C0             ld          (UbnkXPointSign),a
 769+ D1A8 C3 C7 D1             jp          FinishedThisNodeX
 770+ D1AB              ; If we get here then _sign and vertv_ have different signs so do subtract
 771+ D1AB              NodeNegativeX:
 772+ D1AB              LL52X:                                                 ;
 773+ D1AB 2A 20 C0             ld          hl,(UBnKxlo)                       ; Coord
 774+ D1AE ED 4B AC C0          ld          bc,(UBnkXX12xLo)                   ; XX12
 775+ D1B2 06 00                ld          b,0                                 ; XX12 lo byte only
 776+ D1B4 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 777+ D1B6 F2 C4 D1             jp          p,SetAndMopX                       ; if result is positive skip to write back
 778+ D1B9              NodeXNegSignChangeX:
 779+ D1B9              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 780+ D1B9 CD BC 9A             call        negate16hl                          ; Convert back to positive and flip sign
 781+ D1BC 3A A8 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
 782+ D1BF EE 80                xor         $80                                 ; Flip bit 7
 783+ D1C1 32 A8 C0             ld          (UbnkXPointSign),a                 ; XX15+2
 784+ D1C4              SetAndMopX:
 785+ D1C4 22 20 C0             ld          (UBnKxlo),hl                       ; XX15+0
 786+ D1C7              FinishedThisNodeX:
 787+ D1C7
 788+ D1C7              LL53:
 789+ D1C7
 790+ D1C7                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
 790+ D1C7 3A 25 C0    >                        ld       a,(UBnKysgn)
 790+ D1CA 32 AB C0    >                        ld       (UbnkYPointSign),a
 791+ D1CD ED 4B AE C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
 792+ D1D1 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 793+ D1D2 FA E8 D1             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 794+ D1D5              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 795+ D1D5              NodeXPositiveY:
 796+ D1D5 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 797+ D1D6 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 798+ D1D8 2A 23 C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
 799+ D1DB 26 00                ld          h,0                                 ; but we don;t want the sign
 800+ D1DD 09                   add         hl,bc                               ; its a 16 bit add
 801+ D1DE 22 A9 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
 802+ D1E1 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 803+ D1E2 32 A8 C0             ld          (UbnkXPointSign),a
 804+ D1E5 C3 04 D2             jp          FinishedThisNodeY
 805+ D1E8              ; If we get here then _sign and vertv_ have different signs so do subtract
 806+ D1E8              NodeNegativeY:
 807+ D1E8              LL52Y:                                                 ;
 808+ D1E8 2A 23 C0             ld          hl,(UBnKylo)                       ; Coord
 809+ D1EB ED 4B AE C0          ld          bc,(UBnkXX12yLo)                   ; XX12
 810+ D1EF 06 00                ld          b,0                                 ; XX12 lo byte only
 811+ D1F1 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 812+ D1F3 F2 01 D2             jp          p,SetAndMopY                       ; if result is positive skip to write back
 813+ D1F6              NodeXNegSignChangeY:
 814+ D1F6              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 815+ D1F6 CD BC 9A             call        negate16hl                          ; Convert back to positive and flip sign
 816+ D1F9 3A AB C0             ld          a,(UbnkYPointSign)                 ; XX15+2
 817+ D1FC EE 80                xor         $80                                 ; Flip bit 7
 818+ D1FE 32 AB C0             ld          (UbnkYPointSign),a                 ; XX15+2
 819+ D201              SetAndMopY:
 820+ D201 22 23 C0             ld          (UBnKylo),hl                       ; XX15+0
 821+ D204              FinishedThisNodeY:
 822+ D204
 823+ D204
 824+ D204              TransposeZ:
 825+ D204              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
 826+ D204 3A B1 C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
 827+ D207                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
 827+ D207 CB 7F       >                        bit 	7,a
 827+ D209 C2 1D D2    >                        jp      nz,NegativeNodeZ
 828+ D20C 3A B0 C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
 829+ D20F 2A 26 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
 830+ D212 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
 831+ D214 7D                   ld          a,l
 832+ D215 32 BA 83             ld          (varT),a                            ;                                                                           ;;;
 833+ D218 7C                   ld          a,h
 834+ D219 32 9B 83             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
 835+ D21C C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
 836+ D21D              ; Doing additions and scalings for each visible node around here                                                                    ;;;
 837+ D21D              NegativeNodeZ:
 838+ D21D              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
 839+ D21D 2A 26 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
 840+ D220 ED 4B B0 C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
 841+ D224 06 00                ld          b,0                                 ; upper byte will be garbage
 842+ D226                      ClearCarryFlag
 842+ D226 B7          >                        or a
 843+ D227 ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
 844+ D229 7D                   ld          a,l
 845+ D22A 32 BA 83             ld          (varT),a                            ; t = result low
 846+ D22D 7C                   ld          a,h
 847+ D22E 32 9B 83             ld          (varU),a                            ; u = result high
 848+ D231 E2 3E D2             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
 849+ D234              LL56Overflow:
 850+ D234 FE 00                cp          0                                   ; is varU 0?
 851+ D236 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
 852+ D238 3A BA 83             ld          a,(varT)                            ; T \ restore z lo
 853+ D23B                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
 853+ D23B FE 04       >                        cp    4
 853+ D23D D0          >                        ret	 nc
 854+ D23E              MakeNodeClose:
 855+ D23E              LL140:                                                  ; else make node close
 856+ D23E AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
 857+ D23F 32 9B 83             ld          (varU),a                            ; U
 858+ D242 3E 04                ld          a,4                                 ; lo
 859+ D244 32 BA 83             ld          (varT),a                            ; T
 860+ D247 C9                   ret
 861+ D248              ;--LL49-------------------------------------------------------------------------------------------------------------------------
 862+ D248              ProcessVisibleNode:
 863+ D248              RotateNode:                                                                                                                         ;;;
 864+ D248 CD BD CC             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
 865+ D24B              LL52LL53LL54LL55
 866+ D24B              TransposeNode:
 867+ D24B CD 8A D1             call        TransposeXX12NodeToXX15
 868+ D24E
 869+ D24E              ; ......................................................                                                         ;;;
 870+ D24E              NodeAdditionsDone:
 871+ D24E              Scale16BitTo8Bit:
 872+ D24E              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
 873+ D24E 3A 9B 83             ld          a,(varU)                            ; U \ z hi
 874+ D251 21 A7 C0             ld          hl,UbnkXPointHi
 875+ D254 B6                   or          (hl)                                ; XX15+1    \ x hi
 876+ D255 21 AA C0             ld          hl,UbnkYPointHi
 877+ D258 B6                   or          (hl)                                ; XX15+4    \ y hi
 878+ D259              AreXYZHiAllZero:
 879+ D259 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 880+ D25B              DivideXYZBy2:
 881+ D25B                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
 881+ D25B 2A A6 C0    >                    ld    hl,(UbnkXPoint)
 881+ D25E CB 3C       >                    srl   h
 881+ D260 CB 1D       >                    rr    l
 881+ D262 22 A6 C0    >                    ld    (UbnkXPoint),hl
 882+ D265                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
 882+ D265 2A A9 C0    >                    ld    hl,(UbnkYPoint)
 882+ D268 CB 3C       >                    srl   h
 882+ D26A CB 1D       >                    rr    l
 882+ D26C 22 A9 C0    >                    ld    (UbnkYPoint),hl
 883+ D26F 3A 9B 83             ld          a,(varU)                            ; U \ z hi
 884+ D272 67                   ld          h,a
 885+ D273 3A BA 83             ld          a,(varT)                            ; T \ z lo
 886+ D276 6F                   ld          l,a
 887+ D277                      ShiftHLRight1
 887+ D277 CB 3C       >			   srl h
 887+ D279 CB 1D       >			   rr  l
 888+ D27B 7C                   ld          a,h
 889+ D27C 32 9B 83             ld          (varU),a
 890+ D27F 7D                   ld          a,l
 891+ D280 32 BA 83             ld          (varT),a                            ; T \ z lo
 892+ D283 C3 4E D2             jp          Scale16BitTo8Bit                    ; loop U
 893+ D286              NodeScalingDone:
 894+ D286              LL60:                                                   ; hi U rolled to 0, exited loop above.
 895+ D286              ProjectNodeToScreen:
 896+ D286                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
 896+ D286 3A BA 83    >                        ld       a,(varT)
 896+ D289 32 9C 83    >                        ld       (varQ),a
 897+ D28C 3A A6 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
 898+ D28F 21 9C 83             ld          hl,varQ
 899+ D292 BE                   cp          (hl)                                ; Q
 900+ D293                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
 900+ D293 DA 9C D2    >                        jp		c,DoSmallAngle
 901+ D296 CD 7D 9E             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
 902+ D299 C3 A4 D2             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
 903+ D29C              DoSmallAngle:                                           ; small x angle
 904+ D29C              LL69:
 905+ D29C              ; TODO check if we need to retain BC as this trashes it
 906+ D29C              ;Input: BC = Dividend, DE = Divisor, HL = 0
 907+ D29C              ;Output: BC = Quotient, HL = Remainder
 908+ D29C 47                   ld      b,a
 909+ D29D CD 3B 99             call    DIV16UNDOC
 910+ D2A0 79                   ld      a,c
 911+ D2A1 32 9D 83             ld      (varR),a
 912+ D2A4               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
 913+ D2A4              SkipSmallAngle:
 914+ D2A4              ScaleX:
 915+ D2A4              LL65:                                                   ; both continue for scaling based on z
 916+ D2A4 3A A8 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
 917+ D2A7                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 917+ D2A7 CB 7F       >                        bit 	7,a
 917+ D2A9 C2 BC D2    >                        jp      nz,NegativeXPoint
 918+ D2AC              ; ......................................................
 919+ D2AC              PositiveXPoint:
 920+ D2AC 3A 9D 83             ld          a,(varR)
 921+ D2AF 6F                   ld          l,a
 922+ D2B0 3A 9B 83             ld          a,(varU)
 923+ D2B3 67                   ld          h,a
 924+ D2B4 3E 80                ld          a,ScreenCenterX
 925+ D2B6 ED 31                add         hl,a
 926+ D2B8 EB                   ex          de,hl
 927+ D2B9 C3 CC D2             jp          StoreXPoint
 928+ D2BC              NegativeXPoint:
 929+ D2BC              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
 930+ D2BC 3A 9D 83             ld          a,(varR)
 931+ D2BF 6F                   ld          l,a
 932+ D2C0 3A 9B 83             ld          a,(varU)
 933+ D2C3 67                   ld          h,a
 934+ D2C4 0E 80                ld          c,ScreenCenterX
 935+ D2C6 06 00                ld          b,0
 936+ D2C8                      ClearCarryFlag
 936+ D2C8 B7          >                        or a
 937+ D2C9 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
 938+ D2CB EB                   ex          de,hl
 939+ D2CC              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
 940+ D2CC FD 73 00             ld          (iy+0),e                            ; Update X Point
 941+ D2CF FD 72 01             ld          (iy+1),d                            ; Update X Point
 942+ D2D2 FD 23                inc         iy
 943+ D2D4 FD 23                inc         iy
 944+ D2D6              ; ......................................................
 945+ D2D6              LL66:
 946+ D2D6              ProcessYPoint:
 947+ D2D6 AF                   xor         a                                   ; y hi = 0
 948+ D2D7 32 9B 83             ld          (varU),a                            ; U
 949+ D2DA                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
 949+ D2DA 3A BA 83    >                        ld       a,(varT)
 949+ D2DD 32 9C 83    >                        ld       (varQ),a
 950+ D2E0 3A A9 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
 951+ D2E3 21 9C 83             ld          hl,varQ
 952+ D2E6 BE                   cp          (hl)                                ; Q
 953+ D2E7                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
 953+ D2E7 DA F0 D2    >                        jp		c,SmallYHop
 954+ D2EA              SmallYPoint:
 955+ D2EA CD 7D 9E             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
 956+ D2ED C3 F3 D2             jp          SkipYScale                          ; LL68 hop over small y yangle
 957+ D2F0              SmallYHop:
 958+ D2F0              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
 959+ D2F0 CD 5A 9E             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
 960+ D2F3              SkipYScale:
 961+ D2F3              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
 962+ D2F3 3A AB C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
 963+ D2F6 CB 7F                bit         7,a
 964+ D2F8 C2 0B D3             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 965+ D2FB              PositiveYPoint:
 966+ D2FB 3A 9D 83             ld          a,(varR)
 967+ D2FE 6F                   ld          l,a
 968+ D2FF 3A 9B 83             ld          a,(varU)
 969+ D302 67                   ld          h,a
 970+ D303 3E 60                ld          a,ScreenHeightHalf
 971+ D305 ED 31                add         hl,a
 972+ D307 EB                   ex          de,hl
 973+ D308 C3 1B D3             jp          LL50
 974+ D30B              NegativeYPoint:
 975+ D30B              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
 976+ D30B 3A 9D 83             ld          a,(varR)
 977+ D30E 6F                   ld          l,a
 978+ D30F 3A 9B 83             ld          a,(varU)
 979+ D312 67                   ld          h,a
 980+ D313 0E 60                ld          c,ScreenHeightHalf
 981+ D315 06 00                ld          b,0
 982+ D317                      ClearCarryFlag
 982+ D317 B7          >                        or a
 983+ D318 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
 984+ D31A EB                   ex          de,hl
 985+ D31B              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
 986+ D31B FD 73 00             ld          (iy+0),e                            ; Update X Point
 987+ D31E FD 72 01             ld          (iy+1),d                            ; Update X Point
 988+ D321 FD 23                inc         iy
 989+ D323 FD 23                inc         iy
 990+ D325 C9                   ret
 991+ D326              ;--------------------------------------------------------------------------------------------------------
 992+ D326              ;;;     Byte 0 = X magnitide with origin at middle of ship
 993+ D326              ;;;     Byte 1 = Y magnitide with origin at middle of ship
 994+ D326              ;;;     Byte 2 = Z magnitide with origin at middle of ship
 995+ D326              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
 996+ D326              CopyNodeToXX15:
 997+ D326                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
 997+ D326 7E          >                        ld       a,(hl)
 997+ D327 32 A6 C0    >                        ld       (UBnkXScaled),a
 998+ D32A 23                   inc         hl
 999+ D32B                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
 999+ D32B 7E          >                        ld       a,(hl)
 999+ D32C 32 A8 C0    >                        ld       (UBnkYScaled),a
1000+ D32F 23                   inc         hl
1001+ D330                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1001+ D330 7E          >                        ld       a,(hl)
1001+ D331 32 AA C0    >                        ld       (UBnkZScaled),a
1002+ D334 23                   inc         hl
1003+ D335              PopulateXX15SignBits:
1004+ D335              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1005+ D335 7E                   ld          a,(hl)
1006+ D336 4F                   ld          c,a                                 ; copy sign and visibility to c
1007+ D337 47                   ld          b,a
1008+ D338 E6 80                and         $80                                 ; keep high 3 bits
1009+ D33A 32 A7 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1010+ D33D 78                   ld          a,b
1011+ D33E E6 40                and         $40
1012+ D340 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1013+ D342 32 A9 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1014+ D345 78                   ld          a,b
1015+ D346 E6 20                and         $20
1016+ D348 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1017+ D34A CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1018+ D34C 32 AB C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1019+ D34F 79                   ld          a,c                                 ; returns a with visibility sign byte
1020+ D350 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1021+ D352 32 BA 83             ld          (varT),a                            ; and store in varT as its needed later
1022+ D355 C9                   ret
1023+ D356
1024+ D356              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1025+ D356              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1026+ D356              ;..............................................................................................................................
1027+ D356              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1028+ D356              LL48GetScale:
1029+ D356 3A 8B 82             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1030+ D359 5F                   ld          e,a
1031+ D35A CD 26 D3             call        CopyNodeToXX15
1032+ D35D              LL48GetVertices:
1033+ D35D              LL48GetVertSignAndVisDist:
1034+ D35D                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1034+ D35D BB          >                        cp      e
1034+ D35E DA 9B D3    >                        jp		c, NodeIsNotVisible
1035+ D361              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1036+ D361                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1036+ D361 23          >                    inc         hl                                  ; vertex byte#1
1036+ D362 7E          >                    ld          a,(hl)                              ;
1036+ D363 32 9A 82    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1037+ D366 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1038+ D367 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1039+ D369 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1040+ D36A                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1040+ D36A 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
1040+ D36D ED 31       >                    add         hl,a
1040+ D36F 7E          >                    ld          a,(hl)
1041+ D370 E1                   pop         hl                                  ;                                                                           ;;;
1042+ D371                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1042+ D371 A7          >                        and     a
1042+ D372 C2 A1 D3    >                        jp	    nz,NodeIsVisible
1043+ D375              CheckFace2:                                                                                                                         ;;;
1044+ D375 7A                   ld          a,d                                                                                                             ;;;
1045+ D376 ED 23                swapnib                                                                                                                     ;;;
1046+ D378 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1047+ D37A                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1047+ D37A A7          >                        and     a
1047+ D37B C2 A1 D3    >                        jp	    nz,NodeIsVisible
1048+ D37E              CheckFace3:                                                                                                                         ;;;
1049+ D37E                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1049+ D37E 23          >                    inc         hl                                  ; vertex byte#1
1049+ D37F 7E          >                    ld          a,(hl)                              ;
1049+ D380 32 9A 82    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1050+ D383 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1051+ D384 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1052+ D386 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1053+ D387                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1053+ D387 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
1053+ D38A ED 31       >                    add         hl,a
1053+ D38C 7E          >                    ld          a,(hl)
1054+ D38D E1                   pop         hl                                  ;                                                                           ;;;
1055+ D38E                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1055+ D38E A7          >                        and     a
1055+ D38F C2 A1 D3    >                        jp	    nz,NodeIsVisible
1056+ D392              CheckFace4:                                                                                                                         ;;;
1057+ D392 7A                   ld          a,d                                                                                                             ;;;
1058+ D393 ED 23                swapnib                                                                                                                     ;;;
1059+ D395 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1060+ D397                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1060+ D397 A7          >                        and     a
1060+ D398 C2 A1 D3    >                        jp	    nz,NodeIsVisible
1061+ D39B              NodeIsNotVisible:                                                                                                                   ;;;
1062+ D39B 01 04 00             ld          bc,4
1063+ D39E FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1064+ D3A0                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1065+ D3A0 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1066+ D3A1              NodeIsVisible:
1067+ D3A1              LL49:
1068+ D3A1 CD 48 D2             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1069+ D3A4 C9                   ret
1070+ D3A5
1071+ D3A5
1072+ D3A5              ProjectNodeToEye:
1073+ D3A5 ED 4B AA C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1074+ D3A9 79           	ld			a,c                                 ;  so no need for a negative check
1075+ D3AA 32 9C 83     	ld			(varQ),a		                    ; VarQ = z
1076+ D3AD 3A A6 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1077+ D3B0 CD 24 99     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1078+ D3B3 3A A7 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1079+ D3B6                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1079+ D3B6 CB 7F       >                        bit 	7,a
1079+ D3B8 C2 C3 D3    >                        jp      nz,EyeNegativeXPoint
1080+ D3BB              EyePositiveXPoint:									; x was positive result
1081+ D3BB 2E 80            ld          l,ScreenCenterX						;
1082+ D3BD 26 00            ld          h,0
1083+ D3BF 09               add         hl,bc								; hl = Screen Centre + X
1084+ D3C0 C3 CA D3         jp          EyeStoreXPoint
1085+ D3C3              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1086+ D3C3 2E 80            ld          l,ScreenCenterX
1087+ D3C5 26 00            ld          h,0
1088+ D3C7                  ClearCarryFlag
1088+ D3C7 B7          >                        or a
1089+ D3C8 ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1090+ D3CA              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1091+ D3CA EB               ex          de,hl
1092+ D3CB FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1093+ D3CE FD 72 01         ld          (iy+1),d                            ; Update X Point
1094+ D3D1              EyeProcessYPoint:
1095+ D3D1 ED 4B AA C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1096+ D3D5 79           	ld			a,c
1097+ D3D6 32 9C 83     	ld			(varQ),a
1098+ D3D9 3A A8 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1099+ D3DC CD 24 99     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1100+ D3DF 3A A9 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1101+ D3E2                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1101+ D3E2 CB 7F       >                        bit 	7,a
1101+ D3E4 C2 EF D3    >                        jp      nz,EyeNegativeYPoint
1102+ D3E7              EyePositiveYPoint:									; Y is positive so above the centre line
1103+ D3E7 2E 60            ld          l,ScreenCenterY
1104+ D3E9                  ClearCarryFlag
1104+ D3E9 B7          >                        or a
1105+ D3EA ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1106+ D3EC C3 F4 D3         jp          EyeStoreYPoint
1107+ D3EF              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1108+ D3EF 2E 60            ld          l,ScreenCenterY
1109+ D3F1 26 00            ld          h,0
1110+ D3F3 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1111+ D3F4              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1112+ D3F4 EB               ex          de,hl
1113+ D3F5 FD 73 02         ld          (iy+2),e                            ; Update Y Point
1114+ D3F8 FD 72 03         ld          (iy+3),d                            ; Update Y Point
1115+ D3FB C9               ret
1116+ D3FC
1117+ D3FC
1118+ D3FC
1119+ D3FC              ; Pitch and roll are 2 phases
1120+ D3FC              ; 1 - we apply our pitch and roll to the ship position
1121+ D3FC              ;       x -> x + alpha * (y - alpha * x)
1122+ D3FC              ;       y -> y - alpha * x - beta * z
1123+ D3FC              ;       z -> z + beta * (y - alpha * x - beta * z)
1124+ D3FC              ; which can be simplified as:
1125+ D3FC              ;       1. K2 = y - alpha * x
1126+ D3FC              ;       2. z = z + beta * K2
1127+ D3FC              ;       3. y = K2 - beta * z
1128+ D3FC              ;       4. x = x + alpha * y
1129+ D3FC              ; 2 - we apply our patch and roll to the ship orientation
1130+ D3FC              ;      Roll calculations:
1131+ D3FC              ;
1132+ D3FC              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1133+ D3FC              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1134+ D3FC              ;      Pitch calculations:
1135+ D3FC              ;
1136+ D3FC              ;        nosev_y = nosev_y - beta * nosev_z_hi
1137+ D3FC              ;        nosev_z = nosev_z + beta * nosev_y_hi
1138+ D3FC
1139+ D3FC
1140+ D3FC              ; ---------------------------------------------------------------------------------------------------------------------------------
1141+ D3FC                          INCLUDE "./Universe/Ships/ApplyMyRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyMyRollAndPitch.asm
   1++D3FC
   2++D3FC              ; Full version
   3++D3FC              ; 1. K2 = y - alpha * x
   4++D3FC              ; 2. z = z + beta * K2
   5++D3FC              ; 3. y = K2 - beta * z
   6++D3FC              ; 4. x = x + alpha * y
   7++D3FC
   8++D3FC
   9++D3FC              ApplyMyRollToNosev:     ApplyMyRollToVector ALPHA, UBnkrotmatNosevX, UBnkrotmatNosevY
   9++D3FC             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
   9++D3FC 3A B2 82    >                        ld       a,(ALPHA)
   9++D3FF 32 9C 83    >                        ld       (varQ),a
   9++D402             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
   9++D402 2A 37 C0    >                        ld       hl,(UBnkrotmatNosevY)
   9++D405 22 9D 83    >                        ld       (varR),hl
   9++D408             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
   9++D408 3A 35 C0    >                        ld       a,(UBnkrotmatNosevX)
   9++D40B 32 9A 82    >                        ld       (varP),a
   9++D40E 3A 36 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
   9++D411 EE 80       >                        xor $80                             ;
   9++D413 CD F2 95    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
   9++D416 ED 53 37 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
   9++D41A             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
   9++D41A 2A 35 C0    >                        ld       hl,(UBnkrotmatNosevX)
   9++D41D 22 9D 83    >                        ld       (varR),hl
   9++D420 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
   9++D423 CD F2 95    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
   9++D426 ED 53 35 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  10++D42A C9                                   ret
  11++D42B              ApplyMyRollToSidev:     ApplyMyRollToVector ALPHA, UBnkrotmatSidevX, UBnkrotmatSidevY
  11++D42B             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  11++D42B 3A B2 82    >                        ld       a,(ALPHA)
  11++D42E 32 9C 83    >                        ld       (varQ),a
  11++D431             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  11++D431 2A 2B C0    >                        ld       hl,(UBnkrotmatSidevY)
  11++D434 22 9D 83    >                        ld       (varR),hl
  11++D437             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
  11++D437 3A 29 C0    >                        ld       a,(UBnkrotmatSidevX)
  11++D43A 32 9A 82    >                        ld       (varP),a
  11++D43D 3A 2A C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
  11++D440 EE 80       >                        xor $80                             ;
  11++D442 CD F2 95    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  11++D445 ED 53 2B C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  11++D449             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
  11++D449 2A 29 C0    >                        ld       hl,(UBnkrotmatSidevX)
  11++D44C 22 9D 83    >                        ld       (varR),hl
  11++D44F 3A 2C C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  11++D452 CD F2 95    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  11++D455 ED 53 29 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  12++D459 C9                                   ret
  13++D45A              ApplyMyRollToRoofv:     ApplyMyRollToVector ALPHA, UBnkrotmatRoofvX, UBnkrotmatRoofvY
  13++D45A             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  13++D45A 3A B2 82    >                        ld       a,(ALPHA)
  13++D45D 32 9C 83    >                        ld       (varQ),a
  13++D460             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  13++D460 2A 31 C0    >                        ld       hl,(UBnkrotmatRoofvY)
  13++D463 22 9D 83    >                        ld       (varR),hl
  13++D466             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
  13++D466 3A 2F C0    >                        ld       a,(UBnkrotmatRoofvX)
  13++D469 32 9A 82    >                        ld       (varP),a
  13++D46C 3A 30 C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
  13++D46F EE 80       >                        xor $80                             ;
  13++D471 CD F2 95    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  13++D474 ED 53 31 C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  13++D478             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
  13++D478 2A 2F C0    >                        ld       hl,(UBnkrotmatRoofvX)
  13++D47B 22 9D 83    >                        ld       (varR),hl
  13++D47E 3A 32 C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  13++D481 CD F2 95    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  13++D484 ED 53 2F C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  14++D488 C9                                   ret
  15++D489
  16++D489              ApplyMyPitchToNosev:    ApplyMyRollToVector BETA, UBnkrotmatNosevZ, UBnkrotmatNosevY
  16++D489             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  16++D489 3A A5 82    >                        ld       a,(BETA)
  16++D48C 32 9C 83    >                        ld       (varQ),a
  16++D48F             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
  16++D48F 2A 37 C0    >                        ld       hl,(UBnkrotmatNosevY)
  16++D492 22 9D 83    >                        ld       (varR),hl
  16++D495             >                        ldCopyByte  UBnkrotmatNosevZ, varP           ; set P to nosevX lo (may be redundant)
  16++D495 3A 39 C0    >                        ld       a,(UBnkrotmatNosevZ)
  16++D498 32 9A 82    >                        ld       (varP),a
  16++D49B 3A 3A C0    >                        ld a,(UBnkrotmatNosevZ+1)                    ; Set A = -nosev_x_hi
  16++D49E EE 80       >                        xor $80                             ;
  16++D4A0 CD F2 95    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  16++D4A3 ED 53 37 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  16++D4A7             >                        ldCopy2Byte UBnkrotmatNosevZ, varR           ; Set (S R) = nosev_x
  16++D4A7 2A 39 C0    >                        ld       hl,(UBnkrotmatNosevZ)
  16++D4AA 22 9D 83    >                        ld       (varR),hl
  16++D4AD 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
  16++D4B0 CD F2 95    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  16++D4B3 ED 53 39 C0 >                        ld  (UBnkrotmatNosevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  17++D4B7 C9                                   ret
  18++D4B8              ApplyMyPitchToSidev:    ApplyMyRollToVector BETA, UBnkrotmatSidevZ, UBnkrotmatSidevY
  18++D4B8             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  18++D4B8 3A A5 82    >                        ld       a,(BETA)
  18++D4BB 32 9C 83    >                        ld       (varQ),a
  18++D4BE             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  18++D4BE 2A 2B C0    >                        ld       hl,(UBnkrotmatSidevY)
  18++D4C1 22 9D 83    >                        ld       (varR),hl
  18++D4C4             >                        ldCopyByte  UBnkrotmatSidevZ, varP           ; set P to nosevX lo (may be redundant)
  18++D4C4 3A 2D C0    >                        ld       a,(UBnkrotmatSidevZ)
  18++D4C7 32 9A 82    >                        ld       (varP),a
  18++D4CA 3A 2E C0    >                        ld a,(UBnkrotmatSidevZ+1)                    ; Set A = -nosev_x_hi
  18++D4CD EE 80       >                        xor $80                             ;
  18++D4CF CD F2 95    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  18++D4D2 ED 53 2B C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  18++D4D6             >                        ldCopy2Byte UBnkrotmatSidevZ, varR           ; Set (S R) = nosev_x
  18++D4D6 2A 2D C0    >                        ld       hl,(UBnkrotmatSidevZ)
  18++D4D9 22 9D 83    >                        ld       (varR),hl
  18++D4DC 3A 2C C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  18++D4DF CD F2 95    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  18++D4E2 ED 53 2D C0 >                        ld  (UBnkrotmatSidevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  19++D4E6 C9                                   ret
  20++D4E7              ApplyMyPitchToRoofv:    ApplyMyRollToVector BETA, UBnkrotmatRoofvZ, UBnkrotmatRoofvY
  20++D4E7             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  20++D4E7 3A A5 82    >                        ld       a,(BETA)
  20++D4EA 32 9C 83    >                        ld       (varQ),a
  20++D4ED             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  20++D4ED 2A 31 C0    >                        ld       hl,(UBnkrotmatRoofvY)
  20++D4F0 22 9D 83    >                        ld       (varR),hl
  20++D4F3             >                        ldCopyByte  UBnkrotmatRoofvZ, varP           ; set P to nosevX lo (may be redundant)
  20++D4F3 3A 33 C0    >                        ld       a,(UBnkrotmatRoofvZ)
  20++D4F6 32 9A 82    >                        ld       (varP),a
  20++D4F9 3A 34 C0    >                        ld a,(UBnkrotmatRoofvZ+1)                    ; Set A = -nosev_x_hi
  20++D4FC EE 80       >                        xor $80                             ;
  20++D4FE CD F2 95    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  20++D501 ED 53 31 C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  20++D505             >                        ldCopy2Byte UBnkrotmatRoofvZ, varR           ; Set (S R) = nosev_x
  20++D505 2A 33 C0    >                        ld       hl,(UBnkrotmatRoofvZ)
  20++D508 22 9D 83    >                        ld       (varR),hl
  20++D50B 3A 32 C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  20++D50E CD F2 95    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  20++D511 ED 53 33 C0 >                        ld  (UBnkrotmatRoofvZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  21++D515 C9                                   ret
  22++D516
  23++D516
  24++D516              APPequPosPlusAPP:       MACRO    Position, PositionSign
  25++D516 ~                                    push    bc
  26++D516 ~                                    ld      c,a                         ; save original value of a into c
  27++D516 ~                                    ld      a,(PositionSign)
  28++D516 ~                                    ld      b,a
  29++D516 ~                                    ld      a,c
  30++D516 ~                                    xor     b                           ; a = a xor x postition sign
  31++D516 ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  32++D516 ~            ; Signs are the same to we just add and take which ever sign
  33++D516 ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  34++D516 ~                                    ld      hl,(Position)
  35++D516 ~                                    add     hl,de
  36++D516 ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  37++D516 ~                                    ld      a,c                         ; and a = original sign as they were both the same
  38++D516 ~                                    pop     bc
  39++D516 ~                                    ret
  40++D516 ~            ; Signs are opposite so we subtract
  41++D516 ~            .MV50:                  ld      de,(varPp1)
  42++D516 ~                                    ld      hl,(Position)
  43++D516 ~                                    or      a
  44++D516 ~                                    sbc     hl,de
  45++D516 ~                                    jr      c,.MV51                     ; if the result was negative then negate result
  46++D516 ~                                    ld      a,c                         ; get back the original sign
  47++D516 ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
  48++D516 ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  49++D516 ~                                    pop     bc
  50++D516 ~                                    ret
  51++D516 ~            .MV51:                  NegHL
  52++D516 ~                                    ld      (varPp1),hl
  53++D516 ~                                    ld      a,c                         ; the original sign will still be good
  54++D516 ~                                    pop     bc
  55++D516 ~                                    ret
  56++D516                                      ENDM
  57++D516
  58++D516
  59++D516              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
  59++D516 C5          >                        push    bc
  59++D517 4F          >                        ld      c,a                         ; save original value of a into c
  59++D518 3A 22 C0    >                        ld      a,(UBnKxsgn)
  59++D51B 47          >                        ld      b,a
  59++D51C 79          >                        ld      a,c
  59++D51D A8          >                        xor     b                           ; a = a xor x postition sign
  59++D51E FA 2F D5    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  59++D521             >; Signs are the same to we just add and take which ever sign
  59++D521 ED 5B 9B 82 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  59++D525 2A 20 C0    >                        ld      hl,(UBnKxlo)
  59++D528 19          >                        add     hl,de
  59++D529 22 9B 82    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  59++D52C 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  59++D52D C1          >                        pop     bc
  59++D52E C9          >                        ret
  59++D52F             >; Signs are opposite so we subtract
  59++D52F ED 5B 9B 82 >.MV50:                  ld      de,(varPp1)
  59++D533 2A 20 C0    >                        ld      hl,(UBnKxlo)
  59++D536 B7          >                        or      a
  59++D537 ED 52       >                        sbc     hl,de
  59++D539 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  59++D53B 79          >                        ld      a,c                         ; get back the original sign
  59++D53C 22 9B 82    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  59++D53F EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  59++D541 C1          >                        pop     bc
  59++D542 C9          >                        ret
  59++D543             >.MV51:                  NegHL
  59++D543 AF          >                    xor a
  59++D544 95          >                    sub l
  59++D545 6F          >                    ld l,a
  59++D546 9F          >                    sbc a,a
  59++D547 94          >                    sub h
  59++D548 67          >                    ld h,a
  59++D549 22 9B 82    >                        ld      (varPp1),hl
  59++D54C 79          >                        ld      a,c                         ; the original sign will still be good
  59++D54D C1          >                        pop     bc
  59++D54E C9          >                        ret
  60++D54F
  61++D54F              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
  61++D54F C5          >                        push    bc
  61++D550 4F          >                        ld      c,a                         ; save original value of a into c
  61++D551 3A 25 C0    >                        ld      a,(UBnKysgn)
  61++D554 47          >                        ld      b,a
  61++D555 79          >                        ld      a,c
  61++D556 A8          >                        xor     b                           ; a = a xor x postition sign
  61++D557 FA 68 D5    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  61++D55A             >; Signs are the same to we just add and take which ever sign
  61++D55A ED 5B 9B 82 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  61++D55E 2A 23 C0    >                        ld      hl,(UBnKylo)
  61++D561 19          >                        add     hl,de
  61++D562 22 9B 82    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  61++D565 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  61++D566 C1          >                        pop     bc
  61++D567 C9          >                        ret
  61++D568             >; Signs are opposite so we subtract
  61++D568 ED 5B 9B 82 >.MV50:                  ld      de,(varPp1)
  61++D56C 2A 23 C0    >                        ld      hl,(UBnKylo)
  61++D56F B7          >                        or      a
  61++D570 ED 52       >                        sbc     hl,de
  61++D572 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  61++D574 79          >                        ld      a,c                         ; get back the original sign
  61++D575 22 9B 82    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  61++D578 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  61++D57A C1          >                        pop     bc
  61++D57B C9          >                        ret
  61++D57C             >.MV51:                  NegHL
  61++D57C AF          >                    xor a
  61++D57D 95          >                    sub l
  61++D57E 6F          >                    ld l,a
  61++D57F 9F          >                    sbc a,a
  61++D580 94          >                    sub h
  61++D581 67          >                    ld h,a
  61++D582 22 9B 82    >                        ld      (varPp1),hl
  61++D585 79          >                        ld      a,c                         ; the original sign will still be good
  61++D586 C1          >                        pop     bc
  61++D587 C9          >                        ret
  62++D588
  63++D588              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
  63++D588 C5          >                        push    bc
  63++D589 4F          >                        ld      c,a                         ; save original value of a into c
  63++D58A 3A 28 C0    >                        ld      a,(UBnKzsgn)
  63++D58D 47          >                        ld      b,a
  63++D58E 79          >                        ld      a,c
  63++D58F A8          >                        xor     b                           ; a = a xor x postition sign
  63++D590 FA A1 D5    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  63++D593             >; Signs are the same to we just add and take which ever sign
  63++D593 ED 5B 9B 82 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  63++D597 2A 26 C0    >                        ld      hl,(UBnKzlo)
  63++D59A 19          >                        add     hl,de
  63++D59B 22 9B 82    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  63++D59E 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  63++D59F C1          >                        pop     bc
  63++D5A0 C9          >                        ret
  63++D5A1             >; Signs are opposite so we subtract
  63++D5A1 ED 5B 9B 82 >.MV50:                  ld      de,(varPp1)
  63++D5A5 2A 26 C0    >                        ld      hl,(UBnKzlo)
  63++D5A8 B7          >                        or      a
  63++D5A9 ED 52       >                        sbc     hl,de
  63++D5AB 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  63++D5AD 79          >                        ld      a,c                         ; get back the original sign
  63++D5AE 22 9B 82    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  63++D5B1 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  63++D5B3 C1          >                        pop     bc
  63++D5B4 C9          >                        ret
  63++D5B5             >.MV51:                  NegHL
  63++D5B5 AF          >                    xor a
  63++D5B6 95          >                    sub l
  63++D5B7 6F          >                    ld l,a
  63++D5B8 9F          >                    sbc a,a
  63++D5B9 94          >                    sub h
  63++D5BA 67          >                    ld h,a
  63++D5BB 22 9B 82    >                        ld      (varPp1),hl
  63++D5BE 79          >                        ld      a,c                         ; the original sign will still be good
  63++D5BF C1          >                        pop     bc
  63++D5C0 C9          >                        ret
  64++D5C1
  65++D5C1              ; rollWork holds Alpha intermidate results
  66++D5C1 00 00 00     rollWork      DS 3
  67++D5C4              rollWorkp1    equ rollWork
  68++D5C4              rollWorkp2    equ rollWork+1
  69++D5C4              rollWorkp3    equ rollWork+2
  70++D5C4
  71++D5C4              ;----------------------------------------------------------------------------------------------------------------------------------
  72++D5C4              ; based on MVEIT part 4 of 9
  73++D5C4 3A B3 82     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
  74++D5C7 21 A7 82                             ld      hl,BET1                     ; and pitch
  75++D5CA B6                                   or      (hl)
  76++D5CB CA 85 D6                             jp      z,.NoRotation               ; if both zero then don't compute
  77++D5CE                                      ;break
  78++D5CE              ; P[210] = x * alph (we use P[2]P[1] later as result/256
  79++D5CE 5F                                   ld      e,a                         ; e = roll magnitude
  80++D5CF 2A 20 C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
  81++D5D2 CD 6D 96                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
  82++D5D5 32 9C 82                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
  83++D5D8 22 9A 82                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
  84++D5DB              ; A = Flip sign
  85++D5DB 3A B4 82                             ld      a,(ALP2)                ; flip the current roll angle alpha and xor with x sign
  86++D5DE 21 22 C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
  87++D5E1 AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
  88++D5E2              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
  89++D5E2 CD 4F D5                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
  90++D5E5              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
  91++D5E5 32 C3 D5                             ld      (rollWorkp3),a               ; k2+3 = sign of result
  92++D5E8 22 C1 D5                             ld      (rollWorkp1),hl             ; k2+1,2 = result
  93++D5EB              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
  94++D5EB 3A A7 82                             ld      a,(BET1)                    ; a = magnitude of pitch
  95++D5EE 5F                                   ld      e,a
  96++D5EF CD 6D 96                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
  97++D5F2 32 9C 82                             ld      (varPp2),a                   ; save highest byte in P2
  98++D5F5 22 9A 82                             ld      (varP),hl
  99++D5F8              ; Fetch sign of previosu cal and xor with BETA inverted
 100++D5F8 3A C3 D5                             ld      a,(rollWorkp3)
 101++D5FB 5F                                   ld      e,a
 102++D5FC 3A A8 82                             ld      a,(BET2)
 103++D5FF AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
 104++D600              ; Z = P[210] =Z + APP
 105++D600 CD 88 D5                             call    APPequZPosPlusAPP           ; MVT6
 106++D603 32 28 C0                             ld      (UBnKzsgn),a                ; save result back into z
 107++D606 22 26 C0                             ld      (UBnKzlo),hl
 108++D609              ; A[P1]P[0] = z * Beta
 109++D609 3A A7 82                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
 110++D60C 5F                                   ld      e,a
 111++D60D CD 6D 96                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
 112++D610 32 9C 82                             ld      (varPp2),a                  ; P2 = high byte of result
 113++D613 22 9A 82                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
 114++D616              ; A xor BET2,Zsign
 115++D616 3A C3 D5                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 116++D619 32 25 C0                             ld      (UBnKysgn),a                ; save result back into y
 117++D61C 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 118++D61D 3A A8 82                             ld      a,(BET2)                    ;
 119++D620 AB                                   xor     e                           ;
 120++D621 5F                                   ld      e,a                         ; now xor it with z sign too
 121++D622 3A 28 C0                             ld      a,(UBnKzsgn)                ;
 122++D625 AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 123++D626 F2 35 D6                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 124++D629 2A 9B 82                             ld      hl,(varPp1)
 125++D62C ED 5B C1 D5                          ld      de,(rollWorkp1)
 126++D630 B7                                   or      a
 127++D631 19                                   add     hl,de
 128++D632 C3 4F D6                             jp      .MV44
 129++D635 2A C1 D5     .MV43:                  ld      hl,(rollWorkp1)
 130++D638 ED 5B 9B 82                          ld      de,(varPp1)
 131++D63C B7                                   or      a
 132++D63D ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 133++D63F 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 134++D641                                      NegHL
 134++D641 AF          >                    xor a
 134++D642 95          >                    sub l
 134++D643 6F          >                    ld l,a
 134++D644 9F          >                    sbc a,a
 134++D645 94          >                    sub h
 134++D646 67          >                    ld h,a
 135++D647 3A 25 C0                             ld      a,(UBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and suns are sign + 23 bit xpos
 136++D64A EE 80                                xor     SignOnly8Bit
 137++D64C 32 25 C0                             ld      (UBnKysgn),a
 138++D64F              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 139++D64F 22 23 C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 140++D652 3A B3 82                             ld      a,(ALP1)                    ; get roll magnitude
 141++D655 5F                                   ld      e,a
 142++D656 2A 23 C0                             ld      hl,(UBnKylo)
 143++D659 CD 6D 96                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 144++D65C 32 9C 82                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 145++D65F 22 9A 82                             ld      (varP),hl
 146++D662 3A B5 82                             ld      a,(ALP2FLIP)
 147++D665 5F                                   ld      e,a
 148++D666 3A 25 C0                             ld      a,(UBnKysgn)
 149++D669 AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 150++D66A CD 16 D5                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 151++D66D 32 22 C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
 152++D670 22 20 C0                             ld      (UBnKxlo),hl
 153++D673                                      ;break
 154++D673                                      ; if its not a sun then apply to local orientation
 155++D673
 156++D673 CD FC D3                             call    ApplyMyRollToNosev
 157++D676 CD 2B D4                             call    ApplyMyRollToSidev
 158++D679 CD 5A D4                             call    ApplyMyRollToRoofv
 159++D67C CD 89 D4                             call    ApplyMyPitchToNosev
 160++D67F CD B8 D4                             call    ApplyMyPitchToSidev
 161++D682 CD E7 D4                             call    ApplyMyPitchToRoofv
 162++D685 3A 98 83     .NoRotation:            ld      a,(DELTA)                   ; get speed
 163++D688 16 00                                ld      d,0
 164++D68A 5F                                   ld      e,a                         ; de = speed in low byte
 165++D68B 2A 26 C0                             ld      hl,(UBnKzlo)                ; hl = z position
 166++D68E 3A 28 C0                             ld      a,(UBnKzsgn)                ; b = z sign
 167++D691 47                                   ld      b,a                         ;
 168++D692 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 169++D694 CD DF 93                             call    ADDHLDESignBC               ; update speed
 170++D697 22 26 C0                             ld      (UBnKzlo),hl                ; write back to zpos
 171++D69A 32 28 C0                             ld      (UBnKzsgn),a                ;
 172++D69D C9                                   ret
# file closed: ././Universe/Ships/ApplyMyRollAndPitch.asm
1142+ D69E                          INCLUDE "./Universe/Ships/ApplyShipRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyShipRollAndPitch.asm
   1++D69E
   2++D69E              ; A = value for rotation
   3++D69E              ; HL = address of value for rotation
   4++D69E              ; TODO logic for permanent spin, I thik this it -127??
   5++D69E              SplitAndDampenZ:        MACRO
   6++D69E ~                                    ld      a,(UBnKRotZCounter)
   7++D69E ~                                    ld      b,a
   8++D69E ~                                    and     SignMask8Bit            ; if abs (Rotz) is 0 then skip
   9++D69E ~                                    jp      z,.ProcessRoll
  10++D69E ~                                    ld      a,b                     ; b = rotate counter S7
  11++D69E ~                                    and     SignOnly8Bit            ; a = sign rat2 = c = sign
  12++D69E ~                                    ld      c,a                     ; .
  13++D69E ~                                    ld      (univRAT2),a            ; .
  14++D69E ~                                    ld      a,b                     ; a = abs b
  15++D69E ~                                    and     SignMask8Bit            ; .
  16++D69E ~                                    dec     a                       ; dampen
  17++D69E ~                                    ld      (univRAT2Val),a
  18++D69E ~                                    or      c                       ; make S7 again after dampening
  19++D69E ~                                    ld      (UBnKRotZCounter),a
  20++D69E                                      ENDM
  21++D69E
  22++D69E              SplitAndDampenX:        MACRO
  23++D69E ~                                    ld      a,(UBnKRotXCounter)
  24++D69E ~                                    ld      b,a
  25++D69E ~                                    and     SignMask8Bit            ; exit early is ABS = 0
  26++D69E ~                                    and     a                       ; .
  27++D69E ~                                    ret     z                       ; .
  28++D69E ~                                    ld      a,b                     ; a = rotate counter S7
  29++D69E ~                                    and     SignOnly8Bit            ; rat2 = c = sign
  30++D69E ~                                    ld      c,a                     ; .
  31++D69E ~                                    ld      (univRAT2),a            ; .
  32++D69E ~                                    ld      a,b                     ; a = abs b
  33++D69E ~                                    and     SignMask8Bit            ; .
  34++D69E ~                                    dec     a                       ; dampen
  35++D69E ~                                    ld      (univRAT2Val),a
  36++D69E ~                                    or      c                       ; make S7 again after dampening
  37++D69E ~                                    ld      (UBnKRotXCounter),a
  38++D69E                                      ENDM
  39++D69E
  40++D69E
  41++D69E              ;----------------------------------------------------------------------------------------------------------------------------------
  42++D69E              ; based on MVEIT part 4 of 9
  43++D69E              ; x and z counters are proper 2's c values
  44++D69E              ApplyShipRollAndPitch:  SplitAndDampenZ
  44++D69E 3A 49 C0    >                        ld      a,(UBnKRotZCounter)
  44++D6A1 47          >                        ld      b,a
  44++D6A2 E6 7F       >                        and     SignMask8Bit            ; if abs (Rotz) is 0 then skip
  44++D6A4 CA E9 D6    >                        jp      z,.ProcessRoll
  44++D6A7 78          >                        ld      a,b                     ; b = rotate counter S7
  44++D6A8 E6 80       >                        and     SignOnly8Bit            ; a = sign rat2 = c = sign
  44++D6AA 4F          >                        ld      c,a                     ; .
  44++D6AB 32 4F C0    >                        ld      (univRAT2),a            ; .
  44++D6AE 78          >                        ld      a,b                     ; a = abs b
  44++D6AF E6 7F       >                        and     SignMask8Bit            ; .
  44++D6B1 3D          >                        dec     a                       ; dampen
  44++D6B2 32 50 C0    >                        ld      (univRAT2Val),a
  44++D6B5 B1          >                        or      c                       ; make S7 again after dampening
  44++D6B6 32 49 C0    >                        ld      (UBnKRotZCounter),a
  45++D6B9                                      ;break
  46++D6B9 3A 49 C0                             ld      a,(UBnKRotZCounter)
  47++D6BC 21 2F C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  48++D6BF 22 7F 82                             ld	    (varAxis1),hl
  49++D6C2 21 35 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  50++D6C5 22 81 82                             ld	    (varAxis2),hl
  51++D6C8 CD 31 D7                             call    MVS5RotateAxis
  52++D6CB 21 31 C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  53++D6CE 22 7F 82                             ld	    (varAxis1),hl
  54++D6D1 21 37 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  55++D6D4 22 81 82                             ld	    (varAxis2),hl
  56++D6D7 CD 31 D7                             call    MVS5RotateAxis
  57++D6DA 21 33 C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  58++D6DD 22 7F 82                             ld	    (varAxis1),hl
  59++D6E0 21 39 C0                             ld	    hl,UBnkrotmatNosevZ
  60++D6E3 22 81 82                             ld	    (varAxis2),hl
  61++D6E6 CD 31 D7                             call    MVS5RotateAxis
  62++D6E9              .ProcessRoll:           SplitAndDampenX
  62++D6E9 3A 48 C0    >                        ld      a,(UBnKRotXCounter)
  62++D6EC 47          >                        ld      b,a
  62++D6ED E6 7F       >                        and     SignMask8Bit            ; exit early is ABS = 0
  62++D6EF A7          >                        and     a                       ; .
  62++D6F0 C8          >                        ret     z                       ; .
  62++D6F1 78          >                        ld      a,b                     ; a = rotate counter S7
  62++D6F2 E6 80       >                        and     SignOnly8Bit            ; rat2 = c = sign
  62++D6F4 4F          >                        ld      c,a                     ; .
  62++D6F5 32 4F C0    >                        ld      (univRAT2),a            ; .
  62++D6F8 78          >                        ld      a,b                     ; a = abs b
  62++D6F9 E6 7F       >                        and     SignMask8Bit            ; .
  62++D6FB 3D          >                        dec     a                       ; dampen
  62++D6FC 32 50 C0    >                        ld      (univRAT2Val),a
  62++D6FF B1          >                        or      c                       ; make S7 again after dampening
  62++D700 32 48 C0    >                        ld      (UBnKRotXCounter),a
  63++D703                                      ;break
  64++D703 21 2F C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  65++D706 22 7F 82                             ld	    (varAxis1),hl
  66++D709 21 29 C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  67++D70C 22 81 82                             ld	    (varAxis2),hl
  68++D70F CD 31 D7                             call    MVS5RotateAxis
  69++D712 21 31 C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  70++D715 22 7F 82                             ld	    (varAxis1),hl
  71++D718 21 2B C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  72++D71B 22 81 82                             ld	    (varAxis2),hl
  73++D71E CD 31 D7                             call    MVS5RotateAxis
  74++D721 21 33 C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  75++D724 22 7F 82                             ld	    (varAxis1),hl
  76++D727 21 2D C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  77++D72A 22 81 82                             ld	    (varAxis2),hl
  78++D72D CD 31 D7                             call    MVS5RotateAxis
  79++D730 C9                                   ret
  80++D731
  81++D731
  82++D731
  83++D731              ; Roate around axis
  84++D731              ; varAxis1 and varAxis2 point to the address of the axis to rotate
  85++D731              ; so the axis x1 points to roofv  x , y or z
  86++D731              ;             x2           nosev or sidev  x, y or z
  87++D731              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
  88++D731              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
  89++D731              ; var RAT2 gives direction
  90++D731              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
  91++D731              ;-Set up S R -----------------------------------------
  92++D731              ; optimised we don't deal with sign here just the value of roof axis / 512
  93++D731 2A 7F 82     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
  94++D734 5E                                   ld      e,(hl)
  95++D735 23                                   inc     hl
  96++D736 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
  97++D737 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
  98++D738 7C                                   ld      a,h
  99++D739 E6 80                                and     SignOnly8Bit
 100++D73B FD 67                                ld      iyh,a           ; iyh = sign Axis1
 101++D73D 7C                                   ld      a,h
 102++D73E E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 103++D740 CB 3F                                srl     a               ; a = Axis1/2
 104++D742 5F                                   ld      e,a             ;
 105++D743 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 106++D745 57                                   ld      d,a             ; de = signed Axis1 / 512
 107++D746 B7                                   or      a               ; clear carry
 108++D747 CD D1 94                             call    subHLDES15      ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 109++D74A              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 110++D74A E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 111++D74B 7D                                   ld      a,l
 112++D74C 32 9D 83                             ld      (varR),a
 113++D74F 7C                                   ld      a,h
 114++D750 32 9E 83                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 115++D753              ;-calculate roofv latter half of calc
 116++D753 2A 81 82                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 117++D756 5E                                   ld      e,(hl)
 118++D757 23                                   inc     hl
 119++D758 56                                   ld      d,(hl)          ; de = value of roof axis
 120++D759 7A                                   ld      a,d
 121++D75A E6 80                                and     SignOnly8Bit
 122++D75C FD 67                                ld      iyh,a           ; save sign
 123++D75E 7A                                   ld      a,d
 124++D75F E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 125++D761 57                                   ld      d,a             ; de = abs (nosev)
 126++D762                                      ShiftDERight1
 126++D762 CB 3A       >			   srl d
 126++D764 CB 1B       >			   rr  e
 127++D766                                      ShiftDERight1
 127++D766 CB 3A       >			   srl d
 127++D768 CB 1B       >			   rr  e
 128++D76A                                      ShiftDERight1
 128++D76A CB 3A       >			   srl d
 128++D76C CB 1B       >			   rr  e
 129++D76E                                      ShiftDERight1           ; de = nosev /16 unsigned
 129++D76E CB 3A       >			   srl d
 129++D770 CB 1B       >			   rr  e
 130++D772 3A 4F C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 131++D775 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 132++D777 E6 80                                and     SignOnly8Bit
 133++D779 B2                                   or      d
 134++D77A 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 135++D77B              ;;; ld      a,e
 136++D77B              ;;;     or      iyh
 137++D77B              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 138++D77B              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 139++D77B E1                                   pop     hl              ; get back RS POP ID 1
 140++D77C                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 141++D77C              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 142++D77C CD 02 94                             call    ADDHLDESignedV4 ; do add using hl and de
 143++D77F E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 144++D780              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 145++D780              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 146++D780 2A 81 82                         ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 147++D783 5E                               ld      e,(hl)
 148++D784 23                               inc     hl
 149++D785 56                               ld      d,(hl)
 150++D786 EB                               ex      de,hl
 151++D787 7C                               ld      a,h
 152++D788 E6 80                            and     $80
 153++D78A FD 67                            ld      iyh,a
 154++D78C 7C                               ld      a,h
 155++D78D E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 156++D78F CB 3F                            srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 157++D791 5F                               ld      e,a
 158++D792 FD 7C                            ld      a,iyh
 159++D794 57                               ld      d,a
 160++D795 B7                               or      a               ; clear carry
 161++D796 CD D1 94                         call    subHLDES15
 162++D799              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 163++D799 E5                               push    hl              ; save hl on stack  PUSH ID 3
 164++D79A 7D                               ld      a,l
 165++D79B 32 9A 82                         ld      (varP),a        ; p = low of resuilt
 166++D79E 7C                               ld      a,h
 167++D79F E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 168++D7A1 32 BA 83                         ld      (varT),a        ; t = high of result
 169++D7A4              ;-- Set up TQ
 170++D7A4 2A 7F 82                         ld      hl,(varAxis1)   ; now work on roofv axis / 16
 171++D7A7              ;   ld      hl,(varAxis2)   ; work on nosev again
 172++D7A7 5E                               ld      e,(hl)
 173++D7A8 23                               inc     hl
 174++D7A9 56                               ld      d,(hl)
 175++D7AA 7A                               ld      a,d
 176++D7AB E6 80                            and     $80
 177++D7AD FD 67                            ld      iyh,a           ; save sign
 178++D7AF 7A                               ld      a,d
 179++D7B0 E6 7F                            and     SignMask8Bit    ; a = nosev hi axis  unsigned
 180++D7B2 57                               ld      d,a             ; de = abs (nosev)
 181++D7B3                                  ShiftDERight1
 181++D7B3 CB 3A       >			   srl d
 181++D7B5 CB 1B       >			   rr  e
 182++D7B7                                  ShiftDERight1
 182++D7B7 CB 3A       >			   srl d
 182++D7B9 CB 1B       >			   rr  e
 183++D7BB                                  ShiftDERight1
 183++D7BB CB 3A       >			   srl d
 183++D7BD CB 1B       >			   rr  e
 184++D7BF                                  ShiftDERight1           ; de = nosev /16 unsigned
 184++D7BF CB 3A       >			   srl d
 184++D7C1 CB 1B       >			   rr  e
 185++D7C3 3A 4F C0                         ld      a,(univRAT2)
 186++D7C6 FD AC                            xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 187++D7C8 E6 80                            and     $80
 188++D7CA B2                               or      d
 189++D7CB 57                               ld      d,a
 190++D7CC              ;;; ld      a,e
 191++D7CC              ;;;     or      iyh
 192++D7CC              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 193++D7CC E1                               pop     hl              ; get back RS   POP ID 3
 194++D7CD              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 195++D7CD CD D1 94                         call    subHLDES15 ; do add using hl and de
 196++D7D0              ;-- Update nosev ---------------------------------------
 197++D7D0 EB                               ex      de,hl           ; save hl to de
 198++D7D1 2A 81 82                         ld      hl,(varAxis2)
 199++D7D4 73                               ld      (hl),e
 200++D7D5 23                               inc     hl
 201++D7D6 72                               ld      (hl),d          ; copy result into nosev
 202++D7D7              ;-- Update roofv ---------------------------------------
 203++D7D7 D1                               pop     de              ; get calc saved on stack POP ID 2
 204++D7D8 2A 7F 82                         ld      hl,(varAxis1)
 205++D7DB 73                               ld      (hl),e
 206++D7DC 23                               inc     hl
 207++D7DD 72                               ld      (hl),d          ; copy result into nosev
 208++D7DE C9                               ret
 209++D7DF
 210++D7DF
# file closed: ././Universe/Ships/ApplyShipRollAndPitch.asm
1143+ D7DF                          INCLUDE "./Universe/Ships/ApplyShipSpeed.asm"
# file opened: ././Universe/Ships/ApplyShipSpeed.asm
   1++D7DF
   2++D7DF
   3++D7DF              ;AddSpeedToVert:         MACRO   vertex
   4++D7DF              ;                        ld      hl,(vertex)
   5++D7DF              ;                        ld      a,(vertex+2)
   6++D7DF              ;                        ld      b,a
   7++D7DF              ;                        call    AHLEquBHLaddCDE
   8++D7DF              ;                        ld      (vertex),hl
   9++D7DF              ;                        ld      (vertex+2),a
  10++D7DF              ;                        ENDM
  11++D7DF
  12++D7DF
  13++D7DF              ; ---------------------------------------------------------------------------------------------------------------------------------
  14++D7DF 3A 46 C0     ApplyShipSpeed:         ld      a,(UBnKSpeed)                   ; get speed * 4
  15++D7E2 FE 00                                cp      0
  16++D7E4 C8                                   ret     z
  17++D7E5 CB 27                                sla     a
  18++D7E7 CB 27                                sla     a
  19++D7E9 FD 6F                                ld      iyl,a                           ; save pre calculated speed
  20++D7EB              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatNosevX     ; e =  ABS (nosev x hi) c = sign
  20++D7EB 5F          >                        ld      e,a
  20++D7EC 2A 35 C0    >                        ld      hl,(UBnkrotmatNosevX)
  20++D7EF 7C          >                        ld      a,h
  20++D7F0             >                        ClearSignBitA
  20++D7F0 E6 7F       >                        and     SignMask8Bit
  20++D7F2 57          >                        ld      d,a
  20++D7F3 ED 30       >                        mul     de
  20++D7F5 7C          >                        ld      a,h
  20++D7F6             >                        SignBitOnlyA
  20++D7F6 E6 80       >                        and     SignOnly8Bit
  20++D7F8 47          >                        ld      b,a;ld      c,a
  20++D7F9 62          >                        ld      h,d;ld      e,d
  20++D7FA 0E 00       >                        ld      c,0;ld      d,0
  21++D7FC              .AddSpeedToX:           AddSpeedToVert UBnKxlo
  21++D7FC ED 5B 21 C0 >                        ld      de,(UBnKxlo+1)
  21++D800 3A 20 C0    >                        ld      a,(UBnKxlo)
  21++D803 6F          >                        ld      l,a
  21++D804 CD 5D 94    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  21++D807 7D          >                        ld      a,l
  21++D808 32 20 C0    >                        ld      (UBnKxlo),a
  21++D80B ED 53 21 C0 >                        ld      (UBnKxlo+1),de
  22++D80F              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatNosevY
  22++D80F FD 5D       >                        ld      e,iyl
  22++D811 2A 37 C0    >                        ld      hl,(UBnkrotmatNosevY)
  22++D814 7C          >                        ld      a,h
  22++D815             >                        ClearSignBitA
  22++D815 E6 7F       >                        and     SignMask8Bit
  22++D817 57          >                        ld      d,a
  22++D818 ED 30       >                        mul     de
  22++D81A 7C          >                        ld      a,h
  22++D81B             >                        SignBitOnlyA
  22++D81B E6 80       >                        and     SignOnly8Bit
  22++D81D 47          >                        ld      b,a;ld      c,a
  22++D81E 62          >                        ld      h,d;ld      e,d
  22++D81F 0E 00       >                        ld      c,0;ld      d,0
  23++D821              .AddSpeedToY:           AddSpeedToVert UBnKylo
  23++D821 ED 5B 24 C0 >                        ld      de,(UBnKylo+1)
  23++D825 3A 23 C0    >                        ld      a,(UBnKylo)
  23++D828 6F          >                        ld      l,a
  23++D829 CD 5D 94    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  23++D82C 7D          >                        ld      a,l
  23++D82D 32 23 C0    >                        ld      (UBnKylo),a
  23++D830 ED 53 24 C0 >                        ld      (UBnKylo+1),de
  24++D834              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatNosevZ
  24++D834 FD 5D       >                        ld      e,iyl
  24++D836 2A 39 C0    >                        ld      hl,(UBnkrotmatNosevZ)
  24++D839 7C          >                        ld      a,h
  24++D83A             >                        ClearSignBitA
  24++D83A E6 7F       >                        and     SignMask8Bit
  24++D83C 57          >                        ld      d,a
  24++D83D ED 30       >                        mul     de
  24++D83F 7C          >                        ld      a,h
  24++D840             >                        SignBitOnlyA
  24++D840 E6 80       >                        and     SignOnly8Bit
  24++D842 47          >                        ld      b,a;ld      c,a
  24++D843 62          >                        ld      h,d;ld      e,d
  24++D844 0E 00       >                        ld      c,0;ld      d,0
  25++D846              .AddSpeedToZ:           AddSpeedToVert UBnKzlo
  25++D846 ED 5B 27 C0 >                        ld      de,(UBnKzlo+1)
  25++D84A 3A 26 C0    >                        ld      a,(UBnKzlo)
  25++D84D 6F          >                        ld      l,a
  25++D84E CD 5D 94    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  25++D851 7D          >                        ld      a,l
  25++D852 32 26 C0    >                        ld      (UBnKzlo),a
  25++D855 ED 53 27 C0 >                        ld      (UBnKzlo+1),de
  26++D859 C9                                   ret
  27++D85A
# file closed: ././Universe/Ships/ApplyShipSpeed.asm
1144+ D85A                          INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++D85A
   2++D85A              ; ---------------------------------------------------------------------------------------------------------------------------------
   3++D85A 00           DrawLinesCounter		db	0
   4++D85B              ; Initial tests look OK
   5++D85B              LL155:;
   6++D85B              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   7++D85B                    ;break                                                                             ; ObjectInFront:
   8++D85B 3E 65        DrawLines:              ld	a,$65 ; DEBUG
   9++D85D FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
  10++D85F 3A 22 C3                             ld		a,(UbnkLineArrayLen)			; get number of lines
  11++D862                                      ReturnIfAIsZero   						; No lines then bail out.
  11++D862 A7          >                        and     a
  11++D863 C8          >                        ret     z
  12++D864 FD 67                                ld		iyh,a			                ; number of lines still to draw
  13++D866 21 30 C2                             ld		hl,UbnkLineArray
  14++D869              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  15++D869 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  16++D86A 23                                   inc     hl
  17++D86B 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  18++D86C 23                                   inc     hl
  19++D86D 5E                                   ld      e,(hl)                          ; c = varX1
  20++D86E 23                                   inc     hl
  21++D86F 56                                   ld      d,(hl)                          ; de = point2 Y,X
  22++D870 23                                   inc     hl
  23++D871 E5                                   push	hl
  24++D872 FD E5                                push    iy
  25++D874 60                                   ld      h,b
  26++D875 69                                   ld      l,c
  27++D876                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  28++D876 FD 7D                                ld		a,iyl							; get colour back before calling line draw
  29++D878                                      MMUSelectLayer2
  29++D878 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  30++D87C CD CE EA                             call    LineHLtoDE
  31++D87F FD E1                                pop     iy
  32++D881 E1                                   pop	    hl
  33++D882 FD 25                                dec     iyh
  34++D884 20 E3                                jr		nz,DrawXX19ClippedLines
  35++D886 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  36++D887
# file closed: ././ModelRender/DrawLines.asm
1145+ D887              ; ---------------------------------------------------------------------------------------------------------------------------------
1146+ D887
1147+ D887              ; DIot seem to lawyas have Y = 0???
1148+ D887              ProcessDot:            ; break
1149+ D887 CD 97 CA                             call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1150+ D88A CD 79 7C                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1151+ D88D CD 5D CD                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1152+ D890 CD 2A CC                             call    InverseXX16                      ;#11; Invert rotation matrix
1153+ D893 21 00 00                             ld      hl,0
1154+ D896 22 A6 C0                             ld      (UBnkXScaled),hl
1155+ D899 22 A8 C0                             ld      (UBnkYScaled),hl
1156+ D89C 22 AA C0                             ld      (UBnkZScaled),hl
1157+ D89F AF                                   xor     a
1158+ D8A0 CD 9F 7B                             call    XX12EquNodeDotOrientation
1159+ D8A3 CD CE CA                             call    TransposeXX12ByShipToXX15
1160+ D8A6 CD 4B CB                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1161+ D8A9 FD 21 F0 C0                          ld      iy,UBnkNodeArray
1162+ D8AD CD A5 D3                             call    ProjectNodeToEye
1163+ D8B0 C9                                   ret
1164+ D8B1
1165+ D8B1              ; .....................................................
1166+ D8B1              ; Process Nodes does the following:
1167+ D8B1              ; for each node:
1168+ D8B1              ;     see if node >
1169+ D8B1 00           PNXX20DIV6          DB      0
1170+ D8B2 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1171+ D8B4 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1172+ D8B6 00           PNLASTNORM          DB      0
1173+ D8B7              ProcessNodes:           ZeroA
1173+ D8B7 AF          >                        xor a
1174+ D8B8 32 22 C3                             ld      (UbnkLineArrayLen),a
1175+ D8BB CD 97 CA                             call    CopyRotmatToTransMat ; CopyRotToTransMacro                      ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1176+ D8BE CD 79 7C                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1177+ D8C1 CD 5D CD                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1178+ D8C4 CD 2A CC                             call    InverseXX16                      ;#11; Invert rotation matrix
1179+ D8C7 21 49 C3                             ld      hl,UBnkHullVerticies
1180+ D8CA 3A 37 C3                             ld      a,(VertexCtX6Addr)               ; get Hull byte#9 = number of vertices *6                                   ;;;
1181+ D8CD 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1182+ D8CE 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1183+ D8CF 16 06                                ld      d,6
1184+ D8D1 CD 54 99                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1185+ D8D4 41                                   ld      b,c                              ; c = number of vertices
1186+ D8D5 FD 21 F0 C0                          ld      iy,UBnkNodeArray
1187+ D8D9              LL48:
1188+ D8D9 C5           PointLoop:	            push	bc                                  ; save counters
1189+ D8DA E5                                   push	hl                                  ; save verticies list pointer
1190+ D8DB FD E5                                push	iy                                  ; save Screen plot array pointer
1191+ D8DD 78                                   ld      a,b
1192+ D8DE                                      ;break
1193+ D8DE CD 26 D3                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
1194+ D8E1 3A A7 C0                             ld		a,(UBnkXScaledSign)
1195+ D8E4 CD 9F 7B                             call    XX12EquNodeDotOrientation
1196+ D8E7 CD CE CA                             call    TransposeXX12ByShipToXX15
1197+ D8EA CD 4B CB                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1198+ D8ED FD E1                                pop		iy                                  ; get back screen plot array pointer
1199+ D8EF CD A5 D3                             call    ProjectNodeToEye                     ; set up screen plot list entry
1200+ D8F2                 ; ld      hl,UbnkLineArrayLen
1201+ D8F2                ;  inc     (hl)                                ; another node done
1202+ D8F2 FD E5        ReadyForNextPoint:      push	iy                                  ; copy screen plot pointer to hl
1203+ D8F4 E1                                   pop		hl
1204+ D8F5 3E 04                                ld		a,4
1205+ D8F7 ED 31                                add		hl,a
1206+ D8F9 E5                                   push	hl                                  ; write it back at iy + 4
1207+ D8FA FD E1                                pop		iy								    ; and put it in iy again
1208+ D8FC E1                                   pop		hl                                  ; get hl back as vertex list
1209+ D8FD 3E 06                                ld		a,6
1210+ D8FF ED 31                                add 	hl,a                                ; and move to next vertex
1211+ D901 C1                                   pop		bc                                  ; get counter back
1212+ D902 10 D5                                djnz	PointLoop
1213+ D904              ; ......................................................
1214+ D904                                      ClearCarryFlag
1214+ D904 B7          >                        or a
1215+ D905 C9                                   ret
1216+ D906
1217+ D906              ; ...........................................................
1218+ D906 CD 97 CF     ProcessShip:            call    CheckVisible                ; checks for z -ve and outside view frustrum, sets up flags for next bit
1219+ D909 3A 54 C0     .IsItADot:              ld      a,(UBnkaiatkecm)
1220+ D90C E6 68                                and     ShipIsVisible | ShipIsDot | ShipExploding  ; first off set if we can draw or need to update explosion
1221+ D90E C8                                   ret     z                           ; if none of these flags are set we can fast exit
1222+ D90F                                      JumpOnABitSet ShipExplodingBitNbr, .ExplodingCloud; we always do the cloud processing even if invisible
1222+ D90F CB 6F       >                        bit 	ShipExplodingBitNbr, a
1222+ D911 C2 4D D9    >                        jp      nz,.ExplodingCloud
1223+ D914              ;............................................................
1224+ D914              .DetermineDrawType:     ReturnOnBitClear    a, ShipIsVisibleBitNbr          ; if its not visible exit early
1224+ D914 CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1224+ D916 C8          >                        ret		z
1225+ D917                                      JumpOnABitClear ShipIsDotBitNbr, .CarryOnWithDraw   ; if not dot do normal draw
1225+ D917 CB 5F       >                        bit 	ShipIsDotBitNbr, a
1225+ D919 CA 40 D9    >                        jp      z,.CarryOnWithDraw
1226+ D91C              ;............................................................
1227+ D91C CD 87 D8     .itsJustADot:           call    ProcessDot
1228+ D91F                                      SetMemBitN  UBnkaiatkecm , ShipIsDotBitNbr ; set is a dot flag
1228+ D91F 21 54 C0    >                        ld      hl,UBnkaiatkecm
1228+ D922 CB DE       >                        set     ShipIsDotBitNbr,(hl)
1229+ D924 ED 4B F0 C0                          ld      bc,(UBnkNodeArray)          ; if its at dot range get X
1230+ D928 ED 5B F2 C0                          ld      de,(UBnkNodeArray+2)        ; and Y
1231+ D92C 78                                   ld      a,b                         ; if high byte components are not 0 then off screen
1232+ D92D B2                                   or      d                           ;
1233+ D92E C0                                   ret     nz                          ;
1234+ D92F 7B                                   ld      a,e
1235+ D930 E6 80                                and     %10000000                   ; check to see if Y > 128
1236+ D932 C0                                   ret     nz
1237+ D933 43                                   ld      b,e                         ; now b = y and c = x
1238+ D934 3E FF                                ld      a,L2ColourWHITE_1           ; just draw a pixel
1239+ D936 3E E0                                ld      a,224
1240+ D938                                      MMUSelectLayer2                     ; then go to update radar
1240+ D938 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1241+ D93C CD 5C E1                             call    ShipPixel                   ;
1242+ D93F C9                                   ret
1243+ D940              ;............................................................
1244+ D940 CD B7 D8     .CarryOnWithDraw:       call    ProcessNodes                ; process notes is the poor performer or check distnace is not culling
1245+ D943 CD F1 CF                             call    CullV2
1246+ D946 CD 0A DB                             call    PrepLines
1247+ D949 CD 5B D8                             call    DrawLines
1248+ D94C C9                                   ret
1249+ D94D              ;............................................................
1250+ D94D CD B7 D8     .ExplodingCloud:        call    ProcessNodes
1251+ D950                                      ClearMemBitN  UBnkaiatkecm, ShipKilledBitNbr ; acknowledge ship exploding
1251+ D950 21 54 C0    >                        ld      hl,UBnkaiatkecm
1251+ D953 CB A6       >                        res     ShipKilledBitNbr,(hl)
1252+ D955 3A 5F C0     .UpdateCloudCounter:    ld      a,(UBnKCloudCounter)        ; counter += 4 until > 255
1253+ D958 C6 04                                add     4                           ; we do this early as we now have logic for
1254+ D95A DA 1C DA                             jp      c,.FinishedExplosion        ; display or not later
1255+ D95D 32 5F C0                             ld      (UBnKCloudCounter),a        ; .
1256+ D960              .SkipHiddenShip:        ReturnOnMemBitClear  UBnkaiatkecm , ShipIsVisibleBitNbr
1256+ D960 3A 54 C0    >                        ld     a,(UBnkaiatkecm)
1256+ D963 CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1256+ D965 C8          >                        ret		z
1257+ D966              .IsShipADot:            JumpOnABitSet ShipIsDotBitNbr, .itsJustADot ; if its dot distance then explosion is a dot, TODO later we will do as a coloured dot
1257+ D966 CB 5F       >                        bit 	ShipIsDotBitNbr, a
1257+ D968 C2 1C D9    >                        jp      nz,.itsJustADot
1258+ D96B 2A 26 C0     .CalculateZ:            ld      hl,(UBnKzlo)                ; al = hl = z
1259+ D96E 7C                                   ld      a,h                         ; .
1260+ D96F                                      JumpIfALTNusng 32,.CalcFromZ        ; if its >= 32 then set a to FE and we are done
1260+ D96F FE 20       >                        cp      32
1260+ D971 DA 79 D9    >                        jp		c, .CalcFromZ
1261+ D974 26 FE                                ld      h,$FE                       ; .
1262+ D976 C3 84 D9                             jp      .DoneZDist                  ; .
1263+ D979              .CalcFromZ:             ShiftHLLeft1                        ; else
1263+ D979 CB 25       >			   sla l
1263+ D97B CB 14       >			   rl  h
1264+ D97D                                      ShiftHLLeft1                        ; hl = hl * 2
1264+ D97D CB 25       >			   sla l
1264+ D97F CB 14       >			   rl  h
1265+ D981                                      SetCarryFlag                        ; h = h * 3 rolling in lower bit
1265+ D981 37          >                        scf
1266+ D982 CB 14                                rl  h                               ;
1267+ D984 06 00        .DoneZDist:             ld      b,0                         ; bc = cloud z distance calculateed
1268+ D986 4C                                   ld      c,h                         ; .
1269+ D987 3A 5F C0     .CalcCloudRadius:       ld      a,(UBnKCloudCounter)        ; de = cloud counter * 256
1270+ D98A                      IFDEF LOGMATHS
1271+ D98A ~                                    MMUSelectMathsTables
1272+ D98A ~                                    ld      b,h
1273+ D98A ~                                    call    AEquAmul256DivBLog
1274+ D98A ~                                    ld      d,a
1275+ D98A ~                                    MMUSelectROM0
1276+ D98A                      ELSE
1277+ D98A 57                                   ld      d,a                         ;
1278+ D98B 1E 00                                ld      e,0                         ;
1279+ D98D CD 98 98                             call    DEequDEDivBC                ; de = cloud counter * 256 / z distance
1280+ D990 7A                                   ld      a,d                         ; if radius >= 28
1281+ D991                      ENDIF
1282+ D991                                      JumpIfALTNusng  28,.SetCloudRadius  ; then set raidus in d to $FE
1282+ D991 FE 1C       >                        cp      28
1282+ D993 DA 9B D9    >                        jp		c, .SetCloudRadius
1283+ D996 16 FE        .MaxCloudRadius:        ld      d,$FE                       ;
1284+ D998 C3 A7 D9                             jp      .SizedUpCloud               ;
1285+ D99B              .SetCloudRadius:        ShiftDELeft1                        ; de = 8 * de
1285+ D99B CB 23       >			   sla e
1285+ D99D CB 12       >			   rl  d
1286+ D99F                                      ShiftDELeft1                        ; .
1286+ D99F CB 23       >			   sla e
1286+ D9A1 CB 12       >			   rl  d
1287+ D9A3                                      ShiftDELeft1                        ; .
1287+ D9A3 CB 23       >			   sla e
1287+ D9A5 CB 12       >			   rl  d
1288+ D9A7 7A           .SizedUpCloud:          ld      a,d                         ; cloudradius = a = d or (cloudcounter * 8 / 256)
1289+ D9A8 32 60 C0                             ld      (UBnKCloudRadius),a         ; .
1290+ D9AB DD 67                                ld      ixh,a                       ; ixh = a = calculated cloud radius
1291+ D9AD 3A 5F C0     .CalcSubParticleColour: ld      a,(UBnKCloudCounter)        ; colur fades away
1292+ D9B0 ED 23                                swapnib                             ; divive by 16
1293+ D9B2 E6 0F                                and     $0F                         ; mask off upper bytes
1294+ D9B4 CB 2F                                sra     a                           ; divide by 32
1295+ D9B6 21 28 DA                             ld      hl,DebrisColourTable
1296+ D9B9 ED 31                                add     hl,a
1297+ D9BB 7E                                   ld      a,(hl)
1298+ D9BC FD 6F                                ld      iyl,a                       ; iyl = pixel colours
1299+ D9BE 3A 5F C0     .CalcSubParticleCount:  ld      a,(UBnKCloudCounter)        ; cloud counter = abs (cloud counter) in effect if > 127 then shrinks it
1300+ D9C1                                      ABSa2c                              ; a = abs a
1300+ D9C1 CB 7F       >                        bit     7,a
1300+ D9C3 CA C8 D9    >                        jp      z,.DoneABSa
1300+ D9C6 ED 44       >                        neg
1300+ D9C8             >.DoneABSa:
1301+ D9C8 CB 2F        .ParticlePositive:      sra a                               ; iyh = (a /8)
1302+ D9CA CB 2F                                sra a                               ; .
1303+ D9CC CB 2F                                sra a                               ; .
1304+ D9CE F6 01                                or  1                               ; bit 0 set so minimum 1
1305+ D9D0 DD 6F        .DoneSubParticleCount:  ld      ixl,a                       ; ixl = nbr particles per vertex
1306+ D9D2 3A 36 C3     .ForEachVertex:         ld      a,(VertexCountAddr)         ; load vertex count into b
1307+ D9D5 47                                   ld      b,a                         ; .
1308+ D9D6 21 F0 C0                             ld      hl,UBnkNodeArray            ; hl = list of vertices
1309+ D9D9 C5 E5        .ExplosionVertLoop:     push    bc,,hl                      ; save vertex counter in b and pointer to verticles in hl
1310+ D9DB DD 68                                    ld      ixl,b                   ; save counter
1311+ D9DD 4E                                       ld      c,(hl)                  ; get vertex into bc and de
1312+ D9DE 23                                       inc     hl                      ; .
1313+ D9DF 46                                       ld      b,(hl)                  ; .
1314+ D9E0 23                                       inc     hl                      ; .
1315+ D9E1 5E                                       ld      e,(hl)                  ; .
1316+ D9E2 23                                       inc     hl                      ; .
1317+ D9E3 56                                       ld      d,(hl)                  ; now hl is done with and we can use it
1318+ D9E4 DD 7D        .LoopSubParticles:          ld      a,ixl                   ; iyh = loop iterator for nbr of particles per vertex
1319+ D9E6 FD 67                                    ld      iyh,a                   ;
1320+ D9E8                                          ;break
1321+ D9E8 D5 C5        .ProcessAParticle:          push    de,,bc                  ; save y then x coordinates
1322+ D9EA EB                                           ex      de,hl               ; hl = de (Y)
1323+ D9EB DD 54                                        ld      d,ixh               ; d = cloud radius
1324+ D9ED CD 30 DA                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1325+ D9F0 7C                                           ld      a,h                 ; if off screen skip
1326+ D9F1                                              JumpIfAIsNotZero  .NextIteration
1326+ D9F1 A7          >                        and     a
1326+ D9F2 C2 0D DA    >                        jp	    nz,.NextIteration
1327+ D9F5 EB                                           ex      de,hl               ; de = result for y which was put into hl
1328+ D9F6 E1                                           pop     hl                  ; get x back from bc on stack
1329+ D9F7 E5                                           push    hl                  ; put bc (which is now in hl) back on the stack
1330+ D9F8 D5                                           push    de                  ; save de
1331+ D9F9 DD 54                                        ld      d,ixh               ; d = cloud radius
1332+ D9FB CD 30 DA                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1333+ D9FE D1                                           pop     de                  ; get de back doing pop here clears stack up
1334+ D9FF 7C                                           ld      a,h                 ; if high byte has a value then off screen
1335+ DA00                                              JumpIfAIsNotZero .NextIteration ;
1335+ DA00 A7          >                        and     a
1335+ DA01 C2 0D DA    >                        jp	    nz,.NextIteration
1336+ DA04 43                                           ld      b,e                 ; bc = y x of pixel from e and c regs
1337+ DA05 4D                                           ld      c,l                 ; iyl already has colour
1338+ DA06                                              MMUSelectLayer2             ; plot it with debris code as this can chop y > 128
1338+ DA06 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1339+ DA0A CD 64 E1                                     call    DebrisPixel         ; .
1340+ DA0D C1 D1        .NextIteration:             pop    de,,bc                   ; ready for next iteration, get back y and x coordinates
1341+ DA0F FD 25                                    dec    iyh                      ; one partcile done
1342+ DA11 20 D5                                    jr      nz,.ProcessAParticle    ; until all done
1343+ DA13 E1 C1        .NextVert:              pop     bc,,hl                      ; recover loop counter and source pointer
1344+ DA15 3E 04                                ld      a,4                         ; move to next vertex group
1345+ DA17 ED 31                                add     hl,a                        ;
1346+ DA19 10 BE                                djnz    .ExplosionVertLoop          ;
1347+ DA1B C9                                   ret
1348+ DA1C              .FinishedExplosion:     ;break
1349+ DA1C 3A 3F C0                             ld      a,(UBnKSlotNumber)          ; get slot number
1350+ DA1F CD B3 88                             call    ClearSlotA                  ; gauranted to be in main memory as non bankables
1351+ DA22                                      ClearMemBitN UBnkaiatkecm, ShipExplodingBitNbr
1351+ DA22 21 54 C0    >                        ld      hl,UBnkaiatkecm
1351+ DA25 CB AE       >                        res     ShipExplodingBitNbr,(hl)
1352+ DA27 C9                                   ret
1353+ DA28
1354+ DA28
1355+ DA28 FC D8 B4 90  DebrisColourTable:      DB L2ColourYELLOW_1, L2ColourYELLOW_2, L2ColourYELLOW_3, L2ColourYELLOW_4, L2ColourYELLOW_5, L2ColourYELLOW_6, L2ColourYELLOW_7,L2ColourGREY_4
1355+ DA2C 6C 48 24 25
1356+ DA30                                      ; set flags and signal to remove from slot list
1357+ DA30
1358+ DA30              ; Hl = HlL +/- (Random * projected cloud size)
1359+ DA30              ; In - d = z distance, hl = vert hi lo
1360+ DA30              ; Out hl = adjusted distance
1361+ DA30              ; uses registers hl, de
1362+ DA30 E5           HLEquARandCloud:        push    hl                          ; random number geneator upsets hl register
1363+ DA31 CD 41 89                             call    doRandom                    ; a= random * 2
1364+ DA34 E1                                   pop     hl
1365+ DA35 17                                   rla                                 ;
1366+ DA36 38 0A                                jr      c,.Negative                 ; if buit 7 went into carry
1367+ DA38 5F           .Positive:              ld  e,a
1368+ DA39 ED 30                                mul
1369+ DA3B 5A                                   ld  e,d
1370+ DA3C 16 00                                ld  d,0
1371+ DA3E                                      ClearCarryFlag
1371+ DA3E B7          >                        or a
1372+ DA3F ED 5A                                adc     hl,de                       ; hl = hl + a
1373+ DA41 C9                                   ret
1374+ DA42 5F           .Negative:              ld  e,a
1375+ DA43 ED 30                                mul
1376+ DA45 5A                                   ld  e,d
1377+ DA46 16 00                                ld  d,0
1378+ DA48                                      ClearCarryFlag
1378+ DA48 B7          >                        or a
1379+ DA49 ED 52                                sbc     hl,de                       ; hl = hl + a
1380+ DA4B C9                                   ret
1381+ DA4C
1382+ DA4C              GetExperiencePoints:    ; TODO calculate experience points
1383+ DA4C                                      ; TODO mission updates check
1384+ DA4C C9                                   ret
1385+ DA4D
1386+ DA4D              ; ......................................................
1387+ DA4D 3A 45 C3     KillShip:               ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1388+ DA50 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1389+ DA52 C8                                   ret     z
1390+ DA53 3A 54 C0                             ld      a,(UBnkaiatkecm)            ; remove AI, mark killed, mark exploding
1391+ DA56 F6 30                                or      ShipExploding | ShipKilled  ; .
1392+ DA58 E6 7F                                and     ShipAIDisabled              ; .
1393+ DA5A 32 54 C0                             ld      (UBnkaiatkecm),a            ; .
1394+ DA5D                                      SetMemToN   UBnKexplDsp, ShipExplosionDuration ; set debris cloud timer, also usered in main to remove from slots
1394+ DA5D 3E 4B       >                        ld      a,ShipExplosionDuration
1394+ DA5F 32 51 C0    >                        ld      (UBnKexplDsp),a
1395+ DA62                                      ldWriteZero UBnKEnergy              ; Zero ship energy
1395+ DA62 AF          >                        xor      a
1395+ DA63 32 58 C0    >                        ld       (UBnKEnergy),a
1396+ DA66 32 60 C0                             ld      (UBnKCloudRadius),a
1397+ DA69 3E 12                                ld      a,18
1398+ DA6B 32 5F C0                             ld      (UBnKCloudCounter),a        ; Zero cloud
1399+ DA6E                                      ; TODO logic to spawn cargo/plates goes here
1400+ DA6E C9                                   ret
1401+ DA6F
1402+ DA6F              ; in a = damage
1403+ DA6F 47           DamageShip:             ld      b,a                         ; b = a = damage comming in
1404+ DA70 3A 45 C3                             ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1405+ DA73 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1406+ DA75 C8                                   ret     z
1407+ DA76 3A 58 C0                             ld      a,(UBnKEnergy)              ; get current energy level
1408+ DA79                                      ClearCarryFlag
1408+ DA79 B7          >                        or a
1409+ DA7A 98                                   sbc     a,b                         ; subtract damage
1410+ DA7B D2 82 DA     .Overkilled:            jp      nc,.DoneDamage              ; if no carry then its not gone negative
1411+ DA7E CD 4D DA                             call    KillShip                    ; else kill it
1412+ DA81 C9                                   ret
1413+ DA82 32 58 C0     .DoneDamage:            ld      (UBnKEnergy),a
1414+ DA85 C9                                   ret
1415+ DA86              ; need recovery for energy too
1416+ DA86              ; Shall we have a "jolt ship off course routine for when it gets hit by a blast or collision)
1417+ DA86
1418+ DA86              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1419+ DA86              ;  Entering Here we have the following:
1420+ DA86              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1421+ DA86              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1422+ DA86              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1423+ DA86              ;
1424+ DA86              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1425+ DA86              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1426+ DA86              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1427+ DA86              ;--------------------------------------------------------------------------------------------------------
1428+ DA86              AddLaserBeamLine:
1429+ DA86              ; this code is a bag of shit and needs re-writing
1430+ DA86              GetGunVertexNode:
1431+ DA86 3A 34 C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1432+ DA89 21 F0 C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1433+ DA8C ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1434+ DA8E FD 2E 00             ld          iyl,0
1435+ DA91              MoveX1PointToXX15:
1436+ DA91 4E                   ld          c,(hl)                              ;
1437+ DA92 23                   inc         hl
1438+ DA93 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1439+ DA94 23                   inc         hl
1440+ DA95 ED 43 A6 C0          ld          (UBnkX1),bc
1441+ DA99 0C                   inc         c
1442+ DA9A C8                   ret         z                                   ; was c 255?
1443+ DA9B 04                   inc         b
1444+ DA9C C8                   ret         z                                   ; was c 255?
1445+ DA9D              MoveY1PointToXX15:
1446+ DA9D 4E                   ld          c,(hl)                              ;
1447+ DA9E 23                   inc         hl
1448+ DA9F 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1449+ DAA0 23                   inc         hl
1450+ DAA1 ED 43 A8 C0          ld          (UBnkY1),bc
1451+ DAA5              SetX2PointToXX15:
1452+ DAA5 01 00 00             ld          bc,0                                ; set X2 to 0
1453+ DAA8 ED 43 AA C0          ld          (UBnkX2),bc
1454+ DAAC 3A 26 C0             ld          a,(UBnKzlo)
1455+ DAAF 4F                   ld          c,a
1456+ DAB0              SetY2PointToXX15:
1457+ DAB0 ED 43 AC C0          ld          (UBnkY2),bc                         ; set Y2to 0
1458+ DAB4 3A 22 C0             ld          a,(UBnKxsgn)
1459+ DAB7                      JumpOnBitClear a,7,LL74SkipDec
1459+ DAB7 CB 7F       >                        bit 	7,a
1459+ DAB9 CA C1 DA    >                        jp      z,LL74SkipDec
1460+ DABC              LL74DecX2:
1461+ DABC 3E FF                ld          a,$FF
1462+ DABE 32 AA C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1463+ DAC1              LL74SkipDec:
1464+ DAC1 CD 41 C8             call        ClipLine                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1465+ DAC4 38 71                jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1466+ DAC6              ; Here we are usign hl to replace VarU as index
1467+ DAC6 2A 9F 83             ld          hl,(varU16)
1468+ DAC9 3A A6 C0             ld          a,(UBnKx1Lo)
1469+ DACC 77                   ld          (hl),a
1470+ DACD 23                   inc         hl
1471+ DACE 3A A8 C0             ld          a,(UbnKy1Lo)
1472+ DAD1 77                   ld          (hl),a
1473+ DAD2 23                   inc         hl
1474+ DAD3 3A AA C0             ld          a,(UBnkX2Lo)
1475+ DAD6 77                   ld          (hl),a
1476+ DAD7 23                   inc         hl
1477+ DAD8 3A AC C0             ld          a,(UbnKy2Lo)
1478+ DADB 77                   ld          (hl),a
1479+ DADC FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1480+ DADE 23                   inc         hl
1481+ DADF FD 2C                inc         iyl                                 ; ready for next byte
1482+ DAE1 22 9F 83             ld          (varU16),hl
1483+ DAE4 C9                   ret
1484+ DAE5
1485+ DAE5                  INCLUDE "Universe/Ships/PrepLines.asm"
# file opened: ./Universe/Ships/PrepLines.asm
   1++DAE5              ;--------------------------------------------------------------------------------------------------------
   2++DAE5                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DAE5              ;--------------------------------------------------------------------------------------------------------
   2++DAE5              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DAE5 21 F0 C0     getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DAE8 ED 31                                add         hl,a                                ; hl = address of Node
   5++DAEA 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DAEB 11 A6 C0                             ld          de,UBnkX1
   7++DAEE ED A0                                ldi                                             ; x1 lo
   8++DAF0 ED A0                                ldi                                             ; x1 hi
   9++DAF2 ED A0                                ldi                                             ; y1 lo
  10++DAF4 ED A0                                ldi                                             ; y1 hi
  11++DAF6 C9                                   ret
  12++DAF7
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   3++DAF7                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DAF7              ;--------------------------------------------------------------------------------------------------------
   2++DAF7              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DAF7 21 F0 C0     getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DAFA ED 31                                add         hl,a                                ; hl = address of Node
   5++DAFC 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DAFD 11 AA C0                             ld          de,UBnkX2
   7++DB00 ED A0                                ldi                                             ; x1 lo
   8++DB02 ED A0                                ldi                                             ; x1 hi
   9++DB04 ED A0                                ldi                                             ; y1 lo
  10++DB06 ED A0                                ldi                                             ; y1 hi
  11++DB08 C9                                   ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   4++DB09                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DB09              ;--------------------------------------------------------------------------------------------------------
   2++DB09              GetFaceAtA:         MACRO
   3++DB09 ~                                ld          hl,UbnkFaceVisArray
   4++DB09 ~                                add         hl,a
   5++DB09 ~                                ld          a,(hl)                              ; get face visibility
   6++DB09                                  ENDM
   7++DB09
# file closed: ././ModelRender/GetFaceAtA.asm
   5++DB09              ;--------------------------------------------------------------------------------------------------------
   6++DB09              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
   7++DB09               ;   DEFINE NOBACKFACECULL 1
   8++DB09 00           PLEDGECTR           DB          0
   9++DB0A
  10++DB0A              PrepLines:
  11++DB0A              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  12++DB0A
  13++DB0A              ; TODO add in onced DOEXP is finished
  14++DB0A              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  15++DB0A              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  16++DB0A              ;        or          8
  17++DB0A              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  18++DB0A              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  19++DB0A              ;EE31:                                                   ; no explosion
  20++DB0A              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  21++DB0A              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  22++DB0A              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  23++DB0A              ;
  24++DB0A              ;--------------------------------------------------------------------------------------------------------
  25++DB0A              InitialiseLineRead:
  26++DB0A                      ;break
  27++DB0A                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  27++DB0A AF          >                        xor      a
  27++DB0B 32 22 C3    >                        ld       (UbnkLineArrayLen),a
  28++DB0E                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  28++DB0E AF          >                        xor      a
  28++DB0F 32 23 C3    >                        ld       (UbnkLineArrayBytes),a
  29++DB12                      ldWriteZero PLEDGECTR
  29++DB12 AF          >                        xor      a
  29++DB13 32 09 DB    >                        ld       (PLEDGECTR),a
  30++DB16 3A 38 C3             ld          a,(EdgeCountAddr)
  31++DB19 DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  32++DB1B FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  33++DB1E 21 30 C2             ld          hl,UbnkLineArray                    ; head of array
  34++DB21 22 9F 83             ld          (varU16),hl                         ; store current line array pointer un varU16
  35++DB24                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  35++DB24 3A 38 C3    >                        ld       a,(EdgeCountAddr)
  35++DB27 32 A3 83    >                        ld       (XX17),a
  36++DB2A 3A 51 C0             ld          a,(UBnKexplDsp)                     ; get explosion status
  37++DB2D                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  37++DB2D CB 77       >                        bit 	6,a
  37++DB2F CA 37 DB    >                        jp      z,CalculateNewLines
  38++DB32 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  39++DB34 32 51 C0             ld          (UBnKexplDsp),a                     ; INWK+31
  40++DB37              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  41++DB37              ; NOw we can calculate hull after including laser line
  42++DB37              CalculateNewLines:
  43++DB37              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  44++DB37              CheckEdgesForVisibility:
  45++DB37 21 39 C4             ld          hl,UBnkHullEdges
  46++DB3A                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  47++DB3A 22 9F 82             ld          (varV),hl                           ; V \ is pointer to where edges data start
  48++DB3D 3A 33 C3             ld          a,(LineX4Addr)
  49++DB40 47                   ld          b,a                                 ; nbr of bytes of edge data
  50++DB41              LL75Loop:                                               ; count Visible edges
  51++DB41              IsEdgeInVisibilityRange:
  52++DB41 2A 9F 82             ld          hl,(varV)
  53++DB44 E5                   push        hl
  54++DB45 FD E1                pop         iy
  55++DB47                      IFDEF NOBACKFACECULL
  56++DB47 ~                        jp          VisibileEdge; DEBUGTODO
  57++DB47                      ENDIF
  58++DB47 3A 8B 82             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  59++DB4A 57                   ld          d,a                                 ; d holds copy of XX4
  60++DB4B              ; Get Edge Byte 0
  61++DB4B FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  62++DB4E                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  62++DB4E BA          >                        cp      d
  62++DB4F DA A1 DB    >                        jp		c, LL78EdgeNotVisible
  63++DB52              EdgeMayBeVisibile:
  64++DB52              ; Get Edge Byte 1
  65++DB52              IsFace1Visibile:                                        ; edges have 2 faces to test
  66++DB52 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  67++DB55 4F                   ld          c,a                                 ;  c = a copy of byte 1
  68++DB56 E6 0F                and         $0F                                 ;
  69++DB58                      GetFaceAtA
  69++DB58 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
  69++DB5B ED 31       >                    add         hl,a
  69++DB5D 7E          >                    ld          a,(hl)                              ; get face visibility
  70++DB5E              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  71++DB5E                      JumpIfAIsNotZero VisibileEdge                     ; LL70 visible edge
  71++DB5E A7          >                        and     a
  71++DB5F C2 73 DB    >                        jp	    nz,VisibileEdge
  72++DB62              IsFace2Visibile:
  73++DB62 79                   ld          a,c                                 ; restore byte 1 from c register
  74++DB63 ED 23                swapnib                                         ;
  75++DB65 E6 0F                and         $0F                                 ; swap high byte into low byte
  76++DB67 E5                   push        hl
  77++DB68                      GetFaceAtA
  77++DB68 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
  77++DB6B ED 31       >                    add         hl,a
  77++DB6D 7E          >                    ld          a,(hl)                              ; get face visibility
  78++DB6E E1                   pop         hl
  79++DB6F                      JumpIfAIsZero LL78EdgeNotVisible                ; edge not visible
  79++DB6F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  79++DB70 CA A1 DB    >                        jp	    z, LL78EdgeNotVisible
  80++DB73              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  81++DB73              ;LL79--Visible edge--------------------------------------
  82++DB73              ; Get Edge Byte 2
  83++DB73 FD 7E 02             ld          a,(IY+2)                            ; get Node id
  84++DB76 CD E5 DA             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  85++DB79 FD 7E 03             ld          a,(IY+3)
  86++DB7C CD F7 DA             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
  87++DB7F CD 41 C8             call        ClipLine
  88++DB82 38 1D                jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
  89++DB84              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
  90++DB84 ED 5B 9F 83          ld          de,(varU16)                         ; clipped edges heap address
  91++DB88 21 A6 C0             ld          hl,UBnkNewX1
  92++DB8B                      FourLDIInstrunctions
  92++DB8B ED A0       >                        ldi
  92++DB8D ED A0       >                        ldi
  92++DB8F ED A0       >                        ldi
  92++DB91 ED A0       >                        ldi
  93++DB93 ED 53 9F 83          ld          (varU16),de                         ; update U16 with current address
  94++DB97 21 22 C3             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
  95++DB9A 34                   inc         (hl)
  96++DB9B 7E                   ld          a,(hl)
  97++DB9C                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
  97++DB9C FE 32       >                        cp     LineArraySize
  97++DB9E D2 B7 DB    >                        jp		nc,CompletedLineGeneration
  98++DBA1              ; If we hit here we skip the write of line arryay u16
  99++DBA1              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 100++DBA1              LL78:
 101++DBA1 2A 9F 82             ld          hl,(varV)                           ; varV is current edge address
 102++DBA4 3E 04                ld          a,4
 103++DBA6 ED 31                add         hl,a
 104++DBA8 22 9F 82             ld          (varV),hl
 105++DBAB 21 09 DB             ld          hl,PLEDGECTR                        ;
 106++DBAE 34                   inc         (hl)                                ;
 107++DBAF 7E                   ld          a,(hl)                              ; current edge index ++
 108++DBB0                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 108++DBB0 21 A3 83    >                        ld    hl,XX17
 108++DBB3 BE          >                        cp    (hl)
 108++DBB4 C2 41 DB    >                        jp      nz,LL75Loop
 109++DBB7              CompletedLineGeneration:
 110++DBB7              LL81:
 111++DBB7              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 112++DBB7 3A 22 C3             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 113++DBBA CB 27                sla         a
 114++DBBC CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 115++DBBE 32 23 C3             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 116++DBC1              ExitEdgeDataLoop:
 117++DBC1 C9                   ret
 118++DBC2
# file closed: ./Universe/Ships/PrepLines.asm
1486+ DBC2
1487+ DBC2              UnivBankSize  EQU $ - StartOfUniv
1488+ DBC2
# file closed: ./Universe/Ships/univ_ship_data.asm
 858  DBC2                                  DISPLAY "Bank ",BankUNIVDATA0," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data A"
 859  DBC2              ; Bank 71  ------------------------------------------------------------------------------------------------------------------------
 860  DBC2                                  SLOT    UniverseBankAddr
 861  DBC2                                  PAGE    BankUNIVDATA1
 862  DBC2                                  ORG	UniverseBankAddr,BankUNIVDATA1
 863  C000 FF           UNIVDATABlock1      DB $FF
 864  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 865  E000                                  DISPLAY "Bank ",BankUNIVDATA1," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data B"
 866  E000              ; Bank 72  ------------------------------------------------------------------------------------------------------------------------
 867  E000                                  SLOT    UniverseBankAddr
 868  E000                                  PAGE    BankUNIVDATA2
 869  E000                                  ORG	UniverseBankAddr,BankUNIVDATA2
 870  C000 FF           UNIVDATABlock2      DB $FF
 871  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 872  E000                                  DISPLAY "Bank ",BankUNIVDATA2," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data C"
 873  E000              ; Bank 73  ------------------------------------------------------------------------------------------------------------------------
 874  E000                                  SLOT    UniverseBankAddr
 875  E000                                  PAGE    BankUNIVDATA3
 876  E000                                  ORG	UniverseBankAddr,BankUNIVDATA3
 877  C000 FF           UNIVDATABlock3      DB $FF
 878  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 879  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data D"
 880  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 881  E000                                  SLOT    UniverseBankAddr
 882  E000                                  PAGE    BankUNIVDATA4
 883  E000                                  ORG	UniverseBankAddr,BankUNIVDATA4
 884  C000 FF           UNIVDATABlock4      DB $FF
 885  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 886  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data E"
 887  E000              ; Bank 75  ------------------------------------------------------------------------------------------------------------------------
 888  E000                                  SLOT    UniverseBankAddr
 889  E000                                  PAGE    BankUNIVDATA5
 890  E000                                  ORG	UniverseBankAddr,BankUNIVDATA5
 891  C000 FF           UNIVDATABlock5      DB $FF
 892  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 893  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data F"
 894  E000              ; Bank 76  ------------------------------------------------------------------------------------------------------------------------
 895  E000                                  SLOT    UniverseBankAddr
 896  E000                                  PAGE    BankUNIVDATA6
 897  E000                                  ORG	UniverseBankAddr,BankUNIVDATA6
 898  C000 FF           UNIVDATABlock6      DB $FF
 899  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 900  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data G"
 901  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 902  E000                                  SLOT    UniverseBankAddr
 903  E000                                  PAGE    BankUNIVDATA7
 904  E000                                  ORG	UniverseBankAddr,BankUNIVDATA7
 905  C000 FF           UNIVDATABlock7      DB $FF
 906  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 907  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data H"
 908  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 909  E000                                  SLOT    UniverseBankAddr
 910  E000                                  PAGE    BankUNIVDATA8
 911  E000                                  ORG	UniverseBankAddr,BankUNIVDATA8
 912  C000 FF           UNIVDATABlock8      DB $FF
 913  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 914  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data I"
 915  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 916  E000                                  SLOT    UniverseBankAddr
 917  E000                                  PAGE    BankUNIVDATA9
 918  E000                                  ORG	UniverseBankAddr,BankUNIVDATA9
 919  C000 FF           UNIVDATABlock9      DB $FF
 920  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 921  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data J"
 922  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 923  E000                                  SLOT    UniverseBankAddr
 924  E000                                  PAGE    BankUNIVDATA10
 925  E000                                  ORG	UniverseBankAddr,BankUNIVDATA10
 926  C000 FF           UNIVDATABlock10     DB $FF
 927  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 928  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data K"
 929  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 930  E000                                  SLOT    UniverseBankAddr
 931  E000                                  PAGE    BankUNIVDATA11
 932  E000                                  ORG	UniverseBankAddr,BankUNIVDATA11
 933  C000 FF           UNIVDATABlock11     DB $FF
 934  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 935  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data L"
 936  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 937  E000                                  SLOT    UniverseBankAddr
 938  E000                                  PAGE    BankUNIVDATA12
 939  E000                                  ORG	UniverseBankAddr,BankUNIVDATA12
 940  C000 FF           UNIVDATABlock12     DB $FF
 941  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 942  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data M"
 943  E000              ; Bank 83  ------------------------------------------------------------------------------------------------------------------------
 944  E000                                      SLOT    SunBankAddr
 945  E000                                      PAGE    BankSunData
 946  E000                                      ORG	    SunBankAddr,BankSunData
 947  C000                                      INCLUDE "./Universe/Sun/sun_data.asm"
# file opened: ./Universe/Sun/sun_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                      0123456789ABCDEF
  14+ C000 53 75 6E 20  StartOfSun:        DB "Sun Data ......."
  14+ C004 44 61 74 61
  14+ C008 20 2E 2E 2E
  14+ C00C 2E 2E 2E 2E
  15+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  16+ C010              CheckRowHLOnScreen:     MACRO   failtarget
  17+ C010 ~                                    ld      a,h                             ; is h byte set, i.e > 256 or < 0
  18+ C010 ~                                    and     a                               ; .
  19+ C010 ~                                    jr      nz,failtarget                   ; h <> 0 so fails (covers <0 and > 255
  20+ C010 ~                                    ld      a,l                             ; l bit 7 0?
  21+ C010 ~                                    and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
  22+ C010 ~                                    jr      nz,failtarget                   ;
  23+ C010                                      ENDM
  24+ C010
  25+ C010              ; IY = SBnKLineArray + rowValue*2
  26+ C010              IYEquRowN:              MACRO   rowValue                        ; set up iy as target address
  27+ C010 ~                                    ld      a,rowValue
  28+ C010 ~                                    ld      hl,SBnKLineArray
  29+ C010 ~                                    add     hl,a
  30+ C010 ~                                    add     hl,a
  31+ C010 ~                                    push    hl
  32+ C010 ~                                    pop     iy
  33+ C010                                      ENDM
  34+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  35+ C010              ; Universe map substibute for INWK
  36+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  37+ C010              SBnKDataBlock:
  38+ C010                                      INCLUDE "./Universe/Sun/SunPosVars.asm"
# file opened: ././Universe/Sun/SunPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           SBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           SBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           SBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           SBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           SBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           SBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           SBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           SBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           SBnKzsgn                    DB  0                       ; INWK +8
  11++C019 00 00        SunCompassX                 DW  0
  12++C01B 00 00        SunCompassY                 DW  0
  13++C01D
# file closed: ././Universe/Sun/SunPosVars.asm
  39+ C01D                                      INCLUDE "./Universe/Sun/SunRotationMatrixVars.asm"
# file opened: ././Universe/Sun/SunRotationMatrixVars.asm
   1++C01D              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C01D              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C01D 00 00        SBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01F              SBnKrotmatSidev             equ SBnKrotmatSidevX
   5++C01F 00 00        SBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C021 00 00        SBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C023 00 00        SBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C025              SBnKrotmatRoofv             equ SBnKrotmatRoofvX
   9++C025 00 00        SBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C027 00 00        SBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C029 00 00        SBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C02B              SBnKrotmatNosev             EQU SBnKrotmatNosevX
  13++C02B 00 00        SBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C02D 00 00        SBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02F
# file closed: ././Universe/Sun/SunRotationMatrixVars.asm
  40+ C02F                                      INCLUDE "./Universe/Sun/SunAIRuntimeData.asm"
# file opened: ././Universe/Sun/SunAIRuntimeData.asm
   1++C02F              ; -- Ship AI data
   2++C02F 00           SBnKRotXCounter             DB  0                       ; INWK +29
   3++C030 00           SBnKRotZCounter             DB  0                       ; INWK +30
   4++C031 00           SBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C032 00           SBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C033
# file closed: ././Universe/Sun/SunAIRuntimeData.asm
  41+ C033
  42+ C033
  43+ C033                                      INCLUDE "./Universe/Sun/SunXX16Vars.asm"
# file opened: ././Universe/Sun/SunXX16Vars.asm
   1++C033              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C033 00 00        SBnkTransmatSidevX          DW  0               ; XX16+0
   3++C035              SBnkTransmatSidev           EQU SBnkTransmatSidevX
   4++C035 00 00        SBnkTransmatSidevY          DW 0                ; XX16+2
   5++C037 00 00        SBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C039 00 00        SBnkTransmatRoofvX          DW 0
   7++C03B              SBnkTransmatRoofv           EQU SBnkTransmatRoofvX
   8++C03B 00 00        SBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03D 00 00        SBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03F 00 00        SBnkTransmatNosevX          DW 0
  11++C041              SBnkTransmatNosev           EQU SBnkTransmatNosevX
  12++C041 00 00        SBnkTransmatNosevY          DW 0                ; XX16+2
  13++C043 00 00        SBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C045 00 00        SBnkTransmatTransX          DW 0
  15++C047 00 00        SBnkTransmatTransY          DW 0
  16++C049 00 00        SBnkTransmatTransZ          DW 0
  17++C04B              SunXX16                      equ SBnkTransmatSidev
  18++C04B              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04B 00 00        SBnkTransInvRow0x0          DW 0
  20++C04D 00 00        SBnkTransInvRow0x1          DW 0
  21++C04F 00 00        SBnkTransInvRow0x2          DW 0
  22++C051 00 00        SBnkTransInvRow0x3          DW 0
  23++C053 00 00        SBnkTransInvRow1y0          DW 0
  24++C055 00 00        SBnkTransInvRow1y1          DW 0
  25++C057 00 00        SBnkTransInvRow1y2          DW 0
  26++C059 00 00        SBnkTransInvRow1y3          DW 0
  27++C05B 00 00        SBnkTransInvRow2z0          DW 0
  28++C05D 00 00        SBnkTransInvRow2z1          DW 0
  29++C05F 00 00        SBnkTransInvRow2z2          DW 0
  30++C061 00 00        SBnkTransInvRow2z3          DW 0
  31++C063
  32++C063              SunXX16Inv             equ SBnkTransInvRow0x0
  33++C063
# file closed: ././Universe/Sun/SunXX16Vars.asm
  44+ C063                                      INCLUDE "./Universe/Sun/SunXX25Vars.asm"
# file opened: ././Universe/Sun/SunXX25Vars.asm
   1++C063              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C063 00           SBnKProjxLo                 DB  0
   3++C064 00           SBnKProjxHi                 DB  0
   4++C065 00           SBnKProjxSgn                DB  0
   5++C066              SBnKProjx                   EQU SBnKProjxLo
   6++C066 00           SBnKProjyLo                 DB  0
   7++C067 00           SBnKProjyHi                 DB  0
   8++C068 00           SBnKProjySgn                DB  0
   9++C069              SBnKProjy                   EQU SBnKProjyLo
  10++C069 00           SBnKProjzLo                 DB  0
  11++C06A 00           SBnKProjzHi                 DB  0
  12++C06B 00           SBnKProjzSgn                DB  0
  13++C06C              SBnKProjz                   EQU SBnKProjzLo
  14++C06C              SXX25                       EQU SBnKProjxLo
  15++C06C
# file closed: ././Universe/Sun/SunXX25Vars.asm
  45+ C06C                                      INCLUDE "./Universe/Sun/SunXX18Vars.asm"
# file opened: ././Universe/Sun/SunXX18Vars.asm
   1++C06C              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06C 00           SBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C06D 00           SBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06E 00           SBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C06F              SBnKDrawCam0x               equ SBnKDrawCam0xLo
   6++C06F 00           SBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C070 00           SBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C071 00           SBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C072              SBnKDrawCam0y               equ SBnKDrawCam0yLo
  10++C072 00           SBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C073 00           SBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C074 00           SBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C075              SBnKDrawCam0z               equ SBnKDrawCam0zLo
  14++C075              SXX18                       equ SBnKDrawCam0xLo
  15++C075
# file closed: ././Universe/Sun/SunXX18Vars.asm
  46+ C075
  47+ C075              ; Used to make 16 bit reads a little cleaner in source code
  48+ C075 00 00 00     SBnKzPoint                  DS  3
  49+ C078              SBnKzPointLo                equ SBnKzPoint
  50+ C078              SBnKzPointHi                equ SBnKzPoint+1
  51+ C078              SBnKzPointSign              equ SBnKzPoint+2
  52+ C078                                      INCLUDE "./Universe/Sun/SunXX15Vars.asm"
# file opened: ././Universe/Sun/SunXX15Vars.asm
   1++C078              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C078 00           SBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C079 00           SBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C07A 00           SBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C07B 00           SBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C07C 00           SBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C07D 00           SBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07E
   9++C07E              SXX15                       equ SBnKXScaled
  10++C07E              SXX15VecX                   equ SXX15
  11++C07E              SXX15VecY                   equ SXX15+1
  12++C07E              SXX15VecZ                   equ SXX15+2
  13++C07E              SBnKXPoint                  equ SXX15
  14++C07E              SBnKXPointLo                equ SXX15+0
  15++C07E              SBnKXPointHi                equ SXX15+1
  16++C07E              SBnKXPointSign              equ SXX15+2
  17++C07E              SBnKYPoint                  equ SXX15+3
  18++C07E              SBnKYPointLo                equ SXX15+3
  19++C07E              SBnKYPointHi                equ SXX15+4
  20++C07E              SBnKYPointSign              equ SXX15+5
  21++C07E
# file closed: ././Universe/Sun/SunXX15Vars.asm
  53+ C07E                                      INCLUDE "./Universe/Sun/SunXX12Vars.asm"
# file opened: ././Universe/Sun/SunXX12Vars.asm
   1++C07E              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07E              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07E 00           SBnKXX12xLo                 DB  0               ; XX12+0
   4++C07F 00           SBnKXX12xSign               DB  0               ; XX12+1
   5++C080 00           SBnKXX12yLo                 DB  0               ; XX12+2
   6++C081 00           SBnKXX12ySign               DB  0               ; XX12+3
   7++C082 00           SBnKXX12zLo                 DB  0               ; XX12+4
   8++C083 00           SBnKXX12zSign               DB  0               ; XX12+5
   9++C084 00 00 00...  SXX12Save                   DS  6
  10++C08A 00 00 00...  SXX12Save2                  DS  6
  11++C090              SXX12                       equ SBnKXX12xLo
  12++C090              varSXX12                    equ SBnKXX12xLo
  13++C090              ; Repurposed XX12 when plotting lines
  14++C090              SBnkY2                      equ SXX12+0
  15++C090              SbnKy2Lo                    equ SXX12+0
  16++C090              SBnkY2Hi                    equ SXX12+1
  17++C090              SBnkDeltaXLo                equ SXX12+2
  18++C090              SBnkDeltaXHi                equ SXX12+3
  19++C090              SBnkDeltaYLo                equ SXX12+4
  20++C090              SBnkDeltaYHi                equ SXX12+5
  21++C090              SbnkGradient                equ SXX12+2
  22++C090              SBnkTemp1                   equ SXX12+2
  23++C090              SBnkTemp1Lo                 equ SXX12+2
  24++C090              SBnkTemp1Hi                 equ SXX12+3
  25++C090              SBnkTemp2                   equ SXX12+3
  26++C090              SBnkTemp2Lo                 equ SXX12+3
  27++C090              SBnkTemp2Hi                 equ SXX12+4
  28++C090
# file closed: ././Universe/Sun/SunXX12Vars.asm
  54+ C090
  55+ C090
  56+ C090              ; Post clipping the results are now 8 bit
  57+ C090 00           SBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  58+ C091 00           SBnKProjectedY              DB  0
  59+ C092 00           SBnKProjectedX              DB  0
  60+ C093              SBnKProjected               equ SBnKProjectedY  ; resultant projected position
  61+ C093 00 00 00...  SunXX15Save                 DS  8
  62+ C09B 00 00 00...  SunXX15Save2                DS  8
  63+ C0A3              ; Heap (or array) information for lines and normals
  64+ C0A3              ; Coords are stored XY,XY,XY,XY
  65+ C0A3              ; Normals
  66+ C0A3              ; This needs re-oprganising now.
  67+ C0A3              ; Runtime Calculation Store
  68+ C0A3
  69+ C0A3              SunLineArraySize            equ 128 * 2
  70+ C0A3              ; Storage arrays for data
  71+ C0A3
  72+ C0A3 00 00 00...  SBnKLineArray               DS SunLineArraySize ; XX19 Holds the clipped line details
  73+ C1A3              SBnKLinesHeapMax            EQU $ - SBnKLineArray
  74+ C1A3
  75+ C1A3 00 00        LineArrayPtr                DW  0
  76+ C1A5
  77+ C1A5              SBnK_Data_len               EQU $ - SBnKDataBlock
  78+ C1A5
  79+ C1A5              ; --------------------------------------------------------------
  80+ C1A5 21 10 C0     ResetSBnKData:          ld      hl,SBnKDataBlock
  81+ C1A8 11 95 01                             ld      de,SBnK_Data_len
  82+ C1AB AF                                   xor     a
  83+ C1AC CD 2E 7F                             call    memfill_dma
  84+ C1AF C9                                   ret
  85+ C1B0              ; --------------------------------------------------------------
  86+ C1B0 21 10 C0     ResetSBnKPosition:      ld      hl,SBnKxlo
  87+ C1B3 06 09                                ld      b, 3*3
  88+ C1B5 AF                                   xor     a
  89+ C1B6 77           .zeroLoop:              ld      (hl),a
  90+ C1B7 23                                   inc     hl
  91+ C1B8 10 FC                                djnz    .zeroLoop
  92+ C1BA C9                                   ret
  93+ C1BB              ; This uses UBNKNodeArray as the list
  94+ C1BB              ; the array is 256 * 2 bytes
  95+ C1BB              ; counter is current row y pos
  96+ C1BB              ; byte 1 is start x pos
  97+ C1BB              ; byte 2 is end x pos
  98+ C1BB              ; if they are both 0 then skip
  99+ C1BB              ; its always horizontal, yellow
 100+ C1BB
 101+ C1BB              ; PLANET
 102+ C1BB
 103+ C1BB
 104+ C1BB              .SunNoDraw:             SetCarryFlag                    ; ship is behind so do not draw, so we don't care abour draw as dot
 104+ C1BB 37          >                        scf
 105+ C1BC C9                                   ret
 106+ C1BD
 107+ C1BD
 108+ C1BD
 109+ C1BD              SunBankDraw:            MACRO
 110+ C1BD ~            .drawLoop               ld      a,(hl)
 111+ C1BD ~                                    ld      c,a                     ; c = left column
 112+ C1BD ~                                    inc     hl
 113+ C1BD ~                                    ld      d,(hl)                  ; d = right col
 114+ C1BD ~                                    inc     hl                      ; now ready for next linel
 115+ C1BD ~                                    push    hl,,bc
 116+ C1BD ~                                    cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 117+ C1BD ~                                    IfResultZeroGoto .NoLineDraw
 118+ C1BD ~                                    ld      a,d                     ; get right col back
 119+ C1BD ~                                    sub     c                       ; subtract left so a = length
 120+ C1BD ~                                    inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 121+ C1BD ~                                    call    z, .FixWidth
 122+ C1BD ~                                    ld      d,a                     ; de = length (e - d)
 123+ C1BD ~                                    ld      e,216                   ; yellow
 124+ C1BD ~                                    call    l2_draw_horz_dma        ; draw without bank switch
 125+ C1BD ~            .NoLineDraw:            pop     hl,,bc
 126+ C1BD ~                                    inc     b
 127+ C1BD ~                                    dec     iyh
 128+ C1BD ~                                    IfResultNotZeroGoto  .drawLoop
 129+ C1BD                                      ENDM
 130+ C1BD
 131+ C1BD
 132+ C1BD
 133+ C1BD              SunDraw:                MMUSelectLayer2
 133+ C1BD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 134+ C1C1 3A A1 C5     .OptimiseStartPos:      ld      a,(MinYOffset)
 135+ C1C4                                      JumpIfAIsZero .OffsetIsZero     ; if offset is 0 then just initate as normal
 135+ C1C4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ C1C5 CA D5 C1    >                        jp	    z, .OffsetIsZero
 136+ C1C8                                      JumpIfALTNusng 64, .OffsetLT64  ; if offset >=64 then we adjust and mve to bank 0
 136+ C1C8 FE 40       >                        cp      64
 136+ C1CA DA E2 C1    >                        jp		c, .OffsetLT64
 137+ C1CD D6 40        .OffsetGTE64:           sub     64
 138+ C1CF 32 A1 C5                             ld      (MinYOffset),a          ; adjust offset for bank 2
 139+ C1D2 C3 1A C2                             jp      .StartBank2
 140+ C1D5 06 00        .OffsetIsZero:          ld      b,0                     ; row
 141+ C1D7 FD 26 40                             ld      iyh,64                  ; counter
 142+ C1DA 21 A3 C0                             ld      hl,SBnKLineArray        ; set hl to start of array
 143+ C1DD C3 F4 C1                             jp      .StartBank1
 144+ C1E0              ;-- Snuck routine in here so that the macro will be happier
 145+ C1E0 3D           .FixWidth:              dec     a                       ; if carry resulted in a value of zero then correct
 146+ C1E1 C9                                   ret
 147+ C1E2 21 A3 C0     .OffsetLT64:            ld      hl,SBnKLineArray        ; adjust hl for line array offset
 148+ C1E5 ED 31                                add     hl,a                    ; .
 149+ C1E7 ED 31                                add     hl,a                    ; .
 150+ C1E9 47                                   ld      b,a                     ; set b row to the actual offset
 151+ C1EA 4F                                   ld      c,a                     ; iyh = 64 - Y offset
 152+ C1EB 3E 40                                ld      a,64                    ; .
 153+ C1ED 91                                   sub     c                       ; .
 154+ C1EE FD 67                                ld      iyh,a
 155+ C1F0 AF                                   xor     a                       ; Ready bank 2 with no offset
 156+ C1F1 32 A1 C5                             ld      (MinYOffset),a          ; .
 157+ C1F4 D9           .StartBank1:            exx
 158+ C1F5 3E 00                                ld      a,LAYER2_SHIFTED_SCREEN_TOP
 159+ C1F7 CD 37 E0                             call    asm_l2_bank_select      ; get in the first bank, we will only then bank select when needed
 160+ C1FA D9                                   exx
 161+ C1FB                                      SunBankDraw
 161+ C1FB 7E          >.drawLoop               ld      a,(hl)
 161+ C1FC 4F          >                        ld      c,a                     ; c = left column
 161+ C1FD 23          >                        inc     hl
 161+ C1FE 56          >                        ld      d,(hl)                  ; d = right col
 161+ C1FF 23          >                        inc     hl                      ; now ready for next linel
 161+ C200 E5 C5       >                        push    hl,,bc
 161+ C202 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 161+ C203             >                        IfResultZeroGoto .NoLineDraw
 161+ C203 CA 12 C2    >                        jp	z,.NoLineDraw
 161+ C206 7A          >                        ld      a,d                     ; get right col back
 161+ C207 91          >                        sub     c                       ; subtract left so a = length
 161+ C208 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 161+ C209 CC E0 C1    >                        call    z, .FixWidth
 161+ C20C 57          >                        ld      d,a                     ; de = length (e - d)
 161+ C20D 1E D8       >                        ld      e,216                   ; yellow
 161+ C20F CD 8D E2    >                        call    l2_draw_horz_dma        ; draw without bank switch
 161+ C212 C1 E1       >.NoLineDraw:            pop     hl,,bc
 161+ C214 04          >                        inc     b
 161+ C215 FD 25       >                        dec     iyh
 161+ C217             >                        IfResultNotZeroGoto  .drawLoop
 161+ C217 C2 FB C1    >                        jp	nz,.drawLoop
 162+ C21A 3A A1 C5     .StartBank2:            ld      a,(MinYOffset)
 163+ C21D                                      JumpIfAIsZero .OffsetBank2IsZero; if offset is 0 then we just continue, offset can never be >127 else there would be no draw
 163+ C21D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 163+ C21E CA 32 C2    >                        jp	    z, .OffsetBank2IsZero
 164+ C221 21 23 C1     .NotZeroOffset:         ld      hl,SBnKLineArray + (64 * 2); adjust to correct offset
 165+ C224 ED 31                                add     hl,a
 166+ C226 ED 31                                add     hl,a
 167+ C228 4F                                   ld      c,a                     ; iyh = 64 - offset
 168+ C229 3E 40                                ld      a,64                    ; .
 169+ C22B 91                                   sub     c                       ; .
 170+ C22C FD 67                                ld      iyh,a                   ; .
 171+ C22E 41                                   ld      b,c                     ; b = offset row
 172+ C22F C3 3A C2                             jp      .drawLineBank2
 173+ C232 21 23 C1     .OffsetBank2IsZero:     ld      hl,SBnKLineArray + (64 * 2); start with offset adjusted
 174+ C235 06 00                                ld      b,0
 175+ C237 FD 26 40                             ld      iyh,64
 176+ C23A D9           .drawLineBank2:         exx
 177+ C23B 3E 40                                ld      a,LAYER2_SHIFTED_SCREEN_MIDDLE
 178+ C23D CD 37 E0                             call    asm_l2_bank_select      ; now do the lower bank
 179+ C240 D9                                   exx
 180+ C241              ; Could make this a sub routine but unwrapping saves a call
 181+ C241                                      SunBankDraw
 181+ C241 7E          >.drawLoop               ld      a,(hl)
 181+ C242 4F          >                        ld      c,a                     ; c = left column
 181+ C243 23          >                        inc     hl
 181+ C244 56          >                        ld      d,(hl)                  ; d = right col
 181+ C245 23          >                        inc     hl                      ; now ready for next linel
 181+ C246 E5 C5       >                        push    hl,,bc
 181+ C248 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 181+ C249             >                        IfResultZeroGoto .NoLineDraw
 181+ C249 CA 58 C2    >                        jp	z,.NoLineDraw
 181+ C24C 7A          >                        ld      a,d                     ; get right col back
 181+ C24D 91          >                        sub     c                       ; subtract left so a = length
 181+ C24E 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 181+ C24F CC E0 C1    >                        call    z, .FixWidth
 181+ C252 57          >                        ld      d,a                     ; de = length (e - d)
 181+ C253 1E D8       >                        ld      e,216                   ; yellow
 181+ C255 CD 8D E2    >                        call    l2_draw_horz_dma        ; draw without bank switch
 181+ C258 C1 E1       >.NoLineDraw:            pop     hl,,bc
 181+ C25A 04          >                        inc     b
 181+ C25B FD 25       >                        dec     iyh
 181+ C25D             >                        IfResultNotZeroGoto  .drawLoop
 181+ C25D C2 41 C2    >                        jp	nz,.drawLoop
 182+ C260 C9                                   ret
 183+ C261
 184+ C261              ; --------------------------------------------------------------
 185+ C261              ; This sets current universe object to a star / sun, they use sign + 23 bit positions
 186+ C261 CD A5 C1     CreateSun:              call    ResetSBnKData
 187+ C264 3A 98 84                             ld      a,(WorkingSeeds+3)
 188+ C267 E6 07                                and     %00000111
 189+ C269 F6 81                                or      %10000001
 190+ C26B 32 18 C0                             ld      (SBnKzsgn),a
 191+ C26E 3A 9A 84                             ld      a,(WorkingSeeds+5)
 192+ C271 E6 03                                and     %00000011
 193+ C273 32 12 C0                             ld      (SBnKxsgn),a
 194+ C276 32 15 C0                             ld      (SBnKysgn),a
 195+ C279 21 00 00                             ld      hl, $0000
 196+ C27C 22 17 C0                             ld      (SBnKzhi),hl
 197+ C27F 3E E3                                ld      a, $E3
 198+ C281 32 16 C0                             ld      (SBnKzlo),a
 199+ C284 C9                                   ret
 200+ C285              ; --------------------------------------------------------------
 201+ C285              ; This creates a sun relative to space station on launch
 202+ C285 CD A5 C1     CreateSunLaunched:      call    ResetSBnKData
 203+ C288 21 00 00                             ld      hl,0
 204+ C28B 3E 00                                ld      a,0
 205+ C28D 22 10 C0                             ld      (SBnKxlo),hl
 206+ C290 22 13 C0                             ld      (SBnKylo),hl
 207+ C293 21 00 E0                             ld      hl,$E000
 208+ C296 22 16 C0                             ld      (SBnKzlo),hl
 209+ C299 32 12 C0                             ld      (SBnKxsgn),a
 210+ C29C 32 18 C0                             ld      (SBnKzsgn),a
 211+ C29F 3E 06                                ld      a,$06
 212+ C2A1 32 15 C0                             ld      (SBnKysgn),a
 213+ C2A4 C9                                   ret
 214+ C2A5              ; --------------------------------------------------------------
 215+ C2A5              ; This sets current universe object to a planet,they use sign + 23 bit positions
 216+ C2A5              ;;TODOCreatePlanet:           call    ResetSBnKData
 217+ C2A5              ;;TODO                        ld      a,(DisplayTekLevel)
 218+ C2A5              ;;TODO                        and     $00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 219+ C2A5              ;;TODO                        or      $10000000
 220+ C2A5              ;;TODO                        ld      (SBnKShipType),a
 221+ C2A5              ;;TODO                        xor     a
 222+ C2A5              ;;TODO                        ld      (SBnKaiatkecm),a
 223+ C2A5              ;;TODO                        MaxUnivPitchAndRoll
 224+ C2A5              ;;TODO                        ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 225+ C2A5              ;;TODO                        and     %00000011               ; .
 226+ C2A5              ;;TODO                        adc     3                       ; .
 227+ C2A5              ;;TODO                        ld      (SBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
 228+ C2A5              ;;TODO                        rr      a
 229+ C2A5              ;;TODO                        ld      (PlanetXsgn),a
 230+ C2A5              ;;TODO                        ld      (PlanetYsgn),a
 231+ C2A5              ;;TODO                        ret
 232+ C2A5
 233+ C2A5
 234+ C2A5                                 ;     include "./Maths/ADDHLDESignBC.asm"
 235+ C2A5
 236+ C2A5 7C           SunADDHLDESignedv3:     ld      a,h
 237+ C2A6 E6 80                                and     SignOnly8Bit
 238+ C2A8 47                                   ld      b,a                         ;save sign bit in b
 239+ C2A9 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 240+ C2AA                                      JumpIfNegative .SunADDHLDEOppSGN    ;Signs are opposite there fore we can subtract to get difference
 240+ C2AA FA C5 C2    >                        jp		m, .SunADDHLDEOppSGN
 241+ C2AD 78           .SunADDHLDESameSigns:   ld      a,b
 242+ C2AE B2                                   or      d
 243+ C2AF                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 243+ C2AF FA B7 C2    >                        jp		m, .SunADDHLDESameNeg
 244+ C2B2                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 244+ C2B2 FA B7 C2    >                        jp		m, .SunADDHLDESameNeg
 245+ C2B5 19                                   add     hl,de
 246+ C2B6 C9                                   ret
 247+ C2B7 7C           .SunADDHLDESameNeg:     ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 248+ C2B8 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 249+ C2BA 67                                   ld      h,a
 250+ C2BB 7A                                   ld      a,d
 251+ C2BC E6 7F                                and     SignMask8Bit
 252+ C2BE 57                                   ld      d,a
 253+ C2BF 19                                   add     hl,de
 254+ C2C0 3E 80                                ld      a,SignOnly8Bit
 255+ C2C2 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 256+ C2C3 67                                   ld      h,a
 257+ C2C4 C9                                   ret
 258+ C2C5 7C           .SunADDHLDEOppSGN:      ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 259+ C2C6 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 260+ C2C8 67                                   ld      h,a
 261+ C2C9 7A                                   ld      a,d
 262+ C2CA E6 7F                                and     SignMask8Bit
 263+ C2CC 57                                   ld      d,a
 264+ C2CD B7                                   or      a
 265+ C2CE ED 52                                sbc     hl,de
 266+ C2D0 38 04                                jr      c,.SunADDHLDEOppInvert
 267+ C2D2 78           .SunADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 268+ C2D3 B4                                   or      h
 269+ C2D4 67                                   ld      h,a                         ; set the previou sign value
 270+ C2D5 C9                                   ret
 271+ C2D6              .SunADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 271+ C2D6 AF          >                    xor a
 271+ C2D7 95          >                    sub l
 271+ C2D8 6F          >                    ld l,a
 271+ C2D9 9F          >                    sbc a,a
 271+ C2DA 94          >                    sub h
 271+ C2DB 67          >                    ld h,a
 272+ C2DC 78                                   ld      a,b
 273+ C2DD EE 80                                xor     SignOnly8Bit                ; flip sign bit
 274+ C2DF B4                                   or      h
 275+ C2E0 67                                   ld      h,a                         ; recover sign
 276+ C2E1 C9                                   ret
 277+ C2E2
 278+ C2E2              ; we could cheat, flip the sign of DE and just add but its not very optimised
 279+ C2E2 7C           .SunSUBHLDESignedv3:        ld      a,h
 280+ C2E3 E6 80                                and     SignOnly8Bit
 281+ C2E5 47                                   ld      b,a                         ;save sign bit in b
 282+ C2E6 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 283+ C2E7                                      JumpIfNegative .SunSUBHLDEOppSGN        ;Signs are opposite therefore we can add
 283+ C2E7 FA 15 C3    >                        jp		m, .SunSUBHLDEOppSGN
 284+ C2EA 78           .SunSUBHLDESameSigns:       ld      a,b
 285+ C2EB B2                                   or      d
 286+ C2EC                                      JumpIfNegative .SunSUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 286+ C2EC FA F6 C2    >                        jp		m, .SunSUBHLDESameNeg
 287+ C2EF B7                                   or      a
 288+ C2F0 ED 52                                sbc     hl,de
 289+ C2F2                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 289+ C2F2 FA 09 C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 290+ C2F5 C9                                   ret
 291+ C2F6 7C           .SunSUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 292+ C2F7 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 293+ C2F9 67                                   ld      h,a
 294+ C2FA 7A                                   ld      a,d
 295+ C2FB E6 7F                                and     SignMask8Bit
 296+ C2FD 57                                   ld      d,a
 297+ C2FE B7                                   or      a
 298+ C2FF ED 52                                sbc     hl,de
 299+ C301                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 299+ C301 FA 09 C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 300+ C304 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 301+ C305 F6 80                                or      SignOnly8Bit
 302+ C307 67                                   ld      h,a
 303+ C308 C9                                   ret
 304+ C309              .SunSUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 304+ C309 AF          >                    xor a
 304+ C30A 95          >                    sub l
 304+ C30B 6F          >                    ld l,a
 304+ C30C 9F          >                    sbc a,a
 304+ C30D 94          >                    sub h
 304+ C30E 67          >                    ld h,a
 305+ C30F 78                                   ld      a,b
 306+ C310 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 307+ C312 B4                                   or      h
 308+ C313 67                                   ld      h,a                         ; recover sign
 309+ C314 C9                                   ret
 310+ C315 B7           .SunSUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 311+ C316 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 312+ C317 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 313+ C319 67                                   ld      h,a
 314+ C31A 7A                                   ld      a,d
 315+ C31B E6 7F                                and     SignMask8Bit
 316+ C31D 57                                   ld      d,a
 317+ C31E 19                                   add     hl,de
 318+ C31F 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 319+ C320 B4                                   or      h
 320+ C321 67                                   ld      h,a                         ; set the previou sign value
 321+ C322 C9                                   ret
 322+ C323
 323+ C323
 324+ C323              .SunSBCHLDESigned:      JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 324+ C323 CB 7C       >                        bit 	7,h
 324+ C325 C2 36 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 325+ C328              .SunSBCHLDEhlPos:       JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 325+ C328 CB 7C       >                        bit 	7,h
 325+ C32A C2 36 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 326+ C32D ED 52        .SunSBCHLDEhlPosDePos:  sbc     hl,de                           ; ignore overflow for now will sort later TODO
 327+ C32F C9                                   ret
 328+ C330 CB BA        .SunSBCHLDEhlPosDeNeg:  res     7,d
 329+ C332 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 330+ C333 CB FA                                set     7,d
 331+ C335 C9                                   ret
 332+ C336 CB BC        .SunSBCHLDEhlNeg:       res     7,h
 333+ C338                                      JumpOnBitSet d,7,.SunSBCHLDEhlNegdeNeg
 333+ C338 CB 7A       >                        bit 	7,d
 333+ C33A C2 42 C3    >                        jp      nz,.SunSBCHLDEhlNegdeNeg
 334+ C33D ED 52        .SunSBCHLDEhlNegdePos:  sbc     hl,de                       ; ignore overflow for now will sort later TODO
 335+ C33F CB FC                                set     7,h
 336+ C341 C9                                   ret
 337+ C342 CB BA        .SunSBCHLDEhlNegdeNeg:      res     7,d
 338+ C344 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 339+ C345 CB FA                                set     7,d
 340+ C347 CB FC                                set     7,h
 341+ C349 C9                                   ret
 342+ C34A
 343+ C34A
 344+ C34A                                      include "./Universe/Sun/TransposeSunXX12BySunToSunXX15.asm"
# file opened: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
   1++C34A              TransposeSXX12BySunToSXX15:
   2++C34A 2A 7E C0                             ld		hl,(SBnKXX12xLo)					; get X into HL
   3++C34D 7C                                   ld		a,h			                        ; get XX12 Sign
   4++C34E E6 80                                and		$80									; check sign bit on high byte
   5++C350 47                                   ld		b,a									; and put it in of 12xlo in b
   6++C351                                      ;110921 debugld      h,0
   7++C351 7C                                   ld      a,h
   8++C352 E6 7F                                and     $7F
   9++C354 67                                   ld      h,a
  10++C355                                      ;110921 debugld      h,0
  11++C355 ED 5B 10 C0                          ld		de,(SBnKxlo)						;
  12++C359 3A 12 C0                             ld		a,(SBnKxsgn)						; get Ship Pos (low,high,sign)
  13++C35C E6 80                                and		$80									; make sure we only have bit 7
  14++C35E 4F                                   ld		c,a									; and put sign of unkxsgn c
  15++C35F CD DF 93                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++C362 B4                                   or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++C363 67                                   ld		h,a
  18++C364 22 78 C0                             ld		(SBnKXScaled),hl					; now write it out to XX15 X pos
  19++C367              ; ..................................
  20++C367 2A 80 C0                             ld		hl,(SBnKXX12yLo)					; Repeat above for Y coordinate
  21++C36A 7C                                   ld		a,h
  22++C36B E6 80                                and		$80
  23++C36D 47                                   ld		b,a
  24++C36E                                      ;110921 debugld      h,0
  25++C36E 7C                                   ld      a,h
  26++C36F E6 7F                                and     $7F
  27++C371 67                                   ld      h,a
  28++C372                                      ;110921 debugld      h,0
  29++C372 ED 5B 13 C0                          ld		de,(SBnKylo)
  30++C376 3A 15 C0                             ld		a,(SBnKysgn)
  31++C379 E6 80                                and		$80									; make sure we only have bit 7
  32++C37B 4F                                   ld		c,a
  33++C37C CD DF 93                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++C37F B4                                   or		h									; combine sign in A with H
  35++C380 67                                   ld		h,a
  36++C381 22 7A C0                             ld		(SBnKYScaled),hl
  37++C384              ; ..................................
  38++C384 2A 82 C0                             ld		hl,(SBnKXX12zLo)					; and now repeat for Z cooord
  39++C387 7C                                   ld		a,h
  40++C388 E6 80                                and		$80
  41++C38A 47                                   ld		b,a
  42++C38B                                      ;110921 debugld      h,0
  43++C38B 7C                                   ld      a,h
  44++C38C E6 7F                                and     $7F
  45++C38E 67                                   ld      h,a
  46++C38F                                      ;110921 debugld      h,0
  47++C38F ED 5B 16 C0                          ld		de,(SBnKzlo)
  48++C393 3A 18 C0                             ld		a,(SBnKzsgn)
  49++C396 E6 80                                and		$80									; make sure we only have bit 7
  50++C398 4F                                   ld		c,a
  51++C399 CD DF 93                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++C39C B4                                   or		h									; combine sign in A with H
  53++C39D 67                                   ld		h,a
  54++C39E CB 7C                                bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++C3A0 20 16                                jr		nz,.ClampZto4                        ; result was negative so we need to clamp to 4
  56++C3A2 E6 7F                                and     $7F                                 ; a = value unsigned
  57++C3A4 20 06                                jr      nz,.NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++C3A6 7D                                   ld      a,l                                 ; get low byte now
  59++C3A7                                      JumpIfALTNusng 4,.ClampZto4					; if its < 4 then fix at 4
  59++C3A7 FE 04       >                        cp      4
  59++C3A9 DA B8 C3    >                        jp		c, .ClampZto4
  60++C3AC 22 7C C0     .NoClampZto4:           ld		(SBnKZScaled),hl					; hl = signed calculation and > 4
  61++C3AF 7D                                   ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  62++C3B0 32 BA 83                             ld      (varT),a
  63++C3B3 7C                                   ld		a,h
  64++C3B4 32 9B 83                             ld      (varU),a
  65++C3B7 C9                                   ret
  66++C3B8              ; This is where we limit 4 to a minimum of 4
  67++C3B8 21 04 00     .ClampZto4:             ld		hl,4
  68++C3BB 22 7C C0                             ld		(SBnKZScaled),hl; BODGE FOR NOW
  69++C3BE 7D                                   ld		a,l
  70++C3BF 32 BA 83                             ld      (varT),a                            ;                                                                           ;;;
  71++C3C2 7C                                   ld		a,h
  72++C3C3 32 9B 83                             ld      (varU),a 						; compatibility for now
  73++C3C6 C9                                   ret
  74++C3C7
# file closed: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
 345+ C3C7
 346+ C3C7
 347+ C3C7 ED 4B 7C C0  ScaleSunTo8Bit:			ld			bc,(SBnKZScaled)
 348+ C3CB 2A 78 C0                             ld			hl,(SBnKXScaled)
 349+ C3CE ED 5B 7A C0                          ld			de,(SBnKYScaled)
 350+ C3D2 78           .SetABSbc:              ld			a,b
 351+ C3D3 DD 67                                ld			ixh,a
 352+ C3D5 E6 7F                                and			SignMask8Bit
 353+ C3D7 47                                   ld			b,a									; bc = ABS bc
 354+ C3D8 7C           .SetABShl:              ld			a,h
 355+ C3D9 DD 6F                                ld			ixl,a
 356+ C3DB E6 7F                                and			SignMask8Bit
 357+ C3DD 67                                   ld			h,a									; hl = ABS hl
 358+ C3DE 7A           .SetABSde:              ld			a,d
 359+ C3DF FD 67                                ld			iyh,a
 360+ C3E1 E6 7F                                and			SignMask8Bit
 361+ C3E3 57                                   ld			d,a									; de = ABS de
 362+ C3E4 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 363+ C3E5 B4                                   or			h                                   ; XX15+1	\ x hi
 364+ C3E6 B2                                   or			d                                   ; XX15+4	\ y hi
 365+ C3E7 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 366+ C3E9                                      ShiftHLRight1
 366+ C3E9 CB 3C       >			   srl h
 366+ C3EB CB 1D       >			   rr  l
 367+ C3ED                                      ShiftDERight1
 367+ C3ED CB 3A       >			   srl d
 367+ C3EF CB 1B       >			   rr  e
 368+ C3F1                                      ShiftBCRight1
 368+ C3F1 CB 38       >			   srl b
 368+ C3F3 CB 19       >			   rr  c
 369+ C3F5 C3 E4 C3                             jp          .ScaleNodeTo8BitLoop
 370+ C3F8              ; now we have scaled values we have to deal with sign
 371+ C3F8 DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 372+ C3FA E6 80                                and			SignOnly8Bit
 373+ C3FC B0                                   or			b
 374+ C3FD 47                                   ld			b,a
 375+ C3FE DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 376+ C400 E6 80                                and			SignOnly8Bit
 377+ C402 B4                                   or			h
 378+ C403 67                                   ld			h,a
 379+ C404 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 380+ C406 E6 80                                and			SignOnly8Bit
 381+ C408 B2                                   or			d
 382+ C409 57                                   ld			d,a
 383+ C40A ED 43 7C C0  .SignsDoneSaveResult:	ld			(SBnKZScaled),bc
 384+ C40E 22 78 C0                             ld			(SBnKXScaled),hl
 385+ C411 ED 53 7A C0                          ld			(SBnKYScaled),de
 386+ C415 78                                   ld			a,b
 387+ C416 32 9B 83                             ld			(varU),a
 388+ C419 79                                   ld			a,c
 389+ C41A 32 BA 83                             ld			(varT),a
 390+ C41D C9                                   ret
 391+ C41E
 392+ C41E              ;--------------------------------------------------------------------------------------------------------
 393+ C41E              ;;;;X = normal scale
 394+ C41E              ;;;;ZtempHi = zhi
 395+ C41E              ;;;;......................................................
 396+ C41E              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 397+ C41E              ;;;;  Loop                                              ::LL90
 398+ C41E              ;;;;     inc X
 399+ C41E              ;;;;     divide X, Y & ZtempHiLo by 2
 400+ C41E              ;;;;  Until ZtempHi = 0
 401+ C41E              ;;;;......................................................
 402+ C41E              ;-LL21---------------------------------------------------------------------------------------------------
 403+ C41E              ;                        include "./Universe/NormaliseTransMat.asm"
 404+ C41E              ;-LL91---------------------------------------------------------------------------------------------------
 405+ C41E
 406+ C41E              ; Now we have
 407+ C41E              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 408+ C41E              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 409+ C41E              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 410+ C41E              ;
 411+ C41E              ;--------------------------------------------------------------------------------------------------------
 412+ C41E              ;--------------------------------------------------------------------------------------------------------
 413+ C41E              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 414+ C41E              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 415+ C41E              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 416+ C41E              ; Returns
 417+ C41E              ;
 418+ C41E              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 419+ C41E              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 420+ C41E              ;
 421+ C41E              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 422+ C41E              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 423+ C41E              ;
 424+ C41E              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 425+ C41E              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 426+ C41E
 427+ C41E
 428+ C41E               ; TESTEDOK
 429+ C41E              SXX12DotOneRow:
 430+ C41E              SXX12CalcX:              N0equN1byN2div256 varT, (hl), (SBnKXScaled)       ; T = (hl) * regSunXX15fx /256
 430+ C41E 3A 78 C0    >                        ld      a,(SBnKXScaled)                        ;
 430+ C421 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 430+ C422 7E          >                        ld      a,(hl)                        ; A = XX16 element
 430+ C423 57          >                        ld      d,a
 430+ C424 ED 30       >                        mul
 430+ C426 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 430+ C427 32 BA 83    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 431+ C42A 23                                   inc     hl                                  ; move to sign byte
 432+ C42B              SXX12CalcXSign:          AequN1xorN2 SBnKXScaledSign,(hl)             ;
 432+ C42B 3A 79 C0    >                        ld      a,(SBnKXScaledSign)
 432+ C42E AE          >                        xor     (hl)
 433+ C42F 32 9E 83                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 434+ C432 23                                   inc     hl
 435+ C433              SXX12CalcY:              N0equN1byN2div256 varQ, (hl),(SBnKYScaled)       ; Q = XX16 * SunXX15 /256 using varQ to hold regSunXX15fx
 435+ C433 3A 7A C0    >                        ld      a,(SBnKYScaled)                        ;
 435+ C436 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 435+ C437 7E          >                        ld      a,(hl)                        ; A = XX16 element
 435+ C438 57          >                        ld      d,a
 435+ C439 ED 30       >                        mul
 435+ C43B 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 435+ C43C 32 9C 83    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 436+ C43F                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 436+ C43F 3A BA 83    >                        ld       a,(varT)
 436+ C442 32 9D 83    >                        ld       (varR),a
 437+ C445 23                                   inc     hl
 438+ C446                                      AequN1xorN2 SBnKYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 438+ C446 3A 7B C0    >                        ld      a,(SBnKYScaledSign)
 438+ C449 AE          >                        xor     (hl)
 439+ C44A              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 440+ C44A E5           SSTequSRplusAQ           push    hl
 441+ C44B CD 76 9D                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 442+ C44E E1                                   pop     hl
 443+ C44F 32 BA 83                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 444+ C452 23                                   inc     hl
 445+ C453              SXX12CalcZ:              N0equN1byN2div256 varQ,(hl),(SBnKZScaled)       ; Q = |sidev_z| * z_lo / 256
 445+ C453 3A 7C C0    >                        ld      a,(SBnKZScaled)                        ;
 445+ C456 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 445+ C457 7E          >                        ld      a,(hl)                        ; A = XX16 element
 445+ C458 57          >                        ld      d,a
 445+ C459 ED 30       >                        mul
 445+ C45B 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 445+ C45C 32 9C 83    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 446+ C45F                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 446+ C45F 3A BA 83    >                        ld       a,(varT)
 446+ C462 32 9D 83    >                        ld       (varR),a
 447+ C465 23                                   inc     hl
 448+ C466                                      AequN1xorN2 SBnKZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 448+ C466 3A 7D C0    >                        ld      a,(SBnKZScaledSign)
 448+ C469 AE          >                        xor     (hl)
 449+ C46A              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 450+ C46A CD 76 9D                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 451+ C46D              ; Now we exit with A = result S = Sign
 452+ C46D C9                                   ret
 453+ C46E
 454+ C46E
 455+ C46E
 456+ C46E              ;--------------------------------------------------------------------------------------------------------
 457+ C46E                                      include "./Universe/Sun/CopySunXX12ScaledToSunXX18.asm"
# file opened: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
   1++C46E              CopySXX12ScaledToSXX18:
   2++C46E              CopyResultToSDrawCam:
   3++C46E                      ldCopyByte SXX12         ,SXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C46E 3A 7E C0    >                        ld       a,(SXX12)
   3++C471 32 6C C0    >                        ld       (SXX18),a
   4++C474                      ldCopyByte SXX12+1       ,SXX18+2           ; XX12+1 => XX18+2
   4++C474 3A 7F C0    >                        ld       a,(SXX12+1)
   4++C477 32 6E C0    >                        ld       (SXX18+2),a
   5++C47A                      ldCopyByte SXX12+2       ,SXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C47A 3A 80 C0    >                        ld       a,(SXX12+2)
   5++C47D 32 6F C0    >                        ld       (SXX18+3),a
   6++C480                      ldCopyByte SXX12+3       ,SXX18+5           ; XX12+3 => XX18+5
   6++C480 3A 81 C0    >                        ld       a,(SXX12+3)
   6++C483 32 71 C0    >                        ld       (SXX18+5),a
   7++C486                      ldCopyByte SXX12+4       ,SXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C486 3A 82 C0    >                        ld       a,(SXX12+4)
   7++C489 32 72 C0    >                        ld       (SXX18+6),a
   8++C48C                      ldCopyByte SXX12+5       ,SXX18+8           ; XX12+5 => XX18+8
   8++C48C 3A 83 C0    >                        ld       a,(SXX12+5)
   8++C48F 32 74 C0    >                        ld       (SXX18+8),a
   9++C492 C9                   ret
  10++C493
# file closed: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
 458+ C493              ;                        include "./Variables/CopySunXX12toSunXX15.asm"
 459+ C493              ;                       include "./Variables/CopySunXX18toSunXX15.asm"
 460+ C493              ;                       include "./Variables/CopySunXX18ScaledToSunXX15.asm"
 461+ C493              ;                       include "./Variables/CopySunXX12ToScaled.asm"
 462+ C493              ;--------------------------------------------------------------------------------------------------------
 463+ C493              ;                        include "./Maths/Utilities/DotProductXX12SunXX15.asm"
 464+ C493              ;--------------------------------------------------------------------------------------------------------
 465+ C493
 466+ C493 DD 25        ScaleDownSXX15byIXH:    dec     ixh
 467+ C495 F8                                   ret     m
 468+ C496 21 78 C0                             ld      hl,SBnKXScaled
 469+ C499 CB 3E                                srl     (hl)                        ; SunXX15  \ xnormal lo/2 \ LL93+3 \ counter X
 470+ C49B 23                                   inc     hl                          ; looking at SunXX15 x sign now
 471+ C49C 23                                   inc     hl                          ; looking at SunXX15 y Lo now
 472+ C49D CB 3E                                srl     (hl)                        ; SunXX15+2    \ ynormal lo/2
 473+ C49F 23                                   inc     hl                          ; looking at SunXX15 y sign now
 474+ C4A0 23                                   inc     hl                          ; looking at SunXX15 z Lo now
 475+ C4A1 CB 3E                                srl     (hl)
 476+ C4A3 C3 93 C4                             jp      ScaleDownSXX15byIXH
 477+ C4A6 C9                                   ret
 478+ C4A7
 479+ C4A7 21 6C C0     DivideSXX18By2:         ld      hl,SBnKDrawCam0xLo
 480+ C4AA CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 481+ C4AC 23                                   inc     hl                          ; looking at XX18 x sign now
 482+ C4AD 23                                   inc     hl                          ; looking at XX18 y Lo now
 483+ C4AE CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 484+ C4B0 23                                   inc     hl                          ; looking at XX18 y sign now
 485+ C4B1 23                                   inc     hl                          ; looking at XX18 z Lo now
 486+ C4B2 CB 3E                                srl     (hl)
 487+ C4B4 C9                                   ret
 488+ C4B5
 489+ C4B5              ; ......................................................                                                         ;;;
 490+ C4B5
 491+ C4B5
 492+ C4B5
 493+ C4B5
 494+ C4B5              ; Pitch and roll are 2 phases
 495+ C4B5              ; 1 - we apply our pitch and roll to the ship position
 496+ C4B5              ;       x -> x + alpha * (y - alpha * x)
 497+ C4B5              ;       y -> y - alpha * x - beta * z
 498+ C4B5              ;       z -> z + beta * (y - alpha * x - beta * z)
 499+ C4B5              ; which can be simplified as:
 500+ C4B5              ;       1. K2 = y - alpha * x
 501+ C4B5              ;       2. z = z + beta * K2
 502+ C4B5              ;       3. y = K2 - beta * z
 503+ C4B5              ;       4. x = x + alpha * y
 504+ C4B5              ; 2 - we apply our patch and roll to the ship orientation
 505+ C4B5              ;      Roll calculations:
 506+ C4B5              ;
 507+ C4B5              ;        nosev_y = nosev_y - alpha * nosev_x_hi
 508+ C4B5              ;        nosev_x = nosev_x + alpha * nosev_y_hi
 509+ C4B5              ;      Pitch calculations:
 510+ C4B5              ;
 511+ C4B5              ;        nosev_y = nosev_y - beta * nosev_z_hi
 512+ C4B5              ;        nosev_z = nosev_z + beta * nosev_y_hi
 513+ C4B5
 514+ C4B5
 515+ C4B5                          INCLUDE "./Universe/Sun/SunApplyMyRollAndPitch.asm"
# file opened: ././Universe/Sun/SunApplyMyRollAndPitch.asm
   1++C4B5
   2++C4B5              ; Full version
   3++C4B5              ; 1. K2 = y - alpha * x
   4++C4B5              ; 2. z = z + beta * K2
   5++C4B5              ; 3. y = K2 - beta * z
   6++C4B5              ; 4. x = x + alpha * y
   7++C4B5
   8++C4B5
   9++C4B5
  10++C4B5              ; SunrollWork holds Alpha intermidate results
  11++C4B5              ;  1. K2 = y - alpha * x
  12++C4B5              ;  2. z = z + beta * K2
  13++C4B5              ;  3. y = K2 - beta * z
  14++C4B5              ;  4. x = x + alpha * y
  15++C4B5              ;.... or
  16++C4B5              ;  2. z = z + (beta * (y - alpha * x))
  17++C4B5              ;  3. y = (y - alpha * x) - (beta * z)
  18++C4B5              ;  4. x = x + (alpha * y)
  19++C4B5
  20++C4B5
  21++C4B5              ;----------------------------------------------------------------------------------------------------------------------------------
  22++C4B5              ; Sun version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
  23++C4B5              ; Need to write a test routine for roll and pitchs
  24++C4B5 00 00 00 00  SunAlphaMulX            DS 4
  25++C4B9 00 00 00 00  SunAlphaMulY            DS 4
  26++C4BD 00 00 00 00  SunBetaMulZ             DS 4
  27++C4C1 00 00 00     SunK2                   DS 3
  28++C4C4
  29++C4C4 3A B2 82     SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  30++C4C7 21 A5 82                             ld      hl,BETA
  31++C4CA B6                                   or      (hl)
  32++C4CB E6 7F                                and     SignMask8Bit
  33++C4CD CA 7E C5                             jp      z,.NoRotation
  34++C4D0 3A B2 82     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
  35++C4D3 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
  36++C4D5 57                                   ld      d,a                         ; .
  37++C4D6 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  38++C4D9 5F                                   ld      e,a                         ; .
  39++C4DA 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  40++C4DD CD E1 96                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  41++C4E0              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
  42++C4E0                                      ;ld      (SunAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
  43++C4E0 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  44++C4E1 32 B6 C4                             ld      (SunAlphaMulX+1),a
  45++C4E4 7B                                   ld      a,e
  46++C4E5 32 B7 C4                             ld      (SunAlphaMulX+2),a
  47++C4E8 7A                                   ld      a,d
  48++C4E9 32 B8 C4                             ld      (SunAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
  49++C4EC ED 5B 14 C0  .CalcK2:                ld      de,(SBnKyhi)                ; DEL = Y
  50++C4F0 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  51++C4F3 6F                                   ld      l,a                         ; .
  52++C4F4 ED 4B B7 C4                          ld      bc,(SunAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
  53++C4F8 3A B6 C4                             ld      a,(SunAlphaMulX+1)          ; Deal with sign in byte 4
  54++C4FB 67                                   ld      h,a                         ; .
  55++C4FC CD 5D 94                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
  56++C4FF 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
  57++C500 32 C1 C4                             ld      (SunK2),a                   ; we also need to save l for teh beta k2 calc
  58++C503 ED 53 C2 C4                          ld      (SunK2+1),de                ;
  59++C507 EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
  60++C508 5F                                   ld      e,a                         ; .
  61++C509 3A A5 82                             ld      a,(BETA)                    ; D = BETA
  62++C50C 57                                   ld      d,a                         ; .
  63++C50D CD E1 96                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
  64++C510 ED 4B 17 C0  .CalcZ:                 ld      bc,(SBnKzhi)                ; BCH = z
  65++C514 3A 16 C0                             ld      a,(SBnKzlo)                 ;
  66++C517 67                                   ld      h,a                         ;
  67++C518 CD 5D 94                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
  68++C51B ED 53 17 C0                          ld      (SBnKzhi),de                ; z = resuklt
  69++C51F 7D                                   ld      a,l                         ; .
  70++C520 32 16 C0                             ld      (SBnKzlo),a                 ; .
  71++C523 3A A5 82     .CalcBetaZ:             ld      a,(BETA)
  72++C526 EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
  73++C528 57                                   ld      d,a                         ; .
  74++C529 3A 16 C0                             ld      a,(SBnKzlo)                 ; HLE = z
  75++C52C 5F                                   ld      e,a                         ; .
  76++C52D 2A 17 C0                             ld      hl,(SBnKzhi)                ; .
  77++C530 CD E1 96                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
  78++C533              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
  79++C533                                      ;ld      (SunBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
  80++C533                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
  81++C533                                      ;ld      (SunBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  82++C533                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  83++C533                                      ;ld      (SunBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  84++C533                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  85++C533                                      ;ld      (SunBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
  86++C533 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
  87++C535 65                                   ld      h,l
  88++C536 ED 5B C2 C4                          ld      de,(SunK2+1)                ; DEL = k2
  89++C53A 3A C1 C4                             ld      a,(SunK2)
  90++C53D 6F                                   ld      l,a
  91++C53E CD 5D 94                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
  92++C541 ED 53 14 C0                          ld      (SBnKyhi),de                ; y = DEL = K2 - Beta * Z
  93++C545 7D                                   ld      a,l                         ; .
  94++C546 32 13 C0                             ld      (SBnKylo),a                 ; .
  95++C549 3A B2 82     .CalcAlphaMulY:         ld      a,(ALPHA)
  96++C54C 57                                   ld      d,a                         ; d = alpha (Q value)
  97++C54D 3A 13 C0                             ld      a,(SBnKylo)                 ; HLE = x sgn, hi, lo
  98++C550 5F                                   ld      e,a                         ; .
  99++C551 2A 14 C0                             ld      hl,(SBnKyhi)                ; .
 100++C554 CD E1 96                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
 101++C557 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
 102++C558 32 B9 C4                             ld      (SunAlphaMulY),a            ; save sign from result, ELC holds actual result
 103++C55B 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
 104++C55C 32 BA C4                             ld      (SunAlphaMulY+1),a
 105++C55F 7B                                   ld      a,e
 106++C560 32 BB C4                             ld      (SunAlphaMulY+2),a
 107++C563 7A                                   ld      a,d
 108++C564 32 BC C4                             ld      (SunAlphaMulY+3),a
 109++C567 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
 110++C569 65                                   ld      h,l                         ; .
 111++C56A ED 5B 11 C0                          ld      de,(SBnKxhi)                ; DEL = Y
 112++C56E 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
 113++C571 6F                                   ld      l,a                         ; .
 114++C572 CD 5D 94                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
 115++C575 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
 116++C576 63                                   ld      h,e                         ;
 117++C577 32 12 C0     .CopyResultTo2:         ld      (SBnKxlo+2),a               ; .
 118++C57A 22 10 C0                             ld      (SBnKxlo) ,hl               ; .
 119++C57D C9                                   ret
 120++C57E 3A 98 83     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 121++C581                                      ReturnIfAIsZero
 121++C581 A7          >                        and     a
 121++C582 C8          >                        ret     z
 122++C583 0E 00                                ld      c,0                         ;
 123++C585 67                                   ld      h,a                         ;
 124++C586 06 80                                ld      b,$80                       ;
 125++C588 ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 126++C58C 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 127++C58F 6F                                   ld      l,a                         ; .
 128++C590 CD 5D 94                             call    AddBCHtoDELsigned           ; update speed
 129++C593 ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 130++C597 7D                                   ld      a,l
 131++C598 32 16 C0                             ld      (SBnKzlo),a                ;
 132++C59B C9                                   ret
 133++C59C              ;
 134++C59C              ;SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
 135++C59C              ;                        ld      hl,BETA
 136++C59C              ;                        or      (hl)
 137++C59C              ;                        and     SignMask8Bit
 138++C59C              ;                        ret     z
 139++C59C              ;.CalcZ:                 ;break
 140++C59C              ;                        ld      a,(ALPHA)                   ; get roll magnitude
 141++C59C              ;                        xor     SignOnly8Bit                ; get Q = -alpha
 142++C59C              ;                        ld      d,a                         ; d reg represents Q (abount to roll)
 143++C59C              ;                        ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
 144++C59C              ;                        ld      e,a                         ;
 145++C59C              ;                        ld      hl,(SBnKxhi)                ;
 146++C59C              ;                        call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256
 147++C59C              ;                        ld      a,d
 148++C59C              ;                        ld      (SunRollResultp4),a         ; save D (I guess we need the sign?)
 149++C59C              ;.CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo
 150++C59C              ;                        ld      h,a
 151++C59C              ;                        ld      bc,(SBnKyhi)
 152++C59C              ;                        call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256)
 153++C59C              ;.SaveResult1:           ld      a,l                         ; SunPitchWork = DEL
 154++C59C              ;                        ;ld      (SunRollResult), a          ; SunPitchWork + 0 = L
 155++C59C              ;                        ex      de,hl                       ; SunPitchWork + 1 = E
 156++C59C              ;.CopyResultTo2:         ld      (SunRollResult+1),a         ; SunPitchWork + 2 = D
 157++C59C              ;                        ld      (SunRollResult+1) ,hl       ; Copy K to K2 (y - alpha * x)
 158++C59C              ;                        ;ld      (SunRollResult2+1),hl       ; also HLA = result
 159++C59C              ;                        ld      a,(SunRollResult)           ; .
 160++C59C              ;                        ;ld      (SunRollResult2),a          ; .
 161++C59C              ;.CalcY:                 ld      e,a                         ; so now HLE = result
 162++C59C              ;                        ld      a,(BETA)                    ; get pitch
 163++C59C              ;                        ld      d,a                         ; now D = BETA
 164++C59C              ;                        call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta
 165++C59C              ;                        ld      bc,(SBnKzhi)                ; BCH = z
 166++C59C              ;                        ld      a,(SBnKzlo)                 ;
 167++C59C              ;                        ld      h,a                         ;
 168++C59C              ;                        call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
 169++C59C              ;.SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
 170++C59C              ;                        ld      (SBnKzhi),de                ; .
 171++C59C              ;                        ld      a,l                         ; .
 172++C59C              ;                        ld      (SunZResult),a              ; .
 173++C59C              ;                        ld      (SBnKzlo),a                 ; .
 174++C59C              ;.CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
 175++C59C              ;                        ld      e,l                         ;
 176++C59C              ;                        ld      a,(BETA)                    ; d = - BETA
 177++C59C              ;                        ld      d,a                         ;
 178++C59C              ;                        xor     SignOnly8Bit                ;
 179++C59C              ;                        call    mulHLEbyDSigned             ; DELC = z * - BETA
 180++C59C              ;                        ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
 181++C59C              ;                        ld      a,(SunRollResult)           ;
 182++C59C              ;                        ld      h,a                         ;
 183++C59C              ;                        call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA)
 184++C59C              ;                        ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
 185++C59C              ;                        ld      a,l                         ;
 186++C59C              ;                        ld      (SBnKylo),a                 ;
 187++C59C              ;.CalcX:                 ex      de,hl                       ; HLE = DEL = Y
 188++C59C              ;                        ld      e,l                         ;
 189++C59C              ;                        ld      a,(ALPHA)
 190++C59C              ;                        ld      d,a                         ; D = alpha
 191++C59C              ;                        call    mulHLEbyDSigned             ; DELC = Y * alpha
 192++C59C              ;                        ld      bc,(SBnKxhi)                ; BCH = x
 193++C59C              ;                        ld      a,(SBnKxlo)                 ;
 194++C59C              ;                        ld      h,a                         ;
 195++C59C              ;                        call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
 196++C59C              ;                        ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
 197++C59C              ;                        ld      a,h                         ;
 198++C59C              ;                        ld      (SBnKxlo),a                 ;
 199++C59C              ;                        ret
 200++C59C              ;
# file closed: ././Universe/Sun/SunApplyMyRollAndPitch.asm
 516+ C59C              ;            INCLUDE "./Universe/SunApplyShipRollAndPitch.asm"
 517+ C59C
 518+ C59C 00           SunOnScreen             DB 0
 519+ C59D 00 00        cLineArrayPtr            DW 0
 520+ C59F 00           LineCount               DB 0
 521+ C5A0 00           RaggedSize              DB 0
 522+ C5A1 00           MinYOffset              DB 0
 523+ C5A2 00           MaxYOffSet              DB 0
 524+ C5A3 00 00        SunScrnX                DW  0       ; signed
 525+ C5A5 00 00        SunScrnY                DW  0       ; signed
 526+ C5A7 00           SunRadius               DB  0       ; unsigned
 527+ C5A8              ; draw circle
 528+ C5A8
 529+ C5A8              ;
 530+ C5A8              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 531+ C5A8
 532+ C5A8 00 00 00 00  SunVarK                 DS 4
 533+ C5AC 00 00 00     SunVarP                 DS 3
 534+ C5AF 00           SunVarQ                 DS 1
 535+ C5B0 00           SunVarR                 DS 1
 536+ C5B1 00           SunVarS                 DS 1
 537+ C5B2 00           SunVarT                 DS 1
 538+ C5B3
 539+ C5B3              ; Optimisation
 540+ C5B3              ; if a <> 0
 541+ C5B3              ;       divide AH by CD
 542+ C5B3              ; if h <> 0
 543+ C5B3              ;      if c <> 0 return 0
 544+ C5B3              ;      else
 545+ C5B3              ;        divide HL by DE
 546+ C5B3              ; if l <>0
 547+ C5B3              ;      if c or d <> 0 return 0
 548+ C5B3              ;      else
 549+ C5B3              ;        divide l by e
 550+ C5B3              ;
 551+ C5B3 47           SunAHLequAHLDivCDE:     ld      b,a                         ; save a reg
 552+ C5B4 79                                   ld      a,c                         ; check for divide by zero
 553+ C5B5 B2                                   or      d                           ; .
 554+ C5B6 B3                                   or      e                           ; .
 555+ C5B7                                      JumpIfZero      .divideByZero       ; .
 555+ C5B7 CA D0 C5    >                        jp	z,.divideByZero
 556+ C5BA 78                                   ld      a,b                         ; get a back
 557+ C5BB                                      JumpIfAIsNotZero    .divideAHLbyCDE
 557+ C5BB A7          >                        and     a
 557+ C5BC C2 D7 C5    >                        jp	    nz,.divideAHLbyCDE
 558+ C5BF 7C           .AIsZero:               ld      a,h
 559+ C5C0                                      JumpIfAIsNotZero    .divideHLbyDE
 559+ C5C0 A7          >                        and     a
 559+ C5C1 C2 DE C5    >                        jp	    nz,.divideHLbyDE
 560+ C5C4 7D           .HIsZero:               ld      a,l
 561+ C5C5                                      JumpIfAIsNotZero    .divideLbyE
 561+ C5C5 A7          >                        and     a
 561+ C5C6 C2 ED C5    >                        jp	    nz,.divideLbyE
 562+ C5C9              .resultIsZero:          ZeroA
 562+ C5C9 AF          >                        xor a
 563+ C5CA 67                                   ld      h,a                        ; result is zero so set hlde
 564+ C5CB 6F                                   ld      l,a                        ; result is zero so set hlde
 565+ C5CC 54 5D                                ld      de,hl
 566+ C5CE                                      ClearCarryFlag
 566+ C5CE B7          >                        or a
 567+ C5CF C9                                   ret
 568+ C5D0 3E FF        .divideByZero:          ld      a,$FF
 569+ C5D2 67                                   ld      h,a
 570+ C5D3 6F                                   ld      l,a
 571+ C5D4 54 5D                                ld      de,hl
 572+ C5D6                                      SetCarryFlag
 572+ C5D6 37          >                        scf
 573+ C5D7              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 574+ C5D7              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 575+ C5D7 CD 54 95     .divideAHLbyCDE:        call    Div24by24
 576+ C5DA EB                                   ex      hl,de                         ; ahl is result
 577+ C5DB 79                                   ld      a,c                           ; ahl is result
 578+ C5DC                                      ClearCarryFlag
 578+ C5DC B7          >                        or a
 579+ C5DD
 580+ C5DD C9                                   ret
 581+ C5DE              ; AHL = 0hl/0de as A is zero
 582+ C5DE 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 583+ C5DF                                      JumpIfAIsNotZero   .resultIsZero
 583+ C5DF A7          >                        and     a
 583+ C5E0 C2 C9 C5    >                        jp	    nz,.resultIsZero
 584+ C5E3 44 4D                                ld      bc,hl
 585+ C5E5 CD B0 99                             call    BC_Div_DE                   ; BC = HL/DE
 586+ C5E8 60 69                                ld      hl,bc
 587+ C5EA                                      ZeroA                               ; so we can set A to Zero
 587+ C5EA AF          >                        xor a
 588+ C5EB                                      ClearCarryFlag
 588+ C5EB B7          >                        or a
 589+ C5EC C9                                   ret
 590+ C5ED              ; AHL = 00l/00e as A and H are zero
 591+ C5ED 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 592+ C5EE B2                                   or      d
 593+ C5EF                                      JumpIfAIsNotZero   .resultIsZero
 593+ C5EF A7          >                        and     a
 593+ C5F0 C2 C9 C5    >                        jp	    nz,.resultIsZero
 594+ C5F3 4B                                   ld      c,e
 595+ C5F4 5D                                   ld      e,l
 596+ C5F5 CD 72 99                             call    E_Div_C
 597+ C5F8 6F                                   ld      l,a
 598+ C5F9                                      ZeroA
 598+ C5F9 AF          >                        xor a
 599+ C5FA 67                                   ld      h,a
 600+ C5FB                                      ClearCarryFlag
 600+ C5FB B7          >                        or a
 601+ C5FC C9                                   ret
 602+ C5FD
 603+ C5FD
 604+ C5FD              ; Needs tuning for registers vs memroy
 605+ C5FD 22 AC C5     SunKEquAHLDivCDE:       ld      (SunVarP),hl
 606+ C600 32 AE C5                             ld      (SunVarP+2),a
 607+ C603 ED 53 AF C5                          ld      (SunVarQ),de
 608+ C607 79                                   ld      a,c
 609+ C608 32 B1 C5                             ld      (SunVarS),a
 610+ C60B 3A AC C5     SunDivD3B:              ld      a,(SunVarP)                 ; Ensure P is at least 1
 611+ C60E F6 01                                or      1
 612+ C610 32 AC C5                             ld      (SunVarP),a
 613+ C613 3A AE C5                             ld      a,(SunVarP+2)               ; T = Sign xor Sign
 614+ C616 21 B1 C5                             ld      hl,SunVarS
 615+ C619 AE                                   xor     (hl)
 616+ C61A E6 80                                and     SignOnly8Bit
 617+ C61C 32 B2 C5                             ld      (SunVarT),a
 618+ C61F 06 00                                ld      b,0                         ; b = y counter
 619+ C621 3A AE C5                             ld      a,(SunVarP+2)               ; a = abs high byte of p
 620+ C624 E6 7F                                and     SignMask8Bit                ; .
 621+ C626 2A AC C5                             ld      hl,(SunVarP)                ; shift P left
 622+ C629              .SunDVL9:               JumpIfAGTENusng   64, .SunDV14      ; if high p > 64 then go to DV14
 622+ C629 FE 40       >                        cp     64
 622+ C62B D2 38 C6    >                        jp		nc,.SunDV14
 623+ C62E                                      ShiftHLLeft1                        ;
 623+ C62E CB 25       >			   sla l
 623+ C630 CB 14       >			   rl  h
 624+ C632 CB 17                                rl      a                           ;
 625+ C634 04                                   inc     b                           ; increase shift count
 626+ C635 C3 29 C6                             jp      .SunDVL9
 627+ C638 22 AC C5     .SunDV14:               ld      (SunVarP),hl                ; save off var P
 628+ C63B 32 AE C5                             ld      (SunVarP+2),a
 629+ C63E 3A B1 C5                             ld      a,(SunVarS)                 ; a= ABS varS
 630+ C641 E6 7F                                and     SignMask8Bit
 631+ C643 2A AF C5                             ld      hl,(SunVarQ)                ; HL = vars Q & R
 632+ C646 05           .SunDVL6:               dec     b                           ; reduce b counter by 1
 633+ C647                                      ShiftHLLeft1                        ; varQRA  shift left
 633+ C647 CB 25       >			   sla l
 633+ C649 CB 14       >			   rl  h
 634+ C64B CB 17                                rl      a                           ;
 635+ C64D F2 46 C6                             jp      p, .SunDVL6                 ; keep shifting until bit 7 of a is set
 636+ C650 22 AF C5                             ld      (SunVarQ),hl                ; save QR
 637+ C653 32 B1 C5     .SunDV9:                ld      (SunVarS),a                 ; save S
 638+ C656                                      ;ld      a,h
 639+ C656                                      ;ld      (varQ),a
 640+ C656 4F                                   ld      c,a
 641+ C657 3A AE C5                             ld      a,(SunVarP+2)
 642+ C65A C5                                   push    bc                          ; save shift counter in b
 643+ C65B CD 24 99                             call    DIV16Amul256dCUNDOC
 644+ C65E                                      ;call    RequAmul256divQ
 645+ C65E 79                                   ld      a, c
 646+ C65F 32 9D 83                             ld      (varR),a
 647+ C662 C1                                   pop     bc                          ; retrieve shift counter
 648+ C663 21 00 00                             ld      hl,0                        ; set K to 0
 649+ C666 22 A8 C5                             ld      (SunVarK),hl                ; .
 650+ C669 22 AA C5                             ld      (SunVarK+2),hl              ; .
 651+ C66C CB 78                                bit     7,b                         ; is counter positive
 652+ C66E 28 32                                jr      z,.SunDV12                  ; .
 653+ C670 3A 9D 83                             ld      a,(varR)                    ;
 654+ C673 CB 27        .SunDVL8:               sla     a                           ; Shift K by 1 left
 655+ C675 21 A9 C5                             ld      hl,SunVarK+1                ; .
 656+ C678 CB 16                                rl      (hl)                        ; .
 657+ C67A 23                                   inc     hl                          ; .
 658+ C67B CB 16                                rl      (hl)                        ; .
 659+ C67D 23                                   inc     hl                          ; .
 660+ C67E CB 16                                rl      (hl)                        ; .
 661+ C680 04                                   inc     b
 662+ C681 20 F0                                jr      nz,.SunDVL8                 ; loop until K is shifted
 663+ C683 32 A8 C5                             ld      (SunVarK),a
 664+ C686 3A AB C5                             ld      a,(SunVarK+3)
 665+ C689 21 B2 C5                             ld      hl,SunVarT
 666+ C68C B6                                   or      (hl)
 667+ C68D 32 AB C5                             ld      (SunVarK+3),a
 668+ C690 C9                                   ret
 669+ C691 3A 9D 83     .SunDV13:               ld      a,(varR)                    ; when we get here, shift is zero
 670+ C694 32 A8 C5                             ld      (SunVarK),a
 671+ C697 3A AB C5                             ld      a,(SunVarK+3)
 672+ C69A 21 B2 C5                             ld      hl,SunVarT
 673+ C69D B6                                   or      (hl)
 674+ C69E 32 AB C5                             ld      (SunVarK+3),a
 675+ C6A1 C9                                   ret
 676+ C6A2 78           .SunDV12:               ld      a,b
 677+ C6A3 A7                                   and     a
 678+ C6A4 28 EB                                jr      z,.SunDV13
 679+ C6A6 3A 9D 83                             ld      a,(varR)                    ; it probably is already R so need to test
 680+ C6A9 CB 2F        .SunDVL10:              sra     a                           ; Shift K by 1 left
 681+ C6AB 05                                   dec     b
 682+ C6AC 20 FB                                jr      nz,.SunDVL10
 683+ C6AE 32 A8 C5                             ld      (SunVarK),a                 ; as original divide was onyl 8 bits K 1,2,3 don;t matter
 684+ C6B1 3A B2 C5                             ld      a,(SunVarT)
 685+ C6B4 32 AB C5                             ld      (SunVarK+3),a
 686+ C6B7 C9                                   ret
 687+ C6B8
 688+ C6B8
 689+ C6B8
 690+ C6B8 47           SunProcessVertex:       ld      b,a                         ; save sign byte
 691+ C6B9 ED 5B 16 C0  .SunProjectToEye:       ld      de,(SBnKzlo)                ; X Pos = X / Z
 692+ C6BD 3A 18 C0                             ld      a,(SBnKzsgn)                ; CDE = z
 693+ C6C0 FD 67                                ld      iyh,a                       ; save sign
 694+ C6C2                                      ClearSignBitA
 694+ C6C2 E6 7F       >                        and     SignMask8Bit
 695+ C6C4                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 696+ C6C4              ;                        ld      c,a                         ;
 697+ C6C4 5A                                   ld      e,d
 698+ C6C5 57                                   ld      d,a
 699+ C6C6 0E 00                                ld      c,0
 700+ C6C8                                      ; added above to correct positioning as in reality its X/(Z/256)
 701+ C6C8 78                                   ld      a,b                         ; restore sign byte
 702+ C6C9 FD 6F                                ld      iyl,a                       ; save sign
 703+ C6CB                                      ClearSignBitA
 703+ C6CB E6 7F       >                        and     SignMask8Bit
 704+ C6CD CD B3 C5                             call SunAHLequAHLDivCDE             ; AHL = AHL/CDE unsigned
 705+ C6D0              .CheckPosOnScreenX:     JumpIfAIsNotZero .IsOffScreen         ; if A has a value then its way too large regardless of sign
 705+ C6D0 A7          >                        and     a
 705+ C6D1 C2 EE C6    >                        jp	    nz,.IsOffScreen
 706+ C6D4                                      JumpOnLeadSignSet h, .IsOffScreen      ; or bit 7 set of h
 706+ C6D4 7C          >                        ld      a,h
 706+ C6D5 E6 80       >                        and     SignOnly8Bit
 706+ C6D7 C2 EE C6    >                        jp      nz,.IsOffScreen
 707+ C6DA 7C                                   ld      a,h
 708+ C6DB                                      ReturnIfAGTEusng 4                  ; if a > 1024 then its way too large regardless of sign
 708+ C6DB FE 04       >                        cp    4
 708+ C6DD D0          >                        ret	 nc
 709+ C6DE FD 7C                                ld      a,iyh                       ; now deal with the sign
 710+ C6E0 FD AD                                xor     iyl
 711+ C6E2                                      SignBitOnlyA                        ; a= resultant sign
 711+ C6E2 E6 80       >                        and     SignOnly8Bit
 712+ C6E4 28 06                                jr      z,.calculatedVert           ; result is positive so we don't 2's compliment it
 713+ C6E6              .XIsNegative:           NegHL                               ; make 2's c as negative
 713+ C6E6 AF          >                    xor a
 713+ C6E7 95          >                    sub l
 713+ C6E8 6F          >                    ld l,a
 713+ C6E9 9F          >                    sbc a,a
 713+ C6EA 94          >                    sub h
 713+ C6EB 67          >                    ld h,a
 714+ C6EC              .calculatedVert:        ClearCarryFlag
 714+ C6EC B7          >                        or a
 715+ C6ED C9                                   ret
 716+ C6EE 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 717+ C6F1 FD 7C                                ld      a,iyh
 718+ C6F3 FD AD                                xor     iyl
 719+ C6F5                                      SignBitOnlyA
 719+ C6F5 E6 80       >                        and     SignOnly8Bit
 720+ C6F7 28 02                                jr      z,.calculatedOffScreen
 721+ C6F9 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 722+ C6FA 23                                   inc     hl                          ; .
 723+ C6FB              .calculatedOffScreen:   SetCarryFlag
 723+ C6FB 37          >                        scf
 724+ C6FC C9                                   ret
 725+ C6FD
 726+ C6FD
 727+ C6FD              ; .........................................................................................................................
 728+ C6FD              ; we only hit this if z is positive so we can ignore signs
 729+ C6FD ED 4B 16 C0  SunCalculateRadius:     ld      bc,(SBnKzlo)                ; DBC = z position
 730+ C701 3A 18 C0                             ld      a,(SBnKzsgn)                ;
 731+ C704 57                                   ld      d,a                         ;
 732+ C705 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 733+ C708 CD 1D 98                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 734+ C70B B4                                   or      h                           ; if A or H are not 0 then max Radius
 735+ C70C                                      JumpIfAIsZero  .SaveRadius
 735+ C70C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 735+ C70D CA 12 C7    >                        jp	    z, .SaveRadius
 736+ C710 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 737+ C712 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 738+ C713 F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 739+ C715 32 A7 C5                             ld      (SunRadius),a               ; save a copy of radius now for later
 740+ C718 5F                                   ld      e,a                         ; as later code expects it to be in e
 741+ C719 C9                                   ret
 742+ C71A
 743+ C71A              ; Shorter version when sun does not need to be processed to screen
 744+ C71A 3A 12 C0     SunUpdateCompass:       ld      a,(SBnKxsgn)
 745+ C71D 2A 10 C0                             ld      hl,(SBnKxlo)
 746+ C720 CD B8 C6                             call    SunProcessVertex
 747+ C723 22 19 C0                             ld      (SunCompassX),hl
 748+ C726 3A 15 C0                             ld      a,(SBnKysgn)
 749+ C729 2A 13 C0                             ld      hl,(SBnKylo)
 750+ C72C CD B8 C6                             call    SunProcessVertex
 751+ C72F 22 1B C0                             ld      (SunCompassY),hl
 752+ C732 C9                                   ret
 753+ C733
 754+ C733                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 755+ C733 CD C4 C4     SunUpdateAndRender:     call    SunApplyMyRollAndPitch
 756+ C736 3A 18 C0     .CheckDrawable:         ld      a,(SBnKzsgn)
 757+ C739                                      JumpIfAGTENusng 48,  SunUpdateCompass ; at a distance over 48 its too far away
 757+ C739 FE 30       >                        cp     48
 757+ C73B D2 1A C7    >                        jp		nc,SunUpdateCompass
 758+ C73E 21 17 C0                             ld      hl,SBnKzhi                  ; if the two high bytes are zero then its too close
 759+ C741 B6                                   or      (hl)
 760+ C742                                      JumpIfAIsZero       SunUpdateCompass
 760+ C742 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 760+ C743 CA 1A C7    >                        jp	    z, SunUpdateCompass
 761+ C746 3A 12 C0     .calculateX:            ld      a,(SBnKxsgn)
 762+ C749 2A 10 C0                             ld      hl,(SBnKxlo)
 763+ C74C CD B8 C6                             call    SunProcessVertex            ; now returns carry set for failure
 764+ C74F 22 19 C0                             ld      (SunCompassX),hl
 765+ C752 D8                                   ret     c
 766+ C753 1E 80        .calculatedX:           ld      e,ScreenCenterX
 767+ C755 16 00                                ld      d,0
 768+ C757                                      ClearCarryFlag
 768+ C757 B7          >                        or a
 769+ C758 ED 5A                                adc     hl,de
 770+ C75A                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 771+ C75A 22 A3 C5                             ld      (SunScrnX),hl               ; save projected X Position, 2's compliment
 772+ C75D 3A 15 C0     .calculateY:            ld      a,(SBnKysgn)
 773+ C760 2A 13 C0                             ld      hl,(SBnKylo)
 774+ C763 CD B8 C6                             call    SunProcessVertex            ; now returns carry set for failure
 775+ C766 22 1B C0                             ld      (SunCompassY),hl
 776+ C769 D8                                   ret     c
 777+ C76A 1E 60        .calculatedY:           ld      e,ScreenCenterY
 778+ C76C 16 00                                ld      d,0
 779+ C76E EB                                   ex      de,hl
 780+ C76F                                      ClearCarryFlag
 780+ C76F B7          >                        or a
 781+ C770 ED 52                                sbc     hl,de
 782+ C772                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 783+ C772 22 A5 C5                             ld      (SunScrnY),hl               ; save projected Y Position, 2's compliment
 784+ C775              ; .........................................................................................................................
 785+ C775 CD FD C6                             call    SunCalculateRadius
 786+ C778              ; .........................................................................................................................
 787+ C778 2A A3 C5     .CheckIfSunOnScreen:    ld      hl,(SunScrnX)               ; get x pixel position
 788+ C77B FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 789+ C77E 16 00                                ld      d,0                         ; e still holds radius
 790+ C780 7C                                   ld      a,h
 791+ C781                                      JumpOnLeadSignSet   h,.CheckXNegative
 791+ C781 7C          >                        ld      a,h
 791+ C782 E6 80       >                        and     SignOnly8Bit
 791+ C784 C2 9A C7    >                        jp      nz,.CheckXNegative
 792+ C787 7C           .CheckXPositive:        ld      a,h
 793+ C788                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 793+ C788 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 793+ C789 CA A3 C7    >                        jp	    z, .XOnScreen
 794+ C78C 16 00                                ld      d,0                         ; de = radius
 795+ C78E                                      ClearCarryFlag
 795+ C78E B7          >                        or a
 796+ C78F ED 52                                sbc     hl,de
 797+ C791 FA A3 C7                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 798+ C794 7C                                   ld      a,h
 799+ C795                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 799+ C795 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 799+ C796 CA A3 C7    >                        jp	    z, .XOnScreen
 800+ C799 C9                                   ret                                 ; None of the X coordinates are on screen
 801+ C79A 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 802+ C79C                                      ClearCarryFlag
 802+ C79C B7          >                        or a
 803+ C79D ED 5A                                adc     hl,de                       ; so we have hl - de
 804+ C79F F2 A3 C7                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 805+ C7A2 C9                                   ret                                 ; else x is totally off the left side of the screen
 806+ C7A3              ; .........................................................................................................................
 807+ C7A3 2A A5 C5     .XOnScreen:             ld      hl,(SunScrnY)               ; now Check Y coordinate
 808+ C7A6                                      JumpOnLeadSignSet   h,.CheckYNegative
 808+ C7A6 7C          >                        ld      a,h
 808+ C7A7 E6 80       >                        and     SignOnly8Bit
 808+ C7A9 C2 CA C7    >                        jp      nz,.CheckYNegative
 809+ C7AC 7C           .CheckYPositive:        ld      a,h
 810+ C7AD                                      JumpIfAIsNotZero   .PosYCheck2
 810+ C7AD A7          >                        and     a
 810+ C7AE C2 B7 C7    >                        jp	    nz,.PosYCheck2
 811+ C7B1 7D                                   ld      a,l
 812+ C7B2 E6 80                                and     %10000000
 813+ C7B4 CA D3 C7                             jp      z,YOnScreen                ; at least 1 row is on screen as > 128
 814+ C7B7 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 815+ C7B9                                      ClearCarryFlag
 815+ C7B9 B7          >                        or a
 816+ C7BA ED 52                                sbc     hl,de
 817+ C7BC FA D3 C7                             jp      m,YOnScreen                ; so if its -ve then it spans screen
 818+ C7BF 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 819+ C7C0                                      ReturnIfANotZero                    ; .
 819+ C7C0 A7          >                        and     a
 819+ C7C1 C0          >                        ret     nz
 820+ C7C2 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 821+ C7C3 E6 80                                and     %10000000                   ; .
 822+ C7C5                                      ReturnIfANotZero                    ; .
 822+ C7C5 A7          >                        and     a
 822+ C7C6 C0          >                        ret     nz
 823+ C7C7 C3 D3 C7                             jp      YOnScreen                  ; so Y at least spans
 824+ C7CA 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 825+ C7CC                                      ClearCarryFlag
 825+ C7CC B7          >                        or a
 826+ C7CD ED 5A                                adc     hl,de                       ; so we have hl - de
 827+ C7CF F2 D3 C7                             jp      p,YOnScreen                ; if result was positive then it spans screen so we are good
 828+ C7D2 C9                                   ret                                 ; else never gets above 0 so return
 829+ C7D3              ; .........................................................................................................................
 830+ C7D3 21 A3 C0     YOnScreen:             ld      hl,SBnKLineArray            ; we load start and end as 0
 831+ C7D6 11 00 01                             ld		de, SunLineArraySize        ; just if we get a 0,0 genuine we will not plot it
 832+ C7D9 3E 00                                ld		a,0
 833+ C7DB CD 2E 7F                             call	memfill_dma
 834+ C7DE              ; .........................................................................................................................
 835+ C7DE 11 00 00     .SetRaggedEdgeMax:      ld      de,0
 836+ C7E1 3A A7 C5                             ld      a,(SunRadius)               ; get readius
 837+ C7E4 FE 60                                cp      96                          ; if > 96 then roll carry flag into e
 838+ C7E6                                      FlipCarryFlag
 838+ C7E6 3F          >                        ccf
 839+ C7E7 CB 13                                rl      e                           ; if > 40 then roll carry flag into e
 840+ C7E9 FE 28                                cp      40
 841+ C7EB                                      FlipCarryFlag
 841+ C7EB 3F          >                        ccf
 842+ C7EC CB 13                                rl      e
 843+ C7EE FE 10                                cp      16                          ; if > 16 then roll carry flag into e
 844+ C7F0                                      FlipCarryFlag
 844+ C7F0 3F          >                        ccf
 845+ C7F1 CB 13                                rl     e
 846+ C7F3 7B                                   ld      a,e                         ; a = ragged size from %00000111 to %00000000
 847+ C7F4 32 A0 C5                             ld      (RaggedSize),a
 848+ C7F7              ; .........................................................................................................................
 849+ C7F7 21 A3 C0     .SkipSetK:              ld      hl,SBnKLineArray            ; prep line array details ready for filling
 850+ C7FA 22 A3 C1                             ld      (LineArrayPtr),hl
 851+ C7FD AF                                   xor     a
 852+ C7FE 32 9F C5                             ld      (LineCount),a
 853+ C801              ; .........................................................................................................................
 854+ C801 2A A5 C5     .GetMinY:               ld      hl,(SunScrnY)               ; now calculate start Y position
 855+ C804 3A A7 C5                             ld      a,(SunRadius)
 856+ C807 5F                                   ld      e,a
 857+ C808 16 00                                ld      d,0
 858+ C80A                                      ClearCarryFlag
 858+ C80A B7          >                        or a
 859+ C80B ED 52                                sbc     hl,de
 860+ C80D F2 13 C8                             jp      p,.DoneMinY
 861+ C810 21 00 00                             ld      hl,0                        ; if its negative then we start with 0 as it can only go up screen after radius
 862+ C813              .DoneMinY:              ReturnIfRegNotZero h                ; if h > 0 then off the screen
 862+ C813 7C          >                        ld      a, h
 862+ C814 A7          >                        and     a
 862+ C815 C0          >                        ret     nz
 863+ C816 7D                                   ld      a,l                         ; check if l > 127
 864+ C817 E6 80                                and     SignOnly8Bit                ; .
 865+ C819 C0                                   ret     nz                          ; if bit is set then > 128
 866+ C81A 7D           .SetMinY:               ld      a,l
 867+ C81B 32 A1 C5                             ld      (MinYOffset),a              ; so now we have Y top of screen
 868+ C81E 2A A5 C5     .GetMaxY:               ld      hl,(SunScrnY)               ; get hl = Y + radius, note if we got here then this can never be a negative result but can go from -ve hl to +ve result
 869+ C821 3A A7 C5                             ld      a,(SunRadius)               ; hl = hl + radius
 870+ C824 16 00                                ld      d,0                         ; .
 871+ C826 5F                                   ld      e,a                         ; .
 872+ C827                                      ClearCarryFlag                      ; .
 872+ C827 B7          >                        or a
 873+ C828 ED 5A                                adc     hl,de                       ; .
 874+ C82A 7C                                   ld      a,h
 875+ C82B A7                                   and     a
 876+ C82C 28 06                                jr      z,.YHiOK
 877+ C82E 21 7F 00     .YHiGTE127:             ld      hl,127
 878+ C831 C3 3D C8                             jp      .SetMaxY
 879+ C834 7D           .YHiOK:                 ld      a,l                         ; clamp at 127
 880+ C835 E6 80                                and     SignOnly8Bit                ; .
 881+ C837 CA 3D C8                             jp      z,.SetMaxY
 882+ C83A 21 7F 00                             ld      hl,127
 883+ C83D 7D           .SetMaxY                ld      a,l
 884+ C83E 32 A2 C5                             ld      (MaxYOffSet),a              ; so now we have min and max Y coordinates and SunScrnX & Y holds center
 885+ C841 CD 48 C8                             call    SunDrawCircle
 886+ C844 CD BD C1                             call    SunDraw
 887+ C847 C9                                   ret
 888+ C848                                      ; b8 04 00 02 00 00 60 01 00 gives a 0.5 so we have the cal wrong as its +-1 so should be * result of divide by 128
 889+ C848              ;.. Now we caluclate the circle of the star
 890+ C848              ;.. its from MinY down the screen to MaxY center ProjX,ProjY.
 891+ C848              ;.. We can use the circle draw logic gtom Bressenham's algorithm
 892+ C848              ; so now there are the following conditions to consider
 893+ C848              ; y min = 0   y center is negative radius <= ABS (Y center)             => Don't draw
 894+ C848              ; y min = 0   y center is negative radius > ABS (Y center)+1            => Draw bottom half only
 895+ C848              ; y max = 127 y center is > 127    radius <= y center - 127             => Don't draw
 896+ C848              ; y max = 127 y center is > 127    radius > y center - 127              => Draw top half only
 897+ C848              ; y min >= 0  y center > y min     we don't need to worry about radius  => Draw both halves
 898+ C848              ; x center + radius < 0                                                 => Don't draw
 899+ C848              ; x center - radius > 255                                               => Don't draw
 900+ C848              ; we won't consider x more here as the driver is the y coordinate but we will check if x is vaiable
 901+ C848              ; x point = max (x point, 0)   on left
 902+ C848              ; x point = min (x point, 255) on right
 903+ C848
 904+ C848              SetIYPlusOffset:        MACRO   reg
 905+ C848 ~                                    push    hl,,iy                          ; save hl, then hl = iy
 906+ C848 ~                                    pop     hl                              ;
 907+ C848 ~                                    ld      a,reg
 908+ C848 ~                                    add     hl,a
 909+ C848 ~                                    add     hl,a
 910+ C848 ~                                    push    hl
 911+ C848 ~                                    pop     iy
 912+ C848 ~                                    pop     hl
 913+ C848                                      ENDM
 914+ C848
 915+ C848              SetIYMinusOffset:       MACRO   reg
 916+ C848 ~                                    push    de,,hl,,iy                      ; save hl, then hl = iy
 917+ C848 ~                                    pop     hl                              ;
 918+ C848 ~                                    ld      a,reg
 919+ C848 ~                                    add     a,a
 920+ C848 ~                                    ld      e,a
 921+ C848 ~                                    ld      d,0
 922+ C848 ~                                    ClearCarryFlag
 923+ C848 ~                                    sbc     hl,de
 924+ C848 ~                                    push    hl
 925+ C848 ~                                    pop     iy
 926+ C848 ~                                    pop     de,,hl
 927+ C848                                      ENDM
 928+ C848
 929+ C848
 930+ C848              ;;;-SunDrawCircle:          ld      a,(SunRadius)
 931+ C848              ;;;-.CheckRadius:           ReturnIfAIsZero                         ; elimiate zero or single pixel
 932+ C848              ;;;-                        JumpIfAEqNusng  1, SunCircleSinglePixel
 933+ C848              ;;;-                       ; JumpIfAGTENusng 127, SunFullScreen      ; if its covering whole then just make it yellow
 934+ C848              ;;;-; already done .MakeCentreX2C:         MemSignedTo2C SunScrnX                   ; convert 16 bit signed to 2's compliment
 935+ C848              ;;;-; already done .MakeCentreY2C:         MemSignedTo2C SunScrnY                   ; .
 936+ C848              ;;;-.BoundsCheck            ld      hl,(SunScrnY)
 937+ C848              ;;;-                        push    hl
 938+ C848              ;;;-                        ld      a,(SunRadius)
 939+ C848              ;;;-                        add     hl,a
 940+ C848              ;;;-                        bit     7,h
 941+ C848              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 942+ C848              ;;;-                        pop     hl
 943+ C848              ;;;-                        ld      d,0
 944+ C848              ;;;-                        ld      e,a
 945+ C848              ;;;-                        ClearCarryFlag
 946+ C848              ;;;-                        sbc     hl,de
 947+ C848              ;;;-                        ld      a,h
 948+ C848              ;;;-                        ReturnIfAGTENusng  1                     ; really shoudl be signed TODO
 949+ C848              ;;;-
 950+ C848              ;;;-                        ld      hl,(SunScrnX)
 951+ C848              ;;;-                        push    hl
 952+ C848              ;;;-                        ld      a,(SunRadius)
 953+ C848              ;;;-                        add     hl,a
 954+ C848              ;;;-                        bit     7,h
 955+ C848              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 956+ C848              ;;;-                        pop     hl
 957+ C848              ;;;-                        ld      d,0
 958+ C848              ;;;-                        ld      e,a
 959+ C848              ;;;-                        ClearCarryFlag
 960+ C848              ;;;-                        sbc     hl,de
 961+ C848              ;;;-                        ld      a,h
 962+ C848              ;;;-
 963+ C848              ;;;-                        ReturnIfAGTENusng 1                      ; really shoudl be signed TODO
 964+ C848              SunDrawCircle
 965+ C848                                      ; ** BNOTE Ptuichj abnd roll has a bug as piitch increases z axis value
 966+ C848              .PrepCircleData:       ; ld      ixl,0
 967+ C848                                     ; ld		(.Plot1+1),bc			        ; save origin into DE reg in code
 968+ C848 3A A7 C5                             ld      a,(SunRadius)
 969+ C84B DD 67                                ld		ixh,a							; ixh = radius
 970+ C84D DD 2E 00                             ld		ixl,0						    ; ixl = delta (y)
 971+ C850 26 00        .calcd:	                ld		h,0                             ; de = radius * 2
 972+ C852 6F                                   ld		l,a                             ; .
 973+ C853 29                                   add		hl,hl							; .
 974+ C854 EB                                   ex		de,hl							; .
 975+ C855 21 03 00                             ld		hl,3                            ; hl = 3 - (r * 2)
 976+ C858 A7                                   and		a                               ; .
 977+ C859 ED 52                                sbc		hl,de							; .
 978+ C85B 44                                   ld		b,h                             ; bc = 3 - (r * 2) : d = 3 - 2r
 979+ C85C 4D                                   ld		c,l								; .
 980+ C85D 21 01 00     .calcdelta:             ld		hl,1                            ; set hl to 1
 981+ C860 16 00                                ld		d,0                             ; de = ixl
 982+ C862 DD 5D                                ld		e,ixl                           ;
 983+ C864                                      ClearCarryFlag                          ;
 983+ C864 B7          >                        or a
 984+ C865 ED 52                                sbc		hl,de                           ; hl = 1 - ixl
 985+ C867 11 01 00     .Setde1:                ld		de,1                            ; del = 1
 986+ C86A DD 7C        .CircleLoop:            ld		a,ixh                           ; if x = y then exit
 987+ C86C DD BD                                cp		ixl                             ;
 988+ C86E D8                                   ret		c                               ;
 989+ C86F D9           .ProcessLoop:	        exx                                     ; save out registers
 990+ C870              ; Process CY+Y CX+X & CY+Y CX-X..................................
 991+ C870 2A A5 C5     .Plot1:                 ld      hl, (SunScrnY)
 992+ C873 DD 7C        .Get1YRow:              ld      a,ixh
 993+ C875 ED 31                                add     hl,a                            ; Check to see if CY+Y (note is add hl ,a usginedf only??)
 994+ C877              .Check1YRowOnScreen:    CheckRowHLOnScreen .NoTopPixelPair
 994+ C877 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
 994+ C878 A7          >                        and     a                               ; .
 994+ C879 20 26       >                        jr      nz,.NoTopPixelPair                   ; h <> 0 so fails (covers <0 and > 255
 994+ C87B 7D          >                        ld      a,l                             ; l bit 7 0?
 994+ C87C E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
 994+ C87E 20 21       >                        jr      nz,.NoTopPixelPair                   ;
 995+ C880              .Write1YCoord:          SetIYPlusOffset ixh                     ; IY = IY + ixh
 995+ C880 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
 995+ C883 E1          >                        pop     hl                              ;
 995+ C884 DD 7C       >                        ld      a,ixh
 995+ C886 ED 31       >                        add     hl,a
 995+ C888 ED 31       >                        add     hl,a
 995+ C88A E5          >                        push    hl
 995+ C88B FD E1       >                        pop     iy
 995+ C88D E1          >                        pop     hl
 996+ C88E                                      IYEquRowN l                             ; IY = SBnkLineArray + (2 * l) - set up iy as target address
 996+ C88E 7D          >                        ld      a,l
 996+ C88F 21 A3 C0    >                        ld      hl,SBnKLineArray
 996+ C892 ED 31       >                        add     hl,a
 996+ C894 ED 31       >                        add     hl,a
 996+ C896 E5          >                        push    hl
 996+ C897 FD E1       >                        pop     iy
 997+ C899 DD 7D                                ld      a,ixl
 998+ C89B CD 6E C9                             call    ProcessXRowA
 999+ C89E C3 A1 C8                             jp      .Plot2
1000+ C8A1              .NoTopPixelPair:        ;break
1001+ C8A1              ; Process CY-Y CX+X & CY-Y CX-X..................................
1002+ C8A1 2A A5 C5     .Plot2:                 ld      hl, (SunScrnY)
1003+ C8A4 16 00        .Get2YRow:              ld      d,0
1004+ C8A6 DD 5C                                ld      e,ixh
1005+ C8A8                                      ClearCarryFlag
1005+ C8A8 B7          >                        or a
1006+ C8A9 ED 52                                sbc     hl,de
1007+ C8AB              .Check2YRowOnScreen:    CheckRowHLOnScreen .NoBottomPixelPair
1007+ C8AB 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1007+ C8AC A7          >                        and     a                               ; .
1007+ C8AD 20 2B       >                        jr      nz,.NoBottomPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1007+ C8AF 7D          >                        ld      a,l                             ; l bit 7 0?
1007+ C8B0 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1007+ C8B2 20 26       >                        jr      nz,.NoBottomPixelPair                   ;
1008+ C8B4                                      SetIYMinusOffset ixh
1008+ C8B4 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1008+ C8B8 E1          >                        pop     hl                              ;
1008+ C8B9 DD 7C       >                        ld      a,ixh
1008+ C8BB 87          >                        add     a,a
1008+ C8BC 5F          >                        ld      e,a
1008+ C8BD 16 00       >                        ld      d,0
1008+ C8BF             >                        ClearCarryFlag
1008+ C8BF B7          >                        or a
1008+ C8C0 ED 52       >                        sbc     hl,de
1008+ C8C2 E5          >                        push    hl
1008+ C8C3 FD E1       >                        pop     iy
1008+ C8C5 E1 D1       >                        pop     de,,hl
1009+ C8C7              .Write2YCoord:          IYEquRowN l                             ; set up iy as target address
1009+ C8C7 7D          >                        ld      a,l
1009+ C8C8 21 A3 C0    >                        ld      hl,SBnKLineArray
1009+ C8CB ED 31       >                        add     hl,a
1009+ C8CD ED 31       >                        add     hl,a
1009+ C8CF E5          >                        push    hl
1009+ C8D0 FD E1       >                        pop     iy
1010+ C8D2 DD 7D                                ld      a,ixl
1011+ C8D4 CD 6E C9                             call    ProcessXRowA
1012+ C8D7 C3 DA C8                             jp      .Plot3
1013+ C8DA              .NoBottomPixelPair:     ;break
1014+ C8DA              ; Process CY+X CX+Y & CY+X CX-Y..................................
1015+ C8DA 2A A5 C5     .Plot3:                 ld      hl, (SunScrnY)
1016+ C8DD DD 7D        .Get3YRow:              ld      a,ixl
1017+ C8DF ED 31                                add     hl,a                            ; Check to see if CY+Y
1018+ C8E1              .Check3YRowOnScreen:    CheckRowHLOnScreen .NoTop3PixelPair
1018+ C8E1 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1018+ C8E2 A7          >                        and     a                               ; .
1018+ C8E3 20 26       >                        jr      nz,.NoTop3PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1018+ C8E5 7D          >                        ld      a,l                             ; l bit 7 0?
1018+ C8E6 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1018+ C8E8 20 21       >                        jr      nz,.NoTop3PixelPair                   ;
1019+ C8EA                                      SetIYPlusOffset ixl
1019+ C8EA E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1019+ C8ED E1          >                        pop     hl                              ;
1019+ C8EE DD 7D       >                        ld      a,ixl
1019+ C8F0 ED 31       >                        add     hl,a
1019+ C8F2 ED 31       >                        add     hl,a
1019+ C8F4 E5          >                        push    hl
1019+ C8F5 FD E1       >                        pop     iy
1019+ C8F7 E1          >                        pop     hl
1020+ C8F8              .Write3YCoord:          IYEquRowN l                             ; set up iy as target address
1020+ C8F8 7D          >                        ld      a,l
1020+ C8F9 21 A3 C0    >                        ld      hl,SBnKLineArray
1020+ C8FC ED 31       >                        add     hl,a
1020+ C8FE ED 31       >                        add     hl,a
1020+ C900 E5          >                        push    hl
1020+ C901 FD E1       >                        pop     iy
1021+ C903 DD 7C                                ld      a,ixh
1022+ C905 CD 6E C9                             call    ProcessXRowA
1023+ C908 C3 0B C9                             jp      .Plot4
1024+ C90B              .NoTop3PixelPair:       ;break
1025+ C90B              ; Process CY-X CX+Y & CY-X CX-Y..................................
1026+ C90B 2A A5 C5     .Plot4:                 ld      hl, (SunScrnY)
1027+ C90E 16 00        .Get4YRow:              ld      d,0
1028+ C910 DD 5D                                ld      e,ixl
1029+ C912                                      ClearCarryFlag
1029+ C912 B7          >                        or a
1030+ C913 ED 52                                sbc     hl,de
1031+ C915              .Check4YRowOnScreen:    CheckRowHLOnScreen .NoBottom4PixelPair
1031+ C915 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1031+ C916 A7          >                        and     a                               ; .
1031+ C917 20 28       >                        jr      nz,.NoBottom4PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1031+ C919 7D          >                        ld      a,l                             ; l bit 7 0?
1031+ C91A E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1031+ C91C 20 23       >                        jr      nz,.NoBottom4PixelPair                   ;
1032+ C91E                                      SetIYMinusOffset ixl
1032+ C91E D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1032+ C922 E1          >                        pop     hl                              ;
1032+ C923 DD 7D       >                        ld      a,ixl
1032+ C925 87          >                        add     a,a
1032+ C926 5F          >                        ld      e,a
1032+ C927 16 00       >                        ld      d,0
1032+ C929             >                        ClearCarryFlag
1032+ C929 B7          >                        or a
1032+ C92A ED 52       >                        sbc     hl,de
1032+ C92C E5          >                        push    hl
1032+ C92D FD E1       >                        pop     iy
1032+ C92F E1 D1       >                        pop     de,,hl
1033+ C931              .Write4YCoord:          IYEquRowN l                             ; set up iy as target address
1033+ C931 7D          >                        ld      a,l
1033+ C932 21 A3 C0    >                        ld      hl,SBnKLineArray
1033+ C935 ED 31       >                        add     hl,a
1033+ C937 ED 31       >                        add     hl,a
1033+ C939 E5          >                        push    hl
1033+ C93A FD E1       >                        pop     iy
1034+ C93C DD 7C                                ld      a,ixh
1035+ C93E CD 6E C9                             call    ProcessXRowA
1036+ C941              .NoBottom4PixelPair:
1037+ C941              ; Completed one iteration........................................
1038+ C941 D9                                   exx
1039+ C942 CB 7C        .IncrementCircle:	    bit     7,h				; Check for Hl<=0
1040+ C944 28 03                                jr z,   .draw_circle_1
1041+ C946 19                                   add hl,de			; Delta=Delta+D1
1042+ C947 18 05                                jr      .draw_circle_2		;
1043+ C949 09           .draw_circle_1:		    add     hl,bc			; Delta=Delta+D2
1044+ C94A 03                                   inc     bc
1045+ C94B 03                                   inc     bc				; D2=D2+2
1046+ C94C DD 25                                dec     ixh				; Y=Y-1
1047+ C94E 03           .draw_circle_2:		    inc bc				    ; D2=D2+2
1048+ C94F 03                                   inc bc
1049+ C950 13                                   inc de				    ; D1=D1+2
1050+ C951 13                                   inc de
1051+ C952 DD 2C                                inc ixl				    ; X=X+1
1052+ C954 C3 6A C8                             jp      .CircleLoop
1053+ C957 2A A3 C5     SunCircleSinglePixel:     ld      hl,(SunScrnX)
1054+ C95A 7C                                   ld      a,h
1055+ C95B A7                                   and     a
1056+ C95C C0                                   ret     nz                  ; if the high byte is set then no pixel
1057+ C95D 4D                                   ld      c,l
1058+ C95E 2A A5 C5                             ld      hl,(SunScrnY)
1059+ C961 7C                                   ld      a,h
1060+ C962 A7                                   and     a
1061+ C963 C0                                   ret     nz                  ; if the high byte is set then no pixel
1062+ C964 7D                                   ld      a,l
1063+ C965 CB 7F                                bit     7,a
1064+ C967 C0                                   ret     nz                  ; if l > 127 then no pixel
1065+ C968 47                                   ld      b,a
1066+ C969 7B                                   ld		a,e
1067+ C96A CD 6C E1                             call	l2_plot_pixel_y_test
1068+ C96D C9                                   ret
1069+ C96E
1070+ C96E              ProcessXRowA:           ;break
1071+ C96E 2A A3 C5                             ld      hl,(SunScrnX)                    ; get X Center
1072+ C971 F5                                   push    af                              ; save A (curent offset +/- value
1073+ C972 ED 31                                add     hl,a                            ; Hl = HL + offset
1074+ C974 7C                                   ld      a,h                             ; is HL negative?, if so then set C to 0
1075+ C975 CB 7F                                bit     7,a                             ;
1076+ C977 20 14                                jr      nz,.XCoordNegative              ; We can have this for non X + Radius i.e. the equater
1077+ C979 A7                                   and     a                               ; if H <> 0? (why by here must be +ve), set c to $FF
1078+ C97A 20 16                                jr      nz,.XCoordMaxed                 ; .
1079+ C97C 4D                                   ld      c,l                             ; else set c to l and do the -ve offset
1080+ C97D C5           .AddFuzz:               push    bc
1081+ C97E CD 41 89                             call    doRandom                        ; c = c - random AND ragged Size
1082+ C981 C1                                   pop     bc
1083+ C982 21 A0 C5                             ld      hl,RaggedSize                   ;
1084+ C985 A6                                   and     (hl)                            ;
1085+ C986 81                                   add     c                               ;
1086+ C987 4F                                   ld      c,a                             ;
1087+ C988 38 08                                jr      c,.XCoordMaxed                  ; has fuzz caused a carry, if so > 255 to make 255
1088+ C98A C3 94 C9                             jp      .ProcessSubtract                ;
1089+ C98D 0E 00        .XCoordNegative:        ld      c,0                             ; if it was negative then 0
1090+ C98F C3 94 C9                             jp      .ProcessSubtract
1091+ C992 0E FF        .XCoordMaxed:           ld      c,255                           ; if it was +ve then 255
1092+ C994 F1           .ProcessSubtract:       pop     af                              ; get offset back
1093+ C995 5F                                   ld      e,a                             ; but goes into DE as its a subtract
1094+ C996 16 00                                ld      d,0
1095+ C998 2A A3 C5                             ld      hl,(SunScrnX)                    ; so do subtract
1096+ C99B                                      ClearCarryFlag                          ; .
1096+ C99B B7          >                        or a
1097+ C99C ED 52                                sbc     hl,de                           ; .
1098+ C99E FA BB C9                             jp      m,.XCoordLeftNegative           ; again test for min max
1099+ C9A1 E5 C5        .AddFuzzSubtract:       push    hl,,bc
1100+ C9A3 CD 41 89                             call    doRandom                        ; c = c - random AND ragged Size
1101+ C9A6 C1                                   pop     bc
1102+ C9A7 21 A0 C5                             ld      hl,RaggedSize                   ;
1103+ C9AA A6                                   and     (hl)                            ;
1104+ C9AB 5F                                   ld      e,a
1105+ C9AC E1                                   pop     hl
1106+ C9AD ED 52                                sbc     hl,de
1107+ C9AF FA BB C9                             jp      m,.XCoordLeftNegative           ; again test for min max
1108+ C9B2 7C                                   ld      a,h
1109+ C9B3 A7                                   and     a
1110+ C9B4 C2 C0 C9                             jp      nz,.XCordLeftMaxed
1111+ C9B7 45                                   ld      b,l
1112+ C9B8 C3 C2 C9                             jp      .CompletedXCoords
1113+ C9BB 06 00        .XCoordLeftNegative:    ld      b,0
1114+ C9BD C3 C2 C9                             jp      .CompletedXCoords
1115+ C9C0 06 FF        .XCordLeftMaxed:        ld      b,255
1116+ C9C2 78           .CompletedXCoords:      ld      a,b
1117+ C9C3 FD 77 00     .RowSaveIY1             ld      (iy+0),a                        ; iy holds current line array index
1118+ C9C6 79                                   ld      a,c
1119+ C9C7 FD 77 01     .RowSaveIY3             ld      (iy+1),a
1120+ C9CA C9                                   ret
1121+ C9CB
1122+ C9CB              ; .....................................................
1123+ C9CB              ; if the universe object is a planet or sun then do that instead
1124+ C9CB              ;;TODOProcessPlanet:          cp      129
1125+ C9CB              ;;TODO                        jr      nz, .ItsAPlanet
1126+ C9CB              ;;TODO.ItsAStar:              ld      a,(SBnKzsgn)
1127+ C9CB              ;;TODO                        cp      48                               ; if z > 48 (it must be positive to enter this routine)
1128+ C9CB
1129+ C9CB
1130+ C9CB              ; Square Root using tables
1131+ C9CB              ; DE = number to find
1132+ C9CB 21 EB CB     SunLookupSqrtDE:        ld      hl,SunSquareRootTable
1133+ C9CE 7A           .LookupCorseJump:       ld      a,d
1134+ C9CF ED 31                                add     hl,a
1135+ C9D1 ED 31                                add     hl,a
1136+ C9D3 7E                                   ld      a,(hl)
1137+ C9D4 23                                   inc     hl
1138+ C9D5 66                                   ld      h,(hl)
1139+ C9D6 6F                                   ld      l,a
1140+ C9D7 7E           .FineSearchLoop:        ld      a,(hl)
1141+ C9D8                                      JumpIfAEqNusng  e, .FoundByte
1141+ C9D8 BB          >                        cp     e
1141+ C9D9 CA E5 C9    >                        jp      z,.FoundByte
1142+ C9DC                                      JumpIfAGTENusng e, .PreviousByte
1142+ C9DC BB          >                        cp     e
1142+ C9DD D2 E8 C9    >                        jp		nc,.PreviousByte
1143+ C9E0 23           .NotFound:              inc     hl
1144+ C9E1 23                                   inc     hl
1145+ C9E2 C3 D7 C9                             jp      .FineSearchLoop
1146+ C9E5 23           .FoundByte:             inc     hl
1147+ C9E6 7E                                   ld      a,(hl)
1148+ C9E7 C9                                   ret
1149+ C9E8 2B           .PreviousByte:          dec     hl
1150+ C9E9 7E                                   ld      a,(hl)
1151+ C9EA C9                                   ret
1152+ C9EB
1153+ C9EB EB CB FD CB  SunRootHighIndex:       DW SunSqr00,SunSqr01,SunSqr02,SunSqr03,SunSqr04,SunSqr05,SunSqr06,SunSqr07,SunSqr08,SunSqr09,SunSqr0A,SunSqr0B,SunSqr0C,SunSqr0D,SunSqr0E,SunSqr0F
1153+ C9EF 0B CC 17 CC
1153+ C9F3 21 CC 29 CC
1153+ C9F7 31 CC 39 CC
1153+ C9FB 41 CC 47 CC
1153+ C9FF 4F CC 55 CC
1153+ CA03 59 CC 5F CC
1153+ CA07 65 CC 6B CC
1154+ CA0B 71 CC 77 CC                          DW SunSqr10,SunSqr11,SunSqr12,SunSqr13,SunSqr14,SunSqr15,SunSqr16,SunSqr17,SunSqr18,SunSqr19,SunSqr1A,SunSqr1B,SunSqr1C,SunSqr1D,SunSqr1E,SunSqr1F
1154+ CA0F 7D CC 83 CC
1154+ CA13 89 CC 8D CC
1154+ CA17 91 CC 93 CC
1154+ CA1B 97 CC 9B CC
1154+ CA1F 9F CC A3 CC
1154+ CA23 A7 CC AB CC
1154+ CA27 AD CC B1 CC
1155+ CA2B B3 CC B7 CC                          DW SunSqr20,SunSqr21,SunSqr22,SunSqr23,SunSqr24,SunSqr25,SunSqr26,SunSqr27,SunSqr28,SunSqr29,SunSqr2A,SunSqr2B,SunSqr2C,SunSqr2D,SunSqr2E,SunSqr2F
1155+ CA2F BB CC BD CC
1155+ CA33 BF CC C3 CC
1155+ CA37 C5 CC C7 CC
1155+ CA3B CB CC CD CC
1155+ CA3F CF CC D1 CC
1155+ CA43 D5 CC D7 CC
1155+ CA47 D9 CC DD CC
1156+ CA4B E1 CC E5 CC                          DW SunSqr30,SunSqr31,SunSqr32,SunSqr33,SunSqr34,SunSqr35,SunSqr36,SunSqr37,SunSqr38,SunSqr39,SunSqr3A,SunSqr3B,SunSqr3C,SunSqr3D,SunSqr3E,SunSqr3F
1156+ CA4F E9 CC ED CC
1156+ CA53 EF CC F3 CC
1156+ CA57 F7 CC FB CC
1156+ CA5B FD CC 01 CD
1156+ CA5F 05 CD 09 CD
1156+ CA63 0D CD 11 CD
1156+ CA67 15 CD 19 CD
1157+ CA6B 1D CD 21 CD                          DW SunSqr40,SunSqr41,SunSqr42,SunSqr43,SunSqr44,SunSqr45,SunSqr46,SunSqr47,SunSqr48,SunSqr49,SunSqr4A,SunSqr4B,SunSqr4C,SunSqr4D,SunSqr4E,SunSqr4F
1157+ CA6F 25 CD 29 CD
1157+ CA73 2D CD 31 CD
1157+ CA77 35 CD 39 CD
1157+ CA7B 3D CD 41 CD
1157+ CA7F 45 CD 49 CD
1157+ CA83 4D CD 51 CD
1157+ CA87 55 CD 59 CD
1158+ CA8B 5D CD 5F CD                          DW SunSqr50,SunSqr51,SunSqr52,SunSqr53,SunSqr54,SunSqr55,SunSqr56,SunSqr57,SunSqr58,SunSqr59,SunSqr5A,SunSqr5B,SunSqr5C,SunSqr5D,SunSqr5E,SunSqr5F
1158+ CA8F 63 CD 67 CD
1158+ CA93 6B CD 6F CD
1158+ CA97 73 CD 77 CD
1158+ CA9B 7B CD 7D CD
1158+ CA9F 81 CD 85 CD
1158+ CAA3 89 CD 8D CD
1158+ CAA7 91 CD 93 CD
1159+ CAAB 97 CD 9B CD                          DW SunSqr60,SunSqr61,SunSqr62,SunSqr63,SunSqr64,SunSqr65,SunSqr66,SunSqr67,SunSqr68,SunSqr69,SunSqr6A,SunSqr6B,SunSqr6C,SunSqr6D,SunSqr6E,SunSqr6F
1159+ CAAF 9F CD A3 CD
1159+ CAB3 A5 CD A9 CD
1159+ CAB7 AD CD B1 CD
1159+ CABB B5 CD B7 CD
1159+ CABF BB CD BF CD
1159+ CAC3 C3 CD C5 CD
1159+ CAC7 C7 CD CB CD
1160+ CACB CF CD D3 CD                          DW SunSqr70,SunSqr71,SunSqr72,SunSqr73,SunSqr74,SunSqr75,SunSqr76,SunSqr77,SunSqr78,SunSqr79,SunSqr7A,SunSqr7B,SunSqr7C,SunSqr7D,SunSqr7E,SunSqr7F
1160+ CACF D7 CD DB CD
1160+ CAD3 DF CD E3 CD
1160+ CAD7 E5 CD E9 CD
1160+ CADB ED CD EF CD
1160+ CADF F3 CD F7 CD
1160+ CAE3 FB CD FD CD
1160+ CAE7 01 CE 05 CE
1161+ CAEB 09 CE 0B CE                          DW SunSqr80,SunSqr81,SunSqr82,SunSqr83,SunSqr84,SunSqr85,SunSqr86,SunSqr87,SunSqr88,SunSqr89,SunSqr8A,SunSqr8B,SunSqr8C,SunSqr8D,SunSqr8E,SunSqr8F
1161+ CAEF 0F CE 11 CE
1161+ CAF3 15 CE 19 CE
1161+ CAF7 1D CE 1F CE
1161+ CAFB 23 CE 27 CE
1161+ CAFF 29 CE 2D CE
1161+ CB03 31 CE 33 CE
1161+ CB07 37 CE 3B CE
1162+ CB0B 3D CE 41 CE                          DW SunSqr90,SunSqr91,SunSqr92,SunSqr93,SunSqr94,SunSqr95,SunSqr96,SunSqr97,SunSqr98,SunSqr99,SunSqr9A,SunSqr9B,SunSqr9C,SunSqr9D,SunSqr9E,SunSqr9F
1162+ CB0F 45 CE 47 CE
1162+ CB13 4B CE 4F CE
1162+ CB17 51 CE 55 CE
1162+ CB1B 59 CE 5B CE
1162+ CB1F 5F CE 63 CE
1162+ CB23 65 CE 69 CE
1162+ CB27 6D CE 6F CE
1163+ CB2B 73 CE 77 CE                          DW SunSqrA0,SunSqrA1,SunSqrA2,SunSqrA3,SunSqrA4,SunSqrA5,SunSqrA6,SunSqrA7,SunSqrA8,SunSqrA9,SunSqrAA,SunSqrAB,SunSqrAC,SunSqrAD,SunSqrAE,SunSqrAF
1163+ CB2F 79 CE 7D CE
1163+ CB33 7F CE 83 CE
1163+ CB37 87 CE 89 CE
1163+ CB3B 8D CE 8F CE
1163+ CB3F 93 CE 97 CE
1163+ CB43 99 CE 9D CE
1163+ CB47 A1 CE A3 CE
1164+ CB4B A5 CE A7 CE                          DW SunSqrB0,SunSqrB1,SunSqrB2,SunSqrB3,SunSqrB4,SunSqrB5,SunSqrB6,SunSqrB7,SunSqrB8,SunSqrB9,SunSqrBA,SunSqrBB,SunSqrBC,SunSqrBD,SunSqrBE,SunSqrBF
1164+ CB4F AB CE AF CE
1164+ CB53 B1 CE B5 CE
1164+ CB57 B7 CE BB CE
1164+ CB5B BF CE C3 CE
1164+ CB5F C5 CE C7 CE
1164+ CB63 CB CE CD CE
1164+ CB67 D1 CE D5 CE
1165+ CB6B D7 CE DB CE                          DW SunSqrC0,SunSqrC1,SunSqrC2,SunSqrC3,SunSqrC4,SunSqrC5,SunSqrC6,SunSqrC7,SunSqrC8,SunSqrC9,SunSqrCA,SunSqrCB,SunSqrCC,SunSqrCD,SunSqrCE,SunSqrCF
1165+ CB6F DD CE E1 CE
1165+ CB73 E3 CE E7 CE
1165+ CB77 EB CE ED CE
1165+ CB7B EF CE F1 CE
1165+ CB7F F5 CE F7 CE
1165+ CB83 FB CE FF CE
1165+ CB87 01 CF 05 CF
1166+ CB8B 07 CF 0B CF                          DW SunSqrD0,SunSqrD1,SunSqrD2,SunSqrD3,SunSqrD4,SunSqrD5,SunSqrD6,SunSqrD7,SunSqrD8,SunSqrD9,SunSqrDA,SunSqrDB,SunSqrDC,SunSqrDD,SunSqrDE,SunSqrDF
1166+ CB8F 0D CF 11 CF
1166+ CB93 13 CF 17 CF
1166+ CB97 1B CF 1D CF
1166+ CB9B 21 CF 23 CF
1166+ CB9F 27 CF 29 CF
1166+ CBA3 2D CF 2F CF
1166+ CBA7 31 CF 33 CF
1167+ CBAB 37 CF 3B CF                          DW SunSqrE0,SunSqrE1,SunSqrE2,SunSqrE3,SunSqrE4,SunSqrE5,SunSqrE6,SunSqrE7,SunSqrE8,SunSqrE9,SunSqrEA,SunSqrEB,SunSqrEC,SunSqrED,SunSqrEE,SunSqrEF
1167+ CBAF 3F CF 43 CF
1167+ CBB3 47 CF 4B CF
1167+ CBB7 4D CF 51 CF
1167+ CBBB 55 CF 59 CF
1167+ CBBF 5B CF 5F CF
1167+ CBC3 61 CF 63 CF
1167+ CBC7 65 CF 69 CF
1168+ CBCB 6B CF 6D CF                          DW SunSqrF0,SunSqrF1,SunSqrF2,SunSqrF3,SunSqrF4,SunSqrF5,SunSqrF6,SunSqrF7,SunSqrF8,SunSqrF9,SunSqrFA,SunSqrFB,SunSqrFC,SunSqrFD,SunSqrFE,SunSqrFF
1168+ CBCF 6F CF 73 CF
1168+ CBD3 75 CF 79 CF
1168+ CBD7 7B CF 7F CF
1168+ CBDB 81 CF 85 CF
1168+ CBDF 87 CF 8B CF
1168+ CBE3 8D CF 91 CF
1168+ CBE7 93 CF 95 CF
1169+ CBEB
1170+ CBEB              SunSquareRootTable:
1171+ CBEB 00 00        SunSqr00:               DB $00,   0
1172+ CBED 04 02                                DB $04,   2
1173+ CBEF 10 04                                DB $10,   4
1174+ CBF1 24 06                                DB $24,   6
1175+ CBF3 40 08                                DB $40,   8
1176+ CBF5 64 0A                                DB $64,  10
1177+ CBF7 90 0C                                DB $90,  12
1178+ CBF9 C4 0E                                DB $C4,  14
1179+ CBFB FF 0F                                DB $FF,  15
1180+ CBFD 00 10        SunSqr01:               DB $00,  16
1181+ CBFF 21 11                                DB $21,  17
1182+ CC01 44 12                                DB $44,  18
1183+ CC03 69 13                                DB $69,  19
1184+ CC05 90 14                                DB $90,  20
1185+ CC07 B9 15                                DB $B9,  21
1186+ CC09 FF 16                                DB $FF,  22
1187+ CC0B 11 17        SunSqr02:               DB $11,  23
1188+ CC0D 40 18                                DB $40,  24
1189+ CC0F 71 19                                DB $71,  25
1190+ CC11 A4 1A                                DB $A4,  26
1191+ CC13 D9 1B                                DB $D9,  27
1192+ CC15 FF 1B                                DB $FF,  27
1193+ CC17 10 1C        SunSqr03:               DB $10,  28
1194+ CC19 49 1D                                DB $49,  29
1195+ CC1B 84 1E                                DB $84,  30
1196+ CC1D C1 1F                                DB $C1,  31
1197+ CC1F FF 1F                                DB $FF,  31
1198+ CC21 00 20        SunSqr04:               DB $00,  32
1199+ CC23 41 21                                DB $41,  33
1200+ CC25 84 22                                DB $84,  34
1201+ CC27 FF 23                                DB $FF,  35
1202+ CC29 10 24        SunSqr05:               DB $10,  36
1203+ CC2B 59 25                                DB $59,  37
1204+ CC2D A4 26                                DB $A4,  38
1205+ CC2F FF 27                                DB $FF,  39
1206+ CC31 40 28        SunSqr06:               DB $40,  40
1207+ CC33 91 29                                DB $91,  41
1208+ CC35 E4 2A                                DB $E4,  42
1209+ CC37 FF 2A                                DB $FF,  42
1210+ CC39 39 2B        SunSqr07:               DB $39,  43
1211+ CC3B 90 2C                                DB $90,  44
1212+ CC3D E9 2D                                DB $E9,  45
1213+ CC3F FF 2D                                DB $FF,  45
1214+ CC41 44 2E        SunSqr08:               DB $44,  46
1215+ CC43 A1 2F                                DB $A1,  47
1216+ CC45 FF 2F                                DB $FF,  47
1217+ CC47 00 30        SunSqr09:               DB $00,  48
1218+ CC49 61 31                                DB $61,  49
1219+ CC4B C4 32                                DB $C4,  50
1220+ CC4D FF 32                                DB $FF,  50
1221+ CC4F 29 33        SunSqr0A:               DB $29,  51
1222+ CC51 90 34                                DB $90,  52
1223+ CC53 FF 35                                DB $FF,  53
1224+ CC55 64 36        SunSqr0B:               DB $64,  54
1225+ CC57 FF 37                                DB $FF,  55
1226+ CC59 40 38        SunSqr0C:               DB $40,  56
1227+ CC5B B1 39                                DB $B1,  57
1228+ CC5D FF 39                                DB $FF,  57
1229+ CC5F 24 3A        SunSqr0D:               DB $24,  58
1230+ CC61 99 3B                                DB $99,  59
1231+ CC63 FF 3B                                DB $FF,  59
1232+ CC65 10 3C        SunSqr0E:               DB $10,  60
1233+ CC67 89 3D                                DB $89,  61
1234+ CC69 FF 3D                                DB $FF,  61
1235+ CC6B 04 3E        SunSqr0F:               DB $04,  62
1236+ CC6D 81 3F                                DB $81,  63
1237+ CC6F FF 3F                                DB $FF,  63
1238+ CC71 00 40        SunSqr10:               DB $00,  64
1239+ CC73 81 41                                DB $81,  65
1240+ CC75 FF 41                                DB $FF,  65
1241+ CC77 04 42        SunSqr11:               DB $04,  66
1242+ CC79 89 43                                DB $89,  67
1243+ CC7B FF 43                                DB $FF,  67
1244+ CC7D 10 44        SunSqr12:               DB $10,  68
1245+ CC7F 99 45                                DB $99,  69
1246+ CC81 FF 45                                DB $FF,  69
1247+ CC83 24 46        SunSqr13:               DB $24,  70
1248+ CC85 B1 47                                DB $B1,  71
1249+ CC87 FF 47                                DB $FF,  71
1250+ CC89 40 48        SunSqr14:               DB $40,  72
1251+ CC8B FF 49                                DB $FF,  73
1252+ CC8D 64 4A        SunSqr15:               DB $64,  74
1253+ CC8F FF 4B                                DB $FF,  75
1254+ CC91 FF 4C        SunSqr16:               DB $FF,  76
1255+ CC93 C4 4D        SunSqr17:               DB $C4,  77
1256+ CC95 FF 4E                                DB $FF,  78
1257+ CC97 61 4F        SunSqr18:               DB $61,  79
1258+ CC99 FF 4F                                DB $FF,  79
1259+ CC9B 00 50        SunSqr19:               DB $00,  80
1260+ CC9D FF 51                                DB $FF,  81
1261+ CC9F 44 52        SunSqr1A:               DB $44,  82
1262+ CCA1 FF 53                                DB $FF,  83
1263+ CCA3 90 54        SunSqr1B:               DB $90,  84
1264+ CCA5 FF 54                                DB $FF,  84
1265+ CCA7 39 55        SunSqr1C:               DB $39,  85
1266+ CCA9 FF 56                                DB $FF,  86
1267+ CCAB FF 57        SunSqr1D:               DB $FF,  87
1268+ CCAD 40 58        SunSqr1E:               DB $40,  88
1269+ CCAF FF 59                                DB $FF,  89
1270+ CCB1 FF 5A        SunSqr1F:               DB $FF,  90
1271+ CCB3 59 5B        SunSqr20:               DB $59,  91
1272+ CCB5 FF 5B                                DB $FF,  91
1273+ CCB7 10 5C        SunSqr21:               DB $10,  92
1274+ CCB9 FF 5D                                DB $FF,  93
1275+ CCBB FF 5E        SunSqr22:               DB $FF,  94
1276+ CCBD FF 5F        SunSqr23:               DB $FF,  95
1277+ CCBF 00 60        SunSqr24:               DB $00,  96
1278+ CCC1 FF 61                                DB $FF,  97
1279+ CCC3 84 62        SunSqr25:               DB $84,  98
1280+ CCC5 49 63        SunSqr26:               DB $49,  99
1281+ CCC7 10 64        SunSqr27:               DB $10, 100
1282+ CCC9 FF 65                                DB $FF, 101
1283+ CCCB FF 66        SunSqr28:               DB $FF, 102
1284+ CCCD FF 67        SunSqr29:               DB $FF, 103
1285+ CCCF FF 68        SunSqr2A:               DB $FF, 104
1286+ CCD1 11 69        SunSqr2B:               DB $11, 105
1287+ CCD3 FF 6A                                DB $FF, 106
1288+ CCD5 FF 6B        SunSqr2C:               DB $FF, 107
1289+ CCD7 FF 6C        SunSqr2D:               DB $FF, 108
1290+ CCD9 69 6D        SunSqr2E:               DB $69, 109
1291+ CCDB FF 6E                                DB $FF, 110
1292+ CCDD 44 6E        SunSqr2F:               DB $44, 110
1293+ CCDF FF 6F                                DB $FF, 111
1294+ CCE1 21 6F        SunSqr30:               DB $21, 111
1295+ CCE3 FF 70                                DB $FF, 112
1296+ CCE5 00 70        SunSqr31:               DB $00, 112
1297+ CCE7 FF 71                                DB $FF, 113
1298+ CCE9 C4 72        SunSqr32:               DB $C4, 114
1299+ CCEB FF 72                                DB $FF, 114
1300+ CCED FF 73        SunSqr33:               DB $FF, 115
1301+ CCEF 90 74        SunSqr34:               DB $90, 116
1302+ CCF1 FF 75                                DB $FF, 117
1303+ CCF3 79 75        SunSqr35:               DB $79, 117
1304+ CCF5 FF 76                                DB $FF, 118
1305+ CCF7 64 76        SunSqr36:               DB $64, 118
1306+ CCF9 64 77                                DB $64, 119
1307+ CCFB 51 77        SunSqr37:               DB $51, 119
1308+ CCFD 40 78        SunSqr38:               DB $40, 120
1309+ CCFF FF 79                                DB $FF, 121
1310+ CD01 31 79        SunSqr39:               DB $31, 121
1311+ CD03 FF 7A                                DB $FF, 122
1312+ CD05 24 7A        SunSqr3A:               DB $24, 122
1313+ CD07 FF 7B                                DB $FF, 123
1314+ CD09 19 7B        SunSqr3B:               DB $19, 123
1315+ CD0B FF 7C                                DB $FF, 124
1316+ CD0D 10 7C        SunSqr3C:               DB $10, 124
1317+ CD0F FF 7D                                DB $FF, 125
1318+ CD11 09 7D        SunSqr3D:               DB $09, 125
1319+ CD13 FF 7D                                DB $FF, 125
1320+ CD15 04 7E        SunSqr3E:               DB $04, 126
1321+ CD17 FF 7E                                DB $FF, 126
1322+ CD19 01 7F        SunSqr3F:               DB $01, 127
1323+ CD1B FF 7F                                DB $FF, 127
1324+ CD1D 00 80        SunSqr40:               DB $00, 128
1325+ CD1F FF 80                                DB $FF, 128
1326+ CD21 01 81        SunSqr41:               DB $01, 129
1327+ CD23 FF 82                                DB $FF, 130
1328+ CD25 04 82        SunSqr42:               DB $04, 130
1329+ CD27 FF 83                                DB $FF, 131
1330+ CD29 09 83        SunSqr43:               DB $09, 131
1331+ CD2B FF 84                                DB $FF, 132
1332+ CD2D 10 84        SunSqr44:               DB $10, 132
1333+ CD2F FF 85                                DB $FF, 133
1334+ CD31 19 85        SunSqr45:               DB $19, 133
1335+ CD33 FF 86                                DB $FF, 134
1336+ CD35 24 86        SunSqr46:               DB $24, 134
1337+ CD37 FF 87                                DB $FF, 135
1338+ CD39 31 87        SunSqr47:               DB $31, 135
1339+ CD3B FF 88                                DB $FF, 136
1340+ CD3D 40 88        SunSqr48:               DB $40, 136
1341+ CD3F FF 89                                DB $FF, 137
1342+ CD41 51 89        SunSqr49:               DB $51, 137
1343+ CD43 FF 8A                                DB $FF, 138
1344+ CD45 64 8A        SunSqr4A:               DB $64, 138
1345+ CD47 FF 8A                                DB $FF, 138
1346+ CD49 79 8B        SunSqr4B:               DB $79, 139
1347+ CD4B FF 8B                                DB $FF, 139
1348+ CD4D 90 8C        SunSqr4C:               DB $90, 140
1349+ CD4F FF 8C                                DB $FF, 140
1350+ CD51 A9 8D        SunSqr4D:               DB $A9, 141
1351+ CD53 FF 8D                                DB $FF, 141
1352+ CD55 C4 8E        SunSqr4E:               DB $C4, 142
1353+ CD57 FF 8E                                DB $FF, 142
1354+ CD59 E1 8F        SunSqr4F:               DB $E1, 143
1355+ CD5B FF 8F                                DB $FF, 143
1356+ CD5D FF 8F        SunSqr50:               DB $FF, 143
1357+ CD5F 00 90        SunSqr51:               DB $00, 144
1358+ CD61 FF 90                                DB $FF, 144
1359+ CD63 21 91        SunSqr52:               DB $21, 145
1360+ CD65 FF 91                                DB $FF, 145
1361+ CD67 44 92        SunSqr53:               DB $44, 146
1362+ CD69 FF 92                                DB $FF, 146
1363+ CD6B 69 93        SunSqr54:               DB $69, 147
1364+ CD6D FF 93                                DB $FF, 147
1365+ CD6F 90 94        SunSqr55:               DB $90, 148
1366+ CD71 FF 94                                DB $FF, 148
1367+ CD73 B9 95        SunSqr56:               DB $B9, 149
1368+ CD75 FF 95                                DB $FF, 149
1369+ CD77 E4 96        SunSqr57:               DB $E4, 150
1370+ CD79 FF 96                                DB $FF, 150
1371+ CD7B FF 96        SunSqr58:               DB $FF, 150
1372+ CD7D 11 97        SunSqr59:               DB $11, 151
1373+ CD7F FF 97                                DB $FF, 151
1374+ CD81 40 98        SunSqr5A:               DB $40, 152
1375+ CD83 FF 98                                DB $FF, 152
1376+ CD85 71 99        SunSqr5B:               DB $71, 153
1377+ CD87 FF 99                                DB $FF, 153
1378+ CD89 A4 9A        SunSqr5C:               DB $A4, 154
1379+ CD8B FF 9A                                DB $FF, 154
1380+ CD8D D9 9B        SunSqr5D:               DB $D9, 155
1381+ CD8F FF 9B                                DB $FF, 155
1382+ CD91 FF 9B        SunSqr5E:               DB $FF, 155
1383+ CD93 10 9C        SunSqr5F:               DB $10, 156
1384+ CD95 FF 9C                                DB $FF, 156
1385+ CD97 49 9D        SunSqr60:               DB $49, 157
1386+ CD99 FF 9D                                DB $FF, 157
1387+ CD9B 84 9E        SunSqr61:               DB $84, 158
1388+ CD9D FF 9E                                DB $FF, 158
1389+ CD9F C1 9F        SunSqr62:               DB $C1, 159
1390+ CDA1 FF 9F                                DB $FF, 159
1391+ CDA3 FF 9F        SunSqr63:               DB $FF, 159
1392+ CDA5 00 A0        SunSqr64:               DB $00, 160
1393+ CDA7 FF A0                                DB $FF, 160
1394+ CDA9 41 A1        SunSqr65:               DB $41, 161
1395+ CDAB FF A1                                DB $FF, 161
1396+ CDAD 84 A2        SunSqr66:               DB $84, 162
1397+ CDAF FF A2                                DB $FF, 162
1398+ CDB1 C9 A3        SunSqr67:               DB $C9, 163
1399+ CDB3 FF A3                                DB $FF, 163
1400+ CDB5 FF A3        SunSqr68:               DB $FF, 163
1401+ CDB7 10 A4        SunSqr69:               DB $10, 164
1402+ CDB9 FF A4                                DB $FF, 164
1403+ CDBB 59 A5        SunSqr6A:               DB $59, 165
1404+ CDBD FF A5                                DB $FF, 165
1405+ CDBF A4 A6        SunSqr6B:               DB $A4, 166
1406+ CDC1 FF A6                                DB $FF, 166
1407+ CDC3 FF A7        SunSqr6C:               DB $FF, 167
1408+ CDC5 FF A7        SunSqr6D:               DB $FF, 167
1409+ CDC7 40 A8        SunSqr6E:               DB $40, 168
1410+ CDC9 FF A8                                DB $FF, 168
1411+ CDCB 91 A9        SunSqr6F:               DB $91, 169
1412+ CDCD FF A9                                DB $FF, 169
1413+ CDCF E4 AA        SunSqr70:               DB $E4, 170
1414+ CDD1 FF AA                                DB $FF, 170
1415+ CDD3 00 AA        SunSqr71:               DB $00, 170
1416+ CDD5 FF AA                                DB $FF, 170
1417+ CDD7 39 AB        SunSqr72:               DB $39, 171
1418+ CDD9 FF AB                                DB $FF, 171
1419+ CDDB 90 AC        SunSqr73:               DB $90, 172
1420+ CDDD FF AC                                DB $FF, 172
1421+ CDDF E9 AD        SunSqr74:               DB $E9, 173
1422+ CDE1 FF AD                                DB $FF, 173
1423+ CDE3 FF AD        SunSqr75:               DB $FF, 173
1424+ CDE5 44 AE        SunSqr76:               DB $44, 174
1425+ CDE7 FF AE                                DB $FF, 174
1426+ CDE9 A1 AF        SunSqr77:               DB $A1, 175
1427+ CDEB FF AF                                DB $FF, 175
1428+ CDED FF AF        SunSqr78:               DB $FF, 175
1429+ CDEF 00 B0        SunSqr79:               DB $00, 176
1430+ CDF1 FF B0                                DB $FF, 176
1431+ CDF3 61 B1        SunSqr7A:               DB $61, 177
1432+ CDF5 FF B1                                DB $FF, 177
1433+ CDF7 C4 B2        SunSqr7B:               DB $C4, 178
1434+ CDF9 FF B2                                DB $FF, 178
1435+ CDFB FF B2        SunSqr7C:               DB $FF, 178
1436+ CDFD 29 B3        SunSqr7D:               DB $29, 179
1437+ CDFF FF B3                                DB $FF, 179
1438+ CE01 90 B4        SunSqr7E:               DB $90, 180
1439+ CE03 FF B4                                DB $FF, 180
1440+ CE05 F9 B5        SunSqr7F:               DB $F9, 181
1441+ CE07 FF B5                                DB $FF, 181
1442+ CE09 FF B5        SunSqr80:               DB $FF, 181
1443+ CE0B 64 B6        SunSqr81:               DB $64, 182
1444+ CE0D FF B6                                DB $FF, 182
1445+ CE0F D1 B7        SunSqr82:               DB $D1, 183
1446+ CE11 FF B7        SunSqr83:               DB $FF, 183
1447+ CE13 FF B7                                DB $FF, 183
1448+ CE15 40 B8        SunSqr84:               DB $40, 184
1449+ CE17 FF B8                                DB $FF, 184
1450+ CE19 B1 B9        SunSqr85:               DB $B1, 185
1451+ CE1B FF B9                                DB $FF, 185
1452+ CE1D FF B9        SunSqr86:               DB $FF, 185
1453+ CE1F 24 BA        SunSqr87:               DB $24, 186
1454+ CE21 FF BA                                DB $FF, 186
1455+ CE23 99 BB        SunSqr88:               DB $99, 187
1456+ CE25 FF BB                                DB $FF, 187
1457+ CE27 FF BB        SunSqr89:               DB $FF, 187
1458+ CE29 10 BC        SunSqr8A:               DB $10, 188
1459+ CE2B FF BC                                DB $FF, 188
1460+ CE2D 89 BD        SunSqr8B:               DB $89, 189
1461+ CE2F FF BD                                DB $FF, 189
1462+ CE31 FF BD        SunSqr8C:               DB $FF, 189
1463+ CE33 04 BE        SunSqr8D:               DB $04, 190
1464+ CE35 FF BE                                DB $FF, 190
1465+ CE37 81 BF        SunSqr8E:               DB $81, 191
1466+ CE39 FF BF                                DB $FF, 191
1467+ CE3B FF BF        SunSqr8F:               DB $FF, 191
1468+ CE3D 00 C0        SunSqr90:               DB $00, 192
1469+ CE3F FF C0                                DB $FF, 192
1470+ CE41 81 C1        SunSqr91:               DB $81, 193
1471+ CE43 FF C1                                DB $FF, 193
1472+ CE45 FF C1        SunSqr92:               DB $FF, 193
1473+ CE47 04 C2        SunSqr93:               DB $04, 194
1474+ CE49 FF C2                                DB $FF, 194
1475+ CE4B 89 C3        SunSqr94:               DB $89, 195
1476+ CE4D FF C3                                DB $FF, 195
1477+ CE4F FF C3        SunSqr95:               DB $FF, 195
1478+ CE51 10 C4        SunSqr96:               DB $10, 196
1479+ CE53 FF C4                                DB $FF, 196
1480+ CE55 99 C5        SunSqr97:               DB $99, 197
1481+ CE57 FF C5                                DB $FF, 197
1482+ CE59 FF C5        SunSqr98:               DB $FF, 197
1483+ CE5B 24 C6        SunSqr99:               DB $24, 198
1484+ CE5D FF C6                                DB $FF, 198
1485+ CE5F B1 C7        SunSqr9A:               DB $B1, 199
1486+ CE61 FF C7                                DB $FF, 199
1487+ CE63 FF C7        SunSqr9B:               DB $FF, 199
1488+ CE65 40 C8        SunSqr9C:               DB $40, 200
1489+ CE67 FF C8                                DB $FF, 200
1490+ CE69 D1 C9        SunSqr9D:               DB $D1, 201
1491+ CE6B FF C9                                DB $FF, 201
1492+ CE6D FF C9        SunSqr9E:               DB $FF, 201
1493+ CE6F 64 CA        SunSqr9F:               DB $64, 202
1494+ CE71 FF CA                                DB $FF, 202
1495+ CE73 F9 CB        SunSqrA0:               DB $F9, 203
1496+ CE75 FF CB                                DB $FF, 203
1497+ CE77 FF CB        SunSqrA1:               DB $FF, 203
1498+ CE79 90 CC        SunSqrA2:               DB $90, 204
1499+ CE7B FF CC                                DB $FF, 204
1500+ CE7D FF CC        SunSqrA3:               DB $FF, 204
1501+ CE7F 29 CD        SunSqrA4:               DB $29, 205
1502+ CE81 FF CD                                DB $FF, 205
1503+ CE83 C4 CE        SunSqrA5:               DB $C4, 206
1504+ CE85 FF CE                                DB $FF, 206
1505+ CE87 FF CE        SunSqrA6:               DB $FF, 206
1506+ CE89 61 CF        SunSqrA7:               DB $61, 207
1507+ CE8B FF CF                                DB $FF, 207
1508+ CE8D FF CF        SunSqrA8:               DB $FF, 207
1509+ CE8F 00 D0        SunSqrA9:               DB $00, 208
1510+ CE91 FF D0                                DB $FF, 208
1511+ CE93 A1 D1        SunSqrAA:               DB $A1, 209
1512+ CE95 FF D1                                DB $FF, 209
1513+ CE97 FF D1        SunSqrAB:               DB $FF, 209
1514+ CE99 44 D2        SunSqrAC:               DB $44, 210
1515+ CE9B FF D2                                DB $FF, 210
1516+ CE9D E9 D3        SunSqrAD:               DB $E9, 211
1517+ CE9F FF D3                                DB $FF, 211
1518+ CEA1 FF D3        SunSqrAE:               DB $FF, 211
1519+ CEA3 90 D4        SunSqrAF:               DB $90, 212
1520+ CEA5 FF D4        SunSqrB0:               DB $FF, 212
1521+ CEA7 39 D5        SunSqrB1:               DB $39, 213
1522+ CEA9 FF D5                                DB $FF, 213
1523+ CEAB E4 D6        SunSqrB2:               DB $E4, 214
1524+ CEAD FF D6                                DB $FF, 214
1525+ CEAF FF D6        SunSqrB3:               DB $FF, 214
1526+ CEB1 91 D7        SunSqrB4:               DB $91, 215
1527+ CEB3 FF D7                                DB $FF, 215
1528+ CEB5 FF D7        SunSqrB5:               DB $FF, 215
1529+ CEB7 40 D8        SunSqrB6:               DB $40, 216
1530+ CEB9 FF D8                                DB $FF, 216
1531+ CEBB F1 D9        SunSqrB7:               DB $F1, 217
1532+ CEBD FF D9                                DB $FF, 217
1533+ CEBF FF D9        SunSqrB8:               DB $FF, 217
1534+ CEC1 FF D9                                DB $FF, 217
1535+ CEC3 A4 DA        SunSqrB9:               DB $A4, 218
1536+ CEC5 FF DA        SunSqrBA:               DB $FF, 218 ; we can reuse SunSeqrBA as  $FF for B9 terminator as well as they have the same target
1537+ CEC7 59 DB        SunSqrBB:               DB $59, 219
1538+ CEC9 FF DB                                DB $FF, 219
1539+ CECB FF DB        SunSqrBC:               DB $FF, 219
1540+ CECD 10 DC        SunSqrBD:               DB $10, 220
1541+ CECF FF DC                                DB $FF, 220
1542+ CED1 C9 DD        SunSqrBE:               DB $C9, 221
1543+ CED3 FF DD                                DB $FF, 221
1544+ CED5 FF DD        SunSqrBF:               DB $FF, 221
1545+ CED7 84 DE        SunSqrC0:               DB $84, 222
1546+ CED9 FF DE                                DB $FF, 222
1547+ CEDB FF DE        SunSqrC1:               DB $FF, 222
1548+ CEDD 41 DF        SunSqrC2:               DB $41, 223
1549+ CEDF FF DF                                DB $FF, 223
1550+ CEE1 FF DF        SunSqrC3:               DB $FF, 223
1551+ CEE3 00 E0        SunSqrC4:               DB $00, 224
1552+ CEE5 FF E0                                DB $FF, 224
1553+ CEE7 C1 E1        SunSqrC5:               DB $C1, 225
1554+ CEE9 FF E1                                DB $FF, 225
1555+ CEEB FF E1        SunSqrC6:               DB $FF, 225
1556+ CEED 84 E2        SunSqrC7:               DB $84, 226
1557+ CEEF FF E2        SunSqrC8:               DB $FF, 226
1558+ CEF1 49 E3        SunSqrC9:               DB $49, 227
1559+ CEF3 FF E3                                DB $FF, 227
1560+ CEF5 FF E4        SunSqrCA:               DB $FF, 228
1561+ CEF7 10 E4        SunSqrCB:               DB $10, 228
1562+ CEF9 FF E4                                DB $FF, 228
1563+ CEFB D9 E5        SunSqrCC:               DB $D9, 229
1564+ CEFD FF E5                                DB $FF, 229
1565+ CEFF FF E5        SunSqrCD:               DB $FF, 229
1566+ CF01 A4 E6        SunSqrCE:               DB $A4, 230
1567+ CF03 FF E6                                DB $FF, 230
1568+ CF05 FF E6        SunSqrCF:               DB $FF, 230
1569+ CF07 71 E7        SunSqrD0:               DB $71, 231
1570+ CF09 FF E7                                DB $FF, 231
1571+ CF0B FF E7        SunSqrD1:               DB $FF, 231
1572+ CF0D 40 E8        SunSqrD2:               DB $40, 232
1573+ CF0F FF E8                                DB $FF, 232
1574+ CF11 FF E8        SunSqrD3:               DB $FF, 232
1575+ CF13 11 E9        SunSqrD4:               DB $11, 233
1576+ CF15 FF E9                                DB $FF, 233
1577+ CF17 E4 EA        SunSqrD5:               DB $E4, 234
1578+ CF19 FF EA                                DB $FF, 234
1579+ CF1B FF EA        SunSqrD6:               DB $FF, 234
1580+ CF1D B9 EB        SunSqrD7:               DB $B9, 235
1581+ CF1F FF EB                                DB $FF, 235
1582+ CF21 FF EB        SunSqrD8:               DB $FF, 235
1583+ CF23 90 EC        SunSqrD9:               DB $90, 236
1584+ CF25 FF EC                                DB $FF, 236
1585+ CF27 FF EC        SunSqrDA:               DB $FF, 236
1586+ CF29 69 ED        SunSqrDB:               DB $69, 237
1587+ CF2B FF ED                                DB $FF, 237
1588+ CF2D FF ED        SunSqrDC:               DB $FF, 237
1589+ CF2F 44 EE        SunSqrDD:               DB $44, 238
1590+ CF31 FF EE        SunSqrDE:               DB $FF, 238
1591+ CF33 21 EF        SunSqrDF:               DB $21, 239
1592+ CF35 FF EF                                DB $FF, 239
1593+ CF37 00 F0        SunSqrE0:               DB $00, 240
1594+ CF39 FF F0                                DB $FF, 240
1595+ CF3B 00 F0        SunSqrE1:               DB $00, 240
1596+ CF3D FF F0                                DB $FF, 240
1597+ CF3F E1 F1        SunSqrE2:               DB $E1, 241
1598+ CF41 FF F1                                DB $FF, 241
1599+ CF43 E1 F1        SunSqrE3:               DB $E1, 241
1600+ CF45 FF F1                                DB $FF, 241
1601+ CF47 C4 F2        SunSqrE4:               DB $C4, 242
1602+ CF49 FF F2                                DB $FF, 242
1603+ CF4B FF F2        SunSqrE5:               DB $FF, 242
1604+ CF4D A9 F3        SunSqrE6:               DB $A9, 243
1605+ CF4F FF F3                                DB $FF, 243
1606+ CF51 FF F3        SunSqrE7:               DB $FF, 243
1607+ CF53 FF F3                                DB $FF, 243
1608+ CF55 90 F3        SunSqrE8:               DB $90, 243
1609+ CF57 FF F4                                DB $FF, 244
1610+ CF59 FF F4        SunSqrE9:               DB $FF, 244
1611+ CF5B 79 F5        SunSqrEA:               DB $79, 245
1612+ CF5D FF F5                                DB $FF, 245
1613+ CF5F FF F5        SunSqrEB:               DB $FF, 245
1614+ CF61 64 F6        SunSqrEC:               DB $64, 246
1615+ CF63 FF F6        SunSqrED:               DB $FF, 246
1616+ CF65 51 F7        SunSqrEE:               DB $51, 247
1617+ CF67 FF F7                                DB $FF, 247
1618+ CF69 FF F7        SunSqrEF:               DB $FF, 247
1619+ CF6B 40 F8        SunSqrF0:               DB $40, 248
1620+ CF6D FF F8        SunSqrF1:               DB $FF, 248
1621+ CF6F 31 F9        SunSqrF2:               DB $31, 249
1622+ CF71 FF F9                                DB $FF, 249
1623+ CF73 FF F9        SunSqrF3:               DB $FF, 249
1624+ CF75 24 FA        SunSqrF4:               DB $24, 250
1625+ CF77 FF FA                                DB $FF, 250
1626+ CF79 FF FA        SunSqrF5:               DB $FF, 250
1627+ CF7B 19 FB        SunSqrF6:               DB $19, 251
1628+ CF7D FF FB                                DB $FF, 251
1629+ CF7F FF FB        SunSqrF7:               DB $FF, 251
1630+ CF81 10 FC        SunSqrF8:               DB $10, 252
1631+ CF83 FF FC                                DB $FF, 252
1632+ CF85 FF FC        SunSqrF9:               DB $FF, 252
1633+ CF87 09 FD        SunSqrFA:               DB $09, 253
1634+ CF89 FF FD                                DB $FF, 253
1635+ CF8B FF FD        SunSqrFB:               DB $FF, 253
1636+ CF8D 04 FE        SunSqrFC:               DB $04, 254
1637+ CF8F FF FE                                DB $FF, 254
1638+ CF91 FF FE        SunSqrFD:               DB $FF, 254
1639+ CF93 01 FF        SunSqrFE:               DB $01, 255
1640+ CF95 FF FF        SunSqrFF:               DB $FF, 255
1641+ CF97
1642+ CF97
1643+ CF97
1644+ CF97              SunBankSize  EQU $ - StartOfSun
1645+ CF97
1646+ CF97
# file closed: ./Universe/Sun/sun_data.asm
 948  CF97                                      DISPLAY "Bank ",BankSunData," - Bytes free ",/D, $2000 - ($-SunBankAddr), " - BankSunData"
 949  CF97              ; Bank 84  ------------------------------------------------------------------------------------------------------------------------
 950  CF97                                      SLOT    PlanetBankAddr
 951  CF97                                      PAGE    BankPlanetData
 952  CF97                                      ORG	    PlanetBankAddr,BankPlanetData
 953  C000                                      INCLUDE "./Universe/Planet/planet_data.asm"
# file opened: ./Universe/Planet/planet_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                      0123456789ABCDEF
  14+ C000 50 6C 61 6E  StartOfPlanet:     DB "Planet Data....."
  14+ C004 65 74 20 44
  14+ C008 61 74 61 2E
  14+ C00C 2E 2E 2E 2E
  15+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  16+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  17+ C010              ; Universe map substibute for INWK
  18+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  19+ C010              PBnKDataBlock:
  20+ C010                                      INCLUDE "./Universe/Planet/PlanetPosVars.asm"
# file opened: ././Universe/Planet/PlanetPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           PBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           PBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           PBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           PBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           PBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           PBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           PBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           PBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           PBnKzsgn                    DB  0                       ; INWK +8
  11++C019 00 00        PlanetCompassX              DW  0
  12++C01B 00 00        PlanetCompassY              DW  0
  13++C01D
# file closed: ././Universe/Planet/PlanetPosVars.asm
  21+ C01D                                      INCLUDE "./Universe/Planet/PlanetRotationMatrixVars.asm"
# file opened: ././Universe/Planet/PlanetRotationMatrixVars.asm
   1++C01D              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C01D              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C01D 00 00        PBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01F              PBnKrotmatSidev             equ PBnKrotmatSidevX
   5++C01F 00 00        PBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C021 00 00        PBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C023 00 00        PBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C025              PBnKrotmatRoofv             equ PBnKrotmatRoofvX
   9++C025 00 00        PBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C027 00 00        PBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C029 00 00        PBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C02B              PBnKrotmatNosev             EQU PBnKrotmatNosevX
  13++C02B 00 00        PBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C02D 00 00        PBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02F
# file closed: ././Universe/Planet/PlanetRotationMatrixVars.asm
  22+ C02F                                      INCLUDE "./Universe/Planet/PlanetAIRuntimeData.asm"
# file opened: ././Universe/Planet/PlanetAIRuntimeData.asm
   1++C02F              ; -- Ship AI data
   2++C02F 00           PBnKRotXCounter             DB  0                       ; INWK +29
   3++C030 00           PBnKRotZCounter             DB  0                       ; INWK +30
   4++C031 00           PBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C032 00           PBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C033 00           PBnKShipType                DB  0
# file closed: ././Universe/Planet/PlanetAIRuntimeData.asm
  23+ C034
  24+ C034
  25+ C034                                      INCLUDE "./Universe/Planet/PlanetXX16Vars.asm"
# file opened: ././Universe/Planet/PlanetXX16Vars.asm
   1++C034              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C034 00 00        PBnkTransmatSidevX          DW  0               ; XX16+0
   3++C036              PBnkTransmatSidev           EQU PBnkTransmatSidevX
   4++C036 00 00        PBnkTransmatSidevY          DW 0                ; XX16+2
   5++C038 00 00        PBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C03A 00 00        PBnkTransmatRoofvX          DW 0
   7++C03C              PBnkTransmatRoofv           EQU PBnkTransmatRoofvX
   8++C03C 00 00        PBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03E 00 00        PBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C040 00 00        PBnkTransmatNosevX          DW 0
  11++C042              PBnkTransmatNosev           EQU PBnkTransmatNosevX
  12++C042 00 00        PBnkTransmatNosevY          DW 0                ; XX16+2
  13++C044 00 00        PBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C046 00 00        PBnkTransmatTransX          DW 0
  15++C048 00 00        PBnkTransmatTransY          DW 0
  16++C04A 00 00        PBnkTransmatTransZ          DW 0
  17++C04C              PlanetXX16                      equ PBnkTransmatSidev
  18++C04C              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04C 00 00        PBnkTransInvRow0x0          DW 0
  20++C04E 00 00        PBnkTransInvRow0x1          DW 0
  21++C050 00 00        PBnkTransInvRow0x2          DW 0
  22++C052 00 00        PBnkTransInvRow0x3          DW 0
  23++C054 00 00        PBnkTransInvRow1y0          DW 0
  24++C056 00 00        PBnkTransInvRow1y1          DW 0
  25++C058 00 00        PBnkTransInvRow1y2          DW 0
  26++C05A 00 00        PBnkTransInvRow1y3          DW 0
  27++C05C 00 00        PBnkTransInvRow2z0          DW 0
  28++C05E 00 00        PBnkTransInvRow2z1          DW 0
  29++C060 00 00        PBnkTransInvRow2z2          DW 0
  30++C062 00 00        PBnkTransInvRow2z3          DW 0
  31++C064
  32++C064              PlanetXX16Inv             equ PBnkTransInvRow0x0
  33++C064
# file closed: ././Universe/Planet/PlanetXX16Vars.asm
  26+ C064                                      INCLUDE "./Universe/Planet/PlanetXX25Vars.asm"
# file opened: ././Universe/Planet/PlanetXX25Vars.asm
   1++C064              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C064 00           PBnKProjxLo                 DB  0
   3++C065 00           PBnKProjxHi                 DB  0
   4++C066 00           PBnKProjxSgn                DB  0
   5++C067              PBnKProjx                   EQU PBnKProjxLo
   6++C067 00           PBnKProjyLo                 DB  0
   7++C068 00           PBnKProjyHi                 DB  0
   8++C069 00           PBnKProjySgn                DB  0
   9++C06A              PBnKProjy                   EQU PBnKProjyLo
  10++C06A 00           PBnKProjzLo                 DB  0
  11++C06B 00           PBnKProjzHi                 DB  0
  12++C06C 00           PBnKProjzSgn                DB  0
  13++C06D              PBnKProjz                   EQU PBnKProjzLo
  14++C06D              PXX25                       EQU PBnKProjxLo
  15++C06D
# file closed: ././Universe/Planet/PlanetXX25Vars.asm
  27+ C06D                                      INCLUDE "./Universe/Planet/PlanetXX18Vars.asm"
# file opened: ././Universe/Planet/PlanetXX18Vars.asm
   1++C06D              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06D 00           PBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C06E 00           PBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06F 00           PBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C070              PBnKDrawCam0x               equ PBnKDrawCam0xLo
   6++C070 00           PBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C071 00           PBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C072 00           PBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C073              PBnKDrawCam0y               equ PBnKDrawCam0yLo
  10++C073 00           PBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C074 00           PBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C075 00           PBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C076              PBnKDrawCam0z               equ PBnKDrawCam0zLo
  14++C076              PXX18                       equ PBnKDrawCam0xLo
  15++C076
# file closed: ././Universe/Planet/PlanetXX18Vars.asm
  28+ C076
  29+ C076              ; Used to make 16 bit reads a little cleaner in source code
  30+ C076 00 00 00     PBnKzPoint                  DS  3
  31+ C079              PBnKzPointLo                equ PBnKzPoint
  32+ C079              PBnKzPointHi                equ PBnKzPoint+1
  33+ C079              PBnKzPointSign              equ PBnKzPoint+2
  34+ C079                                      INCLUDE "./Universe/Planet/PlanetXX15Vars.asm"
# file opened: ././Universe/Planet/PlanetXX15Vars.asm
   1++C079              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C079 00           PBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C07A 00           PBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C07B 00           PBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C07C 00           PBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C07D 00           PBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C07E 00           PBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07F
   9++C07F              PXX15                       equ PBnKXScaled
  10++C07F              PXX15VecX                   equ PXX15
  11++C07F              PXX15VecY                   equ PXX15+1
  12++C07F              PXX15VecZ                   equ PXX15+2
  13++C07F              PBnKXPoint                  equ PXX15
  14++C07F              PBnKXPointLo                equ PXX15+0
  15++C07F              PBnKXPointHi                equ PXX15+1
  16++C07F              PBnKXPointSign              equ PXX15+2
  17++C07F              PBnKYPoint                  equ PXX15+3
  18++C07F              PBnKYPointLo                equ PXX15+3
  19++C07F              PBnKYPointHi                equ PXX15+4
  20++C07F              PBnKYPointSign              equ PXX15+5
  21++C07F
# file closed: ././Universe/Planet/PlanetXX15Vars.asm
  35+ C07F                                      INCLUDE "./Universe/Planet/PlanetXX12Vars.asm"
# file opened: ././Universe/Planet/PlanetXX12Vars.asm
   1++C07F              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07F              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07F 00           PBnKXX12xLo                 DB  0               ; XX12+0
   4++C080 00           PBnKXX12xSign               DB  0               ; XX12+1
   5++C081 00           PBnKXX12yLo                 DB  0               ; XX12+2
   6++C082 00           PBnKXX12ySign               DB  0               ; XX12+3
   7++C083 00           PBnKXX12zLo                 DB  0               ; XX12+4
   8++C084 00           PBnKXX12zSign               DB  0               ; XX12+5
   9++C085 00 00 00...  PXX12Save                   DS  6
  10++C08B 00 00 00...  PXX12Save2                  DS  6
  11++C091              PXX12                       equ PBnKXX12xLo
  12++C091              varPXX12                    equ PBnKXX12xLo
  13++C091              ; Repurposed XX12 when plotting lines
  14++C091              PBnkY2                      equ PXX12+0
  15++C091              PbnKy2Lo                    equ PXX12+0
  16++C091              PBnkY2Hi                    equ PXX12+1
  17++C091              PBnkDeltaXLo                equ PXX12+2
  18++C091              PBnkDeltaXHi                equ PXX12+3
  19++C091              PBnkDeltaYLo                equ PXX12+4
  20++C091              PBnkDeltaYHi                equ PXX12+5
  21++C091              PbnkGradient                equ PXX12+2
  22++C091              PBnkTemp1                   equ PXX12+2
  23++C091              PBnkTemp1Lo                 equ PXX12+2
  24++C091              PBnkTemp1Hi                 equ PXX12+3
  25++C091              PBnkTemp2                   equ PXX12+3
  26++C091              PBnkTemp2Lo                 equ PXX12+3
  27++C091              PBnkTemp2Hi                 equ PXX12+4
  28++C091
# file closed: ././Universe/Planet/PlanetXX12Vars.asm
  36+ C091
  37+ C091
  38+ C091              ; Post clipping the results are now 8 bit
  39+ C091 00           PBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  40+ C092 00           PBnKProjectedY              DB  0
  41+ C093 00           PBnKProjectedX              DB  0
  42+ C094              PBnKProjected               equ PBnKProjectedY  ; resultant projected position
  43+ C094 00 00 00...  PLanetXX15Save              DS  8
  44+ C09C 00 00 00...  PLanetXX15Save2             DS  8
  45+ C0A4
  46+ C0A4              PBnK_Data_len               EQU $ - PBnKDataBlock
  47+ C0A4
  48+ C0A4              ; --------------------------------------------------------------
  49+ C0A4 21 10 C0     ResetPBnKData:          ld      hl,PBnKDataBlock
  50+ C0A7 11 94 00                             ld      de,PBnK_Data_len
  51+ C0AA AF                                   xor     a
  52+ C0AB CD 2E 7F                             call    memfill_dma
  53+ C0AE C9                                   ret
  54+ C0AF              ; --------------------------------------------------------------
  55+ C0AF 21 10 C0     ResetPBnKPosition:      ld      hl,PBnKxlo
  56+ C0B2 06 09                                ld      b, 3*3
  57+ C0B4 AF                                   xor     a
  58+ C0B5 77           .zeroLoop:              ld      (hl),a
  59+ C0B6 23                                   inc     hl
  60+ C0B7 10 FC                                djnz    .zeroLoop
  61+ C0B9 C9                                   ret
  62+ C0BA              ; This uses UBNKNodeArray as the list
  63+ C0BA              ; the array is 256 * 2 bytes
  64+ C0BA              ; counter is current row y pos
  65+ C0BA              ; byte 1 is start x pos
  66+ C0BA              ; byte 2 is end x pos
  67+ C0BA              ; if they are both 0 then skip
  68+ C0BA              ; its always horizontal, yellow
  69+ C0BA
  70+ C0BA              ; PLANET
  71+ C0BA
  72+ C0BA              ; --------------------------------------------------------------
  73+ C0BA              ; This sets current universe object to a planet,they use sign + 23 bit positions
  74+ C0BA CD A4 C0     CreatePlanet:           call    ResetPBnKData
  75+ C0BD 3A 2B 84                             ld      a,(DisplayTekLevel)
  76+ C0C0 E6 02                                and     %00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
  77+ C0C2 F6 80                                or      %10000000
  78+ C0C4 32 33 C0                             ld      (PBnKShipType),a
  79+ C0C7                                      MaxUnivPitchAndRoll
  79+ C0C7 3E 7F       >                        ld      a,127
  79+ C0C9 32 48 C0    >                        ld      (UBnKRotXCounter),a
  79+ C0CC 32 49 C0    >                        ld      (UBnKRotZCounter),a
  80+ C0CF 3A 96 84                             ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
  81+ C0D2 E6 03                                and     %00000011               ; .
  82+ C0D4 CE 03                                adc     3                       ; .
  83+ C0D6 32 18 C0                             ld      (PBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
  84+ C0D9 CB 1F                                rr      a
  85+ C0DB 32 12 C0                             ld      (PBnKxsgn),a
  86+ C0DE 32 15 C0                             ld      (PBnKysgn),a
  87+ C0E1 C9                                   ret
  88+ C0E2
  89+ C0E2 CD A4 C0     CreatePlanetLaunched:   call    ResetPBnKData
  90+ C0E5 21 00 00                             ld      hl,0
  91+ C0E8                                      ZeroA
  91+ C0E8 AF          >                        xor a
  92+ C0E9 22 10 C0                             ld      (PBnKxlo),hl
  93+ C0EC 22 13 C0                             ld      (PBnKylo),hl
  94+ C0EF 21 FF FF                             ld      hl,$FFFF
  95+ C0F2 22 16 C0                             ld      (PBnKzlo),hl
  96+ C0F5 32 12 C0                             ld      (PBnKxsgn),a
  97+ C0F8 32 15 C0                             ld      (PBnKysgn),a
  98+ C0FB 32 18 C0                             ld      (PBnKzsgn),a
  99+ C0FE                                      MaxUnivPitchAndRoll
  99+ C0FE 3E 7F       >                        ld      a,127
  99+ C100 32 48 C0    >                        ld      (UBnKRotXCounter),a
  99+ C103 32 49 C0    >                        ld      (UBnKRotZCounter),a
 100+ C106 C9                                   ret
 101+ C107              ; NEED FINSIHGING
 102+ C107
 103+ C107
 104+ C107 ED 4B 7D C0  ScalePlanetTo8Bit:		ld			bc,(PBnKZScaled)
 105+ C10B 2A 79 C0                             ld			hl,(PBnKXScaled)
 106+ C10E ED 5B 7B C0                          ld			de,(PBnKYScaled)
 107+ C112 78           .SetABSbc:              ld			a,b
 108+ C113 DD 67                                ld			ixh,a
 109+ C115 E6 7F                                and			SignMask8Bit
 110+ C117 47                                   ld			b,a									; bc = ABS bc
 111+ C118 7C           .SetABShl:              ld			a,h
 112+ C119 DD 6F                                ld			ixl,a
 113+ C11B E6 7F                                and			SignMask8Bit
 114+ C11D 67                                   ld			h,a									; hl = ABS hl
 115+ C11E 7A           .SetABSde:              ld			a,d
 116+ C11F FD 67                                ld			iyh,a
 117+ C121 E6 7F                                and			SignMask8Bit
 118+ C123 57                                   ld			d,a									; de = ABS de
 119+ C124 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 120+ C125 B4                                   or			h                                   ; XX15+1	\ x hi
 121+ C126 B2                                   or			d                                   ; XX15+4	\ y hi
 122+ C127 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 123+ C129                                      ShiftHLRight1
 123+ C129 CB 3C       >			   srl h
 123+ C12B CB 1D       >			   rr  l
 124+ C12D                                      ShiftDERight1
 124+ C12D CB 3A       >			   srl d
 124+ C12F CB 1B       >			   rr  e
 125+ C131                                      ShiftBCRight1
 125+ C131 CB 38       >			   srl b
 125+ C133 CB 19       >			   rr  c
 126+ C135 C3 24 C1                             jp          .ScaleNodeTo8BitLoop
 127+ C138              ; now we have scaled values we have to deal with sign
 128+ C138 DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 129+ C13A E6 80                                and			SignOnly8Bit
 130+ C13C B0                                   or			b
 131+ C13D 47                                   ld			b,a
 132+ C13E DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 133+ C140 E6 80                                and			SignOnly8Bit
 134+ C142 B4                                   or			h
 135+ C143 67                                   ld			h,a
 136+ C144 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 137+ C146 E6 80                                and			SignOnly8Bit
 138+ C148 B2                                   or			d
 139+ C149 57                                   ld			d,a
 140+ C14A ED 43 7D C0  .SignsDoneSaveResult:	ld			(PBnKZScaled),bc
 141+ C14E 22 79 C0                             ld			(PBnKXScaled),hl
 142+ C151 ED 53 7B C0                          ld			(PBnKYScaled),de
 143+ C155 78                                   ld			a,b
 144+ C156 32 9B 83                             ld			(varU),a
 145+ C159 79                                   ld			a,c
 146+ C15A 32 BA 83                             ld			(varT),a
 147+ C15D C9                                   ret
 148+ C15E
 149+ C15E              ;--------------------------------------------------------------------------------------------------------
 150+ C15E                                      include "./Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm"
# file opened: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
   1++C15E              CopyPSXX12ScaledToPXX18:
   2++C15E              CopyResultToPDrawCam:
   3++C15E                      ldCopyByte PXX12         ,PXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C15E 3A 7F C0    >                        ld       a,(PXX12)
   3++C161 32 6D C0    >                        ld       (PXX18),a
   4++C164                      ldCopyByte PXX12+1       ,PXX18+2           ; XX12+1 => XX18+2
   4++C164 3A 80 C0    >                        ld       a,(PXX12+1)
   4++C167 32 6F C0    >                        ld       (PXX18+2),a
   5++C16A                      ldCopyByte PXX12+2       ,PXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C16A 3A 81 C0    >                        ld       a,(PXX12+2)
   5++C16D 32 70 C0    >                        ld       (PXX18+3),a
   6++C170                      ldCopyByte PXX12+3       ,PXX18+5           ; XX12+3 => XX18+5
   6++C170 3A 82 C0    >                        ld       a,(PXX12+3)
   6++C173 32 72 C0    >                        ld       (PXX18+5),a
   7++C176                      ldCopyByte PXX12+4       ,PXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C176 3A 83 C0    >                        ld       a,(PXX12+4)
   7++C179 32 73 C0    >                        ld       (PXX18+6),a
   8++C17C                      ldCopyByte PXX12+5       ,PXX18+8           ; XX12+5 => XX18+8
   8++C17C 3A 84 C0    >                        ld       a,(PXX12+5)
   8++C17F 32 75 C0    >                        ld       (PXX18+8),a
   9++C182 C9                   ret
  10++C183
# file closed: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
 151+ C183
 152+ C183              ; ......................................................                                                         ;;;
 153+ C183                          INCLUDE "./Universe/Planet/PlanetApplyMyRollAndPitch.asm"
# file opened: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
   1++C183
   2++C183              ;----------------------------------------------------------------------------------------------------------------------------------
   3++C183              ; Planet version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
   4++C183              ; Need to write a test routine for roll and pitchs
   5++C183 00 00 00 00  PlanetAlphaMulX            DS 4
   6++C187 00 00 00 00  PlanetAlphaMulY            DS 4
   7++C18B 00 00 00 00  PlanetBetaMulZ             DS 4
   8++C18F 00 00 00     PlanetK2                   DS 3
   9++C192
  10++C192 3A B2 82     PlanetApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  11++C195 21 A5 82                             ld      hl,BETA
  12++C198 B6                                   or      (hl)
  13++C199 E6 7F                                and     SignMask8Bit
  14++C19B CA 4C C2                             jp      z,.NoRotation
  15++C19E 3A B2 82     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
  16++C1A1 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
  17++C1A3 57                                   ld      d,a                         ; .
  18++C1A4 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  19++C1A7 5F                                   ld      e,a                         ; .
  20++C1A8 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  21++C1AB CD E1 96                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  22++C1AE              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
  23++C1AE                                      ;ld      (PlanetAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
  24++C1AE 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  25++C1AF 32 84 C1                             ld      (PlanetAlphaMulX+1),a
  26++C1B2 7B                                   ld      a,e
  27++C1B3 32 85 C1                             ld      (PlanetAlphaMulX+2),a
  28++C1B6 7A                                   ld      a,d
  29++C1B7 32 86 C1                             ld      (PlanetAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
  30++C1BA ED 5B 14 C0  .CalcK2:                ld      de,(SBnKyhi)                ; DEL = Y
  31++C1BE 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  32++C1C1 6F                                   ld      l,a                         ; .
  33++C1C2 ED 4B 85 C1                          ld      bc,(PlanetAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
  34++C1C6 3A 84 C1                             ld      a,(PlanetAlphaMulX+1)          ; Deal with sign in byte 4
  35++C1C9 67                                   ld      h,a                         ; .
  36++C1CA CD 5D 94                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
  37++C1CD 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
  38++C1CE 32 8F C1                             ld      (PlanetK2),a                   ; we also need to save l for teh beta k2 calc
  39++C1D1 ED 53 90 C1                          ld      (PlanetK2+1),de                ;
  40++C1D5 EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
  41++C1D6 5F                                   ld      e,a                         ; .
  42++C1D7 3A A5 82                             ld      a,(BETA)                    ; D = BETA
  43++C1DA 57                                   ld      d,a                         ; .
  44++C1DB CD E1 96                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
  45++C1DE ED 4B 17 C0  .CalcZ:                 ld      bc,(SBnKzhi)                ; BCH = z
  46++C1E2 3A 16 C0                             ld      a,(SBnKzlo)                 ;
  47++C1E5 67                                   ld      h,a                         ;
  48++C1E6 CD 5D 94                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
  49++C1E9 ED 53 17 C0                          ld      (SBnKzhi),de                ; z = resuklt
  50++C1ED 7D                                   ld      a,l                         ; .
  51++C1EE 32 16 C0                             ld      (SBnKzlo),a                 ; .
  52++C1F1 3A A5 82     .CalcBetaZ:             ld      a,(BETA)
  53++C1F4 EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
  54++C1F6 57                                   ld      d,a                         ; .
  55++C1F7 3A 16 C0                             ld      a,(SBnKzlo)                 ; HLE = z
  56++C1FA 5F                                   ld      e,a                         ; .
  57++C1FB 2A 17 C0                             ld      hl,(SBnKzhi)                ; .
  58++C1FE CD E1 96                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
  59++C201              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
  60++C201                                      ;ld      (PlanetBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
  61++C201                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
  62++C201                                      ;ld      (PlanetBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  63++C201                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  64++C201                                      ;ld      (PlanetBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  65++C201                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  66++C201                                      ;ld      (PlanetBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
  67++C201 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
  68++C203 65                                   ld      h,l
  69++C204 ED 5B 90 C1                          ld      de,(PlanetK2+1)                ; DEL = k2
  70++C208 3A 8F C1                             ld      a,(PlanetK2)
  71++C20B 6F                                   ld      l,a
  72++C20C CD 5D 94                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
  73++C20F ED 53 14 C0                          ld      (SBnKyhi),de                ; y = DEL = K2 - Beta * Z
  74++C213 7D                                   ld      a,l                         ; .
  75++C214 32 13 C0                             ld      (SBnKylo),a                 ; .
  76++C217 3A B2 82     .CalcAlphaMulY:         ld      a,(ALPHA)
  77++C21A 57                                   ld      d,a                         ; d = alpha (Q value)
  78++C21B 3A 13 C0                             ld      a,(SBnKylo)                 ; HLE = x sgn, hi, lo
  79++C21E 5F                                   ld      e,a                         ; .
  80++C21F 2A 14 C0                             ld      hl,(SBnKyhi)                ; .
  81++C222 CD E1 96                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
  82++C225 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
  83++C226 32 87 C1                             ld      (PlanetAlphaMulY),a            ; save sign from result, ELC holds actual result
  84++C229 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  85++C22A 32 88 C1                             ld      (PlanetAlphaMulY+1),a
  86++C22D 7B                                   ld      a,e
  87++C22E 32 89 C1                             ld      (PlanetAlphaMulY+2),a
  88++C231 7A                                   ld      a,d
  89++C232 32 8A C1                             ld      (PlanetAlphaMulY+3),a
  90++C235 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
  91++C237 65                                   ld      h,l                         ; .
  92++C238 ED 5B 11 C0                          ld      de,(SBnKxhi)                ; DEL = Y
  93++C23C 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
  94++C23F 6F                                   ld      l,a                         ; .
  95++C240 CD 5D 94                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
  96++C243 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
  97++C244 63                                   ld      h,e                         ;
  98++C245 32 12 C0     .CopyResultTo2:         ld      (SBnKxlo+2),a               ; .
  99++C248 22 10 C0                             ld      (SBnKxlo) ,hl               ; .
 100++C24B C9                                   ret
 101++C24C 3A 98 83     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 102++C24F                                      ReturnIfAIsZero
 102++C24F A7          >                        and     a
 102++C250 C8          >                        ret     z
 103++C251 0E 00                                ld      c,0                         ;
 104++C253 67                                   ld      h,a                         ;
 105++C254 06 80                                ld      b,$80                       ;
 106++C256 ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 107++C25A 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 108++C25D 6F                                   ld      l,a                         ; .
 109++C25E CD 5D 94                             call    AddBCHtoDELsigned           ; update speed
 110++C261 ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 111++C265 7D                                   ld      a,l
 112++C266 32 16 C0                             ld      (SBnKzlo),a                ;
 113++C269 C9                                   ret
 114++C26A
# file closed: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
 154+ C26A
 155+ C26A 00           PlanetOnScreen          DB 0
 156+ C26B 00 00        PlanetScrnX             DW  0       ; signed
 157+ C26D 00 00        PlanetScrnY             DW  0       ; signed
 158+ C26F 00           PlanetRadius            DB  0       ; unsigned
 159+ C270              ; draw circle
 160+ C270
 161+ C270              ;
 162+ C270              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 163+ C270
 164+ C270 00 00 00 00  PlanetVarK                 DS 4
 165+ C274 00 00 00     PlanetVarP                 DS 3
 166+ C277 00           PlanetVarQ                 DS 1
 167+ C278 00           PlanetVarR                 DS 1
 168+ C279 00           PlanetVarS                 DS 1
 169+ C27A 00           PlanetVarT                 DS 1
 170+ C27B
 171+ C27B              ; Optimisation
 172+ C27B              ; if a <> 0
 173+ C27B              ;       divide AH by CD
 174+ C27B              ; if h <> 0
 175+ C27B              ;      if c <> 0 return 0
 176+ C27B              ;      else
 177+ C27B              ;        divide HL by DE
 178+ C27B              ; if l <>0
 179+ C27B              ;      if c or d <> 0 return 0
 180+ C27B              ;      else
 181+ C27B              ;        divide l by e
 182+ C27B              ;
 183+ C27B 47           PLanetAHLequAHLDivCDE:  ld      b,a                         ; save a reg
 184+ C27C 79                                   ld      a,c                         ; check for divide by zero
 185+ C27D B2                                   or      d                           ; .
 186+ C27E B3                                   or      e                           ; .
 187+ C27F                                      JumpIfZero      .divideByZero       ; .
 187+ C27F CA 98 C2    >                        jp	z,.divideByZero
 188+ C282 78                                   ld      a,b                         ; get a back
 189+ C283                                      JumpIfAIsNotZero    .divideAHLbyCDE
 189+ C283 A7          >                        and     a
 189+ C284 C2 9F C2    >                        jp	    nz,.divideAHLbyCDE
 190+ C287 7C           .AIsZero:               ld      a,h
 191+ C288                                      JumpIfAIsNotZero    .divideHLbyDE
 191+ C288 A7          >                        and     a
 191+ C289 C2 A6 C2    >                        jp	    nz,.divideHLbyDE
 192+ C28C 7D           .HIsZero:               ld      a,l
 193+ C28D                                      JumpIfAIsNotZero    .divideLbyE
 193+ C28D A7          >                        and     a
 193+ C28E C2 B5 C2    >                        jp	    nz,.divideLbyE
 194+ C291              .resultIsZero:          ZeroA
 194+ C291 AF          >                        xor a
 195+ C292 67                                   ld      h,a                        ; result is zero so set hlde
 196+ C293 6F                                   ld      l,a                        ; result is zero so set hlde
 197+ C294 54 5D                                ld      de,hl
 198+ C296                                      ClearCarryFlag
 198+ C296 B7          >                        or a
 199+ C297 C9                                   ret
 200+ C298 3E FF        .divideByZero:          ld      a,$FF
 201+ C29A 67                                   ld      h,a
 202+ C29B 6F                                   ld      l,a
 203+ C29C 54 5D                                ld      de,hl
 204+ C29E                                      SetCarryFlag
 204+ C29E 37          >                        scf
 205+ C29F              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 206+ C29F              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 207+ C29F CD 54 95     .divideAHLbyCDE:        call    Div24by24
 208+ C2A2 EB                                   ex      hl,de                         ; ahl is result
 209+ C2A3 79                                   ld      a,c                           ; ahl is result
 210+ C2A4                                      ClearCarryFlag
 210+ C2A4 B7          >                        or a
 211+ C2A5 C9                                  ret
 212+ C2A6              ; AHL = 0hl/0de as A is zero
 213+ C2A6 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 214+ C2A7                                      JumpIfAIsNotZero   .resultIsZero
 214+ C2A7 A7          >                        and     a
 214+ C2A8 C2 91 C2    >                        jp	    nz,.resultIsZero
 215+ C2AB 44 4D                                ld      bc,hl
 216+ C2AD CD B0 99                             call    BC_Div_DE                   ; BC = HL/DE
 217+ C2B0 60 69                                ld      hl,bc
 218+ C2B2                                      ZeroA                               ; so we can set A to Zero
 218+ C2B2 AF          >                        xor a
 219+ C2B3                                      ClearCarryFlag
 219+ C2B3 B7          >                        or a
 220+ C2B4 C9                                   ret
 221+ C2B5              ; AHL = 00l/00e as A and H are zero
 222+ C2B5 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 223+ C2B6 B2                                   or      d
 224+ C2B7                                      JumpIfAIsNotZero   .resultIsZero
 224+ C2B7 A7          >                        and     a
 224+ C2B8 C2 91 C2    >                        jp	    nz,.resultIsZero
 225+ C2BB 4B                                   ld      c,e
 226+ C2BC 5D                                   ld      e,l
 227+ C2BD CD 72 99                             call    E_Div_C
 228+ C2C0 6F                                   ld      l,a
 229+ C2C1                                      ZeroA
 229+ C2C1 AF          >                        xor a
 230+ C2C2 67                                   ld      h,a
 231+ C2C3                                      ClearCarryFlag
 231+ C2C3 B7          >                        or a
 232+ C2C4 C9                                   ret
 233+ C2C5
 234+ C2C5
 235+ C2C5 47           PlanetProcessVertex:    ld      b,a                         ; save sign byte
 236+ C2C6 ED 5B 16 C0  .PlanetProjectToEye:    ld      de,(PBnKzlo)                ; X Pos = X / Z
 237+ C2CA 3A 18 C0                             ld      a,(PBnKzsgn)                ; CDE = z
 238+ C2CD FD 67                                ld      iyh,a                       ; save sign
 239+ C2CF                                      ClearSignBitA
 239+ C2CF E6 7F       >                        and     SignMask8Bit
 240+ C2D1                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 241+ C2D1              ;                        ld      c,a                         ;
 242+ C2D1 5A                                   ld      e,d
 243+ C2D2 57                                   ld      d,a
 244+ C2D3 0E 00                                ld      c,0
 245+ C2D5                                      ; added above to correct positioning as in reality its X/(Z/256)
 246+ C2D5 78                                   ld      a,b                         ; restore sign byte
 247+ C2D6 FD 6F                                ld      iyl,a                       ; save sign
 248+ C2D8                                      ClearSignBitA
 248+ C2D8 E6 7F       >                        and     SignMask8Bit
 249+ C2DA CD 7B C2                             call PLanetAHLequAHLDivCDE             ; AHL = AHL/CDE unsigned
 250+ C2DD              .CheckPosOnScreenX:     JumpIfAIsNotZero .IsOffScreen         ; if A has a value then its way too large regardless of sign
 250+ C2DD A7          >                        and     a
 250+ C2DE C2 FB C2    >                        jp	    nz,.IsOffScreen
 251+ C2E1                                      JumpOnLeadSignSet h, .IsOffScreen      ; or bit 7 set of h
 251+ C2E1 7C          >                        ld      a,h
 251+ C2E2 E6 80       >                        and     SignOnly8Bit
 251+ C2E4 C2 FB C2    >                        jp      nz,.IsOffScreen
 252+ C2E7 7C                                   ld      a,h
 253+ C2E8                                      ReturnIfAGTEusng 4                  ; if a > 1024 then its way too large regardless of sign
 253+ C2E8 FE 04       >                        cp    4
 253+ C2EA D0          >                        ret	 nc
 254+ C2EB FD 7C                                ld      a,iyh                       ; now deal with the sign
 255+ C2ED FD AD                                xor     iyl
 256+ C2EF                                      SignBitOnlyA                        ; a= resultant sign
 256+ C2EF E6 80       >                        and     SignOnly8Bit
 257+ C2F1 28 06                                jr      z,.calculatedVert           ; result is positive so we don't 2's compliment it
 258+ C2F3              .XIsNegative:           NegHL                               ; make 2's c as negative
 258+ C2F3 AF          >                    xor a
 258+ C2F4 95          >                    sub l
 258+ C2F5 6F          >                    ld l,a
 258+ C2F6 9F          >                    sbc a,a
 258+ C2F7 94          >                    sub h
 258+ C2F8 67          >                    ld h,a
 259+ C2F9              .calculatedVert:        ClearCarryFlag
 259+ C2F9 B7          >                        or a
 260+ C2FA C9                                   ret
 261+ C2FB 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 262+ C2FE FD 7C                                ld      a,iyh
 263+ C300 FD AD                                xor     iyl
 264+ C302                                      SignBitOnlyA
 264+ C302 E6 80       >                        and     SignOnly8Bit
 265+ C304 28 02                                jr      z,.calculatedOffScreen
 266+ C306 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 267+ C307 23                                   inc     hl                          ; .
 268+ C308              .calculatedOffScreen:   SetCarryFlag
 268+ C308 37          >                        scf
 269+ C309 C9                                   ret
 270+ C30A
 271+ C30A
 272+ C30A              ; .........................................................................................................................
 273+ C30A              ; we only hit this if z is positive so we can ignore signs
 274+ C30A ED 4B 16 C0  PlanetCalculateRadius:  ld      bc,(PBnKzlo)                ; DBC = z position
 275+ C30E 3A 18 C0                             ld      a,(PBnKzsgn)                ;
 276+ C311 57                                   ld      d,a                         ;
 277+ C312 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 278+ C315 CD 1D 98                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 279+ C318 B4                                   or      h                           ; if A or H are not 0 then max Radius
 280+ C319                                      JumpIfAIsZero  .SaveRadius
 280+ C319 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 280+ C31A CA 1F C3    >                        jp	    z, .SaveRadius
 281+ C31D 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 282+ C31F 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 283+ C320 F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 284+ C322 32 6F C2                             ld      (PlanetRadius),a               ; save a copy of radius now for later
 285+ C325 5F                                   ld      e,a                         ; as later code expects it to be in e
 286+ C326 C9                                   ret
 287+ C327
 288+ C327              ; Shorter version when sun does not need to be processed to screen
 289+ C327 3A 12 C0     PlanetUpdateCompass:    ld      a,(PBnKxsgn)
 290+ C32A 2A 10 C0                             ld      hl,(PBnKxlo)
 291+ C32D CD C5 C2                             call    PlanetProcessVertex
 292+ C330 22 19 C0                             ld      (PlanetCompassX),hl
 293+ C333 3A 15 C0                             ld      a,(PBnKysgn)
 294+ C336 2A 13 C0                             ld      hl,(PBnKylo)
 295+ C339 CD C5 C2                             call    PlanetProcessVertex
 296+ C33C 22 1B C0                             ld      (PlanetCompassY),hl
 297+ C33F C9                                   ret
 298+ C340
 299+ C340                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 300+ C340 CD 92 C1     PlanetUpdateAndRender:     call    PlanetApplyMyRollAndPitch
 301+ C343 3A 18 C0     .CheckDrawable:         ld      a,(PBnKzsgn)
 302+ C346                                      JumpIfAGTENusng 48,  PlanetUpdateCompass ; at a distance over 48 its too far away
 302+ C346 FE 30       >                        cp     48
 302+ C348 D2 27 C3    >                        jp		nc,PlanetUpdateCompass
 303+ C34B 21 17 C0                             ld      hl,PBnKzhi                  ; if the two high bytes are zero then its too close
 304+ C34E B6                                   or      (hl)
 305+ C34F                                      JumpIfAIsZero       PlanetUpdateCompass
 305+ C34F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 305+ C350 CA 27 C3    >                        jp	    z, PlanetUpdateCompass
 306+ C353 3A 12 C0     .calculateX:            ld      a,(PBnKxsgn)
 307+ C356 2A 10 C0                             ld      hl,(PBnKxlo)
 308+ C359 CD C5 C2                             call    PlanetProcessVertex            ; now returns carry set for failure
 309+ C35C 22 19 C0                             ld      (PlanetCompassX),hl
 310+ C35F D8                                   ret     c
 311+ C360 1E 80        .calculatedX:           ld      e,ScreenCenterX
 312+ C362 16 00                                ld      d,0
 313+ C364                                      ClearCarryFlag
 313+ C364 B7          >                        or a
 314+ C365 ED 5A                                adc     hl,de
 315+ C367                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 316+ C367 22 6B C2                             ld      (PlanetScrnX),hl               ; save projected X Position, 2's compliment
 317+ C36A 3A 15 C0     .calculateY:            ld      a,(PBnKysgn)
 318+ C36D 2A 13 C0                             ld      hl,(PBnKylo)
 319+ C370 CD C5 C2                             call    PlanetProcessVertex            ; now returns carry set for failure
 320+ C373 22 1B C0                             ld      (PlanetCompassY),hl
 321+ C376 D8                                   ret     c
 322+ C377 1E 60        .calculatedY:           ld      e,ScreenCenterY
 323+ C379 16 00                                ld      d,0
 324+ C37B EB                                   ex      de,hl
 325+ C37C                                      ClearCarryFlag
 325+ C37C B7          >                        or a
 326+ C37D ED 52                                sbc     hl,de
 327+ C37F                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 328+ C37F 22 6D C2                             ld      (PlanetScrnY),hl               ; save projected Y Position, 2's compliment
 329+ C382              ; .........................................................................................................................
 330+ C382 CD 0A C3                             call    PlanetCalculateRadius
 331+ C385              ; .........................................................................................................................
 332+ C385 2A 6B C2     .CheckIfSunOnScreen:    ld      hl,(PlanetScrnX)               ; get x pixel position
 333+ C388 FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 334+ C38B 16 00                                ld      d,0                         ; e still holds radius
 335+ C38D 7C                                   ld      a,h
 336+ C38E                                      JumpOnLeadSignSet   h,.CheckXNegative
 336+ C38E 7C          >                        ld      a,h
 336+ C38F E6 80       >                        and     SignOnly8Bit
 336+ C391 C2 A7 C3    >                        jp      nz,.CheckXNegative
 337+ C394 7C           .CheckXPositive:        ld      a,h
 338+ C395                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 338+ C395 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 338+ C396 CA B0 C3    >                        jp	    z, .XOnScreen
 339+ C399 16 00                                ld      d,0                         ; de = radius
 340+ C39B                                      ClearCarryFlag
 340+ C39B B7          >                        or a
 341+ C39C ED 52                                sbc     hl,de
 342+ C39E FA B0 C3                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 343+ C3A1 7C                                   ld      a,h
 344+ C3A2                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 344+ C3A2 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 344+ C3A3 CA B0 C3    >                        jp	    z, .XOnScreen
 345+ C3A6 C9                                   ret                                 ; None of the X coordinates are on screen
 346+ C3A7 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 347+ C3A9                                      ClearCarryFlag
 347+ C3A9 B7          >                        or a
 348+ C3AA ED 5A                                adc     hl,de                       ; so we have hl - de
 349+ C3AC F2 B0 C3                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 350+ C3AF C9                                   ret                                 ; else x is totally off the left side of the screen
 351+ C3B0              ; .........................................................................................................................
 352+ C3B0 2A 6D C2     .XOnScreen:             ld      hl,(PlanetScrnY)               ; now Check Y coordinate
 353+ C3B3                                      JumpOnLeadSignSet   h,.CheckYNegative
 353+ C3B3 7C          >                        ld      a,h
 353+ C3B4 E6 80       >                        and     SignOnly8Bit
 353+ C3B6 C2 D7 C3    >                        jp      nz,.CheckYNegative
 354+ C3B9 7C           .CheckYPositive:        ld      a,h
 355+ C3BA                                      JumpIfAIsNotZero   .PosYCheck2
 355+ C3BA A7          >                        and     a
 355+ C3BB C2 C4 C3    >                        jp	    nz,.PosYCheck2
 356+ C3BE 7D                                   ld      a,l
 357+ C3BF E6 80                                and     %10000000
 358+ C3C1 CA E0 C3                             jp      z,.YOnScreen                ; at least 1 row is on screen as > 128
 359+ C3C4 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 360+ C3C6                                      ClearCarryFlag
 360+ C3C6 B7          >                        or a
 361+ C3C7 ED 52                                sbc     hl,de
 362+ C3C9 FA E0 C3                             jp      m,.YOnScreen                ; so if its -ve then it spans screen
 363+ C3CC 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 364+ C3CD                                      ReturnIfANotZero                    ; .
 364+ C3CD A7          >                        and     a
 364+ C3CE C0          >                        ret     nz
 365+ C3CF 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 366+ C3D0 E6 80                                and     %10000000                   ; .
 367+ C3D2                                      ReturnIfANotZero                    ; .
 367+ C3D2 A7          >                        and     a
 367+ C3D3 C0          >                        ret     nz
 368+ C3D4 C3 D3 C7                             jp      YOnScreen                  ; so Y at least spans
 369+ C3D7 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 370+ C3D9                                      ClearCarryFlag
 370+ C3D9 B7          >                        or a
 371+ C3DA ED 5A                                adc     hl,de                       ; so we have hl - de
 372+ C3DC F2 E0 C3                             jp      p,.YOnScreen                ; if result was positive then it spans screen so we are good
 373+ C3DF C9                                   ret                                 ; else never gets above 0 so return
 374+ C3E0              ; .........................................................................................................................
 375+ C3E0 CD E4 C3     .YOnScreen:             call    PlanetDraw
 376+ C3E3 C9                                   ret
 377+ C3E4
 378+ C3E4              PlanetDraw:             MMUSelectLayer2
 378+ C3E4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 379+ C3E8 2A 6B C2                             ld      hl,(PlanetScrnX)
 380+ C3EB ED 5B 6D C2                          ld      de,(PlanetScrnY)
 381+ C3EF 3A 6F C2                             ld      a,(PlanetRadius)
 382+ C3F2 4F                                   ld      c,a
 383+ C3F3 3E 0C                                ld      a,L2ColourGREEN_4
 384+ C3F5 CD 5E E8                             call    l2_draw_clipped_circle
 385+ C3F8 C9                                   ret
 386+ C3F9
 387+ C3F9
 388+ C3F9              PlanetBankSize  EQU $ - StartOfPlanet
 389+ C3F9
 390+ C3F9
# file closed: ./Universe/Planet/planet_data.asm
 954  C3F9                                      DISPLAY "Bank ",BankPlanetData," - Bytes free ",/D, $2000 - ($-PlanetBankAddr), " - BankPlanetData"
 955  C3F9              ;;;***; Bank 85  ------------------------------------------------------------------------------------------------------------------------
 956  C3F9              ;;;***                        SLOT    SpriteDataAAddr
 957  C3F9              ;;;***                        PAGE    BankSpriteDataA
 958  C3F9              ;;;***                        ORG     SpriteDataAAddr, BankSpriteDataA
 959  C3F9              ;;;***                        INCLUDE "./Layer3Sprites/sprite_loadA.asm"
 960  C3F9              ;;;***                        INCLUDE "./Layer3Sprites/SpriteSheetA.asm"
 961  C3F9              ;;;***                        DISPLAY "Bank ",BankSpriteDataA," - Bytes free ",/D, $2000 - ($-SpriteDataAAddr), " - BankSpriteDataA"
 962  C3F9              ;;;***; Bank 86  ------------------------------------------------------------------------------------------------------------------------
 963  C3F9              ;;;***                        SLOT    SpriteDataBAddr
 964  C3F9              ;;;***                        PAGE    BankSpriteDataB
 965  C3F9              ;;;***                        ORG     SpriteDataBAddr, BankSpriteDataB
 966  C3F9              ;;;***                        INCLUDE "./Layer3Sprites/sprite_loadB.asm"
 967  C3F9              ;;;***                        INCLUDE "./Layer3Sprites/SpriteSheetB.asm"
 968  C3F9              ;;;***                        DISPLAY "Bank ",BankSpriteDataB," - Bytes free ",/D, $2000 - ($-SpriteDataBAddr), " - BankSpriteDataB"
 969  C3F9              ; Bank 91  ------------------------------------------------------------------------------------------------------------------------
 970  C3F9                                      SLOT    GalaxyDataAddr
 971  C3F9                                      PAGE    BankGalaxyData0
 972  C3F9                                      ORG GalaxyDataAddr, BankGalaxyData0
 973  E000                                      INCLUDE "./Universe/Galaxy/galaxy_data.asm"
# file opened: ./Universe/Galaxy/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00           GalaxySearchLength:      DB 0
  11+ E85E 00 00 00...  GalaxySearchString:      DS 32
  12+ E87E 00                                    DB 0
  13+ E87F 00 00 00...  GalaxyExpandedName:      DS 32
  14+ E89F 00                                    DB 0
  15+ E8A0 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  15+ E8A4 53 45 49 54
  15+ E8A8 49 4C 45 54
  15+ E8AC 53 54 4F 4E
  15+ E8B0 4C 4F 4E 55
  15+ E8B4 54 48 4E 4F
  15+ E8B8 41 4C 4C 45
  15+ E8BC 58 45 47 45
  15+ E8C0 5A 41 43 45
  15+ E8C4 42 49 53 4F
  15+ E8C8 55 53 45 53
  15+ E8CC 41 52 4D 41
  15+ E8D0 49 4E 44 49
  15+ E8D4 52 45 41 3F
  15+ E8D8 45 52 41 54
  15+ E8DC 45 4E 42 45
  15+ E8E0 52 41 4C 41
  15+ E8E4 56 45 54 49
  15+ E8E8 45 44 4F 52
  15+ E8EC 51 55 41 4E
  15+ E8F0 54 45 49 53
  15+ E8F4 52 49 4F 4E
  16+ E8F8 00 00 00...  GalaxyWorkingSeed        DS 6
  17+ E8FE 00 00 00...  GalaxyNamingSeed         DS 6
  18+ E904 00 00 00...  GalaxySavedRandomSeed    DS 6
  19+ E90A
  20+ E90A 00           GalaxyDisplayGovernment         DB 0
  21+ E90B 00           GalaxyDisplayEconomy            DB 0
  22+ E90C 00           GalaxyDisplayTekLevel           DB 0
  23+ E90D 00           GalaxyDisplayPopulation         DB 0
  24+ E90E 00 00        GalaxyDisplayProductivity       DW 0
  25+ E910 00 00        GalaxyDisplayRadius             DW 0
  26+ E912
  27+ E912 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  27+ E916 65 64 00
  28+ E919 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  28+ E91D 62 6C 65 00
  29+ E921 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  29+ E925 20 6B 6E 6F
  29+ E929 77 6E 00
  30+ E92C 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  30+ E930 75 73 00
  31+ E933 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  31+ E937 64 00
  32+ E939 76 65 72 79  GalaxyDescList02A       DB "very",0
  32+ E93D 00
  33+ E93E 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  33+ E942 6C 79 00
  34+ E945 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  34+ E949 00
  35+ E94A 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  35+ E94E 6F 6E 61 62
  35+ E952 6C 79 00
  36+ E955 00           GalaxyDescList02E       DB 0
  37+ E956 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  37+ E95A 65 6E 74 00
  38+ E95E 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  38+ E962 00
  39+ E963 67 72 65 61  GalaxyDescList03C       DB "great",0
  39+ E967 74 00
  40+ E969 76 61 73 74  GalaxyDescList03D       DB "vast",0
  40+ E96D 00
  41+ E96E 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  41+ E972 00
  42+ E973 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  42+ E977 20 3C 32 38
  42+ E97B 3E 20 70 6C
  42+ E97F 61 6E 74 61
  42+ E983 74 69 6F 6E
  42+ E987 73 00
  43+ E989 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  43+ E98D 74 61 69 6E
  43+ E991 73 00
  44+ E993 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  44+ E997 00
  45+ E998 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  45+ E99C 20 66 6F 72
  45+ E9A0 65 73 74 73
  45+ E9A4 00
  46+ E9A5 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  46+ E9A9 6E 73 00
  47+ E9AC 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  47+ E9B0 65 73 73 00
  48+ E9B4 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  48+ E9B8 69 6E 65 73
  48+ E9BC 73 00
  49+ E9BE 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  49+ E9C2 6E 67 20 74
  49+ E9C6 72 61 64 69
  49+ E9CA 74 69 6F 6E
  49+ E9CE 73 00
  50+ E9D0 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  50+ E9D4 68 69 6E 67
  50+ E9D8 20 6F 66 20
  50+ E9DC 3C 35 3E 00
  51+ E9E0 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  51+ E9E4 20 66 6F 72
  51+ E9E8 20 3C 35 3E
  51+ E9EC 00
  52+ E9ED 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  52+ E9F1 20 62 6C 65
  52+ E9F5 6E 64 65 72
  52+ E9F9 73 00
  53+ E9FB 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  53+ E9FF 69 73 74 73
  53+ EA03 00
  54+ EA04 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  54+ EA08 72 79 00
  55+ EA0B 64 69 73 63  GalaxyDescList06D       DB "discos",0
  55+ EA0F 6F 73 00
  56+ EA12 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  56+ EA16 00
  57+ EA17 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  57+ EA1B 69 6E 67 20
  57+ EA1F 74 72 65 65
  57+ EA23 00
  58+ EA24 63 72 61 62  GalaxyDescList07B       DB "crab",0
  58+ EA28 00
  59+ EA29 62 61 74 00  GalaxyDescList07C       DB "bat",0
  60+ EA2D 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  60+ EA31 74 00
  61+ EA33 25 52 00     GalaxyDescList07E       DB "%R",0
  62+ EA36 62 65 73 65  GalaxyDescList08A       DB "beset",0
  62+ EA3A 74 00
  63+ EA3C 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  63+ EA40 75 65 64 00
  64+ EA44 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  64+ EA48 67 65 64 00
  65+ EA4C 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  65+ EA50 65 64 00
  66+ EA53 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  66+ EA57 72 67 65 64
  66+ EA5B 00
  67+ EA5C 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  67+ EA60 20 63 69 76
  67+ EA64 69 6C 20 77
  67+ EA68 61 72 00
  68+ EA6B 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  68+ EA6F 20 3C 32 33
  68+ EA73 3E 20 3C 32
  68+ EA77 34 3E 73 00
  69+ EA7B 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  69+ EA7F 36 3E 20 64
  69+ EA83 69 73 65 61
  69+ EA87 73 65 00
  70+ EA8A 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  70+ EA8E 20 65 61 72
  70+ EA92 74 68 71 75
  70+ EA96 61 6B 65 73
  70+ EA9A 00
  71+ EA9B 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  71+ EA9F 20 73 6F 6C
  71+ EAA3 61 72 20 61
  71+ EAA7 63 74 69 76
  71+ EAAB 69 74 79 00
  72+ EAAF 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  72+ EAB3 3C 32 3E 20
  72+ EAB7 3C 33 3E 00
  73+ EABB 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  73+ EABF 25 49 20 3C
  73+ EAC3 32 33 3E 20
  73+ EAC7 3C 32 34 3E
  73+ EACB 00
  74+ EACC 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  74+ EAD0 69 6E 68 61
  74+ EAD4 62 69 74 61
  74+ EAD8 6E 74 73 27
  74+ EADC 20 3C 32 35
  74+ EAE0 3E 20 3C 34
  74+ EAE4 3E 00
  75+ EAE6 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  75+ EAEA 00
  76+ EAEB 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  76+ EAEF 3C 31 32 3E
  76+ EAF3 20 3C 31 33
  76+ EAF7 3E 00
  77+ EAF9 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  77+ EAFD 65 00
  78+ EAFF 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  78+ EB03 64 79 00
  79+ EB06 77 61 74 65  GalaxyDescList11C       DB "water",0
  79+ EB0A 72 00
  80+ EB0C 62 72 65 77  GalaxyDescList11D       DB "brew",0
  80+ EB10 00
  81+ EB11 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  81+ EB15 6C 65 20 62
  81+ EB19 6C 61 73 74
  81+ EB1D 65 72 73 00
  82+ EB21 25 52 00     GalaxyDescList12A       DB "%R",0
  83+ EB24 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  83+ EB28 32 34 3E 00
  84+ EB2C 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  84+ EB30 52 00
  85+ EB32 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  85+ EB36 32 36 3E 00
  86+ EB3A 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  86+ EB3E 20 25 52 00
  87+ EB42 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  87+ EB46 6C 6F 75 73
  87+ EB4A 00
  88+ EB4B 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  88+ EB4F 69 63 00
  89+ EB52 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  89+ EB56 79 00
  90+ EB58 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  90+ EB5C 75 61 6C 00
  91+ EB60 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  91+ EB64 74 69 6E 67
  91+ EB68 00
  92+ EB69 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  92+ EB6D 69 6E 65 00
  93+ EB71 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  93+ EB75 74 20 6C 69
  93+ EB79 66 65 00
  94+ EB7C 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  94+ EB80 6E 6F 73 00
  95+ EB84 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  95+ EB88 63 6F 6D 73
  95+ EB8C 00
  96+ EB8D 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  96+ EB91 3E 20 00
  97+ EB94 25 48 00     GalaxyDescList15A       DB "%H",0
  98+ EB97 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  98+ EB9B 70 6C 61 6E
  98+ EB9F 65 74 20 25
  98+ EBA3 48 00
  99+ EBA5 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  99+ EBA9 77 6F 72 6C
  99+ EBAD 64 20 25 48
  99+ EBB1 00
 100+ EBB2 54 68 69 73  GalaxyDescList15D       DB "This planet",0
 100+ EBB6 20 70 6C 61
 100+ EBBA 6E 65 74 00
 101+ EBBE 54 68 69 73  GalaxyDescList15E       DB "This world",0
 101+ EBC2 20 77 6F 72
 101+ EBC6 6C 64 00
 102+ EBC9 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 102+ EBCD 72 65 6D 61
 102+ EBD1 72 6B 61 62
 102+ EBD5 6C 65 00
 103+ EBD8 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 103+ EBDC 69 6E 67 00
 104+ EBE0 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 104+ EBE4 6C 00
 105+ EBE6 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 105+ EBEA 69 6F 75 73
 105+ EBEE 00
 106+ EBEF 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 106+ EBF3 6F 6C 74 69
 106+ EBF7 6E 67 00
 107+ EBFA 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 107+ EBFE 65 74 00
 108+ EC01 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 108+ EC05 64 00
 109+ EC07 70 6C 61 63  GalaxyDescList17C       DB "place",0
 109+ EC0B 65 00
 110+ EC0D 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 110+ EC11 6C 65 20 70
 110+ EC15 6C 61 6E 65
 110+ EC19 74 00
 111+ EC1B 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 111+ EC1F 00
 112+ EC20 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 112+ EC24 00
 113+ EC25 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 113+ EC29 00
 114+ EC2A 67 72 75 62  GalaxyDescList18C       DB "grub",0
 114+ EC2E 00
 115+ EC2F 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 116+ EC33 25 52 00     GalaxyDescList18E       DB "%R",0
 117+ EC36 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 117+ EC3A 00
 118+ EC3B 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 118+ EC3F 20 67 72 61
 118+ EC43 64 75 61 74
 118+ EC47 65 00
 119+ EC49 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 120+ EC4D 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 120+ EC51 6C 00
 121+ EC53 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 121+ EC57 00
 122+ EC58 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 122+ EC5C 69 63 61 6C
 122+ EC60 00
 123+ EC61 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 123+ EC65 65 00
 124+ EC67 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 124+ EC6B 00
 125+ EC6C 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 125+ EC70 6E 65 74 72
 125+ EC74 61 62 6C 65
 125+ EC78 00
 126+ EC79 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 126+ EC7D 65 72 61 6E
 126+ EC81 74 00
 127+ EC83 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 127+ EC87 79 00
 128+ EC89 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 128+ EC8D 64 00
 129+ EC8F 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 129+ EC93 75 61 6C 00
 130+ EC97 73 74 72 61  GalaxyDescList21D       DB "strange",0
 130+ EC9B 6E 67 65 00
 131+ EC9F 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 131+ ECA3 6C 69 61 72
 131+ ECA7 00
 132+ ECA8 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 132+ ECAC 75 65 6E 74
 132+ ECB0 00
 133+ ECB1 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 133+ ECB5 73 69 6F 6E
 133+ ECB9 61 6C 00
 134+ ECBC 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 134+ ECC0 65 64 69 63
 134+ ECC4 74 61 62 6C
 134+ ECC8 65 00
 135+ ECCA 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 135+ ECCE 64 66 75 6C
 135+ ECD2 00
 136+ ECD3 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 136+ ECD7 6C 79 00
 137+ ECDA 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 137+ ECDE 3C 30 3E 20
 137+ ECE2 66 6F 72 20
 137+ ECE6 3C 39 3E 00
 138+ ECEA 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 138+ ECEE 3C 30 3E 20
 138+ ECF2 66 6F 72 20
 138+ ECF6 3C 39 3E 20
 138+ ECFA 61 6E 64 20
 138+ ECFE 3C 39 3E 00
 139+ ED02 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 139+ ED06 62 79 20 3C
 139+ ED0A 38 3E 00
 140+ ED0D 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 140+ ED11 3C 30 3E 20
 140+ ED15 66 6F 72 20
 140+ ED19 3C 39 3E 20
 140+ ED1D 62 75 74 20
 140+ ED21 3C 37 3E 20
 140+ ED25 62 79 20 3C
 140+ ED29 38 3E 00
 141+ ED2C 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 141+ ED30 3E 20 3C 31
 141+ ED34 36 3E 00
 142+ ED37 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 142+ ED3B 00
 143+ ED3C 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 143+ ED40 74 61 69 6E
 143+ ED44 00
 144+ ED45 65 64 69 62  GalaxyDescList24C       DB "edible",0
 144+ ED49 6C 65 00
 145+ ED4C 74 72 65 65  GalaxyDescList24D       DB "tree",0
 145+ ED50 00
 146+ ED51 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 146+ ED55 74 65 64 00
 147+ ED59 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 147+ ED5D 00
 148+ ED5E 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 148+ ED62 00
 149+ ED63 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 149+ ED67 69 64 00
 150+ ED6A 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 150+ ED6E 00
 151+ ED6F 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 151+ ED73 00
 152+ ED74 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 152+ ED78 65 6E 74 00
 153+ ED7C 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 153+ ED80 70 74 69 6F
 153+ ED84 6E 61 6C 00
 154+ ED88 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 154+ ED8C 6E 74 72 69
 154+ ED90 63 00
 155+ ED92 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 155+ ED96 61 69 6E 65
 155+ ED9A 64 00
 156+ ED9C 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 156+ EDA0 00
 157+ EDA1 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 157+ EDA5 65 72 00
 158+ EDA8 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 158+ EDAC 6C 79 00
 159+ EDAF 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 159+ EDB3 00
 160+ EDB4 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 160+ EDB8 61 6C 00
 161+ EDBB 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 161+ EDBF 6F 75 73 00
 162+ EDC3 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 162+ EDC7 69 6E 67 20
 162+ EDCB 6D 65 74 65
 162+ EDCF 72 73 00
 163+ EDD2 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 163+ EDD6 20 63 6C 6F
 163+ EDDA 75 64 73 00
 164+ EDDE 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 164+ EDE2 62 65 72 67
 164+ EDE6 73 00
 165+ EDE8 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 165+ EDEC 20 66 6F 72
 165+ EDF0 6D 61 74 69
 165+ EDF4 6F 6E 73 00
 166+ EDF8 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 166+ EDFC 61 6E 6F 65
 166+ EE00 73 00
 167+ EE02 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 167+ EE06 74 00
 168+ EE08 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 168+ EE0C 70 00
 169+ EE0E 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 169+ EE12 6E 61 00
 170+ EE15 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 170+ EE19 00
 171+ EE1A 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 171+ EE1E 65 64 00
 172+ EE21 25 52 00     GalaxyDescList30A       DB "%R",0
 173+ EE24 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 173+ EE28 52 00
 174+ EE2A 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 174+ EE2E 32 36 3E 00
 175+ EE32 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 175+ EE36 62 69 74 61
 175+ EE3A 6E 74 00
 176+ EE3D 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 176+ EE41 52 00
 177+ EE43 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 177+ EE47 77 00
 178+ EE49 62 65 61 73  GalaxyDescList31B       DB "beast",0
 178+ EE4D 74 00
 179+ EE4F 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 179+ EE53 6E 00
 180+ EE55 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 180+ EE59 65 00
 181+ EE5B 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 181+ EE5F 00
 182+ EE60 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 182+ EE64 61 72 64 00
 183+ EE68 63 61 74 00  GalaxyDescList32B       DB "cat",0
 184+ EE6C 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 184+ EE70 65 79 00
 185+ EE73 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 185+ EE77 00
 186+ EE78 66 69 73 68  GalaxyDescList32E       DB "fish",0
 186+ EE7C 00
 187+ EE7D 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 187+ EE81 20 3C 31 30
 187+ EE85 3E 00
 188+ EE87 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 188+ EE8B 33 30 3E 20
 188+ EE8F 3C 33 33 3E
 188+ EE93 00
 189+ EE94 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 189+ EE98 3C 31 32 3E
 189+ EE9C 20 3C 33 31
 189+ EEA0 3E 20 3C 33
 189+ EEA4 33 3E 00
 190+ EEA7 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 190+ EEAB 20 3C 33 35
 190+ EEAF 3E 00
 191+ EEB1 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 191+ EEB5 20 3C 31 30
 191+ EEB9 3E 00
 192+ EEBB 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 192+ EEBF 00
 193+ EEC0 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 193+ EEC4 65 74 00
 194+ EEC7 73 74 65 61  GalaxyDescList34C       DB "steak",0
 194+ EECB 6B 00
 195+ EECD 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 195+ EED1 65 72 73 00
 196+ EED5 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 196+ EED9 00
 197+ EEDA 69 63 65 00  GalaxyDescList35A       DB "ice",0
 198+ EEDE 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 199+ EEE2 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 199+ EEE6 2D 47 00
 200+ EEE9 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 200+ EEED 75 6D 00
 201+ EEF0 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 201+ EEF4 6C 74 72 61
 201+ EEF8 00
 202+ EEF9 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 202+ EEFD 65 79 00
 203+ EF00 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 203+ EF04 6B 65 74 00
 204+ EF08 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 204+ EF0C 74 65 00
 205+ EF0F 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 205+ EF13 00
 206+ EF14 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 206+ EF18 69 73 00
 207+ EF1B
 208+ EF1B 12 E9 19 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 208+ EF1F 21 E9 2C E9
 208+ EF23 33 E9
 209+ EF25 39 E9 3E E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 209+ EF29 45 E9 4A E9
 209+ EF2D 55 E9
 210+ EF2F 56 E9 5E E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 210+ EF33 63 E9 69 E9
 210+ EF37 6E E9
 211+ EF39 73 E9 89 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 211+ EF3D 93 E9 98 E9
 211+ EF41 A5 E9
 212+ EF43 AC E9 B4 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 212+ EF47 BE E9 D0 E9
 212+ EF4B E0 E9
 213+ EF4D ED E9 FB E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 213+ EF51 04 EA 0B EA
 213+ EF55 12 EA
 214+ EF57 17 EA 24 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 214+ EF5B 29 EA 2D EA
 214+ EF5F 33 EA
 215+ EF61 36 EA 3C EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 215+ EF65 44 EA 4C EA
 215+ EF69 53 EA
 216+ EF6B 5C EA 6B EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 216+ EF6F 7B EA 8A EA
 216+ EF73 9B EA
 217+ EF75 AF EA BB EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 217+ EF79 CC EA E6 EA
 217+ EF7D EB EA
 218+ EF7F F9 EA FF EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 218+ EF83 06 EB 0C EB
 218+ EF87 11 EB
 219+ EF89 21 EB 24 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 219+ EF8D 2C EB 32 EB
 219+ EF91 3A EB
 220+ EF93 42 EB 4B EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 220+ EF97 52 EB 58 EB
 220+ EF9B 60 EB
 221+ EF9D 69 EB 71 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 221+ EFA1 7C EB 84 EB
 221+ EFA5 8D EB
 222+ EFA7 94 EB 97 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 222+ EFAB A5 EB B2 EB
 222+ EFAF BE EB
 223+ EFB1 C9 EB D8 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 223+ EFB5 E0 EB E6 EB
 223+ EFB9 EF EB
 224+ EFBB FA EB 01 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 224+ EFBF 07 EC 0D EC
 224+ EFC3 1B EC
 225+ EFC5 20 EC 25 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 225+ EFC9 2A EC 2F EC
 225+ EFCD 33 EC
 226+ EFCF 36 EC 3B EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 226+ EFD3 49 EC 4D EC
 226+ EFD7 53 EC
 227+ EFD9 58 EC 61 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 227+ EFDD 67 EC 6C EC
 227+ EFE1 79 EC
 228+ EFE3 83 EC 89 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 228+ EFE7 8F EC 97 EC
 228+ EFEB 9F EC
 229+ EFED A8 EC B1 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 229+ EFF1 BC EC CA EC
 229+ EFF5 D3 EC
 230+ EFF7 DA EC EA EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 230+ EFFB 02 ED 0D ED
 230+ EFFF 2C ED
 231+ F001 37 ED 3C ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 231+ F005 45 ED 4C ED
 231+ F009 51 ED
 232+ F00B 59 ED 5E ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 232+ F00F 63 ED 6A ED
 232+ F013 6F ED
 233+ F015 74 ED 7C ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 233+ F019 88 ED 92 ED
 233+ F01D 9C ED
 234+ F01F A1 ED A8 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 234+ F023 AF ED B4 ED
 234+ F027 BB ED
 235+ F029 C3 ED D2 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 235+ F02D DE ED E8 ED
 235+ F031 F8 ED
 236+ F033 02 EE 08 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 236+ F037 0E EE 15 EE
 236+ F03B 1A EE
 237+ F03D 21 EE 24 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 237+ F041 2A EE 32 EE
 237+ F045 3D EE
 238+ F047 43 EE 49 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 238+ F04B 4F EE 55 EE
 238+ F04F 5B EE
 239+ F051 60 EE 68 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 239+ F055 6C EE 73 EE
 239+ F059 78 EE
 240+ F05B 7D EE 87 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 240+ F05F 94 EE A7 EE
 240+ F063 B1 EE
 241+ F065 BB EE C0 EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 241+ F069 C7 EE CD EE
 241+ F06D D5 EE
 242+ F06F DA EE DE EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 242+ F073 E2 EE E9 EE
 242+ F077 F0 EE
 243+ F079 F9 EE 00 EF                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 243+ F07D 08 EF 0F EF
 243+ F081 14 EF
 244+ F083
 245+ F083 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 245+ F087 65 20 00
 246+ F08A 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 246+ F08E 63 65 20 00
 247+ F092 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 247+ F096 6C 20 00
 248+ F099 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 248+ F09D 6E 20 00
 249+ F0A0 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 249+ F0A4 00
 250+ F0A5 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 250+ F0A9 6F 77 20 00
 251+ F0AD 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 251+ F0B1 20 00
 252+ F0B3 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 252+ F0B7 6B 20 00
 253+ F0BA 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 253+ F0BE 6C 65 73 73
 253+ F0C2 20 00
 254+ F0C4 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 254+ F0C8 79 20 00
 255+ F0CB 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 255+ F0CF 45 79 65 64
 255+ F0D3 20 00
 256+ F0D5 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 256+ F0D9 65 64 20 00
 257+ F0DD 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 257+ F0E1 20 00
 258+ F0E3 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 258+ F0E7 00
 259+ F0E8 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 259+ F0EC 79 20 00
 260+ F0EF 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 260+ F0F3 6E 74 00
 261+ F0F6 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 261+ F0FA 00
 262+ F0FB 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 262+ F0FF 72 64 00
 263+ F102 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 263+ F106 74 65 72 00
 264+ F10A 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 264+ F10E 00
 265+ F10F 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 265+ F113 6E 6F 69 64
 265+ F117 00
 266+ F118 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 266+ F11C 6E 65 00
 267+ F11F 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 267+ F123 63 74 00
 268+ F126 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 268+ F12A 6E 20 43 6F
 268+ F12E 6C 6F 6E 61
 268+ F132 6C 00
 269+ F134
 270+ F134 83 F0 8A F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 270+ F138 92 F0
 271+ F13A 99 F0 A0 F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 271+ F13E A5 F0 AD F0
 271+ F142 B3 F0 BA F0
 272+ F146 C4 F0 CB F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 272+ F14A D5 F0 DD F0
 272+ F14E E3 F0 E8 F0
 273+ F152 EF F0 F6 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 273+ F156 FB F0 02 F1
 273+ F15A 0A F1 0F F1
 273+ F15E 18 F1 1F F1
 274+ F162 26 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 275+ F164 00 00 00...  GalaxySpecies           DS 32
 276+ F184 00                                   DB 0
 277+ F185 00 00 00...  GalaxyPlanetDescription DS 300
 278+ F2B1 00                                   DB 0
 279+ F2B2 00 00 00...  GalaxyPlanetSource      DS 300,0
 280+ F3DE 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 280+ F3E2 20 69 73 20
 280+ F3E6 3C 32 32 3E
 280+ F3EA 00
 281+ F3EB
 282+ F3EB
 283+ F3EB D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 284+ F3EC 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 285+ F3ED 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 286+ F3EE 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 287+ F3EF FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 288+ F3F0 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 289+ F3F1 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 290+ F3F2 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 291+ F3F3 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 292+ F3F4 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 293+ F3F5 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 294+ F3F6 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 295+ F3F7 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 296+ F3F8 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 297+ F3F9 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 298+ F3FA A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 299+ F3FB 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 300+ F3FC 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 301+ F3FD 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 302+ F3FE C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 303+ F3FF B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 304+ F400 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 305+ F401 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 306+ F402 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 307+ F403 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 308+ F404 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 309+ F405 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 310+ F406
 311+ F406                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F406
   2++F406              EQ_FUEL                 EQU 0
   3++F406              EQ_MISSILE              EQU 1
   4++F406              EQ_CARGO_BAY            EQU 2
   5++F406              EQ_ECM                  EQU 3
   6++F406              EQ_FUEL_SCOOPS          EQU 4
   7++F406              EQ_ESCAPE_POD           EQU 5
   8++F406              EQ_ENERGY_BOMB          EQU 6
   9++F406              EQ_ENERGY_UNIT          EQU 7
  10++F406              EQ_DOCK_COMP            EQU 8
  11++F406              EQ_GAL_DRIVE            EQU 9
  12++F406              EQ_FRONT_PULSE          EQU 10
  13++F406              EQ_REAR_PULSE           EQU 11
  14++F406              EQ_LEFT_PULSE           EQU 12
  15++F406              EQ_RIGHT_PULSE          EQU 13
  16++F406              EQ_FRONT_BEAM           EQU 14
  17++F406              EQ_REAR_BEAM            EQU 15
  18++F406              EQ_LEFT_BEAM            EQU 16
  19++F406              EQ_RIGHT_BEAM           EQU 17
  20++F406              EQ_FRONT_MINING         EQU 18
  21++F406              EQ_REAR_MINING          EQU 19
  22++F406              EQ_LEFT_MINING          EQU 20
  23++F406              EQ_RIGHT_MINING         EQU 21
  24++F406              EQ_FRONT_MILITARY       EQU 22
  25++F406              EQ_REAR_MILITARY        EQU 23
  26++F406              EQ_LEFT_MILITARY        EQU 24
  27++F406              EQ_RIGHT_MILITARY       EQU 25
  28++F406
  29++F406              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F406
# file closed: ././Data/EquipmentEquates.asm
 312+ F406
 313+ F406              EquipNameTableRowLen    EQU 8
 314+ F406 D2 8C 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 314+ F40A 00 00 00 00
 315+ F40E 6F 90 00 00                          DW  WordMissile,    0,              0,          0
 315+ F412 00 00 00 00
 316+ F416 B7 8C C8 8C                          DW  WordLarge,      WordCargo,      WordBay,    0
 316+ F41A CE 8C 00 00
 317+ F41E DE 8C E5 8C                          DW  WordECM,        WordSystem,     0,          0
 317+ F422 00 00 00 00
 318+ F426 D2 8C D7 8C                          DW  WordFuel,       WordScoops,     0,          0
 318+ F42A 00 00 00 00
 319+ F42E BD 8C C4 8C                          DW  WordEscape,     WordPod,        0,          0
 319+ F432 00 00 00 00
 320+ F436 EC 8C F3 8C                          DW  WordEnergy,     WordBomb,       0,          0
 320+ F43A 00 00 00 00
 321+ F43E 51 8D EC 8C                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 321+ F442 1F 8D 00 00
 322+ F446 2B 8D 33 8D                          DW  WordDocking,    WordComputers,  0,          0
 322+ F44A 00 00 00 00
 323+ F44E 48 8D 87 8F                          DW  WordGalactic,   WordHyperdrive, 0,          0
 323+ F452 00 00 00 00
 324+ F456 A1 8C FE 8C                          DW  WordFront,      WordPulse,      WordLaser,  0
 324+ F45A F8 8C 00 00
 325+ F45E B2 8C FE 8C                          DW  WordRear,       WordPulse,      WordLaser,  0
 325+ F462 F8 8C 00 00
 326+ F466 AD 8C FE 8C                          DW  WordLeft,       WordPulse,      WordLaser,  0
 326+ F46A F8 8C 00 00
 327+ F46E A7 8C FE 8C                          DW  WordRight,      WordPulse,      WordLaser,  0
 327+ F472 F8 8C 00 00
 328+ F476 A1 8C 04 8D                          DW  WordFront,      WordBeam,       WordLaser,  0
 328+ F47A F8 8C 00 00
 329+ F47E B2 8C 04 8D                          DW  WordRear,       WordBeam,       WordLaser,  0
 329+ F482 F8 8C 00 00
 330+ F486 AD 8C 04 8D                          DW  WordLeft,       WordBeam,       WordLaser,  0
 330+ F48A F8 8C 00 00
 331+ F48E A7 8C 04 8D                          DW  WordRight,      WordBeam,       WordLaser,  0
 331+ F492 F8 8C 00 00
 332+ F496 A1 8C 11 8D                          DW  WordFront,      WordMining,     WordLaser,  0
 332+ F49A F8 8C 00 00
 333+ F49E B2 8C 11 8D                          DW  WordRear,       WordMining,     WordLaser,  0
 333+ F4A2 F8 8C 00 00
 334+ F4A6 AD 8C 11 8D                          DW  WordLeft,       WordMining,     WordLaser,  0
 334+ F4AA F8 8C 00 00
 335+ F4AE A7 8C 11 8D                          DW  WordRight,      WordMining,     WordLaser,  0
 335+ F4B2 F8 8C 00 00
 336+ F4B6 A1 8C 92 8F                          DW  WordFront,      WordMilitary,   WordLaser,  0
 336+ F4BA F8 8C 00 00
 337+ F4BE B2 8C 92 8F                          DW  WordRear,       WordMilitary,   WordLaser,  0
 337+ F4C2 F8 8C 00 00
 338+ F4C6 AD 8C 92 8F                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 338+ F4CA F8 8C 00 00
 339+ F4CE A7 8C 92 8F                          DW  WordRight,      WordMilitary,   WordLaser,  0
 339+ F4D2 F8 8C 00 00
 340+ F4D6
 341+ F4D6              ;Each row is 7 bytes
 342+ F4D6              ;                                                               12345  6  789012345678901
 343+ F4D6              ;	canbuy;
 344+ F4D6              ;	y;
 345+ F4D6              ;	show;
 346+ F4D6              ;	level;
 347+ F4D6              ;	price 2 bytes;
 348+ F4D6              ;	type;
 349+ F4D6              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 350+ F4D6              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 351+ F4D6              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 352+ F4D6              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 353+ F4D6              ;                           c  y  s  t
 354+ F4D6              ;                           a  p  h  e                                            fi     P     Vi
 355+ F4D6              ;                           n  o  o  c                                            tt     o     ew
 356+ F4D6              ;                           B  s  w  h  price                  type               ed     s
 357+ F4D6 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4DA 02 00 00 00
 357+ F4DE FF 00 00 00
 357+ F4E2 00 00 00 00
 358+ F4E6 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4EA 2C 01 01 00
 358+ F4EE FF 00 00 00
 358+ F4F2 00 00 00 00
 359+ F4F6 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F4FA A0 0F 02 00
 359+ F4FE FF 00 00 00
 359+ F502 00 00 00 00
 360+ F506 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F50A 70 17 03 00
 360+ F50E FF 00 00 00
 360+ F512 00 00 00 00
 361+ F516 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F51A 82 14 04 00
 361+ F51E FF 00 00 00
 361+ F522 00 00 00 00
 362+ F526 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F52A 10 27 05 00
 362+ F52E FF 00 00 00
 362+ F532 00 00 00 00
 363+ F536 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F53A 28 23 06 00
 363+ F53E FF 00 00 00
 363+ F542 00 00 00 00
 364+ F546 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F54A 98 3A 07 00
 364+ F54E FF 00 00 00
 364+ F552 00 00 00 00
 365+ F556 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F55A 98 3A 08 00
 365+ F55E FF 00 00 00
 365+ F562 00 00 00 00
 366+ F566 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F56A 50 C3 09 00
 366+ F56E FF 00 00 00
 366+ F572 00 00 00 00
 367+ F576 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F57A A0 0F 0A 00
 367+ F57E 00 00 00 00
 367+ F582 00 00 00 00
 368+ F586 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F58A A0 0F 0B 00
 368+ F58E 01 01 00 00
 368+ F592 00 00 00 00
 369+ F596 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F59A A0 0F 0C 00
 369+ F59E 02 02 00 00
 369+ F5A2 00 00 00 00
 370+ F5A6 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5AA A0 0F 0D 00
 370+ F5AE 03 03 00 00
 370+ F5B2 00 00 00 00
 371+ F5B6 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5BA 10 27 0E 00
 371+ F5BE 00 00 00 00
 371+ F5C2 00 00 00 00
 372+ F5C6 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5CA 10 27 0F 00
 372+ F5CE 01 01 00 00
 372+ F5D2 00 00 00 00
 373+ F5D6 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5DA 10 27 10 00
 373+ F5DE 02 02 00 00
 373+ F5E2 00 00 00 00
 374+ F5E6 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5EA 10 27 11 00
 374+ F5EE 03 03 00 00
 374+ F5F2 00 00 00 00
 375+ F5F6 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F5FA 40 1F 12 00
 375+ F5FE 00 00 00 00
 375+ F602 00 00 00 00
 376+ F606 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F60A 40 1F 13 00
 376+ F60E 01 01 00 00
 376+ F612 00 00 00 00
 377+ F616 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F61A 40 1F 14 00
 377+ F61E 02 02 00 00
 377+ F622 00 00 00 00
 378+ F626 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F62A 40 1F 15 00
 378+ F62E 03 03 00 00
 378+ F632 00 00 00 00
 379+ F636 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F63A 60 EA 16 00
 379+ F63E 00 00 00 00
 379+ F642 00 00 00 00
 380+ F646 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F64A 60 EA 17 00
 380+ F64E 01 01 00 00
 380+ F652 00 00 00 00
 381+ F656 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F65A 60 EA 18 00
 381+ F65E 02 02 00 00
 381+ F662 00 00 00 00
 382+ F666 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 382+ F66A 60 EA 19 00
 382+ F66E 03 03 00 00
 382+ F672 00 00 00 00
 383+ F676              ShipEquipTableRowLen    EQU 16
 384+ F676              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 385+ F676
 386+ F676              ;------------------------------------------------------------------------------------------------------------------------------------
 387+ F676 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 388+ F677 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 389+ F678 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 390+ F679 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 391+ F67A              GalaxySeedRandom:
 392+ F67A              ;------------------------------------------------------------------------------------------------------------------------------------
 393+ F67A CD AF 89     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 394+ F67D 18 03                                jr		GetDigramWorkingSeed
 395+ F67F CD C7 89     GetDigramSystemSeed:    call	copy_system_to_working
 396+ F682 11 9D 93     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 397+ F685 06 03                                ld		b,3
 398+ F687 3A 95 84                             ld		a,(WorkingSeeds)
 399+ F68A E6 40                                and		$40
 400+ F68C 28 03                                jr		z,.SmallSizeName
 401+ F68E CD BE 93     .LargeSizeName:         call	NamingLoop
 402+ F691 CD BE 93     .SmallSizeName:         call	NamingLoop
 403+ F694 CD BE 93                             call	NamingLoop
 404+ F697 CD BE 93                             call	NamingLoop
 405+ F69A EB           .DoneName:              ex		de,hl
 406+ F69B 36 00                                ld		(hl),0
 407+ F69D EB                                   ex		de,hl
 408+ F69E C9                                   ret
 409+ F69F
 410+ F69F 11 76 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 411+ F6A2              ; Uses registers a,b and hl
 412+ F6A2 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 413+ F6A3 3A 76 F6                             ld      a,(GalaxyRandSeed)
 414+ F6A6 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 415+ F6A8 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 416+ F6A9 21 78 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 417+ F6AC 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 418+ F6AD 32 76 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 419+ F6B0 78                                   ld      a,b
 420+ F6B1 32 78 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 421+ F6B4 3A 77 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 422+ F6B7 47                                   ld      b,a                                             ; b = r1
 423+ F6B8 21 79 F6                             ld      hl,GalaxyRandSeed3
 424+ F6BB 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 425+ F6BC 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 426+ F6BF 4F                                   ld      c,a
 427+ F6C0 78                                   ld      a,b
 428+ F6C1 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 429+ F6C4 79                                   ld      a,c
 430+ F6C5 C9                                   ret
 431+ F6C6
 432+ F6C6              ;------------------------------------------------------------------------------------------------------------------------------------
 433+ F6C6 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 434+ F6C8 ED 31                                add     hl,a
 435+ F6CA 7E                                   ld      a,(hl)              ;  Fetch low byte
 436+ F6CB 47                                   ld      b,a
 437+ F6CC 23                                   inc     hl
 438+ F6CD 7E                                   ld      a,(hl)              ;  Fetch high byte
 439+ F6CE 68                                   ld      l,b
 440+ F6CF 67                                   ld      h,a
 441+ F6D0 7E           GalaxyCopyLoop:         ld      a,(hl)
 442+ F6D1 FE 00                                cp      0
 443+ F6D3 28 05                                jr      z,.CopyDone
 444+ F6D5 12                                   ld      (de),a
 445+ F6D6 23                                   inc     hl
 446+ F6D7 13                                   inc     de
 447+ F6D8 18 F6                                jr      GalaxyCopyLoop
 448+ F6DA 12           .CopyDone:              ld      (de),a
 449+ F6DB C9                                   ret
 450+ F6DC              ;------------------------------------------------------------------------------------------------------------------------------------
 451+ F6DC 11 64 F1     galaxy_get_species:     ld      de,GalaxySpecies
 452+ F6DF 3E 28                                ld      a,"("
 453+ F6E1 12                                   ld      (de),a
 454+ F6E2 13                                   inc     de
 455+ F6E3 3A FC E8                             ld      a,(GalaxyWorkingSeed+4)
 456+ F6E6 CB 7F                                bit     7,a
 457+ F6E8 20 0A                                jr      nz,.NonHuman
 458+ F6EA 21 62 F1                             ld      hl,GalaxyInhabitantHumanIx
 459+ F6ED AF                                   xor     a
 460+ F6EE CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 461+ F6F1 C3 4F F7                             jp      .galaxy_species_exit
 462+ F6F4 3A FD E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 463+ F6F7 CB 3F                                srl     a
 464+ F6F9 CB 3F                                srl     a
 465+ F6FB E6 07                                and     $07
 466+ F6FD FE 03                                cp      3
 467+ F6FF 30 0A                                jr      nc,.NotDesc1
 468+ F701 21 34 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 469+ F704 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 470+ F707 3E 20                                ld      a," "
 471+ F709 12                                   ld      (de),a
 472+ F70A 13                                   inc     de
 473+ F70B 3A FD E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 474+ F70E CB 3F                                srl     a
 475+ F710 CB 3F                                srl     a
 476+ F712 CB 3F                                srl     a
 477+ F714 CB 3F                                srl     a
 478+ F716 CB 3F                                srl     a
 479+ F718 FE 06                                cp      6
 480+ F71A 30 0A                                jr      nc,.NotDesc2
 481+ F71C 21 3A F1                             ld      hl,GalaxyInhabitantDesc2Ix
 482+ F71F CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 483+ F722 3E 20                                ld      a," "
 484+ F724 12                                   ld      (de),a
 485+ F725 13                                   inc     de
 486+ F726 3A F9 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 487+ F729 47                                   ld      b,a
 488+ F72A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 489+ F72D A8                                   xor     b
 490+ F72E E6 07                                and     $07
 491+ F730 F5                                   push    af
 492+ F731 FE 06                                cp      6
 493+ F733 30 0A                                jr      nc,.NotDesc3
 494+ F735 21 46 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 495+ F738 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 496+ F73B 3E 20                                ld      a," "
 497+ F73D 12                                   ld      (de),a
 498+ F73E 13                                   inc     de
 499+ F73F F1           .NotDesc3:              pop     af
 500+ F740 47                                   ld      b,a
 501+ F741 3A FD E8                             ld      a,(GalaxyWorkingSeed+5)
 502+ F744 E6 03                                and     $03
 503+ F746 80                                   add     a,b
 504+ F747 E6 07                                and     $07
 505+ F749 21 52 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 506+ F74C CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 507+ F74F 3E 73        .galaxy_species_exit:   ld      a,"s"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 3E 29                                ld      a,")"
 511+ F755 12                                   ld      (de),a
 512+ F756 13                                   inc     de
 513+ F757 AF                                   xor     a
 514+ F758 12                                   ld      (de),a
 515+ F759 C9                                   ret
 516+ F75A
 517+ F75A
 518+ F75A              ; To copy seed, loops from 3 to 0
 519+ F75A              ; copy seed X + 2 to target X
 520+ F75A              ; x = x -1
 521+ F75A
 522+ F75A              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 523+ F75A
 524+ F75A              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 525+ F75A 23                                   inc		hl
 526+ F75B 7E                                   ld		a,(hl)
 527+ F75C FE 00                                cp		0
 528+ F75E C8                                   ret		z
 529+ F75F FE 5B                                cp		'Z'+1
 530+ F761 30 F7                                jr		nc,GalaxyCapitaliseString
 531+ F763 FE 41                                cp		'A'
 532+ F765 38 F3                                jr		c,GalaxyCapitaliseString
 533+ F767 C6 20        .LowerCase:             add		a,'a'-'A'
 534+ F769 77                                   ld		(hl),a
 535+ F76A 18 EE                                jr		GalaxyCapitaliseString
 536+ F76C
 537+ F76C
 538+ F76C              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 539+ F76C                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 540+ F76C                                      ;cp      $FF
 541+ F76C                                      ;jr      z,.NoSystemFound
 542+ F76C 3A 97 84     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 543+ F76F 32 76 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 544+ F772 3A 98 84                             ld      a,(WorkingSeeds+3)                              ;
 545+ F775 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 546+ F778 3A 99 84                             ld      a,(WorkingSeeds+4)                              ;
 547+ F77B 32 78 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 548+ F77E 3A 9A 84                             ld      a,(WorkingSeeds+5)                              ;
 549+ F781 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 550+ F784 C9                                   ret
 551+ F785              ; For later......
 552+ F785 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 553+ F787 F5           .GalaxyExpandDesc:      push    af
 554+ F788 47                                   ld      b,a                                             ; b = 6502 X reg
 555+ F789 C5                                   push    bc                                              ; save Y reg
 556+ F78A
 557+ F78A              ;------------------------------------------------------------------------------------------------------------------------------------
 558+ F78A              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 559+ F78A              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 560+ F78A ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 561+ F78E CD 64 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 562+ F791                                      ;cp      $FF
 563+ F791                                      ;jr      z,.NoSystemFound
 564+ F791              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 565+ F791
 566+ F791
 567+ F791
 568+ F791              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 569+ F791
 570+ F791 00 00 00...  GalaxyNameCopy          DS      30
 571+ F7AF
 572+ F7AF 1E 00        ExpandAtHLToE:          ld      e,0
 573+ F7B1 7E           .ExpandTokenLoop:       ld      a,(hl)
 574+ F7B2 FE 3E                                cp      ">"
 575+ F7B4 C8                                   ret     z
 576+ F7B5 23                                   inc     hl
 577+ F7B6 16 0A                                ld      d,10
 578+ F7B8 ED 30                                mul
 579+ F7BA D6 30                                sub     "0"
 580+ F7BC 83                                   add     a,e
 581+ F7BD 5F                                   ld      e,a
 582+ F7BE 18 F1                                jr      .ExpandTokenLoop
 583+ F7C0
 584+ F7C0 E5           SelectTokenToHL:        push    hl                                          ;+1
 585+ F7C1 C5                                   push    bc                                          ;+2
 586+ F7C2 CD A2 F6                             call    GalaxyDoRandom
 587+ F7C5 C1                                   pop     bc                                          ;+1
 588+ F7C6 E1                                   pop     hl                                          ;+0
 589+ F7C7 16 00        .CalcOptionAToD:        ld      d,0
 590+ F7C9 FE 33                                cp      $33
 591+ F7CB DA CF F7                             jp      c,.Check66
 592+ F7CE 14           .IsGTE33:               inc     d
 593+ F7CF FE 66        .Check66:               cp      $66
 594+ F7D1 DA D5 F7                             jp      c,.Check99
 595+ F7D4 14           .IsGTE66:               inc     d
 596+ F7D5 FE 99        .Check99:               cp      $99
 597+ F7D7 DA DB F7     .IsGTE99:               jp      c,.CheckCC
 598+ F7DA 14                                   inc     d
 599+ F7DB FE CC        .CheckCC:               cp      $CC
 600+ F7DD 38 01                                jr      c,.TokenIdToAddress
 601+ F7DF 14           .ItGETCC:               inc     d
 602+ F7E0 21 1B EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 603+ F7E3 7B                                   ld      a,e
 604+ F7E4 CB 27                                sla     a                                               ; x 2
 605+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 2
 606+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 4
 607+ F7EA ED 31                                add     hl,a                                            ; hl + a * 6
 608+ F7EC ED 31                                add     hl,a                                            ; hl + a * 8
 609+ F7EE ED 31                                add     hl,a                                            ; hl + a * 10
 610+ F7F0 7A                                   ld      a,d
 611+ F7F1 ED 31                                add     hl,a
 612+ F7F3 ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 613+ F7F5 7E           .LookUpDataFromTable:   ld      a,(hl)
 614+ F7F6 DD 6F                                ld      ixl,a
 615+ F7F8 23                                   inc     hl
 616+ F7F9 7E                                   ld      a,(hl)
 617+ F7FA DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 618+ F7FC DD E5                                push    ix                                              ;+2
 619+ F7FE E1                                   pop     hl                                              ;+1
 620+ F7FF C9                                   ret
 621+ F800              ;------------------------------------------------------------------------------------------------------------------------------------
 622+ F800 E5           ProcessHSymbol:         push    hl                                              ;+1
 623+ F801 D5                                   push    de                                              ;+2
 624+ F802 C5                                   push    bc                                              ;+3
 625+ F803 21 91 F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 626+ F806 FD 54                                ld      d,iyh
 627+ F808 FD 5D                                ld      e,iyl
 628+ F80A CD D0 F6                             call    GalaxyCopyLoop
 629+ F80D FD 62                                ld      iyh,d
 630+ F80F FD 6B                                ld      iyl,e
 631+ F811 C1                                   pop     bc                                              ;+2
 632+ F812 D1                                   pop     de                                              ;+1
 633+ F813 E1                                   pop     hl
 634+ F814 C9                                   ret
 635+ F815              ;------------------------------------------------------------------------------------------------------------------------------------
 636+ F815 E5           ProcessISymbol:         push    hl                                              ;+1
 637+ F816 D5                                   push    de                                              ;+2
 638+ F817 C5                                   push    bc                                              ;+3
 639+ F818 21 91 F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 640+ F81B FD 54                                ld      d,iyh
 641+ F81D FD 5D                                ld      e,iyl
 642+ F81F CD D0 F6                             call    GalaxyCopyLoop
 643+ F822 FD 62                                ld      iyh,d
 644+ F824 FD 6B                                ld      iyl,e
 645+ F826 3E 69                                ld      a,"i"
 646+ F828 EB                                   ex      de,hl
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 61                                ld      a,"a"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F 3E 6E                                ld      a,"n"
 653+ F831 77                                   ld      (hl),a
 654+ F832 23                                   inc     hl
 655+ F833 E5                                   push    hl
 656+ F834 FD E1                                pop     iy
 657+ F836 C1                                   pop     bc                                              ;+2
 658+ F837 D1                                   pop     de                                              ;+1
 659+ F838 E1                                   pop     hl                                              ;+0
 660+ F839 C9                                   ret
 661+ F83A              ;------------------------------------------------------------------------------------------------------------------------------------
 662+ F83A E5           ProcessRSymbol:         push    hl                                              ;+1
 663+ F83B D5                                   push    de                                              ;+2
 664+ F83C CD A2 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 665+ F83F E6 03                                and     $03
 666+ F841 47                                   ld      b,a
 667+ F842 04                                   inc     b
 668+ F843 AF                                   xor     a
 669+ F844 4F                                   ld      c,a
 670+ F845 C5           .RLoop:                 push    bc                                              ;+3
 671+ F846 CD A2 F6                             call    GalaxyDoRandom
 672+ F849 C1                                   pop     bc                                              ;+2
 673+ F84A E6 3E                                and     $3E
 674+ F84C 21 A0 E8                             ld      hl,GalaxyName_digrams
 675+ F84F ED 31                                add     hl,a
 676+ F851 7E                                   ld      a,(hl)
 677+ F852 FE 41                                cp      "A"
 678+ F854 38 01                                jr      c,.NotLowercase
 679+ F856 81                                   add     a,c
 680+ F857 FD 77 00     .NotLowercase:          ld      (iy+0),a
 681+ F85A 23                                   inc     hl
 682+ F85B FD 23                                inc     iy
 683+ F85D 0E 20                                ld      c,$20               ; fixed force to lower case
 684+ F85F 7E                                   ld      a,(hl)
 685+ F860 FE 41                                cp      "A"
 686+ F862 38 01                                jr      c,.NotLowercase2
 687+ F864 81                                   add     a,c
 688+ F865 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 689+ F868 FD 23                                inc     iy
 690+ F86A 10 D9                                djnz    .RLoop
 691+ F86C D1                                   pop     de                                              ;+1
 692+ F86D E1                                   pop     hl                                              ;+0
 693+ F86E C9                                   ret
 694+ F86F              ;------------------------------------------------------------------------------------------------------------------------------------
 695+ F86F ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 696+ F873 CD 64 FC                             call    galaxy_system_under_cursor
 697+ F876 CD BF FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 698+ F879 21 7F E8                             ld      hl,GalaxyExpandedName
 699+ F87C 11 91 F7                             ld      de,GalaxyNameCopy
 700+ F87F CD D0 F6                             call    GalaxyCopyLoop
 701+ F882 21 91 F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 702+ F885 CD 5A F7                             call    GalaxyCapitaliseString
 703+ F888                                      ; we will also capitalise the local copy here later
 704+ F888 21 DE F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 705+ F88B 11 B2 F2                             ld      de,GalaxyPlanetSource
 706+ F88E CD D0 F6                             call    GalaxyCopyLoop
 707+ F891 AF           .ClearOutDescription:   xor     a
 708+ F892 21 85 F1                             ld      hl,GalaxyPlanetDescription
 709+ F895 77                                   ld      (hl),a
 710+ F896 11 86 F1                             ld      de,GalaxyPlanetDescription+1
 711+ F899 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 712+ F89C ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 713+ F89E CD 6C F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 714+ F8A1 21 B2 F2                             ld      hl,GalaxyPlanetSource
 715+ F8A4 FD 21 85 F1                          ld      iy,GalaxyPlanetDescription
 716+ F8A8              ; At this point we are now prepped ready to expand the string to a full description
 717+ F8A8              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 718+ F8A8 7E           .ExpRecursive:          ld      a,(hl)
 719+ F8A9 FE 00                                cp      0
 720+ F8AB CA F0 F8                             jp      z,.ExpansionComplete
 721+ F8AE FE 3C                                cp      "<"
 722+ F8B0 C2 C3 F8                             jp      nz,.NotToken
 723+ F8B3 23           .ItIsAToken:            inc     hl
 724+ F8B4 CD AF F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 725+ F8B7 23                                   inc     hl
 726+ F8B8 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 727+ F8B9 CD C0 F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 728+ F8BC CD A8 F8                             call    .ExpRecursive
 729+ F8BF E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 730+ F8C0 C3 A8 F8     .TokenNextIteration:    jp      .ExpRecursive
 731+ F8C3              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 732+ F8C3 FE 25        .NotToken:              cp      "%"
 733+ F8C5 C2 E7 F8                             jp      nz,.RegularCharacter
 734+ F8C8 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 735+ F8C9 7E                                   ld      a,(hl)
 736+ F8CA FE 48                                cp      "H"
 737+ F8CC 20 07                                jr      nz,.IsItI
 738+ F8CE 23           .ItIsAnH:               inc     hl
 739+ F8CF CD 00 F8                             call    ProcessHSymbol
 740+ F8D2 C3 A8 F8                             jp      .ExpRecursive
 741+ F8D5 FE 49        .IsItI:                 cp      "I"
 742+ F8D7 20 07                                jr      nz,.ItIsR
 743+ F8D9 23           .ItIsAnI:               inc     hl
 744+ F8DA CD 15 F8                             call    ProcessISymbol
 745+ F8DD C3 A8 F8                             jp      .ExpRecursive
 746+ F8E0 CD 3A F8     .ItIsR:                 call    ProcessRSymbol
 747+ F8E3 23                                   inc     hl
 748+ F8E4 C3 A8 F8     .SystemNextIteration:   jp      .ExpRecursive
 749+ F8E7 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 750+ F8EA FD 23                                inc     iy
 751+ F8EC 23                                   inc     hl
 752+ F8ED C3 A8 F8     .RegularNextIteration:  jp      .ExpRecursive
 753+ F8F0 AF           .ExpansionComplete:     xor     a
 754+ F8F1 FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 755+ F8F4 C9                                   ret
 756+ F8F5              ;----------------------------------------------------------------------------------------------------------------------------------
 757+ F8F5 3A 0C E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 758+ F8F8 3C                                   inc     a
 759+ F8F9 67                                   ld      h,a
 760+ F8FA 0E 00                                ld      c,0
 761+ F8FC 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 762+ F8FE 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 763+ F901 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 764+ F905 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 765+ F908 FE 00                                cp      0
 766+ F90A                                      ; Check Cash TODO
 767+ F90A 28 00                                jr      z,.CheckTechLevel
 768+ F90C DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 769+ F90F BC                                   cp      h
 770+ F910                                      ;jr      nc,.DoNotShowItem
 771+ F910 DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 772+ F913 FE 00                                cp      0
 773+ F915                                    ;  jr      z,.DoNotShowItem
 774+ F915 79           .ShowItem:              ld      a,c
 775+ F916 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 776+ F919 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 777+ F91C FE 00                                cp      EQ_FUEL
 778+ F91E 28 18                                jr      z,.FuelLevel
 779+ F920 FE 01                                cp      EQ_MISSILE
 780+ F922 28 25                                jr      z,.CountMissiles
 781+ F924 21 25 89     .IsFitted:              ld      hl,EquipmentFitted
 782+ F927 ED 31                                add     hl,a
 783+ F929 7E                                   ld      a,(hl)
 784+ F92A FE 00                                cp      0
 785+ F92C 28 05                                jr      z,.NotFittedItem
 786+ F92E 3E 2A        .FittedItem:            ld      a,"*"
 787+ F930 C3 5A F9                             jp      .MoreToDoCheck
 788+ F933 3E 2D        .NotFittedItem:         ld      a,"-"
 789+ F935 C3 5A F9                             jp      .MoreToDoCheck
 790+ F938 3A 0A 89     .FuelLevel:             ld      a,(Fuel)
 791+ F93B FE 46                                cp      MaxFuelLevel
 792+ F93D 28 05                                jr      z,.FullFuel
 793+ F93F 3E 2D        .NotFullFuel:           ld      a,"-"
 794+ F941 C3 5A F9                             jp      .MoreToDoCheck
 795+ F944 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 796+ F946 C3 5A F9                             jp      .MoreToDoCheck
 797+ F949 3A 0A 84     .CountMissiles:         ld      a,(NbrMissiles)
 798+ F94C FE 00                                cp      0
 799+ F94E 28 05                                jr      z,.NoMissiles
 800+ F950 C6 30                                add     "0"
 801+ F952 C3 5A F9                             jp      .MoreToDoCheck
 802+ F955 3E 2D        .NoMissiles:            ld      a,"-"
 803+ F957 C3 5A F9                             jp      .MoreToDoCheck
 804+ F95A DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 805+ F95D 0C                                   inc     c
 806+ F95E DD 19                                add     ix,de
 807+ F960 10 A3                                djnz    .ItemCheckLoop
 808+ F962 C9                                   ret
 809+ F963 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 810+ F965 DD 77 01                             ld      (ix+1),a
 811+ F968 DD 19                                add     ix,de
 812+ F96A 10 99                                djnz    .ItemCheckLoop
 813+ F96C C9                                   ret
 814+ F96D              ;----------------------------------------------------------------------------------------------------------------------------------
 815+ F96D 3A FA E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 816+ F970 B7           .GenerateGovernment:    or      a
 817+ F971 CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 818+ F973 CB 3F                                srl	    a
 819+ F975 CB 3F                                srl	    a                                                   ;
 820+ F977 E6 07                                and     $07                                             ;
 821+ F979 32 0A E9                             ld      (GalaxyDisplayGovernment),a                     ;
 822+ F97C 3A F9 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 823+ F97F E6 07                                and     $07
 824+ F981 47                                   ld      b,a
 825+ F982 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 826+ F985                                      JumpIfAGTENusng 1, .GreaterThan1
 826+ F985 FE 01       >                        cp     1
 826+ F987 D2 93 F9    >                        jp		nc,.GreaterThan1
 827+ F98A 78           .OneOrZero:             ld      a,b
 828+ F98B F6 02                                or      2
 829+ F98D 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 830+ F990 C3 97 F9                             jp      .GenerateTechLevel
 831+ F993 78           .GreaterThan1:          ld      a,b
 832+ F994 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 833+ F997 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 834+ F999 47                                   ld      b,a
 835+ F99A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 836+ F99D E6 03                                and     $03
 837+ F99F 80                                   add     b
 838+ F9A0 47                                   ld      b,a
 839+ F9A1 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 840+ F9A4 4F                                   ld      c,a
 841+ F9A5 CB 2F                                sra     a
 842+ F9A7 80                                   add     b
 843+ F9A8 47                                   ld      b,a
 844+ F9A9 79                                   ld      a,c
 845+ F9AA E6 01                                and     $1
 846+ F9AC 80                                   add     b
 847+ F9AD 32 0C E9                             ld      (GalaxyDisplayTekLevel),a
 848+ F9B0 CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 849+ F9B2 CB 27                                sla     a
 850+ F9B4 21 0A E9                             ld      hl,GalaxyDisplayGovernment
 851+ F9B7 86                                   add     a,(hl)
 852+ F9B8 47                                   ld      b,a
 853+ F9B9 3A 0B E9                             ld      a,(GalaxyDisplayEconomy)
 854+ F9BC 80                                   add     a,b
 855+ F9BD 3C                                   inc     a
 856+ F9BE 32 0D E9                             ld      (GalaxyDisplayPopulation),a
 857+ F9C1 3A 0B E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 858+ F9C4 EE 07                                xor     7
 859+ F9C6 C6 03                                add     3
 860+ F9C8 57                                   ld      d,a
 861+ F9C9 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 862+ F9CC C6 04                                add     4
 863+ F9CE 5F                                   ld      e,a
 864+ F9CF ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 865+ F9D1 3A 0D E9                             ld      a,(GalaxyDisplayPopulation)
 866+ F9D4 26 00                                ld      h,0
 867+ F9D6 6F                                   ld      l,a
 868+ F9D7 CD A2 96                             call    mulDEbyHL
 869+ F9DA EB                                   ex      de,hl
 870+ F9DB                                      ShiftDELeft1
 870+ F9DB CB 23       >			   sla e
 870+ F9DD CB 12       >			   rl  d
 871+ F9DF                                      ShiftDELeft1
 871+ F9DF CB 23       >			   sla e
 871+ F9E1 CB 12       >			   rl  d
 872+ F9E3                                      ShiftDELeft1
 872+ F9E3 CB 23       >			   sla e
 872+ F9E5 CB 12       >			   rl  d
 873+ F9E7 ED 53 0E E9                          ld      (GalaxyDisplayProductivity),de
 874+ F9EB 3A FD E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 875+ F9EE E6 0F                                and		$0F
 876+ F9F0 C6 0B                                add     11
 877+ F9F2 47                                   ld      b,a
 878+ F9F3 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 879+ F9F6 4F                                   ld      c,a
 880+ F9F7 ED 43 10 E9                          ld      (GalaxyDisplayRadius),bc
 881+ F9FB C9                                   ret
 882+ F9FC
 883+ F9FC              galaxy_master_seed_to_system:
 884+ F9FC 21 10 E0     		ld		hl,galaxy_master_seed
 885+ F9FF 11 88 83     		ld		de,SystemSeed
 886+ FA02              galaxy_copy_seed:
 887+ FA02 ED A0        		ldi
 888+ FA04 ED A0        		ldi
 889+ FA06 ED A0        		ldi
 890+ FA08 ED A0        		ldi
 891+ FA0A ED A0        		ldi
 892+ FA0C ED A0        		ldi
 893+ FA0E C9           		ret
 894+ FA0F
 895+ FA0F              galaxy_master_to_galaxy_working:
 896+ FA0F 21 10 E0     		ld		hl,galaxy_master_seed
 897+ FA12 11 F8 E8     		ld		de,GalaxyWorkingSeed
 898+ FA15 18 EB        		jr		galaxy_copy_seed
 899+ FA17
 900+ FA17              galaxy_master_to_galaxy_naming:
 901+ FA17 21 10 E0     		ld		hl,galaxy_master_seed
 902+ FA1A 11 FE E8     		ld		de,GalaxyNamingSeed
 903+ FA1D 18 E3        		jr		galaxy_copy_seed
 904+ FA1F
 905+ FA1F              working_seed_to_galaxy_working:
 906+ FA1F 21 95 84             ld      hl,WorkingSeeds
 907+ FA22 11 F8 E8     		ld		de,GalaxyWorkingSeed
 908+ FA25 18 DB        		jr		galaxy_copy_seed
 909+ FA27
 910+ FA27              working_seed_to_galaxy_naming:
 911+ FA27 21 95 84             ld      hl,WorkingSeeds
 912+ FA2A 11 FE E8     		ld		de,GalaxyNamingSeed
 913+ FA2D 18 D3        		jr		galaxy_copy_seed
 914+ FA2F
 915+ FA2F              galaxy_ix_seed_to_galaxy_naming:
 916+ FA2F DD E5                push    ix
 917+ FA31 E1                   pop     hl
 918+ FA32 11 FE E8     		ld		de,GalaxyNamingSeed
 919+ FA35 18 CB        		jr		galaxy_copy_seed
 920+ FA37
 921+ FA37
 922+ FA37              galaxy_working_seed_to_galaxy_naming:
 923+ FA37 21 F8 E8             ld      hl,GalaxyWorkingSeed
 924+ FA3A 11 FE E8     		ld		de,GalaxyNamingSeed
 925+ FA3D 18 C3        		jr		galaxy_copy_seed
 926+ FA3F
 927+ FA3F              galaxy_working_seed_to_system:
 928+ FA3F 21 F8 E8     		ld		hl,GalaxyWorkingSeed
 929+ FA42 11 88 83     		ld		de,SystemSeed
 930+ FA45 18 BB        		jr		galaxy_copy_seed
 931+ FA47
 932+ FA47              system_seed_to_galaxy_working:
 933+ FA47 21 88 83     		ld		hl,SystemSeed
 934+ FA4A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 935+ FA4D 18 B3        		jr		galaxy_copy_seed
 936+ FA4F
 937+ FA4F
 938+ FA4F              system_seed_to_galaxy_naming:
 939+ FA4F 21 88 83     		ld		hl,SystemSeed
 940+ FA52 11 FE E8     		ld		de,GalaxyNamingSeed
 941+ FA55 18 AB        		jr		galaxy_copy_seed
 942+ FA57
 943+ FA57              ix_seed_to_galaxy_working:
 944+ FA57 DD E5                push    ix
 945+ FA59 E1                   pop     hl
 946+ FA5A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 947+ FA5D 18 A3        		jr		galaxy_copy_seed
 948+ FA5F
 949+ FA5F              ; Here we twist just once rather than the usual4 for a system
 950+ FA5F 3A FE E8     NextGalaxyNamingSeed:   ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 951+ FA62 B7                                   or		a							; clear carry flag
 952+ FA63 21 00 E9                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 953+ FA66 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 954+ FA67 47                                   ld		b,a							; partial sum lo [x]
 955+ FA68              ; y = b + d	+ carry
 956+ FA68 3A FF E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 957+ FA6B 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 958+ FA6E 8E                                   adc		a,(hl)						; note add with carry
 959+ FA6F 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 960+ FA70 3A 00 E9                             ld		a,(GalaxyNamingSeed+2)
 961+ FA73 32 FE E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 962+ FA76 3A 01 E9                             ld		a,(GalaxyNamingSeed+3)
 963+ FA79 32 FF E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 964+ FA7C 3A 03 E9                             ld		a,(GalaxyNamingSeed+5)
 965+ FA7F 32 01 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 966+ FA82 3A 02 E9                             ld		a,(GalaxyNamingSeed+4)
 967+ FA85 32 00 E9                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 968+ FA88 B7                                   or		a
 969+ FA89 78                                   ld		a,b
 970+ FA8A 21 00 E9                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 971+ FA8D 86                                   add	    a,(hl)
 972+ FA8E 32 02 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 973+ FA91 79                                   ld		a,c
 974+ FA92 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 975+ FA95 8E                                   adc		a,(hl)
 976+ FA96 32 03 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 977+ FA99 C9                                   ret
 978+ FA9A
 979+ FA9A
 980+ FA9A 3A 03 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 981+ FA9D E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 982+ FA9F FE 00                                cp		0					            ; 0 = skip 2 chars
 983+ FAA1 28 12                                jr		z,.SkipPhrase
 984+ FAA3 C6 0C                                add		a,12
 985+ FAA5 CB 27                                sla		a					            ; phrase = (a+12)*2
 986+ FAA7 21 A0 E8                             ld		hl,GalaxyName_digrams
 987+ FAAA ED 31                                add		hl,a
 988+ FAAC ED A0                                ldi
 989+ FAAE 7E                                   ld		a,(hl)
 990+ FAAF FE 3F                                cp		'?'
 991+ FAB1 28 02                                jr		z,.SkipPhrase
 992+ FAB3 ED A0        .AddExtra:              ldi
 993+ FAB5 D5           .SkipPhrase:            push	de
 994+ FAB6 CD 5F FA                             call	NextGalaxyNamingSeed
 995+ FAB9 D1                                   pop		de
 996+ FABA C9                                   ret
 997+ FABB
 998+ FABB              ; takes location in BC, finds seed and expands the name
 999+ FABB ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
1000+ FABF CD 64 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
1001+ FAC2 FE 00                                cp      0
1002+ FAC4 C8                                   ret     z
1003+ FAC5
1004+ FAC5 CD 27 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1005+ FAC8 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1006+ FACB
1007+ FACB CD 17 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1008+ FACE C3 E0 FA                             jp      GalaxyDigramNamingSeed
1009+ FAD1
1010+ FAD1 CD 37 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1011+ FAD4 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1012+ FAD7
1013+ FAD7 CD 2F FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1014+ FADA C3 E0 FA                             jp      GalaxyDigramNamingSeed
1015+ FADD
1016+ FADD CD 4F FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1017+ FAE0
1018+ FAE0 11 7F E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1019+ FAE3 06 03        GalaxyDigramToDE:       ld		b,3
1020+ FAE5 3A FE E8                             ld		a,(GalaxyNamingSeed)
1021+ FAE8 E6 40                                and		$40
1022+ FAEA 28 03                                jr		z,.SmallSizeName
1023+ FAEC CD 9A FA     .LargeSizeName:         call	GalaxyNamingLoop
1024+ FAEF CD 9A FA     .SmallSizeName:         call	GalaxyNamingLoop
1025+ FAF2 CD 9A FA                             call	GalaxyNamingLoop
1026+ FAF5 CD 9A FA                             call	GalaxyNamingLoop
1027+ FAF8 EB           .DoneName:              ex		de,hl
1028+ FAF9 36 00                                ld		(hl),0
1029+ FAFB EB                                   ex		de,hl
1030+ FAFC AF                                   xor     a
1031+ FAFD 3D                                   dec     a
1032+ FAFE C9                                   ret
1033+ FAFF              ;reorte X 13 Y 97
1034+ FAFF
1035+ FAFF              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFF 3A 5D E8     is_system_found:        ld      a,(GalaxySearchLength)
1037+ FB02                                      ;dec     a                       ; as we won't check the /0 just first match
1038+ FB02 4F                                   ld      c,a                     ; will always be max of 32 as that is what length routine does
1039+ FB03 06 00                                ld      b,0                     ; so we can use cpir
1040+ FB05 11 5E E8     .readyToSearch:         ld      de,GalaxySearchString   ; hl = string we are serching
1041+ FB08 21 7F E8                             ld      hl,GalaxyExpandedName   ; de = the expanded galaxy name
1042+ FB0B 7E           .searchLoop:            ld      a,(hl)                  ; if the string is too short then maybe there is a longer one to find
1043+ FB0C                                      JumpIfAIsZero   .noMatch        ; but
1043+ FB0C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1043+ FB0D CA 1B FB    >                        jp	    z, .noMatch
1044+ FB10 1A                                   ld      a,(de)                  ; get the character to search for
1045+ FB11 ED A1                                cpi                             ; compare with value in A from HL
1046+ FB13 20 06                                jr      nz,.noMatch
1047+ FB15 13                                   inc     de                      ; move to next search character
1048+ FB16 E2 1E FB                             jp      po, .matched            ; if c = 0 then we have hit the bingpot
1049+ FB19 18 F0                                jr      .searchLoop             ; else keep looping
1050+ FB1B              .noMatch:               SetAFalse
1050+ FB1B 3E FF       >                        ld      a,$FF
1051+ FB1D C9                                   ret
1052+ FB1E              .matched:               SetATrue
1052+ FB1E AF          >                        xor     a
1053+ FB1F C9                                   ret
1054+ FB20
1055+ FB20 21 5E E8     set_galaxy_search_len:  ld      hl,GalaxySearchString
1056+ FB23 06 00                                ld      b,0
1057+ FB25 0E 20                                ld      c,32                    ; limiter for missing /0
1058+ FB27 7E           .SearchLoop:            ld      a,(hl)
1059+ FB28                                      JumpIfAIsZero .foundLength
1059+ FB28 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1059+ FB29 CA 34 FB    >                        jp	    z, .foundLength
1060+ FB2C 04                                   inc     b
1061+ FB2D 0D                                   dec     c
1062+ FB2E 28 04                                jr      z,.foundLength
1063+ FB30 23                                   inc     hl
1064+ FB31 C3 27 FB                             jp      .SearchLoop
1065+ FB34 78           .foundLength:           ld      a,b
1066+ FB35 32 5D E8                             ld      (GalaxySearchLength),a
1067+ FB38 C9                                   ret
1068+ FB39
1069+ FB39              ; find system by searching for GalaxySearchString
1070+ FB39 CD 20 FB     find_system_by_name:    call    set_galaxy_search_len
1071+ FB3C AF                                   xor     a
1072+ FB3D 32 A1 83                             ld      (XSAV),a
1073+ FB40 DD 21 16 E0                          ld      ix,galaxy_data
1074+ FB44 CD 57 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1075+ FB47 CD D1 FA                             call    GalaxyDigramWorkingSeed
1076+ FB4A CD FF FA                             call    is_system_found
1077+ FB4D                                      JumpIfATrue .FoundAtIX
1077+ FB4D A7          >                        and     a
1077+ FB4E CA 6A FB    >                        jp      z, .FoundAtIX
1078+ FB51 3A A1 83     .notFoundYet:           ld      a,(XSAV)
1079+ FB54 3D                                   dec     a
1080+ FB55 28 10                                jr      z,.NoMoreSystems
1081+ FB57 32 A1 83     .moreToSearch:          ld      (XSAV),a
1082+ FB5A DD E5                                push    ix
1083+ FB5C E1                                   pop     hl
1084+ FB5D ED 34 08 00                          add     hl,8
1085+ FB61 E5                                   push    hl
1086+ FB62 DD E1                                pop     ix
1087+ FB64 C3 44 FB                             jp      .nextSystem
1088+ FB67 3E FF        .NoMoreSystems:         ld      a,$FF
1089+ FB69 C9                                   ret
1090+ FB6A CD 57 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1091+ FB6D C9                                   ret
1092+ FB6E              ;----------------------------------------------------------------------------------------------------------------------------------
1093+ FB6E 00 00        nearestfound:           DW 0
1094+ FB70              ; In here de carries current nearest and loads into nearest found
1095+ FB70              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1096+ FB70 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1097+ FB74 FD 26 00                             ld      iyh,0
1098+ FB77 FD 2E 78                             ld      iyl,120
1099+ FB7A ED 43 6E FB                          ld      (nearestfound),bc
1100+ FB7E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1101+ FB81 5F                                   ld      e,a                             ; e= current seed x
1102+ FB82                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1102+ FB82 B9          >                        cp      c
1102+ FB83 DA 94 FB    >                        jp		c, nearestXPosLT
1103+ FB86 D5           nearestXPosGTE:         push    de                              ;
1104+ FB87 26 00                                ld      h,0                             ;
1105+ FB89 6F                                   ld      l,a                             ; hl = seed x
1106+ FB8A 16 00                                ld      d,0                             ;
1107+ FB8C 59                                   ld      e,c                             ; de = nearest x
1108+ FB8D B7                                   or      a                               ;
1109+ FB8E ED 52                                sbc     hl,de                           ; hl = distance between the two
1110+ FB90 D1                                   pop     de
1111+ FB91 C3 9E FB                             jp      nearestDistXPos
1112+ FB94 D5           nearestXPosLT:          push    de                              ;
1113+ FB95 26 00                                ld      h,0                             ;
1114+ FB97 69                                   ld      l,c                             ; hl = nearest x
1115+ FB98 16 00                                ld      d,0                             ;
1116+ FB9A B7                                   or      a                               ; de = seed x
1117+ FB9B ED 52                                sbc     hl,de                           ;
1118+ FB9D D1                                   pop     de                              ; hl = distance between the two
1119+ FB9E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1120+ FB9F FD BD                                cp      iyl                             ; under initial threshold?
1121+ FBA1 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1122+ FBA3               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1123+ FBA3 DD 7E 01                             ld      a,(ix+1)                        ;
1124+ FBA6 57                                   ld      d,a                             ; d = seed y
1125+ FBA7                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1125+ FBA7 B8          >                        cp      b
1125+ FBA8 DA BC FB    >                        jp		c, nearestYPosLT
1126+ FBAB E5           nearestYPosGTE:         push    hl                              ; save current x distance
1127+ FBAC D5                                   push    de                              ;
1128+ FBAD 26 00                                ld      h,0                             ;
1129+ FBAF 6F                                   ld      l,a                             ; hl = seed y
1130+ FBB0 16 00                                ld      d,0                             ;
1131+ FBB2 58                                   ld      e,b                             ; de = nearest y
1132+ FBB3 B7                                   or      a                               ;
1133+ FBB4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1134+ FBB6 7D                                   ld      a,l
1135+ FBB7 D1                                   pop     de
1136+ FBB8 E1                                   pop     hl
1137+ FBB9 C3 CA FB                             jp      nearestDistYPos
1138+ FBBC E5           nearestYPosLT:          push    hl                              ; save current x distance
1139+ FBBD D5                                   push    de                              ;
1140+ FBBE 26 00                                ld      h,0                             ;
1141+ FBC0 68                                   ld      l,b                             ; hl = nearest y
1142+ FBC1 5A                                   ld      e,d                             ;
1143+ FBC2 16 00                                ld      d,0                             ; de = seed y
1144+ FBC4 B7                                   or      a                               ;
1145+ FBC5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1146+ FBC7 7D                                   ld      a,l
1147+ FBC8 D1                                   pop     de
1148+ FBC9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1149+ FBCA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1150+ FBCC 30 12                                jr      nc, find_nearest_miss
1151+ FBCE 26 00                                ld      h,0                             ; hl = distance for x
1152+ FBD0 ED 31                                add     hl,a                            ; adding distance y
1153+ FBD2 7D                                   ld      a,l                             ; and copy it to l
1154+ FBD3 FD BD                                cp      iyl                             ; is the pair under distance
1155+ FBD5 30 09                                jr      nc, find_nearest_miss           ;
1156+ FBD7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1157+ FBD9 ED 53 6E FB                          ld      (nearestfound),de               ;
1158+ FBDD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1158+ FBDD FE 02       >                        cp    2
1158+ FBDF D8          >                        ret	 c
1159+ FBE0 DD E5        find_nearest_miss:      push     ix
1160+ FBE2 E1                                   pop      hl
1161+ FBE3 ED 34 08 00                          add      hl,8
1162+ FBE7 E5                                   push     hl
1163+ FBE8 DD E1                                pop      ix
1164+ FBEA FD 25                                dec     iyh
1165+ FBEC FD 7C                                ld      a,iyh
1166+ FBEE                                      JumpIfAIsNotZero find_nearest_loop
1166+ FBEE A7          >                        and     a
1166+ FBEF C2 7E FB    >                        jp	    nz,find_nearest_loop
1167+ FBF2 ED 4B 6E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1168+ FBF6 C9                                   ret
1169+ FBF7              ;----------------------------------------------------------------------------------------------------------------------------------
1170+ FBF7              ; Does a sqare root distance
1171+ FBF7 16 00        galaxy_find_distance:   ld      d,0
1172+ FBF9 26 00                                ld      h,0
1173+ FBFB 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1174+ FBFE 47                                   ld      b,a
1175+ FBFF 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1176+ FC02 B8                                   cp      b
1177+ FC03 20 0E                                jr      nz,.NotSame
1178+ FC05 C5           .XSame:                 push    bc
1179+ FC06 F5                                   push    af
1180+ FC07 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1181+ FC0A 47                                   ld      b,a
1182+ FC0B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1183+ FC0E B8                                   cp      b
1184+ FC0F C1                                   pop     bc
1185+ FC10 F1                                   pop     af
1186+ FC11 28 49                                jr      z,.ZeroDistance
1187+ FC13 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1188+ FC15 68           .DestinationLTPresentX: ld      l,b
1189+ FC16 5F                                   ld      e,a
1190+ FC17 B7                                   or      a
1191+ FC18 ED 52                                sbc     hl,de
1192+ FC1A C3 22 FC                             jp      .SquareXDist
1193+ FC1D 6F           .DestinationGTEPresentX:ld      l,a
1194+ FC1E 58                                   ld      e,b
1195+ FC1F B7                                   or      a
1196+ FC20 ED 52                                sbc     hl,de
1197+ FC22 55           .SquareXDist:           ld      d,l
1198+ FC23 5D                                   ld      e,l
1199+ FC24 ED 30                                mul
1200+ FC26 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1201+ FC29 47                                   ld      b,a
1202+ FC2A 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1203+ FC2D B8                                   cp      b
1204+ FC2E 30 0B                                jr      nc,.DestinationGTEPresentY
1205+ FC30 4F           .DestinationLTPresentY: ld      c,a
1206+ FC31 68                                   ld      l,b
1207+ FC32 06 00                                ld      b,0
1208+ FC34 26 00                                ld      h,0
1209+ FC36 ED 42                                sbc     hl,bc
1210+ FC38 C3 43 FC                             jp      .DestinationYDone
1211+ FC3B 48           .DestinationGTEPresentY:ld      c,b
1212+ FC3C 6F                                   ld      l,a
1213+ FC3D 06 00                                ld      b,0
1214+ FC3F 26 00                                ld      h,0
1215+ FC41 ED 42                                sbc     hl,bc
1216+ FC43 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1217+ FC45 7D                                   ld      a,l
1218+ FC46 EB                                   ex      de,hl
1219+ FC47 57                                   ld      d,a
1220+ FC48 5F                                   ld      e,a
1221+ FC49 ED 30        .SquareYDist:           mul
1222+ FC4B 19                                   add     hl,de
1223+ FC4C EB                                   ex      de,hl
1224+ FC4D CD 75 97                             call    asm_sqrt            ; distance via pythagoras in hl
1225+ FC50                                      ShiftHLLeft1
1225+ FC50 CB 25       >			   sla l
1225+ FC52 CB 14       >			   rl  h
1226+ FC54                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1226+ FC54 CB 25       >			   sla l
1226+ FC56 CB 14       >			   rl  h
1227+ FC58 22 30 84                             ld      (Distance),hl       ; Distance is now caulated distance
1228+ FC5B C9                                   ret
1229+ FC5C AF           .ZeroDistance:          xor     a
1230+ FC5D 32 30 84                             ld      (Distance),a
1231+ FC60 32 31 84                             ld      (Distance+1),a
1232+ FC63 C9                                   ret
1233+ FC64              ;----------------------------------------------------------------------------------------------------------------------------------
1234+ FC64              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds
1235+ FC64              ; this needs to chagne to galaxyresultseed or galayxworkingseed
1236+ FC64 AF           galaxy_system_under_cursor:xor     a
1237+ FC65 32 A1 83                             ld		(XSAV),a
1238+ FC68 DD 21 16 E0                          ld      ix,galaxy_data
1239+ FC6C 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1240+ FC6F DD E5                                push    ix
1241+ FC71 7D                                   ld      a,l
1242+ FC72 DD BE 03                             cp      (ix+3)                          ; seed x
1243+ FC75 20 14                                jr      nz,.ItsNotThisX
1244+ FC77 7C                                   ld      a,h
1245+ FC78 DD BE 01                             cp      (ix+1)                          ; seed x
1246+ FC7B 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1247+ FC7D DD E5                                push    ix
1248+ FC7F E1                                   pop     hl
1249+ FC80 11 95 84                             ld      de,WorkingSeeds                 ;' copy to wkring Seeds
1250+ FC83 CD 9A 89                             call    copy_seed
1251+ FC86 3E FF                                ld      a,$FF
1252+ FC88 DD E1                                pop     ix
1253+ FC8A C9                                   ret
1254+ FC8B E1           .ItsNotThisX:           pop     hl
1255+ FC8C ED 34 08 00                          add     hl,8
1256+ FC90 E5                                   push    hl
1257+ FC91 DD E1                                pop     ix
1258+ FC93 3A A1 83                             ld		a,(XSAV)
1259+ FC96 3D                                   dec		a
1260+ FC97 32 A1 83                             ld      (XSAV),a
1261+ FC9A FE 00                                cp		0
1262+ FC9C C8                                   ret		z
1263+ FC9D 18 CD                                jr		.GCCounterLoop
1264+ FC9F              ;----------------------------------------------------------------------------------------------------------------------------------
1265+ FC9F 21 88 83     SeedGalaxy:             ld      hl,SystemSeed                   ; First copy system seed to galaxy master
1266+ FCA2 11 10 E0                             ld      de,galaxy_master_seed           ; .
1267+ FCA5 ED A0                                ldi                                     ; .
1268+ FCA7 ED A0                                ldi                                     ; .
1269+ FCA9 ED A0                                ldi                                     ; .
1270+ FCAB ED A0                                ldi                                     ; .
1271+ FCAD ED A0                                ldi                                     ; .
1272+ FCAF ED A0                                ldi                                     ; .
1273+ FCB1 DD 21 16 E0                          ld      ix,galaxy_data                  ; Generate system seed data for each planet
1274+ FCB5 AF                                   xor		a                               ; .
1275+ FCB6 32 A1 83                             ld		(XSAV),a                        ; .
1276+ FCB9 DD E5        SeedGalaxyLoop:         push    ix                              ; .
1277+ FCBB D1                                   pop     de                              ; .
1278+ FCBC 21 88 83                             ld      hl,SystemSeed                   ; .
1279+ FCBF CD 9A 89                             call    copy_seed                       ; .
1280+ FCC2 DD E5                                push    ix                              ; .
1281+ FCC4 E1                                   pop     hl                              ; .
1282+ FCC5 ED 34 08 00                          add     hl,8                            ; .
1283+ FCC9 E5                                   push    hl                              ; .
1284+ FCCA DD E1                                pop     ix                              ; .
1285+ FCCC CD CF 89                             call    next_system_seed                ; .
1286+ FCCF 3A A1 83                             ld		a,(XSAV)                        ; .
1287+ FCD2 3D                                   dec		a                               ; .
1288+ FCD3 FE 00                                cp		0                               ; .
1289+ FCD5 C8                                   ret		z                               ; .
1290+ FCD6 32 A1 83                             ld		(XSAV),a                        ; .
1291+ FCD9 18 DE                                jr      SeedGalaxyLoop                  ; .
1292+ FCDB C9                                   ret
1293+ FCDC
1294+ FCDC              GalaxyBankSize   EQU $ - galaxy_page_marker
1295+ FCDC
# file closed: ./Universe/Galaxy/galaxy_data.asm
 974  FCDC                                      DISPLAY "Bank ",BankGalaxyData0," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData0"
 975  FCDC              ; Bank 92  ------------------------------------------------------------------------------------------------------------------------
 976  FCDC                                      SLOT    GalaxyDataAddr
 977  FCDC                                      PAGE    BankGalaxyData1
 978  FCDC                                      ORG GalaxyDataAddr, BankGalaxyData1
 979  E000 FF           GALAXYDATABlock1         DB $FF
 980  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
 981  0000                                      DISPLAY "Bank ",BankGalaxyData1," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData1"
 982  0000              ; Bank 93  ------------------------------------------------------------------------------------------------------------------------
 983  0000                                      SLOT    GalaxyDataAddr
 984  0000                                      PAGE    BankGalaxyData2
 985  0000                                      ORG GalaxyDataAddr, BankGalaxyData2
 986  E000 FF           GALAXYDATABlock2        DB $FF
 987  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
 988  0000                                      DISPLAY "Bank ",BankGalaxyData2," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData2"
 989  0000              ; Bank 94  ------------------------------------------------------------------------------------------------------------------------
 990  0000                                      SLOT    GalaxyDataAddr
 991  0000                                      PAGE    BankGalaxyData3
 992  0000                                      ORG GalaxyDataAddr, BankGalaxyData3
 993  E000 FF           GALAXYDATABlock3        DB $FF
 994  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
 995  0000                                      DISPLAY "Bank ",BankGalaxyData3," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData3"
 996  0000              ; Bank 95  ------------------------------------------------------------------------------------------------------------------------
 997  0000                                      SLOT    GalaxyDataAddr
 998  0000                                      PAGE    BankGalaxyData4
 999  0000                                      ORG GalaxyDataAddr, BankGalaxyData4
1000  E000 FF           GALAXYDATABlock4        DB $FF
1001  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
1002  0000                                      DISPLAY "Bank ",BankGalaxyData4," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData4"
1003  0000              ; Bank 96  ------------------------------------------------------------------------------------------------------------------------
1004  0000                                      SLOT    GalaxyDataAddr
1005  0000                                      PAGE    BankGalaxyData5
1006  0000                                      ORG GalaxyDataAddr,BankGalaxyData5
1007  E000 FF           GALAXYDATABlock5        DB $FF
1008  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
1009  0000                                      DISPLAY "Bank ",BankGalaxyData5," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData5"
1010  0000              ; Bank 97  ------------------------------------------------------------------------------------------------------------------------
1011  0000                                      SLOT    GalaxyDataAddr
1012  0000                                      PAGE    BankGalaxyData6
1013  0000                                      ORG GalaxyDataAddr,BankGalaxyData6
1014  E000 FF           GALAXYDATABlock6        DB $FF
1015  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
1016  0000                                      DISPLAY "Bank ",BankGalaxyData6," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData6"
1017  0000              ; Bank 98  ------------------------------------------------------------------------------------------------------------------------
1018  0000                                      SLOT    GalaxyDataAddr
1019  0000                                      PAGE    BankGalaxyData7
1020  0000                                      ORG GalaxyDataAddr,BankGalaxyData7
1021  E000 FF           GALAXYDATABlock7        DB $FF
1022  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
1023  0000                                      DISPLAY "Bank ",BankGalaxyData7," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData7"
1024  0000              ; Bank 99  ------------------------------------------------------------------------------------------------------------------------
1025  0000                                      SLOT    MathsTablesAddr
1026  0000                                      PAGE    BankMathsTables
1027  0000                                      ORG     MathsTablesAddr,BankMathsTables
1028  0000                                      INCLUDE "./Maths/logmaths.asm"
# file opened: ./Maths/logmaths.asm
   1+ 0000 4C 6F 67 4D  logmaths_page_marker    DB "LogMaths   PG99"
   1+ 0004 61 74 68 73
   1+ 0008 20 20 20 50
   1+ 000C 47 39 39
   2+ 000F
   3+ 000F EB           AntiLogHL:              ex      de,hl
   4+ 0010 21 05 07                             ld      hl,LogReverseHighByte
   5+ 0013 01 14 02                             ld      bc,LogReverseTableLen
   6+ 0016 7A                                   ld      a,d
   7+ 0017 ED A1        .SearchLoop:            cpi                                     ; first pass index into high byte
   8+ 0019 28 03                                jr      z,.FoundHighByte
   9+ 001B 23                                   inc     hl
  10+ 001C 18 F9                                jr      .SearchLoop
  11+ 001E 23           .FoundHighByte:         inc     hl                              ; now we have high double it for table of words
  12+ 001F 7E                                   ld      a,(hl)                          ; .
  13+ 0020 21 05 05                             ld      hl,LogTable                     ; .
  14+ 0023 ED 31                                add     hl,a                            ; .
  15+ 0025 ED 31                                add     hl,a                            ; .
  16+ 0027 7A           .LookForLowByteLoop:    ld      a,d                             ; search for low byte or change in high byte
  17+ 0028 BE                                   cp      (hl)
  18+ 0029 20 09                                jr      nz,.SkippedPastHigh
  19+ 002B 23                                   inc     hl
  20+ 002C 7B                                   ld      a,e
  21+ 002D                                      JumpIfAGTENusng (hl), .SkippedPastLow
  21+ 002D BE          >                        cp     (hl)
  21+ 002E D2 35 00    >                        jp		nc,.SkippedPastLow
  22+ 0031 C3 27 00                             jp      .LookForLowByteLoop
  23+ 0034
  24+ 0034 2B           .SkippedPastHigh:       dec     hl                              ; for high we are on next word
  25+ 0035 2B           .SkippedPastLow:        dec     hl                              ; for low we are no next byte
  26+ 0036 EB                                   ex      de,hl                           ; move address to de for subtract
  27+ 0037 21 05 05                             ld      hl,LogTable                     ; subtract from log table address
  28+ 003A                                      ClearCarryFlag
  28+ 003A B7          >                        or a
  29+ 003B ED 52                                sbc     hl,de                           ; so nwo we have nbr of words, i.e anito log * 2
  30+ 003D                                      ShiftHLRight1                           ; now must be >= 255
  30+ 003D CB 3C       >			   srl h
  30+ 003F CB 1D       >			   rr  l
  31+ 0041 7D                                   ld      a,l
  32+ 0042 C9                                   ret
  33+ 0043
  34+ 0043              AEquAmul256DivBLogLT:   JumpIfAIsZero   .ResultIsZero
  34+ 0043 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  34+ 0044 CA 6C 00    >                        jp	    z, .ResultIsZero
  35+ 0047 21 05 05                             ld      hl,LogTable                     ; de = log a
  36+ 004A ED 31                                add     hl,a                            ; .
  37+ 004C ED 31                                add     hl,a                            ; .
  38+ 004E 5E                                   ld      e,(hl)                          ; .
  39+ 004F 23                                   inc     hl                              ; .
  40+ 0050 56                                   ld      d,(hl)                          ; .
  41+ 0051 21 05 05                             ld      hl,LogTable                     ; hl = log b
  42+ 0054 78                                   ld      a,b                             ; .
  43+ 0055 ED 31                                add     hl,a                            ; .
  44+ 0057 ED 31                                add     hl,a                            ; .
  45+ 0059 7E                                   ld      a,(hl)                          ; .
  46+ 005A 23                                   inc     hl                              ; .
  47+ 005B 66                                   ld      h,(hl)                          ; .
  48+ 005C 6F                                   ld      l,a                             ; .
  49+ 005D                                      ClearCarryFlag                          ;
  49+ 005D B7          >                        or a
  50+ 005E EB                                   ex      de,hl                           ; now hl = log a and de = log b
  51+ 005F ED 52                                sbc     hl,de                           ; hl = log a - log b
  52+ 0061 7C                                   ld      a,h                             ; .
  53+ 0062 21 05 03                             ld      hl,AnitLogODDTable               ; hl = anti log (log a - log b)
  54+ 0065 ED 31                                add     hl,a                            ; which is also a / b
  55+ 0067 ED 31                                add     hl,a                            ; .
  56+ 0069 7E                                   ld      a,(hl)                          ; .
  57+ 006A                                      ClearCarryFlag                          ;
  57+ 006A B7          >                        or a
  58+ 006B C9                                   ret
  59+ 006C              .ResultIsZero:          ClearCarryFlag
  59+ 006C B7          >                        or a
  60+ 006D                                      ZeroA
  60+ 006D AF          >                        xor a
  61+ 006E C9                                   ret
  62+ 006F
  63+ 006F              AEquAmul256DivBLog:     JumpIfAIsZero   .ResultIsZero
  63+ 006F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  63+ 0070 CA A6 00    >                        jp	    z, .ResultIsZero
  64+ 0073                                      JumpIfAGTENusng d, AEquAmul256DivBLogLT
  64+ 0073 BA          >                        cp     d
  64+ 0074 D2 43 00    >                        jp		nc,AEquAmul256DivBLogLT
  65+ 0077 21 05 05                             ld      hl,LogTable                     ; de = log a
  66+ 007A ED 31                                add     hl,a                            ; .
  67+ 007C ED 31                                add     hl,a                            ; .
  68+ 007E 5E                                   ld      e,(hl)                          ; .
  69+ 007F 23                                   inc     hl                              ; .
  70+ 0080 56                                   ld      d,(hl)                          ; .
  71+ 0081 21 05 05                             ld      hl,LogTable                     ; hl = log b
  72+ 0084 78                                   ld      a,b                             ; .
  73+ 0085 ED 31                                add     hl,a                            ; .
  74+ 0087 ED 31                                add     hl,a                            ; .
  75+ 0089 7E                                   ld      a,(hl)                          ; .
  76+ 008A 23                                   inc     hl                              ; .
  77+ 008B 66                                   ld      h,(hl)                          ; .
  78+ 008C 6F                                   ld      l,a                             ; .
  79+ 008D                                      ClearCarryFlag                          ;
  79+ 008D B7          >                        or a
  80+ 008E EB                                   ex      de,hl                           ; now hl = log a and de = log b
  81+ 008F ED 52                                sbc     hl,de                           ; hl = log a - log b
  82+ 0091 38 0B                                jr      c,.ResultIsOne                  ; .
  83+ 0093 7C                                   ld      a,h                             ; .
  84+ 0094 21 05 01                             ld      hl,AntiLogTable                 ; hl = anti log (log a - log b)
  85+ 0097 ED 31                                add     hl,a                            ; which is also a / b
  86+ 0099 ED 31                                add     hl,a                            ; .
  87+ 009B 7E                                   ld      a,(hl)                          ; .
  88+ 009C                                      ClearCarryFlag                          ;
  88+ 009C B7          >                        or a
  89+ 009D C9                                   ret
  90+ 009E              .ResultIsOne:           ClearCarryFlag
  90+ 009E B7          >                        or a
  91+ 009F 3E FF                                ld      a,$FF
  92+ 00A1 C9                                   ret
  93+ 00A2              .ResultIsInfinte:       SetCarryFlag
  93+ 00A2 37          >                        scf
  94+ 00A3 3E FF                                ld      a,$FF
  95+ 00A5 C9                                   ret
  96+ 00A6              .ResultIsZero:          ClearCarryFlag
  96+ 00A6 B7          >                        or a
  97+ 00A7 C9                                   ret
  98+ 00A8
  99+ 00A8              AEquAmul256Div197LogLT: JumpIfAIsZero   .ResultIsZero
  99+ 00A8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  99+ 00A9 CA C8 00    >                        jp	    z, .ResultIsZero
 100+ 00AC 21 05 05                             ld      hl,LogTable                     ; point to log a in LogTable
 101+ 00AF ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 102+ 00B1 ED 31                                add     hl,a
 103+ 00B3 5E                                   ld      e,(hl)                          ; de = log a
 104+ 00B4 23                                   inc     hl                              ; .
 105+ 00B5 56                                   ld      d,(hl)                          ; .
 106+ 00B6 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 107+ 00B9                                      ClearCarryFlag
 107+ 00B9 B7          >                        or a
 108+ 00BA EB                                   ex      hl,de                           ; hl = log a, de = log 197
 109+ 00BB ED 52                                sbc     hl,de
 110+ 00BD 7C                                   ld      a,h
 111+ 00BE 21 05 03                             ld      hl,AnitLogODDTable
 112+ 00C1 ED 31                                add     hl,a
 113+ 00C3 ED 31                                add     hl,a
 114+ 00C5 7E                                   ld      a,(hl)
 115+ 00C6                                      ClearCarryFlag
 115+ 00C6 B7          >                        or a
 116+ 00C7 C9                                   ret
 117+ 00C8              .ResultIsZero:          ClearCarryFlag
 117+ 00C8 B7          >                        or a
 118+ 00C9                                      ZeroA
 118+ 00C9 AF          >                        xor a
 119+ 00CA C9                                   ret
 120+ 00CB
 121+ 00CB
 122+ 00CB              AEquAmul256Div197Log:   JumpIfAIsZero   .ResultIsZero
 122+ 00CB A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 122+ 00CC CA F5 00    >                        jp	    z, .ResultIsZero
 123+ 00CF                                      JumpIfAGTENusng d, AEquAmul256Div197LogLT
 123+ 00CF BA          >                        cp     d
 123+ 00D0 D2 A8 00    >                        jp		nc,AEquAmul256Div197LogLT
 124+ 00D3 21 05 05                             ld      hl,LogTable                     ; point to log a in LogTable
 125+ 00D6 ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 126+ 00D8 ED 31                                add     hl,a
 127+ 00DA 5E                                   ld      e,(hl)                          ; de = log a
 128+ 00DB 23                                   inc     hl                              ; .
 129+ 00DC 56                                   ld      d,(hl)                          ; .
 130+ 00DD 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 131+ 00E0                                      ClearCarryFlag
 131+ 00E0 B7          >                        or a
 132+ 00E1 EB                                   ex      hl,de                           ; hl = log a, de = log 197
 133+ 00E2 ED 52                                sbc     hl,de
 134+ 00E4 38 0B                                jr      c,.ResultIsOne
 135+ 00E6 7C                                   ld      a,h
 136+ 00E7 21 05 01                             ld      hl,AntiLogTable
 137+ 00EA ED 31                                add     hl,a
 138+ 00EC ED 31                                add     hl,a
 139+ 00EE 7E                                   ld      a,(hl)
 140+ 00EF                                      ClearCarryFlag
 140+ 00EF B7          >                        or a
 141+ 00F0 C9                                   ret
 142+ 00F1              .ResultIsOne:           ClearCarryFlag
 142+ 00F1 B7          >                        or a
 143+ 00F2 3E FF                                ld      a,$FF
 144+ 00F4 C9                                   ret
 145+ 00F5              .ResultIsZero:          ClearCarryFlag
 145+ 00F5 B7          >                        or a
 146+ 00F6 C9                                   ret
 147+ 00F7
 148+ 00F7              AEquAmul256Div197LogSignA:
 149+ 00F7 FD 67                                ld      iyh,a
 150+ 00F9                                      ClearSignBitA
 150+ 00F9 E6 7F       >                        and     SignMask8Bit
 151+ 00FB CD CB 00                             call    AEquAmul256Div197Log
 152+ 00FE 47                                   ld      b,a
 153+ 00FF FD 7C                                ld      a,iyh
 154+ 0101                                      SignBitOnlyA
 154+ 0101 E6 80       >                        and     SignOnly8Bit
 155+ 0103 B0                                   or      b
 156+ 0104 C9                                   ret
# file closed: ./Maths/logmaths.asm
1029  0105                                      INCLUDE "./Tables/antilogtable.asm"
# file opened: ./Tables/antilogtable.asm
   1+ 0105 01 00 01 00  AntiLogTable:           DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
   1+ 0109 01 00 01 00
   1+ 010D 01 00 01 00
   1+ 0111 01 00 01 00
   1+ 0115 01 00 01 00
   1+ 0119 01 00 01 00
   1+ 011D 01 00 01 00
   1+ 0121 01 00 01 00
   2+ 0125 01 00 01 00                          DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
   2+ 0129 01 00 01 00
   2+ 012D 01 00 01 00
   2+ 0131 01 00 01 00
   2+ 0135 01 00 01 00
   2+ 0139 01 00 01 00
   2+ 013D 01 00 01 00
   2+ 0141 01 00 01 00
   3+ 0145 02 00 02 00                          DW $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
   3+ 0149 02 00 02 00
   3+ 014D 02 00 02 00
   3+ 0151 02 00 02 00
   3+ 0155 02 00 02 00
   3+ 0159 02 00 02 00
   3+ 015D 02 00 02 00
   3+ 0161 02 00 02 00
   4+ 0165 02 00 02 00                          DW $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03
   4+ 0169 02 00 03 00
   4+ 016D 03 00 03 00
   4+ 0171 03 00 03 00
   4+ 0175 03 00 03 00
   4+ 0179 03 00 03 00
   4+ 017D 03 00 03 00
   4+ 0181 03 00 03 00
   5+ 0185 04 00 04 00                          DW $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $05, $05, $05, $05, $05
   5+ 0189 04 00 04 00
   5+ 018D 04 00 04 00
   5+ 0191 04 00 04 00
   5+ 0195 04 00 04 00
   5+ 0199 04 00 05 00
   5+ 019D 05 00 05 00
   5+ 01A1 05 00 05 00
   6+ 01A5 05 00 05 00                          DW $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $07, $07, $07, $07, $07, $07
   6+ 01A9 05 00 06 00
   6+ 01AD 06 00 06 00
   6+ 01B1 06 00 06 00
   6+ 01B5 06 00 06 00
   6+ 01B9 07 00 07 00
   6+ 01BD 07 00 07 00
   6+ 01C1 07 00 07 00
   7+ 01C5 08 00 08 00                          DW $08, $08, $08, $08, $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A, $0B
   7+ 01C9 08 00 08 00
   7+ 01CD 08 00 08 00
   7+ 01D1 09 00 09 00
   7+ 01D5 09 00 09 00
   7+ 01D9 09 00 0A 00
   7+ 01DD 0A 00 0A 00
   7+ 01E1 0A 00 0B 00
   8+ 01E5 0B 00 0B 00                          DW $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0D, $0D, $0D, $0E, $0E, $0E, $0E, $0F, $0F
   8+ 01E9 0B 00 0C 00
   8+ 01ED 0C 00 0C 00
   8+ 01F1 0C 00 0D 00
   8+ 01F5 0D 00 0D 00
   8+ 01F9 0E 00 0E 00
   8+ 01FD 0E 00 0E 00
   8+ 0201 0F 00 0F 00
   9+ 0205 10 00 10 00                          DW $10, $10, $10, $11, $11, $11, $12, $12, $13, $13, $13, $14, $14, $15, $15, $16
   9+ 0209 10 00 11 00
   9+ 020D 11 00 11 00
   9+ 0211 12 00 12 00
   9+ 0215 13 00 13 00
   9+ 0219 13 00 14 00
   9+ 021D 14 00 15 00
   9+ 0221 15 00 16 00
  10+ 0225 16 00 17 00                          DW $16, $17, $17, $18, $18, $19, $19, $1A, $1A, $1B, $1C, $1C, $1D, $1D, $1E, $1F
  10+ 0229 17 00 18 00
  10+ 022D 18 00 19 00
  10+ 0231 19 00 1A 00
  10+ 0235 1A 00 1B 00
  10+ 0239 1C 00 1C 00
  10+ 023D 1D 00 1D 00
  10+ 0241 1E 00 1F 00
  11+ 0245 20 00 20 00                          DW $20, $20, $21, $22, $22, $23, $24, $25, $26, $26, $27, $28, $29, $2A, $2B, $2C
  11+ 0249 21 00 22 00
  11+ 024D 22 00 23 00
  11+ 0251 24 00 25 00
  11+ 0255 26 00 26 00
  11+ 0259 27 00 28 00
  11+ 025D 29 00 2A 00
  11+ 0261 2B 00 2C 00
  12+ 0265 2D 00 2E 00                          DW $2D, $2E, $2F, $30, $31, $32, $33, $34, $35, $36, $38, $39, $3A, $3B, $3D, $3E
  12+ 0269 2F 00 30 00
  12+ 026D 31 00 32 00
  12+ 0271 33 00 34 00
  12+ 0275 35 00 36 00
  12+ 0279 38 00 39 00
  12+ 027D 3A 00 3B 00
  12+ 0281 3D 00 3E 00
  13+ 0285 40 00 41 00                          DW $40, $41, $42, $44, $45, $47, $48, $4A, $4C, $4D, $4F, $51, $52, $54, $56, $58
  13+ 0289 42 00 44 00
  13+ 028D 45 00 47 00
  13+ 0291 48 00 4A 00
  13+ 0295 4C 00 4D 00
  13+ 0299 4F 00 51 00
  13+ 029D 52 00 54 00
  13+ 02A1 56 00 58 00
  14+ 02A5 5A 00 5C 00                          DW $5A, $5C, $5E, $60, $62, $64, $67, $69, $6B, $6D, $70, $72, $75, $77, $7A, $7D
  14+ 02A9 5E 00 60 00
  14+ 02AD 62 00 64 00
  14+ 02B1 67 00 69 00
  14+ 02B5 6B 00 6D 00
  14+ 02B9 70 00 72 00
  14+ 02BD 75 00 77 00
  14+ 02C1 7A 00 7D 00
  15+ 02C5 80 00 82 00                          DW $80, $82, $85, $88, $8B, $8E, $91, $94, $98, $9B, $9E, $A2, $A5, $A9, $AD, $B1
  15+ 02C9 85 00 88 00
  15+ 02CD 8B 00 8E 00
  15+ 02D1 91 00 94 00
  15+ 02D5 98 00 9B 00
  15+ 02D9 9E 00 A2 00
  15+ 02DD A5 00 A9 00
  15+ 02E1 AD 00 B1 00
  16+ 02E5 B5 00 B8 00                          DW $B5, $B8, $BD, $C1, $C5, $C9, $CE, $D2, $D7, $DB, $E0, $E5, $EA, $EF, $F5, $FA
  16+ 02E9 BD 00 C1 00
  16+ 02ED C5 00 C9 00
  16+ 02F1 CE 00 D2 00
  16+ 02F5 D7 00 DB 00
  16+ 02F9 E0 00 E5 00
  16+ 02FD EA 00 EF 00
  16+ 0301 F5 00 FA 00
  17+ 0305
  18+ 0305 01 00 01 00  AnitLogODDTable:        DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ;  0 - 15
  18+ 0309 01 00 01 00
  18+ 030D 01 00 01 00
  18+ 0311 01 00 01 00
  18+ 0315 01 00 01 00
  18+ 0319 01 00 01 00
  18+ 031D 01 00 01 00
  18+ 0321 01 00 01 00
  19+ 0325 01 00 01 00                          DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 16 - 31
  19+ 0329 01 00 01 00
  19+ 032D 01 00 01 00
  19+ 0331 01 00 01 00
  19+ 0335 01 00 01 00
  19+ 0339 01 00 01 00
  19+ 033D 01 00 01 00
  19+ 0341 01 00 01 00
  20+ 0345 02 00 02 00                          DW $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 32 - 47
  20+ 0349 02 00 02 00
  20+ 034D 02 00 02 00
  20+ 0351 02 00 02 00
  20+ 0355 02 00 02 00
  20+ 0359 02 00 02 00
  20+ 035D 02 00 02 00
  20+ 0361 02 00 02 00
  21+ 0365 02 00 02 00                          DW $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 48 - 55
  21+ 0369 02 00 03 00
  21+ 036D 03 00 03 00
  21+ 0371 03 00 03 00
  21+ 0375 03 00 03 00
  21+ 0379 03 00 03 00
  21+ 037D 03 00 03 00
  21+ 0381 03 00 03 00
  22+ 0385 04 00 04 00                          DW $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $05, $05, $05, $05, $05, $05 ; 64 - 71
  22+ 0389 04 00 04 00
  22+ 038D 04 00 04 00
  22+ 0391 04 00 04 00
  22+ 0395 04 00 04 00
  22+ 0399 05 00 05 00
  22+ 039D 05 00 05 00
  22+ 03A1 05 00 05 00
  23+ 03A5 05 00 05 00                          DW $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $07, $07, $07, $07, $07, $07 ; 80 - 87
  23+ 03A9 05 00 06 00
  23+ 03AD 06 00 06 00
  23+ 03B1 06 00 06 00
  23+ 03B5 06 00 06 00
  23+ 03B9 07 00 07 00
  23+ 03BD 07 00 07 00
  23+ 03C1 07 00 07 00
  24+ 03C5 08 00 08 00                          DW $08, $08, $08, $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A, $0A, $0B ; 96 -
  24+ 03C9 08 00 08 00
  24+ 03CD 08 00 09 00
  24+ 03D1 09 00 09 00
  24+ 03D5 09 00 09 00
  24+ 03D9 0A 00 0A 00
  24+ 03DD 0A 00 0A 00
  24+ 03E1 0A 00 0B 00
  25+ 03E5 0B 00 0B 00                          DW $0B, $0B, $0B, $0C, $0C, $0C, $0D, $0D, $0D, $0D, $0E, $0E, $0E, $0F, $0F, $0F ; 112
  25+ 03E9 0B 00 0C 00
  25+ 03ED 0C 00 0C 00
  25+ 03F1 0D 00 0D 00
  25+ 03F5 0D 00 0D 00
  25+ 03F9 0E 00 0E 00
  25+ 03FD 0E 00 0F 00
  25+ 0401 0F 00 0F 00
  26+ 0405 10 00 10 00                          DW $10, $10, $10, $11, $11, $12, $12, $12, $13, $13, $14, $14, $14, $15, $15, $16 ; 128
  26+ 0409 10 00 11 00
  26+ 040D 11 00 12 00
  26+ 0411 12 00 12 00
  26+ 0415 13 00 13 00
  26+ 0419 14 00 14 00
  26+ 041D 14 00 15 00
  26+ 0421 15 00 16 00
  27+ 0425 16 00 17 00                          DW $16, $17, $17, $18, $18, $19, $1A, $1A, $1B, $1B, $1C, $1D, $1D, $1E, $1E, $1F ; 144
  27+ 0429 17 00 18 00
  27+ 042D 18 00 19 00
  27+ 0431 1A 00 1A 00
  27+ 0435 1B 00 1B 00
  27+ 0439 1C 00 1D 00
  27+ 043D 1D 00 1E 00
  27+ 0441 1E 00 1F 00
  28+ 0445 20 00 21 00                          DW $20, $21, $21, $22, $23, $24, $24, $25, $26, $27, $28, $29, $29, $2A, $2B, $2C ; 160
  28+ 0449 21 00 22 00
  28+ 044D 23 00 24 00
  28+ 0451 24 00 25 00
  28+ 0455 26 00 27 00
  28+ 0459 28 00 29 00
  28+ 045D 29 00 2A 00
  28+ 0461 2B 00 2C 00
  29+ 0465 2D 00 2E 00                          DW $2D, $2E, $2F, $30, $31, $32, $34, $35, $36, $37, $38, $3A, $3B, $3C, $3D, $3F ; 176
  29+ 0469 2F 00 30 00
  29+ 046D 31 00 32 00
  29+ 0471 34 00 35 00
  29+ 0475 36 00 37 00
  29+ 0479 38 00 3A 00
  29+ 047D 3B 00 3C 00
  29+ 0481 3D 00 3F 00
  30+ 0485 40 00 42 00                          DW $40, $42, $43, $45, $46, $48, $49, $4B, $4C, $4E, $50, $52, $53, $55, $57, $59 ; 192
  30+ 0489 43 00 45 00
  30+ 048D 46 00 48 00
  30+ 0491 49 00 4B 00
  30+ 0495 4C 00 4E 00
  30+ 0499 50 00 52 00
  30+ 049D 53 00 55 00
  30+ 04A1 57 00 59 00
  31+ 04A5 5B 00 5D 00                          DW $5B, $5D, $5F, $61, $63, $65, $68, $6A, $6C, $6F, $71, $74, $76, $79, $7B, $7E ; 208
  31+ 04A9 5F 00 61 00
  31+ 04AD 63 00 65 00
  31+ 04B1 68 00 6A 00
  31+ 04B5 6C 00 6F 00
  31+ 04B9 71 00 74 00
  31+ 04BD 76 00 79 00
  31+ 04C1 7B 00 7E 00
  32+ 04C5 81 00 84 00                          DW $81, $84, $87, $8A, $8D, $90, $93, $96, $99, $9D, $A0, $A4, $A7, $AB, $AF, $B3 ; 224
  32+ 04C9 87 00 8A 00
  32+ 04CD 8D 00 90 00
  32+ 04D1 93 00 96 00
  32+ 04D5 99 00 9D 00
  32+ 04D9 A0 00 A4 00
  32+ 04DD A7 00 AB 00
  32+ 04E1 AF 00 B3 00
  33+ 04E5 B6 00 BA 00                          DW $B6, $BA, $BF, $C3, $C7, $CB, $D0, $D4, $D9, $DE, $E3, $E8, $ED, $F2, $F7, $FD ; 240 - 255
  33+ 04E9 BF 00 C3 00
  33+ 04ED C7 00 CB 00
  33+ 04F1 D0 00 D4 00
  33+ 04F5 D9 00 DE 00
  33+ 04F9 E3 00 E8 00
  33+ 04FD ED 00 F2 00
  33+ 0501 F7 00 FD 00
  34+ 0505
# file closed: ./Tables/antilogtable.asm
1030  0505                                      INCLUDE "./Tables/logtable.asm"
# file opened: ./Tables/logtable.asm
   1+ 0505 00 00        LogTable:               DW $0000                                                            ; 0
   2+ 0507 00 00 06 20                          DW $0000, $2006, $320F, $400D, $4AEC, $5216, $59C2, $6013           ; 8
   2+ 050B 0F 32 0D 40
   2+ 050F EC 4A 16 52
   2+ 0513 C2 59 13 60
   3+ 0517 1E 65 F2 6A                          DW $651E, $6AF2, $6E9A, $721C, $7680, $79C9, $7DFB, $801A           ; 16
   3+ 051B 9A 6E 1C 72
   3+ 051F 80 76 C9 79
   3+ 0523 FB 7D 1A 80
   4+ 0527 27 82 25 85                          DW $8227, $8525, $8715, $8AF9, $8CD2, $8EA0, $9066, $9223           ; 24
   4+ 052B 15 87 F9 8A
   4+ 052F D2 8C A0 8E
   4+ 0533 66 90 23 92
   5+ 0537 D8 94 86 96                          DW $94D8, $9686, $982E, $99CF, $9B6B, $9D02, $9E93, $A020           ; 32
   5+ 053B 2E 98 CF 99
   5+ 053F 6B 9B 02 9D
   5+ 0543 93 9E 20 A0
   6+ 0547 A9 A1 2E A2                          DW $A1A9, $A22E, $A4AE, $A52C, $A6A5, $A71C, $A98F, $AA00           ; 40
   6+ 054B AE A4 2C A5
   6+ 054F A5 A6 1C A7
   6+ 0553 8F A9 00 AA
   7+ 0557 6D AB D8 AC                          DW $AB6D, $ACD8, $AD41, $AEA7, $AF0B, $B06C, $B1CC, $B229           ; 48
   7+ 055B 41 AD A7 AE
   7+ 055F 0B AF 6C B0
   7+ 0563 CC B1 29 B2
   8+ 0567 85 B3 DF B4                          DW $B385, $B4DF, $B537, $B68D, $B7E1, $B834, $B986, $B9D6           ; 56
   8+ 056B 37 B5 8D B6
   8+ 056F E1 B7 34 B8
   8+ 0573 86 B9 D6 B9
   9+ 0577 25 BA 72 BB                          DW $BA25, $BB72, $BCBE, $BD08, $BD52, $BE9A, $BFE1, $C027           ; 64
   9+ 057B BE BC 08 BD
   9+ 057F 52 BD 9A BE
   9+ 0583 E1 BF 27 C0
  10+ 0587 6C C0 B0 C1                          DW $C06C, $C1B0, $C2F2, $C234, $C375, $C4B5, $C4F4, $C532           ; 72
  10+ 058B F2 C2 34 C2
  10+ 058F 75 C3 B5 C4
  10+ 0593 F4 C4 32 C5
  11+ 0597 6F C6 AC C6                          DW $C66F, $C6AC, $C7E7, $C722, $C85C, $C996, $C9CE, $CA06           ; 80
  11+ 059B E7 C7 22 C7
  11+ 059F 5C C8 96 C9
  11+ 05A3 CE C9 06 CA
  12+ 05A7 3D CA 74 CB                          DW $CA3D, $CB74, $CCAA, $CCDF, $CD13, $CD47, $CE7B, $CEAD           ; 88
  12+ 05AB AA CC DF CC
  12+ 05AF 13 CD 47 CD
  12+ 05B3 7B CE AD CE
  13+ 05B7 E0 CF 11 CF                          DW $CFE0, $CF11, $D042, $D073, $D1A3, $D1D2, $D201, $D230           ; 96
  13+ 05BB 42 D0 73 D0
  13+ 05BF A3 D1 D2 D1
  13+ 05C3 01 D2 30 D2
  14+ 05C7 5E D3 8B D3                          DW $D35E, $D38B, $D4B9, $D4E5, $D511, $D53D, $D568, $D693           ; 104
  14+ 05CB B9 D4 E5 D4
  14+ 05CF 11 D5 3D D5
  14+ 05D3 68 D5 93 D6
  15+ 05D7 BE D6 E8 D7                          DW $D6BE, $D7E8, $D712, $D83B, $D864, $D98C, $D9B5, $D9DD           ; 112
  15+ 05DB 12 D7 3B D8
  15+ 05DF 64 D8 8C D9
  15+ 05E3 B5 D9 DD D9
  16+ 05E7 04 DA 2B DA                          DW $DA04, $DA2B, $DB52, $DB78, $DB9E, $DCC4, $DCEA, $DD0F           ; 120
  16+ 05EB 52 DB 78 DB
  16+ 05EF 9E DB C4 DC
  16+ 05F3 EA DC 0F DD
  17+ 05F7 34 DD 58 DD                          DW $DD34, $DD58, $DE7D, $DEA1, $DEC4, $DFE8, $DF0B, $E02E           ; 128
  17+ 05FB 7D DE A1 DE
  17+ 05FF C4 DE E8 DF
  17+ 0603 0B DF 2E E0
  18+ 0607 50 E0 72 E0                          DW $E050, $E072, $E194, $E1B6, $E1D8, $E2F9, $E21A, $E23B           ; 136
  18+ 060B 94 E1 B6 E1
  18+ 060F D8 E1 F9 E2
  18+ 0613 1A E2 3B E2
  19+ 0617 5B E3 7C E3                          DW $E35B, $E37C, $E39C, $E4BC, $E4DB, $E4FB, $E51A, $E539           ; 144
  19+ 061B 9C E3 BC E4
  19+ 061F DB E4 FB E4
  19+ 0623 1A E5 39 E5
  20+ 0627 57 E5 76 E6                          DW $E557, $E676, $E694, $E6B2, $E7D0, $E7EE, $E70C, $E729           ; 152
  20+ 062B 94 E6 B2 E6
  20+ 062F D0 E7 EE E7
  20+ 0633 0C E7 29 E7
  21+ 0637 46 E8 63 E8                          DW $E846, $E863, $E880, $E99C, $E9B9, $E9D5, $EAF1, $EA0D           ; 160
  21+ 063B 80 E8 9C E9
  21+ 063F B9 E9 D5 E9
  21+ 0643 F1 EA 0D EA
  22+ 0647 28 EA 44 EA                          DW $EA28, $EA44, $EB5F, $EB7A, $EB95, $ECB0, $ECCB, $ECE5           ; 168
  22+ 064B 5F EB 7A EB
  22+ 064F 95 EB B0 EC
  22+ 0653 CB EC E5 EC
  23+ 0657 00 EC 1A ED                          DW $EC00, $ED1A, $ED34, $ED4E, $ED68, $EE81, $EE9B, $EEB4           ; 176
  23+ 065B 34 ED 4E ED
  23+ 065F 68 ED 81 EE
  23+ 0663 9B EE B4 EE
  24+ 0667 CD EE E6 EF                          DW $EECD, $EFE6, $EFFF, $EF18, $EF30, $F049, $F061, $F079           ; 184
  24+ 066B FF EF 18 EF
  24+ 066F 30 EF 49 F0
  24+ 0673 61 F0 79 F0
  25+ 0677 91 F1 A9 F1                          DW $F191, $F1A9, $F1C1, $F1D9, $F1F0, $F208, $F21F, $F236           ; 192
  25+ 067B C1 F1 D9 F1
  25+ 067F F0 F1 08 F2
  25+ 0683 1F F2 36 F2
  26+ 0687 4E F2 64 F3                          DW $F24E, $F364, $F37B, $F392, $F3A9, $F4BF, $F4D5, $F4EC           ; 200
  26+ 068B 7B F3 92 F3
  26+ 068F A9 F3 BF F4
  26+ 0693 D5 F4 EC F4
  27+ 0697 02 F4 18 F5                          DW $F402, $F518, $F52E, $F544, $F559, $F56F, $F685, $F69A           ; 208
  27+ 069B 2E F5 44 F5
  27+ 069F 59 F5 6F F5
  27+ 06A3 85 F6 9A F6
  28+ 06A7 AF F6 C4 F6                          DW $F6AF, $F6C4, $F7DA, $F7EF, $F703, $F718, $F72D, $F842           ; 216
  28+ 06AB DA F7 EF F7
  28+ 06AF 03 F7 18 F7
  28+ 06B3 2D F7 42 F8
  29+ 06B7 56 F8 6B F8                          DW $F856, $F86B, $F87F, $F993, $F9A7, $F9BB, $F9CF, $F9E3           ; 224
  29+ 06BB 7F F8 93 F9
  29+ 06BF A7 F9 BB F9
  29+ 06C3 CF F9 E3 F9
  30+ 06C7 F7 FA 0B FA                          DW $FAF7, $FA0B, $FA1E, $FA32, $FA45, $FB58, $FB6C, $FB7F           ; 232
  30+ 06CB 1E FA 32 FA
  30+ 06CF 45 FA 58 FB
  30+ 06D3 6C FB 7F FB
  31+ 06D7 92 FB A5 FB                          DW $FB92, $FBA5, $FCB8, $FCCB, $FCDE, $FCF0, $FC03, $FD16           ; 240
  31+ 06DB B8 FC CB FC
  31+ 06DF DE FC F0 FC
  31+ 06E3 03 FC 16 FD
  32+ 06E7 28 FD 3A FD                          DW $FD28, $FD3A, $FD4D, $FD5F, $FD71, $FE83, $FE95, $FEA7           ; 248
  32+ 06EB 4D FD 5F FD
  32+ 06EF 71 FD 83 FE
  32+ 06F3 95 FE A7 FE
  33+ 06F7 B9 FE CB FE                          DW $FEB9, $FECB, $FFDD, $FFEE, $FF00, $FF11, $FF23                  ; 255
  33+ 06FB DD FF EE FF
  33+ 06FF 00 FF 11 FF
  33+ 0703 23 FF
  34+ 0705
  35+ 0705 00 00 00 00  LogReverseHighByte:     DW $00, 000, $20, 002, $32, 003, $40, 004, $4A, 005, $52, 006
  35+ 0709 20 00 02 00
  35+ 070D 32 00 03 00
  35+ 0711 40 00 04 00
  35+ 0715 4A 00 05 00
  35+ 0719 52 00 06 00
  36+ 071D 59 00 07 00                          DW $59, 007, $60, 008, $65, 009, $6A, 010, $6E, 011, $72, 012
  36+ 0721 60 00 08 00
  36+ 0725 65 00 09 00
  36+ 0729 6A 00 0A 00
  36+ 072D 6E 00 0B 00
  36+ 0731 72 00 0C 00
  37+ 0735 76 00 0D 00                          DW $76, 013, $79, 014, $7D, 015, $80, 016, $82, 017, $85, 018
  37+ 0739 79 00 0E 00
  37+ 073D 7D 00 0F 00
  37+ 0741 80 00 10 00
  37+ 0745 82 00 11 00
  37+ 0749 85 00 12 00
  38+ 074D 87 00 13 00                          DW $87, 019, $8A, 020, $8C, 021, $8E, 022, $90, 023, $92, 024
  38+ 0751 8A 00 14 00
  38+ 0755 8C 00 15 00
  38+ 0759 8E 00 16 00
  38+ 075D 90 00 17 00
  38+ 0761 92 00 18 00
  39+ 0765 94 00 19 00                          DW $94, 025, $96, 026, $98, 027, $99, 028, $9B, 029, $9D, 030
  39+ 0769 96 00 1A 00
  39+ 076D 98 00 1B 00
  39+ 0771 99 00 1C 00
  39+ 0775 9B 00 1D 00
  39+ 0779 9D 00 1E 00
  40+ 077D 9E 00 1F 00                          DW $9E, 031, $A0, 032, $A1, 033, $A2, 034, $A4, 035, $A5, 036
  40+ 0781 A0 00 20 00
  40+ 0785 A1 00 21 00
  40+ 0789 A2 00 22 00
  40+ 078D A4 00 23 00
  40+ 0791 A5 00 24 00
  41+ 0795 A6 00 25 00                          DW $A6, 037, $A7, 038, $A9, 039, $AA, 040, $AB, 041, $AC, 042
  41+ 0799 A7 00 26 00
  41+ 079D A9 00 27 00
  41+ 07A1 AA 00 28 00
  41+ 07A5 AB 00 29 00
  41+ 07A9 AC 00 2A 00
  42+ 07AD AD 00 2B 00                          DW $AD, 043, $AE, 044, $AF, 045, $B0, 046, $B1, 047, $B2, 048
  42+ 07B1 AE 00 2C 00
  42+ 07B5 AF 00 2D 00
  42+ 07B9 B0 00 2E 00
  42+ 07BD B1 00 2F 00
  42+ 07C1 B2 00 30 00
  43+ 07C5 B3 00 31 00                          DW $B3, 049, $B4, 050, $B5, 051, $B6, 052, $B7, 053, $B8, 054
  43+ 07C9 B4 00 32 00
  43+ 07CD B5 00 33 00
  43+ 07D1 B6 00 34 00
  43+ 07D5 B7 00 35 00
  43+ 07D9 B8 00 36 00
  44+ 07DD B9 00 38 00                          DW $B9, 056, $B9, 056, $BA, 057, $BB, 058, $BC, 059, $BD, 060
  44+ 07E1 B9 00 38 00
  44+ 07E5 BA 00 39 00
  44+ 07E9 BB 00 3A 00
  44+ 07ED BC 00 3B 00
  44+ 07F1 BD 00 3C 00
  45+ 07F5 BE 00 3E 00                          DW $BE, 062, $BF, 063, $C0, 064, $C1, 066, $C2, 067, $C3, 069
  45+ 07F9 BF 00 3F 00
  45+ 07FD C0 00 40 00
  45+ 0801 C1 00 42 00
  45+ 0805 C2 00 43 00
  45+ 0809 C3 00 45 00
  46+ 080D C4 00 46 00                          DW $C4, 070, $C5, 072, $C6, 072, $C7, 074, $C8, 076, $C9, 077
  46+ 0811 C5 00 48 00
  46+ 0815 C6 00 48 00
  46+ 0819 C7 00 4A 00
  46+ 081D C8 00 4C 00
  46+ 0821 C9 00 4D 00
  47+ 0825 CA 00 50 00                          DW $CA, 080, $CB, 082, $CC, 083, $CD, 085, $CE, 087, $CF, 088
  47+ 0829 CB 00 52 00
  47+ 082D CC 00 53 00
  47+ 0831 CD 00 55 00
  47+ 0835 CE 00 57 00
  47+ 0839 CF 00 58 00
  48+ 083D D0 00 5A 00                          DW $D0, 090, $D1, 092, $D2, 094, $D3, 097, $D4, 100, $D5, 102
  48+ 0841 D1 00 5C 00
  48+ 0845 D2 00 5E 00
  48+ 0849 D3 00 61 00
  48+ 084D D4 00 64 00
  48+ 0851 D5 00 66 00
  49+ 0855 D6 00 68 00                          DW $D6, 104, $D6, 105, $D7, 106, $D7, 107, $D8, 108, $D8, 109
  49+ 0859 D6 00 69 00
  49+ 085D D7 00 6A 00
  49+ 0861 D7 00 6B 00
  49+ 0865 D8 00 6C 00
  49+ 0869 D8 00 6D 00
  50+ 086D D9 00 6E 00                          DW $D9, 110, $D9, 111, $D9, 112, $DA, 113, $DB, 114, $DC, 117
  50+ 0871 D9 00 6F 00
  50+ 0875 D9 00 70 00
  50+ 0879 DA 00 71 00
  50+ 087D DB 00 72 00
  50+ 0881 DC 00 75 00
  51+ 0885 DD 00 78 00                          DW $DD, 120, $DE, 123, $DF, 126, $E0, 128, $E1, 131, $E2, 134
  51+ 0889 DE 00 7B 00
  51+ 088D DF 00 7E 00
  51+ 0891 E0 00 80 00
  51+ 0895 E1 00 83 00
  51+ 0899 E2 00 86 00
  52+ 089D E3 00 89 00                          DW $E3, 137, $E4, 140, $E5, 143, $E6, 146, $E7, 149, $E8, 153
  52+ 08A1 E4 00 8C 00
  52+ 08A5 E5 00 8F 00
  52+ 08A9 E6 00 92 00
  52+ 08AD E7 00 95 00
  52+ 08B1 E8 00 99 00
  53+ 08B5 E9 00 9C 00                          DW $E9, 156, $EA, 159, $EB, 163, $EC, 166, $ED, 170, $EE, 174
  53+ 08B9 EA 00 9F 00
  53+ 08BD EB 00 A3 00
  53+ 08C1 EC 00 A6 00
  53+ 08C5 ED 00 AA 00
  53+ 08C9 EE 00 AE 00
  54+ 08CD EF 00 B2 00                          DW $EF, 178, $F0, 182, $F1, 185, $F2, 190, $F3, 194, $F4, 198
  54+ 08D1 F0 00 B6 00
  54+ 08D5 F1 00 B9 00
  54+ 08D9 F2 00 BE 00
  54+ 08DD F3 00 C2 00
  54+ 08E1 F4 00 C6 00
  55+ 08E5 F5 00 CA 00                          DW $F5, 202, $F6, 207, $F7, 211, $F8, 216, $F8, 217, $F9, 220
  55+ 08E9 F6 00 CF 00
  55+ 08ED F7 00 D3 00
  55+ 08F1 F8 00 D8 00
  55+ 08F5 F8 00 D9 00
  55+ 08F9 F9 00 DC 00
  56+ 08FD FA 00 E1 00                          DW $FA, 225, $FB, 230, $FB, 233, $FC, 235, $FD, 240, $FE, 246
  56+ 0901 FB 00 E6 00
  56+ 0905 FB 00 E9 00
  56+ 0909 FC 00 EB 00
  56+ 090D FD 00 F0 00
  56+ 0911 FE 00 F6 00
  57+ 0915 FF 00 FB 00                          DW $FF, 251
  58+ 0919              LogReverseTableLen:     EQU $ - LogReverseHighByte
# file closed: ./Tables/logtable.asm
1031  0919                                      DISPLAY "Bank ",BankMathsTables," - Bytes free ",/D, $2000 - ($-MathsTablesAddr), " - BankMathsTables"
1032  0919
1033  0919                  SAVENEX OPEN "EliteN.nex", EliteNextStartup , TopOfStack
1034  0919                  SAVENEX CFG  0,0,0,1
1035  0919                  SAVENEX AUTO
1036  0919                  SAVENEX CLOSE
1037  0919
# file closed: eliteNext.asm
